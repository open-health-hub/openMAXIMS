//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.45 build 2265.21751)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.pathologyresults;

import ims.configuration.gen.ConfigFlag;
import ims.core.charting.vo.DatasetTypeRefVo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.vo.ChartInvestigationCommentsVo;
import ims.core.vo.ChartResultVo;
import ims.core.vo.ChartResultVoCollection;
import ims.core.vo.ChartSpecimenCommentsVo;
import ims.core.vo.ChartTypeDatasetVo;
import ims.core.vo.ChartTypeShortVo;
import ims.core.vo.ChartTypeShortVoCollection;
import ims.core.vo.ChartTypeVo;
import ims.core.vo.ChartValueCommentVo;
import ims.core.vo.ChartValueCommentVoCollection;
import ims.core.vo.ChartValueGroupVo;
import ims.core.vo.ChartValueGroupVoCollection;
import ims.core.vo.ChartValueSetVo;
import ims.core.vo.ChartValueVo;
import ims.core.vo.ChartValueVoCollection;
import ims.core.vo.DataSetTypeVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.lookups.LineType;
import ims.core.vo.lookups.Sex;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.framework.utils.Time;
import ims.ocrr.forms.pathologyresults.GenForm.lyrMainLayer.tabSearchContainer.GrpCriteriaEnumeration;
import ims.ocrr.forms.pathologyresults.GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow;
import ims.ocrr.vo.InvestigationIndexLiteVo;
import ims.ocrr.vo.InvestigationIndexLiteVoCollection;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.OcsPathRadResultVoCollection;
import ims.ocrr.vo.OrderInvestigationChartVo;
import ims.ocrr.vo.OrderResultCommentsVo;
import ims.ocrr.vo.OrderedInvestigationStatusVo;
import ims.ocrr.vo.PathologyResultListShortVo;
import ims.ocrr.vo.PathologyResultListShortVoCollection;
import ims.ocrr.vo.PathologySpecimenLiteVo;
import ims.ocrr.vo.ResultCommentsLiteVo;
import ims.ocrr.vo.ResultCommentsLiteVoCollection;
import ims.ocrr.vo.ResultComponentCommentsVo;
import ims.ocrr.vo.ResultComponentCommentsVoCollection;
import ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo;
import ims.ocrr.vo.SecurityLevelConfigVo;
import ims.ocrr.vo.lookups.AuthorisationOrderStatus;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.InvEventType;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.vo.interfaces.IChartValueSet;

import java.util.ArrayList;
import java.util.HashMap;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	// Set this flat to true ONLY for testing !!!
	private static final boolean	USE_DEMO_VALUES		= false;

	private static final long		serialVersionUID	= 1L;

	private static final Integer	VIEW_GRAPHICAL		= new Integer(0);
	private static final Integer	VIEW_TABULAR		= new Integer(1);	

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}

	protected void onCmbChartingViewValueChanged() throws PresentationLogicException
	{
		if (form.lyrMain().tabCharting().cmbChartingView().getValue() == null)
			form.lyrMain().tabCharting().cmbChartingView().setValue(VIEW_GRAPHICAL);

		if (form.lyrMain().tabCharting().cmbChartingView().getValue().equals(VIEW_TABULAR))
			form.lyrMain().tabCharting().chartingControl().switchToTabularView();
		else
			form.lyrMain().tabCharting().chartingControl().switchToGraphicalView();
		
		form.lyrMain().tabCharting().chartingControl().setOrder(SortOrder.DESCENDING);//WDEV-12614
		
		//WDEV-16883
		if (!selectedPatientSexIsKnown() && VIEW_GRAPHICAL.equals(form.lyrMain().tabCharting().cmbChartingView().getValue())) //WDEV-16883
		{
			engine.showMessage("Patient sex is unknown", "Search Error", MessageButtons.OK, MessageIcon.ERROR);
			return;
		}
		
		populateChartingControl();
		
		form.lyrMain().tabCharting().imbConfigureChart().setVisible(form.lyrMain().tabCharting().cmbChartingView().getValue() == null || form.lyrMain().tabCharting().cmbChartingView().getValue().equals(VIEW_GRAPHICAL));
	}

	protected void onQmbInvestigationTypeTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateInvestigationTypes(value);
	}	

	protected void onImbConfigureChartClick() throws PresentationLogicException
	{
		if (form.lyrMain().tabCharting().chartingControl().canSelectGroups().booleanValue())
			form.lyrMain().tabCharting().chartingControl().selectGroups();
	}

	private boolean hasResults(GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow selectedRow)
	{
		PathologyResultListShortVo resParent = (PathologyResultListShortVo) selectedRow.getValue().getOrderInvestigation();
		if (isResultedStatus(resParent.getOrdInvCurrentStatus().getOrdInvStatus()))
			return true;

		GenForm.lyrMainLayer.tabSearchContainer.grdResultsRowCollection rowColl = selectedRow.getRows();
		for (int i = 0; i < rowColl.size(); i++)
		{
			GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow row = rowColl.get(i);
			PathologyResultListShortVo res = (PathologyResultListShortVo) row.getValue().getOrderInvestigation();
			if (isResultedStatus(res.getOrdInvCurrentStatus().getOrdInvStatus()))
				return true;
		}
		return false;
	}

	private boolean isResultedStatus(OrderInvStatus status)
	{
		if (status.equals(OrderInvStatus.NEW_RESULT) || status.equals(OrderInvStatus.CHECKED) || status.equals(OrderInvStatus.SEEN) 
				|| status.equals(OrderInvStatus.UPDATED_RESULT) || status.equals(OrderInvStatus.UNSEEN) 
				|| status.equals(OrderInvStatus.REVIEW)	|| status.equals(OrderInvStatus.COMPLETE)
				|| status.equals(OrderInvStatus.RESULTED))
		{
			return true;
		}
		return false;
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearControls();
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (validateSearchCriteria())
			search();
	}

	protected void onQmbClinicianTextSubmited(String value) throws PresentationLogicException
	{
		populateClinicians(value);
	}

	private void initialize()
	{
		form.lyrMain().tabCharting().chartingControl().initialize(engine.isDialog());
		
		populateDispipline();
		populateChartTypes();
		form.lyrMain().tabSearch().GroupFilterResults().setValue(GenForm.lyrMainLayer.tabSearchContainer.GroupFilterResultsEnumeration.rdoAll);
		form.lyrMain().tabSearch().GrpCriteria().setValue(GenForm.lyrMainLayer.tabSearchContainer.GrpCriteriaEnumeration.rdoBegins);
		updateTotal(0);

		form.lyrMain().tabCharting().dteChartingStartDate().setValue(new Date().addYear(-1));
		form.lyrMain().tabCharting().dteChartingEndDate().setValue(new Date());

		setupGraphingView();
		
		//security level WDEV-11036
		RoleDisciplineSecurityLevelLiteGCVo voRoleDisciplineSecurityLevels = form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels();
		if(voRoleDisciplineSecurityLevels == null || (voRoleDisciplineSecurityLevels != null &&  voRoleDisciplineSecurityLevels.getIsConfigLoadedIsNotNull() && !voRoleDisciplineSecurityLevels.getIsConfigLoaded().equals(false)))
			form.getGlobalContext().OCRR.setRoleDisciplineSecurityLevels(domain.getRoleDisciplineSecurityLevels(engine.getLoggedInRole()));
		
		form.btnPrint().setEnabled(false);
		
		updatePrintCumulativeButtonStatus();
	}

	private void populateDispipline()
	{
		form.lyrMain().tabSearch().cmbDiscipline().clear();

		ServiceLiteVoCollection discipline = domain.listDiscipline();
		if (discipline == null)
			return;

		for (int x = 0; x < discipline.size(); x++)
		{
			if (discipline.get(x) != null && discipline.get(x).getServiceNameIsNotNull())
			{
				form.lyrMain().tabSearch().cmbDiscipline().newRow(discipline.get(x), discipline.get(x).getServiceName());
			}
		}
	}

	private void clearControls()
	{
		form.lyrMain().tabSearch().dteFrom().setValue(null);
		form.lyrMain().tabSearch().dteTo().setValue(null);
		form.lyrMain().tabSearch().cmbDiscipline().setValue(null);
		form.lyrMain().tabSearch().qmbInvestigationType().clear();
		// form.qmbOrderingLocation().clear();
		form.lyrMain().tabSearch().qmbClinician().clear();
		form.lyrMain().tabSearch().GroupFilterResults().setValue(GenForm.lyrMainLayer.tabSearchContainer.GroupFilterResultsEnumeration.rdoAll);
		form.lyrMain().tabSearch().grdResults().getRows().clear();
		
		updateTotal(0); //WDEV-16981
	}

	private void populateInvestigationTypes(String value)
	{
		form.lyrMain().tabSearch().qmbInvestigationType().clear();
		//InvestigationIndexLiteVoCollection investigations = domain.listInvestigationTypes("%" + value + "%");
		InvestigationIndexLiteVoCollection investigations = domain.listInvestigationTypesSynonyms(value,form.lyrMain().tabSearch().GrpCriteria().getValue().equals(GrpCriteriaEnumeration.rdoBegins));
		if (investigations != null)
		{
			for (int x = 0; x < investigations.size(); x++)
			{
				addInvestigationType(investigations.get(x));
			}

			if (investigations.size() == 1)
				form.lyrMain().tabSearch().qmbInvestigationType().setValue(investigations.get(0));
			else if (investigations.size() > 1)
				form.lyrMain().tabSearch().qmbInvestigationType().showOpened();
		}
	}

	private void addInvestigationType(InvestigationIndexLiteVo investigation)
	{
		if (investigation == null || investigation.getName() == null)
			return;
		form.lyrMain().tabSearch().qmbInvestigationType().newRow(investigation, investigation.getName());
	}

	// private void populateOrderingLocations(String value)
	// {
	// form.qmbOrderingLocation().clear();
	// LocationLiteVoCollection locations = domain.listLocations("%" + value +
	// "%");
	// if(locations != null)
	// {
	// for(int x = 0; x < locations.size(); x++)
	// {
	// addLocation(locations.get(x));
	// }
	//				
	// if(locations.size() == 1)
	// form.qmbOrderingLocation().setValue(locations.get(0));
	// else if(locations.size() > 1)
	// form.qmbOrderingLocation().showOpened();
	// }
	// }
	//	
	// private void addLocation(LocationLiteVo location)
	// {
	// if(location == null || location.getName() == null)
	// return;
	// form.qmbOrderingLocation().newRow(location, location.getName());
	// }

	private void populateClinicians(String value)
	{
		form.lyrMain().tabSearch().qmbClinician().clear();
		HcpLiteVoCollection clinicians = domain.listClinicians("%" + value + "%");
		if (clinicians != null)
		{
			for (int x = 0; x < clinicians.size(); x++)
			{
				addClinician(clinicians.get(x));
			}

			if (clinicians.size() == 1)
				form.lyrMain().tabSearch().qmbClinician().setValue(clinicians.get(0));
			else if (clinicians.size() > 1)
				form.lyrMain().tabSearch().qmbClinician().showOpened();
		}
	}

	private void addClinician(HcpLiteVo hcp)
	{
		if (hcp == null || hcp.getName() == null)
			return;
		form.lyrMain().tabSearch().qmbClinician().newRow(hcp, hcp.getName().toString());//.getSurname() + " " + hcp.getName().getForename());
	}

	private boolean validateSearchCriteria()
	{
		ArrayList<String> errors = new ArrayList<String>();

		// Make a decision as to what should be the mandatory search criteria.
		/*
		 * if(form.dteFrom().getValue() == null) { errors.add("'From' date not
		 * specified."); } if(form.dteTo().getValue() == null) {
		 * errors.add("'To' date not specified."); }
		 * if(form.cmbDiscipline().getValue() == null &&
		 * form.qmbOrderingLocation().getValue() == null) {
		 * errors.add("Discipline or Ordering Location must be specified."); }
		 */
		if (form.lyrMain().tabSearch().dteFrom().getValue() != null && form.lyrMain().tabSearch().dteTo().getValue() != null)
		{
			if (form.lyrMain().tabSearch().dteFrom().getValue().isGreaterThan(form.lyrMain().tabSearch().dteTo().getValue()))
				errors.add("'From' date must not be after 'To' date.");
		}

		if (errors.size() > 0)
		{
			String[] errMsg = new String[errors.size()];
			for (int x = 0; x < errors.size(); x++)
			{
				errMsg[x] = errors.get(x);
			}

			engine.showErrors(errMsg);
			return false;
		}

		return true;
	}

	private void search()
	{
		form.lyrMain().tabSearch().grdResults().getRows().clear();
		PathologyResultListShortVoCollection results;
		try
		{
			results = domain.listResults(form.getGlobalContext().Core.getPatientShort(), form.lyrMain().tabSearch().dteFrom().getValue(), form.lyrMain().tabSearch().dteTo().getValue(), form.lyrMain().tabSearch().qmbInvestigationType().getValue(), form.lyrMain().tabSearch().cmbDiscipline().getValue(), form.lyrMain().tabSearch().qmbClinician().getValue(), new Boolean(form.lyrMain().tabSearch().GroupFilterResults().getValue() == GenForm.lyrMainLayer.tabSearchContainer.GroupFilterResultsEnumeration.rdoResultsOnly));
		}
		catch (DomainInterfaceException e)
		{
			updateTotal(0);
			engine.showMessage(e.getMessage());
			return;
		}

		form.getGlobalContext().OCRR.setResultsForPrint(results);
		
		if (results == null)
		{
			updateTotal(0);
			return;
		}
		
		//WDEV-18295
		String specimenIds = "";
		
		//get all Specimen Worklist Items ids for NON-DFT results
		for (int i = 0; i < results.size(); i++)
		{
			if (results.get(i) != null && results.get(i).getSpecimen() != null)
			{
				for (int j = 0; j < results.get(i).getSpecimen().size(); j++)
				{
					if (results.get(i).getSpecimen().get(j) != null)
					{
						if (specimenIds != "")
							specimenIds = specimenIds + ", ";

						specimenIds = specimenIds + results.get(i).getSpecimen().get(j).getID_OrderSpecimen().toString();
					}
				}
			}
		}
		
		//from the list of Ids, get the specimens with DateToCollectPopulated.
		if (specimenIds != "")
		{
			form.getLocalContext().setWorklistItemsWithDateToCollect(domain.getSpecimensWithDateToCollect(specimenIds));
		}
		
		Integer nNewResUnseenDays = new Integer(ConfigFlag.DOM.OCS_NEWRES_UNSEEN_CUTOFF.getValue());
		Date dateUnseen = new Date().addDay(-1 * nNewResUnseenDays.intValue());

		form.getLocalContext().setHasResults(false);
		for (int x = 0; x < results.size(); x++)
		{
			addResult(results.get(x), dateUnseen);
		}

		cleanUpResultGrid();
		updateTotal(results.size());
		if(form.lyrMain().tabSearch().grdResults().getRows().size() == 0)
		{
			engine.showMessage("No records match your search criteria.");
		}
		
		form.btnPrint().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getHasResults()));
		
	}

	private void updateTotal(int iTotal)
	{
		StringBuffer total = new StringBuffer();
		total.append("<b>");
		total.append("Total: ");
		total.append(iTotal);
		total.append("</b>");
		form.lyrMain().tabSearch().grdResults().setFooterValue(total.toString());
	}

	private void addResult(PathologyResultListShortVo result, Date dateUnseen)
	{
		if (result == null)
			return;
		
			if (isResultedStatus(result.getOrdInvCurrentStatus().getOrdInvStatus()))
			{
				form.getLocalContext().setHasResults(true);
			}
			
		boolean dftInv = isDFT(result);

		//WDEV-11036
		if(form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
		{
			ServiceRefVo voInvService =  result.getInvestigationIsNotNull() && result.getInvestigation().getProviderServiceIsNotNull() && result.getInvestigation().getProviderService().getLocationServiceIsNotNull() && result.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? result.getInvestigation().getProviderService().getLocationService().getService() : null;
			SecurityLevelConfigVo voInvSecurityLevel = result.getInvestigationIsNotNull() && result.getInvestigation().getInvestigationIndexIsNotNull() ? result.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;

			if(!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel, false)) //WDEV-11622
				return;
		}	
		
		GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow parentRow = createOrFindSpecimenGridRow(result);
		if (parentRow == null)
			return;

		GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow row = null;
		if (parentRow.getColTestName() == null)
			row = parentRow;
		else
		{
			row = parentRow.getRows().newRow();
			row.setSelectable(false);
			row.setColProvisonalFinal(result.getResultStatus() != null ? result.getResultStatus().getText() : "");//WDEV-16870
		}

		OcsPathRadResultVo res = new OcsPathRadResultVo();
		res.setCategory(Category.PATHOLOGY);
		res.setOrderInvestigation(result);
		row.setValue(res);
		
		//WDEV-11547
		row.setColResultDetails(result);

		// Test Name
		if (result.getInvestigationIsNotNull() && result.getInvestigation().getInvestigationIndexIsNotNull() && result.getInvestigation().getInvestigationIndex().getNameIsNotNull())
		{
			row.setColTestName(result.getInvestigation().getInvestigationIndex().getName());
		}
		
		// Display Alternate Lab
		if (Boolean.TRUE.equals(ConfigFlag.UI.DISPLAY_SPECIMEN_TYPE_AT_INVESTIGATION_LEVEL.getValue()))
		{
			if(result.getSpecimen() != null && result.getSpecimen().size() > 0 && result.getSpecimen().get(0) != null && !dftInv)
			{
				PathologySpecimenLiteVo specimen = result.getSpecimen().get(0);
				String displayString = specimen.getSpecimenSource().getText() + (specimen.getSiteCdIsNotNull() ? " - " + specimen.getSiteCd().getText() : "");
				
				if (result.getResultSpecimenType() != null)
					displayString += " - " + result.getResultSpecimenType().getText();
				
				row.setColSpecimen(displayString);
				row.setTooltipForColSpecimen(displayString);
			}
		}
		

		// ABN
		if (result.getResultDetails() != null && result.getResultDetails().getPathologyResultDetailsIsNotNull())//WDEV-16232
		{
			for(int i=0; i<result.getResultDetails().getPathologyResultDetails().size(); i++)
			{
				if (result.getResultDetails().getPathologyResultDetails().get(i) != null && result.getResultDetails().getPathologyResultDetails().get(i).getIsAbnormalIsNotNull() && result.getResultDetails().getPathologyResultDetails().get(i).getIsAbnormal().booleanValue())//WDEV-16232
				{
					row.setColABN(form.getImages().Core.CriticalError);
					row.setTooltipForColABN("Abnormal Result");
					
					break;
				}
			}
		}

		// Status
		String szTooltip = "";
		if (result.getOrdInvCurrentStatusIsNotNull() && result.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull())
		{

			OrderInvStatus currStat = result.getOrdInvCurrentStatus().getOrdInvStatus();

			Image image = currStat.getImage();
			szTooltip = generateStatusTooltip(result.getOrdInvCurrentStatus());

			//WDEV-16679
			if (currStat.equals(OrderInvStatus.REVIEW) && result.getAllocatedHCPforReview() != null)
			{
				szTooltip = (szTooltip + "<br><b>Review HCP: </b>" + result.getAllocatedHCPforReview().toString());
			}
			
			if (result.getRepDateTimeIsNotNull() && dateUnseen != null)
			{
				if (currStat.equals(OrderInvStatus.NEW_RESULT) || currStat.equals(OrderInvStatus.UPDATED_RESULT))
				{
					if (result.getRepDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Unseen");
					}
				}
				else if (currStat.equals(OrderInvStatus.REVIEW))
				{
					if (result.getOrdInvCurrentStatus().getChangeDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Requires Attention");
					}
				}
			}
			row.setColStatus(image);
			row.setTooltipForColStatus(szTooltip);

			row.setBackColor(parentRow.getBackColor());
		}
		
		// WDEV-13872
		// Display last comment (with Authoring HCP & Authoring Date + Correction HCP, Correction Date + Correction Reason) 
		if (result.getSpecimenIsNotNull() && result.getSpecimen().size() > 0 && result.getSpecimen().get(0) != null && result.getSpecimen().get(0).getResultConclusionCommentsIsNotNull() && result.getSpecimen().get(0).getResultConclusionComments().size() > 0)
		{
			ResultCommentsLiteVoCollection comments = result.getSpecimen().get(0).getResultConclusionComments();
			
			comments.sort(SortOrder.DESCENDING);
			ResultCommentsLiteVo lastComment = comments.get(0);

			szTooltip += "<br><b>Last Annotation Comment: " + lastComment.getAuthoringInformation().getAuthoringDateTime().toString() + " ";
			szTooltip += lastComment.getAuthoringInformation().getAuthoringHcp().getName().toString() + ":</b> " + lastComment.getComment();
			
			// WDEV-13872 - Append correction
			if (lastComment.getCorrectingDateTimeIsNotNull())
			{
				szTooltip += "<br><b>Corrected " + lastComment.getCorrectingDateTime().toString() + " ";
				szTooltip += lastComment.getCorrectingHcp().getName().toString() + ":</b> " + lastComment.getCorrectionReason();
			}

			row.setTooltipForColStatus(szTooltip);
		}
	}
	
	private boolean isDFT(PathologyResultListShortVo result) 
	{
		if(result == null || result.getInvestigation() == null)
			return false;
		
		if(InvEventType.TIME_SERIES.equals(result.getInvestigation().getEventType()))
			return true;
			
		return false;
	}

	/**
	 * if there are any parent rows with no children - remove them ie. there are no viewable results
	 * for this specimen - WDEV-3953
	 */
	private void cleanUpResultGrid()
	{
		ims.ocrr.forms.pathologyresults.GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow pRow;
		for(int i=form.lyrMain().tabSearch().grdResults().getRows().size();i>0;i--)
		{
			pRow = form.lyrMain().tabSearch().grdResults().getRows().get(i-1);
			if(pRow.getRows().size() == 0 && pRow.getColTestName() == null)
				form.lyrMain().tabSearch().grdResults().getRows().remove(i-1);
		}	
	}

	private String generateStatusTooltip(OrderedInvestigationStatusVo ordInvCurrentStatus)
	{
		if (ordInvCurrentStatus != null && ordInvCurrentStatus.getOrdInvStatus() != null)
		{
			StringBuffer sb = new StringBuffer();
			sb.append("<b>Current status: </b>" + ordInvCurrentStatus.getOrdInvStatus().getText());

			if (ordInvCurrentStatus.getStatusReason() != null && ordInvCurrentStatus.getStatusReason().length() > 0 && ordInvCurrentStatus.getOrdInvStatus().equals(OrderInvStatus.CANCELLED))
				sb.append("<br><b>Current status reason: </b>" + ordInvCurrentStatus.getStatusReason());

			sb.append("<br><b>Date changed: </b>" + ordInvCurrentStatus.getChangeDateTime());
			sb.append("<br><b>Changed by: </b>" + (ordInvCurrentStatus.getChangeUserIsNotNull() ? ordInvCurrentStatus.getChangeUser().toString() : ""));

			return sb.toString();
		}
		return null;
	}

	private GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow createOrFindSpecimenGridRow(PathologyResultListShortVo result)
	{
		if (result == null)
			return null;
		
		boolean dftInv = isDFT(result);
		
		PathologySpecimenLiteVo specimen = null;
		
		if(result.getSpecimen() != null && result.getSpecimen().size() > 0)//WDEV-16232
		{
			for(int i=0; i<result.getSpecimen().size(); i++)
			{
				specimen = result.getSpecimen().get(i);
		
				for (int x = 0; x < form.lyrMain().tabSearch().grdResults().getRows().size(); x++)
				{
					GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow row = form.lyrMain().tabSearch().grdResults().getRows().get(x);
					PathologyResultListShortVo rowValue = (PathologyResultListShortVo) row.getValue().getOrderInvestigation();
					if (rowValue != null && rowValue.getSpecimen() != null)
					{
						for(int j = 0; j<rowValue.getSpecimen().size(); j++)
						{
							if(rowValue.getSpecimen().get(j).equals(specimen))
								return row;
						}
					}
				}
			}
		}

		GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow row = form.lyrMain().tabSearch().grdResults().getRows().newRow();

		if(dftInv)
		{
			String specimenS = (result.getInvestigation() != null 
					&& result.getInvestigation().getPathInvDetails() != null 
					&& result.getInvestigation().getPathInvDetails().getSpecimens() != null 
					&& result.getInvestigation().getPathInvDetails().getSpecimens().size() > 0 
					&& result.getInvestigation().getPathInvDetails().getSpecimens().get(0) != null) 
					? result.getInvestigation().getPathInvDetails().getSpecimens().get(0).getType().getIItemText() : null;
					
			row.setColSpecimen(specimenS);
			row.setTooltipForColSpecimen(specimenS);
		}
		else
		{
			if (specimen == null || specimen.getSpecimenSource() == null)
			{
				row.setColSpecimen("[No specimen source]");
			}
			else
			{
				//WDEV-11630
				String display = "";
				
				if (specimen.getSpecimenSourceIsNotNull())
					display = specimen.getSpecimenSource().getText() + (specimen.getSiteCdIsNotNull() ? " - " + specimen.getSiteCd().getText() : "");
				
				if (result.getResultSpecimenType() != null)
					display += " - " + result.getResultSpecimenType().getText();
				
				row.setColSpecimen(display);
				row.setTooltipForColSpecimen(display);
			}
		}
		
		// Date and Time Display Flag
		if (result.getDisplayFlagIsNotNull())
		{
			row.setColDateTimeImage(result.getDisplayFlag().getImage());
			row.setTooltipForColDateTimeImage(result.getDisplayFlag().getText());
		}

		// Date and Time
		if (result.getDisplayDateTimeIsNotNull())
		{
			if (result.getSpecimen() != null && Boolean.FALSE.equals(result.getDisplayTimeSupplied())
					&& (result.getDisplayDateTime().getTime() == null || result.getDisplayDateTime().getTime().equals(new Time(0, 0, 0))))
			{
				row.setColDateTime(result.getDisplayDateTime().getDate().toString());
			}
			else
			{
				row.setColDateTime(result.getDisplayDateTime().toString());
			}

			//WDEV-16457
			row.setTooltipForColDateTime((result != null && result.getPlacerOrdNum() != null) ? "OCS Number: " + result.getPlacerOrdNum() : "");
		}
		
		//WDEV-12067 get the specimen worklistitem date tocollect and display
		Date dateToCollect = null;
		if(dftInv)
		{
			dateToCollect = domain.getSpecimenWorkListItemDateToCollectByInvestigation(result);
		}
		else
		{
			if(result.getSpecimen() != null && result.getSpecimen().size() > 0)
			{
				dateToCollect = getDateToCollectforSpecimen(result.getSpecimen().get(0).getID_OrderSpecimen());	//WDEV-18295
			}
		}
		
		if(dateToCollect != null)
			row.setColDateTimeRequested(dateToCollect.toString());	
		
		if (result.getResultStatusIsNotNull())
		{
			//row.setColProvisonalFinal(domain.getMappingForResultStatusLookup(result.getResultStatus(), TaxonomyType.DISPLAY_TEXT));//WDEV-15709
			row.setColProvisonalFinal(result.getResultStatus().getText());// 	WDEV-15783
		}

		// cmrow.setValue(specimen);
		OcsPathRadResultVo res = new OcsPathRadResultVo();
		res.setCategory(Category.PATHOLOGY);
		res.setOrderInvestigation(result);
		res.setDescription(result.getInvestigationIsNotNull() && result.getInvestigation().getInvestigationIndexIsNotNull() ? result.getInvestigation().getInvestigationIndex().getName() : "<not set>");
		row.setValue(res);

		row.setExpanded(true);

		// Discipline
		if (result.getInvestigationIsNotNull() && result.getInvestigation().getProviderServiceIsNotNull() && result.getInvestigation().getProviderService().getLocationServiceIsNotNull() && result.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() && result.getInvestigation().getProviderService().getLocationService().getService().getServiceNameIsNotNull())
		{
			row.setColDiscipline(result.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
		}

		// Ordering Location
		if (result.getOrderDetailsIsNotNull())
		{
			row.setColOrderingLocation(result.getOrderDetails().getCorrectLocation());
			row.setTooltipForColOrderingLocation(result.getOrderDetails().getCorrectLocation());
		}

		// Clinician or GP
		if (result.getOrderDetailsIsNotNull())
		{
			row.setColClinician(result.getOrderDetails().getCorrectClinician());
			// WDEV-2908
			row.setTooltipForColClinician(result.getOrderDetails().getCorrectClinician());
		}

		row.setBackColor((form.lyrMain().tabSearch().grdResults().getRows().size() % 2) == 0 ? Color.Beige : Color.Default);

		return row;
	}

	private Date getDateToCollectforSpecimen(Integer id_OrderSpecimen)
	{
		if (form.getLocalContext().getWorklistItemsWithDateToCollect() == null)
			return null;
		
		for (int i = 0; i < form.getLocalContext().getWorklistItemsWithDateToCollect().size(); i++)
		{
			if (form.getLocalContext().getWorklistItemsWithDateToCollect().get(i).getSpecimen() == null)
				continue;
			
			Integer currentSpecimenId = form.getLocalContext().getWorklistItemsWithDateToCollect().get(i).getSpecimen().getID_OrderSpecimen();
			
			if (currentSpecimenId.equals(id_OrderSpecimen))
			{
				return form.getLocalContext().getWorklistItemsWithDateToCollect().get(i).getDateToCollect();
			}
		}
		
		return null;
	}

	private void viewSelectedResult()
	{
		if (form.lyrMain().tabSearch().grdResults().getValue() != null)
		{
			form.getGlobalContext().OCRR.setResultDisplayDate(getSelectedDisplayDateTime().getDate());
			form.getGlobalContext().OCRR.setSelectedPathRadResults(getAllInvs());
			form.getGlobalContext().OCRR.setCurrentPathRadResult(getCurrentInv());
			engine.open(form.getForms().OCRR.ResultDialog, false);
		}
	}

	private void viewSelectedOrder()
	{
		if (form.lyrMain().tabSearch().grdResults().getValue() != null)
		{
			PathologyResultListShortVo voPathologyResult = (PathologyResultListShortVo) form.lyrMain().tabSearch().grdResults().getValue().getOrderInvestigation();
			if (voPathologyResult.getOrderDetailsIsNotNull())
			{
				form.getGlobalContext().OCRR.setResultDisplayDate(getSelectedDisplayDateTime().getDate());
				form.getGlobalContext().OCRR.PathologyResults.setOrder(voPathologyResult.getOrderDetails());
				
				//	WDEV-11097
				if(AuthorisationOrderStatus.AWAITING_AUTHORISATION.equals(voPathologyResult.getOrderDetails().getAuthorisationOrderStatus()))
				{
					form.getGlobalContext().OCRR.setOrderAwaitingAuthorisation(voPathologyResult.getOrderDetails());
				}
				
				engine.open(form.getForms().OCRR.OrderSummaryDialog, true);
			}
		}
	}

	private OcsPathRadResultVo getCurrentInv()
	{
		//WDEV-11547 change this to return only invs that are resulted whther the child or parent is clicked on
		PathologyResultListShortVo resParent = (PathologyResultListShortVo) form.lyrMain().tabSearch().grdResults().getSelectedRow().getValue().getOrderInvestigation();
		if (isResultedStatus(resParent.getOrdInvCurrentStatus().getOrdInvStatus()))
			return form.lyrMain().tabSearch().grdResults().getSelectedRow().getValue();

		GenForm.lyrMainLayer.tabSearchContainer.grdResultsRowCollection rowColl = form.lyrMain().tabSearch().grdResults().getSelectedRow().getRows();
		for (int i = 0; i < rowColl.size(); i++)
		{
			GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow row = rowColl.get(i);
			PathologyResultListShortVo res = (PathologyResultListShortVo) row.getValue().getOrderInvestigation();
			if (isResultedStatus(res.getOrdInvCurrentStatus().getOrdInvStatus()))
				return row.getValue();
		}
		return null;
		
		
		
		//return form.lyrMain().tabSearch().grdResults().getValue();
	}

	private OcsPathRadResultVoCollection getAllInvs()
	{
		OcsPathRadResultVoCollection result = new OcsPathRadResultVoCollection();

		for (int x = 0; x < form.lyrMain().tabSearch().grdResults().getRows().size(); x++)
		{
			//WDEV-11547 - only add actual results to this collection
			grdResultsRow pRow = form.lyrMain().tabSearch().grdResults().getRows().get(x);
			PathologyResultListShortVo res = form.lyrMain().tabSearch().grdResults().getRows().get(x).getColResultDetails();
			if(res != null && res.getResultDetails() != null && res.getResultDetails().getPathologyResultDetailsIsNotNull() && res.getResultDetails().getPathologyResultDetails().size() > 0 && res.getResultDetails().getPathologyResultDetails().get(0) != null)//	WDEV-16232	
				result.add(form.lyrMain().tabSearch().grdResults().getRows().get(x).getValue());
			else
			{
				if(pRow.getRows() != null)
				{
					for (int y = 0; y < pRow.getRows().size(); y++)
					{
						PathologyResultListShortVo res1 = pRow.getRows().get(y).getColResultDetails();
						if(res1 != null && res1.getResultDetails() != null && res1.getResultDetails().getPathologyResultDetailsIsNotNull() && res1.getResultDetails().getPathologyResultDetails().size() > 0 && res1.getResultDetails().getPathologyResultDetails().get(0) != null)	//WDEV-16232		
							result.add(pRow.getRows().get(y).getValue());
					}
				}
			}
		}
		return result;
	}

	protected void onRadioButtonGroupFilterResultsValueChanged() throws PresentationLogicException
	{
		//WDEV-10227
		if (validateSearchCriteria())
			search();
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		//WDEV-9268
		form.getGlobalContext().OCRR.setOrderAwaitingAuthorisation(null);//	WDEV-11097
		
		if(formName.equals(form.getForms().OCRR.ResultDialog) && DialogResult.YES.equals(result))
		{
			engine.open(ConfigFlag.UI.DEMOGRAPHICS_FORM.getValue());
			return;
		}
		
		validateSearchCriteria();
		search();
	}

	protected void onBtnSearchChartingClick() throws PresentationLogicException
	{
		searchChartingResults();
	}

	private void populateChartTypes()
	{
		form.lyrMain().tabCharting().cmbChartType().clear();

		ChartTypeShortVoCollection chartTypes = domain.listChartTypes();
		if (chartTypes != null)
		{
			for (int x = 0; x < chartTypes.size(); x++)
			{
				addChartType(chartTypes.get(x));
			}
		}
	}

	private void addChartType(ChartTypeShortVo value)
	{
		form.lyrMain().tabCharting().cmbChartType().newRow(value, value.getName());
	}

	private void searchChartingResults()
	{
		if (USE_DEMO_VALUES)
		{
			// Demo Value Test
			form.lyrMain().tabCharting().chartingControl().setValue(generateDemoValues());
		}
		else
		{
			if (!canSearchChartingResults())
				return;



			try
			{
				form.getLocalContext().setChartResults(domain.listChartResults(form.getGlobalContext().Core.getPatientShort(), form.lyrMain().tabCharting().cmbChartType().getValue(), form.lyrMain().tabCharting().dteChartingStartDate().getValue(), form.lyrMain().tabCharting().dteChartingEndDate().getValue(), VIEW_TABULAR.equals(form.lyrMain().tabCharting().cmbChartingView().getValue())));//WDEV-16232 
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			form.getLocalContext().setChartType(domain.getChartType(form.lyrMain().tabCharting().cmbChartType().getValue()));
			
			// WDEV-12655 - Display "No results found message", WDEV-15801
			if (!form.getLocalContext().getChartResultsIsNotNull() || form.getLocalContext().getChartResults().size() == 0)
			{
				engine.showMessage("No records match your search criteria.");
				form.lyrMain().tabCharting().chartingControl().setValue(generateChartingValueSet(null, form.getLocalContext().getChartType()));//WDEV-15801
			}
			populateChartingControl();
		}
	}

	private void populateChartingControl() 
	{
		if (!form.getLocalContext().getChartResultsIsNotNull() || !form.getLocalContext().getChartTypeIsNotNull())
			return;
		form.lyrMain().tabCharting().chartingControl().setValue(generateChartingValueSet(form.getLocalContext().getChartResults(), form.getLocalContext().getChartType()));
	}

	private DataSetTypeVo getDatasetType(ChartTypeVo chartType, DatasetTypeRefVo id)
	{
		for (int x = 0; x < chartType.getDatasetTypes().size(); x++)
		{
			if (id.equals(chartType.getDatasetTypes().get(x).getDatasetType()))
				return chartType.getDatasetTypes().get(x).getDatasetType();
		}

		return null;
	}

	private IChartValueSet generateChartingValueSet(ChartResultVoCollection results, ChartTypeVo chartType)
	{
		ChartValueSetVo set = new ChartValueSetVo();

		set.setTitle(chartType.getName());
		set.setSubTitle("From " + (form.lyrMain().tabCharting().dteChartingStartDate().getValue() == null ? "?" : form.lyrMain().tabCharting().dteChartingStartDate().getValue().toString()) + " to " + (form.lyrMain().tabCharting().dteChartingEndDate().getValue() == null ? "?" : form.lyrMain().tabCharting().dteChartingEndDate().getValue().toString()));
		set.setDescription(chartType.getDescription());
	//	set.setMinFactor(chartType.getMinFactor());
	//	set.setMaxFactor(chartType.getMaxFactor());
		set.setBelowBandPercent(chartType.getBelowBandPercent());
		set.setAboveBandPercent(chartType.getAboveBandPercent());
	//	set.setNormalBandColor(chartType.getNormalBandColour());
		
		if(results == null)//WDEV-15801
		{
			set.setGroups(new ChartValueGroupVoCollection());
			return set;
		}

		HashMap<Object, ChartValueGroupVo> distinctGroups = new HashMap<Object, ChartValueGroupVo>();

		for (int x = 0; x < results.size(); x++)
		{
			if (results.get(x) == null || results.get(x).getAnalyte() == null || results.get(x).getAnalyte().getDatasetType() == null)
				continue;

			Object key = results.get(x).getAnalyte().getDatasetType();
			ChartValueGroupVo group = null;
			if (distinctGroups.containsKey(key))
			{
				group = distinctGroups.get(key);
			}
			else
			{
				DataSetTypeVo dataset = getDatasetType(chartType, results.get(x).getAnalyte().getDatasetType());
				if (dataset != null && dataset.getIsActiveIsNotNull() && dataset.getIsActive())
				{
					group = new ChartValueGroupVo();
					group.setName(dataset.getName());
					group.setUnits(dataset.getUnitOfMeasure() != null ? dataset.getUnitOfMeasure().toString() : "");

					//WDEV-16883
					Float minValue = (selectedPatientIsMale() != null && selectedPatientIsMale().booleanValue())? dataset.getNormalBandMinValueMale() : dataset.getNormalBandMinValueFemale();
					Float maxValue = (selectedPatientIsMale() != null && selectedPatientIsMale().booleanValue()) ? dataset.getNormalBandMaxValueMale() : dataset.getNormalBandMaxValueFemale();

					if (form.lyrMain().tabCharting().cmbChartingView().getValue().equals(VIEW_TABULAR))
						group.setRefRange(results.get(x).getRefRange() == null ? "-" : results.get(x).getRefRange());
					else
						group.setRefRange((minValue == null ? "?" : minValue.toString()) + "-" + (maxValue == null ? "?" : maxValue.toString()));
						
					group.setMinValue(minValue);
					group.setMaxValue(maxValue);

					group.setMinFactor(dataset.getMinFactor());
					group.setMaxFactor(dataset.getMaxFactor());

					if (dataset.getDefLineColPtIcon() != null)
					{
						group.setColor(dataset.getDefLineColPtIcon().getColor());
						group.setImage(dataset.getDefLineColPtIcon().getImage());
					}
					if (dataset.getDefaultLineType() != null)
					{
						group.setLineType(dataset.getDefaultLineType());
					}

					ChartTypeDatasetVo chartTypeDataset = getChartTypeDataset(chartType, dataset);
					if (chartTypeDataset != null)
					{
						if (chartTypeDataset.getLineColourPointIcon() != null)
						{
							group.setColor(chartTypeDataset.getLineColourPointIcon().getColor());
							group.setImage(chartTypeDataset.getLineColourPointIcon().getImage());
						}
						if (chartTypeDataset.getLineType() != null)
						{
							group.setLineType(chartTypeDataset.getLineType());
						}
						
						group.setSortOrder(chartTypeDataset.getSortOrder());
					}
				}
			}

			if (group != null)
			{
				ChartValueVoCollection values = group.getValues();
				if (values == null)
					values = new ChartValueVoCollection();

					ChartValueVo value = new ChartValueVo();
					
					//WDEV-16232 - starts here
					if(results.get(x).getSpecimenComments() != null)
					{
						if(results.get(x).getSpecimenComments().getCollDateTimeFiller() != null)
						{
							value.setDate(results.get(x).getSpecimenComments().getCollDateTimeFiller());
							value.setIsTimeSuplied(results.get(x).getSpecimenComments().getColTimeFillerSupplied());
						}
						else
						{
							value.setDate(results.get(x).getSpecimenComments().getReceivedDateTime());
							value.setIsTimeSuplied(results.get(x).getSpecimenComments().getReceivedTimeSupplied());
						}
					}
					//WDEV-16232 - ends here
					value.setUnitOfMeasure(results.get(x).getUnitOfMeasure());
					value.setRefRange(results.get(x).getRefRange());
					value.setIsAbnormal(results.get(x).getIsAbnormal());
					
					try
					{
						value.setValue(new Float(Float.parseFloat(results.get(x).getResultVal())));
					}
					catch (Exception e)
					{			}
					
					value.setValueString(results.get(x).getResultVal());
					value.setResultSpecimenType(results.get(x).getResultSpecimenType());
					value.setSpecimenSource(results.get(x).getSpecimenSource());


					// WDEV-12655 - Add result comments to data to be displayed in chart
					copyCommentsFromChartResultToCharValue(value, results.get(x));
					
					values.add(value);

				group.setValues(values);
				distinctGroups.put(key, group);
			}
		}

		ChartValueGroupVoCollection groups = new ChartValueGroupVoCollection();
		for (int x = 0; x < results.size(); x++)
		{
			Object key = results.get(x).getAnalyte().getDatasetType();
			if (distinctGroups.containsKey(key))
				groups.add(distinctGroups.get(key));
		}

		set.setGroups(groups);

		return set;
	}

	/**
	 * WDEV-12655
	 * Function used to copy 
	 * @param value - char value that will be displayed onto chart
	 * @param result - record returned from database
	 */
	private void copyCommentsFromChartResultToCharValue(ChartValueVo value, ChartResultVo result)
	{
		// Check for valid parameters
		if (value == null || result == null)
			return;
		
		// Create a new collection for comments if the current one is null
		if (value.getComments() == null)
			value.setComments(new ChartValueCommentVoCollection());
		
		// Create a reference to current (from iteration) result comments 
		ResultComponentCommentsVoCollection commentsToAdd = result.getComments();
		// Iterate result comments
		if (commentsToAdd != null)
		{
			for (ResultComponentCommentsVo comment : commentsToAdd)
			{
				// Create VO for chart comments
				ChartValueCommentVo chartComment = new ChartValueCommentVo();
				// Set chart comments VO values
				chartComment.setSource(comment.getCmtSrc());
				chartComment.setText(comment.getCmtText());
				if (comment.getCommentTypeIsNotNull())
				{
					chartComment.setType(comment.getCommentType().getText());
				}
				
				// Add comment to CharComment VO collections
				value.getComments().add(chartComment);
			}
		}
		
		OrderInvestigationChartVo investigation = result.getInvestigationData();
		
		if (investigation != null && investigation.getResultDetails() != null && investigation.getResultDetails().getPathologyResultDetails() != null && investigation.getResultDetails().getPathologyResultDetails().size() > 0 && investigation.getResultDetails().getPathologyResultDetails().get(0) != null)//WDEV-16232
		{
			ChartInvestigationCommentsVo investigationData = new ChartInvestigationCommentsVo();
			
			investigationData.setInvestigationName(investigation.getInvestigation().getInvestigationIndex().getName());
			investigationData.setLabOrderNo(investigation.getSpecimen() != null ? investigation.getSpecimen().get(0).getFillerOrdNum() : null);
			investigationData.setDate(investigation.getDisplayDateTime());
			investigationData.setDisplayFlag(investigation.getDisplayFlag() != null ? investigation.getDisplayFlag().getText() : null);
			investigationData.setInvestigationID(investigation.getID_OrderInvestigation());
			
			investigationData.setInvestigationComments(new ChartValueCommentVoCollection());
			
			for (OrderResultCommentsVo orderComment : investigation.getResultDetails().getPathologyResultDetails().get(0).getResultComments())//WDEV-16232
			{
				ChartValueCommentVo investigationComment = new ChartValueCommentVo();
				
				investigationComment.setSource(orderComment.getCmtSrc());
				investigationComment.setText(orderComment.getCmtText());
				investigationComment.setType(orderComment.getCommentType() != null ? orderComment.getCommentType().getText() : null);
				
				investigationData.getInvestigationComments().add(investigationComment);
			}
			
			value.setInvestigationComments(investigationData);
		}

		if (result.getSpecimenComments() != null && result.getSpecimenComments().getLabSpecComments() != null)
		{
			ChartSpecimenCommentsVo specimenData = new ChartSpecimenCommentsVo();
			
			specimenData.setSpecimenType(result.getSpecimenComments().getSpecimenSource() != null ? result.getSpecimenComments().getSpecimenSource().getText() : "Not specified");
			specimenData.setSpecimenComments(new ChartValueCommentVoCollection());
			
			for (ResultComponentCommentsVo orderSpecimenComment : result.getSpecimenComments().getLabSpecComments())
			{
				ChartValueCommentVo specimenComment = new ChartValueCommentVo();
				
				specimenComment.setSource(orderSpecimenComment.getCmtSrc());
				specimenComment.setText(orderSpecimenComment.getCmtText());
				specimenComment.setType(orderSpecimenComment.getCommentType() != null ? orderSpecimenComment.getCommentType().getText() : null);
				
				specimenData.getSpecimenComments().add(specimenComment);
			}
			
			value.setSpecimenComments(specimenData);
		}
	}
	

	private ChartTypeDatasetVo getChartTypeDataset(ChartTypeVo chartType, DataSetTypeVo dataset)
	{
		if (chartType == null || chartType.getDatasetTypes() == null || dataset == null)
			return null;

		for (int x = 0; x < chartType.getDatasetTypes().size(); x++)
		{
			ChartTypeDatasetVo chartTypeDataset = chartType.getDatasetTypes().get(x);
			if (chartTypeDataset != null && chartTypeDataset.getDatasetType() != null && chartTypeDataset.getDatasetType().equals(dataset))
				return chartTypeDataset;
		}

		return null;
	}

	private boolean selectedPatientSexIsKnown()
	{
		if (form.getGlobalContext().Core.getPatientShort() == null)
			return false;
		if (form.getGlobalContext().Core.getPatientShort().getSex() == null)
			return false;
		if (form.getGlobalContext().Core.getPatientShort().getSex().equals(Sex.MALE))
			return true;
		if (form.getGlobalContext().Core.getPatientShort().getSex().equals(Sex.FEMALE))
			return true;

		return false;
	}

	private Boolean selectedPatientIsMale()
	{
		if (!selectedPatientSexIsKnown())
			return null;

		if (form.getGlobalContext().Core.getPatientShort().getSex().equals(Sex.MALE))
			return Boolean.TRUE;

		return Boolean.FALSE;
	}

	public IChartValueSet generateDemoValues()
	{
		ChartValueSetVo set = new ChartValueSetVo();

		String subtitle = "From ";
		if (form.lyrMain().tabCharting().dteChartingStartDate() != null)
			subtitle += form.lyrMain().tabCharting().dteChartingStartDate().getValue().toString();
		else
			subtitle += "?";

		subtitle += " to ";
		if (form.lyrMain().tabCharting().dteChartingEndDate() != null)
			subtitle += form.lyrMain().tabCharting().dteChartingEndDate().getValue().toString();
		else
			subtitle += "?";

		set.setMaxFactor(new Integer(2));
		set.setMinFactor(new Integer(5));
		set.setAboveBandPercent(new Integer(25));
		set.setBelowBandPercent(new Integer(25));

		ChartValueGroupVoCollection groups = new ChartValueGroupVoCollection();

		int sets = 5;
		for (int x = 1; x <= sets; x++)
		{
			ChartValueGroupVo group = new ChartValueGroupVo();

			group.setMinValue(new Float(20 * x));
			group.setMaxValue(new Float(50 * x));
			group.setName("Dataset #" + String.valueOf(x));
			group.setRefRange(group.getMinValue() + "-" + group.getMaxValue());
			group.setUnits("Units #" + String.valueOf(x));

			if (x % sets == 0)
			{
				group.setMinFactor(new Integer(5));
				group.setMaxFactor(new Integer(2));

				group.setColor(Color.Green);
				group.setLineType(LineType.DASH);
				group.setImage(form.getImages().ICP.Child);
			}
			else if (x % sets == 1)
			{
				group.setMinFactor(new Integer(15));
				group.setMaxFactor(new Integer(2));

				group.setColor(Color.Red);
				group.setLineType(LineType.DOT);
				group.setImage(form.getImages().Core.Pupil_size2);
			}
			else if (x % 6 == 2)
			{
				group.setMinFactor(new Integer(2));
				group.setMaxFactor(new Integer(2));

				group.setColor(Color.Blue);
				group.setLineType(LineType.LONGDASHDOTDOT);
				group.setImage(form.getImages().Core.RedCircle);
			}
			else if (x % sets == 3)
			{
				group.setMinFactor(new Integer(5));
				group.setMaxFactor(new Integer(5));

				group.setColor(Color.Magenta);
				group.setLineType(LineType.SOLID);
				group.setImage(form.getImages().Core.YellowTriangleOut);
			}
			else if (x % sets == 4)
			{
				group.setMinFactor(new Integer(10));
				group.setMaxFactor(new Integer(7));

				group.setColor(Color.Black);
				group.setLineType(LineType.LONGDASH);
				group.setImage(form.getImages().ICP.Child);
			}
			else if (x % sets == 5)
			{
				group.setMinFactor(new Integer(7));
				group.setMaxFactor(new Integer(10));

				group.setColor(Color.HotPink);
				group.setLineType(LineType.LONGDASHDOT);
				group.setImage(form.getImages().Core.Pupil_size2);
			}
			else if (x % sets == 6)
			{
				group.setMinFactor(new Integer(2));
				group.setMaxFactor(new Integer(4));

				group.setColor(Color.HoneyDue);
				group.setLineType(LineType.LONGDASHDOT);
				group.setImage(form.getImages().Core.RedCircle);
			}
			else
			{
				group.setMinFactor(new Integer(5));
				group.setMaxFactor(new Integer(5));

				group.setColor(Color.Azure);
				group.setLineType(LineType.DASHDOT);
				group.setImage(form.getImages().Core.Pupil_size2);
			}

			ChartValueVoCollection values = new ChartValueVoCollection();

			int dayCount = x * 100;
			for (int y = 1; y <= 100; y += 15)
			{
				dayCount -= y * 2;
				ChartValueVo value = new ChartValueVo();

				value.setDate(new DateTime().addDays(dayCount));
				value.setValue(new Float(x + y + y % 2));
				value.setIsAbnormal(new Boolean((x + y) % 5 == 0));
				values.add(value);
			}

			for (int y = 100; y > 0; y -= 15)
			{
				dayCount -= y * 2;
				ChartValueVo value = new ChartValueVo();

				value.setDate(new DateTime().addDays(dayCount));
				value.setValue(new Float(x + y + y % x));
				value.setIsAbnormal(new Boolean((x + y) % 4 == 0));

				values.add(value);
			}

			for (int y = 1; y <= 100; y += 15)
			{
				dayCount -= y * 2;
				ChartValueVo value = new ChartValueVo();

				if (y % 8 == 0)
					value.setDate(new DateTime(new DateTime().addDays(dayCount + y * 2).getDate(), null));
				else
					value.setDate(new DateTime().addDays(dayCount));

				value.setValue(new Float((x + y + y % x)));
				value.setIsAbnormal(new Boolean((x + y) % 3 == 0));

				values.add(value);
			}

			group.setValues(values);

			groups.add(group);
		}

		set.setGroups(groups);

		return set;
	}

	private boolean canSearchChartingResults()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (!selectedPatientSexIsKnown() && VIEW_GRAPHICAL.equals(form.lyrMain().tabCharting().cmbChartingView().getValue())) //WDEV-16883
			errors.add("Patient sex is unknown");
		if (form.lyrMain().tabCharting().cmbChartType().getValue() == null)
			errors.add("No profile selected");
		if (form.lyrMain().tabCharting().dteChartingStartDate().getValue() == null)
			errors.add("'From' date is mandatory");//WDEV-15799
		if (form.lyrMain().tabCharting().dteChartingEndDate().getValue() == null)
			errors.add("'To' date is mandatory");//WDEV-15799
		//WDEV-13849
		if (form.lyrMain().tabCharting().dteChartingStartDate().getValue()!=null && form.lyrMain().tabCharting().dteChartingEndDate().getValue()!=null)
		{
			if (form.lyrMain().tabCharting().dteChartingStartDate().getValue().isGreaterThan(form.lyrMain().tabCharting().dteChartingEndDate().getValue()))
				errors.add("'From' date must not be after 'To' date.");
		}
		//end WDEV-13849
		
		if (errors.size() > 0)
		{
			String[] errorList = new String[errors.size()];
			for (int x = 0; x < errors.size(); x++)
			{
				errorList[x] = errors.get(x);
			}

			engine.showErrors("Search Error", errorList);
			return false;
		}

		return true;
	}

	private void setupGraphingView()
	{
		form.lyrMain().tabCharting().cmbChartingView().clear();
		form.lyrMain().tabCharting().cmbChartingView().newRow(VIEW_GRAPHICAL, "Graphical");
		form.lyrMain().tabCharting().cmbChartingView().newRow(VIEW_TABULAR, "Tabular");
		form.lyrMain().tabCharting().cmbChartingView().setValue(VIEW_GRAPHICAL);
	}

	private DateTime getSelectedDisplayDateTime()
	{
		if (form.lyrMain().tabSearch().grdResults().getValue() == null)
			return null;

		PathologyResultListShortVo voPathologyResult = (PathologyResultListShortVo) form.lyrMain().tabSearch().grdResults().getValue().getOrderInvestigation();
		return voPathologyResult.getDisplayDateTime();
	}

	protected void onChartingControlValueChanged() throws PresentationLogicException
	{
		form.lyrMain().tabCharting().imbConfigureChart().setEnabled(form.lyrMain().tabCharting().chartingControl().canSelectGroups().booleanValue());
	}
	
	@Override
	protected void onGrdPathologySelectionChanged() throws PresentationLogicException
	{
		if (hasResults(form.lyrMain().tabSearch().grdResults().getSelectedRow()))
		{
			viewSelectedResult();
		}
		else
		{
			viewSelectedOrder();
		}		
	}

	@Override
	protected void onBtnPrintClick() throws PresentationLogicException
	{
		engine.open(form.getForms().OCRR.PrintMultipleResults);	
	}

	@Override
	protected void onBtnPrintCumulativeClick() throws PresentationLogicException
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		if (urlQueryServer == "")
		{
			engine.showMessage("QUERY_SERVER_URL is not set! Results cannot be printed");
			return;
		}
		if (urlReportServer == "")
		{
			engine.showMessage("REPORT_SERVER_URL is not set! Results cannot be printed");
			return;
		}		

		Object[] obj = domain.getSystemReportAndTemplate(new Integer(272));
		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		
		if(form.getGlobalContext().Core.getPatientShort() == null)
		{
			engine.showMessage("No patient is selected in the global context !");
			return;
		}
		
		if(form.lyrMain().tabCharting().cmbChartType().getValue() == null)
		{
			engine.showMessage("Please select a profile !");
			return;
		}

		if(form.lyrMain().tabCharting().cmbChartType().getValue() == null)
		{
			engine.showMessage("Please select a profile !");
			return;
		}
		
		if(form.lyrMain().tabCharting().dteChartingStartDate().getValue() == null)
		{
			engine.showMessage("Please select a start date !");
			return;
		}

		if(form.lyrMain().tabCharting().dteChartingEndDate().getValue() == null)
		{
			engine.showMessage("Please select an end date !");
			return;
		}
		
		DateTime endDateTime = new DateTime(form.lyrMain().tabCharting().dteChartingEndDate().getValue(), new Time(23,59,59));
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		client.addSeed(new SeedValue("Patient_id",  form.getGlobalContext().Core.getPatientShort().getID_Patient(), Integer.class));			
		client.addSeed(new SeedValue("ChartType_id",  form.lyrMain().tabCharting().cmbChartType().getValue().getBoId(), Integer.class));
		client.addSeed(new SeedValue("START_DATE",  form.lyrMain().tabCharting().dteChartingStartDate().getValue().getDate(), java.util.Date.class));
		client.addSeed(new SeedValue("END_DATE",  endDateTime.getJavaDate(), java.util.Date.class));
		
		try
		{
			String url = client.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, QueryBuilderClient.PDF, "", 1);
			engine.openUrl(url);
		} 
		catch (QueryBuilderClientException err)
		{
			err.printStackTrace();
			engine.showMessage("Error building report: " + err.getMessage());	
		}
		
	}

	@Override
	protected void onlyrMainTabChanged(LayerBridge tab)
	{
		updatePrintCumulativeButtonStatus();
	}

	private void updatePrintCumulativeButtonStatus()
	{
		form.btnPrintCumulative().setVisible(form.lyrMain().tabCharting().isVisible());
	}
}
