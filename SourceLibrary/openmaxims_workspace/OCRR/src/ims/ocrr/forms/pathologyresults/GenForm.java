//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.pathologyresults;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrMainLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabSearchContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbDisciplineComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbClinicianComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbInvestigationTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.InvestigationIndexLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.InvestigationIndexLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.InvestigationIndexLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.InvestigationIndexLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.InvestigationIndexLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.InvestigationIndexLiteVo getValue()
				{
					return (ims.ocrr.vo.InvestigationIndexLiteVo)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.InvestigationIndexLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdResultsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdResultsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateTimeOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDateTime(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDateTime()
				{
					return (String)super.row.get(0);
				}
				public void setColDateTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDateTimeImageReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDateTimeImageReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDateTimeImageOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColDateTimeImage(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.framework.utils.Image getColDateTimeImage()
				{
					return (ims.framework.utils.Image)super.row.get(1);
				}
				public void setColDateTimeImage(ims.framework.utils.Image value)
				{
					super.row.set(1, value);
				}
				public void setCellColDateTimeImageTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDateTimeRequestedReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDateTimeRequestedReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDateTimeRequestedOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColDateTimeRequested(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColDateTimeRequested()
				{
					return (String)super.row.get(2);
				}
				public void setColDateTimeRequested(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDateTimeRequestedTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColTestNameReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColTestNameReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColTestNameOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColTestName(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColTestName()
				{
					return (String)super.row.get(3);
				}
				public void setColTestName(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColTestNameTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColSpecimenReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColSpecimenReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColSpecimenOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColSpecimen(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColSpecimen()
				{
					return (String)super.row.get(4);
				}
				public void setColSpecimen(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColSpecimenTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColProvisonalFinalReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColProvisonalFinalReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColProvisonalFinalOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColProvisonalFinal(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColProvisonalFinal()
				{
					return (String)super.row.get(5);
				}
				public void setColProvisonalFinal(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColProvisonalFinalTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColABNReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColABNReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColABNOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColABN(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.framework.utils.Image getColABN()
				{
					return (ims.framework.utils.Image)super.row.get(6);
				}
				public void setColABN(ims.framework.utils.Image value)
				{
					super.row.set(6, value);
				}
				public void setCellColABNTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForColStatus(String value)
				{
					super.row.setTooltip(7, value);
				}
				public ims.framework.utils.Image getColStatus()
				{
					return (ims.framework.utils.Image)super.row.get(7);
				}
				public void setColStatus(ims.framework.utils.Image value)
				{
					super.row.set(7, value);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setColDisciplineReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean isColDisciplineReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showColDisciplineOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForColDiscipline(String value)
				{
					super.row.setTooltip(8, value);
				}
				public String getColDiscipline()
				{
					return (String)super.row.get(8);
				}
				public void setColDiscipline(String value)
				{
					super.row.set(8, value);
				}
				public void setCellColDisciplineTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public void setColOrderingLocationReadOnly(boolean value)
				{
					super.row.setReadOnly(9, value);
				}
				public boolean isColOrderingLocationReadOnly()
				{
					return super.row.isReadOnly(9);
				}
				public void showColOrderingLocationOpened()
				{
					super.row.showOpened(9);
				}
				public void setTooltipForColOrderingLocation(String value)
				{
					super.row.setTooltip(9, value);
				}
				public String getColOrderingLocation()
				{
					return (String)super.row.get(9);
				}
				public void setColOrderingLocation(String value)
				{
					super.row.set(9, value);
				}
				public void setCellColOrderingLocationTooltip(String value)
				{
					super.row.setTooltip(9, value);
				}
				public void setColResultDetailsReadOnly(boolean value)
				{
					super.row.setReadOnly(10, value);
				}
				public boolean isColResultDetailsReadOnly()
				{
					return super.row.isReadOnly(10);
				}
				public void showColResultDetailsOpened()
				{
					super.row.showOpened(10);
				}
				public void setTooltipForColResultDetails(String value)
				{
					super.row.setTooltip(10, value);
				}
				public ims.ocrr.vo.PathologyResultListShortVo getColResultDetails()
				{
					return (ims.ocrr.vo.PathologyResultListShortVo)super.row.get(10);
				}
				public void setColResultDetails(ims.ocrr.vo.PathologyResultListShortVo value)
				{
					super.row.set(10, value);
				}
				public void setCellColResultDetailsTooltip(String value)
				{
					super.row.setTooltip(10, value);
				}
				public void setColClinicianReadOnly(boolean value)
				{
					super.row.setReadOnly(11, value);
				}
				public boolean isColClinicianReadOnly()
				{
					return super.row.isReadOnly(11);
				}
				public void showColClinicianOpened()
				{
					super.row.showOpened(11);
				}
				public void setTooltipForColClinician(String value)
				{
					super.row.setTooltip(11, value);
				}
				public String getColClinician()
				{
					return (String)super.row.get(11);
				}
				public void setColClinician(String value)
				{
					super.row.set(11, value);
				}
				public void setCellColClinicianTooltip(String value)
				{
					super.row.setTooltip(11, value);
				}
				public ims.ocrr.vo.OcsPathRadResultVo getValue()
				{
					return (ims.ocrr.vo.OcsPathRadResultVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.OcsPathRadResultVo value)
				{
					super.row.setValue(value);
				}
				public grdResultsRow getParentRow()
				{
					return super.row.getParent() == null ? null : new grdResultsRow(super.row.getParent());
				}
				public grdResultsRowCollection getRows()
				{
					if(this.collection == null)
						this.collection = new grdResultsRowCollection(super.row.getRows());
					return this.collection;
				}
				private grdResultsRowCollection collection;
			}
			public static class grdResultsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdResultsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdResultsRow get(int index)
				{
					return new grdResultsRow(super.collection.get(index));
				}
				public grdResultsRow newRow()
				{
					return new grdResultsRow(super.collection.newRow());
				}
				public grdResultsRow newRow(boolean autoSelect)
				{
					return new grdResultsRow(super.collection.newRow(autoSelect));
				}
				public grdResultsRow newRowAt(int index)
				{
					return new grdResultsRow(super.collection.newRowAt(index));
				}
				public grdResultsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdResultsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdResultsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow[] getAllRows()
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow row = getRows().get(x);
						rows.add(row);
						GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow[] result = new GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow)rows.get(x);
					}
					return result;
				}
				public GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow[] getAllRows(GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow parentRow)
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow row = parentRow.getRows().get(x);
						rows.add(row);
						GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow[] result = new GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow)rows.get(x);
					}
					return result;
				}
				public void expandAll()
				{
					expandCollapseAll(true);
				}
				public void collapseAll()
				{
					expandCollapseAll(false);
				}
				private void expandCollapseAll(boolean expand)
				{
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow row = getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void expandCollapseRow(GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow parentRow, boolean expand)
				{
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrMainLayer.tabSearchContainer.grdResultsRow row = parentRow.getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.ocrr.vo.OcsPathRadResultVoCollection getValues()
				{
					ims.ocrr.vo.OcsPathRadResultVoCollection listOfValues = new ims.ocrr.vo.OcsPathRadResultVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.OcsPathRadResultVo getValue()
				{
					return (ims.ocrr.vo.OcsPathRadResultVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.OcsPathRadResultVo value)
				{
					super.grid.setValue(value);
				}
				public grdResultsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdResultsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdResultsRowCollection getRows()
				{
					return new grdResultsRowCollection(super.grid.getRows());
				}
				public grdResultsRow getRowByValue(ims.ocrr.vo.OcsPathRadResultVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdResultsRow(row);
				}
				public void setColDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDateTimeImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDateTimeImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDateTimeRequestedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDateTimeRequestedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColTestNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColTestNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColSpecimenHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColSpecimenHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColProvisonalFinalHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColProvisonalFinalHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColABNHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColABNHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setColDisciplineHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getColDisciplineHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
				public void setColOrderingLocationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(9, value);
				}
				public String getColOrderingLocationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(9);
				}
				public void setColResultDetailsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(10, value);
				}
				public String getColResultDetailsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(10);
				}
				public void setColClinicianHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(11, value);
				}
				public String getColClinicianHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(11);
				}
			}
		
			public static class GrpCriteriaRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 648, 8, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Contains", startTabIndex.intValue() + 6);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 552, 8, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Begins with", startTabIndex.intValue() + 5);
				}
				public void setText(GrpCriteriaEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GrpCriteriaEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GrpCriteriaEnumeration.None;
						case 0: return GrpCriteriaEnumeration.rdoContain;
						case 1: return GrpCriteriaEnumeration.rdoBegins;
					}
					return null;
				}
				public void setValue(GrpCriteriaEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GrpCriteriaEnumeration.None.id);
				}
				public boolean isEnabled(GrpCriteriaEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GrpCriteriaEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GrpCriteriaEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GrpCriteriaEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GrpCriteriaEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GrpCriteriaEnumeration None = new GrpCriteriaEnumeration(-1);
				public static GrpCriteriaEnumeration rdoContain = new GrpCriteriaEnumeration(0);
				public static GrpCriteriaEnumeration rdoBegins = new GrpCriteriaEnumeration(1);
				private GrpCriteriaEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GrpCriteriaEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupFilterResultsRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 648, 56, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "All", startTabIndex.intValue() + 9);
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 552, 56, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Results Only", startTabIndex.intValue() + 8);
				}
				public void setText(GroupFilterResultsEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupFilterResultsEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupFilterResultsEnumeration.None;
						case 0: return GroupFilterResultsEnumeration.rdoAll;
						case 1: return GroupFilterResultsEnumeration.rdoResultsOnly;
					}
					return null;
				}
				public void setValue(GroupFilterResultsEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupFilterResultsEnumeration.None.id);
				}
				public boolean isEnabled(GroupFilterResultsEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupFilterResultsEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupFilterResultsEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupFilterResultsEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupFilterResultsEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupFilterResultsEnumeration None = new GroupFilterResultsEnumeration(-1);
				public static GroupFilterResultsEnumeration rdoAll = new GroupFilterResultsEnumeration(0);
				public static GroupFilterResultsEnumeration rdoResultsOnly = new GroupFilterResultsEnumeration(1);
				private GroupFilterResultsEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupFilterResultsEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 176, 18, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Resp. Clinician:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 456, 27, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Investigation:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 176, 42, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discipline:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 56, 16, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 56, 40, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 272, 40, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDisciplineTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDisciplineTemp);
				cmbDisciplineComboBox cmbDiscipline = (cmbDisciplineComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDisciplineComboBox.class, m_cmbDisciplineTemp);
				super.addComboBox(cmbDiscipline);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 272, 16, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbClinicianTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbClinicianTemp);
				qmbClinicianComboBox qmbClinician = (qmbClinicianComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbClinicianComboBox.class, m_qmbClinicianTemp);
				super.addComboBox(qmbClinician);
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 552, 27, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_qmbInvestigationTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbInvestigationTypeTemp);
				qmbInvestigationTypeComboBox qmbInvestigationType = (qmbInvestigationTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbInvestigationTypeComboBox.class, m_qmbInvestigationTypeTemp);
				super.addComboBox(qmbInvestigationType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 4, 80, 818, 470, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdResultsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(50), "Total:", Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdResultsTemp);
				grdResultsGrid grdResults = (grdResultsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdResultsGrid.class, m_grdResultsTemp);
				grdResults.addTreeColumn("Date / Time", 0, 128, false, false);
				grdResults.addImageColumn(" ", 1, 1, 25, false, 0);
				grdResults.addStringColumn("Date Req.", 0, 0, 65, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdResults.addStringColumn("Investigation", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdResults.addStringColumn("Specimen", 0, 0, 95, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdResults.addStringColumn("St.", 0, 0, 30, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdResults.addImageColumn("ABN", 1, 1, 35, false, 0);
				grdResults.setColABNHeaderTooltip("Abnormal Result Flag");
				grdResults.addImageColumn("Status", 1, 1, 50, false, 0);
				grdResults.addStringColumn("Discipline", 0, 0, 85, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdResults.addStringColumn("Patient Loc.", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdResults.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdResults.addStringColumn("Resp. Clinician", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdResults);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 784, 22, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 752, 22, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for results matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGrpCriteria = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE});
				super.addControl(tmpGrpCriteria);
				GrpCriteriaRadioButton GrpCriteria = (GrpCriteriaRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GrpCriteriaRadioButton.class, tmpGrpCriteria);
				GrpCriteria.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GrpCriteria);
				RadioButton tmpGroupFilterResults = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE});
				super.addControl(tmpGroupFilterResults);
				GroupFilterResultsRadioButton GroupFilterResults = (GroupFilterResultsRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupFilterResultsRadioButton.class, tmpGroupFilterResults);
				GroupFilterResults.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupFilterResults);
			}

			public DateControl dteFrom()
			{
				return (DateControl)super.getControl(5);
			}
			public DateControl dteTo()
			{
				return (DateControl)super.getControl(6);
			}
			public cmbDisciplineComboBox cmbDiscipline()
			{
				return (cmbDisciplineComboBox)super.getComboBox(0);
			}
			public qmbClinicianComboBox qmbClinician()
			{
				return (qmbClinicianComboBox)super.getComboBox(1);
			}
			public qmbInvestigationTypeComboBox qmbInvestigationType()
			{
				return (qmbInvestigationTypeComboBox)super.getComboBox(2);
			}
			public grdResultsGrid grdResults()
			{
				return (grdResultsGrid)super.getGrid(0);
			}
			public ImageButton imbClear()
			{
				return (ImageButton)super.getControl(11);
			}
			public ImageButton imbSearch()
			{
				return (ImageButton)super.getControl(12);
			}
			public GrpCriteriaRadioButton GrpCriteria()
			{
				return (GrpCriteriaRadioButton)super.getRadioButton(0);
			}
			public GroupFilterResultsRadioButton GroupFilterResults()
			{
				return (GroupFilterResultsRadioButton)super.getRadioButton(1);
			}
		}
		public static class tabChartingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbChartingViewComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(Integer value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(Integer value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(Integer value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(Integer value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(Integer value)
				{
					return super.control.removeRow(value);
				}
				public Integer getValue()
				{
					return (Integer)super.control.getValue();
				}
				public void setValue(Integer value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbChartTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ChartTypeShortVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ChartTypeShortVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ChartTypeShortVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ChartTypeShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ChartTypeShortVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ChartTypeShortVo getValue()
				{
					return (ims.core.vo.ChartTypeShortVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ChartTypeShortVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 35, 808, 515, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_chartingControlForm = loader.loadComponent(102243, appForm, startControlID * 10 + 1000, anchoringHelper18.getSize(), instance1, startTabIndex.intValue() + 26, skipContextValidation);
				//ims.framework.Control m_chartingControlControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(8), new Integer(35), new Integer(808), new Integer(515), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 26), m_chartingControlForm, instance1 } );
				ims.framework.Control m_chartingControlControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1016),  new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 26), m_chartingControlForm, instance1, Boolean.FALSE } );
				super.addControl(m_chartingControlControl);
				Menu[] menus1 = m_chartingControlForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 608, 10, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 464, 10, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 152, 10, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Profile:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 741, 7, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Search", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 628, 8, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 499, 8, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 48, 8, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbChartingViewTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), "Select the current view", Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbChartingViewTemp);
				cmbChartingViewComboBox cmbChartingView = (cmbChartingViewComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbChartingViewComboBox.class, m_cmbChartingViewTemp);
				super.addComboBox(cmbChartingView);
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 200, 8, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbChartTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbChartTypeTemp);
				cmbChartTypeComboBox cmbChartType = (cmbChartTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbChartTypeComboBox.class, m_cmbChartTypeTemp);
				super.addComboBox(cmbChartType);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 123, 7, 25, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.MultiSelect, form_images_local.Core.MultiSelect, "Add/Remove Items", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public ims.core.forms.charting.IComponent chartingControl()
			{
				return (ims.core.forms.charting.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setchartingControlValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setchartingControlVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean ischartingControlVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setchartingControlEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean ischartingControlEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Button btnSearchCharting()
			{
				return (Button)super.getControl(5);
			}
			public DateControl dteChartingEndDate()
			{
				return (DateControl)super.getControl(6);
			}
			public DateControl dteChartingStartDate()
			{
				return (DateControl)super.getControl(7);
			}
			public cmbChartingViewComboBox cmbChartingView()
			{
				return (cmbChartingViewComboBox)super.getComboBox(0);
			}
			public cmbChartTypeComboBox cmbChartType()
			{
				return (cmbChartTypeComboBox)super.getComboBox(1);
			}
			public ImageButton imbConfigureChart()
			{
				return (ImageButton)super.getControl(10);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSearch = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Search", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSearchContainer m_tabSearchContainer = (tabSearchContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSearchContainer.class, m_tabSearch, factory);
			super.addContainer(m_tabSearch, m_tabSearchContainer);
			ims.framework.utils.SizeInfo m_tabSearchDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabSearchRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper29.getWidth(), anchoringHelper29.getHeight());
			m_tabSearchContainer.setContext(form, appForm, m_tabSearch, loader, form_images_local, startControlID, m_tabSearchDesignSize, m_tabSearchRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCharting = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Charting", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabChartingContainer m_tabChartingContainer = (tabChartingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabChartingContainer.class, m_tabCharting, factory);
			super.addContainer(m_tabCharting, m_tabChartingContainer);
			ims.framework.utils.SizeInfo m_tabChartingDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabChartingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper30.getWidth(), anchoringHelper30.getHeight());
			m_tabChartingContainer.setContext(form, appForm, m_tabCharting, loader, form_images_local, startControlID, m_tabChartingDesignSize, m_tabChartingRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabSearch().setVisible(false);
			tabCharting().setVisible(false);
		}
		public void settabSearchEnabled(boolean value)
		{
			tabSearch().setEnabled(value);
		}
		public void settabChartingEnabled(boolean value)
		{
			tabCharting().setEnabled(value);
		}
		public void showtabSearch()
		{
			tabCharting().setVisible(false);
			tabSearch().setVisible(true);
		}
		public void showtabCharting()
		{
			tabSearch().setVisible(false);
			tabCharting().setVisible(true);
		}

		public tabSearchContainer tabSearch()
		{
			return (tabSearchContainer)super.layers.get(0);
		}
		public tabChartingContainer tabCharting()
		{
			return (tabChartingContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo' of the global context variable 'OCRR.RoleDisciplineSecurityLevels' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrMainLayer m_lyrMainLayer = (lyrMainLayer)LayerFlyweightFactory.getInstance().createLayer(lyrMainLayer.class, this, factory);
		super.addLayer(m_lyrMainLayer);
		m_lyrMainLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 576, 600, 176, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print Cumulative Results", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrMainLayer lyrMain()
	{
		return (lyrMainLayer)super.getLayer(0);
	}
	public Button btnPrintCumulative()
	{
		return (Button)super.getControl(2);
	}
	public Button btnPrint()
	{
		return (Button)super.getControl(3);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				ResultDialog = new LocalFormName(116128);
				OrderSummaryDialog = new LocalFormName(116132);
				PrintMultipleResults = new LocalFormName(116158);
			}
			public final FormName ResultDialog;
			public final FormName OrderSummaryDialog;
			public final FormName PrintMultipleResults;
		}

		public OCRRForms OCRR;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			ICP = new ICPImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				CriticalError = new ImageHelper(102250, "Images/Core/CriticalError.gif", new Integer(16), new Integer(16));
				Pupil_size2 = new ImageHelper(102127, "Images/Core/eye_2x.gif", new Integer(13), new Integer(13));
				RedCircle = new ImageHelper(102274, "Images/Core/red-circle-1.gif", new Integer(16), new Integer(16));
				YellowTriangleOut = new ImageHelper(102275, "Images/Core/yellow-tri-1-out.gif", new Integer(16), new Integer(16));
				MultiSelect = new ImageHelper(102233, "Images/Core/MultiSelect.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image CriticalError;
			public final ims.framework.utils.Image Pupil_size2;
			public final ims.framework.utils.Image RedCircle;
			public final ims.framework.utils.Image YellowTriangleOut;
			public final ims.framework.utils.Image MultiSelect;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				Child = new ImageHelper(118100, "Images/ICP/property.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Child;
		}
		public final CoreImages Core;
		public final ICPImages ICP;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_HasResults = new ims.framework.ContextVariable("HasResults", prefix + "_lv_OCRR.PathologyResults.__internal_x_context__HasResults_" + componentIdentifier + "");
			cxl_ChartResults = new ims.framework.ContextVariable("ChartResults", prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartResults_" + componentIdentifier + "");
			cxl_ChartType = new ims.framework.ContextVariable("ChartType", prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier + "");
			cxl_WorklistItemsWithDateToCollect = new ims.framework.ContextVariable("WorklistItemsWithDateToCollect", prefix + "_lv_OCRR.PathologyResults.__internal_x_context__WorklistItemsWithDateToCollect_" + componentIdentifier + "");
		}
		
		public boolean getHasResultsIsNotNull()
		{
			return !cxl_HasResults.getValueIsNull(context);
		}
		public Boolean getHasResults()
		{
			return (Boolean)cxl_HasResults.getValue(context);
		}
		public void setHasResults(Boolean value)
		{
			cxl_HasResults.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasResults = null;
		public boolean getChartResultsIsNotNull()
		{
			return !cxl_ChartResults.getValueIsNull(context);
		}
		public ims.core.vo.ChartResultVoCollection getChartResults()
		{
			return (ims.core.vo.ChartResultVoCollection)cxl_ChartResults.getValue(context);
		}
		public void setChartResults(ims.core.vo.ChartResultVoCollection value)
		{
			cxl_ChartResults.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ChartResults = null;
		public boolean getChartTypeIsNotNull()
		{
			return !cxl_ChartType.getValueIsNull(context);
		}
		public ims.core.vo.ChartTypeVo getChartType()
		{
			return (ims.core.vo.ChartTypeVo)cxl_ChartType.getValue(context);
		}
		public void setChartType(ims.core.vo.ChartTypeVo value)
		{
			cxl_ChartType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ChartType = null;
		public boolean getWorklistItemsWithDateToCollectIsNotNull()
		{
			return !cxl_WorklistItemsWithDateToCollect.getValueIsNull(context);
		}
		public ims.ocrr.vo.SpecimenWorkListItemDateToCollectVoCollection getWorklistItemsWithDateToCollect()
		{
			return (ims.ocrr.vo.SpecimenWorkListItemDateToCollectVoCollection)cxl_WorklistItemsWithDateToCollect.getValue(context);
		}
		public void setWorklistItemsWithDateToCollect(ims.ocrr.vo.SpecimenWorkListItemDateToCollectVoCollection value)
		{
			cxl_WorklistItemsWithDateToCollect.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WorklistItemsWithDateToCollect = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[84];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_OCRR.PathologyResults.Order", "BO-1070100000-ID", "ID_OcsOrderSession");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderAwaitingAuthorisation", "BO-1070100000-ID", "ID_OcsOrderSession");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier, "BO-1081100000-ID", "ID_ChartType");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier, "BO-1081100000-NAME", "Name");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier, "BO-1081100000-DESCRIPTION", "Description");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier, "BO-1081100000-MAXFACTOR", "MaxFactor");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier, "BO-1081100000-MINFACTOR", "MinFactor");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier, "BO-1081100000-BELOWBANDPERCENT", "BelowBandPercent");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier, "BO-1081100000-ABOVEBANDPERCENT", "AboveBandPercent");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier, "BO-1081100000-BACKGROUNDCOLOUR", "BackgroundColour");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier, "BO-1081100000-FOREGROUNDCOLOUR", "ForegroundColour");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier, "BO-1081100000-NORMALBANDCOLOUR", "NormalBandColour");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.PathologyResults.__internal_x_context__ChartType_" + componentIdentifier, "BO-1081100000-ISACTIVE", "IsActive");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
