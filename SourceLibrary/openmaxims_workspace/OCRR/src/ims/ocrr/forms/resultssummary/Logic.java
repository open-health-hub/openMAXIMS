//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ancuta Ciubotaru using IMS Development Environment (version 1.80 build 4072.23331)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.resultssummary;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.EnvironmentConfig;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.exceptions.PresentationLogicException;
import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

import com.itextpdf.text.DocumentException;				// MAXGEN-1206 - The itext jar has changed it's import path. 		
import com.itextpdf.text.pdf.PdfCopyFields;
import com.itextpdf.text.pdf.PdfReader;

import java.io.File;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int	RESULT_SUMMARY_ID_LIST	= 273;
	private static final int	RESULT_SUMMARY	= 274;
	int totalPages=0;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
	}
	
	
	@Override
	protected void onBtnBuildClick()
	{
		try
		{
			buildReport();
		}
		catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	private boolean validateSeach() 
	{
		if(!form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			engine.showMessage("It must be selected a patient in order the form to work.");
			return false;
		}
		
		if(form.dteStartDate().getValue() == null || form.dteEndDate().getValue() == null)
		{
			engine.showMessage("Start and End Dates are mandatory.");
			return false;
		}
		if(form.dteStartDate().getValue().isGreaterThan(form.dteEndDate().getValue()))
		{
			engine.showMessage("Start Date must be before End Date.");
			return false;
		}
		
		return true;
	}
	
	private void buildReport() throws Exception
	{
		java.util.Date date = new java.util.Date();
		SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
		String timestamp = df.format(date);
		
		List<String> resultsList=new ArrayList<String>();
		String fileName = "ResultSummary"+engine.getSessionId()+timestamp+".pdf";	
				
	    String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		if(!validateSeach())
			return;
		
		if(checkConfigFlags(urlQueryServer, urlReportServer) == false)
			return;	
		
		
	    String[] obj = domain.getSystemReportAndTemplate(new Integer(RESULT_SUMMARY_ID_LIST));				
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		String repXml = (String) obj[0];
		String templXml = (String) obj[1];
		if(templXml != null && repXml != null)
		{						
			resultsList = processResultSummaryIDReport(client, urlReportServer, repXml, templXml);
		}
					
			String[] obj2 = domain.getSystemReportAndTemplate(new Integer(RESULT_SUMMARY));				
			if(obj2 == null || obj2.length < 2)
			{
				engine.showMessage("I could not get the report and template !");
				return;
			}
		
			if(obj2[0] == null || obj2[1] == null)
			{
				engine.showMessage("The report has not been deployed !");
				return;
			}
			String repXml2 = (String) obj2[0];
			String templXml2= (String) obj2[1];				
			if(templXml2 != null && repXml2 != null)
			{				
				if(resultsList.size()==0)
			    {
					byte[] pdfSummary=processResultSummaryReport(client, urlReportServer, repXml2, templXml2,-1,totalPages+1);
					concatenateFiles(fileName,pdfSummary);
			    }
				else
				{
					for(int i=0;i<resultsList.size();i++)
					{				
						byte[] pdfSummary=processResultSummaryReport(client, urlReportServer, repXml2, templXml2,Integer.parseInt(resultsList.get(i)),totalPages+1);
						concatenateFiles(fileName,pdfSummary);
					}
				}
			}					
		form.htmResult().setHTML("<IFRAME id=\"ResultFrame123\" name=\"PostFrame\" width=\"100%\" height=\"100%\" frameborder=0 src='" + engine.getRequestUrl() + System.getProperty("file.separator")+"download"+System.getProperty("file.separator") + fileName +  "'></IFRAME>");
		form.btnClear().setEnabled(true);
	}

	private boolean checkConfigFlags(String queryServerUrl, String reportServerUrl)
	{		
		if(queryServerUrl == null || queryServerUrl.length() == 0 || queryServerUrl.equals(ConfigFlag.GEN.QUERY_SERVER_URL.getDefaultValue()))
		{
			engine.showMessage("The config flag QUERY_SERVER_URL was not set !");
			return false;
		}
		
		if(reportServerUrl == null || reportServerUrl.length() == 0 || reportServerUrl.equals(ConfigFlag.GEN.REPORT_SERVER_URL.getDefaultValue()))
		{
			engine.showMessage("The config flag REPORT_SERVER_URL was not set !");
			return false;
		}
		
		return true;
	}

	private String getOutputFolder() throws DomainInterfaceException
	{
		if ( EnvironmentConfig.getBaseUri() == null || EnvironmentConfig.getBaseUri().length() == 0)
		{
			throw new DomainInterfaceException("EnvironmentConfig.getBaseUri() returned null !");				
		}
		
		String folderName = EnvironmentConfig.getBaseUri() + "download" +System.getProperty("file.separator");				
		File folder = new File(folderName);
		
		if(folder.exists() == false)
		{
			boolean bSuccess = folder.mkdir();
			
			if(bSuccess == false)
				throw new DomainInterfaceException("I could not create the folder '" + folder.getAbsolutePath() + "' !");
		}
		
		return folderName;
	}

	private void concatenateFiles(String fileName,byte[] pdfSummary) throws DomainInterfaceException, IOException
	{
		java.util.Date date = new java.util.Date();
		SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
		String timestamp = df.format(date);			
		String tempPdfFile = "ResultSummary_Temp"+engine.getSessionId()+timestamp+".pdf";

		String folderName = null;		
	    folderName = getOutputFolder();

		
		File tempFile = new File(folderName +tempPdfFile);		
		if(tempFile.exists())
		{
			deleteFile(tempFile);
		}		

		File file = new File(folderName +fileName);	
		File fileNew = new File(folderName +"_"+fileName);
		if(fileNew.exists())
        {
            deleteFile(fileNew);
        }		
		if(file.exists())
		{			
			writeToFile(folderName +tempPdfFile, pdfSummary);
	        renameFile(file, fileNew);
		}
		else
		{
			writeToFile(folderName +fileName, pdfSummary);
			PdfReader reader = new PdfReader(folderName +fileName);
			totalPages = totalPages+reader.getNumberOfPages();
			return ;
		}	
		
		try 
		{			
			PdfReader reader1 = new PdfReader(fileNew.getAbsolutePath());
		    PdfReader reader2 = new PdfReader(folderName +tempPdfFile);
		    
		    totalPages = totalPages+reader2.getNumberOfPages();
		    
		    PdfCopyFields copy = new PdfCopyFields(new FileOutputStream(folderName  +fileName));
		    copy.addDocument(reader1);
		    copy.addDocument(reader2);
		    copy.close();
		    
		    deleteFile(fileNew);
		    deleteFile(tempFile);
		    
		} 
		catch (FileNotFoundException e) 
		{
			e.printStackTrace();
			throw new DomainInterfaceException(e.toString());
		} 
		catch (DocumentException e) 
		{
			e.printStackTrace();
			throw new DomainInterfaceException(e.toString());
		}
		catch (IOException e)  
		{
			e.printStackTrace();
			throw new DomainInterfaceException(e.toString());
		}				
	}

	private void renameFile(File file, File fileNew) throws DomainInterfaceException
	{
		boolean success = false;
		success = file.renameTo(fileNew);
		
		if (!success)
		{
		    System.out.println("File '" + file.getName() + "' was not successfully renamed to '" + fileNew + "' !");
		    throw new DomainInterfaceException("File '" + file.getName() + "' was not successfully renamed to '" + fileNew + "' !");
		}
		
	}

	private void writeToFile(String tempPdfFile, byte[] pdfSummary) throws DomainInterfaceException
	{
		FileOutputStream fos;
		
		try 
		{
			fos = new FileOutputStream(tempPdfFile);
			fos.write(pdfSummary);
			fos.close();
		} 
		catch (FileNotFoundException e) 
		{
			e.printStackTrace();
			throw new DomainInterfaceException(e.toString());
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
			throw new DomainInterfaceException(e.toString());
		}
		
	}

	private void deleteFile(File tempFile) throws DomainInterfaceException
	{
		boolean success = false;
		
		success = tempFile.delete();

		if (!success)
		{
		    System.out.println("File '" + tempFile + "' was not successfully deleted !");
		    throw new DomainInterfaceException("File '" + tempFile + "' was not successfully deleted !");
		}
		
	}

	private byte[] processResultSummaryReport(QueryBuilderClient client, String urlReportServer, String repXml2, String templXml2,int inv_id,int page_start)
	{
		byte[] doc = null;
		
		client.getSeeds().clear();
		client.addSeed(new SeedValue("OrderInvestigation_id",inv_id , java.lang.Integer.class));
		client.addSeed(new SeedValue("PAGE_START", page_start, java.lang.Integer.class));
		
		try
		{					
			doc = client.buildReport(repXml2, templXml2, urlReportServer, QueryBuilderClient.PDF, "", 1);

		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return null;
		}
				
		return doc;	
	}

	private List<String>  processResultSummaryIDReport(QueryBuilderClient client, String urlReportServer, String repXml, String templXml) throws IOException
	{
		byte[] doc = null;
		List<String> resultsList = new ArrayList<String>();
		
		client.getSeeds().clear();
		
		client.addSeed(new SeedValue("START_DATE", form.dteStartDate().getValue().getDate(), java.sql.Date.class));
		client.addSeed(new SeedValue("END_DATE", form.dteEndDate().getValue().addDay(1).getDate(), java.sql.Date.class));
		
		Integer nOrderingHCPId= null;
		if (form.ccConsultant().getValue() != null)		
			nOrderingHCPId = form.ccConsultant().getValue().getIMosId();			
		client.addSeed(new SeedValue("CONSULTANT", nOrderingHCPId, java.lang.Integer.class));
		
		ServiceRefVo discipline=form.cmbDiscipline().getValue();
		
		Integer id_discipline = (Integer) null;
		
		if(discipline != null && discipline.getID_ServiceIsNotNull())
		{
			id_discipline=discipline.getID_Service();
		}		
		client.addSeed(new SeedValue("LABORATORY", id_discipline, java.lang.Integer.class));
		
		
		if(ims.ocrr.forms.resultssummary.GenForm.Group1Enumeration.rdoInp.equals(form.Group1().getValue()))
		{
			client.addSeed(new SeedValue("INPATIENT", 1, java.lang.Integer.class));
			client.addSeed(new SeedValue("OUTPATIENT", null, java.lang.Integer.class));
		}
		else if(ims.ocrr.forms.resultssummary.GenForm.Group1Enumeration.rdoOut.equals(form.Group1().getValue()))
		{
			client.addSeed(new SeedValue("INPATIENT", null, java.lang.Integer.class));
			client.addSeed(new SeedValue("OUTPATIENT", 1, java.lang.Integer.class));
		}
		else if(ims.ocrr.forms.resultssummary.GenForm.Group1Enumeration.rdoBoth.equals(form.Group1().getValue()))
		{
			client.addSeed(new SeedValue("INPATIENT", null, java.lang.Integer.class));
			client.addSeed(new SeedValue("OUTPATIENT", null, java.lang.Integer.class));
		}
		if(form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			client.addSeed(new SeedValue("PATIENT_NAME", form.getGlobalContext().Core.getPatientShort().getID_Patient(), java.lang.Integer.class));
		}
		
		try
		{					
			doc = client.buildReport(repXml, templXml, urlReportServer, QueryBuilderClient.CSV , "", 1);

		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return null;
		}
		
		try
		{
			resultsList=processCsvFile(doc);
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.toString());
			return null;
		}
		return resultsList;		

	}

	private List<String>  processCsvFile(byte[] doc) throws DomainInterfaceException, IOException
	{
		List<String> resultsList = new ArrayList<String>();
		
		String strLine;      
        ByteArrayInputStream fstream = new ByteArrayInputStream(doc);
        DataInputStream in = new DataInputStream(fstream);
        BufferedReader br = new BufferedReader(new InputStreamReader(in));
        
        // Read File Line By Line
        while ((strLine = br.readLine()) != null)
        {
            // Process current line from file
            if (strLine != null && strLine.trim().length() > 0)
            {
                String token;
                try
                {
                    token =strLine.replace("\"", "").trim();
                }
                catch (Exception ex)
                {
                	throw new DomainInterfaceException(ex);
                }
                
                if (token != null && token.length() >0)
                {                	                              	
                	resultsList.add(token);
                }
            }
        }
        
        return resultsList;
	}

	private void initialize()
	{
		form.Group1().setValue(ims.ocrr.forms.resultssummary.GenForm.Group1Enumeration.rdoInp);		

		loadDiscipline();
		form.ccConsultant().initialize(MosType.HCP);
		form.btnClear().setVisible(true);
		form.btnClear().setEnabled(false);
		
	}
	

	private void loadDiscipline()
	{
		form.cmbDiscipline().clear();

		ServiceLiteVoCollection discipline = domain.listDiscipline();
		if (discipline == null)
			return;

		for (int x = 0; x < discipline.size(); x++)
		{
			if (discipline.get(x) != null && discipline.get(x).getServiceNameIsNotNull())
			{
				form.cmbDiscipline().newRow(discipline.get(x), discipline.get(x).getServiceName());
			}
		}
		
	}

	@Override
	protected void onRadioButtonGroup1ValueChanged() throws PresentationLogicException
	{
		
		
	}

	@Override
	protected void onBtnClearClick() throws PresentationLogicException
	{
		form.htmResult().setHTML("");
		form.btnClear().setEnabled(false);
		
	}

	
}
