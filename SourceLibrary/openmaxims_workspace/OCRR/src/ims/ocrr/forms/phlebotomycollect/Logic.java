//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2393.21546)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.phlebotomycollect;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellOptions;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.ocrr.forms.phlebotomycollect.GenForm.GroupFilterEnumeration;
import ims.ocrr.vo.OrderSpecimenVo;
import ims.ocrr.vo.PhlebotomyRoundShortVo;
import ims.ocrr.vo.PhlebotomyRoundShortVoCollection;
import ims.ocrr.vo.SpecimenWorkListItemListVo;
import ims.ocrr.vo.SpecimenWorkListItemListVoCollection;
import ims.ocrr.vo.SpecimenWorkListItemVo;
import ims.ocrr.vo.SpecimenWorkListitemCustomVo;
import ims.ocrr.vo.SpecimenWorkListitemCustomVoCollection;
import ims.ocrr.vo.lookups.PrintStatus;
import ims.ocrr.vo.lookups.SpecimenCollectionStatus;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.TreeMap;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final Integer	LOCATION_COLUMN		= new Integer(0);
	private static final Integer	PRINT_COL			= new Integer(1);
	private static final Integer	COLLECTED_COLUMN	= new Integer(2);
	private static final Integer	DATE_COLUMN			= new Integer(3);
	private static final Integer	TIME_COLUMN			= new Integer(4);
	private static final Integer	PHLEBOTOMIST_COLUMN	= new Integer(5);
	private static final Integer	COMMENTS_COLUMN		= new Integer(6);
	private static final Integer	BUTTON_COLUMN		= new Integer(7);
	
	private static final String		EmptyWard			= "UNASSIGNED WARD for these patient(s)";
	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		form.GroupFilter().setValue(GroupFilterEnumeration.rdoAll);
		createDynamicGridColumns();
		form.dteSearchDate().setValue(new Date());
		listRoundsByDate(form.dteSearchDate().getValue());
	}
	private void createDynamicGridColumns()
	{
		DynamicGridColumn col = form.dyngrdCollect().getColumns().newColumn("Location", LOCATION_COLUMN);
		col.setWidth(300);
		
		//WDEV-16581
		col = form.dyngrdCollect().getColumns().newColumn("Print", PRINT_COL);
		col.setWidth(30);
		col.setAlignment(Alignment.CENTER);
		
		col = form.dyngrdCollect().getColumns().newColumn("Collected", COLLECTED_COLUMN);
		col.setWidth(60);
		col.setAlignment(Alignment.CENTER);
		col = form.dyngrdCollect().getColumns().newColumn("Date", DATE_COLUMN);
		col.setWidth(80);
		col = form.dyngrdCollect().getColumns().newColumn("Time", TIME_COLUMN);
		col.setWidth(40);
		col = form.dyngrdCollect().getColumns().newColumn("Collector", PHLEBOTOMIST_COLUMN);
		col.setWidth(140);
		col.setAlignment(Alignment.RIGHT);
		col = form.dyngrdCollect().getColumns().newColumn("Collector's comments", COMMENTS_COLUMN);
		col.setWidth(130);
		col = form.dyngrdCollect().getColumns().newColumn(" ",BUTTON_COLUMN);
		col.setWidth(-1);
		
	}
	private void listRoundsByDate(Date date)
	{
		form.dyngrdCollect().getRows().clear();
		form.cmbRound().clear();
		
		form.getLocalContext().setSelectedPatient(null);
		form.getLocalContext().setSelectedRound(null);
		
		if(date == null)
			return;
		
		PhlebotomyRoundShortVoCollection list = domain.listRoundsByDate(date);

		for (int i = 0; i < list.size(); i++)
		{
			PhlebotomyRoundShortVo item = list.get(i);
			
			StringBuffer sb = new StringBuffer();
			
			sb.append(item.getRoundToCollect().getText());
			sb.append(" - ");
			if(item.getCollectorIsNotNull() && item.getCollector().getName() != null)
			{
				if (item.getCollector().getName().getForename()!=null)//WDEV-12958
				{
    				sb.append(item.getCollector().getName().getForename());
    				sb.append(" ");
				}
				sb.append(item.getCollector().getName().getSurname());
			}
			for (int j = 0; j < item.getWards().size(); j++)
			{
				sb.append(", ");	
				sb.append(item.getWards().get(j).getName());
			}
			
			form.cmbRound().newRow(item, sb.toString());
		}
	}
	protected void onDyngrdCollectCellTextSubmited(ims.framework.controls.DynamicGridCell cell)
	{
		cell.getItems().clear();
		
		if (cell.getTypedText() == null || cell.getTypedText().equals(""))
		{
			engine.showMessage("Please enter at least one character to search on.");
			return;
		}

		HcpCollection voCollHcp = domain.listHcp(cell.getTypedText());
		if (voCollHcp != null && voCollHcp.size() > 0)
		{
			for (int i = 0; i < voCollHcp.size(); i++)
			{
				cell.getItems().newItem(voCollHcp.get(i));
			}
			if (voCollHcp.size() == 1)
				cell.setValue(voCollHcp.get(0));
			else if (voCollHcp.size() > 1)
				cell.showOpened();
		}
		else
			engine.showMessage("No matching records found.");

	}
	protected void onDyngrdCollectCellButtonClicked(ims.framework.controls.DynamicGridCell cell)
	{
		if(saveRowRecord(cell.getRow()))
		{
			cell.getRow().setReadOnly(true);
			cell.getRow().setBackColor(Color.LightGray);
			removeCellByColumn(cell.getRow(), BUTTON_COLUMN);
		}
	}
	private boolean saveRowRecord(DynamicGridRow row)
	{
		SpecimenCollectionStatus collected = (SpecimenCollectionStatus) row.getCells().get(form.dyngrdCollect().getColumns().getByIdentifier(COLLECTED_COLUMN)).getValue();
		String comment = (String) row.getCells().get(form.dyngrdCollect().getColumns().getByIdentifier(COMMENTS_COLUMN)).getValue();
		
		if(collected == null)
			return false;
		
		SpecimenWorkListItemListVo voWorkListItemSaved = null;
		if(collected.equals(SpecimenCollectionStatus.COLLECTIONCOMPLETE))
		{
			SpecimenWorkListItemVo workListItem = domain.getWorkListItemRecord(((SpecimenWorkListitemCustomVo)row.getValue()).getWorkListitemId());
			
			//WDEV-16781
			if (SpecimenCollectionStatus.COULDNOTCOLLECT.equals(workListItem.getCollectionStatus()) || SpecimenCollectionStatus.COLLECTIONCOMPLETE.equals(workListItem.getCollectionStatus()))
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				listRound();
				return false;
			}
			
			workListItem.setCollectionStatus(SpecimenCollectionStatus.COLLECTIONCOMPLETE);

			OrderSpecimenVo specimen = domain.getSpecimentRecord(workListItem.getSpecimen());
			
			Hcp collector = (Hcp) row.getCells().get(form.dyngrdCollect().getColumns().getByIdentifier(PHLEBOTOMIST_COLUMN)).getValue();
			Date collDate = (Date) row.getCells().get(form.dyngrdCollect().getColumns().getByIdentifier(DATE_COLUMN)).getValue();
			Time collTime = (Time) row.getCells().get(form.dyngrdCollect().getColumns().getByIdentifier(TIME_COLUMN)).getValue();

			if(collector == null)
			{
				engine.showMessage("Collector is mandatory.");
				return false;
			}
			if(collDate == null)
			{
				engine.showMessage("Collection Date is mandatory.");
				return false;
			}
			else 
			{
				if(specimen.getSysInfoIsNotNull())
				{
					if(specimen.getSysInfo().getCreationDateTime() != null && specimen.getSysInfo().getCreationDateTime().getDate() != null)
					{
						if(collDate.isLessThan(specimen.getSysInfo().getCreationDateTime().getDate()))
						{
							engine.showMessage("The Collection Date cannot be before the Requested Date.");
							return false;
						}	
					}
				}
				if(collDate.isGreaterThan(new Date()))
				{
					engine.showMessage("The Collection Date cannot be in the future");
					return false;
				}
			}
			if(collTime == null)
			{
				engine.showMessage("Collection Time is mandatory.");
				return false;
			}
			else
			{
			
				if(specimen.getSysInfoIsNotNull())
				{
					if (collDate != null && specimen.getSysInfo().getCreationDateTime() != null && specimen.getSysInfo().getCreationDateTime().getDate() != null)
					{
						//only validate the time entered afgainst collection time if the collection date is the same as the requested date
						//because the time can be any time if it is on a different day
						if(collDate.equals(specimen.getSysInfo().getCreationDateTime().getDate()))
						{			
							if(specimen.getSysInfo().getCreationDateTime() != null && specimen.getSysInfo().getCreationDateTime().getTime() != null)
							{
								if(collTime.isLessThan(specimen.getSysInfo().getCreationDateTime().getTime()))
								{
									engine.showMessage("The Collection Time cannot be before the Requested Time.");
									return false;
								}		
							}
						}
						if(collDate.equals(new Date()))
						{
							if(collTime.isGreaterThan(new Time()))
							{
								engine.showMessage("The Collection Time cannot be in the future");
								return false;
							}
						}
					}
				}
			}
			
			specimen.setCollectingMos(collector.getMos());
			specimen.setCollDateTimePlacer(new DateTime(collDate, collTime));
			
			String phlebotomistString = collector.toString();  
			comment = getPhlebotomistComment(specimen.getCollectorComment(), phlebotomistString, new DateTime(collDate,collTime) , comment);
			specimen.setCollectorComment(comment);
			
			try
			{
				voWorkListItemSaved = domain.saveWorkListItemRecord(workListItem, specimen);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage("Failed to save WorkListItem record (StaleObjectException).");
				return false;
			}
		}
		else
		{
			if(comment == null || comment.trim().length() == 0)
			{
				engine.showMessage("Comment is mandatory.");
				return false;
			}

			SpecimenWorkListItemVo workListItem = domain.getWorkListItemRecord(((SpecimenWorkListitemCustomVo)row.getValue()).getWorkListitemId());
			
			//WDEV-16781
			if (SpecimenCollectionStatus.COLLECTIONCOMPLETE.equals(workListItem.getCollectionStatus()) || SpecimenCollectionStatus.COULDNOTCOLLECT.equals(workListItem.getCollectionStatus()))
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				listRound();
				return false;
			}
			
			workListItem.setCollectionStatus(SpecimenCollectionStatus.COULDNOTCOLLECT);

			OrderSpecimenVo specimen = domain.getSpecimentRecord(workListItem.getSpecimen());
			comment = getPhlebotomistComment(specimen.getCollectorComment(), engine.getLoggedInUser().getUserRealName(), new DateTime() , comment);
			specimen.setCollectorComment(comment);
			
			try
			{
				voWorkListItemSaved = domain.saveWorkListItemRecord(workListItem, specimen);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage("Failed to save WorkListItem record (StaleObjectException).");
				return false;
			}
			
			
		}
		refreshCommentCell(voWorkListItemSaved, row);
		return true;
	}
	
	private void refreshCommentCell(SpecimenWorkListItemListVo voWorkListItemSaved, DynamicGridRow row)
	{
		if(voWorkListItemSaved == null || row == null)
			return;
		DynamicGridCell commentCell = row.getCells().get(form.dyngrdCollect().getColumns().getByIdentifier(COMMENTS_COLUMN));
		if(voWorkListItemSaved.getSpecimenIsNotNull() && voWorkListItemSaved.getSpecimen().getCollectorCommentIsNotNull())
		{
			commentCell.setValue(voWorkListItemSaved.getSpecimen().getCollectorComment());
			commentCell.setTooltip(voWorkListItemSaved.getSpecimen().getCollectorComment());
		}
	}
	private String getPhlebotomistComment(String existingComment, String phlebotomistString, DateTime dateTimeCollected, String commentCollected)
	{
		return new ims.ocrr.helper.PhlebotomyHelper().getPhlebotomistComment(existingComment, phlebotomistString, dateTimeCollected, commentCollected);
	}
	protected void onDyngrdCollectCellValueChanged(ims.framework.controls.DynamicGridCell cell)
	{
		processCellPostback(cell);
	}
	private void processCellPostback(DynamicGridCell cell)
	{
		if(cell.getColumn().equals(form.dyngrdCollect().getColumns().get(COLLECTED_COLUMN.intValue())))
		{
			if(cell.getValue() == null)
			{
				clearVariableCells(cell.getRow());
				
				//WDEV-16813
				SpecimenWorkListitemCustomVo item = (SpecimenWorkListitemCustomVo) cell.getRow().getValue();

				if (item != null && item.getCollectionComments() != null && item.getCollectionComments().length() > 0)
				{
					DynamicGridCell cellText = cell.getRow().getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(COMMENTS_COLUMN), DynamicCellType.STRING);
					cellText.setValue(item.getCollectionComments());
					cellText.setTooltip(item.getCollectionComments());
					cellText.setReadOnly(true);
				}
			}
			else if(cell.getValue().equals(SpecimenCollectionStatus.COLLECTIONCOMPLETE))
			{
				createControlsForCollection(cell.getRow(), null);
			}
			else
			{
				createControlsForNotCollection(cell.getRow(), null);
			}
		}
		
		//WDEV-16581
		if(cell.getColumn().equals(form.dyngrdCollect().getColumns().get(PRINT_COL.intValue())))
		{
			if(PrintStatus.PRINTED.equals(cell.getValue()) || cell.getValue() == null)
			{
				cell.getItems().clear();
				cell.getItems().newItem(PrintStatus.FORPRINTING);
			}
		}
	}
	
	private void createControlsForNotCollection(DynamicGridRow row, SpecimenWorkListitemCustomVo item)
	{
		clearVariableCells(row);

		if(item == null)
		{
			DynamicGridCell cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(DATE_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.READ_ONLY_DATA_CELL);				
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(TIME_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.READ_ONLY_DATA_CELL);
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(PHLEBOTOMIST_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.LABEL_CELL);
			cell.setValue("Reason:");
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(COMMENTS_COLUMN), DynamicCellType.STRING, DynamicGridCellOptions.EDITABLE_DATA_CELL);
			cell.setStringMaxLength(200);//WDEV-15082
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(BUTTON_COLUMN), DynamicCellType.IMAGEBUTTON, DynamicGridCellOptions.EDITABLE_DATA_CELL);
			cell.setValue(form.getImages().OCRR.SaveGrid);
		}
		else
		{
			DynamicGridCell cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(DATE_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.READ_ONLY_DATA_CELL);				
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(TIME_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.READ_ONLY_DATA_CELL);
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(PHLEBOTOMIST_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.LABEL_CELL);
			cell.setValue("Reason:");
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(COMMENTS_COLUMN), DynamicCellType.STRING, DynamicGridCellOptions.EDITABLE_DATA_CELL);
			cell.setValue(item.getCollectionComments());
			cell.setTooltip(item.getCollectionComments());
			cell.setReadOnly(true); //WDEV-16694
			//cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(BUTTON_COLUMN), DynamicCellType.IMAGEBUTTON, DynamicGridCellOptions.EDITABLE_DATA_CELL);
			//cell.setValue(form.getImages().OCRR.SaveGrid);
		}
	}
	private void createControlsForCollection(DynamicGridRow row, SpecimenWorkListitemCustomVo item)
	{
		clearVariableCells(row);

		if(item == null)
		{
			DynamicGridCell cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(DATE_COLUMN), DynamicCellType.DATE, DynamicGridCellOptions.EDITABLE_DATA_CELL);				
			cell.setValue(form.dteSearchDate().getValue());
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(TIME_COLUMN), DynamicCellType.TIME, DynamicGridCellOptions.EDITABLE_DATA_CELL);
			cell.setValue(getTimeFromAboveRow(row));
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(PHLEBOTOMIST_COLUMN), DynamicCellType.QUERYCOMBOBOX, DynamicGridCellOptions.EDITABLE_DATA_CELL);
			cell.setAutoPostBack(true);
			Hcp collector = getCollectorFromAboveRow(row);
			if(collector == null)
				collector = form.cmbRound().getValue().getCollector();
			if(collector != null)
			{
				cell.getItems().newItem(collector);
				cell.setValue(collector);			
			}
				
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(COMMENTS_COLUMN), DynamicCellType.STRING, DynamicGridCellOptions.EDITABLE_DATA_CELL);
			cell.setStringMaxLength(200);//WDEV-15082
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(BUTTON_COLUMN), DynamicCellType.IMAGEBUTTON, DynamicGridCellOptions.EDITABLE_DATA_CELL);
			cell.setValue(form.getImages().OCRR.SaveGrid);
		}
		else
		{
			DynamicGridCell cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(DATE_COLUMN), DynamicCellType.DATE, DynamicGridCellOptions.READ_ONLY_DATA_CELL);				
			cell.setValue(item.getCollectionDateTimeIsNotNull() ? item.getCollectionDateTime().getDate() : null);
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(TIME_COLUMN), DynamicCellType.TIME, DynamicGridCellOptions.READ_ONLY_DATA_CELL);
			cell.setValue(item.getCollectionDateTimeIsNotNull() ? item.getCollectionDateTime().getTime() : null);
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(PHLEBOTOMIST_COLUMN), DynamicCellType.QUERYCOMBOBOX, DynamicGridCellOptions.READ_ONLY_DATA_CELL);
			cell.getItems().newItem(item.getCollector());
			cell.setValue(item.getCollector());			
			cell = row.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(COMMENTS_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.READ_ONLY_DATA_CELL);
			cell.setValue(item.getCollectionComments());
			cell.setTooltip(item.getCollectionComments());
		}	
	}
	private Hcp getCollectorFromAboveRow(DynamicGridRow row)
	{
		DynamicGridRow previousRow = null;
		
		for (int i = 0; i < form.dyngrdCollect().getRows().size(); i++)
		{
			DynamicGridRow wardRow = form.dyngrdCollect().getRows().get(i);
			
			for (int j = 0; j < wardRow.getRows().size(); j++)
			{
				DynamicGridRow patientRow = wardRow.getRows().get(j);
				
				for (int k = 0; k < patientRow.getRows().size(); k++)
				{
					DynamicGridRow serviceRow = patientRow.getRows().get(k);
					
					if(serviceRow.equals(row))
						break;

					DynamicGridCell cell = serviceRow.getCells().get(form.dyngrdCollect().getColumns().getByIdentifier(PHLEBOTOMIST_COLUMN));
					
					if(cell == null || !cell.getType().equals(DynamicCellType.QUERYCOMBOBOX))
						continue;

					if(cell.getValue() instanceof Hcp)
						previousRow = serviceRow;
					/*
					else if(cell.getValue() instanceof String)
					{
						Integer collectingMos = ((SpecimenWorkListitemCustomVo)previousRow.getValue()).getCollectingMos();
						
						if(collectingMos != null)
							previousRow = serviceRow;
					}
					*/
				}
			}
		}

		/*
		for (int i = 0; i < row.getParent().getRows().size(); i++)
		{
			if(row.getParent().getRows().get(i).equals(row))
				break;
			
			previousRow = row.getParent().getRows().get(i);
		}
		*/
		
		if(previousRow == null)
			return null;
		
		DynamicGridCell cell = previousRow.getCells().get(form.dyngrdCollect().getColumns().getByIdentifier(PHLEBOTOMIST_COLUMN));
		
		if(cell == null || !cell.getType().equals(DynamicCellType.QUERYCOMBOBOX))
			return null;
		
		if(cell.getValue() instanceof Hcp)
			return (Hcp) cell.getValue();
		
		if(cell.getValue() instanceof String)
		{
			Integer collectingMos = ((SpecimenWorkListitemCustomVo)previousRow.getValue()).getCollectingMos();
			
			if(collectingMos != null)
				return domain.getHcpByMosId(collectingMos);
		}
		
		return null;
	}
	private Time getTimeFromAboveRow(DynamicGridRow row)
	{
		DynamicGridRow previousRow = null;
		for (int i = 0; i < row.getParent().getRows().size(); i++)
		{
			if(row.getParent().getRows().get(i).equals(row))
				break;
			
			previousRow = row.getParent().getRows().get(i);
		}
		
		if(previousRow == null || previousRow.getRows().size() > 0)
			return null;
		
		DynamicGridCell cell = previousRow.getCells().get(form.dyngrdCollect().getColumns().getByIdentifier(TIME_COLUMN));
		
		if(cell == null || !cell.getType().equals(DynamicCellType.TIME))
			return null;
		
		return (Time) cell.getValue();
	}
	private void clearVariableCells(DynamicGridRow row)
	{
		removeCellByColumn(row, DATE_COLUMN);
		removeCellByColumn(row, TIME_COLUMN);
		removeCellByColumn(row, PHLEBOTOMIST_COLUMN);
		removeCellByColumn(row, COMMENTS_COLUMN);
		removeCellByColumn(row, BUTTON_COLUMN);
	}
	private void removeCellByColumn(DynamicGridRow row, Integer colIdentifier)
	{
		DynamicGridCell cell;
		cell = row.getCells().get(form.dyngrdCollect().getColumns().getByIdentifier(colIdentifier));
		if(cell != null)
			row.getCells().remove(cell);
	}
	protected void onCmbRoundValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedPatient(null);
		form.getLocalContext().setSelectedRound(form.cmbRound().getValue());
		
		listRound();
	}
	private void listRound()
	{
		form.dyngrdCollect().getRows().clear();
		form.getGlobalContext().Core.setPatientShort(null); //WDEV-16767
		
		if(form.cmbRound().getValue() == null)
			return;
		
		SpecimenCollectionStatus status = null;
		
		if(form.GroupFilter().getValue().equals(GroupFilterEnumeration.rdoCollected))
			status = SpecimenCollectionStatus.COLLECTIONCOMPLETE;
		else if(form.GroupFilter().getValue().equals(GroupFilterEnumeration.rdoCouldNotCollect))
			status = SpecimenCollectionStatus.COULDNOTCOLLECT;
		else if(form.GroupFilter().getValue().equals(GroupFilterEnumeration.rdoForCollection))
			status = SpecimenCollectionStatus.FORCOLLECTION;
		
		SpecimenWorkListitemCustomVoCollection list = domain.listWorkListItems(form.cmbRound().getValue(), status);
		
		displayRound(list);
	}
	private void displayRound(SpecimenWorkListitemCustomVoCollection items)
	{
		List<Integer> oldWard =  new ArrayList<Integer>();
		List<Integer> oldPatient = new ArrayList<Integer>();
		List<Integer> oldWorkListItemId = new ArrayList<Integer>();
		List<Integer> oldService = new ArrayList<Integer>();
		DynamicGridRow lastWardRow = null; 
		DynamicGridRow lastPatientRow = null; 
		DynamicGridRow lastDisciplineRow = null; 
		StringBuffer lastDisciplineCaption = new StringBuffer();
		TreeMap localContainers = new TreeMap();
		ArrayList investigations = new ArrayList();
		ArrayList specContainers = new ArrayList();
		
		for (int i = 0; i < items.size(); i++)
		{
			SpecimenWorkListitemCustomVo item = items.get(i);
			
			if((oldWard != null && !oldWard.contains(item.getWardId())) || (oldWard == null && item.getWardId() != null))
			{
				//create a new root node
				lastWardRow = form.dyngrdCollect().getRows().newRow();
				
				DynamicGridCell cell = lastWardRow.getCells().newCell(form.dyngrdCollect().getColumns().get(LOCATION_COLUMN.intValue()), DynamicCellType.STRING);
				if(item.getWardIdIsNotNull())
				{
					cell.setValue(item.getWard());
					lastWardRow.setValue(item.getWardId());
				}
				else
				{
					cell.setValue(EmptyWard);
				}
				cell.setReadOnly(true);
				lastWardRow.setCollapsedImage(form.getImages().Admin.Location);
				lastWardRow.setExpandedImage(form.getImages().Admin.Location);
				
				oldWard.add(item.getWardId());
			}
			
			//check for patient
			if(!oldPatient.contains(item.getPatientId().intValue()))
			{
				//create new patient row
				lastPatientRow = lastWardRow.getRows().newRow();
				lastPatientRow.setValue(item.getPatientId());
				
				DynamicGridCell cell = lastPatientRow.getCells().newCell(form.dyngrdCollect().getColumns().get(LOCATION_COLUMN.intValue()), DynamicCellType.STRING);
				cell.setReadOnly(true);
				cell.setValue((item.getPatientForenameIsNotNull() ? item.getPatientForename():"") + " " + (item.getPatientSurnameIsNotNull() ? item.getPatientSurname():""));  //wdev-13510
				lastPatientRow.setCollapsedImage(form.getImages().OCRR.Patient);
				lastPatientRow.setExpandedImage(form.getImages().OCRR.Patient);
				
				oldPatient.add(item.getPatientId().intValue());
			}
			else
			{
				lastPatientRow = getPatientRow(getWardForPatient(item), item);
			}
			//check for Discipline (Service)
			if( !oldService.contains(item.getServiceId().intValue())  || !oldWorkListItemId.contains(item.getWorkListitemId().intValue()))
			{
				//create new Discipline row
				if(lastDisciplineRow != null)
				{
					DynamicGridCell cell = lastDisciplineRow.getCells().get(form.dyngrdCollect().getColumns().get(LOCATION_COLUMN.intValue()));

					for (Iterator iter = localContainers.keySet().iterator(); iter.hasNext();)
					{
						String key = (String) iter.next();
						Integer val = (Integer) localContainers.get(key);
						
						lastDisciplineCaption.append(key);
						lastDisciplineCaption.append("(Qty: ");
						lastDisciplineCaption.append(val);
						lastDisciplineCaption.append("); ");
					}
					
					if (lastDisciplineCaption.indexOf("X") != -1 )
					{
						lastDisciplineCaption.append("]");
					}
					
					cell.setValue(lastDisciplineCaption.toString());
					cell.setTooltip(lastDisciplineCaption.toString());
					lastDisciplineCaption.setLength(0);
				}
				lastDisciplineCaption.append(item.getServiceName());
				lastDisciplineCaption.append(" - ");

				lastDisciplineRow = lastPatientRow.getRows().newRow();
				DynamicGridCell cell = lastDisciplineRow.getCells().newCell(form.dyngrdCollect().getColumns().get(LOCATION_COLUMN.intValue()), DynamicCellType.STRING);
				cell.setReadOnly(true);

				lastDisciplineRow.setCollapsedImage(form.getImages().OCRR.TestTube);
				lastDisciplineRow.setExpandedImage(form.getImages().OCRR.TestTube);
				
				oldService.add(item.getServiceId().intValue());
				oldWorkListItemId.add(item.getWorkListitemId().intValue());
				
				cell = lastDisciplineRow.getCells().newCell(form.dyngrdCollect().getColumns().get(COLLECTED_COLUMN.intValue()), DynamicCellType.ANSWER);
				cell.getItems().newItem(SpecimenCollectionStatus.COLLECTIONCOMPLETE, null, form.getImages().Core.AnswerBox_Yes);
				cell.getItems().newItem(SpecimenCollectionStatus.COULDNOTCOLLECT, null, form.getImages().Core.AnswerBox_No);
				cell.setAutoPostBack(true);
				processCellPostback(cell);
				
				//cell = lastDisciplineRow.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(BUTTON_COLUMN), DynamicCellType.IMAGEBUTTON);
				//cell.setValue(form.getImages().OCRR.SaveGrid);

				DynamicGridCell printCell = lastDisciplineRow.getCells().newCell(form.dyngrdCollect().getColumns().get(PRINT_COL.intValue()), DynamicCellType.ANSWER);
				printCell.getItems().newItem(PrintStatus.FORPRINTING);
				printCell.setAutoPostBack(true);//WDEV-16581
				
				lastDisciplineRow.setValue(item);
				
				if(item.getCollectionStatusIsNotNull() && item.getCollectionStatus().intValue() != SpecimenCollectionStatus.FORCOLLECTION.getID())
				{
					cell.setReadOnly(Boolean.TRUE);
					printCell.setReadOnly(Boolean.FALSE);
					lastDisciplineRow.setBackColor(Color.LightGray);
					cell = lastDisciplineRow.getCells().get(form.dyngrdCollect().getColumns().getByIdentifier(COLLECTED_COLUMN));
					
					if(item.getCollectionStatus().intValue() == SpecimenCollectionStatus.COLLECTIONCOMPLETE.getID())
					{
						cell.setValue(SpecimenCollectionStatus.COLLECTIONCOMPLETE);
						if (item.getContainerQuantity() != null)
							createControlsForCollection(cell.getRow(), item);
					}
					else if(item.getCollectionStatus().intValue() == SpecimenCollectionStatus.COULDNOTCOLLECT.getID())
					{
						cell.setValue(SpecimenCollectionStatus.COULDNOTCOLLECT);
						createControlsForNotCollection(cell.getRow(), item);
					}
					
					removeCellByColumn(cell.getRow(), BUTTON_COLUMN);
				}
				else
				{
					if(item.getCollectionComments() != null && item.getCollectionComments().length() > 0)
					{
						DynamicGridCell cellText = lastDisciplineRow.getCells().newCell(form.dyngrdCollect().getColumns().getByIdentifier(COMMENTS_COLUMN), DynamicCellType.STRING);
						cellText.setValue(item.getCollectionComments());
						cellText.setTooltip(item.getCollectionComments());
						cellText.setReadOnly(true);
					}
				}
				
				localContainers.clear();
				investigations.clear();
				specContainers.clear();
			}

			if(investigations.contains(item.getInvestigation()) == false)
			{
				lastDisciplineCaption.append(item.getInvestigation());
				lastDisciplineCaption.append("; ");
				
				if (item.getDftNoOfLabelSets() != null)
				{
					lastDisciplineCaption.append(item.getDftNoOfLabelSets() + " X [");
				}
				
				investigations.add(item.getInvestigation());
			}
			
			if(item.getContainerQuantity() != null && item.getSpecimenContainerId() != null && item.getAdultContainer() != null && specContainers.contains(item.getSpecimenContainerId()) == false) //WDEV-16700
			{
				Integer qty = (Integer) localContainers.get(item.getAdultContainer());
				if(item.getContainerQuantityIsNotNull())
				{
					if(qty == null)
						qty = new Integer(item.getContainerQuantity().intValue());
					else
						qty = new Integer(item.getContainerQuantity().intValue() + qty.intValue());
					
					localContainers.put(item.getAdultContainer(), qty);
				}
				
				specContainers.add(item.getSpecimenContainerId());
			}
			
			//WDEV-17829 a DFT investigation for a paediatric patient will list the PaediatricContainers
			if (item.getContainerQuantity() == null && isPaediatricPatient(item.getPatientId()))
			{
				if (isPaediatricPatient(item.getPatientId()))
				{
					Integer qty = 1;

					if (item.getContainerPaediatricVolume() != null && item.getContainerPaediatricVolume() != 0)
					{
						qty = (int) (item.getPaediatricVolume() / item.getContainerPaediatricVolume());

						BigDecimal x = new BigDecimal(item.getPaediatricVolume().toString());
						BigDecimal y = new BigDecimal(item.getContainerPaediatricVolume().toString());
						BigDecimal rem = x.remainder(y);

						if (rem.floatValue() > 0)
						{
							qty++;
						}
					}

					localContainers.put(item.getPaediatricContainer(), qty);

				}
			}
			else
			{
				Integer qty = 1;

				if (item.getContainerAdultVolume() != null && item.getContainerAdultVolume() != 0)
				{
					qty = (int) (item.getAdultVolume() / item.getContainerAdultVolume());

					BigDecimal x = new BigDecimal(item.getAdultVolume().toString());
					BigDecimal y = new BigDecimal(item.getContainerAdultVolume().toString());
					BigDecimal rem = x.remainder(y);

					if (rem.floatValue() > 0)
					{
						qty++;
					}
				}

				localContainers.put(item.getAdultContainer(), qty);
			}

			specContainers.add(item.getPaediatricContainerId());
		}
		
		if(lastDisciplineRow != null)
		{
			for (Iterator iter = localContainers.keySet().iterator(); iter.hasNext();)
			{
				String key = (String) iter.next();
				Integer val = (Integer) localContainers.get(key);
				
				lastDisciplineCaption.append(key);
				lastDisciplineCaption.append("(Qty: ");
				lastDisciplineCaption.append(val);
				lastDisciplineCaption.append("); ");
			}
			
			if (lastDisciplineCaption.indexOf("X") != -1 )
			{
				lastDisciplineCaption.append("]");
			}
			
			DynamicGridCell cell = lastDisciplineRow.getCells().get(form.dyngrdCollect().getColumns().get(LOCATION_COLUMN.intValue()));
			
			cell.setValue(lastDisciplineCaption.toString());
			cell.setTooltip(lastDisciplineCaption.toString());
		}

		form.dyngrdCollect().getRows().expandAll();
	}
	
	//WDEV-17829
	private DynamicGridRow getPatientRow(DynamicGridRow lastWardRow, SpecimenWorkListitemCustomVo item)
	{
		for (int i = 0; i < lastWardRow.getRows().size(); i++)
		{
			if (lastWardRow.getRows().get(i).getValue().equals(item.getPatientId()))
			{
				return lastWardRow.getRows().get(i);
			}
		}

		return null;
	}

	private DynamicGridRow getWardForPatient(SpecimenWorkListitemCustomVo item)
	{
		for (int i = 0; i < form.dyngrdCollect().getRows().size(); i++)
		{
			if (form.dyngrdCollect().getRows().get(i).getValue().equals(item.getWardId()))
			{
				return form.dyngrdCollect().getRows().get(i);
			}
		}

		return null;
	}
	
	private boolean isPaediatricPatient(Integer patientId)
	{
		PatientShort patient = domain.getPatientById(patientId);
		Integer patientAge = patient.calculateAge();
		
		if (patientAge != null && patientAge <= ims.configuration.gen.ConfigFlag.GEN.PAEDIATRIC_AGE.getValue())
			return true;
		
		return false;
	}
	
	protected void onDteSearchDateValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		listRoundsByDate(form.dteSearchDate().getValue());
	}
	protected void onRadioButtonGroupFilterValueChanged() throws PresentationLogicException
	{
		listRound();
	}
	protected void onDyngrdCollectRowSelectionChanged(DynamicGridRow row)
	{
		//WDEV-10852
		if(row == null)
			return;
		
		form.getLocalContext().setSelectedPatient(null);
		
		//make sure the selected row is not the ward or the patient. The specimen row will have a parent node but no child nodes
		if(row.getParent() != null && (row.getRows() == null || row.getRows().size() == 0))  
		{
			SpecimenWorkListitemCustomVo item = (SpecimenWorkListitemCustomVo) row.getValue();
			
			if(item != null)
			{
				form.getLocalContext().setSelectedPatient(domain.getPatientByWorkListItemId(item.getWorkListitemId()));
			}
			else if(row.getRows().size() > 0)
			{
				item = (SpecimenWorkListitemCustomVo) row.getRows().get(0).getValue();
				form.getLocalContext().setSelectedPatient(domain.getPatientByWorkListItemId(item.getWorkListitemId()));
			}
			
			//WDEV-16767
			form.getGlobalContext().Core.setPatientShort(form.getLocalContext().getSelectedPatient());
		}
	}
	
	//WDEV-16581
	@Override
	protected void onBtnPrintClick() throws PresentationLogicException
	{
		if (form.dyngrdCollect().getRows().size() == 0)
		{
			engine.showMessage("There is no data to print");
			return;
		} 
		
		SpecimenWorkListitemCustomVoCollection voColl = getWorkListItemsToprint();
		
		//WDEV-17760
		/*
		if (voColl.size() == 0)
		{
			form.getLocalContext().setContextDummyForReportsLabel(null);
			form.getLocalContext().setSelectedRound(form.cmbRound().getValue());
			form.getGlobalContext().Core.setPrepareForPrinting(Boolean.FALSE);
		}
		else
		{
			OrderSpecimenVo dummy = new OrderSpecimenVo();
			dummy.setID_OrderSpecimen(new Integer(-1));
			form.getLocalContext().setContextDummyForReportsLabel(dummy);
			form.getLocalContext().setSelectedRound(null);
			form.getGlobalContext().Core.setPrepareForPrinting(Boolean.TRUE);
		}
		*/
		
		if (voColl.size() == 0)
		{
			engine.showMessage("Please select at least one record to print");
			return;
		}
		
		SpecimenWorkListItemListVoCollection workListItems = new SpecimenWorkListItemListVoCollection();
		
		for (int i = 0; i < voColl.size(); i++)
		{
			workListItems.add(domain.getWorkListItemListRecord(voColl.get(i).getWorkListitemId()));
		}
		
		form.getGlobalContext().Core.setSpecimenWorkListItemsForPrint(workListItems);
		engine.open(form.getForms().Core.PrintMultipleOrders);
		
	}
	private SpecimenWorkListitemCustomVoCollection getWorkListItemsToprint()
	{
		SpecimenWorkListitemCustomVoCollection voColl = new SpecimenWorkListitemCustomVoCollection();
		
		for (int i = 0; i < form.dyngrdCollect().getRows().size(); i++)
		{
			for (int j = 0; j < form.dyngrdCollect().getRows().get(i).getRows().size(); j++)
			{
				for (int k = 0; k < form.dyngrdCollect().getRows().get(i).getRows().get(j).getRows().size(); k++)
				{
					DynamicGridCell printCell = form.dyngrdCollect().getRows().get(i).getRows().get(j).getRows().get(k).getCells().get(form.dyngrdCollect().getColumns().get(PRINT_COL.intValue()));
					
					if (printCell != null && printCell.getValue() != null && printCell.getValue().equals(PrintStatus.FORPRINTING))
					{
						voColl.add((SpecimenWorkListitemCustomVo) form.dyngrdCollect().getRows().get(i).getRows().get(j).getRows().get(k).getValue());
					}
				}
			}
		}

		return voColl;
	}
	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.PrintReport) && result.equals(DialogResult.OK))
		{
			printSelectedItems();
			refreshDataInGrid();
			form.getLocalContext().setContextDummyForReportsLabel(null);
			form.getLocalContext().setSelectedRound(form.cmbRound().getValue());
		}
		
		//WDEV-17760
		if (formName.equals(form.getForms().Core.PrintMultipleOrders) && result.equals(DialogResult.OK))
		{
			refreshDataInGrid();
		}
	}
	
	private void refreshDataInGrid()
	{
		for (int i = 0; i < form.dyngrdCollect().getRows().size(); i++)
		{
			for (int j = 0; j < form.dyngrdCollect().getRows().get(i).getRows().size(); j++)
			{
				for (int k = 0; k < form.dyngrdCollect().getRows().get(i).getRows().get(j).getRows().size(); k++)
				{
					DynamicGridCell printCell = form.dyngrdCollect().getRows().get(i).getRows().get(j).getRows().get(k).getCells().get(form.dyngrdCollect().getColumns().get(PRINT_COL.intValue()));
					
					if (printCell != null && printCell.getValue() != null && printCell.getValue().equals(PrintStatus.FORPRINTING))
					{
						printCell.getItems().clear();
						printCell.getItems().newItem(PrintStatus.PRINTED);
						printCell.setValue(PrintStatus.PRINTED);
					}
				}
			}
		}
		
	}
	private void printSelectedItems()
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		SpecimenWorkListitemCustomVoCollection voColl = getWorkListItemsToprint();

		if (voColl.size() == 0)
		{
			QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

			if (form.getLocalContext().getSelectedRound() != null)
				client.addSeed(new SeedValue("PhlebotomyRound_id", form.getLocalContext().getSelectedRound().getID_PhlebotomyRound(), Integer.class));
			else
				client.addSeed(new SeedValue("PhlebotomyRound_id", null, Integer.class));	
			
			if (form.getLocalContext().getSelectedPatient() != null)	
				client.addSeed(new SeedValue("Patient_id", form.getLocalContext().getSelectedPatient().getID_Patient(), Integer.class));
			else
				client.addSeed(new SeedValue("Patient_id", null, Integer.class));

			try
			{
				client.printReport(form.getGlobalContext().Core.getReport(), form.getGlobalContext().Core.getTemplate(), urlReportServer, form.getGlobalContext().Core.getPrinterSelect(), 1);
			}
			catch (QueryBuilderClientException e1)
			{
				engine.showMessage("Error creating report: " + e1.getMessage());
				return;
			}
		}
		else
		{

			for (int i = 0; i < voColl.size(); i++)
			{
				QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

				client.addSeed(new SeedValue("OrderSpecimen_id", voColl.get(i).getOrderSpecimenId(), Integer.class));

				try
				{
					client.printReport(form.getGlobalContext().Core.getReport(), form.getGlobalContext().Core.getTemplate(), urlReportServer, form.getGlobalContext().Core.getPrinterSelect(), 1);
				}
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error creating report: " + e1.getMessage());
					return;
				}
			}
		}
	}
}
