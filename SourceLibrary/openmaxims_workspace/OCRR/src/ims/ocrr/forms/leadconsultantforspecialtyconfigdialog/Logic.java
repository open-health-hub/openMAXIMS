//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.leadconsultantforspecialtyconfigdialog;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.ocrr.vo.LeadConsultantForSpecialtyConfigVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		// TODO Add your code here.
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		LeadConsultantForSpecialtyConfigVo globalContext = form.getGlobalContext().OCRR.getLeadConsultantForSpecialtyConfigFB();
		
		form.txtSpecialty().setValue(globalContext.getSpecialty().toString());
		if (globalContext.getLeadConsultant()!=null)
		{
			form.qmbLeadCons().newRow(globalContext.getLeadConsultant(), globalContext.getLeadConsultant().getIHcpName().toString());
			form.qmbLeadCons().setValue(globalContext.getLeadConsultant());			
		}
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		if (save())
			engine.close(DialogResult.OK);
	}
	@Override
	protected void onQmbLeadConsTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		listHcpMedical(value);
	}
	
	private void listHcpMedical(String value)
	{
		HcpLiteVoCollection coll = null;

		coll = domain.listHcpMedic(value);

		form.qmbLeadCons().clear();
		
		if (coll == null || coll.size() == 0)
			return;
			
		for (int i = 0; i < coll.size(); i++)
		{
			HcpLiteVo vo = coll.get(i);
			form.qmbLeadCons().newRow(vo, vo.getIHcpName());
		}

		if(coll.size() == 1)
			form.qmbLeadCons().setValue(coll.get(0));
		
		if (coll.size() > 1)
		{
			form.qmbLeadCons().showOpened();
		}
		
	}
	
	private LeadConsultantForSpecialtyConfigVo populateDataFromScreen(LeadConsultantForSpecialtyConfigVo leadConsultant)
	{
		if(leadConsultant == null)
			leadConsultant = new LeadConsultantForSpecialtyConfigVo();
		
		leadConsultant.setLeadConsultant(form.qmbLeadCons().getValue());
		leadConsultant.setSpecialty(form.getGlobalContext().OCRR.getLeadConsultantForSpecialtyConfigFB().getSpecialty());
					
		return leadConsultant;	
	}
	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		LeadConsultantForSpecialtyConfigVo leadConsToSave = populateDataFromScreen(form.getGlobalContext().OCRR.getLeadConsultantForSpecialtyConfigFB());
				
		String[] errors = leadConsToSave.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors); 
			return false;
		}
		
		if (leadConsToSave.getID_SpecialtyLeadConsultantIsNotNull()&& domain.isStale(leadConsToSave)) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().OCRR.setLeadConsultantForSpecialtyConfigFB(null);
			engine.close(DialogResult.CANCEL);
			return false;
		}
		
		try
		{	
			leadConsToSave=domain.saveLeadConsultant(leadConsToSave);		
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		form.getGlobalContext().OCRR.getLeadConsultantForSpecialtyConfigFB().setLeadConsultant(form.qmbLeadCons().getValue());
		return true;		
	}
	
	
}
