//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.selectandorder;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrTemplatesLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabTemplateContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 496, 560, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Place Order", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 584, 544, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuOCRRSelectAndOrder, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public Button btnTemplatePlaceOrder()
			{
				return (Button)super.getControl(0);
			}
			public DynamicGrid dyngrdTemplate()
			{
				return (DynamicGrid)super.getControl(1);
			}
		}
		public static class tabSearchContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
		
			public static class GrpCriteriaRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 248, 8, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Contains", startTabIndex.intValue() + 5);
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 152, 8, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Begins with", startTabIndex.intValue() + 4);
				}
				public void setText(GrpCriteriaEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GrpCriteriaEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GrpCriteriaEnumeration.None;
						case 0: return GrpCriteriaEnumeration.rdoContains;
						case 1: return GrpCriteriaEnumeration.rdoBegins;
					}
					return null;
				}
				public void setValue(GrpCriteriaEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GrpCriteriaEnumeration.None.id);
				}
				public boolean isEnabled(GrpCriteriaEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GrpCriteriaEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GrpCriteriaEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GrpCriteriaEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GrpCriteriaEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GrpCriteriaEnumeration None = new GrpCriteriaEnumeration(-1);
				public static GrpCriteriaEnumeration rdoContains = new GrpCriteriaEnumeration(0);
				public static GrpCriteriaEnumeration rdoBegins = new GrpCriteriaEnumeration(1);
				private GrpCriteriaEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GrpCriteriaEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Investigation/Profile Name:", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 496, 560, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Place Order", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 512, 31, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Search", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 150, 32, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 584, 488, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuOCRRSelectAndOrder, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// RadioButton Controls
				RadioButton tmpGrpCriteria = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGrpCriteria);
				GrpCriteriaRadioButton GrpCriteria = (GrpCriteriaRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GrpCriteriaRadioButton.class, tmpGrpCriteria);
				GrpCriteria.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GrpCriteria);
			}

			public Button btnPlaceOrder()
			{
				return (Button)super.getControl(1);
			}
			public Button btnSearch()
			{
				return (Button)super.getControl(2);
			}
			public TextBox txtTextName()
			{
				return (TextBox)super.getControl(3);
			}
			public DynamicGrid dyngrdSearch()
			{
				return (DynamicGrid)super.getControl(4);
			}
			public GrpCriteriaRadioButton GrpCriteria()
			{
				return (GrpCriteriaRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabPreviewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrPreviewLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabItemsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Tree Controls
						RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 544, 485, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuOCRRSelectAndOrder, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
					}
		
					public TreeView trePreview()
					{
						return (TreeView)super.getControl(0);
					}
				}
				public static class tabQuestionsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 544, 488, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
					}
		
					public DynamicGrid dynGrdQuestions()
					{
						return (DynamicGrid)super.getControl(0);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 568, 528, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabItems = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Items", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabItemsContainer m_tabItemsContainer = (tabItemsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabItemsContainer.class, m_tabItems, factory);
					super.addContainer(m_tabItems, m_tabItemsContainer);
					ims.framework.utils.SizeInfo m_tabItemsDesignSize = new ims.framework.utils.SizeInfo(568, 528);
					ims.framework.utils.SizeInfo m_tabItemsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
					m_tabItemsContainer.setContext(form, appForm, m_tabItems, loader, form_images_local, contextMenus, startControlID, m_tabItemsDesignSize, m_tabItemsRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 568, 528, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabQuestions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Questions", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabQuestionsContainer m_tabQuestionsContainer = (tabQuestionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabQuestionsContainer.class, m_tabQuestions, factory);
					super.addContainer(m_tabQuestions, m_tabQuestionsContainer);
					ims.framework.utils.SizeInfo m_tabQuestionsDesignSize = new ims.framework.utils.SizeInfo(568, 528);
					ims.framework.utils.SizeInfo m_tabQuestionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
					m_tabQuestionsContainer.setContext(form, appForm, m_tabQuestions, loader, form_images_local, contextMenus, startControlID, m_tabQuestionsDesignSize, m_tabQuestionsRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabItems().setVisible(false);
					tabQuestions().setVisible(false);
				}
				public void settabItemsEnabled(boolean value)
				{
					tabItems().setEnabled(value);
				}
				public void settabQuestionsEnabled(boolean value)
				{
					tabQuestions().setEnabled(value);
				}
				public void showtabItems()
				{
					tabQuestions().setVisible(false);
					tabItems().setVisible(true);
				}
				public void showtabQuestions()
				{
					tabItems().setVisible(false);
					tabQuestions().setVisible(true);
				}
		
				public tabItemsContainer tabItems()
				{
					return (tabItemsContainer)super.layers.get(0);
				}
				public tabQuestionsContainer tabQuestions()
				{
					return (tabQuestionsContainer)super.layers.get(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrPreviewLayer m_lyrPreviewLayer = (lyrPreviewLayer)LayerFlyweightFactory.getInstance().createLayer(lyrPreviewLayer.class, this, factory);
				super.addLayer(m_lyrPreviewLayer);
				m_lyrPreviewLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Button Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 488, 559, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Place Order", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public lyrPreviewLayer lyrPreview()
			{
				return (lyrPreviewLayer)super.getLayer(0);
			}
			public Button btnContinue()
			{
				return (Button)super.getControl(2);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 232, 8, 608, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTemplate = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"...", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabTemplateContainer m_tabTemplateContainer = (tabTemplateContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTemplateContainer.class, m_tabTemplate, factory);
			super.addContainer(m_tabTemplate, m_tabTemplateContainer);
			ims.framework.utils.SizeInfo m_tabTemplateDesignSize = new ims.framework.utils.SizeInfo(608, 616);
			ims.framework.utils.SizeInfo m_tabTemplateRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
			m_tabTemplateContainer.setContext(form, appForm, m_tabTemplate, loader, form_images_local, contextMenus, startControlID, m_tabTemplateDesignSize, m_tabTemplateRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 232, 8, 608, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSearch = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Search", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabSearchContainer m_tabSearchContainer = (tabSearchContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSearchContainer.class, m_tabSearch, factory);
			super.addContainer(m_tabSearch, m_tabSearchContainer);
			ims.framework.utils.SizeInfo m_tabSearchDesignSize = new ims.framework.utils.SizeInfo(608, 616);
			ims.framework.utils.SizeInfo m_tabSearchRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
			m_tabSearchContainer.setContext(form, appForm, m_tabSearch, loader, form_images_local, contextMenus, startControlID, m_tabSearchDesignSize, m_tabSearchRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 232, 8, 608, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPreview = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"My Order Preview", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPreviewContainer m_tabPreviewContainer = (tabPreviewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPreviewContainer.class, m_tabPreview, factory);
			super.addContainer(m_tabPreview, m_tabPreviewContainer);
			ims.framework.utils.SizeInfo m_tabPreviewDesignSize = new ims.framework.utils.SizeInfo(608, 616);
			ims.framework.utils.SizeInfo m_tabPreviewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
			m_tabPreviewContainer.setContext(form, appForm, m_tabPreview, loader, form_images_local, contextMenus, startControlID, m_tabPreviewDesignSize, m_tabPreviewRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabTemplate().setVisible(false);
			tabSearch().setVisible(false);
			tabPreview().setVisible(false);
		}
		public void settabTemplateEnabled(boolean value)
		{
			tabTemplate().setEnabled(value);
		}
		public void settabSearchEnabled(boolean value)
		{
			tabSearch().setEnabled(value);
		}
		public void settabPreviewEnabled(boolean value)
		{
			tabPreview().setEnabled(value);
		}
		public void showtabTemplate()
		{
			tabSearch().setVisible(false);
			tabPreview().setVisible(false);
			tabTemplate().setVisible(true);
		}
		public void showtabSearch()
		{
			tabTemplate().setVisible(false);
			tabPreview().setVisible(false);
			tabSearch().setVisible(true);
		}
		public void showtabPreview()
		{
			tabTemplate().setVisible(false);
			tabSearch().setVisible(false);
			tabPreview().setVisible(true);
		}

		public tabTemplateContainer tabTemplate()
		{
			return (tabTemplateContainer)super.layers.get(0);
		}
		public tabSearchContainer tabSearch()
		{
			return (tabSearchContainer)super.layers.get(1);
		}
		public tabPreviewContainer tabPreview()
		{
			return (tabPreviewContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo' of the global context variable 'OCRR.RoleDisciplineSecurityLevels' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuOCRRSelectAndOrder = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuOCRRSelectAndOrderREMOVEItem = factory.createMenuItem(startControlID.intValue() + 1, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuOCRRSelectAndOrder.add(contextMenus.contextMenuOCRRSelectAndOrderREMOVEItem);
		contextMenus.contextMenuOCRRSelectAndOrderRESETItem = factory.createMenuItem(startControlID.intValue() + 2, "Reset", true, false, new Integer(116109), true, true);
		contextMenus.contextMenuOCRRSelectAndOrder.add(contextMenus.contextMenuOCRRSelectAndOrderRESETItem);
		form.registerMenu(contextMenus.contextMenuOCRRSelectAndOrder);


		// Layer Clasess
		lyrTemplatesLayer m_lyrTemplatesLayer = (lyrTemplatesLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTemplatesLayer.class, this, factory);
		super.addLayer(m_lyrTemplatesLayer);
		m_lyrTemplatesLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Tree Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 216, 616, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuOCRRSelectAndOrder, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrTemplatesLayer lyrTemplates()
	{
		return (lyrTemplatesLayer)super.getLayer(0);
	}
	public TreeView treDetails()
	{
		return (TreeView)super.getControl(3);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
			Core = new CoreForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				MyOrder = new LocalFormName(116111);
				MyOrderInformations = new LocalFormName(116113);
				SelectAndOrderDialog = new LocalFormName(116131);
				MyOrderDialog = new LocalFormName(116137);
				YesNoDialogWithReason = new LocalFormName(116172);
				GenderYesNoDialog = new LocalFormName(116175);
			}
			public final FormName MyOrder;
			public final FormName MyOrderInformations;
			public final FormName SelectAndOrderDialog;
			public final FormName MyOrderDialog;
			public final FormName YesNoDialogWithReason;
			public final FormName GenderYesNoDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				YesNoDialog = new LocalFormName(102107);
				CareContextSelectDialog = new LocalFormName(102252);
			}
			public final FormName YesNoDialog;
			public final FormName CareContextSelectDialog;
		}

		public OCRRForms OCRR;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			OCRR = new OCRRImages();
			Core = new CoreImages();
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Investigation = new ImageHelper(116105, "Images/OCRR/Investigation.gif", new Integer(16), new Integer(16));
				Profile = new ImageHelper(116108, "Images/OCRR/Profile.gif", new Integer(16), new Integer(16));
				OrderSet = new ImageHelper(116104, "Images/OCRR/OrderSet.gif", new Integer(16), new Integer(16));
				Reset = new ImageHelper(116109, "Images/OCRR/Reset.gif", new Integer(16), new Integer(16));
				OrderEntryTemplate = new ImageHelper(116103, "Images/OCRR/OrderEntryTemplate.gif", new Integer(16), new Integer(16));
				Information = new ImageHelper(116101, "Images/OCRR/Information.gif", new Integer(16), new Integer(16));
				Question = new ImageHelper(116100, "Images/OCRR/Question.gif", new Integer(16), new Integer(16));
				QuestionCategory = new ImageHelper(116102, "Images/OCRR/QCategory.gif", new Integer(16), new Integer(16));
				PlaceOrder = new ImageHelper(116112, "Images/OCRR/PlaceOrder.gif", new Integer(16), new Integer(16));
				MyOrderPreview = new ImageHelper(116113, "Images/OCRR/MyOrderPreview.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Investigation;
			public final ims.framework.utils.Image Profile;
			public final ims.framework.utils.Image OrderSet;
			public final ims.framework.utils.Image Reset;
			public final ims.framework.utils.Image OrderEntryTemplate;
			public final ims.framework.utils.Image Information;
			public final ims.framework.utils.Image Question;
			public final ims.framework.utils.Image QuestionCategory;
			public final ims.framework.utils.Image PlaceOrder;
			public final ims.framework.utils.Image MyOrderPreview;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
				MandatoryQuestion = new ImageHelper(102272, "Images/Core/Help4.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindEnabled16;
			public final ims.framework.utils.Image MandatoryQuestion;
		}
		public final OCRRImages OCRR;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedComponents = new ims.framework.ContextVariable("SelectedComponents", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__SelectedComponents_" + componentIdentifier + "");
			cxl_AnalyzedChildComponent = new ims.framework.ContextVariable("AnalyzedChildComponent", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__AnalyzedChildComponent_" + componentIdentifier + "");
			cxl_LastSearchResults = new ims.framework.ContextVariable("LastSearchResults", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__LastSearchResults_" + componentIdentifier + "");
			cxl_AddedQuestions = new ims.framework.ContextVariable("AddedQuestions", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__AddedQuestions_" + componentIdentifier + "");
			cxl_QuestionsTooltips = new ims.framework.ContextVariable("QuestionsTooltips", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__QuestionsTooltips_" + componentIdentifier + "");
			cxl_PathologyCategoryQuestions = new ims.framework.ContextVariable("PathologyCategoryQuestions", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__PathologyCategoryQuestions_" + componentIdentifier + "");
			cxl_ClinicalImagingCategoryQuestions = new ims.framework.ContextVariable("ClinicalImagingCategoryQuestions", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__ClinicalImagingCategoryQuestions_" + componentIdentifier + "");
			cxl_QuestionTypes = new ims.framework.ContextVariable("QuestionTypes", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__QuestionTypes_" + componentIdentifier + "");
			cxl_SelectedCell = new ims.framework.ContextVariable("SelectedCell", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__SelectedCell_" + componentIdentifier + "");
			cxl_SelectedGrid = new ims.framework.ContextVariable("SelectedGrid", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__SelectedGrid_" + componentIdentifier + "");
			cxl_ServiceInfoMessages = new ims.framework.ContextVariable("ServiceInfoMessages", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__ServiceInfoMessages_" + componentIdentifier + "");
			cxl_ContractLocations = new ims.framework.ContextVariable("ContractLocations", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__ContractLocations_" + componentIdentifier + "");
			cxl_SecurityCheckedForPreview = new ims.framework.ContextVariable("SecurityCheckedForPreview", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__SecurityCheckedForPreview_" + componentIdentifier + "");
			cxl_LinkedComponents = new ims.framework.ContextVariable("LinkedComponents", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__LinkedComponents_" + componentIdentifier + "");
			cxl_ServicesWithDisplayedServiceQuestions = new ims.framework.ContextVariable("ServicesWithDisplayedServiceQuestions", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__ServicesWithDisplayedServiceQuestions_" + componentIdentifier + "");
			cxl_InvestigationsWithDisplayedServiceQuestions = new ims.framework.ContextVariable("InvestigationsWithDisplayedServiceQuestions", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__InvestigationsWithDisplayedServiceQuestions_" + componentIdentifier + "");
			cxl_BreachedInvestigations = new ims.framework.ContextVariable("BreachedInvestigations", prefix + "_lv_OCRR.SelectandOrder.__internal_x_context__BreachedInvestigations_" + componentIdentifier + "");
		}
		
		public boolean getSelectedComponentsIsNotNull()
		{
			return !cxl_SelectedComponents.getValueIsNull(context);
		}
		public ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection getSelectedComponents()
		{
			return (ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection)cxl_SelectedComponents.getValue(context);
		}
		public void setSelectedComponents(ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection value)
		{
			cxl_SelectedComponents.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedComponents = null;
		public boolean getAnalyzedChildComponentIsNotNull()
		{
			return !cxl_AnalyzedChildComponent.getValueIsNull(context);
		}
		public ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection getAnalyzedChildComponent()
		{
			return (ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection)cxl_AnalyzedChildComponent.getValue(context);
		}
		public void setAnalyzedChildComponent(ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection value)
		{
			cxl_AnalyzedChildComponent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AnalyzedChildComponent = null;
		public boolean getLastSearchResultsIsNotNull()
		{
			return !cxl_LastSearchResults.getValueIsNull(context);
		}
		public ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection getLastSearchResults()
		{
			return (ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection)cxl_LastSearchResults.getValue(context);
		}
		public void setLastSearchResults(ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection value)
		{
			cxl_LastSearchResults.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastSearchResults = null;
		public boolean getAddedQuestionsIsNotNull()
		{
			return !cxl_AddedQuestions.getValueIsNull(context);
		}
		public ims.core.vo.QuestionInformationShortVoCollection getAddedQuestions()
		{
			return (ims.core.vo.QuestionInformationShortVoCollection)cxl_AddedQuestions.getValue(context);
		}
		public void setAddedQuestions(ims.core.vo.QuestionInformationShortVoCollection value)
		{
			cxl_AddedQuestions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AddedQuestions = null;
		public boolean getQuestionsTooltipsIsNotNull()
		{
			return !cxl_QuestionsTooltips.getValueIsNull(context);
		}
		public ims.ocrr.vo.QuestionTooltipVoCollection getQuestionsTooltips()
		{
			return (ims.ocrr.vo.QuestionTooltipVoCollection)cxl_QuestionsTooltips.getValue(context);
		}
		public void setQuestionsTooltips(ims.ocrr.vo.QuestionTooltipVoCollection value)
		{
			cxl_QuestionsTooltips.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_QuestionsTooltips = null;
		public boolean getPathologyCategoryQuestionsIsNotNull()
		{
			return !cxl_PathologyCategoryQuestions.getValueIsNull(context);
		}
		public ims.ocrr.vo.CategoryQuestionShortVoCollection getPathologyCategoryQuestions()
		{
			return (ims.ocrr.vo.CategoryQuestionShortVoCollection)cxl_PathologyCategoryQuestions.getValue(context);
		}
		public void setPathologyCategoryQuestions(ims.ocrr.vo.CategoryQuestionShortVoCollection value)
		{
			cxl_PathologyCategoryQuestions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PathologyCategoryQuestions = null;
		public boolean getClinicalImagingCategoryQuestionsIsNotNull()
		{
			return !cxl_ClinicalImagingCategoryQuestions.getValueIsNull(context);
		}
		public ims.ocrr.vo.CategoryQuestionShortVoCollection getClinicalImagingCategoryQuestions()
		{
			return (ims.ocrr.vo.CategoryQuestionShortVoCollection)cxl_ClinicalImagingCategoryQuestions.getValue(context);
		}
		public void setClinicalImagingCategoryQuestions(ims.ocrr.vo.CategoryQuestionShortVoCollection value)
		{
			cxl_ClinicalImagingCategoryQuestions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClinicalImagingCategoryQuestions = null;
		public boolean getQuestionTypesIsNotNull()
		{
			return !cxl_QuestionTypes.getValueIsNull(context);
		}
		public java.util.ArrayList getQuestionTypes()
		{
			return (java.util.ArrayList)cxl_QuestionTypes.getValue(context);
		}
		public void setQuestionTypes(java.util.ArrayList value)
		{
			cxl_QuestionTypes.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_QuestionTypes = null;
		public boolean getSelectedCellIsNotNull()
		{
			return !cxl_SelectedCell.getValueIsNull(context);
		}
		public ims.framework.controls.DynamicGridCell getSelectedCell()
		{
			return (ims.framework.controls.DynamicGridCell)cxl_SelectedCell.getValue(context);
		}
		public void setSelectedCell(ims.framework.controls.DynamicGridCell value)
		{
			cxl_SelectedCell.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedCell = null;
		public boolean getSelectedGridIsNotNull()
		{
			return !cxl_SelectedGrid.getValueIsNull(context);
		}
		public ims.framework.controls.DynamicGrid getSelectedGrid()
		{
			return (ims.framework.controls.DynamicGrid)cxl_SelectedGrid.getValue(context);
		}
		public void setSelectedGrid(ims.framework.controls.DynamicGrid value)
		{
			cxl_SelectedGrid.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedGrid = null;
		public boolean getServiceInfoMessagesIsNotNull()
		{
			return !cxl_ServiceInfoMessages.getValueIsNull(context);
		}
		public ims.vo.interfaces.IQuestionType[] getServiceInfoMessages()
		{
			return (ims.vo.interfaces.IQuestionType[])cxl_ServiceInfoMessages.getValue(context);
		}
		public void setServiceInfoMessages(ims.vo.interfaces.IQuestionType[] value)
		{
			cxl_ServiceInfoMessages.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServiceInfoMessages = null;
		public boolean getContractLocationsIsNotNull()
		{
			return !cxl_ContractLocations.getValueIsNull(context);
		}
		public ims.core.resource.place.vo.LocationRefVoCollection getContractLocations()
		{
			return (ims.core.resource.place.vo.LocationRefVoCollection)cxl_ContractLocations.getValue(context);
		}
		public void setContractLocations(ims.core.resource.place.vo.LocationRefVoCollection value)
		{
			if(value != null)
			{
				for(int x = 0; x < value.size(); x++)
				{
					if(value.get(x) != null && (value.get(x).getBoId() == null || value.get(x).getBoId().intValue() < 1))
						throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id found in 'ContractLocations' RefVoCollection context variable.");
				}
			}
			if(value == null)
				cxl_ContractLocations.setValue(context, null);
			else
			{
				ims.core.resource.place.vo.LocationRefVoCollection copy = new ims.core.resource.place.vo.LocationRefVoCollection();
				for(int x = 0; x < value.size(); x++)
				{
					copy.add(value.get(x));
				}
				value.clear();
				for(int x = 0; x < copy.size(); x++)
				{
					if(copy.get(x) == null)
						value.add(null);
					else
						value.add(new ims.core.resource.place.vo.LocationRefVo(copy.get(x).getBoId(), copy.get(x).getBoVersion()));
				}
				cxl_ContractLocations.setValue(context, value);
			}
		}
		private ims.framework.ContextVariable cxl_ContractLocations = null;
		public boolean getSecurityCheckedForPreviewIsNotNull()
		{
			return !cxl_SecurityCheckedForPreview.getValueIsNull(context);
		}
		public Boolean getSecurityCheckedForPreview()
		{
			return (Boolean)cxl_SecurityCheckedForPreview.getValue(context);
		}
		public void setSecurityCheckedForPreview(Boolean value)
		{
			cxl_SecurityCheckedForPreview.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SecurityCheckedForPreview = null;
		public boolean getLinkedComponentsIsNotNull()
		{
			return !cxl_LinkedComponents.getValueIsNull(context);
		}
		public ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection getLinkedComponents()
		{
			return (ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection)cxl_LinkedComponents.getValue(context);
		}
		public void setLinkedComponents(ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection value)
		{
			cxl_LinkedComponents.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LinkedComponents = null;
		public boolean getServicesWithDisplayedServiceQuestionsIsNotNull()
		{
			return !cxl_ServicesWithDisplayedServiceQuestions.getValueIsNull(context);
		}
		public java.util.List<java.lang.Integer> getServicesWithDisplayedServiceQuestions()
		{
			return (java.util.List<java.lang.Integer>)cxl_ServicesWithDisplayedServiceQuestions.getValue(context);
		}
		public void setServicesWithDisplayedServiceQuestions(java.util.List<java.lang.Integer> value)
		{
			cxl_ServicesWithDisplayedServiceQuestions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServicesWithDisplayedServiceQuestions = null;
		public boolean getInvestigationsWithDisplayedServiceQuestionsIsNotNull()
		{
			return !cxl_InvestigationsWithDisplayedServiceQuestions.getValueIsNull(context);
		}
		public java.util.List<java.lang.Integer> getInvestigationsWithDisplayedServiceQuestions()
		{
			return (java.util.List<java.lang.Integer>)cxl_InvestigationsWithDisplayedServiceQuestions.getValue(context);
		}
		public void setInvestigationsWithDisplayedServiceQuestions(java.util.List<java.lang.Integer> value)
		{
			cxl_InvestigationsWithDisplayedServiceQuestions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InvestigationsWithDisplayedServiceQuestions = null;
		public boolean getBreachedInvestigationsIsNotNull()
		{
			return !cxl_BreachedInvestigations.getValueIsNull(context);
		}
		public ims.ocrr.vo.BreachedInvestigationsVoCollection getBreachedInvestigations()
		{
			return (ims.ocrr.vo.BreachedInvestigationsVoCollection)cxl_BreachedInvestigations.getValue(context);
		}
		public void setBreachedInvestigations(ims.ocrr.vo.BreachedInvestigationsVoCollection value)
		{
			cxl_BreachedInvestigations.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_BreachedInvestigations = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class OCRRSelectAndOrder implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int REMOVE = 1;
			public static final int RESET = 2;
		}
		public void disableAllOCRRSelectAndOrderMenuItems()
		{
			this.contextMenuOCRRSelectAndOrderREMOVEItem.setEnabled(false);
			this.contextMenuOCRRSelectAndOrderRESETItem.setEnabled(false);
		}
		public void hideAllOCRRSelectAndOrderMenuItems()
		{
			this.contextMenuOCRRSelectAndOrderREMOVEItem.setVisible(false);
			this.contextMenuOCRRSelectAndOrderRESETItem.setVisible(false);
		}
		private Menu contextMenuOCRRSelectAndOrder;
		public MenuItem getOCRRSelectAndOrderREMOVEItem()
		{
			return this.contextMenuOCRRSelectAndOrderREMOVEItem;
		}
		private MenuItem contextMenuOCRRSelectAndOrderREMOVEItem;
		public MenuItem getOCRRSelectAndOrderRESETItem()
		{
			return this.contextMenuOCRRSelectAndOrderRESETItem;
		}
		private MenuItem contextMenuOCRRSelectAndOrderRESETItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[93];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_OCRR.MyOrderQuestions", "BO-1070100016-ID", "ID_OcsQASession");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.CareContextSelectDialog.ChosenCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.CareContextSelectDialog.ChosenCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.CareContextSelectDialog.ChosenCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-ID", "ID_OrderInvestigation");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-REPDATETIME", "RepDateTime");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-DISPLAYDATETIME", "DisplayDateTime");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-RESULTSTATUS", "ResultStatus");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-DISPLAYFLAG", "DisplayFlag");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-APPOINTMENTDATE", "AppointmentDate");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.OutpatientAttendanceForOrder", "BO-1014100001-ID", "ID_OutpatientAttendance");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.OutpatientAttendanceForOrder", "BO-1014100001-APPOINTMENTDATETIME", "AppointmentDateTime");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-ID", "ID_Location");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-NAME", "Name");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-ISACTIVE", "IsActive");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-TYPE", "Type");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Rotherham.AppointmentToLink", "BO-1055100007-ID", "ID_Booking_Appointment");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
