//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.34 build 2088.18051)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.selectandorder;

import ims.admin.vo.lookups.GenderSpecific;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.configuration.vo.AppRoleRefVo;
import ims.core.vo.GeneralQuestionAnswerVo;
import ims.core.vo.GeneralQuestionAnswerVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.QuestionInformationShortVo;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.Sex;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.ocrr.configuration.vo.InvestigationIndexRefVo;
import ims.ocrr.configuration.vo.InvestigationRefVo;
import ims.ocrr.configuration.vo.InvestigationRefVoCollection;
import ims.ocrr.forms.selectandorder.GenForm.lyrTemplatesLayer.tabSearchContainer.GrpCriteriaEnumeration;
import ims.ocrr.helper.MyOrderQuestionsPopulation;
import ims.ocrr.helper.OrderEntryTemplatePopulation;
import ims.ocrr.vo.BreachedInvestigationsVo;
import ims.ocrr.vo.BreachedInvestigationsVoCollection;
import ims.ocrr.vo.CategoryQuestionShortVoCollection;
import ims.ocrr.vo.ComponentSelectOrderVoCollection;
import ims.ocrr.vo.GenderInvestigationVo;
import ims.ocrr.vo.GenderInvestigationVoCollection;
import ims.ocrr.vo.InvestShortVo;
import ims.ocrr.vo.InvestigationIndexForGenderInvestigationVo;
import ims.ocrr.vo.InvestigationOcsQuestionsVoCollection;
import ims.ocrr.vo.InvestigationQuestionShortVo;
import ims.ocrr.vo.InvestigationQuestionShortVoCollection;
import ims.ocrr.vo.InvestigationSelectOrderVo;
import ims.ocrr.vo.MyOrderChildComponentVo;
import ims.ocrr.vo.MyOrderChildComponentVoCollection;
import ims.ocrr.vo.MyOrderComponentVo;
import ims.ocrr.vo.MyOrderComponentVoCollection;
import ims.ocrr.vo.OcsQASessionVo;
import ims.ocrr.vo.OrderEntryTemplateBaseVo;
import ims.ocrr.vo.OrderEntryTemplateComponentShortVo;
import ims.ocrr.vo.OrderEntryTemplateShortVo;
import ims.ocrr.vo.OrderEntryTemplateShortVoCollection;
import ims.ocrr.vo.OrderSetComponentForHelpTextVo;
import ims.ocrr.vo.OrderSetForHelpTextVo;
import ims.ocrr.vo.ReOrderPeriodMessageVo;
import ims.ocrr.vo.ReOrderPeriodMessageVoCollection;
import ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo;
import ims.ocrr.vo.SelectedComponentFromSelectOrderVo;
import ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection;
import ims.ocrr.vo.ServiceQuestionShortVo;
import ims.ocrr.vo.ServiceQuestionShortVoCollection;
import ims.ocrr.vo.lookups.CategoryCollection;
import ims.ocrr.vo.lookups.MinReorderPeriod;
import ims.ocrr.vo.lookups.SelectAndOrderComponentType;
import ims.ocrr.vo.lookups.TemplateCategories;
import ims.ocrr.vo.lookups.TemplateCategoriesCollection;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
public class Logic extends BaseLogic
{
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		open();
		
		//WDEV-11074
		addRemoveOrderRelatedNodes();
		
		//WDEV-7586  - select an order entry template if it is populated - call is from PatientICP form
		selectOrderEntryTemplate(args);
		
		if (engine.getFormName().equals(form.getForms().OCRR.SelectAndOrderDialog) && form.getGlobalContext().OCRR.getMyOrderComponents() != null)
			repopulateFromMyOrder();
		
		//WDEV-4578 - chooose Care Context for GHG
		if(ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue())
		{
			if(form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext() == null)
				engine.open(form.getForms().Core.CareContextSelectDialog);
		}
	}

	private void selectOrderEntryTemplate(Object[] args) throws PresentationLogicException
	{
		if(args == null)
			return;
		
		if(args.length == 1)
		{
			if(args[0] instanceof OrderEntryTemplateBaseVo)
			{
				OrderEntryTemplateBaseVo voOrdTemplate = (OrderEntryTemplateBaseVo) args[0];
				form.treDetails().setValue(voOrdTemplate);
				processNodeSelection(form.treDetails().getSelectedNode());
			}
		}
	}
	
	/*
	//WDEV-10858 Code here will do security level checks and modify the components in Global Context if needed
	private MyOrderComponentVoCollection enforceSecurity(MyOrderComponentVoCollection components) throws PresentationLogicException
	{
		MyOrderComponentVoCollection removableComponenets = new MyOrderComponentVoCollection();
		for (int x = 0; x < components.size(); x++)
		{
			MyOrderComponentVo component = components.get(x);

			if (component != null)
			{
				if(form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
				{
					SecurityLevelAndServiceCheckVo voSecLevelAndService = domain.getSecurityLevelAndServiceForInvestigation(component.getID());
					if(voSecLevelAndService != null && voSecLevelAndService.getSecurityLevelIsNotNull() && voSecLevelAndService.getServiceIsNotNull())
					{
						if(!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voSecLevelAndService.getService(),voSecLevelAndService.getSecurityLevel()))
						{
							removableComponenets.add(component);
							continue;
						}
					}
				}

				MyOrderChildComponentVoCollection childComponents = component.getComponents();
				MyOrderChildComponentVoCollection accessibleChildComponents = new MyOrderChildComponentVoCollection();
				if (childComponents != null)
				{
					for (int y = 0; y < childComponents.size(); y++)
					{
						MyOrderChildComponentVo childComponent = childComponents.get(y);

						//child investigations of profiles or order sets - security levels
						if(form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
						{
							SecurityLevelAndServiceCheckVo voSecLevelAndService = domain.getSecurityLevelAndServiceForInvestigation(childComponent.getID());
							if(voSecLevelAndService != null && voSecLevelAndService.getSecurityLevelIsNotNull() && voSecLevelAndService.getServiceIsNotNull())
							{
								if(form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voSecLevelAndService.getService(),voSecLevelAndService.getSecurityLevel()))
								{
									//add to collection to replace existing childComponents
									accessibleChildComponents.add(childComponent);
								}
							}
							else //if there is no security level for the investigation
								accessibleChildComponents.add(childComponent);
						}
					}
					component.setComponents(accessibleChildComponents);
				}
			}
		}
		
		//remove profiles here also WDEV-10848
		if(removableComponenets.size() > 0)
		{
			for(MyOrderComponentVo compToRemove : removableComponenets)
			{
				components.remove(compToRemove);
			}
		}

		form.getGlobalContext().OCRR.setMyOrderComponents(components);	
		return components;
	}
	*/

	private void repopulateFromMyOrder() throws PresentationLogicException
	{
		SelectedComponentFromSelectOrderVoCollection voCollSelectedComponents = new SelectedComponentFromSelectOrderVoCollection();

		MyOrderComponentVoCollection voCollMyOrderComponents = form.getGlobalContext().OCRR.getMyOrderComponents();
		if(voCollMyOrderComponents != null)
		{
			for (int i = 0; i < voCollMyOrderComponents.size(); i++)
			{
				voCollSelectedComponents.add(voCollMyOrderComponents.get(i));
				if (voCollMyOrderComponents.get(i).getComponentsIsNotNull())
				{
					for (int p = 0; p < voCollMyOrderComponents.get(i).getComponents().size(); p++)
						voCollSelectedComponents.add(voCollMyOrderComponents.get(i).getComponents().get(p));
				}
			}
		}

		form.getLocalContext().setSelectedComponents(voCollSelectedComponents);
		switchToPreviewView();
		switchToSearchView();
		form.treDetails().setValue(searchNodeValue);
	}

	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		searchInvestigationsAndProfiles();
	}

	protected void onBtnContinueClick() throws ims.framework.exceptions.PresentationLogicException
	{
		gotoMyOrder();
	}

	protected void onTreDetailsTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-12361 - if node selection hasnt opened another form when select and order is used in a dynamic form
		if(!processNodeSelection(node)) //WDEV-17035
		{	
			addRemoveOrderRelatedNodes();
			//WDEV-17035
			form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().setValue(null);
			if (form.treDetails().getNodeByValue(previewNodeValue) != null && form.treDetails().getNodeByValue(previewNodeValue).isExpanded())
			{
				form.treDetails().getNodeByValue(previewNodeValue).setExpanded(previewNodeValue.equals(node.getValue().toString())|| (node.getParent() != null && previewNodeValue.equals(node.getParent().getValue().toString())));
			}

			updateControlsState();
		}	
	}

	protected void onDyngrdTemplateCellValueChanged(DynamicGridCell cell)
	{
		processComponentSelection(cell);
	}

	protected void onDyngrdSearchCellValueChanged(DynamicGridCell cell)
	{
		processSearchComponentSelection(cell);
		
		//WDEV-12206
		/* 
		try
		{
			populateMyOrderPreview(false);
		}
		catch (Exception e)
		{
			// nothing to do here
		}
		*/
	}

	protected void onTrePreviewTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException
	{
		//WDEV-17035
		form.treDetails().setValue(null);
		updateControlsState();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.OCRRSelectAndOrder.RESET :
				resetOrder();
			break;
			case GenForm.ContextMenus.OCRRSelectAndOrder.REMOVE :
				resetSelectedComponent();
				break;
		}
		//WDEV-17035
		updateControlsState();
	}

	private void switchToTemplateView()
	{		
		form.lyrTemplates().showtabTemplate();
		form.lyrTemplates().tabTemplate().setHeaderVisible(true);
		form.lyrTemplates().tabSearch().setHeaderVisible(false);
		form.lyrTemplates().tabPreview().setHeaderVisible(false);
		//WDEV-17035
		updateControlsState();
	}

	private SelectedComponentFromSelectOrderVo getFromSelection(SelectedComponentFromSelectOrderVoCollection selection, SelectedComponentFromSelectOrderVo component)
	{
		if (selection == null || component == null || !selection.contains(component))
			return null;
		return selection.get(selection.indexOf(component));
	}

	private boolean selectionIsEmpty()
	{
		SelectedComponentFromSelectOrderVoCollection selection = form.getLocalContext().getSelectedComponents();
		if (selection == null || selection.size() == 0)
			return true;

		for (int x = 0; x < selection.size(); x++)
		{
			SelectedComponentFromSelectOrderVo component = selection.get(x);
			if (component != null && component.getComponentTypeIsNotNull()
					&& component.getComponentType().equals(SelectAndOrderComponentType.INVESTIGATION))
				return false;
		}

		return true;
	}

	private void populateMyOrderPreview() throws PresentationLogicException
	{
		populateMyOrderPreview(true);
	}

	private void populateMyOrderPreview(boolean switchTabToItems) throws PresentationLogicException
	{
		TreeNode previewNode = getPreviewNode();
		if(previewNode != null)
		{
			previewNode.getNodes().clear();
		}
		
		MyOrderComponentVoCollection myOrderComponents = new MyOrderComponentVoCollection();
		form.getGlobalContext().OCRR.setMyOrderComponents(null);
		form.getGlobalContext().OCRR.setMyOrderInformations(null);

		form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().clearSelection();
		form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().getNodes().clear();
		form.lyrTemplates().tabPreview().lyrPreview().tabQuestions().dynGrdQuestions().getRows().clear();

		if (switchTabToItems)
			form.lyrTemplates().tabPreview().lyrPreview().showtabItems();

		removeProfilesWithoutAnyInvestigationsSelected();//WDEV-16762
		
		SelectedComponentFromSelectOrderVoCollection selection = form.getLocalContext().getSelectedComponents();
		
		if (selectionIsEmpty())
		{
			return;
		}

		clearExistingQuestions();
		clearQuestionsTooltips();

		//WDEV-17035
		updateControlsState();
		SelectedComponentFromSelectOrderVoCollection profileInvestigations = new SelectedComponentFromSelectOrderVoCollection();

		displayQuestionsPreview();

		// adding profiles first
		for (int x = 0; x < selection.size(); x++)
		{
			SelectedComponentFromSelectOrderVo component = selection.get(x);
			if (component != null && component.getIDIsNotNull() && component.getComponentTypeIsNotNull() && component.getComponentType().equals(SelectAndOrderComponentType.PROFILE))
			{
				TreeNode node = form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().getNodes().add(component, component.getText());
				MyOrderComponentVo orderComponent = addComponentToTree(node, component, form.getImages().OCRR.Profile);
				myOrderComponents.add(orderComponent);
				
				TreeNode previewChildNodeProfile = null;
				if(previewNode != null)
				{
					previewChildNodeProfile = previewNode.getNodes().add(component, component.getText());
					previewChildNodeProfile.setTooltip(escapeAmpersandInTooltip(component.getTooltip()));
					previewChildNodeProfile.setCollapsedImage(form.getImages().OCRR.Profile);
					previewChildNodeProfile.setExpandedImage(form.getImages().OCRR.Profile);						
				}

				SelectedComponentFromSelectOrderVoCollection childInvestigations = getChildInvestigationsForProfile(component);
				if (childInvestigations != null)
				{
					for (int y = 0; y < childInvestigations.size(); y++)
					{
						SelectedComponentFromSelectOrderVo childInvestigation = getFromSelection(selection, childInvestigations.get(y));

						if (childInvestigation != null && childInvestigation.getComponentTypeIsNotNull() && childInvestigation.getComponentType().equals(SelectAndOrderComponentType.INVESTIGATION))
						{
							if (!profileInvestigations.contains(childInvestigation))
								profileInvestigations.add(childInvestigation);

							if (orderComponent.getComponents() == null)
								orderComponent.setComponents(new MyOrderChildComponentVoCollection());

							MyOrderChildComponentVo orderChildComponent = new MyOrderChildComponentVo();
							orderChildComponent.setID(childInvestigation.getID());
							orderChildComponent.setComponentType(childInvestigation.getComponentType());
							orderChildComponent.setText(childInvestigation.getText());
							orderChildComponent.setCategory(childInvestigation.getCategory());
							orderChildComponent.setTooltip(escapeAmpersandInTooltip(childInvestigation.getTooltip()));
							orderChildComponent.setParentInvestigationId(orderComponent.getID());
							orderChildComponent.setIsAddon(childInvestigation.getIsAddon());
							orderChildComponent.setRequiresSite(childInvestigation.getRequiresSite());
							orderChildComponent.setServiceID(childInvestigation.getServiceID());
							orderChildComponent.setMinReOrderPeriod(childInvestigation.getMinReOrderPeriod());
							orderChildComponent.setMinReOrderVal(childInvestigation.getMinReOrderVal());
							orderChildComponent.setMinReOrderFemalePeriod(childInvestigation.getMinReOrderFemalePeriod());
							orderChildComponent.setMinReOrderFemaleVal(childInvestigation.getMinReOrderFemaleVal());
							orderChildComponent.setPhlebMayCollect(childInvestigation.getPhlebMayCollect());
							orderChildComponent.setGenderSpecific(childInvestigation.getGenderSpecific());
							orderChildComponent.setReOrderReason(childInvestigation.getReOrderReason());//WDEV-16624

							orderComponent.getComponents().add(orderChildComponent);

							TreeNode childNode = node.getNodes().add(childInvestigation, childInvestigation.getText());
							childNode.setTooltip(escapeAmpersandInTooltip(childInvestigation.getTooltip()));
							childNode.setCollapsedImage(form.getImages().OCRR.Investigation);
							childNode.setExpandedImage(form.getImages().OCRR.Investigation);
							
							if(previewChildNodeProfile != null)
							{
								TreeNode previewChildNode = previewChildNodeProfile.getNodes().add(childInvestigation, childInvestigation.getText());
								previewChildNode.setTooltip(escapeAmpersandInTooltip(childInvestigation.getTooltip()));
								previewChildNode.setCollapsedImage(form.getImages().OCRR.Investigation);
								previewChildNode.setExpandedImage(form.getImages().OCRR.Investigation);						
							}
						}
					}
				}

				clearAnalyzedChildComponents();

				myOrderComponents.add(orderComponent);
			}
		}

		// adding remaining investigations (the ones without a parent profile)
		for (int x = 0; x < selection.size(); x++)
		{
			SelectedComponentFromSelectOrderVo component = selection.get(x);
			if (component != null && !profileInvestigations.contains(component) && component.getIDIsNotNull() && component.getComponentTypeIsNotNull() && component.getComponentType().equals(SelectAndOrderComponentType.INVESTIGATION) && component.getParentInvestigationId() == null)
			{
				TreeNode node = form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().getNodes().add(component, component.getText());
				MyOrderComponentVo orderComponent = addComponentToTree(node, component, form.getImages().OCRR.Investigation);
				myOrderComponents.add(orderComponent);
				
				if(previewNode != null)
				{
					TreeNode previewChildNode = previewNode.getNodes().add(component, component.getText());
					previewChildNode.setTooltip(escapeAmpersandInTooltip(component.getTooltip()));
					previewChildNode.setCollapsedImage(form.getImages().OCRR.Investigation);
					previewChildNode.setExpandedImage(form.getImages().OCRR.Investigation);						
				}
			}
		}

		clearExistingQuestions();
		clearQuestionsTooltips();
		
		if(previewNode != null)
		{
			previewNode.setExpanded(true);
		}

		form.getGlobalContext().OCRR.setMyOrderComponents(myOrderComponents);
	}
	
	private void displayQuestionsPreview() throws PresentationLogicException
	{
		displayPreview();
	}

	private MyOrderComponentVo addComponentToTree(TreeNode node, SelectedComponentFromSelectOrderVo component, Image image)
	{
		node.setTooltip(escapeAmpersandInTooltip(component.getTooltip()));
		node.setCollapsedImage(image);

		MyOrderComponentVo orderComponent = new MyOrderComponentVo();
		orderComponent.setID(component.getID());
		orderComponent.setComponentType(component.getComponentType());
		orderComponent.setText(component.getText());
		orderComponent.setCategory(component.getCategory());
		orderComponent.setTooltip(escapeAmpersandInTooltip(component.getTooltip()));
		orderComponent.setParentInvestigationId(component.getParentInvestigationId());
		orderComponent.setIsAddon(component.getIsAddon());
		orderComponent.setRequiresSite(component.getRequiresSite());
		orderComponent.setServiceID(component.getServiceID());
		orderComponent.setMinReOrderPeriod(component.getMinReOrderPeriod());
		orderComponent.setMinReOrderVal(component.getMinReOrderVal());
		orderComponent.setMinReOrderFemalePeriod(component.getMinReOrderFemalePeriod());
		orderComponent.setMinReOrderFemaleVal(component.getMinReOrderFemaleVal());
		orderComponent.setPhlebMayCollect(component.getPhlebMayCollect());
		orderComponent.setGenderSpecific(component.getGenderSpecific());
		orderComponent.setReOrderReason(component.getReOrderReason());//WDEV-16624

		return orderComponent;
	}

	private void clearQuestionsTooltips()
	{
		form.getLocalContext().setQuestionsTooltips(null);
	}

	private void clearExistingQuestions()
	{
		if (form.getLocalContext().getAddedQuestionsIsNotNull())
			form.getLocalContext().setAddedQuestions(null);
	}

	private SelectedComponentFromSelectOrderVoCollection getChildInvestigationsForProfile(SelectedComponentFromSelectOrderVo profile)
	{
		if (profile == null)
			return new SelectedComponentFromSelectOrderVoCollection();

		clearAnalyzedChildComponents();
		analyzeProfile(domain.getChildComponentsForInvestigationOrProfile(profile.getID(),form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels()));
		return form.getLocalContext().getAnalyzedChildComponent();
	}

	private void analyzeProfile(InvestigationSelectOrderVo profile)
	{
		if (profile == null)
			return;

		if (profile.getAssocInvestigationsIsNotNull())
		{
			for (int x = 0; x < profile.getAssocInvestigations().size(); x++)
			{
				analyzeComponents(profile.getAssocInvestigations().get(x));
			}
		}
		if (profile.getInvestigationIndexIsNotNull() && profile.getInvestigationIndex().getInvestigationsIsNotNull())
		{
			for (int x = 0; x < profile.getInvestigationIndex().getInvestigations().size(); x++)
			{
				analyzeComponents(profile.getInvestigationIndex().getInvestigations().get(x));
			}
		}
	}

	private void analyzeComponents(InvestigationSelectOrderVo component)
	{
		if (component == null || component.getInvestigationIndex() == null)
			return;

		boolean isProfile = false;
		if (component.getInvestigationIndex().getIsProfileIsNotNull() && component.getInvestigationIndex().getIsProfile().booleanValue())
			isProfile = true;

		if (wasAnalyzed(component.getID_Investigation(), isProfile ? SelectAndOrderComponentType.PROFILE : SelectAndOrderComponentType.INVESTIGATION))
			return;
		markAsAnalyzed(component.getID_Investigation(), isProfile ? SelectAndOrderComponentType.PROFILE : SelectAndOrderComponentType.INVESTIGATION);

		if (component.getAssocInvestigationsIsNotNull())
		{
			for (int x = 0; x < component.getAssocInvestigations().size(); x++)
			{
				InvestigationSelectOrderVo subComponent = component.getAssocInvestigations().get(x);
				if (subComponent != null)
				{
					SelectAndOrderComponentType type = SelectAndOrderComponentType.INVESTIGATION;
					if (subComponent.getInvestigationIndexIsNotNull() && subComponent.getInvestigationIndex().getIsProfileIsNotNull())
						type = subComponent.getInvestigationIndex().getIsProfile().booleanValue() ? SelectAndOrderComponentType.PROFILE : SelectAndOrderComponentType.INVESTIGATION;

					if (!wasAnalyzed(subComponent.getID_Investigation(), type))
					{
						markAsAnalyzed(subComponent.getID_Investigation(), type);
						analyzeComponents(subComponent);
					}
				}
			}
		}

		if (component.getInvestigationIndexIsNotNull() && component.getInvestigationIndex().getInvestigationsIsNotNull())
		{
			for (int x = 0; x < component.getInvestigationIndex().getInvestigations().size(); x++)
			{
				InvestigationSelectOrderVo subComponent = component.getInvestigationIndex().getInvestigations().get(x);
				if (subComponent != null)
				{
					SelectAndOrderComponentType type = SelectAndOrderComponentType.INVESTIGATION;
					if (subComponent.getInvestigationIndexIsNotNull() && subComponent.getInvestigationIndex().getIsProfileIsNotNull())
						type = subComponent.getInvestigationIndex().getIsProfile().booleanValue() ? SelectAndOrderComponentType.PROFILE : SelectAndOrderComponentType.INVESTIGATION;

					if (!wasAnalyzed(subComponent.getID_Investigation(), type))
					{
						markAsAnalyzed(subComponent.getID_Investigation(), type);
						analyzeComponents(subComponent);
					}
				}
			}
		}

	}

	private void populateSearch()
	{
		SelectedComponentFromSelectOrderVoCollection selection = form.getLocalContext().getSelectedComponents();
		if (selection == null)
			selection = new SelectedComponentFromSelectOrderVoCollection();
		SelectedComponentFromSelectOrderVoCollection linkedCoponents = form.getLocalContext().getLinkedComponents();
		if (linkedCoponents == null)
			linkedCoponents = new SelectedComponentFromSelectOrderVoCollection();
		new OrderEntryTemplatePopulation(form.lyrTemplates().tabSearch().dyngrdSearch(), form.getImages().OCRR.Investigation, form.getImages().OCRR.Profile, form.getImages().OCRR.OrderSet).populateSearch(form.getLocalContext().getLastSearchResults(), selection, linkedCoponents);
	}

	private void switchToSearchView()
	{
		if (engine.hasRight(AppRight.OCS_ALLOW_INV_SEARCH))
		{
			populateSearch();

			form.lyrTemplates().showtabSearch();
			form.lyrTemplates().tabTemplate().setHeaderVisible(false);
			form.lyrTemplates().tabSearch().setHeaderVisible(true);
			form.lyrTemplates().tabPreview().setHeaderVisible(false);
			form.lyrTemplates().tabSearch().txtTextName().setFocus();
		}
		else
		{
			form.lyrTemplates().tabSearch().setHeaderVisible(false);
		}
		//WDEV-17035
		updateControlsState();
	}

	private void switchToPreviewView() throws PresentationLogicException
	{
		populateMyOrderPreview();
		form.lyrTemplates().showtabPreview();
		form.lyrTemplates().tabTemplate().setHeaderVisible(false);
		form.lyrTemplates().tabSearch().setHeaderVisible(false);
		form.lyrTemplates().tabPreview().setHeaderVisible(true);
		
		//WDEV-17035
		updateControlsState();
	}

	private void initialize() throws PresentationLogicException
	{
		if(!engine.isDialog())
			form.getGlobalContext().OCRR.setMyOrderQuestions(null);
			
		//security level WDEV-9780
		RoleDisciplineSecurityLevelLiteGCVo voRoleDisciplineSecurityLevels = form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels();
		if(voRoleDisciplineSecurityLevels == null || (voRoleDisciplineSecurityLevels != null &&  voRoleDisciplineSecurityLevels.getIsConfigLoadedIsNotNull() && !voRoleDisciplineSecurityLevels.getIsConfigLoaded().equals(false)))
			form.getGlobalContext().OCRR.setRoleDisciplineSecurityLevels(domain.getRoleDisciplineSecurityLevels(engine.getLoggedInRole()));
		
		form.getGlobalContext().Core.setHideCancelButton(Boolean.TRUE);
		form.getContextMenus().getOCRRSelectAndOrderRESETItem().setVisible(true);
		form.lyrTemplates().tabSearch().GrpCriteria().setValue(GrpCriteriaEnumeration.rdoContains);
		resetOrder();
		switchToSearchView();
		form.lyrTemplates().tabSearch().btnPlaceOrder().setVisible(false);
		form.lyrTemplates().tabTemplate().btnTemplatePlaceOrder().setVisible(false);
		
		if(!ConfigFlag.UI.DISABLE_MULTI_SITE_CATS_FUNCTIONALITY.getValue())
		{
			if(form.getGlobalContext().RefMan.getCatsReferral()!=null){
				LocationLiteVoCollection voCollLocation =  domain.listLocationLiteForReferralContract(form.getGlobalContext().RefMan.getCatsReferral(),true);
				if(voCollLocation != null)
					form.getLocalContext().setContractLocations(voCollLocation.toRefVoCollection());
			}
		}	
	}

	private void open()
	{
		loadActiveOrderEntryTemplates();

		if (engine.hasRight(AppRight.OCS_ALLOW_INV_SEARCH))
		{
			TreeNode searchNode = form.treDetails().getNodes().add(searchNodeValue, "Search");
			searchNode.setCollapsedImage(form.getImages().Core.FindEnabled16);
			searchNode.setExpandedImage(form.getImages().Core.FindEnabled16);
		}

		TreeNode previewNode = form.treDetails().getNodes().add(previewNodeValue, "My Order Preview");
		previewNode.setCollapsedImage(form.getImages().OCRR.MyOrderPreview);
		previewNode.setExpandedImage(form.getImages().OCRR.MyOrderPreview);

		form.treDetails().setValue(searchNodeValue);
	}

	private void loadActiveOrderEntryTemplates()
	{
		form.treDetails().clear();

		OrderEntryTemplateShortVoCollection templates = domain.listActiveOrderEntryTemplatesForLocationAndRole(domain.getCurrentLocation(), (AppRoleRefVo) engine.getLoggedInRole());
		if (templates == null || templates.size() == 0)
			return;

		templates.sort();

		TemplateCategoriesCollection categories = new TemplateCategoriesCollection();
		for (int x = 0; x < templates.size(); x++)
		{
			TemplateCategories category = templates.get(x).getTemplateCategory();
			if (category != null && !categories.contains(category))
				categories.add(category);
		}

		for (int x = 0; x < categories.size(); x++)
		{
			TemplateCategories category = categories.get(x);
			TreeNode categoryNode = form.treDetails().getNodes().add(category, category.getText());

			Image categoryImage = category.getImage();
			if (categoryImage == null && category.getTextColor() != null)
			{
				Color color = Color.getColor(category.getTextColor().getName());
				if (color != null)
					categoryImage = color.getImage();
			}
			if (categoryImage != null)
			{
				categoryNode.setCollapsedImage(categoryImage);
				categoryNode.setExpandedImage(categoryImage);
			}

			for (int y = 0; y < templates.size(); y++)
			{
				OrderEntryTemplateShortVo template = templates.get(y);
				if (template.getTemplateCategoryIsNotNull() && template.getTemplateCategory().equals(category))
				{
					TreeNode templateNode = categoryNode.getNodes().add(template, template.getMenuName());
					templateNode.setTooltip(escapeAmpersandInTooltip(template.getDescription()));
					templateNode.setCollapsedImage(form.getImages().OCRR.OrderEntryTemplate);
					templateNode.setExpandedImage(form.getImages().OCRR.OrderEntryTemplate);
				}
			}

			categoryNode.setExpanded(false);
			categoryNode.sortChildrenByText();
		}
		addRemoveOrderRelatedNodes();
	}

	private TreeNode getPreviewNode()
	{
		for (int x = 0; x < form.treDetails().getNodes().size(); x++)
		{
			TreeNode analyzedNode = form.treDetails().getNodes().get(x);
			if (analyzedNode.getValue() != null && analyzedNode.getValue().equals(this.previewNodeValue))
				return analyzedNode;
		}
		
		return null;
	}
	
	private void addRemoveOrderRelatedNodes()
	{
		TreeNode existingPreviewNode = null;
		TreeNode existingPlaceOrderNode = null;

		for (int x = 0; x < form.treDetails().getNodes().size(); x++)
		{
			TreeNode analyzedNode = form.treDetails().getNodes().get(x);
			if (analyzedNode.getValue() != null && analyzedNode.getValue().equals(this.previewNodeValue))
				existingPreviewNode = analyzedNode;
			if (analyzedNode.getValue() != null && analyzedNode.getValue().equals(this.placeNodeValue))
				existingPlaceOrderNode = analyzedNode;
		}

		if (selectionIsEmpty())
		{
			if (existingPreviewNode != null)
				form.treDetails().getNodes().remove(existingPreviewNode);
			if (existingPlaceOrderNode != null)
				form.treDetails().getNodes().remove(existingPlaceOrderNode);
			if(form.lyrTemplates().tabSearch().isVisible())
				form.lyrTemplates().tabSearch().btnPlaceOrder().setVisible(false);
			else if(form.lyrTemplates().tabTemplate().isVisible())
				form.lyrTemplates().tabTemplate().btnTemplatePlaceOrder().setVisible(false);
			//WDEV-17035
			if (form.lyrTemplates().tabPreview().isVisible())
			{	
				if (form.treDetails().getSelectedNode() == null || (form.treDetails().getSelectedNode() != null && form.treDetails().getSelectedNode().getValue() instanceof TemplateCategories))
				{
					form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().clear();
					form.lyrTemplates().tabPreview().lyrPreview().tabQuestions().dynGrdQuestions().getRows().clear();
				}
			}
			return;
		}
		else{
			if(form.lyrTemplates().tabSearch().isVisible())
				form.lyrTemplates().tabSearch().btnPlaceOrder().setVisible(true);
			else if(form.lyrTemplates().tabTemplate().isVisible())
				form.lyrTemplates().tabTemplate().btnTemplatePlaceOrder().setVisible(true);
		}

		if (existingPreviewNode == null)
		{
			TreeNode previewNode = form.treDetails().getNodes().add(previewNodeValue, "My Order Preview");
			previewNode.setCollapsedImage(form.getImages().OCRR.MyOrderPreview);
			previewNode.setExpandedImage(form.getImages().OCRR.MyOrderPreview);
		}

		if (existingPlaceOrderNode == null && form.isReadOnly() == false)
		{
			TreeNode placeOrderNode = form.treDetails().getNodes().add(placeNodeValue, "Place Order");
			placeOrderNode.setCollapsedImage(form.getImages().OCRR.PlaceOrder);
			placeOrderNode.setExpandedImage(form.getImages().OCRR.PlaceOrder);
			if(form.lyrTemplates().tabSearch().isVisible())
				form.lyrTemplates().tabSearch().btnPlaceOrder().setVisible(true);
			else if(form.lyrTemplates().tabTemplate().isVisible())
				form.lyrTemplates().tabTemplate().btnTemplatePlaceOrder().setVisible(true);
		}
	}

	//WDEV-12361
	private boolean processNodeSelection(ims.framework.controls.TreeNode node) throws PresentationLogicException
	{
		if (node == null || node.getValue() == null)
			return false;

		if (node.getValue() instanceof OrderEntryTemplateShortVo)
		{
			OrderEntryTemplateShortVo template = (OrderEntryTemplateShortVo) node.getValue();
			form.lyrTemplates().tabTemplate().setCaption(template.getFormName());
			loadOrderEntryTemplate(template);
			switchToTemplateView();
		}
		if (node.getValue() instanceof String)
		{
			String name = (String) node.getValue();
			if (name.equals(searchNodeValue))
				switchToSearchView();
			if (name.equals(previewNodeValue))
				switchToPreviewView();
			if (name.equals(placeNodeValue))
			{
				gotoMyOrder(false);
				return true;
			}
		}
		
		return false;
	}

	private boolean isTemplateNodeSelected()
	{
		TreeNode node = form.treDetails().getSelectedNode();
		if (node == null)
			return false;
		Object value = node.getValue();
		if (value == null)
			return false;

		return node.getValue() instanceof OrderEntryTemplateShortVo;
	}

	private boolean isSearchNodeSelected()
	{
		TreeNode node = form.treDetails().getSelectedNode();
		if (node == null)
			return false;
		Object value = node.getValue();
		if (value == null)
			return false;

		if (node.getValue() instanceof String)
		{
			String svalue = (String) node.getValue();
			return svalue.equals(searchNodeValue);
		}

		return false;
	}

	private boolean isPreviewNodeSelected()
	{
		TreeNode node = form.treDetails().getSelectedNode();
		if (node == null)
			return false;
		Object value = node.getValue();
		if (value == null)
			return false;

		if (node.getValue() instanceof String)
		{
			String svalue = (String) node.getValue();
			return svalue.equals(previewNodeValue);
		}

		return false;
	}

	private void populateTemplateIfSelected()
	{
		Object value = form.treDetails().getValue();
		if (value != null && value instanceof OrderEntryTemplateShortVo)
			loadOrderEntryTemplate((OrderEntryTemplateShortVo) value);
	}

	private void loadOrderEntryTemplate(OrderEntryTemplateShortVo template)
	{
		SelectedComponentFromSelectOrderVoCollection selection = form.getLocalContext().getSelectedComponents();
		if (selection == null)
			selection = new SelectedComponentFromSelectOrderVoCollection();
		new OrderEntryTemplatePopulation(form.lyrTemplates().tabTemplate().dyngrdTemplate(), form.getImages().OCRR.Investigation, form.getImages().OCRR.Profile, form.getImages().OCRR.OrderSet).populate(domain.getOrderEntryTemplate(template, form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels()), selection);
	}

	private void processComponentSelection(DynamicGridCell cell)
	{
		if (cell.getType().getID() == DynamicCellType.BOOL.getID())
		{
			DynamicGrid grid = form.lyrTemplates().tabTemplate().dyngrdTemplate();
			int columnIndex = grid.getColumns().indexOf(cell.getColumn());
			DynamicGridColumn valueColumn = grid.getColumns().get(columnIndex + 2);
			Object value = cell.getRow().getCells().get(valueColumn).getIdentifier();

			if (value != null && value instanceof OrderEntryTemplateComponentShortVo)
			{
				form.getLocalContext().setSelectedCell(null);
				form.getLocalContext().setSelectedGrid(null);
				OrderEntryTemplateComponentShortVo component = (OrderEntryTemplateComponentShortVo) value;
				if (((Boolean) cell.getValue()).booleanValue())
				{
					if(validateSelectionHasLaunchedConfirmationDialog(cell, component))
						return;
				}

				markUnmarkComponent((OrderEntryTemplateComponentShortVo) value, ((Boolean) cell.getValue()).booleanValue(), null);//WDEV-16624
			}

			populateTemplateIfSelected();
			addRemoveOrderRelatedNodes();
		}
	}

	//WDEV-16762
	private boolean validateSelectionHasLaunchedConfirmationDialog(DynamicGridCell cell, OrderEntryTemplateComponentShortVo component)
	{
		boolean isFemale = form.getGlobalContext().Core.getPatientShort().getSexIsNotNull() && form.getGlobalContext().Core.getPatientShort().getSex().equals(Sex.FEMALE);

		GenderInvestigationVoCollection genderMessages = null;//WDEV-16762
		
		if (component.getInvestigationIsNotNull())
		{		
			//treated differently if profile as profile is not actually ordered
			if(component.getInvestigation().getInvestigationIndex().getIsProfile())
			{
				genderMessages = domain.listProfileInvestigationsWithGenderMessages(component.getInvestigation().getInvestigationIndex(), isFemale);//WDEV-16762
				
				InvestigationQuestionShortVoCollection voCollInvQuestions = domain.listInformationMessagesForProfiles(component.getInvestigation().getInvestigationIndex());
				form.getGlobalContext().OCRR.SelectAndOrder.setLaunchMyOrderInfoDialog(new Boolean( retrieveInfomationMessages(voCollInvQuestions, null, null)));
				
				ReOrderPeriodMessageVoCollection voCollMessages = domain.listProfileInvestigationsWithinMinReOrderPeriod(component.getInvestigation().getInvestigationIndex(), form.getGlobalContext().Core.getPatientShort(), form.getLocalContext().getBreachedInvestigations());//WDEV-16624
				if(voCollMessages != null && voCollMessages.size() > 0)
				{
					form.getLocalContext().setSelectedCell(cell);
					form.getLocalContext().setSelectedGrid(form.lyrTemplates().tabTemplate().dyngrdTemplate());

					form.getGlobalContext().OCRR.setYesNoDialogWithReasonMessage(buildReOrderMessage(voCollMessages));//WDEV-16762
					
					form.getGlobalContext().OCRR.SelectAndOrder.setLaunchYesNoReOrderDialog(Boolean.TRUE);
				}
			}
			else
			{
				genderMessages = isInvAppropriate(component.getInvestigation().getInvestigationIndex().getGenderSpecific(), isFemale, component.getInvestigation());//WDEV-16762
				
				//info messages
				InvestigationQuestionShortVoCollection voCollInvQuestions = domain.listInformatonMessagesForInvestigation(component.getInvestigation().getID_Investigation(), null);//WDEV-16762
				form.getGlobalContext().OCRR.SelectAndOrder.setLaunchMyOrderInfoDialog(new Boolean( retrieveInfomationMessages(voCollInvQuestions, component != null && component.getInvestigationIsNotNull() && component.getInvestigation().getProviderServiceIsNotNull() && component.getInvestigation().getProviderService().getLocationServiceIsNotNull() && component.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? component.getInvestigation().getProviderService().getLocationService().getService().getID_Service() : null,null)));
				
				MinReorderPeriod unit = isFemale ? component.getInvestigation().getFemaleMinReorderPeriodUnit() : component.getInvestigation().getMinReorderPeriodUnit(); 
				Integer dataValue = isFemale ? component.getInvestigation().getFemaleMinReorderPeriodVal() : component.getInvestigation().getMinReorderPeriodVal();
				DateTime[] dateTimes = domain.calculateDateTimeRange(dataValue, unit);
				ReOrderPeriodMessageVoCollection voCollMessages = null;
				if (dateTimes != null)
				{
					voCollMessages = domain.listInvOrderedWithinMinReOrderPeriod(component.getInvestigation().getID_Investigation(), dateTimes[0], dateTimes[1], form.getGlobalContext().Core.getPatientShort(), dataValue, unit, component.getInvestigation().getInvestigationIndex().getCategory(), null);//WDEV-16580, WDEV-16762
					if (voCollMessages != null && voCollMessages.size() > 0)// 	WDEV-16762
					{
						form.getLocalContext().setSelectedCell(cell);
						form.getLocalContext().setSelectedGrid(form.lyrTemplates().tabTemplate().dyngrdTemplate());
						
						form.getGlobalContext().OCRR.setYesNoDialogWithReasonMessage(buildReOrderMessage(voCollMessages));//WDEV-16762
						
						form.getGlobalContext().OCRR.SelectAndOrder.setLaunchYesNoReOrderDialog(Boolean.TRUE);
					}
				}
			}
		}
		else if(component.getOrderSet() != null)//WDEV-16624
		{
			ReOrderPeriodMessageVoCollection messages = domain.listOrderSetInvestigationsWithinMinReOrderPeriod(component.getOrderSet(), form.getGlobalContext().Core.getPatientShort(), form.getLocalContext().getBreachedInvestigations());//WDEV-16624
			
			if(messages != null && messages.size() > 0)
			{
				form.getLocalContext().setSelectedCell(cell);
				form.getLocalContext().setSelectedGrid(form.lyrTemplates().tabTemplate().dyngrdTemplate());

				form.getGlobalContext().OCRR.setYesNoDialogWithReasonMessage(buildReOrderMessage(messages));//WDEV-16762
				
				form.getGlobalContext().OCRR.SelectAndOrder.setLaunchYesNoReOrderDialog(Boolean.TRUE);
			}
			
			genderMessages = domain.listOrderSetInvestigationsWithGenderMessages(component.getOrderSet(), isFemale);//WDEV-16762
			
			InvestigationQuestionShortVoCollection voCollInvQuestions = domain.listInformatonMessagesForOrderSet(component.getOrderSet());
			form.getGlobalContext().OCRR.SelectAndOrder.setLaunchMyOrderInfoDialog(new Boolean( retrieveInfomationMessages(voCollInvQuestions, null, null)));
		}
		
		//gender
		form.getGlobalContext().OCRR.setGenderInvestigations(genderMessages);//WDEV-16762
		form.getGlobalContext().OCRR.SelectAndOrder.setLaunchYesNoGenderDialog(new Boolean( genderMessages != null && genderMessages.size() > 0));//WDEV-16762
		
		//WDEV-16762
		if(genderMessages != null && genderMessages.size() > 0)
		{
			form.getLocalContext().setSelectedCell(cell);
			form.getLocalContext().setSelectedGrid(form.lyrTemplates().tabTemplate().dyngrdTemplate());
		}

		//launch dialog
		if(form.getGlobalContext().OCRR.SelectAndOrder.getLaunchMyOrderInfoDialogIsNotNull() && form.getGlobalContext().OCRR.SelectAndOrder.getLaunchMyOrderInfoDialog().booleanValue())
			engine.open(form.getForms().OCRR.MyOrderInformations, false);// 	WDEV-16717
		else if(form.getGlobalContext().OCRR.SelectAndOrder.getLaunchYesNoReOrderDialogIsNotNull() && form.getGlobalContext().OCRR.SelectAndOrder.getLaunchYesNoReOrderDialog().booleanValue())
			engine.open(form.getForms().OCRR.YesNoDialogWithReason, false);// 	WDEV-16703
		else if(form.getGlobalContext().OCRR.SelectAndOrder.getLaunchYesNoGenderDialogIsNotNull() && form.getGlobalContext().OCRR.SelectAndOrder.getLaunchYesNoGenderDialog().booleanValue())
		{
			engine.open(form.getForms().OCRR.GenderYesNoDialog, false);// 	WDEV-16717, WDEV-16762
		}
		
		return form.getLocalContext().getSelectedCellIsNotNull();
	}

	//WDEV-16762
	private ReOrderPeriodMessageVoCollection buildReOrderMessage(ReOrderPeriodMessageVoCollection voCollMessages)
	{
		if(voCollMessages == null || voCollMessages.get(0) == null)
			throw new CodingRuntimeException("No Re-Order Message to Display - Coding Error");
		//sort the collection on date to get the last occurence it was ordered
		voCollMessages.sort(SortOrder.DESCENDING);
		
		voCollMessages = getDistinctListOfMessages(voCollMessages);
		
		return voCollMessages;
	}

	//WDEV-16762
	private ReOrderPeriodMessageVoCollection getDistinctListOfMessages(ReOrderPeriodMessageVoCollection voCollMessages)
	{
		ReOrderPeriodMessageVoCollection collMessages = new ReOrderPeriodMessageVoCollection();
		
		HashMap<String, ReOrderPeriodMessageVo> map = new HashMap<String, ReOrderPeriodMessageVo>(); 
		for(int i=0;i<voCollMessages.size();i++)
		{
			if(!map.containsKey(voCollMessages.get(i).getItemName()))
				map.put(voCollMessages.get(i).getItemName(), voCollMessages.get(i));
		}
		
		for (ReOrderPeriodMessageVo element : map.values())
		{
			collMessages.add(element);
			
			//WDEV-16624
			if(form.getLocalContext().getBreachedInvestigations() == null)
				form.getLocalContext().setBreachedInvestigations(new BreachedInvestigationsVoCollection());//WDEV-16762
			
			//WDEV-16762
			BreachedInvestigationsVo breached = new BreachedInvestigationsVo();
			breached.setInvestigationId(element.getInvestigationId());
			breached.setParentId(element.getParentId());
			
			form.getLocalContext().getBreachedInvestigations().add(breached);//WDEV-16624, WDEV-16762
		}

		return collMessages;
	}

	//WDEV-16762
	private GenderInvestigationVoCollection isInvAppropriate(GenderSpecific instGenderSpecific, boolean isFemale, InvestShortVo investShortVo)
	{
		GenderInvestigationVoCollection invColl = new GenderInvestigationVoCollection();
		
		if (instGenderSpecific != null)
		{
			if (!instGenderSpecific.equals(GenderSpecific.NOTAPPLICABLE))
			{
				if (instGenderSpecific.equals(GenderSpecific.FEMALE))
				{
					if (!isFemale)
					{
						invColl.add(getGenderInvestigationFromInvestShort(investShortVo));
					}
				}
				else if (instGenderSpecific.equals(GenderSpecific.MALE))
				{
					if (isFemale)
					{
						invColl.add(getGenderInvestigationFromInvestShort(investShortVo));
					}
				}
			}
		}
		
		return invColl.size() > 0 ? invColl : null;
	}

	//WDEV-16762
	private GenderInvestigationVo getGenderInvestigationFromInvestShort(InvestShortVo investShortVo) 
	{
		if(investShortVo == null)
			return null;
		
		GenderInvestigationVo inv = new GenderInvestigationVo(investShortVo.getID_Investigation(), investShortVo.getVersion_Investigation());
		
		InvestigationIndexForGenderInvestigationVo invIndex = new InvestigationIndexForGenderInvestigationVo(investShortVo.getInvestigationIndex().getID_InvestigationIndex(), investShortVo.getInvestigationIndex().getVersion_InvestigationIndex());
		invIndex.setName(investShortVo.getInvestigationIndex().getName());
		invIndex.setIsProfile(investShortVo.getInvestigationIndex().getIsProfile());
		
		inv.setInvestigationIndex(invIndex);
		
		return inv;
	}

	private void processSearchComponentSelection(DynamicGridCell cell)
	{
		if (cell.getType().getID() == DynamicCellType.BOOL.getID())
		{
			DynamicGrid grid = form.lyrTemplates().tabSearch().dyngrdSearch();
			int columnIndex = grid.getColumns().indexOf(cell.getColumn());
			DynamicGridColumn valueColumn = grid.getColumns().get(columnIndex + 2);
			Object value = cell.getRow().getCells().get(valueColumn).getIdentifier();

			if (value != null && value instanceof SelectedComponentFromSelectOrderVo)
			{
				SelectedComponentFromSelectOrderVo component = (SelectedComponentFromSelectOrderVo) value;
				form.getLocalContext().setSelectedCell(null);
				form.getLocalContext().setSelectedGrid(null);
				if (((Boolean) cell.getValue()).booleanValue())
				{
					if(validateSelectionHasLaunchedConfirmationDialog(cell, component))
						return;
				}

				doSelection(cell, component);
			}

			populateSearch();
			addRemoveOrderRelatedNodes();
		}
	}
	
	/**
	 * This method will look after launching any warning/info dialogs upon selection of a record that satisfies any of the following
	 *  1) Gender validation	
	 *  2) Re-Order period validation
	 *  3) Information Messages
	 *  
	 *  return has gender or reorder dialog been launched
	 */
	//WDEV-16762
	private boolean validateSelectionHasLaunchedConfirmationDialog(DynamicGridCell cell, SelectedComponentFromSelectOrderVo component)
	{
		boolean isFemale = form.getGlobalContext().Core.getPatientShort().getSexIsNotNull() && form.getGlobalContext().Core.getPatientShort().getSex().equals(Sex.FEMALE);

		//gender
		GenderInvestigationVoCollection genderMessage = null;//WDEV-16762
				
		//reorder period
		form.getGlobalContext().OCRR.SelectAndOrder.setLaunchYesNoReOrderDialog(Boolean.FALSE);
		//treated differently if profile as profile is not actually ordered
		if(component.getComponentType().equals(SelectAndOrderComponentType.PROFILE))
		{
			if(component.getID() != null)//WDEV-16906
			{
				InvestigationIndexRefVo invIndex = domain.getInvestigationIndex(component.getID());//WDEV-16906
				if(invIndex != null)//WDEV-16906
				{
					genderMessage = domain.listProfileInvestigationsWithGenderMessages(invIndex, isFemale);//WDEV-16762, WDEV-16906
					//genderMessage = buildGenderMessage(genderMessages);
					
					InvestigationQuestionShortVoCollection voCollInvQuestions = domain.listInformationMessagesForProfiles(invIndex);//WDEV-16906
					form.getGlobalContext().OCRR.SelectAndOrder.setLaunchMyOrderInfoDialog(new Boolean( retrieveInfomationMessages(voCollInvQuestions, component.getServiceID(), component.getID())));
					
					ReOrderPeriodMessageVoCollection voCollMessages = domain.listProfileInvestigationsWithinMinReOrderPeriod(invIndex, form.getGlobalContext().Core.getPatientShort(), form.getLocalContext().getBreachedInvestigations());//WDEV-16624, WDEV-16906
					if(voCollMessages != null && voCollMessages.size() > 0)
					{
						form.getLocalContext().setSelectedCell(cell);
						form.getLocalContext().setSelectedGrid(form.lyrTemplates().tabSearch().dyngrdSearch());
						
						form.getGlobalContext().OCRR.setYesNoDialogWithReasonMessage(buildReOrderMessage(voCollMessages));//WDEV-16762
						
						form.getGlobalContext().OCRR.SelectAndOrder.setLaunchYesNoReOrderDialog(Boolean.TRUE);
					}
				}
			}
		}
		else
		{
			genderMessage = isInvAppropriateFromComponent(component.getGenderSpecific(), isFemale, component);//WDEV-16762
			
			//info messages
			InvestigationQuestionShortVoCollection voCollInvQuestions = domain.listInformatonMessagesForInvestigation(component.getID(), null);//WDEV-16762
			form.getGlobalContext().OCRR.SelectAndOrder.setLaunchMyOrderInfoDialog(new Boolean( retrieveInfomationMessages(voCollInvQuestions, component.getServiceID(),component.getID())));
			
			MinReorderPeriod unit = isFemale ? component.getMinReOrderFemalePeriod() : component.getMinReOrderPeriod(); 
			Integer dataValue = isFemale ? component.getMinReOrderFemaleVal() : component.getMinReOrderVal();
			DateTime[] dateTimes = domain.calculateDateTimeRange(dataValue, unit);
			ReOrderPeriodMessageVoCollection voCollMessages = null;
			if (dateTimes != null)
			{
				voCollMessages = domain.listInvOrderedWithinMinReOrderPeriod(component.getID(), dateTimes[0], dateTimes[1], form.getGlobalContext().Core.getPatientShort(), dataValue, unit, component.getCategory(), null);//WDEV-16580, WDEV-16762
				if (voCollMessages != null && voCollMessages.size() > 0)// 	WDEV-16762
				{
					form.getLocalContext().setSelectedCell(cell);
					form.getLocalContext().setSelectedGrid(form.lyrTemplates().tabSearch().dyngrdSearch());
					
					form.getGlobalContext().OCRR.setYesNoDialogWithReasonMessage(buildReOrderMessage(voCollMessages));//WDEV-16762
					
					form.getGlobalContext().OCRR.SelectAndOrder.setLaunchYesNoReOrderDialog(Boolean.TRUE);
				}
			}		
		}
		
		form.getGlobalContext().OCRR.setGenderInvestigations(genderMessage);//WDEV-16762
		form.getGlobalContext().OCRR.SelectAndOrder.setLaunchYesNoGenderDialog(new Boolean( genderMessage != null && genderMessage.size() > 0));//WDEV-16762
		
		//WDEV-16762
		if(genderMessage != null && genderMessage.size() > 0)
		{
			form.getLocalContext().setSelectedCell(cell);
			form.getLocalContext().setSelectedGrid(form.lyrTemplates().tabSearch().dyngrdSearch());
		}
		
		//launch dialog
		if(form.getGlobalContext().OCRR.SelectAndOrder.getLaunchMyOrderInfoDialog().booleanValue())
			engine.open(form.getForms().OCRR.MyOrderInformations, false);// 	WDEV-16717
		else if(form.getGlobalContext().OCRR.SelectAndOrder.getLaunchYesNoReOrderDialog().booleanValue())
			engine.open(form.getForms().OCRR.YesNoDialogWithReason, false);// 	WDEV-16703
		else if(form.getGlobalContext().OCRR.SelectAndOrder.getLaunchYesNoGenderDialog().booleanValue())
		{
			engine.open(form.getForms().OCRR.GenderYesNoDialog, false);// 	WDEV-16717, WDEV-16762
		}
		
		return form.getLocalContext().getSelectedCellIsNotNull();
	}
	
	//WDEV-16762
	private GenderInvestigationVoCollection isInvAppropriateFromComponent(GenderSpecific instGenderSpecific, boolean isFemale, SelectedComponentFromSelectOrderVo component) 
	{
		GenderInvestigationVoCollection invColl = new GenderInvestigationVoCollection();
		
		if (instGenderSpecific != null)
		{
			if (!instGenderSpecific.equals(GenderSpecific.NOTAPPLICABLE))
			{
				if (instGenderSpecific.equals(GenderSpecific.FEMALE))
				{
					if (!isFemale)
					{
						invColl.add(getGenderInvestigationFromSelectedComponentFromSelectOrder(component));
					}
				}
				else if (instGenderSpecific.equals(GenderSpecific.MALE))
				{
					if (isFemale)
					{
						invColl.add(getGenderInvestigationFromSelectedComponentFromSelectOrder(component));
					}
				}
			}
		}
		
		return invColl.size() > 0 ? invColl : null;
	}

	//WDEV-16762
	private GenderInvestigationVo getGenderInvestigationFromSelectedComponentFromSelectOrder(SelectedComponentFromSelectOrderVo component) 
	{
		if(component == null)
			return null;
		
		GenderInvestigationVo inv = new GenderInvestigationVo();
		inv.setID_Investigation(component.getID());
		
		InvestigationIndexForGenderInvestigationVo invIndex = new InvestigationIndexForGenderInvestigationVo();
		invIndex.setName(component.getText());
		invIndex.setIsProfile(SelectAndOrderComponentType.PROFILE.equals(component.getComponentType()));
		
		inv.setInvestigationIndex(invIndex);
		
		return inv;
	}

	private String escapeAmpersandInTooltip(String tooltip)
	{
		if (tooltip == null)
			return null;
		if (!tooltip.contains("&"))
			return tooltip;
		StringBuilder sb = new StringBuilder(tooltip);
		for (int i = sb.length()-1 ; i >= 0 ; i--)
		{
			if (sb.charAt(i)=='&' && i<sb.length()-1 && sb.charAt(i+1)!=' ')
			{
				sb.insert(i, " ");
			}
		}
		
		return sb.toString();
	}

	private boolean retrieveInfomationMessages(InvestigationQuestionShortVoCollection voCollInvQuestions, Integer serviceID,Integer investigationId)//WDEV-12980
	{
		form.getGlobalContext().OCRR.setMyOrderInformations(null);

		ServiceQuestionShortVoCollection questionsToAsk = new ServiceQuestionShortVoCollection() ;
		ServiceQuestionShortVoCollection voCollService;
		
		if (serviceID!=null)
		{
			//If the questions for this services have not been asked
			if (!form.getLocalContext().getServicesWithDisplayedServiceQuestionsIsNotNull() || !form.getLocalContext().getServicesWithDisplayedServiceQuestions().contains(serviceID))
			{
				voCollService = domain.listInformationMessagesForService(serviceID);
				if (voCollService != null && voCollService.size()>0)
				{
					for (ServiceQuestionShortVo question:voCollService)
					{
						questionsToAsk.add(question);
					}
				}
				if (!form.getLocalContext().getServicesWithDisplayedServiceQuestionsIsNotNull())
					form.getLocalContext().setServicesWithDisplayedServiceQuestions(new ArrayList<Integer>());
				form.getLocalContext().getServicesWithDisplayedServiceQuestions().add(serviceID);
				if (investigationId!=null)
				{
					if (!form.getLocalContext().getInvestigationsWithDisplayedServiceQuestionsIsNotNull())
						form.getLocalContext().setInvestigationsWithDisplayedServiceQuestions(new ArrayList<Integer>());
					form.getLocalContext().getInvestigationsWithDisplayedServiceQuestions().add(investigationId);
				}
			}
			else
			{
				//Maybe there are questions that should be asked for every investigation
				if (investigationId!=null && (!form.getLocalContext().getInvestigationsWithDisplayedServiceQuestionsIsNotNull()
						|| !form.getLocalContext().getInvestigationsWithDisplayedServiceQuestions().contains(investigationId)))
				{
					voCollService = domain.listInformationMessagesForService(serviceID);
					if (voCollService != null && voCollService.size()>0)
					{
						for (ServiceQuestionShortVo question:voCollService)
						{
							if (question.getAskForInvestigationsIsNotNull() && question.getAskForInvestigations().booleanValue())
								questionsToAsk.add(question);
						}
					}
					if (!form.getLocalContext().getInvestigationsWithDisplayedServiceQuestionsIsNotNull())
						form.getLocalContext().setInvestigationsWithDisplayedServiceQuestions(new ArrayList<Integer>());
					form.getLocalContext().getInvestigationsWithDisplayedServiceQuestions().add(investigationId);
				}

			}
		}
		
		
		GeneralQuestionAnswerVoCollection voCollQuestions = new GeneralQuestionAnswerVoCollection();
		if(voCollInvQuestions != null)
		{
			for(int i=0;i<voCollInvQuestions.size();i++)
			{
				InvestigationQuestionShortVo investigationQuestionShortVo = voCollInvQuestions.get(i);
				
				if(investigationQuestionShortVo == null)//WDEV-16854
					continue;
				
				if(isQuestionRelevant(investigationQuestionShortVo.getQuestion()))//WDEV-16854
				{
					GeneralQuestionAnswerVo voQuestionAnswer = new GeneralQuestionAnswerVo();
					
					voQuestionAnswer.setQuestion(investigationQuestionShortVo.getIQuestionTypeQuestion());
					voQuestionAnswer.setQuestionGroup(investigationQuestionShortVo.getIQuestionTypeOrderQuestionType());
					voQuestionAnswer.setWasMandatory(investigationQuestionShortVo.getIQuestionTypeIsMandatory());
					voQuestionAnswer.setItemName(investigationQuestionShortVo.getIQuestionTypeItemName());
					voQuestionAnswer.setItemId(investigationQuestionShortVo.getInvestigaionId());//WDEV-16762
					voQuestionAnswer.setParentid(investigationQuestionShortVo.getParentId());//WDEV-16762
					
					voCollQuestions.add(voQuestionAnswer);
				}
			}
		}
		if (questionsToAsk!=null)
		{
			for (ServiceQuestionShortVo question:questionsToAsk)
			{
				if(question == null)//WDEV-16854
					continue;
				
				if(isQuestionRelevant(question.getQuestionInformation()))//WDEV-16854
				{
					GeneralQuestionAnswerVo voQuestionAnswer = new GeneralQuestionAnswerVo();
	
					voQuestionAnswer.setQuestion(question.getIQuestionTypeQuestion());
					voQuestionAnswer.setQuestionGroup(question.getIQuestionTypeOrderQuestionType());
					voQuestionAnswer.setWasMandatory(question.getIQuestionTypeIsMandatory());
					voQuestionAnswer.setItemName(question.getIQuestionTypeItemName());
					
					voCollQuestions.add(voQuestionAnswer);
				}
			}
		}

		
		form.getGlobalContext().OCRR.setMyOrderInformations(voCollQuestions);
		if (voCollQuestions.size()>0)
			return true;

		return false;
	}
	
	//WDEV-16854
	private boolean isQuestionRelevant(QuestionInformationShortVo question)
	{
		PatientShort voPatShort = form.getGlobalContext().Core.getPatientShort();
		Integer age = voPatShort != null ? voPatShort.calculateAge() : null;
		Sex sex = voPatShort != null ? voPatShort.getSex() : null;
		
		boolean isRelevant = true;
		if(age != null)
		{
			Integer minAge = question.getAgeRangeMin();
			Integer maxAge = question.getAgeRangeMax();
		
			if(minAge != null)
			{
				if(age.intValue() < minAge.intValue())
					isRelevant = false;
				
				if(maxAge != null)
				{
					if(age.intValue() > maxAge.intValue())
						isRelevant = false;
				}
			}
			else
			{
				if(maxAge != null)
				{
					if(age.intValue() > maxAge.intValue())
						isRelevant = false;
				}
			}
		}
		
		if(sex != null)
		{
			GenderSpecific lkpGender = question.getGenderSpecific();
			if(lkpGender != null)
			{
				if(lkpGender.equals(GenderSpecific.MALE) && !sex.equals(Sex.MALE))
					isRelevant = false;
				else if(lkpGender.equals(GenderSpecific.FEMALE) && !sex.equals(Sex.FEMALE))
					isRelevant = false;
			}
		}
			
		return isRelevant;
	}

	private void doSelection(DynamicGridCell cell, SelectedComponentFromSelectOrderVo component)
	{
		addRemoveSelection(component, ((Boolean) cell.getValue()).booleanValue(), false);

		//if (((Boolean) cell.getValue()).booleanValue())
		{
			InvestigationSelectOrderVo investigation = domain.getChildComponentsForInvestigationOrProfile(component.getID(),form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels());

			clearAnalyzedChildComponents();
			markUnmarkChildComponentsRecursive(investigation, false, component.getID(), null, 0, ((Boolean) cell.getValue()).booleanValue(), component.getReOrderReason());//WDEV-16624
			clearAnalyzedChildComponents();
		}
	}

	private void markUnmarkComponent(OrderEntryTemplateComponentShortVo component, boolean mark, String reorderReason)//WDEV-16624
	{
		if (component.getInvestigationIsNotNull())
		{
			// Investigation or profile selected, will check the type now
			boolean isProfile = false;
			if (component.getInvestigation().getInvestigationIndexIsNotNull())
			{
				if (component.getInvestigation().getInvestigationIndex().getIsProfileIsNotNull())
					isProfile = component.getInvestigation().getInvestigationIndex().getIsProfile().booleanValue();
			}

			markUnmarkComponent(component.getInvestigation(), isProfile, mark, false, reorderReason);//WDEV-16624

			// mark/unmark all child components
			//if (mark)
			{
				InvestigationSelectOrderVo investigation = domain.getChildComponentsForInvestigationOrProfile(component.getInvestigation().getID_Investigation(),form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels());

				clearAnalyzedChildComponents();
				markUnmarkChildComponentsRecursive(investigation, false, null, null, 0, mark, reorderReason);//WDEV-16624
				clearAnalyzedChildComponents();
			}
		}
		else if (component.getOrderSetIsNotNull())
		{
			// Order set selected
			markUnmarkComponent(component.getOrderSet(), mark, false);

			// mark/unmark all child components
			//if (mark)
			{
				ComponentSelectOrderVoCollection childComponents = domain.getChildComponentsForOrderSet(component.getOrderSet().getID_OrderSet(),form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels());
				if (childComponents != null)
				{
					for (int x = 0; x < childComponents.size(); x++)
					{
						if (childComponents.get(x) != null)
						{
							clearAnalyzedChildComponents();
							markUnmarkChildComponentsRecursive(childComponents.get(x).getInvestigation(), null, new Integer(0), 0, component.getOrderSetIsNotNull(), mark, reorderReason);//WDEV-16624
							clearAnalyzedChildComponents();
						}
					}
				}
			}
		}
	}

	private void markUnmarkChildComponentsRecursive(InvestigationSelectOrderVo childInvestigation, Integer parentInvId, Integer idCurrentInvestigation, int level, boolean fromOrderSet, boolean mark, String reorderReason)//WDEV-16624
	{
		markUnmarkChildComponentsRecursive(childInvestigation, true, parentInvId, idCurrentInvestigation, level, fromOrderSet, mark, reorderReason);
	}

	private void markUnmarkChildComponentsRecursive(InvestigationSelectOrderVo childInvestigation, boolean addRoot, Integer parentInvId, Integer idCurrentInvestigation, int level, boolean mark, String reorderReason)//WDEV-16624
	{
		markUnmarkChildComponentsRecursive(childInvestigation, addRoot, parentInvId, idCurrentInvestigation, level, false, mark, reorderReason);
	}

	private void markUnmarkChildComponentsRecursive(InvestigationSelectOrderVo childInvestigation, boolean addRoot, Integer parentInvId, Integer idCurrentInvestigation, int level, boolean fromOrderSet, boolean mark, String reorderReason)//WDEV-16624
	{
		if (childInvestigation == null || childInvestigation.getInvestigationIndex() == null)
			return;

		SelectAndOrderComponentType type = SelectAndOrderComponentType.INVESTIGATION;
		if (childInvestigation.getInvestigationIndex().getIsProfileIsNotNull() && childInvestigation.getInvestigationIndex().getIsProfile().booleanValue())
			type = SelectAndOrderComponentType.PROFILE;

		int requiredLevel = fromOrderSet ? -1 : 1; // WDEV-4821

		if (!wasAnalyzed(childInvestigation.getID_Investigation(), type))
		{
			markAsAnalyzed(childInvestigation.getID_Investigation(), type);
			if (addRoot)
			{
				SelectedComponentFromSelectOrderVo component = new SelectedComponentFromSelectOrderVo();
				component.setID(childInvestigation.getID_Investigation());
				component.setComponentType(type);
				component.setText(childInvestigation.getInvestigationIndex().getName());
				component.setCategory(childInvestigation.getInvestigationIndex().getCategory());
				component.setTooltip(getComponentInvestigationTooltip(childInvestigation));
				component.setParentInvestigationId(parentInvId);
				component.setIsAddon(childInvestigation.getIsAddon());
				component.setRequiresSite(childInvestigation.getInvestigationIndex().getRequiresSiteSpecifier());
				component.setPhlebMayCollect(childInvestigation.getInvestigationIndex().getPhlebMayCollect());
				component.setGenderSpecific(childInvestigation.getInvestigationIndex().getGenderSpecific());
				
				if (childInvestigation.getProviderServiceIsNotNull() && childInvestigation.getProviderService().getLocationServiceIsNotNull() && childInvestigation.getProviderService().getLocationService().getServiceIsNotNull())
					component.setServiceID(childInvestigation.getProviderService().getLocationService().getService().getID_Service());
				
				//WDEV-16624
				if(checkIfInvestigationIsInBreachedList(childInvestigation.getID_Investigation()))
				{
					component.setReOrderReason(reorderReason);
				}
				
				if (childInvestigation.getInvestigationIndex().getActiveStatusIsNotNull() && childInvestigation.getInvestigationIndex().getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
					addRemoveSelection(component, mark, true);
			}

			if (childInvestigation.getAssocInvestigationsIsNotNull())
			{
				for (int x = 0; x < childInvestigation.getAssocInvestigations().size(); x++)
				{
					if (idCurrentInvestigation != null && (idCurrentInvestigation != childInvestigation.getID_Investigation()))
						level++;

					if (level < requiredLevel || requiredLevel == -1) // WDEV-4821
						markUnmarkChildComponentsRecursive(childInvestigation.getAssocInvestigations().get(x), true, childInvestigation.getID_Investigation(), childInvestigation.getID_Investigation(), level, mark, reorderReason);//WDEV-16624
				}
			}
		}
	}

	//WDEV-16624
	private boolean checkIfInvestigationIsInBreachedList(Integer investigationId) 
	{
		if(investigationId == null || form.getLocalContext().getBreachedInvestigations() == null)
			return false;
		
		Iterator<BreachedInvestigationsVo> list = form.getLocalContext().getBreachedInvestigations().iterator();//WDEV-16762
		
		while(list.hasNext())
		{
			BreachedInvestigationsVo item = list.next();//WDEV-16762
			
			if(item == null || item.getInvestigationId() == null)
				continue;
			
			if(item.getInvestigationId().equals(investigationId))//WDEV-16762
				return true;
		}
		
		return false;
	}

	private void clearAnalyzedChildComponents()
	{
		form.getLocalContext().setAnalyzedChildComponent(new SelectedComponentFromSelectOrderVoCollection());
	}

	private boolean wasAnalyzed(Integer id, SelectAndOrderComponentType type)
	{
		SelectedComponentFromSelectOrderVo component = new SelectedComponentFromSelectOrderVo();
		component.setID(id);
		component.setComponentType(type);
		return wasAnalyzed(component);
	}

	private boolean wasAnalyzed(SelectedComponentFromSelectOrderVo component)
	{
		SelectedComponentFromSelectOrderVoCollection analyzed = form.getLocalContext().getAnalyzedChildComponent();
		if (analyzed == null)
			return false;
		return analyzed.contains(component);
	}

	private void markAsAnalyzed(Integer id, SelectAndOrderComponentType type)
	{
		SelectedComponentFromSelectOrderVo component = new SelectedComponentFromSelectOrderVo();
		component.setID(id);
		component.setComponentType(type);
		markAsAnalyzed(component);
	}

	private void markAsAnalyzed(SelectedComponentFromSelectOrderVo component)
	{
		SelectedComponentFromSelectOrderVoCollection analyzed = form.getLocalContext().getAnalyzedChildComponent();
		if (analyzed == null)
			analyzed = new SelectedComponentFromSelectOrderVoCollection();
		if (!analyzed.contains(component))
			analyzed.add(component);
		form.getLocalContext().setAnalyzedChildComponent(analyzed);
	}

	private void markUnmarkComponent(InvestShortVo item, boolean isProfile, boolean mark, boolean isChildComponent, String reorderReason)
	{
		if (item != null && item.getID_InvestigationIsNotNull() && item.getInvestigationIndexIsNotNull())
		{
			SelectedComponentFromSelectOrderVo component = new SelectedComponentFromSelectOrderVo();
			component.setID(item.getID_Investigation());
			component.setComponentType(isProfile ? SelectAndOrderComponentType.PROFILE : SelectAndOrderComponentType.INVESTIGATION);
			component.setText(item.getInvestigationIndex().getName());
			component.setCategory(item.getInvestigationIndex().getCategory());
			component.setTooltip(getComponentInvestigationTooltip(item));
			component.setIsAddon(item.getIsAddon());
			component.setRequiresSite(item.getInvestigationIndex().getRequiresSiteSpecifier());
			component.setMinReOrderPeriod(item.getMinReorderPeriodUnit());
			component.setMinReOrderVal(item.getMinReorderPeriodVal());
			component.setMinReOrderFemalePeriod(item.getFemaleMinReorderPeriodUnit());
			component.setMinReOrderFemaleVal(item.getFemaleMinReorderPeriodVal());
			component.setPhlebMayCollect(item.getInvestigationIndex().getPhlebMayCollect());
			component.setGenderSpecific(item.getInvestigationIndex().getGenderSpecific());
			component.setReOrderReason(reorderReason);//WDEV-16624
			component.setAssociatedInvestigations(item.getAssocInvestigations());//WDEV-16624

			if (item.getProviderServiceIsNotNull() && item.getProviderService().getLocationServiceIsNotNull() && item.getProviderService().getLocationService().getServiceIsNotNull())
				component.setServiceID(item.getProviderService().getLocationService().getService().getID_Service());
			if (item.getActiveStatusIsNotNull() && item.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
				addRemoveSelection(component, mark, isChildComponent);
		}
	}

	private void markUnmarkComponent(OrderSetForHelpTextVo item, boolean mark, boolean isChildComponent)//WDEV-16624
	{
		if (item != null && item.getID_OrderSetIsNotNull())
		{
			SelectedComponentFromSelectOrderVo component = new SelectedComponentFromSelectOrderVo();
			component.setID(item.getID_OrderSet());
			component.setComponentType(SelectAndOrderComponentType.ORDERSET);
			component.setText(item.getName());
			component.setTooltip(escapeAmpersandInTooltip(item.getDescription()));
			component.setAssociatedInvestigations(getInvestigationsFromOrderSet(item));//WDEV-16624
			addRemoveSelection(component, mark, isChildComponent);
		}
	}

	//WDEV-16624
	private InvestigationRefVoCollection getInvestigationsFromOrderSet(OrderSetForHelpTextVo item) 
	{
		if(item == null || item.getComponent() == null)
			return null;
		
		InvestigationRefVoCollection coll = new InvestigationRefVoCollection();
		
		for(int i=0; i<item.getComponent().size(); i++)
		{
			OrderSetComponentForHelpTextVo component = item.getComponent().get(i);
			
			if(component == null)
				continue;
			
			InvestigationSelectOrderVo inv = component.getInvestigation();
			
			if(inv.getInvestigationIndex().getIsProfile())
			{
				if(inv.getAssocInvestigations() != null)
				{
					for(int j=0; j<inv.getAssocInvestigations().size(); j++)
					{
						InvestigationSelectOrderVo invinv = inv.getAssocInvestigations().get(j);
						
						if(invinv == null)
							continue;
						
						coll.add(invinv);
					}
				}
			}
			else
			{
				coll.add(inv);
			}
		}
		
		return coll;
	}

	private void addRemoveSelection(SelectedComponentFromSelectOrderVo newComponent, boolean add, boolean isChildComponent)
	{
		SelectedComponentFromSelectOrderVoCollection selectedComponents = form.getLocalContext().getSelectedComponents();		
		SelectedComponentFromSelectOrderVoCollection selectedLinkedComponents = form.getLocalContext().getLinkedComponents();
		
		if (selectedComponents == null)
			selectedComponents = new SelectedComponentFromSelectOrderVoCollection();
		
		if (selectedLinkedComponents == null)
			selectedLinkedComponents = new SelectedComponentFromSelectOrderVoCollection();

		if (add)
		{
			if (isChildComponent)
			{
				if (!selectedComponents.contains(newComponent) && !componentIsInRefusedList(newComponent))//WDEV-16762
					selectedComponents.add(newComponent);
				if (!selectedLinkedComponents.contains(newComponent) && !componentIsInRefusedList(newComponent))//WDEV-16762
					selectedLinkedComponents.add(newComponent);				
			}
			else
			{
				if (!selectedComponents.contains(newComponent) && !componentIsInRefusedList(newComponent))//WDEV-16762
					selectedComponents.add(newComponent);				
			}
		}
		else
		{
			if (selectedComponents.contains(newComponent))
				selectedComponents.remove(newComponent);	
			if (selectedLinkedComponents.contains(newComponent))
			{
				selectedLinkedComponents.remove(newComponent);
				checkIfTemplatesNeedUnchecked(selectedComponents, selectedLinkedComponents); //WDEV-16908
			}
			
			removeFromBreachedInvestigationsList(newComponent);//WDEV-16624
			removeFromRefusedInvestigationsList(newComponent);// WDEV-16762
		}
		
		removeRefusedComponentsFromSelectedComponents();//WDEV-16762

		selectedComponents.sort(new MyOrderComponentComparator());//WDEV-14912
		form.getLocalContext().setSelectedComponents(selectedComponents);		
		form.getLocalContext().setLinkedComponents(selectedLinkedComponents);
	}

	//WDEV-16908
	private void checkIfTemplatesNeedUnchecked(SelectedComponentFromSelectOrderVoCollection selectedComponents, SelectedComponentFromSelectOrderVoCollection selectedLinkedComponents)
	{
		if (selectedComponents == null || selectedLinkedComponents == null)
		{
			return;
		}
		
		Boolean exists;

		for (int a = 0; a < selectedComponents.size(); a++)
		{
			exists = Boolean.FALSE;
			
			if (SelectAndOrderComponentType.ORDERSET.equals(selectedComponents.get(a).getComponentType()))
			{
				ComponentSelectOrderVoCollection childComponents = domain.getChildComponentsForOrderSet(selectedComponents.get(a).getID(), form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels());
				
				for (int b = 0; b < selectedLinkedComponents.size(); b++)
				{
					for (int c = 0; c < childComponents.size(); c++)
					{
						if (selectedLinkedComponents.get(b).getID().equals(childComponents.get(c).getInvestigation().getID_Investigation()))
						{
							exists = Boolean.TRUE;
							break;
						}
					}

					if (exists)
						break;
				}

				if (!exists)
				{
					selectedComponents.remove(selectedComponents.get(a));
				}
			}
		}
	}

	// 	WDEV-16762
	private void removeFromRefusedInvestigationsList(SelectedComponentFromSelectOrderVo newComponent) 
	{
		if(newComponent == null)
			return;
		
		if(form.getGlobalContext().OCRR.getRefusedInvestigation() == null ||form.getGlobalContext().OCRR.getRefusedInvestigation().size() == 0)
			return;
		
		if(SelectAndOrderComponentType.INVESTIGATION.equals(newComponent.getComponentType()) || SelectAndOrderComponentType.PROFILE.equals(newComponent.getComponentType()))
		{
			removeComponentFromRefusedInvestigations(newComponent.getID());
		}
		
		if(newComponent.getAssociatedInvestigations() != null)
		{
			for(int i=0; i<newComponent.getAssociatedInvestigations().size(); i++)
			{
				InvestigationRefVo invId = newComponent.getAssociatedInvestigations().get(i);
					
				if(invId == null)
					continue;
					
				removeComponentFromRefusedInvestigations(invId.getID_Investigation());
			}
		}
	}

	// 	WDEV-16762
	private void removeComponentFromRefusedInvestigations(Integer invId) 
	{
		if(invId == null)
			return;
		
		InvestigationRefVoCollection refusedInvestigations = form.getGlobalContext().OCRR.getRefusedInvestigation();
		
		if(refusedInvestigations == null || refusedInvestigations.size() == 0)
			return;
		
		for(int i = refusedInvestigations.size() - 1; i >= 0; i--)
		{
			if(refusedInvestigations.get(i) == null || refusedInvestigations.get(i).getID_Investigation() == null)
				continue;
			
			if(invId.equals(refusedInvestigations.get(i).getID_Investigation()))
				refusedInvestigations.remove(refusedInvestigations.get(i));
		}
	}

	//WDEV-16762
	private void removeProfilesWithoutAnyInvestigationsSelected() 
	{
		SelectedComponentFromSelectOrderVoCollection selectedComponents = form.getLocalContext().getSelectedComponents();
		
		if(selectedComponents == null || selectedComponents.size() == 0)
			return;
		
		for(int i = selectedComponents.size() - 1; i >= 0; i--)
		{
			SelectedComponentFromSelectOrderVo selectedComponent = selectedComponents.get(i);
			
			if(selectedComponent == null || !SelectAndOrderComponentType.PROFILE.equals(selectedComponent.getComponentType()))
				continue;
			
			if(!doesProfileHasInvestigationsSelected(selectedComponent))
			{
				selectedComponents.remove(selectedComponent);
			}
		}
	}

	//WDEV-16762
	private boolean doesProfileHasInvestigationsSelected(SelectedComponentFromSelectOrderVo profile) 
	{
		if(profile == null)
			return true;
		
		SelectedComponentFromSelectOrderVoCollection selectedComponents = form.getLocalContext().getSelectedComponents();
		
		if(selectedComponents == null || selectedComponents.size() == 0)
			return true;
		
		for(SelectedComponentFromSelectOrderVo selectedComponent : selectedComponents)
		{
			if(selectedComponent == null || selectedComponent.getParentInvestigationId() == null)
				continue;
			
			if(selectedComponent.getParentInvestigationId().equals(profile.getID()))
				return true;
		}
		
		return false;
	}

	//WDEV-16762
	private void removeRefusedComponentsFromSelectedComponents() 
	{
		SelectedComponentFromSelectOrderVoCollection selectedComponents = form.getLocalContext().getSelectedComponents();	
		
		if(selectedComponents != null)
		{
			for(int i = selectedComponents.size() - 1; i >= 0; i--)
			{
				SelectedComponentFromSelectOrderVo selectedComponent = selectedComponents.get(i);
				
				if(selectedComponent == null || SelectAndOrderComponentType.ORDERSET.equals(selectedComponent.getComponentType()))// 	WDEV-16762
					continue;
				
				if(componentIsInRefusedList(selectedComponent))
				{
					selectedComponents.remove(selectedComponent);
				}
			}
		}
		
		form.getLocalContext().setSelectedComponents(selectedComponents);
		
		SelectedComponentFromSelectOrderVoCollection selectedLinkedComponents = form.getLocalContext().getLinkedComponents();
		
		if(selectedLinkedComponents != null)
		{
			for(int i = selectedLinkedComponents.size() - 1; i >= 0; i--)
			{
				SelectedComponentFromSelectOrderVo selectedLinkedComponent = selectedLinkedComponents.get(i);
				
				if(selectedLinkedComponent == null || SelectAndOrderComponentType.ORDERSET.equals(selectedLinkedComponent.getComponentType()))// 	WDEV-16762
					continue;
				
				if(componentIsInRefusedList(selectedLinkedComponent))
				{
					selectedLinkedComponents.remove(selectedLinkedComponent);
				}
			}
		}
		
		form.getLocalContext().setLinkedComponents(selectedLinkedComponents);
		
		BreachedInvestigationsVoCollection breachedInvestigations = form.getLocalContext().getBreachedInvestigations();
		
		if(breachedInvestigations != null)
		{
			for(int i = breachedInvestigations.size() - 1; i >= 0; i--)
			{
				if(breachedInvestigations.get(i) == null)
					continue;
				
				if(breachedInvestigationIsInRefusedList(breachedInvestigations.get(i)))
				{
					breachedInvestigations.remove(breachedInvestigations.get(i));
				}
			}
		}
		
		form.getLocalContext().setBreachedInvestigations(breachedInvestigations);
	}

	//WDEV-16762
	private boolean breachedInvestigationIsInRefusedList(BreachedInvestigationsVo breachedInvestigationsVo) 
	{
		if(form.getGlobalContext().OCRR.getRefusedInvestigation() == null || form.getGlobalContext().OCRR.getRefusedInvestigation().size() == 0)
			return false;
		
		if(breachedInvestigationsVo == null)
			return false;
		
		for(InvestigationRefVo refusedInv : form.getGlobalContext().OCRR.getRefusedInvestigation())
		{
			if(refusedInv == null || refusedInv.getID_Investigation() == null)
				continue;
			
			if(refusedInv.getID_Investigation().equals(breachedInvestigationsVo.getInvestigationId()) || (refusedInv.getID_Investigation().equals(breachedInvestigationsVo.getParentId())))
				return true;
		}
		
		return false;
	}

	//WDEV-16762
	private boolean componentIsInRefusedList(SelectedComponentFromSelectOrderVo newComponent) 
	{
		if(form.getGlobalContext().OCRR.getRefusedInvestigation() == null || form.getGlobalContext().OCRR.getRefusedInvestigation().size() == 0)
			return false;
		
		if(newComponent == null || SelectAndOrderComponentType.ORDERSET.equals(newComponent.getComponentType()))// 	WDEV-16762
			return false;
		
		for(InvestigationRefVo refusedInv : form.getGlobalContext().OCRR.getRefusedInvestigation())
		{
			if(refusedInv == null || refusedInv.getID_Investigation() == null)
				continue;
			
			if(refusedInv.getID_Investigation().equals(newComponent.getID()) || (refusedInv.getID_Investigation().equals(newComponent.getParentInvestigationId())))
				return true;
		}
		
		return false;
	}

	//WDEV-16624
	private void removeFromBreachedInvestigationsList(SelectedComponentFromSelectOrderVo newComponent) 
	{
		if(newComponent == null)
			return;
		
		if(form.getLocalContext().getBreachedInvestigations() == null || form.getLocalContext().getBreachedInvestigations().size() == 0)
			return;
		
		if(SelectAndOrderComponentType.INVESTIGATION.equals(newComponent.getComponentType()))
		{
			removeComponentFromBreachedInvestigations(newComponent.getID());// 	WDEV-16762
		}
		else
		{
			if(newComponent.getAssociatedInvestigations() != null)
			{
				for(int i=0; i<newComponent.getAssociatedInvestigations().size(); i++)
				{
					InvestigationRefVo invId = newComponent.getAssociatedInvestigations().get(i);
					
					if(invId == null)
						continue;
					
					removeComponentFromBreachedInvestigations(invId.getID_Investigation());// 	WDEV-16762
				}
			}
		}
	}

	// 	WDEV-16762
	private void removeComponentFromBreachedInvestigations(Integer invId) 
	{
		if(invId == null)
			return;
		
		BreachedInvestigationsVoCollection breachedInvestigations = form.getLocalContext().getBreachedInvestigations();
		
		if(breachedInvestigations == null || breachedInvestigations.size() == 0)
			return;
		
		for(int i = breachedInvestigations.size() - 1; i >= 0; i--)
		{
			if(breachedInvestigations.get(i) == null || breachedInvestigations.get(i).getInvestigationId() == null)
				continue;
			
			if(invId.equals(breachedInvestigations.get(i).getInvestigationId()))
				breachedInvestigations.remove(breachedInvestigations.get(i));
		}
	}

	private void resetOrder() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedComponents(new SelectedComponentFromSelectOrderVoCollection());	
		form.getGlobalContext().OCRR.setGenderInvestigations(null);//WDEV-16762
		form.getGlobalContext().OCRR.setRefusedInvestigation(null);// 	WDEV-16762
		form.getLocalContext().setBreachedInvestigations(null);// 	WDEV-16762
		clearAnalyzedChildComponents();

		
		if (isTemplateNodeSelected())
			populateTemplateIfSelected();

		if (isSearchNodeSelected())
			new OrderEntryTemplatePopulation(form.lyrTemplates().tabSearch().dyngrdSearch(), form.getImages().OCRR.Investigation, form.getImages().OCRR.Profile, form.getImages().OCRR.OrderSet).populateSearch(form.getLocalContext().getLastSearchResults(), new SelectedComponentFromSelectOrderVoCollection(), new SelectedComponentFromSelectOrderVoCollection());

		if (isPreviewNodeSelected())
			populateMyOrderPreview();

		addRemoveOrderRelatedNodes();
		//WDEV-17035
		updateControlsState();
		

	}

	private void searchInvestigationsAndProfiles()
	{
		SelectedComponentFromSelectOrderVoCollection selection = form.getLocalContext().getSelectedComponents();
		if (selection == null)
			selection = new SelectedComponentFromSelectOrderVoCollection();
		SelectedComponentFromSelectOrderVoCollection linkedComponents = form.getLocalContext().getLinkedComponents();
		if (linkedComponents == null)
			linkedComponents = new SelectedComponentFromSelectOrderVoCollection();
		
		SelectedComponentFromSelectOrderVoCollection results = domain.listInvestigationsOrProfiles(null, form.lyrTemplates().tabSearch().txtTextName().getValue(), null, null, null, form.lyrTemplates().tabSearch().GrpCriteria().getValue().equals(GrpCriteriaEnumeration.rdoBegins), form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels(), form.getLocalContext().getContractLocations());
		form.getLocalContext().setLastSearchResults(results);
		new OrderEntryTemplatePopulation(form.lyrTemplates().tabSearch().dyngrdSearch(), form.getImages().OCRR.Investigation, form.getImages().OCRR.Profile, form.getImages().OCRR.OrderSet).populateSearch(results, selection, linkedComponents);
	}

	private void resetSelectedComponent() throws PresentationLogicException
	{
		//WDEV-17035 
		if (form.getLocalContext().getSelectedComponents() == null)
			return;
		Object value = null;
		if (form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().getSelectedNode() != null)
		{
			value = form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().getSelectedNode().getValue();
		}
		else if (previewNodeValue.equals(form.treDetails().getSelectedNode().getParent().getValue().toString()) || previewNodeValue.equals(form.treDetails().getSelectedNode().getParent().getParent().getValue().toString()))
		{
			value = form.treDetails().getSelectedNode().getValue();
		}
		//WDEV-17035 - end
		if (value != null && value instanceof SelectedComponentFromSelectOrderVo)
		{
			SelectedComponentFromSelectOrderVo component = (SelectedComponentFromSelectOrderVo) value;
			if (component.getComponentType().equals(SelectAndOrderComponentType.INVESTIGATION))
			{
				unselectComponent(component, true);
			}
			else if (component.getComponentType().equals(SelectAndOrderComponentType.PROFILE))
			{
				////WDEV-17035
				if (form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().getSelectedNode() != null)
				{	
					for (int x = 0; x < form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().getSelectedNode().getNodes().size(); x++)
					{
						TreeNode node = form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().getSelectedNode().getNodes().get(x);
						Object nodeValue = node.getValue();
						if (nodeValue != null && nodeValue instanceof SelectedComponentFromSelectOrderVo)
							unselectComponent((SelectedComponentFromSelectOrderVo) nodeValue, false);
					}
				}
				//WDEV-17035
				if (form.treDetails().getSelectedNode() != null)
				{
					for (int k = 0; k < form.treDetails().getSelectedNode().getNodes().size(); k++)
					{
						TreeNode node = form.treDetails().getSelectedNode().getNodes().get(k);
						Object nodeValue = node.getValue();
						if (nodeValue != null && nodeValue instanceof SelectedComponentFromSelectOrderVo)
							unselectComponent((SelectedComponentFromSelectOrderVo) nodeValue, false);
					}
				}
				////WDEV-17035-end
				unselectComponent(component, true);
			}

			populateMyOrderPreview();
			addRemoveOrderRelatedNodes();
		}
	}

	private void unselectComponent(SelectedComponentFromSelectOrderVo component, boolean markAsUnselected)
	{
		if (component == null)
			return;

		SelectedComponentFromSelectOrderVoCollection selection = form.getLocalContext().getSelectedComponents();
		
		if (selection.contains(component))
		{
			selection.remove(component);
			form.getLocalContext().setSelectedComponents(selection);			
		}
		
		checkIfTemplatesNeedUnchecked(selection, form.getLocalContext().getSelectedComponents()); //WDEV-16908
	}

	private void gotoMyOrder() throws PresentationLogicException
	{
		
		gotoMyOrder(true);
	}

	private void gotoMyOrder(boolean switchTabToItems) throws PresentationLogicException
	{
		populateMyOrderPreview(switchTabToItems);

		if (engine.getFormName().equals(form.getForms().OCRR.SelectAndOrderDialog))
		{
			if ((ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("Standard") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) && engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.MyOrder)) //WDEV-11881
			{
				engine.close(DialogResult.OK);
				return;
			}
		}

		if (form.getForms().OCRR.MyOrder.equals(engine.getPreviosFormName()) || form.getForms().OCRR.MyOrderDialog.equals(engine.getPreviosFormName()))
		{
			engine.close(DialogResult.OK);
			return;
		}
		
		
		form.getGlobalContext().OCRR.setRefusedInvestigation(null);//WDEV-16762
		
		if((ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("Standard") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) && engine.isDialog()) //WDEV-11881
			engine.open(form.getForms().OCRR.MyOrderDialog);
		else
			engine.open(form.getForms().OCRR.MyOrder);	
	}

	private String	searchNodeValue			= "search";
	private String	previewNodeValue		= "preview";
	private String	placeNodeValue			= "place";

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().OCRR.GenderYesNoDialog) || formName.equals(form.getForms().OCRR.YesNoDialogWithReason) || (formName.equals(form.getForms().OCRR.MyOrderInformations) && result != DialogResult.OK && result != DialogResult.CANCEL) )//WDEV-16762
		{
			if (result != DialogResult.YES)
			{
				if(form.getLocalContext().getSelectedCellIsNotNull())
					form.getLocalContext().getSelectedCell().setValue(Boolean.FALSE);
			}
				
			DynamicGrid grid = form.getLocalContext().getSelectedGrid();
			int columnIndex = grid.getColumns().indexOf(form.getLocalContext().getSelectedCell().getColumn());
			DynamicGridColumn valueColumn = grid.getColumns().get(columnIndex + 2);
			Object value = form.getLocalContext().getSelectedCell().getRow().getCells().get(valueColumn).getIdentifier();

			if (grid.equals(form.lyrTemplates().tabSearch().dyngrdSearch()))
			{
				if (value != null && value instanceof SelectedComponentFromSelectOrderVo)
				{
					SelectedComponentFromSelectOrderVo component = (SelectedComponentFromSelectOrderVo) value;
					
					if(DialogResult.YES.equals(result))//WDEV-16624
					{
						component.setReOrderReason(form.getGlobalContext().OCRR.getReasonForReOrder());
					}
					
					doSelection(form.getLocalContext().getSelectedCell(), component);
				}

				populateSearch();
				addRemoveOrderRelatedNodes();
			}
			else if (grid.equals(form.lyrTemplates().tabTemplate().dyngrdTemplate()))
			{
				if (value != null && value instanceof OrderEntryTemplateComponentShortVo)
				{
					String reorderreason = null;
					
					if(DialogResult.YES.equals(result))//WDEV-16624
					{
						reorderreason = form.getGlobalContext().OCRR.getReasonForReOrder();
					}
					
					markUnmarkComponent((OrderEntryTemplateComponentShortVo) value, ((Boolean) form.getLocalContext().getSelectedCell().getValue()).booleanValue(), reorderreason);//WDEV-16624
				}
				
				checkIfTemplatesNeedUnchecked(form.getLocalContext().getSelectedComponents(), form.getLocalContext().getLinkedComponents()); //WDEV-16908
				populateTemplateIfSelected();
				addRemoveOrderRelatedNodes();
			}
			
			form.getGlobalContext().Core.setYesNoDialogLaunchedFromSelf(null);
			form.getGlobalContext().Core.setYesNoDialogMessage(null);
			form.getGlobalContext().Core.setSecondYesNoDialogMessage(null);
			form.getGlobalContext().OCRR.setYesNoDialogWithReasonMessage(null);
			form.getGlobalContext().OCRR.setReasonForReOrder(null);//WDEV-16624
			form.getGlobalContext().OCRR.SelectAndOrder.setLaunchYesNoGenderDialog(false);
			form.getGlobalContext().OCRR.SelectAndOrder.setLaunchYesNoReOrderDialog(false);
			
			form.getGlobalContext().OCRR.setGenderInvestigations(null);//WDEV-16762
		}
		else if (formName.equals(form.getForms().Core.CareContextSelectDialog))
		{
			if(result != null)
			{
				if(result.equals(DialogResult.CANCEL))
				{
					disableScreen();
				}
			}
		}
		else if (formName.equals(form.getForms().OCRR.MyOrderDialog))
		{
			if(engine.isDialog())
			{
				//TODO when FWUI-1155 has been resolved remove this
				form.getGlobalContext().OCRR.setMyOrderComponents(null);
				form.getGlobalContext().OCRR.setMyOrderInformations(null);
				form.getGlobalContext().OCRR.setMyOrderQuestions(null);
				form.getGlobalContext().OCRR.setQuestionTooltips(null);
			
				engine.close(result);
			}
		}
	}
	
	private void disableScreen() 
	{
		form.treDetails().setEnabled(false);
		form.getContextMenus().hideAllOCRRSelectAndOrderMenuItems();
		form.lyrTemplates().tabSearch().btnSearch().setEnabled(false);
		form.lyrTemplates().tabSearch().txtTextName().setEnabled(false);
		form.lyrTemplates().tabSearch().GrpCriteria().setEnabled(false);
	}

	private void displayPreview() throws PresentationLogicException
	{
		OcsQASessionVo voOcsQA = form.getGlobalContext().OCRR.getMyOrderQuestions();
		if(voOcsQA == null)
			voOcsQA = new OcsQASessionVo();

		SelectedComponentFromSelectOrderVoCollection selectedComponents = form.getLocalContext().getSelectedComponents();
		
		Integer[] investigationIdCollection = getInvestigationIdCollection(selectedComponents);
		InvestigationOcsQuestionsVoCollection voColl = domain.listInvestigationOcsQuestions(investigationIdCollection);
		CategoryQuestionShortVoCollection categoryConfigQuestions = domain.listCategoryQuestions(getCategories(selectedComponents));
		ServiceQuestionShortVoCollection serviceConfigQuestions = domain.listServiceQuestionsByServiceIds(getSeviceIds(investigationIdCollection));

		MyOrderQuestionsPopulation questionsPopulation = getMyOrderQuestionPopulationHelperFactory();
		voOcsQA = questionsPopulation.setOcsQASessionAnswers(voOcsQA, categoryConfigQuestions, serviceConfigQuestions, voColl);
		questionsPopulation.populate(voOcsQA, true);

		form.getGlobalContext().OCRR.setMyOrderQuestions(voOcsQA);
	}

	private MyOrderQuestionsPopulation getMyOrderQuestionPopulationHelperFactory()
	{
		PatientShort voPatShort = form.getGlobalContext().Core.getPatientShort();
		Integer age = voPatShort != null ? voPatShort.calculateAge() : null;
		Sex sex = voPatShort != null ? voPatShort.getSex() : null;

		return new MyOrderQuestionsPopulation(form.lyrTemplates().tabPreview().lyrPreview().tabQuestions().dynGrdQuestions(), form.getImages().OCRR.Question, form.getImages().OCRR.Information, form.getImages().Core.MandatoryQuestion, form.getImages().OCRR.Investigation, age, sex);
	}
	
	private CategoryCollection getCategories(SelectedComponentFromSelectOrderVoCollection voColl)
	{
		CategoryCollection coll = new CategoryCollection();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if(voColl.get(i).getCategoryIsNotNull())
				coll.add(voColl.get(i).getCategory());
		}
		
		return coll;
	}

	//WDEV-2983
	private Integer[] getSeviceIds(Integer[] investigationIdCollection)
	{
		Integer[] serviceIdCollection = domain.listServiceIdCollection(investigationIdCollection);
		return serviceIdCollection;
	}

	private Integer[] getInvestigationIdCollection(SelectedComponentFromSelectOrderVoCollection voColl)
	{
		List<Integer> ids = new ArrayList<Integer>();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			//WDEV-3306
			if(voColl.get(i).getComponentTypeIsNotNull() && voColl.get(i).getComponentType().equals(SelectAndOrderComponentType.PROFILE))
			{
				InvestigationSelectOrderVo voInvSelOrder = domain.getChildComponentsForInvestigationOrProfile(voColl.get(i).getID(),form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels());
				for (int j = 0; voInvSelOrder != null && voInvSelOrder.getAssocInvestigationsIsNotNull() && j < voInvSelOrder.getAssocInvestigations().size(); j++)
				{
					//WDEV-16762
					if(voInvSelOrder.getAssocInvestigations().get(j) == null || voInvSelOrder.getAssocInvestigations().get(j).getID_Investigation() == null)
						continue;
					
					//WDEV-16762
					if(!investigationIdIsInRefusedList(voInvSelOrder.getAssocInvestigations().get(j).getID_Investigation()))
					{
						ids.add(voInvSelOrder.getAssocInvestigations().get(j).getID_Investigation());
					}
				}
			}
			else
			{
				if(voColl.get(i).getIDIsNotNull() && voColl.get(i).getParentInvestigationId() == null && (voColl.get(i).getComponentTypeIsNotNull() && !voColl.get(i).getComponentType().equals(SelectAndOrderComponentType.ORDERSET))) //WDEV-11408
					ids.add(voColl.get(i).getID());
			}
		}
		
		if (ids.size() > 0)
		{
			Integer[] intValues = new Integer[ids.size()];
			ids.toArray(intValues);
			return intValues;
		}
		
		return null;
	}

	//WDEV-16762
	private boolean investigationIdIsInRefusedList(Integer investigationId) 
	{
		if(form.getGlobalContext().OCRR.getRefusedInvestigation() == null || form.getGlobalContext().OCRR.getRefusedInvestigation().size() == 0)
			return false;
		
		if(investigationId == null)
			return false;
		
		for(InvestigationRefVo refusedInv : form.getGlobalContext().OCRR.getRefusedInvestigation())
		{
			if(refusedInv == null || refusedInv.getID_Investigation() == null)
				continue;
			
			if(refusedInv.getID_Investigation().equals(investigationId))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onBtnPlaceOrderClick() throws PresentationLogicException {
		gotoMyOrder();		
	}

	@Override
	protected void onBtnTemplatePlaceOrderClick() throws PresentationLogicException {
		gotoMyOrder();
		
	}

	//WDEV-14912
	class MyOrderComponentComparator implements Comparator<SelectedComponentFromSelectOrderVo>
	{
		private int order = 1;
		public MyOrderComponentComparator()
		{
			order = 1;
		}
		public MyOrderComponentComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		public int compare(SelectedComponentFromSelectOrderVo o1, SelectedComponentFromSelectOrderVo o2)
		{
			if(o1 != null && o1.getTextIsNotNull() && o2 != null && o2.getTextIsNotNull())
					return order*o1.getText().compareToIgnoreCase(o2.getText());
	
			if (o1 == null || !o1.getTextIsNotNull())
				return -1 * order;
			
			if (o2 == null || !o2.getTextIsNotNull())
				return order;
			
			return 0;
		}	
	}

	private String getComponentInvestigationTooltip(InvestigationSelectOrderVo investigation)
	{
		if (investigation == null)
			return "";
		
		StringBuilder tooltip = new StringBuilder();
		
		tooltip.append(investigation.getInvestigationIndex().getDescription());

		if (investigation.getTurnaroundMeasureIsNotNull() && investigation.getExpectedTurnaroundIsNotNull())
		{
			tooltip.append(" - Expected Turn Around: ");
			tooltip.append(investigation.getExpectedTurnaround().toString());
			tooltip.append(" ").append(investigation.getTurnaroundMeasure().getText());
		}
		else if (investigation.getProviderServiceIsNotNull() && investigation.getProviderService().getLocationServiceIsNotNull() && investigation.getProviderService().getLocationService().getServiceIsNotNull() && investigation.getProviderService().getLocationService().getService().getExpectedTurnaround() != null)
		{
			tooltip.append(" - Expected Turn Around: ");
			tooltip.append(investigation.getProviderService().getLocationService().getService().getExpectedTurnaround().toString());
			tooltip.append(" ").append(investigation.getProviderService().getLocationService().getService().getTurnaroundMeasure().getText());
		}
		
		// Amend '&' characters with space not to cause problems in tool tip boxes
		// as these are HTML and '&' is a special character
		for (int i = tooltip.length() - 1; i >= 0; i--)
		{
			if (tooltip.charAt(i) == '&' && i < tooltip.length() - 1 && tooltip.charAt(i + 1) != ' ')
				tooltip.insert(i, " ");
		}
		
		return tooltip.toString();
	}

	private String getComponentInvestigationTooltip(InvestShortVo investigation)
	{
		if (investigation == null)
			return "";
		
		StringBuilder tooltip = new StringBuilder();
		
		tooltip.append(investigation.getInvestigationIndex().getDescription());

		if (investigation.getTurnaroundMeasureIsNotNull() && investigation.getExpectedTurnaroundIsNotNull())
		{
			tooltip.append(" - Expected Turn Around: ");
			tooltip.append(investigation.getExpectedTurnaround().toString());
			tooltip.append(" ").append(investigation.getTurnaroundMeasure().getText());
		}
		else if (investigation.getProviderServiceIsNotNull() && investigation.getProviderService().getLocationServiceIsNotNull() && investigation.getProviderService().getLocationService().getServiceIsNotNull() && investigation.getProviderService().getLocationService().getService().getExpectedTurnaround() != null)
		{
			tooltip.append(" - Expected Turn Around: ");
			tooltip.append(investigation.getProviderService().getLocationService().getService().getExpectedTurnaround().toString());
			tooltip.append(" ").append(investigation.getProviderService().getLocationService().getService().getTurnaroundMeasure().getText());
		}
		
		// Amend '&' characters with space not to cause problems in tool tip boxes
		// as these are HTML and '&' is a special character
		for (int i = tooltip.length() - 1; i >= 0; i--)
		{
			if (tooltip.charAt(i) == '&' && i < tooltip.length() - 1 && tooltip.charAt(i + 1) != ' ')
				tooltip.insert(i, " ");
		}
		
		return tooltip.toString();
	}
	//WDEV-17035
	private void updateControlsState()
	{
		form.lyrTemplates().tabPreview().btnContinue().setEnabled(!selectionIsEmpty());
		form.getContextMenus().getOCRRSelectAndOrderREMOVEItem().setVisible((form.treDetails().getSelectedNode() != null && previewNodeValue.equals(form.treDetails().getSelectedNode().getValue().toString()) || (form.treDetails().getSelectedNode() != null && form.treDetails().getSelectedNode().getValue() instanceof SelectedComponentFromSelectOrderVo))|| form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().getSelectedNode() != null);
		if (form.getContextMenus().getOCRRSelectAndOrderREMOVEItem().isVisible())
		{	
			form.getContextMenus().getOCRRSelectAndOrderREMOVEItem().setEnabled(Boolean.TRUE.equals(form.lyrTemplates().tabPreview().lyrPreview().tabItems().trePreview().getSelectedNode() != null || form.treDetails().getSelectedNode().getValue() instanceof SelectedComponentFromSelectOrderVo)); // != null && form.treDetails().getSelectedNode().getParent() != null && previewNodeValue.equals(form.treDetails().getSelectedNode().getParent().getValue().toString())));
			
		}
	}
	
	
}
