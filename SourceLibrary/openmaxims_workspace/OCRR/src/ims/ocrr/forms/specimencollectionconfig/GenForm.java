//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.specimencollectionconfig;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrSpecColConfigLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabSpecCollectionConfigContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSpecimenCollectionRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSpecimenCollectionRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolTimeOpened()
				{
					super.row.showOpened(0);
				}
				public ims.ocrr.vo.lookups.SpecimenCollectionTime getcolTime()
				{
					return (ims.ocrr.vo.lookups.SpecimenCollectionTime)super.row.get(0);
				}
				public void setcolTime(ims.ocrr.vo.lookups.SpecimenCollectionTime value)
				{
					super.row.set(0, value);
				}
				public void setCellcolTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolMondayReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolMondayReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolMondayOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getcolMonday()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setcolMonday(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellcolMondayTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolTuesdayReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolTuesdayReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolTuesdayOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getcolTuesday()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setcolTuesday(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellcolTuesdayTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolWednesdayReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolWednesdayReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolWednesdayOpened()
				{
					super.row.showOpened(3);
				}
				public boolean getcolWednesday()
				{
					return ((Boolean)super.row.get(3)).booleanValue();
				}
				public void setcolWednesday(boolean value)
				{
					super.row.set(3, new Boolean(value));
				}
				public void setCellcolWednesdayTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolThursdayReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolThursdayReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolThursdayOpened()
				{
					super.row.showOpened(4);
				}
				public boolean getcolThursday()
				{
					return ((Boolean)super.row.get(4)).booleanValue();
				}
				public void setcolThursday(boolean value)
				{
					super.row.set(4, new Boolean(value));
				}
				public void setCellcolThursdayTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolFridayReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolFridayReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolFridayOpened()
				{
					super.row.showOpened(5);
				}
				public boolean getcolFriday()
				{
					return ((Boolean)super.row.get(5)).booleanValue();
				}
				public void setcolFriday(boolean value)
				{
					super.row.set(5, new Boolean(value));
				}
				public void setCellcolFridayTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setcolSaturdayReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean iscolSaturdayReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showcolSaturdayOpened()
				{
					super.row.showOpened(6);
				}
				public boolean getcolSaturday()
				{
					return ((Boolean)super.row.get(6)).booleanValue();
				}
				public void setcolSaturday(boolean value)
				{
					super.row.set(6, new Boolean(value));
				}
				public void setCellcolSaturdayTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setcolSundayReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean iscolSundayReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showcolSundayOpened()
				{
					super.row.showOpened(7);
				}
				public boolean getcolSunday()
				{
					return ((Boolean)super.row.get(7)).booleanValue();
				}
				public void setcolSunday(boolean value)
				{
					super.row.set(7, new Boolean(value));
				}
				public void setCellcolSundayTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setcolExceptionDaysReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean iscolExceptionDaysReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showcolExceptionDaysOpened()
				{
					super.row.showOpened(8);
				}
				public boolean getcolExceptionDays()
				{
					return ((Boolean)super.row.get(8)).booleanValue();
				}
				public void setcolExceptionDays(boolean value)
				{
					super.row.set(8, new Boolean(value));
				}
				public void setCellcolExceptionDaysTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo getValue()
				{
					return (ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSpecimenCollectionRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSpecimenCollectionRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSpecimenCollectionRow get(int index)
				{
					return new grdSpecimenCollectionRow(super.collection.get(index));
				}
				public grdSpecimenCollectionRow newRow()
				{
					return new grdSpecimenCollectionRow(super.collection.newRow());
				}
				public grdSpecimenCollectionRow newRow(boolean autoSelect)
				{
					return new grdSpecimenCollectionRow(super.collection.newRow(autoSelect));
				}
				public grdSpecimenCollectionRow newRowAt(int index)
				{
					return new grdSpecimenCollectionRow(super.collection.newRowAt(index));
				}
				public grdSpecimenCollectionRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSpecimenCollectionRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSpecimenCollectionGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.ocrr.vo.SpecimenCollectionListConfigDetailsVoCollection getValues()
				{
					ims.ocrr.vo.SpecimenCollectionListConfigDetailsVoCollection listOfValues = new ims.ocrr.vo.SpecimenCollectionListConfigDetailsVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo getValue()
				{
					return (ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo value)
				{
					super.grid.setValue(value);
				}
				public grdSpecimenCollectionRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSpecimenCollectionRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSpecimenCollectionRowCollection getRows()
				{
					return new grdSpecimenCollectionRowCollection(super.grid.getRows());
				}
				public grdSpecimenCollectionRow getRowByValue(ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSpecimenCollectionRow(row);
				}
				public void setcolTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolMondayHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolMondayHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolTuesdayHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolTuesdayHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolWednesdayHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolWednesdayHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolThursdayHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolThursdayHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setcolFridayHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolFridayHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setcolSaturdayHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getcolSaturdayHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setcolSundayHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getcolSundayHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setcolExceptionDaysHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getcolExceptionDaysHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Type: ", new Integer(1), null, new Integer(0)}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 112, 808, 416, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSpecimenCollectionTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(40), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSpecimenCollectionTemp);
				grdSpecimenCollectionGrid grdSpecimenCollection = (grdSpecimenCollectionGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpecimenCollectionGrid.class, m_grdSpecimenCollectionTemp);
				grdSpecimenCollection.addStringColumn("Time", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSpecimenCollection.addBoolColumn("Monday", 1, 1, 80, false, false, 0, true);
				grdSpecimenCollection.addBoolColumn("Tuesday", 1, 1, 80, false, false, 0, true);
				grdSpecimenCollection.addBoolColumn("Wednesday", 1, 1, 80, false, false, 0, true);
				grdSpecimenCollection.addBoolColumn("Thursday", 1, 1, 80, false, false, 0, true);
				grdSpecimenCollection.addBoolColumn("Friday", 1, 1, 80, false, false, 0, true);
				grdSpecimenCollection.addBoolColumn("Saturday", 1, 1, 80, false, false, 0, true);
				grdSpecimenCollection.addBoolColumn("Sunday", 1, 1, 80, false, false, 0, true);
				grdSpecimenCollection.addBoolColumn("Exception Days/\nPublic Holidays", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdSpecimenCollection);
		
				// Tree Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 72, 8, 240, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
			}

			public grdSpecimenCollectionGrid grdSpecimenCollection()
			{
				return (grdSpecimenCollectionGrid)super.getGrid(0);
			}
			public TreeView treTypes()
			{
				return (TreeView)super.getControl(2);
			}
		}
		public static class tabExceptionDaysContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdExceptionDatesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdExceptionDatesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolExceptionDatesReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolExceptionDatesReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolExceptionDatesOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Date getcolExceptionDates()
				{
					return (ims.framework.utils.Date)super.row.get(0);
				}
				public void setcolExceptionDates(ims.framework.utils.Date value)
				{
					super.row.set(0, value);
				}
				public void setCellcolExceptionDatesTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.core.vo.PublicHolidaysVo getValue()
				{
					return (ims.core.vo.PublicHolidaysVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PublicHolidaysVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdExceptionDatesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdExceptionDatesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdExceptionDatesRow get(int index)
				{
					return new grdExceptionDatesRow(super.collection.get(index));
				}
				public grdExceptionDatesRow newRow()
				{
					return new grdExceptionDatesRow(super.collection.newRow());
				}
				public grdExceptionDatesRow newRow(boolean autoSelect)
				{
					return new grdExceptionDatesRow(super.collection.newRow(autoSelect));
				}
				public grdExceptionDatesRow newRowAt(int index)
				{
					return new grdExceptionDatesRow(super.collection.newRowAt(index));
				}
				public grdExceptionDatesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdExceptionDatesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdExceptionDatesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public ims.core.vo.PublicHolidaysVoCollection getValues()
				{
					ims.core.vo.PublicHolidaysVoCollection listOfValues = new ims.core.vo.PublicHolidaysVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PublicHolidaysVo getValue()
				{
					return (ims.core.vo.PublicHolidaysVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PublicHolidaysVo value)
				{
					super.grid.setValue(value);
				}
				public grdExceptionDatesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdExceptionDatesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdExceptionDatesRowCollection getRows()
				{
					return new grdExceptionDatesRowCollection(super.grid.getRows());
				}
				public grdExceptionDatesRow getRowByValue(ims.core.vo.PublicHolidaysVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdExceptionDatesRow(row);
				}
				public void setcolExceptionDatesHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolExceptionDatesHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 96, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 96, 472, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 472, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 440, 160, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 160, 408, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdExceptionDatesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdExceptionDatesTemp);
				grdExceptionDatesGrid grdExceptionDates = (grdExceptionDatesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdExceptionDatesGrid.class, m_grdExceptionDatesTemp);
				grdExceptionDates.addDateColumn("Exception Dates", 0, 0, -1, true, true, null, false, 0, true);
				super.addGrid(grdExceptionDates);
			}

			public Button btnCancelDate()
			{
				return (Button)super.getControl(0);
			}
			public Button btnUpdateDate()
			{
				return (Button)super.getControl(1);
			}
			public Button btnSaveDate()
			{
				return (Button)super.getControl(2);
			}
			public Button btnNewDate()
			{
				return (Button)super.getControl(3);
			}
			public DateControl dteExceptionDate()
			{
				return (DateControl)super.getControl(4);
			}
			public grdExceptionDatesGrid grdExceptionDates()
			{
				return (grdExceptionDatesGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 568, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSpecCollectionConfig = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen Collection Configuration", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSpecCollectionConfigContainer m_tabSpecCollectionConfigContainer = (tabSpecCollectionConfigContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecCollectionConfigContainer.class, m_tabSpecCollectionConfig, factory);
			super.addContainer(m_tabSpecCollectionConfig, m_tabSpecCollectionConfigContainer);
			ims.framework.utils.SizeInfo m_tabSpecCollectionConfigDesignSize = new ims.framework.utils.SizeInfo(832, 568);
			ims.framework.utils.SizeInfo m_tabSpecCollectionConfigRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper10.getWidth(), anchoringHelper10.getHeight());
			m_tabSpecCollectionConfigContainer.setContext(form, appForm, m_tabSpecCollectionConfig, loader, startControlID, m_tabSpecCollectionConfigDesignSize, m_tabSpecCollectionConfigRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 568, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabExceptionDays = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Exception Days", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabExceptionDaysContainer m_tabExceptionDaysContainer = (tabExceptionDaysContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabExceptionDaysContainer.class, m_tabExceptionDays, factory);
			super.addContainer(m_tabExceptionDays, m_tabExceptionDaysContainer);
			ims.framework.utils.SizeInfo m_tabExceptionDaysDesignSize = new ims.framework.utils.SizeInfo(832, 568);
			ims.framework.utils.SizeInfo m_tabExceptionDaysRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper11.getWidth(), anchoringHelper11.getHeight());
			m_tabExceptionDaysContainer.setContext(form, appForm, m_tabExceptionDays, loader, startControlID, m_tabExceptionDaysDesignSize, m_tabExceptionDaysRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabSpecCollectionConfig().setVisible(false);
			tabExceptionDays().setVisible(false);
		}
		public void settabSpecCollectionConfigEnabled(boolean value)
		{
			tabSpecCollectionConfig().setEnabled(value);
		}
		public void settabExceptionDaysEnabled(boolean value)
		{
			tabExceptionDays().setEnabled(value);
		}
		public void showtabSpecCollectionConfig()
		{
			tabExceptionDays().setVisible(false);
			tabSpecCollectionConfig().setVisible(true);
		}
		public void showtabExceptionDays()
		{
			tabSpecCollectionConfig().setVisible(false);
			tabExceptionDays().setVisible(true);
		}

		public tabSpecCollectionConfigContainer tabSpecCollectionConfig()
		{
			return (tabSpecCollectionConfigContainer)super.layers.get(0);
		}
		public tabExceptionDaysContainer tabExceptionDays()
		{
			return (tabExceptionDaysContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrSpecColConfigLayer m_lyrSpecColConfigLayer = (lyrSpecColConfigLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSpecColConfigLayer.class, this, factory);
		super.addLayer(m_lyrSpecColConfigLayer);
		m_lyrSpecColConfigLayer.setContext(form, appForm, control, loader, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 766, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 680, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}


	public lyrSpecColConfigLayer lyrSpecColConfig()
	{
		return (lyrSpecColConfigLayer)super.getLayer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(2);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_voSpecimenCollectionListConfig = new ims.framework.ContextVariable("voSpecimenCollectionListConfig", prefix + "_lv_OCRR.SpecimenCollectionConfig.__internal_x_context__voSpecimenCollectionListConfig_" + componentIdentifier + "");
			cxl_voCollPublicHoliday = new ims.framework.ContextVariable("voCollPublicHoliday", prefix + "_lv_OCRR.SpecimenCollectionConfig.__internal_x_context__voCollPublicHoliday_" + componentIdentifier + "");
			cxl_voPublicHoliday = new ims.framework.ContextVariable("voPublicHoliday", prefix + "_lv_OCRR.SpecimenCollectionConfig.__internal_x_context__voPublicHoliday_" + componentIdentifier + "");
		}
		
		public boolean getvoSpecimenCollectionListConfigIsNotNull()
		{
			return !cxl_voSpecimenCollectionListConfig.getValueIsNull(context);
		}
		public ims.ocrr.vo.SpecimenCollectionListConfigVo getvoSpecimenCollectionListConfig()
		{
			return (ims.ocrr.vo.SpecimenCollectionListConfigVo)cxl_voSpecimenCollectionListConfig.getValue(context);
		}
		public void setvoSpecimenCollectionListConfig(ims.ocrr.vo.SpecimenCollectionListConfigVo value)
		{
			cxl_voSpecimenCollectionListConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voSpecimenCollectionListConfig = null;
		public boolean getvoCollPublicHolidayIsNotNull()
		{
			return !cxl_voCollPublicHoliday.getValueIsNull(context);
		}
		public ims.core.vo.PublicHolidaysVoCollection getvoCollPublicHoliday()
		{
			return (ims.core.vo.PublicHolidaysVoCollection)cxl_voCollPublicHoliday.getValue(context);
		}
		public void setvoCollPublicHoliday(ims.core.vo.PublicHolidaysVoCollection value)
		{
			cxl_voCollPublicHoliday.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voCollPublicHoliday = null;
		public boolean getvoPublicHolidayIsNotNull()
		{
			return !cxl_voPublicHoliday.getValueIsNull(context);
		}
		public ims.core.vo.PublicHolidaysVo getvoPublicHoliday()
		{
			return (ims.core.vo.PublicHolidaysVo)cxl_voPublicHoliday.getValue(context);
		}
		public void setvoPublicHoliday(ims.core.vo.PublicHolidaysVo value)
		{
			cxl_voPublicHoliday.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voPublicHoliday = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[75];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.SpecimenCollectionConfig.__internal_x_context__voSpecimenCollectionListConfig_" + componentIdentifier, "BO-1061100015-ID", "ID_SpecimenCollectionListConfig");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.SpecimenCollectionConfig.__internal_x_context__voSpecimenCollectionListConfig_" + componentIdentifier, "BO-1061100015-LISTTYPE", "ListType");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.SpecimenCollectionConfig.__internal_x_context__voPublicHoliday_" + componentIdentifier, "BO-1028100017-ID", "ID_PublicHolidays");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.SpecimenCollectionConfig.__internal_x_context__voPublicHoliday_" + componentIdentifier, "BO-1028100017-DATE", "Date");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
