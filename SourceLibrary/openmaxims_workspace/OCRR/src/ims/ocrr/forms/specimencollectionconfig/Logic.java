//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.45 build 2259.24726)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.specimencollectionconfig;

import java.util.ArrayList;
import java.util.List;

import ims.ocrr.forms.specimencollectionconfig.GenForm;
import ims.ocrr.forms.specimencollectionconfig.GenForm.lyrSpecColConfigLayer.tabExceptionDaysContainer.grdExceptionDatesRow;
import ims.ocrr.forms.specimencollectionconfig.GenForm.lyrSpecColConfigLayer.tabSpecCollectionConfigContainer.grdSpecimenCollectionRow;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.PublicHolidaysVo;
import ims.core.vo.PublicHolidaysVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.LayerBridge;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo;
import ims.ocrr.vo.SpecimenCollectionListConfigDetailsVoCollection;
import ims.ocrr.vo.SpecimenCollectionListConfigVo;
import ims.ocrr.vo.lookups.DayOfWeek;
import ims.ocrr.vo.lookups.LookupHelper;
import ims.ocrr.vo.lookups.SpecimenCollectionMethod;
import ims.ocrr.vo.lookups.SpecimenCollectionMethodCollection;
import ims.ocrr.vo.lookups.SpecimenCollectionTime;
import ims.ocrr.vo.lookups.SpecimenCollectionTimeCollection;

public class Logic extends BaseLogic
{
	/**
	 * 
	 */
	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	private void initialize()
	{
		prePopulateListTypeTree();
	}

	private void prePopulateListTypeTree()
	{
		SpecimenCollectionMethodCollection collMethods = LookupHelper.getSpecimenCollectionMethod(domain.getLookupService());
		ims.framework.cn.data.TreeNode[] parentNodes = collMethods.getRootNodes();
		for(int i=0;i<parentNodes.length;i++)
		{
			ims.framework.cn.data.TreeNode parentNode = parentNodes[i];
			TreeNode ctrlNode = form.lyrSpecColConfig().tabSpecCollectionConfig().treTypes().getNodes().add(parentNode,  ((SpecimenCollectionMethod)parentNode).getText());
			for(int p=0;p<parentNode.getChildren().length;p++)
			{
				ims.framework.cn.data.TreeNode childNode = parentNode.getChildren()[p];
				ctrlNode.getNodes().add(childNode,  ((SpecimenCollectionMethod)childNode).getText());	
			}
			ctrlNode.setExpanded(true);
		}
	}

	private void open()
	{
		form.btnNew().setVisible(false);
		form.btnNew().setEnabled(false);

		form.btnUpdate().setVisible(false);
		form.btnUpdate().setEnabled(false);
		form.btnSave().setVisible(false);
		form.btnCancel().setVisible(false);
		form.setMode(FormMode.VIEW);
		form.lyrSpecColConfig().tabExceptionDays().grdExceptionDates().setEnabled(true);
		clearScreen();
		form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().setEnabled(false);
		populateExceptionDatesGrid();

		populateSpecimenCollectionGrid(getTreeTypesCheckBoxSelectedValue());
	}

	private SpecimenCollectionMethod getTreeTypesCheckBoxSelectedValue()
	{
		for (int i = 0; i < form.lyrSpecColConfig().tabSpecCollectionConfig().treTypes().getNodes().size(); i++)
		{
			TreeNode node = form.lyrSpecColConfig().tabSpecCollectionConfig().treTypes().getNodes().get(i);
			if (node.isChecked())
				return (SpecimenCollectionMethod) node.getValue();
			for (int p = 0; p < node.getNodes().size(); p++)
			{
				if (node.getNodes().get(p).isChecked())
					return (SpecimenCollectionMethod) node.getNodes().get(p).getValue();
			}
		}

		return null;

	}

	private void prepopulateSpecimenGrid()
	{
		SpecimenCollectionTimeCollection collCollectionTime = LookupHelper.getSpecimenCollectionTime(domain.getLookupService());
		form.lyrSpecColConfig().tabSpecCollectionConfig().grdSpecimenCollection().getRows().clear();
		GenForm.lyrSpecColConfigLayer.tabSpecCollectionConfigContainer.grdSpecimenCollectionRow row;
		SpecimenCollectionTime collectionTime;

		for (int i = 0; i < collCollectionTime.size(); i++)
		{
			collectionTime = collCollectionTime.get(i);
			row = form.lyrSpecColConfig().tabSpecCollectionConfig().grdSpecimenCollection().getRows().newRow();
			row.setcolTime(collectionTime);
		}
	}

	private void populateExceptionDatesGrid()
	{
		PublicHolidaysVoCollection collVoPubHoliday = domain.getPublicHolidays();
		form.getLocalContext().setvoCollPublicHoliday(collVoPubHoliday);
		if (collVoPubHoliday != null && collVoPubHoliday.size() > 0)
		{
			form.lyrSpecColConfig().tabExceptionDays().grdExceptionDates().getRows().clear();
			for (int i = 0; i < collVoPubHoliday.size(); i++)
			{
				grdExceptionDatesRow row = form.lyrSpecColConfig().tabExceptionDays().grdExceptionDates().getRows().newRow();
				row.setcolExceptionDates(collVoPubHoliday.get(i).getDate());
				row.setValue(collVoPubHoliday.get(i));
			}
		}
	}

	private void clearScreen()
	{
		form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().setValue(null);
		form.lyrSpecColConfig().tabSpecCollectionConfig().grdSpecimenCollection().getRows().clear();
		form.lyrSpecColConfig().tabExceptionDays().grdExceptionDates().getRows().clear();
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (getTreeTypesCheckBoxSelectedValue() != null)
		{
			form.btnNew().setEnabled(false);
			form.btnUpdate().setEnabled(false);

			form.btnSave().setVisible(true);
			form.btnCancel().setVisible(true);

			form.btnSave().setEnabled(true);
			form.btnCancel().setEnabled(true);
			form.setMode(FormMode.EDIT);
		}
		else
			engine.showMessage("No list type has been selected");

	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnNew().setEnabled(false);
		form.btnUpdate().setEnabled(false);

		form.btnSave().setVisible(true);
		form.btnCancel().setVisible(true);

		form.btnSave().setEnabled(true);
		form.btnCancel().setEnabled(true);
		
		//form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().;
		
		form.setMode(FormMode.EDIT);
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		SpecimenCollectionMethod method = getTreeTypesCheckBoxSelectedValue();
		if (method != null)
		{
			SpecimenCollectionListConfigVo voSpecimenCollectionListConfig = form.getLocalContext().getvoSpecimenCollectionListConfig();
			if (voSpecimenCollectionListConfig == null)
			{
				voSpecimenCollectionListConfig = new SpecimenCollectionListConfigVo();
				voSpecimenCollectionListConfig.setListType(method);
			}

			voSpecimenCollectionListConfig.setDetail(populateSpecimenCollectionListConfigDetails());
			String[] arrErrors = voSpecimenCollectionListConfig.validate();
			if (arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return;
			}
			try
			{
				voSpecimenCollectionListConfig = domain.saveSpecimenCollectionConfig(voSpecimenCollectionListConfig);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}
			form.getLocalContext().setvoSpecimenCollectionListConfig(voSpecimenCollectionListConfig);
		}

		form.setMode(FormMode.VIEW);
		open();
	}

	private SpecimenCollectionListConfigDetailsVoCollection populateSpecimenCollectionListConfigDetails()
	{
		GenForm.lyrSpecColConfigLayer.tabSpecCollectionConfigContainer.grdSpecimenCollectionRow row;
		SpecimenCollectionListConfigDetailsVoCollection voCollListConfigDetails = new SpecimenCollectionListConfigDetailsVoCollection();

		for (int i = 0; i < form.lyrSpecColConfig().tabSpecCollectionConfig().grdSpecimenCollection().getRows().size(); i++)
		{
			row = form.lyrSpecColConfig().tabSpecCollectionConfig().grdSpecimenCollection().getRows().get(i);
			if (row.getcolMonday())
			{
				populateCollectionWithRowDetail(row, voCollListConfigDetails, DayOfWeek.MONDAY);
			}
			if (row.getcolTuesday())
			{
				populateCollectionWithRowDetail(row, voCollListConfigDetails, DayOfWeek.TUESDAY);
			}
			if (row.getcolWednesday())
			{
				populateCollectionWithRowDetail(row, voCollListConfigDetails, DayOfWeek.WEDNESDAY);
			}
			if (row.getcolThursday())
			{
				populateCollectionWithRowDetail(row, voCollListConfigDetails, DayOfWeek.THURSDAY);
			}
			if (row.getcolFriday())
			{
				populateCollectionWithRowDetail(row, voCollListConfigDetails, DayOfWeek.FRIDAY);
			}
			if (row.getcolSaturday())
			{
				populateCollectionWithRowDetail(row, voCollListConfigDetails, DayOfWeek.SATURDAY);
			}
			if (row.getcolSunday())
			{
				populateCollectionWithRowDetail(row, voCollListConfigDetails, DayOfWeek.SUNDAY);
			}
			if (row.getcolExceptionDays())
			{
				populateCollectionWithRowDetail(row, voCollListConfigDetails, DayOfWeek.PUBLICHOLIDAY);
			}
		}
		return voCollListConfigDetails;
	}

	private void populateCollectionWithRowDetail(GenForm.lyrSpecColConfigLayer.tabSpecCollectionConfigContainer.grdSpecimenCollectionRow row, SpecimenCollectionListConfigDetailsVoCollection voCollListConfigDetails, DayOfWeek dayOfWeek)
	{
		SpecimenCollectionListConfigDetailsVo voSpecimenCollectionListConfigDetails = row.getValue();
		if(voSpecimenCollectionListConfigDetails == null)
			voSpecimenCollectionListConfigDetails = new SpecimenCollectionListConfigDetailsVo();
		voSpecimenCollectionListConfigDetails.setTime(row.getcolTime());
		voSpecimenCollectionListConfigDetails.setDayOfWeek(dayOfWeek);
		voCollListConfigDetails.add(voSpecimenCollectionListConfigDetails);
	}
	
	private void populateExceptionDatesFromScreen()
	{
		PublicHolidaysVo voPublicHoliday = form.getLocalContext().getvoPublicHoliday();
		if (voPublicHoliday == null)
		{
			voPublicHoliday = new PublicHolidaysVo();	
		}
		
		/*if(form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().getValue()== null)
		{
			engine.showMessage("Please select a date");
			form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().setFocus();	
		}
		else
		{*/
			voPublicHoliday.setDate(form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().getValue());
			form.getLocalContext().setvoPublicHoliday(voPublicHoliday);
		//}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
	}

	private void populateSpecimenCollectionGrid(SpecimenCollectionMethod method)
	{
		prepopulateSpecimenGrid();
		
		if(method == null)
			return;
		
		SpecimenCollectionListConfigVo voSpecCollection = domain.getSpecimenCollectionConfig(method);

		if (voSpecCollection != null)
		{
			form.getLocalContext().setvoSpecimenCollectionListConfig(voSpecCollection);
			form.btnNew().setEnabled(false);
			form.btnNew().setVisible(true);

			form.btnUpdate().setVisible(true);
			form.btnUpdate().setEnabled(true);

			if (form.lyrSpecColConfig().tabSpecCollectionConfig().grdSpecimenCollection().getRows().size() > 0)
			{
				grdSpecimenCollectionRow row;
				SpecimenCollectionTimeCollection collCollectionTime = LookupHelper.getSpecimenCollectionTime(domain.getLookupService());
				for (int j = 0; j < collCollectionTime.size(); j++)
				{
					row = form.lyrSpecColConfig().tabSpecCollectionConfig().grdSpecimenCollection().getRows().get(j);
					for (int i = 0; i < voSpecCollection.getDetail().size(); i++)
					{
						if (voSpecCollection.getDetail().get(i).getTime().getId() == row.getcolTime().getId())
						{
							if (voSpecCollection.getDetail().get(i).getDayOfWeek().getId() == DayOfWeek.MONDAY.getId())
							{
								if (row != null)
								{
									if (voSpecCollection.getDetail().get(i).getDayOfWeekIsNotNull())
										row.setcolMonday(true);
								}
							}
							if (voSpecCollection.getDetail().get(i).getDayOfWeek().getId() == DayOfWeek.TUESDAY.getId())
							{
								if (row != null)
								{
									if (voSpecCollection.getDetail().get(i).getDayOfWeekIsNotNull())
										row.setcolTuesday(true);
								}
							}
							if (voSpecCollection.getDetail().get(i).getDayOfWeek().getId() == DayOfWeek.WEDNESDAY.getId())
							{
								if (row != null)
								{
									if (voSpecCollection.getDetail().get(i).getDayOfWeekIsNotNull())
										row.setcolWednesday(true);
								}
							}
							if (voSpecCollection.getDetail().get(i).getDayOfWeek().getId() == DayOfWeek.THURSDAY.getId())
							{
								if (row != null)
								{
									if (voSpecCollection.getDetail().get(i).getDayOfWeekIsNotNull())
										row.setcolThursday(true);
								}
							}
							if (voSpecCollection.getDetail().get(i).getDayOfWeek().getId() == DayOfWeek.FRIDAY.getId())
							{
								if (row != null)
								{
									if (voSpecCollection.getDetail().get(i).getDayOfWeekIsNotNull())
										row.setcolFriday(true);
								}
							}
							if (voSpecCollection.getDetail().get(i).getDayOfWeek().getId() == DayOfWeek.SATURDAY.getId())
							{
								if (row != null)
								{
									if (voSpecCollection.getDetail().get(i).getDayOfWeekIsNotNull())
										row.setcolSaturday(true);
								}
							}
							if (voSpecCollection.getDetail().get(i).getDayOfWeek().getId() == DayOfWeek.SUNDAY.getId())
							{
								if (row != null)
								{
									if (voSpecCollection.getDetail().get(i).getDayOfWeekIsNotNull())
										row.setcolSunday(true);
								}
							}
							if (voSpecCollection.getDetail().get(i).getDayOfWeek().getId() == DayOfWeek.PUBLICHOLIDAY.getId())
							{
								if (row != null)
								{
									if (voSpecCollection.getDetail().get(i).getDayOfWeekIsNotNull())
										row.setcolExceptionDays(true);
								}
							}

						}
					}
				}
			}
		}
		else
		{
			form.btnNew().setVisible(true);
			form.btnUpdate().setVisible(true);

			form.btnNew().setEnabled(true);
			form.btnUpdate().setEnabled(false);
			form.getLocalContext().setvoSpecimenCollectionListConfig(null);
		}
	}

	protected void onGrdExceptionDatesSelectionChanged() throws PresentationLogicException
	{
		
		if(form.getMode().equals(FormMode.VIEW))
		{
		form.getLocalContext().setvoPublicHoliday(form.lyrSpecColConfig().tabExceptionDays().grdExceptionDates().getValue());
		form.lyrSpecColConfig().tabExceptionDays().btnNewDate().setVisible(false);
		//form.lyrSpecColConfig().tabExceptionDays().btnSaveDate().setVisible(true);
		
		//form.lyrSpecColConfig().tabExceptionDays().btnNewDate().setEnabled(true);
		form.lyrSpecColConfig().tabExceptionDays().btnUpdateDate().setVisible(true);
		form.lyrSpecColConfig().tabExceptionDays().btnUpdateDate().setEnabled(true);
		form.lyrSpecColConfig().tabExceptionDays().btnSaveDate().setVisible(false);
		form.lyrSpecColConfig().tabExceptionDays().btnCancelDate().setVisible(true);
		form.lyrSpecColConfig().tabExceptionDays().btnCancelDate().setEnabled(true);

		populateExceptionDateField();
		}
		else
		{
			form.getLocalContext().setvoPublicHoliday(form.lyrSpecColConfig().tabExceptionDays().grdExceptionDates().getValue());
			populateExceptionDateField();
			
		}
		
	}

	private void populateExceptionDateField()
	{
		if (form.getLocalContext().getvoPublicHoliday() == null)
			return;

		if (form.getLocalContext().getvoPublicHoliday().getDate() != null)
			form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().setValue(form.getLocalContext().getvoPublicHoliday().getDate());
	}

	protected void onFormModeChanged()
	{
	}

	protected void onlyrSpecColConfigTabChanged(LayerBridge tab)
	{
		if (tab.getCaption().compareToIgnoreCase("Exception Days") == 0)
		{
			setupButtonsForHolidays();
		}
		else
		{
			open();
		}
	}

	private void setupButtonsForHolidays()
	{
		form.lyrSpecColConfig().tabExceptionDays().btnNewDate().setEnabled(true);
		form.lyrSpecColConfig().tabExceptionDays().btnUpdateDate().setEnabled(false);
		form.lyrSpecColConfig().tabExceptionDays().btnNewDate().setVisible(true);
		form.lyrSpecColConfig().tabExceptionDays().btnUpdateDate().setVisible(true);

		form.lyrSpecColConfig().tabExceptionDays().btnSaveDate().setEnabled(false);
		form.lyrSpecColConfig().tabExceptionDays().btnCancelDate().setEnabled(false);
		form.lyrSpecColConfig().tabExceptionDays().btnSaveDate().setVisible(false);
		form.lyrSpecColConfig().tabExceptionDays().btnCancelDate().setVisible(false);

		form.btnNew().setEnabled(false);
		form.btnUpdate().setEnabled(false);
		form.btnSave().setEnabled(false);
		form.btnCancel().setEnabled(false);

		form.btnNew().setVisible(false);
		form.btnUpdate().setVisible(false);
		form.btnSave().setVisible(false);
		form.btnCancel().setVisible(false);
	}

	protected void onBtnUpdateDateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().setEnabled(true);

		
		form.lyrSpecColConfig().tabExceptionDays().btnNewDate().setVisible(false);
		form.lyrSpecColConfig().tabExceptionDays().btnUpdateDate().setVisible(false);

		form.lyrSpecColConfig().tabExceptionDays().btnSaveDate().setEnabled(true);
		form.lyrSpecColConfig().tabExceptionDays().btnCancelDate().setEnabled(true);
		form.lyrSpecColConfig().tabExceptionDays().btnSaveDate().setVisible(true);
		form.lyrSpecColConfig().tabExceptionDays().btnCancelDate().setVisible(true);
	}

	protected void onBtnCancelDateClick() throws PresentationLogicException
	{
		open();
		setupButtonsForHolidays();
	}

	protected void onBtnNewDateClick() throws PresentationLogicException
	{
		form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().setEnabled(true);
		form.lyrSpecColConfig().tabExceptionDays().grdExceptionDates().setEnabled(false);
		form.lyrSpecColConfig().tabExceptionDays().btnNewDate().setEnabled(false);
		form.lyrSpecColConfig().tabExceptionDays().btnUpdateDate().setEnabled(false);
		form.lyrSpecColConfig().tabExceptionDays().btnNewDate().setVisible(false);
		form.lyrSpecColConfig().tabExceptionDays().btnUpdateDate().setVisible(false);

		form.lyrSpecColConfig().tabExceptionDays().btnSaveDate().setEnabled(true);
		form.lyrSpecColConfig().tabExceptionDays().btnCancelDate().setEnabled(true);
		form.lyrSpecColConfig().tabExceptionDays().btnSaveDate().setVisible(true);
		form.lyrSpecColConfig().tabExceptionDays().btnCancelDate().setVisible(true);

		form.getLocalContext().setvoPublicHoliday(null);

	}

	protected void onBtnSaveDateClick() throws PresentationLogicException
	{
		populateExceptionDatesFromScreen();

		if(form.getLocalContext().getvoPublicHoliday()== null)
		{
			return;
		}
		
		String[] arrErrors = form.getLocalContext().getvoPublicHoliday().validate(validateUIRules());//	WDEV-15083
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try
		{
			form.getLocalContext().setvoPublicHoliday(domain.savePublicHolidays(form.getLocalContext().getvoPublicHoliday()));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		open();
		setupButtonsForHolidays();
	}

	//	WDEV-15083
	private String[] validateUIRules() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().getValue() == null)
		{
			uiErrors.add("Please select a date.");	
		}
		
		if(form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().getValue() != null && form.getLocalContext().getvoCollPublicHoliday() != null)
		{
			for(PublicHolidaysVo publicHoliday : form.getLocalContext().getvoCollPublicHoliday())
			{
				if(publicHoliday == null)
					continue;
				
				if(form.getLocalContext().getvoPublicHoliday() != null && form.getLocalContext().getvoPublicHoliday().getID_PublicHolidays() != null && form.getLocalContext().getvoPublicHoliday().getID_PublicHolidays().equals(publicHoliday.getID_PublicHolidays()))
					continue;
				
				if(form.lyrSpecColConfig().tabExceptionDays().dteExceptionDate().getValue().equals(publicHoliday.getDate()))
				{
					uiErrors.add("Date entered is already inserted in Exception Dates list.");
					break;
				}
			}
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	protected void onTreTypesTreeViewCheck(TreeNode node) throws PresentationLogicException
	{
		clearAllOtherTreeSelections(node);
		open();
	}

	private void clearAllOtherTreeSelections(TreeNode node)
	{
		for(int i=0;i<form.lyrSpecColConfig().tabSpecCollectionConfig().treTypes().getNodes().size();i++)
		{
			TreeNode parentNode = form.lyrSpecColConfig().tabSpecCollectionConfig().treTypes().getNodes().get(i);
			if(parentNode.equals(node))
			{
				parentNode.setChecked(true);
				for(int p=0;p<parentNode.getNodes().size();p++)
				{
					TreeNode childNode = parentNode.getNodes().get(p);
					childNode.setChecked(false);
				}
				continue;
			}
			
			for(int p=0;p<parentNode.getNodes().size();p++)
			{
				TreeNode childNode = parentNode.getNodes().get(p);
				if(childNode.equals(node))
				{
					childNode.setChecked(true);
					continue;
				}
				childNode.setChecked(false);
			}
			
			parentNode.setChecked(false);
		}
	}

	protected void onTreTypesTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException
	{
		if(!node.isChecked())
		{
			clearAllOtherTreeSelections(node);
			open();
		}
	}
}
