//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.clinicalordersresultsocrrform;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbDepartmentComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceLiteVo getValue()
		{
			return (ims.core.vo.ServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbClinicianComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbInvestigationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ocrr.vo.InvestigationIndexLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ocrr.vo.InvestigationIndexLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ocrr.vo.InvestigationIndexLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ocrr.vo.InvestigationIndexLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ocrr.vo.InvestigationIndexLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.ocrr.vo.InvestigationIndexLiteVo getValue()
		{
			return (ims.ocrr.vo.InvestigationIndexLiteVo)super.control.getValue();
		}
		public void setValue(ims.ocrr.vo.InvestigationIndexLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdClinicalResultsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdClinicalResultsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDateTimeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDateTimeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColDateTime(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColDateTime()
		{
			return (String)super.row.get(0);
		}
		public void setColDateTime(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColDateTimeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColImageReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColImageReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColImageOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColImage(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.framework.utils.Image getColImage()
		{
			return (ims.framework.utils.Image)super.row.get(1);
		}
		public void setColImage(ims.framework.utils.Image value)
		{
			super.row.set(1, value);
		}
		public void setCellColImageTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColInvNameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColInvNameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColInvNameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColInvName(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColInvName()
		{
			return (String)super.row.get(2);
		}
		public void setColInvName(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColInvNameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColInvStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColInvStatusReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColInvStatusOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColInvStatus(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.framework.utils.Image getColInvStatus()
		{
			return (ims.framework.utils.Image)super.row.get(3);
		}
		public void setColInvStatus(ims.framework.utils.Image value)
		{
			super.row.set(3, value);
		}
		public void setCellColInvStatusTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColStatusReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColStatusOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColStatus(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColStatus()
		{
			return (String)super.row.get(4);
		}
		public void setColStatus(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColStatusTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColDepartmentReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColDepartmentReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColDepartmentOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColDepartment(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColDepartment()
		{
			return (String)super.row.get(5);
		}
		public void setColDepartment(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColDepartmentTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColOrderingLocationReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColOrderingLocationReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColOrderingLocationOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColOrderingLocation(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getColOrderingLocation()
		{
			return (String)super.row.get(6);
		}
		public void setColOrderingLocation(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColOrderingLocationTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColClinicianReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColClinicianReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColClinicianOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForColClinician(String value)
		{
			super.row.setTooltip(7, value);
		}
		public String getColClinician()
		{
			return (String)super.row.get(7);
		}
		public void setColClinician(String value)
		{
			super.row.set(7, value);
		}
		public void setCellColClinicianTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.ocrr.vo.OcsPathRadResultVo getValue()
		{
			return (ims.ocrr.vo.OcsPathRadResultVo)super.row.getValue();
		}
		public void setValue(ims.ocrr.vo.OcsPathRadResultVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdClinicalResultsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdClinicalResultsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdClinicalResultsRow get(int index)
		{
			return new grdClinicalResultsRow(super.collection.get(index));
		}
		public grdClinicalResultsRow newRow()
		{
			return new grdClinicalResultsRow(super.collection.newRow());
		}
		public grdClinicalResultsRow newRow(boolean autoSelect)
		{
			return new grdClinicalResultsRow(super.collection.newRow(autoSelect));
		}
		public grdClinicalResultsRow newRowAt(int index)
		{
			return new grdClinicalResultsRow(super.collection.newRowAt(index));
		}
		public grdClinicalResultsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdClinicalResultsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdClinicalResultsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.ocrr.vo.OcsPathRadResultVoCollection getValues()
		{
			ims.ocrr.vo.OcsPathRadResultVoCollection listOfValues = new ims.ocrr.vo.OcsPathRadResultVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.ocrr.vo.OcsPathRadResultVo getValue()
		{
			return (ims.ocrr.vo.OcsPathRadResultVo)super.grid.getValue();
		}
		public void setValue(ims.ocrr.vo.OcsPathRadResultVo value)
		{
			super.grid.setValue(value);
		}
		public grdClinicalResultsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdClinicalResultsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdClinicalResultsRowCollection getRows()
		{
			return new grdClinicalResultsRowCollection(super.grid.getRows());
		}
		public grdClinicalResultsRow getRowByValue(ims.ocrr.vo.OcsPathRadResultVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdClinicalResultsRow(row);
		}
		public void setColDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColInvNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColInvNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColInvStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColInvStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColDepartmentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColDepartmentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColOrderingLocationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColOrderingLocationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColClinicianHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColClinicianHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
	}

	public static class GrpCriteriaRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 608, 8, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Contains", startTabIndex.intValue() + 6);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 512, 8, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Begins with", startTabIndex.intValue() + 5);
		}
		public void setText(GrpCriteriaEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GrpCriteriaEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GrpCriteriaEnumeration.None;
				case 0: return GrpCriteriaEnumeration.rdoContain;
				case 1: return GrpCriteriaEnumeration.rdoBegins;
			}
			return null;
		}
		public void setValue(GrpCriteriaEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GrpCriteriaEnumeration.None.id);
		}
		public boolean isEnabled(GrpCriteriaEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GrpCriteriaEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GrpCriteriaEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GrpCriteriaEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GrpCriteriaEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GrpCriteriaEnumeration None = new GrpCriteriaEnumeration(-1);
		public static GrpCriteriaEnumeration rdoContain = new GrpCriteriaEnumeration(0);
		public static GrpCriteriaEnumeration rdoBegins = new GrpCriteriaEnumeration(1);
		private GrpCriteriaEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GrpCriteriaEnumeration)o).id;
		}
		private int id;
	}

	public static class Group1RadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 608, 53, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "All", startTabIndex.intValue() + 9);
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 512, 53, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Results Only", startTabIndex.intValue() + 8);
		}
		public void setText(Group1Enumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public Group1Enumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return Group1Enumeration.None;
				case 0: return Group1Enumeration.rdoAll;
				case 1: return Group1Enumeration.rdoResults;
			}
			return null;
		}
		public void setValue(Group1Enumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(Group1Enumeration.None.id);
		}
		public boolean isEnabled(Group1Enumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(Group1Enumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(Group1Enumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(Group1Enumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class Group1Enumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static Group1Enumeration None = new Group1Enumeration(-1);
		public static Group1Enumeration rdoAll = new Group1Enumeration(0);
		public static Group1Enumeration rdoResults = new Group1Enumeration(1);
		private Group1Enumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((Group1Enumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo' of the global context variable 'OCRR.RoleDisciplineSecurityLevels' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(70);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenuSCANIMPORTItem = factory.createMenuItem(startControlID.intValue() + 1, "Scan/Import", true, false, new Integer(111152), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4970001)))
			contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenu.add(contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenuSCANIMPORTItem);
		contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenuVIEW_ORDERItem = factory.createMenuItem(startControlID.intValue() + 2, "View Order", true, false, new Integer(116104), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4970002)))
			contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenu.add(contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenuVIEW_ORDERItem);
		contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenuVIEW_RESULTItem = factory.createMenuItem(startControlID.intValue() + 3, "View Result", true, false, new Integer(116130), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4970003)))
			contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenu.add(contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenuVIEW_RESULTItem);
		form.registerMenu(contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenu);


		// Label Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 160, 18, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Resp. Clinician:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 424, 29, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Investigation:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 160, 42, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Department:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));

		// Date Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 56, 40, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 56, 16, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 256, 40, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbDepartmentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDepartmentTemp);
		cmbDepartmentComboBox cmbDepartment = (cmbDepartmentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDepartmentComboBox.class, m_cmbDepartmentTemp);
		super.addComboBox(cmbDepartment);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 256, 16, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbClinicianTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbClinicianTemp);
		qmbClinicianComboBox qmbClinician = (qmbClinicianComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbClinicianComboBox.class, m_qmbClinicianTemp);
		super.addComboBox(qmbClinician);
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 512, 27, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbInvestigationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbInvestigationTemp);
		qmbInvestigationComboBox qmbInvestigation = (qmbInvestigationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbInvestigationComboBox.class, m_qmbInvestigationTemp);
		super.addComboBox(qmbInvestigation);

		// Grid Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 832, 536, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdClinicalResultsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.OCRR.contextMenuClinicalOrdersResultsGridMenu, Boolean.FALSE, Boolean.FALSE, new Integer(50), "Total: ", Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdClinicalResultsTemp);
		grdClinicalResultsGrid grdClinicalResults = (grdClinicalResultsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdClinicalResultsGrid.class, m_grdClinicalResultsTemp);
		grdClinicalResults.addStringColumn("Date / Time", 0, 0, 108, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinicalResults.addImageColumn(" ", 1, 1, 30, false, 0);
		grdClinicalResults.addStringColumn("Investigation", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinicalResults.addImageColumn(" ", 1, 1, 22, false, 0);
		grdClinicalResults.addStringColumn("St.", 1, 1, 50, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinicalResults.addStringColumn("Department", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinicalResults.addStringColumn("Patient Location", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinicalResults.addStringColumn("Resp. Clinician", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdClinicalResults);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 776, 22, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for results matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 808, 22, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGrpCriteria = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpGrpCriteria);
		GrpCriteriaRadioButton GrpCriteria = (GrpCriteriaRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GrpCriteriaRadioButton.class, tmpGrpCriteria);
		GrpCriteria.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GrpCriteria);
		RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroup1);
		Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
		Group1.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(Group1);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public DateControl dteTo()
	{
		return (DateControl)super.getControl(5);
	}
	public DateControl dteFrom()
	{
		return (DateControl)super.getControl(6);
	}
	public cmbDepartmentComboBox cmbDepartment()
	{
		return (cmbDepartmentComboBox)super.getComboBox(0);
	}
	public qmbClinicianComboBox qmbClinician()
	{
		return (qmbClinicianComboBox)super.getComboBox(1);
	}
	public qmbInvestigationComboBox qmbInvestigation()
	{
		return (qmbInvestigationComboBox)super.getComboBox(2);
	}
	public grdClinicalResultsGrid grdClinicalResults()
	{
		return (grdClinicalResultsGrid)super.getGrid(0);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(11);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(12);
	}
	public GrpCriteriaRadioButton GrpCriteria()
	{
		return (GrpCriteriaRadioButton)super.getRadioButton(0);
	}
	public Group1RadioButton Group1()
	{
		return (Group1RadioButton)super.getRadioButton(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				ResultDialog = new LocalFormName(116128);
				OrderSummaryDialog = new LocalFormName(116132);
				ImportResultsDialog = new LocalFormName(116149);
			}
			public final FormName ResultDialog;
			public final FormName OrderSummaryDialog;
			public final FormName ImportResultsDialog;
		}

		public OCRRForms OCRR;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_invIdList = new ims.framework.ContextVariable("invIdList", prefix + "_lv_OCRR.ClinicalOrdersResultsOCRRForm.__internal_x_context__invIdList_" + componentIdentifier + "");
			cxl_ResultCollectionFromGrid = new ims.framework.ContextVariable("ResultCollectionFromGrid", prefix + "_lv_OCRR.ClinicalOrdersResultsOCRRForm.__internal_x_context__ResultCollectionFromGrid_" + componentIdentifier + "");
		}
		
		public boolean getinvIdListIsNotNull()
		{
			return !cxl_invIdList.getValueIsNull(context);
		}
		public String getinvIdList()
		{
			return (String)cxl_invIdList.getValue(context);
		}
		public void setinvIdList(String value)
		{
			cxl_invIdList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_invIdList = null;
		public boolean getResultCollectionFromGridIsNotNull()
		{
			return !cxl_ResultCollectionFromGrid.getValueIsNull(context);
		}
		public ims.ocrr.vo.OcsPathRadResultVoCollection getResultCollectionFromGrid()
		{
			return (ims.ocrr.vo.OcsPathRadResultVoCollection)cxl_ResultCollectionFromGrid.getValue(context);
		}
		public void setResultCollectionFromGrid(ims.ocrr.vo.OcsPathRadResultVoCollection value)
		{
			cxl_ResultCollectionFromGrid.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ResultCollectionFromGrid = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public OCRRNamespace OCRR = new OCRRNamespace();
		public final class OCRRNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ClinicalOrdersResultsGridMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int SCANIMPORT = 1;
				public static final int VIEW_ORDER = 2;
				public static final int VIEW_RESULT = 3;
			}
			public void disableAllClinicalOrdersResultsGridMenuMenuItems()
			{
				this.contextMenuClinicalOrdersResultsGridMenuSCANIMPORTItem.setEnabled(false);
				this.contextMenuClinicalOrdersResultsGridMenuVIEW_ORDERItem.setEnabled(false);
				this.contextMenuClinicalOrdersResultsGridMenuVIEW_RESULTItem.setEnabled(false);
			}
			public void hideAllClinicalOrdersResultsGridMenuMenuItems()
			{
				this.contextMenuClinicalOrdersResultsGridMenuSCANIMPORTItem.setVisible(false);
				this.contextMenuClinicalOrdersResultsGridMenuVIEW_ORDERItem.setVisible(false);
				this.contextMenuClinicalOrdersResultsGridMenuVIEW_RESULTItem.setVisible(false);
			}
			private Menu contextMenuClinicalOrdersResultsGridMenu;
			public ReadOnlyMenuItem getClinicalOrdersResultsGridMenuSCANIMPORTItem()
			{
				return this.contextMenuClinicalOrdersResultsGridMenuSCANIMPORTItem;
			}
			private MenuItem contextMenuClinicalOrdersResultsGridMenuSCANIMPORTItem;
			public ReadOnlyMenuItem getClinicalOrdersResultsGridMenuVIEW_ORDERItem()
			{
				return this.contextMenuClinicalOrdersResultsGridMenuVIEW_ORDERItem;
			}
			private MenuItem contextMenuClinicalOrdersResultsGridMenuVIEW_ORDERItem;
			public ReadOnlyMenuItem getClinicalOrdersResultsGridMenuVIEW_RESULTItem()
			{
				return this.contextMenuClinicalOrdersResultsGridMenuVIEW_RESULTItem;
			}
			private MenuItem contextMenuClinicalOrdersResultsGridMenuVIEW_RESULTItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[73];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_OCRR.PathologyResults.Order", "BO-1070100000-ID", "ID_OcsOrderSession");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderAwaitingAuthorisation", "BO-1070100000-ID", "ID_OcsOrderSession");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
