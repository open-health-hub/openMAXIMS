//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.53 build 2510.31460)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.printorder;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ServiceLiteVo;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.PrinterScope;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IPrinter;
import ims.ocrr.configuration.vo.InvestigationIndexRefVo;
import ims.ocrr.configuration.vo.InvestigationIndexRefVoCollection;
import ims.ocrr.configuration.vo.LocSvcProviderSysRefVo;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.orderingresults.vo.OrderSpecimenRefVo;
import ims.ocrr.vo.LocSvcProviderSysLiteVo;
import ims.ocrr.vo.OcsOrderSummaryVo;
import ims.ocrr.vo.OrderInvestigationListVo;
import ims.ocrr.vo.OrderInvestigationListVoCollection;
import ims.ocrr.vo.PathologyInvestigationVo;
import ims.ocrr.vo.PathologySpecimenVo;
import ims.ocrr.vo.PathologySpecimenVoCollection;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.InvEventType;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.ocrr.vo.lookups.SpecimenCollectionType;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final Integer COL_INVESTIGATION = new Integer(1);
	private static final Integer COL_NO_OF_LABELS_SETS = new Integer(2);
	private static final Integer COL_PRINTER = new Integer(3);
	private static final Integer COL_PREVIEW = new Integer(4);

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialiseGrid();
		//WDEV-3121 printing automatically Radiology Orders that have a default printer and are not printed locally
		if(form.getGlobalContext().OCRR.PrintOrder.getExecuteAutomaticPrintIsNotNull() && form.getGlobalContext().OCRR.PrintOrder.getExecuteAutomaticPrint().booleanValue())
		{
			if(printAutomatically())
			{
				engine.close(DialogResult.OK);
				return;
			}
			else
				form.getGlobalContext().OCRR.PrintOrder.setExecuteAutomaticPrint(Boolean.FALSE);
		}
		
		//standard print processing
		form.lblNoPrinter1().setVisible(false);
		
		OcsOrderSummaryVo voOrderSummary = domain.getOrderSummary(form.getGlobalContext().OCRR.PathologyResults.getOrder());
		
		populateSpecimens(voOrderSummary.getSpecimens());
		populateDFTInvestigations(voOrderSummary.getInvestigations());
		populateInvestigations(voOrderSummary.getInvestigations());
	}
	
	private void initialiseGrid() 
	{
		form.dyngrdPrint().clear();
		
		DynamicGridColumn column = form.dyngrdPrint().getColumns().newColumn("Investigation", COL_INVESTIGATION);
		column.setWidth(430);
		column.setCanGrow(true);

		column = form.dyngrdPrint().getColumns().newColumn("No. of Label Sets", COL_NO_OF_LABELS_SETS);
		column.setWidth(100);
		column.setCanGrow(true);
		
		column = form.dyngrdPrint().getColumns().newColumn("Printer", COL_PRINTER);
		column.setWidth(240);
		column.setCanGrow(true);
		
		column = form.dyngrdPrint().getColumns().newColumn("Preview", COL_PREVIEW);
		column.setWidth(-1);
		column.setCanGrow(true);
	}

	private void populateDFTInvestigations(OrderInvestigationListVoCollection investigations) 
	{
		if(investigations == null)
			return;
		
		for(OrderInvestigationListVo investigation : investigations)
		{
			if(investigation == null)
				continue;
			
			if (investigation.getOrdInvCurrentStatus() != null && (!OrderInvStatus.CANCEL_REQUEST.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus()) && !OrderInvStatus.CANCELLED.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus())))
			{
				if (isDFT(investigation))
				{
					if (engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.MyOrder))
					{
						if (!SpecimenCollectionType.OTHER.equals(investigation.getCollectionType())
								&& !SpecimenCollectionType.PHLEBOTOMY_INPATIENT.equals(investigation.getCollectionType()))
						{
    						addDFTInvestigationRow(investigation);
    					}
					}
					else
					{
						addDFTInvestigationRow(investigation);
					}
				}
			}
		}
	}

	private void addDFTInvestigationRow(OrderInvestigationListVo investigation)
	{
		String invName = getInvName(investigation);
	
		DynamicGridRow parRow = form.dyngrdPrint().getRows().newRow();
		parRow.setSelectable(false);
		DynamicGridCell cell = parRow.getCells().newCell(getColumn(COL_INVESTIGATION), DynamicCellType.STRING);
		cell.setTooltip(invName);
		cell.setReadOnly(true);
		cell.setValue(invName);
		
		cell = parRow.getCells().newCell(getColumn(COL_NO_OF_LABELS_SETS), DynamicCellType.INT);
		cell.setReadOnly(false);
		cell.setValue(investigation.getInvestigation() != null ? investigation.getInvestigation().getNoLabelSets() : null);
		cell.setIntMaxLength(2); //restrict to 2 digits WDEV-16746
		
		cell = parRow.getCells().newCell(getColumn(COL_PRINTER), DynamicCellType.ENUMERATION);
		populateLocalPrinters(cell);
		
		cell = parRow.getCells().newCell(getColumn(COL_PREVIEW), DynamicCellType.IMAGEBUTTON);
		cell.setValue(form.getImages().Core.ZoomInEnabled16);
		cell.setAutoPostBack(true);
		
		parRow.setTextColor(ims.framework.utils.Color.Blue);
		parRow.setValue(investigation);
	}
	
	private String getInvName(OrderInvestigationListVo investigation) 
	{
		if(investigation != null && investigation.getInvestigation() != null && investigation.getInvestigation().getInvestigationIndex() != null)
			return investigation.getInvestigation().getInvestigationIndex().getName();
		
		return null;
	}

	// 	WDEV-16232
	private boolean isDFT(OrderInvestigationListVo orderInvestigationListVo) 
	{
		if(orderInvestigationListVo == null || orderInvestigationListVo.getInvestigation() == null)
			return false;
		
		if(InvEventType.TIME_SERIES.equals(orderInvestigationListVo.getInvestigation().getEventType()))
			return true;
			
		return false;
	}
	
	/**
	 * If there are items to be printed automatically print them and then close the dialog
	 * otherwise continue on and allow printing of the rest of the investigations
	 * @return bRecordsPrinted
	 */
	private boolean printAutomatically()
	{
		int iRecordsProcessed = 0;

		String[] radiologyReport = domain.getSystemReportAndTemplateByReporMapping(Category.CLINICALIMAGING.getID(), null, null);
		
		if(radiologyReport == null || radiologyReport.length < 2)
		{
			engine.showMessage("I could not get the Radiology report and template! Please set the taxonomy mapping of type REPORT for Category.CLINICALIMAGING lookup instance with the relevant report Id.");
			return false;
		}

		if(radiologyReport[0] == null || radiologyReport[1] == null)
		{
			engine.showMessage("The Radiology report has not been deployed !");
			return false;
		}
		
		//To facilitate grouping OrderInvestigations by Provider Service
		ArrayList<ProviderServiceInvestigations> provServiceInvs = new ArrayList<ProviderServiceInvestigations>();
		
		OcsOrderSummaryVo voOrderSummary = domain.getOrderSummary(form.getGlobalContext().OCRR.PathologyResults.getOrder());
		if(voOrderSummary.getInvestigationsIsNotNull())
		{
			for (OrderInvestigationListVo voOrderInv : voOrderSummary.getInvestigations())
	        {
				if(form.getGlobalContext().OCRR.PrintOrder.getNotLocalInvestigationsIsNotNull())
				{
					for(InvestigationIndexRefVo voInvIndex : form.getGlobalContext().OCRR.PrintOrder.getNotLocalInvestigations())  
					{
						if(voOrderInv.getInvestigationIsNotNull() &&  voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() &&  voOrderInv.getInvestigation().getInvestigationIndex().getCategoryIsNotNull())
						{
							if(voOrderInv.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICALIMAGING))
							{
								if(voInvIndex.getID_InvestigationIndexIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getID_InvestigationIndexIsNotNull())
								{
									if(voInvIndex.getID_InvestigationIndex().equals(voOrderInv.getInvestigation().getInvestigationIndex().getID_InvestigationIndex()))
									{
										if(voOrderInv.getInvestigation().getProviderServiceIsNotNull() &&   voOrderInv.getInvestigation().getProviderService().getLocationServiceIsNotNull())
										{
											String defaultPrinter = domain.getDefaultPrinterByLocationAndService(voOrderInv.getRequestedLocation(), voOrderInv.getInvestigation().getProviderService().getLocationService().getService());
											if(defaultPrinter != null)
											{
												provServiceInvs = getPrintRecords(iRecordsProcessed, provServiceInvs, voOrderInv, voOrderInv.getInvestigation().getProviderService(),defaultPrinter);
												iRecordsProcessed++;
											}
										}
									}
								}
							}	
						}
					}
				}	
	        }  
		}
		
		if(iRecordsProcessed > 0)
		{
			try
			{
				printRadiologyOrClinicalOrderInv(radiologyReport[0], radiologyReport[1], null, null, ConfigFlag.GEN.QUERY_SERVER_URL.getValue(), ConfigFlag.GEN.REPORT_SERVER_URL.getValue(), provServiceInvs);
			}
			catch (QueryBuilderClientException e1)
			{
				engine.showMessage("Error creating report: " + e1.getMessage());
				return false;
			}	
		}

		return iRecordsProcessed > 0;
	}
	private ArrayList<ProviderServiceInvestigations> getPrintRecords(int bRecordsProcessed, ArrayList<ProviderServiceInvestigations> provServiceInvs, OrderInvestigationListVo voOrderInv, LocSvcProviderSysLiteVo voProviderService, String printer)
	{
		if(bRecordsProcessed == 0)
		{
			//create a new print record
			OrderInvestigationListVoCollection voCollOrderInv = new OrderInvestigationListVoCollection();
			voCollOrderInv.add(voOrderInv);
			ProviderServiceInvestigations provServInvs =  new ProviderServiceInvestigations(voProviderService, voCollOrderInv, printer);
			provServiceInvs.add(provServInvs);
		}
		else
		{
			//go through list and if provider service is found 
			boolean bItemExists = false;
			for(int i=0; i<provServiceInvs.size();i++)
			{
				if(provServiceInvs.get(i).equals(voProviderService))
				{
					provServiceInvs.get(i).getInvestigations().add(voOrderInv);
					bItemExists = true;
					break;
				}
			}
			
			if(!bItemExists)
			{
				//create a new print record
				OrderInvestigationListVoCollection voCollOrderInv = new OrderInvestigationListVoCollection();
				voCollOrderInv.add(voOrderInv);
				ProviderServiceInvestigations provServInvs =  new ProviderServiceInvestigations(voProviderService, voCollOrderInv, printer);
				provServiceInvs.add(provServInvs);
			}
		}
		
		return provServiceInvs;
	}
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private void populateInvestigations(OrderInvestigationListVoCollection investigations)
	{
		if (investigations == null)
			return;
		
		HashMap locMap = new HashMap();
		
		InvestigationIndexRefVoCollection notLocalInvColl = form.getGlobalContext().OCRR.PrintOrder.getNotLocalInvestigations();
		
		for (int i = 0; i < investigations.size(); i++)
		{
			OrderInvestigationListVo voInvestigation = investigations.get(i);
			if (voInvestigation.getInvestigationIsNotNull() && voInvestigation.getInvestigation().getInvestigationIndexIsNotNull())
			{
				if (voInvestigation.getOrdInvCurrentStatus() != null && (!OrderInvStatus.CANCEL_REQUEST.equals(voInvestigation.getOrdInvCurrentStatus().getOrdInvStatus()) && !OrderInvStatus.CANCELLED.equals(voInvestigation.getOrdInvCurrentStatus().getOrdInvStatus())))
				{
					if (voInvestigation.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && (voInvestigation.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICALIMAGING) || voInvestigation.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICAL)))//WDEV-16361
					{
						boolean printLocal = true;
						for (int j = 0; notLocalInvColl != null && j < notLocalInvColl.size(); j++)
						{
							if(voInvestigation.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voInvestigation.getInvestigation().getInvestigationIndex().getID_InvestigationIndex().equals(notLocalInvColl.get(j).getID_InvestigationIndex()))
							{
								printLocal = false;
								break;
							}
						}

						if(printLocal == true)
						{
							addOrCreateProviderServiceRow(voInvestigation);
						}
						else
						{
							//WDEV-2820 The default printer is driven by the requested(Physical) location and the investigation's service 
							String defaultPrinter = domain.getDefaultPrinterByLocationAndService(voInvestigation.getRequestedLocation(), voInvestigation.getInvestigation().getProviderService().getLocationService().getService());
							if(defaultPrinter == null)
							{
								addOrCreateProviderServiceRow(voInvestigation);
								locMap.put(voInvestigation.getInvestigation().getProviderService().getLocationService().getService().getServiceName(), voInvestigation.getInvestigation().getInvestigationIndex().getName());
							}

						}
					}
				}
			}
		}
				
		if(locMap.size() > 0)
		{
			StringBuffer locs = new StringBuffer("The department for Modality(s): ");

			Set keys = locMap.keySet();
			
			for (Iterator iter = keys.iterator(); iter.hasNext();)
			{
				String element = (String) iter.next();
			
				locs.append(element);
				locs.append("; ");
			}

			locs.append("has no configured default printer. Local printers will be used instead.");
			
			//WDEV-8122
			if(locs.length() > 130)
			{
				form.lblNoPrinter1().setTooltip(locs.toString());
				locs = locs.replace(130, locs.length(), "...");
				form.lblNoPrinter1().setValue(locs.toString());
			}			
			else
				form.lblNoPrinter1().setValue(locs.toString());
			
			form.lblNoPrinter1().setVisible(true);
		}
		
		if(form.dyngrdPrint().getRows().size() == 0)
			engine.close(DialogResult.CANCEL);
	}
	
	private void addOrCreateProviderServiceRow(OrderInvestigationListVo voInvestigation)
	{
		boolean bNewParentRow = false;
		DynamicGridRow parRow = getRowByValue(voInvestigation.getInvestigation().getProviderService());
		
		if(parRow == null)
		{
			bNewParentRow = true;
			parRow = form.dyngrdPrint().getRows().newRow();
			parRow.setSelectable(false);
		}
		
		DynamicGridCell cell = null;
		
		LocSvcProviderSysLiteVo provider = voInvestigation!=null && voInvestigation.getInvestigation()!=null && voInvestigation.getInvestigation().getProviderService()!=null ?voInvestigation.getInvestigation().getProviderService():null;
		if(provider != null)
		{
			cell = parRow.getCells().newCell(getColumn(COL_INVESTIGATION), DynamicCellType.STRING);
			cell.setReadOnly(true);
			cell.setValue(voInvestigation!=null && voInvestigation.getInvestigation()!=null && voInvestigation.getInvestigation().getProviderService()!=null && voInvestigation.getInvestigation().getProviderService().getLocationService()!=null && voInvestigation.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() && voInvestigation.getInvestigation().getProviderService().getLocationService().getService().getServiceNameIsNotNull()? "Provider service: " + voInvestigation.getInvestigation().getProviderService().getLocationService().getService().getServiceName():null);//WDEV-16361);
			
			parRow.setTextColor(ims.framework.utils.Color.Green);
			parRow.setValue(provider);
		}
		
		if(bNewParentRow)
		{
			cell = parRow.getCells().newCell(getColumn(COL_PRINTER), DynamicCellType.ENUMERATION);
			populateLocalPrinters(cell);
		}
		
		DynamicGridRow childRoW = null;
		if(provider != null)
		{
			childRoW = parRow.getRows().newRow();
			childRoW.setSelectable(false);
		}
		else
		{
			childRoW = parRow;
		}
		
		cell = childRoW.getCells().newCell(getColumn(COL_INVESTIGATION), DynamicCellType.STRING);
		cell.setValue(voInvestigation.getInvestigation().getInvestigationIndex().getName());
		cell.setTooltip(voInvestigation.getInvestigation().getInvestigationIndex().getName());
		cell.setReadOnly(true);
		
		cell = childRoW.getCells().newCell(getColumn(COL_PREVIEW), DynamicCellType.IMAGEBUTTON);
		cell.setValue(form.getImages().Core.ZoomInEnabled16);
		cell.setAutoPostBack(true);
		
		childRoW.setValue(voInvestigation);
		
		if(provider != null)
		{
			parRow.setExpanded(true);
		}
	}
	
	private DynamicGridRow getRowByValue(LocSvcProviderSysLiteVo providerService) 
	{
		if(providerService == null)
			return null;
		
		for(int i=0; i<form.dyngrdPrint().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdPrint().getRows().get(i);
			
			if(providerService.equals(row.getValue()))
				return row;
		}
		
		return null;
	}
	
	private void populateSpecimens(PathologySpecimenVoCollection specimens)
	{
		if(specimens == null)
			return;
		
		for (int i = 0; i < specimens.size(); i++)
		{
			StringBuffer sb = new StringBuffer("Pathology investigations: ");
			boolean hasPathology = false;
			boolean printLabels = false;
			
			PathologySpecimenVo voPathologySpecimen = specimens.get(i);
			
			if(form.getGlobalContext().OCRR.getPatientOrNowOnlyIsNotNull() && form.getGlobalContext().OCRR.getPatientOrNowOnly().booleanValue())
			{
				if (voPathologySpecimen.getIsPatientCollectIsNotNull() && voPathologySpecimen.getIsPatientCollect().booleanValue() && voPathologySpecimen.getIsAwaitingCollectionIsNotNull() && voPathologySpecimen.getIsAwaitingCollection().booleanValue() == false)
				{
					printLabels = true;
				}
				else if (voPathologySpecimen.getIsPatientCollectIsNotNull() && voPathologySpecimen.getIsPatientCollect().booleanValue() == false && voPathologySpecimen.getIsAwaitingCollectionIsNotNull() && voPathologySpecimen.getIsAwaitingCollection().booleanValue() == false)
				{
					printLabels = true;
				}
			}
			else
			{
				//print labels always
				printLabels = true;
			}

			//WDEV-13298
			if(printLabels)
			{
				//WDEV-12899/WDEV-12975 - don't show 'Phlebotomy Inpatient' and 'Other' Investigations	
				if(voPathologySpecimen.getRequestedTypeIsNotNull())
				{
					if(engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.MyOrder))
					{
						if(!voPathologySpecimen.getRequestedType().equals(SpecimenCollectionType.PHLEBOTOMY_INPATIENT) && !voPathologySpecimen.getRequestedType().equals(SpecimenCollectionType.OTHER)) //WDEV-13298)
						{
							if (voPathologySpecimen.getInvestigationsIsNotNull ())
							{
								for (int z = 0; z < voPathologySpecimen.getInvestigations().size(); z++)
								{
									if (voPathologySpecimen.getInvestigations().get(z).getInvestigationIsNotNull())
									{
										PathologyInvestigationVo voPathologyInvestigation = voPathologySpecimen.getInvestigations().get(z).getInvestigation();
										if (voPathologyInvestigation.getInvestigationIndexIsNotNull())
										{
											sb.append(voPathologyInvestigation.getInvestigationIndex().getName());
											sb.append(";");
											hasPathology = true;
										}
									}
								}
							}
						}
					}
					else
					{
						if (voPathologySpecimen.getInvestigationsIsNotNull ())
						{
							for (int z = 0; z < voPathologySpecimen.getInvestigations().size(); z++)
							{
								if (voPathologySpecimen.getInvestigations().get(z).getInvestigationIsNotNull())
								{
									PathologyInvestigationVo voPathologyInvestigation = voPathologySpecimen.getInvestigations().get(z).getInvestigation();
									if (voPathologyInvestigation.getInvestigationIndexIsNotNull())
									{
										sb.append(voPathologyInvestigation.getInvestigationIndex().getName());
										sb.append(";");
										hasPathology = true;
									}
								}
							}
						}	
					}
				}
					

				if(hasPathology)
				{
					DynamicGridRow parRow = form.dyngrdPrint().getRows().newRow();
					parRow.setSelectable(false);
					DynamicGridCell cell = parRow.getCells().newCell(getColumn(COL_INVESTIGATION), DynamicCellType.STRING);
					cell.setTooltip(sb.toString());
					cell.setReadOnly(true);
					cell.setValue(sb.toString());
					
					cell = parRow.getCells().newCell(getColumn(COL_PRINTER), DynamicCellType.ENUMERATION);
					populateLocalPrinters(cell);
					
					cell = parRow.getCells().newCell(getColumn(COL_PREVIEW), DynamicCellType.IMAGEBUTTON);
					cell.setValue(form.getImages().Core.ZoomInEnabled16);
					cell.setAutoPostBack(true);
					
					parRow.setTextColor(ims.framework.utils.Color.Blue);
					parRow.setValue(voPathologySpecimen);
				}
			}
		}
		
	}
	
	private void populateLocalPrinters(DynamicGridCell cell) 
	{
		if (engine.getPrinterProvider() == null)
			return;
		
		IPrinter[] printers = engine.getPrinterProvider().getPrintersForLocation(domain.getCurrentLocation());
		if (printers != null)
		{			
			for(int i=0;i<printers.length;i++)
			{				 
				cell.getItems().newItem(printers[i].getIPrinterName(), printers[i].getIPrinterName());				
			}
			
			IPrinter defaultPrinter = engine.getPrinterProvider().getPrinterByLocationAndScope(domain.getCurrentLocation(), PrinterScope.OCSORDER);
			if (defaultPrinter != null)
			{					
				cell.setValue(defaultPrinter.getIPrinterName());
			}
		}	
	}

	private DynamicGridColumn getColumn(Integer colInvestigation) 
	{
		return form.dyngrdPrint().getColumns().getByIdentifier(colInvestigation);
	}

	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] pathologyReport = null;
		String[] radiologyReport = null;
		String[] clinicalReport = null;
		String[] DFTReport = null;
		
		boolean hasPathology = false;
		boolean hasRadiology = false;
		boolean hasClinical = false;
		boolean hasDFT = false;
		
		//WDEV-16939
		/*
		 * As we may have several OrderInvestigation/OrderSpecimen records in the grid we may potentially
		 * have several modalities so therefore several report/templates
		 * We'll create a hashmap to store the report/template for each modality/DFT from the grid
		 * The map will have a composite key of type string: ID_TRUE or ID_FALSE,
		 * Where ID = modality id and TRUE|FALSE is the dft boolean value
		 */
		ServiceLiteVo modality = null;	
		Boolean dft = null;
		String key;
		HashMap<String, String[]> templateMap = new HashMap<String, String[]>();
		boolean useModalityReportsConfig = ConfigFlag.UI.USE_MODALITY_REPORTS_CONFIGURATION.getValue();
		
		for (int i = 0; i < form.dyngrdPrint().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdPrint().getRows().get(i); 
			
			if(row.getValue() instanceof OrderInvestigationListVo && isDFT((OrderInvestigationListVo) row.getValue()))
			{
				hasDFT = true;
			}
			else if(row.getValue() instanceof OrderInvestigationListVo && Category.CLINICALIMAGING.equals(((OrderInvestigationListVo) row.getValue()).getInvestigation().getInvestigationIndex().getCategory()))
			{
				hasRadiology = true;
			}
			else if(row.getValue() instanceof OrderInvestigationListVo && Category.CLINICAL.equals(((OrderInvestigationListVo) row.getValue()).getInvestigation().getInvestigationIndex().getCategory()))
			{
				hasClinical = true;
			}
			if(row.getValue() instanceof OrderSpecimenRefVo)
			{
				hasPathology = true;
			}
			//WDEV-8358 Start - Search in childs for OrderInvestigation
			if (row.getValue() instanceof LocSvcProviderSysLiteVo)
			{
				if (row.getRows() != null)
				{
					for (int x = 0; x < row.getRows().size(); x++)
					{
						DynamicGridRow child = row.getRows().get(x);
						if (child.getValue() instanceof OrderInvestigationListVo && Category.CLINICALIMAGING.equals(((OrderInvestigationListVo) child.getValue()).getInvestigation().getInvestigationIndex().getCategory()))
						{
							hasRadiology = true;
						}
						else if(child.getValue() instanceof OrderInvestigationListVo && Category.CLINICAL.equals(((OrderInvestigationListVo) child.getValue()).getInvestigation().getInvestigationIndex().getCategory()))
						{
							hasClinical = true;
						}
					}
				}
			}
			//WDEV-8358 End
			
			//WDEV-16939 Begin
			if(useModalityReportsConfig)
			{
				boolean found = false;
				if(row.getValue() instanceof OrderInvestigationListVo && isDFT((OrderInvestigationListVo) row.getValue()))
    			{
    				modality = domain.getModality((OrderInvestigationRefVo) row.getValue());
    				dft = true;
    				found = true;
    			}
				/*
    			else if(row.getValue() instanceof OrderInvestigationListVo)
    			{
    				modality = domain.getModality((OrderInvestigationRefVo) row.getValue());
    				dft = false;
    				found = true;
    			}
    			*/
    			else if(row.getValue() instanceof OrderSpecimenRefVo)
    			{
    				modality = domain.getModality((OrderSpecimenRefVo) row.getValue());
    				dft = false;
    				found = true;
    			}
    			
				if(found)
				{
    				key = modality.getID_Service() + "_" + dft.toString();
    				
        			if(!templateMap.containsKey(key))
        			{
        				templateMap.put(key, domain.getSystemReportAndTemplateByReporMapping(null, modality, dft));
        			}
				}
			}
			//WDEV-16939 End
		}

		if(hasRadiology)
		{
			radiologyReport = domain.getSystemReportAndTemplateByReporMapping(Category.CLINICALIMAGING.getID(),null,null);
		}
		if(hasClinical)
		{
			clinicalReport = domain.getSystemReportAndTemplateByReporMapping(Category.CLINICAL.getID(),null,null);
		}
		
		if(!validateReports(pathologyReport, radiologyReport, DFTReport, clinicalReport, false, hasRadiology, false, hasClinical))
			return;
		
		if(!useModalityReportsConfig)
		{
    		if(hasPathology)
    		{
    			pathologyReport = domain.getSystemReportAndTemplateByReporMapping(Category.PATHOLOGY.getID(),null,null);
    		}
    		if(hasDFT)
    		{
    			DFTReport = domain.getSystemReportAndTemplateByReporMapping(InvEventType.TIME_SERIES.getID(),null,null);
    		}
    		/*
    		if(hasRadiology)
    		{
    			radiologyReport = domain.getSystemReportAndTemplateByReporMapping(Category.CLINICALIMAGING.getID(),null,null);
    		}
    		if(hasClinical)
    		{
    			clinicalReport = domain.getSystemReportAndTemplateByReporMapping(Category.CLINICAL.getID(),null,null);
    		}
    		*/
    		if(!validateReports(pathologyReport, radiologyReport, DFTReport, clinicalReport, hasPathology, false, hasDFT, false))
    			return;
		}
		
		int iPrintersSelected = 0;
		for (int i = 0; i < form.dyngrdPrint().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdPrint().getRows().get(i);
			DynamicGridCell cell = row.getCells().get(getColumn(COL_PRINTER));
			if(cell.getValue() != null)
			{
				iPrintersSelected++;
			}
		}
		
		if(iPrintersSelected != form.dyngrdPrint().getRows().size())
		{
			engine.showMessage("Please select a printer for each order.");
			return;
		}
		
		if(useModalityReportsConfig)
		{
    		//check the report/template for each modality
    		if(validateReportTemplateForModality(templateMap) == false)
    			return;
		}
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		ArrayList<ProviderServiceInvestigations> provServiceInvs = new ArrayList<ProviderServiceInvestigations>();
		ArrayList<String> timeSeriesInstructionsURLErrors = new ArrayList<String>();
		
		for (int i = 0; i < form.dyngrdPrint().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdPrint().getRows().get(i);
			DynamicGridCell cell = row.getCells().get(getColumn(COL_PRINTER));
			
			if(row.getValue() instanceof OrderSpecimenRefVo && cell.getValue() != null)
			{
				QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
				
				OrderSpecimenRefVo refSpecimen = (OrderSpecimenRefVo) row.getValue();
				client.addSeed(new SeedValue("OrderSpecimen_id", refSpecimen.getID_OrderSpecimen(), Integer.class));

				try
				{
					if(useModalityReportsConfig)
					{
						String[] rt = getReportAndTemplateByModality(row.getValue(), templateMap);
						client.printReport(rt[0], rt[1], urlReportServer, ((String) cell.getValue()), 1);
					}
					else
						client.printReport(pathologyReport[0], pathologyReport[1], urlReportServer, ((String) cell.getValue()), 1);
				}
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error creating the Pathology report: " + e1.getMessage());
					return;
				}
			}
			else if(row.getValue() instanceof OrderInvestigationListVo && isDFT((OrderInvestigationListVo) row.getValue()) && cell.getValue() != null)
			{
				OrderInvestigationRefVo refDFTInv = (OrderInvestigationRefVo) row.getValue();
				String investigationName = ((OrderInvestigationListVo) row.getValue()).getInvestigation().getInvestigationIndex().getName();
				
				int noOfCopies = 1;
				
				DynamicGridCell cellNoOfLabelsSet = row.getCells().get(getColumn(COL_NO_OF_LABELS_SETS));
				if(cellNoOfLabelsSet.getValue() != null && (Integer) cellNoOfLabelsSet.getValue() > 0)
				{
					noOfCopies = (Integer) cellNoOfLabelsSet.getValue();
				}
				
				QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

				client.addSeed(new SeedValue("OrderInvestigation_id", refDFTInv.getID_OrderInvestigation(), Integer.class));

				try
				{
					if(useModalityReportsConfig)
					{
						String[] rt = getReportAndTemplateByModality(row.getValue(), templateMap);
						client.printReport(rt[0], rt[1], urlReportServer, ((String) cell.getValue()), noOfCopies);
					}
					else
						client.printReport(DFTReport[0], DFTReport[1], urlReportServer, ((String) cell.getValue()), noOfCopies);
					
					client.getSeeds().clear();
				}
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error creating the DFT report: " + e1.getMessage());
					return;
				}
				
				String timeSeriesUrlS = ((OrderInvestigationListVo) row.getValue()).getInvestigation().getInvestigationIndex().getTimeSeriesInstructionsURL();
				
				if (timeSeriesUrlS != null && timeSeriesUrlS.length() > 0)
				{
					try 
					{
						URL timeSeriesUrl = null;

						try 
						{
							timeSeriesUrl = new URL(timeSeriesUrlS);
						} 
						catch (MalformedURLException e) 
						{
							timeSeriesUrl = null;
							timeSeriesInstructionsURLErrors.add("Time Series Instructions URL for " + investigationName + " investigation is not set correctly.");

							continue;
						}

						byte[] pdf = readFileFromURL(timeSeriesUrl, timeSeriesInstructionsURLErrors, investigationName);

						if(pdf != null && pdf.length > 0)
						{
							IPrinter defaultPrinter = engine.getPrinterProvider().getPrinterByLocationAndScope(domain.getCurrentLocation(), PrinterScope.DEFAULT);

							client.printReport(pdf, urlReportServer, (defaultPrinter != null ? defaultPrinter.getIPrinterName() : ((String)cell.getValue())), noOfCopies);
						}
					} 
					catch (QueryBuilderClientException e) {

						System.out.print("Time Series Instructions URL is null");
						timeSeriesInstructionsURLErrors.add("Time Series Instructions URL for " + investigationName + " investigation could not be printed.");
						continue;
					}
				}
			}
			else if(row.getValue() instanceof OrderInvestigationListVo && Category.CLINICAL.equals(((OrderInvestigationListVo) row.getValue()).getInvestigation().getInvestigationIndex().getCategory()) && cell.getValue() != null)
			{
				OrderInvestigationRefVo refClinicalInv = (OrderInvestigationRefVo) row.getValue();
				
				QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

				client.addSeed(new SeedValue("OrderInvestigation_id", refClinicalInv.getID_OrderInvestigation(), Integer.class));

				try
				{
					client.printReport(clinicalReport[0], clinicalReport[1], urlReportServer, ((String) cell.getValue()), 1);
				}
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error creating the Clinical report: " + e1.getMessage());
					return;
				}
			}
			else if(row.getValue() instanceof LocSvcProviderSysLiteVo && cell.getValue() != null)
			{
				for(int p=0;p<row.getRows().size();p++)
				{
					provServiceInvs = getPrintRecords(p, provServiceInvs, (OrderInvestigationListVo)row.getRows().get(p).getValue(), (LocSvcProviderSysLiteVo) row.getValue(),  ((String) cell.getValue()));	
				}
			}
		}
		
		if(provServiceInvs.size() > 0)
		{
			try
			{
				printRadiologyOrClinicalOrderInv((radiologyReport != null ? radiologyReport[0] : null), (radiologyReport != null ? radiologyReport[1] : null), (clinicalReport != null ? clinicalReport[0] : null), (clinicalReport != null ? clinicalReport[1] : null), urlQueryServer, urlReportServer, provServiceInvs);
			}
			catch (QueryBuilderClientException e1)
			{
				engine.showMessage("Error creating report: " + e1.getMessage());
				return;
			}
		}
		
		if(timeSeriesInstructionsURLErrors != null && timeSeriesInstructionsURLErrors.size() > 0)
		{
			String[] uiErrors = new String[timeSeriesInstructionsURLErrors.size()];
			timeSeriesInstructionsURLErrors.toArray(uiErrors);
			
			engine.showErrors(uiErrors);
		}

		engine.close(DialogResult.OK);
	}

	private String[] getReportAndTemplateByModality(Object value, HashMap<String, String[]> templateMap)
	{
		ServiceLiteVo modality = null;
		Boolean dft = null;
		String key;
		
		if(value instanceof OrderInvestigationListVo && isDFT((OrderInvestigationListVo)value))
		{
			modality = domain.getModality((OrderInvestigationListVo)value);
			dft = true;
		}
		/*
		else if(value instanceof OrderInvestigationListVo)
		{
			modality = domain.getModality((OrderInvestigationListVo)value);
			dft = false;
		}
		*/
		else if(value instanceof OrderSpecimenRefVo)
		{
			modality = domain.getModality((OrderSpecimenRefVo)value);
			dft = false;
		}
		
		key = modality.getID_Service() + "_" + dft.toString();
		
		return templateMap.get(key);
	}

	private byte[] readFileFromURL(URL timeSeriesUrl, ArrayList<String> timeSeriesInstructionsURLErrors, String investigationName) 
	{
		if(timeSeriesUrl == null)
			return null;
		
		byte[] data = null;
		
		try 
		{
			URLConnection uc = timeSeriesUrl.openConnection();
		    String contentType = uc.getContentType();
		    int contentLength = uc.getContentLength();
		    
		    if ((contentType != null && contentType.startsWith("text/")) || contentLength == -1) 
		    {
		    	timeSeriesInstructionsURLErrors.add("The file provided by the Time Series Instructions URL for " + investigationName + " investigation is not a PDF.");
		    	throw new IOException("This is not a binary file.");
		    }
		    
		    InputStream raw = uc.getInputStream();
		    InputStream in = new BufferedInputStream(raw);
		    data = new byte[contentLength];
		    int bytesRead = 0;
		    int offset = 0;
		    
		    while (offset < contentLength) 
		    {
		    	bytesRead = in.read(data, offset, data.length - offset);
		    	
		    	if (bytesRead == -1)
		    		break;
		    	
		    	offset += bytesRead;
		    }
		    in.close();

		    if (offset != contentLength) 
		    {
		    	timeSeriesInstructionsURLErrors.add("The file provided by the Time Series Instructions URL for " + investigationName + " investigation cannot be read.");
		    	throw new IOException("Only read " + offset + " bytes; Expected " + contentLength + " bytes");
		    }
		} 
		catch (IOException ioe)
		{
			ioe.printStackTrace();
			data = null;
		}	
		
		return data;
	}

	private boolean validateReports(Object[] pathologyReport, Object[] radiologyReport, Object[] DFTReport, String[] clinicalReport, boolean hasPathology, boolean hasRadiology, boolean hasDFT, boolean hasClinical) 
	{
		if(hasPathology)
		{
			if(pathologyReport == null || pathologyReport.length < 2)
			{
				engine.showMessage("I could not get the Pathology report and template! Please set the taxonomy mapping of type REPORT for Category.PATHOLOGY lookup instance with the relevant report Id.");
				return false;
			}

			if(pathologyReport[0] == null || pathologyReport[1] == null)
			{
				engine.showMessage("The Pathology report has not been deployed !");
				return false;
			}
		}
		if(hasRadiology)
		{
			if(radiologyReport == null || radiologyReport.length < 2)
			{
				engine.showMessage("I could not get the Radiology report and template! Please set the taxonomy mapping of type REPORT for Category.CLINICALIMAGING lookup instance with the relevant report Id.");
				return false;
			}

			if(radiologyReport[0] == null || radiologyReport[1] == null)
			{
				engine.showMessage("The Radiology report has not been deployed !");
				return false;
			}
		}
		
		if(hasClinical)
		{
			if(clinicalReport == null || clinicalReport.length < 2)
			{
				engine.showMessage("I could not get the Clinical report and template! Please set the taxonomy mapping of type REPORT for Category.CLINICAL lookup instance with the relevant report Id.");
				return false;
			}

			if(clinicalReport[0] == null || clinicalReport[1] == null)
			{
				engine.showMessage("The Clinical report has not been deployed !");
				return false;
			}
		}
		
		if(hasDFT)
		{
			if(DFTReport == null || DFTReport.length < 2)
			{
				engine.showMessage("I could not get the DFT report and template! Please set the taxonomy mapping of type REPORT for InvEventType.TIME_SERIES lookup instance with the relevant report Id.");
				return false;
			}

			if(DFTReport[0] == null || DFTReport[1] == null)
			{
				engine.showMessage("The DFT report has not been deployed !");
				return false;
			}
		}
		
		return true;
	}
	
	private void printRadiologyOrClinicalOrderInv(String radiologyReport, String radiologyTemplate, String clinicalReport, String clinicalTemplate, String urlQueryServer, String urlReportServer, ArrayList<ProviderServiceInvestigations> provServInvs) throws QueryBuilderClientException
	{	
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		for(int i=0;i<provServInvs.size();i++)
		{
			boolean hasRadiology = false;
			boolean hasClinical = false;
			
			for(OrderInvestigationListVo item : provServInvs.get(i).getInvestigations())
			{
				if(item == null)
					continue;
				
				if(Category.CLINICALIMAGING.equals(item.getInvestigation().getInvestigationIndex().getCategory()))
				{
					client.addSeed(new SeedValue("OrderInvestigation_id", item.getID_OrderInvestigation() , Integer.class));
					hasRadiology = true;
				}
				else if(Category.CLINICAL.equals(item.getInvestigation().getInvestigationIndex().getCategory()))
				{
					client.addSeed(new SeedValue("OrderInvestigation_id", item.getID_OrderInvestigation() , Integer.class));
					hasClinical = true;
				}
			}
			
			if(hasRadiology)
			{
				if(radiologyReport == null || radiologyTemplate == null)
					continue;
				
				client.printReport(radiologyReport, radiologyTemplate, urlReportServer, provServInvs.get(i).getPrinter(), 1);
			}
			else if(hasClinical)
			{
				if(clinicalReport == null || clinicalTemplate == null)
					continue;
				
				client.printReport(clinicalReport, clinicalTemplate, urlReportServer, provServInvs.get(i).getPrinter(), 1);
			}
			
			client.getSeeds().clear();
		}
	}
	
	private boolean validateReportTemplateForModality(HashMap<String, String[]> templateMap)
	{
		String[] parts;
		Set<String> keys = templateMap.keySet();
		ServiceLiteVo modality;
		StringBuilder msg = new StringBuilder();
		boolean err = false;
		
		for(String k : keys)
		{
			String[] rt = templateMap.get(k);
			
			if(rt == null || rt.length < 2)
			{
				parts = k.split("_");
				
				modality = domain.getModality(Integer.parseInt(parts[0]));
				
				msg.append("No template was linked to modality '" + modality.getServiceName() + "', DFT='" + parts[1] + "' !");
				msg.append("\n");
				
				err = true;
			}
			else if(rt[0] == null || rt[1] == null)
			{
				parts = k.split("_");
				
				modality = domain.getModality(Integer.parseInt(parts[0]));
				
				msg.append("The report/template linked to modality '" + modality.getServiceName() + "', DFT='" + parts[1] + "' was not deployed !");
				msg.append("\n");
				
				err = true;
			}
		}
		
		if(err)
		{
			engine.showMessage(msg.toString());
			return false;
		}

		return true;
	}

	/**
	 * 
	 * @author dlaffan
	 * class used to group Investigations under their provider service
	 */
	private class ProviderServiceInvestigations
	{
		private LocSvcProviderSysRefVo providerService;
		private String printer;
		private OrderInvestigationListVoCollection investigations;
		
		public String getPrinter()
		{
			return printer;
		}

		public void setPrinter(String printer)
		{
			this.printer = printer;
		}

		public OrderInvestigationListVoCollection getInvestigations()
		{
			return investigations;
		}

		public ProviderServiceInvestigations(LocSvcProviderSysRefVo providerServ,OrderInvestigationListVoCollection invests, String defaultprinter)
		{
			providerService = providerServ;
			investigations = invests;
			printer = defaultprinter;
		}
		
		public void setInvestigations(OrderInvestigationListVoCollection investigations)
		{
			this.investigations = investigations;
		}

		public LocSvcProviderSysRefVo getProviderService()
		{
			return providerService;
		}

		public void setProviderService(LocSvcProviderSysRefVo providerService)
		{
			this.providerService = providerService;
		}
		
		private void addInvestigation(OrderInvestigationListVo investigation)
		{
			if(!investigations.contains(investigation))
				investigations.add(investigation);
		}
		
		private boolean equals(LocSvcProviderSysRefVo provService)
		{
			return providerService.equals(provService);
		}
	}

	private void previewReport(DynamicGridRow dynamicGridRow) 
	{
		String result = "";
		
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		if(dynamicGridRow.getValue() instanceof OrderInvestigationListVo && isDFT((OrderInvestigationListVo) dynamicGridRow.getValue()))
		{
			result = previewDFTReport(dynamicGridRow, urlReportServer, client);
			
			if(result != "")
			{
				engine.openUrl(result);
				
				String timeSeriesUrlS = ((OrderInvestigationListVo) dynamicGridRow.getValue()).getInvestigation().getInvestigationIndex().getTimeSeriesInstructionsURL();
				
				if (timeSeriesUrlS != null && timeSeriesUrlS.length() > 0)
				{
					try 
					{
						URL timeSeriesUrl = new URL(timeSeriesUrlS);
					} 
					catch (MalformedURLException e) 
					{
						engine.showErrors(new String[] {"Time Series Instructions URL for " + ((OrderInvestigationListVo) dynamicGridRow.getValue()).getInvestigation().getInvestigationIndex().getName() + " investigation is not set correctly."});
						return;
					}

					engine.openUrl(timeSeriesUrlS);
				}
			}
			
			return;
		}
		else if(dynamicGridRow.getValue() instanceof OrderSpecimenRefVo)
		{
			result = previewPathology(dynamicGridRow, urlReportServer, client); 
		}
		else if(dynamicGridRow.getValue() instanceof OrderInvestigationListVo && Category.CLINICALIMAGING.equals(((OrderInvestigationListVo) dynamicGridRow.getValue()).getInvestigation().getInvestigationIndex().getCategory()))
		{
			result = previewRadiology(dynamicGridRow, urlReportServer, client);
		}
		else if(dynamicGridRow.getValue() instanceof OrderInvestigationListVo && Category.CLINICAL.equals(((OrderInvestigationListVo) dynamicGridRow.getValue()).getInvestigation().getInvestigationIndex().getCategory()))
		{
			result = previewClinical(dynamicGridRow, urlReportServer, client);
		}
		
		if(result != "")
		{
			engine.openUrl(result);
		}
	}
	
	private String previewClinical(DynamicGridRow dynamicGridRow, String urlReportServer,	QueryBuilderClient client) 
	{
		String result = "";
		
		if(urlReportServer == null)
			urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		if(client == null)
			client = new QueryBuilderClient(ConfigFlag.GEN.QUERY_SERVER_URL.getValue(), engine.getSessionId());
		
		String[] clinicalReport = domain.getSystemReportAndTemplateByReporMapping(Category.CLINICAL.getID(),null,null);
		
		if(clinicalReport == null || clinicalReport.length < 2)
		{
			engine.showMessage("I could not get the Clinical report and template! Please set the taxonomy mapping of type REPORT for Category.CLINICAL lookup instance with the relevant report Id.");
			return result;
		}

		if(clinicalReport[0] == null || clinicalReport[1] == null)
		{
			engine.showMessage("The Clinical report has not been deployed !");
			return result;
		}
		
		OrderInvestigationRefVo refInvestigation = (OrderInvestigationRefVo) dynamicGridRow.getValue();
		client.addSeed(new SeedValue("OrderInvestigation_id", refInvestigation.getID_OrderInvestigation() , Integer.class));
		
		try
		{	
			result = client.buildReportAsUrl(clinicalReport[0], clinicalReport[1], urlReportServer, "PDF", "", 1);
			client.getSeeds().clear();
		}
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return result;
		}
		
		return result;
	}

	private String previewDFTReport(DynamicGridRow dynamicGridRow, String urlReportServer, QueryBuilderClient client) 
	{
		String result = "";
		boolean useModalityReportsConfig = ConfigFlag.UI.USE_MODALITY_REPORTS_CONFIGURATION.getValue();
		String[] DFTReport;
		
		if(urlReportServer == null)
			urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		if(client == null)
			client = new QueryBuilderClient(ConfigFlag.GEN.QUERY_SERVER_URL.getValue(), engine.getSessionId());
		
		OrderInvestigationRefVo refDFTInv = (OrderInvestigationRefVo) dynamicGridRow.getValue();
		ServiceLiteVo modality = domain.getModality(refDFTInv);

		if(useModalityReportsConfig)
			DFTReport = domain.getSystemReportAndTemplateByReporMapping(InvEventType.TIME_SERIES.getID(), modality, Boolean.TRUE);
		else
			DFTReport = domain.getSystemReportAndTemplateByReporMapping(InvEventType.TIME_SERIES.getID(), null, null);
		
		if(DFTReport == null || DFTReport.length < 2)
		{
			if(useModalityReportsConfig)
				engine.showMessage("I could not get the DFT report and template for modality '" + modality.getServiceName() + "', dft=TRUE");
			else
				engine.showMessage("I could not get the DFT report and template! Please set the taxonomy mapping of type REPORT for InvEventType.TIME_SERIES lookup instance with the relevant report Id.");
			
			return result;
		}

		if(DFTReport[0] == null || DFTReport[1] == null)
		{
			engine.showMessage("The DFT report has not been deployed !");
			return result;
		}
		
		//OrderInvestigationRefVo refDFTInv = (OrderInvestigationRefVo) row.getValue();
		client.addSeed(new SeedValue("OrderInvestigation_id", refDFTInv.getID_OrderInvestigation(), Integer.class));
		
		try
		{
			result = client.buildReportAsUrl(DFTReport[0], DFTReport[1], urlReportServer, "PDF", "",1);
			client.getSeeds().clear();
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return result;
		}
		
		return result;
	}

	private String previewRadiology(DynamicGridRow dynamicGridRow, String urlReportServer, QueryBuilderClient client) 
	{
		String result = "";
		
		if(urlReportServer == null)
			urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		if(client == null)
			client = new QueryBuilderClient(ConfigFlag.GEN.QUERY_SERVER_URL.getValue(), engine.getSessionId());
		
		String[] radiologyReport = domain.getSystemReportAndTemplateByReporMapping(Category.CLINICALIMAGING.getID(), null, null);
		
		if(radiologyReport == null || radiologyReport.length < 2)
		{
			engine.showMessage("I could not get the Radiology report and template! Please set the taxonomy mapping of type REPORT for Category.CLINICALIMAGING lookup instance with the relevant report Id.");
			return result;
		}

		if(radiologyReport[0] == null || radiologyReport[1] == null)
		{
			engine.showMessage("The Radiology report has not been deployed !");
			return result;
		}
		
		OrderInvestigationRefVo refInvestigation = (OrderInvestigationRefVo) dynamicGridRow.getValue();
		client.addSeed(new SeedValue("OrderInvestigation_id", refInvestigation.getID_OrderInvestigation() , Integer.class));
		
		try
		{	
			result = client.buildReportAsUrl(radiologyReport[0], radiologyReport[1], urlReportServer, "PDF", "", 1);
			client.getSeeds().clear();
		}
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return result;
		}
		
		return result;
	}
	
	private String previewPathology(DynamicGridRow dynamicGridRow, String urlReportServer, QueryBuilderClient client) 
	{
		String result = "";
		String[] pathologyReport;
		boolean useModalityReportsConfig = ConfigFlag.UI.USE_MODALITY_REPORTS_CONFIGURATION.getValue();
		
		if(urlReportServer == null)
			urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		if(client == null)
			client = new QueryBuilderClient(ConfigFlag.GEN.QUERY_SERVER_URL.getValue(), engine.getSessionId());
		
		OrderSpecimenRefVo refSpecimen = (OrderSpecimenRefVo) dynamicGridRow.getValue();
		ServiceLiteVo modality = domain.getModality(refSpecimen);
		
		if(useModalityReportsConfig)
			pathologyReport = domain.getSystemReportAndTemplateByReporMapping(Category.PATHOLOGY.getID(), modality, Boolean.FALSE);
		else
			pathologyReport = domain.getSystemReportAndTemplateByReporMapping(Category.PATHOLOGY.getID(), null, null);
		
		if(pathologyReport == null || pathologyReport.length < 2)
		{
			if(useModalityReportsConfig)
				engine.showMessage("I could not get the Pathology report and template! Please link a template against modality '" + modality.getServiceName() + "', dft = FALSE");
			else
				engine.showMessage("I could not get the Pathology report and template! Please set the taxonomy mapping of type REPORT for Category.PATHOLOGY lookup instance with the relevant report Id.");
			
			return result;
		}

		if(pathologyReport[0] == null || pathologyReport[1] == null)
		{
			engine.showMessage("The Pathology report has not been deployed !");
			return result;
		}
		
		//OrderSpecimenRefVo refSpecimen = (OrderSpecimenRefVo) row.getValue();
		client.addSeed(new SeedValue("OrderSpecimen_id", refSpecimen.getID_OrderSpecimen(), Integer.class));
		
		try
		{
			result = client.buildReportAsUrl(pathologyReport[0], pathologyReport[1], urlReportServer, "PDF", "",1);
			client.getSeeds().clear();
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return result;
		}
		
		return result;
	}

	@Override
	protected void onDyngrdPrintCellButtonClicked(DynamicGridCell cell) 
	{
		if(cell != null && cell.getRow() != null && cell.getColumn().equals(getColumn(COL_PREVIEW)))
		{
			previewReport(cell.getRow());
		}
	}

	@Override
	protected void onDyngrdPrintRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{
		System.out.println("a");
	}

	@Override
	protected void onDyngrdPrintCellValueChanged(DynamicGridCell cell) 
	{
		System.out.println("a");
	}
}
