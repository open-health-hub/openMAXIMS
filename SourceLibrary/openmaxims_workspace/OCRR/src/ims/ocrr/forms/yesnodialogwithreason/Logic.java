//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4758.16736)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.yesnodialogwithreason;

import ims.configuration.gen.ConfigFlag;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.configuration.vo.InvestigationRefVo;
import ims.ocrr.configuration.vo.InvestigationRefVoCollection;
import ims.ocrr.vo.ReOrderPeriodMessageVo;
import ims.ocrr.vo.ReOrderPeriodMessageVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		// 	WDEV-16704
		if (form.getGlobalContext().OCRR.SelectAndOrder.getLaunchYesNoGenderDialogIsNotNull() && form.getGlobalContext().OCRR.SelectAndOrder.getLaunchYesNoGenderDialog().booleanValue())
		{
			form.getGlobalContext().Core.setYesNoDialogLaunchedFromSelf(Boolean.TRUE);
			engine.open(form.getForms().OCRR.GenderYesNoDialog, false);//WDEV-16762
		}
	}
	
	private void initialize() 
	{
		form.lblReason().setVisible(ConfigFlag.UI.REQUEST_REASON_FOR_OVERRIDE_OF_MIN_REORDER_PERIOD.getValue());
		form.txtReason().setVisible(ConfigFlag.UI.REQUEST_REASON_FOR_OVERRIDE_OF_MIN_REORDER_PERIOD.getValue());
		
		form.imgQuestion().setValue(form.getImages().Core.Question);
		form.txtQuestion().setValue(buildReOrderMessage(form.getGlobalContext().OCRR.getYesNoDialogWithReasonMessage()));
	}
	
	//WDEV-16762
	private String buildReOrderMessage(ReOrderPeriodMessageVoCollection voCollMessages)
	{
		if(voCollMessages == null)
			return null;
		
		StringBuilder message = new StringBuilder();
		
		for(ReOrderPeriodMessageVo item : voCollMessages)
		{
			message.append("The minimum re-order period for '").append(item.getItemName()).append("' is '").append(item.getAmount());
			message.append(" ").append(item.getUnit().getText()).append("'").append("\rThis item was last ordered for this patient on ");
			message.append(item.getRequiredByDate() != null ? item.getRequiredByDate().getDate().toString() : item.getOrderedDateTime().getDate().toString());
			message.append(" at ").append(item.getRequiredByDate() != null ? item.getRequiredByDate().getTime().toString() : item.getOrderedDateTime().getTime().toString());
			message.append(".").append("\rDo you still wish to order this item?"); 
			
			if(voCollMessages.size() > 1)
				message.append("\r\r");
		}
	
		return message.toString();
	}
	
	@Override
	protected void onBtnYesClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (ConfigFlag.UI.REQUEST_REASON_FOR_OVERRIDE_OF_MIN_REORDER_PERIOD.getValue() && 
				(form.txtReason().getValue() == null || form.txtReason().getValue().length() == 0))
		{
			engine.showErrors(new String[] { "Reason for Re-Order is mandatory." });
			return;
		}
		
		form.getGlobalContext().OCRR.setRefusedInvestigation(removeFromRefusedInvestigation());//WDEV-16762
		form.getGlobalContext().OCRR.setReasonForReOrder(form.txtReason().getValue());
		engine.close(DialogResult.YES);
	}
	
	// 	WDEV-16762
	private InvestigationRefVoCollection removeFromRefusedInvestigation() 
	{
		ReOrderPeriodMessageVoCollection voCollMessages = form.getGlobalContext().OCRR.getYesNoDialogWithReasonMessage();
		
		if(voCollMessages == null || voCollMessages.size() == 0)
			return null;
		
		InvestigationRefVoCollection invColl = form.getGlobalContext().OCRR.getRefusedInvestigation();
		
		if(invColl == null)
			return null;
		
		for(ReOrderPeriodMessageVo item : voCollMessages)
		{
			if(item == null || item.getInvestigationId() == null)
				continue;
			
			removeComponentFromRefusedInvestigations(item.getInvestigationId());
		}
		
		return invColl;
	}
	
	// 	WDEV-16762
	private void removeComponentFromRefusedInvestigations(Integer invId) 
	{
		if(invId == null)
			return;
		
		InvestigationRefVoCollection refusedInvestigations = form.getGlobalContext().OCRR.getRefusedInvestigation();
		
		if(refusedInvestigations == null || refusedInvestigations.size() == 0)
			return;
		
		for(int i = refusedInvestigations.size() - 1; i >= 0; i--)
		{
			if(refusedInvestigations.get(i) == null || refusedInvestigations.get(i).getID_Investigation() == null)
				continue;
			
			if(invId.equals(refusedInvestigations.get(i).getID_Investigation()))
				refusedInvestigations.remove(refusedInvestigations.get(i));
		}
	}

	@Override
	protected void onBtnNoClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().OCRR.setRefusedInvestigation(getRefusedInvestigation());//WDEV-16762
		engine.close(DialogResult.YES);//WDEV-16762
	}

	//WDEV-16762
	private InvestigationRefVoCollection getRefusedInvestigation() 
	{
		ReOrderPeriodMessageVoCollection voCollMessages = form.getGlobalContext().OCRR.getYesNoDialogWithReasonMessage();
			
		if(voCollMessages == null || voCollMessages.size() == 0)
			return null;
		
		InvestigationRefVoCollection invColl = form.getGlobalContext().OCRR.getRefusedInvestigation();
		
		if(invColl == null)
			invColl = new InvestigationRefVoCollection();
		
		for(ReOrderPeriodMessageVo item : voCollMessages)
		{
			if(item == null || item.getInvestigationId() == null)
				continue;
			
			invColl.add(new InvestigationRefVo(item.getInvestigationId(), 0));
		}
		
		return invColl;
	}

	// 	WDEV-16704
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		//WDEV-16762
		if(form.getGlobalContext().OCRR.getRefusedInvestigation() != null && form.getGlobalContext().OCRR.getRefusedInvestigation().size() > 0)
		{
			removeReOrderMessages();
			
			if(form.getGlobalContext().OCRR.getYesNoDialogWithReasonMessage() == null || form.getGlobalContext().OCRR.getYesNoDialogWithReasonMessage().size() == 0)
			{
				engine.close(result);
				return;
			}
			
			form.txtQuestion().setValue(buildReOrderMessage(form.getGlobalContext().OCRR.getYesNoDialogWithReasonMessage()));//WDEV-16762
		}
		
		if(form.getForms().Core.YesNoDialog.equals(formName))
		{
			if(DialogResult.NO.equals(result))
			{
				engine.close(result);
			}
		}
	}

	//WDEV-16762
	private void removeReOrderMessages() 
	{
		ReOrderPeriodMessageVoCollection messages = form.getGlobalContext().OCRR.getYesNoDialogWithReasonMessage();
		
		if(messages == null || messages.size() == 0)
			return;
		
		for(int i = messages.size() - 1; i >= 0; i--)
		{
			if(messages.get(i) == null || messages.get(i).getInvestigationId() == null)
				continue;
			
			if(itemIdIsInRefusedList(messages.get(i)))
			{
				messages.remove(messages.get(i));
			}
		}
	}

	//WDEV-16762
	private boolean itemIdIsInRefusedList(ReOrderPeriodMessageVo reOrderPeriodMessageVo) 
	{
		if(reOrderPeriodMessageVo == null || reOrderPeriodMessageVo.getInvestigationId() == null)
			return false;
		
		InvestigationRefVoCollection refusedInv = form.getGlobalContext().OCRR.getRefusedInvestigation();
		
		if(refusedInv == null || refusedInv.size() == 0)
			return false;
		
		for(InvestigationRefVo inv : refusedInv)
		{
			if(inv == null)
				continue;
				
			if(inv.getID_Investigation().equals(reOrderPeriodMessageVo.getInvestigationId()) || inv.getID_Investigation().equals(reOrderPeriodMessageVo.getParentId()))
				return true;
		}
		
		return false;
	}
}
