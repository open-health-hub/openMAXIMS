//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.specimenconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbSpecimenTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ocrr.vo.lookups.SpecimenType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ocrr.vo.lookups.SpecimenType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ocrr.vo.lookups.SpecimenType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ocrr.vo.lookups.SpecimenType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ocrr.vo.lookups.SpecimenType value)
		{
			return super.control.removeRow(value);
		}
		public ims.ocrr.vo.lookups.SpecimenType getValue()
		{
			return (ims.ocrr.vo.lookups.SpecimenType)super.control.getValue();
		}
		public void setValue(ims.ocrr.vo.lookups.SpecimenType value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdAltPaedContRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAltPaedContRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColContainerReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColContainerReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColContainerOpened()
		{
			super.row.showOpened(0);
		}
		public String getColContainer()
		{
			return (String)super.row.get(0);
		}
		public void setColContainer(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColContainerTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColVolumeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColVolumeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColVolumeOpened()
		{
			super.row.showOpened(1);
		}
		public String getColVolume()
		{
			return (String)super.row.get(1);
		}
		public void setColVolume(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColVolumeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColLblSuffixReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColLblSuffixReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColLblSuffixOpened()
		{
			super.row.showOpened(2);
		}
		public String getColLblSuffix()
		{
			return (String)super.row.get(2);
		}
		public void setColLblSuffix(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColLblSuffixTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.ocrr.vo.SpecimenContainerVo getValue()
		{
			return (ims.ocrr.vo.SpecimenContainerVo)super.row.getValue();
		}
		public void setValue(ims.ocrr.vo.SpecimenContainerVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAltPaedContRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAltPaedContRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAltPaedContRow get(int index)
		{
			return new grdAltPaedContRow(super.collection.get(index));
		}
		public grdAltPaedContRow newRow()
		{
			return new grdAltPaedContRow(super.collection.newRow());
		}
		public grdAltPaedContRow newRow(boolean autoSelect)
		{
			return new grdAltPaedContRow(super.collection.newRow(autoSelect));
		}
		public grdAltPaedContRow newRowAt(int index)
		{
			return new grdAltPaedContRow(super.collection.newRowAt(index));
		}
		public grdAltPaedContRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAltPaedContRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAltPaedContGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.ocrr.vo.SpecimenContainerVoCollection getValues()
		{
			ims.ocrr.vo.SpecimenContainerVoCollection listOfValues = new ims.ocrr.vo.SpecimenContainerVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.ocrr.vo.SpecimenContainerVo getValue()
		{
			return (ims.ocrr.vo.SpecimenContainerVo)super.grid.getValue();
		}
		public void setValue(ims.ocrr.vo.SpecimenContainerVo value)
		{
			super.grid.setValue(value);
		}
		public grdAltPaedContRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAltPaedContRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAltPaedContRowCollection getRows()
		{
			return new grdAltPaedContRowCollection(super.grid.getRows());
		}
		public grdAltPaedContRow getRowByValue(ims.ocrr.vo.SpecimenContainerVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAltPaedContRow(row);
		}
		public void setColContainerHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColContainerHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColVolumeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColVolumeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColLblSuffixHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColLblSuffixHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdPaedContRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPaedContRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColContainerReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColContainerReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColContainerOpened()
		{
			super.row.showOpened(0);
		}
		public String getColContainer()
		{
			return (String)super.row.get(0);
		}
		public void setColContainer(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColContainerTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColVolumeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColVolumeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColVolumeOpened()
		{
			super.row.showOpened(1);
		}
		public String getColVolume()
		{
			return (String)super.row.get(1);
		}
		public void setColVolume(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColVolumeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColLblSuffixReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColLblSuffixReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColLblSuffixOpened()
		{
			super.row.showOpened(2);
		}
		public String getColLblSuffix()
		{
			return (String)super.row.get(2);
		}
		public void setColLblSuffix(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColLblSuffixTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.ocrr.vo.SpecimenContainerVo getValue()
		{
			return (ims.ocrr.vo.SpecimenContainerVo)super.row.getValue();
		}
		public void setValue(ims.ocrr.vo.SpecimenContainerVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPaedContRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPaedContRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPaedContRow get(int index)
		{
			return new grdPaedContRow(super.collection.get(index));
		}
		public grdPaedContRow newRow()
		{
			return new grdPaedContRow(super.collection.newRow());
		}
		public grdPaedContRow newRow(boolean autoSelect)
		{
			return new grdPaedContRow(super.collection.newRow(autoSelect));
		}
		public grdPaedContRow newRowAt(int index)
		{
			return new grdPaedContRow(super.collection.newRowAt(index));
		}
		public grdPaedContRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPaedContRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPaedContGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.ocrr.vo.SpecimenContainerVoCollection getValues()
		{
			ims.ocrr.vo.SpecimenContainerVoCollection listOfValues = new ims.ocrr.vo.SpecimenContainerVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.ocrr.vo.SpecimenContainerVo getValue()
		{
			return (ims.ocrr.vo.SpecimenContainerVo)super.grid.getValue();
		}
		public void setValue(ims.ocrr.vo.SpecimenContainerVo value)
		{
			super.grid.setValue(value);
		}
		public grdPaedContRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPaedContRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPaedContRowCollection getRows()
		{
			return new grdPaedContRowCollection(super.grid.getRows());
		}
		public grdPaedContRow getRowByValue(ims.ocrr.vo.SpecimenContainerVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPaedContRow(row);
		}
		public void setColContainerHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColContainerHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColVolumeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColVolumeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColLblSuffixHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColLblSuffixHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdAdultSpecContRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAdultSpecContRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColContainerReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColContainerReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColContainerOpened()
		{
			super.row.showOpened(0);
		}
		public String getColContainer()
		{
			return (String)super.row.get(0);
		}
		public void setColContainer(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColContainerTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColVolumeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColVolumeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColVolumeOpened()
		{
			super.row.showOpened(1);
		}
		public String getColVolume()
		{
			return (String)super.row.get(1);
		}
		public void setColVolume(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColVolumeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColLblSuffixReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColLblSuffixReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColLblSuffixOpened()
		{
			super.row.showOpened(2);
		}
		public String getColLblSuffix()
		{
			return (String)super.row.get(2);
		}
		public void setColLblSuffix(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColLblSuffixTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.ocrr.vo.SpecimenContainerVo getValue()
		{
			return (ims.ocrr.vo.SpecimenContainerVo)super.row.getValue();
		}
		public void setValue(ims.ocrr.vo.SpecimenContainerVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAdultSpecContRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAdultSpecContRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAdultSpecContRow get(int index)
		{
			return new grdAdultSpecContRow(super.collection.get(index));
		}
		public grdAdultSpecContRow newRow()
		{
			return new grdAdultSpecContRow(super.collection.newRow());
		}
		public grdAdultSpecContRow newRow(boolean autoSelect)
		{
			return new grdAdultSpecContRow(super.collection.newRow(autoSelect));
		}
		public grdAdultSpecContRow newRowAt(int index)
		{
			return new grdAdultSpecContRow(super.collection.newRowAt(index));
		}
		public grdAdultSpecContRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAdultSpecContRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAdultSpecContGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.ocrr.vo.SpecimenContainerVoCollection getValues()
		{
			ims.ocrr.vo.SpecimenContainerVoCollection listOfValues = new ims.ocrr.vo.SpecimenContainerVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.ocrr.vo.SpecimenContainerVo getValue()
		{
			return (ims.ocrr.vo.SpecimenContainerVo)super.grid.getValue();
		}
		public void setValue(ims.ocrr.vo.SpecimenContainerVo value)
		{
			super.grid.setValue(value);
		}
		public grdAdultSpecContRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAdultSpecContRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAdultSpecContRowCollection getRows()
		{
			return new grdAdultSpecContRowCollection(super.grid.getRows());
		}
		public grdAdultSpecContRow getRowByValue(ims.ocrr.vo.SpecimenContainerVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAdultSpecContRow(row);
		}
		public void setColContainerHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColContainerHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColVolumeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColVolumeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColLblSuffixHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColLblSuffixHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(632, 224);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.OCRR.contextMenuAlternatePaediatricContainer = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.OCRR.contextMenuAlternatePaediatricContainerADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4330001)))
			contextMenus.OCRR.contextMenuAlternatePaediatricContainer.add(contextMenus.OCRR.contextMenuAlternatePaediatricContainerADDItem);
		contextMenus.OCRR.contextMenuAlternatePaediatricContainerEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4330002)))
			contextMenus.OCRR.contextMenuAlternatePaediatricContainer.add(contextMenus.OCRR.contextMenuAlternatePaediatricContainerEDITItem);
		contextMenus.OCRR.contextMenuAlternatePaediatricContainerREMOVEItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4330003)))
			contextMenus.OCRR.contextMenuAlternatePaediatricContainer.add(contextMenus.OCRR.contextMenuAlternatePaediatricContainerREMOVEItem);
		form.registerMenu(contextMenus.OCRR.contextMenuAlternatePaediatricContainer);
		contextMenus.OCRR.contextMenuPaediatricContainer = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.OCRR.contextMenuPaediatricContainerADDItem = factory.createMenuItem(startControlID.intValue() + 4, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4960001)))
			contextMenus.OCRR.contextMenuPaediatricContainer.add(contextMenus.OCRR.contextMenuPaediatricContainerADDItem);
		contextMenus.OCRR.contextMenuPaediatricContainerEDITItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4960002)))
			contextMenus.OCRR.contextMenuPaediatricContainer.add(contextMenus.OCRR.contextMenuPaediatricContainerEDITItem);
		contextMenus.OCRR.contextMenuPaediatricContainerREMOVEItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4960003)))
			contextMenus.OCRR.contextMenuPaediatricContainer.add(contextMenus.OCRR.contextMenuPaediatricContainerREMOVEItem);
		form.registerMenu(contextMenus.OCRR.contextMenuPaediatricContainer);
		contextMenus.OCRR.contextMenuAdultSpecimenContainer = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.OCRR.contextMenuAdultSpecimenContainerADDItem = factory.createMenuItem(startControlID.intValue() + 7, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4950001)))
			contextMenus.OCRR.contextMenuAdultSpecimenContainer.add(contextMenus.OCRR.contextMenuAdultSpecimenContainerADDItem);
		contextMenus.OCRR.contextMenuAdultSpecimenContainerEDITItem = factory.createMenuItem(startControlID.intValue() + 8, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4950002)))
			contextMenus.OCRR.contextMenuAdultSpecimenContainer.add(contextMenus.OCRR.contextMenuAdultSpecimenContainerEDITItem);
		contextMenus.OCRR.contextMenuAdultSpecimenContainerREMOVEItem = factory.createMenuItem(startControlID.intValue() + 9, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4950003)))
			contextMenus.OCRR.contextMenuAdultSpecimenContainer.add(contextMenus.OCRR.contextMenuAdultSpecimenContainerREMOVEItem);
		form.registerMenu(contextMenus.OCRR.contextMenuAdultSpecimenContainer);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 320, 114, 193, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Alternative Paediatric Containers", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 320, 3, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Paediatric Containers", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 152, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Adult Specimen Container", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 21, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specimen Type:", new Integer(1), null, new Integer(0)}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 104, 19, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSpecimenTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSpecimenTypeTemp);
		cmbSpecimenTypeComboBox cmbSpecimenType = (cmbSpecimenTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecimenTypeComboBox.class, m_cmbSpecimenTypeTemp);
		super.addComboBox(cmbSpecimenType);

		// Grid Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 320, 130, 304, 88, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		Grid m_grdAltPaedContTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.OCRR.contextMenuAlternatePaediatricContainer, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAltPaedContTemp);
		grdAltPaedContGrid grdAltPaedCont = (grdAltPaedContGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAltPaedContGrid.class, m_grdAltPaedContTemp);
		grdAltPaedCont.addStringColumn("Container", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAltPaedCont.addStringColumn("Volume (mls)", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAltPaedCont.addStringColumn("Label Suffix", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAltPaedCont);
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 320, 19, 304, 88, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		Grid m_grdPaedContTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.OCRR.contextMenuPaediatricContainer, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPaedContTemp);
		grdPaedContGrid grdPaedCont = (grdPaedContGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPaedContGrid.class, m_grdPaedContTemp);
		grdPaedCont.addStringColumn("Container", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPaedCont.addStringColumn("Volume (mls)", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPaedCont.addStringColumn("Label Suffix", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdPaedCont);
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 82, 296, 136, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdAdultSpecContTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.OCRR.contextMenuAdultSpecimenContainer, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAdultSpecContTemp);
		grdAdultSpecContGrid grdAdultSpecCont = (grdAdultSpecContGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAdultSpecContGrid.class, m_grdAdultSpecContTemp);
		grdAdultSpecCont.addStringColumn("Container", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAdultSpecCont.addStringColumn("Volume (mls)", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAdultSpecCont.addStringColumn("Label Suffix", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAdultSpecCont);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public cmbSpecimenTypeComboBox cmbSpecimenType()
	{
		return (cmbSpecimenTypeComboBox)super.getComboBox(0);
	}
	public grdAltPaedContGrid grdAltPaedCont()
	{
		return (grdAltPaedContGrid)super.getGrid(0);
	}
	public grdPaedContGrid grdPaedCont()
	{
		return (grdPaedContGrid)super.getGrid(1);
	}
	public grdAdultSpecContGrid grdAdultSpecCont()
	{
		return (grdAdultSpecContGrid)super.getGrid(2);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				AlternativeContainerDialog = new LocalFormName(116157);
			}
			public final FormName AlternativeContainerDialog;
		}

		public OCRRForms OCRR;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Specimen = new ims.framework.ContextVariable("Specimen", prefix + "_lv_OCRR.SpecimenConfiguration.__internal_x_context__Specimen_" + componentIdentifier + "");
			cxl_disableSpecimenType = new ims.framework.ContextVariable("disableSpecimenType", prefix + "_lv_OCRR.SpecimenConfiguration.__internal_x_context__disableSpecimenType_" + componentIdentifier + "");
			cxl_isDftInvestigation = new ims.framework.ContextVariable("isDftInvestigation", prefix + "_lv_OCRR.SpecimenConfiguration.__internal_x_context__isDftInvestigation_" + componentIdentifier + "");
		}
		
		public boolean getSpecimenIsNotNull()
		{
			return !cxl_Specimen.getValueIsNull(context);
		}
		public ims.ocrr.vo.SpecimenVo getSpecimen()
		{
			return (ims.ocrr.vo.SpecimenVo)cxl_Specimen.getValue(context);
		}
		public void setSpecimen(ims.ocrr.vo.SpecimenVo value)
		{
			cxl_Specimen.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Specimen = null;
		public boolean getdisableSpecimenTypeIsNotNull()
		{
			return !cxl_disableSpecimenType.getValueIsNull(context);
		}
		public Boolean getdisableSpecimenType()
		{
			return (Boolean)cxl_disableSpecimenType.getValue(context);
		}
		public void setdisableSpecimenType(Boolean value)
		{
			cxl_disableSpecimenType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_disableSpecimenType = null;
		public boolean getisDftInvestigationIsNotNull()
		{
			return !cxl_isDftInvestigation.getValueIsNull(context);
		}
		public Boolean getisDftInvestigation()
		{
			return (Boolean)cxl_isDftInvestigation.getValue(context);
		}
		public void setisDftInvestigation(Boolean value)
		{
			cxl_isDftInvestigation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isDftInvestigation = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public OCRRNamespace OCRR = new OCRRNamespace();
		public final class OCRRNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class AlternatePaediatricContainer implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
				public static final int REMOVE = 3;
			}
			public void disableAllAlternatePaediatricContainerMenuItems()
			{
				this.contextMenuAlternatePaediatricContainerADDItem.setEnabled(false);
				this.contextMenuAlternatePaediatricContainerEDITItem.setEnabled(false);
				this.contextMenuAlternatePaediatricContainerREMOVEItem.setEnabled(false);
			}
			public void hideAllAlternatePaediatricContainerMenuItems()
			{
				this.contextMenuAlternatePaediatricContainerADDItem.setVisible(false);
				this.contextMenuAlternatePaediatricContainerEDITItem.setVisible(false);
				this.contextMenuAlternatePaediatricContainerREMOVEItem.setVisible(false);
			}
			private Menu contextMenuAlternatePaediatricContainer;
			public ReadOnlyMenuItem getAlternatePaediatricContainerADDItem()
			{
				return this.contextMenuAlternatePaediatricContainerADDItem;
			}
			private MenuItem contextMenuAlternatePaediatricContainerADDItem;
			public ReadOnlyMenuItem getAlternatePaediatricContainerEDITItem()
			{
				return this.contextMenuAlternatePaediatricContainerEDITItem;
			}
			private MenuItem contextMenuAlternatePaediatricContainerEDITItem;
			public ReadOnlyMenuItem getAlternatePaediatricContainerREMOVEItem()
			{
				return this.contextMenuAlternatePaediatricContainerREMOVEItem;
			}
			private MenuItem contextMenuAlternatePaediatricContainerREMOVEItem;
			public final class PaediatricContainer implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 4;
				public static final int EDIT = 5;
				public static final int REMOVE = 6;
			}
			public void disableAllPaediatricContainerMenuItems()
			{
				this.contextMenuPaediatricContainerADDItem.setEnabled(false);
				this.contextMenuPaediatricContainerEDITItem.setEnabled(false);
				this.contextMenuPaediatricContainerREMOVEItem.setEnabled(false);
			}
			public void hideAllPaediatricContainerMenuItems()
			{
				this.contextMenuPaediatricContainerADDItem.setVisible(false);
				this.contextMenuPaediatricContainerEDITItem.setVisible(false);
				this.contextMenuPaediatricContainerREMOVEItem.setVisible(false);
			}
			private Menu contextMenuPaediatricContainer;
			public ReadOnlyMenuItem getPaediatricContainerADDItem()
			{
				return this.contextMenuPaediatricContainerADDItem;
			}
			private MenuItem contextMenuPaediatricContainerADDItem;
			public ReadOnlyMenuItem getPaediatricContainerEDITItem()
			{
				return this.contextMenuPaediatricContainerEDITItem;
			}
			private MenuItem contextMenuPaediatricContainerEDITItem;
			public ReadOnlyMenuItem getPaediatricContainerREMOVEItem()
			{
				return this.contextMenuPaediatricContainerREMOVEItem;
			}
			private MenuItem contextMenuPaediatricContainerREMOVEItem;
			public final class AdultSpecimenContainer implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 7;
				public static final int EDIT = 8;
				public static final int REMOVE = 9;
			}
			public void disableAllAdultSpecimenContainerMenuItems()
			{
				this.contextMenuAdultSpecimenContainerADDItem.setEnabled(false);
				this.contextMenuAdultSpecimenContainerEDITItem.setEnabled(false);
				this.contextMenuAdultSpecimenContainerREMOVEItem.setEnabled(false);
			}
			public void hideAllAdultSpecimenContainerMenuItems()
			{
				this.contextMenuAdultSpecimenContainerADDItem.setVisible(false);
				this.contextMenuAdultSpecimenContainerEDITItem.setVisible(false);
				this.contextMenuAdultSpecimenContainerREMOVEItem.setVisible(false);
			}
			private Menu contextMenuAdultSpecimenContainer;
			public ReadOnlyMenuItem getAdultSpecimenContainerADDItem()
			{
				return this.contextMenuAdultSpecimenContainerADDItem;
			}
			private MenuItem contextMenuAdultSpecimenContainerADDItem;
			public ReadOnlyMenuItem getAdultSpecimenContainerEDITItem()
			{
				return this.contextMenuAdultSpecimenContainerEDITItem;
			}
			private MenuItem contextMenuAdultSpecimenContainerEDITItem;
			public ReadOnlyMenuItem getAdultSpecimenContainerREMOVEItem()
			{
				return this.contextMenuAdultSpecimenContainerREMOVEItem;
			}
			private MenuItem contextMenuAdultSpecimenContainerREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[88];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_OCRR.AdultSpecimenContainer", "BO-1061100022-ID", "ID_Container");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_OCRR.AdultSpecimenContainer", "BO-1061100022-TYPE", "Type");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_OCRR.AdultSpecimenContainer", "BO-1061100022-VOLUME", "Volume");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_OCRR.AdultSpecimenContainer", "BO-1061100022-VOLUMEUNITS", "VolumeUnits");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_OCRR.AdultSpecimenContainer", "BO-1061100022-LABELSUFFIX", "LabelSuffix");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_OCRR.PaediatricsContainer", "BO-1061100022-ID", "ID_Container");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_OCRR.PaediatricsContainer", "BO-1061100022-TYPE", "Type");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_OCRR.PaediatricsContainer", "BO-1061100022-VOLUME", "Volume");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_OCRR.PaediatricsContainer", "BO-1061100022-VOLUMEUNITS", "VolumeUnits");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_OCRR.PaediatricsContainer", "BO-1061100022-LABELSUFFIX", "LabelSuffix");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativePaediatricsContainer", "BO-1061100022-ID", "ID_Container");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativePaediatricsContainer", "BO-1061100022-TYPE", "Type");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativePaediatricsContainer", "BO-1061100022-VOLUME", "Volume");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativePaediatricsContainer", "BO-1061100022-VOLUMEUNITS", "VolumeUnits");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativePaediatricsContainer", "BO-1061100022-LABELSUFFIX", "LabelSuffix");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.SpecimenConfiguration.__internal_x_context__Specimen_" + componentIdentifier, "BO-1061100026-ID", "ID_Specimen");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.SpecimenConfiguration.__internal_x_context__Specimen_" + componentIdentifier, "BO-1061100026-TYPE", "Type");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
