//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.34 build 2088.18051)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.admin.vo.lookups.GenderSpecific;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.core.clinical.domain.objects.Service;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.configuration.domain.objects.ContractConfig;
import ims.core.configuration.vo.AppRoleRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVoCollection;
import ims.core.resource.place.vo.OrganisationRefVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.Sex;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.impl.DomainImpl;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.IAppRole;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;
import ims.ocrr.configuration.domain.objects.Investigation;
import ims.ocrr.configuration.domain.objects.InvestigationIndex;
import ims.ocrr.configuration.domain.objects.InvestigationQuestion;
import ims.ocrr.configuration.domain.objects.OrderEntryTemplate;
import ims.ocrr.configuration.domain.objects.OrderSet;
import ims.ocrr.configuration.domain.objects.OrderSetComponent;
import ims.ocrr.configuration.domain.objects.SecurityLevel;
import ims.ocrr.configuration.vo.InvestigationIndexRefVo;
import ims.ocrr.configuration.vo.OrderSetRefVo;
import ims.ocrr.domain.CategoryQuestions;
import ims.ocrr.domain.ItemSelection;
import ims.ocrr.vo.BreachedInvestigationsVo;
import ims.ocrr.vo.BreachedInvestigationsVoCollection;
import ims.ocrr.vo.CategoryQuestionLiteVoCollection;
import ims.ocrr.vo.CategoryQuestionShortVoCollection;
import ims.ocrr.vo.ComponentSelectOrderVo;
import ims.ocrr.vo.ComponentSelectOrderVoCollection;
import ims.ocrr.vo.GenderInvestigationVo;
import ims.ocrr.vo.GenderInvestigationVoCollection;
import ims.ocrr.vo.InvestShortVo;
import ims.ocrr.vo.InvestShortVoCollection;
import ims.ocrr.vo.InvestigationOcsQuestionsVoCollection;
import ims.ocrr.vo.InvestigationQuestionShortVo;
import ims.ocrr.vo.InvestigationQuestionShortVoCollection;
import ims.ocrr.vo.InvestigationQuestionsSelectOrderVo;
import ims.ocrr.vo.InvestigationSelectOrderVo;
import ims.ocrr.vo.InvestigationSelectOrderVoCollection;
import ims.ocrr.vo.OrderEntryTemplateComponentShortVo;
import ims.ocrr.vo.OrderEntryTemplateComponentShortVoCollection;
import ims.ocrr.vo.OrderEntryTemplateShortVoCollection;
import ims.ocrr.vo.OrderEntryTemplateVo;
import ims.ocrr.vo.ReOrderPeriodMessageVo;
import ims.ocrr.vo.ReOrderPeriodMessageVoCollection;
import ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo;
import ims.ocrr.vo.SecurityLevelAndServiceCheckVo;
import ims.ocrr.vo.SecurityLevelConfigVo;
import ims.ocrr.vo.SelectedComponentFromSelectOrderVo;
import ims.ocrr.vo.SelectedComponentFromSelectOrderVoCollection;
import ims.ocrr.vo.ServiceQuestionShortVoCollection;
import ims.ocrr.vo.domain.GenderInvestigationVoAssembler;
import ims.ocrr.vo.domain.InvestigationOcsQuestionsVoAssembler;
import ims.ocrr.vo.domain.InvestigationQuestionShortVoAssembler;
import ims.ocrr.vo.domain.InvestigationQuestionsSelectOrderVoAssembler;
import ims.ocrr.vo.domain.InvestigationSelectOrderVoAssembler;
import ims.ocrr.vo.domain.OrderEntryTemplateShortVoAssembler;
import ims.ocrr.vo.domain.OrderEntryTemplateVoAssembler;
import ims.ocrr.vo.domain.OrderSetSelectOrderVoAssembler;
import ims.ocrr.vo.domain.RoleDisciplineSecurityLevelLiteVoAssembler;
import ims.ocrr.vo.domain.SecurityLevelConfigVoAssembler;
import ims.ocrr.vo.domain.ServiceQuestionShortVoAssembler;
import ims.ocrr.vo.lookups.AuthorisationOrderStatus;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.CategoryCollection;
import ims.ocrr.vo.lookups.LookupHelper;
import ims.ocrr.vo.lookups.MinReorderPeriod;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.ocrr.vo.lookups.SelectAndOrderComponentType;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class SelectandOrderImpl extends DomainImpl implements ims.ocrr.domain.SelectandOrder, ims.domain.impl.Transactional
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	* Returns a list of all active order entry templates
	*/
	public OrderEntryTemplateShortVoCollection listActiveOrderEntryTemplatesForLocationAndRole(ILocation location, AppRoleRefVo role)
	{
		if(location == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		DomainObject locRecord = factory.getDomainObject(Location.class, location.getID());
		List templates;
		if(locRecord instanceof LocSite)
		{
			templates = listOrderEntryTemplates(factory, locRecord, role);
		}
		else 
		{
			//record is of type location go back up the hierarchy until the record's parentLocation is of type LocSite
			//when it is do the same call as above
			Location doLocation = (Location) locRecord;
			
			if(doLocation.getParentLocation() instanceof LocSite)
				templates = listOrderEntryTemplates(factory, doLocation.getParentLocation(), role);
			else
			{
				while(!(doLocation.getParentLocation() instanceof LocSite))
					doLocation = doLocation.getParentLocation();
				
				templates = listOrderEntryTemplates(factory, doLocation.getParentLocation(), role);
			}	
		}
		
		return OrderEntryTemplateShortVoAssembler.createOrderEntryTemplateShortVoCollectionFromOrderEntryTemplate(templates);
	}
	private List listOrderEntryTemplates(DomainFactory factory, DomainObject locRecord, AppRoleRefVo role)
	{
		List templates = factory.find("	select oet from OrderEntryTemplate as oet left join oet.templatesLocations as temploc left join oet.templateRoles as temprole where " +
		"(temprole.appRole.id = :idRole and temprole.isActive = :active and temploc.location.id = :idLocation and temploc.isActive = :active and oet.activeStatus = :activeStatus)", new String[]{"idLocation","idRole","activeStatus", "active"},
				new Object[]{locRecord.getId(), role.getID_AppRole(), getDomLookup(PreActiveActiveInactiveStatus.ACTIVE), Boolean.TRUE});
		return templates;
	}
	
	/**
	 * method will now get the template and filter any items that don't pass security checks WDEV-11071,WDEV-11109
	 */
	public ims.ocrr.vo.OrderEntryTemplateVo getOrderEntryTemplate(ims.ocrr.vo.OrderEntryTemplateShortVo orderEntryTemplate, RoleDisciplineSecurityLevelLiteGCVo voSecurity)
	{
		OrderEntryTemplateVo voOrdTemplate = OrderEntryTemplateVoAssembler.create((OrderEntryTemplate)getDomainFactory().getDomainObject(OrderEntryTemplate.class, orderEntryTemplate.getID_OrderEntryTemplate()));
		
		//enforce Security here
		OrderEntryTemplateComponentShortVoCollection removableComponenets = new OrderEntryTemplateComponentShortVoCollection();
		for(OrderEntryTemplateComponentShortVo comp : voOrdTemplate.getComponents())
		{
			if(comp.getInvestigationIsNotNull())
			{
				if(voSecurity != null)
				{
					SecurityLevelAndServiceCheckVo voSecLevelAndService = getSecurityLevelAndServiceForInvestigation(comp.getInvestigation().getInvestigationIndex().getID_InvestigationIndex());
					if(voSecLevelAndService != null && voSecLevelAndService.getSecurityLevelIsNotNull() && voSecLevelAndService.getServiceIsNotNull())
					{
						if(!voSecurity.doesInvPassSecurityCheck(voSecLevelAndService.getService(),voSecLevelAndService.getSecurityLevel(),true)) //WDEV-11622
						{
							removableComponenets.add(comp);
							continue;
						}
					}
				}
			}
		}
		
		if(removableComponenets.size() > 0)
		{
			for(OrderEntryTemplateComponentShortVo compToRemove : removableComponenets)
			{
				voOrdTemplate.getComponents().remove(compToRemove);
			}
		}
		
		return voOrdTemplate;
	}
	
	/**
	 * method will filter any items that don't pass security checks WDEV-11071,WDEV-11109
	 */
	public ComponentSelectOrderVoCollection getChildComponentsForOrderSet(Integer orderSetID, RoleDisciplineSecurityLevelLiteGCVo voSecurity) 
	{
		ComponentSelectOrderVoCollection components = OrderSetSelectOrderVoAssembler.create((OrderSet)getDomainFactory().getDomainObject(OrderSet.class, orderSetID.intValue())).getComponents();
		
		//enforce Security here
		ComponentSelectOrderVoCollection removableComponenets = new ComponentSelectOrderVoCollection();
		for(ComponentSelectOrderVo comp : components)
		{
			if(comp.getInvestigationIsNotNull())
			{
				if(voSecurity != null)
				{
					SecurityLevelAndServiceCheckVo voSecLevelAndService = getSecurityLevelAndServiceForInvestigation(comp.getInvestigation().getInvestigationIndex().getID_InvestigationIndex());
					if(voSecLevelAndService != null && voSecLevelAndService.getSecurityLevelIsNotNull() && voSecLevelAndService.getServiceIsNotNull())
					{
						if(!voSecurity.doesInvPassSecurityCheck(voSecLevelAndService.getService(),voSecLevelAndService.getSecurityLevel(),true)) //WDEV-11622
						{
							removableComponenets.add(comp);
							continue;
						}
					}
				}
			}
		}
		
		if(removableComponenets.size() > 0)
		{
			for(ComponentSelectOrderVo compToRemove : removableComponenets)
			{
				components.remove(compToRemove);
			}
		}
		
		return components;
	}
	
	/**
	 * method will filter any items that don't pass security checks WDEV-11071,WDEV-11109
	 */
	public InvestigationSelectOrderVo getChildComponentsForInvestigationOrProfile(Integer investigationID, RoleDisciplineSecurityLevelLiteGCVo voSecurity) 
	{
		Investigation doInvest = (Investigation)getDomainFactory().getDomainObject(Investigation.class, investigationID.intValue());
		boolean isProfile =  doInvest.getInvestigationIndex().isIsProfile();
		
		InvestigationSelectOrderVo invest = InvestigationSelectOrderVoAssembler.create((Investigation)getDomainFactory().getDomainObject(Investigation.class, investigationID.intValue()));
	
		//enforce Security here for profiles to filter out children that do not pass the security check
		if(isProfile)
		{
			InvestigationSelectOrderVoCollection removableComponenets = new InvestigationSelectOrderVoCollection();
			for(InvestigationSelectOrderVo comp : invest.getAssocInvestigations())
			{
				if(voSecurity != null)
				{
					SecurityLevelAndServiceCheckVo voSecLevelAndService = getSecurityLevelAndServiceForInvestigation(comp.getID_Investigation());
					if(voSecLevelAndService != null && voSecLevelAndService.getSecurityLevelIsNotNull() && voSecLevelAndService.getServiceIsNotNull())
					{
						if(!voSecurity.doesInvPassSecurityCheck(voSecLevelAndService.getService(),voSecLevelAndService.getSecurityLevel(),true)) //WDEV-11622
						{
							removableComponenets.add(comp);
							continue;
						}
					}
				}
			}
			
			if(removableComponenets.size() > 0)
			{
				for(InvestigationSelectOrderVo compToRemove : removableComponenets)
				{
					invest.getAssocInvestigations().remove(compToRemove);
				}
			}
			
			//if the profile now has no secure children return null which will tell ui that none of the children passed the security check
			if(invest.getAssocInvestigations().size() == 0)
				return null;
		}
		
		return invest;
	}
	
	public SelectedComponentFromSelectOrderVoCollection listInvestigationsOrProfiles(Category category, String name, LocationLiteVo location, ServiceShortVo service, Boolean isProfile, Boolean beginsWith, RoleDisciplineSecurityLevelLiteGCVo roleDiscliplineeSecurityLevels, LocationRefVoCollection locationList) 
	{		
		SelectedComponentFromSelectOrderVoCollection listResults = new SelectedComponentFromSelectOrderVoCollection();
		
		ItemSelection impl = (ItemSelection)getDomainImpl(ItemSelectionImpl.class);
		if(impl != null)
		{
			//WDEV-10065 - pass param here for contract
			InvestShortVoCollection results = impl.listInvestigationsOrProfiles(category, name, location, service, isProfile, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, beginsWith, locationList);
			if(results == null)
				return listResults;
			
			for(int x = 0; x < results.size(); x++)
			{
				InvestShortVo result = results.get(x);
				
				//WDEV-9780 checkSecurityLevel - if doesn't pass continue in loop
				if(roleDiscliplineeSecurityLevels != null)
				{
					ServiceRefVo voInvService = result.getProviderServiceIsNotNull() && result.getProviderService().getLocationServiceIsNotNull() && result.getProviderService().getLocationService().getServiceIsNotNull() ? result.getProviderService().getLocationService().getService() : null;
					SecurityLevelConfigVo voInvSecurityLevel = result.getInvestigationIndexIsNotNull() ? result.getInvestigationIndex().getSecurityLevel() : null;

					if(!roleDiscliplineeSecurityLevels.doesInvPassSecurityCheck(voInvService, voInvSecurityLevel,true)) //WDEV-11622
						continue;
				}

				if(result != null && result.getID_InvestigationIsNotNull() && result.getInvestigationIndexIsNotNull())
				{
					SelectedComponentFromSelectOrderVo component = new SelectedComponentFromSelectOrderVo();
					component.setID(result.getID_Investigation());
					component.setCategory(result.getInvestigationIndex().getCategory());
					component.setText(result.getInvestigationIndex().getName());
					component.setAdditionalLocationInfo(result.getLocationInfo());
					//component.setTooltip(result.getInvestigationIndex().getDescription());
					component.setHelpText(result.buildHelpTextTooltip());
					component.setIsAddon(result.getIsAddon());
					if(result.getProviderServiceIsNotNull() && result.getProviderService().getLocationServiceIsNotNull() && result.getProviderService().getLocationService().getServiceIsNotNull())
						component.setServiceID(result.getProviderService().getLocationService().getService().getID_Service());
					
					component.setMinReOrderPeriod(result.getMinReorderPeriodUnit());
					component.setMinReOrderVal(result.getMinReorderPeriodVal());
					component.setMinReOrderFemalePeriod(result.getFemaleMinReorderPeriodUnit());
					component.setMinReOrderFemaleVal(result.getFemaleMinReorderPeriodVal());
					
					component.setRequiresSite(result.getInvestigationIndex().getRequiresSiteSpecifier());
					component.setGenderSpecific(result.getInvestigationIndex().getGenderSpecific());
					component.setPhlebMayCollect(result.getInvestigationIndex().getPhlebMayCollect());

					component.setTooltip(getComponentInvestigationTooltip(result));

					SelectAndOrderComponentType type = SelectAndOrderComponentType.INVESTIGATION;
					if(result.getInvestigationIndex().getIsProfileIsNotNull() && result.getInvestigationIndex().getIsProfile().booleanValue())
						type = SelectAndOrderComponentType.PROFILE;
					component.setComponentType(type);
					
					if(SelectAndOrderComponentType.PROFILE.equals(type))//WDEV-16624
					{
						component.setAssociatedInvestigations(result.getAssocInvestigations());
					}
					
					listResults.add(component);
				}
			}
		}
		
		return listResults;
	}
	
	
	private String getComponentInvestigationTooltip(InvestShortVo result)
	{
		if (result == null)
			return "";
		
		StringBuilder tooltip = new StringBuilder();
		
		tooltip.append(result.getInvestigationIndex().getDescription());

		if (result.getTurnaroundMeasureIsNotNull() && result.getExpectedTurnaroundIsNotNull())
		{
			tooltip.append(" - Expected Turn Around: ");
			tooltip.append(result.getExpectedTurnaround().toString());
			tooltip.append(" ").append(result.getTurnaroundMeasure().getText());
		}
		else if (result.getProviderServiceIsNotNull() && result.getProviderService().getLocationServiceIsNotNull() && result.getProviderService().getLocationService().getServiceIsNotNull() && result.getProviderService().getLocationService().getService().getExpectedTurnaround() != null)
		{
			tooltip.append(" - Expected Turn Around: ");
			tooltip.append(result.getProviderService().getLocationService().getService().getExpectedTurnaround().toString());
			tooltip.append(" ").append(result.getProviderService().getLocationService().getService().getTurnaroundMeasure().getText());
		}
		
		// Amend '&' characters with space not to cause problems in tool tip boxes
		// as these are HTML and '&' is a special character
		for (int i = tooltip.length() - 1; i >= 0; i--)
		{
			if (tooltip.charAt(i) == '&' && i < tooltip.length() - 1 && tooltip.charAt(i + 1) != ' ')
				tooltip.insert(i, " ");
		}
		
		return tooltip.toString();
	}

	
	public InvestigationQuestionsSelectOrderVo getQuestions(SelectedComponentFromSelectOrderVo component) 
	{
		return InvestigationQuestionsSelectOrderVoAssembler.create((Investigation)getDomainFactory().getDomainObject(Investigation.class, component.getID().intValue()));
	}
	
	public CategoryQuestionShortVoCollection listCategoryQuestions(Category category)
	{
		CategoryQuestions impl = (CategoryQuestions) getDomainImpl(CategoryQuestionsImpl.class);
		return impl.listCategoryQuestions(category);
	}
	
	public CategoryQuestionLiteVoCollection listCategoryQuestionsLite(Category category)
	{
		CategoryQuestions impl = (CategoryQuestions) getDomainImpl(CategoryQuestionsImpl.class);
		return impl.listCategoryQuestionsLite(category);
	}
	
	public CategoryQuestionShortVoCollection listCategoryQuestions(CategoryCollection categories)
	{
		CategoryQuestions impl = (CategoryQuestions) getDomainImpl(CategoryQuestionsImpl.class);
		return impl.listCategoryQuestions(categories);
	}
	
	public ServiceQuestionShortVoCollection listServiceQuestionsByServiceIds(Integer[] serviceIds) 
	{
		if(serviceIds == null || serviceIds.length == 0)
			return null;
		
		StringBuffer hqlStart = new StringBuffer();
		String hql;

		hqlStart.append("select distinct serQuest from ServiceQuestion serQuest where serQuest.service.id in ( ");
		for (int i = 0; i < serviceIds.length; i++)
			hqlStart.append(serviceIds[i].toString() + ",");

		if (hqlStart.toString().endsWith(","))
			hql = hqlStart.toString().substring(0, hqlStart.length() - 1);
		else
			hql = hqlStart.toString();

		hql += " ) order by systemInformation.creationDateTime";
		
		List list = getDomainFactory().find(hql);
		return ServiceQuestionShortVoAssembler.createServiceQuestionShortVoCollectionFromServiceQuestion(list);
	}
	
	/**
	 * Was the Investigation ordered previously for this patient within the min reorder period
	 */
	public ReOrderPeriodMessageVoCollection listInvOrderedWithinMinReOrderPeriod(Integer invId, DateTime dateTimeFrom, DateTime dateTimeTo, PatientRefVo patient, Integer value, MinReorderPeriod unit, Category invCategory, Integer parentId)//WDEV-16580, WDEV-16762
	{		
		DomainFactory factory = getDomainFactory();
		
		StringBuilder queryLatestInvestigation = new StringBuilder("SELECT ordInv");
		queryLatestInvestigation.append(" FROM OcsOrderSession AS ocsOrder LEFT JOIN ocsOrder.investigations AS ordInv LEFT JOIN ordInv.investigation AS inv LEFT JOIN ordInv.ordInvCurrentStatus.ordInvStatus AS invStatus");
		queryLatestInvestigation.append(" WHERE inv.id = :INV_ID AND ocsOrder.patient.id = :PAT_ID AND ocsOrder.authorisationOrderStatus.id = :AUTHORIZED AND");
		queryLatestInvestigation.append(" invStatus.id NOT IN (").append(OrderInvStatus.CANCEL_REQUEST.getID()).append(", ").append(OrderInvStatus.CANCELLED.getID()).append(")");
		queryLatestInvestigation.append(" ORDER BY ordInv.systemInformation.creationDateTime DESC");
		
		ArrayList<String> paramNamesLatestInvestigation = new ArrayList<String>();
		ArrayList<Object> paramValuesLatestInvestigation = new ArrayList<Object>();
		
		paramNamesLatestInvestigation.add("INV_ID");
		paramValuesLatestInvestigation.add(invId);
		
		paramNamesLatestInvestigation.add("PAT_ID");
		paramValuesLatestInvestigation.add(patient.getID_Patient());
		
		paramNamesLatestInvestigation.add("AUTHORIZED");
		paramValuesLatestInvestigation.add(AuthorisationOrderStatus.AUTHORISED.getID());
		
		DomainObject orderInvID = factory.findFirst(queryLatestInvestigation.toString(), paramNamesLatestInvestigation, paramValuesLatestInvestigation);
		
		if (orderInvID == null)
			return null;
		
		
		StringBuilder queryReorderConflict = new StringBuilder("SELECT ocsOrder.systemInformation.creationDateTime, invIndex.name, inv.id, orderInv.requiredByDate");
		queryReorderConflict.append(" FROM OcsOrderSession AS ocsOrder LEFT JOIN ocsOrder.investigations AS orderInv LEFT JOIN orderInv.investigation AS inv LEFT JOIN inv.investigationIndex AS invIndex");
		queryReorderConflict.append(" WHERE orderInv.id = :ORD_INV_ID AND ");
		queryReorderConflict.append(Category.PATHOLOGY.equals(invCategory) ? "orderInv.requiredByDate" : "ocsOrder.systemInformation.creationDateTime");
		queryReorderConflict.append(" between :FROM_DATE and :TO_DATE");
		
		ArrayList<String> paramNamesReorderConflict = new ArrayList<String>();
		ArrayList<Object> paramValuesReorderConflict = new ArrayList<Object>();
		
		paramNamesReorderConflict.add("ORD_INV_ID");
		paramValuesReorderConflict.add(orderInvID.getId());
		
		paramNamesReorderConflict.add("FROM_DATE");
		paramValuesReorderConflict.add(dateTimeFrom.getJavaDate());
		
		paramNamesReorderConflict.add("TO_DATE");
		paramValuesReorderConflict.add(dateTimeTo.getJavaDate());
		
		List items = factory.find(queryReorderConflict.toString(), paramNamesReorderConflict, paramValuesReorderConflict);
		
//		String hql2 = "select ocsOrder.systemInformation.creationDateTime, invIndex.name, inv.id, orderInv.requiredByDate from OcsOrderSession as ocsOrder left join ocsOrder.investigations as orderInv left join orderInv.investigation as inv left join inv.investigationIndex as invIndex " +// 	WDEV-16624
//				"where (inv.id = :invId and ocsOrder.patient.id = :patId and " + (Category.PATHOLOGY.equals(invCategory) ? "orderInv.requiredByDate" : "ocsOrder.systemInformation.creationDateTime") + " between :fromDate and :toDate and ocsOrder.authorisationOrderStatus = :status)";//WDEV-16580		
		
//		List items = factory.find(hql2, new String[]{"invId", "patId", "fromDate", "toDate", "status"}, new Object[]{invId, patient.getID_Patient(), dateTimeFrom.getJavaDate(), dateTimeTo.getJavaDate(), getDomLookup(AuthorisationOrderStatus.AUTHORISED)});
		
		ReOrderPeriodMessageVoCollection voCollMessages = null;
		if(items != null && items.size() > 0)
		{
			voCollMessages = new ReOrderPeriodMessageVoCollection();
			
			for(int i=0; i<items.size(); i++)
			{
				ReOrderPeriodMessageVo voMessage = new ReOrderPeriodMessageVo();
				Object[] item = (Object[])items.get(i);
				voMessage.setOrderedDateTime(new DateTime((Timestamp) item[0]));
				voMessage.setItemName((String) item[1]);
				voMessage.setAmount(value);
				voMessage.setUnit(unit);
				
				if(item[2] instanceof Integer)// 	WDEV-16624
				{
					voMessage.setInvestigationId((Integer) item[2]);
				}
				
				voMessage.setParentId(parentId);//WDEV-16762
				
				if (item[3] != null)
				{
					voMessage.setRequiredByDate(new DateTime((Timestamp) item[3]));
				}
				
				voCollMessages.add(voMessage);
			}
		}

		return voCollMessages;
	}

	public InvestigationQuestionShortVoCollection listInformatonMessagesForInvestigation(Integer investigationId, Integer parentId)//WDEV-16762
	{
		if(investigationId == null)
			throw new CodingRuntimeException("investigationId is null in method listInformatonMessagesForInvestigation");
		
		DomainFactory factory = getDomainFactory();
		
		Investigation domInvest = (Investigation)factory.getDomainObject(Investigation.class, investigationId);
		if (domInvest == null)
			throw new DomainRuntimeException("No investigation found for id = " + investigationId);
				
		List infoQuestions = new ArrayList();
		Iterator it = domInvest.getAssocQuestions().iterator();
		while(it.hasNext())
		{
			InvestigationQuestion invQuest = (InvestigationQuestion)it.next();
			if(!invQuest.getQuestion().isIsQuestion().booleanValue())
				infoQuestions.add(invQuest);
		}
		
		InvestigationQuestionShortVoCollection voCollInvQuestions = InvestigationQuestionShortVoAssembler.createInvestigationQuestionShortVoCollectionFromInvestigationQuestion(infoQuestions);
		for(int i=0;i<voCollInvQuestions.size();i++)
		{
			if(domInvest.getInvestigationIndex() != null)
			{
				voCollInvQuestions.get(i).setInvestigationName(domInvest.getInvestigationIndex().getName());
				voCollInvQuestions.get(i).setInvestigaionId(investigationId);//WDEV-16762
				voCollInvQuestions.get(i).setParentId(parentId);// 	WDEV-16762
			}
		}
		
		return voCollInvQuestions;
	}
	
	public ServiceQuestionShortVoCollection listInformationMessagesForService(Integer serviceId)
	{
		if(serviceId == null)
			throw new CodingRuntimeException("serviceId is null in method listInformationMessagesForService");
		
		String hql = "select distinct serQuest from ServiceQuestion serQuest where serQuest.service.id = :idService and serQuest.questionInformation.isQuestion = :isQuestion";
		List list = getDomainFactory().find(hql, new String[]{"idService","isQuestion"}, new Object[]{ serviceId, Boolean.FALSE});
		if(list != null && list.size() > 0)
			return ServiceQuestionShortVoAssembler.createServiceQuestionShortVoCollectionFromServiceQuestion(list);
		
		return null;
	}
	public InvestigationOcsQuestionsVoCollection listInvestigationOcsQuestions(Integer[] serviceIds)
	{
		if (serviceIds == null || serviceIds.length == 0)
			return null;
		StringBuffer sb = new StringBuffer();

		sb.append(" from Investigation as i1_1 where i1_1.id in ");
		sb.append("(");
		for (int i = 0; i < serviceIds.length; i++)
		{
			sb.append(serviceIds[i]);
			if (i < (serviceIds.length - 1))
				sb.append(", ");
		}
		sb.append(")");
	
		List list = getDomainFactory().find(sb.toString());
		
		return InvestigationOcsQuestionsVoAssembler.createInvestigationOcsQuestionsVoCollectionFromInvestigation(list);
	}
	public Integer[] listServiceIdCollection(Integer[] investigationIdCollection)
	{
		if (investigationIdCollection == null || investigationIdCollection.length == 0)
			return null;

		int invCount = investigationIdCollection.length;

		StringBuffer query = new StringBuffer();
		query.append("select service.id");
		query.append(" from Investigation as inv join inv.providerService as l1_1 join l1_1.locationService as l2_1 join l2_1.service as service");
		query.append(" where");
		query.append(" inv.id in ");

		for (int i = 0; i < invCount; i++)
		{
			if (i == 0)
				query.append(" (");
			query.append(investigationIdCollection[i]);

			if (i == (invCount - 1))
				query.append(")");
			else
				query.append(", ");
		}

		List list = getDomainFactory().find(query.toString());
		if(list == null || list.size() == 0)
			return null;
		
		
		ArrayList<Integer> serviceIds = new ArrayList<Integer>();
		for (Object object : list)
		{
			if (object instanceof Integer)
				serviceIds.add((Integer) object);
		}
		Integer[] results = null;
		if (serviceIds.size() > 0)
			results = new Integer[serviceIds.size()];
		
		serviceIds.toArray(results);

		return results;

	}
	public ReOrderPeriodMessageVoCollection listProfileInvestigationsWithinMinReOrderPeriod(InvestigationIndexRefVo invIndex, PatientShort patient, BreachedInvestigationsVoCollection breachedInvestigations)//WDEV-16624,  	WDEV-16762
	{
		if(invIndex == null || patient == null)
			throw new CodingRuntimeException("invIndex or patient is nul in method listProfileInvestigationsWithinMinReOrderPeriod");
		
		boolean isFemale = patient.getSexIsNotNull() && patient.getSex().equals(Sex.FEMALE);
		
		//get the investigation index's investigations
		DomainFactory factory = getDomainFactory();
		InvestigationIndex doInvIndex = (InvestigationIndex) factory.getDomainObject(invIndex);
		Investigation doFirstInv;
		Iterator it = null;
		
		//assoc Investigations are populated in the first inv off a profile
		if(doInvIndex != null)
			doFirstInv = (Investigation) doInvIndex.getInvestigations().iterator().next();
		else
			doFirstInv = (Investigation) factory.getDomainObject(Investigation.class, invIndex.getID_InvestigationIndex());
		
		it = doFirstInv.getAssocInvestigations().iterator();
		ReOrderPeriodMessageVoCollection voCollMessages = new ReOrderPeriodMessageVoCollection();
		
		while(it.hasNext())
		{
			Investigation doInv = (Investigation) it.next();
			
			if(!isInvestigationInBreachedList(doInv, breachedInvestigations))//WDEV-16624
			{
				LookupInstance femaleUnit = doInv.getFemaleMinReorderPeriodUnit();
				LookupInstance maleUnit = doInv.getMinReorderPeriodUnit();
				
				MinReorderPeriod unit = null;
				if(isFemale && femaleUnit != null)
					unit = LookupHelper.getMinReorderPeriodInstance(getLookupService(), doInv.getFemaleMinReorderPeriodUnit().getId());
				else if(!isFemale && maleUnit != null)
					unit = LookupHelper.getMinReorderPeriodInstance(getLookupService(), doInv.getMinReorderPeriodUnit().getId());
				 
				Integer dataValue = isFemale ?  doInv.getFemaleMinReorderPeriodVal() : doInv.getMinReorderPeriodVal();
				
				if(dataValue == null && unit == null)
					continue;
				
				DateTime[] dateTimes = calculateDateTimeRange(dataValue, unit);
				ReOrderPeriodMessageVoCollection profOrderInvMessages = listInvOrderedWithinMinReOrderPeriod(doInv.getId(),dateTimes[0] , dateTimes[1], patient, dataValue, unit, assembleCategory(doInv.getInvestigationIndex().getCategory()), doFirstInv.getId());//WDEV-16580, WDEV-16762
				if(profOrderInvMessages != null)
				{
					for(ReOrderPeriodMessageVo item : profOrderInvMessages)
						voCollMessages.add(item);
				}
			}
		}
		
		return voCollMessages;
	}
	
	//WDEV-16580
	private Category assembleCategory(LookupInstance categoryInstance)
	{
		if ( null != categoryInstance) 
		{
			ims.framework.utils.ImagePath img = null;
			ims.framework.utils.Color color = null;		
			img = null;
			if (categoryInstance.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(categoryInstance.getImage().getImageId(), categoryInstance.getImage().getImagePath());
			}
			color = categoryInstance.getColor();
			if (color != null) 
				color.getValue();

			ims.ocrr.vo.lookups.Category category = new ims.ocrr.vo.lookups.Category(categoryInstance.getId(),categoryInstance.getText(), categoryInstance.isActive(), null, img, color);
			ims.ocrr.vo.lookups.Category parentCategory = category;
			ims.domain.lookups.LookupInstance parentInstance = categoryInstance.getParent();
			while (parentInstance != null)
			{
				if (parentInstance.getImage() != null) 
				{
					img = new ims.framework.utils.ImagePath(parentInstance.getImage().getImageId(), parentInstance.getImage().getImagePath() );
				}
				else 
				{
					img = null;
				}
				color = parentInstance.getColor();
    			if (color != null) 
    				color.getValue();
								parentCategory.setParent(new ims.ocrr.vo.lookups.Category(parentInstance.getId(),parentInstance.getText(), parentInstance.isActive(), null, img, color));
				parentCategory = parentCategory.getParent();
								parentInstance = parentInstance.getParent();
			}
			
			return category;
		}
		
		return null;
	}
	
	//WDEV-16624
	private boolean isInvestigationInBreachedList(Investigation inv, BreachedInvestigationsVoCollection breachedInvestigations) // 	WDEV-16762
	{
		if(inv == null || breachedInvestigations == null)
			return false;
		
		Iterator<BreachedInvestigationsVo> list = breachedInvestigations.iterator();// 	WDEV-16762
		
		while(list.hasNext())
		{
			BreachedInvestigationsVo item = list.next();// 	WDEV-16762
			
			if(item == null || item.getInvestigationId() == null)
				continue;
			
			if(item.getInvestigationId().equals(inv.getId()))// 	WDEV-16762
				return true;
		}
		
		return false;
	}
	
	public DateTime[] calculateDateTimeRange(Integer val, MinReorderPeriod unit)
	{
		DateTime now = new DateTime();
		DateTime[] arrDateTimes = new DateTime[2];
		arrDateTimes[1] = new DateTime();

		if (unit != null)
		{
			// WDEV-14182
			if (val == null)
			{
				arrDateTimes[0] = now;
			}
			else if (unit.equals(MinReorderPeriod.MINUTES))
			{
				arrDateTimes[0] = now.addMinutes(-val.intValue());
			}
			else if (unit.equals(MinReorderPeriod.HOURS))
			{
				arrDateTimes[0] = now.addMinutes(-val.intValue() * 60);
			}
			else if (unit.equals(MinReorderPeriod.DAYS))
			{
				arrDateTimes[0] = now.addDays(-val.intValue());
			}
			else if (unit.equals(MinReorderPeriod.WEEKS))
			{
				arrDateTimes[0] = now.addDays(-val.intValue() * 7);
			}
			else if (unit.equals(MinReorderPeriod.MONTHS))
			{
				arrDateTimes[0] = now.addMonth(-val.intValue());
			}
		}
		else
			return null;

		return arrDateTimes;
	}
	
	public RoleDisciplineSecurityLevelLiteGCVo getRoleDisciplineSecurityLevels(IAppRole role)
	{
		if (role == null || role.getId() < 1)
			throw new CodingRuntimeException("voRole is null or id not provided in method getRoleDisciplineSecurityLevels");
		
		List roleDispSecs = getDomainFactory().find("from RoleDisciplineSecurityLevel roleDisp where roleDisp.role.id = " + role.getId());
		
		RoleDisciplineSecurityLevelLiteGCVo voRoleDisciplineSecurityLevels = new RoleDisciplineSecurityLevelLiteGCVo();
		
		//to flag we have hit db once already
		voRoleDisciplineSecurityLevels.setIsConfigLoaded(true);
		voRoleDisciplineSecurityLevels.setRoleDisciplineSecurityLevels(RoleDisciplineSecurityLevelLiteVoAssembler.createRoleDisciplineSecurityLevelLiteVoCollectionFromRoleDisciplineSecurityLevel(roleDispSecs));
		
		return voRoleDisciplineSecurityLevels;
	}
	
	//WDEV-10010
	public LocationLiteVoCollection listLocationLiteForReferralContract(CatsReferralRefVo referral, Boolean includePathandRad)
	{		
		if (referral == null)
			throw new CodingRuntimeException("referral cannot be null in method listLocationLiteForReferralContract");
		if (includePathandRad == null)
			throw new CodingRuntimeException("includePathandRad cannot be null in method listLocationLiteForReferralContract");
	
		DomainFactory factory = getDomainFactory();
		
		List ccs = factory.find(" select catsRef.contract from CatsReferral as catsRef where catsRef.id = " + referral.getID_CatsReferral());
		if(ccs != null && ccs.size() > 0)
		{
			ContractConfig doCC = (ContractConfig) ccs.get(0);
			if (doCC.getContractOrganisation() != null)
			{
				OrganisationRefVo voOrgRef = new OrganisationRefVo();
				voOrgRef.setID_Organisation(doCC.getContractOrganisation().getId());
				
				OrganisationAndLocation impl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
				if(includePathandRad)
					return impl.listLocationByOrganisationIncludingPathAndRadTypes(voOrgRef);
				else
					return impl.listLocationByOrganisation(voOrgRef, "");
			}
			return null;
		}
	
		return null;
	}
	public SecurityLevelAndServiceCheckVo getSecurityLevelAndServiceForInvestigation(Integer idInvestigation)
	{
		if (idInvestigation == null)
			throw new CodingRuntimeException("idInvestigation is null in method getSecurityLevelForInvestigation");
		
		SecurityLevelAndServiceCheckVo voToReturn = new SecurityLevelAndServiceCheckVo();
		
		List lstSecLevels = getDomainFactory().find("select invIndex.securityLevel, ls.service from InvestigationIndex as invIndex left join invIndex.investigations as inv left join inv.providerService as ps left join ps.locationService as ls where invIndex.id = " + idInvestigation); //WDEV-11674 
		
		if(lstSecLevels != null && lstSecLevels.size() == 1)
		{
			Object[] arrVals = (Object[]) lstSecLevels.get(0);
			SecurityLevel doSecLevel = (SecurityLevel) arrVals[0];
			Service doService = (Service) arrVals[1];
			
			if(doSecLevel != null)
				voToReturn.setSecurityLevel(SecurityLevelConfigVoAssembler.create(doSecLevel));
			if(doService != null)
				voToReturn.setService(new ServiceRefVo(doService.getId(), doService.getVersion()));
			
		}
		
		return voToReturn;
	}
	
	//WDEV-16624
	public ReOrderPeriodMessageVoCollection listOrderSetInvestigationsWithinMinReOrderPeriod(OrderSetRefVo orderSet, PatientShort patient, BreachedInvestigationsVoCollection breachedInvestigations) // 	WDEV-16762
	{
		if(orderSet == null || patient == null)
			throw new CodingRuntimeException("orderSet or patient is null in method listOrderSetInvestigationsWithinMinReOrderPeriod");
		
		boolean isFemale = patient.getSexIsNotNull() && patient.getSex().equals(Sex.FEMALE);
		
		DomainFactory factory = getDomainFactory();
		OrderSet doOrderSet = (OrderSet) factory.getDomainObject(orderSet);
		
		if(doOrderSet == null || doOrderSet.getComponent() == null)
			return null;
		
		Iterator it = doOrderSet.getComponent().iterator();
		
		ReOrderPeriodMessageVoCollection voCollMessages = new ReOrderPeriodMessageVoCollection();
		
		while(it.hasNext())
		{
			Object comp = it.next();
			if(!(comp instanceof OrderSetComponent))
				continue;
			
			Investigation doInv = ((OrderSetComponent) comp).getInvestigation();
			
			ReOrderPeriodMessageVoCollection profOrderInvMessages = listMessages(doInv, patient, isFemale, breachedInvestigations, null);//WDEV-16762
			
			if(profOrderInvMessages != null)
			{
				for(ReOrderPeriodMessageVo item : profOrderInvMessages)
					voCollMessages.add(item);
			}
		}
		
		return voCollMessages;
	}
	
	//WDEV-16624
	private ReOrderPeriodMessageVoCollection listMessages(Investigation doInv, PatientShort patient, boolean isFemale, BreachedInvestigationsVoCollection breachedInvestigations, Integer parentId) //WDEV-16762
	{
		if(doInv == null)
			return null;
		
		if(Boolean.TRUE.equals(doInv.getInvestigationIndex().isIsProfile()))
		{
			if(doInv.getAssocInvestigations() != null)
			{
				Iterator it = doInv.getAssocInvestigations().iterator();
				ReOrderPeriodMessageVoCollection messages = new ReOrderPeriodMessageVoCollection();//WDEV-16624
				
				while(it.hasNext())
				{
					Object comp = it.next();
					
					if(!(comp instanceof Investigation))
						continue;
					
					addMessagesCollection(messages, listMessages((Investigation)comp, patient, isFemale, breachedInvestigations, doInv.getId()));//WDEV-16624, WDEV-16762
				}
				
				return messages;//WDEV-16624
			}
		}
		else
		{
			if(isInvestigationInBreachedList(doInv, breachedInvestigations))
				return null;
		}
		
		LookupInstance femaleUnit = doInv.getFemaleMinReorderPeriodUnit();
		LookupInstance maleUnit = doInv.getMinReorderPeriodUnit();
		
		MinReorderPeriod unit = null;
		if(isFemale && femaleUnit != null)
			unit = LookupHelper.getMinReorderPeriodInstance(getLookupService(), doInv.getFemaleMinReorderPeriodUnit().getId());
		else if(!isFemale && maleUnit != null)
			unit = LookupHelper.getMinReorderPeriodInstance(getLookupService(), doInv.getMinReorderPeriodUnit().getId());
		 
		Integer dataValue = isFemale ?  doInv.getFemaleMinReorderPeriodVal() : doInv.getMinReorderPeriodVal();
		
		if(dataValue == null && unit == null)
			return null;
		
		DateTime[] dateTimes = calculateDateTimeRange(dataValue, unit);
		
		return listInvOrderedWithinMinReOrderPeriod(doInv.getId(),dateTimes[0] , dateTimes[1], patient, dataValue, unit, assembleCategory(doInv.getInvestigationIndex().getCategory()), parentId);//WDEV-16580, WDEV-16762
	}
	
	//WDEV-16624
	private void addMessagesCollection(ReOrderPeriodMessageVoCollection allMessages, ReOrderPeriodMessageVoCollection newMessages) 
	{
		if(newMessages == null || newMessages.size() == 0)
			return;
		
		if(allMessages == null)
			allMessages = new ReOrderPeriodMessageVoCollection();
		
		for(ReOrderPeriodMessageVo message : newMessages)
		{
			if(message == null)
				continue;
			
			allMessages.add(message);
		}
	}

	//WDEV-16762
	public GenderInvestigationVoCollection listOrderSetInvestigationsWithGenderMessages(OrderSetRefVo orderSet, Boolean isFemale) 
	{
		if(orderSet == null)
			throw new CodingRuntimeException("orderSet is null in method listOrderSetInvestigationsWithGenderMessages.");
		
		boolean female = Boolean.TRUE.equals(isFemale);
		
		DomainFactory factory = getDomainFactory();
		OrderSet doOrderSet = (OrderSet) factory.getDomainObject(orderSet);
		
		if(doOrderSet == null || doOrderSet.getComponent() == null)
			return null;
		
		Iterator it = doOrderSet.getComponent().iterator();
		GenderInvestigationVoCollection list = new GenderInvestigationVoCollection();//WDEV-16762
		
		while(it.hasNext())
		{
			Object comp = it.next();
			if(!(comp instanceof OrderSetComponent))
				continue;
			
			Investigation doInv = ((OrderSetComponent) comp).getInvestigation();
			
			GenderInvestigationVoCollection invGenderMessages = listGenderMessages(doInv, female, null);//WDEV-16762
			
			if(invGenderMessages != null)
			{
				for(GenderInvestigationVo item : invGenderMessages)//WDEV-16762
					list.add(item);
			}
		}
		
		return list;
	}
	
	//WDEV-16762
	private GenderInvestigationVoCollection listGenderMessages(Investigation doInv,	boolean female, GenderInvestigationVo parentInv)//WDEV-16762 
	{
		if(doInv == null)
			return null;
		
		GenderInvestigationVoCollection messages = new GenderInvestigationVoCollection();//WDEV-16762
		
		if(Boolean.TRUE.equals(doInv.getInvestigationIndex().isIsProfile()))
		{
			GenderInvestigationVo profileInv = isInvAppropriate(assembleGenderSpecific(doInv.getInvestigationIndex().getGenderSpecific()), female, doInv);//WDEV-16762
			
			boolean isProfileAdded = false;//WDEV-16762
			
			//WDEV-16762
			if(profileInv != null)
			{
				isProfileAdded = true;
				messages.add(profileInv);
			}
			else
			{
				profileInv = GenderInvestigationVoAssembler.create(doInv);//WDEV-16762
			}
			
			if(doInv.getAssocInvestigations() != null)
			{
				Iterator it = doInv.getAssocInvestigations().iterator();
				
				while(it.hasNext())
				{
					Object comp = it.next();
					
					if(!(comp instanceof Investigation))
						continue;
					
					addGenderMessagesCollection(messages, listGenderMessages((Investigation)comp, female, profileInv));//WDEV-16762
				}
				
				//WDEV-16762
				if(profileInv!= null && profileInv.getAssocInvestigation() != null && profileInv.getAssocInvestigation().size() > 0 && !isProfileAdded)
				{
					messages.add(profileInv);
				}
				
				return messages;
			}
		}
		
		GenderInvestigationVo childInv = isInvAppropriate(assembleGenderSpecific(doInv.getInvestigationIndex().getGenderSpecific()), female, doInv);//WDEV-16762
		
		//WDEV-16762
		if(parentInv != null)
		{
			if(parentInv.getAssocInvestigation() == null)
				parentInv.setAssocInvestigation(new GenderInvestigationVoCollection());
			
			parentInv.getAssocInvestigation().add(childInv);
		}
		else
		{
			messages.add(childInv);
		}
		
		return messages;
	}
	
	//WDEV-16762
	private GenderSpecific assembleGenderSpecific(LookupInstance genderSpecificInstance) 
	{
		if ( null != genderSpecificInstance ) 
		{
			ims.admin.vo.lookups.GenderSpecific genderSpecific = new ims.admin.vo.lookups.GenderSpecific(genderSpecificInstance.getId(),genderSpecificInstance.getText(), genderSpecificInstance.isActive(), null, null, null);		
			return genderSpecific;
		}
		
		return null;
	}
	
	//WDEV-16762
	private GenderInvestigationVo isInvAppropriate(GenderSpecific instGenderSpecific, boolean isFemale, Investigation doInv)
	{
		if (instGenderSpecific != null)
		{
			if (!instGenderSpecific.equals(GenderSpecific.NOTAPPLICABLE))
			{
				if (instGenderSpecific.equals(GenderSpecific.FEMALE))
				{
					if (!isFemale)
						return GenderInvestigationVoAssembler.create(doInv);//WDEV-16762
				}
				else if (instGenderSpecific.equals(GenderSpecific.MALE))
				{
					if (isFemale)
						return GenderInvestigationVoAssembler.create(doInv);//WDEV-16762
				}
			}
		}
		
		return null;
	}
	
	//WDEV-16762
	private void addGenderMessagesCollection(GenderInvestigationVoCollection messages, GenderInvestigationVoCollection genderInvestigationVoCollection)
	{
		if(genderInvestigationVoCollection == null || genderInvestigationVoCollection.size() == 0)
			return;
		
		if(messages == null)
			messages = new GenderInvestigationVoCollection();
		
		for(GenderInvestigationVo inv : genderInvestigationVoCollection)
		{
			messages.add(inv);
		}
	}
	
	//WDEV-16762
	public GenderInvestigationVoCollection listProfileInvestigationsWithGenderMessages(InvestigationIndexRefVo profile, Boolean isFemale) 
	{
		if(profile == null || profile.getID_InvestigationIndex() == null)
			throw new CodingRuntimeException("profile is null in method listProfileInvestigationsWithGenderMessages.");
		
		boolean female = Boolean.TRUE.equals(isFemale);
		
		//get the investigation index's investigations
		DomainFactory factory = getDomainFactory();
		InvestigationIndex doInvIndex = (InvestigationIndex) factory.getDomainObject(profile);
		Investigation doProfile;
		
		//assoc Investigations are populated in the first inv off a profile
		if(doInvIndex != null)
			doProfile = (Investigation) doInvIndex.getInvestigations().iterator().next();
		else
			doProfile = (Investigation) factory.getDomainObject(Investigation.class, profile.getID_InvestigationIndex());
		
		if(doProfile == null)
			return null;
		
		return listGenderMessages(doProfile, female, null);//WDEV-16762
	}
	
	//WDEV-16762
	public InvestigationQuestionShortVoCollection listInformatonMessagesForOrderSet(OrderSetRefVo orderSet) 
	{
		if(orderSet == null)
			throw new CodingRuntimeException("orderSet is null in method listInformatonMessagesForOrderSet.");
		
		DomainFactory factory = getDomainFactory();
		OrderSet doOrderSet = (OrderSet) factory.getDomainObject(orderSet);
		
		if(doOrderSet == null || doOrderSet.getComponent() == null)
			return null;
		
		Iterator it = doOrderSet.getComponent().iterator();
		InvestigationQuestionShortVoCollection list = new InvestigationQuestionShortVoCollection();
		
		while(it.hasNext())
		{
			Object comp = it.next();
			if(!(comp instanceof OrderSetComponent))
				continue;
			
			Investigation doInv = ((OrderSetComponent) comp).getInvestigation();
			
			InvestigationQuestionShortVoCollection infoMessages = listInfoMessages(doInv, null);//WDEV-16762
			
			if(infoMessages != null)
			{
				for(InvestigationQuestionShortVo item : infoMessages)
					list.add(item);
			}
		}
		
		return list;
	}
	
	//WDEV-16762
	private InvestigationQuestionShortVoCollection listInfoMessages(Investigation doInv, Integer parentId) //WDEV-16762
	{
		if(doInv == null)
			return null;
		
		if(Boolean.TRUE.equals(doInv.getInvestigationIndex().isIsProfile()))
		{
			InvestigationQuestionShortVoCollection infoQuestions = new InvestigationQuestionShortVoCollection();
			
			if(doInv.getAssocInvestigations() != null)
			{
				Iterator it = doInv.getAssocInvestigations().iterator();
				
				while(it.hasNext())
				{
					Object comp = it.next();
					
					if(!(comp instanceof Investigation))
						continue;
					
					addInfoQuestionsCollection(infoQuestions, listInfoMessages((Investigation)comp, doInv.getId()));//WDEV-16762
				}
				
				return infoQuestions;
			}
		}
		
		return listInformatonMessagesForInvestigation(doInv.getId(), parentId);//WDEV-16762
	}
	
	//WDEV-16762
	private void addInfoQuestionsCollection(InvestigationQuestionShortVoCollection allInfoQuestions, InvestigationQuestionShortVoCollection newInfoMessages) 
	{
		if(newInfoMessages == null || newInfoMessages.size() == 0)
			return;
		
		if(allInfoQuestions == null)
			allInfoQuestions = new InvestigationQuestionShortVoCollection();
		
		for(InvestigationQuestionShortVo message : newInfoMessages)
		{
			if(message == null)
				continue;
			
			allInfoQuestions.add(message);
		}
	}
	
	//WDEV-16762
	public InvestigationQuestionShortVoCollection listInformationMessagesForProfiles(InvestigationIndexRefVo profile) 
	{
		if(profile == null || profile.getID_InvestigationIndex() == null)
			throw new CodingRuntimeException("profile is null in method listProfileInvestigationsWithGenderMessages.");
		
		DomainFactory factory = getDomainFactory();
		InvestigationIndex doInvIndex = (InvestigationIndex) factory.getDomainObject(profile);
		Investigation doProfile;
		
		//assoc Investigations are populated in the first inv off a profile
		if(doInvIndex != null)
			doProfile = (Investigation) doInvIndex.getInvestigations().iterator().next();
		else
			doProfile = (Investigation) factory.getDomainObject(Investigation.class, profile.getID_InvestigationIndex());
		
		if(doProfile == null)
			return null;
		
		return listInfoMessages(doProfile, doProfile.getId());//WDEV-16762
	}
	
	//WDEV-16762
	public InvestigationIndexRefVo getInvestigationIndex(Integer investigationId) 
	{
		if(investigationId == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		List<?> list = factory.find("select invIndex from Investigation as inv left join inv.investigationIndex as invIndex where inv.id = " + investigationId);
		
		if(list == null || list.size() == 0)
			return null;
		
		if(list.get(0) instanceof InvestigationIndex)
		{
			return new InvestigationIndexRefVo(((InvestigationIndex) list.get(0)).getId(), ((InvestigationIndex) list.get(0)).getVersion());
		}
		
		return null;
	}
}
