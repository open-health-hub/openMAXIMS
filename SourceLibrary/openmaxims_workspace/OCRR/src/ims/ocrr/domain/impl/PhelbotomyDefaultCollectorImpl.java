//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2392.15620)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.clinical.domain.objects.Service;
import ims.core.domain.Reports;
import ims.core.domain.impl.ReportsImpl;
import ims.core.resource.place.domain.objects.Location;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.domain.base.impl.BasePhlebotomyCollectionRoundImpl;
import ims.ocrr.orderingresults.domain.objects.PhlebotomyRound;
import ims.ocrr.orderingresults.domain.objects.SpecimenWorkListItem;
import ims.ocrr.orderingresults.vo.PhlebotomyRoundRefVo;
import ims.ocrr.vo.OrderSpecimenLiteVoCollection;
import ims.ocrr.vo.PhlebotomyRoundVo;
import ims.ocrr.vo.SpecimenWorkListitemCustomVoCollection;
import ims.ocrr.vo.domain.OrderSpecimenLiteVoAssembler;
import ims.ocrr.vo.domain.PhlebotomyRoundVoAssembler;
import ims.ocrr.vo.lookups.SpecimenCollectionStatus;

import java.util.ArrayList;
import java.util.List;

public class PhelbotomyDefaultCollectorImpl extends BasePhlebotomyCollectionRoundImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listHcp
	*/
	public ims.core.vo.HcpCollection listHcp(String name)
	{
		if(name == null || name.length() == 0)
			throw new DomainRuntimeException("Filter not supplied");
			
		HcpFilter filter = new HcpFilter();
		filter.setQueryName(new PersonName());
		filter.getQueryName().setSurname(name);
		
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHCPs(filter);
	}

	public PhlebotomyRoundVo savePhlebotomyRound(PhlebotomyRoundVo phlebotomyRoundItem, SpecimenWorkListitemCustomVoCollection collectionItems) throws StaleObjectException
	{
		//long t1 = System.currentTimeMillis();
		
		DomainFactory factory = getDomainFactory();
		
		PhlebotomyRound phlebotomyRoundItemBo = PhlebotomyRoundVoAssembler.extractPhlebotomyRound(factory, phlebotomyRoundItem);
		
		for (int i = 0; collectionItems!=null && i < collectionItems.size(); i++)//WDEV-12893
		{
			SpecimenWorkListItem workListItemBo = (SpecimenWorkListItem) factory.getDomainObject(SpecimenWorkListItem.class, collectionItems.get(i).getWorkListitemId());
			
			if(workListItemBo.getSpecimen() != null 
					&& workListItemBo.getSpecimen().getOrder() != null
					&& workListItemBo.getSpecimen().getOrder().getPatient() != null)
			{
				//workListItemBo.setWard(workListItemBo.getSpecimen().getOrder().getPatient().getWard());
				workListItemBo.setWard((Location) factory.getDomainObject(Location.class, collectionItems.get(i).getWardId()));
				factory.save(workListItemBo);
			}
			else if (workListItemBo.getDFTOrderInvestigation() != null)
			{
				workListItemBo.setWard((Location) factory.getDomainObject(Location.class, collectionItems.get(i).getWardId()));
				workListItemBo.setCollectionStatus(factory.getLookupInstance(SpecimenCollectionStatus.COLLECTIONCOMPLETE.getId()));
			}
			
			phlebotomyRoundItemBo.getCollectionItems().add(workListItemBo);
		}
		
		factory.save(phlebotomyRoundItemBo);
		
		//long t2 = System.currentTimeMillis();
		
		//System.out.println((t2-t1) + " ms");
		
		return PhlebotomyRoundVoAssembler.create(phlebotomyRoundItemBo);
	}

	public String[] getReportAndTemplate(Integer reportId, Integer templateId)
	{
		Reports impl = (Reports) getDomainImpl(ReportsImpl.class);
		return impl.getReportAndTemplate(reportId, templateId);
	}

	//WDEV-17760
	public String[] getSystemReportAndTemplate(Integer imsId) 
	{
		String[] result = null;
		
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.imsId= :imsid) order by t1_1.name", new String[] {"imsid"}, new Object[] {imsId});
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
			
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
		
		return result;
	}

	public OrderSpecimenLiteVoCollection getSpecimenForRound(PhlebotomyRoundRefVo round) 
	{
		if (round == null )
		{
			throw new CodingRuntimeException("Cannot get Location on null Id ");
		}
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		
		hql.append("select s1_1.specimen ");			
		hql.append(" from PhlebotomyRound as p1_1 left join p1_1.collectionItems as s1_1 ");
		hql.append(" where ");
		hql.append(" (p1_1.id = :PhlebotomyRound_id) and p1_1.isRIE is null  ");
		hql.append("  order by s1_1.specimen asc  ");
		
		List<?> list  = factory.find(hql.toString(), new String[] {"PhlebotomyRound_id"}, new Object[] {round.getID_PhlebotomyRound()});
				
		return OrderSpecimenLiteVoAssembler.createOrderSpecimenLiteVoCollectionFromOrderSpecimen(list);	
	}

	public String[] getSystemReportAndTemplateByReportMapping(Integer lookupInstanceId, ServiceLiteVo modality, Boolean isDFT)
	{
		if(modality != null && isDFT != null)
		{
			return getSystemReportAndTemplateFromModalityReportsConfiguration(modality, isDFT);
		}
		else
		{
			return getSystemReportAndTemplateFromMapping(lookupInstanceId);
		}
	}

	private String[] getSystemReportAndTemplateFromMapping(Integer lookupInstanceId)
	{
		if(lookupInstanceId == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		String reportId = null;
		String query = "select lm.extCode from LookupInstance as li left join li.mappings as lm where (li.id = :LookupInstanceId and lm.extSystem = :TaxonomyType) ";
		
		List<?> list = factory.find(query, new String[] {"LookupInstanceId", "TaxonomyType"}, new Object[] {lookupInstanceId, TaxonomyType.REPORTS.getText()});
		
		if(list != null && list.size() > 0 && list.get(0) instanceof String)
		{
			reportId = (String) list.get(0);
		}
		
		if(reportId == null)	
			return null;
		
		Integer ReportId = null;
		Integer IMSReportId = null;
		
		try
		{
			IMSReportId = Integer.parseInt(reportId);
		}
		catch(NumberFormatException e)
		{
			int idIndex = reportId.indexOf("ID");
			if(idIndex >= 0)
			{
				String reportIdSecond = reportId.substring(idIndex + 2);
				
				try
				{
					ReportId = Integer.parseInt(reportIdSecond);
				}
				catch(NumberFormatException e1)
				{
			
				}
			}
		}
		
		if(IMSReportId == null && ReportId == null)
			return null;
		
		String[] result = null;	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		String reportQuery = "select r.reportXml, t.templateXml from ReportBo as r left join r.templates as t where";
		
		List<?> lst = null;
		
		if(IMSReportId != null)
		{
			reportQuery += " (r.imsId= :imsid)";
			markers.add("imsid");
			values.add(IMSReportId);
		}
		else if(ReportId != null)
		{
			reportQuery += " (r.id= :repid)";
			markers.add("repid");
			values.add(ReportId);
		}
		reportQuery += " order by t.name";
		
		lst = factory.find(reportQuery, markers, values);
		
		if(lst == null)
			return null;
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
			result = new String[] {(String)obj[0], (String)obj[1]};
		}
		
		return result;
	}

	private String[] getSystemReportAndTemplateFromModalityReportsConfiguration(ServiceLiteVo modality, Boolean isDFT)
	{
		String[] result = null;	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		DomainFactory factory = getDomainFactory();
		
		String reportQuery = "select r1_1.reportXml, t1_1.templateXml from ModalityReports as m1_1 join m1_1.template as t1_1 join t1_1.report as r1_1 where  (m1_1.modality.id = (:MODALITY) and m1_1.dFTReport = (:DFT))";
		
		markers.add("MODALITY");
		values.add(modality.getID_Service());
		markers.add("DFT");
		values.add(isDFT);

		List<?> lst = factory.find(reportQuery, markers, values);
		
		if(lst == null)
			return null;
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
			result = new String[] {(String)obj[0], (String)obj[1]};
		}
		
		return result;
	}

	
	public ServiceLiteVo getModality(Integer orderInvId)
	{
		if(orderInvId == null)
			throw new CodingRuntimeException("orderInv parameter is null in method getModality");
		
		DomainFactory factory = getDomainFactory();
		String hql = "select o2_1.discipline from OrderInvestigation as o1_1 join o1_1.specimen as o2_1 where (o1_1.id = (:ID)) ";
		List list = factory.find(hql,new String[] {"ID"},new Object[] {orderInvId});

		if(list.size() > 0)
			return ServiceLiteVoAssembler.create((Service) list.get(0));
		
		//if current OrderInvestigation doesn't have a specimen we get the modality as follows:
		//OrderInvestigation.investigation.providerService.locationService.service
		hql = "select l2_1.service from OrderInvestigation as o1_1 left join o1_1.investigation as i1_1 left join i1_1.providerService as l1_1 left join l1_1.locationService as l2_1 left join l2_1.service as s1_1 where (o1_1.id = :ID)";
		list = factory.find(hql,new String[] {"ID"},new Object[] {orderInvId});

		if(list.size() > 0)
			return ServiceLiteVoAssembler.create((Service) list.get(0));
		
		return null;
	}

	public ServiceLiteVo getModalityBySpecimenId(Integer specimenId)
	{
		if(specimenId == null)
			throw new CodingRuntimeException("orderSpecimen Id is null in method getModality");
		
		DomainFactory factory = getDomainFactory();
		String hql = "select o1_1.discipline from OrderSpecimen as o1_1 where o1_1.id = (:ID))";
		List list = factory.find(hql,new String[] {"ID"},new Object[] {specimenId});

		if(list.size() > 0)
			return ServiceLiteVoAssembler.create((Service) list.get(0));
					
		return null;
	}
}
