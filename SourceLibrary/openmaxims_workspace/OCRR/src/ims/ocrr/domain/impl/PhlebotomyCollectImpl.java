//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2393.21546)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.domain.impl;

import ims.core.patient.domain.objects.Patient;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.HcpAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.ocrr.domain.PhlebotomyCollectionRound;
import ims.ocrr.domain.base.impl.BasePhlebotomyCollectImpl;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.orderingresults.domain.objects.OrderSpecimen;
import ims.ocrr.orderingresults.domain.objects.PhlebotomyRound;
import ims.ocrr.orderingresults.domain.objects.SpecimenWorkListItem;
import ims.ocrr.orderingresults.vo.OrderSpecimenRefVo;
import ims.ocrr.orderingresults.vo.PhlebotomyRoundRefVo;
import ims.ocrr.vo.OrderSpecimenVo;
import ims.ocrr.vo.SpecimenWorkListItemListVo;
import ims.ocrr.vo.SpecimenWorkListItemVo;
import ims.ocrr.vo.SpecimenWorkListitemCustomVo;
import ims.ocrr.vo.SpecimenWorkListitemCustomVoCollection;
import ims.ocrr.vo.domain.OrderSpecimenVoAssembler;
import ims.ocrr.vo.domain.PhlebotomyRoundShortVoAssembler;
import ims.ocrr.vo.domain.PhlebotomyRoundVoAssembler;
import ims.ocrr.vo.domain.SpecimenWorkListItemListVoAssembler;
import ims.ocrr.vo.domain.SpecimenWorkListItemVoAssembler;
import ims.ocrr.vo.lookups.OcsDisplayFlag;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.ocrr.vo.lookups.SpecimenCollectionMethod;
import ims.ocrr.vo.lookups.SpecimenCollectionStatus;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class PhlebotomyCollectImpl extends BasePhlebotomyCollectImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listRoundsByDate
	*/
	public ims.ocrr.vo.PhlebotomyRoundShortVoCollection listRoundsByDate(ims.framework.utils.Date date)
	{
		if(date == null)
			   throw new CodingRuntimeException("Coding Error = date is null (listRoundsByDate) ");
		
		List list = getDomainFactory().find("from PhlebotomyRound as p1_1 where	(p1_1.date = :DATE)", 
				new String[] {"DATE"}, new Object[] {date.getDate()});
		
		return PhlebotomyRoundShortVoAssembler.createPhlebotomyRoundShortVoCollectionFromPhlebotomyRound(list);
	}

	/**
	* getPhlebotomyRecord
	*/
	public ims.ocrr.vo.PhlebotomyRoundVo getPhlebotomyRecord(ims.ocrr.orderingresults.vo.PhlebotomyRoundRefVo ref)
	{
		return PhlebotomyRoundVoAssembler.create(
				(PhlebotomyRound)getDomainFactory().getDomainObject(PhlebotomyRound.class, ref.getID_PhlebotomyRound()));
	}

	public SpecimenWorkListitemCustomVoCollection listWorkListItems(PhlebotomyRoundRefVo round, SpecimenCollectionStatus status)
	{
		//WDEV-2501 
		String hql = "select s1_1.id, s1_1.collectionStatus.id, o1_1.collectingMos.id, o1_1.collDateTimePlacer, o1_1.collectorComment, o1_1.instructionsToCollector, m1_1.name.surname, m1_1.name.forename, l1_1.text, s2_1.id, s2_1.serviceName, i2_1.name, p3_1.id, p3_1.name.surname, p3_1.name.forename, l3_1.id, l3_1.name, o4_1.id, o4_1.containerQuantity, p5_1.name, o1_1.id, " +
					 " dftServ.id, dftServ.serviceName, dftInvIdx.name, dftPat.id, dftPat.name.surname, dftPat.name.forename, dftPatWard.id, dftPatWard.name, dftAdultCont.id, dftAdultSpecCont.name, dftPaedCont.id, dftPaedSpecCont.name, dftInv.noLabelSets, dftAdultCont.volume, dftAdultSpecCont.volume, dftPaedCont.volume, dftPaedSpecCont.volume "+
		"from PhlebotomyRound as p1_1 left join p1_1.collectionItems as s1_1 left join s1_1.specimen as o1_1 left join o1_1.collectingMos as m1_1 left join m1_1.name.title as l1_1 left join o1_1.discipline as s2_1 left join o1_1.investigations as o2_1 left join o2_1.investigation as i1_1 left join i1_1.investigationIndex as i2_1 " +
		"left join o1_1.order as o3_1 left join o3_1.patient as p3_1 left join p3_1.name.title as l2_1 left join p3_1.ward as l3_1 left join o1_1.containers as o4_1 left join o4_1.container as p5_1 left join s1_1.listType as l4_1 left join s1_1.roundToCollect as l5_1 left join s1_1.collectionStatus as l6_1 " +
		//WDEV-17829
		"left join s1_1.dFTOrderInvestigation as dft left join dft.ordInvCurrentStatus.ordInvStatus as dftOrdInvStat left join dft.investigation as dftInv left join dftInv.pathInvDetails as dftPathInvDet left join dftPathInvDet.specimens as dftSpec left join dftSpec.adultContainers as dftAdultCont " + 
		"left join dftAdultCont.specContainer as dftAdultSpecCont left join dftSpec.paediatricContainers as dftPaedCont left join dftPaedCont.specContainer as dftPaedSpecCont left join dftInv.providerService as provServ " +
		"left join provServ.locationService as locServ left join locServ.service as dftServ left join dftInv.investigationIndex as dftInvIdx left join dft.orderDetails as dftOrdDet left join dftOrdDet.patient as dftPat left join dftPat.ward as dftPatWard";
		
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		condStr.append(andStr + " p1_1.id = :PROUND");
		markers.add("PROUND");
		values.add(round.getID_PhlebotomyRound());
		andStr = " and ";
		
		if(status != null)
		{
			condStr.append(andStr + " s1_1.collectionStatus = :STATUS");
			markers.add("STATUS");
			values.add(getDomLookup(status));
			andStr = " and ";
		}
		else
		{
			condStr.append(andStr + " s1_1.collectionStatus != :STATUS");
			markers.add("STATUS");
			values.add(getDomLookup(SpecimenCollectionStatus.AWAITING_AUTHORISATION));
			andStr = " and ";
		}
		
		//WDEV-12898
		condStr.append(andStr + " ((o1_1 is not null and o2_1.ordInvCurrentStatus.ordInvStatus.id <> :CANCELLEDID and o2_1.ordInvCurrentStatus.ordInvStatus.id <> :CANCELREQUESTID) or (o1_1 is null and dftOrdInvStat.id <> :CANCELLEDID and dftOrdInvStat.id <> :CANCELREQUESTID))) ");
		markers.add("CANCELLEDID");
		markers.add("CANCELREQUESTID");
		values.add(OrderInvStatus.CANCELLED.getID());
		values.add(OrderInvStatus.CANCEL_REQUEST.getID());
		andStr = " and ";
		
		if (andStr.equals(" and "))
		{
			hql += " where ";
		}
		
		hql += condStr.toString();
		hql += " order by dftPatWard.name asc, l3_1.name asc, dftPat.name.surname asc, dftPat.name.forename asc, p3_1.name.surname asc, p3_1.name.forename asc, s1_1.id, s2_1.serviceName asc, dftInvIdx.name, i2_1.name asc";

		List items = getDomainFactory().find(hql, markers, values);

		SpecimenWorkListitemCustomVoCollection coll = new SpecimenWorkListitemCustomVoCollection();
		
		String str = "";
		for (Iterator iter = items.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			
			SpecimenWorkListitemCustomVo item = new SpecimenWorkListitemCustomVo();
			
			item.setWorkListitemId((Integer) element[0]);
			item.setCollectionStatus((Integer) element[1]);
			item.setCollectingMos((Integer) element[2]);
			if(element[3] != null)
				item.setCollectionDateTime(new DateTime((java.util.Date) element[3]));
			item.setCollectionComments((String) element[4]);
			item.setInstructionsToCollector((String) element[5]);
			
			str = "";
			if((String) element[8] != null)
				str = (String) element[8] + " ";
			if((String) element[7] != null)
				str += (String) element[7] + " ";
			if((String) element[6] != null)
				str += (String) element[6];
			item.setCollector(str);
			
			//WDEV-17829
			item.setServiceId(element[9] != null ? (Integer) element[9] : (Integer) element[21]);
			item.setServiceName( element[10] != null ? (String) element[10] : (String) element[22]);
			item.setInvestigation(element[11] != null ? (String) element[11] : (String) element[23]);
			item.setPatientId(element[12] != null ? (Integer) element[12] : (Integer) element[24]);
			item.setPatientSurname(element[13] != null ? (String) element[13] : (String) element[25]);
			item.setPatientForename(element[14] != null ? (String) element[14] : (String) element[26]);
			item.setWardId(element[15] != null ? (Integer) element[15] : (Integer) element[27]);
			item.setWard( element[16] != null ? (String) element[16] : (String) element[28]);
			item.setSpecimenContainerId(element[17] != null ? (Integer) element[17] : (Integer) element[29]);
			item.setContainerQuantity((Integer) element[18]);
			item.setAdultContainer(element[19] != null ? (String) element[19] : (String) element[30]);
			item.setAdultVolume((Float) element[34]);
			item.setContainerAdultVolume((Float) element[35]);
			item.setPaediatricContainerId((Integer) element[31]);
			item.setPaediatricVolume((Float) element[36]);
			item.setContainerPaediatricVolume((Float) element[37]);
			item.setPaediatricContainer((String) element[32]);
			item.setDftNoOfLabelSets((Integer) element[33]);
			
			item.setOrderSpecimenId((Integer) element[20]); //WDEV-16581
			
			coll.add(item);
		}

		return coll;
	}

	public HcpCollection listHcp(String name)
	{
		PhlebotomyCollectionRound impl = (PhlebotomyCollectionRound) getDomainImpl(PhelbotomyDefaultCollectorImpl.class);
		return impl.listHcp(name);
	}

	public SpecimenWorkListItemVo getWorkListItemRecord(Integer id)
	{
		return SpecimenWorkListItemVoAssembler.create(
				(SpecimenWorkListItem)getDomainFactory().getDomainObject(SpecimenWorkListItem.class, id));
	}

	public SpecimenWorkListItemListVo saveWorkListItemRecord(SpecimenWorkListItemVo record, OrderSpecimenVo specimenVo) throws StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		
		SpecimenWorkListItem newBo = null;
		SpecimenWorkListItem bo = SpecimenWorkListItemVoAssembler.extractSpecimenWorkListItem(factory, record);

		bo.getSpecimen().setCollectorComment(specimenVo.getCollectorComment());

		if(record.getCollectionStatus().equals(SpecimenCollectionStatus.COULDNOTCOLLECT))
		{
			SpecimenWorkListItemVo newItem = new SpecimenWorkListItemVo();
			
			newItem.setListType(SpecimenCollectionMethod.WARDCOLLECTION);
			newItem.setDateToCollect(new Date());
			newItem.setTimeToCollect(new Time());
			newItem.setCollectionStatus(SpecimenCollectionStatus.PHLEBCOULDNOTCOLLECT);
			
			newBo = SpecimenWorkListItemVoAssembler.extractSpecimenWorkListItem(factory, newItem);
			newBo.setSpecimen(bo.getSpecimen());
		}
		else if(record.getCollectionStatus().equals(SpecimenCollectionStatus.COLLECTIONCOMPLETE))
		{
			bo.getSpecimen().setCollDateTimePlacer(specimenVo.getCollDateTimePlacer().getJavaDate());
			bo.getSpecimen().setCollectingMos((MemberOfStaff) factory.getDomainObject(MemberOfStaff.class, specimenVo.getCollectingMos().getID_MemberOfStaff()));
			
			java.util.Set investigations = bo.getSpecimen().getInvestigations();
			for (java.util.Iterator iter = investigations.iterator(); iter.hasNext();)
			{
				Object obj = iter.next();
				if (obj instanceof OrderInvestigation)
				{
					OrderInvestigation element = (OrderInvestigation) obj;
					element.setDisplayDateTime(bo.getSpecimen().getCollDateTimePlacer());
					element.setDisplayFlag(getDomLookup(OcsDisplayFlag.SPEC_COLL));
				}
			}
		}
		
		factory.save(bo);
		
		if(newBo != null)
			factory.save(newBo);
		
		return SpecimenWorkListItemListVoAssembler.create(bo);
	}

	public OrderSpecimenVo getSpecimentRecord(OrderSpecimenRefVo refId)
	{
		return OrderSpecimenVoAssembler.create(
				(OrderSpecimen)getDomainFactory().getDomainObject(OrderSpecimen.class, refId.getID_OrderSpecimen()));
	}

	public Hcp getHcpByMosId(Integer mosId)
	{
		List list = getDomainFactory().find("select m1_1.hcp from MemberOfStaff as m1_1 where (m1_1.id = :ID)", 
				new String[] {"ID"}, new Object[] {mosId});
		
		if(list == null || list.size() == 0)
			return null;
		
		return HcpAssembler.create((ims.core.resource.people.domain.objects.Hcp) list.get(0));
	}

	public PatientShort getPatientByWorkListItemId(Integer id)
	{
		List list = getDomainFactory().find("select ordPat,dftPat  from SpecimenWorkListItem as item left join item.specimen as spec left join spec.order as ord left join ord.patient as ordPat left join item.dFTOrderInvestigation as dftSpec left join dftSpec.orderDetails as dftOrdDet left join dftOrdDet.patient as dftPat " +
				"	where item.id = :ID", new String[] {"ID"}, new Object[] {id}, 1);
		
		if(list == null || list.size() == 0)
			return null;
		
		Object[] objects = (Object[])list.get(0); //WDEV-17829
		
		return PatientShortAssembler.create(objects[0] != null ? (Patient) objects[0] : (Patient) objects[1]);
	}

	//WDEV-17760
	public SpecimenWorkListItemListVo getWorkListItemListRecord(Integer itemId)
	{
		return SpecimenWorkListItemListVoAssembler.create(
				(SpecimenWorkListItem)getDomainFactory().getDomainObject(SpecimenWorkListItem.class, itemId));
	}

	public PatientShort getPatientById(Integer patientId)
	{
		if(patientId == null)
			throw new CodingRuntimeException("Cannot get Patient on null Id.");
		
		return PatientShortAssembler.create((Patient)getDomainFactory().getDomainObject(Patient.class, patientId));
	}

}
