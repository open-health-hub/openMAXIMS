//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.65 build 3210.27143)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.domain.impl;

import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.core.clinical.domain.objects.PatientNotification;
import ims.core.clinical.domain.objects.PatientOCSNewResults;
import ims.core.clinical.domain.objects.PatientOCSSeenResults;
import ims.core.patient.domain.objects.Patient;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.domain.ImportResultsCategory;
import ims.ocrr.domain.base.impl.BaseImportResultsDialogImpl;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.vo.ImportResultsConfigVo;
import ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo;
import ims.ocrr.vo.ReferralAppointmentInvestigationsVo;
import ims.ocrr.vo.domain.ReferralAppointmentDetailsOrderInvestigationVoAssembler;
import ims.ocrr.vo.domain.ReferralAppointmentInvestigationsVoAssembler;
import ims.ocrr.vo.lookups.OrderInvStatus;

public class ImportResultsDialogImpl extends BaseImportResultsDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ReferralAppointmentDetailsOrderInvestigationVo saveReferralAppointmentDetailsOrderInvestigationVo(ReferralAppointmentDetailsOrderInvestigationVo referralAppointmentDetailsOrderInvestigationVo) throws StaleObjectException {
		DomainFactory factory = getDomainFactory();
		
		if(referralAppointmentDetailsOrderInvestigationVo.isValidated() == false)
			throw new DomainRuntimeException("ReferralAppointmentDetailsOrderInvestigationVo entry template not validated");
		
		OrderInvestigation doRecord = ReferralAppointmentDetailsOrderInvestigationVoAssembler.extractOrderInvestigation(factory, referralAppointmentDetailsOrderInvestigationVo);
		
		// Check order investigation status
		if (getDomLookup(OrderInvStatus.RESULTED).equals(doRecord.getOrdInvCurrentStatus().getOrdInvStatus())
				|| getDomLookup(OrderInvStatus.NEW_RESULT).equals(doRecord.getOrdInvCurrentStatus().getOrdInvStatus())
				|| getDomLookup(OrderInvStatus.UPDATED_RESULT).equals(doRecord.getOrdInvCurrentStatus().getOrdInvStatus()))
		{
			// Get Patient OCS Notification
			Patient patient = (Patient) factory.getDomainObject(Patient.class, doRecord.getOrderDetails().getPatient().getId());
			PatientNotification notification = patient.getOCSNotification();
			
			if (notification == null)
			{
				notification = new PatientNotification();
				notification.setPatient(doRecord.getOrderDetails().getPatient());
				patient.setOCSNotification(notification);
			}
			
			if (notification.getNewResults() == null)
			{
				PatientOCSNewResults newResults = new PatientOCSNewResults();
				newResults.setPatient(doRecord.getOrderDetails().getPatient());
				newResults.setNewCount(0);
				notification.setNewResults(newResults);
			}
			
			if (notification.getSeenResults() == null)
			{
				PatientOCSSeenResults seenResults = new PatientOCSSeenResults();
				seenResults.setPatient(doRecord.getOrderDetails().getPatient());
				seenResults.setSeenCount(0);
				notification.setSeenResults(seenResults);
			}
			
			notification.incrementNewResults();
			
			factory.save(patient);
		}

		factory.save(doRecord);
		
		return ReferralAppointmentDetailsOrderInvestigationVoAssembler.create(doRecord);
	}

	public ReferralAppointmentInvestigationsVo listInvestigations(CatsReferralRefVo refCatsReferralRefVo) {
		if(refCatsReferralRefVo == null || refCatsReferralRefVo.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferall is null or id not provided for method listInvestigations");
		
		DomainFactory factory = getDomainFactory();
		CatsReferral domCatsReferral = (CatsReferral)factory.getDomainObject(CatsReferral.class, refCatsReferralRefVo.getID_CatsReferral());
		if (domCatsReferral == null)
			return null;		
		return ReferralAppointmentInvestigationsVoAssembler.create(domCatsReferral);
	}

	public ImportResultsConfigVo getImportResultsConfig() {
		ImportResultsCategory impl = (ImportResultsCategory) getDomainImpl(ImportResultsCategoryImpl.class);
		return impl.getImportResultsConfig();
	}

}
