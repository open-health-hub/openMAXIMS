//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.ocrr.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.domain.Demographics;
import ims.core.domain.impl.DemographicsImpl;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.domain.SpecimenCollectionClinic;
import ims.ocrr.domain.base.impl.BaseSpecimenCollectionClinicComponentImpl;
import ims.ocrr.vo.SpecimenWorkListItemListVoCollection;
import ims.ocrr.vo.domain.SpecimenWorkListItemListVoAssembler;
import ims.ocrr.vo.lookups.SpecimenCollectionMethod;
import ims.ocrr.vo.lookups.SpecimenCollectionStatus;

public class SpecimenCollectionClinicComponentImpl extends BaseSpecimenCollectionClinicComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* saveOrderSpecimen
	*/
	public ims.ocrr.vo.SpecimenWorkListItemListVo saveWorkListItem(ims.ocrr.vo.SpecimenWorkListItemListVo orderSpecimenVo) throws ims.domain.exceptions.StaleObjectException
	{
		SpecimenCollectionClinic specs = (SpecimenCollectionClinic)getDomainImpl(SpecimenCollectionClinicImpl.class);
		return specs.saveWorkListItem(orderSpecimenVo);
	}

	/**
	* Returns a MosList based on the search criteria in the passed in filter
	*/
	public ims.core.vo.MemberOfStaffShortVoCollection listMembersOfStaff(ims.core.vo.MemberOfStaffShortVo filter)
	{
		SpecimenCollectionClinic specs = (SpecimenCollectionClinic)getDomainImpl(SpecimenCollectionClinicImpl.class);
		return specs.listMembersOfStaff(filter);
	}

	public ims.core.vo.Patient getPatient(ims.core.vo.PatientShort voPatShort) throws ims.domain.exceptions.StaleObjectException
	{
		Demographics impl = (Demographics) getDomainImpl(DemographicsImpl.class);
		return impl.getPatient(voPatShort);
	}

	public SpecimenWorkListItemListVoCollection listWorkListItems(CareContextRefVo careContextRefVo, SpecimenCollectionMethod listType, SpecimenCollectionStatus specimenCollectionStatus)
	{
		if (careContextRefVo == null)
			throw new CodingRuntimeException("Cannot get  SpecimenWorkListItem for null careContextRefVo");

		if (listType == null)
			throw new CodingRuntimeException("Cannot get  SpecimenWorkListItem for null ListType");
		
		ArrayList markers = new ArrayList();
		ArrayList values  = new ArrayList();
		
		StringBuffer hql = new StringBuffer(" from SpecimenWorkListItem sp ");
		String sqlClause = " where ";
		
		if(listType != null)
		{
			hql.append(sqlClause);
			hql.append(" sp.listType = :LT");
			markers.add("LT");
			values.add(getDomLookup(listType));
			sqlClause = " and ";
		}
		
		if(specimenCollectionStatus != null)
		{
			hql.append(sqlClause);
			hql.append(" sp.collectionStatus = :STID");
			markers.add("STID");
			values.add(getDomLookup(specimenCollectionStatus));
		}
		else
		{
			//WDEV-12906
			hql.append(sqlClause);
			hql.append(" ( sp.collectionStatus != :STATUS and sp.collectionStatus != :STATUS2 ) ");
			markers.add("STATUS");
			values.add(getDomLookup(SpecimenCollectionStatus.AWAITING_AUTHORISATION));
			markers.add("STATUS2");
			values.add(getDomLookup(SpecimenCollectionStatus.CANCELLED));
		}
		
		hql.append(" and sp.specimen.id in ( select o2_1.id from CatsReferral as c1_1 left join c1_1.investigationOrders as o1_1 left join o1_1.specimens as o2_1 where (c1_1.careContext.id = :CC))"); 
		markers.add("CC");
		values.add(careContextRefVo.getID_CareContext());

		List list = getDomainFactory().find(hql.toString(), markers, values);
		
		return SpecimenWorkListItemListVoAssembler.createSpecimenWorkListItemListVoCollectionFromSpecimenWorkListItem(list).sort();
	}
}
