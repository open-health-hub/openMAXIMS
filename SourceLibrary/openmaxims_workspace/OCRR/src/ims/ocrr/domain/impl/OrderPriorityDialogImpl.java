//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4735.27421)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.ocrr.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.ocrr.domain.base.impl.BaseOrderPriorityDialogImpl;
import ims.ocrr.vo.lookups.LookupHelper;
import ims.ocrr.vo.lookups.OrderPriority;
import ims.ocrr.vo.lookups.OrderPriorityCollection;

public class OrderPriorityDialogImpl extends BaseOrderPriorityDialogImpl
{
	private static final long serialVersionUID = 1L;

	
	public OrderPriorityCollection listPathologyPriorities()
	{
		String pathologySystem = "Pathology System";
		
		
		StringBuilder query = new StringBuilder("SELECT orderPriority.id FROM LookupInstance AS orderPriority LEFT JOIN orderPriority.type AS lookupType LEFT JOIN orderPriority.mappings AS mappings");
		query.append(" WHERE lookupType.id = :ORDER_PRIORITY_TYPE AND orderPriority.active = 1 AND mappings.extSystem = :PATHOLOGY_SYSTEM ORDER BY orderPriority.id");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("ORDER_PRIORITY_TYPE");
		paramValues.add(OrderPriority.TYPE_ID);
		
		paramNames.add("PATHOLOGY_SYSTEM");
		paramValues.add(pathologySystem);
		
		
		List<?> pathologyPriorities = getDomainFactory().find(query.toString(), paramNames, paramValues);
		
		OrderPriorityCollection resultsPathology = new OrderPriorityCollection();
		for (int i = 0; i < pathologyPriorities.size(); i++)
			resultsPathology.add(LookupHelper.getOrderPriorityInstance(getLookupService(), (Integer) pathologyPriorities.get(i)));

		return resultsPathology;
	}

	
	public OrderPriorityCollection listRadiologyPriorities()
	{
		String radiologySystem = "Radiology System";
		
		
		StringBuilder query = new StringBuilder("SELECT orderPriority.id FROM LookupInstance AS orderPriority LEFT JOIN orderPriority.type AS lookupType LEFT JOIN orderPriority.mappings AS mappings");
		query.append(" WHERE lookupType.id = :ORDER_PRIORITY_TYPE AND orderPriority.active = 1 AND mappings.extSystem = :RADIOLOGY_SYSTEM ORDER BY orderPriority.id");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("ORDER_PRIORITY_TYPE");
		paramValues.add(OrderPriority.TYPE_ID);
		
		paramNames.add("RADIOLOGY_SYSTEM");
		paramValues.add(radiologySystem);
		
		
		List<?> radiologyPriorities = getDomainFactory().find(query.toString(), paramNames, paramValues);
		
		OrderPriorityCollection resultsRadiology = new OrderPriorityCollection();
		for (int i = 0; i < radiologyPriorities.size(); i++)
			resultsRadiology.add(LookupHelper.getOrderPriorityInstance(getLookupService(), (Integer) radiologyPriorities.get(i)));

		return resultsRadiology;
	}


	public OrderPriorityCollection listClinicalPriorities()
	{
		String clinicalSystem = "Clinical Mapping";
		
		StringBuilder query = new StringBuilder("SELECT orderPriority.id FROM LookupInstance AS orderPriority LEFT JOIN orderPriority.type AS lookupType LEFT JOIN orderPriority.mappings AS mappings");
		query.append(" WHERE lookupType.id = :ORDER_PRIORITY_TYPE AND orderPriority.active = 1 AND mappings.extSystem = :CLINICAL_SYSTEM ORDER BY orderPriority.id");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("ORDER_PRIORITY_TYPE");
		paramValues.add(OrderPriority.TYPE_ID);
		
		paramNames.add("CLINICAL_SYSTEM");
		paramValues.add(clinicalSystem);
		
		
		List<?> clinicalPriorities = getDomainFactory().find(query.toString(), paramNames, paramValues);
		
		OrderPriorityCollection resultsClinical = new OrderPriorityCollection();
		for (int i = 0; i < clinicalPriorities.size(); i++)
			resultsClinical.add(LookupHelper.getOrderPriorityInstance(getLookupService(), (Integer) clinicalPriorities.get(i)));

		return resultsClinical;
	}
}
