//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4696.13908)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.ocrr.domain.impl;

import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.domain.SelectandOrder;
import ims.ocrr.domain.base.impl.BaseClinicalOrdersResultsOCRRFormImpl;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.vo.ClinicalResultListVoCollection;
import ims.ocrr.vo.ReferralAppointmentDetailsOcsOrderVoCollection;
import ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo;
import ims.ocrr.vo.domain.ClinicalResultListVoAssembler;
import ims.ocrr.vo.domain.InvestigationIndexLiteVoAssembler;
import ims.ocrr.vo.domain.ReferralAppointmentDetailsOcsOrderVoAssembler;
import ims.ocrr.vo.domain.ReferralAppointmentDetailsOrderInvestigationVoAssembler;
import ims.ocrr.vo.lookups.Category;

import java.util.ArrayList;
import java.util.List;

public class ClinicalOrdersResultsOCRRFormImpl extends BaseClinicalOrdersResultsOCRRFormImpl
{

	private static final long serialVersionUID = 1L;

	/**
	 * listClinicians
	 */
	public ims.core.vo.HcpLiteVoCollection listClinicians(String name)
	{
		if (name == null || name.length() == 0)
			return null;

		String query = "SELECT hcp FROM Hcp AS hcp LEFT JOIN hcp.mos AS mos WHERE mos.name.upperSurname LIKE :HCP_NAME AND hcp.isActive = 1 AND hcp.isHCPaResponsibleHCP = 1 ORDER BY mos.name.upperSurname";

		return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(getDomainFactory().find(query, "HCP_NAME", name.toUpperCase() + "%", 400));
	}

	/**
	 * listResults
	 * 
	 * @return
	 */
	public ClinicalResultListVoCollection listResults(ims.framework.utils.DateTime dateFrom, ims.framework.utils.DateTime dateTo, ims.core.clinical.vo.ServiceRefVo department, ims.ocrr.configuration.vo.InvestigationIndexRefVo exam, ims.core.resource.people.vo.HcpRefVo clinician, Boolean resultsOnly, ims.core.patient.vo.PatientRefVo patientId)
	{
		if (resultsOnly == null)
			throw new CodingRuntimeException("ResultsOnly parameter cannot be null !");

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer sb = new StringBuffer("from OrderInvestigation as o1_1 where ");

		sb.append(" o1_1.investigation.investigationIndex.category = :cat");
		markers.add("cat");
		values.add(getDomLookup(Category.CLINICAL));

		if (dateFrom != null && dateTo != null)
		{
			sb.append(" and");
			sb.append(" o1_1.displayDateTime between :fromdate and :todate");

			markers.add("fromdate");
			values.add(dateFrom.getJavaDate());
			markers.add("todate");
			values.add(dateTo.getJavaDate());
		}

		if (department != null)
		{
			sb.append(" and o1_1.investigation.providerService.locationService.service.id = :DEPARTMENT");
			markers.add("DEPARTMENT");
			values.add(department.getID_Service());
		}
		if (exam != null)
		{
			sb.append(" and o1_1.investigation.investigationIndex.id = :INV");
			markers.add("INV");
			values.add(exam.getID_InvestigationIndex());
		}
		if (clinician != null)
		{
			sb.append(" and o1_1.orderDetails.responsibleClinician.id = :CLINICIAN");
			markers.add("CLINICIAN");
			values.add(clinician.getID_Hcp());
		}
		
		if (resultsOnly != null && resultsOnly.booleanValue())
		{
			sb.append(" and o1_1.resultDetails is not null");
		}
		if (patientId != null)
		{
			sb.append(" and o1_1.orderDetails.patient.id  = :PID");
			markers.add("PID");
			values.add(patientId.getID_Patient());
		}

		sb.append(" order by o1_1.displayDateTime desc, o1_1.ordInvSeq asc, o1_1.systemInformation.creationDateTime, o1_1.systemInformation.creationUser");

		List<?> results = getDomainFactory().find(sb.toString(), markers, values);

		ClinicalResultListVoCollection voCollResults = ClinicalResultListVoAssembler.createClinicalResultListVoCollectionFromOrderInvestigation(results);

		return voCollResults;
	}

	/**
	 * listServices
	 */
	public ims.core.vo.ServiceLiteVoCollection listServices(String name, ims.core.vo.lookups.ServiceCategory type)
	{
		if (type != null)
			return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(getDomainFactory().find("from Service as s1_1 where (s1_1.serviceCategory = :type and upper(s1_1.serviceName) like upper(:name)) and isActive = :active order by s1_1.serviceName asc", new String[] { "type", "name", "active" }, new Object[] { getDomLookup(type), name, Boolean.TRUE }));

		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(getDomainFactory().find("from Service as s1_1 where (upper(s1_1.serviceName) like upper(:name)) and isActive = :active order by s1_1.serviceName asc", new String[] { "name", "active" }, new Object[] { name, Boolean.TRUE }));
	}

	/**
	 * getRoleDisciplineSecurityLevels
	 */
	public ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo getRoleDisciplineSecurityLevels(ims.framework.interfaces.IAppRole role)
	{
		SelectandOrder impl = (SelectandOrder)getDomainImpl(SelectandOrderImpl.class);
		return impl.getRoleDisciplineSecurityLevels(role);
	}

	/**
	 * listInvestigations
	 */
	public ims.ocrr.vo.InvestigationIndexLiteVoCollection listInvestigations(String name, Boolean beginWith)
	{
		if (name != null)
		{
			name.replaceAll("%", "");

			if (beginWith != null)
				name = (!beginWith ? "%" + name.toUpperCase() + "%" : name.toUpperCase() + "%");
			else
				name = name.toUpperCase() + "%";

		}
		return InvestigationIndexLiteVoAssembler.createInvestigationIndexLiteVoCollectionFromInvestigationIndex(getDomainFactory().find("select distinct i1_1 from InvestigationIndex as i1_1 left join i1_1.synonyms as i2_1 where (i1_1.category = :cat and ((i2_1.upperName like :name and i2_1.activeStatus = :Active) or i1_1.upperName like :name ) and i1_1.activeStatus = :status and i1_1.isProfile = :isProfile) order by i1_1.upperName", new String[] { "name", "cat", "status", "isProfile", "Active" }, new Object[] { name, getDomLookup(Category.CLINICAL), getDomLookup(PreActiveActiveInactiveStatus.ACTIVE), Boolean.FALSE, Boolean.TRUE }));

	}

	public ReferralAppointmentDetailsOcsOrderVoCollection getRefAppDetOcsOrder(String listId, PatientRefVo patientRef, OrderInvestigationRefVo orderInvRef)
	{
		if (patientRef==null || patientRef.getID_Patient()==null)
			throw new CodingRuntimeException("Patient parameter cannot be null !");
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		StringBuffer hql = new StringBuffer();
		hql.append("select ocsOrd from OcsOrderSession as ocsOrd left join ocsOrd.investigations as investigations left join investigations.investigation as inv left join ocsOrd.patient as patient ");
		hql.append("where inv.id in " + listId ) ;

		
		hql.append(" and patient.id=:PatID ");
		markers.add("PatID");
		values.add(patientRef.getID_Patient());
	
		if (orderInvRef!=null && orderInvRef.getID_OrderInvestigationIsNotNull())
		{
			hql.append(" and investigations.id=:OrderInvId ");
			markers.add("OrderInvId");
			values.add(orderInvRef.getID_OrderInvestigation());
		}

		List<?> ListReffApp = getDomainFactory().find(hql.toString(), markers, values);
		
		return ReferralAppointmentDetailsOcsOrderVoAssembler.createReferralAppointmentDetailsOcsOrderVoCollectionFromOcsOrderSession(ListReffApp);

	}
	
	public ReferralAppointmentDetailsOrderInvestigationVo getReferralAppointmentDetailsOrderInv(OrderInvestigationRefVo orderInvRef)
	{
		if (orderInvRef==null || orderInvRef.getID_OrderInvestigation()==null)
			throw new CodingRuntimeException("OrderInvestigation parameter cannot be null !");
		
		DomainFactory factory = getDomainFactory();
		OrderInvestigation domainOrderInv = (OrderInvestigation)factory.getDomainObject(OrderInvestigation.class, orderInvRef.getID_OrderInvestigation());
		return ReferralAppointmentDetailsOrderInvestigationVoAssembler.create(domainOrderInv);
	}

	
}
