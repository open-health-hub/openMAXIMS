//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4696.13908)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.ocrr.domain.impl;

import java.util.List;

import ims.domain.DomainFactory;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.configuration.domain.objects.DFTCollectionTypesConfig;
import ims.ocrr.domain.base.impl.BaseDFTCollectionTypeConfigurationsImpl;
import ims.ocrr.vo.domain.DFTCollectionTypesConfigVoAssembler;

public class DFTCollectionTypeConfigurationsImpl extends BaseDFTCollectionTypeConfigurationsImpl
{

	private static final long serialVersionUID = 1L;

	public ims.ocrr.vo.DFTCollectionTypesConfigVo save(ims.ocrr.vo.DFTCollectionTypesConfigVo record) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if( record == null )
			throw new CodingRuntimeException("DFTCollectionTypesConfigVo not provided ");
		
		if( record.getID_DFTCollectionTypesConfig() == null)
		{
			if( getDFTCollectionTypesConfigVo() != null )
			{
				throw new UniqueKeyViolationException();
			}
		}
		
		DomainFactory factory = getDomainFactory();
		DFTCollectionTypesConfig doDFTCollectionTypesConfig = DFTCollectionTypesConfigVoAssembler.extractDFTCollectionTypesConfig(factory, record);
		factory.save(doDFTCollectionTypesConfig);
		return DFTCollectionTypesConfigVoAssembler.create(doDFTCollectionTypesConfig);
	}

	public ims.ocrr.vo.DFTCollectionTypesConfigVo getDFTCollectionTypesConfigVo()
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		 
		hql.append(" from DFTCollectionTypesConfig as d1_1 where (d1_1.isRIE is null )  ");
	
		List list = factory.find(hql.toString());
		if( list != null && list.size() > 0)
		{
			ims.ocrr.vo.DFTCollectionTypesConfigVo dtftype =  DFTCollectionTypesConfigVoAssembler.createDFTCollectionTypesConfigVoCollectionFromDFTCollectionTypesConfig(list).get(0);
			return dtftype;
		}
		return null;
		
		
	}
}
