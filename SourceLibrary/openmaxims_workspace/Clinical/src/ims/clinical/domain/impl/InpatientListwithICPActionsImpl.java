//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3467.22451)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.domain.CatsReferralVoAssembler;
import ims.clinical.domain.base.impl.BaseInpatientListwithICPActionsImpl;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.pas.domain.objects.PASEvent;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.IPandOPSearchCriteriaVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.domain.CareContextListVoAssembler;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.InpatientEpisodeVoAssembler;
import ims.core.vo.domain.LocMostVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.icp.vo.InpatientEpisodeWithICPInfoVo;
import ims.icp.vo.InpatientEpisodeWithICPInfoVoCollection;
import ims.icp.vo.domain.InpatientEpisodeWithICPInfoVoAssembler;
import ims.icp.vo.domain.PatientICPLiteVoAssembler;
import ims.icps.instantiation.domain.objects.PatientICP;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class InpatientListwithICPActionsImpl extends BaseInpatientListwithICPActionsImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* Get PatientShort
	*/
	public ims.core.vo.PatientShort getPatientShort(ims.core.patient.vo.PatientRefVo voPatientRef)
	{
		DomainFactory factory = getDomainFactory();
		ims.core.patient.domain.objects.Patient patBo = (ims.core.patient.domain.objects.Patient) factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, voPatientRef.getID_Patient().intValue());
		return PatientShortAssembler.create(patBo);
	}

	public HcpLiteVoCollection listHCPs(HcpFilter filter) {
		// TODO Auto-generated method stub
		return null;
	}

	public LocationLiteVoCollection getActiveHospitals() 
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveHospitalsLite();		
	}

	public LocationLiteVoCollection listWards(Integer hospital) 
	{
		OrganisationAndLocation implLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		LocationRefVo voRef = new LocationRefVo();
		voRef.setID_Location(hospital);
		return implLoc.listActiveWardsForHospitalLite(voRef);
	}

	/**
	 * WDEV-12481
	 * Function used to retrieve the InpatientEpisodes and associated ICP info for the referral
	 * the inpatient episode was created for.
	 */
	public InpatientEpisodeWithICPInfoVoCollection listIPEpisodes(IPandOPSearchCriteriaVo searchCriteria) 
	{
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		StringBuffer querry = new StringBuffer();
		
		querry.append("select inpatient, icp, context ");
		querry.append("from PatientICP as icp right join icp.careContext as context right join context.pasEvent as pas1, ");
		querry.append("InpatientEpisode as inpatient left join inpatient.pasEvent as inppas left join inppas.location as inploc ");
		querry.append("where pas1.id = inppas.id");
		
		if (searchCriteria.getConsultantIsNotNull() && searchCriteria.getConsultant().getIMosHcpId() != null)
		{
			querry.append(" and inppas.consultant.id = :CONS");
			markers.add("CONS");
			values.add(searchCriteria.getConsultant().getIMosHcpId());
		}
		
		if (searchCriteria.getWardIsNotNull())
		{
			querry.append(" and inploc.id = :WARD");
			markers.add("WARD");
			values.add(searchCriteria.getWard().getID_Location());
		}
		else if (searchCriteria.getHospitalIsNotNull())
		{
			querry.append(" and inploc.parentLocation.id = :HOSPITAL");
			markers.add("HOSPITAL");
			values.add(searchCriteria.getHospital().getID_Location());
		}
		
		//WDEV-12965 querry.append(" and icp.completedDateTime is null");
		
		
		@SuppressWarnings("rawtypes")
		List results = getDomainFactory().find(querry.toString(), markers, values);
		
		// Inpatient Episode
		InpatientEpisodeWithICPInfoVoCollection voColl = new InpatientEpisodeWithICPInfoVoCollection();
		
		
		@SuppressWarnings("rawtypes")
		Iterator iterator = results.iterator();
		
		// Declare the results
		while (iterator.hasNext())
		{
			Object[] next = (Object[]) iterator.next();
			
			// Create an Inpatient Episode with ICP Info from Object[]
			if (next[0] instanceof InpatientEpisode)
			{
				InpatientEpisodeWithICPInfoVo inpatientEpisodeVo = InpatientEpisodeWithICPInfoVoAssembler.create((InpatientEpisode) next[0]);
				
				// Add ICP Info if needed
				if (inpatientEpisodeVo != null && next[1] instanceof PatientICP)
					inpatientEpisodeVo.setICPInfo(PatientICPLiteVoAssembler.create((PatientICP) next[1]));
				
				// Add CareContext
				if (inpatientEpisodeVo != null && next[2] instanceof CareContext)
					inpatientEpisodeVo.setCareContext(CareContextListVoAssembler.create((CareContext) next[2]));
				
				voColl.add(inpatientEpisodeVo);
			}
		}
		
		
		if (voColl.size() > 0)
			return voColl;
		
		return null;
	}

	private String getPasIds(List refList) 
	{
		if(refList == null || refList.size() == 0)
			return null;
		
		String ids = "";
		Iterator it = refList.iterator();
		
		while(it.hasNext())
		{
			Object[] lstItem2 = (Object[]) it.next();
			PASEvent doPASEvent = (PASEvent)lstItem2[1];
			
			if (doPASEvent != null
					&& doPASEvent.getId() != null)
			{
				if(ids.length() == 0)
					ids += doPASEvent.getId();
				else
					ids += "," + doPASEvent.getId();
			}
		}
		
		return ids;
	}

	public InpatientEpisodeVo saveInpatientBedNumber(InpatientEpisodeWithICPInfoVo ipVo) throws StaleObjectException
	{
		if(ipVo == null)
			throw new CodingRuntimeException("Invalid ipVo");
		if(!ipVo.isValidated())
			throw new CodingRuntimeException("ipVo not validated");
		
		DomainFactory factory = getDomainFactory();
		InpatientEpisode domainObject = InpatientEpisodeWithICPInfoVoAssembler.extractInpatientEpisode(factory, ipVo);
		
		factory.save(domainObject);
		
		return InpatientEpisodeVoAssembler.create(domainObject);
	}

	public InpatientEpisodeVo getInpatientEpisode(InpatientEpisodeRefVo voIpRef) 
	{
		DomainFactory factory = getDomainFactory();
		InpatientEpisode ipBo = (InpatientEpisode) factory.getDomainObject(InpatientEpisode.class, voIpRef.getID_InpatientEpisode().intValue());
		return InpatientEpisodeVoAssembler.create(ipBo);
	}

	public LocMostVo getLocation(LocationRefVo voLocRef) 
	{
		DomainFactory factory = getDomainFactory();
		return LocMostVoAssembler.create((Location) factory.getDomainObject(Location.class, voLocRef.getID_Location()));
	}

	public CatsReferralRefVo getCatsReferralRef(InpatientEpisodeWithICPInfoVo inpatientEpisode)
	{
		// WDEV - 8364 - Change the conditions to check for at least one care context associated (keep the one in the ICP for compatibility check)
		if (inpatientEpisode == null)
			throw new DomainRuntimeException("Logical Error - Selected Inpatient episode is null, can not discharge");
		
		if (!inpatientEpisode.getCareContextIsNotNull() && (!inpatientEpisode.getICPInfoIsNotNull() || !inpatientEpisode.getICPInfo().getCareContextIsNotNull()))
			throw new DomainRuntimeException("Logical Error - Selected Inpatient episode has no CareContext associated, can not get the associated CatsReferral");
		
//		if (inpatientEpisode == null || inpatientEpisode.getICPInfo() == null || inpatientEpisode.getICPInfo().getCareContext() == null || inpatientEpisode.getICPInfo().getCareContext().getID_CareContext() == null)
//			throw new DomainRuntimeException("Logical error - selected Inpatient episode has no CatsReferral associated");
		
		String hql = "from CatsReferral as cr where (cr.careContext.id = :refID)";
		ArrayList<String> paramNames = new ArrayList<String>();
		paramNames.add("refID");
		
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		// Try to get the care context not in the ICP first
		if (inpatientEpisode.getCareContextIsNotNull())
		{
			paramValues.add(inpatientEpisode.getCareContext().getID_CareContext());
		}
		else	// Keep this for backward compatibility
		{
			paramValues.add(inpatientEpisode.getICPInfo().getCareContext().getID_CareContext());
		}

		return CatsReferralVoAssembler.create((CatsReferral) getDomainFactory().find(hql, paramNames, paramValues).get(0));
	}

	public CareContextShortVo getCareContext(CareContextRefVo careContextRef) 
	{
		if (careContextRef == null)
			return null;
		DomainObject domainObject = getDomainFactory().getDomainObject(CareContext.class, careContextRef.getID_CareContext());
		if (domainObject instanceof CareContext)
			return CareContextShortVoAssembler.create((CareContext) domainObject);
		return null;
	}
}
