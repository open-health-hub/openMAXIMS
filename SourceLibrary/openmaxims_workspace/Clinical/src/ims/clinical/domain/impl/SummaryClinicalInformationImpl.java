//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4535.14223)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseSummaryClinicalInformationImpl;
import ims.clinical.domain.objects.SummaryClinicalInformation;
import ims.clinical.vo.SummaryClinicalInformationDisplayVoCollection;
import ims.clinical.vo.SummaryClinicalInformationRefVo;
import ims.clinical.vo.SummaryClinicalInformationVo;
import ims.clinical.vo.domain.SummaryClinicalInformationDisplayVoAssembler;
import ims.clinical.vo.domain.SummaryClinicalInformationVoAssembler;
import ims.core.patient.vo.PatientRefVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

public class SummaryClinicalInformationImpl extends BaseSummaryClinicalInformationImpl
{

	private static final long serialVersionUID = 1L;

	public SummaryClinicalInformationDisplayVoCollection listSummaryClinicalInformation(PatientRefVo patient)
	{
		if (patient == null || patient.getID_Patient() == null)
			return null;

		String query = "SELECT summary FROM SummaryClinicalInformation AS summary LEFT JOIN summary.patient AS patient WHERE patient.id = :ID_PATIENT ORDER BY summary.systemInformation.creationDateTime DESC";
		
		return SummaryClinicalInformationDisplayVoAssembler.createSummaryClinicalInformationDisplayVoCollectionFromSummaryClinicalInformation(getDomainFactory().find(query, "ID_PATIENT", patient.getID_Patient()));
	}

	
	public SummaryClinicalInformationVo getSummaryClinicalInformation(SummaryClinicalInformationRefVo summary)
	{
		if (summary == null || summary.getID_SummaryClinicalInformation() == null)
			return null;
		
		return SummaryClinicalInformationVoAssembler.create((SummaryClinicalInformation) getDomainFactory().getDomainObject(SummaryClinicalInformation.class, summary.getID_SummaryClinicalInformation()));
	}

	
	public SummaryClinicalInformationVo saveSummaryClinicalInformation(SummaryClinicalInformationVo summary) throws StaleObjectException
	{
		if (summary == null)
			throw new CodingRuntimeException("Can't save a null record.");
		
		
		if (!summary.isValidated())
			throw new CodingRuntimeException("Record to save is not validated.");
		
		// Extract domain object to save
		SummaryClinicalInformation domSummary = SummaryClinicalInformationVoAssembler.extractSummaryClinicalInformation(getDomainFactory(), summary);
		
		getDomainFactory().save(domSummary);
		
		return SummaryClinicalInformationVoAssembler.create(domSummary);
	}
}
