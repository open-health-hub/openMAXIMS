//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4680.16533)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.assessment.configuration.domain.objects.UserAssessment;
import ims.assessment.instantiation.domain.objects.PatientAssessment;
import ims.assessment.instantiation.vo.PatientAssessmentRefVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.domain.PatientAssessmentVoAssembler;
import ims.assessment.vo.domain.UserAssessmentLiteVoAssembler;
import ims.assessment.vo.domain.UserAssessmentVoAssembler;
import ims.clinical.domain.base.impl.BaseObsPatientAssessmentCcImpl;
import ims.core.admin.domain.objects.EmergencyAttendance;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.emergency.vo.EmergencyAttendanceForObsPatientAssessmentVo;
import ims.emergency.vo.domain.EmergencyAttendanceForObsPatientAssessmentVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class ObsPatientAssessmentCcImpl extends BaseObsPatientAssessmentCcImpl
{

	private static final long serialVersionUID = 1L;

	public ims.assessment.vo.UserAssessmentLiteVoCollection listAssessments(ims.vo.LookupInstVo specialty)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from UserAssessment u left join u.assessmentSpecialties assSpec left join u.taxonomyMap as taxMap ";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		hql.append(" assSpec.instance = :assessmentSpec ");
		markers.add("assessmentSpec");
		values.add(getDomLookup(specialty));

		hql.append(" and u.activeStatus = :actStat ");
		markers.add("actStat");
		values.add(getDomLookup(PreActiveActiveInactiveStatus.ACTIVE));

		hql.append(" and taxMap.taxonomyCode = :taxonomyCode and taxMap.taxonomyName=:taxName ");
		markers.add("taxonomyCode");
		values.add("ED_ASSESS");
		markers.add("taxName");
		values.add(getDomLookup(TaxonomyType.MAXIMS));
		
		if (markers.size() > 0)
			query += " where ";

		query += hql.toString();

		List<?> list = factory.find(query, markers, values);
		return UserAssessmentLiteVoAssembler.createUserAssessmentLiteVoCollectionFromUserAssessment(list);
	}

	public ims.emergency.vo.EmergencyAttendanceForObsPatientAssessmentVo save(ims.emergency.vo.EmergencyAttendanceForObsPatientAssessmentVo emergencyAttForObsPatAssessmentToSave) throws ims.domain.exceptions.StaleObjectException
	{
		if (emergencyAttForObsPatAssessmentToSave == null)
			throw new CodingRuntimeException("Cannot save null emergencyAttForObsPatAssessmentToSave ");
		if (!emergencyAttForObsPatAssessmentToSave.isValidated())
		{
			throw new DomainRuntimeException("emergencyAttForObsPatAssessmentToSave has not been validated");
		}

		DomainFactory factory = getDomainFactory();
		EmergencyAttendance doEmergencyAttForPatAssessment = EmergencyAttendanceForObsPatientAssessmentVoAssembler.extractEmergencyAttendance(factory, emergencyAttForObsPatAssessmentToSave);

		factory.save(doEmergencyAttForPatAssessment);

		return EmergencyAttendanceForObsPatientAssessmentVoAssembler.create(doEmergencyAttForPatAssessment);
	}

	public ims.assessment.vo.PatientAssessmentVo getObsPatientAssessmentByCareContext(ims.core.admin.vo.CareContextRefVo careContextRef)
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get PatientAssessment on null Id for CareContext ");
		}

		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer();
		hql.append("select emergAtt.obsPatientAssessment.id from EmergencyAttendance as emergAtt where emergAtt.careContext.id = :careContextID ");

		List<?> list = factory.find(hql.toString(), new String[] { "careContextID" }, new Object[] { careContextRef.getID_CareContext() });

		if (list == null || list.size() == 0)
			return null;

		return PatientAssessmentVoAssembler.create((PatientAssessment) list.get(0));
	}

	public ims.assessment.vo.UserAssessmentVo getUserAssessment(ims.assessment.configuration.vo.UserAssessmentRefVo assessRefVo)
	{
		if (assessRefVo == null)
			throw new CodingRuntimeException("UserAssessmentRefVo id null");

		DomainFactory factory = getDomainFactory();

		UserAssessment obj = (UserAssessment) factory.getDomainObject(UserAssessment.class, assessRefVo.getID_UserAssessment());

		return UserAssessmentVoAssembler.create(obj);
	}

	public EmergencyAttendanceForObsPatientAssessmentVo getEmergencyAttendance(CareContextRefVo careContextRef)
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get PatientAssessment on null Id for CareContext ");
		}

		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer();
		hql.append("from EmergencyAttendance as emergAtt where emergAtt.careContext.id = :careContextID ");

		List<?> list = factory.find(hql.toString(), new String[] { "careContextID" }, new Object[] { careContextRef.getID_CareContext() });

		if (list == null || list.size() == 0)
			return null;

		return EmergencyAttendanceForObsPatientAssessmentVoAssembler.create((EmergencyAttendance) list.get(0));
	}

	public PatientAssessmentVo getObsPatientAssessment(PatientAssessmentRefVo patientAssessmentRef)
	{
		if (patientAssessmentRef == null || patientAssessmentRef.getID_PatientAssessment() == null)
		{
			throw new CodingRuntimeException("Cannot get Patient Assessment on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		PatientAssessment domainPatientAssessment = (PatientAssessment) factory.getDomainObject(PatientAssessment.class, patientAssessmentRef.getID_PatientAssessment());

		return PatientAssessmentVoAssembler.create(domainPatientAssessment);
	}
}
