//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.71 build 3940.20703)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseEDischargeMedicationOnAdmissionComponentImpl;
import ims.clinical.helper.EDischargeHelper;
import ims.clinical.helper.IEDischargeHelper;
import ims.clinical.vo.EDischargeSTHKSummaryVo;
import ims.clinical.vo.MedicationOnAdmissionAndChangesLiteVo;
import ims.clinical.vo.domain.MedicationOnAdmissionAndChangesLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.edischarge.domain.objects.MedicationOnAdmissionAndChanges;

import java.util.ArrayList;

public class EDischargeMedicationOnAdmissionComponentImpl extends BaseEDischargeMedicationOnAdmissionComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	 * 
	 */
	public ims.clinical.vo.MedicationOnAdmissionAndChangesLiteVo getMedication(ims.core.admin.vo.CareContextRefVo careContext)
	{
		// Check passed care context
		if (careContext == null || !careContext.getID_CareContextIsNotNull())
			throw new DomainRuntimeException("DOMAIN getMedication() - Selected care context is null");

		// Build query and parameter to retrieve the record from database
		String hqlQuery = "from MedicationOnAdmissionAndChanges as meds where meds.careContext.id = :ID";
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("ID");
		paramValues.add(careContext.getID_CareContext());
		
		// Query database for the record
		// Create the VO form the record database
		return MedicationOnAdmissionAndChangesLiteVoAssembler.create((MedicationOnAdmissionAndChanges) getDomainFactory().findFirst(hqlQuery, paramNames, paramValues));
	}

	/**
	 * 
	 */
	public MedicationOnAdmissionAndChangesLiteVo saveMedication(MedicationOnAdmissionAndChangesLiteVo medication, EDischargeSTHKSummaryVo dischargeSummary)
																																	throws  StaleObjectException,
																																			ForeignKeyViolationException,
																																			UniqueKeyViolationException
	{
		// Check for null VO passed to save
		if (medication == null)
			throw new DomainRuntimeException("DOMAIN saveMedication() - Can not save a null object");
		
		// Check if the VO is validated
		if (!medication.isValidated())
			throw new DomainRuntimeException("DOMAIN saveMedication() - Value object to save is not validated");
		
		
		// Extract domain object needed
		DomainFactory domainFactory = getDomainFactory();
		MedicationOnAdmissionAndChanges medicationDomObj = MedicationOnAdmissionAndChangesLiteVoAssembler.extractMedicationOnAdmissionAndChanges(domainFactory, medication);
		
		// Save domain object
		domainFactory.save(medicationDomObj);
		
		medication = MedicationOnAdmissionAndChangesLiteVoAssembler.create(medicationDomObj);
		
		IEDischargeHelper impl = (IEDischargeHelper) getDomainImpl(EDischargeHelper.class);
		impl.updateSummaryIfRequired(medication, dischargeSummary, getDomainFactory());

		// Return a refreshed version of the VO
		return medication;
	}
}
