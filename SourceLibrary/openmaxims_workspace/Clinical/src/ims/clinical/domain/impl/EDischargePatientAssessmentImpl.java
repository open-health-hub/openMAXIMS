//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3362.18223)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import ims.assessment.configuration.domain.objects.UserAssessment;
import ims.assessment.instantiation.domain.objects.PatientAssessment;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.domain.PatientAssessmentVoAssembler;
import ims.assessment.vo.domain.UserAssessmentLiteVoAssembler;
import ims.assessment.vo.domain.UserAssessmentVoAssembler;
import ims.clinical.domain.base.impl.BaseEDischargePatientAssessmentImpl;
import ims.clinical.vo.DischargeDetailsWithAssessmentVoCollection;
import ims.clinical.vo.domain.DischargeDetailsWithAssessmentVoAssembler;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.documents.domain.objects.PatientDocument;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.edischarge.domain.objects.DischargeDetails;
import ims.framework.exceptions.CodingRuntimeException;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class EDischargePatientAssessmentImpl extends BaseEDischargePatientAssessmentImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* saveDischargeDetails
	*/
	public ims.clinical.vo.DischargeDetailsWithAssessmentVo saveDischargeDetails(ims.clinical.vo.DischargeDetailsWithAssessmentVo dischargeDetailsVo) throws ims.domain.exceptions.StaleObjectException
	{
		if(dischargeDetailsVo == null)
			throw new CodingRuntimeException("DischargeDetailsVo is null");
		
		if(!dischargeDetailsVo.isValidated())
			throw new CodingRuntimeException("DischargeDetailsVo Value Object has not been validated");

		DomainFactory factory = getDomainFactory();
		DischargeDetails doDD = DischargeDetailsWithAssessmentVoAssembler.extractDischargeDetails(factory, dischargeDetailsVo);

		factory.save(doDD);
		return DischargeDetailsWithAssessmentVoAssembler.create(doDD);
	}

	/**
	* getSurgeryDetails
	*/
	public ims.clinical.vo.DischargeDetailsWithAssessmentVo getDischargeDetails(ims.core.admin.vo.CareContextRefVo carecontextRefVo)
	{
		if(carecontextRefVo == null)
			throw new CodingRuntimeException("careContextRefVo Filter not provided for list call. ");

		if(carecontextRefVo != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from DischargeDetails dd where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " dd.careContext.id = :careContextId");
 			markers.add("careContextId");
			values.add(carecontextRefVo.getID_CareContext());
			andStr = " and ";	

			List list = factory.find(hql.toString(), markers,values);
			if(list != null && list.size() > 0)
			{ 
				DischargeDetailsWithAssessmentVoCollection voColl = DischargeDetailsWithAssessmentVoAssembler.createDischargeDetailsWithAssessmentVoCollectionFromDischargeDetails(list);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
		}

	/**
	* listAssessments
	*/
	public ims.assessment.vo.UserAssessmentLiteVoCollection listAssessments(ims.vo.LookupInstVo specialty)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from UserAssessment u left join u.assessmentSpecialties assSpec";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		hql.append(" assSpec.instance = :assessmentSpec" );
		markers.add("assessmentSpec");
		values.add(getDomLookup(specialty));

		hql.append(" and u.activeStatus = :actStat" );
		markers.add("actStat");
		values.add(getDomLookup(PreActiveActiveInactiveStatus.ACTIVE));
		
		if (markers.size() > 0)
			query += " where ";

		query += hql.toString();

		List list = factory.find(query, markers, values);
		return UserAssessmentLiteVoAssembler.createUserAssessmentLiteVoCollectionFromUserAssessment(list);
	}

	public ims.assessment.vo.UserAssessmentVo getUserAssessment(ims.assessment.configuration.vo.UserAssessmentRefVo assessRefVo)
	{
		if(assessRefVo == null)
			throw new CodingRuntimeException("UserAssessmentRefVo id null");
		
		DomainFactory factory = getDomainFactory();
		
		UserAssessment obj = (UserAssessment)factory.getDomainObject(UserAssessment.class, assessRefVo.getID_UserAssessment());
		
		return UserAssessmentVoAssembler.create(obj);
	}

	//WDEV-14773
	public Boolean savePatientDocument(PatientDocumentVo patientDocument, PatientAssessmentVo patientAssessment) throws StaleObjectException 
	{
		if (patientDocument == null)
			throw new DomainRuntimeException("Invalid PatientDocument record");
		if (!patientDocument.isValidated())
			throw new DomainRuntimeException("PatientDocument record not validated");
		if(patientAssessment == null)
			throw new DomainRuntimeException("Invalid patient assessment");
		if(!patientAssessment.isValidated())
			throw new DomainRuntimeException("Patient assessment not validated");
		
		DomainFactory factory = getDomainFactory();

		// Save PatientDocumet record
		PatientDocument domainPatientDocument = PatientDocumentVoAssembler.extractPatientDocument(factory, patientDocument);
		factory.save(domainPatientDocument);
		
		// Save PatientAssessment record
		PatientAssessment domainObject = PatientAssessmentVoAssembler.extractPatientAssessment(factory, patientAssessment);
		
		//wdev-15972
		if( domainObject != null && domainPatientDocument != null )
			domainObject.setAssociatedDocument(domainPatientDocument);
		//---------
		factory.save(domainObject);
		
		return true;
	}

	//WDEV-14773
	public String[] getReportAndTemplate(TemplateBoRefVo template) 
	{
		String[] result = null;

		if (template == null || !template.getID_TemplateBoIsNotNull())
			return null;

		@SuppressWarnings("rawtypes")
		List list = getDomainFactory().find("select rep.reportXml, tmpl.templateXml from TemplateBo as tmpl left join tmpl.report as rep where tmpl.id = :ID", "ID", template.getID_TemplateBo());

		if (list.iterator().hasNext())
		{
			Object[] obj = (Object[]) list.iterator().next();

			result = new String[] { (String) obj[0], (String) obj[1] };
		}

		return result;
	}
}
