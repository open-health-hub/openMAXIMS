//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.assessment.vo.domain.GraphicAssessmentShortVoAssembler;
import ims.clinical.domain.base.impl.BaseSearchGraphicalAssessmentImpl;
import ims.core.vo.MedicVo;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainRuntimeException;

public class SearchGraphicalAssessmentImpl extends BaseSearchGraphicalAssessmentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.assessment.vo.GraphicAssessmentShortVoCollection listGraphicAssessments(String filter, Boolean specialityOnly)
	{
		StringBuilder query = new StringBuilder("select g1_1 from GraphicAssessment as g1_1 left join g1_1.assessmentSpecialties as l1_1 left join l1_1.instance as l2_1 where (upper(g1_1.name) like :filter");
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("filter");
		paramValues.add("%" + filter.toUpperCase() + "%");   //wdev-13658

		if (specialityOnly)
		{
			Object currUser = this.getHcpUser();
			if (currUser instanceof MedicVo)
			{
				Specialty specialty = ((MedicVo) currUser).getSpecialty();
				if (specialty != null)
				{
					query.append("and l2_1.id = :specialityId");
					paramNames.add("specialityId");
					paramValues.add(specialty.getId());
				}

			}
			else
			{
				throw new DomainRuntimeException("Logged in user must be a medic");

			}
		}
		query.append(") order by g1_1.name asc ");
		List domObj = getDomainFactory().find(query.toString(), paramNames, paramValues);
		if (domObj == null || domObj.size() == 0)
			return null;
		return GraphicAssessmentShortVoAssembler.createGraphicAssessmentShortVoCollectionFromGraphicAssessment(domObj);
	}
}
