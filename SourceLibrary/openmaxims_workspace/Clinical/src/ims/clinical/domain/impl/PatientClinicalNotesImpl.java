//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.53 build 2529.20504)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.MosAdmin;
import ims.admin.domain.impl.MosAdminImpl;
import ims.clinical.domain.ClinicalNoteDrawing;
import ims.clinical.domain.ClinicalNotes;
import ims.clinical.domain.base.impl.BasePatientClinicalNotesImpl;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.vo.ClinicalNotesRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.ClinicalNotesFilterVo;
import ims.core.vo.ClinicalNotesShortVoCollection;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffVo;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.ClinicalContactShortVoAssembler;
import ims.core.vo.domain.ClinicalNotesShortVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.lookups.LookupInstance;
import ims.framework.utils.DateTime;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LookupHelper;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class PatientClinicalNotesImpl extends BasePatientClinicalNotesImpl
{

	private static final long serialVersionUID = 1L;

	public ClinicalNotesShortVoCollection listClinicalNote(ClinicalNotesFilterVo filter)
	{
		DomainFactory factory = getDomainFactory();
			
		if(filter == null)	
			return ClinicalNotesShortVoAssembler.createClinicalNotesShortVoCollectionFromClinicalNotes(factory.listDomainObjects(ClinicalNotes.class)).sort(ims.framework.enumerations.SortOrder.DESCENDING);

		return ClinicalNotesShortVoAssembler.createClinicalNotesShortVoCollectionFromClinicalNotes(listDomClinicalNotes(factory, filter)).sort(ims.framework.enumerations.SortOrder.DESCENDING);		
		
	}
	
	private List listDomClinicalNotes(DomainFactory factory, ims.core.vo.ClinicalNotesFilterVo filter)
	{
		String hql = " from ClinicalNotes note "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(filter.getDateFromIsNotNull())
		{
			condStr.append(andStr + " note.authoringInformation.authoringDateTime >= :dateFrom");
 			markers.add("dateFrom");
			values.add(filter.getDateFrom().getJavaDate());
			andStr = " and ";	
		}
		if(filter.getDateToIsNotNull())
		{
			condStr.append(andStr + " note.authoringInformation.authoringDateTime < :dateTo");
 			markers.add("dateTo");
 			DateTime dateTo = (DateTime) filter.getDateTo().clone();
 			dateTo.addDays(1);
 			Date date = dateTo.getJavaDate();
			values.add(date);
			andStr = " and ";	
		}

		
		
		if ( ! isSISpecialty(filter.getEpisodeOfCare()))
		{
			if(filter.getEpisodeOfCareIsNotNull() && filter.getEpisodeOfCare().getID_EpisodeOfCareIsNotNull())
			{
				condStr.append(andStr + " note.careContext.episodeOfCare.id = :episodeOfCareId");
	 			markers.add("episodeOfCareId");
				values.add(filter.getEpisodeOfCare().getID_EpisodeOfCare());
				andStr = " and ";	
			}
			if(filter.getCareContextIsNotNull())
			{
				condStr.append(andStr + " note.careContext.id = :contactId");
	 			markers.add("contactId");
				values.add(filter.getCareContext().getID_CareContext());
				andStr = " and ";				
			}
		}
		else
		{
			if(filter.getPatientIsNotNull() && filter.getPatient().getID_PatientIsNotNull())
			{
				condStr.append(andStr + " note.careContext.episodeOfCare.careSpell.patient.id = :patientId");
	 			markers.add("patientId");
				values.add(filter.getPatient().getID_Patient());
				andStr = " and ";	
			}
		}
		
		if(filter.getDisciplineIsNotNull())
		{
			LookupInstance rd = getDomLookup(filter.getDiscipline());
			if(rd.getId() == HcpDisType.OTHER.getId()){
				condStr.append(andStr + " (note.discipline = :discipline or note.discipline.parent = :discipline)");
	 			markers.add("discipline");
				values.add(rd);
			}
			else{
				condStr.append(andStr + " note.discipline = :discipline");
	 			markers.add("discipline");
				values.add(rd);
			}
			
			andStr = " and ";	
		}
		if(filter.getStatusIsNotNull())
		{
			condStr.append(andStr + " note.currentStatus.status = :status");
 			markers.add("status");
			values.add(getDomLookup(filter.getStatus()));
			andStr = " and ";	
		}
		if(filter.getAuthoringHCPIsNotNull())
		{
			condStr.append(andStr + " note.authoringInformation.authoringHcp.idd = :authHcpId");
 			markers.add("authHcpId");
			values.add(filter.getAuthoringHCP().getID_Hcp());
			andStr = " and ";				
		}
		if(filter.getRecordingUserIsNotNull())
		{
			condStr.append(andStr + " note.recordingUser.id = :recHcpId");
 			markers.add("recHcpId");
			values.add(filter.getRecordingUser().getID_MemberOfStaff());
			andStr = " and ";				
		}
		if(filter.getNoteTypeIsNotNull())
		{
			condStr.append(andStr + " note.noteType = :noteType");
 			markers.add("noteType");
			values.add(getDomLookup(filter.getNoteType()));
			andStr = " and ";				
		}	
		
		if(filter.getForReviewIsNotNull())
		{
			condStr.append(andStr + " note.forReview = :forrev");
 			markers.add("forrev");
			values.add(filter.getForReview());
			andStr = " and ";		
			
			condStr.append(andStr + " note.reviewingDateTime = null");
 			andStr = " and ";		
			condStr.append(andStr + " note.reviewingHCP = null");
 			andStr = " and ";		
		}
		if(filter.getForReviewDisciplineIsNotNull())
		{
			condStr.append(andStr + " note.forReviewDiscipline = :reviewDisp");
	 		markers.add("reviewDisp");
			values.add(getDomLookup(filter.getForReviewDiscipline()));
			andStr = " and ";				
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		return factory.find(hql,markers,values);
	}
	
	private boolean isSISpecialty(EpisodeOfCareRefVo episodeOfCare)
	{
		String hql = "select epis.specialty.id from EpisodeOfCare as epis where epis.id = :idEpis ";
		
		List specialtyIds = getDomainFactory().find(hql, new String[] {"idEpis"}, new Object[] {episodeOfCare.getID_EpisodeOfCare()});
		if(specialtyIds != null && specialtyIds.size() == 1)
		{
			if(specialtyIds.get(0) != null
				&& specialtyIds.get(0).equals(-171))
				return true;
		}
			
		return false;
	}

	public ClinicalNotesVo getClinicalNotesForContact(ClinicalContactRefVo clincontactRefId) 
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);
		return impl.getClinicalNotesForContact(clincontactRefId);
	}

	public ims.core.vo.ClinicalNotesVo getClinicalNote(ClinicalNotesRefVo clinicalNoteRefVo)
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);
		return impl.getClinicalNotes(clinicalNoteRefVo.getID_ClinicalNotes());

	}

	public ClinicalContactShortVo getCurrentClinicalContact(ClinicalContactRefVo clinContactRefVo) 
	{
		DomainFactory factory = getDomainFactory();
		ClinicalContact doCC = (ClinicalContact) factory.getDomainObject(ClinicalContact.class, clinContactRefVo.getID_ClinicalContact());
		return (ClinicalContactShortVoAssembler.create(doCC));
	}

	public CareContextShortVo getCurrentCareContext(CareContextRefVo careContextRefVo) 
	{
		DomainFactory factory = getDomainFactory();
		CareContext doCC = (CareContext) factory.getDomainObject(CareContext.class, careContextRefVo.getID_CareContext());
		return (CareContextShortVoAssembler.create(doCC));
	}

	public MemberOfStaffVo getMemberOfStaff(MemberOfStaffShortVo mos)
	{
		MosAdmin mosAdmin = (MosAdmin)getDomainImpl(MosAdminImpl.class);
		return mosAdmin.getMemberOfStaff(mos);
	}

	public ClinicalNotesVo getClinicalNotesForCareContext(CareContextRefVo careContextRefVo) 
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);
		CareContextShortVo voCCShort = new CareContextShortVo();
		voCCShort.setID_CareContext(careContextRefVo.getID_CareContext());
		return impl.getClinicalNotesForCareContext(voCCShort);
	}
}
