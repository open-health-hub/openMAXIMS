//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2287.24499)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.vo.ReportVoCollection;
import ims.admin.vo.domain.ReportVoAssembler;
import ims.clinical.domain.ClinicalNoteDrawing;
import ims.clinical.domain.DiagnosisComplications;
import ims.clinical.domain.MedicationMultipleDoses;
import ims.clinical.domain.PatientProblems;
import ims.clinical.domain.PatientSummary;
import ims.clinical.domain.Procedures;
import ims.clinical.domain.base.impl.BaseDocumentGenerationImpl;
import ims.clinical.domain.objects.ClinicalCorrespondence;
import ims.clinical.domain.objects.InpatientDischargeNoteFollowup;
import ims.clinical.domain.objects.OutpatientNotesOutcome;
import ims.clinical.vo.ClinicalCorrespondenceVo;
import ims.clinical.vo.MedicationOverViewFilterVo;
import ims.clinical.vo.MedicationOverViewVo;
import ims.clinical.vo.OutpatientNotesOutcomeVo;
import ims.clinical.vo.domain.ClinicalCorrespondenceVoAssembler;
import ims.clinical.vo.lookups.ClinicalCorrespondenceType;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.FormReportBo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.clinical.vo.ClinicalNotesRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.CareContextListVo;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientDiagnosisShortVoCollection;
import ims.core.vo.PatientProblemVoCollection;
import ims.core.vo.PatientProcedureShortVoCollection;
import ims.core.vo.domain.CareContextListVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.PatientAssembler;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class DocumentGenerationImpl extends BaseDocumentGenerationImpl
{

	/**
	* saveClinicalCorrespondence
	*/
	public ims.clinical.vo.ClinicalCorrespondenceVo saveClinicalCorrespondence(ims.clinical.vo.ClinicalCorrespondenceVo clinicalCorrespondence) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if(clinicalCorrespondence == null)
			throw new CodingRuntimeException("null clinicalCorrespondence passed to saveClinicalCorrespondence() !");

		if(!clinicalCorrespondence.isValidated())
			throw new CodingRuntimeException("clinicalCorrespondence not validated !");

		DomainFactory factory = getDomainFactory();
		ClinicalCorrespondence boClinicalCorrespondence = ClinicalCorrespondenceVoAssembler.extractClinicalCorrespondence(factory, clinicalCorrespondence);		
		InpatientDischargeNoteFollowup idsBo = boClinicalCorrespondence.getInpatientDischargeSummary();
		OutpatientNotesOutcome opdBo = boClinicalCorrespondence.getOPDNotes();
		
		if(idsBo != null)
		{
			factory.save(idsBo);
			boClinicalCorrespondence.setInpatientDischargeSummary(idsBo);
		}
		
		if(opdBo != null)
		{
			factory.save(opdBo);
			boClinicalCorrespondence.setOPDNotes(opdBo);
		}
		
		factory.save(boClinicalCorrespondence);
		
		return ClinicalCorrespondenceVoAssembler.create(boClinicalCorrespondence);
	}

	/**
	* getLastClinicalCorrespondence
	*/
	public ClinicalCorrespondenceVo getLastClinicalCorrespondence(CareContextRefVo careContext, ClinicalCorrespondenceType type, ClinicalContactRefVo clinicalContact)
	{
		/*
		if(careContext == null)
			throw new CodingRuntimeException("null careContext passed to getLastClinicalCorrespondence() !");
		*/
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();

		if(type == null)
			throw new CodingRuntimeException("null type passed to getLastClinicalCorrespondence() !");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("from ClinicalCorrespondence as c1_1 ");
		hql.append(" where c1_1.type.id = :TYPEID");
		names.add("TYPEID");
		values.add(new Integer(type.getId()));

		if (careContext != null)
		{
			hql.append (" and c1_1.careContext.id = :CONTEXTID");
			names.add("CONTEXTID");
			values.add(careContext.getID_CareContext());	
		}
		
		if (clinicalContact != null)
		{
			hql.append (" and c1_1.clinicalContact.id = :CONTACTID");
			names.add("CONTACTID");
			values.add(clinicalContact.getID_ClinicalContact());	
		}
		
		List list = factory.find(hql.toString(), names, values);

		if(list.size() == 0)
			return null;
		
		ClinicalCorrespondenceVo voClinicalCorrespondence = ClinicalCorrespondenceVoAssembler.create((ClinicalCorrespondence)list.get(0));
		
		if (type.equals(ClinicalCorrespondenceType.MEDICALOUTPATIENTLETTER))
		{
			if(voClinicalCorrespondence.getOPDNotes() == null && clinicalContact != null && clinicalContact.getID_ClinicalContactIsNotNull())
				voClinicalCorrespondence.setOPDNotes(getOPDSummary(clinicalContact));
		}
		
		return voClinicalCorrespondence;
	}

	public HcpLiteVoCollection listHCP(String strHcpName)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHcpLiteByName(strHcpName);
	}

	public Patient getPatient(PatientRefVo patient)
	{
		if(patient == null)
			throw new CodingRuntimeException("null patient passed to getPatient() !");
		
		DomainFactory factory = getDomainFactory();
		
		ims.core.patient.domain.objects.Patient boPatient = (ims.core.patient.domain.objects.Patient)factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, patient.getID_Patient());
		
		return PatientAssembler.create(boPatient);
	}

	public PatientProblemVoCollection listProblemsByCareContext(CareContextRefVo careContextRefVo)
	{
		PatientSummary intf = (PatientSummary) getDomainImpl(PatientSummaryImpl.class);
		return intf.listProblemsByCareContext(careContextRefVo);
	}

	public PatientDiagnosisShortVoCollection listDiagnosisComplicationsCareContext(CareContextRefVo careContextRefVo)
	{
		PatientSummary intf = (PatientSummary) getDomainImpl(PatientSummaryImpl.class);
		return intf.listDiagnosisComplicationsCareContext(careContextRefVo);
	}

	public PatientProcedureShortVoCollection listProceduresByCareContext(CareContextRefVo careContextRefVo)
	{
		PatientSummary intf = (PatientSummary) getDomainImpl(PatientSummaryImpl.class);
		return intf.listProceduresByCareContextPatientSummary(careContextRefVo);
	}

	public MedicationOverViewVo getLatestMedicationOverViewVo(MedicationOverViewFilterVo filter)
	{
		MedicationMultipleDoses intf = (MedicationMultipleDoses) getDomainImpl(MedicationDosesImpl.class);
		return intf.getLatestMedicationOverViewVo(filter);
	}

	public HcpLiteVo getHcpById(HcpRefVo hcpRefVo)
	{
		if(hcpRefVo == null)
			throw new CodingRuntimeException("null hcpRefVo passed to getHcpById() !");

		DomainFactory factory = getDomainFactory();
		
		ims.core.resource.people.domain.objects.Hcp boHcp = (ims.core.resource.people.domain.objects.Hcp)factory.getDomainObject(ims.core.resource.people.domain.objects.Hcp.class, hcpRefVo.getID_Hcp());
		
		return HcpLiteVoAssembler.create(boHcp);
	}
	
	public OutpatientNotesOutcomeVo getOPDSummary(ClinicalContactRefVo clinicalContactRefVo)
	{
		ClinicalNoteDrawing intf = (ClinicalNoteDrawing) getDomainImpl(ClinicalNoteDrawingImpl.class);
		return intf.getOutpatientNotesForClinicalContact(clinicalContactRefVo);
	}

	public ReportVoCollection listAssignedReports(Integer formId)
	{
		/*
		DomainFactory factory = getDomainFactory();
		
		List reps = factory.find("from FormReportBo fr where fr.form.id = :formId", new String[]{"formId"}, new Object[]{formId});
		
		return ReportVoAssembler.createReportVoCollectionFromReportBo(reps);
		*/
		DomainFactory factory = getDomainFactory();
		ims.admin.vo.ReportVoCollection collection = new ims.admin.vo.ReportVoCollection();
		
		List reps = factory.find("from FormReportBo fr where fr.form.id = :formId", new String[]{"formId"}, new Object[]{formId});
		if (reps != null && !reps.isEmpty())
		{
			for (Iterator iter = reps.iterator(); iter.hasNext();) 
			{
				FormReportBo element = (FormReportBo) iter.next();
				collection.add(ReportVoAssembler.create(element.getReport()));
			}			
		}		
		return collection;
		
	}

	public String[] getReportAndTemplate(Integer reportId, Integer templateId)
	{
		String[] result = null;
		
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.id = :rid  and t1_1.id = :tid)", new String[] {"rid", "tid"}, new Object[] {reportId, templateId});
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
			
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
	
		return result;			
	}
	
	public ClinicalNotesVo getClinicalNotesForContact(ClinicalContactRefVo clinicalContactRefId) 
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);
		return impl.getClinicalNotesForContact(clinicalContactRefId);
	}

	public ims.core.vo.ClinicalNotesVo getClinicalNote(ClinicalNotesRefVo clinicalNoteRefVo)
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);
		return impl.getClinicalNotes(clinicalNoteRefVo.getID_ClinicalNotes());

	}
	
	public CareContextListVo getCareContextList(Integer id)
	{
		if(id == null)
			throw new CodingRuntimeException("null id passed to getCareContextList !");

		DomainFactory factory = getDomainFactory();
		CareContext  boCareContext = (CareContext)factory.getDomainObject(CareContext.class, id);
		
		return CareContextListVoAssembler.create(boCareContext);
	}
	
	public PatientProblemVoCollection listProblemsByPatient(PatientRefVo patient)
	{
		PatientProblems impl = (PatientProblems) getDomainImpl(PatientProblemsImpl.class);
		return impl.listByPatient(patient);
	}
	
	public PatientProcedureShortVoCollection listProceduresByPatient(PatientRefVo patientRefVo)
	{
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProcedureByPatient(patientRefVo);
	}
	public PatientDiagnosisShortVoCollection listDiagnosisComplicationsByPatient(PatientRefVo patrefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listDiagnosisComplicationsPatient(patrefVo);
	}

	public Integer countClinicalCorrespondence(CareContextRefVo careContext, ClinicalCorrespondenceType type, ClinicalContactRefVo clinicalContact)
	{
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();

		if(type == null)
			throw new CodingRuntimeException("null type passed to getLastClinicalCorrespondence() !");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("select count(*) from ClinicalCorrespondence as c1_1 ");
		hql.append(" where c1_1.type.id = :TYPEID");
		names.add("TYPEID");
		values.add(new Integer(type.getId()));

		if (careContext != null)
		{
			hql.append (" and c1_1.careContext.id = :CONTEXTID");
			names.add("CONTEXTID");
			values.add(careContext.getID_CareContext());	
		}
		
		if (clinicalContact != null)
		{
			hql.append (" and c1_1.clinicalContact.id = :CONTACTID");
			names.add("CONTACTID");
			values.add(clinicalContact.getID_ClinicalContact());	
		}
		
		List list = factory.find(hql.toString(), names, values);

		if(list.size() == 0)
			return 0;

		if(list.get(0) instanceof Integer)
			return (Integer) list.get(0);
		else if(list.get(0) instanceof Long)
			return new Integer(((Long) list.get(0)).intValue());
		
		return null;
	}
}
