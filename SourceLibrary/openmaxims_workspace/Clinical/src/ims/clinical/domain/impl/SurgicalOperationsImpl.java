//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 50208.1400)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.PatientCharacteristic;
import ims.core.clinical.domain.objects.PatientSurgicalOperation;
import ims.clinical.domain.PatientProcedures;
import ims.clinical.domain.PastMedicalHistory;
import ims.clinical.domain.impl.PastMedicalHistoryImpl;
import ims.clinical.domain.impl.PatientProceduresImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientCharacteristicVoCollection;
import ims.core.vo.PatientPastMedicalHistoryVo;
import ims.core.vo.PatientProcedureShortVo;
import ims.core.vo.PatientProcedureShortVoCollection;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.PatientProcedureVoCollection;
import ims.core.vo.PatientSurgicalOperationVo;
import ims.core.vo.PatientSurgicalOperationVoCollection;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.domain.PatientCharacteristicVoAssembler;
import ims.core.vo.domain.PatientProcedureVoAssembler;
import ims.core.vo.domain.PatientSurgicalOperationVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;


public class SurgicalOperationsImpl extends DomainImpl implements ims.clinical.domain.SurgicalOperations, ims.domain.impl.Transactional
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public PatientSurgicalOperationVoCollection listClinicalContactSurgicalOperations(ClinicalContactShortVo voClinicalContactShort)
	{
		return listSurgicalOperations(null, voClinicalContactShort, false);
	}
	
	public PatientSurgicalOperationVoCollection listCareContextSurgicalOperations(CareContextRefVo refCareContext, Boolean bRIE) 
	{
		return listSurgicalOperations(refCareContext, null, bRIE);
	}
	
	private PatientSurgicalOperationVoCollection listSurgicalOperations(CareContextRefVo refCareContext, ClinicalContactShortVo voClinicalContactShort, Boolean bRIE) {
	
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from PatientSurgicalOperation t ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if (voClinicalContactShort != null)
		{
			hql.append(andStr + " t.clinicalContact.id =:rcc");
			markers.add("rcc");
			values.add(voClinicalContactShort.getID_ClinicalContact());
			andStr = " and ";
		}
		
		if (refCareContext != null)
		{
			hql.append(andStr + " t.careContext.id =:cc");
			markers.add("cc");
			values.add(refCareContext.getID_CareContext());
			andStr = " and ";
		}

		if (markers.size() > 0)
			query += " where ";
		query += hql.toString();
		List patientProcedures = factory.find(query, markers, values);
		
		return PatientSurgicalOperationVoAssembler.createPatientSurgicalOperationVoCollectionFromPatientSurgicalOperation(patientProcedures);
	}

	public ims.core.vo.PatientSurgicalOperationVo savePatientSurgicalOperation(ims.core.vo.PatientSurgicalOperationVo patientOperation, ims.core.patient.vo.PatientRefVo patient, CareContextShortVo careContext) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if(patientOperation == null)
            throw new RuntimeException("Cannot save null value for PatientSurgicalOperationVo");

		if (!patientOperation.isValidated())
			throw new CodingRuntimeException("PatientSurgicalOperationVo is not validated");

		if(patient == null)
            throw new RuntimeException("Null value provided for Patient");

		if(careContext == null)
            throw new RuntimeException("Null value provided for CareContext");
		
		DomainFactory factory = getDomainFactory();
		PatientCharacteristic doChar;

		// marking records that were previously saved to isActive and/or
		// isRemoved
		if (patientOperation.getID_PatientProcedure() != null) // operation
																// record exists
		{
			PatientSurgicalOperation doCurrentOperation = (PatientSurgicalOperation) factory.getDomainObject(PatientSurgicalOperation.class, patientOperation.getID_PatientProcedure());
			Iterator it = doCurrentOperation.getInsertedDevices().iterator();
			while (it.hasNext())
			{
				doChar = (PatientCharacteristic) it.next();
				doChar.setIsActive(Boolean.FALSE);
			}

			Iterator it1 = doCurrentOperation.getRemovedDevices().iterator();
			while (it1.hasNext())
			{
				doChar = (PatientCharacteristic) it1.next();
				doChar.setIsRemoved(Boolean.FALSE);
			}
		}

		PatientSurgicalOperation doOperation = PatientSurgicalOperationVoAssembler.extractPatientSurgicalOperation(factory, patientOperation);
		Iterator it2 = doOperation.getInsertedDevices().iterator();
		while (it2.hasNext())
		{
			doChar = (PatientCharacteristic) it2.next();
			factory.save(doChar);
		}
		Iterator it3 = doOperation.getRemovedDevices().iterator();
		while (it3.hasNext())
		{
			doChar = (PatientCharacteristic) it3.next();
			factory.save(doChar);
		}
		
		if (patientOperation.getSignifProcIsNotNull() && patientOperation.getSignifProc().booleanValue())
		{
			processPMH(patientOperation,patient,careContext);
		}			
		
		factory.save(doOperation);

		// bi-directional association
		PatientCharacteristic doCharacteristic;
		Iterator it = doOperation.getInsertedDevices().iterator();
		while (it.hasNext())
		{
			doCharacteristic = (PatientCharacteristic) it.next();
			doCharacteristic.setInsertionProcedure(doOperation);
		}

		Iterator it1 = doOperation.getRemovedDevices().iterator();
		while (it1.hasNext())
		{
			doCharacteristic = (PatientCharacteristic) it1.next();
			doCharacteristic.setRemovalProcedure(doOperation);
		}
				
		patientOperation = PatientSurgicalOperationVoAssembler.create(doOperation);
							
		return patientOperation;
	}

	public HcpLiteVoCollection listHcpLiteByName(String hcpName)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName(hcpName);

	}

	public PatientCharacteristicVoCollection listCharchteristic(PatientRefVo refVoPatient, PatientProcedureVo currentProcedure)
	{
		DomainFactory factory = getDomainFactory();

		if (currentProcedure.getID_PatientProcedure() != null)
		{
			List list = factory.find("from PatientCharacteristic pc where pc.careContext.episodeOfCare.careSpell.patient.id = :patid and pc.insertionProcedure.id != :id and pc.isRemoved = :isRemoved and pc.isActive = :isActive", 
				new String[]{"patid", "id", "isRemoved", "isActive"}, 
				new Object[]{refVoPatient.getID_Patient(), currentProcedure.getID_PatientProcedure(), Boolean.FALSE, Boolean.TRUE});
			
			return PatientCharacteristicVoAssembler.createPatientCharacteristicVoCollectionFromPatientCharacteristic(list).sort();	
		}
		else
		{
			List list = factory.find("from PatientCharacteristic pc where pc.careContext.episodeOfCare.careSpell.patient.id = :patid and pc.isRemoved = :isRemoved and pc.isActive = :isActive", 
					new String[]{"patid", "isRemoved", "isActive"}, 
					new Object[]{refVoPatient.getID_Patient(), Boolean.FALSE, Boolean.TRUE});
			
			return PatientCharacteristicVoAssembler.createPatientCharacteristicVoCollectionFromPatientCharacteristic(list).sort();	
		}
	}

	public ProcedureLiteVoCollection listProcedures(String filterProcedure) throws DomainInterfaceException
	{
		PatientProcedures impl = (PatientProcedures) getDomainImpl(PatientProceduresImpl.class);
		return impl.listProcedures(filterProcedure);
	}

	public ims.core.vo.PatientPastMedicalHistoryVo savePatientPMHRecord(ims.core.vo.PatientPastMedicalHistoryVo voPMH, ims.core.patient.vo.PatientRefVo patient) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		PastMedicalHistory pmhRec = (PastMedicalHistory)getDomainImpl(PastMedicalHistoryImpl.class);
		return pmhRec.savePMH(voPMH);
	}

	private PatientPastMedicalHistoryVo pmhCreated(PatientRefVo voPatient)
	{
		PastMedicalHistory pmhRec = (PastMedicalHistory)getDomainImpl(PastMedicalHistoryImpl.class);
		return pmhRec.getPastMedicalHistory(voPatient);
	}
	public void processPMH(PatientSurgicalOperationVo voSurgicalOperation,PatientRefVo voPatient, CareContextShortVo careContext) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		PatientProcedureShortVo voProcShort = new PatientProcedureShortVo();		
		voProcShort.setAuthoringInformation(voSurgicalOperation.getAuthoringInformation());
		voProcShort.setInfoSource(voSurgicalOperation.getInfoSource());
		voProcShort.setProcDate(voSurgicalOperation.getProcDate());
		voProcShort.setProcedure(voSurgicalOperation.getProcedure());
		voProcShort.setProcedureDescription(voSurgicalOperation.getProcedureDescription());
		voProcShort.setProcedureStatus(voSurgicalOperation.getProcedureStatus());
		voProcShort.setProcTime(voSurgicalOperation.getProcTime());
		voProcShort.setProcedureStatus(voSurgicalOperation.getProcedureStatus());
		voProcShort.setEpisodeOfCare(careContext.getEpisodeOfCare());
		voProcShort.setCareContext(careContext);
		
		PatientPastMedicalHistoryVo voPMH = pmhCreated(voPatient);
		if (voPMH == null)
		{
			//create PMH record for new records and if significant
			voPMH = new PatientPastMedicalHistoryVo();
			
			PatientProcedureShortVoCollection voColl = new PatientProcedureShortVoCollection();
			voColl.add(voProcShort);
			voPMH.setProcedure(voColl);		
			voPMH.setPatient(voPatient);
		}
		else
		{
			//update the PMH
			if (voPMH.getProcedureIsNotNull())
				voPMH.getProcedure().add(voProcShort);
			else
			{
				PatientProcedureShortVoCollection voColl = new PatientProcedureShortVoCollection();
				voColl.add(voProcShort);
				voPMH.setProcedure(voColl);				
			}
		}
		
		String[] arrErrors = voPMH.validate();
		if( arrErrors != null)
		{
			throw new CodingRuntimeException("PatientPastMedicalHistoryVo validation errors" + arrErrors);
		}
		
		savePatientPMHRecord(voPMH, voPatient);
		
	}

	public PatientProcedureVoCollection listCareContextPatientProcedures(CareContextRefVo refVoCareContext) {
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from PatientProcedure pp ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if (refVoCareContext != null)
		{
			hql.append(andStr + " pp.careContext.id =:cc");
			markers.add("cc");
			values.add(refVoCareContext.getID_CareContext());
			andStr = " and ";
		}

		if (markers.size() > 0)
			query += " where ";
		query += hql.toString();
		List patientSurOp = factory.find(query, markers, values);
		return PatientProcedureVoAssembler.createPatientProcedureVoCollectionFromPatientProcedure(patientSurOp);
	}
}
