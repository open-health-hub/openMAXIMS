//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.70 build 3432.28152)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import java.util.List;

import ims.clinical.domain.base.impl.BaseSurgicalOperationNotesImpl;
import ims.clinical.domain.objects.SurgicalOperationSummary;
import ims.clinical.vo.SurgicalOperationSummaryVo;
import ims.clinical.vo.SurgicalOperationSummaryVoCollection;
import ims.clinical.vo.domain.SurgicalOperationSummaryVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

public class SurgicalOperationNotesImpl extends BaseSurgicalOperationNotesImpl
{

	private static final long serialVersionUID = 1L;

	public Boolean getIsNotesCompleted(CareContextRefVo careContextREf) {
		String query = "select s1_1.id from SurgicalOperationNotes as s1_1 " +
			"where (s1_1.careContext.id = :CareContext_id and s1_1.signOffDateTime is not null  and s1_1.signOffHCP is not null )";
		Integer result = getDomainFactory().count(query, new String[]{"CareContext_id"}, new Object[]{careContextREf.getID_CareContext()});
		if (result > 0)
			return Boolean.TRUE;
		return Boolean.FALSE;
	}

	//wdev-15917
	public SurgicalOperationSummaryVo getSurgicalOperationSummary(CareContextRefVo careContextRef) 
	{
		if( careContextRef == null )
			return null;
		
		DomainFactory factory = getDomainFactory();
		List surgicalOpSummary =   factory.find(" select s1_1 from SurgicalOperationSummary as s1_1 left join s1_1.careContext as c1_1 where (c1_1.id = :idCC)  )",
				new String[]{"idCC" },
				new Object[]{ careContextRef.getID_CareContext()});
		
		if( surgicalOpSummary!= null && surgicalOpSummary.size() > 0 )
		{
			SurgicalOperationSummaryVoCollection tempColl = SurgicalOperationSummaryVoAssembler.createSurgicalOperationSummaryVoCollectionFromSurgicalOperationSummary(surgicalOpSummary);
			
			if( tempColl != null && tempColl.size() > 0 )
				return tempColl.get(0);
			
		}
		return null;

	}

	//wdev-15917
	public SurgicalOperationSummaryVo saveSurgicalOperationSummary(	SurgicalOperationSummaryVo record) throws DomainInterfaceException,StaleObjectException 
	{
		
		if( record == null)
			throw new CodingRuntimeException("SurgicalOperationSummaryVo is null");
		
		DomainFactory factory = getDomainFactory();
		if( record.getID_SurgicalOperationSummary() == null )
		{
			SurgicalOperationSummaryVo tempVo = getSurgicalOperationSummary(record.getCareContext());
			if(tempVo != null )
				throw new StaleObjectException(null);
		}
		
		SurgicalOperationSummary doSuOpSum = SurgicalOperationSummaryVoAssembler.extractSurgicalOperationSummary(factory, record);

		factory.save(doSuOpSum);
		return SurgicalOperationSummaryVoAssembler.create(doSuOpSum);
		
	}

	
}
