//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.70 build 3352.27411)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.EDischargeHINTConfig;
import ims.admin.domain.impl.EDischargeHINTConfigImpl;
import ims.clinical.domain.EDischarge;
import ims.clinical.domain.EDischargeDiagnosisEtcComponent;
import ims.clinical.domain.EDischargePatientReadyToLeaveComponent;
import ims.clinical.domain.base.impl.BaseEDischargePreViewComponentImpl;
import ims.clinical.vo.DementiaEDischargeCheckVo;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.DischargeDetailsVoCollection;
import ims.clinical.vo.DischargeMedicationDetailsVo;
import ims.clinical.vo.DischargeMedicationDetailsVoCollection;
import ims.clinical.vo.DischargeReadyToLeaveVo;
import ims.clinical.vo.DischargeReportDetailVo;
import ims.clinical.vo.DischargeReportDetailVoCollection;
import ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo;
import ims.clinical.vo.domain.DementiaEDischargeCheckVoAssembler;
import ims.clinical.vo.domain.DischargeDetailsVoAssembler;
import ims.clinical.vo.domain.DischargeMedicationDetailsVoAssembler;
import ims.clinical.vo.domain.DischargeReadyToLeaveVoAssembler;
import ims.clinical.vo.domain.DischargeReportDetailVoAssembler;
import ims.clinical.vo.domain.InpatientEpisodeForVTERiskAsessmentVoAssembler;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.Gp;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.resource.people.domain.objects.Medic;
import ims.core.resource.people.vo.GpRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MedicRefVo;
import ims.core.vo.GPLiteWithCommChannelsVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.PatientDiagnosisEDischargeListVoCollection;
import ims.core.vo.PatientDocumentVoCollection;
import ims.core.vo.PatientGpVo;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.GPLiteWithCommChannelsVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.MedicVoAssembler;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.core.vo.domain.PatientGpVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupInstance;
import ims.edischarge.domain.objects.DischargeReportDetail;
import ims.edischarge.domain.objects.ReadyToLeave;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class EDischargePreViewComponentImpl extends BaseEDischargePreViewComponentImpl
{
	private static final long serialVersionUID = 1L;

	public PatientGpVo getPatientGp(PatientRefVo patient) 
	{
		if(patient == null || patient.getID_Patient() == null)
			throw new CodingRuntimeException("Patient is null or id not provided for getPatientGp");
		
		return PatientGpVoAssembler.create((Patient)getDomainFactory().getDomainObject(patient));
	}
	
	public MedicVo getMedicVo(MedicRefVo medic) 
	{
		if(medic == null || medic.getID_Hcp() == null)
			throw new CodingRuntimeException("MedicRefVo is null or id not provided for getMedicVo");
		
		return MedicVoAssembler.create((Medic) getDomainFactory().getDomainObject(medic));
	}
	
	public GPLiteWithCommChannelsVo getGPLiteWithCommChannels(GpRefVo gp) 
	{
		if(gp == null || gp.getID_Gp() == null)
			throw new CodingRuntimeException("GpRefVo is null or id not provided for getMedicVo");
		
		return GPLiteWithCommChannelsVoAssembler.create((Gp) getDomainFactory().getDomainObject(gp));
	}
	
	public DischargeDetailsVo getDischargeDetailsForCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("CareContext is null or id not provided for getDischargeDetailsForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List dischargeDetails = factory.find("select dd from DischargeDetails as dd left join dd.careContext as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		DischargeDetailsVoCollection discharge = DischargeDetailsVoAssembler.createDischargeDetailsVoCollectionFromDischargeDetails(dischargeDetails);		
		
		return discharge != null && discharge.size() > 0 ? (discharge.get(0) != null ? discharge.get(0) : null) : null;
	}

	public DischargeMedicationDetailsVo getDischargeMedicationDetailsForCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("CareContext is null or id not provided for getDischargeDetailsForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List dischargeMedication = factory.find("select md from MedicationDetails as md left join md.careContext as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		DischargeMedicationDetailsVoCollection medication = DischargeMedicationDetailsVoAssembler.createDischargeMedicationDetailsVoCollectionFromMedicationDetails(dischargeMedication);		
		
		return medication != null && medication.size() > 0 ? (medication.get(0) != null ? medication.get(0) : null) : null;
	}
	
	public DischargeReportDetailVo getDischargeReportDetailsForCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("CareContext is null or id not provided for getDischargeDetailsForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List domainObjectList = factory.find("select drd from DischargeReportDetail as drd left join drd.careContext as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		DischargeReportDetailVoCollection reportDetail = DischargeReportDetailVoAssembler.createDischargeReportDetailVoCollectionFromDischargeReportDetail(domainObjectList);		
		
		return reportDetail != null && reportDetail.size() > 0 ? (reportDetail.get(0) != null ? reportDetail.get(0) : null) : null;
	}
	
	public PatientDocumentVoCollection getPatientDocumentsForPatient(PatientRefVo voRef)	
	{
		if(voRef == null ||
				voRef.getID_Patient() == null)
			throw new CodingRuntimeException("PatientRefVo is null or id not provided for getPatientDocumentsForPatient");	
		
		DomainFactory factory = getDomainFactory();
		List domainObjectList = factory.find("select pd from PatientDocument as pd left join pd.patient as patient where patient.id = :idPatient", new String[]{"idPatient"}, new Object[]{voRef.getID_Patient()});
		return PatientDocumentVoAssembler.createPatientDocumentVoCollectionFromPatientDocument(domainObjectList);						
	}
	
	public ims.core.vo.FieldHelpVo getHintByLookupID(ims.clinicaladmin.vo.lookups.EDischargeHINT voLookup)
	{
		EDischargeHINTConfig impl = (EDischargeHINTConfig)getDomainImpl(EDischargeHINTConfigImpl.class);
		return impl.getHintByLookupID(voLookup);
	}
	
	public HcpLiteVo getHcp(HcpRefVo voRef) 
	{
		if(voRef == null || voRef.getID_Hcp() == null)
			throw new CodingRuntimeException("HcpRefVo is null or id not provided for getHcp");
		
		return HcpLiteVoAssembler.create((Hcp)getDomainFactory().getDomainObject(voRef));
	}
	
	public String[] getSystemReportAndTemplate(Integer imsId)
	{
		String[] result = null;		
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.imsId= :imsid) order by t1_1.name", new String[] {"imsid"}, new Object[] {imsId});
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
			
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
		
		return result;
	}
	
	public DischargeReportDetailVo saveDischargeReportDetail(DischargeReportDetailVo record, DischargeReadyToLeaveVo voReady) throws StaleObjectException
	{
		if (record != null)
		{
			if (!record.isValidated())
				throw new DomainRuntimeException("PatientDocumentVo not validated");
		}
		DomainFactory factory = getDomainFactory();
		if  (!record.getID_DischargeReportDetailIsNotNull())
		{
			
			List<?> dischargeDetails = factory.find("select dd from DischargeReportDetail as dd left join dd.careContext as cc where cc.id = :idCareContext and dd.isRIE is null ", new String[]{"idCareContext"}, new Object[]{record.getCareContext().getID_CareContext()});
			if (dischargeDetails != null && dischargeDetails.size()>0)
			{
				throw new StaleObjectException(null);
			}
		}
		
		DischargeReportDetail dom = DischargeReportDetailVoAssembler.extractDischargeReportDetail(factory, record);
		factory.save(dom);				

		if (voReady != null)
		{
			ReadyToLeave domReady = DischargeReadyToLeaveVoAssembler.extractReadyToLeave(factory, voReady);
			factory.save(domReady);				
		}

		return DischargeReportDetailVoAssembler.create(dom);
	}
	
	public void select()
	{
		List<CareContext> careContexts = new ArrayList<CareContext>();
		String careContextIDs = "";
		
		DomainFactory factory = getDomainFactory();
		String sql = "select distinct drdcc, tto, ttos " +  
					 "from DischargeReportDetail as drd left join drd.careContext as drdcc left join drd.gpRecipients as gp, " + 
					 "MedicationDetails as md left join md.careContext as mdcc left join md.tTORequired as tto left join md.tTOs as ttos, " + 
					 "DischargeDetails as dd left join dd.careContext as ddcc " +
					 "where" + 
					 "(drd.isClinicalDetailsComplete = 1 and dd.dateOfDischarge is not null  and gp.id is not null )";         
		
		List lst = factory.find(sql);
		
		if(lst != null &&
				!lst.isEmpty())
		{
			for (Iterator iter = lst.iterator(); iter.hasNext();) 
			{			
				CareContext careContext = null;
				LookupInstance lookup = null;
				
				Object[] obj = (Object[])iter.next();
				
				if (obj[0] != null)	careContext = (CareContext) obj[0];						
				if (obj[1] != null)	lookup = (LookupInstance) obj[1];
													
				if (careContext != null &&
						lookup != null &
							lookup.getId() == -1717) //TTORequired = -1717 (NOT_REQUIRED) the discharge report can be generated if all other conditions are met  
				{
					if (careContextIDs != "")
						careContextIDs += " , ";
					
					careContexts.add(careContext);
					careContextIDs += careContext.getId();
				}
				else if (careContext != null &&
							lookup != null &
								lookup.getId() == -1716) //TTORequired = -1716 (REQUIRED) then there must be at least one record in the TTOs field collection in the eDischarge.MedicationDetails [ID: 1099100002, Type: business object] 
				{			
					
				}
				else if (careContext != null &&
							lookup != null &
								lookup.getId() == -1718)//TTORequired = -1718 (NOT_SPECIFIED) then the discharge report cannot be generated  
				{
					
				}	
			}
		}
		
		List domainObjectList = factory.find("select drd from DischargeReportDetail as drd left join drd.careContext as cc where cc.id in ( " + careContextIDs + " )");
		DischargeReportDetailVoCollection reportDetail = DischargeReportDetailVoAssembler.createDischargeReportDetailVoCollectionFromDischargeReportDetail(domainObjectList);	
		
	}

	public GPLiteWithCommChannelsVo getGPLiteWithCommChannelsFromPatientShort(
			PatientShort patientShort) 
	{
		if(patientShort == null || patientShort.getID_Patient() == null)
			throw new CodingRuntimeException("PatientShort is null ");
		Patient pat = (Patient) getDomainFactory().getDomainObject(patientShort);
		if(pat == null)
			throw new CodingRuntimeException("Patient is null ");
		return GPLiteWithCommChannelsVoAssembler.create((Gp)pat.getGp() );
	}

	public PatientDiagnosisEDischargeListVoCollection listComorbidity(
			EpisodeOfCareRefVo episodeofCareRefVo) {
		EDischargeDiagnosisEtcComponent impl = (EDischargeDiagnosisEtcComponent)getDomainImpl(EDischargeDiagnosisEtcComponentImpl.class);
		return impl.listComorbidity(episodeofCareRefVo);
	}

	public PatientDiagnosisEDischargeListVoCollection listComplications(
			EpisodeOfCareRefVo episodeofCareRefVo) {
		EDischargeDiagnosisEtcComponent impl = (EDischargeDiagnosisEtcComponent)getDomainImpl(EDischargeDiagnosisEtcComponentImpl.class);
		return impl.listComplications(episodeofCareRefVo);
	}

	public DischargeDetailsVo saveDischargeDetails(
			DischargeDetailsVo dischargeDetail) throws StaleObjectException {
		EDischarge edischargeImpl = (EDischarge)getDomainImpl(EDischargeImpl.class);
		try {
			edischargeImpl.saveDischargeDetails(dischargeDetail);
		} catch (DomainInterfaceException e) {
				throw new CodingRuntimeException(e);
		}
		return null;
	}

	public DischargeReadyToLeaveVo saveReadyToLeave(DischargeReadyToLeaveVo voReady) throws DomainInterfaceException, StaleObjectException {
		// TODO Auto-generated method stub
		return null;
	}

	public DischargeReadyToLeaveVo getReadyToLeave(CareContextRefVo careContextRefvo)
	{
		EDischargePatientReadyToLeaveComponent impl = (EDischargePatientReadyToLeaveComponent)getDomainImpl(EDischargePatientReadyToLeaveComponentImpl.class);
		return impl.getReadyToLeave(careContextRefvo);
	}

	public DementiaEDischargeCheckVo getDementiaStatus(PASEventRefVo voPasEventRef)
	{
		if (voPasEventRef == null)
			throw new CodingRuntimeException("No pasEvent specified for getDementiaStatus");

		DomainFactory factory = getDomainFactory();

		StringBuffer hqlConditions = new StringBuffer();

		String hql = "select d1_1 from Dementia as d1_1 left join d1_1.admissionDetail as a1_1 where"; 

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		hqlConditions.append(" (d1_1.isRIE is null OR d1_1.isRIE = 0) and a1_1.pasEvent.id = :pe"); //WDEV-17656
		markers.add("pe");
		values.add(voPasEventRef.getID_PASEvent());
		
		hqlConditions.append(" and (d1_1.isExcludedFromWorklist is null or d1_1.isExcludedFromWorklist = :exc)");
		markers.add("exc");
		values.add(Boolean.FALSE);

		List<?> list = factory.find((hql + hqlConditions.toString() + " ").toString(), markers, values);

		if (list == null || list.size() == 0)
			return null;
		
		return DementiaEDischargeCheckVoAssembler.createDementiaEDischargeCheckVoCollectionFromDementia(list).get(0);
	}

	//WDEV-16745
	public InpatientEpisodeForVTERiskAsessmentVo getVteStatus(Integer pasId)
	{
		if (pasId == null)
			throw new CodingRuntimeException("Cannot get VTE Status on null pasEvent ID");

		DomainFactory factory = getDomainFactory();

		String hql = "select inp from InpatientEpisode as inp left join inp.pasEvent as pasEv where pasEv.id = :pasID"; 

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		markers.add("pasID");
		values.add(pasId);

		List<?> list = factory.find(hql.toString(), markers, values);

		if (list == null || list.size() == 0)
			return null;
		
		return InpatientEpisodeForVTERiskAsessmentVoAssembler.createInpatientEpisodeForVTERiskAsessmentVoCollectionFromInpatientEpisode(list).get(0);
	}
}
