//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.20 build 40805.1100)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.DischargeInpatient;
import ims.clinical.domain.objects.Discharge;
import ims.coe.vo.domain.DischargeAssembler;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.domain.Reports;
import ims.core.domain.impl.ReportsImpl;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.InpatientEpisodeVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;

import java.util.List;

public class DischargeInpatientImpl extends DomainImpl implements DischargeInpatient, ims.domain.impl.Transactional
{
	/**
	 * save the Discharge record
	 */
	public ims.coe.vo.Discharge saveDischarge(ims.coe.vo.Discharge dischargeVo) throws StaleObjectException
	{	
		if(!dischargeVo.isValidated())
			throw new DomainRuntimeException("This Discharge has not been validated");
		
		DomainFactory factory = getDomainFactory();
		ims.clinical.domain.objects.Discharge domDis = DischargeAssembler.extractDischarge(factory, dischargeVo);
		
		factory.save(domDis);	
		return DischargeAssembler.create(domDis);
	}

	/**
	 * @param clinicalContact
	 * @return
	 */
	private InpatientEpisodeVo getCurrentInpatientEpisode(ClinicalContactShortVo voClinicalContact) {
		DomainFactory factory = getDomainFactory();		
		
		String hql = "from InpatientEpisode ip where ip.pasEvent = (select event.id from PASEvent as event join event.clinicalContact contact where contact.id = :clinicalContact)";
		List l = factory.find(hql, new String[] {"clinicalContact"}, new Object[] {voClinicalContact.getID_ClinicalContact()});		
		if (l != null && l.size() > 0)
		{
			return InpatientEpisodeVoAssembler.create((InpatientEpisode)l.get(0));
		}
		return null;
	}

	public ims.coe.vo.Discharge getDischarge(CareContextShortVo careContext)
	{
		if(careContext != null && careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext id is null in method listDischarge");
			
		List discharges = getDomainFactory().find("from Discharge dis where dis.careContext.id = :ccId", new String[]{"ccId"}, new Object[]{careContext.getID_CareContext()});
	
		if (discharges != null && discharges.size() > 0) 
			return DischargeAssembler.create((Discharge)discharges.get(0));
		else
			return null;
	}

	public String[] getReportAndTemplate(Integer reportId, Integer templateId)
	{
		Reports impl = (Reports) getDomainImpl(ReportsImpl.class);
		return impl.getReportAndTemplate(reportId, templateId);
	}

	public CareContextShortVo updateCareContextWithEndDateTime(CareContextRefVo careContext, DateTime endDateTime) throws StaleObjectException
	{
		if(careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext parameter cannot be null in method updateCareContextAndEpisodeOfCareWithEndDateTime");
		
		if(endDateTime == null)
			throw new CodingRuntimeException("endDateTime parameter cannot be null in method updateCareContextAndEpisodeOfCareWithEndDateTime");
		
		
		DomainFactory factory = getDomainFactory();
		
		CareContext doCareContext = (CareContext) factory.getDomainObject(careContext);
		
		if(endDateTime != null)
			doCareContext.setEndDateTime(endDateTime.getJavaDate());
		//if(doCareContext.getEpisodeOfCare() != null && endDateTime != null)
			//doCareContext.getEpisodeOfCare().setEndDate(endDateTime.getJavaDate());
			
		factory.save(doCareContext);
		return CareContextShortVoAssembler.create(doCareContext);
	}

	public CareContextShortVo updateCareContextAndEpisodeOfCareWithEndDateTime(CareContextRefVo careContext, DateTime endDateTime) throws StaleObjectException
	{
		if(careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext parameter cannot be null in method updateCareContextAndEpisodeOfCareWithEndDateTime");
		
		if(endDateTime == null)
			throw new CodingRuntimeException("endDateTime parameter cannot be null in method updateCareContextAndEpisodeOfCareWithEndDateTime");
		
		
		DomainFactory factory = getDomainFactory();
		
		CareContext doCareContext = (CareContext) factory.getDomainObject(careContext);
		
		if(endDateTime != null)
			doCareContext.setEndDateTime(endDateTime.getJavaDate());
		if(doCareContext.getEpisodeOfCare() != null && endDateTime != null)
			doCareContext.getEpisodeOfCare().setEndDate(endDateTime.getJavaDate());
			
		factory.save(doCareContext);
		return CareContextShortVoAssembler.create(doCareContext);
	}

}
