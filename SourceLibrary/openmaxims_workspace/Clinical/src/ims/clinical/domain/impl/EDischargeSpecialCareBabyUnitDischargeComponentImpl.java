//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 3951.16815)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseEDischargeSpecialCareBabyUnitDischargeComponentImpl;
import ims.clinical.helper.EDischargeHelper;
import ims.clinical.helper.IEDischargeHelper;
import ims.clinical.vo.domain.NeonatalVoAssembler;
import ims.domain.DomainFactory;
import ims.edischarge.domain.objects.NeoNatal;
import ims.edischarge.vo.SummaryRefVo;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class EDischargeSpecialCareBabyUnitDischargeComponentImpl extends BaseEDischargeSpecialCareBabyUnitDischargeComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* getNeonatalByCareContext
	*/
	public ims.clinical.vo.NeonatalVo getNeonatalByCareContext(ims.core.admin.vo.CareContextRefVo careContext)
	{
		if (careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext is null or id not provided in method getNeonatalByCareContext");
		
		DomainFactory factory = getDomainFactory();
		List nnItems =  factory.find("from NeoNatal nn where nn.careContext.id = " + careContext.getID_CareContext());
		
		if(nnItems != null && nnItems.size() > 0)
			return NeonatalVoAssembler.create((NeoNatal) nnItems.get(0));
		
		return null;
	}

	/**
	* saveNeonatal
	*/
	public void saveNeonatal(ims.clinical.vo.NeonatalVo neonatal, SummaryRefVo summary) throws ims.domain.exceptions.StaleObjectException
	{
		if (neonatal == null)
			throw new CodingRuntimeException("neonatal is null in method saveNeonatal");
		if (!neonatal.isValidated())
			throw new CodingRuntimeException("neonatal has not been validated in method saveNeonatal");

		DomainFactory factory = getDomainFactory();
		factory.save(NeonatalVoAssembler.extractNeoNatal(factory, neonatal));
		
		//updating summary WDEV-11348
		IEDischargeHelper impl = (IEDischargeHelper) getDomainImpl(EDischargeHelper.class); 
		impl.updateSummaryIfRequired(neonatal, summary, factory);
	}
	
	/**
	 * @param record - instance of vo that implements IEDischargeSummary
	 * @param summary
	 * @param factory
	 */
	/*
	private void updateSummaryIfRequired(IEDischargeSummary record, SummaryRefVo summary, DomainFactory factory) throws ims.domain.exceptions.StaleObjectException
	{
		if(summary == null)
			return;
		
		boolean updateRequired = false;
		Summary doSummary = (Summary)factory.getDomainObject(summary);
		SummaryDetail doSummaryDetail = (SummaryDetail) doSummary.getSummaryDetails().get(findDetailRecordForType(doSummary.getSummaryDetails(),EDischargeSummarySection.NEONATAL));
		if(record.getIEDischargeSummaryIsComplete())
		{
			updateRequired = true;
			doSummaryDetail.setProgressStatus(getDomLookup(EDischargeSummarySectionStatus.COMPLETED));
		}
		else
		{
			updateRequired = true;
			doSummaryDetail.setProgressStatus(getDomLookup(EDischargeSummarySectionStatus.IN_PROGRESS));
		}
		
		if(updateRequired)
			factory.save(doSummaryDetail);
	}

	private int findDetailRecordForType(List summaryDetails, EDischargeSummarySection section)
	{
		for(int i=0; i<summaryDetails.size(); i++)
		{
			SummaryDetail doSummDetail = (SummaryDetail) summaryDetails.get(i);
			if(doSummDetail.getSection().equals(getDomLookup(section)))
				return i;
		}
		
		throw new CodingRuntimeException("Summary Detail record not instantiated for " + section.getText());
	}
	*/
}
