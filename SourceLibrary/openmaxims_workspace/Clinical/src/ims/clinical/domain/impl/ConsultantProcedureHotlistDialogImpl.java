//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.vo.ConsultantProcedureCategoryVo;
import ims.admin.vo.ConsultantProcedureCategoryVoCollection;
import ims.admin.vo.domain.ConsultantProcedureCategoryVoAssembler;
import ims.clinical.domain.base.impl.BaseConsultantProcedureHotlistDialogImpl;
import ims.core.clinical.domain.objects.Service;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.ProcedureCategory;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class ConsultantProcedureHotlistDialogImpl extends BaseConsultantProcedureHotlistDialogImpl
{
	private static final long serialVersionUID = 1L;

	public ims.core.vo.ServiceLiteVoCollection listServices()
	{
		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(getDomainFactory().listDomainObjects(Service.class));
		
	}

	public ims.core.vo.ProcedureLiteVoCollection listProcedures(ProcedureCategory category, String procNameFilter, ims.core.vo.HcpLiteVo currUser)
	{
			
		StringBuilder query = new StringBuilder(
				"select p1_1 from ConsultantProcedureCategory as c1_1 left join " +
				"c1_1.categoryProcedures as c2_1 left join c2_1.procedures as p1_1 " +
				"where (p1_1.isActive = 1 and c1_1.performingHCP.id = :Hcp_id");
		
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		paramNames.add("Hcp_id");
		paramValues.add(currUser.getID_Hcp());
		
		if (category != null)
		{
			query.append(" and c2_1.category.id = :Category_id");
			paramNames.add("Category_id");
			paramValues.add(category.getID());
			
		}
		if (procNameFilter != null)
		{
			query.append(" and upper(p1_1.procedureName) like :nameFilter");   //wdev-13658
			paramNames.add("nameFilter");
			paramValues.add("%"+procNameFilter.toUpperCase()+"%");             //wdev-13658
			
		}
		query.append(" ) order by p1_1.procedureName asc ");
		 
		
		List<?> procs = getDomainFactory().find(query.toString(),paramNames,paramValues);
		
		if (procs == null || procs.size() == 0)
			return null;
		return ProcedureLiteVoAssembler.createProcedureLiteVoCollectionFromProcedure(procs);
	}

	public ConsultantProcedureCategoryVo getConsultantProcedureCategoryByHcp(HcpLiteVo hcp) throws DomainInterfaceException {
		if(hcp == null)
			throw new CodingRuntimeException("hcp is null");
		
		DomainFactory factory = getDomainFactory();
		List conProcCateList = factory.find("from ConsultantProcedureCategory cpc where cpc.performingHCP.id = :idHcp)", new String[]{"idHcp"}, new Object[]{hcp.getID_Hcp()});
		ConsultantProcedureCategoryVoCollection coll = ConsultantProcedureCategoryVoAssembler.createConsultantProcedureCategoryVoCollectionFromConsultantProcedureCategory(conProcCateList);
		if(coll.size()!= 0)
			return coll.get(0);
		else
			return null;
	}

}
