//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3497.26747)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseEDischargeDiagnosisEtcComponentImpl;
import ims.clinical.helper.EDischargeHelper;
import ims.clinical.helper.IEDischargeHelper;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.domain.DischargeDetailsVoAssembler;
import ims.clinical.vo.lookups.DischargeLetterStatus;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.domain.objects.PatientDiagnosis;
import ims.core.domain.Alerts;
import ims.core.domain.impl.AlertsImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.DischargeClinicalInformationSTHKVo;
import ims.core.vo.PatientDiagnosisEDischargeListVo;
import ims.core.vo.PatientDiagnosisEDischargeListVoCollection;
import ims.core.vo.PatientDiagnosisEDischargeVo;
import ims.core.vo.PatientDiagnosisEDischargeVoCollection;
import ims.core.vo.domain.DischargeClinicalInformationSTHKVoAssembler;
import ims.core.vo.domain.PatientDiagnosisEDischargeListVoAssembler;
import ims.core.vo.domain.PatientDiagnosisEDischargeVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.edischarge.domain.objects.DischargeClinicalInformation;
import ims.edischarge.domain.objects.DischargeDetails;
import ims.edischarge.vo.SummaryRefVo;
import ims.framework.FormName;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;

import java.io.Serializable;
import java.util.ArrayList;
public class EDischargeDiagnosisEtcComponentImpl extends BaseEDischargeDiagnosisEtcComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* Get OPDEDVo
	*/
	public ims.core.vo.PatientDiagnosisEDischargeVo getDiagnosisVo(ims.core.clinical.vo.PatientDiagnosisRefVo patdiagrefVo)
	{
		if(patdiagrefVo == null)
			throw new DomainRuntimeException("Cannot get PatientDiagnosisVo for null PatientDiagnosisRefVo");
		
		DomainFactory factory = getDomainFactory();
		PatientDiagnosis doPatientDiagnosis = (PatientDiagnosis)factory.getDomainObject(PatientDiagnosis.class,patdiagrefVo.getID_PatientDiagnosis());
		return PatientDiagnosisEDischargeVoAssembler.create(doPatientDiagnosis);
	}

	/**
	* saveDiagnosisVo
	*/
	public PatientDiagnosisEDischargeVo saveDiagnosisVo(PatientDiagnosisEDischargeVo voDiagnosis, SummaryRefVo summaryVo) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException
	{
		// Ensure the value object has been validated
		if (!voDiagnosis.isValidated())
			throw new DomainRuntimeException("Diagnosis has not been validated");
		
		DomainFactory factory = getDomainFactory();
		PatientDiagnosis doPatDiag = PatientDiagnosisEDischargeVoAssembler.extractPatientDiagnosis(factory, voDiagnosis);
		
		factory.save(doPatDiag);
		
		if (summaryVo != null
			&& voDiagnosis.getIsComplicationIsNotNull()
			&& voDiagnosis.getIsComorbidityIsNotNull()
			&& ! voDiagnosis.getIsComplication()
			&& ! voDiagnosis.getIsComorbidity())
		{
			IEDischargeHelper impl = (IEDischargeHelper) getDomainImpl(EDischargeHelper.class); 
			impl.updateSummaryIfRequired(voDiagnosis, summaryVo, factory);
		}

		return PatientDiagnosisEDischargeVoAssembler.create(doPatDiag);//Create here to avoid possible StaleObj in PMH save
	}

	/**
	* listDiagnosisComplicationsByPatient
	 * @param careContextDate 
	*/
	private ims.core.vo.PatientDiagnosisEDischargeListVoCollection domListAll(ims.core.patient.vo.PatientRefVo voPatRef, ims.core.admin.vo.EpisodeOfCareRefVo episodeOfCareRefVo, boolean bComplication, boolean bComorbidity, Date careContextDate,String ignored)//WDEV-12105
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = new String();
		hql = " select patdiag from PatientDiagnosis patdiag ";

		StringBuffer condStr = new StringBuffer();
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = " ";
		
		if (voPatRef != null) 
		{
			condStr.append(andStr + " patdiag.careContext.episodeOfCare.careSpell.patient.id = :patientId");
			markers.add("patientId");
			values.add(voPatRef.getID_Patient());
			andStr = " and ";	
			
			if (careContextDate != null)
			{
				condStr.append(andStr + " patdiag.careContext.episodeOfCare.startDate <= :ccStartDate");//WDEV-12042
				markers.add("ccStartDate");
				values.add(careContextDate.getDate());
			}
		}
		if (episodeOfCareRefVo != null) 
		{
			condStr.append(andStr + " patdiag.careContext.episodeOfCare.id = :epsId");
			
			markers.add("epsId");
			values.add(episodeOfCareRefVo.getID_EpisodeOfCare());
			andStr = " and ";			

			condStr.append(andStr + " ( patdiag.isComorbidity = :notCommorb");
			if (!bComorbidity)
			{
				condStr.append(" or patdiag.isComorbidity is null");
			}
			condStr.append(" ) ");
			markers.add("notCommorb");
			values.add(bComorbidity);

			condStr.append(andStr + " ( patdiag.isComplication = :complication");
			if (!bComplication)
			{
				condStr.append(" or patdiag.isComplication is null");
			}
			condStr.append(" ) ");
			markers.add("complication");
			values.add(bComplication);
		}

		if (ignored!=null && ignored.length() > 0)//WDEV-12105
		{
			condStr.append(andStr+" patdiag.id not in ("+ignored+")");//WDEV-12105
		}
		
		hql += " where ";
		hql += condStr.toString();
		return PatientDiagnosisEDischargeListVoAssembler.createPatientDiagnosisEDischargeListVoCollectionFromPatientDiagnosis(factory.find(hql,markers,values)).sort();		
	}
	
	public ims.core.vo.PatientDiagnosisEDischargeListVoCollection listDiagnosis(ims.core.admin.vo.EpisodeOfCareRefVo episodeOfCareRefVo)
	{
		return domListAll(null , episodeOfCareRefVo, false, false, null,null);
	}

	public PatientDiagnosisEDischargeListVoCollection listComorbidity(EpisodeOfCareRefVo episodeOfCareRefVo) 
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = new String();
		hql = " select patdiag from PatientDiagnosis patdiag ";

		StringBuffer condStr = new StringBuffer();
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = " ";
		
		if (episodeOfCareRefVo != null) 
		{
			condStr.append(andStr + " patdiag.careContext.episodeOfCare.id = :epsId");
			
			markers.add("epsId");
			values.add(episodeOfCareRefVo.getID_EpisodeOfCare());
			andStr = " and ";			

			condStr.append(andStr + " ( patdiag.isComorbidity = :notCommorb) ");
			markers.add("notCommorb");
			values.add(new Boolean(true));

			condStr.append(andStr + " ( patdiag.isComplication = :complication or patdiag.isComplication is null) ");
			markers.add("complication");
			values.add(new Boolean(false));
		}

		hql += " where ";
		hql += condStr.toString();
		return PatientDiagnosisEDischargeListVoAssembler.createPatientDiagnosisEDischargeListVoCollectionFromPatientDiagnosis(factory.find(hql,markers,values)).sort();		
	}

	public PatientDiagnosisEDischargeListVoCollection listComplications(EpisodeOfCareRefVo episodeOfCareRefVo) 
	{
		return domListAll(null , episodeOfCareRefVo, true, false, null,null);
	}

	public PatientDiagnosisEDischargeListVoCollection listPreviousRecordsForPatient(PatientRefVo voPatRef, Date careContextDate,String ignored) 
	{
		return domListAll(voPatRef , null, false, false, careContextDate,ignored);
	}

	public DischargeDetailsVo getDischargeDetails(CareContextRefVo careContextRefvo)
	{
		IEDischargeHelper impl = (IEDischargeHelper)getDomainImpl(EDischargeHelper.class);
		return impl.getDischargeDetails(careContextRefvo);
	}

	public DischargeDetailsVo saveDischargeDetails(DischargeDetailsVo voDischargeDetails, SummaryRefVo summaryVo) throws DomainInterfaceException, StaleObjectException
	{
		if(voDischargeDetails == null)
			throw new CodingRuntimeException("DischargeDetailsVo is null");
		
		if(!voDischargeDetails.isValidated())
			throw new CodingRuntimeException("DischargeDetailsVo Value Object has not been validated");

		DomainFactory factory = getDomainFactory();
		DischargeDetails doDD = DischargeDetailsVoAssembler.extractDischargeDetails(factory, voDischargeDetails);

		factory.save(doDD);
		
		if (summaryVo != null)
		{
			IEDischargeHelper impl = (IEDischargeHelper)getDomainImpl(EDischargeHelper.class);
			impl.updateSummaryIfRequired(voDischargeDetails, summaryVo, factory);
		}

		return DischargeDetailsVoAssembler.create(doDD);

	}

	/**
	 * WDEV-12689
	 * Function used to retrieve Discharge Clinical Information
	 */
	public DischargeClinicalInformationSTHKVo getDischargeClinicalInformation(CareContextRefVo careContext)
	{
		if (careContext == null)
			throw new CodingRuntimeException("careContextRefVo Filter not provided for list call. ");

		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from DischargeClinicalInformation clininfo where clininfo.careContext.id = :CC_ID and clininfo.isRIE is null");

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		markers.add("CC_ID");
		values.add(careContext.getID_CareContext());

		return DischargeClinicalInformationSTHKVoAssembler.create((DischargeClinicalInformation) factory.findFirst(hql.toString(), markers, values));
	}

	public DischargeDetailsVo save(DischargeDetailsVo dd, PatientDiagnosisEDischargeVoCollection diags, SummaryRefVo summary) throws StaleObjectException, UniqueKeyViolationException, DomainInterfaceException
	{
		if (diags!=null)
		{
			for (int i = 0 ; i < diags.size() ; i++)
			{
				saveDiagnosisVo(diags.get(i),summary);
			}
		}
		return saveDischargeDetails(dd, summary);
		
	}

	public void rieDiagnosis(PatientDiagnosisEDischargeListVo diag, FormName formName, Integer patientId, Integer contactId, Integer careContextId, String rieMessage, SummaryRefVo summary) throws StaleObjectException
	{
	 
		if (summary!=null && summary.getID_SummaryIsNotNull())
		{
			//Check to see if letter status is generated 
			String sql = "select count(summ.id) from Summary as summ left join summ.dischargeLetterStatus as lookup where (summ.id=:summId and lookup.id = :idGenerated)";
			
			long count = getDomainFactory().countWithHQL(sql, new String[]{"summId","idGenerated"}, new Object[]{summary.getID_Summary(),DischargeLetterStatus.GENERATED.getID()});
			if (count >0)
				throw new StaleObjectException(null);
		}
		
		markAsRie(diag, formName, patientId, contactId, careContextId, rieMessage);
		
		
	}

	//WDEV-14653
	public String getPIDDiagnosisInfo(CareContextRefVo careContextRefVo, EpisodeOfCareRefVo episodeOfCareRefVo)
	{
		Alerts impl = (Alerts) getDomainImpl(AlertsImpl.class);
		return impl.getPIDDiagnosisInfo(careContextRefVo, episodeOfCareRefVo);
	}

}
