//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3520.27738)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BasePatientICPListImpl;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.domain.Alerts;
import ims.core.domain.impl.AlertsImpl;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.Time;
import ims.icp.vo.PatientICPMediumVo;
import ims.icp.vo.domain.PatientICPMediumVoAssembler;
import ims.icps.instantiation.domain.objects.PatientICP;
import ims.icps.instantiation.vo.PatientICPRefVo;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;

public class PatientICPListImpl extends BasePatientICPListImpl
{

	private static final long serialVersionUID = 1L;

	public ims.icp.vo.PatientICPMediumVoCollection listPatientICPs(ims.core.patient.vo.PatientRefVo patRefVo)
	{
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = "";
		StringBuffer sb = new StringBuffer();

		String hql = " from PatientICP as icp ";
		
		andStr = " ";

		sb.append(andStr + " icp.patient.id = :pat");
		markers.add("pat");
		values.add(patRefVo.getID_Patient());
		andStr = " and ";

		hql += " where ";
		hql += sb.toString();

		return PatientICPMediumVoAssembler.createPatientICPMediumVoCollectionFromPatientICP(getDomainFactory().find(hql.toString(), markers, values));
	}

	public CareContextShortVo getCareContextShort(CareContextRefVo voCareContextRef) 
	{
		if (voCareContextRef == null)
			throw new RuntimeException("Cannot get CareContextShortVo for null CareContextRefVo");

		CareContext doCareContext = (CareContext) getDomainFactory().getDomainObject(CareContext.class, voCareContextRef.getID_CareContext());
		return CareContextShortVoAssembler.create(doCareContext);
	}

	public PatientICPMediumVo save(PatientICPMediumVo icp) throws StaleObjectException //Added for WDEV-12965  
	{
		if (icp == null)
			throw new DomainRuntimeException("Trying to save a null record");
		if (!icp.isValidated())
			throw new DomainRuntimeException("Trying to save a record that has not been validated");
		DomainFactory df = getDomainFactory();
		PatientICP patIcpBo = PatientICPMediumVoAssembler.extractPatientICP(df, icp);
		df.save(patIcpBo);
		return PatientICPMediumVoAssembler.create(patIcpBo);
	}

	//WDEV-13198
	public Boolean hasOpenAppointments(PatientICPRefVo patientICP) 
	{
		if(patientICP == null || patientICP.getID_PatientICP() == null)
			throw new CodingRuntimeException("Cannot check if there are open appointments on null PatientICP Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select count(b.id) from PatientICP as picp left join picp.appointments as b where picp.id = :PantientICPId and (b.appointmentDate > :ApptDate or (b.appointmentDate = :ApptDate and b.apptStartTime >= :ApptTime)) and b.apptStatus.id = :ApptStatus";//	WDEV-13198
		
		Object[] count = factory.find(query, new String[] {"PantientICPId", "ApptDate", "ApptTime", "ApptStatus"}, new Object[] {patientICP.getID_PatientICP(), new Date().getDate(), (new Time()).toString(), Status_Reason.BOOKED.getID()}).toArray();
		
		if(count != null && count.length > 0)
		{
			if(((Long) count[0]).intValue() > 0)
				return Boolean.TRUE;
		
		}
		
		return Boolean.FALSE;
	}

	//WDEV-14660
	public String getPIDDiagnosisInfo(CareContextRefVo careContextRefVo, EpisodeOfCareRefVo episodeOfCareRefVo) 
	{
		Alerts impl = (Alerts) getDomainImpl(AlertsImpl.class);
		return impl.getPIDDiagnosisInfo(careContextRefVo, episodeOfCareRefVo);
	}
}
