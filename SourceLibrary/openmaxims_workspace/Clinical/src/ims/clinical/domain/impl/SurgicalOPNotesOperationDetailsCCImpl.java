//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.configuration.domain.objects.SurgicalOperationDetailsConfig;
import ims.clinical.domain.base.impl.BaseSurgicalOPNotesOperationDetailsCCImpl;
import ims.clinical.domain.objects.SurgicalOperationDetails;
import ims.clinical.domain.objects.SurgicalOperationNotes;
import ims.clinical.vo.domain.SurgicalOperationDetailsVoAssembler;
import ims.clinical.vo.domain.SurgicalOperationNotesVoAssembler;
import ims.clinicaladmin.vo.domain.SurgicalOperationDetailsConfigVoAssembler;
import ims.core.vo.PatientProcedureShortVo;
import ims.domain.exceptions.DomainInterfaceException;

import java.util.List;

public class SurgicalOPNotesOperationDetailsCCImpl extends BaseSurgicalOPNotesOperationDetailsCCImpl
{

	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unchecked")
	public ims.clinical.vo.SurgicalOperationDetailsVo getOperationDetails(ims.core.admin.vo.CareContextRefVo careContext)
	{
		String hqlQuery = "from SurgicalOperationDetails as s1_1 where (s1_1.careContext.id =:careContextID)";
		List<Object> domObj = getDomainFactory().find(hqlQuery,new String[]{"careContextID"} , new Object[]{careContext.getID_CareContext()});
		if (domObj == null || domObj.size() == 0)
			return null;
		return SurgicalOperationDetailsVoAssembler.create((SurgicalOperationDetails) domObj.get(0));
	}

	public ims.clinical.vo.SurgicalOperationDetailsVo save(ims.clinical.vo.SurgicalOperationDetailsVo record) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.ForeignKeyViolationException
	{
		if (record == null)
			throw new DomainInterfaceException("SurgicalOperationDetailsVo must be not null ");
		if (!record.isValidated())
			throw new DomainInterfaceException("SurgicalOperationDetailsVo  must be validates");
		SurgicalOperationDetails recDO = SurgicalOperationDetailsVoAssembler.extractSurgicalOperationDetails(getDomainFactory(), record);
		getDomainFactory().save(recDO);
		return  SurgicalOperationDetailsVoAssembler.create(recDO);
	}

	@SuppressWarnings("unchecked")
	public ims.clinicaladmin.vo.SurgicalOperationDetailsConfigVo getDefaultTemplate(PatientProcedureShortVo proc) throws ims.domain.exceptions.DomainInterfaceException
	{
		if (proc == null)
			throw new DomainInterfaceException("Patient procedure is mandatory");
		
		//WDEV-9946
		if (proc.getPeformedBy() == null || proc.getPeformedBy().getIMosHcpId() == null)
			throw new DomainInterfaceException("Operating Surgeon for patient procedure is mandatory");
		if (proc.getProcedure() == null)
			throw new DomainInterfaceException("Procedure for patient procedure is mandatory");
		String query = "from SurgicalOperationDetailsConfig as s1_1	where (s1_1.surgeon.id = :surgeonID and s1_1.procedureReference.id = :procID)";
		//WDEV-9946
		List result = getDomainFactory().find(query,new String[]{"surgeonID","procID"},new Object[]{proc.getPeformedBy().getIMosHcpId(),proc.getProcedure().getID_Procedure()});
		if (result == null || result.size()==0)
				return null;
		return SurgicalOperationDetailsConfigVoAssembler.create((SurgicalOperationDetailsConfig) result.get(0));
	}

	@SuppressWarnings("unchecked")
	public ims.clinical.vo.SurgicalOperationNotesVo getOperationNotes(ims.core.admin.vo.CareContextRefVo careContextRef)
	{
		String query = "from SurgicalOperationNotes as s1_1 where (s1_1.careContext.id = :careContextID)";
		List<Object> domObj = getDomainFactory().find(query,new String[]{"careContextID"} , new Object[]{careContextRef.getID_CareContext()});
		if (domObj == null || domObj.size() == 0)
			return null;
		return SurgicalOperationNotesVoAssembler.create((SurgicalOperationNotes) domObj.get(0));
	}
}
