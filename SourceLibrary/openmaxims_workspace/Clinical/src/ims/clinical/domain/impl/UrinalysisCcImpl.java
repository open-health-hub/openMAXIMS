//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4680.16533)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.clinical.domain.base.impl.BaseUrinalysisCcImpl;
import ims.core.vitals.domain.objects.Urinalysis;
import ims.core.vitals.vo.UrinalysisRefVo;
import ims.core.vo.domain.UrinalysisAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class UrinalysisCcImpl extends BaseUrinalysisCcImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.HcpCollection listHCPs(ims.core.vo.HcpFilter hcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(hcpFilter);
	}

	public ims.core.vo.UrinalysisCollection listUrinalysisByCareContext(ims.core.admin.vo.CareContextRefVo careContextRef, Boolean activeFilter)
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get Urinalysis on null Id for CareContext ");
		}

		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		hql.append("from Urinalysis as urinalysis where urinalysis.careContext.id = :cc ");

		markers.add("cc");
		values.add(careContextRef.getID_CareContext());

		if (activeFilter) // the active ones
		{
			hql.append(" and urinalysis.isActive = :active");
			markers.add("active");
			values.add(activeFilter);
		}

		List<?> list = factory.find(hql.toString(), markers, values);

		return UrinalysisAssembler.createUrinalysisCollectionFromUrinalysis(list).sort(SortOrder.DESCENDING);

	}

	public ims.core.vo.Urinalysis save(ims.core.vo.Urinalysis voUrinanalysis) throws ims.domain.exceptions.StaleObjectException
	{
		if (!voUrinanalysis.isValidated())
		{
			throw new DomainRuntimeException("Urinanalysis has not been validated");
		}

		DomainFactory factory = getDomainFactory();
		Urinalysis doUrinalysis = UrinalysisAssembler.extractUrinalysis(factory, voUrinanalysis);

		voUrinanalysis.setID_Urinalysis(doUrinalysis.getId());

		factory.save(doUrinalysis);
		return UrinalysisAssembler.create(doUrinalysis);
	}

	public ims.core.vo.Urinalysis getUrinalysis(UrinalysisRefVo urinalysisRef)
	{
		if (urinalysisRef == null || urinalysisRef.getID_Urinalysis() == null)
		{
			throw new CodingRuntimeException("Cannot get Urinalysis on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		Urinalysis domainUrinalysis = (Urinalysis) factory.getDomainObject(Urinalysis.class, urinalysisRef.getID_Urinalysis());

		return UrinalysisAssembler.create(domainUrinalysis);
	}
}
