//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.clinical.configuration.domain.objects.SurgicalOperationDetailsConfig;
import ims.clinical.domain.EDischargeDiagnosisEtcComponent;
import ims.clinical.domain.base.impl.BaseSurgicalOPNotesPostOpInstructionsCCImpl;
import ims.clinical.domain.objects.SurgicalOperationNotes;
import ims.clinical.domain.objects.SurgicalOperationSummary;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.DischargeDetailsVoCollection;
import ims.clinical.vo.DischargeFuturePlanVo;
import ims.clinical.vo.DischargeFuturePlanVoCollection;
import ims.clinical.vo.DischargeReportDetailVo;
import ims.clinical.vo.DischargeReportDetailVoCollection;
import ims.clinical.vo.NurseEnabledInstructionsVo;
import ims.clinical.vo.NurseEnabledInstructionsVoCollection;
import ims.clinical.vo.SurgicalOperationNotesVo;
import ims.clinical.vo.SurgicalOperationNotesVoCollection;
import ims.clinical.vo.SurgicalOperationSummaryVo;
import ims.clinical.vo.SurgicalOperationSummaryVoCollection;
import ims.clinical.vo.domain.DischargeDetailsVoAssembler;
import ims.clinical.vo.domain.DischargeFuturePlanVoAssembler;
import ims.clinical.vo.domain.DischargeReportDetailVoAssembler;
import ims.clinical.vo.domain.NurseEnabledInstructionsVoAssembler;
import ims.clinical.vo.domain.SurgicalOperationNotesVoAssembler;
import ims.clinical.vo.domain.SurgicalOperationSummaryVoAssembler;
import ims.clinicaladmin.vo.SurgicalOperationDetailsConfigVo;
import ims.clinicaladmin.vo.SurgicalOperationDetailsConfigVoCollection;
import ims.clinicaladmin.vo.domain.SurgicalOperationDetailsConfigVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientProcedureShortVo;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.edischarge.domain.objects.FuturePlan;
import ims.framework.exceptions.CodingRuntimeException;

public class SurgicalOPNotesPostOpInstructionsCCImpl extends BaseSurgicalOPNotesPostOpInstructionsCCImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.DischargeFuturePlanVo getFuturePlan(ims.core.admin.vo.CareContextRefVo careContextRefVo)
	{
		if(careContextRefVo == null)
			throw new CodingRuntimeException("careContextRefVo Filter not provided for list call. ");

		if(careContextRefVo != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from FuturePlan fp where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " fp.careContext.id = :careContextId");
 			markers.add("careContextId");
			values.add(careContextRefVo.getID_CareContext());
			andStr = " and ";	

			List list = factory.find(hql.toString(), markers,values);
			if(list != null && list.size() > 0)
			{ 
				DischargeFuturePlanVoCollection voColl = DischargeFuturePlanVoAssembler.createDischargeFuturePlanVoCollectionFromFuturePlan(list);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}
		
	public SurgicalOperationNotesVo getSurgicalOperation(CareContextRefVo careContextRefVo) 
	{
		if(careContextRefVo == null)
			throw new CodingRuntimeException("careContextRefVo Filter not provided for list call. ");

		if(careContextRefVo != null)
		{
			DomainFactory factory = getDomainFactory();
			List list = factory.find("from SurgicalOperationNotes as s1_1 where (s1_1.careContext.id = :careContextId)" , new String[] {"careContextId"}, new Object[] {careContextRefVo.getID_CareContext()}); 
			if(list != null && list.size() > 0)
			{ 
				SurgicalOperationNotesVoCollection voColl = SurgicalOperationNotesVoAssembler.createSurgicalOperationNotesVoCollectionFromSurgicalOperationNotes(list);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}
	public HcpLiteVoCollection listHCPs(HcpFilter filter) 
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		if (filter != null && filter.getQueryNameIsNotNull())
			return hcpAdmin.listHcpLiteByName(filter.getQueryName().getSurname());
		else 
			return null;
	}

	public LocationLiteVoCollection listWards(String location) 
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);		
		return impl.listActiveLocationsByName(location);
	}

	/*public dummyDishargeFPSurgicalOpNotesVo save(dummyDishargeFPSurgicalOpNotesVo dummy)
			throws DomainInterfaceException, StaleObjectException 
	{
		
		if(dummy == null)
			throw new CodingRuntimeException("dummyDischargeFuturePlanVoSurgicalOperationNotes is null");
		
		DischargeFuturePlanVo voDFP = dummy.getDischargeFuturePlan();
		if(voDFP == null)
			throw new CodingRuntimeException("DischargeFuturePlanVo is null");
		if(!voDFP.isValidated())
			throw new CodingRuntimeException("DischargeFuturePlanVo Value Object has not been validated");

		SurgicalOperationNotesVo voSOPN = dummy.getSurgicalOperationNotes();
		if(voSOPN == null)
			throw new CodingRuntimeException("SurgicalOperationNotesVo is null");

		if(!voSOPN.isValidated())
			throw new CodingRuntimeException("SurgicalOperationNotesVo Value Object has not been validated");

		
		DomainFactory factory = getDomainFactory();
		
	
		FuturePlan doFP = DischargeFuturePlanVoAssembler.extractFuturePlan(factory, voDFP);
		factory.save(doFP);
		SurgicalOperationNotes doSO =SurgicalOperationNotesVoAssembler.extractSurgicalOperationNotes(factory,voSOPN );
		factory.save(doSO);
		dummy.setDischargeFuturePlan(DischargeFuturePlanVoAssembler.create(doFP));
		dummy.setSurgicalOperationNotes(SurgicalOperationNotesVoAssembler.create(doSO));
		return dummy;
	
		
	}*/
	public HcpLiteVo getHCP(HcpRefVo voRef) 
	{
		if(voRef == null || voRef.getID_Hcp() == null)
			throw new CodingRuntimeException("HcpRefVo is null or id not provided for getHcp");
		
		return HcpLiteVoAssembler.create((Hcp)getDomainFactory().getDomainObject(voRef));
	}

	public String[] getSystemReportAndTemplate(Integer imsId) 
	{
		String[] result = null;		
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.imsId= :imsid) order by t1_1.name", new String[] {"imsid"}, new Object[] {imsId});
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
			
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
		
		return result;
	}

	public DischargeDetailsVo getDischargeDetails(CareContextRefVo careRef) 
	{
		EDischargeDiagnosisEtcComponent impl = (EDischargeDiagnosisEtcComponent)getDomainImpl(EDischargeDiagnosisEtcComponentImpl.class);
		return impl.getDischargeDetails(careRef);
	}

	public NurseEnabledInstructionsVo getNurseEnabledInstructions(CareContextRefVo careContextRef) 
	{
		
		if(careContextRef == null)
			throw new CodingRuntimeException("careContextRefVo Filter not provided for list call. ");

		if(careContextRef != null)
		{
			DomainFactory factory = getDomainFactory();
			List list = factory.find("from NurseEnabledInstructions as n1_1	where (n1_1.careContext.id = :ID) " , new String[] {"ID"}, new Object[] {careContextRef.getID_CareContext()}); 
			if(list != null && list.size() > 0)
			{ 
				NurseEnabledInstructionsVoCollection  voColl = NurseEnabledInstructionsVoAssembler.createNurseEnabledInstructionsVoCollectionFromNurseEnabledInstructions(list);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}

	public DischargeFuturePlanVo save(DischargeFuturePlanVo dummy, SurgicalOperationSummaryVo surgicalOperationSumm) throws DomainInterfaceException, StaleObjectException 
	{
		if(dummy == null)
			throw new CodingRuntimeException("DischargeFuturePlanVo is null");
		if(!dummy.isValidated())
			throw new CodingRuntimeException("DischargeFuturePlanVo Value Object has not been validated");
		
		if( surgicalOperationSumm == null)	//wdev-15917
			throw new CodingRuntimeException("SurgicalOperationSummaryVo is null");
		
		//wdev-11576
		if(!dummy.getID_FuturePlanIsNotNull())
		{
			if( getFuturePlan(dummy.getCareContext()) != null)
				throw new StaleObjectException(null);
		}
		//-----------
		DomainFactory factory = getDomainFactory();

		//wdev-15917
		SurgicalOperationSummary dosurgOpum = SurgicalOperationSummaryVoAssembler.extractSurgicalOperationSummary(factory,surgicalOperationSumm);
		if( dosurgOpum != null )
			factory.save(dosurgOpum);
		//---- wdev-15917	
		
		FuturePlan doFP = DischargeFuturePlanVoAssembler.extractFuturePlan(factory, dummy);
		factory.save(doFP);
		return DischargeFuturePlanVoAssembler.create(doFP);
	}

	public DischargeReportDetailVo getDischargeReportDetailsForCareContext(CareContextRefVo careContext) 
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("CareContext is null or id not provided for getDischargeDetailsForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List domainObjectList = factory.find("select drd from DischargeReportDetail as drd left join drd.careContext as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		DischargeReportDetailVoCollection reportDetail = DischargeReportDetailVoAssembler.createDischargeReportDetailVoCollectionFromDischargeReportDetail(domainObjectList);		
		
		return reportDetail != null && reportDetail.size() > 0 ? (reportDetail.get(0) != null ? reportDetail.get(0) : null) : null;
	
	}

	//wderv-13658
	public SurgicalOperationDetailsConfigVo getDefaultTemplate(PatientProcedureShortVo proc) throws DomainInterfaceException 
	{
		if (proc == null)
			throw new DomainInterfaceException("Patient procedure is mandatory");
		
		//WDEV-9946
		if (proc.getPeformedBy() == null || proc.getPeformedBy().getIMosHcpId() == null)
			throw new DomainInterfaceException("Operating Surgeon for patient procedure is mandatory");
		if (proc.getProcedure() == null)
			throw new DomainInterfaceException("Procedure for patient procedure is mandatory");
		String query = "from SurgicalOperationDetailsConfig as s1_1	where (s1_1.surgeon.id = :surgeonID and s1_1.procedureReference.id = :procID)";
		//WDEV-9946
		List result = getDomainFactory().find(query,new String[]{"surgeonID","procID"},new Object[]{proc.getPeformedBy().getIMosHcpId(),proc.getProcedure().getID_Procedure()});
		if (result == null || result.size()==0)
				return null;
		return SurgicalOperationDetailsConfigVoAssembler.create((SurgicalOperationDetailsConfig) result.get(0));
	}
	//wdev-13658
	public SurgicalOperationNotesVo getOperationNotes(CareContextRefVo careContextRef) 
	{
		String query = "from SurgicalOperationNotes as s1_1 where (s1_1.careContext.id = :careContextID)";
		List<Object> domObj = getDomainFactory().find(query,new String[]{"careContextID"} , new Object[]{careContextRef.getID_CareContext()});
		if (domObj == null || domObj.size() == 0)
			return null;
		return SurgicalOperationNotesVoAssembler.create((SurgicalOperationNotes) domObj.get(0));
	}

	//wdev-15917
	public SurgicalOperationSummaryVo getSurgicalOperationSUmmary(CareContextRefVo careContextRef) 
	{
		if( careContextRef == null )
			return null;
		
		DomainFactory factory = getDomainFactory();
		List surgicalOpSummary =   factory.find(" select s1_1 from SurgicalOperationSummary as s1_1 left join s1_1.careContext as c1_1 where (c1_1.id = :idCC)  )",
				new String[]{"idCC" },
				new Object[]{ careContextRef.getID_CareContext()});
		
		if( surgicalOpSummary!= null && surgicalOpSummary.size() > 0 )
		{
			SurgicalOperationSummaryVoCollection tempColl = SurgicalOperationSummaryVoAssembler.createSurgicalOperationSummaryVoCollectionFromSurgicalOperationSummary(surgicalOpSummary);
			
			if( tempColl != null && tempColl.size() > 0 )
				return tempColl.get(0);
			
		}
		return null;
	}

	
}
