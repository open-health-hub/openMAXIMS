//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.assessment.vo.domain.GraphicAssessmentShortVoAssembler;
import ims.clinical.domain.base.impl.BaseSurgicalOpNotesListImpl;
import ims.clinical.vo.domain.SurgicalOperationNotesListVoAssembler;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.DiagLiteVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.List;

public class SurgicalOpNotesListImpl extends BaseSurgicalOpNotesListImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.HcpLiteVoCollection listHcpLite(String nameFilter, HcpDisType hcpType)
	{
		HcpAdmin hcpAdminIml = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdminIml.listHcpLiteByNameAndDisciplineType(nameFilter, hcpType);
	}

	public ims.core.vo.ProcedureLiteVoCollection listProcedures(String filterName)
	{
		String hql = "from Procedure as p1_1 where " +
				"(UPPER(p1_1.procedureName) like :nameFilter and p1_1.isActive = 1)" +
				" order by p1_1.procedureName asc"; 
		List<?> result = getDomainFactory().find(hql,"nameFilter","%"+filterName.toUpperCase()+"%");		//wdev-16291
		if (result == null || result.size() == 0)
			return null;
		return ProcedureLiteVoAssembler.createProcedureLiteVoCollectionFromProcedure(result);
	}

	public ims.core.vo.DiagLiteVoCollection listDiagnosis(String filterName)
	{
		 
		String hql = "from Diagnosis as d1_1 where " +
				"(UPPER(d1_1.diagnosisName) like :nameFilter and d1_1.isActive = 1) " +
				"order by d1_1.diagnosisName asc"; 
		List<?> result = getDomainFactory().find(hql,"nameFilter","%"+filterName.toUpperCase()+"%");		//wdev-16291
		if (result == null || result.size() == 0)
			return null;
		return DiagLiteVoAssembler.createDiagLiteVoCollectionFromDiagnosis(result);
	}

	public ims.assessment.vo.GraphicAssessmentShortVoCollection listDiagrams(String nameFilter)
	{
		String hql = "select g1_1 from GraphicAssessment as g1_1 left join g1_1.activeStatus as l1_1 "+
		"where (UPPER(g1_1.name) like :nameFilter and g1_1.activeStatus.id = :active)"+ 
		" order by g1_1.name asc"; 
		List<?> result = getDomainFactory().find(hql,new String[]{"nameFilter","active"},
				new Object[]{"%"+nameFilter.toUpperCase()+"%",PreActiveActiveInactiveStatus.ACTIVE.getID()});	//wdev-16291
		if (result == null || result.size() == 0)
			return null;
		return GraphicAssessmentShortVoAssembler.createGraphicAssessmentShortVoCollectionFromGraphicAssessment(result);
	}

	public ims.core.vo.LocationLiteVoCollection listHospitals(String filterName)
	{
		String hql = "from Location as l1_1 where "+
		"(UPPER(l1_1.name) like :nameFilter and l1_1.isActive = 1 and l1_1.type.id = :hospTypeId) "+ 
		"order by l1_1.name asc"; 
		List<?> result = getDomainFactory().find(hql,new String[]{"nameFilter","hospTypeId"},
				new Object[]{"%"+filterName.toUpperCase()+"%",LocationType.HOSP.getID()});						//wdev-16291
		if (result == null || result.size() == 0)
			return null;
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(result);
	}

	public ims.clinical.vo.SurgicalOperationNotesListVoCollection listSurgicalOpNotes(ims.clinical.vo.SurgicalOPNotesFilterVo filter)
	{
		StringBuilder sql = new StringBuilder(
				"select distinct s1_1 from SurgicalOperationNotes as s1_1 " +
				"left join s1_1.careContext as c1_1 left join c1_1.episodeOfCare as e1_1 " +
				"left join e1_1.responsibleHCP as h2_1 left join c1_1.pasEvent as" +
				" p1_1 left join p1_1.location as l1_1 left join s1_1.diagram as p2_1 " +
				"left join p2_1.assessmentData as p3_1 left join s1_1.proceduresPerformed as p4_1 " +
				" left join p4_1.peformedBy as h3_1 left join s1_1.patientDiagnoses as p5_1, " +
				"FuturePlan as f1_1 left join f1_1.careContext as c2_1 left join c2_1.episodeOfCare as e2_1 " +
				"left join e2_1.responsibleHCP as h4_1 left join c2_1.pasEvent as p6_1 " +
				"left join p6_1.location as l2_1 left join f1_1.followUpDetails as f2_1 where( ");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		boolean firstParameterAdded = false;
		if (filter.getProcedureIsNotNull())		
		{
				sql.append("p4_1.procedure.id = :Procedure_id and ( p4_1.isRIE is null or p4_1.isRIE = 0 ) ");  //wdev-16092
				paramNames.add("Procedure_id");
				paramValues.add(filter.getProcedure().getID_Procedure());
				firstParameterAdded = true;
		}
		if (filter.getDiagnosisIsNotNull())
		{
			if (firstParameterAdded)
				sql.append("and ");
			sql.append("p5_1.diagnosis.id = :Diagnosis_id ");
			paramNames.add("Diagnosis_id");
			paramValues.add(filter.getDiagnosis().getID_Diagnosis());
			firstParameterAdded = true;
		}
		if (filter.getConsultantIsNotNull())
		{
			if (firstParameterAdded)
				sql.append("and ");
			sql.append("e1_1.responsibleHCP.id = :Consultant_id ");
			paramNames.add("Consultant_id");
			paramValues.add(filter.getConsultant().getID_Hcp());
			firstParameterAdded = true;
		}
		if (filter.getOperatingSurgeonIsNotNull())
		{
			if (firstParameterAdded)
				sql.append("and ");
			sql.append("p4_1.peformedBy.id = :Surgeon_id ");
			paramNames.add("Surgeon_id");
			paramValues.add(filter.getOperatingSurgeon().getID_Hcp());
			firstParameterAdded = true;
		}
		if (filter.getDiagramIsNotNull())
		{
			if (firstParameterAdded)
				sql.append("and ");
			sql.append("p3_1.graphic.id = :GraphicAssessment_id ");
			paramNames.add("GraphicAssessment_id");
			paramValues.add(filter.getDiagram().getID_GraphicAssessment());
			firstParameterAdded = true;
		}
		if (filter.getCompletingClinicianIsNotNull())
		{
			if (firstParameterAdded)
				sql.append("and ");
			sql.append("s1_1.signOffHCP.id = :CompletingClinician_id ");
			paramNames.add("CompletingClinician_id");
			paramValues.add(filter.getCompletingClinician().getID_Hcp());
			firstParameterAdded = true;
		}
		
		if (filter.getHospitalIsNotNull())
		{
			if (firstParameterAdded)
				sql.append("and ");
			sql.append("(p1_1.location.id = :Location_id or l1_1.parentLocation.id = :Location_id ) ");
			paramNames.add("Location_id");
			paramValues.add(filter.getHospital().getID_Location());
			firstParameterAdded = true;
		}
		
		if (filter.getFollowupOrderedIsNotNull())
		{
			if (firstParameterAdded)
				sql.append("and ");
			sql.append("(f2_1.followUpType.id = :FollowType_id and s1_1.careContext=c2_1.id) ");
			paramNames.add("FollowType_id");
			paramValues.add(filter.getFollowupOrdered().getID());
			firstParameterAdded = true;
		}		
		if (filter.getDateFromIsNotNull() && filter.getDateToIsNotNull())
		{
			if (firstParameterAdded)
				sql.append("and ");
			sql.append("s1_1.authoringInfo.authoringDateTime >= :date_from and s1_1.authoringInfo.authoringDateTime < :date_to ");
			paramNames.add("date_from");
			paramValues.add(filter.getDateFrom().getDate());
			paramNames.add("date_to");
			paramValues.add(((Date)filter.getDateTo().clone()).addDay(1).getDate());
		}
		else
		{
			if (filter.getDateFromIsNotNull())
			{
				if (firstParameterAdded)
					sql.append("and ");
				sql.append("s1_1.authoringInfo.authoringDateTime >= :date_from ");
				paramNames.add("date_from");
				paramValues.add(filter.getDateFrom().getDate());
			
			}
			if ( filter.getDateToIsNotNull())
			{
				if (firstParameterAdded)
					sql.append("and ");
				sql.append("s1_1.authoringInfo.authoringDateTime <= :date_to ");
			
				paramNames.add("date_to");
				paramValues.add(((Date)filter.getDateTo().clone()).addDay(1).getDate());
			}
		}
		
		sql.append(" ) order by s1_1.careContext asc ");
		
		List<?> domObj = getDomainFactory().find(sql.toString(),paramNames,paramValues);
		if (domObj == null || domObj.size() == 0)
		{
			return null;
		}
		return SurgicalOperationNotesListVoAssembler.createSurgicalOperationNotesListVoCollectionFromSurgicalOperationNotes(domObj);
	}

	public CareContextShortVo getCareContext(CareContextRefVo careContextRef)
	{
		return CareContextShortVoAssembler.create((CareContext) getDomainFactory().getDomainObject(CareContext.class, careContextRef.getID_CareContext()));
	}

	
}
