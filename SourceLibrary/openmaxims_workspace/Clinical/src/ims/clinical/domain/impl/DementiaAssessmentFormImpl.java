//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4696.13908)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseDementiaAssessmentFormImpl;
import ims.clinical.vo.DementiaAssessAndInvestigateVo;
import ims.clinical.vo.DementiaVo;
import ims.clinical.vo.domain.DementiaAssessAndInvestigateVoAssembler;
import ims.clinical.vo.domain.DementiaVoAssembler;
import ims.core.clinical.domain.objects.Dementia;
import ims.core.clinical.domain.objects.DementiaAssessAndInvestigate;
import ims.core.clinical.vo.DementiaAssessAndInvestigateRefVo;
import ims.core.vo.lookups.DementiaWorklistStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.exceptions.CodingRuntimeException;

public class DementiaAssessmentFormImpl extends BaseDementiaAssessmentFormImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.DementiaVo getDementia(ims.core.clinical.vo.DementiaRefVo dementiaRef)
	{
		if (dementiaRef == null || dementiaRef.getID_Dementia()== null)
		{
			throw new CodingRuntimeException("Cannot get DementiaVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		Dementia domainDementia = (Dementia) factory.getDomainObject(Dementia.class, dementiaRef.getID_Dementia());

		return DementiaVoAssembler.create(domainDementia);
	}

	public DementiaVo rieAMTSRecord(DementiaVo voDementia, FormName formName, Integer patientId, Integer contactId, Integer careContextId, String rieMessage) throws DomainInterfaceException, StaleObjectException
	{
		//RIE AMTS and its Comment 
		if (voDementia.getStepTwoAssessIsNotNull())
		{
			if (voDementia.getStepTwoAssess().getStepTwoAssessNoteIsNotNull())
				markAsRie(voDementia.getStepTwoAssess().getStepTwoAssessNote(), formName, patientId, contactId, careContextId, rieMessage);

			markAsRie(voDementia.getStepTwoAssess(), formName, patientId, contactId, careContextId, rieMessage);
		}

		//RIE the AMTS record
		if (voDementia.getStepOneFindIsNotNull())
			markAsRie(voDementia.getStepOneFind(), formName, patientId, contactId, careContextId, rieMessage);

		//also need to update dementia with NULL for the AMTSStep2record / replace currentstatus record with one from history / remove most recent history record and NULL AMTS score
		voDementia.setStepOneFind(null);
		voDementia.setStepTwoAssess(null);
		
		for (int i = 0 ; i< voDementia.getHistoricalWorklistStatus().size() ; i++)
		{
			if (voDementia.getHistoricalWorklistStatus().get(i).getStatusIsNotNull()
				&& voDementia.getHistoricalWorklistStatus().get(i).getStatus().equals(DementiaWorklistStatus.STEP_ONE_FIND_OUTSTANDING))
				voDementia.setCurrentWorklistStatus(voDementia.getHistoricalWorklistStatus().get(i));
	//		else
	//			markAsRie(voDementia.getHistoricalWorklistStatus().get(i), formName, patientId, contactId, careContextId, rieMessage);
		}


		voDementia.setAMTSScore(null);
		voDementia.setDeliriumConfirmed(null);
		voDementia.setDementiaConfirmed(null);
		voDementia.setConfirmedPatientPutOnDementiaPathway(null);
		voDementia.setIsExcludedFromWorklist(null);
		
		String[] arrErrors = voDementia.validate();
		if( arrErrors != null)
			throw new DomainRuntimeException("Error saving voDementia - not validated correctly");
		
		DomainFactory factory = getDomainFactory();
		
		Dementia domainDementia = DementiaVoAssembler.extractDementia(factory, voDementia);
		factory.save(domainDementia);
		return DementiaVoAssembler.create(domainDementia);
	}

	public DementiaAssessAndInvestigateVo getFollowUpAMTS(DementiaAssessAndInvestigateRefVo amtsRefVo)
	{
		if (amtsRefVo == null || amtsRefVo.getID_DementiaAssessAndInvestigate()== null)
		{
			throw new CodingRuntimeException("Cannot get DementiaAssessAndInvestigateRefVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		DementiaAssessAndInvestigate domainDementia = (DementiaAssessAndInvestigate) factory.getDomainObject(DementiaAssessAndInvestigate.class, amtsRefVo.getID_DementiaAssessAndInvestigate());

		return DementiaAssessAndInvestigateVoAssembler.create(domainDementia);
	}
}
