//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.clinical.domain.base.impl.BaseVTEAssessmentWardExceptionListImpl;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocationForVTEAssessmentVo;
import ims.core.vo.LocationForVTEAssessmentVoCollection;
import ims.core.vo.domain.LocationForVTEAssessmentVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class VTEAssessmentWardExceptionListImpl extends BaseVTEAssessmentWardExceptionListImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.LocationLiteVoCollection listHospitals()
	{
		OrganisationAndLocation organisationImpl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);	
		return organisationImpl.listActiveHospitalsLite().sort();
	}

	public ims.core.vo.LocationForVTEAssessmentVoCollection listWards(ims.core.resource.place.vo.LocationRefVo hospital)
	{
		if(hospital == null || hospital.getID_Location() == null)
			throw new CodingRuntimeException("Cannot list wards for a null Hospital Id.");
		
		return LocationForVTEAssessmentVoAssembler.createLocationForVTEAssessmentVoCollectionFromLocation(listLocationsByParentLocation(hospital)).sort();
	}

	private List<Location> listLocationsByParentLocation(LocationRefVo hospital) 
	{
		if(hospital == null || hospital.getID_Location() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		Location doLocation = (Location) factory.getDomainObject(Location.class, hospital.getID_Location());
		ArrayList<Location> listItems = new ArrayList<Location>();
		buildLocationsList(doLocation, listItems);

		return listItems;
	}
	
	private void buildLocationsList(Location location, ArrayList<Location> listItems)
	{
		Iterator it = location.getLocations().iterator();
		while(it.hasNext())
		{
			Location doLocation = (Location) it.next();
			if(doLocation.getType().equals(getDomLookup(LocationType.WARD)) && doLocation.isIsActive().equals(Boolean.TRUE) && doLocation.isIsVirtual().equals(Boolean.FALSE))
			{
				listItems.add(doLocation);
			}
			
			buildLocationsList(doLocation, listItems);
		}
	}

	public void saveWards(LocationForVTEAssessmentVoCollection wards) throws StaleObjectException 
	{
		if(wards == null)
			throw new CodingRuntimeException("Cannot save a null Wards collection.");
		
		if(!wards.isValidated())
			throw new CodingRuntimeException("Wards collection is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		for(LocationForVTEAssessmentVo ward : wards)
		{
			if(ward == null)
				continue;
			
			Location doWard = LocationForVTEAssessmentVoAssembler.extractLocation(factory, ward);
			
			factory.save(doWard);
		}
	}
}
