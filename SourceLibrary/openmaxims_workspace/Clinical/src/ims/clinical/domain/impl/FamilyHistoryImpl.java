//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
	// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.38 build 2144.16652)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;
 
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.clinical.domain.objects.PatientFamilyHistory;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.clinical.vo.FamilyHistoryVoCollection;
import ims.clinical.vo.domain.FamilyHistoryVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.impl.DomainImpl;

public class FamilyHistoryImpl extends DomainImpl implements ims.clinical.domain.FamilyHistory, ims.domain.impl.Transactional
{
	private static final long	serialVersionUID	= 1L;

	/**
	* save the patients family history for this contact
	*/
	public ims.clinical.vo.FamilyHistoryVo save(ims.clinical.vo.FamilyHistoryVo voFamilyHistory) throws ims.domain.exceptions.StaleObjectException
	{
		if(!voFamilyHistory.isValidated())
		{
			throw new DomainRuntimeException("Family History Value Object has not been validated");
		}
		
		DomainFactory factory = getDomainFactory();		
		PatientFamilyHistory famhistBo = FamilyHistoryVoAssembler.extractPatientFamilyHistory(factory,voFamilyHistory);
			 
		factory.save(famhistBo);
					
		return FamilyHistoryVoAssembler.create(famhistBo);		
	}

	/* (non-Javadoc)
	 * @see ims.clinical.domain.FamilyHistory#listFamilyHistory(ims.core.vo.ClinicalContactShortVo)
	 */
	public FamilyHistoryVoCollection list(ClinicalContactShortVo voClinicalContact, PatientShort voPatientShort) 
	{
		if(voPatientShort == null || voPatientShort.getID_Patient() == null)
			throw new DomainRuntimeException("Patient Filter not provided for list call. ");

		DomainFactory factory = getDomainFactory();
		
		java.util.List famhistList = factory.find("select p1_1 from PatientFamilyHistory as p1_1 left join p1_1.clinicalContact as c1_1 left join c1_1.careContext as c2_1 left join c2_1.episodeOfCare as e1_1 left join e1_1.careSpell as c3_1 left join c3_1.patient as p2_1 left join p1_1.patient as p3_1	where( (c3_1.patient.id = :patientId or p1_1.patient.id = :patientId))", new String[]{"patientId"}, new Object[]{voPatientShort.getID_Patient()}); //wdev-18559
				
		if  ((famhistList != null) && (famhistList.size()>0))
			return FamilyHistoryVoAssembler.createFamilyHistoryVoCollectionFromPatientFamilyHistory(famhistList).sort();
		else
			return null;
	}

	public HcpLiteVoCollection listHCPs(HcpFilter filter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		if (filter != null && filter.getQueryNameIsNotNull())
			return hcpAdmin.listHcpLiteByName(filter.getQueryName().getSurname());
		else 
			return null;
	}
}
