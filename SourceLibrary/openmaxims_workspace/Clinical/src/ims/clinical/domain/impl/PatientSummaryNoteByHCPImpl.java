//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 3999.26423)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import java.util.ArrayList;

import ims.clinical.domain.base.impl.BasePatientSummaryNoteByHCPImpl;
import ims.clinical.domain.objects.PatientSummaryNoteByHCP;
import ims.clinical.vo.PatientSummaryNoteByHCPRefVo;
import ims.clinical.vo.PatientSummaryNoteByHcpShortVo;
import ims.clinical.vo.PatientSummaryNoteByHcpShortVoCollection;
import ims.clinical.vo.domain.PatientSummaryNoteByHcpShortVoAssembler;
import ims.core.patient.vo.PatientRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;

public class PatientSummaryNoteByHCPImpl extends BasePatientSummaryNoteByHCPImpl
{

	private static final long serialVersionUID = 1L;

	public PatientSummaryNoteByHcpShortVoCollection listSummaryNotes(PatientRefVo patient)
	{
		if (patient == null || !patient.getID_PatientIsNotNull())
			throw new DomainRuntimeException("Can not search after null patient");

		String query = " from PatientSummaryNoteByHCP as sumNote where sumNote.patient.id = :ID order by sumNote.authoringInformation.authoringDateTime desc";

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("ID");
		paramValues.add(patient.getID_Patient());

		return PatientSummaryNoteByHcpShortVoAssembler.createPatientSummaryNoteByHcpShortVoCollectionFromPatientSummaryNoteByHCP(getDomainFactory().find(query, paramNames, paramValues));
	}

	public PatientSummaryNoteByHcpShortVo getSummaryNote(PatientSummaryNoteByHCPRefVo summaryNote)
	{
		if (summaryNote == null || !summaryNote.getID_PatientSummaryNoteByHCPIsNotNull())
			return null;

		return PatientSummaryNoteByHcpShortVoAssembler.create((PatientSummaryNoteByHCP) getDomainFactory().getDomainObject(PatientSummaryNoteByHCP.class, summaryNote.getID_PatientSummaryNoteByHCP()));
	}

	public PatientSummaryNoteByHcpShortVo saveSummaryNote(PatientSummaryNoteByHcpShortVo summaryNote) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		if (summaryNote == null)
			throw new DomainRuntimeException("Can not save null object");

		if (!summaryNote.isValidated())
			throw new DomainRuntimeException("Can not save not validated object");

		DomainFactory factory = getDomainFactory();

		if (!summaryNote.getID_PatientSummaryNoteByHCPIsNotNull())
		{
			// Check for previously saved notes by the same HCP for the same patient
			String query = " from PatientSummaryNoteByHCP as sumNote where sumNote.patient.id = :ID_PAT and sumNote.authoringInformation.authoringHcp.id = :ID_HCP and sumNote.isRIE is null";

			ArrayList<String> paramNames = new ArrayList<String>();
			ArrayList<Object> paramValues = new ArrayList<Object>();

			paramNames.add("ID_PAT");
			paramValues.add(summaryNote.getPatient().getID_Patient());
			paramNames.add("ID_HCP");
			paramValues.add(summaryNote.getAuthoringInformation().getAuthoringHcp().getID_Hcp());

			PatientSummaryNoteByHcpShortVo existingNote = PatientSummaryNoteByHcpShortVoAssembler.create((PatientSummaryNoteByHCP) factory.findFirst(query, paramNames, paramValues));

			if (existingNote != null)
				throw new DomainInterfaceException("A record for current patient and selected HCP already exists");
		}

		// Get domain object
		PatientSummaryNoteByHCP domObj = PatientSummaryNoteByHcpShortVoAssembler.extractPatientSummaryNoteByHCP(factory, summaryNote);

		// Attempt save
		factory.save(domObj);

		// Return saved object VO
		return PatientSummaryNoteByHcpShortVoAssembler.create(domObj);
	}
}
