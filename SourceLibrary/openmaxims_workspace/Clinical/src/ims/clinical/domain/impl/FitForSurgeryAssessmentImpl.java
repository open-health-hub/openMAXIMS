//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.70 build 3467.22451)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.FitForSurgeryAssesment;
import ims.RefMan.domain.objects.OutpatientPreAssessment;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.FitForSurgeryAssesmentRefVo;
import ims.RefMan.vo.FitForSurgeryAssesmentVo;
import ims.RefMan.vo.FitForSurgeryAssessmentLiteVoCollection;
import ims.RefMan.vo.OutpatientPreAssessmentVo;
import ims.RefMan.vo.domain.CatsReferralListVoAssembler;
import ims.RefMan.vo.domain.FitForSurgeryAssesmentVoAssembler;
import ims.RefMan.vo.domain.FitForSurgeryAssessmentLiteVoAssembler;
import ims.RefMan.vo.domain.OutpatientPreAssessmentVoAssembler;
import ims.clinical.domain.base.impl.BaseFitForSurgeryAssessmentImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.domain.DomainFactory;
import ims.domain.DomainFactory.ORDERMODE;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.hibernate3.IMSCriteria;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.vo.BookingAppointmentForFitForSurgeryAssessmentVo;
import ims.scheduling.vo.domain.BookingAppointmentForFitForSurgeryAssessmentVoAssembler;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.List;

public class FitForSurgeryAssessmentImpl extends BaseFitForSurgeryAssessmentImpl
{

	private static final long serialVersionUID = 1L;

	public FitForSurgeryAssessmentLiteVoCollection listAssessments(CareContextRefVo careContextRefVo) 
	{
		// Check parameters
		if (careContextRefVo == null || !careContextRefVo.getID_CareContextIsNotNull())
			throw new CodingRuntimeException("A care context must be selected");
		
		// Get domain factory
		DomainFactory factory = getDomainFactory();
		
		// Define filter criteria
		IMSCriteria assessmentCriteria = new IMSCriteria(FitForSurgeryAssesment.class, factory);
		assessmentCriteria.equal("this.careContext.id", careContextRefVo.getID_CareContext());
		assessmentCriteria.addOrder("this.authoringInformation.authoringDateTime", ORDERMODE.DESC); // WDEV-11640
		
		return FitForSurgeryAssessmentLiteVoAssembler.createFitForSurgeryAssessmentLiteVoCollectionFromFitForSurgeryAssesment(assessmentCriteria.find());
	}

	public FitForSurgeryAssesmentVo getAssessment(FitForSurgeryAssesmentRefVo assessRefVo) 
	{
		// Check parameters
		if (assessRefVo == null || !assessRefVo.getID_FitForSurgeryAssesmentIsNotNull())
			return null;
		
		return FitForSurgeryAssesmentVoAssembler.create((FitForSurgeryAssesment) getDomainFactory().getDomainObject(FitForSurgeryAssesment.class, assessRefVo.getID_FitForSurgeryAssesment()));
	}

	public FitForSurgeryAssesmentVo save(FitForSurgeryAssesmentVo record) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		if (record == null)
			throw new CodingRuntimeException("record is null in method save");
		
		if (!record.isValidated())
			throw new CodingRuntimeException("record has not been validated in method save");
		
		DomainFactory factory = getDomainFactory();
		FitForSurgeryAssesment domFitForSurgery = FitForSurgeryAssesmentVoAssembler.extractFitForSurgeryAssesment(factory, record);
		factory.save(domFitForSurgery);
		
		FitForSurgeryAssesmentVo fitForSurgery = FitForSurgeryAssesmentVoAssembler.create(domFitForSurgery);
		OutpatientPreAssessmentVo outPatient = getOutPatientPreassessment(record.getCareContext());
		
		if(outPatient == null)
		{
			outPatient = new OutpatientPreAssessmentVo();
			outPatient.setCareContext(record.getCareContext());
		}
		outPatient.setFitForSurgeryAssesment(fitForSurgery);
		
		OutpatientPreAssessment domOutpatient = OutpatientPreAssessmentVoAssembler.extractOutpatientPreAssessment(factory, outPatient);
		factory.save(domOutpatient);
		
		//Update the CatsReferral.sSuitableForSurgery attribute
		//WDEV-11692
		updateSuitableForSurgery(outPatient.getCareContext(), record.getFitForSurgery(), (record.getOPDAppt() != null && record.getOPDAppt().getSession() != null) ? record.getOPDAppt().getSession().getSchLocation() : null);
	
		return fitForSurgery;
	}

	private void updateSuitableForSurgery(CareContextRefVo voCC, Boolean bSuitable, LocationRefVo locShortVo) throws StaleObjectException
	{
		CatsReferral domainObject;
		if(voCC != null)
		{
			DomainFactory factory = getDomainFactory();

			// Define filter criteria
			IMSCriteria criteria = new IMSCriteria(CatsReferral.class, factory);
			criteria.equal("this.careContext.id", voCC.getID_CareContext());

			List<CatsReferral> crList = criteria.find();
		
			if (crList == null || crList.size() == 0)
				return;
						
			CatsReferralListVo voCats = CatsReferralListVoAssembler.create(crList.get(0));
			voCats.setIsFitForSurgery(bSuitable);
			
			//WDEV-11692
			voCats.setOPDLocation(locShortVo);
				
			domainObject = CatsReferralListVoAssembler.extractCatsReferral(factory, voCats);
			factory.save(domainObject);
		}
	}

	private OutpatientPreAssessmentVo getOutPatientPreassessment(CareContextRefVo careContext) 
	{
		if (careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext is null or id not provided in method getOutPatientPreassessment");
		
		
		DomainFactory factory = getDomainFactory();
		
		IMSCriteria criteria = new IMSCriteria(OutpatientPreAssessment.class, factory);
		criteria.equal("this.careContext.id", careContext.getID_CareContext());
		List<OutpatientPreAssessment> outpatient = criteria.find();
		
		return outpatient.size() > 0 ? OutpatientPreAssessmentVoAssembler.create((OutpatientPreAssessment)outpatient.get(0)) : null;
	}

	public ims.RefMan.vo.FitForSurgeryAssesmentVo getFitForSurgery(ims.core.vo.CareContextShortVo careContext)
	{
		if(careContext == null || !careContext.getID_CareContextIsNotNull())
			throw new CodingRuntimeException("Cannot get FitForSurgeryAssesmentVo for null CareContext.");
		
		DomainFactory factory = getDomainFactory();
		
		IMSCriteria criteria = new IMSCriteria(FitForSurgeryAssesment.class, factory);
		criteria.equal("this.careContext.id", careContext.getID_CareContext());
		List<FitForSurgeryAssesment> listFitFortSurgery = criteria.find();
		
		if(listFitFortSurgery == null || listFitFortSurgery.size() == 0)
			return null;
		
		ims.RefMan.vo.FitForSurgeryAssesmentVoCollection fitForSurgeryColl = FitForSurgeryAssesmentVoAssembler.createFitForSurgeryAssesmentVoCollectionFromFitForSurgeryAssesment(listFitFortSurgery);
		
		if(fitForSurgeryColl == null || fitForSurgeryColl.size() == 0)
			return null;
		
		return fitForSurgeryColl.get(0);
	}

	//WDEV-11692 - starts here
	public BookingAppointmentForFitForSurgeryAssessmentVo getLatestAppointment(PatientRefVo patient) 
	{
		if(patient == null || !patient.getID_PatientIsNotNull())
			throw new CodingRuntimeException("Can not get latest appointment on null Patient Id.");
		
		DomainFactory factory = getDomainFactory();
		
		String query = "from Booking_Appointment b where b.patient.id = :PatientId and b.appointmentDate = :CurrentDate and b.isRIE is null and b.apptStatus.id not in (:DNAStatus, :CancelledStatus) and b.theatreBooking is null order by b.apptStartTime desc";
		
		return BookingAppointmentForFitForSurgeryAssessmentVoAssembler.create((Booking_Appointment) factory.findFirst(query, new String[] {"PatientId", "CurrentDate", "DNAStatus", "CancelledStatus"}, new Object[] {patient.getID_Patient(), new java.util.Date(), new Integer(Status_Reason.DNA.getID()), new Integer(Status_Reason.CANCELLED.getID())}));
	}
	//WDEV-11962 - ends here
}
