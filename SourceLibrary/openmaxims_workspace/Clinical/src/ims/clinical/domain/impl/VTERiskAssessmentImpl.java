//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseVTERiskAssessmentImpl;
import ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo;
import ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVoCollection;
import ims.clinical.vo.VTERiskAssessmentShortVo;
import ims.clinical.vo.VTERiskAssessmentShortVoCollection;
import ims.clinical.vo.VTERiskAssessmentVo;
import ims.clinical.vo.VTERiskAssessmentVoCollection;
import ims.clinical.vo.domain.InpatientEpisodeForVTERiskAsessmentVoAssembler;
import ims.clinical.vo.domain.VTERiskAssessmentShortVoAssembler;
import ims.clinical.vo.domain.VTERiskAssessmentVoAssembler;
import ims.clinical.vo.lookups.VTEAsessmentStatus;
import ims.core.admin.pas.domain.objects.DischargedEpisode;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.pas.vo.DischargedEpisodeRefVo;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.clinical.domain.objects.VTERiskAssessment;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.DischargedEpisodeForVTERiskAssessmentWorklistVo;
import ims.core.vo.DischargedEpisodeForVTERiskAssessmentWorklistVoCollection;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.DischargedEpisodeForVTERiskAssessmentWorklistVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class VTERiskAssessmentImpl extends BaseVTERiskAssessmentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.VTERiskAssessmentShortVoCollection listVTERiskAssessments(ims.core.vo.PatientShort patient)
	{
		if(patient == null )
			throw new CodingRuntimeException("Patient not provided");
		
		DomainFactory factory = getDomainFactory();
		List vteriskassess = factory.find("select v1_1 from VTERiskAssessment as v1_1 left join v1_1.patient as p1_1 where	p1_1.id =:idPatient", new String[] {"idPatient"}, new Object[] {patient.getID_Patient()});
		 
		
		if( vteriskassess != null && vteriskassess.size() > 0)
			return  VTERiskAssessmentShortVoAssembler.createVTERiskAssessmentShortVoCollectionFromVTERiskAssessment(vteriskassess).sort(SortOrder.DESCENDING);
		
		return null;
	}

	public ims.clinical.vo.VTERiskAssessmentVo getVTERiskAssessment(ims.core.clinical.vo.VTERiskAssessmentRefVo vTERiskAssRef)
	{
		if(vTERiskAssRef == null)
			return null;
		DomainFactory factory = getDomainFactory();
		return VTERiskAssessmentVoAssembler.create((VTERiskAssessment)factory.getDomainObject(VTERiskAssessment.class, vTERiskAssRef.getID_VTERiskAssessment()));
	}

	public ims.clinical.vo.VTERiskAssessmentShortVo getVTERiskAssessmentShortVo(ims.core.clinical.vo.VTERiskAssessmentRefVo vTERiskRef)
	{
		if(vTERiskRef == null)
			return null;
		DomainFactory factory = getDomainFactory();
		return VTERiskAssessmentShortVoAssembler.create((VTERiskAssessment)factory.getDomainObject(VTERiskAssessment.class, vTERiskRef.getID_VTERiskAssessment()));
	
	}

	//WDEV-15414 
	public ims.clinical.vo.VTERiskAssessmentVo saveVTERiskAssess(ims.clinical.vo.VTERiskAssessmentVo vteRiskAssess, ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo inpatEpisodeVTEriskAsses, DischargedEpisodeForVTERiskAssessmentWorklistVo discharge) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if (vteRiskAssess == null)
		{
			throw new DomainRuntimeException("VTERiskAssessment cannot be null");
		}

		DomainFactory factory = getDomainFactory();
		Integer idVTE = vteRiskAssess.getID_VTERiskAssessment();	

		VTERiskAssessment doVTERiskAssessment = VTERiskAssessmentVoAssembler.extractVTERiskAssessment(factory, vteRiskAssess);
		factory.save(doVTERiskAssessment);
		vteRiskAssess = VTERiskAssessmentVoAssembler.create(doVTERiskAssessment);
		
		if(idVTE == null)//check if it is a new VTE Risk Assessment record
		{
			if(inpatEpisodeVTEriskAsses != null)
			{			
				if(inpatEpisodeVTEriskAsses.getVTERiskAssessment() == null)
				{
					inpatEpisodeVTEriskAsses.setVTERiskAssessment(vteRiskAssess);
					
					if( VTEAsessmentStatus.REQUIRED.equals(inpatEpisodeVTEriskAsses.getVTEAssessmentStatus()))
					{
						inpatEpisodeVTEriskAsses.setVTEAssessmentStatus(vteRiskAssess.getVTEAssessmentStatus());
					}
					
					InpatientEpisode doInpatientEpisode = InpatientEpisodeForVTERiskAsessmentVoAssembler.extractInpatientEpisode(factory, inpatEpisodeVTEriskAsses);
					if( doInpatientEpisode != null)
					{
						factory.save(doInpatientEpisode);
					}
				}
			}
			else if(discharge != null)//WDEV-15414 
			{
				if( discharge.getVTERiskAssessment() == null)
				{
					discharge.setVTERiskAssessment(vteRiskAssess);
					
					if( VTEAsessmentStatus.REQUIRED.equals(discharge.getVTEAssessmentStatus()))
					{
						discharge.setVTEAssessmentStatus(vteRiskAssess.getVTEAssessmentStatus());
					}
					
					DischargedEpisode doDischargeEpisode = DischargedEpisodeForVTERiskAssessmentWorklistVoAssembler.extractDischargedEpisode(factory, discharge);
					if( doDischargeEpisode != null)
					{
						factory.save(doDischargeEpisode);
					}
				}
			}
			
		}
		else if(idVTE != null)
		{
			if(inpatEpisodeVTEriskAsses != null && inpatEpisodeVTEriskAsses.getVTERiskAssessmentIsNotNull() &&  idVTE.equals(inpatEpisodeVTEriskAsses.getVTERiskAssessment().getID_VTERiskAssessment()))
			{
				if( VTEAsessmentStatus.COMPLETED.equals(vteRiskAssess.getVTEAssessmentStatus()))
				{
					if(inpatEpisodeVTEriskAsses.getVTEAssessmentStatus() != null && !VTEAsessmentStatus.COMPLETED.equals(inpatEpisodeVTEriskAsses.getVTEAssessmentStatus()))//WDEV-16026
					{
						inpatEpisodeVTEriskAsses.setVTEAssessmentStatus(vteRiskAssess.getVTEAssessmentStatus());
						InpatientEpisode doInpatientEpisode = InpatientEpisodeForVTERiskAsessmentVoAssembler.extractInpatientEpisode(factory, inpatEpisodeVTEriskAsses);
						if( doInpatientEpisode != null)
						{
							factory.save(doInpatientEpisode);
						}
					}
				}
			}	
			else if(discharge != null && discharge.getVTERiskAssessmentIsNotNull() &&  idVTE.equals(discharge.getVTERiskAssessment().getID_VTERiskAssessment()))//WDEV-15414 
			{
				if( VTEAsessmentStatus.COMPLETED.equals(vteRiskAssess.getVTEAssessmentStatus()))
				{
					if(discharge.getVTEAssessmentStatus() != null && !VTEAsessmentStatus.COMPLETED.equals(discharge.getVTEAssessmentStatus()))//WDEV-16026
					{
						discharge.setVTEAssessmentStatus(vteRiskAssess.getVTEAssessmentStatus());
						DischargedEpisode doDischargeEpisode = DischargedEpisodeForVTERiskAssessmentWorklistVoAssembler.extractDischargedEpisode(factory, discharge);
						if( doDischargeEpisode != null)
						{
							factory.save(doDischargeEpisode);
						}
					}
				}
			}
		}
		
		return vteRiskAssess;
	}

	
	public InpatientEpisodeForVTERiskAsessmentVo getInpatientEpisodes( PASEventRefVo pasRefVo) 
	{
		if(pasRefVo == null )
			throw new CodingRuntimeException("Pas Event not provided");
		
		DomainFactory factory = getDomainFactory();
		List inpat = factory.find("select i1_1 from InpatientEpisode as i1_1 left join i1_1.pasEvent as p1_1 where p1_1.id =:idPasEvent", new String[] {"idPasEvent"}, new Object[] {pasRefVo.getID_PASEvent()});
		 
		
		if( inpat != null && inpat.size() > 0)
		{
			InpatientEpisodeForVTERiskAsessmentVoCollection tempColl = InpatientEpisodeForVTERiskAsessmentVoAssembler.createInpatientEpisodeForVTERiskAsessmentVoCollectionFromInpatientEpisode(inpat).sort(SortOrder.DESCENDING);
			if(tempColl != null && tempColl.size() > 0)
				return tempColl.get(0);
			
		}
		return null;
	}

	
	public VTERiskAssessmentShortVoCollection listVTERiskAssessByPasId(PASEventRefVo pasRefVo) 
	{
		if(pasRefVo == null )
			throw new CodingRuntimeException("Patient not provided");
		
		DomainFactory factory = getDomainFactory();
		List vteriskassess = factory.find("select v1_1 from VTERiskAssessment as v1_1 left join v1_1.careContext as c1_1 left join c1_1.pasEvent as p1_1 where p1_1.id =:idPasEvent", new String[] {"idPasEvent"}, new Object[] {pasRefVo.getID_PASEvent()});
		
		if( vteriskassess != null && vteriskassess.size() > 0)
			return  VTERiskAssessmentShortVoAssembler.createVTERiskAssessmentShortVoCollectionFromVTERiskAssessment(vteriskassess).sort(SortOrder.DESCENDING);
		
		return null;
	}

	
	public VTERiskAssessmentVo getInProgressVTERiskAsessment(PASEventRefVo pasEventRefVo) 
	{
		if(pasEventRefVo == null )
			throw new CodingRuntimeException("PAS EVENT not provided");
		
		DomainFactory factory = getDomainFactory();
		List vteriskassess = factory.find("select v1_1 from InpatientEpisode as ie left join ie.vTERiskAssessment as v1_1 left join v1_1.careContext as c1_1 left join c1_1.pasEvent as p1_1 left join v1_1.vTEAssessmentStatus as l1_1 where (p1_1.id =:idPasEvent and l1_1.id = :idStatus)  ", new String[] {"idPasEvent","idStatus"}, new Object[] {pasEventRefVo.getID_PASEvent(),VTEAsessmentStatus.INPROGRESS.getId()});//WDEV-14993
		
		if( vteriskassess != null && vteriskassess.size() > 0)
		{
			VTERiskAssessmentVoCollection tempColl = VTERiskAssessmentVoAssembler.createVTERiskAssessmentVoCollectionFromVTERiskAssessment(vteriskassess).sort(SortOrder.DESCENDING);
			if( tempColl != null && tempColl.size() > 0)
				return tempColl.get(0);
		}
		
		
		return null;
	}

	public CareContextShortVo getCareContextByPasEventId(PASEventRefVo pasEventRef) 
	{
		if(pasEventRef == null )
			throw new CodingRuntimeException("PAS EVENT not provided");
		
		DomainFactory factory = getDomainFactory();
		List carecontexts = factory.find("select c1_1 from CareContext as c1_1 left join c1_1.pasEvent as p1_1 where	p1_1.id =:idPasEvent   ", new String[] {"idPasEvent"}, new Object[] {pasEventRef.getID_PASEvent()});
		 
		
		if( carecontexts != null && carecontexts.size() > 0)
		{
			CareContextShortVoCollection tempColl = CareContextShortVoAssembler.createCareContextShortVoCollectionFromCareContext(carecontexts).sort(SortOrder.DESCENDING);
			if( tempColl != null && tempColl.size() > 0)
				return tempColl.get(0);
		}
	
		
		return null;
	}

	
	public InpatientEpisodeForVTERiskAsessmentVo saveInpatientEpisode(InpatientEpisodeForVTERiskAsessmentVo inpatientEpisode) throws StaleObjectException, UniqueKeyViolationException 
	{
		if (inpatientEpisode == null)
		{
			throw new DomainRuntimeException("Inpatient Episode cannot be null");
		}

		DomainFactory factory = getDomainFactory();
		InpatientEpisode doInpatientEpisode = InpatientEpisodeForVTERiskAsessmentVoAssembler.extractInpatientEpisode(factory, inpatientEpisode);
		factory.save(doInpatientEpisode);
		return InpatientEpisodeForVTERiskAsessmentVoAssembler.create(doInpatientEpisode);
	}

	//wdev-14858
	public VTERiskAssessmentShortVo getVTERiskAssessmentShortVo( InpatientEpisodeRefVo inpatEpRef) 
	{
		if(inpatEpRef == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		List vteriskassess = factory.find("select v1_1 from InpatientEpisode as i1_1 left join i1_1.vTERiskAssessment as v1_1 where( i1_1.id = :idInpatEp )", new String[] {"idInpatEp"}, new Object[] {inpatEpRef.getID_InpatientEpisode()});
		
		if( vteriskassess != null && vteriskassess.size() > 0 )
		{
			VTERiskAssessmentShortVoCollection tempColl = VTERiskAssessmentShortVoAssembler.createVTERiskAssessmentShortVoCollectionFromVTERiskAssessment(vteriskassess);
			if ( tempColl != null && tempColl.size() > 0)
				return tempColl.get(0);
			
		
		}
		 
		return null;
		
	}

	//WDEV-15414
	public DischargedEpisodeForVTERiskAssessmentWorklistVo getDischargeEpisode(PASEventRefVo pasEvent) 
	{
		if(pasEvent == null )
			throw new CodingRuntimeException("Pas Event not provided");
		
		DomainFactory factory = getDomainFactory();
		List<?> dis = factory.find("select dis from DischargedEpisode as dis left join dis.pasEvent as pas where pas.id =:idPasEvent", new String[] {"idPasEvent"}, new Object[] {pasEvent.getID_PASEvent()}); 
		
		if( dis != null && dis.size() > 0)
		{
			DischargedEpisodeForVTERiskAssessmentWorklistVoCollection tempColl = DischargedEpisodeForVTERiskAssessmentWorklistVoAssembler.createDischargedEpisodeForVTERiskAssessmentWorklistVoCollectionFromDischargedEpisode(dis).sort(SortOrder.DESCENDING);
			
			if(tempColl != null && tempColl.size() > 0)
				return tempColl.get(0);
		}
		
		return null;
	}

	//WDEV-15414 
	public VTERiskAssessmentShortVo getVTERiskAssessmentShortByDischargeEpisode(DischargedEpisodeRefVo dischargeRef) 
	{
		if(dischargeRef == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		List<?> vteriskassess = factory.find("select v1_1 from DischargedEpisode as dis left join dis.vTERiskAssessment as vte where( dis.id = :idDisEp )", new String[] {"idDisEp"}, new Object[] {dischargeRef.getID_DischargedEpisode()});
		
		if( vteriskassess != null && vteriskassess.size() > 0 )
		{
			VTERiskAssessmentShortVoCollection tempColl = VTERiskAssessmentShortVoAssembler.createVTERiskAssessmentShortVoCollectionFromVTERiskAssessment(vteriskassess);
			if ( tempColl != null && tempColl.size() > 0)
				return tempColl.get(0);
		}
		 
		return null;
	}

	//WDEV-15414
	public DischargedEpisodeForVTERiskAssessmentWorklistVo saveDischargeEpisode(DischargedEpisodeForVTERiskAssessmentWorklistVo discharge) throws StaleObjectException, UniqueKeyViolationException 
	{
		if(discharge == null)
			throw new CodingRuntimeException("Cannot save a null Discharge Episode.");
		
		if(!discharge.isValidated())
			throw new CodingRuntimeException("Discharge Episode is not validated.");
		
		DomainFactory factory = getDomainFactory();
		DischargedEpisode doDischarge = DischargedEpisodeForVTERiskAssessmentWorklistVoAssembler.extractDischargedEpisode(factory, discharge);
		factory.save(doDischarge);
		
		return DischargedEpisodeForVTERiskAssessmentWorklistVoAssembler.create(doDischarge);
	}

	//WDEV-15414
	public VTERiskAssessmentVo getInProgressVTERiskAssessmentFromDischargeEpisode(PASEventRefVo pasEventRef) 
	{
		if(pasEventRef == null )
			throw new CodingRuntimeException("PAS EVENT not provided");
		
		DomainFactory factory = getDomainFactory();
		List vteriskassess = factory.find("select vte from DischargedEpisode as de left join de.vTERiskAssessment as vte left join vte.careContext as cc left join cc.pasEvent as pas left join vte.vTEAssessmentStatus as vtes where (pas.id =:idPasEvent and vtes.id = :idStatus)  ", new String[] {"idPasEvent","idStatus"}, new Object[] {pasEventRef.getID_PASEvent(),VTEAsessmentStatus.INPROGRESS.getId()});
		
		if( vteriskassess != null && vteriskassess.size() > 0)
		{
			VTERiskAssessmentVoCollection tempColl = VTERiskAssessmentVoAssembler.createVTERiskAssessmentVoCollectionFromVTERiskAssessment(vteriskassess).sort(SortOrder.DESCENDING);
			if( tempColl != null && tempColl.size() > 0)
				return tempColl.get(0);
		}
		
		return null;
	}

	//wdev-15414
	public DischargedEpisodeForVTERiskAssessmentWorklistVo getDischargedEpisodeForVTERiskAssessmentWorklistVo(DischargedEpisodeRefVo dischargeRef) 
	{
		if( dischargeRef == null)
			throw new CodingRuntimeException("DischargeEpisode cannot be null");
		
		DomainFactory factory = getDomainFactory();
		DischargedEpisode doDischargedEpisode = (DischargedEpisode) factory.getDomainObject(DischargedEpisode.class, dischargeRef.getID_DischargedEpisode());
				
		return DischargedEpisodeForVTERiskAssessmentWorklistVoAssembler.create(doDischargedEpisode);
	}
}
