//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.domain.base.impl;

import ims.domain.impl.DomainImpl;

public abstract class BaseEDischargePreViewComponentImpl extends DomainImpl implements ims.clinical.domain.EDischargePreViewComponent, ims.domain.impl.Transactional
{
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unused")
	public void validategetPatientGp(ims.core.patient.vo.PatientRefVo patient)
	{
		if(patient == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patient' of type 'ims.core.patient.vo.PatientRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetDischargeDetailsForCareContext(ims.core.admin.vo.CareContextRefVo careContext)
	{
	}

	@SuppressWarnings("unused")
	public void validategetHintByLookupID(ims.clinicaladmin.vo.lookups.EDischargeHINT voLookup)
	{
	}

	@SuppressWarnings("unused")
	public void validategetDischargeMedicationDetailsForCareContext(ims.core.admin.vo.CareContextRefVo careContext)
	{
		if(careContext == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'careContext' of type 'ims.core.admin.vo.CareContextRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetDischargeReportDetailsForCareContext(ims.core.admin.vo.CareContextRefVo careContext)
	{
		if(careContext == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'careContext' of type 'ims.core.admin.vo.CareContextRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientDocumentsForPatient(ims.core.patient.vo.PatientRefVo voRef)
	{
		if(voRef == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'voRef' of type 'ims.core.patient.vo.PatientRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetHcp(ims.core.resource.people.vo.HcpRefVo voRef)
	{
		if(voRef == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'voRef' of type 'ims.core.resource.people.vo.HcpRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetSystemReportAndTemplate(Integer imsId)
	{
		if(imsId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'imsId' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesaveDischargeReportDetail(ims.clinical.vo.DischargeReportDetailVo record, ims.clinical.vo.DischargeReadyToLeaveVo voReady)
	{
		if(record == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'record' of type 'ims.clinical.vo.DischargeReportDetailVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetMedicVo(ims.core.resource.people.vo.MedicRefVo medic)
	{
		if(medic == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'medic' of type 'ims.core.resource.people.vo.MedicRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetGPLiteWithCommChannels(ims.core.resource.people.vo.GpRefVo gp)
	{
		if(gp == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'gp' of type 'ims.core.resource.people.vo.GpRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetGPLiteWithCommChannelsFromPatientShort(ims.core.vo.PatientShort patientShort)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistComorbidity(ims.core.admin.vo.EpisodeOfCareRefVo episodeofCareRefVo)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistComplications(ims.core.admin.vo.EpisodeOfCareRefVo episodeofCareRefVo)
	{
	}

	@SuppressWarnings("unused")
	public void validatesaveDischargeDetails(ims.clinical.vo.DischargeDetailsVo dischargeDetail)
	{
	}

	@SuppressWarnings("unused")
	public void validategetReadyToLeave(ims.core.admin.vo.CareContextRefVo careContextRefvo)
	{
	}

	@SuppressWarnings("unused")
	public void validategetDementiaStatus(ims.core.admin.pas.vo.PASEventRefVo voPasEventRef)
	{
	}

	@SuppressWarnings("unused")
	public void validategetVteStatus(Integer pasId)
	{
	}
}
