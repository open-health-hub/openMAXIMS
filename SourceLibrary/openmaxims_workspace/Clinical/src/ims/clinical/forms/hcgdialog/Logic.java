//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4680.16533)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.hcgdialog;

import java.util.ArrayList;

import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.enums.MosType;
import ims.emergency.vo.HCGTestItemVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		// TODO Add your code here.
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args != null)
		{
			if (args.length == 1 && args[0] != null && args[0] instanceof FormMode)
			{
				form.setMode((FormMode) args[0]);
			}
			else
				form.setMode(FormMode.EDIT);
		}
		else
			form.setMode(FormMode.EDIT);

		form.ccAuthoringInfo().setIsRequiredPropertyToControls(FormMode.EDIT.equals(form.getMode()));
		
		clear();
		HCGTestItemVo HCGTestItem = form.getGlobalContext().Clinical.getSelectedHCGTestItem();
		if (HCGTestItem != null)
		{
			populateScreenFromData(HCGTestItem);
		}
		else
		{
			initialize();
		}
	}

	private void clear()
	{
		form.ccAuthoringInfo().setValue(null);
		form.ccRecordingHcp().setValue(null);
		form.dtimRecordingDateTime().setValue(null);
		form.txtLotNumber().setValue(null);
		form.cmbSerumHCG().setValue(null);
		form.cmbUrineHCG().setValue(null);
	}

	private void populateScreenFromData(HCGTestItemVo hCGTestItem)
	{
		if (hCGTestItem == null)
			return;

		form.ccAuthoringInfo().setValue(hCGTestItem.getAuthoringInformationIsNotNull() ? hCGTestItem.getAuthoringInformation() : null);
		form.ccRecordingHcp().setValue(hCGTestItem.getRecordingInformationIsNotNull() && hCGTestItem.getRecordingInformation().getRecordingUserIsNotNull() ? hCGTestItem.getRecordingInformation().getRecordingUser() : null);
		form.dtimRecordingDateTime().setValue(hCGTestItem.getRecordingInformationIsNotNull() && hCGTestItem.getRecordingInformation().getRecordingDateTimeIsNotNull() ? hCGTestItem.getRecordingInformation().getRecordingDateTime() : null);
		form.txtLotNumber().setValue(hCGTestItem.getLotNumberIsNotNull() ? hCGTestItem.getLotNumber() : null);
		form.cmbUrineHCG().setValue(hCGTestItem.getUrineHCGIsNotNull() ? hCGTestItem.getUrineHCG() : null);
		form.cmbSerumHCG().setValue(hCGTestItem.getSerumHCGIsNotNull() ? hCGTestItem.getSerumHCG() : null);
	}

	private void initialize()
	{
		form.ccAuthoringInfo().initializeComponent();
		form.ccRecordingHcp().initialize(MosType.HCP);

		Object mos = domain.getMosUser();
		if (mos != null && mos instanceof MemberOfStaffLiteVo)
		{
			form.ccRecordingHcp().setValue((MemberOfStaffLiteVo) mos);
		}
		form.dtimRecordingDateTime().setValue(new DateTime());
	}

	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.NO);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		HCGTestItemVo hCGTestItem = populateDataFromScreen(form.getGlobalContext().Clinical.getSelectedHCGTestItem());

		String[] errors = hCGTestItem.validate(getUIErrors());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}

		form.getGlobalContext().Clinical.setSelectedHCGTestItem(hCGTestItem);

		engine.close(DialogResult.OK);
	}

	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.ccAuthoringInfo().getValue()!=null && form.ccAuthoringInfo().getValue().getAuthoringDateTimeIsNotNull() && form.ccAuthoringInfo().getValue().getAuthoringDateTime().isGreaterThan(new DateTime()))
		{
			errors.add("Authoring Date/Time cannot be set in the future!");
		}
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	
	private HCGTestItemVo populateDataFromScreen(HCGTestItemVo hCGTestItem)
	{
		if (hCGTestItem == null)
			hCGTestItem = new HCGTestItemVo();
		else
			hCGTestItem=(HCGTestItemVo)hCGTestItem.clone();

		hCGTestItem.setAuthoringInformation(form.ccAuthoringInfo().getValue());
		hCGTestItem.setRecordingInformation(populateRecordingInfo(hCGTestItem.getRecordingInformation()));

		hCGTestItem.setLotNumber(form.txtLotNumber().getValue());
		hCGTestItem.setUrineHCG(form.cmbUrineHCG().getValue());
		hCGTestItem.setSerumHCG(form.cmbSerumHCG().getValue());

		return hCGTestItem;
	}

	private RecordingUserInformationVo populateRecordingInfo(RecordingUserInformationVo recordingInformation)
	{
		if (recordingInformation == null)
			recordingInformation = new RecordingUserInformationVo();

		recordingInformation.setRecordingUser((MemberOfStaffLiteVo) form.ccRecordingHcp().getValue());
		recordingInformation.setRecordingDateTime(form.dtimRecordingDateTime().getValue());
		
		if(recordingInformation.countFieldsWithValue() < recordingInformation.countValueObjectFields()) //Recording HCP is Mandatory in BO
			return null;
		
		return recordingInformation;
	}
}
