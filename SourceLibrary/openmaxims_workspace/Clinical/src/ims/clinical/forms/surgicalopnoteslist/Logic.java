//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.surgicalopnoteslist;

import ims.assessment.vo.GraphicAssessmentShortVoCollection;
import ims.clinical.forms.surgicalopnoteslist.GenForm.grdSurgicalOPsRow;
import ims.clinical.vo.SurgicalOPNotesFilterVo;
import ims.clinical.vo.SurgicalOperationNotesListVo;
import ims.clinical.vo.SurgicalOperationNotesListVoCollection;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientId;
import ims.core.vo.PatientProcedureSurgicalOpVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.lookups.HcpDisType;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.Date;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{

		initialize();
		open();
	}

	private void initialize()
	{
		form.getContextMenus().disableAllGenericGridMenuItems();
		form.getContextMenus().getGenericGridViewItem().setText("Open Surgical Op Note");
		form.getContextMenus().getGenericGridViewItem().setEnabled(true);
		rebindAllLookups();

	}

	private void open()
	{
		if (form.getGlobalContext().Clinical.getSurgicalOpNotesFilterIsNotNull())
		{
			populateSearchScreenFromData(form.getGlobalContext().Clinical.getSurgicalOpNotesFilter());
			String[] errors = validateSearchCriteria();
			if (errors == null || errors.length == 0)
			{
				populateResultScreenFromData(domain.listSurgicalOpNotes(populateSearchDataFromScreen()));
			}
		}
		form.setMode(FormMode.VIEW);
		updateControlState();
	}


	private void populateResultScreenFromData(SurgicalOperationNotesListVoCollection listResults)
	{
		clearResultScreen();
		if (listResults == null || listResults.size() == 0 )
		{
			engine.showMessage("No results were found. Please alter your search criteria", "No results", MessageButtons.OK, MessageIcon.INFORMATION);
			return;
		}
		for (int i = 0 ; i<listResults.size()  ; i++)
		{
			addRowToGrid(listResults.get(i));
		}
		form.lblTotal().setValue(Integer.toString(listResults.size()));
	}

	private void addRowToGrid(SurgicalOperationNotesListVo record)
	{
		if (record == null)
			return;
		grdSurgicalOPsRow newRow = form.grdSurgicalOPs().getRows().newRow();
		boolean episodeOfCareNotNull = record.getCareContextIsNotNull() && 
						record.getCareContext().getEpisodeOfCareIsNotNull();
		newRow.setColumnPatient(episodeOfCareNotNull &&
				record.getCareContext().getEpisodeOfCare().getCareSpellIsNotNull() &&
				record.getCareContext().getEpisodeOfCare().getCareSpell().getPatientIsNotNull() ? 
				record.getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getISelectedPatientName(): null);
		//-----------------------------
		if(episodeOfCareNotNull &&
				record.getCareContext().getEpisodeOfCare().getCareSpellIsNotNull() &&
				record.getCareContext().getEpisodeOfCare().getCareSpell().getPatientIsNotNull()  
				)
		{
			String strTemp = new String();
			for(PatientId temp:record.getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getIdentifiers())
			{
				strTemp = strTemp +temp.getType().toString() + '=' + temp.getValue();
				strTemp += ',';
			}
			if(strTemp.length() > 0)
			{
				int n = strTemp.lastIndexOf(',');
				strTemp = strTemp.substring(0, n); //take out the last ,
			}
			newRow.setTooltipForColumnPatient(strTemp);
			
		}
		//------------------------------
		newRow.setColumnConsultant(episodeOfCareNotNull &&
				record.getCareContext().getEpisodeOfCare().getResponsibleHCPIsNotNull() ?
				record.getCareContext().getEpisodeOfCare().getResponsibleHCP().getIMosName(): null);
		newRow.setColumnOpSurgeon(record.getProceduresPerformedIsNotNull() && 
				record.getProceduresPerformed().size()>0 && 
				(record.getProceduresPerformed().get(0) instanceof PatientProcedureSurgicalOpVo) &&
				record.getProceduresPerformed().get(0).getPeformedByIsNotNull()? 
				record.getProceduresPerformed().get(0).getPeformedBy().getIMosName() : null);
		
		newRow.setColumnPrimProcedure(record.getMainProcedureIsNotNull() &&
				record.getMainProcedure().getProcedureIsNotNull() ? 
				record.getMainProcedure().getProcedure().getProcedureName(): null);
		newRow.setColumnSignoffDate(record.getSignOffDateTimeIsNotNull()? record.getSignOffDateTime().getDate():null);
		newRow.setColumnSignoffHcp(record.getSignOffHCPIsNotNull() ? 
				record.getSignOffHCP().getIMosName() : null);
		newRow.setValue(record);
		
	}

	private void clearResultScreen()
	{
		form.grdSurgicalOPs().getRows().clear();
		form.lblTotal().setValue("0");
	}

	private String[] validateSearchCriteria()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();
		SurgicalOPNotesFilterVo sonf = populateSearchDataFromScreen();
		if (sonf.countFieldsWithValue() == 0)
		{
			listOfErrors.add("Please fill in at least one search field");
		}
		else
		{
			Date today = new Date();
			if (today.isLessThan(sonf.getDateFrom()))
			{
				listOfErrors.add("Date From can not be in the future");
			}
			if (today.isLessThan(sonf.getDateTo()))
			{
				listOfErrors.add("Date To can not be in the future");
			}
			if (sonf.getDateToIsNotNull() && sonf.getDateFromIsNotNull() && sonf.getDateFrom().isGreaterThan(sonf.getDateTo()))
			{
				
				listOfErrors.add("Date From can not be greater than Date To");
			}
		}
		if (listOfErrors.size() == 0 )
			return null;
		String[] errors = new String[listOfErrors.size()];
		errors = listOfErrors.toArray(errors);
		return errors;
	}

	private SurgicalOPNotesFilterVo populateSearchDataFromScreen()
	{
		SurgicalOPNotesFilterVo result = new SurgicalOPNotesFilterVo();
		result.setCompletingClinician(form.qmbCompletingClinian().getValue());
		result.setConsultant(form.qmbConsultant().getValue());
		result.setDateFrom(form.dteFrom().getValue());
		result.setDateTo(form.dteTo().getValue());
		result.setDiagnosis(form.qmbDiagnosis().getValue());
		result.setDiagram(form.qmbDiagram().getValue());
		result.setFollowupOrdered(form.cmbFollowUpOrdered().getValue());
		result.setHospital(form.qmbHospital().getValue());
		result.setOperatingSurgeon(form.qmbOpSurgeon().getValue());
		result.setProcedure(form.qmbProcedure().getValue());
		return result;
	}

	private void populateSearchScreenFromData(SurgicalOPNotesFilterVo record)
	{
		clearSearchScreen();
		if (record == null)
			return;

		if (record.getProcedureIsNotNull())
		{
			form.qmbProcedure().newRow(record.getProcedure(), record.getProcedure().getProcedureName());
			form.qmbProcedure().setValue(record.getProcedure());
		}

		if (record.getDiagnosisIsNotNull())
		{
			form.qmbDiagnosis().newRow(record.getDiagnosis(), record.getDiagnosis().getDiagnosisName());
			form.qmbDiagnosis().setValue(record.getDiagnosis());
		}
		if (record.getDiagramIsNotNull())
		{
			form.qmbDiagram().newRow(record.getDiagram(), record.getDiagram().getName());
			form.qmbDiagram().setValue(record.getDiagram());
		}
		if (record.getHospitalIsNotNull())
		{
			form.qmbHospital().newRow(record.getHospital(), record.getHospital().getName());
			form.qmbHospital().setValue(record.getHospital());
		}
		if (record.getOperatingSurgeonIsNotNull())
		{
			form.qmbOpSurgeon().newRow(record.getOperatingSurgeon(), record.getOperatingSurgeon().getIMosName());
			form.qmbOpSurgeon().setValue(record.getOperatingSurgeon());
		}
		if (record.getCompletingClinicianIsNotNull())
		{
			form.qmbCompletingClinian().newRow(record.getCompletingClinician(), record.getCompletingClinician().getIMosName());
			form.qmbCompletingClinian().setValue(record.getCompletingClinician());
		}
		if (record.getConsultantIsNotNull())
		{
			form.qmbConsultant().newRow(record.getConsultant(), record.getConsultant().getIMosName());
			form.qmbConsultant().setValue(record.getConsultant());
		}
		form.cmbFollowUpOrdered().setValue(record.getFollowupOrdered());
		form.dteFrom().setValue(record.getDateFrom());
		form.dteTo().setValue(record.getDateTo());

	}

	private void clearSearchScreen()
	{
		form.qmbCompletingClinian().clear();
		form.qmbConsultant().clear();
		form.qmbDiagnosis().clear();
		form.qmbDiagram().clear();
		form.qmbHospital().clear();
		form.qmbOpSurgeon().clear();
		form.qmbProcedure().clear();
		form.cmbFollowUpOrdered().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
	}

	private void updateControlState()
	{
		form.getContextMenus().getGenericGridViewItem().setVisible(form.grdSurgicalOPs().getValue() != null);
	}

	@Override
	protected void onGrdSurgicalOPsSelectionChanged()
	{
		updateControlState();
	}

	@Override
	protected void onGrdSurgicalOPsSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onQmbHospitalTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		
		LocationLiteVoCollection lisResults = domain.listHospitals(value);
		form.qmbHospital().clear();
		if (lisResults == null || lisResults.size() == 0)
			return;
		for (int i = 0; i < lisResults.size(); i++)
		{
			form.qmbHospital().newRow(lisResults.get(i), lisResults.get(i).getName());
		}
		if (lisResults.size() == 1)
		{
			form.qmbHospital().setValue(lisResults.get(0));
		}
		else
		{
			form.qmbHospital().showOpened();
		}
	}

	@Override
	protected void onQmbCompletingClinianTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		HcpLiteVoCollection listHcpLite = domain.listHcpLite(value,null);
		form.qmbCompletingClinian().clear();
		if (listHcpLite == null || listHcpLite.size() == 0)
			return;
		for (int i = 0; i < listHcpLite.size(); i++)
		{
			form.qmbCompletingClinian().newRow(listHcpLite.get(i), listHcpLite.get(i).getIMosName());
		}
		if (listHcpLite.size() == 1)
		{
			form.qmbCompletingClinian().setValue(listHcpLite.get(0));
		}
		else
		{
			form.qmbCompletingClinian().showOpened();
		}
	}

	@Override
	protected void onQmbOpSurgeonTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		
		HcpLiteVoCollection listHcpLite = domain.listHcpLite(value,HcpDisType.MEDICAL);
		form.qmbOpSurgeon().clear();
		if (listHcpLite == null || listHcpLite.size() == 0)
			return;
		for (int i = 0; i < listHcpLite.size(); i++)
		{
			form.qmbOpSurgeon().newRow(listHcpLite.get(i), listHcpLite.get(i).getIMosName());
		}
		if (listHcpLite.size() == 1)
		{
			form.qmbOpSurgeon().setValue(listHcpLite.get(0));
		}
		else
		{
			form.qmbOpSurgeon().showOpened();
		}
	}

	@Override
	protected void onQmbDiagramTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		GraphicAssessmentShortVoCollection lisResults = domain.listDiagrams(value);
		form.qmbDiagram().clear();
		if (lisResults == null || lisResults.size() == 0)
			return;
		for (int i = 0; i < lisResults.size(); i++)
		{
			form.qmbDiagram().newRow(lisResults.get(i), lisResults.get(i).getName());
		}
		if (lisResults.size() == 1)
		{
			form.qmbDiagram().setValue(lisResults.get(0));
		}
		else
		{
			form.qmbDiagram().showOpened();
		}
	}

	@Override
	protected void onQmbConsultantTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		
		HcpLiteVoCollection listHcpLite = domain.listHcpLite(value,null);
		form.qmbConsultant().clear();
		if (listHcpLite == null || listHcpLite.size() == 0)
			return;
		for (int i = 0; i < listHcpLite.size(); i++)
		{
			form.qmbConsultant().newRow(listHcpLite.get(i), listHcpLite.get(i).getIMosName());
		}
		if (listHcpLite.size() == 1)
		{
			form.qmbConsultant().setValue(listHcpLite.get(0));
		}
		else
		{
			form.qmbConsultant().showOpened();
		}
	}

	@Override
	protected void onQmbDiagnosisTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
	
		DiagLiteVoCollection lisResults = domain.listDiagnosis(value);
		form.qmbDiagnosis().clear();
		if (lisResults == null || lisResults.size() == 0)
			return;
		for (int i = 0; i < lisResults.size(); i++)
		{
			form.qmbDiagnosis().newRow(lisResults.get(i), lisResults.get(i).getDiagnosisName());
		}
		if (lisResults.size() == 1)
		{
			form.qmbDiagnosis().setValue(lisResults.get(0));
		}
		else
		{
			form.qmbDiagnosis().showOpened();
		}
	}

	@Override
	protected void onQmbProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		ProcedureLiteVoCollection lisResults = domain.listProcedures(value);
		form.qmbProcedure().clear();
		if (lisResults == null || lisResults.size() == 0)
			return;
		for (int i = 0; i < lisResults.size(); i++)
		{
			form.qmbProcedure().newRow(lisResults.get(i), lisResults.get(i).getProcedureName());
		}
		if (lisResults.size() == 1)
		{
			form.qmbProcedure().setValue(lisResults.get(0));
		}
		else
		{
			form.qmbProcedure().showOpened();
		}
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Clinical.setSurgicalOpNotesFilter(null);
		clearSearchScreen();
		clearResultScreen();
		updateControlState();
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		SurgicalOPNotesFilterVo searchFilter = populateSearchDataFromScreen();
		
		String[] errors = validateSearchCriteria();
		clearResultScreen();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		form.getGlobalContext().Clinical.setSurgicalOpNotesFilter(searchFilter);
		populateResultScreenFromData(domain.listSurgicalOpNotes(searchFilter));
		updateControlState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.View:
			openOpNote();
				break;
		}
	}

	private void openOpNote()
	{
		SurgicalOperationNotesListVo value = form.grdSurgicalOPs().getValue();
		
			
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(value.getCareContext()));
			engine.open(form.getForms().Clinical.SurgicalOpNotes);
	}
}
