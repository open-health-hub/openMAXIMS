//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2391.21642)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.
// Restructured by Margaret McCarthy 25/05/2007 to suit new pattern. 

package ims.clinical.forms.allergies;

import ims.clinical.forms.allergies.GenForm.grdAllergiesRow;
import ims.clinical.vo.lookups.CodingItemType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AllergenTypeReactionsCollection;
import ims.core.vo.AllergenVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientAlert;
import ims.core.vo.PatientAllergy;
import ims.core.vo.PatientAllergyCollection;
import ims.core.vo.PatientAllergyReactionVo;
import ims.core.vo.PatientAllergyReactionVoCollection;
import ims.core.vo.PatientNoAllergyInfoVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.lookups.AllergenType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientAllergyStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.vo.LookupInstVo;
import ims.vo.interfaces.IClinicalCodingValue;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();	
		
		//WDEV-14413
		initializeAllergiesForTriageForm(args);
	}

	//WDEV-14413
	private void initializeAllergiesForTriageForm(Object[] args) 
	{
		if(isAllergiesForTriage())
		{
			if(args == null || args.length == 0)
			{
				newAllergy();
			}
			else if(args[0] instanceof Integer)
			{
				selectionChanged((Integer) args[0]);
				editAllergy();
			}
		}
	}
	
	//WDEV-14413
	private boolean isAllergiesForTriage() 
	{
		if(form.getForms().Clinical.AllergiesForTriage.equals(engine.getFormName()))
			return true;
		
		return false;
	}

	private void initialize() 
	{
		if(form.getGlobalContext().Core.getPatientShort() == null) //to safeguard if this page is made available elsewhere
		{
			engine.showMessage("No Patient ID found");
			return;
		}	
		form.groupFilter().setValue(GenForm.groupFilterEnumeration.rdoActive);
		initializeContextMenus();
		initializeCustomControl();
		initializeHasNoKnownAllergies();
		
		form.ctnDetails().customControlAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);
	}
	
	private void populateTerms()
	{
		
		
		form.ctnDetails().customControlCodingItem().populateTerms(false);
		
	}

	private void initializeHasNoKnownAllergies() 
	{
		PatientNoAllergyInfoVo voPatientNoAllergyInfo = domain.getPatientNoAllergyInfo(form.getGlobalContext().Core.getPatientShort());
		
		form.getLocalContext().setPatientNoAllergyInfo(voPatientNoAllergyInfo);
			
		checkNoAlergyStatus(voPatientNoAllergyInfo);
	}

	protected void initializeContextMenus()
	{
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().getGenericGridAddItem().setText("New Allergy");
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Allergy");
		form.getContextMenus().getGenericGridRemoveItem().setText("Inactivate Allergy");
	}

	private void initializeCustomControl() 
	{
		form.ctnDetails().customControlCodingItem().setClinicalTermMandatory(true);
		form.ctnDetails().customControlCodingItem().setDescriptionMandatory(true);
		form.ctnDetails().customControlCodingItem().setCodingItemType(CodingItemType.ALLERGY);
		form.ctnDetails().customControlCodingItem().setHotlist(new Boolean(false));
	}
	
	private void open()
	{
		clearScreen();
		
		boolean hasAllergies = false; 
		PatientAllergyCollection voCollPatientAllergy = domain.listPatientAllergies(form.getGlobalContext().Core.getPatientShort(), Boolean.FALSE);
		PatientAllergyCollection voColl = new PatientAllergyCollection();		
		
		if(voCollPatientAllergy != null &&
				voCollPatientAllergy.size() > 0)
		{
			hasAllergies = activeAllergiesExist(voCollPatientAllergy);//WDEV-11159 
			if (form.groupFilter().getValue().equals(GenForm.groupFilterEnumeration.rdoActive))
			{
				for (int i = 0; i < voCollPatientAllergy.size(); i++) 
				{
					if (voCollPatientAllergy.get(i)!=null)
						if (voCollPatientAllergy.get(i).getIsCurrentlyActiveAllergyIsNotNull())
							if(voCollPatientAllergy.get(i).getIsCurrentlyActiveAllergy())
							{
								voColl.add(voCollPatientAllergy.get(i));
							}
				}
			}
			else
			{
				voColl = voCollPatientAllergy;
			}
		}			
				
		setToolBarAllergies(hasAllergies);		
		// refresh the local and global contexts due to whether the patient has active allergies or not
		form.getLocalContext().setbActiveAllergies(new Boolean(hasAllergies));
		
		populateListControl(voColl);				

		// select record in the grid if the local context value is not null and populate details panel
		if (form.getLocalContext().getVoAllergyIsNotNull())
		{
			form.grdAllergies().setValue(form.getLocalContext().getVoAllergy());
			form.getLocalContext().setVoAllergy(form.grdAllergies().getValue()); // updates for concurrent use
			
			// WDEV-3165 - must check for null value to cover case where record is made inactive or RIE, and is no longer listed in the grid
			if (form.getLocalContext().getVoAllergyIsNotNull())
				populateDetailsPanel(form.grdAllergies().getValue());
		}		
		
		form.setMode(FormMode.VIEW);
		//form.btnUpdate().setEnabled(false);
		//form.btnInactivate().setVisible(false);
		
		checkNoAlergyStatus(form.getLocalContext().getPatientNoAllergyInfo());
	}
	
	//WDEV-11159 
	private boolean activeAllergiesExist(PatientAllergyCollection voCollPatientAllergy) {
		for(int i=0; i<voCollPatientAllergy.size(); i++)
		{
			if(voCollPatientAllergy.get(i).getIsCurrentlyActiveAllergyIsNotNull() && voCollPatientAllergy.get(i).getIsCurrentlyActiveAllergy())
				return true;
		}
		return false;
	}

	private void checkNoAlergyStatus(PatientNoAllergyInfoVo voPatientNoAllergyInfo) 
	{
		if(voPatientNoAllergyInfo != null
			&& voPatientNoAllergyInfo.getAllergyStatusIsNotNull() 
			&& voPatientNoAllergyInfo.getAllergyStatus().equals(PatientAllergyStatus.NOKNOWNALLERGIES))
		{
			form.lblHasNoKnownAllergies().setVisible(true);
			
			if(voPatientNoAllergyInfo.getAuthoringInformation() == null || (voPatientNoAllergyInfo.getAuthoringInformation().getAuthoringHcp() == null && voPatientNoAllergyInfo.getAuthoringInformation().getAuthoringDateTime() == null ))
			{
				String strTemp = voPatientNoAllergyInfo.createInfoTooltip().toString();
				int n = strTemp.indexOf("Entered By : </b>");
				n = n + new String("Entered By : </b>").length();
				strTemp = strTemp.substring(0, n);
				form.lblHasNoKnownAllergies().setTooltip(strTemp);
			}
			else
				form.lblHasNoKnownAllergies().setTooltip(voPatientNoAllergyInfo.createInfoTooltip().toString());
			
			if (form.getMode().equals(FormMode.VIEW))
			{
				form.btnUpdate().setVisible(true);
				form.btnUpdate().setEnabled(true);
				form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
			}
			populateScreenFromData(voPatientNoAllergyInfo);
		}
		else
		{
			form.lblHasNoKnownAllergies().setVisible(false);
			form.lblHasNoKnownAllergies().setTooltip("");
			//form.btnUpdate().setVisible(false);
			//form.btnUpdate().setEnabled(false);
		}
	}

	private void populateScreenFromData(PatientNoAllergyInfoVo voPatientNoAllergyInfo) 
	{
		clearScreen();

		if (form.getMode().equals(FormMode.EDIT))
			this.form.ctnDetails().chkNoKnownAllergies().setVisible(true);
		
		this.form.ctnDetails().chkNoKnownAllergies().setValue(true);
		this.form.ctnDetails().cmbSource().setValue(voPatientNoAllergyInfo.getSourceofInformationIsNotNull() ? voPatientNoAllergyInfo.getSourceofInformation() : null);
		this.form.ctnDetails().pdtDateIdentified().setValue(voPatientNoAllergyInfo.getWhenIdentifiedIsNotNull() ? voPatientNoAllergyInfo.getWhenIdentified() : null);

		if(voPatientNoAllergyInfo.getAuthoringInformationIsNotNull())
			form.ctnDetails().customControlAuthoringInfo().setValue(voPatientNoAllergyInfo.getAuthoringInformation());
	
		if(voPatientNoAllergyInfo.getRecordingInformationIsNotNull()){
			if(voPatientNoAllergyInfo.getRecordingInformation().getRecordingUserIsNotNull())
				form.ctnDetails().txtRcordingHCP().setValue(voPatientNoAllergyInfo.getRecordingInformation().getRecordingUser().toString());
			form.ctnDetails().dtimRecordingDateTime().setValue(voPatientNoAllergyInfo.getRecordingInformation().getRecordingDateTime());
		}
	}

	protected void clearScreen()
	{
		super.clearScreen();
		clearDetailsPanel();
	}
	
	/**
	 * Populates the grid withen PatientAllergyCollection
	 *
	 * @param PatientAllergyCollection
	 * @return void
	 */
	private void populateListControl(PatientAllergyCollection voCollPatientAllergy)
	{
		clearScreen();
		clearGrid();
				
		if (voCollPatientAllergy != null)
		{	
			PatientAllergy voPatientAllergy = null;
			GenForm.grdAllergiesRow row = null;
			
			for (int i=0; i<voCollPatientAllergy.size(); i++)
			{
				voPatientAllergy = voCollPatientAllergy.get(i);
				row = form.grdAllergies().getRows().newRow();
				populateRow(voPatientAllergy, row);
			}
		}
	}
	
	/**
	 * Populates a single given row with a single given PatientAllergey vo. 
	 * Row value is set to PatientAllergy.
	 * 
	 * @param voPatientAllergy
	 * @param row
	 */
	private void populateRow(PatientAllergy voPatientAllergy, grdAllergiesRow row)
	{
		String tooltipStr = createRowTooltip(voPatientAllergy);

		row.setColAllergenDes(voPatientAllergy.getAllergenDescription());
		row.setTooltipForColAllergenDes(tooltipStr);
		
		if (voPatientAllergy.getReactionsIsNotNull() && voPatientAllergy.getReactions().size() > 0)
			row.setColReaction(voPatientAllergy.getReactions().get(0).getReaction().toString());
		row.setTooltipForColReaction(tooltipStr);
		
		if (voPatientAllergy.getSourceofInformationIsNotNull())
			row.setColSource(voPatientAllergy.getSourceofInformation().getText());
		
		row.setTooltipForColSource(tooltipStr);
		
		if (voPatientAllergy.getIsCurrentlyActiveAllergyIsNotNull())
		{	
			if (voPatientAllergy.getIsCurrentlyActiveAllergy().equals(Boolean.TRUE))
			{
				row.setColIsActive(form.getImages().Core.AnswerBox_Yes);
				row.setTooltipForColIsActive(tooltipStr);
			}
			else
			{
				row.setColIsActive(form.getImages().Core.AnswerBox_No);
				row.setTooltipForColIsActive(createInactivateTooltip(voPatientAllergy));
				row.setBackColor(Color.LightGray);
			}
		}
		
		if (voPatientAllergy.getSysInfo().getCreationDateTime() != null)
			row.setColDate(voPatientAllergy.getSysInfo().getCreationDateTime().getDate().toString());	
		
		row.setTooltipForColDate(tooltipStr);
		
		if (voPatientAllergy.getSysInfoIsNotNull() && voPatientAllergy.getSysInfo().getLastupdateUser() != null)
		{
			row.setColAudit(form.getImages().Core.EditDisabled);
			row.setTooltipForColAudit("This record had been updated.");
		}
		row.setValue(voPatientAllergy);
	}

	private String createInactivateTooltip(PatientAllergy voPatientAllergy)
	{
		StringBuffer sb = new StringBuffer();
//		sb.append("<b>Inactive Comment : </b>");
//		sb.append(voPatientAllergy.getInactivationCommentsIsNotNull() ? voPatientAllergy.getInactivationComments().toString() : "");
//		sb.append("<br>");
		sb.append("<b>Inactivated Info : </b>");
		sb.append(voPatientAllergy.getInactivationAuthoringInfoIsNotNull() ? voPatientAllergy.getInactivationAuthoringInfo().toString(" - ") : "");
		sb.append("<br>");
		sb.append("<b>Recording Info : </b>");
		sb.append(voPatientAllergy.getRecordingInformationIsNotNull() ? voPatientAllergy.getRecordingInformation().toString(" - ") : "");
		sb.append("<br>");

		return sb.toString();
	}


	private String createRowTooltip(PatientAllergy voPatientAllergy)
	{
		StringBuffer sb = new StringBuffer();
		sb.append("<b>Comment : </b>");
		sb.append(voPatientAllergy.getCommentsIsNotNull() ? voPatientAllergy.getComments().toString() : "");
		sb.append("<br>");
		sb.append("<b>Date Identified : </b>");
		sb.append(voPatientAllergy.getWhenIdentifiedIsNotNull() ? voPatientAllergy.getWhenIdentified().toString() : "");
		sb.append("<br>");
		sb.append("<b>Authoring Info : </b>");
		sb.append(voPatientAllergy.getAuthoringInformationIsNotNull() ? voPatientAllergy.getAuthoringInformation().toString(" - ") : "");
		sb.append("<br>");
		sb.append("<b>Recording Info : </b>");
		sb.append(voPatientAllergy.getRecordingInformationIsNotNull() ? voPatientAllergy.getRecordingInformation().toString(" - ") : "");
		sb.append("<br>");

		return sb.toString();
	}

	/**
	 * Clears any current icons. If given boolean is true, adds an allergies icon. 
	 * 
	 * @param boolean
	 * @return void
	 */
	private void setToolBarAllergies(boolean bAlertsExist)
	{
		engine.clearAlertsByType(ims.alerts.PatientAllergy.class); 
		if(bAlertsExist)
		{
			engine.addAlert(new ims.alerts.PatientAllergy("The patient has allergies."));
		}
 	}	
	
	private void clearGrid()
	{
		form.grdAllergies().getRows().clear();
		form.grdAllergies().setValue(null);
	}

	private void clearDetailsPanel()
	{
		form.ctnDetails().customControlCodingItem().clear();
		form.ctnDetails().cmbType().setValue(null);
		form.ctnDetails().cmbReaction().setValue(null);
		form.ctnDetails().txtEffect().setValue(null);
		form.ctnDetails().cmbSource().setValue(null);
		form.ctnDetails().pdtDateIdentified().setValue(null);
		form.ctnDetails().customControlAuthoringInfo().setValue(null);
		form.ctnDetails().txtRcordingHCP().setValue("");
		form.ctnDetails().dtimRecordingDateTime().setValue(null);
		form.ctnDetails().setCollapsed(true);
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		// Returning from selecting to inactivate a record, update and save. 
		if(formName.equals(form.getForms().Core.YesNoDialog) && result.equals(DialogResult.YES))
		{
			PatientAllergy voPatientAllergy = new PatientAllergy(); 
			voPatientAllergy = form.grdAllergies().getValue();
			voPatientAllergy.setIsCurrentlyActiveAllergy(Boolean.FALSE);

			AuthoringInformationVo voAuthor = new AuthoringInformationVo();
			voAuthor.setAuthoringDateTime(new DateTime());
			voAuthor.setAuthoringHcp((HcpLiteVo)domain.getHcpLiteUser());
			voPatientAllergy.setInactivationAuthoringInfo(voAuthor);
			
			if (save(voPatientAllergy))
			{
				open();
			}	
		}			
	}
	
	protected void onBtnInactivateClick() throws PresentationLogicException
	{
		inactivateAllergy();			
	}

	private void inactivateAllergy()
	{
		form.getGlobalContext().Core.setYesNoDialogMessage("Are you sure you wish to make this record inactive");
		engine.open(form.getForms().Core.YesNoDialog);
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
		initializeHasNoKnownAllergies();
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if(form.ctnDetails().chkNoKnownAllergies().getValue())
		{
			if ( ! savePatientCoreClinicalData(true))
				return;
				
			form.ctnDetails().chkNoKnownAllergies().setValue(false);
			open();
			return;
		}
		
		if(form.ctnDetails().pdtDateIdentified().getValue() != null && form.ctnDetails().pdtDateIdentified().getValue().isGreaterThan(new Date()))
		{
			engine.showMessage("'Date Identified' can not be in the future");
			return;
		}
		
		PatientAllergy voPatientAllergy = populateInstanceData(form.getLocalContext().getVoAllergy());
		
		if (save(voPatientAllergy))
		{
			open();
			initializeHasNoKnownAllergies();
			if(form.grdAllergies().getSelectedRow()!= null)
				if(form.grdAllergies().getSelectedRow().getValue().equals(form.getLocalContext().getVoAllergy()))
					if(form.getLocalContext().getVoAllergy().getIsCurrentlyActiveAllergy() != null)
					{
						if(form.getLocalContext().getVoAllergy().getIsCurrentlyActiveAllergy().booleanValue())
						{
							form.btnUpdate().setEnabled(true);	
							form.btnUpdate().setVisible(true);
							form.btnInactivate().setVisible(true);
							form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
						}
						else
						{
							form.btnUpdate().setEnabled(false);	
							form.btnInactivate().setVisible(false);
						}
					}
				
			

		}
	}
	
	private boolean savePatientCoreClinicalData(boolean bNoKnownAllergies) 
	{
		populatePatientNoAllergyInfo(bNoKnownAllergies);
		PatientNoAllergyInfoVo voPatientNoAllergyInfo = form.getLocalContext().getPatientNoAllergyInfo();
		
		String[] errors = voPatientNoAllergyInfo.validate();
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return false;
		}
		
		try
		{
			voPatientNoAllergyInfo = domain.savePatientNoAllergyInfo(voPatientNoAllergyInfo);
			form.getLocalContext().setPatientNoAllergyInfo(voPatientNoAllergyInfo);
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initializeHasNoKnownAllergies();
			return true;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			initializeHasNoKnownAllergies();
			return true;
		}
		return true;
	}

	private void populatePatientNoAllergyInfo(boolean noKnownAllergies) 
	{
		PatientNoAllergyInfoVo voPatientNoAllergyInfo = form.getLocalContext().getPatientNoAllergyInfo();
		if(voPatientNoAllergyInfo == null)
			voPatientNoAllergyInfo = new PatientNoAllergyInfoVo();
		
		voPatientNoAllergyInfo.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		voPatientNoAllergyInfo.setAuthoringInformation(form.ctnDetails().customControlAuthoringInfo().getValue());
		if(voPatientNoAllergyInfo.getRecordingInformation()==null)
		{
			//WDEV-12901 set Recording Information
			RecordingUserInformationVo voRecordingUserInformation = new RecordingUserInformationVo();
			Object mos = domain.getMosUser();
			if(mos != null)
				voRecordingUserInformation.setRecordingUser((MemberOfStaffLiteVo)mos);
			voRecordingUserInformation.setRecordingDateTime(new DateTime());
			voPatientNoAllergyInfo.setRecordingInformation(voRecordingUserInformation);
		}

		//wdev-16756
		if(voPatientNoAllergyInfo.getAuthoringInformation()==null)
		{
			AuthoringInformationVo voAuthor = new AuthoringInformationVo();
			voAuthor.setAuthoringDateTime(new DateTime());
			voAuthor.setAuthoringHcp((HcpLiteVo)domain.getHcpLiteUser());
			voPatientNoAllergyInfo.setAuthoringInformation(voAuthor);
		}
		voPatientNoAllergyInfo.setSourceofInformation(form.ctnDetails().cmbSource().getValue());
		voPatientNoAllergyInfo.setWhenIdentified(form.ctnDetails().pdtDateIdentified().getValue());

		if(noKnownAllergies)
			voPatientNoAllergyInfo.setAllergyStatus(PatientAllergyStatus.NOKNOWNALLERGIES);
		else
			voPatientNoAllergyInfo.setAllergyStatus(PatientAllergyStatus.HASALLERGIES);
		
		form.getLocalContext().setPatientNoAllergyInfo(voPatientNoAllergyInfo);
	}

	/**
	 * Validates and attempts to save a given PatientAllergy
	 *  
	 * @param voPatientAllergy
	 * @return
	 */
	private boolean save(PatientAllergy voPatientAllergy)
	{		
		String[] errors = voPatientAllergy.validate();
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return false;
		}
		
		populatePatientNoAllergyInfo(false);
		PatientNoAllergyInfoVo voPatientNoAllergyInfo = form.getLocalContext().getPatientNoAllergyInfo();
		
		errors = voPatientNoAllergyInfo.validate();			//wdev-15696
		if(errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return false;
		}
		
		try
		{
			voPatientAllergy = domain.savePatientAllergy(voPatientAllergy, voPatientNoAllergyInfo);
			form.getLocalContext().setVoAllergy(voPatientAllergy);
			form.getLocalContext().setPatientNoAllergyInfo(domain.getPatientNoAllergyInfo(form.getGlobalContext().Core.getPatientShort()));
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			initializeHasNoKnownAllergies();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
			initializeHasNoKnownAllergies();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}

	/**
	 *	WDEV-13169
	 *	Function used to validate UI rules
	 */
	private String[] validateUI()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		if (form.ctnDetails().customControlAuthoringInfo().getValue() == null || !form.ctnDetails().customControlAuthoringInfo().getValue().getAuthoringHcpIsNotNull())
			errorList.add("Authoring HCP is mandatory.");
		
		if (form.ctnDetails().customControlAuthoringInfo().getValue() == null || !form.ctnDetails().customControlAuthoringInfo().getValue().getAuthoringDateTimeIsNotNull())
			errorList.add("Authoring Date Time is mandatory.");
		
		return errorList.toArray(new String[errorList.size()]);
	}

	/**
	 * Takes a given PatientAllergy vo and updates it with data from the details panel. 
	 * 
	 * @param PatientAllergy
	 * @return PatientAllergy
	 */
	private PatientAllergy populateInstanceData(PatientAllergy voPatientAllergy)
	{
		if(voPatientAllergy == null)
		{
			voPatientAllergy = new PatientAllergy();
			voPatientAllergy.setIsCurrentlyActiveAllergy(Boolean.TRUE);
		}
		
		voPatientAllergy.setWhenIdentified(form.ctnDetails().pdtDateIdentified().getValue());
		voPatientAllergy.setSourceofInformation(form.ctnDetails().cmbSource().getValue());			
		voPatientAllergy.setComments(form.ctnDetails().txtEffect().getValue());
		voPatientAllergy.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		IClinicalCodingValue voResult = form.ctnDetails().customControlCodingItem().getValue();
		if (voResult != null)
		{
			if (voResult.getIClinicalCodingValue() instanceof AllergenVo)
			{
				voPatientAllergy.setAllergen((AllergenVo) voResult.getIClinicalCodingValue());
				voPatientAllergy.setAllergenDescription(voResult.getIClinicalCodingValueDescription());
			}
			else
			{
				throw new CodingRuntimeException("AllergenVo expected from component");
			}
		}
		else // WDEV-3126 - this value were not being cleared if removed on edit. 
		{
			voPatientAllergy.setAllergenDescription(null);
		}		
		
		voPatientAllergy.setAllergenType(form.ctnDetails().cmbType().getValue());
		
		if (voPatientAllergy.getAllergenTypeIsNotNull())
		{
			PatientAllergyReactionVoCollection voPatientAllergyReactionColl = new PatientAllergyReactionVoCollection();
			if(form.ctnDetails().cmbReaction().getValue() != null)
			{
				PatientAllergyReactionVo voPatientReaction = new PatientAllergyReactionVo();
				voPatientReaction.setReaction(form.ctnDetails().cmbReaction().getValue());
				voPatientAllergyReactionColl.add(voPatientReaction);
				voPatientAllergy.setReactions(voPatientAllergyReactionColl);
			}
			else
				voPatientAllergy.setReactions(null);
		}
		else
			voPatientAllergy.setReactions(null);
		
		voPatientAllergy.setAuthoringInformation(form.ctnDetails().customControlAuthoringInfo().getValue());
		
		if(voPatientAllergy.getRecordingInformation()==null){
			//WDEV-12901 set Recording Information
			RecordingUserInformationVo voRecordingUserInformation = new RecordingUserInformationVo();
			Object mos = domain.getMosUser();
			if(mos != null)
				voRecordingUserInformation.setRecordingUser((MemberOfStaffLiteVo)mos);
			voRecordingUserInformation.setRecordingDateTime(new DateTime());
			voPatientAllergy.setRecordingInformation(voRecordingUserInformation);
		}
		
		return voPatientAllergy;
	}

	protected void onGrdAllergiesSelectionChanged() throws PresentationLogicException
	{	
		if(form.grdAllergies().getValue() == null)//WDEV-14413
			return;
		
		selectionChanged(form.grdAllergies().getValue().getID_PatientAllergy());//WDEV-14413
	}

	private void selectionChanged(Integer patientAllergyId) 
	{
		// WDEV-3125 - should be performing a domain.get instead of taking the grid value
		form.getLocalContext().setVoAllergy(domain.getpatientAllergy(patientAllergyId));  //WDEV-14413
		form.grdAllergies().setValue(form.getLocalContext().getVoAllergy());
		form.grdAllergies().getSelectedRow().setValue(form.getLocalContext().getVoAllergy());
		populateDetailsPanel(form.getLocalContext().getVoAllergy());
		if(form.getLocalContext().getVoAllergy().getIsCurrentlyActiveAllergy() != null)
		{
			if(form.getLocalContext().getVoAllergy().getIsCurrentlyActiveAllergy().booleanValue())
			{
				form.btnUpdate().setEnabled(true);	
				form.btnInactivate().setVisible(true);
				form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
			}
			else
			{
				form.btnUpdate().setEnabled(false);	
				form.btnInactivate().setVisible(false);
			}
		}

		form.setMode(FormMode.VIEW);
	}

	private void populateDetailsPanel(PatientAllergy allergy)
	{
		clearDetailsPanel();
		
		form.ctnDetails().customControlCodingItem().setValue(allergy);
		form.ctnDetails().cmbType().setValue(allergy.getAllergenType());			
		populateReactionCmb();
		
		//If a reaction that has been saved is now marked as inactive in the Admin section it will still display 
		if (allergy.getReactions() != null)
		{	
			if (allergy.getReactions().size() > 0)
			{
				form.ctnDetails().cmbReaction().newRow(allergy.getReactions().get(0).getReaction(), allergy.getReactions().get(0).getReaction().getText());
				form.ctnDetails().cmbReaction().setValue(allergy.getReactions().get(0).getReaction());
			}
		}

		if(allergy.getAuthoringInformationIsNotNull())
			form.ctnDetails().customControlAuthoringInfo().setValue(allergy.getAuthoringInformation());
		
		if(allergy.getRecordingInformationIsNotNull()){
			if(allergy.getRecordingInformation().getRecordingUserIsNotNull())
				form.ctnDetails().txtRcordingHCP().setValue(allergy.getRecordingInformation().getRecordingUser().toString());
			form.ctnDetails().dtimRecordingDateTime().setValue(allergy.getRecordingInformation().getRecordingDateTime());
		}
		
		
		form.ctnDetails().txtEffect().setValue(allergy.getComments());
		form.ctnDetails().cmbSource().setValue(allergy.getSourceofInformation());
		form.ctnDetails().pdtDateIdentified().setValue(allergy.getWhenIdentified());
	}
	
	private void populateReactionCmb()
	{
		form.ctnDetails().cmbReaction().clear();
		if (form.ctnDetails().cmbType().getValue() == null)
			return;
			
		AllergenTypeReactionsCollection voColl = domain.listAllergenTypeReactions(form.ctnDetails().cmbType().getValue());
		
		if (voColl == null)
			return;
		
		for (int i=0; i<voColl.size(); i++)
		{
			if (voColl.get(i).getIsActive().booleanValue() == true)
				form.ctnDetails().cmbReaction().newRow(voColl.get(i).getReaction(), voColl.get(i).getReaction().getText());
		}
	}

	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		editAllergy();
	}

	private void editAllergy()
	{
		form.setMode(FormMode.EDIT);
		
		if (form.getLocalContext().getPatientNoAllergyInfoIsNotNull()
			&& form.getLocalContext().getPatientNoAllergyInfo().getAllergyStatusIsNotNull()
			&& form.getLocalContext().getPatientNoAllergyInfo().getAllergyStatus().equals(PatientAllergyStatus.NOKNOWNALLERGIES))
		{
			form.ctnDetails().chkNoKnownAllergies().setVisible(true);
			form.ctnDetails().chkNoKnownAllergies().setEnabled(false);
			form.ctnDetails().chkNoKnownAllergies().setValue(true);
		}


		// these fields are not to be updated by the user
		enableAllergyDetailControls(false);
		
		form.ctnDetails().cmbReaction().setEnabled(true);
		form.ctnDetails().txtEffect().setEnabled(true);
		form.ctnDetails().cmbSource().setEnabled(true);
		form.ctnDetails().pdtDateIdentified().setEnabled(true);
		
		AllergenVo voAllergen = (AllergenVo) form.ctnDetails().customControlCodingItem().getSelectedItem();
		if (voAllergen != null)
			defaultSourceCombo(voAllergen);

		form.ctnDetails().setcustomControlAuthoringInfoEnabled(false);
		form.ctnDetails().customControlCodingItem().setEnabled(false);
		
		checkNoAlergyStatus( form.getLocalContext().getPatientNoAllergyInfo());
		
		if(form.ctnDetails().chkNoKnownAllergies().getValue())
		{
			form.ctnDetails().setcustomControlCodingItemEnabled(false);
			enableAllergyDetailControls(false);
		}


	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		newAllergy();
	}

	private void newAllergy()
	{
		clearDetailsPanel();
		form.getLocalContext().setVoAllergy(null);	
		form.grdAllergies().setValue(null);
		setDefaultValues();
		form.setMode(FormMode.EDIT);
		
		if( form.grdAllergies().getRows() != null
			&& form.grdAllergies().getRows().size() > 0) 
		{
			form.ctnDetails().chkNoKnownAllergies().setVisible(false);
			form.ctnDetails().chkNoKnownAllergies().setValue(false);
		}
		else if(form.getLocalContext().getPatientNoAllergyInfo() == null)
		{
			form.ctnDetails().chkNoKnownAllergies().setVisible(true);
			form.ctnDetails().chkNoKnownAllergies().setEnabled(true);
			form.ctnDetails().chkNoKnownAllergies().setValue(false);
		}
		else if (form.getLocalContext().getPatientNoAllergyInfoIsNotNull()
			&& form.getLocalContext().getPatientNoAllergyInfo().getAllergyStatusIsNotNull()
			&& form.getLocalContext().getPatientNoAllergyInfo().getAllergyStatus().equals(PatientAllergyStatus.NOKNOWNALLERGIES))
		{
			form.ctnDetails().chkNoKnownAllergies().setVisible(false);
			form.ctnDetails().chkNoKnownAllergies().setEnabled(false);
			form.ctnDetails().chkNoKnownAllergies().setValue(false);
		}
		else if(form.getLocalContext().getPatientNoAllergyInfo().getAllergyStatus() == null)
		{
			form.ctnDetails().chkNoKnownAllergies().setVisible(true);
			form.ctnDetails().chkNoKnownAllergies().setEnabled(true);
			form.ctnDetails().chkNoKnownAllergies().setValue(false);
		}
		else if( ! form.getLocalContext().getbActiveAllergies() 
			&& form.getLocalContext().getPatientNoAllergyInfo().getAllergyStatus().equals(PatientAllergyStatus.HASALLERGIES))
		{
			form.ctnDetails().chkNoKnownAllergies().setVisible(true);
			form.ctnDetails().chkNoKnownAllergies().setEnabled(true);
			form.ctnDetails().chkNoKnownAllergies().setValue(false);
		}
		else
		{
			form.ctnDetails().chkNoKnownAllergies().setVisible(false);
			form.ctnDetails().chkNoKnownAllergies().setValue(false);
		}
		
		// these fields only have this status when creating a new record
		form.ctnDetails().customControlAuthoringInfo().initializeComponent();
		form.ctnDetails().setcustomControlAuthoringInfoEnabled(true);
		form.ctnDetails().setCollapsed(false);
		// WDEV-3126 correcting the tab order. 
		form.ctnDetails().customControlCodingItem().setFocus();
		
		Object mos = domain.getMosUser();
		if(mos != null)
			form.ctnDetails().txtRcordingHCP().setValue(((MemberOfStaffLiteVo)mos).getIMosName());
		form.ctnDetails().dtimRecordingDateTime().setValue(new DateTime());
		
		enableAllergyDetailControls(true);
		
		if (ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue())
			defaultCOEAllergyList();

	}

	private void defaultCOEAllergyList() 
	{
		populateTerms();
	}

	private void setDefaultValues()
	{
		if(ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue())
		{
			form.ctnDetails().customControlCodingItem().setCodingItemType(CodingItemType.ALLERGY);
			form.ctnDetails().customControlCodingItem().setHotlist(new Boolean(false));
			form.ctnDetails().customControlCodingItem().setParentEditing(true);
			form.ctnDetails().customControlCodingItem().search("%");
			form.ctnDetails().customControlCodingItem().clear();
			
			
		}
		Hcp voHcp = (Hcp) domain.getHcpUser();
		if (voHcp != null)
		{
			form.ctnDetails().customControlAuthoringInfo().initializeComponent();
		}
	}

	protected void onRadioButtongroupFilterValueChanged() throws PresentationLogicException
	{
		open();
		if(form.grdAllergies().getSelectedRow()!= null)
			if(form.grdAllergies().getSelectedRow().getValue().equals(form.getLocalContext().getVoAllergy()))
				if(form.getLocalContext().getVoAllergy().getIsCurrentlyActiveAllergy() != null)
				{
					if(form.getLocalContext().getVoAllergy().getIsCurrentlyActiveAllergy().booleanValue())
					{
						form.btnUpdate().setEnabled(true);	
						form.btnUpdate().setVisible(true);
						form.btnInactivate().setVisible(true);
						form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
					}
					else
					{
						form.btnUpdate().setEnabled(false);	
						form.btnInactivate().setVisible(false);
					}
				}
	}
	
	protected void onCmbTypeValueChanged() throws PresentationLogicException
	{
		form.ctnDetails().cmbReaction().clear();
		fillReactionCombo();
	}

	private void fillReactionCombo()
	{
		form.ctnDetails().cmbReaction().clear();
		
		
		AllergenType type = form.ctnDetails().cmbType().getValue();
		if(type != null)
		{
			AllergenTypeReactionsCollection reactionsColl = domain.listAllergenTypeReactions(type);
			if(reactionsColl != null)
			{
				for (int i = 0; i < reactionsColl.size(); i++)
				{
					if(reactionsColl.get(i).getReaction()!= null)
						form.ctnDetails().cmbReaction().newRow(reactionsColl.get(i).getReaction(), reactionsColl.get(i).getReaction().toString());
				}
				if (reactionsColl.size() == 1)
					form.ctnDetails().cmbReaction().setValue(reactionsColl.get(0).getReaction());
			}
		}
		
		form.ctnDetails().cmbReaction().getValues();
		
	}
	
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}

	/**
	 * Updates the state of the buttons and context menus. 
	 * 
	 * @param void
	 * @return void
	 */
	private void updateControlsState() 
	{
		form.ctnDetails().customControlCodingItem().setParentEditing(new Boolean(form.getMode().equals(FormMode.EDIT)));
		
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().getGenericGridAddItem().setVisible(false);
			form.btnUpdate().setVisible(false);
			form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
			form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
			form.ctnDetails().setcustomControlCodingItemEnabled(true);
			if(ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue())
				form.ctnDetails().cmbType().setEnabled(false);
			else
				form.ctnDetails().cmbType().setEnabled(true);
			form.ctnDetails().cmbReaction().setEnabled(true);
		}
		else
		{
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			
			// WDEV-3126 - edit and inactivate buttons and context menus should be available only for selected active records
			boolean activeRecordSelected = form.grdAllergies().getSelectedRowIndex() >= 0
				&& form.getLocalContext().getVoAllergyIsNotNull() 
				&& form.getLocalContext().getVoAllergy().getIsCurrentlyActiveAllergyIsNotNull() 
				&& form.getLocalContext().getVoAllergy().getIsCurrentlyActiveAllergy().booleanValue();
			
			form.btnUpdate().setVisible(activeRecordSelected /* || form.getLocalContext().getPatientNoAllergyInfoIsNotNull() */);		
			form.getContextMenus().getGenericGridUpdateItem().setVisible(activeRecordSelected);
			if (form.getLocalContext().getPatientNoAllergyInfoIsNotNull()
					&& form.getLocalContext().getPatientNoAllergyInfo().getAllergyStatusIsNotNull()
					&& form.getLocalContext().getPatientNoAllergyInfo().getAllergyStatus().equals(PatientAllergyStatus.NOKNOWNALLERGIES))
					form.btnInactivate().setVisible(false);

			form.btnInactivate().setVisible(activeRecordSelected);
				
			form.getContextMenus().getGenericGridRemoveItem().setVisible(activeRecordSelected);
		}
		
		form.ctnDetails().setCollapsed(!(form.grdAllergies().getSelectedRowIndex() >= 0));
		
		form.btnClose().setVisible(isAllergiesForTriage() && FormMode.VIEW.equals(form.getMode()));//WDEV-14413
		form.btnClose().setEnabled(isAllergiesForTriage() && FormMode.VIEW.equals(form.getMode()));//WDEV-14413
	}

	protected void onCustomControlCodingItemValueChanged() throws PresentationLogicException 
	{
		AllergenVo voAllergen = (AllergenVo) form.ctnDetails().customControlCodingItem().getSelectedItem();
		form.ctnDetails().cmbType().setValue(voAllergen != null ? voAllergen.getAllergenType() : null);
		fillReactionCombo();

		if( ! ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
			return;

		if (form.getMode().equals(FormMode.EDIT))
			form.ctnDetails().cmbSource().setEnabled(true);
		
		if (form.ctnDetails().cmbSource().getValue() != null
			&&form.ctnDetails().cmbSource().getValue().equals(SourceofInformation.PAS))
				form.ctnDetails().cmbSource().setValue(null);

		if (voAllergen != null)
			defaultSourceCombo(voAllergen);
	}
	

	private void defaultSourceCombo(AllergenVo voAllergen)
	{

		if (form.getMode().equals(FormMode.EDIT))
		{

			if (voAllergen != null
				&& voAllergen.getTaxonomyMapIsNotNull()
				&& voAllergen.getTaxonomyMap().size() > 0)
			{	
				for ( int i = 0 ; i < voAllergen.getTaxonomyMap().size() ; i++)
				{
					if (voAllergen.getTaxonomyMap().get(i).getTaxonomyCodeIsNotNull()
						&& voAllergen.getTaxonomyMap().get(i).getTaxonomyCode().equals("ALLE")
						&& voAllergen.getTaxonomyMap().get(i).getTaxonomyNameIsNotNull()
						&& voAllergen.getTaxonomyMap().get(i).getTaxonomyName().getText().equals("PAS"))
					{
						form.ctnDetails().cmbSource().setEnabled(false);
						form.ctnDetails().cmbSource().setValue(SourceofInformation.PAS);
					}
				}
			}
		}
	}

	private void enableAllergyDetailControls(boolean enable)
	{
		if(ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue())
			form.ctnDetails().cmbType().setEnabled(false);
		else
			form.ctnDetails().cmbType().setEnabled(enable);
		
		form.ctnDetails().cmbReaction().setEnabled(enable);
		form.ctnDetails().txtEffect().setEnabled(enable);
		
		if (form.getMode().equals(FormMode.EDIT)
			&& form.ctnDetails().chkNoKnownAllergies().getValue())
			enable = true;

		form.ctnDetails().cmbSource().setEnabled(enable);
		form.ctnDetails().pdtDateIdentified().setEnabled(enable);
		form.ctnDetails().setCollapsed(false);
	}
	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newAllergy();
			break;
			
			case GenForm.ContextMenus.GenericGrid.Update:
				editAllergy();
			break;
			
			case GenForm.ContextMenus.GenericGrid.Remove:
				inactivateAllergy();
			break;
		}		
	}

	@Override
	protected void onChkNoKnownAllergiesValueChanged() throws PresentationLogicException 
	{
		if(form.ctnDetails().chkNoKnownAllergies().getValue())
		{
			clearDetailsPanel();
			form.ctnDetails().setCollapsed(false);
			form.ctnDetails().setcustomControlCodingItemEnabled(false);
			form.ctnDetails().setcustomControlAuthoringInfoEnabled(true);
			enableAllergyDetailControls(false);
			form.ctnDetails().customControlAuthoringInfo().initializeComponent();
			//WDEV-12901 
			Object mos = domain.getMosUser();
			if(mos != null)
				form.ctnDetails().txtRcordingHCP().setValue(((MemberOfStaffLiteVo)mos).getIMosName());
			form.ctnDetails().dtimRecordingDateTime().setValue(new DateTime());
		}		
		else
		{
			form.ctnDetails().setcustomControlCodingItemEnabled(true);
			form.ctnDetails().setcustomControlAuthoringInfoEnabled(true);
			enableAllergyDetailControls(true);
		}
		
	}

	//WDEV-14413
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		if(!isAllergiesForTriage())
			return;
		
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onRIEDialogClosed(DialogResult result) throws PresentationLogicException
	{
		PatientAllergy voAllergy = form.getLocalContext().getVoAllergy();

		if (voAllergy.getAllergenIsNotNull()
				&& voAllergy.getAllergen().getTaxonomyMapIsNotNull()
				&& voAllergy.getAllergen().getTaxonomyMap().size() > 0)
			{
				for ( int i = 0 ; i < voAllergy.getAllergen().getTaxonomyMap().size() ; i++)
				{
					if (voAllergy.getAllergen().getTaxonomyMap().get(i).getTaxonomyNameIsNotNull()
						&& voAllergy.getAllergen().getTaxonomyMap().get(i).getTaxonomyName().toString().equals("PAS"))
					{
						try
						{
							domain.saveHeartsAlert(voAllergy.getPatient(), voAllergy.getAllergen().getTaxonomyMap().get(i).getTaxonomyCode(), Boolean.FALSE);
						}
						catch (DomainInterfaceException e)
						{
							e.printStackTrace();
						}
						catch (StaleObjectException e)
						{
							e.printStackTrace();
						}
					}
				}
			}
	}
}
