//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.20 build 40824.1400)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.pastmedicalhistory;

import ims.clinical.vo.ClinicalCodingVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.PatientDiagnosisVo;
import ims.core.vo.PatientDiagnosisVoCollection;
import ims.core.vo.PatientPastMedicalHistoryVo;
import ims.core.vo.PatientProcedureShortVo;
import ims.core.vo.PatientProcedureShortVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.ProcedureVo;
import ims.core.vo.TaxonomyMap;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.PartialDate;
import ims.vo.ValueObject;

import java.awt.List;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final String	NO_CODE_ITEM_SELECTED	= "No Suitable Term Selected";
	private static final Integer COL_DATE = new Integer(2);	//wdev-10811

	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
		
	
	}

	private void open()
	{
		form.getLocalContext().setRieRecord(null);
		form.customControlDiagProc().setClinicalTermMandatory(true);
		form.customControlDiagProc().setDescriptionMandatory(true);
		
		if (form.getMode().equals(FormMode.VIEW))
			form.btnNew().setEnabled(false);
				
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getMode().equals(FormMode.VIEW)){
			form.btnNew().setEnabled(true);
			form.btnNew().setVisible(true);
		}
		
		if(ConfigFlag.DOM.RESTRICT_TAXONOMY_SEARCH_ON_PAST_MEDICAL_HISTORY.getValue() == false )
		form.customControlDiagProc().setTaxonomySearch(false);
		
		
		
		form.btnUpdate().setEnabled(false);

		
		
		PatientPastMedicalHistoryVo voPMHVo = domain.getPastMedicalHistory(form.getGlobalContext().Core.getPatientShort());

		clearFields();
		
		form.gridDiagnosis().getRows().clear();
		if (voPMHVo != null)
		{
		
			GenForm.gridDiagnosisRow row = null;
			// Add in the Diagnoses records
			for (int i = 0; i < voPMHVo.getDiagnosis().size(); i++)
			{
				row = form.gridDiagnosis().getRows().newRow();

				if (voPMHVo.getDiagnosis().get(i).getDiagnosis() == null)
				{
					DiagLiteVo voDiagnosis = getNoItemPMHDiagnosis();
					row.setcolDiagProc(voDiagnosis.getDiagnosisName());
				}
				else
					row.setcolDiagProc(voPMHVo.getDiagnosis().get(i).getDiagnosis().getDiagnosisName());

				if (voPMHVo.getDiagnosis().get(i).getDiagnosedDate() != null)
					row.setcolDate(voPMHVo.getDiagnosis().get(i).getDiagnosedDate().toString());
				if (voPMHVo.getDiagnosis().get(i).getSourceofInformation() != null)
					row.setcolSource(voPMHVo.getDiagnosis().get(i).getSourceofInformation().toString());
				row.setcolComments(voPMHVo.getDiagnosis().get(i).getNotes());
				
				if (voPMHVo.getDiagnosis().get(i).getDiagnosisDescriptionIsNotNull())
					row.setcolDescription(voPMHVo.getDiagnosis().get(i).getDiagnosisDescription());

				row.setValue(voPMHVo.getDiagnosis().get(i));
			}
			// Add in the Procedure records
			for (int j = 0; j < voPMHVo.getProcedure().size(); j++)
			{
				row = form.gridDiagnosis().getRows().newRow();

				if (voPMHVo.getProcedure().get(j).getProcedure() == null)
				{
					ProcedureVo voProcedure = getNoItemPMHProcedure();
					row.setcolDiagProc(voProcedure.getProcedureName());
				}
				else
					row.setcolDiagProc(voPMHVo.getProcedure().get(j).getProcedure().getProcedureName());

				if (voPMHVo.getProcedure().get(j).getProcDate() != null)
					row.setcolDate(voPMHVo.getProcedure().get(j).getProcDate().toString());
				if (voPMHVo.getProcedure().get(j).getInfoSource() != null)
					row.setcolSource(voPMHVo.getProcedure().get(j).getInfoSource().toString());
				row.setcolComments(voPMHVo.getProcedure().get(j).getNotes());

				if (voPMHVo.getProcedure().get(j).getProcedureDescriptionIsNotNull())
					row.setcolDescription(voPMHVo.getProcedure().get(j).getProcedureDescription());

				row.setValue(voPMHVo.getProcedure().get(j));
			}

			if (form.getLocalContext().getDiagnosisIsNotNull())
			{
				form.gridDiagnosis().setValue(form.getLocalContext().getDiagnosis());
				onGridDiagnosisSelectionChanged();
			}
			else if (form.getLocalContext().getProcedureIsNotNull())
			{
				form.gridDiagnosis().setValue(form.getLocalContext().getProcedure());
				onGridDiagnosisSelectionChanged();
			}
			else
				form.gridDiagnosis().setValue(null);

			form.gridDiagnosis().setValue(voPMHVo);
		}
		else
			voPMHVo = new PatientPastMedicalHistoryVo();

		form.getLocalContext().setPMHRecordVo(voPMHVo);

		setFormMode(FormMode.VIEW);
		// form.btnUpdate().setEnabled(false);
		
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.customControlDiagProc().getDescription() != null)
		{
			TaxonomyMap filter = new TaxonomyMap();
			filter.setDescription(form.customControlDiagProc().getDescription());
			form.getGlobalContext().Core.setTaxonomyMap(filter);
		}
		engine.open(form.getForms().Core.TaxonomySearch);
	}

	protected void onBNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setDiagnosis(null);
		form.getLocalContext().setProcedure(null);
		form.getLocalContext().setRieRecord(null);

		form.btnUpdate().setVisible(false);
		form.setMode(FormMode.EDIT);
		
		
		
		
		form.getLocalContext().setbUpdatingRecord(Boolean.FALSE);
		form.gridDiagnosis().setValue(null);

		clearFields();

		form.grpType().setEnabled(true);
		form.setcustomControlDiagProcEnabled(false);

		form.grpType().setEnabled(true);

		form.customControlAuthoringInfo().initializeComponent();
		form.setcustomControlAuthoringInfoEnabled(true);
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);
		
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setbUpdatingRecord(Boolean.TRUE);

		form.getLocalContext().setRieRecord(null);
		if (form.grpType().getValue().equals(GenForm.grpTypeEnumeration.rdoDiagnosis))
			form.getLocalContext().setDiagnosis((PatientDiagnosisVo) form.gridDiagnosis().getValue());
		else
			form.getLocalContext().setProcedure((PatientProcedureShortVo) form.gridDiagnosis().getValue());

		//form.setcustomControlDiagProcEnabled(false);
		form.grpType().setEnabled(false);

		form.btnUpdate().setVisible(false);
		form.setcustomControlAuthoringInfoEnabled(false);
		form.customControlDiagProc().setEnabled(false);
		//form.setcustomControlDiagProcEnabled(true);
		onRadioButtongrpTypeValueChanged();
		
	}

	private void clearFields()
	{
		form.customControlAuthoringInfo().setValue(null);
		form.grpType().setValue(null);
		form.customControlDiagProc().clear();
		form.pdtDate().setValue(null);
		form.cmbSourceOfInformation().setValue(null);
		form.txtComments().setValue(null);
	}

	protected void onGridDiagnosisSelectionChanged()
	{
		form.getLocalContext().setDiagnosis(null);
		form.getLocalContext().setProcedure(null);
		form.getLocalContext().setRieRecord(null);
		form.btnUpdate().setVisible(true);

		if (form.gridDiagnosis().getValue() != null)
		{
			clearFields();

			if (form.gridDiagnosis().getValue() instanceof ims.core.vo.PatientDiagnosisVo)
			{
				form.customControlDiagProc().setCodingItemType(CodingItemType.DIAGNOSIS);
				
				PatientDiagnosisVo rowValue = (PatientDiagnosisVo) form.gridDiagnosis().getValue();
				form.getLocalContext().setDiagnosis(rowValue);
				form.getLocalContext().setRieRecord(rowValue);
				form.customControlAuthoringInfo().setValue( rowValue.getAuthoringInfo());
				
				form.grpType().setValue(GenForm.grpTypeEnumeration.rdoDiagnosis);
				if (rowValue.getDiagnosisIsNotNull())
				{
					ClinicalCodingVo vo = new ClinicalCodingVo();
					vo.setClinicalCodingItem((ValueObject)rowValue.getDiagnosis());
					form.customControlDiagProc().setValue(vo);
				}
				else
				{
					DiagLiteVo voDiagnosis = getNoItemPMHDiagnosis();
					ClinicalCodingVo vo = new ClinicalCodingVo();
					vo.setClinicalCodingItem((ValueObject)voDiagnosis);
					form.customControlDiagProc().setValue(vo);
				}

				if (rowValue.getDiagnosisDescriptionIsNotNull())
					form.customControlDiagProc().setDescription(rowValue.getDiagnosisDescription().toString());
				
				if (rowValue.getDiagnosedDate() != null)
					form.pdtDate().setValue(rowValue.getDiagnosedDate());

				if (rowValue.getSourceofInformation() != null)
					form.cmbSourceOfInformation().setValue(rowValue.getSourceofInformation());
				form.txtComments().setValue(rowValue.getNotes());
			}
			else if (form.gridDiagnosis().getValue() instanceof PatientProcedureShortVo)
			{
				form.customControlDiagProc().setCodingItemType(CodingItemType.PROCEDURE);
				
				ims.core.vo.PatientProcedureShortVo rowValue = (PatientProcedureShortVo) form.gridDiagnosis().getValue();
				form.getLocalContext().setProcedure(rowValue);
				form.getLocalContext().setRieRecord(rowValue);

				form.customControlAuthoringInfo().setValue(rowValue.getAuthoringInformation());
				
				form.grpType().setValue(GenForm.grpTypeEnumeration.rdoProcedure);
				if (rowValue.getProcedureIsNotNull())
				{
					ClinicalCodingVo vo = new ClinicalCodingVo();
					vo.setClinicalCodingItem((ValueObject)rowValue.getProcedure());
					form.customControlDiagProc().setValue(vo);
				}
				else
				{
					ProcedureVo voProcedure = getNoItemPMHProcedure();
					ClinicalCodingVo vo = new ClinicalCodingVo();
					vo.setClinicalCodingItem((ValueObject)voProcedure);
					form.customControlDiagProc().setValue(vo);
				}
				
				if (rowValue.getProcedureDescriptionIsNotNull())
					form.customControlDiagProc().setDescription(rowValue.getProcedureDescription().toString());
				
				
				if (rowValue.getProcDate() != null)
					form.pdtDate().setValue(rowValue.getProcDate());
				if (rowValue.getInfoSource() != null)
					form.cmbSourceOfInformation().setValue(rowValue.getInfoSource());
				form.txtComments().setValue(rowValue.getNotes());
			}
		}

		form.btnUpdate().setEnabled(true);
	}

	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ArrayList<String> screenErrors = new ArrayList<String>();
		if (form.pdtDate().getValue() != null)
		{
			if (form.pdtDate().getValue().isGreaterThan(new Date()))
			{
				engine.showMessage("'Date Identified' can not be in the future");
				return;
			}
		}
		PatientPastMedicalHistoryVo voPMH = new PatientPastMedicalHistoryVo();
		voPMH = form.getLocalContext().getPMHRecordVo();
		voPMH.setPatient(form.getGlobalContext().Core.getPatientShort());
		PatientDiagnosisVoCollection diagColl = new PatientDiagnosisVoCollection();
		PatientProcedureShortVoCollection procColl = new PatientProcedureShortVoCollection();

		if (form.customControlDiagProc().getDescription() == null)
		{
			engine.showMessage("Please choose a Diagnosis/Procedure to save.");
			return;
		}

		if (form.grpType().getValue().equals(GenForm.grpTypeEnumeration.rdoDiagnosis))
		{
			// Diagnosis
			PatientDiagnosisVo voPatDiag = null;

			if (voPMH.getDiagnosis() != null)// Is there a Diagnosis
												// collection already in voPMH
				diagColl = voPMH.getDiagnosis();
			else
				diagColl = new PatientDiagnosisVoCollection();

			if (form.getLocalContext().getbUpdatingRecord().booleanValue())
				voPatDiag = form.getLocalContext().getDiagnosis();
			else
			{
				voPatDiag = new PatientDiagnosisVo();

				voPatDiag.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				voPatDiag.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			}

			voPatDiag.setDiagnosis((DiagLiteVo)form.customControlDiagProc().getSelectedItem());
			voPatDiag.setDiagnosisDescription(form.customControlDiagProc().getDescription());
			
			voPatDiag.setAuthoringInfo(form.customControlAuthoringInfo().getValue());
			voPatDiag.setDiagnosedDate(form.pdtDate().getValue());
			
			if (form.cmbSourceOfInformation() != null)
				voPatDiag.setSourceofInformation(form.cmbSourceOfInformation().getValue());

			voPatDiag.setNotes(form.txtComments().getValue());

			if (!form.getLocalContext().getbUpdatingRecord().booleanValue())
			{
				// 06/09/2005 - Validate the Vo before adding it to the
				// collection
				// or we end up with the the collection having vos not validated
				// leading to and futher save attepts fail
				String[] errors = voPatDiag.validate();
				if (errors != null)
				{
					engine.showErrors(errors);
					return;
				}
				diagColl.add(voPatDiag);
			}
			voPMH.setDiagnosis(diagColl);
		}
		else
		{
			// Procedure
			ims.core.vo.PatientProcedureShortVo voPatProc = null;

			if (voPMH.getProcedure() != null) // Is there a Procedure
												// collection already in voPMH
				procColl = voPMH.getProcedure();
			else
				procColl = new PatientProcedureShortVoCollection();

			if (form.getLocalContext().getbUpdatingRecord().booleanValue())
				voPatProc = form.getLocalContext().getProcedure();
			else
			{
				voPatProc = new PatientProcedureShortVo();

				voPatProc.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				voPatProc.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			}

			voPatProc.setProcedure((ims.core.vo.ProcedureLiteVo) form.customControlDiagProc().getSelectedItem());

			voPatProc.setProcDate(form.pdtDate().getValue());
			if (form.cmbSourceOfInformation() != null)
				voPatProc.setInfoSource(form.cmbSourceOfInformation().getValue());

			voPatProc.setProcedureDescription(form.customControlDiagProc().getDescription());
			voPatProc.setNotes(form.txtComments().getValue());
			voPatProc.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
			
			if (!form.getLocalContext().getbUpdatingRecord().booleanValue())
			{
				// 06/09/2005 - Validate the Vo before adding it to the
				// collection
				// or we end up with the the collection having vos not validated
				// leading to and futher save attepts fail
				String[] errors = voPatProc.validate();
				if (errors != null)
				{
					engine.showErrors(errors);
					return;
				}

				procColl.add(voPatProc);
			}

			voPMH.setProcedure(procColl);
		}
		
		String[] errors = voPMH.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(screenErrors, errors);
				
		if (arrScreenAndVoErrors.length != 0)
		{
			engine.showErrors(arrScreenAndVoErrors);
			return;
		}

		try
		{
			domain.savePMH(voPMH);
		}
		catch (StaleObjectException sox)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			setFormMode(FormMode.VIEW);
			open();
			return;
		}
		catch (UniqueKeyViolationException ue)
		{
			engine.showMessage(ue.getMessage());
			return;
		}
		
		form.btnUpdate().setVisible(true);
		
		setFormMode(FormMode.VIEW);

		open();

	}
	private String[] addScreenErrorsToVOErrors(ArrayList<String> screenErrors, String[] arrErrors)
	{
		String[] arrAllErrors = null;
		
		if(arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);
			
			int i=0;	
			for(int p=screenErrors.size();p<arrAllErrors.length;p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}	
		else
		{
			arrAllErrors = new String[screenErrors.size()];		
			
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);	
		}	
		
		return arrAllErrors;
	}

	private void setFormMode(FormMode view)
	{
		form.setMode(view);
		if (view == FormMode.VIEW)
		{
			// form.btnUpdate().setEnabled(false);
			//form.imbSearch().setVisible(false);
			form.grpType().setEnabled(false);
			form.setcustomControlDiagProcEnabled(false);
			if (form.gridDiagnosis().getValue() == null)
				form.btnUpdate().setEnabled(false);
			else
				form.btnUpdate().setEnabled(true);
		}
		else
		{
			form.btnUpdate().setEnabled(false);
			form.btnUpdate().setVisible(false);
			//form.imbSearch().setVisible(true);
			form.grpType().setEnabled(true);
			//form.setcustomControlDiagProcEnabled(true);
		}

	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		setFormMode(FormMode.VIEW);

		open();
	}

	protected void onRadioButtongrpTypeValueChanged() throws PresentationLogicException
	{
		
		
		
		if(form.grpType().getValue().equals(GenForm.grpTypeEnumeration.rdoDiagnosis))
			form.customControlDiagProc().setCodingItemType(CodingItemType.DIAGNOSIS);
		else if (form.grpType().getValue().equals(GenForm.grpTypeEnumeration.rdoProcedure))
			form.customControlDiagProc().setCodingItemType(CodingItemType.PROCEDURE);
		
		form.customControlDiagProc().setParentEditing(new Boolean(form.getMode().equals(FormMode.EDIT)));
		form.customControlDiagProc().setHotlist(Boolean.FALSE);
		
		
		form.setcustomControlDiagProcEnabled(true);
		
		if(!form.getLocalContext().getbUpdatingRecord().booleanValue())
		{
			form.customControlDiagProc().setEnabled(true);
			form.customControlDiagProc().clear();
		}
	
	}

	protected void onBtnInactivateClick() 
	{
		form.getGlobalContext().Core.setYesNoDialogMessage("Are you sure you wish to make this record inactive");
		engine.open(form.getForms().Core.YesNoDialog);
	}

	private ProcedureVo getNoItemPMHProcedure()
	{
		ProcedureVo voProcedure = new ProcedureVo();
		voProcedure.setID_Procedure(new Integer(-1));
		voProcedure.setProcedureName(NO_CODE_ITEM_SELECTED);
		return voProcedure;
	}
	
	private DiagLiteVo getNoItemPMHDiagnosis()
	{
		DiagLiteVo voDiagnosis = new DiagLiteVo();
		voDiagnosis.setID_Diagnosis(new Integer(-1));
		voDiagnosis.setDiagnosisName(NO_CODE_ITEM_SELECTED);
		return voDiagnosis;
	}

	protected void onCustomControlDiagProcValueChanged() throws PresentationLogicException {
		form.customControlDiagProc().setHotlist(Boolean.FALSE);	
	}

	//wdev-10811
	protected void onGridDiagnosisGridHeaderClicked(int column)	throws PresentationLogicException 
	{
		
		if(column == COL_DATE)
		{
			if (form.getLocalContext().getDateSortOrder() == null || !form.getLocalContext().getDateSortOrder().equals(SortOrder.ASCENDING))
				form.getLocalContext().setDateSortOrder(SortOrder.ASCENDING);
			else
				form.getLocalContext().setDateSortOrder(SortOrder.DESCENDING);
			
			pupulateDiagProcGrid(manualSortDate(form.getLocalContext().getDateSortOrder()));
			
		}
		// TODO Auto-generated method stub
		
	}
	private void pupulateDiagProcGrid(ArrayList list)
	{
		
		if(list != null && list.size() > 0)
		{
			clearFields();
			form.gridDiagnosis().getRows().clear();
			for(int i = 0; i < list.size();i++)
			{
				GenForm.gridDiagnosisRow row = null;
				
				if(list.get(i) instanceof ims.core.vo.PatientDiagnosisVo )
				{
					PatientDiagnosisVo paTdiagVo = (PatientDiagnosisVo) list.get(i);
					
					row = form.gridDiagnosis().getRows().newRow();
					
					row.setcolDiagProc(paTdiagVo.getDiagnosis().getDiagnosisName());
	

					if (paTdiagVo.getDiagnosedDate() != null)
						row.setcolDate(paTdiagVo.getDiagnosedDate().toString());
					if (paTdiagVo.getSourceofInformation() != null)
						row.setcolSource(paTdiagVo.getSourceofInformation().toString());
					row.setcolComments(paTdiagVo.getNotes());
					
					if (paTdiagVo.getDiagnosisDescriptionIsNotNull())
						row.setcolDescription(paTdiagVo.getDiagnosisDescription());

					row.setValue(paTdiagVo);
				}
				if(list.get(i) instanceof PatientProcedureShortVo)
				{
					PatientProcedureShortVo patProcVo = (PatientProcedureShortVo) list.get(i);
					row = form.gridDiagnosis().getRows().newRow();
					
					
					row.setcolDiagProc(patProcVo.getProcedure().getProcedureName());

					if (patProcVo.getProcDate() != null)
						row.setcolDate(patProcVo.getProcDate().toString());
					if (patProcVo.getInfoSource() != null)
						row.setcolSource(patProcVo.getInfoSource().toString());
					row.setcolComments(patProcVo.getNotes());

					if (patProcVo.getProcedureDescriptionIsNotNull())
						row.setcolDescription(patProcVo.getProcedureDescription());

					row.setValue(patProcVo);	
				}
				
			}
			if (form.getLocalContext().getDiagnosisIsNotNull())
			{
				form.gridDiagnosis().setValue(form.getLocalContext().getDiagnosis());
				onGridDiagnosisSelectionChanged();
				form.gridDiagnosis().setValue(form.getLocalContext().getDiagnosis());
			}
			else if (form.getLocalContext().getProcedureIsNotNull())
			{
				form.gridDiagnosis().setValue(form.getLocalContext().getProcedure());
				onGridDiagnosisSelectionChanged();
				form.gridDiagnosis().setValue(form.getLocalContext().getProcedure());
			}
			else
				form.gridDiagnosis().setValue(null);
		}
			
		
	}
	//wdev-10811
	private ArrayList manualSortDate(SortOrder sortOrder)
	{
		ArrayList<Object> templ = new ArrayList<Object>();
		for(int i = 0; i < form.gridDiagnosis().getRows().size();i++)
		{
			templ.add(form.gridDiagnosis().getRows().get(i).getValue());
		}
		Collections.sort(templ,new DobComparator(sortOrder));
		
		return templ;
	}
	//wdev-10811
	public class DobComparator implements Comparator
	{
		private int direction = 1;
		
		public DobComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DobComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			PartialDate pdate1 = null;
			PartialDate pdate2 = null;
			if(ob1 instanceof ims.core.vo.PatientDiagnosisVo )
			{
				ims.core.vo.PatientDiagnosisVo  ps1 = (ims.core.vo.PatientDiagnosisVo )ob1;
				pdate1 = ps1.getDiagnosedDate();
			}
			else if(ob1 instanceof PatientProcedureShortVo)
			{
				PatientProcedureShortVo  ps1 = (PatientProcedureShortVo )ob1;
				pdate1 = ps1.getProcDate();
			}
			if(ob2 instanceof ims.core.vo.PatientDiagnosisVo)
			{
				ims.core.vo.PatientDiagnosisVo ps2 = (ims.core.vo.PatientDiagnosisVo)ob2;
				pdate2 = ps2.getDiagnosedDate();
			}
			else if(ob2 instanceof PatientProcedureShortVo)
			{
				PatientProcedureShortVo ps2 = (PatientProcedureShortVo)ob2;
				pdate2 = ps2.getProcDate();
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	//wdev-13301
	protected void onFormModeChanged() 
	{
		updateControlsState();
		
	}
	//wdev-13301
	private void updateControlsState()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.customControlDiagProc().setIsRequired(false);
		}
		else
		{
			form.customControlDiagProc().setIsRequired(true);
		}
	}


}
