//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4535.14223)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.surgicalauditrecoverycc;

import ims.clinical.forms.surgicalauditrecoverycc.GenForm.grpConfirmPatientArrivalEnumeration;
import ims.clinical.vo.SurgicalAuditOperationDetailStatusVo;
import ims.clinical.vo.SurgicalAuditOperationDetailStatusVoCollection;
import ims.clinical.vo.SurgicalAuditOperationDetailVo;
import ims.clinical.vo.SurgicalAuditRecoveryVo;
import ims.clinical.vo.enums.SurgicalAuditRecoveryEvent;
import ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.NurseVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getcurrentSurgicalAuditOpDetailIsNotNull());
		form.btnEdit().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getcurrentSurgicalAuditOpDetailIsNotNull() && Boolean.FALSE.equals(form.getLocalContext().getisReadOnly()));
	
		form.ccRecoveryRoomNurse().isRequired(FormMode.EDIT.equals(form.getMode()) && !form.chkRecoveryLocum().getValue());
		form.ccWardUnitNurse().isRequired(FormMode.EDIT.equals(form.getMode()) && !form.chkWardLocum().getValue());
		form.ccHandOverFromRecoveryNurse().isRequired(FormMode.EDIT.equals(form.getMode()) && !form.chkRecoveryHandoverLocum().getValue());

		form.txtRecoveryLocumNurse().setRequired(FormMode.EDIT.equals(form.getMode()) && form.chkRecoveryLocum().getValue());
		form.txtWardLocumNurse().setRequired(FormMode.EDIT.equals(form.getMode()) && form.chkWardLocum().getValue());
		form.txtRecoveryHandoverLocumNurse().setRequired(FormMode.EDIT.equals(form.getMode()) && form.chkRecoveryHandoverLocum().getValue());

		form.ccRecoveryRoomNurse().setEnabled(FormMode.EDIT.equals(form.getMode()) && !form.chkRecoveryLocum().getValue());
		form.ccWardUnitNurse().setEnabled(FormMode.EDIT.equals(form.getMode()) && !form.chkWardLocum().getValue());
		form.ccHandOverFromRecoveryNurse().setEnabled(FormMode.EDIT.equals(form.getMode()) && !form.chkRecoveryHandoverLocum().getValue());

		form.txtRecoveryLocumNurse().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.chkRecoveryLocum().getValue());
		form.txtWardLocumNurse().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.chkWardLocum().getValue());
		form.txtRecoveryHandoverLocumNurse().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.chkRecoveryHandoverLocum().getValue());

	}

	public ims.clinical.vo.enums.SurgicalAuditRecoveryEvent getSelectedEvent()
	{
		return form.getLocalContext().getselectedEvent();
	}

	public void resetSelectedEvent()
	{
		form.getLocalContext().setselectedEvent(null);
	}

	public void initialize(ims.clinical.vo.SurgicalAuditOperationDetailRefVo surgicalAuditRef)
	{
		if (surgicalAuditRef != null)
		{
			form.getLocalContext().setcurrentSurgicalAuditOpDetail(domain.getSurgicalAuditOperationDetail(surgicalAuditRef));
		}

		// form.ccConsultant().initialize(MosType.MEDIC);
		form.ccRecoveryRoomNurse().initialize(MosType.HCP, HcpDisType.NURSING);
		form.ccWardUnitNurse().initialize(MosType.HCP, HcpDisType.NURSING);
		form.ccHandOverFromRecoveryNurse().initialize(MosType.HCP, HcpDisType.NURSING);

		populateSentToCombo();

		open();
	}

	private void open()
	{
		if (form.getLocalContext().getcurrentSurgicalAuditOpDetailIsNotNull())
		{
			populateScreenFromData(form.getLocalContext().getcurrentSurgicalAuditOpDetail().getRecovery());
		}
		form.setMode(FormMode.VIEW);
	}

	private void populateScreenFromData(SurgicalAuditRecoveryVo recovery)
	{
		clearInstanceControls();
		if (recovery == null)
			return;

		// Recovery Room Nurse
		form.chkRecoveryLocum().setValue(recovery.getRecoveryLocumBool());
		form.txtRecoveryLocumNurse().setValue(recovery.getRecoveryLocumNurse());
		form.ccRecoveryRoomNurse().setValue(recovery.getRecoveryRoomNurse());

		form.grpConfirmPatientArrival().setValue(recovery.getConfirmPatientArrival().equals(YesNo.YES) ? grpConfirmPatientArrivalEnumeration.rdoConfirmYes : grpConfirmPatientArrivalEnumeration.rdoConfirmNo);

		form.dtimArivesInRecovery().setValue(recovery.getTimeArrivesInRecovery());
		form.dtimWardNotified().setValue(recovery.getTimeWardNotified());
		form.dtimLeavesRecovery().setValue(recovery.getTimeLeavesRecovery());

		ArrayList<?> sentTo = form.cmbSentTo().getValues();
		if (sentTo != null && recovery.getSentToIsNotNull() && !sentTo.contains(recovery.getSentTo()))
			form.cmbSentTo().newRow(recovery.getSentTo(), recovery.getSentTo().getName());
		form.cmbSentTo().setValue(recovery.getSentTo());

		// Hand Over From Recovery Nurse
		form.chkRecoveryHandoverLocum().setValue(recovery.getRecoveryHandoverLocumBool());
		form.txtRecoveryHandoverLocumNurse().setValue(recovery.getRecoveryHandoverLocumNurse());
		form.ccHandOverFromRecoveryNurse().setValue(recovery.getHandoverfromRecoveryNurse());

		// Ward Unit Nurse receiving Handover:
		form.chkWardLocum().setValue(recovery.getWardLocumBool());
		form.txtWardLocumNurse().setValue(recovery.getWardLocumNurse());
		form.ccWardUnitNurse().setValue(recovery.getWardUnitNurse());

	}

	private void clearInstanceControls()
	{
		form.chkRecoveryLocum().setValue(null);
		form.txtRecoveryLocumNurse().setValue(null);
		form.ccRecoveryRoomNurse().clear();

		form.grpConfirmPatientArrival().setValue(null);
		form.dtimArivesInRecovery().setValue(null);
		form.dtimLeavesRecovery().setValue(null);
		form.dtimWardNotified().setValue(null);
		form.cmbSentTo().setValue(null);

		form.chkRecoveryHandoverLocum().setValue(null);
		form.txtRecoveryHandoverLocumNurse().setValue(null);
		form.ccHandOverFromRecoveryNurse().setValue(null);

		form.chkWardLocum().setValue(null);
		form.ccWardUnitNurse().clear();
		form.txtWardLocumNurse().setValue(null);

	}

	private void populateSentToCombo()
	{
		LocationLiteVo locVo = null, tempLocVo = null;
		LocSiteLiteVo locSiteVo = null;
		LocationLiteVoCollection collLoc = null;

		form.cmbSentTo().clear();
		if (domain.getCurrentLocation() instanceof LocationLiteVo)
		{
			locVo = (LocationLiteVo) domain.getCurrentLocation();
		}
		else if (domain.getCurrentLocation() instanceof LocSiteLiteVo)
		{
			locSiteVo = (LocSiteLiteVo) domain.getCurrentLocation();
		}
		if (locVo != null)
		{
			tempLocVo = locVo;
		}
		else if (locSiteVo != null)
		{
			tempLocVo = domain.getLocationLiteVo(locSiteVo);
		}
		if (tempLocVo != null)
		{
			if (LocationType.HOSP.equals(tempLocVo.getType()))
				collLoc = domain.listLocationsByParentLocation(tempLocVo);
			else
				collLoc = domain.listActiveLocationsAtTheSameLevelWithLocation(tempLocVo);

		}
		if (collLoc != null)
		{
			for (int i = 0; i < collLoc.size(); i++)
			{
				form.cmbSentTo().newRow(collLoc.get(i), collLoc.get(i).getName());
			}
		}
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		Object hcpUser = domain.getHcpLiteUser();
		if (!(hcpUser instanceof HcpLiteVo))
		{
			engine.showMessage("The current user is not an HCP!");
			return;
		}

		// Check SOE on EDIT
		if (form.getLocalContext().getcurrentSurgicalAuditOpDetail()!=null && form.getLocalContext().getcurrentSurgicalAuditOpDetail().getID_SurgicalAuditOperationDetailIsNotNull() && domain.isStale(form.getLocalContext().getcurrentSurgicalAuditOpDetail()))
		{	
			form.getLocalContext().setcurrentSurgicalAuditOpDetail(domain.getSurgicalAuditOperationDetail(form.getLocalContext().getcurrentSurgicalAuditOpDetail()));
			populateScreenFromData(form.getLocalContext().getcurrentSurgicalAuditOpDetail().getRecovery());
		}
		form.getLocalContext().setselectedEvent(SurgicalAuditRecoveryEvent.EDIT);
		form.fireCustomControlValueChanged();
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		form.getLocalContext().setselectedEvent(SurgicalAuditRecoveryEvent.CANCEL);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
		{
			form.getLocalContext().setselectedEvent(SurgicalAuditRecoveryEvent.SAVE);
			form.fireCustomControlValueChanged();
		}

	}

	private boolean save()
	{
		if (form.getLocalContext().getcurrentSurgicalAuditOpDetail() == null)
		{
			engine.showMessage("A Surgical Audit Operation Detail Record should be created in Pre Op Checks Tab! ");
			return false;
		}

		SurgicalAuditOperationDetailVo surgicalAuditOpDetToSave = populateDataFromScreen((SurgicalAuditOperationDetailVo) form.getLocalContext().getcurrentSurgicalAuditOpDetail().clone());

		String[] errors = surgicalAuditOpDetToSave.validate(getUIErrors());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		// Check SOE
		if (surgicalAuditOpDetToSave.getID_SurgicalAuditOperationDetailIsNotNull() && domain.isStale(surgicalAuditOpDetToSave))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setselectedEvent(SurgicalAuditRecoveryEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;

		}
		
		try
		{
			form.getLocalContext().setcurrentSurgicalAuditOpDetail(domain.save(surgicalAuditOpDetToSave));
			/*
			if (surgicalAuditOpDetToSave.getRecovery().getID_SurgicalAuditRecovery()==null)//new
				form.getLocalContext().setcurrentSurgicalAuditOpDetail(domain.save(surgicalAuditOpDetToSave));
			else //update
				form.getLocalContext().setcurrentSurgicalAuditRecovery(domain.saveSurgicalAuditRecovery(surgicalAuditOpDetToSave.getRecovery()));
			*/
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setselectedEvent(SurgicalAuditRecoveryEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			form.getLocalContext().setselectedEvent(SurgicalAuditRecoveryEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}

		return true;
	}

	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.dtimArivesInRecovery().getValue() != null && form.dtimArivesInRecovery().getValue().isGreaterThan(new DateTime()))
		{
			errors.add("Time Patient Arrives in Recovery cannot be set in the future!");
		}
		
		if (!(form.grpConfirmPatientArrival().getValue().equals(grpConfirmPatientArrivalEnumeration.rdoConfirmYes) || form.grpConfirmPatientArrival().getValue().equals(grpConfirmPatientArrivalEnumeration.rdoConfirmNo)))
		{
			errors.add("Confirm Patient Arrival is mandatory!");
		}
		
		if (form.dtimWardNotified().getValue() != null)
		{
			if (form.dtimWardNotified().getValue().isGreaterThan(new DateTime()))
				errors.add("Time Ward/Unit Notified cannot be set in the future!");

			if (form.dtimWardNotified().getValue().isLessThan(form.dtimArivesInRecovery().getValue()))
				errors.add("Time Ward/Unit Notified cannot be less than Time Patient Arrives in Recovery!");
		}

		if (form.dtimLeavesRecovery().getValue() != null)
		{
			if (form.dtimLeavesRecovery().getValue().isGreaterThan(new DateTime()))
				errors.add("Time Patient Leaves Recovery cannot be set in the future!");

			if (form.dtimLeavesRecovery().getValue().isLessThan(form.dtimWardNotified().getValue()))
				errors.add("Time Patient Leaves Recovery cannot be less than Time Ward/Unit Notified!");
		}

		if (form.chkRecoveryLocum().getValue() && form.txtRecoveryLocumNurse().getValue() == null)
		{
			errors.add("Recovery Room Nurse is mandatory!");
		}
		else if (!form.chkRecoveryLocum().getValue() && form.ccRecoveryRoomNurse().getValue() == null)
		{
			errors.add("Recovery Room Nurse is mandatory!");
		}

		if (form.chkRecoveryHandoverLocum().getValue() && form.txtRecoveryHandoverLocumNurse().getValue() == null)
		{
			errors.add("Hand Over From Recovery Nurse is mandatory!");
		}
		else if (!form.chkRecoveryHandoverLocum().getValue() && form.ccHandOverFromRecoveryNurse().getValue() == null)
		{
			errors.add("Hand Over From Recovery Nurse is mandatory!");
		}

		if (form.chkWardLocum().getValue() && form.txtWardLocumNurse().getValue() == null)
		{
			errors.add("Ward Unit Nurse receiving handover is mandatory!");
		}
		else if (!form.chkWardLocum().getValue() && form.ccWardUnitNurse().getValue() == null)
		{
			errors.add("Ward Unit Nurse receiving handover is mandatory!");
		}

		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	
	//not used anymore
	private SurgicalAuditOperationDetailVo populateDataFromScreen(SurgicalAuditOperationDetailVo surgicalAuditOpDetail)
	{
		if (surgicalAuditOpDetail == null)
			return null;

		SurgicalAuditRecoveryVo surgAuditRecovery = populateDataFromRecoveryTab(surgicalAuditOpDetail.getRecovery());
		surgicalAuditOpDetail.setRecovery(surgAuditRecovery);

		// The current status will be modified only when saving for the first time on a tab.
		// The records will be added to history also only when saving for the first time
		
		if (surgAuditRecovery!=null && surgAuditRecovery.getID_SurgicalAuditRecovery()==null && surgicalAuditOpDetail.getCurrentStatus() != null 
			&& !SurgicalAuditOperationDetailStatus.CANCELLED_OPERATIONS.equals(surgicalAuditOpDetail.getCurrentStatus().getOperationStatus())
			&& (SurgicalAuditOperationDetailStatus.LEFT_HOLDING_BAY.equals(surgicalAuditOpDetail.getCurrentStatus().getOperationStatus())
					|| SurgicalAuditOperationDetailStatus.ENTERED_OPERATING_THEATRE.equals(surgicalAuditOpDetail.getCurrentStatus().getOperationStatus())
					|| SurgicalAuditOperationDetailStatus.LEFT_OPERATING_THEATRE.equals(surgicalAuditOpDetail.getCurrentStatus().getOperationStatus())))
		{
			MemberOfStaffLiteVo statusAuthoringUser = null;

			Object mos = domain.getMosUser();
			if (mos instanceof MemberOfStaffLiteVo)
				statusAuthoringUser = (MemberOfStaffLiteVo) mos;

			SurgicalAuditOperationDetailStatusVo tempCurrentStatus = populateStatus(ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus.HAND_OVER_FROM_RECOVERY_NURSE, new DateTime(), statusAuthoringUser);
			surgicalAuditOpDetail.setCurrentStatus(tempCurrentStatus);

			SurgicalAuditOperationDetailStatusVoCollection tempStatusHistory = surgicalAuditOpDetail.getStatusHistory();

			tempStatusHistory.add(populateStatus(ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus.PATIENT_ARRIVED_IN_RECOVERY, new DateTime(), statusAuthoringUser));
			tempStatusHistory.add(populateStatus(ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus.TIME_WARD_OR_UNIT_NOTIFIED, new DateTime(), statusAuthoringUser));
			tempStatusHistory.add(populateStatus(ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus.PATIENT_LEFT_RECOVERY, new DateTime(), statusAuthoringUser));
			tempStatusHistory.add(tempCurrentStatus);

			surgicalAuditOpDetail.setStatusHistory(tempStatusHistory);
		}

		return surgicalAuditOpDetail;
	}

	private SurgicalAuditOperationDetailStatusVo populateStatus(SurgicalAuditOperationDetailStatus status, DateTime dateTime, MemberOfStaffLiteVo statusAuthoringUser)
	{
		SurgicalAuditOperationDetailStatusVo statusRecord = new SurgicalAuditOperationDetailStatusVo();

		statusRecord.setOperationStatus(status);
		statusRecord.setStatusDateTime(dateTime);
		statusRecord.setAuthoringUser(statusAuthoringUser);

		return statusRecord;
	}

	private SurgicalAuditRecoveryVo populateDataFromRecoveryTab(SurgicalAuditRecoveryVo surgAuditRecovery)
	{
		if (surgAuditRecovery == null)
		{
			surgAuditRecovery = new SurgicalAuditRecoveryVo();
		}

		if (surgAuditRecovery.getPatient() == null)
		{
			surgAuditRecovery.setPatient(form.getGlobalContext().Core.getPatientShort());
		}

		if (surgAuditRecovery.getCareContext() == null)
		{
			surgAuditRecovery.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}

		if (surgAuditRecovery.getAuthoringInformation() == null)
		{
			AuthoringInformationVo tempAuthoringInfo = surgAuditRecovery.getAuthoringInformation();
			tempAuthoringInfo = new AuthoringInformationVo();

			Object hcp = domain.getHcpLiteUser();

			if (hcp instanceof HcpLiteVo)
			{
				tempAuthoringInfo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
			}

			tempAuthoringInfo.setAuthoringDateTime(new DateTime());
			surgAuditRecovery.setAuthoringInformation(tempAuthoringInfo);
		}

		// Recovery Room Nurse
		surgAuditRecovery.setRecoveryLocumBool(form.chkRecoveryLocum().getValue());
		surgAuditRecovery.setRecoveryLocumNurse(form.txtRecoveryLocumNurse().getValue());
		surgAuditRecovery.setRecoveryRoomNurse((NurseVo) form.ccRecoveryRoomNurse().getValue());

		surgAuditRecovery.setConfirmPatientArrival(form.grpConfirmPatientArrival().getValue().equals(grpConfirmPatientArrivalEnumeration.rdoConfirmYes) ? YesNo.YES : YesNo.NO);
		surgAuditRecovery.setTimeArrivesInRecovery(form.dtimArivesInRecovery().getValue());
		surgAuditRecovery.setTimeWardNotified(form.dtimWardNotified().getValue());
		surgAuditRecovery.setTimeLeavesRecovery(form.dtimLeavesRecovery().getValue());
		surgAuditRecovery.setSentTo(form.cmbSentTo().getValue());

		// Hand Over From Recovery Nurse
		surgAuditRecovery.setRecoveryHandoverLocumBool(form.chkRecoveryHandoverLocum().getValue());
		surgAuditRecovery.setRecoveryHandoverLocumNurse(form.txtRecoveryHandoverLocumNurse().getValue());
		surgAuditRecovery.setHandoverfromRecoveryNurse((NurseVo) form.ccHandOverFromRecoveryNurse().getValue());

		// Ward Unit Nurse receiving Handover
		surgAuditRecovery.setWardLocumBool(form.chkWardLocum().getValue());
		surgAuditRecovery.setWardLocumNurse(form.txtWardLocumNurse().getValue());
		surgAuditRecovery.setWardUnitNurse((NurseVo) form.ccWardUnitNurse().getValue());

		return surgAuditRecovery;
	}

	@Override
	protected void onChkWardLocumValueChanged() throws PresentationLogicException
	{
		if (form.chkWardLocum().getValue())
			form.ccWardUnitNurse().setValue(null);
		else
			form.txtWardLocumNurse().setValue(null);
		updateControlsState();
	}

	@Override
	protected void onChkRecoveryHandoverLocumValueChanged() throws PresentationLogicException
	{
		if (form.chkRecoveryHandoverLocum().getValue())
			form.ccHandOverFromRecoveryNurse().setValue(null);
		else
			form.txtRecoveryHandoverLocumNurse().setValue(null);
		updateControlsState();
	}

	@Override
	protected void onChkRecoveryLocumValueChanged() throws PresentationLogicException
	{
		if (form.chkRecoveryLocum().getValue())
			form.ccRecoveryRoomNurse().setValue(null);
		else
			form.txtRecoveryLocumNurse().setValue(null);
		updateControlsState();
	}

	public void setReadOnly(Boolean argument)
	{
		form.getLocalContext().setisReadOnly(argument);
		updateControlsState();
	}
}
