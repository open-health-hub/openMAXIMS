//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3314.22227)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.edischargeallergiesetccomponent;

import ims.clinical.forms.edischargeallergiesetccomponent.GenForm.grdAlertsRow;
import ims.clinical.forms.edischargeallergiesetccomponent.GenForm.grdAllergiesRow;
import ims.clinical.vo.lookups.CodingItemType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AllergenTypeReactionsCollection;
import ims.core.vo.AllergenVo;
import ims.core.vo.Hcp;
import ims.core.vo.IncludeAlertInDischargeReportsVo;
import ims.core.vo.IncludeAlertInDischargeReportsVoCollection;
import ims.core.vo.IncludeAllergyInDischargeReportsVo;
import ims.core.vo.IncludeAllergyInDischargeReportsVoCollection;
import ims.core.vo.PatientAlertEDischargeVo;
import ims.core.vo.PatientAlertEDischargeVoCollection;
import ims.core.vo.PatientAllergyEDischargeVo;
import ims.core.vo.PatientAllergyEDischargeVoCollection;
import ims.core.vo.PatientAllergyReactionVo;
import ims.core.vo.PatientAllergyReactionVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.AlertType;
import ims.core.vo.lookups.AllergenType;
import ims.core.vo.lookups.LookupHelper;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.PartialDate;
import ims.vo.LookupInstVo;
import ims.vo.interfaces.IClinicalCodingValue;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
	}
	
	private void initializeComponent() 
	{
		if(form.getGlobalContext().Core.getPatientShort() == null) //to safeguard if this page is made available elsewhere
		{
			engine.showMessage("No Patient ID found");
			return;
		}	
		form.getLocalContext().setisReadonly(false);

		form.getLocalContext().setbInitialised(null);
		initializeAllergyContextMenus();
		initializeAllergyCustomControl();
		initializeAlertContextMenus();
	}

	private void initializeAlertContextMenus()
	{
		form.getContextMenus().Clinical.hideAllEdischargeAlertsEtcMenuItems();		//wdev-13945
		//form.getContextMenus().hideAllLIPMenuItems();
		//form.getContextMenus().getLIPNewItem().setText("New Alert");
		//form.getContextMenus().getLIPUpdateItem().setText("Edit Alert");
	}

	private void clearAllergyDetailsPanel()
	{
		form.ctnAllergy().ccAllergyTerm().clear();
		form.ctnAllergy().cmbAllergyType().setValue(null);
		form.ctnAllergy().cmbAllergyReaction().setValue(null);
		form.ctnAllergy().txtAllergyEffect().setValue(null);
		form.ctnAllergy().cmbAllergySource().setValue(null);
		form.ctnAllergy().pdtAllergyDateIdentified().setValue(null);
		form.ctnAllergy().ccAllergyAuthor().setValue(null);
	//	form.ctnAllergy().setCollapsed(true);
	}
	
	void clearAlertControls()
	{
		form.ctnAlert().txtAlertComment().setValue("");
		form.ctnAlert().cmbAlertSource().setValue(null);
		form.ctnAlert().pdtAlertDateIdentified().setValue(null);
		form.ctnAlert().ccAlertAuthor().setValue(null);
		form.ctnAlert().cmbAlertCategory().setValue(null);
		form.ctnAlert().cmbAlertAlert().setValue(null);
		form.ctnAlert().cmbAlertAlert().clear();
	}


	private void openAlert()
	{
		form.setMode(FormMode.VIEW);	
		
		populateAlertGrid();
		
		loadAlertCategories();
		
		clearAlertControls();
		
		// select record in the grid if the local context value is not null and populate details panel
		if (form.getLocalContext().getAlertRecordIsNotNull())
		{
			form.grdAlerts().setValue(form.getLocalContext().getAlertRecord());
			form.getLocalContext().setAlertRecord(form.grdAlerts().getValue()); // updates for concurrent use
			
			if (form.getLocalContext().getAlertRecordIsNotNull())
				populateAlertScreenFromData(form.grdAlerts().getValue());
		}		

		form.getLocalContext().setbEditingAlert(false);
	}

	private void loadAlertCategories() 
	{		
		TreeNode[] coll = LookupHelper.getAlertType(domain.getLookupService()).getRootNodes();
				
		if(coll != null)
		{
			for(int i=0;i<coll.length;i++)
			{
				AlertType item = (AlertType)coll[i];
				if(item.isActive())
					form.ctnAlert().cmbAlertCategory().newRow(item, item.getText());
			}
		}
	}

	private void newAlert() 
	{
		form.ctnAlert().cmbAlertSource().setFocus();
		form.setMode(FormMode.EDIT); 
		
		clearAlertControls();

		form.ctnAlert().ccAlertAuthor().initializeComponent();
		form.ctnAlert().setccAlertAuthorEnabled(true);
		form.ctnAlert().ccAlertAuthor().setIsRequiredPropertyToControls(Boolean.TRUE);

		form.getLocalContext().setAlertRecord(new PatientAlertEDischargeVo());
	//	form.ctnAlert().setCollapsed(false);
		
		manageEnteringAlertDetails();
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}

	private void manageEnteringAlertDetails() 
	{
		form.grdAlerts().setEnabled(false);
		form.grdAllergies().setEnabled(false);
		
		enableAlertDetailsControls(true, true);
		enableAllergyDetailControls(false, true);
		form.grdAllergies().setValue(null);
		//form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().Clinical.hideAllEdischargeAllergiesEtcMenuItems();	//wdev-13945
		//form.getContextMenus().hideAllLIPMenuItems();
		form.getContextMenus().Clinical.hideAllEdischargeAlertsEtcMenuItems();  //wdev-13945

		form.getLocalContext().setbEditingAlert(true);
	}

	private void populateAlertGrid()
	{
		form.grdAlerts().getRows().clear();		
		
		boolean hasActiveAllerts = false;
		
		PatientAlertEDischargeVoCollection voColl = new PatientAlertEDischargeVoCollection();
		PatientAlertEDischargeVoCollection voCollection = domain.listPatientAlerts(form.getGlobalContext().Core.getPatientShort(), Boolean.FALSE);
		
		if(voCollection != null 
			&& voCollection.size() > 0)
		{
			hasActiveAllerts = true;
			for (int i = 0; i < voCollection.size(); i++) 
			{
				if(voCollection.get(i).getIsCurrentlyActiveAlert())
					voColl.add(voCollection.get(i));
			}
		}	
		
		form.grdAlerts().getRows().clear();
		form.grdAlerts().setValue(null); //used to clear selection in grid bug					
		
		if(voColl != null)
		{			
			grdAlertsRow row = null;
			for(int i=0;i<voColl.size();i++)
			{
				row = form.grdAlerts().getRows().newRow();
				row.setValue(voColl.get(i));

				String tooltipStr = createAlertRowTooltip(voColl.get(i));
				
				if(voColl.get(i).getAlertType() != null)
				{
					row.setColAlert(voColl.get(i).getAlertType().toString());
					if(voColl.get(i).getAlertType().getParent() != null)
					{
						row.setColCategory(voColl.get(i).getAlertType().getParent().toString());
					}
				}
				row.setTooltipForColAlert(tooltipStr);
				row.setTooltipForColCategory(tooltipStr);
				
				if(voColl.get(i).getSourceofInformation() != null)
				{
					row.setColSource(voColl.get(i).getSourceofInformation().toString());
				}
				row.setTooltipForColSource(tooltipStr);

				if(voColl.get(i).getSysInfo() != null && voColl.get(i).getSysInfo().getCreationDateTime()!= null && voColl.get(i).getSysInfo().getCreationDateTime().getDate() != null)
				{
					row.setColDate(voColl.get(i).getSysInfo().getCreationDateTime().getDate().toString(DateFormat.STANDARD));
				}
				row.setTooltipForColDate(tooltipStr);

				row.setColInclude(findIfIncludeSetForThisCareContext(voColl.get(i).getIncludeAlertInDischargeReports()) ? Boolean.TRUE : Boolean.FALSE);

				if (voColl.get(i).getSysInfoIsNotNull() && voColl.get(i).getSysInfo().getLastupdateUser() != null)
				{
					row.setColAudit(form.getImages().Core.EditDisabled);
					row.setTooltipForColAudit("This record has been updated.");
				}

				if(voColl.get(i).getIsCurrentlyActiveAlert().booleanValue() == true)
				{
					row.setColActive(form.getImages().Core.AnswerBox_Yes);
					hasActiveAllerts = true;
					row.setTooltipForColActive(tooltipStr);
				}
				else
				{
					row.setColActive(form.getImages().Core.AnswerBox_No);
					row.setTooltipForColActive(createInactivateAlertTooltip(voColl.get(i)));
					row.setBackColor(Color.LightGray);
				}

			}
		}
		
		setToolBarAlerts(hasActiveAllerts);
		form.getLocalContext().setbActiveAlerts(new Boolean(hasActiveAllerts));
		PatientShort patShort = form.getGlobalContext().Core.getPatientShort();
		patShort.setHasAlerts(new Boolean(hasActiveAllerts));
		form.getGlobalContext().Core.setPatientShort(patShort);
		
		form.grdAlerts().setValue(form.getLocalContext().getAlertRecord());
		populateAlertScreenFromData(form.grdAlerts().getValue());
		
		//form.getContextMenus().getLIPNewItem().setVisible(true);
		form.getContextMenus().Clinical.getEdischargeAlertsEtcNewItem().setVisible(true); //wdev-13945
		
		setToolBarAlerts(form.getLocalContext().getbActiveAlertsIsNotNull() ? form.getLocalContext().getbActiveAlerts() : false);
	}

	private boolean findIfIncludeSetForThisCareContext(IncludeAlertInDischargeReportsVoCollection includeAlertInDischargeReports) 
	{
		for(int i = 0 ; includeAlertInDischargeReports != null && i < includeAlertInDischargeReports.size() ; i++)
		{
			if (includeAlertInDischargeReports.get(i).getCareContextIsNotNull()
				&& includeAlertInDischargeReports.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext())
				&& includeAlertInDischargeReports.get(i).getIncludeInReport())
				return true;
		}
		return false;
	}

	private String createAlertRowTooltip(PatientAlertEDischargeVo alert)
	{
		StringBuffer sb = new StringBuffer();
		sb.append("<b>Comment : </b>");
		sb.append(alert.getCommentsIsNotNull() ? alert.getComments().toString() : "");
		sb.append("<br>");
		sb.append("<b>Date Identified : </b>");
		sb.append(alert.getDateIdentifiedIsNotNull() ? alert.getDateIdentified().toString() : "");
		sb.append("<br>");
		sb.append("<b>Authoring Info : </b>");
		sb.append(alert.getAuthoringInformationIsNotNull() ? alert.getAuthoringInformation().toString(" - ") : "");
		sb.append("<br>");

		return sb.toString();
	}


	private void handleExceptionThrown() 
	{
		clearAlertControls();
		populateAlertGrid();
		form.setMode(FormMode.VIEW);
	}

	private void setToolBarAlerts(boolean bAlertsExist)
	{
		if(bAlertsExist)
		{
			if(form.getGlobalContext().Core.getPatientShort().getHasAlerts() != null 
				&& form.getGlobalContext().Core.getPatientShort().getHasAlerts().booleanValue() == true)
				return;
	
			engine.clearAlertsByType(ims.alerts.PatientAlert.class);
			engine.addAlert(new ims.alerts.PatientAlert("The patient has alerts."));					
		}
		else
		{
			engine.clearAlertsByType(ims.alerts.PatientAlert.class);
			form.getGlobalContext().Core.getPatientShort().setHasAlerts(Boolean.FALSE);
		}
	}


	private String createInactivateAlertTooltip(PatientAlertEDischargeVo alert)
	{
		StringBuffer sb = new StringBuffer();
		sb.append("<b>Inactive Comment : </b>");
		sb.append(alert.getInactivationCommentsIsNotNull() ? alert.getInactivationComments().toString() : "");
		sb.append("<br>");
		sb.append("<b>Inactivated Info : </b>");
		sb.append(alert.getInactivationAuthoringInfoIsNotNull() ? alert.getInactivationAuthoringInfo().toString(" - ") : "");
		sb.append("<br>");

		return sb.toString();
	}


	private void openAllergy() 
	{
		clearAllergyDetailsPanel();
		
		boolean hasAllergies = false; 
		PatientAllergyEDischargeVoCollection voCollPatientAllergy = domain.listPatientAllergies(form.getGlobalContext().Core.getPatientShort(), Boolean.FALSE);
		PatientAllergyEDischargeVoCollection voColl = new PatientAllergyEDischargeVoCollection();		
		
		if(voCollPatientAllergy != null
				&& voCollPatientAllergy.size() > 0)
		{
			hasAllergies = true;
		//	if (form.groupFilter().getValue().equals(GenForm.groupFilterEnumeration.rdoActive))
		//	{
				for (int i = 0; i < voCollPatientAllergy.size(); i++) 
				{
					if (voCollPatientAllergy.get(i) != null)
						if (voCollPatientAllergy.get(i).getIsCurrentlyActiveAllergyIsNotNull())
							if(voCollPatientAllergy.get(i).getIsCurrentlyActiveAllergy())
							{
								voColl.add(voCollPatientAllergy.get(i));
							}
				}
		//	}
		//	else
		//	{
		//		voColl = voCollPatientAllergy;
		//	}
		}			
				
		setToolBarAllergies(hasAllergies);		
		// refresh the local and global contexts due to whether the patient has active allergies or not
		form.getLocalContext().setbActiveAllergies(new Boolean(hasAllergies));
		
		populateAllergyListControl(voColl);				
	
		// select record in the grid if the local context value is not null and populate details panel
		if (form.getLocalContext().getVoAllergyIsNotNull())
		{
			form.grdAllergies().setValue(form.getLocalContext().getVoAllergy());
			form.getLocalContext().setVoAllergy(form.grdAllergies().getValue()); // updates for concurrent use
			
			if (form.getLocalContext().getVoAllergyIsNotNull())
				populateAllergyDetailsPanel(form.grdAllergies().getValue());
		}		
		
		form.getLocalContext().setbEditingAllergy(false);
		form.setMode(FormMode.VIEW);
	}

	private void clearAllergyGrid()
	{
		form.grdAllergies().getRows().clear();
		form.grdAllergies().setValue(null);
	}

	private void populateAllergyListControl(PatientAllergyEDischargeVoCollection voCollPatientAllergy)
	{
		clearAllergyDetailsPanel();
		clearAllergyGrid();
				
		if (voCollPatientAllergy != null)
		{	
			PatientAllergyEDischargeVo voPatientAllergy = null;
			grdAllergiesRow row = null;
			
			for (int i=0; i<voCollPatientAllergy.size(); i++)
			{
				voPatientAllergy = voCollPatientAllergy.get(i);
				row = form.grdAllergies().getRows().newRow();
				populateAllergyRow(voPatientAllergy, row);
			}
		}
	}
	

	private void populateAllergyRow(PatientAllergyEDischargeVo voPatientAllergy, grdAllergiesRow row) 
	{
		String tooltipStr = createAllergyRowTooltip(voPatientAllergy);

		row.setColAllergenDes(voPatientAllergy.getAllergenDescription());
		row.setTooltipForColAllergenDes(tooltipStr);
		
		if (voPatientAllergy.getAllergenReactionsIsNotNull() && voPatientAllergy.getAllergenReactions().size() > 0)
			row.setColReaction(voPatientAllergy.getAllergenReactions().get(0).getReaction().toString());
		row.setTooltipForColReaction(tooltipStr);
		
		if (voPatientAllergy.getSourceofInformationIsNotNull())
			row.setColSource(voPatientAllergy.getSourceofInformation().getText());
		
		row.setTooltipForColSource(tooltipStr);
		
		if (voPatientAllergy.getIsCurrentlyActiveAllergyIsNotNull())
		{	
			if (voPatientAllergy.getIsCurrentlyActiveAllergy().equals(Boolean.TRUE))
			{
				row.setColIsActive(form.getImages().Core.AnswerBox_Yes);
				row.setTooltipForColIsActive(tooltipStr);
			}
			else
			{
				row.setColIsActive(form.getImages().Core.AnswerBox_No);
				row.setTooltipForColIsActive(createInactivateAllergyTooltip(voPatientAllergy));
				row.setBackColor(Color.LightGray);
			}
		}
		
		if (voPatientAllergy.getSysInfo().getCreationDateTime() != null)
			row.setColDate(voPatientAllergy.getSysInfo().getCreationDateTime().getDate().toString());	

		row.setColInclude(findIfIncludeSetForThisCareContext(voPatientAllergy.getIncludeAllergyInDischargeReports()) ? Boolean.TRUE : Boolean.FALSE);
		
		row.setTooltipForColDate(tooltipStr);
		
		if (voPatientAllergy.getSysInfoIsNotNull() && voPatientAllergy.getSysInfo().getLastupdateUser() != null)
		{
			row.setColAudit(form.getImages().Core.EditDisabled);
			row.setTooltipForColAudit("This record had been updated.");
		}
		row.setValue(voPatientAllergy);
	}

	private boolean findIfIncludeSetForThisCareContext(IncludeAllergyInDischargeReportsVoCollection collection) 
	{
		for(int i = 0 ; collection != null && i < collection.size() ; i++)
		{
			if (collection.get(i).getCareContextIsNotNull()
				&& collection.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext())
				&& collection.get(i).getIncludeInReport())
				return true;
		}
		return false;
	}

	private void newAllergy()
	{
		clearAllergyDetailsPanel();
		form.getLocalContext().setVoAllergy(null);	
		form.grdAllergies().setValue(null);
		setAllergyDefaultValues();
		form.setMode(FormMode.EDIT);
		
		clearAllergyDetailsPanel();

		form.ctnAllergy().ccAllergyAuthor().initializeComponent();
		form.ctnAllergy().setccAllergyAuthorEnabled(true);
	//	form.ctnAllergy().setCollapsed(false);
		form.ctnAllergy().ccAllergyTerm().setFocus();

		updateAllergiesControlsState();
		manageEnteringAlleryDetails();
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}
	
	private void manageEnteringAlleryDetails() 
	{
		form.grdAlerts().setEnabled(false);
		form.grdAllergies().setEnabled(false);
		
		enableAllergyDetailControls(true, true);
		enableAlertDetailsControls(false, false);

		form.grdAlerts().setValue(null);
		//form.getContextMenus().hideAllLIPMenuItems();//Alert menu options
		form.getContextMenus().Clinical.hideAllEdischargeAlertsEtcMenuItems(); //wdev-13945 //Alert menu options

		//form.getContextMenus().hideAllGenericGridMenuItems();//Allergy menu options
		form.getContextMenus().Clinical.hideAllEdischargeAllergiesEtcMenuItems();	//wdev-13945 //Allergy menu options
		form.getLocalContext().setbEditingAllergy(true);
	}

	private void editAllergy()
	{
		form.setMode(FormMode.EDIT);
		
		// these fields are not to be updated by the user
		enableAllergyDetailControls(false, true);
		form.ctnAllergy().setccAllergyAuthorEnabled(false);
		form.ctnAllergy().ccAllergyTerm().setEnabled(false);
		
		form.ctnAllergy().setccAllergyTermEnabled(false);

		manageEnteringAlleryDetails();
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}

	private void updateAllergiesControlsState() 
	{
		form.ctnAllergy().ccAllergyTerm().setParentEditing(new Boolean(form.getMode().equals(FormMode.EDIT)));
		
		updateContextMenus();
		
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.ctnAllergy().setccAllergyTermEnabled(true);
			form.ctnAllergy().cmbAllergyType().setEnabled(true);
			form.ctnAllergy().cmbAllergyReaction().setEnabled(true);
		}
		
	//	form.ctnAllergy().setCollapsed(!(form.grdAllergies().getSelectedRowIndex() >= 0));
	}


	private void setToolBarAllergies(boolean bAlertsExist)
	{
		engine.clearAlertsByType(ims.alerts.PatientAllergy.class); 
		if(bAlertsExist)
		{
			engine.addAlert(new ims.alerts.PatientAllergy("The patient has allergies."));
		}
 	}	

	private void setAllergyDefaultValues()
	{
		if(ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue())
		{
			form.ctnAllergy().ccAllergyTerm().setCodingItemType(CodingItemType.ALLERGY);
			form.ctnAllergy().ccAllergyTerm().setHotlist(new Boolean(false));
			form.ctnAllergy().ccAllergyTerm().setParentEditing(true);
			form.ctnAllergy().ccAllergyTerm().search("%");
			form.ctnAllergy().ccAllergyTerm().clear();
		}

		Hcp voHcp = (Hcp) domain.getHcpUser();
		if (voHcp != null)
		{
			form.ctnAllergy().ccAllergyAuthor().initializeComponent();
		}
	}

	private String[] validateAlertUIRules() 
	{
		List<String> errors = new ArrayList<String>();
		PartialDate dateIdentified = form.ctnAlert().pdtAlertDateIdentified().getValue();
		
		if(dateIdentified != null)
		{
			if(dateIdentified.isGreaterThan(new Date()))
			{
				errors.add("'Date Identified' can not be in the future");				
			}
			
			PartialDate pdob = form.getGlobalContext().Core.getPatientShort().getDob();			
			if(pdob != null)
			{
				PartialDate dateToCompare = new PartialDate(dateIdentified.getYear(), dateIdentified.getMonth() == null ? pdob.getMonth() : dateIdentified.getMonth(), dateIdentified.getDay() == null ? pdob.getDay() : dateIdentified.getDay());
				if (dateToCompare.isLessThan(pdob))
					errors.add("'Date Identified' cannot be previous to DOB");									
			}
		}				
		
		String[] searchErrors = new String[errors.size()];
		errors.toArray(searchErrors);
		return searchErrors;		
	}

	private boolean saveAlert(PatientAlertEDischargeVo voPatientAlert)
	{		
		String[] errors = voPatientAlert.validate(validateAlertUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			domain.savePatientAlert(voPatientAlert);
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			//handleExceptionThrown();
			openAlert();
			openAllergy();					//wdev-11558
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			handleExceptionThrown();
			return false;
		}
		
		return true;
	}
	
	private boolean saveAllergy(PatientAllergyEDischargeVo voPatientAllergy)
	{		
		//-----
		String[] errors = null;	
		PartialDate diagnosedate = form.ctnAllergy().pdtAllergyDateIdentified().getValue();
		PartialDate dobPatient = form.getGlobalContext().Core.getPatientShort().getDob();
		if(diagnosedate != null && dobPatient != null)
		{
			if(diagnosedate.getDay() == null && diagnosedate.getMonth()==null )
			{
				diagnosedate = new PartialDate(diagnosedate.getYear() != null ? diagnosedate.getYear() : new Integer(2000), diagnosedate.getMonth() != null ? diagnosedate.getMonth() : new Integer(1), diagnosedate.getDay() != null ? diagnosedate.getDay() : new Integer(1));
				//form.ctnAllergy().pdtAllergyDateIdentified().setValue(diagnosedate);
			}
			else if(diagnosedate.getDay() == null)
			{
				diagnosedate = new PartialDate(diagnosedate.getYear() != null ? diagnosedate.getYear() : new Integer(2000), diagnosedate.getMonth() != null ? diagnosedate.getMonth() : new Integer(1), diagnosedate.getDay() != null ? diagnosedate.getDay() : new Integer(1));
				//form.ctnAllergy().pdtAllergyDateIdentified().setValue(diagnosedate);
				
				
			}
			if( diagnosedate.isLessThan(dobPatient))
			{
				errors = new String[]{" Date Identified entered is before Patient's DOB"};	
			}
		}
		
		//-----
		errors = voPatientAllergy.validate(errors);
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return false;
		}
		
		try
		{
			voPatientAllergy = domain.savePatientAllergy(voPatientAllergy);
			form.getLocalContext().setVoAllergy(voPatientAllergy);
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			openAllergy();
			openAlert();									////wdev-11558
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			openAllergy();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}

	/**
	 * Takes a given PatientAllergy vo and updates it with data from the details panel. 
	 * 
	 * @param PatientAllergy
	 * @return PatientAllergy
	 */
	private PatientAllergyEDischargeVo populateAllergyInstanceData(PatientAllergyEDischargeVo voPatientAllergy)
	{
		if(voPatientAllergy == null)
		{
			voPatientAllergy = new PatientAllergyEDischargeVo();
			voPatientAllergy.setIsCurrentlyActiveAllergy(Boolean.TRUE);
		}
		
		voPatientAllergy.setWhenIdentified(form.ctnAllergy().pdtAllergyDateIdentified().getValue());
		voPatientAllergy.setSourceofInformation(form.ctnAllergy().cmbAllergySource().getValue());			
		voPatientAllergy.setComments(form.ctnAllergy().txtAllergyEffect().getValue());
		voPatientAllergy.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		IClinicalCodingValue voResult = form.ctnAllergy().ccAllergyTerm().getValue();
		if (voResult != null)
		{
			if (voResult.getIClinicalCodingValue() instanceof AllergenVo)
			{
				voPatientAllergy.setAllergen((AllergenVo) voResult.getIClinicalCodingValue());
				voPatientAllergy.setAllergenDescription(voResult.getIClinicalCodingValueDescription());
			}
			else
			{
				throw new CodingRuntimeException("AllergenVo expected from component");
			}
		}
		else // WDEV-3126 - this value were not being cleared if removed on edit. 
		{
			voPatientAllergy.setAllergenDescription(null);
		}		
		
		voPatientAllergy.setAllergenType(form.ctnAllergy().cmbAllergyType().getValue());
		
		if (voPatientAllergy.getAllergenTypeIsNotNull())
		{
			PatientAllergyReactionVoCollection voPatientAllergyReactionColl = new PatientAllergyReactionVoCollection();
			if(form.ctnAllergy().cmbAllergyReaction().getValue() != null)
			{
				PatientAllergyReactionVo voPatientReaction = new PatientAllergyReactionVo();
				voPatientReaction.setReaction(form.ctnAllergy().cmbAllergyReaction().getValue());
				voPatientAllergyReactionColl.add(voPatientReaction);
				voPatientAllergy.setAllergenReactions(voPatientAllergyReactionColl);
			}
			else
				voPatientAllergy.setAllergenReactions(null);
		}
		else
			voPatientAllergy.setAllergenReactions(null);
		
		voPatientAllergy.setAuthoringInformation(form.ctnAllergy().ccAllergyAuthor().getValue());
		
		if (voPatientAllergy.getID_PatientAllergy() ==null)
			setAllergyIncludeInfo(voPatientAllergy, true);
		
		return voPatientAllergy;
	}


	private void allergySelectionChanged() 
	{
		form.getLocalContext().setVoAllergy(domain.getpatientAllergy(form.grdAllergies().getValue().getID_PatientAllergy()));  
		form.grdAllergies().setValue(form.getLocalContext().getVoAllergy());
	
		form.grdAllergies().getSelectedRow().setValue(form.getLocalContext().getVoAllergy());
		populateAllergyDetailsPanel(form.getLocalContext().getVoAllergy());
		updateContextMenus();
	}

	protected void updateContextMenus()
	{
		//form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().Clinical.hideAllEdischargeAllergiesEtcMenuItems();	//wdev-13945
		//form.getContextMenus().hideAllLIPMenuItems();
		form.getContextMenus().Clinical.hideAllEdischargeAlertsEtcMenuItems(); //wdev-13945

		if (form.getLocalContext().getisReadonlyIsNotNull()
			&& form.getLocalContext().getisReadonly())
			return;
		if(form.getLocalContext().getCurrentAlertIncluded() != null)
		if (form.getLocalContext().getCurrentAlertIncluded().booleanValue()
			|| form.getLocalContext().getCurrentAllergyIncluded().booleanValue())
			return;

		if (form.getMode().equals(FormMode.VIEW))
		{
			//form.getContextMenus().getGenericGridAddItem().setVisible(true);
			form.getContextMenus().Clinical.getEdischargeAllergiesEtcNewItem().setVisible(true);	//wdev-13945
			
			boolean activeRecordSelected = form.grdAllergies().getSelectedRowIndex() >= 0
				&& form.getLocalContext().getVoAllergyIsNotNull() 
				&& form.getLocalContext().getVoAllergy().getIsCurrentlyActiveAllergyIsNotNull() 
				&& form.getLocalContext().getVoAllergy().getIsCurrentlyActiveAllergy().booleanValue();
			
			//form.getContextMenus().getGenericGridUpdateItem().setVisible(activeRecordSelected);
			form.getContextMenus().Clinical.getEdischargeAllergiesEtcEditItem().setVisible(activeRecordSelected); //wdev-13945

			//Alert
			form.getContextMenus().Clinical.getEdischargeAlertsEtcNewItem().setVisible(true); //wdev-13945
			//form.getContextMenus().getLIPNewItem().setVisible(true);
			
			boolean activeAlertRecordSelected = form.grdAlerts().getSelectedRowIndex() >= 0
				&& form.getLocalContext().getAlertRecordIsNotNull() 
				&& form.getLocalContext().getAlertRecord().getIsCurrentlyActiveAlertIsNotNull() 
				&& form.getLocalContext().getAlertRecord().getIsCurrentlyActiveAlert().booleanValue();

			form.getContextMenus().Clinical.getEdischargeAlertsEtcEditItem().setVisible(activeAlertRecordSelected); //wdev-13945
			//form.getContextMenus().getLIPUpdateItem().setVisible(activeAlertRecordSelected);
		}


	}

	private void populateAllergyDetailsPanel(PatientAllergyEDischargeVo allergy)
	{
		clearAllergyDetailsPanel();
		
		form.ctnAllergy().ccAllergyTerm().setValue(allergy);
		form.ctnAllergy().cmbAllergyType().setValue(allergy.getAllergenType());			
		populateAllergyReactionCmb();
		
		//If a reaction that has been saved is now marked as inactive in the Admin section it will still display 
		if (allergy.getAllergenReactionsIsNotNull())
		{	
			if (allergy.getAllergenReactions().size() > 0)
			{
				form.ctnAllergy().cmbAllergyReaction().newRow(allergy.getAllergenReactions().get(0).getReaction(), allergy.getAllergenReactions().get(0).getReaction().getText());
				form.ctnAllergy().cmbAllergyReaction().setValue(allergy.getAllergenReactions().get(0).getReaction());
			}
		}

		if(allergy.getAuthoringInformationIsNotNull())
			form.ctnAllergy().ccAllergyAuthor().setValue(allergy.getAuthoringInformation());
		
		form.ctnAllergy().txtAllergyEffect().setValue(allergy.getComments());
		form.ctnAllergy().cmbAllergySource().setValue(allergy.getSourceofInformation());
		form.ctnAllergy().pdtAllergyDateIdentified().setValue(allergy.getWhenIdentified());
	}
	
	private void populateAllergyReactionCmb()
	{
		form.ctnAllergy().cmbAllergyReaction().clear();
		if (form.ctnAllergy().cmbAllergyType().getValue() == null)
			return;
			
		AllergenTypeReactionsCollection voColl = domain.listAllergenTypeReactions(form.ctnAllergy().cmbAllergyType().getValue());
		
		if (voColl == null)
			return;
		
		for (int i=0; i<voColl.size(); i++)
		{
			if (voColl.get(i).getIsActive().booleanValue() == true)
				form.ctnAllergy().cmbAllergyReaction().newRow(voColl.get(i).getReaction(), voColl.get(i).getReaction().getText());
		}
	}

	private void enableAllergyDetailControls(boolean enable, boolean bEditingAllergy)
	{
		form.ctnAllergy().cmbAllergyType().setEnabled(enable);
		form.ctnAllergy().cmbAllergyReaction().setEnabled(enable);
		form.ctnAllergy().txtAllergyEffect().setEnabled(enable);
		form.ctnAllergy().cmbAllergySource().setEnabled(enable);
		form.ctnAllergy().pdtAllergyDateIdentified().setEnabled(enable);
	//	if (bEditingAllergy)
	//		form.ctnAllergy().setCollapsed(false);
	//	else
	//		form.ctnAllergy().setCollapsed(true);
	}

	private String createAllergyRowTooltip(PatientAllergyEDischargeVo voPatientAllergy)
	{
		StringBuffer sb = new StringBuffer();
		sb.append("<b>Comment : </b>");
		sb.append(voPatientAllergy.getCommentsIsNotNull() ? voPatientAllergy.getComments().toString() : "");
		sb.append("<br>");
		sb.append("<b>Date Identified : </b>");
		sb.append(voPatientAllergy.getWhenIdentifiedIsNotNull() ? voPatientAllergy.getWhenIdentified().toString() : "");
		sb.append("<br>");
		sb.append("<b>Authoring Info : </b>");
		sb.append(voPatientAllergy.getAuthoringInformationIsNotNull() ? voPatientAllergy.getAuthoringInformation().toString(" - ") : "");
		sb.append("<br>");

		return sb.toString();
	}

	private String createInactivateAllergyTooltip(PatientAllergyEDischargeVo voPatientAllergy)
	{
		StringBuffer sb = new StringBuffer();
//		sb.append("<b>Inactive Comment : </b>");
//		sb.append(voPatientAllergy.getInactivationCommentsIsNotNull() ? voPatientAllergy.getInactivationComments().toString() : "");
//		sb.append("<br>");
		sb.append("<b>Inactivated Info : </b>");
		sb.append(voPatientAllergy.getInactivationAuthoringInfoIsNotNull() ? voPatientAllergy.getInactivationAuthoringInfo().toString(" - ") : "");
		sb.append("<br>");

		return sb.toString();
	}
	

	protected void initializeAllergyContextMenus()
	{
		form.getContextMenus().Clinical.hideAllEdischargeAllergiesEtcMenuItems(); //wdev-13945
		//form.getContextMenus().hideAllGenericGridMenuItems();
		//form.getContextMenus().getGenericGridAddItem().setText("New Allergy");
		//form.getContextMenus().getGenericGridUpdateItem().setText("Edit Allergy");
	}

	private void initializeAllergyCustomControl() 
	{
		form.ctnAllergy().ccAllergyTerm().setClinicalTermMandatory(true);
		form.ctnAllergy().ccAllergyTerm().setDescriptionMandatory(true);
		form.ctnAllergy().ccAllergyTerm().setCodingItemType(CodingItemType.ALLERGY);
		form.ctnAllergy().ccAllergyTerm().setHotlist(new Boolean(false));
	}
	@Override
	protected void onCustomControlCodingItemValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		AllergenVo voAllergen = (AllergenVo) form.ctnAllergy().ccAllergyTerm().getSelectedItem();
		form.ctnAllergy().cmbAllergyType().setValue(voAllergen != null ? voAllergen.getAllergenType() : null);
		fillReactionCombo();		
	}
	@Override
	protected void onCmbTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnAllergy().cmbAllergyReaction().clear();
		fillReactionCombo();
	}

	private void fillReactionCombo()
	{
		form.ctnAllergy().cmbAllergyReaction().clear();

		AllergenType type = form.ctnAllergy().cmbAllergyType().getValue();
		if(type != null)
		{
			AllergenTypeReactionsCollection reactionsColl = domain.listAllergenTypeReactions(type);
			if(reactionsColl != null)
			{
				for (int i = 0; i < reactionsColl.size(); i++)
				{
					if(reactionsColl.get(i).getReaction()!= null)
						form.ctnAllergy().cmbAllergyReaction().newRow(reactionsColl.get(i).getReaction(), reactionsColl.get(i).getReaction().toString());
				}
				if (reactionsColl.size() == 1)
					form.ctnAllergy().cmbAllergyReaction().setValue(reactionsColl.get(0).getReaction());
			}
		}
		
		form.ctnAllergy().cmbAllergyReaction().getValues();
		
	}
	
	protected PatientAlertEDischargeVo populateAlertDataFromScreen(PatientAlertEDischargeVo voPatientAlert)
	{
		voPatientAlert.setAlertType(form.ctnAlert().cmbAlertAlert().getValue());
		voPatientAlert.setComments(form.ctnAlert().txtAlertComment().getValue());
		voPatientAlert.setSourceofInformation(form.ctnAlert().cmbAlertSource().getValue());
		voPatientAlert.setDateIdentified(form.ctnAlert().pdtAlertDateIdentified().getValue());

		if(voPatientAlert.getIsCurrentlyActiveAlert() == null)
			voPatientAlert.setIsCurrentlyActiveAlert(Boolean.TRUE);	
		
		voPatientAlert.setAuthoringInformation(form.ctnAlert().ccAlertAuthor().getValue());
		
		voPatientAlert.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		if (voPatientAlert.getID_PatientAlert() == null)
			setAlertIncludeInfo(voPatientAlert, true);
		
		return voPatientAlert;
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getCurrentAlertIncluded().booleanValue()
			|| form.getLocalContext().getCurrentAllergyIncluded().booleanValue())
		{
			if (saveIncludeInfo())
			{
				form.getLocalContext().setCurrentAlertIncluded(false);
				form.getLocalContext().setCurrentAllergyIncluded(false);

//				form.getLocalContext().setSelectedPatientDiagnosisVo(null);
				
				openAlert();
				openAllergy();
				updateContextMenus(); 
				//-------------------------------------------------------------
				form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
				form.fireCustomControlValueChanged();
				//------------------------------------------------------------
			}
			return;
		}
		
		if (form.getLocalContext().getbEditingAllergyIsNotNull()
			&& form.getLocalContext().getbEditingAllergy() )
		{
			if (form.ctnAllergy().pdtAllergyDateIdentified().getValue() != null && form.ctnAllergy().pdtAllergyDateIdentified().getValue().isGreaterThan(new Date()))
			{
				engine.showMessage("'Date Identified' can not be in the future");
				return;
			}
			
			PatientAllergyEDischargeVo voPatientAllergy = populateAllergyInstanceData(form.getLocalContext().getVoAllergy());
			
			if (saveAllergy(voPatientAllergy))
			{
				openAllergy();
				openAlert();			//wdev-11558
			}
		}
				
		if (form.getLocalContext().getbEditingAlertIsNotNull()
			&& form.getLocalContext().getbEditingAlert() )
		{
			PatientAlertEDischargeVo voPatientAlert = populateAlertDataFromScreen(form.getLocalContext().getAlertRecord());
			
			if (voPatientAlert.getAuthoringInformation() == null)
			{
				engine.showMessage("Authoring info is a mandatory field.");
				return;
			}

			if (saveAlert(voPatientAlert))
			{
				openAlert();
				openAllergy();		//wdev-11558
			}
		}
		
		updateContextMenus();

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		openAlert();
		openAllergy();
		
		form.getLocalContext().setCurrentAlertIncluded(false);
		form.getLocalContext().setCurrentAllergyIncluded(false);
		updateContextMenus();

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}
	
	@Override
	protected void onCmbCategoryValueChanged() throws PresentationLogicException 
	{
		form.ctnAlert().cmbAlertAlert().clear();
		if(form.ctnAlert().cmbAlertCategory().getValue() == null) //for blank selection
			return;

		ArrayList<LookupInstVo> coll = form.ctnAlert().cmbAlertCategory().getValue().getChildInstances();
		AlertType type = null;
		for(int i=0;i<coll.size();i++)
		{
			type = (AlertType)coll.get(i);
			if(type.isActive())
				form.ctnAlert().cmbAlertAlert().newRow((AlertType)coll.get(i), coll.get(i).toString());
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}

	protected void populateAlertScreenFromData(PatientAlertEDischargeVo voPatAlert)
	{
		
		if (voPatAlert == null)
			return;
		form.ctnAlert().cmbAlertAlert().setValue(voPatAlert.getAlertTypeIsNotNull() ? voPatAlert.getAlertType() : null);
		form.ctnAlert().txtAlertComment().setValue(voPatAlert.getCommentsIsNotNull() ? voPatAlert.getComments(): null);
		form.ctnAlert().cmbAlertSource().setValue(voPatAlert.getSourceofInformationIsNotNull() ? voPatAlert.getSourceofInformation() : null);
		form.ctnAlert().pdtAlertDateIdentified().setValue(voPatAlert.getDateIdentifiedIsNotNull() ? voPatAlert.getDateIdentified() : null);

		if(voPatAlert.getAuthoringInformationIsNotNull())
			form.ctnAlert().ccAlertAuthor().setValue(voPatAlert.getAuthoringInformation());
		
		if(voPatAlert.getAlertType() != null && voPatAlert.getAlertType().getParent() != null && voPatAlert.getAlertType().getParent().getText()!= null)
		{
			form.ctnAlert().cmbAlertCategory().newRow(voPatAlert.getAlertType().getParent(), voPatAlert.getAlertType().getParent().getText());
			form.ctnAlert().cmbAlertCategory().setValue(voPatAlert.getAlertType().getParent());
		}

		loadCategoryTypes(); 
		
		form.ctnAlert().cmbAlertAlert().newRow(voPatAlert.getAlertType(), voPatAlert.getAlertType().getText());
		form.ctnAlert().cmbAlertAlert().setValue(voPatAlert.getAlertType());
	}
	

	private void loadCategoryTypes()
	{
		form.ctnAlert().cmbAlertAlert().clear();
		if(form.ctnAlert().cmbAlertCategory().getValue() == null) //for blank selection
			return;

		ArrayList<LookupInstVo> coll = form.ctnAlert().cmbAlertCategory().getValue().getChildInstances();
		AlertType type = null;
		for(int i=0;i<coll.size();i++)
		{
			type = (AlertType)coll.get(i);
			if(type.isActive())
				form.ctnAlert().cmbAlertAlert().newRow((AlertType)coll.get(i), coll.get(i).toString());
		}
	}

	@Override
	protected void onGrdAlertsSelectionChanged() throws PresentationLogicException 
	{
		PatientAlertEDischargeVo voAlert = domain.getPatientAlert(form.grdAlerts().getValue());
		form.getLocalContext().setAlertRecord(voAlert);
			
		if(voAlert != null)
		{
			populateAlertScreenFromData(voAlert);
			updateContextMenus();
		}	
	}

	@Override
	protected void onGrdAllergiesSelectionChanged() throws PresentationLogicException 
	{
		allergySelectionChanged();
	}

	private void editAlert() 
	{
		form.ctnAlert().cmbAlertSource().setFocus();
		form.setMode(FormMode.EDIT);
		
		form.getLocalContext().setAlertRecord(form.grdAlerts().getValue());
		form.ctnAlert().setccAlertAuthorEnabled(false);
	
		manageEnteringAlertDetails();
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}

	private void enableAlertDetailsControls(boolean bEnable, boolean bEditingAlert)
	{
		form.ctnAlert().cmbAlertCategory().setEnabled(bEnable);
		form.ctnAlert().cmbAlertAlert().setEnabled(bEnable);
		form.ctnAlert().txtAlertComment().setEnabled(bEnable);

		if (form.getMode().equals(FormMode.EDIT) && bEditingAlert)
			form.ctnAlert().cmbAlertSource().setRequired(true);
		
		form.ctnAlert().cmbAlertSource().setEnabled(bEnable);
		form.ctnAlert().pdtAlertDateIdentified().setEnabled(bEnable);
		form.ctnAlert().setccAlertAuthorEnabled(bEnable);
	//	if (bEditingAlert)
	//		form.ctnAlert().setCollapsed(true);
	//	else
	//		form.ctnAlert().setCollapsed(false);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if (sender.equals(form.grdAllergies()))
		{
			switch(menuItemID)
			{
			//case GenForm.ContextMenus.GenericGrid.Add:
			case GenForm.ContextMenus.ClinicalNamespace.EdischargeAllergiesEtc.New:							//wdev-13945
				newAllergy();
			break;
			
			//case GenForm.ContextMenus.GenericGrid.Update:
			case GenForm.ContextMenus.ClinicalNamespace.EdischargeAllergiesEtc.Edit:						//wdev-13945
				editAllergy();
			break;
			
			}		
		}
		if (sender.equals(form.grdAlerts()))
		{
			switch(menuItemID)
			{
			//case GenForm.ContextMenus.LIP.New:
			case GenForm.ContextMenus.ClinicalNamespace.EdischargeAlertsEtc.New:							//wdev-13945
				newAlert();
			break;
			
			//case GenForm.ContextMenus.LIP.Update:
			case GenForm.ContextMenus.ClinicalNamespace.EdischargeAlertsEtc.Edit:							//wdev-13945 
				editAlert();
			break;
			}
		}		
	}

	public void updateControlsState()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.grdAllergies().setEnabled(true);
			form.grdAllergies().setReadOnly(false);
			form.grdAlerts().setEnabled(true);
			form.grdAlerts().setReadOnly(false);
		}
	}

	public void initialise()
	{
		if (form.getLocalContext().getbInitialised() == null)
		{
			initializeComponent();

			form.getLocalContext().setCurrentAlertIncluded(false);
			form.getLocalContext().setCurrentAllergyIncluded(false);

			openAllergy();	
			openAlert();	
			
			form.setMode(FormMode.VIEW);
			updateContextMenus();
			updateControlsState();
			form.getLocalContext().setbInitialised(Boolean.TRUE);
			
			if (form.getLocalContext().getisReadonlyIsNotNull()
				&& form.getLocalContext().getisReadonly())
			{
				form.grdAllergies().setReadOnly(true);
				form.grdAlerts().setReadOnly(true);
			}

		}
	}
	
	@Override
	protected void onGrdAlertsGridCheckBoxClicked(int column, grdAlertsRow row, boolean isChecked) throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();

		form.getLocalContext().setCurrentAlertIncluded(true);
		updateContextMenus();
	}

	@Override
	protected void onGrdAllergiesGridCheckBoxClicked(int column, grdAllergiesRow row, boolean isChecked) throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();

		form.getLocalContext().setCurrentAllergyIncluded(true);
		updateContextMenus();
	}

	private boolean saveIncludeInfo() throws PresentationLogicException 
	{
		//Allergies in this Care Context
		for (int i = 0 ; i < form.grdAllergies().getRows().size() ; i++)
		{
			PatientAllergyEDischargeVo voAllergy = domain.getpatientAllergy(form.grdAllergies().getRows().get(i).getValue().getID_PatientAllergy());

			PatientAllergyEDischargeVo voUpdatedAllergy = includeValueChangedForCareContext(voAllergy, form.grdAllergies().getRows().get(i).getColInclude());
			if (voUpdatedAllergy != null)	
			{
				boolean bReturn = saveAllergy(voUpdatedAllergy);
				if ( ! bReturn)
					return false;
			}
		}
		

		//Alerts
		for (int j = 0 ; j < form.grdAlerts().getRows().size() ; j++)
		{
			PatientAlertEDischargeVo voAlert = domain.getPatientAlert(form.grdAlerts().getRows().get(j).getValue());

			PatientAlertEDischargeVo voUpdatedPatientAlert = includeValueChangedForCareContext(voAlert, form.grdAlerts().getRows().get(j).getColInclude());
			if (voUpdatedPatientAlert != null)	
			{
				boolean bReturn = saveAlert(voUpdatedPatientAlert);
				if ( ! bReturn)
					return false;
			}
		}

		return true;
	}

	private PatientAlertEDischargeVo includeValueChangedForCareContext(PatientAlertEDischargeVo voAlert, boolean bInclude) 
	{
		boolean bFound = false;
		for (int i = 0 ; voAlert.getIncludeAlertInDischargeReportsIsNotNull() && i < voAlert.getIncludeAlertInDischargeReports().size() ; i++)
		{
			IncludeAlertInDischargeReportsVo voInclude = voAlert.getIncludeAlertInDischargeReports().get(i);
			if (voInclude.getCareContextIsNotNull()
				&& voInclude.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()))
			{
				bFound = true;
				voInclude.setIncludeInReport(bInclude);
				voAlert.getIncludeAlertInDischargeReports().set(i, voInclude);
			}

		}
		if ( !bFound )
			setAlertIncludeInfo(voAlert, bInclude);
		
		return voAlert;
	}

	private void setAlertIncludeInfo(PatientAlertEDischargeVo voAlert, boolean bInclude) 
	{
		IncludeAlertInDischargeReportsVo voNewInclude = new IncludeAlertInDischargeReportsVo();
		voNewInclude.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voNewInclude.setAlert(voAlert);
		voNewInclude.setIncludeInReport(bInclude);
	
		if (voAlert.getIncludeAlertInDischargeReports() == null)
			voAlert.setIncludeAlertInDischargeReports(new IncludeAlertInDischargeReportsVoCollection());
		
		voAlert.getIncludeAlertInDischargeReports().add(voNewInclude);
	}

	private PatientAllergyEDischargeVo includeValueChangedForCareContext(PatientAllergyEDischargeVo voAllergy, boolean bInclude)
	{
		boolean bFound = false;
		for (int i = 0 ; voAllergy.getIncludeAllergyInDischargeReportsIsNotNull() && i < voAllergy.getIncludeAllergyInDischargeReports().size() ; i++)
		{
			IncludeAllergyInDischargeReportsVo voInclude = voAllergy.getIncludeAllergyInDischargeReports().get(i);
			if (voInclude.getCareContextIsNotNull()
				&& voInclude.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()))
			{
				bFound = true;
				voInclude.setIncludeInReport(bInclude);
				voAllergy.getIncludeAllergyInDischargeReports().set(i, voInclude);
			}

		}
		if ( !bFound )
			setAllergyIncludeInfo(voAllergy, bInclude);
		
		return voAllergy;
	}

	private void setAllergyIncludeInfo(PatientAllergyEDischargeVo voAllergy, boolean bInclude)
	{
		IncludeAllergyInDischargeReportsVo voNewInclude = new IncludeAllergyInDischargeReportsVo();
		voNewInclude.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voNewInclude.setAllergy(voAllergy);
		voNewInclude.setIncludeInReport(bInclude);
	
		if (voAllergy.getIncludeAllergyInDischargeReports() == null)
			voAllergy.setIncludeAllergyInDischargeReports(new IncludeAllergyInDischargeReportsVoCollection());
		
		voAllergy.getIncludeAllergyInDischargeReports().add(voNewInclude);
	}

	public void setReadOnly() 
	{
		form.getLocalContext().setisReadonly(/*form.getGlobalContext().Clinical.geteDischargeCompleted()||*/form.getGlobalContext().Clinical.geteDischargeClinicalComplete());
		updateContextMenus();
	}

}
