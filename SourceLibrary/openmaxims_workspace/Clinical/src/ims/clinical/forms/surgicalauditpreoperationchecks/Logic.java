//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4535.14223)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.surgicalauditpreoperationchecks;

import ims.clinical.forms.surgicalauditpreoperationchecks.GenForm.grdPlannedProceduresRow;
import ims.clinical.forms.surgicalauditpreoperationchecks.GenForm.groupConfirmPatDetEnumeration;
import ims.clinical.forms.surgicalauditpreoperationchecks.GenForm.groupConsentReceivedEnumeration;
import ims.clinical.forms.surgicalauditpreoperationchecks.GenForm.groupPreOpChecksDoneEnumeration;
import ims.clinical.forms.surgicalauditpreoperationchecks.GenForm.groupSiteMarkedEnumeration;
import ims.clinical.forms.surgicalauditrecoverycc.GenForm.grpConfirmPatientArrivalEnumeration;
import ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo;
import ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection;
import ims.clinical.vo.SurgicalAuditOperationDetailRefVo;
import ims.clinical.vo.SurgicalAuditOperationDetailStatusVo;
import ims.clinical.vo.SurgicalAuditOperationDetailStatusVoCollection;
import ims.clinical.vo.SurgicalAuditOperationDetailVo;
import ims.clinical.vo.SurgicalAuditPreOpChecksVo;
import ims.clinical.vo.VitalSignsForSurgicalAuditPreOpChecksVo;
import ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent;
import ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.NurseVo;
import ims.core.vo.VSMetrics;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		Object hcpUser = domain.getHcpLiteUser();
		if (!(hcpUser instanceof HcpLiteVo))
		{
			engine.showMessage("The current user is not an HCP!");
			return;
		}

		// Check SOE on EDIT
		if (form.getLocalContext().getcurrentSurgicalAuditOpDetail()!=null && form.getLocalContext().getcurrentSurgicalAuditOpDetail().getID_SurgicalAuditOperationDetailIsNotNull() && domain.isStale(form.getLocalContext().getcurrentSurgicalAuditOpDetail()))
		{
			form.getLocalContext().setcurrentSurgicalAuditOpDetail(domain.getSurgicalAuditOperationDetail(form.getLocalContext().getcurrentSurgicalAuditOpDetail()));
			populateScreenFromData(form.getLocalContext().getcurrentSurgicalAuditOpDetail());
		}
		form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.EDIT);
		form.fireCustomControlValueChanged();
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onRadioButtongroupSiteMarkedValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.groupSiteMarked().getValue().equals(groupSiteMarkedEnumeration.rdoYesSiteMarked))
			form.cmbAction().setValue(null);

		updateControlsState();
	}

	@Override
	protected void onRadioButtongroupConsentReceivedValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.groupConsentReceived().getValue().equals(groupConsentReceivedEnumeration.rdoYesConsentReceived))
		{
			form.txtConsentAuthBy().setValue(null);
		}
		updateControlsState();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.SAVE);
			form.fireCustomControlValueChanged();
		}
	}

	private boolean save()
	{
		SurgicalAuditOperationDetailVo surgicalAuditOpDetToSave = null;
		if (form.getLocalContext().getcurrentSurgicalAuditOpDetail() != null)
			surgicalAuditOpDetToSave = populateDataFromScreen((SurgicalAuditOperationDetailVo) form.getLocalContext().getcurrentSurgicalAuditOpDetail().clone());
		else
			surgicalAuditOpDetToSave = populateDataFromScreen(null);

		Boolean areNoSurgAuditOpDet = domain.areNoSurgicalAuditOperationDetail(form.getGlobalContext().Core.getCurrentCareContext());

		String[] errors = surgicalAuditOpDetToSave.validate(getUIErrors());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		// Condition to create only one SurgicalAudit Per CareContext
		if (!areNoSurgAuditOpDet && form.getLocalContext().getcurrentSurgicalAuditOpDetail() == null)
		{
			engine.showMessage("An Active Surgical Audit Operation Detail for the selected Care Context already exist. The screen will be refreshed");
			form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}
		
		/*
		// Check SOE on EDIT
		if (surgicalAuditOpDetToSave.getID_SurgicalAuditOperationDetailIsNotNull() && domain.isStale(surgicalAuditOpDetToSave))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}
		*/
		
		try
		{
			form.getLocalContext().setcurrentSurgicalAuditOpDetail(domain.save(surgicalAuditOpDetToSave));
			/*
			if (surgicalAuditOpDetToSave.getPreOpChecks().getID_SurgicalAuditPreOpChecks()==null)//new
				form.getLocalContext().setcurrentSurgicalAuditOpDetail(domain.save(surgicalAuditOpDetToSave));
			else //update
				domain.saveSurgicalAuditPreOpChecks(surgicalAuditOpDetToSave.getPreOpChecks());
			*/
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}

		return true;

	}

	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.grdPlannedProcedures().getRows().size() > 0 && getPatientProcedureMarkedAsPrimary() == null) //wdev-15700
		{
			errors.add("One procedure should be marked as primary for each Surgical Audit Pre Operation Checks!");
		}

		if (form.dtimPatientSentFor().getValue() != null && form.dtimPatientSentFor().getValue().isGreaterThan(new DateTime()))
		{
			errors.add("Time Patient Sent For cannot be set in the future!");
		}

		if (form.dtimArrival().getValue() != null)
		{
			if (form.dtimArrival().getValue().isGreaterThan(new DateTime()))
				errors.add("Arrival Time in Holding Bay cannot be set in the future!");

			if (form.dtimPatientSentFor().getValue() != null && form.dtimArrival().getValue().isLessThan(form.dtimPatientSentFor().getValue()))
				errors.add("Arrival Time in Holding Bay cannot be less than Time Patient Sent For!");
		}

		if (form.dtimLeave().getValue() != null)
		{
			if (form.dtimLeave().getValue().isGreaterThan(new DateTime()))
				errors.add("Leave Holding Bay cannot be set in the future!");

			if (form.dtimLeave().getValue().isLessThan(form.dtimArrival().getValue()))
				errors.add("Leave Holding Bay cannot be less than Arrival Time in Holding Bay!");
		}

		if (form.chkAccompanyingLocum().getValue() && form.txtAccompanyingLocumNurse().getValue() == null)
		{
			errors.add("Accompanying Nurse is mandatory!");
		}
		else if (!form.chkAccompanyingLocum().getValue() && form.ccNurse().getValue() == null)
		{
			errors.add("Accompanying Nurse is mandatory!");
		}

		if (!(form.groupConsentReceived().getValue().equals(groupConsentReceivedEnumeration.rdoYesConsentReceived) || form.groupConsentReceived().getValue().equals(groupConsentReceivedEnumeration.rdoNoConsentReceived)))
		{
			errors.add("Consent Received is mandatory!");
		}
		
		if (form.groupConsentReceived().getValue().equals(groupConsentReceivedEnumeration.rdoNoConsentReceived) && form.txtConsentAuthBy().getValue()==null)
		{
			errors.add("Consent Auth by is mandatory!");
		}
		
		
		if (form.decWeight().getValue() == null)
		{
			errors.add("Weight is mandatory!");
		}

		if (!(form.groupSiteMarked().getValue().equals(groupSiteMarkedEnumeration.rdoYesSiteMarked) || form.groupSiteMarked().getValue().equals(groupSiteMarkedEnumeration.rdoNoSiteMarked)))
		{
			errors.add("Site Marked is mandatory!");
		}
		
		if (form.groupSiteMarked().getValue().equals(groupSiteMarkedEnumeration.rdoNoSiteMarked) && form.cmbAction().getValue()==null)
		{
			errors.add("Action is mandatory!");
		}
		
		if (!(form.groupPreOpChecksDone().getValue().equals(groupPreOpChecksDoneEnumeration.rdoPreOpChecksYes) || form.groupPreOpChecksDone().getValue().equals(groupPreOpChecksDoneEnumeration.rdoPreOpChecksNo)))
		{
			errors.add("Pre-Op Checks Done is mandatory!");
		}
		
		if (!(form.groupConfirmPatDet().getValue().equals(groupConfirmPatDetEnumeration.rdoConfirmPatDetYes) || form.groupConfirmPatDet().getValue().equals(groupConfirmPatDetEnumeration.rdoConfirmPatDetNo)))
		{
			errors.add("Confirm Patient Details is mandatory!");
		}
		//wdev-15750
		if(!Boolean.TRUE.equals(form.chkTheatreNurse().getValue()) && form.ccTheatreNurse().getValue() == null)
		{
			errors.add("Theatre Nurse is mandatory!");
		}
		else if( Boolean.TRUE.equals(form.chkTheatreNurse().getValue()) && form.txtTheatreNurse().getValue() == null)
		{
			errors.add("Theatre Nurse is mandatory!");
		}
			
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}

	private SurgicalAuditOperationDetailVo populateDataFromScreen(SurgicalAuditOperationDetailVo surgicalAuditOpDetail)
	{
		if (surgicalAuditOpDetail == null)
		{
			surgicalAuditOpDetail = new SurgicalAuditOperationDetailVo();
		}

		if (surgicalAuditOpDetail.getPatient() == null)
		{
			surgicalAuditOpDetail.setPatient(form.getGlobalContext().Core.getPatientShort());
		}

		if (surgicalAuditOpDetail.getCareContext() == null)
		{
			surgicalAuditOpDetail.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}

		if (surgicalAuditOpDetail.getAuthoringInformation() == null)
		{
			AuthoringInformationVo tempAuthoringInfo = surgicalAuditOpDetail.getAuthoringInformation();
			tempAuthoringInfo = new AuthoringInformationVo();

			Object hcp = domain.getHcpLiteUser();

			if (hcp instanceof HcpLiteVo)
			{
				tempAuthoringInfo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
			}

			tempAuthoringInfo.setAuthoringDateTime(new DateTime());
			surgicalAuditOpDetail.setAuthoringInformation(tempAuthoringInfo);
		}
		SurgicalAuditPreOpChecksVo surgAuditPreOpChecks = populateDataFromPreOpChecksTab(surgicalAuditOpDetail.getPreOpChecks());
		surgicalAuditOpDetail.setPreOpChecks(surgAuditPreOpChecks);
		
		// The current status will be modified only when saving for the first time on a tab.
		// The records will be added to history also only when saving for the first time
		
		if (surgicalAuditOpDetail.getCurrentStatus() == null ||(surgAuditPreOpChecks!=null && surgAuditPreOpChecks.getID_SurgicalAuditPreOpChecks()==null && surgicalAuditOpDetail.getCurrentStatus() != null && !SurgicalAuditOperationDetailStatus.CANCELLED_OPERATIONS.equals(surgicalAuditOpDetail.getCurrentStatus().getOperationStatus())))
		{
			Object mos = domain.getMosUser();

			MemberOfStaffLiteVo statusAuthoringUser = null;
			if (mos instanceof MemberOfStaffLiteVo)
				statusAuthoringUser = ((MemberOfStaffLiteVo) mos);

			SurgicalAuditOperationDetailStatusVo tempCurrentStatus = populateStatus(ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus.LEFT_HOLDING_BAY, new DateTime(), statusAuthoringUser);

			surgicalAuditOpDetail.setCurrentStatus(tempCurrentStatus);

			// Populate Status History
			SurgicalAuditOperationDetailStatusVoCollection tempStatusHistory = surgicalAuditOpDetail.getStatusHistory();
			if (tempStatusHistory == null)
				tempStatusHistory = new SurgicalAuditOperationDetailStatusVoCollection();

			tempStatusHistory.add(populateStatus(ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus.IN_HOLDING_BAY, new DateTime(), statusAuthoringUser));
			tempStatusHistory.add(tempCurrentStatus);
			surgicalAuditOpDetail.setStatusHistory(tempStatusHistory);
		}

		

		return surgicalAuditOpDetail;
	}

	private SurgicalAuditOperationDetailStatusVo populateStatus(SurgicalAuditOperationDetailStatus status, DateTime dateTime, MemberOfStaffLiteVo statusAuthoringUser)
	{
		SurgicalAuditOperationDetailStatusVo statusRecord = new SurgicalAuditOperationDetailStatusVo();

		statusRecord.setOperationStatus(status);
		statusRecord.setStatusDateTime(dateTime);
		statusRecord.setAuthoringUser(statusAuthoringUser);

		return statusRecord;
	}

	private SurgicalAuditPreOpChecksVo populateDataFromPreOpChecksTab(SurgicalAuditPreOpChecksVo surgAuditPreOpChecks)
	{
		if (surgAuditPreOpChecks == null)
			surgAuditPreOpChecks = new SurgicalAuditPreOpChecksVo();

		if (surgAuditPreOpChecks.getPatient() == null)
		{
			surgAuditPreOpChecks.setPatient(form.getGlobalContext().Core.getPatientShort());
		}

		if (surgAuditPreOpChecks.getCareContext() == null)
		{
			surgAuditPreOpChecks.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}

		if (surgAuditPreOpChecks.getAuthoringInformation() == null)
		{
			AuthoringInformationVo tempAuthoringInfo = surgAuditPreOpChecks.getAuthoringInformation();
			tempAuthoringInfo = new AuthoringInformationVo();

			Object hcp = domain.getHcpLiteUser();

			if (hcp instanceof HcpLiteVo)
			{
				tempAuthoringInfo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
			}

			tempAuthoringInfo.setAuthoringDateTime(new DateTime());
			surgAuditPreOpChecks.setAuthoringInformation(tempAuthoringInfo);
		}

		surgAuditPreOpChecks.setConsultant((MedicVo) form.ccConsultant().getValue());

		surgAuditPreOpChecks.setPlannedProcedures(populatePatientProceduresFromScreen());

		surgAuditPreOpChecks.setSentForTime(form.dtimPatientSentFor().getValue());
		surgAuditPreOpChecks.setArrivalTime(form.dtimArrival().getValue());
		surgAuditPreOpChecks.setLeaveHoldingTime(form.dtimLeave().getValue());

		// Accompanying Nurse
		surgAuditPreOpChecks.setAccompanyingLocumBool(form.chkAccompanyingLocum().getValue());
		surgAuditPreOpChecks.setAccompanyingLocumNurse(form.txtAccompanyingLocumNurse().getValue());
		surgAuditPreOpChecks.setAccompanyingNurse((NurseVo) form.ccNurse().getValue());

		surgAuditPreOpChecks.setTransferredFrom(form.cmbTransferredFrom().getValue());

		surgAuditPreOpChecks.setASAGrade(form.cmbAsaGrade().getValue());
		surgAuditPreOpChecks.setConsentReceived(form.groupConsentReceived().getValue().equals(groupConsentReceivedEnumeration.rdoYesConsentReceived) ? ims.core.vo.lookups.YesNo.YES : ims.core.vo.lookups.YesNo.NO);
		
		surgAuditPreOpChecks.setConsentAuthBy(form.txtConsentAuthBy().getValue());
			
		// BMI
		VitalSignsForSurgicalAuditPreOpChecksVo tempBMI = surgAuditPreOpChecks.getBMI();
		if (tempBMI == null)
		{
			tempBMI = new VitalSignsForSurgicalAuditPreOpChecksVo();
			tempBMI.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		tempBMI.setVitalsTakenDateTime(new DateTime());

		VSMetrics tempMetrics = tempBMI.getMetrics();
		if (tempMetrics == null)
			tempMetrics = new VSMetrics();
		tempMetrics.setWeightValue(form.decWeight().getValue());
		tempMetrics.setHeightValue(form.decHeight().getValue());
		tempMetrics.setBMI(bodyMassIndex(form.decHeight().getValue(), form.decWeight().getValue()));
		tempMetrics.setPatient(form.getGlobalContext().Core.getPatientShort());

		tempBMI.setMetrics(tempMetrics);
		surgAuditPreOpChecks.setBMI(tempBMI);

		surgAuditPreOpChecks.setSiteMarked(form.groupSiteMarked().getValue().equals(groupSiteMarkedEnumeration.rdoYesSiteMarked) ? ims.core.vo.lookups.YesNo.YES : ims.core.vo.lookups.YesNo.NO);

		surgAuditPreOpChecks.setActionTaken(form.cmbAction().getValue());
		surgAuditPreOpChecks.setPreOpCheckDone(form.groupPreOpChecksDone().getValue().equals(groupPreOpChecksDoneEnumeration.rdoPreOpChecksYes) ? ims.core.vo.lookups.YesNo.YES : ims.core.vo.lookups.YesNo.NO);
		surgAuditPreOpChecks.setConfirmPatientDetails(form.groupConfirmPatDet().getValue().equals(groupConfirmPatDetEnumeration.rdoConfirmPatDetYes) ? ims.core.vo.lookups.YesNo.YES : ims.core.vo.lookups.YesNo.NO);
		
		//wdev-15750
		surgAuditPreOpChecks.setTheatreNurse((NurseVo) form.ccTheatreNurse().getValue());
		surgAuditPreOpChecks.setTheatreNurseLocumBool(form.chkTheatreNurse().getValue());
		surgAuditPreOpChecks.setTheatreNurseLocumNurse(form.txtTheatreNurse().getValue());
		//------------

		return surgAuditPreOpChecks;
	}

	private PatientProcedureForSurgicalAuditPreOpChecksVoCollection populatePatientProceduresFromScreen()
	{
		PatientProcedureForSurgicalAuditPreOpChecksVoCollection collPatProcedure = new PatientProcedureForSurgicalAuditPreOpChecksVoCollection();

		for (int i = 0; i < form.grdPlannedProcedures().getRows().size(); i++)
		{
			collPatProcedure.add(form.grdPlannedProcedures().getRows().get(i).getValue());
		}

		return collPatProcedure;
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Clinical.setPatientProcedureMarkedAsPrimary(getPatientProcedureMarkedAsPrimary());

		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.SurgicalAuditPreOpChecksProceduresGridMenu.Add:
				form.getGlobalContext().Clinical.setSelectedPatientProcedureFromSurgicalAudit(null);
				form.grdPlannedProcedures().setValue(null);//WDEV-15651
				engine.open(form.getForms().Clinical.PatientProceduresDialog);
				break;
			case GenForm.ContextMenus.ClinicalNamespace.SurgicalAuditPreOpChecksProceduresGridMenu.Edit:
				form.getGlobalContext().Clinical.setSelectedPatientProcedureFromSurgicalAudit(form.grdPlannedProcedures().getValue());
				engine.open(form.getForms().Clinical.PatientProceduresDialog);
				break;
			case GenForm.ContextMenus.ClinicalNamespace.SurgicalAuditPreOpChecksProceduresGridMenu.REMOVE:  //wdev-15700
				if(	form.grdPlannedProcedures().getValue() != null)
					form.grdPlannedProcedures().removeSelectedRow();
				
				updateControlsState();
				break;

		}
	}

	private PatientProcedureForSurgicalAuditPreOpChecksVo getPatientProcedureMarkedAsPrimary()
	{
		for (int i = 0; i < form.grdPlannedProcedures().getRows().size(); i++)
		{
			if (form.grdPlannedProcedures().getRows().get(i).getcolPrimary() == true)
			{
				return form.grdPlannedProcedures().getRows().get(i).getValue();
			}
		}
		return null;
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		Boolean areNoSurgAuditOpDet = domain.areNoSurgicalAuditOperationDetail(form.getGlobalContext().Core.getCurrentCareContext());
		Object hcpUser = domain.getHcpLiteUser();
		if (!(hcpUser instanceof HcpLiteVo))
		{
			engine.showMessage("The current user is not an HCP!");
			return;
		}

		form.getLocalContext().setcurrentSurgicalAuditOpDetail(null);
		
		// Condition to create only one SurgicalAudit Per CareContext
		if (!areNoSurgAuditOpDet && form.getLocalContext().getcurrentSurgicalAuditOpDetail() == null)
		{
			engine.showMessage("An Active Surgical Audit Operation Detail for the selected Care Context already exist. The screen will be refreshed");
			form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return ;
		}
		form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.EDIT);
		form.fireCustomControlValueChanged();
		newInstance();
	}

	private void newInstance()
	{
		clearInstanceControls();
		populateTransferredFromCombo();
		HcpLiteVo careContextHcp = form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCP();

		if (careContextHcp!=null && careContextHcp.getHcpType().equals(HcpDisType.MEDICAL)) //WDEV-15676
		{
			MedicVo tempMedic = domain.getMedic(careContextHcp);
			form.ccConsultant().setValue(tempMedic);
		}
		
		// the Transferred From combo should default to the "patients current ward" from any linked Inpatient Record
		LocationLiteVo patCurrentWard = form.getGlobalContext().Core.getPatientShort().getWard();
		if (patCurrentWard!=null)
    	{
			ArrayList <?> cmbTransferredFromValues = form.cmbTransferredFrom().getValues();
    		if (cmbTransferredFromValues.contains(patCurrentWard))
    		{
    			form.cmbTransferredFrom().setValue(patCurrentWard);
    		}
    		else
    		{
    			form.cmbTransferredFrom().newRow(patCurrentWard, patCurrentWard.getName());
    			form.cmbTransferredFrom().setValue(patCurrentWard);
    		}
		}
		
		form.setMode(FormMode.EDIT);
	}

	

	private void clearInstanceControls()
	{
		form.ccConsultant().setValue(null);
		form.grdPlannedProcedures().getRows().clear();

		form.dtimPatientSentFor().setValue(null);
		form.dtimArrival().setValue(null);
		form.dtimLeave().setValue(null);

		form.chkAccompanyingLocum().setValue(null);
		form.txtAccompanyingLocumNurse().setValue(null);
		form.ccNurse().setValue(null);
		form.ccNurse().clear();				//wdev-15785

		form.cmbTransferredFrom().setValue(null);

		form.cmbAsaGrade().setValue(null);
		form.groupConsentReceived().setValue(null);
		form.txtConsentAuthBy().setValue(null);

		form.decWeight().setValue(null);
		form.decHeight().setValue(null);
		form.decBMI().setValue(null);

		form.groupSiteMarked().setValue(null);
		form.cmbAction().setValue(null);
		form.groupPreOpChecksDone().setValue(null);
		form.groupConfirmPatDet().setValue(null);
		
		//wdev-15750
		form.chkTheatreNurse().setValue(null);
		form.txtTheatreNurse().setValue(null);
		form.ccTheatreNurse().clear();

	}

	@Override
	protected void onGrdPlannedProceduresSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setSelectedPatientProcedureFromSurgicalAudit(form.grdPlannedProcedures().getValue());
		updateControlsState();

	}

	@Override
	protected void onGrdPlannedProceduresGridCheckBoxClicked(int column, grdPlannedProceduresRow row, boolean isChecked) throws PresentationLogicException
	{
		PatientProcedureForSurgicalAuditPreOpChecksVo tempvo1 = row.getValue();
		tempvo1.setIsPrimary(row.getcolPrimary());
		for (int i = 0; i < form.grdPlannedProcedures().getRows().size(); i++)
		{
			grdPlannedProceduresRow row1 = form.grdPlannedProcedures().getRows().get(i);
			if (!row1.getValue().equals(row.getValue()) && row1.getcolPrimary() == true)
			{
				row1.setcolPrimary(false);
				PatientProcedureForSurgicalAuditPreOpChecksVo tempvo = row1.getValue();
				tempvo.setIsPrimary(false);
				row1.setValue(tempvo);

			}
		}
	}

	public void setEnabled(Boolean argument)
	{
		// TODO Auto-generated method stub

	}

	public void initialize(SurgicalAuditOperationDetailRefVo surgicalAuditRef)
	{
		if (surgicalAuditRef != null)
		{
			form.getLocalContext().setcurrentSurgicalAuditOpDetail(domain.getSurgicalAuditOperationDetail(surgicalAuditRef));
		}
		else
		{
			form.getLocalContext().setcurrentSurgicalAuditOpDetail(null);
		}

		form.ccConsultant().initialize(MosType.HCP, HcpDisType.MEDICAL);
		//form.ccNurse().initialize(MosType.HCP, HcpDisType.NURSING);
		//wdev-15750
		LocationLiteVo  locVo= null;
		LocSiteLiteVo	locSiteVo = null;
		if( domain.getCurrentLocation() instanceof LocationLiteVo)
		{
			locVo = (LocationLiteVo) domain.getCurrentLocation();
		}
		else if( domain.getCurrentLocation() instanceof LocSiteLiteVo)
		{
			locSiteVo = (LocSiteLiteVo) domain.getCurrentLocation();
		}
		if( locVo != null )
		{
			if(locVo.getTypeIsNotNull() && locVo.getType().equals(LocationType.HOSP))
			{
				form.ccTheatreNurse().initialize(MosType.HCP, HcpDisType.NURSING,locVo.getID_Location());
				form.ccNurse().initialize(MosType.HCP, HcpDisType.NURSING,locVo.getID_Location()); //wdev-15785
			}
			else if(locVo.getTypeIsNotNull() && !locVo.getType().equals(LocationType.HOSP))
			{
				locVo = domain.getLocationLite(locVo);
				form.ccTheatreNurse().initialize(MosType.HCP, HcpDisType.NURSING,locVo.getID_Location());
				form.ccNurse().initialize(MosType.HCP, HcpDisType.NURSING,locVo.getID_Location()); //wdev-15785
			}
		}
		else if( locSiteVo != null)
		{
			locVo = domain.getLocationLite(locSiteVo);
			form.ccTheatreNurse().initialize(MosType.HCP, HcpDisType.NURSING,locVo.getID_Location());
			form.ccNurse().initialize(MosType.HCP, HcpDisType.NURSING,locVo.getID_Location()); //wdev-15785
		}
		
		//----

		populateTransferredFromCombo();

		open();

	}

	private void populateTransferredFromCombo()
	{
		LocationLiteVo locVo = null, tempLocVo = null;
		LocSiteLiteVo locSiteVo = null;
		LocationLiteVoCollection collLoc = null;

		form.cmbTransferredFrom().clear();
		if (domain.getCurrentLocation() instanceof LocationLiteVo)
		{
			locVo = (LocationLiteVo) domain.getCurrentLocation();
		}
		else if (domain.getCurrentLocation() instanceof LocSiteLiteVo)
		{
			locSiteVo = (LocSiteLiteVo) domain.getCurrentLocation();
		}
		if (locVo != null)
		{
			tempLocVo = locVo;
		}
		else if (locSiteVo != null)
		{
			tempLocVo = domain.getLocationLiteVo(locSiteVo);
		}
		if (tempLocVo != null)
		{
			if (LocationType.HOSP.equals(tempLocVo.getType()))
				collLoc = domain.listLocationsByParentLocation(tempLocVo);
			else
				collLoc = domain.listActiveLocationsAtTheSameLevelWithLocation(tempLocVo);

		}
		if (collLoc != null)
		{
			for (int i = 0; i < collLoc.size(); i++)
			{
				form.cmbTransferredFrom().newRow(collLoc.get(i), collLoc.get(i).getName());
			}
		}

	}

	private void open()
	{
		populateScreenFromData(form.getLocalContext().getcurrentSurgicalAuditOpDetail());
		form.setMode(FormMode.VIEW);

	}

	private void populateScreenFromData(SurgicalAuditOperationDetailVo surgAuditOpDet)
	{
		clearInstanceControls();

		form.ccAlerts().refresh();
		form.ccAllergies().refresh();

		if (surgAuditOpDet == null || surgAuditOpDet.getPreOpChecks() == null)
			return;

		SurgicalAuditPreOpChecksVo surgAuditPreOpChecks = surgAuditOpDet.getPreOpChecks();
		populateProcedureGrid(surgAuditPreOpChecks);

		form.ccConsultant().setValue(surgAuditPreOpChecks.getConsultant());
		form.dtimPatientSentFor().setValue(surgAuditPreOpChecks.getSentForTime());
		form.dtimArrival().setValue(surgAuditPreOpChecks.getArrivalTime());
		form.dtimLeave().setValue(surgAuditPreOpChecks.getLeaveHoldingTime());

		// Accompanying Nurse
		form.chkAccompanyingLocum().setValue(surgAuditPreOpChecks.getAccompanyingLocumBool());
		form.txtAccompanyingLocumNurse().setValue(surgAuditPreOpChecks.getAccompanyingLocumNurse());
		form.ccNurse().setValue(surgAuditPreOpChecks.getAccompanyingNurse());

		ArrayList<?> transferedFrom = form.cmbTransferredFrom().getValues();
		if (transferedFrom != null && surgAuditPreOpChecks.getTransferredFromIsNotNull() && !transferedFrom.contains(surgAuditPreOpChecks.getTransferredFrom()))
			form.cmbTransferredFrom().newRow(surgAuditPreOpChecks.getTransferredFrom(), surgAuditPreOpChecks.getTransferredFrom().getName());
		form.cmbTransferredFrom().setValue(surgAuditPreOpChecks.getTransferredFrom());

		form.cmbAsaGrade().setValue(surgAuditPreOpChecks.getASAGrade());

		form.groupConsentReceived().setValue(surgAuditPreOpChecks.getConsentReceived().equals(ims.core.vo.lookups.YesNo.YES) ? groupConsentReceivedEnumeration.rdoYesConsentReceived : groupConsentReceivedEnumeration.rdoNoConsentReceived);
		if (surgAuditPreOpChecks.getConsentAuthByIsNotNull())
		{
			form.txtConsentAuthBy().setValue(surgAuditPreOpChecks.getConsentAuthBy());
		}

		if (surgAuditPreOpChecks.getBMIIsNotNull() && surgAuditPreOpChecks.getBMI().getMetricsIsNotNull())
		{
			form.decWeight().setValue(surgAuditPreOpChecks.getBMI().getMetrics().getWeightValueIsNotNull() ? surgAuditPreOpChecks.getBMI().getMetrics().getWeightValue() : null);
			form.decHeight().setValue(surgAuditPreOpChecks.getBMI().getMetrics().getHeightValueIsNotNull() ? surgAuditPreOpChecks.getBMI().getMetrics().getHeightValue() : null);
			form.decBMI().setValue(surgAuditPreOpChecks.getBMI().getMetrics().getBMIIsNotNull() ? surgAuditPreOpChecks.getBMI().getMetrics().getBMI() : null);
		}

		form.groupSiteMarked().setValue(surgAuditPreOpChecks.getSiteMarked().equals(ims.core.vo.lookups.YesNo.YES) ? groupSiteMarkedEnumeration.rdoYesSiteMarked : groupSiteMarkedEnumeration.rdoNoSiteMarked);
		if (surgAuditPreOpChecks.getActionTakenIsNotNull())
		{
			form.cmbAction().setValue(surgAuditPreOpChecks.getActionTaken());
		}

		form.groupPreOpChecksDone().setValue(surgAuditPreOpChecks.getPreOpCheckDone().equals(ims.core.vo.lookups.YesNo.YES) ? groupPreOpChecksDoneEnumeration.rdoPreOpChecksYes : groupPreOpChecksDoneEnumeration.rdoPreOpChecksNo);
		form.groupConfirmPatDet().setValue(surgAuditPreOpChecks.getConfirmPatientDetails().equals(ims.core.vo.lookups.YesNo.YES) ? groupConfirmPatDetEnumeration.rdoConfirmPatDetYes : groupConfirmPatDetEnumeration.rdoConfirmPatDetNo);  //wdev-15769
		
		//wdev-15750
		form.ccTheatreNurse().setValue(surgAuditPreOpChecks.getTheatreNurse());
		form.chkTheatreNurse().setValue(surgAuditPreOpChecks.getTheatreNurseLocumBool());
		form.txtTheatreNurse().setValue(surgAuditPreOpChecks.getTheatreNurseLocumNurse());
			
		//
	}

	private void populateProcedureGrid(SurgicalAuditPreOpChecksVo surgicalAuditPreOpChecks)
	{

		PatientProcedureForSurgicalAuditPreOpChecksVoCollection collProcedure = domain.listProcedures(surgicalAuditPreOpChecks);

		if (collProcedure == null)
			return;

		for (int i = 0; i < collProcedure.size(); i++)
		{
			addRowToProcedureGrid(collProcedure.get(i), Boolean.TRUE); 	//wdev-15831
		}

	}

	private void addRowToProcedureGrid(PatientProcedureForSurgicalAuditPreOpChecksVo patientProcedure, Boolean action)
	{
		if (patientProcedure == null)
			return;

		grdPlannedProceduresRow row = form.grdPlannedProcedures().getRows().newRow();
		row.setcolListOfProc(patientProcedure.getProcedureDescription());
		row.setTooltipForcolListOfProc(patientProcedure.getProcedureDescription());
		row.setcolPrimary(patientProcedure.getIsPrimary());
		patientProcedure.setIsSaved(action);  //wdev-15831
		row.setValue(patientProcedure);

	}

	private void updateRowToProcedureGrid(PatientProcedureForSurgicalAuditPreOpChecksVo patientProcedure ,Boolean action)  //wdev-15831
	{
		PatientProcedureForSurgicalAuditPreOpChecksVo patientProcedureTemp;         //wdev-15831
		grdPlannedProceduresRow row = form.grdPlannedProcedures().getSelectedRow();
		patientProcedureTemp = row.getValue();
		if( patientProcedureTemp != null && !Boolean.TRUE.equals(patientProcedureTemp.getIsSaved()))
			patientProcedure.setIsSaved(action);	//wdev-15831
		
		row.setcolListOfProc(patientProcedure.getProcedureDescription());
		row.setTooltipForcolListOfProc(patientProcedure.getProcedureDescription());
		row.setcolPrimary(patientProcedure.getIsPrimary());
		
		
		row.setValue(patientProcedure);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();

	}

	private void updateControlsState()
	{
		Boolean areNoSurgAuditOpDet = domain.areNoSurgicalAuditOperationDetail(form.getGlobalContext().Core.getCurrentCareContext());

		form.btnNew().setVisible(FormMode.VIEW.equals(form.getMode()) && areNoSurgAuditOpDet);
		form.btnNew().setEnabled(FormMode.VIEW.equals(form.getMode()) && areNoSurgAuditOpDet);

		form.btnEdit1().setVisible(FormMode.VIEW.equals(form.getMode()) && !form.btnNew().isVisible() && form.getLocalContext().getcurrentSurgicalAuditOpDetailIsNotNull());
		form.btnEdit1().setEnabled(FormMode.VIEW.equals(form.getMode()) && !form.btnNew().isVisible() && form.getLocalContext().getcurrentSurgicalAuditOpDetailIsNotNull());

		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && !form.btnEdit1().isVisible() && form.getLocalContext().getcurrentSurgicalAuditOpDetailIsNotNull());
		form.btnEdit().setEnabled(FormMode.VIEW.equals(form.getMode()) && !form.btnEdit1().isVisible() && form.getLocalContext().getcurrentSurgicalAuditOpDetailIsNotNull());

		form.getContextMenus().Clinical.getSurgicalAuditPreOpChecksProceduresGridMenuAddItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().Clinical.getSurgicalAuditPreOpChecksProceduresGridMenuEditItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdPlannedProcedures().getValue() instanceof PatientProcedureForSurgicalAuditPreOpChecksVo);
		//form.getContextMenus().Clinical.getSurgicalAuditPreOpChecksProceduresGridMenuREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdPlannedProcedures().getValue() != null && form.grdPlannedProcedures().getValue() instanceof PatientProcedureForSurgicalAuditPreOpChecksVo && isPerformedOrCancelled()); //wdev-15700
		form.getContextMenus().Clinical.getSurgicalAuditPreOpChecksProceduresGridMenuREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdPlannedProcedures().getValue() != null && form.grdPlannedProcedures().getValue() instanceof PatientProcedureForSurgicalAuditPreOpChecksVo && Boolean.FALSE.equals(form.grdPlannedProcedures().getValue().getIsSaved())); //wdev-15831
		

		form.txtConsentAuthBy().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.groupConsentReceived().getValue().equals(groupConsentReceivedEnumeration.rdoNoConsentReceived));
		form.txtConsentAuthBy().setRequired(FormMode.EDIT.equals(form.getMode()) && form.groupConsentReceived().getValue().equals(groupConsentReceivedEnumeration.rdoNoConsentReceived));

		form.cmbAction().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.groupSiteMarked().getValue().equals(groupSiteMarkedEnumeration.rdoNoSiteMarked));

		form.ccConsultant().isRequired(FormMode.EDIT.equals(form.getMode()));

		form.ccNurse().isRequired(FormMode.EDIT.equals(form.getMode()) && !form.chkAccompanyingLocum().getValue());
		form.ccNurse().setEnabled(FormMode.EDIT.equals(form.getMode()) && !form.chkAccompanyingLocum().getValue());

		form.txtAccompanyingLocumNurse().setRequired(FormMode.EDIT.equals(form.getMode()) && form.chkAccompanyingLocum().getValue());
		form.txtAccompanyingLocumNurse().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.chkAccompanyingLocum().getValue());

		form.ccAlerts().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.ccAllergies().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		//wdev-15750
		form.ccTheatreNurse().isRequired(FormMode.EDIT.equals(form.getMode()) && !form.chkTheatreNurse().getValue());
		form.ccTheatreNurse().setEnabled(FormMode.EDIT.equals(form.getMode()) && !Boolean.TRUE.equals(form.chkTheatreNurse().getValue()));
		form.txtTheatreNurse().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.chkTheatreNurse().getValue());
		

	}
	//wdev-15700
	boolean isPerformedOrCancelled( )
	{
		if( PatientProcedureStatus.PERFORMED.equals(form.grdPlannedProcedures().getValue().getProcedureStatus()) || PatientProcedureStatus.CANCELLED.equals(form.grdPlannedProcedures().getValue().getProcedureStatus()))
			return false;
		else
			return true;
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Clinical.PatientProceduresDialog) && result.equals(DialogResult.OK))
		{
			if (form.grdPlannedProcedures().getValue() != null) //WDEV-15651
			{
				updateRowToProcedureGrid(form.getGlobalContext().Clinical.getSelectedPatientProcedureFromSurgicalAudit(), Boolean.FALSE);		//wdev-15831 
			}
			else
			{
				addRowToProcedureGrid(form.getGlobalContext().Clinical.getSelectedPatientProcedureFromSurgicalAudit(), Boolean.FALSE); 			//wdev-15831
				form.grdPlannedProcedures().setValue(form.getGlobalContext().Clinical.getSelectedPatientProcedureFromSurgicalAudit());
			}
		}

		updateControlsState();

	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.CANCEL);
		form.fireCustomControlValueChanged();
	}

	public SurgicalAuditPreOpChecksEvent getSelectedEvent()
	{
		return form.getLocalContext().getselectedEvent();
	}

	public void resetSelectedEvent()
	{
		form.getLocalContext().setselectedEvent(null);
	}

	private Float bodyMassIndex(Float height/* cm */, Float weight/* kg */)
	{
		if (height == null || weight == null)
			return null;

		// we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float) (weight.floatValue() / (height.floatValue() / 100.0 * height.floatValue() / 100.0)));
	}

	public Boolean isBtnNewVisible()
	{
		return form.btnNew().isVisible();
	}

	public Boolean isBtnEditVisible()
	{
		return (form.btnEdit().isVisible() || form.btnEdit1().isVisible());
	}

	@Override
	protected void onBtnEdit1Click() throws PresentationLogicException
	{
		Object hcpUser = domain.getHcpLiteUser();
		if (!(hcpUser instanceof HcpLiteVo))
		{
			engine.showMessage("The current user is not an HCP!");
			return;
		}

		// Check SOE on EDIT
		if (form.getLocalContext().getcurrentSurgicalAuditOpDetail()!=null && form.getLocalContext().getcurrentSurgicalAuditOpDetail().getID_SurgicalAuditOperationDetailIsNotNull() && domain.isStale(form.getLocalContext().getcurrentSurgicalAuditOpDetail()))
		{
			form.getLocalContext().setcurrentSurgicalAuditOpDetail(domain.getSurgicalAuditOperationDetail(form.getLocalContext().getcurrentSurgicalAuditOpDetail()));
			populateScreenFromData(form.getLocalContext().getcurrentSurgicalAuditOpDetail());
		}
		form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.EDIT);
		form.fireCustomControlValueChanged();
		form.setMode(FormMode.EDIT);
	}

	public SurgicalAuditOperationDetailVo getValue()
	{
		return form.getLocalContext().getcurrentSurgicalAuditOpDetail();
	}

	@Override
	protected void onChkAccompanyingLocumValueChanged() throws PresentationLogicException
	{
		if (form.chkAccompanyingLocum().getValue())
			form.ccNurse().setValue(null);
		else
			form.txtAccompanyingLocumNurse().setValue(null);
		updateControlsState();
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	//wdev-15750
	protected void onChkTheatreNurseValueChanged() throws PresentationLogicException 
	{
		if(Boolean.TRUE.equals(form.chkTheatreNurse().getValue()))
		{
			form.ccTheatreNurse().clear();
			
		}
		else
		{
			form.txtTheatreNurse().setValue(null);
		}
		updateControlsState();
	}
	
}
