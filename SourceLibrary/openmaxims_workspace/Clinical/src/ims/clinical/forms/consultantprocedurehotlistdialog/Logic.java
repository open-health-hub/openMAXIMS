//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.70 build 3545.21176)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.consultantprocedurehotlistdialog;

import ims.admin.vo.CategoryProceduresVo;
import ims.admin.vo.ConsultantProcedureCategoryVo;
import ims.clinical.forms.consultantprocedurehotlistdialog.GenForm.grdItemsRow;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlState();
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		validateArgs(args);
		initialize();		
		updateControlState();
	}
			
	private void validateArgs(Object[] args) throws PresentationLogicException
	{
		if (args == null || args.length == 0 || !(args[0] instanceof HcpLiteVo))
			throw new PresentationLogicException("Not null hcp was expected");
		
		form.getLocalContext().setHcpFilter((HcpLiteVo) args[0]);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void initialize() throws FormOpenException
	{
			loadCategoryComboByHcp();
			form.cmbCategory().setRequired(true);
			form.txtProcedureName().setRequired(true);
	}
	private void loadCategoryComboByHcp() {
		ConsultantProcedureCategoryVo voConsultantProcedureCategory = null;
		try {
			voConsultantProcedureCategory = domain.getConsultantProcedureCategoryByHcp(form.getLocalContext().getHcpFilter());
		} catch (DomainInterfaceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		form.cmbCategory().clear();
		if (voConsultantProcedureCategory == null)
			return;
		
		if(voConsultantProcedureCategory.getCategoryProceduresIsNotNull())
			for(int x = 0; x < voConsultantProcedureCategory.getCategoryProcedures().size(); x++)
			{
				CategoryProceduresVo voCategoryProcedures = voConsultantProcedureCategory.getCategoryProcedures().get(x);
				form.cmbCategory().newRow(voCategoryProcedures.getCategory(), voCategoryProcedures.getCategory().getText(), voCategoryProcedures.getCategory().getImage(), voCategoryProcedures.getCategory().getTextColor());
			}
		
	}
	private void updateControlState()
	{
		form.btnSelect().setEnabled(form.grdItems().getSelectedRow()!=null);
	}
	
	
	private void clearScreen() 
	{
		form.cmbCategory().setValue(null);
		form.txtProcedureName().setValue(null);
		form.chkAll().setValue(null);
		updateSearchControlsState();//WDEV-12313
		form.grdItems().getRows().clear();
		
	}
	
	@Override
	protected void onImbClearClick() throws PresentationLogicException {
		
		clearScreen();
		updateControlState();
		
	}
	@Override
	protected void onImbSearchClick() throws PresentationLogicException {
		
		
		searchandList();
		updateControlState();
	}
	private void searchandList()
	{

		String[] errors = validateUIRules();
		if (errors != null && errors.length>0)
		{
			engine.showErrors(errors);
			return;
		}
		
		ProcedureLiteVoCollection results = domain.listProcedures(form.cmbCategory().getValue(), 
			form.txtProcedureName().getValue(),form.getLocalContext().getHcpFilter()); //WDEV-14740
		//TODO up
		
		
		if (results == null)
		{
			form.grdItems().getRows().clear();
			engine.showMessage("No results", "No Procedures were found", MessageButtons.OK, MessageIcon.INFORMATION);
			return;
		}
		populateGrid(results);
			
	}
	
	private void populateGrid(ProcedureLiteVoCollection procs)
	{
		form.grdItems().getRows().clear();
		if (procs == null)
			return;
		
		for (int i=0 ; i < procs.size(); i++)
		{
			ProcedureLiteVo proc = procs.get(i);
			if (proc != null )
			{
				grdItemsRow nRow = form.grdItems().getRows().newRow();
				nRow.setcolProcedureName(proc.getProcedureName());
				nRow.setValue(proc);
			}
		}
	}
	
	protected String[] validateUIRules() {
		ArrayList<String> listOfErrors = new ArrayList<String>();
		
		if (!Boolean.TRUE.equals(form.chkAll().getValue()))
		{
			if (form.cmbCategory().getValue() == null)
			{
				listOfErrors.add("Please select a category");
			}
			if (form.txtProcedureName().getValue() == null || form.txtProcedureName().getValue().length()<3)
			{
				listOfErrors.add("Please enter at least 3 characters in Procedure Name field");
			}
		}
		if (listOfErrors.size()==0)
			return null;
		String[] result = new String[listOfErrors.size()];
		listOfErrors.toArray(result);
		return result;
	}
	@Override
	protected void onBtnSelectClick() throws PresentationLogicException {
		if (form.grdItems().getSelectedRow() == null)
		{
			engine.showErrors(new String[]{"Please select a procedure"});
			return;
		}
		form.getGlobalContext().Clinical.setSelectedProcedure(form.grdItems().getValue());
		engine.close(DialogResult.OK);
		
	}
	@Override
	protected void onGrdItemsSelectionChanged()
			throws PresentationLogicException {
		updateControlState();
		
	}
	@Override
	protected void onGrdItemsSelectionCleared() throws PresentationLogicException {
		updateControlState();
		
	}
	@Override
	protected void onChkAllValueChanged() throws PresentationLogicException {
		updateSearchControlsState();
		
	}
	private void updateSearchControlsState()//WDEV-12313
	{
		form.cmbCategory().setRequired(!form.chkAll().getValue());
		form.txtProcedureName().setRequired(!form.chkAll().getValue());
		
	}
}
