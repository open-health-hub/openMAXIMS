//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.42 build 2216.26711)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.clinicalnoteslist;

import ims.alerts.PatientInfo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ClinicalNotesFilterVo;
import ims.core.vo.ClinicalNotesShortVo;
import ims.core.vo.ClinicalNotesShortVoCollection;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.MemberOfStaffVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.ClinicalNoteType;
import ims.core.vo.lookups.ClinicalNotesStatus;
import ims.core.vo.lookups.ClinicalNotingMode;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.SourceOfNote;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final int TABDISCIPLINE = 1;
	private static final int TABUSER = 2;
	private static final int TABHCP = 3;
	private static final int PATIENTLEVEL = 4;
	private static final int EPISODELEVEL = 5;
	private static final int PKEY = -149;
	private static final int HOSPNUM = -150;
	private static final int NHSN = -9;
	private static final int PPSN = -151;
	private static final int CHARTNUM = -44;
	private static final int NTPFNUM  = -439;
	private static final int SENTNUM = -624;
	private static final int DISTRICT = -904;
	
	private static final String RECORDINGHCP = "RecordingHcp";
	private static final String RECORDINGUSER = "RecordingUser";
	
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{		
		initialise();
		open();
	}

	private void initialise() 
	{	
		initializeDynamicGrid();	
		initializeTabs();
	}

	private void initializeTabs()
	{
		initializeRecordingHcp();
		initializeRecordingUser();
	}

	private void initializeRecordingUser()
	{
		form.lyrSearcFilter().tabRecordingUser().dteUserFrom().setValue(new Date().addDay(-ConfigFlag.DOM.DAILY_NOTES_LIST_NO_OF_DAYS.getValue()));
		form.lyrSearcFilter().tabRecordingUser().dteUserTo().setValue(new Date());
	}

	private void initializeRecordingHcp()
	{
		form.lyrSearcFilter().tabRecordingHcp().dteHcpFrom().setValue(new Date().addDay(-ConfigFlag.DOM.DAILY_NOTES_LIST_NO_OF_DAYS.getValue()));
		form.lyrSearcFilter().tabRecordingHcp().dteHcpTo().setValue(new Date());
	}

	private void initializeDynamicGrid()
	{
		form.dyngrdNotes().clear();
		form.dyngrdNotes().setSelectable(true);
		form.dyngrdNotes().setReadOnly(true);
		
		DynamicGridColumn iconColumn = form.dyngrdNotes().getColumns().newColumn("", true);
		iconColumn.setWidth(30);	
		iconColumn.setIdentifier(new String("ICON"));

		DynamicGridColumn correctedColumn = form.dyngrdNotes().getColumns().newColumn("", true);
		correctedColumn.setWidth(30);	
		correctedColumn.setIdentifier(new String("CORRECT"));

		DynamicGridColumn patColumn = form.dyngrdNotes().getColumns().newColumn("Patient", true);
		patColumn.setWidth(180);	
		patColumn.setIdentifier(new String("Patient"));
		
		DynamicGridColumn dateColumn = form.dyngrdNotes().getColumns().newColumn("Authoring Details", true);
		dateColumn.setWidth(150);	
		dateColumn.setIdentifier(new String("Authoring Details"));
		
		DynamicGridColumn disColumn = form.dyngrdNotes().getColumns().newColumn("Discipline", true);
		disColumn.setWidth(100);		
		disColumn.setIdentifier(new String("Discipline"));
		disColumn.setSortMode(SortMode.AUTOMATIC);
			
		DynamicGridColumn statusColumn = form.dyngrdNotes().getColumns().newColumn("Status", true);
		statusColumn.setWidth(100);		
		statusColumn.setIdentifier(new String("Status"));
		statusColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn notesColumn = form.dyngrdNotes().getColumns().newColumn("Note", true);
		notesColumn.setWidth(-1);	
		notesColumn.setIdentifier(new String("Note"));
	}

	private void updateControlsState()
	{
		clearContextMenu();
		
		if (form.dyngrdNotes().getSelectedRow() != null && 
				form.dyngrdNotes().getSelectedRow().getValue() != null)
		{
			form.getContextMenus().getClinicalNotingEDITItem().setVisible(true);
			
			//If its a transcribed record, a non-HCP user and has been moved on in status make the screen R/O fo the logged in use.
			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull()
				&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsTranscribedIsNotNull() 
			//	&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsTranscribed().booleanValue()
				&& domain.getHcpLiteUser() == null)
			{
				if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() 
					&& ! form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT)
					&& ! form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION) )
				{
					form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
				}
			}
			
			//form.getContextMenus().getClinicalNotingEDITItem().setVisible(true);
			form.getContextMenus().getClinicalNotingVIEWItem().setVisible(true);
			
			if (form.dyngrdNotes().getSelectedRow().getValue() instanceof ClinicalNotesShortVo)
			{
				ClinicalNotesShortVo voNote = (ClinicalNotesShortVo)form.dyngrdNotes().getSelectedRow().getValue();
				Hcp voHcp = (Hcp) domain.getHcpUser();
			
				if (voNote.getNoteTypeIsNotNull() &&
						!(voNote.getNoteType().equals(ClinicalNoteType.DISCHARGENOTE) ||
								voNote.getNoteType().equals(ClinicalNoteType.SUMMARYATADMISSION)))
								{
									if (rulesForReviewContexMenus(voNote, voHcp))
										form.getContextMenus().getClinicalNotingREVIEWItem().setVisible(true);
									
									if (voNote.getReviewingDateTimeIsNotNull() || voNote.getReviewingHCPIsNotNull())
										form.getContextMenus().getClinicalNotingREVIEWItem().setVisible(false);
					
									if (rulesForValidationContexMenus(voNote, voHcp))
									{
											form.getContextMenus().getClinicalNotingVALIDATEItem().setVisible(true);
											form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
									}
					
									if (rulesForCorrectContexMenus(voNote))
											form.getContextMenus().getClinicalNotingEDITItem().setText("Correct");
									else
										form.getContextMenus().getClinicalNotingEDITItem().setText("Edit");
								}
				else
				{
					form.getContextMenus().hideAllClinicalNotingMenuItems();
				}
			}
		}
	}

	private boolean rulesForReviewContexMenus (ClinicalNotesShortVo voNote, Hcp voHcp)
	{
		if (voNote.getForReviewDisciplineIsNotNull() 
			&& voNote.getSourceOfNoteIsNotNull()
				&& voHcp != null
					&& voHcp.getHcpTypeIsNotNull()
						&& voNote.getForReviewDiscipline().equals(voHcp.getHcpType()) )
							return true;
		return false;
	}
	
	private boolean rulesForValidationContexMenus (ClinicalNotesShortVo voNote, Hcp voHcp)
	{
		if (voNote.getDisciplineIsNotNull() 
			&& voHcp != null
				&& voHcp.getHcpTypeIsNotNull()
					&& voNote.getDiscipline().equals(voHcp.getHcpType()) 
						&& voNote.getCurrentStatusIsNotNull()
							&& voNote.getCurrentStatus().getStatusIsNotNull()
								&& voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION) )
									return true;
		return false;
	}
	
	private boolean rulesForCorrectContexMenus (ClinicalNotesShortVo voNote)
	{
		if ( voNote.getCurrentStatusIsNotNull()
			&& voNote.getCurrentStatus().getStatusIsNotNull()
				&& voNote.getAuthoringInfoIsNotNull()
					&& voNote.getAuthoringInfo().getAuthoringHcpIsNotNull()
						&& (voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.ACTIVE) || voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.CORRECTED) )
							&& domain.getHcpLiteUser() != null 
								&& /*domain.getHcpLiteUser().equals(voNote.getAuthoringInfo().getAuthoringHcp())*/ 
									testDiscipline(voNote))
										return true;
		return false;
	}
	
	private boolean testDiscipline(ClinicalNotesShortVo voNote)
	{
		MemberOfStaffVo fullVo = null;
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo)domain.getMosUser();
		if (mos != null)
			fullVo = domain.getMemberOfStaff(mos);
		
		if (fullVo != null)
		{
			if (fullVo.getHcpIsNotNull())
			{
				if (fullVo.getHcp().getHcpTypeIsNotNull())
				{
					if (voNote.getAuthoringInfoIsNotNull() &&
							voNote.getAuthoringInfo().getAuthoringHcpIsNotNull() &&
								voNote.getAuthoringInfo().getAuthoringHcp().getHcpTypeIsNotNull())
					{
						if (voNote.getAuthoringInfo().getAuthoringHcp().getHcpType().equals(fullVo.getHcp().getHcpType()))
							return true;
					}
				}
			}
		}
		return false;
	}
	
	private void clearContextMenu()
	{
		form.getContextMenus().getClinicalNotingADDItem().setVisible(false);
		form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
		form.getContextMenus().getClinicalNotingVIEWItem().setVisible(false);
		form.getContextMenus().getClinicalNotingREVIEWItem().setVisible(false);
		form.getContextMenus().getClinicalNotingVALIDATEItem().setVisible(false);
		form.getContextMenus().getClinicalNotingSTATUS_HISTItem().setVisible(false);
	}

	protected void onQmbUserRecTextSubmited(String value) throws PresentationLogicException 
	{
		form.lyrSearcFilter().tabRecordingUser().qmbUserRec().clear();
		
		MemberOfStaffShortVo filter = new MemberOfStaffShortVo();
		filter.setName(new PersonName());
		filter.getName().setSurname(value);

		MemberOfStaffShortVoCollection collMOS = domain.listMemberOfStaffShort(filter);
		if(collMOS == null || collMOS.size() == 0)
		{
			engine.showMessage("No MOS found matching the search criteria");
			return;
		}
		
		for(int i=0;i<collMOS.size();i++)
		{
			form.lyrSearcFilter().tabRecordingUser().qmbUserRec().newRow(collMOS.get(i), collMOS.get(i).toString());
		}
		
		if(collMOS.size() == 1)
		{
			form.lyrSearcFilter().tabRecordingUser().qmbUserRec().setValue(collMOS.get(0));
		}
		else
			form.lyrSearcFilter().tabRecordingUser().qmbUserRec().showOpened();
		
	}

	private HcpCollection listHcps(String text) 
	{
		HcpFilter filter = new HcpFilter();
		filter.setQueryName(new PersonName());
		filter.getQueryName().setSurname(text);
		
		return domain.listHcp(filter);
	}

	protected void onQmbHcpRecTextSubmited(String value) throws PresentationLogicException 
	{
		form.lyrSearcFilter().tabRecordingHcp().qmbHcpRec().clear();
		
		HcpCollection voCollHcps = listHcps(value);
		if(voCollHcps == null || voCollHcps.size() == 0)
		{
			engine.showMessage("No HCP found matching the search criteria");
			return;
		}
		
		for(int i=0;i<voCollHcps.size();i++)
		{
			form.lyrSearcFilter().tabRecordingHcp().qmbHcpRec().newRow(voCollHcps.get(i), voCollHcps.get(i).toString());
		}
		
		if(voCollHcps.size() == 1)
		{
			form.lyrSearcFilter().tabRecordingHcp().qmbHcpRec().setValue(voCollHcps.get(0));
		}
		else
			form.lyrSearcFilter().tabRecordingHcp().qmbHcpRec().showOpened();		
	}
	
	private void search(int iTab) 
	{
		ClinicalNotesFilterVo filter = new ClinicalNotesFilterVo();
		boolean bFilterSet = false;
		
		form.getGlobalContext().Core.setClinicalNotesShort(null);
		updateControlsState();

		switch(iTab)
		{
			case TABHCP:
				bFilterSet = setFilterForTabHcp(filter);
			break;
			case TABUSER:
				bFilterSet = setFilterForTabUser(filter);
			break;
		}
		
		if(bFilterSet)
			doSearch(iTab, filter);
	}

	private void doSearch(int iTab, ClinicalNotesFilterVo filter)
	{
		ClinicalNotesShortVoCollection voCollNotes = domain.listClinicalNote(filter);
		form.dyngrdNotes().getRows().clear();
			
		if(voCollNotes == null || voCollNotes.size() == 0)
		{
			engine.showMessage("No matching records found");
			form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());
			return;
		}
		
		for(int i=0;i<voCollNotes.size();i++)
		{
			DynamicGridRow row = form.dyngrdNotes().getRows().newRow();
			
			if(iTab != TABDISCIPLINE && getCol("Patient") != null &&
					voCollNotes.get(i).getCareContextIsNotNull() &&
						voCollNotes.get(i).getCareContext().getEpisodeOfCareIsNotNull() &&
							voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpellIsNotNull() &&
								voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatientIsNotNull())
			{
				setColPatient(voCollNotes, i, row);	
			}
			
			if(voCollNotes.get(i).getAuthoringInfoIsNotNull())
			{
				setColAuthoringDetails(voCollNotes, i, row);					
			}

			if (voCollNotes.get(i).getForReviewDisciplineIsNotNull() 
					&& voCollNotes.get(i).getSourceOfNoteIsNotNull()
						&& ! voCollNotes.get(i).getReviewingDateTimeIsNotNull()
							&& ! voCollNotes.get(i).getReviewingHCPIsNotNull())
			{
				setColNeedReviewed(row, voCollNotes, i);					
			}
			
			if (voCollNotes.get(i).getIsCorrectedIsNotNull() 
				&& voCollNotes.get(i).getIsCorrected().booleanValue())
			{
				setColCorrect(row);					
			}

			if(voCollNotes.get(i).getDisciplineIsNotNull())
			{
				setColDiscipline(voCollNotes, i, row);					
			}
			
			if(voCollNotes.get(i).getCurrentStatusIsNotNull() && voCollNotes.get(i).getCurrentStatus().getStatusIsNotNull() ) 
			{
				setColStatus(voCollNotes, i, row);
			}
			
			DynamicGridColumn col = getCol("Note");
			
			if(col == null)
				throw new DomainRuntimeException("No column for Identifier");

			DynamicGridCell noteCell = row.getCells().newCell( col, DynamicCellType.HTMLVIEW);
			noteCell.setValue(voCollNotes.get(i).getClinicalNote());

			row.setBackColor(Color.Bisque);
			row.setValue(voCollNotes.get(i));
		}
			
		form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());
	}

	private void setColPatient(ClinicalNotesShortVoCollection voCollNotes, int i, DynamicGridRow row)
	{
		DynamicGridColumn col;
		col = getCol("Patient");

		if(col == null)
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell patientCell = row.getCells().newCell(col, DynamicCellType.WRAPTEXT);
		
		//Get value from DISPLAY_PATID_TYPE flag
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
	
		if (voCollNotes.get(i).getCareContextIsNotNull() &&
				voCollNotes.get(i).getCareContext().getEpisodeOfCareIsNotNull() &&
					voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpellIsNotNull() &&
						voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatientIsNotNull())
		{
		
			String patient = (voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getNameIsNotNull() ? voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getName().toString() : "") + "\nDOB: "+
				(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getDobIsNotNull() ? voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getDob().toString() : "Unknown") + 
					displayPatientInfo(dispIdType.getID(), voCollNotes, i);		

			patientCell.setValue(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getPatientInfo());	
			patientCell.setValue(patient);
			patientCell.setTooltip(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getPatientInfo());
			patientCell.setIdentifier(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient());
		}
	}
	
	
	private String displayPatientInfo(int dispIdTypeValue, ClinicalNotesShortVoCollection voCollNotes, int i) 
	{
		String row = "";
		
		if (voCollNotes.get(i).getCareContextIsNotNull() &&
				voCollNotes.get(i).getCareContext().getEpisodeOfCareIsNotNull() &&
					voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpellIsNotNull() &&
						voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatientIsNotNull())
		{
			switch(dispIdTypeValue)
			{
				case PKEY:
					row = "\nPatient Key: "+
							(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getPkey() != null ? voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getPkey().getValue().toString() : "" );
				break;	
				case HOSPNUM:
					row = "\nHospital No.: "+
							(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getHospnum() != null ? voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getHospnum().getValue().toString() : "" );
				break;
				case NHSN:
					row = "\nNHS Number.: "+
							(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getNhsn() != null ? voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getNhsn().getValue().toString() : "" );
				break;
				case PPSN:
					row = "\nPPSN: "+
							(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getPpsn() != null ? voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getPpsn().getValue().toString() : "" );
				break;
				case CHARTNUM:
					row = "\nChart Number: "+
							(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getChartnum() != null ? voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getChartnum().getValue().toString() : "" );
				break;
				case NTPFNUM:
					row = "\nNTPF No.: "+
							(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getNtpfnum() != null ? voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getNtpfnum().getValue().toString() : "" );	
				break;
				case SENTNUM:
					row = "\nSentence Number: "+
							(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getSentnum() != null ? voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getSentnum().getValue().toString() : "" );
				break;
				case DISTRICT:
					row = "\nDistrict Number: "+
							(voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getDistrict() != null ? voCollNotes.get(i).getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getDistrict().getValue().toString() : "" );
				break;
			}
		}
		
		return row;
	}

	private void setColStatus(ClinicalNotesShortVoCollection voCollNotes, int i, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Status");
		
		if(col == null)
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell statusCell = row.getCells().newCell(col, DynamicCellType.STRING);
		statusCell.setValue(voCollNotes.get(i).getCurrentStatus().getStatus().getText());
	}

	private void setColDiscipline(ClinicalNotesShortVoCollection voCollNotes, int i, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Discipline");
		
		if(col == null)
			throw new DomainRuntimeException("No column for Identifier");
		
		DynamicGridCell disCell = row.getCells().newCell( col, DynamicCellType.STRING);
		disCell.setValue(voCollNotes.get(i).getDiscipline().getText());
	}

	private void setColCorrect(DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("CORRECT");

		if(col == null)
			throw new DomainRuntimeException("No column for CORRECT");

		DynamicGridCell correctCell = row.getCells().newCell(col, DynamicCellType.IMAGE);
		correctCell.setValue(form.getImages().Core.CareSpell);
	}

	private void setColNeedReviewed(DynamicGridRow row, ClinicalNotesShortVoCollection voCollNotes, int i)
	{
		DynamicGridColumn col = getCol("ICON");
		
		if(col == null)
			throw new DomainRuntimeException("No column for ICON");

		DynamicGridCell iconCell = row.getCells().newCell(col, DynamicCellType.IMAGE);
	
		StringBuffer value = new StringBuffer();

		if (voCollNotes.get(i).getForReviewDisciplineIsNotNull() &&
				voCollNotes.get(i).getSourceOfNoteIsNotNull())
		{
				value.append("Review Discipline: " + voCollNotes.get(i).getForReviewDiscipline().toString().toUpperCase());
		}
		
		iconCell.setTooltip(value.toString());
		iconCell.setValue(form.getImages().Admin.ClinicalTeam);
	}

	private void setColAuthoringDetails(ClinicalNotesShortVoCollection voCollNotes, int i, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Authoring Details");
		
		if(col == null)
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell dateCell = row.getCells().newCell(col, DynamicCellType.WRAPTEXT);
		StringBuffer value = new StringBuffer();
		
		if(voCollNotes.get(i).getAuthoringInfo().getAuthoringHcpIsNotNull())
			value.append("HCP: " + voCollNotes.get(i).getAuthoringInfo().getAuthoringHcp().toString());
		
		if(voCollNotes.get(i).getAuthoringInfo().getAuthoringDateTimeIsNotNull())
		{
			if(value.length() > 0)
				value.append("\n");
			value.append("Date:" + voCollNotes.get(i).getAuthoringInfo().getAuthoringDateTime().toString());
		}
		
		dateCell.setValue(value.toString());
	}

	private boolean setFilterForTabUser(ClinicalNotesFilterVo filter)
	{
		if (form.lyrSearcFilter().tabRecordingUser().qmbUserRec().getValue() == null)
		{
			engine.showMessage("Recording User is mandatory for a search. Please select one and search again.");
			return false;
		}
		filter.setRecordingUser(form.lyrSearcFilter().tabRecordingUser().qmbUserRec().getValue());
		DateTime dateFrom = new DateTime(form.lyrSearcFilter().tabRecordingUser().dteUserFrom().getValue(), null); 
		filter.setDateFrom(dateFrom);
		DateTime dateTo = new DateTime(form.lyrSearcFilter().tabRecordingUser().dteUserTo().getValue(), null); 
		filter.setDateTo(dateTo);
		
		if (form.lyrSearcFilter().tabRecordingUser().chkRecValidation().getValue())
			filter.setStatus(ClinicalNotesStatus.PREVALIDATION);
		
		return true;
	}

	private boolean setFilterForTabHcp(ClinicalNotesFilterVo filter)
	{
		if (form.lyrSearcFilter().tabRecordingHcp().qmbHcpRec().getValue() == null)
		{
			engine.showMessage("Authoring HCP is mandatory for a search. Please select one and search again.");
			return false;
		}
		filter.setAuthoringHCP(form.lyrSearcFilter().tabRecordingHcp().qmbHcpRec().getValue());
		DateTime dateFrom = new DateTime(form.lyrSearcFilter().tabRecordingHcp().dteHcpFrom().getValue(), null); 
		filter.setDateFrom(dateFrom);
		DateTime dateTo = new DateTime(form.lyrSearcFilter().tabRecordingHcp().dteHcpTo().getValue(), null); 
		filter.setDateTo(dateTo);
		filter.setStatus(form.lyrSearcFilter().tabRecordingHcp().cmbHcpStatus().getValue());
		
		if (form.lyrSearcFilter().tabRecordingHcp().chkAuthValidation().getValue())
			filter.setStatus(ClinicalNotesStatus.PREVALIDATION);
		
		return true;
	}
	
	private DynamicGridColumn getCol(String identifier) 
	{
		return form.dyngrdNotes().getColumns().getByIdentifier(identifier);
	}

	protected void onDyngrdNotesRowSelectionChanged(DynamicGridRow row) 
	{
		selectDynamicRow(row);	
	}

	private void selectDynamicRow(DynamicGridRow row) 
	{
		if(row == null)
			return;
		
			DynamicGridColumn col = getCol("Patient");
			DynamicGridCell cell =  row.getCells().get(col);
			
			if(cell != null)
			{
				Object value = cell.getIdentifier();
				if(value instanceof PatientShort)
				{		
					PatientShort voPatShort = (PatientShort)value;
					Patient voPatient;
					voPatient = domain.getPatient(voPatShort);
					
					form.getGlobalContext().Core.setPatientShort(voPatShort);
					//engine.setPatientInfo(voPatShort.getPatientInfo());

					//displayPatientInfoIcon				
					engine.clearAlertsByType(PatientInfo.class);
					engine.addAlert(new PatientInfo(voPatient.getPatientInfoButtonText()));
					
					form.getGlobalContext().Core.setCurrentClinicalContact(null);
				}
			}
					
		ClinicalNotesShortVo voClinNote = (ClinicalNotesShortVo)form.dyngrdNotes().getSelectedRow().getValue();
		
		if (voClinNote.getClinicalContact() != null)
			form.getGlobalContext().Core.setCurrentClinicalContact(domain.getCurrentClinicalContact(voClinNote.getClinicalContact()));
		else if (voClinNote.getCareContextIsNotNull())
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCurrentCareContext(voClinNote.getCareContext()));

		checkForClinicalNoteVoForClinicalContact();
		form.getGlobalContext().Core.setClinicalNotesShort((ClinicalNotesShortVo) form.dyngrdNotes().getValue());

		//WDEV-2511 
		if (domain.getMosUser() == null)
		{
			clearContextMenu();
			return;
		}
		
		form.getGlobalContext().Clinical.setCurrentClinicalNote(domain.getClinicalNote((ClinicalNotesShortVo)form.dyngrdNotes().getValue()));
		if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsCorrectedIsNotNull()
			&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsCorrected().booleanValue())
		{
			form.getContextMenus().getClinicalNotingSTATUS_HISTItem().setVisible(true);
			form.getContextMenus().getClinicalNotingSTATUS_HISTItem().setText("View Note Corrections");
		}
		
		form.getContextMenus().getClinicalNotingEDITItem().setVisible(true);
	//	form.getContextMenus().getClinicalNotingEDITItem().setText("Edit");
		//If its a transcribed record, a non-HCP user and has been moved on in status make the screen R/O fo the logged in use.
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
		{
			
			
					if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull())
					{
						if (domain.getHcpLiteUser() == null
								&& ! form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT)
								&& ! form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION) )
						{
							form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
						}
						else if (ClinicalNotesStatus.DRAFT.equals(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus()) 
								&& !(form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfoIsNotNull()
								&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcpIsNotNull()
								&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcp().equals(domain.getHcpLiteUser())))
						{
							form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
						}
					
					
		
					else if ((ClinicalNoteType.DISCHARGENOTE.equals(form.getGlobalContext().Clinical.getCurrentClinicalNote().getNoteType()) 
							|| ClinicalNoteType.SUMMARYATADMISSION.equals(form.getGlobalContext().Clinical.getCurrentClinicalNote().getNoteType())))
					{
						form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
					}
					}
		}
		
		checkForDiscipline(voClinNote);		
	}

	private void checkForDiscipline(ClinicalNotesShortVo voClinNote)
	{
		MemberOfStaffShortVo mos = null;
		if (getDisciplineForLoggedInUser(form.getGlobalContext().Clinical.getCurrentClinicalNote()) != null)
			mos = getDisciplineForLoggedInUser(domain.getClinicalNote((ClinicalNotesShortVo)form.dyngrdNotes().getValue()));
		else
			engine.showMessage("No discipline for logged in user");

		Hcp voHcp = (Hcp) domain.getHcpUser();
		
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() )
			{
				if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() &&
						form.getGlobalContext().Clinical.getCurrentClinicalNote().getDisciplineIsNotNull() &&
							mos != null &&
								mos.getHcpIsNotNull())
						{
							if (!domain.getClinicalNote(voClinNote).getDiscipline().equals(mos.getHcp().getHcpType()))
							{
								form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
							}
							
							
							if (rulesForValidationContexMenus(voClinNote, voHcp))
							{
								form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
							}
							
							if (ClinicalNoteType.DISCHARGENOTE.equals(form.getGlobalContext().Clinical.getCurrentClinicalNote().getNoteType()) ||
									ClinicalNoteType.SUMMARYATADMISSION.equals(form.getGlobalContext().Clinical.getCurrentClinicalNote().getNoteType()))
							{
								form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
							}
						}
			}
	}	
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		int iTab=-1;
		
		
		if(form.lyrSearcFilter().tabRecordingHcp().isVisible())
			iTab = TABHCP;
		if(form.lyrSearcFilter().tabRecordingUser().isVisible())
			iTab = TABUSER;
		
		if(iTab != -1)
			search(iTab);
		
		checkForClinicalNoteVoForClinicalContact();
	}
	
	private void open()
	{
		form.lyrSearcFilter().showtabRecordingHcp();
	}

	private void checkForClinicalNoteVoForClinicalContact() 
	{
		form.getLocalContext().setClinicalNoteVoForClinicalContact(null);
		form.getGlobalContext().Clinical.setReturnToFormMode(null);
		
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			form.getLocalContext().setClinicalNoteVoForClinicalContact(domain.getClinicalNotesForContact(form.getGlobalContext().Core.getCurrentClinicalContact()));
		else if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			form.getLocalContext().setClinicalNoteVoForClinicalContact(domain.getClinicalNotesForCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		
		updateControlsState();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNoting.ADD :
				newClinicalNote();
				break;
			case GenForm.ContextMenus.ClinicalNoting.EDIT :
				editClinicalNote();
				break;
			case GenForm.ContextMenus.ClinicalNoting.VIEW :
				viewClinicalNote();
				break;
			case GenForm.ContextMenus.ClinicalNoting.REVIEW :
				reviewClinicalNote();
				break;
			case GenForm.ContextMenus.ClinicalNoting.VALIDATE :
				validateClinicalNote();
				break;
			case GenForm.ContextMenus.ClinicalNoting.STATUS_HIST :
				viewStatusHistory();
				break;
				
			default :
		}
	}

	private void viewStatusHistory() 
	{
		engine.open(form.getForms().Clinical.ClinicalNoteHistoryDialog);
	}

	private void validateClinicalNote()
	{
		selectClinicalNoteInGlobalContext();
		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.VALIDATE);
		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE) )
		{
			engine.open(form.getForms().Therapies.SOAPNoteDialog);
		}
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.TLT_NOTE) )
		{
			engine.open(form.getForms().Clinical.TherapiesNoteDialog);
		}
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNoteIsNotNull()
			&& form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNote().booleanValue())
		{
			if ( form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP) )
					engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);			
		
			if ( form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP) )
					engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
		}
		else
			engine.open(form.getForms().Clinical.ClinicalNotesDialog);
	}

	private void reviewClinicalNote() 
	{
		selectClinicalNoteInGlobalContext();
		
		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.REVIEW);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE) )
					engine.open(form.getForms().Therapies.SOAPNoteDialog);
			
		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.TLT_NOTE) )
					engine.open(form.getForms().Clinical.TherapiesNoteDialog);
			
		if ( form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
			&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP) )
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
		
		if ( form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
			&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP) )
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
		
		if ( form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
			&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALCLINICALNOTE) )
				engine.open(form.getForms().Clinical.ClinicalNotesDialog);
	}

	private void editClinicalNote() 
	{
		selectClinicalNoteInGlobalContext();
		
		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.UPDATE);
		
		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
			&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE) )
				engine.open(form.getForms().Therapies.SOAPNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
			&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.TLT_NOTE) )
				engine.open(form.getForms().Clinical.TherapiesNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNoteIsNotNull()
			&& form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNote().booleanValue())
		{
			if ( form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP) )
						engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
					
			if ( form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP) )
						engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
		}
		else
			engine.open(form.getForms().Clinical.ClinicalNotesDialog);
	}

	private void selectClinicalNoteInGlobalContext()
	{
		if (form.dyngrdNotes().getSelectedRow() != null)
		{
			form.getGlobalContext().Core.setClinicalNotesShort((ClinicalNotesShortVo)form.dyngrdNotes().getSelectedRow().getValue());
			form.getGlobalContext().Clinical.setCurrentClinicalNote(domain.getClinicalNote((ClinicalNotesShortVo)form.dyngrdNotes().getSelectedRow().getValue()));
		}
	}

	private void viewClinicalNote() 
	{
		
		if (form.dyngrdNotes().getSelectedRow().getValue() != null)
		{
			selectClinicalNoteInGlobalContext();
			
			form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.VIEW);
			form.getGlobalContext().Core.setClinicalNotingMode(null);

			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE) )
					engine.open(form.getForms().Therapies.SOAPNoteDialog);
			else if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.TLT_NOTE) )
					engine.open(form.getForms().Clinical.TherapiesNoteDialog);
			else if (form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNoteIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNote().booleanValue())
			{
				if ( form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
					&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP) )
						engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
					
				if ( form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull()
					&& form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP) )
						engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
				
			}
			else
			{
				form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.VIEW);
				engine.open(form.getForms().Clinical.ClinicalNotesDialog);
			}
		}
	}

	private void newClinicalNote() 
	{
		form.getGlobalContext().Core.setClinicalNotesShort(null);
		form.getGlobalContext().Clinical.setCurrentClinicalNote(null);
		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);

		engine.open(form.getForms().Clinical.ClinicalNotesDialog);
	}
	
	protected void onlyrSearcFilterTabChanged(LayerBridge tab) 
	{
		clearTabsControls();
		
	}

	protected void onImbClearHcpClick() throws PresentationLogicException
	{
		clearTabsControls();
		
	}

	protected void onImbClearUserClick() throws PresentationLogicException
	{
		clearTabsControls();
	}
	
	private void clearTabsControls()
	{
		form.dyngrdNotes().getRows().clear();
		
		if (form.lyrSearcFilter().tabRecordingHcp().isVisible())
		{
			form.lyrSearcFilter().tabRecordingHcp().qmbHcpRec().setValue(null);
			form.lyrSearcFilter().tabRecordingHcp().cmbHcpStatus().setValue(null);
			form.lyrSearcFilter().tabRecordingHcp().chkAuthValidation().setValue(false);
			form.lyrSearcFilter().tabRecordingHcp().dteHcpFrom().setValue(null);			// WDEV-12308
			form.lyrSearcFilter().tabRecordingHcp().dteHcpTo().setValue(null);				// WDEV-12308
			engine.setPatientInfo("Please enter Authoring HCP for a search");
		}
		
		if (form.lyrSearcFilter().tabRecordingUser().isVisible())
		{
			form.lyrSearcFilter().tabRecordingUser().qmbUserRec().setValue(null);
			form.lyrSearcFilter().tabRecordingUser().chkRecValidation().setValue(false);
			form.lyrSearcFilter().tabRecordingUser().dteUserFrom().setValue(null);			// WDEV-12308
			form.lyrSearcFilter().tabRecordingUser().dteUserTo().setValue(null);			// WDEV-12308
			engine.setPatientInfo("Please enter Recording User for a search");
		}
		
		//Clear the selected patient information in the Engine
		form.getGlobalContext().Core.setPatientShort(null);		
		engine.clearAlerts();
		
		form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());	
		updateControlsState();
	}

	protected void onImbSearchHcpClick() throws PresentationLogicException
	{
		form.dyngrdNotes().setSelectedRow(null);
		if (checkForMandatoryFields())
			search(TABHCP);
	}

	protected void onImbSearchUserClick() throws PresentationLogicException
	{
		form.dyngrdNotes().setSelectedRow(null);
		if (checkForMandatoryFields())
			search(TABUSER);
	}
	
	private boolean checkForMandatoryFields()
	{
		if (form.lyrSearcFilter().tabRecordingHcp().isVisible())
		{
			if (form.lyrSearcFilter().tabRecordingHcp().qmbHcpRec().getValue() == null)
			{
				engine.showMessage("Authoring HCP is mandatory for a search. Please select one and search again.");
				form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());
				return false;
			}
		}
		
		if (form.lyrSearcFilter().tabRecordingUser().isVisible())
		{
			if (form.lyrSearcFilter().tabRecordingUser().qmbUserRec().getValue() == null)
			{
				engine.showMessage("Recording User is mandatory for a search. Please select one and search again.");
				form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());
				return false;
			}
		}
		
		return true;
	}
	
	private MemberOfStaffShortVo getDisciplineForLoggedInUser(ClinicalNotesVo clinicalNotesVo)
	{
		MemberOfStaffVo fullVo = null;
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo)domain.getMosUser();
		if (mos != null)
			fullVo = domain.getMemberOfStaff(mos);

		if (fullVo != null)
		{
			if (fullVo.getHcpIsNotNull() && fullVo.getHcp() instanceof MedicVo)
			{
				MedicVo voMedic = (MedicVo)fullVo.getHcp();
				if (voMedic.getHcpTypeIsNotNull())
					clinicalNotesVo.setDiscipline(voMedic.getHcpType());
				else
				{
					engine.showMessage("Please select a Discipline type for the logged in user.");
					return null;
				}
			}
			/*else
			{
				if (form.customControlAuthoring().getValue().getAuthoringHcpIsNotNull())
					clinicalNotesVo.setDiscipline(form.customControlAuthoring().getValue().getAuthoringHcp().getHcpType());
				else
				{
					engine.showMessage("No Discipline is available. Please choose an authoring user.");
					return null;
				}
			}*/
		}
		else
		{
			engine.showMessage("Member of Staff is Null.");
			return null;
		}
		return mos;
	}
}
