//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sinead McDermott using IMS Development Environment (version 1.39 build 2165.17140)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.outpatientstreatmentplan;

import ims.clinical.vo.OutpatientNotesOutcomeVo;
import ims.clinical.vo.SoapNoteVo;
import ims.clinical.vo.lookups.OpdFollowUp;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}

	private void open()
	{
		form.setMode(FormMode.VIEW);
		clearScreen();
		
		OutpatientNotesOutcomeVo voOutpatientNotesOutcome = domain.getLastOutpatientNotesOutcome(form.getGlobalContext().Core.getCurrentCareContext());
		form.getLocalContext().setSelectedItem(voOutpatientNotesOutcome);
		
		if(voOutpatientNotesOutcome == null)
		{
			form.btnNew().setVisible(true);
			form.btnUpdate().setVisible(false);
		}
		else
		{
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(true);
			
			displayRecord(voOutpatientNotesOutcome);
		}
		
		//WDEV-1236
		checkReturnToForm();
		
		updateButtonsStatus();
	}

	private void checkReturnToForm() 
	{
		//If we have been away form this form and are back....check to see if there is anything to diaplay
		if (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull()
			&& form.getGlobalContext().Clinical.getReturnToFormName().equals(form.getForms().Clinical.OutPatientsTreatmentPlan))
		{
			if (form.getGlobalContext().Clinical.getReturnToFormCDIDescriptionIsNotNull())
			{
				if (engine.getPreviousNonDialogFormName() != null )
				{
					StringBuffer sb = new StringBuffer();
					sb.append(form.richTextObjective().getValue());
					sb.append(" CDI Description returned : ");
					sb.append(form.getGlobalContext().Clinical.getReturnToFormCDIDescription());
					
					if ( (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.DiagnosisComplications))
						|| (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientProblems)) ) 
						form.richTextObjective().setValue(sb.toString());
					
					if ( (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.Procedures))
						|| (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.MedicationOnAdmission))
						|| (engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.MyOrder)) ) 
						form.richTextPlan().setValue(sb.toString());
				}
			}
			if (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() && form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT))
				form.setMode(FormMode.EDIT);

			form.getGlobalContext().Clinical.setReturnToFormCDIDescription(null);
			form.getGlobalContext().Clinical.setReturnToFormMode(null);
			form.getGlobalContext().Clinical.setReturnToFormName(null);
		}
	}

	private void displayRecord(OutpatientNotesOutcomeVo voOutpatientNotesOutcome)
	{
		if(voOutpatientNotesOutcome.getClinicalNoteIsNotNull() 
			&& voOutpatientNotesOutcome.getClinicalNote().getClinicalNoteIsNotNull()
			&& voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getAuthoringInfoIsNotNull()	)
		{
			AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
			voAuthoring.setAuthoringDateTime(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getAuthoringInfo().getAuthoringDateTime());
			
			if(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getAuthoringInfo().getAuthoringHcpIsNotNull())
				voAuthoring.setAuthoringHcp(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getAuthoringInfo().getAuthoringHcp());
			
			//wdev-12315
			form.customControlAuthoringInfo().setValue(voAuthoring);
			//--------
		}
		
		form.richTextInstructions().setValue(voOutpatientNotesOutcome.getInstructionNextClinic());

		if(voOutpatientNotesOutcome.getClinicalNoteIsNotNull())
		{
			form.richTextObjective().setValue(voOutpatientNotesOutcome.getClinicalNote().getObjectiveNote());
			form.richTextPlan().setValue(voOutpatientNotesOutcome.getClinicalNote().getPlanNote());
		}
		
		form.cmbFollowUp().setValue(voOutpatientNotesOutcome.getOutcome());
		form.cmbReview().setValue(voOutpatientNotesOutcome.getReviewinUnits());
		form.intReview().setValue(voOutpatientNotesOutcome.getReviewIn());
	}

	private void clearScreen()
	{
		form.customControlAuthoringInfo().setValue(null);
		form.richTextInstructions().setValue(null);
		form.richTextObjective().setValue(null);
		form.richTextPlan().setValue(null);
		
		form.cmbFollowUp().setValue(null);
		form.cmbReview().setValue(null);
		form.intReview().setValue(null);
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	private boolean save()
	{
		OutpatientNotesOutcomeVo voOutpatientNotesOutcome = form.getLocalContext().getSelectedItem();

		if(voOutpatientNotesOutcome == null)
			voOutpatientNotesOutcome = new OutpatientNotesOutcomeVo();
		
		if(populateDataFromScreen(voOutpatientNotesOutcome) == false)
			return false;
		
		if ( (voOutpatientNotesOutcome.getCareContext() == null) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()))
			voOutpatientNotesOutcome.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		String[] errors = voOutpatientNotesOutcome.validate(validateUIRules());		//wdev-12431
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			voOutpatientNotesOutcome = domain.saveOutpatientNotesOutcome(voOutpatientNotesOutcome);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("Unique constraint violation occured: " + e.toString());
			return false;
		}
		
		return true;
	}
	//wdev-12431
	private String[] validateUIRules()
    {
		if(form.intReview() != null && form.intReview().getValue() != null && form.intReview().getValue() > 0)
			if(form.cmbReview() == null || form.cmbReview().getValue() == null)
		    	return new String[]{"Review in period is mandatory"};
			else
				return null;
		
		return null;
    	
    }

	private boolean populateDataFromScreen(OutpatientNotesOutcomeVo voOutpatientNotesOutcome)
	{
		if(form.customControlAuthoringInfo().getValue() == null || form.customControlAuthoringInfo().getValue().getAuthoringHcp() == null || form.customControlAuthoringInfo().getValue().getAuthoringDateTime() == null) //wdev-12315
		{
			engine.showMessage("The Authoring HCP and Authoring Date/Time are mandatory !");	//wdev-12315
			return false;
		}
		
		if(voOutpatientNotesOutcome.getClinicalNote() == null)
			voOutpatientNotesOutcome.setClinicalNote(new SoapNoteVo());
		
		if(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote() == null)
			voOutpatientNotesOutcome.getClinicalNote().setClinicalNote(new ClinicalNotesVo());
		
		AuthoringInformationVo voAuthor = new AuthoringInformationVo();
		voAuthor.setAuthoringDateTime(form.customControlAuthoringInfo().getValue().getAuthoringDateTime());
		voAuthor.setAuthoringHcp(form.customControlAuthoringInfo().getValue().getAuthoringHcp());
		voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setAuthoringInfo(voAuthor);

		voOutpatientNotesOutcome.getClinicalNote().setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		
		if ( (voOutpatientNotesOutcome.getClinicalNote().getCareContext() == null) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()))
			voOutpatientNotesOutcome.getClinicalNote().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		voOutpatientNotesOutcome.setInstructionNextClinic(form.richTextInstructions().getValue());
		voOutpatientNotesOutcome.getClinicalNote().setObjectiveNote(form.richTextObjective().getValue());
		voOutpatientNotesOutcome.getClinicalNote().setPlanNote(form.richTextPlan().getValue());
		
		voOutpatientNotesOutcome.setOutcome(form.cmbFollowUp().getValue());
		voOutpatientNotesOutcome.setReviewinUnits(form.cmbReview().getValue());
		voOutpatientNotesOutcome.setReviewIn(form.intReview().getValue());
		
		voOutpatientNotesOutcome.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voOutpatientNotesOutcome.getClinicalNote().setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());		
		voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setIsDerivedNote(Boolean.TRUE);

		StringBuffer sb = new StringBuffer();
		sb.append("<b>Objective Note</b><br>");
		sb.append(form.richTextObjective().getValue());
		sb.append("<br><br><b>Plan Note</b><br>");
		sb.append(form.richTextPlan().getValue());
		voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setClinicalNote(sb.toString());
		
		return true;
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		updateButtonsStatus();
		updateReviewState();
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
		voAuthoring.setAuthoringDateTime(new DateTime());
		voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		form.customControlAuthoringInfo().setValue(voAuthoring);

		updateButtonsStatus();
	}

	private void updateButtonsStatus()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			if(form.getLocalContext().getSelectedItemIsNotNull())
			{
				form.btnDocument().setVisible(true);
				form.btnUpdate().setVisible(true);
				form.btnNew().setVisible(false);
			}
			else
			{
				form.btnDocument().setVisible(false);
				form.btnUpdate().setVisible(false);
				form.btnNew().setVisible(true);
			}
		}
	}

	protected void onBtnDocumentClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
		engine.open(form.getForms().Clinical.DocumentGeneration);
	}

	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			boolean newRecord = isNewRecord();
			form.customControlAuthoringInfo().setEnabledAuthoringHCP(new Boolean(newRecord));
			form.customControlAuthoringInfo().setEnabledDateTime(new Boolean(newRecord));
			//wdev-12315
			form.customControlAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);
			//----------
		}
		
		enableFollowUpInstructions();
	}

	private boolean isNewRecord()
	{
		OutpatientNotesOutcomeVo voOutpatientNotesOutcome = form.getLocalContext().getSelectedItem();
		return ((voOutpatientNotesOutcome == null || voOutpatientNotesOutcome.getID_OutpatientNotesOutcome() == null) || 
			   (voOutpatientNotesOutcome != null && voOutpatientNotesOutcome.getClinicalNoteIsNotNull() && 
				voOutpatientNotesOutcome.getClinicalNote().getClinicalNoteIsNotNull() && 
				voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getAuthoringInfoIsNotNull() && 
				voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getAuthoringInfo().getAuthoringHcp() == null));
	}

	protected void onCmbFollowUpValueChanged() throws PresentationLogicException
	{
		enableFollowUpInstructions(true);
	}

	private void enableFollowUpInstructions()
	{
		enableFollowUpInstructions(false);
	}
	private void enableFollowUpInstructions(boolean clearControls)
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			OpdFollowUp followUp = form.cmbFollowUp().getValue();
			boolean enablefollowUpControls = true;
			if(followUp != null && followUp.equals(OpdFollowUp.DISCHARGEDFROMCLINIC))
				enablefollowUpControls = false;
				
			form.cmbReview().setEnabled(enablefollowUpControls);
			form.intReview().setEnabled(enablefollowUpControls);
			form.richTextInstructions().setEnabled(enablefollowUpControls);
			if(enablefollowUpControls == false && clearControls)
			{
				form.cmbReview().setValue(null);
				form.intReview().setValue(null);
				form.richTextInstructions().setValue("");
				form.cmbReview().setFocus();
			}
		}
	}

	protected void onLnkManagementMedicationClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
		engine.open(form.getForms().Clinical.MedicationOnAdmission);
	}

	protected void onLnkComplicationsClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
		engine.open(form.getForms().Clinical.DiagnosisComplications);
	}

	protected void onLnkProblemClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
		engine.open(form.getForms().Clinical.PatientProblems);
	}

	protected void onLnkDiagnosisClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
		engine.open(form.getForms().Clinical.DiagnosisComplications);
	}

	protected void onLnkManagementOrdersClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
		engine.open(form.getForms().OCRR.MyOrder);
	}

	protected void onLnkLocalProcedureClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
		engine.open(form.getForms().Clinical.Procedures);
	}

	protected void onLnkSurgeryClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
		engine.open(form.getForms().Clinical.Procedures);
	}

	//wdev-12431
	protected void onIntReviewValueChanged() throws PresentationLogicException 
	{
		updateReviewState();
		
	}
	private void updateReviewState()
	{
		if(form.intReview() != null && form.intReview().getValue() != null && form.intReview().getValue() > 0)
			form.cmbReview().setRequired(true);
		else
			form.cmbReview().setRequired(false);
	}
	//--------------
}
