//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4680.16533)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.urinetoxcc;


import ims.clinical.forms.urinetoxcc.GenForm.grdUrineToxRow;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.DrugToxicologyItemVo;
import ims.emergency.vo.DrugToxicologyItemVoCollection;
import ims.emergency.vo.DrugToxicologyVo;
import ims.emergency.vo.enums.EdAssessment_CustomControlsEvents;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged() 
	{
		updateControlState();
	}
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName!=null && formName.equals(form.getForms().Clinical.UrineToxDialog) && result != null && result.equals(DialogResult.OK ))
		{
			if (form.getGlobalContext().Clinical.getSelectedDrugToxicologyItem().equals(form.grdUrineTox().getValue()) && form.grdUrineTox().getValue() != null)
			{
				saveItem();
			}
			else
			{
				save();		
			}	
			
			//WDEV-17337
			form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.SAVE);
			form.fireCustomControlValueChanged();
		}
		else if (formName!=null && formName.equals(form.getForms().Core.RieConfirmationDialog) && result != null && result.equals(DialogResult.OK ))
		{
			rieDrugToxicologyItem();
			
			//WDEV-17337
			form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.RIE);
			form.fireCustomControlValueChanged();
		}
		
		//WDEV-17337
		if (result.equals(DialogResult.CANCEL ) || result.equals(DialogResult.NO ) )
		{
			form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.CANCEL);
			form.fireCustomControlValueChanged();
		}
		
		open();
	}
	
	private boolean save()
	{
		DrugToxicologyVo drugToxicologyToSave = populateDataFromScreen(form.getLocalContext().getcurrentDrugToxicology(),form.getGlobalContext().Clinical.getSelectedDrugToxicologyItem());

		//check if there is already a DrugToxicology saved for the current CareContext. If exist, add the New DrugToxicologyItem to that DrugToxicology
		DrugToxicologyVo tempDrugToxicology = domain.getDrugToxicology(form.getGlobalContext().Core.getCurrentCareContext());
		if (drugToxicologyToSave.getID_DrugToxicology()==null && tempDrugToxicology!=null)
		{
			drugToxicologyToSave=populateDataFromScreen(tempDrugToxicology,form.getGlobalContext().Clinical.getSelectedDrugToxicologyItem());
			//engine.showMessage("An UrineTox for the current Attendance already exist. The screen will be refreshed. ");
			//return false;
		}
		
		String[] errors = drugToxicologyToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setcurrentDrugToxicology(domain.save(drugToxicologyToSave));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		return true;
	}
	
	private boolean saveItem()
	{
		try
		{
			form.getGlobalContext().Clinical.setSelectedDrugToxicologyItem(domain.saveItem(form.getGlobalContext().Clinical.getSelectedDrugToxicologyItem()));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		return true;
	}
	private void updateControlState()
	{
		form.getContextMenus().Clinical.getUrineToxMenuNEWItem().setVisible(Boolean.TRUE.equals(form.getLocalContext().getisEnabled()));
		form.getContextMenus().Clinical.getUrineToxMenuEDITItem().setVisible(Boolean.TRUE.equals(form.getLocalContext().getisEnabled())  && form.grdUrineTox().getValue() instanceof DrugToxicologyItemVo);
		form.getContextMenus().Clinical.getUrineToxMenuVIEWItem().setVisible(Boolean.TRUE.equals(form.getLocalContext().getisEnabled())  && form.grdUrineTox().getValue() instanceof DrugToxicologyItemVo);
		form.getContextMenus().Clinical.getUrineToxMenuRIEItem().setVisible(Boolean.TRUE.equals(form.getLocalContext().getisEnabled())  && form.grdUrineTox().getValue() instanceof DrugToxicologyItemVo);
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.UrineToxMenu.NEW:
				if (!isMosUser())
    			{
    				engine.showMessage("Logged in User is not a Member of Staff!");
    				return;
    			}
				form.grdUrineTox().setValue(null);
				form.getGlobalContext().Clinical.setSelectedDrugToxicologyItem(null);
				engine.open(form.getForms().Clinical.UrineToxDialog, new Object[]{FormMode.EDIT});
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.UrineToxMenu.EDIT:	
				if (!isMosUser())
    			{
    				engine.showMessage("Logged in User is not a Member of Staff!");
    				return;
    			}
				form.getGlobalContext().Clinical.setSelectedDrugToxicologyItem(domain.getDrugToxicologyItem(form.grdUrineTox().getValue()));
				engine.open(form.getForms().Clinical.UrineToxDialog, new Object[]{FormMode.EDIT});
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.UrineToxMenu.VIEW:
				form.getGlobalContext().Clinical.setSelectedDrugToxicologyItem(domain.getDrugToxicologyItem(form.grdUrineTox().getValue()));
				engine.open(form.getForms().Clinical.UrineToxDialog, new Object[]{FormMode.VIEW});
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.UrineToxMenu.RIE:
				if (!isMosUser())
    			{
    				engine.showMessage("Logged in User is not a Member of Staff!");
    				return;
    			}
				engine.open(form.getForms().Core.RieConfirmationDialog);
			break;
		}
		updateControlState();
	}
	
	private boolean isMosUser()
	{
		if (domain.getMosUser()!=null)
		{
			return true;
		}
		
		return false;
	}
	
	private void rieDrugToxicologyItem()
	{
		if (form.getGlobalContext().Clinical.getSelectedDrugToxicologyItem() == null)
			return;
		
		String comment = form.getGlobalContext().Core.getRieMessage();
		
		boolean isStale = false;
		if(domain.isStale(form.getGlobalContext().Clinical.getSelectedDrugToxicologyItem()))
		{
			isStale = true;
		}
		
		
		if(isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		try
		{
			domain.markAsRie(form.getGlobalContext().Clinical.getSelectedDrugToxicologyItem(), engine.getFormName(), null,  null, form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext(), comment);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
		}
	}
	
	public void initialize()
	{
		form.getGlobalContext().Clinical.setSelectedDrugToxicologyItem(null);
		form.getLocalContext().setcurrentDrugToxicology(null);
		open();
		
	}
	
	private void open()
	{
		form.getLocalContext().setcurrentDrugToxicology(domain.getDrugToxicology(form.getGlobalContext().Core.getCurrentCareContext()));
		populateScreenFromData(form.getLocalContext().getcurrentDrugToxicology());
		form.setMode(FormMode.VIEW);
	}
	
	private DrugToxicologyVo populateDataFromScreen(DrugToxicologyVo voDrugToxicology, DrugToxicologyItemVo voDrugToxicologyItem)
	{
		if (voDrugToxicology==null)
			voDrugToxicology=new DrugToxicologyVo();
		else
		{
			voDrugToxicology=(DrugToxicologyVo)voDrugToxicology.clone();
			voDrugToxicology=domain.getDrugToxicology(voDrugToxicology);
		}
		
		if (voDrugToxicology.getCareContext()==null)
			voDrugToxicology.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		//voDrugToxicology.setToxicology(populateDrugToxicologyCollFromGrid());
		
		DrugToxicologyItemVoCollection drugToxicologyItemColl = voDrugToxicology.getToxicology();
		if (drugToxicologyItemColl == null)
			drugToxicologyItemColl = new DrugToxicologyItemVoCollection();
		
		drugToxicologyItemColl.add(voDrugToxicologyItem);
		voDrugToxicology.setToxicology(drugToxicologyItemColl);
		
		return voDrugToxicology; 
	}
	
	private void populateScreenFromData(DrugToxicologyVo voDrugToxicology)
	{
		form.grdUrineTox().getRows().clear();
		
		if (voDrugToxicology==null)
			return;
		
		DrugToxicologyItemVoCollection collDrugToxicologyItems = voDrugToxicology.getToxicology();
		for (int i=0;i<collDrugToxicologyItems.size();i++ )
		{
			addRowToUrineToxGrid(collDrugToxicologyItems.get(i));
		}
		form.grdUrineTox().setValue(form.getGlobalContext().Clinical.getSelectedDrugToxicologyItem());
	}
	private void addRowToUrineToxGrid(DrugToxicologyItemVo drugToxicologyItem)
	{
		if (drugToxicologyItem==null)
			return;
		
		grdUrineToxRow row = form.grdUrineTox().getRows().newRow();
		row.setcolRecordingDate((drugToxicologyItem.getRecordingInformationIsNotNull() && drugToxicologyItem.getRecordingInformation().getRecordingDateTimeIsNotNull())?drugToxicologyItem.getRecordingInformation().getRecordingDateTime().toString():null);
		row.setTooltipForcolRecordingDate((drugToxicologyItem.getRecordingInformationIsNotNull() && drugToxicologyItem.getRecordingInformation().getRecordingDateTimeIsNotNull())?drugToxicologyItem.getRecordingInformation().getRecordingDateTime().toString():null);
		
		row.setcolRecordingHCP(drugToxicologyItem.getRecordingInformationIsNotNull() && drugToxicologyItem.getRecordingInformation().getRecordingUserIsNotNull()?drugToxicologyItem.getRecordingInformation().getRecordingUser().toString():null);
		row.setTooltipForcolRecordingHCP(drugToxicologyItem.getRecordingInformationIsNotNull() && drugToxicologyItem.getRecordingInformation().getRecordingUserIsNotNull()?drugToxicologyItem.getRecordingInformation().getRecordingUser().toString():null);
		
		row.setcolToxicologyType(drugToxicologyItem.getToxicologyTypeIsNotNull()?drugToxicologyItem.getToxicologyType().toString():null);
		row.setTooltipForcolToxicologyType(drugToxicologyItem.getToxicologyTypeIsNotNull()?drugToxicologyItem.getToxicologyType().toString():null);
		
		row.setcolToxicologyResult(drugToxicologyItem.getToxicologyResultIsNotNull()?drugToxicologyItem.getToxicologyResult().toString():null);
		row.setTooltipForcolToxicologyResult(drugToxicologyItem.getToxicologyResultIsNotNull()?drugToxicologyItem.getToxicologyResult().toString():null);
		
		row.setValue(drugToxicologyItem);
	}
	
	@Override
	protected void onGrdUrineToxSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setSelectedDrugToxicologyItem(form.grdUrineTox().getValue());
		updateControlState();
	}
	
	public void setEnabled(Boolean argument)
	{
		form.getLocalContext().setisEnabled(argument);
		updateControlState();
		
	}
	
	//WDEV-17337
	public EdAssessment_CustomControlsEvents getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}
	
	//WDEV-17337
	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}
}
