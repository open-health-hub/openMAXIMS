//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.urinetoxcc;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdUrineToxRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdUrineToxRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolRecordingDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolRecordingDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolRecordingDateOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolRecordingDate(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolRecordingDate()
		{
			return (String)super.row.get(0);
		}
		public void setcolRecordingDate(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolRecordingDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolRecordingHCPReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolRecordingHCPReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolRecordingHCPOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolRecordingHCP(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolRecordingHCP()
		{
			return (String)super.row.get(1);
		}
		public void setcolRecordingHCP(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolRecordingHCPTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolToxicologyTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolToxicologyTypeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolToxicologyTypeOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolToxicologyType(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolToxicologyType()
		{
			return (String)super.row.get(2);
		}
		public void setcolToxicologyType(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolToxicologyTypeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolToxicologyResultReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolToxicologyResultReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolToxicologyResultOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolToxicologyResult(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolToxicologyResult()
		{
			return (String)super.row.get(3);
		}
		public void setcolToxicologyResult(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolToxicologyResultTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.emergency.vo.DrugToxicologyItemVo getValue()
		{
			return (ims.emergency.vo.DrugToxicologyItemVo)super.row.getValue();
		}
		public void setValue(ims.emergency.vo.DrugToxicologyItemVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdUrineToxRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdUrineToxRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdUrineToxRow get(int index)
		{
			return new grdUrineToxRow(super.collection.get(index));
		}
		public grdUrineToxRow newRow()
		{
			return new grdUrineToxRow(super.collection.newRow());
		}
		public grdUrineToxRow newRow(boolean autoSelect)
		{
			return new grdUrineToxRow(super.collection.newRow(autoSelect));
		}
		public grdUrineToxRow newRowAt(int index)
		{
			return new grdUrineToxRow(super.collection.newRowAt(index));
		}
		public grdUrineToxRow newRowAt(int index, boolean autoSelect)
		{
			return new grdUrineToxRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdUrineToxGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.emergency.vo.DrugToxicologyItemVoCollection getValues()
		{
			ims.emergency.vo.DrugToxicologyItemVoCollection listOfValues = new ims.emergency.vo.DrugToxicologyItemVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.emergency.vo.DrugToxicologyItemVo getValue()
		{
			return (ims.emergency.vo.DrugToxicologyItemVo)super.grid.getValue();
		}
		public void setValue(ims.emergency.vo.DrugToxicologyItemVo value)
		{
			super.grid.setValue(value);
		}
		public grdUrineToxRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdUrineToxRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdUrineToxRowCollection getRows()
		{
			return new grdUrineToxRowCollection(super.grid.getRows());
		}
		public grdUrineToxRow getRowByValue(ims.emergency.vo.DrugToxicologyItemVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdUrineToxRow(row);
		}
		public void setcolRecordingDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolRecordingDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolRecordingHCPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolRecordingHCPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolToxicologyTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolToxicologyTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolToxicologyResultHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolToxicologyResultHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(540, 519);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuUrineToxMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuUrineToxMenuNEWItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4890001)))
			contextMenus.Clinical.contextMenuUrineToxMenu.add(contextMenus.Clinical.contextMenuUrineToxMenuNEWItem);
		contextMenus.Clinical.contextMenuUrineToxMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4890002)))
			contextMenus.Clinical.contextMenuUrineToxMenu.add(contextMenus.Clinical.contextMenuUrineToxMenuEDITItem);
		contextMenus.Clinical.contextMenuUrineToxMenuVIEWItem = factory.createMenuItem(startControlID.intValue() + 3, "VIEW", true, false, new Integer(102223), false, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4890003)))
			contextMenus.Clinical.contextMenuUrineToxMenu.add(contextMenus.Clinical.contextMenuUrineToxMenuVIEWItem);
		contextMenus.Clinical.contextMenuUrineToxMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4890004)))
			contextMenus.Clinical.contextMenuUrineToxMenu.add(contextMenus.Clinical.contextMenuUrineToxMenuREMOVEItem);
		contextMenus.Clinical.contextMenuUrineToxMenuRIEItem = factory.createMenuItem(startControlID.intValue() + 5, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4890005)))
			contextMenus.Clinical.contextMenuUrineToxMenu.add(contextMenus.Clinical.contextMenuUrineToxMenuRIEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuUrineToxMenu);


		// Grid Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 524, 504, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdUrineToxTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuUrineToxMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdUrineToxTemp);
		grdUrineToxGrid grdUrineTox = (grdUrineToxGrid)GridFlyweightFactory.getInstance().createGridBridge(grdUrineToxGrid.class, m_grdUrineToxTemp);
		grdUrineTox.addStringColumn("Recording Date", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdUrineTox.addStringColumn("Recording HCP", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdUrineTox.addStringColumn("Toxicology Type", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdUrineTox.addStringColumn("Toxicology Result", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdUrineTox);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public grdUrineToxGrid grdUrineTox()
	{
		return (grdUrineToxGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Core = new CoreForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				UrineToxDialog = new LocalFormName(129175);
			}
			public final FormName UrineToxDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}

		public ClinicalForms Clinical;
		public CoreForms Core;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_isEnabled = new ims.framework.ContextVariable("isEnabled", prefix + "_lv_Clinical.UrineToxCc.__internal_x_context__isEnabled_" + componentIdentifier + "");
			cxl_currentDrugToxicology = new ims.framework.ContextVariable("currentDrugToxicology", prefix + "_lv_Clinical.UrineToxCc.__internal_x_context__currentDrugToxicology_" + componentIdentifier + "");
			cxl_SelectedEvent = new ims.framework.ContextVariable("SelectedEvent", prefix + "_lv_Clinical.UrineToxCc.__internal_x_context__SelectedEvent_" + componentIdentifier + "");
		}
		
		public boolean getisEnabledIsNotNull()
		{
			return !cxl_isEnabled.getValueIsNull(context);
		}
		public Boolean getisEnabled()
		{
			return (Boolean)cxl_isEnabled.getValue(context);
		}
		public void setisEnabled(Boolean value)
		{
			cxl_isEnabled.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isEnabled = null;
		public boolean getcurrentDrugToxicologyIsNotNull()
		{
			return !cxl_currentDrugToxicology.getValueIsNull(context);
		}
		public ims.emergency.vo.DrugToxicologyVo getcurrentDrugToxicology()
		{
			return (ims.emergency.vo.DrugToxicologyVo)cxl_currentDrugToxicology.getValue(context);
		}
		public void setcurrentDrugToxicology(ims.emergency.vo.DrugToxicologyVo value)
		{
			cxl_currentDrugToxicology.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_currentDrugToxicology = null;
		public boolean getSelectedEventIsNotNull()
		{
			return !cxl_SelectedEvent.getValueIsNull(context);
		}
		public ims.emergency.vo.enums.EdAssessment_CustomControlsEvents getSelectedEvent()
		{
			return (ims.emergency.vo.enums.EdAssessment_CustomControlsEvents)cxl_SelectedEvent.getValue(context);
		}
		public void setSelectedEvent(ims.emergency.vo.enums.EdAssessment_CustomControlsEvents value)
		{
			cxl_SelectedEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedEvent = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class UrineToxMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW = 1;
				public static final int EDIT = 2;
				public static final int VIEW = 3;
				public static final int REMOVE = 4;
				public static final int RIE = 5;
			}
			public void disableAllUrineToxMenuMenuItems()
			{
				this.contextMenuUrineToxMenuNEWItem.setEnabled(false);
				this.contextMenuUrineToxMenuEDITItem.setEnabled(false);
				this.contextMenuUrineToxMenuVIEWItem.setEnabled(false);
				this.contextMenuUrineToxMenuREMOVEItem.setEnabled(false);
				this.contextMenuUrineToxMenuRIEItem.setEnabled(false);
			}
			public void hideAllUrineToxMenuMenuItems()
			{
				this.contextMenuUrineToxMenuNEWItem.setVisible(false);
				this.contextMenuUrineToxMenuEDITItem.setVisible(false);
				this.contextMenuUrineToxMenuVIEWItem.setVisible(false);
				this.contextMenuUrineToxMenuREMOVEItem.setVisible(false);
				this.contextMenuUrineToxMenuRIEItem.setVisible(false);
			}
			private Menu contextMenuUrineToxMenu;
			public ReadOnlyMenuItem getUrineToxMenuNEWItem()
			{
				return this.contextMenuUrineToxMenuNEWItem;
			}
			private MenuItem contextMenuUrineToxMenuNEWItem;
			public ReadOnlyMenuItem getUrineToxMenuEDITItem()
			{
				return this.contextMenuUrineToxMenuEDITItem;
			}
			private MenuItem contextMenuUrineToxMenuEDITItem;
			public ReadOnlyMenuItem getUrineToxMenuVIEWItem()
			{
				return this.contextMenuUrineToxMenuVIEWItem;
			}
			private MenuItem contextMenuUrineToxMenuVIEWItem;
			public ReadOnlyMenuItem getUrineToxMenuREMOVEItem()
			{
				return this.contextMenuUrineToxMenuREMOVEItem;
			}
			private MenuItem contextMenuUrineToxMenuREMOVEItem;
			public ReadOnlyMenuItem getUrineToxMenuRIEItem()
			{
				return this.contextMenuUrineToxMenuRIEItem;
			}
			private MenuItem contextMenuUrineToxMenuRIEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[76];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedDrugToxicologyItem", "BO-1086100029-ID", "ID_DrugToxicologyItem");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedDrugToxicologyItem", "BO-1086100029-TOXICOLOGYTYPE", "ToxicologyType");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedDrugToxicologyItem", "BO-1086100029-TOXICOLOGYRESULT", "ToxicologyResult");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrineToxCc.__internal_x_context__currentDrugToxicology_" + componentIdentifier, "BO-1086100028-ID", "ID_DrugToxicology");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrineToxCc.__internal_x_context__currentDrugToxicology_" + componentIdentifier, "BO-1086100028-CARECONTEXT", "CareContext");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
