//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.80 build 4050.19540)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.ttahistorydialog;

import ims.clinical.vo.TTAMedicationAndPharmacyForTTAHistoryVo;
import ims.clinical.vo.TTAMedicationAndPharmacyForTTAHistoryVoCollection;
import ims.clinical.vo.TTAMedicationDetailForTTAHistoryVo;
import ims.clinical.vo.TTAMedicationDetailForTTAHistoryVoCollection;
import ims.clinical.vo.TTAMedicationDetailVo;
import ims.clinical.vo.TTAMedicationDetailVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.edischarge.vo.TTAMedicationAndPharmacyRefVo;
import ims.edischarge.vo.TTAMedicationDetailRefVo;
import ims.edischarge.vo.TTAMedicationDetailRefVoCollection;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final Integer NAME_IDENTIFIER = new Integer(-1);
	private static final Integer DOSE_IDENTIFIER = new Integer(-2);
	private static final Integer ROUTE_IDENTIFIER = new Integer(-3);
	private static final Integer FREQUENCY_IDENTIFIER = new Integer(-4);
	private static final Integer FORM_IDENTIFIER = new Integer(-5);
	private static final Integer SELECT_IDENTIFIER = new Integer(-6);

	private static final int NAME_WIDTH = 300;
	private static final int DOSE_WIDTH = 90;
	private static final int ROUTE_WIDTH = 90;
	private static final int FREQUENCY_WIDTH = 90;
	private static final int FORM_WIDTH = 80;
	private static final int SELECT_WIDTH = -1;

	private boolean protectCode = false;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		TTAMedicationAndPharmacyRefVo excludeCurrent = null;
		if (args != null && args.length > 0)
		{
			for (int i = 0; i < args.length; i++)
			{
				if (args[i] instanceof TTAMedicationAndPharmacyRefVo)
				{
					excludeCurrent = (TTAMedicationAndPharmacyRefVo) args[i];
					if (!excludeCurrent.getID_TTAMedicationAndPharmacyIsNotNull())
						excludeCurrent = null;
					break;
				}
			}
		}
		open( excludeCurrent);
	}

	private void open(TTAMedicationAndPharmacyRefVo excludeCurrent)
	{
		TTAMedicationAndPharmacyForTTAHistoryVoCollection ttas = domain.listTTAforPatient(form.getGlobalContext().Core.getPatientShort(), excludeCurrent);
		if (ttas == null || ttas.size() == 0)
		{
			engine.showMessage("No previous TTA records found.");
			return;
		}
		populateGrid(ttas);

	}

	private void populateGrid(TTAMedicationAndPharmacyForTTAHistoryVoCollection ttas)
	{
		form.dyngrdTTA().getRows().clear();
		if (ttas == null || ttas.size() == 0)
			return;
		for (int i = 0; i < ttas.size(); i++)
		{
			TTAMedicationAndPharmacyForTTAHistoryVo tta = ttas.get(i);
			if (tta == null)
				continue;
			addParentRow(tta);
		}

	}

	private void addParentRow(TTAMedicationAndPharmacyForTTAHistoryVo tta)
	{
		if (tta == null)
			return;
		DynamicGridRow parent = form.dyngrdTTA().getRows().newRow();
		parent.setValue(tta);
		DynamicGridCell newCell = parent.getCells().newCell(getGridColumn(NAME_IDENTIFIER), DynamicCellType.HTMLVIEW);

		newCell.setValue("<B>Created:</b> " + (tta.getSystemInfoIsNotNull() ? tta.getSystemInfo().getCreationDateTime() : "N/A") + " <B>By: </B>" + (tta.getOrderingClinicianIsNotNull() ? tta.getOrderingClinician().getIMosName() : "N/A"));
		newCell.setReadOnly(true);
		newCell = parent.getCells().newCell(getGridColumn(SELECT_IDENTIFIER), DynamicCellType.BOOL);
		newCell.setReadOnly(false);
		newCell.setAutoPostBack(true);
		addChildRows(tta.getTTAMedications(), parent);

	}

	private void addChildRows(TTAMedicationDetailForTTAHistoryVoCollection ttaMedications, DynamicGridRow parent)
	{
		if (ttaMedications == null || ttaMedications.size() == 0)
			return;
		for (int i = 0; i < ttaMedications.size(); i++)
		{
			addChildRow(ttaMedications.get(i), parent);
		}

	}

	private void addChildRow(TTAMedicationDetailForTTAHistoryVo detail, DynamicGridRow parent)
	{
		if (detail == null || parent == null)
			return;
		DynamicGridRow child = parent.getRows().newRow();
		child.setValue(detail);

		if (detail.getMedicationIsNotNull() && detail.getMedication().getIsControlledDrugIsNotNull() && detail.getMedication().getIsControlledDrug())
			child.setBackColor(ConfigFlag.UI.CONTROLLED_DRUG_COLOR.getValue());

		DynamicGridCell cell = child.getCells().newCell(getGridColumn(NAME_IDENTIFIER), DynamicCellType.STRING);
		cell.setValue(detail.getOtherMedicationTextIsNotNull() ? detail.getOtherMedicationText() : null); //WDEV-14407
		//cell.setValue(detail.getMedicationIsNotNull() ? detail.getMedication().getMedicationName() : null);
		if (detail.getOtherMedicationTextIsNotNull())
		{
			cell.setTooltip(detail.getOtherMedicationText());
		}
		cell.setReadOnly(true);
		cell = child.getCells().newCell(getGridColumn(DOSE_IDENTIFIER), DynamicCellType.STRING);
		String detailS = "";
		if (detail.getDoseValueIsNotNull())
		{
			detailS += formatFloat(detail.getDoseValue());	//	WDEV-13073
			if (detail.getDoseUnitIsNotNull())
			{
				detailS += " " + detail.getDoseUnit().getText();
			}
			else
			if (detail.getUnitTextIsNotNull())
			{
				detailS += " " + detail.getUnitText();
			}
		}
		cell.setReadOnly(true);
		cell.setValue(detailS);

		cell = child.getCells().newCell(getGridColumn(ROUTE_IDENTIFIER), DynamicCellType.STRING);
		cell.setValue(detail.getRouteIsNotNull() ? detail.getRoute().getText() : null);
		cell.setReadOnly(true);
		cell = child.getCells().newCell(getGridColumn(FREQUENCY_IDENTIFIER), DynamicCellType.STRING);
		cell.setReadOnly(true);
		cell.setValue(detail.getFrequencyUnitIsNotNull()?detail.getFrequencyUnit().getText():null);
		cell = child.getCells().newCell(getGridColumn(FORM_IDENTIFIER), DynamicCellType.STRING);
		cell.setReadOnly(true);
		cell.setValue(detail.getFormIsNotNull() ? detail.getForm().getText() : null);
		cell = child.getCells().newCell(getGridColumn(SELECT_IDENTIFIER), DynamicCellType.BOOL);
		cell.setAutoPostBack(true);
	}

	//WDEV-13073
	private String formatFloat(Float doseValue) 
	{
		if(doseValue == null)
			return "";
		
		if(Math.floor(doseValue) == doseValue)
		{
			return String.valueOf(doseValue.intValue());
		}
		
		return String.valueOf(doseValue);
	}

	private void initialize()
	{
		initDynGrid();

	}

	private void initDynGrid()
	{
		DynamicGridColumn newColumn = form.dyngrdTTA().getColumns().newColumn("TTA Record/MedicationName", NAME_IDENTIFIER);
		newColumn.setCanGrow(true);
		newColumn.setWidth(NAME_WIDTH);
		newColumn = form.dyngrdTTA().getColumns().newColumn("Form", FORM_IDENTIFIER);
		newColumn.setWidth(FORM_WIDTH);
		newColumn = form.dyngrdTTA().getColumns().newColumn("Route", ROUTE_IDENTIFIER);
		newColumn.setWidth(ROUTE_WIDTH);
		newColumn = form.dyngrdTTA().getColumns().newColumn("Dose", DOSE_IDENTIFIER);
		newColumn.setWidth(DOSE_WIDTH);
		newColumn = form.dyngrdTTA().getColumns().newColumn("Frequency", FREQUENCY_IDENTIFIER);
		newColumn.setWidth(FREQUENCY_WIDTH);
		newColumn = form.dyngrdTTA().getColumns().newColumn("Select", SELECT_IDENTIFIER);
		newColumn.setWidth(SELECT_WIDTH);
		newColumn.setDynamicWidthSupported(true);
	}

	private DynamicGridColumn getGridColumn(Integer identifier)
	{
		return form.dyngrdTTA().getColumns().getByIdentifier(identifier);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);

	}

	@Override
	protected void onBtnSelectClick() throws PresentationLogicException
	{

		TTAMedicationDetailRefVoCollection result = getListOfSelectedMedications();
		if (result == null || result.size() == 0)
		{
			engine.showMessage("Please select some Medication Details to add");
			return;
		}
		TTAMedicationDetailVoCollection ttaMedicationsDetails = domain.getTTAMedicationsDetails(result);
		for (int i = 0 ; ttaMedicationsDetails!=null && i < ttaMedicationsDetails.size(); i++)
		{
			clearData(ttaMedicationsDetails.get(i));
		}
		form.getGlobalContext().Clinical.setTTAMedications(ttaMedicationsDetails);
		// Return;
		engine.close(DialogResult.OK);
	}

	private void clearData(TTAMedicationDetailVo ttaMedicationDetailVo)
	{
		if (ttaMedicationDetailVo == null)
			return;
		ttaMedicationDetailVo.clearIDAndVersion();
		ttaMedicationDetailVo.setCommencedDate(null);
		ttaMedicationDetailVo.setClinicalCommentsForPharmacy(null);
		ttaMedicationDetailVo.setMedicationInstructionsForPatient(null);
		ttaMedicationDetailVo.setPrescriberContacted(null);
		ttaMedicationDetailVo.setDurationValue(null);
		ttaMedicationDetailVo.setDurationUnit(null);
		AuthoringInformationVo auth = new AuthoringInformationVo();
		auth.setAuthoringDateTime(new DateTime());
		if (domain.getHcpLiteUser() instanceof HcpLiteVo)
			auth.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		ttaMedicationDetailVo.setAuthoringInformation(auth);
		
	}

	private TTAMedicationDetailRefVoCollection getListOfSelectedMedications()
	{
		TTAMedicationDetailRefVoCollection result = new TTAMedicationDetailRefVoCollection();
		for (int i = 0; i < form.dyngrdTTA().getRows().size(); i++)
		{
			DynamicGridRow parent = form.dyngrdTTA().getRows().get(i);
			for (int j = 0; parent.getRows()!=null && j < parent.getRows().size(); j++)
			{
				DynamicGridCell sel = parent.getRows().get(j).getCells().get(getGridColumn(SELECT_IDENTIFIER));
				if (Boolean.TRUE.equals(sel.getValue()))
				{
					result.add((TTAMedicationDetailRefVo) parent.getRows().get(j).getValue());
				}
			}
		}
		return result;
	}

	@Override
	protected void onDyngrdTTACellValueChanged(DynamicGridCell cell)
	{
		if (protectCode)
			return;
		if (cell.getColumn().getIdentifier().equals(SELECT_IDENTIFIER) && cell.getValue() instanceof Boolean)
		{
			boolean value = ((Boolean) cell.getValue()).booleanValue();
			// Is parent
			if (cell.getRow().getValue() instanceof TTAMedicationAndPharmacyForTTAHistoryVo)
			{

				markChilds(cell.getRow().getRows(), value);

			}
			else
			{
				if (!value && cell.getRow().getValue() instanceof TTAMedicationDetailRefVo)
				{
					cell.getRow().getParent().getCells().get(getGridColumn(SELECT_IDENTIFIER)).setValue(false);
				}
			}
		}

	}

	private void markChilds(DynamicGridRowCollection rows, boolean value)
	{
		if (rows == null)
			return;

		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridCell selectCell = rows.get(i).getCells().get(getGridColumn(SELECT_IDENTIFIER));
			selectCell.setValue(value);
		}
	}

}
