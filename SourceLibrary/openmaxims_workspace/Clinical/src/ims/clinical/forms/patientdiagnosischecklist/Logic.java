//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.53 build 2641.19803)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.patientdiagnosischecklist;

import java.util.ArrayList;
import ims.clinical.forms.patientdiagnosischecklist.GenForm.grdChecklistRow;
import ims.clinical.vo.DiagnosisListVo;
import ims.clinical.vo.DiagnosisListVoCollection;
import ims.clinical.vo.PatientAbsentDiagnosisVo;
import ims.clinical.vo.PatientAbsentDiagnosisVoCollection;
import ims.clinical.vo.PatientDiagnosisChecklistVo;
import ims.clinical.vo.lookups.PresentAbsentUnknown;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.PatientDiagnosisListVo;
import ims.core.vo.PatientDiagnosisListVoCollection;
import ims.core.vo.PatientDiagnosisVo;
import ims.core.vo.PatientDiagnosisVoCollection;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws PresentationLogicException 
	{
		open();
	}

	private void open() 
	{
		resetContextVariables();		
		clearControls();
		populateInstanceControls(domain.getPatientDiagnosisChecklistVo(form.getGlobalContext().Core.getCurrentClinicalContact()));
		form.setMode(FormMode.VIEW);	
		if(engine.getFormName().equals(form.getForms().Clinical.PatientDiagnosisChecklistDialog))
			form.btnClose().setVisible(true);
		else
			form.btnClose().setVisible(false);
	}

	private void populateInstanceControls(PatientDiagnosisChecklistVo patientDiagnosisChecklistVo) 
	{
		if (patientDiagnosisChecklistVo == null) return;
		
		form.getLocalContext().setPatientDiagnosisChecklistVo(patientDiagnosisChecklistVo);
		
		if (patientDiagnosisChecklistVo.getAuthoringInformationIsNotNull())
			form.customControlAuthoringInfo().setValue(patientDiagnosisChecklistVo.getAuthoringInformation());
	
		if (patientDiagnosisChecklistVo.getPresentDiagnosesIsNotNull())
			populatePresentDiagnosisControls(patientDiagnosisChecklistVo.getPresentDiagnoses());
		
		if (patientDiagnosisChecklistVo.getOtherDiagnosesIsNotNull())
			populateOtherDiagnosisControls(patientDiagnosisChecklistVo.getOtherDiagnoses());	
	}

	private void populatePresentDiagnosisControls(PatientDiagnosisVoCollection presentDiagnoses) 
	{
		for (int i=0; i < presentDiagnoses.size(); i++)
		{	
			PatientDiagnosisVo voPatientDiagnosis = presentDiagnoses.get(i);
			GenForm.grdChecklistRow row = form.grdChecklist().getRows().newRow();
			
			if(voPatientDiagnosis.getDiagnosisIsNotNull())
			{
				row.setColDiagnosis(voPatientDiagnosis.getDiagnosis().getDiagnosisName());
				row.setTooltipForColDiagnosis(voPatientDiagnosis.getDiagnosis().getDiagnosisName());
			}
			
			row.setColSelect(PresentAbsentUnknown.PRESENT);
			
			if(voPatientDiagnosis.getSourceofInformationIsNotNull())
				row.setColSource(voPatientDiagnosis.getSourceofInformation());
			
			if(voPatientDiagnosis.getDiagnosedDateIsNotNull())
				row.setColDiagnosisDate(voPatientDiagnosis.getDiagnosedDate());
			
			if(voPatientDiagnosis.getDiagnosisDescriptionIsNotNull())
				row.setcolDescription(voPatientDiagnosis.getDiagnosisDescription());
			
			row.setValue(voPatientDiagnosis);
			
			setGridUIForPresent(row); 
		}
	}

	private void populateOtherDiagnosisControls(PatientAbsentDiagnosisVoCollection otherDiagnoses) 
	{
		for (int i=0; i < otherDiagnoses.size(); i++)
		{
			PatientAbsentDiagnosisVo voPatientAbsentDiagnosis = otherDiagnoses.get(i);
			GenForm.grdChecklistRow row = form.grdChecklist().getRows().newRow();
			
			if (voPatientAbsentDiagnosis.getDiagnosisIsNotNull())
			{
				row.setColDiagnosis(voPatientAbsentDiagnosis.getDiagnosis().getDiagnosisName());
				row.setTooltipForColDiagnosis(voPatientAbsentDiagnosis.getDiagnosis().getDiagnosisName());
			}
			
			if(voPatientAbsentDiagnosis.getStatusIsNotNull())
				row.setColSelect(voPatientAbsentDiagnosis.getStatus());
			
			if(voPatientAbsentDiagnosis.getSourceofInformationIsNotNull())
				row.setColSource(voPatientAbsentDiagnosis.getSourceofInformation());
			
			row.setValue(voPatientAbsentDiagnosis);
			
			setGridUIForAbsent(row); 
		}		
		
	}

	private void clearControls()
	{
		form.grdChecklist().getRows().clear();
		form.customControlAuthoringInfo().setValue(null);	
	}

	private void resetContextVariables() 
	{
		form.getLocalContext().setPatientDiagnosisChecklistVo(null);	
	}
	
	private void listDiagnosis(Specialty lkpSpecialty)
	{				
		form.grdChecklist().getRows().clear();
		
		DiagnosisListVoCollection rcColl;
		try 
		{
			rcColl = domain.listDiagnosisBySpecialty(lkpSpecialty);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}		
		if (rcColl == null || rcColl.size() == 0)
		{
			engine.showMessage("No matching Diagnosis found");
			return;
		}
		
		populatePatientDiagnosis(rcColl, domain.listDiagnosisListVoByPatient(form.getGlobalContext().Core.getPatientShort()));
	}		

	private void populatePatientDiagnosis(DiagnosisListVoCollection rcColl, PatientDiagnosisListVoCollection collPatientDiagnosisListVo) 
	{
		form.getLocalContext().setPatientDiagnosisListVoCollection(collPatientDiagnosisListVo);
	
		for (int i=0; i < rcColl.size(); i++)
		{
			populatePatientDiagnosisControls(rcColl.get(i), collPatientDiagnosisListVo);
		}
	}

	private void populatePatientDiagnosisControls(DiagnosisListVo voDiagnosisList, PatientDiagnosisListVoCollection collDiagnosisList) 
	{
		if(collDiagnosisList!=null)
		{
			for (int i=0; i < collDiagnosisList.size(); i++)
			{
				if(collDiagnosisList.get(i).getDiagnosisIsNotNull())
				{
					if(collDiagnosisList.get(i).getDiagnosis().equals(voDiagnosisList.getDiagnosis()))
					{
						GenForm.grdChecklistRow row = form.grdChecklist().getRows().newRow();
						
						PatientDiagnosisListVo voDiagnosis = collDiagnosisList.get(i);
						
						if (voDiagnosis.getDiagnosisIsNotNull())
						{
							row.setColDiagnosis(voDiagnosis.getDiagnosis().getDiagnosisName());
							row.setTooltipForColDiagnosis(voDiagnosis.getDiagnosis().getDiagnosisName());
						}
						
						row.setColSelect(PresentAbsentUnknown.PRESENT);
		
						if(voDiagnosis.getSourceofInformationIsNotNull())
							row.setColSource(voDiagnosis.getSourceofInformation());
						
						if(voDiagnosis.getDiagnosedDateIsNotNull())
							row.setColDiagnosisDate(voDiagnosis.getDiagnosedDate());
						
						if(voDiagnosis.getDiagnosisDescriptionIsNotNull())
							row.setcolDescription(voDiagnosis.getDiagnosisDescription());
						
						row.setValue(voDiagnosisList.getDiagnosis());
						
						setGridUIForPresent(row); 
						
						return;
					}
				}
			}
		}
		
		GenForm.grdChecklistRow row = form.grdChecklist().getRows().newRow();
		
		if (voDiagnosisList.getDiagnosisIsNotNull())
		{
			row.setColDiagnosis(voDiagnosisList.getDiagnosis().getDiagnosisName());
			row.setTooltipForColDiagnosis(voDiagnosisList.getDiagnosis().getDiagnosisName());
		}
		
		row.setValue(voDiagnosisList.getDiagnosis());
		
		setGridUIForAbsent(row); 
	}

	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if (save() == false)
			return;	
		open();
	}

	private boolean save()
	{
		form.getLocalContext().setPatientDiagnosisListVoCollection(domain.listDiagnosisListVoByPatient(form.getGlobalContext().Core.getPatientShort()));
		PatientDiagnosisChecklistVo voPatDiagChecklist = populateInstanceData(form.getLocalContext().getPatientDiagnosisChecklistVo());
		
		ArrayList<String> screenErrors = new ArrayList<String>();
		if(form.customControlAuthoringInfo().getValue().getAuthoringHcp() == null)
		{
			screenErrors.add("Authoring HCP is mandatory.");				
		}
		if(form.customControlAuthoringInfo().getValue().getAuthoringDateTime() == null)
		{
			screenErrors.add("Authoring HCP is mandatory.");				
		}
		String[] arrErrors =  voPatDiagChecklist.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(screenErrors, arrErrors);
		
		if(arrScreenAndVoErrors.length != 0)
		{
			engine.showErrors(arrScreenAndVoErrors);
			return false;
		}

		try
		{
			voPatDiagChecklist = domain.savePatientDiagnosisChecklist(voPatDiagChecklist);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		form.getLocalContext().setPatientDiagnosisChecklistVo(voPatDiagChecklist);
		form.getLocalContext().setUnlinkedRecord(null);

		return true;
	}

	private String[] addScreenErrorsToVOErrors(ArrayList screenErrors, String[] arrErrors) 
	{
		String[] arrAllErrors = null;
		
		if(arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);
			
			int i=0;	
			for(int p=screenErrors.size();p<arrAllErrors.length;p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}	
		else
		{
			arrAllErrors = new String[screenErrors.size()];		
			
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);	
		}	
		
		return arrAllErrors;
	}

	private PatientDiagnosisChecklistVo populateInstanceData(PatientDiagnosisChecklistVo voPatientDiagnosisChecklist) 
	{
		if(voPatientDiagnosisChecklist==null)
			voPatientDiagnosisChecklist = new PatientDiagnosisChecklistVo();
	
		if (voPatientDiagnosisChecklist.getClinicalContact()==null)
			voPatientDiagnosisChecklist.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		voPatientDiagnosisChecklist.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		
		voPatientDiagnosisChecklist.setPresentDiagnoses(populatePresentDiagnosisData(voPatientDiagnosisChecklist.getPresentDiagnoses()));
		voPatientDiagnosisChecklist.setOtherDiagnoses(populateAbsentDiagnosisData(voPatientDiagnosisChecklist.getOtherDiagnoses()));
		
		return voPatientDiagnosisChecklist;
	}

	private PatientDiagnosisVoCollection populatePresentDiagnosisData(PatientDiagnosisVoCollection presentDiagnoses) 
	{
		presentDiagnoses = new PatientDiagnosisVoCollection();
		
		for (int i=0 ; i < form.grdChecklist().getRows().size(); i++)
		{
			if (form.grdChecklist().getRows().get(i).getColSelect() != null && form.grdChecklist().getRows().get(i).getColSelect().equals(PresentAbsentUnknown .PRESENT))
				presentDiagnoses.add(populatePresentPatientDiagnosisData(form.grdChecklist().getRows().get(i)));
		}
	
		return presentDiagnoses;
	}

	private PatientDiagnosisVo populatePresentPatientDiagnosisData(grdChecklistRow row) 
	{	
		PatientDiagnosisVo voPresentDiagnosis = null;
		if (row.getValue() instanceof PatientDiagnosisVo)
		{
			if (row.getValue().equals(form.getLocalContext().getUnlinkedRecord()))
			{	
				voPresentDiagnosis = new PatientDiagnosisVo();
				voPresentDiagnosis.setDiagnosis(((PatientDiagnosisVo)row.getValue()).getDiagnosis());
			}
			else
			{
				voPresentDiagnosis = (PatientDiagnosisVo)row.getValue();
			}
		}
		else if (row.getValue() instanceof PatientAbsentDiagnosisVo)
		{
			voPresentDiagnosis = searchExistingDiagnoses(row);
		}
		else
		{ 
			voPresentDiagnosis = searchExistingDiagnoses(row);
			voPresentDiagnosis.setDiagnosis(((DiagLiteVo)row.getValue()));
		}
		
		voPresentDiagnosis.setSourceofInformation(row.getColSource());
		
		if(row.getColDiagnosisDate()!=null)
			voPresentDiagnosis.setDiagnosedDate(row.getColDiagnosisDate());
		
		voPresentDiagnosis.setDiagnosisDescription(row.getcolDescription());
		voPresentDiagnosis.setIsComplication(false);
		voPresentDiagnosis.setAuthoringInfo(form.customControlAuthoringInfo().getValue());
			
		voPresentDiagnosis.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voPresentDiagnosis.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
		row.setValue(voPresentDiagnosis);
		
		return voPresentDiagnosis;			
	}

	
	
	
	private PatientDiagnosisVo searchExistingDiagnoses(grdChecklistRow row) 
	{	
		PatientDiagnosisListVoCollection collPatientDiagnosisListVo = form.getLocalContext().getPatientDiagnosisListVoCollection();
	
		if(collPatientDiagnosisListVo!=null)
			for(int i=0; i < collPatientDiagnosisListVo.size(); i++)
			{
				//if was linked
				if(collPatientDiagnosisListVo.get(i).getDiagnosisIsNotNull() && collPatientDiagnosisListVo.get(i).getDiagnosis().getDiagnosisName().equals(row.getColDiagnosis()) &&
						collPatientDiagnosisListVo.get(i).getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
				{
					return new PatientDiagnosisVo();
				}
				else
				{
					PatientDiagnosisVo diagnosisVo = domain.getDiagnosisVo(collPatientDiagnosisListVo.get(i));
					
					if (collPatientDiagnosisListVo.get(i).getDiagnosisIsNotNull() &&
							(!(collPatientDiagnosisListVo.get(i).getDiagnosisIsNotNull() &&
							collPatientDiagnosisListVo.get(i).getDiagnosis().getDiagnosisName().equals(row.getColDiagnosis())) &&
								row.getColDiagnosis().equals((diagnosisVo.getDiagnosis().getDiagnosisName()))))

					{
						return diagnosisVo;
					}
					else if (collPatientDiagnosisListVo.get(i).getDiagnosisIsNotNull() &&
							((collPatientDiagnosisListVo.get(i).getDiagnosisIsNotNull() && collPatientDiagnosisListVo.get(i).getDiagnosis().getDiagnosisName().equals(row.getColDiagnosis())) &&
							row.getColDiagnosis().equals((diagnosisVo.getDiagnosis().getDiagnosisName())) &&
							!collPatientDiagnosisListVo.get(i).getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())))
					{
						return diagnosisVo;
					}
				}
			}

		return new PatientDiagnosisVo();	
	}


	private PatientAbsentDiagnosisVoCollection populateAbsentDiagnosisData(PatientAbsentDiagnosisVoCollection otherDiagnoses) 
	{
		otherDiagnoses = new PatientAbsentDiagnosisVoCollection();
		
		for (int i=0 ; i < form.grdChecklist().getRows().size(); i++)
		{
			if (form.grdChecklist().getRows().get(i).getColSelect() != null && !form.grdChecklist().getRows().get(i).getColSelect().equals(PresentAbsentUnknown.PRESENT))
				otherDiagnoses.add(populateAbsentDiagnosisData(form.grdChecklist().getRows().get(i)));
		}
	
		return otherDiagnoses;
	}

	private PatientAbsentDiagnosisVo populateAbsentDiagnosisData(grdChecklistRow row) 
	{
		PatientAbsentDiagnosisVo voPatientAbsentDiagnosis = new PatientAbsentDiagnosisVo();
		DiagLiteVo diagnosis = null;
		
		if (row.getValue() != null)
		{
			if (row.getValue() instanceof PatientDiagnosisVo)
			{
				diagnosis = (((PatientDiagnosisVo)row.getValue()).getDiagnosis());
			}
			else if (row.getValue() instanceof PatientAbsentDiagnosisVo)
			{
				diagnosis = (((PatientAbsentDiagnosisVo)row.getValue()).getDiagnosis());
			}
			else if (row.getValue() instanceof DiagLiteVo)
			{
				diagnosis =((DiagLiteVo) row.getValue());
			}
		}
	
		voPatientAbsentDiagnosis.setDiagnosis(diagnosis);
		voPatientAbsentDiagnosis.setStatus(row.getColSelect());
		voPatientAbsentDiagnosis.setSourceofInformation(row.getColSource());
		return voPatientAbsentDiagnosis;
	}

	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		open();
	}

	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		updateControlsState();
		addDiagnosesNotInstantiated();
	}
	
	private void addDiagnosesNotInstantiated() 
	{
		Specialty lkpSpecialty = form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty(); 
		if (lkpSpecialty == null)
			return;
			
		DiagnosisListVoCollection collDiagnosisListVo = null;
		try 
		{
			collDiagnosisListVo = domain.listDiagnosisBySpecialty(lkpSpecialty);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}		
		if (collDiagnosisListVo == null || collDiagnosisListVo.size() == 0)
		{
			engine.showMessage("No matching Procedures found");
			return;
		}

		for (int i=0; i < collDiagnosisListVo.size(); i++)
		{
			GenForm.grdChecklistRow row = findDiagnosisRow(collDiagnosisListVo.get(i));
			if(row==null)
			{
				row = form.grdChecklist().getRows().newRow();
				if (collDiagnosisListVo.get(i).getDiagnosisIsNotNull())
				{
					row.setColDiagnosis(collDiagnosisListVo.get(i).getDiagnosis().getDiagnosisName());
					row.setTooltipForColDiagnosis(collDiagnosisListVo.get(i).getDiagnosis().getDiagnosisName());
				}
				row.setValue(collDiagnosisListVo.get(i).getDiagnosis());
				
				setGridUIForAbsent(row);
			}
		}
				
	}

	private grdChecklistRow findDiagnosisRow(DiagnosisListVo vo) 
	{
		GenForm.grdChecklistRow row = null;
		for (int i=0; i < form.grdChecklist().getRows().size(); i++)
		{
			if (form.grdChecklist().getRows().get(i).getColDiagnosis() !=null &&
					form.grdChecklist().getRows().get(i).getColDiagnosis().equals(vo.getDiagnosis().getDiagnosisName()))
			{
				row = form.grdChecklist().getRows().get(i);
				break;
			}
		}
		
		return row;
	}

	protected void onBtnNewClick() throws PresentationLogicException 
	{	
		form.customControlAuthoringInfo().initializeComponent();
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);
		
		Specialty lkpSpecialty = form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty(); 
		if (lkpSpecialty == null){
			engine.showMessage("No Diagnoses exist for current specialty");
			return;
		}
		form.setMode(FormMode.EDIT);
		listDiagnosis(lkpSpecialty);		
		
		form.setcustomControlAuthoringInfoEnabled(true);
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
		if (form.getMode().equals(FormMode.VIEW))
			disableAllContextMenus();
	}
	
	private void setGridUIForPresent(grdChecklistRow row) 
	{
		row.setColSourceReadOnly(false);
		row.setColDiagnosisDateReadOnly(false);
		row.setcolDescriptionReadOnly(false);	
	}

	private void setGridUIForAbsent(grdChecklistRow row)
	{
		row.setColSourceReadOnly(true);
		row.setColDiagnosisDateReadOnly(true);
		row.setcolDescriptionReadOnly(true);
		
		row.setColSource(null);
		row.setColDiagnosisDate(null);
		row.setcolDescription("");
	}

	@Override
	protected void ongrdChecklistGridColSelectColumnAnswerBoxValueChanged(grdChecklistRow row) throws PresentationLogicException 
	{
		if (row.getColSelect() !=null)
		{
			if (row.getColSelect().equals(PresentAbsentUnknown.ABSENT))
			{
					row.setColSource(null);
					row.setcolDescription(null);
					
					setGridUIForAbsent(row);			
			}				
			else if (row.getColSelect().equals(PresentAbsentUnknown.PRESENT))
			{
				if (row.getValue() instanceof PatientAbsentDiagnosisVo){
					PatientAbsentDiagnosisVo voPatientDiagnosis = (PatientAbsentDiagnosisVo)row.getValue();
				
					if(voPatientDiagnosis.getSourceofInformationIsNotNull())
						row.setColSource(voPatientDiagnosis.getSourceofInformation());
					row.setcolDescription(row.getColDiagnosis());
				}
				else if (row.getValue() instanceof PatientDiagnosisVo){
					PatientDiagnosisVo voPatientDiagnosis = (PatientDiagnosisVo)row.getValue();
				
					if(voPatientDiagnosis.getSourceofInformationIsNotNull())
						row.setColSource(voPatientDiagnosis.getSourceofInformation());
					row.setcolDescription(row.getColDiagnosis());
				}
				else
				{
					row.setcolDescription(row.getColDiagnosis());
				}
				
				setGridUIForPresent(row); 
			}
		}		
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.OK);	
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PresentingProblems.AddCCIfromTaxonomy :
				addProblemToPresProblemCheckListConfig();
				break;
			case GenForm.ContextMenus.PresentingProblems.AddCCIfromLocalSearch :
				addProblemToPresProblemProblemSearch();
				break;
			case GenForm.ContextMenus.PresentingProblems.Unlink :
				unlinkPresProblem();;
				break;
			default :
				break;
		}
	}

	private void unlinkPresProblem()
	{
		grdChecklistRow row = form.grdChecklist().getSelectedRow();
		setGridUIForNone(row);
		//put unlinked record in localcontext
		form.getLocalContext().setUnlinkedRecord(form.grdChecklist().getSelectedRow().getValue());
		//row.setColSelectReadOnly(true);
		row.setColSelect(null);
	}

	private void addProblemToPresProblemProblemSearch()
	{
		form.getGlobalContext().Clinical.setSelectedDiagnosis(null);
		form.getGlobalContext().Clinical.setPMHConfigSearchType("D");
		engine.open(form.getForms().Core.DiagnosisProcedureProblemSearch, "Diagnosis");	
	}

	private void addProblemToPresProblemCheckListConfig()
	{
		form.getGlobalContext().Core.setTaxonomyMap(null);		
		engine.open(form.getForms().Core.TaxonomySearch);
	}

	@Override
	protected void onGrdChecklistSelectionChanged() throws PresentationLogicException
	{
		grdChecklistRow row = form.grdChecklist().getSelectedRow();
		
		if (row != null &&	
			form.getMode().equals(FormMode.EDIT) && 
				row.getColSelect() !=null)
		{
			if (row.getColSelect().equals(PresentAbsentUnknown.PRESENT))
				enableUnlinkContextMenu(true);
		}
		else
			enableUnlinkContextMenu(false);
		
		updateControlsState();
	}

	private void enableUnlinkContextMenu(boolean isEnable)
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().getPresentingProblemsUnlinkItem().setEnabled(isEnable);
			form.getContextMenus().getPresentingProblemsUnlinkItem().setVisible(isEnable);
		}
	}

	private void updateControlsState() 
	{
		for (int i=0; i < form.grdChecklist().getRows().size(); i++)
		{			
			if (form.grdChecklist().getRows().get(i).getColSelect() == null)
				setGridUIForNone(form.grdChecklist().getRows().get(i));
			else if (form.grdChecklist().getRows().get(i).getColSelect().equals(PresentAbsentUnknown.ABSENT))
				setGridUIForAbsent(form.grdChecklist().getRows().get(i));				
			else
				setGridUIForPresent(form.grdChecklist().getRows().get(i));
		}
		
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnNew().setVisible(form.getLocalContext().getPatientDiagnosisChecklistVo() == null);
			form.btnUpdate().setVisible(form.getLocalContext().getPatientDiagnosisChecklistVo() != null);
		}
		
		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setVisible(form.getMode().equals(FormMode.EDIT));
	}

	private void disableAllContextMenus()
	{
		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsUnlinkItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsUnlinkItem().setVisible(form.getMode().equals(FormMode.EDIT));
	}
	
	private void setGridUIForNone(grdChecklistRow row) 
	{
		row.setColSelectReadOnly(false);
		row.setColSourceReadOnly(true);
		row.setColDiagnosisDateReadOnly(true);
		row.setcolDescriptionReadOnly(true);
		
		row.setColSource(null);
		row.setColDiagnosisDate(null);
		row.setcolDescription("");
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (result == DialogResult.CANCEL) 
			return; 
		
		if ( (formName.equals(form.getForms().Core.TaxonomySearch)) && (result.equals(DialogResult.OK)) )
		{
			doAddFromTaxonomy();
		}
		
		else if ( (formName.equals(form.getForms().Core.DiagnosisProcedureProblemSearch)) && (result.equals(DialogResult.OK)) )
		{
			doAddFromLocalSearch();
		}
	}

	private void doAddFromLocalSearch()
	{
		DiagLiteVoCollection diagList = form.getGlobalContext().Clinical.getSelectedDiagnosis();

		for (int i=0; i < diagList.size(); i++)
		{
			boolean bFound = false;
			for (int j=0; j < form.grdChecklist().getRows().size(); j++)
			{
				if (form.grdChecklist().getRows().get(j).getColDiagnosis()!=null && form.grdChecklist().getRows().get(j).getColDiagnosis().equals(diagList.get(i).getDiagnosisName()))
				{
					bFound = true;
					engine.showMessage("Diagnosis record called \"" + diagList.get(i).getDiagnosisName() + "\" is already in list.");
					break;
				}
			}
			
			if(!bFound)
			{
				grdChecklistRow row = form.grdChecklist().getRows().newRow();
				row.setColDiagnosis(diagList.get(i).getDiagnosisName());
				row.setColSelect(PresentAbsentUnknown.PRESENT);
				row.setcolDescription(diagList.get(i).getDiagnosisName());
				
				PatientDiagnosisVo voPresentDiagnosis = new PatientDiagnosisVo();
				voPresentDiagnosis.setDiagnosis(diagList.get(i));
				voPresentDiagnosis.setDiagnosisDescription(diagList.get(i).getDiagnosisName());
				row.setValue(voPresentDiagnosis);
			}
		}
	}

	private void doAddFromTaxonomy()
	{
		if(form.getGlobalContext().Core.getTaxonomyMapIsNotNull())
		{
			TaxonomyMap voTaxonomyMap = form.getGlobalContext().Core.getTaxonomyMap();
			
			boolean bFound = false;
			for (int j=0; j < form.grdChecklist().getRows().size(); j++)
			{
				if (form.grdChecklist().getRows().get(j).getColDiagnosis()!=null && form.grdChecklist().getRows().get(j).getColDiagnosis().equals(voTaxonomyMap.getDescription()))
				{
					bFound = true;
					engine.showMessage("Diagnosis record called \"" + voTaxonomyMap.getDescription() + "\" is already in list.");
					break;
				}
			}
			
			if(!bFound)
			{
				DiagnosisVo voDiagnosis = new DiagnosisVo();
				TaxonomyMapCollection voCollTaxonomyMapCollection = new TaxonomyMapCollection();
				voCollTaxonomyMapCollection.add(voTaxonomyMap);
				
				voDiagnosis.setDiagnosisName(voTaxonomyMap.getDescription());
				voDiagnosis.setIsActive(Boolean.TRUE);
				voDiagnosis.setTaxonomyMap(voCollTaxonomyMapCollection);
										
				String[] arrErrors = voDiagnosis.validate();
				if(arrErrors != null)
				{
					engine.showErrors("Validation Errors", arrErrors);
					return;
				}
				
				try
				{
					voDiagnosis = domain.saveDiagnosis(voDiagnosis);
				} 
				catch (StaleObjectException e)
				{
					engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					return;
				}
				catch (UniqueKeyViolationException e)
				{
					engine.showMessage(e.getMessage());
					return;
				} 
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return;
				} 
				
				GenForm.grdChecklistRow row = form.grdChecklist().getRows().newRow();
				row.setColDiagnosis(voDiagnosis.getDiagnosisName());
				PatientDiagnosisVo voPatiend = new PatientDiagnosisVo();
				voPatiend.setDiagnosis(voDiagnosis);
				row.setColSelect(PresentAbsentUnknown.PRESENT);
				row.setcolDescription(voDiagnosis.getDiagnosisName());
				row.setValue(voPatiend);
			}
		}
	}
}
