//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.dementiaassessmentfindcomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}

	public static class GroupQuestion3RadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 496, 376, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "No", startTabIndex.intValue() + 15);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 432, 376, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Yes", startTabIndex.intValue() + 13);
		}
		public void setText(GroupQuestion3Enumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupQuestion3Enumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupQuestion3Enumeration.None;
				case 0: return GroupQuestion3Enumeration.rdoQuestion3No;
				case 1: return GroupQuestion3Enumeration.rdoQuestion3Yes;
			}
			return null;
		}
		public void setValue(GroupQuestion3Enumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupQuestion3Enumeration.None.id);
		}
		public boolean isEnabled(GroupQuestion3Enumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupQuestion3Enumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupQuestion3Enumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupQuestion3Enumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupQuestion3Enumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupQuestion3Enumeration None = new GroupQuestion3Enumeration(-1);
		public static GroupQuestion3Enumeration rdoQuestion3No = new GroupQuestion3Enumeration(0);
		public static GroupQuestion3Enumeration rdoQuestion3Yes = new GroupQuestion3Enumeration(1);
		private GroupQuestion3Enumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupQuestion3Enumeration)o).id;
		}
		private int id;
	}

	public static class GroupQuestion1RadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 496, 48, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "No", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 432, 48, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Yes", startTabIndex.intValue() + 1);
		}
		public void setText(GroupQuestion1Enumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupQuestion1Enumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupQuestion1Enumeration.None;
				case 0: return GroupQuestion1Enumeration.rdoQuestion1No;
				case 1: return GroupQuestion1Enumeration.rdoQuestion1Yes;
			}
			return null;
		}
		public void setValue(GroupQuestion1Enumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupQuestion1Enumeration.None.id);
		}
		public boolean isEnabled(GroupQuestion1Enumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupQuestion1Enumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupQuestion1Enumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupQuestion1Enumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupQuestion1Enumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupQuestion1Enumeration None = new GroupQuestion1Enumeration(-1);
		public static GroupQuestion1Enumeration rdoQuestion1No = new GroupQuestion1Enumeration(0);
		public static GroupQuestion1Enumeration rdoQuestion1Yes = new GroupQuestion1Enumeration(1);
		private GroupQuestion1Enumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupQuestion1Enumeration)o).id;
		}
		private int id;
	}

	public static class GroupQuestion2DCRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 496, 296, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "No", startTabIndex.intValue() + 12);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 432, 296, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "Yes", startTabIndex.intValue() + 11);
		}
		public void setText(GroupQuestion2DCEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupQuestion2DCEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupQuestion2DCEnumeration.None;
				case 0: return GroupQuestion2DCEnumeration.rdoQuestion2DCNo;
				case 1: return GroupQuestion2DCEnumeration.rdoQuestion2DCYes;
			}
			return null;
		}
		public void setValue(GroupQuestion2DCEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupQuestion2DCEnumeration.None.id);
		}
		public boolean isEnabled(GroupQuestion2DCEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupQuestion2DCEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupQuestion2DCEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupQuestion2DCEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupQuestion2DCEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupQuestion2DCEnumeration None = new GroupQuestion2DCEnumeration(-1);
		public static GroupQuestion2DCEnumeration rdoQuestion2DCNo = new GroupQuestion2DCEnumeration(0);
		public static GroupQuestion2DCEnumeration rdoQuestion2DCYes = new GroupQuestion2DCEnumeration(1);
		private GroupQuestion2DCEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupQuestion2DCEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupQuestion2dRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 496, 240, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "No", startTabIndex.intValue() + 10);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 432, 240, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper8.getX(), anchoringHelper8.getY(), anchoringHelper8.getWidth(), "Yes", startTabIndex.intValue() + 9);
		}
		public void setText(GroupQuestion2dEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupQuestion2dEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupQuestion2dEnumeration.None;
				case 0: return GroupQuestion2dEnumeration.rdoQuestion2dNo;
				case 1: return GroupQuestion2dEnumeration.rdoQuestion2dYes;
			}
			return null;
		}
		public void setValue(GroupQuestion2dEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupQuestion2dEnumeration.None.id);
		}
		public boolean isEnabled(GroupQuestion2dEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupQuestion2dEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupQuestion2dEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupQuestion2dEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupQuestion2dEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupQuestion2dEnumeration None = new GroupQuestion2dEnumeration(-1);
		public static GroupQuestion2dEnumeration rdoQuestion2dNo = new GroupQuestion2dEnumeration(0);
		public static GroupQuestion2dEnumeration rdoQuestion2dYes = new GroupQuestion2dEnumeration(1);
		private GroupQuestion2dEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupQuestion2dEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupQuestion2cRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 496, 200, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper9.getX(), anchoringHelper9.getY(), anchoringHelper9.getWidth(), "No", startTabIndex.intValue() + 8);
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 432, 200, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "Yes", startTabIndex.intValue() + 7);
		}
		public void setText(GroupQuestion2cEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupQuestion2cEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupQuestion2cEnumeration.None;
				case 0: return GroupQuestion2cEnumeration.rdoQuestion2cNo;
				case 1: return GroupQuestion2cEnumeration.rdoQuestion2cYes;
			}
			return null;
		}
		public void setValue(GroupQuestion2cEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupQuestion2cEnumeration.None.id);
		}
		public boolean isEnabled(GroupQuestion2cEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupQuestion2cEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupQuestion2cEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupQuestion2cEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupQuestion2cEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupQuestion2cEnumeration None = new GroupQuestion2cEnumeration(-1);
		public static GroupQuestion2cEnumeration rdoQuestion2cNo = new GroupQuestion2cEnumeration(0);
		public static GroupQuestion2cEnumeration rdoQuestion2cYes = new GroupQuestion2cEnumeration(1);
		private GroupQuestion2cEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupQuestion2cEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupQuestion2bRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 496, 160, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "No", startTabIndex.intValue() + 6);
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 432, 160, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper12.getX(), anchoringHelper12.getY(), anchoringHelper12.getWidth(), "Yes", startTabIndex.intValue() + 5);
		}
		public void setText(GroupQuestion2bEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupQuestion2bEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupQuestion2bEnumeration.None;
				case 0: return GroupQuestion2bEnumeration.rdoQuestion2bNo;
				case 1: return GroupQuestion2bEnumeration.rdoQuestion2bYes;
			}
			return null;
		}
		public void setValue(GroupQuestion2bEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupQuestion2bEnumeration.None.id);
		}
		public boolean isEnabled(GroupQuestion2bEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupQuestion2bEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupQuestion2bEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupQuestion2bEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupQuestion2bEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupQuestion2bEnumeration None = new GroupQuestion2bEnumeration(-1);
		public static GroupQuestion2bEnumeration rdoQuestion2bNo = new GroupQuestion2bEnumeration(0);
		public static GroupQuestion2bEnumeration rdoQuestion2bYes = new GroupQuestion2bEnumeration(1);
		private GroupQuestion2bEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupQuestion2bEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupQuestion2aRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 496, 120, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper13.getX(), anchoringHelper13.getY(), anchoringHelper13.getWidth(), "No", startTabIndex.intValue() + 4);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 432, 120, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper14.getX(), anchoringHelper14.getY(), anchoringHelper14.getWidth(), "Yes", startTabIndex.intValue() + 3);
		}
		public void setText(GroupQuestion2aEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupQuestion2aEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupQuestion2aEnumeration.None;
				case 0: return GroupQuestion2aEnumeration.rdoQuestion2aNo;
				case 1: return GroupQuestion2aEnumeration.rdoQuestion2aYes;
			}
			return null;
		}
		public void setValue(GroupQuestion2aEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupQuestion2aEnumeration.None.id);
		}
		public boolean isEnabled(GroupQuestion2aEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupQuestion2aEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupQuestion2aEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupQuestion2aEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupQuestion2aEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupQuestion2aEnumeration None = new GroupQuestion2aEnumeration(-1);
		public static GroupQuestion2aEnumeration rdoQuestion2aNo = new GroupQuestion2aEnumeration(0);
		public static GroupQuestion2aEnumeration rdoQuestion2aYes = new GroupQuestion2aEnumeration(1);
		private GroupQuestion2aEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupQuestion2aEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(730, 584);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 80, 698, 272, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"2) CAM Screening", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 580, 8, 149, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<<Authoring Date /Time >>", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 448, 8, 136, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Authoring Date /Time :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 128, 8, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<<Authoring HCP>>", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 25, 8, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 25, 408, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "affected their daily life ?", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 25, 392, 289, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "the past 12 months, to the extent that it has significantly", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 25, 376, 318, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "3) Awareness Question: Has the person been more forgetful in", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 108, 296, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Delirium Confirmed", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 96, 240, 172, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "d) Altered Level of Consciousness", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 96, 200, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "c) Disorganised Thinking", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 96, 160, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "b) Inattention", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 96, 120, 189, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "a) Acute Onset or Fluctuating Course", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 25, 48, 332, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "1) Does the patient already have a formal diagnosis of dementia?", new Integer(0), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 352, 555, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 96, 521, 80, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "RIE", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 521, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 639, 521, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 560, 521, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 27, 101, 26, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.InfoEnabled24, this.getImages().Core.InfoEnabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupQuestion3 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupQuestion3);
		GroupQuestion3RadioButton GroupQuestion3 = (GroupQuestion3RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupQuestion3RadioButton.class, tmpGroupQuestion3);
		GroupQuestion3.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupQuestion3);
		RadioButton tmpGroupQuestion1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupQuestion1);
		GroupQuestion1RadioButton GroupQuestion1 = (GroupQuestion1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupQuestion1RadioButton.class, tmpGroupQuestion1);
		GroupQuestion1.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupQuestion1);
		RadioButton tmpGroupQuestion2DC = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpGroupQuestion2DC);
		GroupQuestion2DCRadioButton GroupQuestion2DC = (GroupQuestion2DCRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupQuestion2DCRadioButton.class, tmpGroupQuestion2DC);
		GroupQuestion2DC.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupQuestion2DC);
		RadioButton tmpGroupQuestion2d = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupQuestion2d);
		GroupQuestion2dRadioButton GroupQuestion2d = (GroupQuestion2dRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupQuestion2dRadioButton.class, tmpGroupQuestion2d);
		GroupQuestion2d.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupQuestion2d);
		RadioButton tmpGroupQuestion2c = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupQuestion2c);
		GroupQuestion2cRadioButton GroupQuestion2c = (GroupQuestion2cRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupQuestion2cRadioButton.class, tmpGroupQuestion2c);
		GroupQuestion2c.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupQuestion2c);
		RadioButton tmpGroupQuestion2b = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupQuestion2b);
		GroupQuestion2bRadioButton GroupQuestion2b = (GroupQuestion2bRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupQuestion2bRadioButton.class, tmpGroupQuestion2b);
		GroupQuestion2b.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupQuestion2b);
		RadioButton tmpGroupQuestion2a = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupQuestion2a);
		GroupQuestion2aRadioButton GroupQuestion2a = (GroupQuestion2aRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupQuestion2aRadioButton.class, tmpGroupQuestion2a);
		GroupQuestion2a.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupQuestion2a);

		// Horizontal Line Controls
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 698, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 16, 448, 698, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 32, 272, 658, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlCAMSScreening()
	{
		return (Panel)super.getControl(0);
	}
	public Label lblAuthoringDateTimeValue()
	{
		return (Label)super.getControl(1);
	}
	public Label lblAuthoringDateTime()
	{
		return (Label)super.getControl(2);
	}
	public Label lblAuthoringHcpValue()
	{
		return (Label)super.getControl(3);
	}
	public Label lblAuthoringInfo()
	{
		return (Label)super.getControl(4);
	}
	public Label lblQ33()
	{
		return (Label)super.getControl(5);
	}
	public Label lblQ32()
	{
		return (Label)super.getControl(6);
	}
	public Label lblQ31()
	{
		return (Label)super.getControl(7);
	}
	public Label lblDeliriumConfirmed()
	{
		return (Label)super.getControl(8);
	}
	public Label lblCAMd()
	{
		return (Label)super.getControl(9);
	}
	public Label lblCAMc()
	{
		return (Label)super.getControl(10);
	}
	public Label lblCAMb()
	{
		return (Label)super.getControl(11);
	}
	public Label lblCAMa()
	{
		return (Label)super.getControl(12);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(14);
	}
	public Button btnRIE()
	{
		return (Button)super.getControl(15);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(16);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(17);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(18);
	}
	public ImageButton imbHelpIcon()
	{
		return (ImageButton)super.getControl(19);
	}
	public GroupQuestion3RadioButton GroupQuestion3()
	{
		return (GroupQuestion3RadioButton)super.getRadioButton(0);
	}
	public GroupQuestion1RadioButton GroupQuestion1()
	{
		return (GroupQuestion1RadioButton)super.getRadioButton(1);
	}
	public GroupQuestion2DCRadioButton GroupQuestion2DC()
	{
		return (GroupQuestion2DCRadioButton)super.getRadioButton(2);
	}
	public GroupQuestion2dRadioButton GroupQuestion2d()
	{
		return (GroupQuestion2dRadioButton)super.getRadioButton(3);
	}
	public GroupQuestion2cRadioButton GroupQuestion2c()
	{
		return (GroupQuestion2cRadioButton)super.getRadioButton(4);
	}
	public GroupQuestion2bRadioButton GroupQuestion2b()
	{
		return (GroupQuestion2bRadioButton)super.getRadioButton(5);
	}
	public GroupQuestion2aRadioButton GroupQuestion2a()
	{
		return (GroupQuestion2aRadioButton)super.getRadioButton(6);
	}
	public HorizontalLine hzlQuestion3()
	{
		return (HorizontalLine)super.getControl(28);
	}
	public HorizontalLine hzlQuestion2()
	{
		return (HorizontalLine)super.getControl(29);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Core = new CoreForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				DementiaAssessmentFINDComponent = new LocalFormName(123260);
			}
			public final FormName DementiaAssessmentFINDComponent;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}

		public ClinicalForms Clinical;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				InfoEnabled24 = new ImageHelper(102511, "Images/Core/info_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image InfoEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedEvent = new ims.framework.ContextVariable("SelectedEvent", prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__SelectedEvent_" + componentIdentifier + "");
			cxl_selectedDementia = new ims.framework.ContextVariable("selectedDementia", prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier + "");
			cxl_AuthoringInfo = new ims.framework.ContextVariable("AuthoringInfo", prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__AuthoringInfo_" + componentIdentifier + "");
			cxl_isParentFormDialog = new ims.framework.ContextVariable("isParentFormDialog", prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__isParentFormDialog_" + componentIdentifier + "");
		}
		
		public boolean getSelectedEventIsNotNull()
		{
			return !cxl_SelectedEvent.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.DementiaEventEnumeration getSelectedEvent()
		{
			return (ims.clinical.vo.enums.DementiaEventEnumeration)cxl_SelectedEvent.getValue(context);
		}
		public void setSelectedEvent(ims.clinical.vo.enums.DementiaEventEnumeration value)
		{
			cxl_SelectedEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedEvent = null;
		public boolean getselectedDementiaIsNotNull()
		{
			return !cxl_selectedDementia.getValueIsNull(context);
		}
		public ims.clinical.vo.DementiaVo getselectedDementia()
		{
			return (ims.clinical.vo.DementiaVo)cxl_selectedDementia.getValue(context);
		}
		public void setselectedDementia(ims.clinical.vo.DementiaVo value)
		{
			cxl_selectedDementia.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedDementia = null;
		public boolean getAuthoringInfoIsNotNull()
		{
			return !cxl_AuthoringInfo.getValueIsNull(context);
		}
		public ims.core.vo.AuthoringInformationVo getAuthoringInfo()
		{
			return (ims.core.vo.AuthoringInformationVo)cxl_AuthoringInfo.getValue(context);
		}
		public void setAuthoringInfo(ims.core.vo.AuthoringInformationVo value)
		{
			cxl_AuthoringInfo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AuthoringInfo = null;
		public boolean getisParentFormDialogIsNotNull()
		{
			return !cxl_isParentFormDialog.getValueIsNull(context);
		}
		public Boolean getisParentFormDialog()
		{
			return (Boolean)cxl_isParentFormDialog.getValue(context);
		}
		public void setisParentFormDialog(Boolean value)
		{
			cxl_isParentFormDialog.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isParentFormDialog = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[91];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-ID", "ID_DementiaConfiguration");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-AGE", "Age");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-EXCLUDEFAIRPERIOD", "ExcludeFAIRPeriod");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-STEPONEPERIOD", "StepOnePeriod");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-REMOVETIMEPERIOD", "RemoveTimePeriod");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-AMTSTHRESHOLDSCORE", "AMTSThresholdScore");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-ID", "ID_Dementia");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-PATIENT", "Patient");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-BREACHDATETIME", "BreachDateTime");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-AGEONADMISSION", "AgeOnAdmission");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-DISCHARGEDATETIME", "DischargeDateTime");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-DEMENTIACONFIRMED", "DementiaConfirmed");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-DELIRIUMCONFIRMED", "DeliriumConfirmed");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-AMTSSCORE", "AMTSScore");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-CONFIRMEDPATIENTPUTONDEMENTIAPATHWAY", "ConfirmedPatientPutOnDementiaPathway");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-ADMISSIONDETAIL", "AdmissionDetail");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-ISEXCLUDEDFROMWORKLIST", "IsExcludedFromWorklist");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__AuthoringInfo_" + componentIdentifier, "BO-1003100069-ID", "ID_AuthoringInformation");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentFINDComponent.__internal_x_context__AuthoringInfo_" + componentIdentifier, "BO-1003100069-AUTHORINGDATETIME", "AuthoringDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
