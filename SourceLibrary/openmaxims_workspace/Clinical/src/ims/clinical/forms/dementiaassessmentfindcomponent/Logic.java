//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4696.13908)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.dementiaassessmentfindcomponent;

import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion1Enumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion2DCEnumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion2aEnumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion2bEnumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion2cEnumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion2dEnumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion3Enumeration;
import ims.clinical.vo.DementiaFindVo;
import ims.clinical.vo.DementiaVo;
import ims.clinical.vo.DementiaWorklistStatusVo;
import ims.clinical.vo.DementiaWorklistStatusVoCollection;
import ims.clinical.vo.enums.DementiaEventEnumeration;
import ims.clinicaladmin.vo.DementiaTermConfigVo;
import ims.clinicaladmin.vo.lookups.DementiaTermConfig;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.lookups.DementiaWorklistStatus;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormModeChanged()
	{
		updateControlState();
	}

	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{	
		form.getLocalContext().setselectedDementia(domain.getDementia(form.getLocalContext().getselectedDementia()));
		populateScreenFromData(form.getLocalContext().getselectedDementia().getStepOneFind());

		form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.NEW);
		form.fireCustomControlValueChanged();
		form.setMode(FormMode.EDIT);
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getselectedDementiaIsNotNull() && form.getLocalContext().getselectedDementia().getStepOneFindIsNotNull())
		{
			form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.CANCEL);
			form.fireCustomControlValueChanged();
		}
		else
		{
			form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.CLOSE);
			form.fireCustomControlValueChanged();
		}
		
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (domain.getHcpUser() == null)
		{
			engine.showMessage("Logged in user is not HCP!");
			return;
		}
		
		if (save())
		{
			form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.SAVE);
			form.fireCustomControlValueChanged();
		}

	}

	private boolean save()
	{
		DementiaVo dementiaToSave = populateDataFromScreen((DementiaVo) form.getLocalContext().getselectedDementia().clone());

		String[] errors = dementiaToSave.validate(getUIErrors());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		// Check SOE
		// if (surgicalAuditOpDetToSave.getID_SurgicalAuditOperationDetailIsNotNull() && domain.isStale(surgicalAuditOpDetToSave))
		// {
		// engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		// form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.CANCEL);
		// form.fireCustomControlValueChanged();
		// return false;

		// }

		try
		{
			form.getLocalContext().setselectedDementia(domain.saveDementia(dementiaToSave,form.getForms().Clinical.DementiaAssessmentFINDComponent));//WDEV-16247
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.SOE);
			form.fireCustomControlValueChanged();
			return false;
		}

		return true;
	}

	private String[] getUIErrors()
	{
		// TODO Auto-generated method stub
		return null;
	}

	private DementiaVo populateDataFromScreen(DementiaVo dementiaVo)
	{
		DementiaFindVo dementiaFindVo = populateDataFromStep1Tab(dementiaVo.getStepOneFind());
		dementiaVo.setStepOneFind(dementiaFindVo);
		DementiaWorklistStatusVo tempCurrentStatus = null;
		// temporary used to set status to a specific type
		/*
		 * tempCurrentStatus = populateStatus(DementiaWorklistStatus.STEP_ONE_FIND_OUTSTANDING,form.getLocalContext().getAuthoringInfo());
		 * 
		 * dementiaVo.setCurrentWorklistStatus(tempCurrentStatus);
		 * 
		 * DementiaWorklistStatusVoCollection tempStatusHistory = dementiaVo.getHistoricalWorklistStatus(); tempStatusHistory.add(tempCurrentStatus); dementiaVo.setHistoricalWorklistStatus(tempStatusHistory);
		 */
		dementiaVo.setDementiaConfirmed(form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1Yes));
		dementiaVo.setDeliriumConfirmed(form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCYes) || (form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCYes) && form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3Yes)));

		if (dementiaFindVo != null)
		{
			AuthoringInformationVo voAuthor = new AuthoringInformationVo();
			voAuthor.setAuthoringDateTime(new DateTime());
			if (domain.getHcpLiteUser() != null)
				voAuthor.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());

			if (form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1Yes) || (form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1No) && form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCNo) && form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3No)))
			{
				if (dementiaVo.getCurrentWorklistStatusIsNotNull() && !DementiaWorklistStatus.COMPLETED.equals(dementiaVo.getCurrentWorklistStatus().getStatus()))
				{
					tempCurrentStatus = populateStatus(DementiaWorklistStatus.COMPLETED, voAuthor);
				}
			}
			else if (form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCYes) || (form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCNo) && form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3Yes)))
			{
				if (dementiaVo.getCurrentWorklistStatusIsNotNull() && !DementiaWorklistStatus.STEP_TWO_ASSESS_INVESTIGATE_OUTSTANDING.equals(dementiaVo.getCurrentWorklistStatus().getStatus()) && dementiaVo.getStepTwoAssess()==null)
				{
					tempCurrentStatus = populateStatus(DementiaWorklistStatus.STEP_TWO_ASSESS_INVESTIGATE_OUTSTANDING, voAuthor);
				}
			}

			if (tempCurrentStatus != null)
			{
				dementiaVo.setCurrentWorklistStatus(tempCurrentStatus);

				DementiaWorklistStatusVoCollection tempStatusHistory = dementiaVo.getHistoricalWorklistStatus();
				tempStatusHistory.add(tempCurrentStatus);
				dementiaVo.setHistoricalWorklistStatus(tempStatusHistory);
			}

		}
		return dementiaVo;
	}

	private DementiaWorklistStatusVo populateStatus(DementiaWorklistStatus status, AuthoringInformationVo authoringInfo)
	{
		DementiaWorklistStatusVo statusRecord = new DementiaWorklistStatusVo();

		statusRecord.setStatus(status);
		statusRecord.setAuthoringInformation(authoringInfo);

		return statusRecord;
	}

	private DementiaFindVo populateDataFromStep1Tab(DementiaFindVo stepOneFindVo)
	{
		if (stepOneFindVo == null)
			stepOneFindVo = new DementiaFindVo();
		else
			stepOneFindVo = (DementiaFindVo) stepOneFindVo.clone();

		if (stepOneFindVo.getAuthoringInformation() == null)
		{
			stepOneFindVo.setAuthoringInformation(form.getLocalContext().getAuthoringInfo());
		}

		boolean answerQuest1 = form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1Yes);
		stepOneFindVo.setHasFormalDiagnosisOfDementia(form.GroupQuestion1().getValue() != null ? (answerQuest1 ? YesNo.YES : YesNo.NO) : null);

		stepOneFindVo.setCAMSAcuteOnset(answerQuest1 ? null : (form.GroupQuestion2a().getValue().equals(GroupQuestion2aEnumeration.rdoQuestion2aYes) ? YesNo.YES : YesNo.NO));

		stepOneFindVo.setCAMSInattention(answerQuest1 ? null : (form.GroupQuestion2b().getValue().equals(GroupQuestion2bEnumeration.rdoQuestion2bYes) ? YesNo.YES : YesNo.NO));
		stepOneFindVo.setCAMSDisorganisedThinking(answerQuest1 ? null : (form.GroupQuestion2c().getValue().equals(GroupQuestion2cEnumeration.rdoQuestion2cYes) ? YesNo.YES : YesNo.NO));
		stepOneFindVo.setCAMSAlteredLevel(answerQuest1 ? null : (form.GroupQuestion2d().getValue().equals(GroupQuestion2dEnumeration.rdoQuestion2dYes) ? YesNo.YES : YesNo.NO));

		boolean answerQuestDC = form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCYes);
		stepOneFindVo.setDeliriumConfirmed(answerQuest1 ? null : (answerQuestDC ? YesNo.YES : YesNo.NO));

		stepOneFindVo.setAwarenessQuestion(answerQuestDC ? null : (form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3Yes) ? YesNo.YES : YesNo.NO));

		return stepOneFindVo;
	}

	protected void onRadioButtonGroupQuestion1ValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{

		updateControlState();
		if (form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1Yes))
		{
			clearQuestion2Controls();
			clearQuestion3Controls();
		}

	}

	protected void onRadioButtonGroupQuestion2DCValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlState();

	}

	private void hideShowQuery2(Boolean hideshow)
	{
		form.lblCAMa().setVisible(hideshow);
		form.GroupQuestion2a().setVisible(hideshow);
		form.lblCAMb().setVisible(hideshow);
		form.GroupQuestion2b().setVisible(hideshow);
		form.lblCAMc().setVisible(hideshow);
		form.GroupQuestion2c().setVisible(hideshow);
		form.lblCAMd().setVisible(hideshow);
		form.GroupQuestion2d().setVisible(hideshow);
		form.lblDeliriumConfirmed().setVisible(hideshow);
		form.GroupQuestion2DC().setVisible(hideshow);
		form.pnlCAMSScreening().setVisible(hideshow);
		form.hzlQuestion2().setVisible(hideshow);
		form.imbHelpIcon().setVisible(hideshow);	//wdev-16420

	}

	private void hideShowQuery3(Boolean hideshow)
	{
		form.lblQ31().setVisible(hideshow);
		form.lblQ32().setVisible(hideshow);
		form.lblQ33().setVisible(hideshow);
		form.GroupQuestion3().setVisible(hideshow);
		form.hzlQuestion3().setVisible(hideshow);
	}

	private void populateScreenFromData(DementiaFindVo stepOneFindVo)
	{
		hideShowQuery2(false);
		hideShowQuery3(false);

		if (stepOneFindVo == null)
			return;

		populateAuthoringControls(stepOneFindVo.getAuthoringInformation());
		boolean answeQuestion1 = YesNo.YES.equals(stepOneFindVo.getHasFormalDiagnosisOfDementia());
		form.GroupQuestion1().setValue(answeQuestion1 ? GroupQuestion1Enumeration.rdoQuestion1Yes : GroupQuestion1Enumeration.rdoQuestion1No);

		if (!answeQuestion1)
		{
			hideShowQuery2(true);
			form.GroupQuestion2a().setValue(YesNo.YES.equals(stepOneFindVo.getCAMSAcuteOnset()) ? GroupQuestion2aEnumeration.rdoQuestion2aYes : GroupQuestion2aEnumeration.rdoQuestion2aNo);
			form.GroupQuestion2b().setValue(YesNo.YES.equals(stepOneFindVo.getCAMSInattention()) ? GroupQuestion2bEnumeration.rdoQuestion2bYes : GroupQuestion2bEnumeration.rdoQuestion2bNo);
			form.GroupQuestion2c().setValue(YesNo.YES.equals(stepOneFindVo.getCAMSDisorganisedThinking()) ? GroupQuestion2cEnumeration.rdoQuestion2cYes : GroupQuestion2cEnumeration.rdoQuestion2cNo);
			form.GroupQuestion2d().setValue(YesNo.YES.equals(stepOneFindVo.getCAMSAlteredLevel()) ? GroupQuestion2dEnumeration.rdoQuestion2dYes : GroupQuestion2dEnumeration.rdoQuestion2dNo);

			boolean answeQuestionDC = YesNo.YES.equals(stepOneFindVo.getDeliriumConfirmed());
			form.GroupQuestion2DC().setValue(answeQuestionDC ? GroupQuestion2DCEnumeration.rdoQuestion2DCYes : GroupQuestion2DCEnumeration.rdoQuestion2DCNo);

			if (!answeQuestionDC)
			{
				hideShowQuery3(true);
				form.GroupQuestion3().setValue(YesNo.YES.equals(stepOneFindVo.getAwarenessQuestion()) ? GroupQuestion3Enumeration.rdoQuestion3Yes : GroupQuestion3Enumeration.rdoQuestion3No);
			}
		}

	}

	private void updateControlState()
	{
		boolean bShowQ3Controls = false;
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (!form.GroupQuestion2a().getValue().equals(GroupQuestion2aEnumeration.None) && !form.GroupQuestion2b().getValue().equals(GroupQuestion2bEnumeration.None) && !form.GroupQuestion2c().getValue().equals(GroupQuestion2cEnumeration.None) && !form.GroupQuestion2d().getValue().equals(GroupQuestion2dEnumeration.None))
				bShowQ3Controls = true;

			if (bShowQ3Controls && form.GroupQuestion2a().getValue().equals(GroupQuestion2aEnumeration.rdoQuestion2aYes) && form.GroupQuestion2b().getValue().equals(GroupQuestion2bEnumeration.rdoQuestion2bYes) && (form.GroupQuestion2c().getValue().equals(GroupQuestion2cEnumeration.rdoQuestion2cYes) || form.GroupQuestion2d().getValue().equals(GroupQuestion2dEnumeration.rdoQuestion2dYes)))
			{
				form.GroupQuestion2DC().setValue(GroupQuestion2DCEnumeration.rdoQuestion2DCYes);
			}
			else if (bShowQ3Controls)
			{
				form.GroupQuestion2DC().setValue(GroupQuestion2DCEnumeration.rdoQuestion2DCNo);
			}

			form.btnSave().setVisible(true);
			form.btnSave().setEnabled(form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1Yes) || form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCYes) || form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3Yes) || form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3No));
			
			hideShowQuery2(form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1No));
			hideShowQuery3(form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1No) && bShowQ3Controls && form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCNo));
		}
		form.imbHelpIcon().setEnabled(false);
		
		Object hcp = domain.getHcpLiteUser();
		HcpLiteVo hcpLiteUser=null;
		if (hcp != null)
			hcpLiteUser=((HcpLiteVo) hcp);
		DementiaFindVo voStep1Find = (form.getLocalContext().getselectedDementiaIsNotNull()?form.getLocalContext().getselectedDementia().getStepOneFind():null);
		
		form.btnEdit().setVisible(hcpLiteUser!=null && form.getMode().equals(FormMode.VIEW)
				&& form.getLocalContext().getselectedDementia() != null && voStep1Find !=null
				&& ((voStep1Find.getAuthoringInformationIsNotNull() && voStep1Find.getAuthoringInformation().getAuthoringHcpIsNotNull() && voStep1Find.getAuthoringInformation().getAuthoringHcp().equals(hcpLiteUser)) || engine.hasRight(AppRight.CAN_EDIT_AND_RIE_DEMENTIA)));
		form.GroupQuestion1().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.GroupQuestion2a().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.GroupQuestion2b().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.GroupQuestion2c().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.GroupQuestion2d().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.GroupQuestion2DC().setEnabled(false);
		form.GroupQuestion3().setEnabled(form.getMode().equals(FormMode.EDIT));

		form.btnRIE().setVisible(form.getMode().equals(FormMode.VIEW) 
				&& form.getLocalContext().getselectedDementia() != null 
				&& form.getLocalContext().getselectedDementia().getStepOneFind() !=null
				&& engine.hasRight(AppRight.CAN_EDIT_AND_RIE_DEMENTIA)	);
		form.btnClose().setVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getisParentFormDialog());
	}

	protected void onRadioButtonGroupQuestion3ValueChanged() throws PresentationLogicException
	{
		updateControlState();

	}

	protected void onRadioButtonGroupQuestion2dValueChanged() throws PresentationLogicException
	{
		if (form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCNo))
			clearQuestion3Controls();
		updateControlState();

	}

	protected void onRadioButtonGroupQuestion2cValueChanged() throws PresentationLogicException
	{
		if (form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCNo))
			clearQuestion3Controls();
		updateControlState();

	}

	protected void onRadioButtonGroupQuestion2bValueChanged() throws PresentationLogicException
	{
		if (form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCNo))
			clearQuestion3Controls();
		updateControlState();

	}

	protected void onRadioButtonGroupQuestion2aValueChanged() throws PresentationLogicException
	{
		if (form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCNo))
			clearQuestion3Controls();

		updateControlState();
	}

	private void clearAllControls()
	{
		clearAuthoringInfoControls();
		form.GroupQuestion1().setValue(null);
		clearQuestion2Controls();
		clearQuestion3Controls();
	}

	private void clearAuthoringInfoControls()
	{
		form.lblAuthoringHcpValue().setValue(null);
		form.lblAuthoringDateTimeValue().setValue(null);
	}

	private void clearQuestion2Controls()
	{
		form.GroupQuestion2a().setValue(null);
		form.GroupQuestion2b().setValue(null);
		form.GroupQuestion2c().setValue(null);
		form.GroupQuestion2d().setValue(null);
		form.GroupQuestion2DC().setValue(null);

	}

	private void clearQuestion3Controls()
	{
		form.GroupQuestion3().setValue(null);
	}

	public void setModeForm(FormMode mode)
	{
		form.setMode(mode);

	}

	public DementiaEventEnumeration getSelectedEvent()
	{

		return form.getLocalContext().getSelectedEvent();
	}

	public void initialize(DementiaVo dementiaVo, FormMode formMode, Boolean isParentFormDialog)
	{
		clearAllControls();

		populateHelpIcon();
		initializeAuthoringControls();
		form.getLocalContext().setselectedDementia(dementiaVo);
		form.getLocalContext().setisParentFormDialog(isParentFormDialog);
		populateScreenFromData(dementiaVo.getStepOneFind());

		form.setMode(formMode);
	}

	private void populateHelpIcon()
	{
		DementiaTermConfig lkpHint = new DementiaTermConfig();
		lkpHint.setId(DementiaTermConfig.FIND_FORM_HELP.getID());
		DementiaTermConfigVo voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbHelpIcon().setTooltip(voHint.getHelpText());
	}

	private void initializeAuthoringControls()
	{
		AuthoringInformationVo voAuthoring = new AuthoringInformationVo();

		voAuthoring.setAuthoringDateTime(new DateTime());
		if (domain.getHcpUser() != null)
			voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());

		populateAuthoringControls(voAuthoring);

	}

	private void populateAuthoringControls(AuthoringInformationVo voAuthoring)
	{
		clearAuthoringInfoControls();

		if (voAuthoring == null)
			return;

		form.getLocalContext().setAuthoringInfo(voAuthoring);
		form.lblAuthoringDateTimeValue().setValue(voAuthoring.getAuthoringDateTime().toString());
		if (voAuthoring.getAuthoringHcpIsNotNull())
		{
			if (voAuthoring.getAuthoringHcp().getIHcpName().length() > 65)
			{
				form.lblAuthoringHcpValue().setTooltip(voAuthoring.getAuthoringHcp().getIHcpName());
				form.lblAuthoringHcpValue().setValue(voAuthoring.getAuthoringHcp().getIHcpName().substring(0, 65));
			}
			else
				form.lblAuthoringHcpValue().setValue(voAuthoring.getAuthoringHcp().getIHcpName());
		}
	}

	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}

	public DementiaVo getValue()
	{
		return form.getLocalContext().getselectedDementia();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName != null && formName.equals(form.getForms().Core.RieConfirmationDialog) && result != null && result.equals(DialogResult.OK))
		{
			form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.MARK_RIE);
			form.fireCustomControlValueChanged();
		}
	}


	@Override
	protected void onBtnRIEClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.CLOSE);
		form.fireCustomControlValueChanged();
	}

}
