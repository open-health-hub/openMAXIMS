//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.patientassessmentlistandsearch;

import ims.clinical.forms.patientassessmentlistandsearch.GenForm.GroupDateEnumeration;
import ims.clinical.forms.patientassessmentlistandsearch.GenForm.grdAssessmentsRow;
import ims.clinical.vo.PatientAssessmentListAndSearchCriteriaVo;
import ims.clinical.vo.PatientAssessmentListVo;
import ims.clinical.vo.PatientAssessmentListVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	//---------------------------------------------------------------------------------------------------------------------------------------------
	//	Events handler region
	//---------------------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialize the form
		initialize();
		// Refresh the screen
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		// Update controls state
		updateControlsState();
	}
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Perform search
		search();
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear screen
		clear();
		// Clear search criteria global context
		form.getGlobalContext().Clinical.setPatientAssessmentListAndSearchCriteriaVo(null);
		
		// Update controls state
		updateControlsState();
	}
	
	@Override
	protected void onGrdAssessmentsSelectionChanged()
	{
		// Update controls state
		updateControlsState();
	}
	
	@Override
	protected void onGrdAssessmentsSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		// Update controls state
		updateControlsState();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			// Edit current instance
			case GenForm.ContextMenus.ClinicalNamespace.PatientAssessmentListAndSearch.VIEW:
				updateInstance();
				break;
		}
		
		// Update controls state
		updateControlsState();
	}

	
	//---------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions region
	//---------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 *	Function used to initialize the form
	 *	Initialize the MosQuery components, clear the global contexts
	 */
	public void initialize() throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialize MosQuery components
		form.ccAuthoringHCP().initialize(MosType.HCP);
		form.ccResponsibleHCP().initialize(MosType.HCP);
		
		// Check system flag and set appropriate column name
		form.grdAssessments().setColAuthoringHCPCaption(ConfigFlag.UI.PATIENT_ASSESSMENT_SEARCH_DISPLAY_HCP_COLUMN_TYPE.getValue());
		
		// Remove statuses different from "In Progress" or "Completed"
		ArrayList<?> values = form.cmbAssessmentStatus().getValues();
		
		for (int i = values.size() - 1; i >= 0; i--)
		{
			if (!PatientAssessmentStatusReason.COMPLETED.equals(values.get(i)) && !PatientAssessmentStatusReason.INPROGRESS.equals(values.get(i)))
			{
				form.cmbAssessmentStatus().removeRow((PatientAssessmentStatusReason) values.get(i));
			}
		}
	}
	
	
	/**
	 *	Function used to refresh the form
	 *	Will clear the screen, check search criteria and perform the search if needed
	 */
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear screen
		clear();
		
		// Check if the a search criteria exits
		if (form.getGlobalContext().Clinical.getPatientAssessmentListAndSearchCriteriaVoIsNotNull())
		{
			// Populate search criteria controls
			populateSearchControls(form.getGlobalContext().Clinical.getPatientAssessmentListAndSearchCriteriaVo());
		}

		// Perform search
		search();
		
		// Set form to VIEW mode
		form.setMode(FormMode.VIEW);
	}

	
	/**
	 *	Function used to perform search
	 *	Will validate search criteria, retain valid search criteria in persistent GC
	 *	perform domain search 
	 */
	private void search()
	{
		// Validate search criteria
		String[] errors = validateSearchCriteria();
		
		// Test validation
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		// Update search criteria
		form.getGlobalContext().Clinical.setPatientAssessmentListAndSearchCriteriaVo(populateSearchCriteriaFromScreen());
		
		PatientAssessmentListAndSearchCriteriaVo criteria = form.getGlobalContext().Clinical.getPatientAssessmentListAndSearchCriteriaVo();
		
		// Perform search
		PatientAssessmentListVoCollection patientAssessments = domain.listPatientAssessments(form.getGlobalContext().Core.getPatientShort(), criteria.getSpecialty(), criteria.getAuthoringHCP(), criteria.getResponsibleHCP(), criteria.getAssessmentName(), criteria.getAssessesmentStatus(), criteria.getDateFrom(), criteria.getDateTo(), GroupDateEnumeration.rdoEventDate.equals(form.GroupDate().getValue()));

		if (patientAssessments == null || patientAssessments.size() == 0)
		{
			engine.showMessage("No results matching search criteria were found");
		}

		// Populate patient assessments results to the grid
		populateAssessmentGrid(patientAssessments);
	}
	
	
	/**
	 * Function used to clear entire screen
	 * Will clear search controls & grid
	 */
	public void clear()
	{
		// Clear search controls
		clearSearchControls();
		// Clear grid results
		form.grdAssessments().getRows().clear();
	}

	/**
	 * Function used to clear search controls
	 */
	public void clearSearchControls()
	{
		// Clear search controls
		form.cmbSpecialty().setValue(null);
		form.ccAuthoringHCP().clear();
		form.ccResponsibleHCP().clear();
		form.txtAssessmentName().setValue(null);
		form.cmbAssessmentStatus().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);

		// Default to 'Event Date'
		form.GroupDate().setValue(GroupDateEnumeration.rdoEventDate);
	}


	/**
	 *	Function used to prepare for edit selected assessment
	 */
	public void updateInstance()
	{
		// Get the value of selected assessment
		PatientAssessmentListVo assessment = form.grdAssessments().getValue();

		// Set selected patient assessment
		form.getGlobalContext().Clinical.PatientAssessment.setSelectedAssessment(assessment);
		// Set form name where to return (name of this form) from Patient Assessment
		form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
		
		// Set global contexts for Dynamic Assessment form
		form.getGlobalContext().Core.setEpisodeofCareShort(domain.getEpisodeOfCare(assessment.getEpisodeOfCare()));
		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(assessment.getCareContext()));
		form.getGlobalContext().Core.setCurrentClinicalContact(domain.getClinicalContact(assessment.getClinicalContact()));
		
		
		// Determine what kind of assessment needs to be opened
		// Regular assessment or graphical assessment
		if (assessment != null && assessment.getAssessmentDataIsNotNull())
		{
			if (assessment.getAssessmentData().getUserAssessmentIsNotNull())
			{
				engine.open(form.getForms().Assessment.DynamicAssessments, new Object[] {assessment.getAssessmentData().getUserAssessment()});
			}
			else if (assessment.getAssessmentData().getGraphicIsNotNull())
			{
				engine.open(form.getForms().Assessment.DynamicAssessments, new Object[] {assessment.getAssessmentData().getGraphic()});
			}
		}
	}

	
	/**
	 *	Function used to control the way the controls state is updated
	 */
	public void updateControlsState()
	{
		// EDIT option from context menu must be visible only when an assessment is selected
		form.getContextMenus().Clinical.getPatientAssessmentListAndSearchVIEWItem().setVisible(form.grdAssessments().getSelectedRow() != null);
	}

	
	/**
	 *	Function used to validate search criteria
	 */
	private String[] validateSearchCriteria()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		Date dateFrom	= form.dteFrom().getValue();
		Date dateTo		= form.dteTo().getValue();
		Date today		= new Date();
		
		if (dateTo != null && today.isLessThan(dateTo))
		{
			errorList.add("'Date to' can not be set in the future.");
		}

		if (dateFrom != null && today.isLessThan(dateFrom))
		{
			errorList.add("'Date from' can not be set in the future.");
		}
		
		if (dateTo != null && dateFrom != null && dateTo.isLessThan(dateFrom))
		{
			errorList.add("'Date from' can not be greater than 'Date to'.");
		}
		
		return errorList.toArray(new String[errorList.size()]);
	}


	//---------------------------------------------------------------------------------------------------------------------------------------------
	//	Data exchange function region
	//---------------------------------------------------------------------------------------------------------------------------------------------
	
	/**
	 *	Function use to populate search controls from search criteria
	 */
	private void populateSearchControls(PatientAssessmentListAndSearchCriteriaVo searchCriteria)
	{
		// Clear search controls
		clearSearchControls();
		
		// Check parameter
		if (searchCriteria == null)
			return;
		
		// Populate search controls with data
		form.cmbSpecialty().setValue(searchCriteria.getSpecialty());
		form.ccAuthoringHCP().setValue(searchCriteria.getAuthoringHCP());
		form.ccResponsibleHCP().setValue(searchCriteria.getResponsibleHCP());
		form.txtAssessmentName().setValue(searchCriteria.getAssessmentName());
		form.cmbAssessmentStatus().setValue(searchCriteria.getAssessesmentStatus());
		form.dteFrom().setValue(searchCriteria.getDateFrom());
		form.dteTo().setValue(searchCriteria.getDateTo());
		
		// Set 'Event Date' / 'Generated Date'
		if (Boolean.TRUE.equals(searchCriteria.getDateSearchType()))
		{
			form.GroupDate().setValue(GroupDateEnumeration.rdoEventDate);
		}
		else
		{
			form.GroupDate().setValue(GroupDateEnumeration.rdoGeneratedDate);
		}
	}

	/**
	 * Function used to populate search criteria with values from screen
	 */
	private PatientAssessmentListAndSearchCriteriaVo populateSearchCriteriaFromScreen()
	{
		// New search criteria
		PatientAssessmentListAndSearchCriteriaVo searchCriteria = new PatientAssessmentListAndSearchCriteriaVo();

		// Get simple values from screen
		searchCriteria.setSpecialty(form.cmbSpecialty().getValue());
		searchCriteria.setAuthoringHCP((HcpLiteVo) form.ccAuthoringHCP().getValue());
		searchCriteria.setResponsibleHCP((HcpLiteVo) form.ccResponsibleHCP().getValue());
		searchCriteria.setAssessmentName(form.txtAssessmentName().getValue());
		searchCriteria.setAssessesmentStatus(form.cmbAssessmentStatus().getValue());
		searchCriteria.setDateFrom(form.dteFrom().getValue());
		searchCriteria.setDateTo(form.dteTo().getValue());
		
		// Determine date search type
		if (GroupDateEnumeration.rdoEventDate.equals(form.GroupDate().getValue()))
		{
			searchCriteria.setDateSearchType(Boolean.TRUE);
		}
		else
		{
			searchCriteria.setDateSearchType(Boolean.FALSE);
		}
		
		// Return search criteria
		return searchCriteria;
	}

	/**
	 * Function used to populate grid with search results
	 */
	private void populateAssessmentGrid(PatientAssessmentListVoCollection assessments)
	{
		// Clear the grid
		form.grdAssessments().getRows().clear();
		form.getGlobalContext().Clinical.setReturnToFormName(null); //WDEV-17142
		
		// Check results collection
		if (assessments == null)
			return;
		
		
		// Iterate assessments collection and add them to grid
		for (PatientAssessmentListVo assessment : assessments)
		{
			// Create row for assessment
			grdAssessmentsRow row = form.grdAssessments().getRows().newRow();
			
			populateAssessmentGridRow(assessment, row);
		}
	}

	/**
	 *	Function used to populate rows with assessment values
	 */
	private void populateAssessmentGridRow(PatientAssessmentListVo assessment, grdAssessmentsRow row)
	{
		// These are values for Config Flag
		final String AUTHORING_HCP		= "Authoring HCP";
		final String RESPONSIBLE_HCP	= "Responsible HCP";
		
		// Check row & assessment
		if (row == null || assessment == null)
			throw new CodingRuntimeException("Logical error - must populate valid rows, with valid values.");
		
		// Populate row cells
		
		// 'Event Date' - attempt to populate form Clinical Contact, second option is Care Context
		if (assessment.getClinicalContactIsNotNull() && assessment.getClinicalContact().getStartDateTimeIsNotNull())
		{
			row.setColEventDate(assessment.getClinicalContact().getStartDateTime().getDate());
		}
		else if (assessment.getCareContextIsNotNull() && assessment.getCareContext().getStartDateTimeIsNotNull())
		{
			row.setColEventDate(assessment.getCareContext().getStartDateTime().getDate());
		}
		
		// 'Generated Date' - the date the UDA was started
		if (assessment.getAuthoringInformationIsNotNull() && assessment.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
		{
			row.setColGeneratedDate(assessment.getSystemInformation().getCreationDateTime().getDate());
		}
		
		// 'Speciality' - from Clinical Contact, second option is Episode of Care
		if (assessment.getClinicalContactIsNotNull() && assessment.getClinicalContact().getSpecialtyIsNotNull())
		{
			row.setColSpecialty(assessment.getClinicalContact().getSpecialty().getText());
			row.setTooltipForColSpecialty(assessment.getClinicalContact().getSpecialty().getText());
		}
		else if (assessment.getEpisodeOfCareIsNotNull() && assessment.getEpisodeOfCare().getSpecialtyIsNotNull())
		{
			row.setColSpecialty(assessment.getEpisodeOfCare().getSpecialty().getText());
			row.setTooltipForColSpecialty(assessment.getEpisodeOfCare().getSpecialty().getText());
		}
		
		// 'Authoring HCP' / 'Responsible HCP' - depending on the ConfigFlag fill in appropriate value
		if (AUTHORING_HCP.equals(ConfigFlag.UI.PATIENT_ASSESSMENT_SEARCH_DISPLAY_HCP_COLUMN_TYPE.getValue())
				&& assessment.getAuthoringInformationIsNotNull() && assessment.getAuthoringInformation().getAuthoringHcpIsNotNull())
		{
			row.setColAuthoringHCP(assessment.getAuthoringInformation().getAuthoringHcp().toString());
			row.setTooltipForColAuthoringHCP(assessment.getAuthoringInformation().getAuthoringHcp().toString());
		}
		else if (RESPONSIBLE_HCP.equals(ConfigFlag.UI.PATIENT_ASSESSMENT_SEARCH_DISPLAY_HCP_COLUMN_TYPE.getValue())
				&& assessment.getEpisodeOfCareIsNotNull() && assessment.getEpisodeOfCare().getResponsibleHCPIsNotNull())
		{
			row.setColAuthoringHCP(assessment.getEpisodeOfCare().getResponsibleHCP().toString());
			row.setTooltipForColAuthoringHCP(assessment.getEpisodeOfCare().getResponsibleHCP().toString());
		}
		
		// 'Assessment Name' - name of the assessment
		if (assessment.getAssessmentDataIsNotNull() && assessment.getAssessmentData().getUserAssessmentIsNotNull())
		{
			row.setColAssessmentName(assessment.getAssessmentData().getUserAssessment().getName());
			row.setTooltipForColAssessmentName(assessment.getAssessmentData().getUserAssessment().getName());
		}
		else if (assessment.getAssessmentDataIsNotNull() && assessment.getAssessmentData().getGraphicIsNotNull())
		{
			row.setColAssessmentName(assessment.getAssessmentData().getGraphic().getName());
			row.setTooltipForColAssessmentName(assessment.getAssessmentData().getGraphic().getName());
		}
		
		// 'Status' - status of the patient assessment
		if (assessment.getStatusIsNotNull())
		{
			row.setColAssessmentStatus(assessment.getStatus().getText());
		}
		
		
		// Set row value
		row.setValue(assessment);
	}
}
