//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3399.26368)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.cliniclistwithicpactions;

import ims.admin.vo.AppointmentTrackingstatusColourConfigVo;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.PatientElectiveListForDNAAppointmentsVo;
import ims.RefMan.vo.TCIForPatientElectiveListAppointmentDNAVo;
import ims.RefMan.vo.TCIOutcomeForAppointmentDNAVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.clinical.forms.cliniclistwithicpactions.GenForm.grdResultsRow;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.IPandOPSearchCriteriaVo;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.Timer;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.icp.vo.OutpatientEpisodeWithICPInfoVo;
import ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVo;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.lookups.AppointmentTrackingStatus;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int CURRENT_TRACKING_DATETIME_COL_INDEX = 10;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		if (form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteriaIsNotNull())
			refreshSearchCriteria();
	}
	
	private void initialise() 
	{
		form.dteDate().setValue(new Date());
		form.getLocalContext().setbDNACalled(false);

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()); 
		form.grdResults().setcolHospnumCaption(dispIdType.getText());

		loadHospitals();
		
		if (form.cmbHospital().getValue() == null && engine.getCurrentLocation() != null)
		{
			//Try and load the logged in location as a ward
			LocMostVo voLoc = domain.getLocation((LocationRefVo)engine.getCurrentLocation());
			if (voLoc != null && voLoc.getTypeIsNotNull()
				&& voLoc.getType().equals(LocationType.WARD))
			{
				form.cmbHospital().setValue(voLoc.getParentLocation());
				searchForClinics();
			}
		}
		
		//WDEV-13354
		form.getTimers().gettimerSearch().setInterval(ConfigFlag.UI.CLINICLISTWITHICP_TIMER_INTERVAL.getValue());
		form.imbAutoRefresh().setEnabled(false);
		form.getLocalContext().setWasTimerEnabled(false);
	}

	private void refreshSearchCriteria() 
	{
		IPandOPSearchCriteriaVo voCriteria = form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteria();
		
		form.cmbHospital().setValue((LocationLiteVo) voCriteria.getHospital());
		form.dteDate().setValue(voCriteria.getDate());

		if(form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics(voCriteria.getClinicIsNotNull());
		
		form.cmbClinic().setValue((SessionShortVo) voCriteria.getClinic());

		search();
		
		//WDEV-13354
		if(voCriteria.getWasTimerOnIsNotNull() && voCriteria.getWasTimerOn())
		{
			form.getLocalContext().setWasTimerEnabled(true);
			toggleTimer(false);
		}
	}
	
	//WDEV-13354
	private void toggleTimer(boolean fromButton)
	{
		if(fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			if(!validateSearch())
				return;
		}
		
		boolean reinstateTimer = form.getLocalContext().getWasTimerEnabled();
		
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of Clinic List");	
			form.getLocalContext().setWasTimerEnabled(false);
			if(form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteriaIsNotNull())
				form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteria().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				form.imbAutoRefresh().setTooltip("Click button to stop the automatic refresh of Clinic List");
				form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
				
				//update the context state
				form.getLocalContext().setWasTimerEnabled(true);
				if(form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteriaIsNotNull())
					form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteria().setWasTimerOn(true);
				
				//enable the stopping button
				form.imbAutoRefresh().setEnabled(true);
			}
		}

		
		boolean enableControls = !form.getTimers().gettimerSearch().isEnabled();
		
		form.cmbHospital().setEnabled(enableControls);
		form.cmbClinic().setEnabled(enableControls);
		form.dteDate().setEnabled(enableControls);
		form.imbSearch().setEnabled(enableControls);
		form.imbClear().setEnabled(enableControls);
	}
	

	private void loadHospitals() 
	{
		LocationLiteVoCollection hospitals = domain.getActiveHospitals(domain.getMosUser() instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) domain.getMosUser() : null);
		if (hospitals!=null)
		{
			for (LocationLiteVo item: hospitals)
			{
				form.cmbHospital().newRow(item, item.getName());
				
				if(engine.getCurrentLocation() != null)
				{
					if (engine.getCurrentLocation().getID() == item.getID_Location().intValue()
						&& form.dteDate().getValue() != null)
					{
						form.cmbHospital().setValue(item);
						
						loadClinics(false);
					}
				}
			}
		}
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdResults().getRows().clear();
		form.getGlobalContext().setUKSHOutPatientWardViewSearchCriteria(null);
		form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();
		
		form.cmbClinic().clear();
		form.cmbHospital().setValue(null);
		form.dteDate().setValue(null);
		form.getLocalContext().setbDNACalled(false);
		
		//WDEV-13354
		form.imbAutoRefresh().setEnabled(false);
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}
	
	private boolean validateSearch()
	{
		List<String> uiErrors = new ArrayList<String>();
		
	//	if(form.cmbClinic().getValue() == null)
	//		uiErrors.add("Please select a Clinic");

		if(form.dteDate().getValue() == null)
			uiErrors.add("Please enter a Date");
			
		if(form.cmbHospital().getValue() == null)
			uiErrors.add("Please select a Hospital");
		
		if(uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[0]));
			return false;
		}
		
		return true;
	}
	
	private void search() 
	{
		//WDEV-13354
		form.imbAutoRefresh().setEnabled(false);
		
		if ( ! validateSearch())
			return;
		
		IPandOPSearchCriteriaVo filterVo = new IPandOPSearchCriteriaVo();
		
		filterVo = populateSearchFilter(filterVo);
		if (filterVo ==null)
			return;
		
		form.getLocalContext().setbDNACalled(false);

		form.getGlobalContext().setUKSHOutPatientWardViewSearchCriteria(filterVo);
		form.grdResults().getRows().clear();
		form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();

		OutpatientEpisodeWithICPInfoVoCollection list = domain.listOPEpisodes(filterVo);
		if (list == null || list.size() == 0)
		{
			engine.showMessage("No records match your search criteria.", "No data found", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}

		//WDEV-11771 - starts here
		list.sort(OutpatientEpisodeWithICPInfoVo.getTimeComparator(SortOrder.ASCENDING));
		form.getLocalContext().setSortOrderTime(SortOrder.DESCENDING);
		//WDEV-11771 - ends here
		
		populateGrid(list);
				
		//WDEV-13354
		form.imbAutoRefresh().setEnabled(true);
	}

	private void populateGrid(OutpatientEpisodeWithICPInfoVoCollection list) 
	{
		form.grdResults().getRows().clear();
		StringBuffer strTooltip = new StringBuffer();
		
		for (int i = 0 ; list != null && i < list.size() ; i++)
		{
			grdResultsRow row = form.grdResults().getRows().newRow();
			OutpatientEpisodeWithICPInfoVo outpatientEpisode = list.get(i);
			
			strTooltip.delete(0, strTooltip.length());

			row.setcolICP(outpatientEpisode.getICPInfoIsNotNull() ? form.getImages().ICP.ICP : null);
			row.setcolICAB(outpatientEpisode.getReferral() != null && Boolean.TRUE.equals(outpatientEpisode.getReferral().getIsCAB()) ? form.getImages().OCRR.LetterC : null);
			
			// WDEV-15944
			Booking_AppointmentVo voBook = domain.getBookingAppt(outpatientEpisode);

			PatientShort voPatShort = outpatientEpisode.getPatient();
			strTooltip.append("<b>Booking details :</b> " + voPatShort.getPatientNameAndIdInfo());
			
			if(voBook != null && voBook.getOutcomeIsNotNull())
				strTooltip.append("<br><b>Appointment Outcome :</b> " + voBook.getOutcome().getText());
			
			if (voBook != null && voBook.getOutcomeCommentsIsNotNull())
				strTooltip.append("<br><b>Outcome Comment:</b> " + voBook.getOutcomeComments());
				
			if(voBook != null && voBook.getCommentsIsNotNull())
				strTooltip.append("<br><b>Appointment Comments:</b> " + voBook.getComments());

			if (outpatientEpisode.getReferral() != null && outpatientEpisode.getReferral().getReferralDetails() != null)
			{
				strTooltip.append("<br><b>RTT Breach Date:</b> " + outpatientEpisode.getReferral().getReferralDetails().getEnd18WW().toString());
				
				if (outpatientEpisode.getReferral().getReferralDetails().getDadUbrn() != null)
					strTooltip.append("<br><b>UBRN:</b> " + outpatientEpisode.getReferral().getReferralDetails().getDadUbrn());
			}
			
			if (outpatientEpisode.getPatient().getDisplayId() != null)
				row.setcolHospnum(outpatientEpisode.getPatient().getDisplayId().getValue());
				row.setTooltipForcolHospnum(strTooltip.toString());
			
			row.setcolSurname(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getSurname() : "");
			row.setTooltipForcolSurname(strTooltip.toString());
			
			row.setcolForename(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getForename() : "");
			row.setTooltipForcolForename(strTooltip.toString());
			
			row.setcolSex(outpatientEpisode.getPatient().getSexIsNotNull() ? outpatientEpisode.getPatient().getSex().toString() : "");
			//WDEV-11893
			row.setTooltipForcolSex(outpatientEpisode.getPatient().getSexIsNotNull() ? outpatientEpisode.getPatient().getSex().toString() + "<br><br>" + strTooltip : strTooltip.toString());
			
			row.setcolDob(outpatientEpisode.getPatient().getDobIsNotNull() ? outpatientEpisode.getPatient().getDob().toString() : "");
			row.setTooltipForcolDob(strTooltip.toString());
			
			if (outpatientEpisode.getSessionIsNotNull() 
				&& outpatientEpisode.getSession().getListOwnersIsNotNull()
				&& outpatientEpisode.getSession().getListOwners().size() > 0 
				&& outpatientEpisode.getSession().getListOwners().get(0).getHcpIsNotNull()
				&& outpatientEpisode.getSession().getListOwners().get(0).getHcp().getName() != null)
			{
				row.setcolConsultant(outpatientEpisode.getSession().getListOwners().get(0).getHcp().getName().toString());
				//WDEV-11893
				row.setTooltipForcolConsultant(outpatientEpisode.getSession().getListOwners().get(0).getHcp().getName().toString() + "<br><br>" + strTooltip);
			}
			else
				row.setTooltipForcolConsultant(strTooltip.toString());
			
			row.setColStatus(outpatientEpisode.getApptStatusIsNotNull() ? outpatientEpisode.getApptStatus().toString() : "");
			row.setTooltipForColStatus(outpatientEpisode.getApptStatusIsNotNull() ? outpatientEpisode.getApptStatus().toString() + "<br><br>" + strTooltip : strTooltip.toString());
			
			if (outpatientEpisode.getApptStatusIsNotNull() && outpatientEpisode.getApptStatus().equals(Status_Reason.ARRIVAL))
				row.setBackColor(ConfigFlag.UI.CLINIC_LIST_ARRIVED_COLOUR.getValue());
			
			row.setcolApptTime(outpatientEpisode.getAppointmentTimeIsNotNull() ? outpatientEpisode.getAppointmentTime().toString() : null);
			row.setTooltipForcolApptTime(strTooltip.toString());
			
			//WDEV-11665 - starts here
			String IcpTooltip = "";
			
			if (outpatientEpisode.getICPInfoIsNotNull())
			{
				if(outpatientEpisode.getICPInfo().getHasOutstandingNursingActionsIsNotNull() 
				&& outpatientEpisode.getICPInfo().getHasOutstandingNursingActions())
				{
					IcpTooltip += "Nursing Action Required for ICP : " + (outpatientEpisode.getICPInfo().getICPIsNotNull() ? outpatientEpisode.getICPInfo().getICP().getName().toString() : "") + "<br>";
				}
			
				if (outpatientEpisode.getICPInfo().getHasOutstandingClinicalActionsIsNotNull() 
					&& outpatientEpisode.getICPInfo().getHasOutstandingClinicalActions())
				{
					IcpTooltip += "Medical Action Required for ICP: "  + (outpatientEpisode.getICPInfo().getICPIsNotNull() ? outpatientEpisode.getICPInfo().getICP().getName().toString() : "") + "<br>";
				}

				if (outpatientEpisode.getICPInfo().getHasOutstandingPhysioActionsIsNotNull() 
					&& outpatientEpisode.getICPInfo().getHasOutstandingPhysioActions())
				{
					IcpTooltip += "Physio Action Required for ICP: "  + (outpatientEpisode.getICPInfo().getICPIsNotNull() ? outpatientEpisode.getICPInfo().getICP().getName().toString() : "") + "<br>";
				}

				if(outpatientEpisode.getICPInfo().getHasOutstandingAdminActionsIsNotNull()
					&& outpatientEpisode.getICPInfo().getHasOutstandingAdminActions())
				{
					IcpTooltip += "Admin Action Required for ICP: "  + (outpatientEpisode.getICPInfo().getICPIsNotNull() ? outpatientEpisode.getICPInfo().getICP().getName().toString() : "")+ "<br>";
				}
			}
			
			row.setTooltipForcolICP(IcpTooltip.length() > 0 ? IcpTooltip + "<br>" + strTooltip : strTooltip.toString());
			row.setTooltipForcolICAB(strTooltip.toString());
			
			row.setcolTracking(outpatientEpisode.getCurrentApptTrakingStatus() != null ? outpatientEpisode.getCurrentApptTrakingStatus().getTrackingStatus().getIItemText() : null);
			row.setTooltipForcolTracking(outpatientEpisode.getCurrentApptTrakingStatus() != null ? outpatientEpisode.getCurrentApptTrakingStatus().getTrackingStatus().getIItemText() + "<br><br>" + strTooltip : strTooltip.toString());
			
			if(outpatientEpisode.getCurrentApptTrakingStatus() != null && outpatientEpisode.getCurrentApptTrakingStatus().getTrackingStatusIsNotNull())
			{
				AppointmentTrackingstatusColourConfigVo colorConfig = outpatientEpisode.getAppointmentTrackingStatus();
				
				if (colorConfig != null)
				{
					// WDEV-12745
					// If status was changed more than 'idle' minutes (configured for AppointmentTrackingStatusConfig) ago,
					// then set row to idle colour
					if (outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTimeIsNotNull() && outpatientEpisode.getAppointmentTrackingStatus().getIdleTimeInMinsIsNotNull()
							&& ((DateTime) outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime().clone()).addMinutes(colorConfig.getIdleTimeInMins()).isLessOrEqualThan(new DateTime()))
					{
						row.setBackColor(colorConfig.getIdleColour());
					}
					else
					{
    					row.setBackColor(colorConfig.getColour());
					}
				}
			}
			
			row.setcolActivityType(outpatientEpisode.getActivityIsNotNull() ? outpatientEpisode.getActivity().getName() : null);
			row.setTooltipForcolActivityType(outpatientEpisode.getActivityIsNotNull() ? outpatientEpisode.getActivity().getName() + "<br><br>" + strTooltip : strTooltip.toString());
			//WDEV-11665 - ends here
			
			//WDEV-11893 - starts here
			row.setColTrackingTime((outpatientEpisode.getCurrentApptTrakingStatus() != null && outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime() != null && outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime().getTime() != null) ? outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime().getTime().toString() : null);
			row.setTooltipForColTrackingTime((outpatientEpisode.getCurrentApptTrakingStatus() != null && outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime() != null) ? outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime().toString() + "<br><br>" + strTooltip : strTooltip.toString());
			//WDEV-11893 - ends here
			
			//WDEV-18220 - starts here
			if (Boolean.TRUE.equals(outpatientEpisode.getHasElectiveList()))
			{
				row.setcolOutcomeElective(form.getImages().Core.UI16);
				row.setCellcolOutcomeElectiveTooltip("Waiting list entry");//WDEV-18345
			}
			else if (Boolean.TRUE.equals(outpatientEpisode.getOutcomeIsNotNull()))
			{
				row.setcolOutcomeElective(form.getImages().Scheduling.appointment_outcome_16);
				row.setCellcolOutcomeElectiveTooltip("Appointment Outcome: " + outpatientEpisode.getOutcome().getText());
			}
			//WDEV-18220 - ends here
			
			row.setValue(outpatientEpisode);
		}
	}

	private IPandOPSearchCriteriaVo populateSearchFilter(IPandOPSearchCriteriaVo filterVo) 
	{
		if (form.cmbHospital().getValue() != null)
			filterVo.setHospital(form.cmbHospital().getValue());

		if (form.cmbClinic().getValue() != null)
			filterVo.setClinic(form.cmbClinic().getValue());

		if (form.dteDate().getValue() != null)
			filterVo.setDate(form.dteDate().getValue());

		//WDEV-13354
		filterVo.setWasTimerOn(form.getLocalContext().getWasTimerEnabled());
		
		return filterVo;
	}

	@Override
	protected void onGrdResultsSelectionChanged() throws PresentationLogicException 
	{
		form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());
		form.getGlobalContext().Core.setSelectedLocationForOrdering(form.cmbClinic().getValue() != null ? form.cmbClinic().getValue().getSchLocation() : null);
		
		form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();
		form.getLocalContext().setbLessThenTodaysDate(null);
	
		if (form.grdResults().getSelectedRow() != null 
				&& form.grdResults().getSelectedRow().getValue() != null) 
		{
			if (form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.BOOKED)
				&& form.grdResults().getSelectedRow().getValue().getAppointmentDateIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getAppointmentDate().isLessOrEqualThan(new Date()) )
			{
				form.getContextMenus().Clinical.getOPClinicViewListARRIVEItem().setVisible(true);
				form.getContextMenus().Clinical.getOPClinicViewListARRIVEItem().setEnabled(true);
				
				form.getLocalContext().setbLessThenTodaysDate(! form.grdResults().getSelectedRow().getValue().getAppointmentDate().getDate().equals(new Date().getDate()));
			}
		
			// WDEV-15944 - Outcome enabled if status is arrived or seen and APPOINTMENT_OUTCOME_ENABLED = true
			if (Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue()) && form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
					&& (form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.ARRIVAL) ||
						form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.SEEN)) && form.grdResults().getSelectedRow().getValue().getOutcome() == null)
				{
					form.getContextMenus().Clinical.getOPClinicViewListOUTCOMEItem().setVisible(true);
					form.getContextMenus().Clinical.getOPClinicViewListOUTCOMEItem().setEnabled(true);
				}
			
			
			//WDEV-9657
			if (form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull() && form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.BOOKED))
			{			
				//WDEV-11580
				//if appt was today or in the past
				if(form.grdResults().getValue().getAppointmentDateIsNotNull() && new Date().isGreaterOrEqualThan(form.grdResults().getValue().getAppointmentDate()))
				{
					if(new Date().equals(form.grdResults().getValue().getAppointmentDate()))
					{
						//check time as same day
						if(form.grdResults().getValue().getAppointmentTimeIsNotNull() && new Time().isGreaterThan(form.grdResults().getValue().getAppointmentTime())) //wdev-10557
						{
							form.getContextMenus().Clinical.getOPClinicViewListDNAItem().setVisible(true);
						}
					}
					else //in the past disregard time of day
						form.getContextMenus().Clinical.getOPClinicViewListDNAItem().setVisible(true);
				}
			}
				
			if (form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.ARRIVAL) 
				&& form.grdResults().getSelectedRow().getValue().getAppointmentDateIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getAppointmentDate().isLessOrEqualThan(new Date()) )
			{
				//WDEV-11665 - starts here
				/*
				if (form.grdResults().getSelectedRow().getValue().getICPInfo() == null)
				{
					form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_NO_ICPItem().setVisible(true);
					form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_NO_ICPItem().setEnabled(true);
				}
				
				else
				{	
					form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_ICPItem().setVisible(true);
					form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_ICPItem().setEnabled(true);
				}*/
				//WDEV-11665 - ends here

				form.getLocalContext().setbLessThenTodaysDate(! form.grdResults().getSelectedRow().getValue().getAppointmentDate().getDate().equals(new Date().getDate()));
			}

			if (form.grdResults().getSelectedRow().getValue().getICPInfoIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getICPInfo().getID_PatientICPIsNotNull())
			{
				form.getContextMenus().Clinical.getOPClinicViewListEditViewICPActionsItem().setVisible(true);
				form.getContextMenus().Clinical.getOPClinicViewListEditViewICPActionsItem().setEnabled(true);
				
			}

			if (form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.SEEN)
				&& domain.isNotACurrentInpatient(form.grdResults().getSelectedRow().getValue().getPatient()))
			{
				form.getContextMenus().Clinical.getOPClinicViewListADMITItem().setVisible(true);
				form.getContextMenus().Clinical.getOPClinicViewListADMITItem().setEnabled(true);
			}

			// This is not to bring the Inpatient episode when doing the query
			// There might be an optimum way of doing this if we bring all the data we need at search
			if (form.grdResults().getValue() != null)
			{
    			CatsReferralListVo catsReferral = domain.getCatsReferral(form.grdResults().getValue());
    			
    			if (catsReferral != null && catsReferral.getCareContextIsNotNull())
    			{
        			if (form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
        				&& (form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.SEEN)
        					|| form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.ADMITTED))
        				&& domain.isInpatientCareContext(form.grdResults().getValue().getPatient(), catsReferral.getCareContext())
        				/*! domain.isNotACurrentInpatient(form.grdResults().getSelectedRow().getValue().getPatient())*/)
        			{
        				form.getContextMenus().Clinical.getOPClinicViewListDISCHARGEItem().setVisible(true);
        				form.getContextMenus().Clinical.getOPClinicViewListDISCHARGEItem().setEnabled(true);
        			}			

        			if (catsReferral.getCurrentStatusIsNotNull()
        				&& catsReferral.getCurrentStatus().getReferralStatusIsNotNull()
        				&& ! catsReferral.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.REFERRAL_ACCEPTED))
        				{
        					form.getContextMenus().Clinical.getOPClinicViewListADMITItem().setVisible(false);
        					form.getContextMenus().Clinical.getOPClinicViewListADMITItem().setEnabled(false);
        				}
   			}
 			}
		}
		
		if (form.grdResults().getSelectedRow() != null
			&& form.grdResults().getSelectedRow().getValue() != null)
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.grdResults().getSelectedRow().getValue().getPatient()));

		// Added as requested by JNS - WDEV-15944
		form.getGlobalContext().ICP.setPatientICPRecord(form.grdResults().getSelectedRow().getValue().getICPInfo());
		form.getGlobalContext().RefMan.setCatsReferral(form.grdResults().getSelectedRow().getValue().getReferral());

				
		//WDEV-11665
		updateControlsState();
	}
	
	//WDEV-11665 starts here
	private void updateControlsState() 
	{
		boolean showArrivedMenuItem = form.grdResults().getSelectedRow()!=null 
									  && form.grdResults().getSelectedRow().getValue() instanceof OutpatientEpisodeWithICPInfoVo
									  && form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
									  && form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.BOOKED)
									  && form.grdResults().getSelectedRow().getValue().getAppointmentDateIsNotNull()
									  && form.grdResults().getSelectedRow().getValue().getAppointmentDate().isLessOrEqualThan(new Date());
		
		boolean showSeenMenuItem = form.grdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo
							   && form.grdResults().getValue().getApptStatusIsNotNull()
							   && form.grdResults().getValue().getApptStatus().equals(Status_Reason.ARRIVAL) 
							   && form.grdResults().getValue().getAppointmentDateIsNotNull()
							   && form.grdResults().getValue().getAppointmentDate().isLessOrEqualThan(new Date());
		
		boolean showUndoArrivalMenuItem = form.grdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo
		   								&& Status_Reason.ARRIVAL.equals(form.grdResults().getValue().getApptStatus());
		
		form.getContextMenus().Clinical.getOPClinicViewListARRIVEItem().setVisible(showArrivedMenuItem);
		form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_ICPItem().setVisible(showSeenMenuItem && getCurrentTrackingStatus() != null && !AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_NO_ICPItem().setVisible(showSeenMenuItem && getCurrentTrackingStatus() != null && !AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListWAIT_FOR_NEXTItem().setVisible(getCurrentTrackingStatus() != null && !AppointmentTrackingStatus.PATIENT_WAITING_FOR_NEXT.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListSEEN_BY_ANAESTHETISTItem().setVisible(getCurrentTrackingStatus() != null && !AppointmentTrackingStatus.PATIENT_SEEN_BY_ANAESTHETIST.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListWITH_PHYSIOTHERAPYItem().setVisible(getCurrentTrackingStatus() != null && !AppointmentTrackingStatus.PATIENT_WITH_PHYSIOTHERAPY.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListSEEN_BY_PREOP_NURSEItem().setVisible(getCurrentTrackingStatus() != null && !AppointmentTrackingStatus.PATIENT_SEEN_BY_PREOP_NURSE.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListWITH_DIAGNOSTIC_SERVICESItem().setVisible(getCurrentTrackingStatus() != null && !AppointmentTrackingStatus.PATIENT_WITH_DIAGNOSTIC_SERVICES.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListVISIT_COMPLETEItem().setVisible(getCurrentTrackingStatus() != null && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListUNDO_ARRIVALItem().setVisible(showUndoArrivalMenuItem);
		
		form.getContextMenus().Clinical.getOPClinicViewListVIEW_OUTCOMEItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue())
				&& form.grdResults().getValue() != null //WDEV-18584 
				&& form.grdResults().getValue().getApptStatusIsNotNull() //WDEV-18584 
				&& (form.grdResults().getValue().getApptStatus().equals(Status_Reason.ARRIVAL) || form.grdResults().getValue().getApptStatus().equals(Status_Reason.SEEN)) //WDEV-18584  
				&& form.grdResults().getValue().getOutcome() != null); //WDEV-18584 
	}

	private AppointmentTrackingStatus getCurrentTrackingStatus() 
	{
		//WDEV-17987
		if(form.grdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo && form.grdResults().getValue().getCurrentApptTrakingStatusIsNotNull() && !AppointmentTrackingStatus.UNDO_ARRIVAL.equals( form.grdResults().getValue().getCurrentApptTrakingStatus().getTrackingStatus()))
			return form.grdResults().getValue().getCurrentApptTrakingStatus().getTrackingStatus();
		
		return null;
	}
	//WDEV-11665 - ends here

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		//WDEV-13354
		disableRefreshTemporarily();
		
		switch(menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.EditViewICPActions:
				engine.clearPatientContextInformation();//wdev-8668
				form.getGlobalContext().ICP.setPatientICPRecord(form.grdResults().getSelectedRow().getValue().getICPInfo());
				engine.open(form.getForms().ICP.PatientICP);
			break;
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.ARRIVE:
				arriveBookingMenuOption();
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.SEEN_EDIT_ICP:
				toggleTimer(false);
				markasSeenMenuOption(true);
				return;

			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.SEEN_EDIT_NO_ICP:
				markasSeenMenuOption(false);
			break;
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.ADMIT:
				admitPatient();
			break;
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.DISCHARGE:
				dischargePatient();
			break;
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.DNA:
				dnaPatientMenuItem();
			break;
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.OUTCOME:
				recordApptOutcome();
			break;
			
			//WDEV-17987
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.UNDO_ARRIVAL:
				form.getLocalContext().setUndoArrivalMessageBoxId(engine.showMessage("Are you sure you want to Undo this Arrival ?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
			break;

			
			//WDEV-11665 - starts here
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.WAIT_FOR_NEXT:
				updateTrackingStatus(AppointmentTrackingStatus.PATIENT_WAITING_FOR_NEXT);
				search();
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.SEEN_BY_ANAESTHETIST:
				updateTrackingStatus(AppointmentTrackingStatus.PATIENT_SEEN_BY_ANAESTHETIST);
				search();
			break;
				
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.WITH_PHYSIOTHERAPY:
				updateTrackingStatus(AppointmentTrackingStatus.PATIENT_WITH_PHYSIOTHERAPY);
				search();
			break;
				
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.SEEN_BY_PREOP_NURSE:
				updateTrackingStatus(AppointmentTrackingStatus.PATIENT_SEEN_BY_PREOP_NURSE);
				search();
			break;
				
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.WITH_DIAGNOSTIC_SERVICES:
				updateTrackingStatus(AppointmentTrackingStatus.PATIENT_WITH_DIAGNOSTIC_SERVICES);
				search();
			break;
				
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.VISIT_COMPLETE:
				visitComplete();	//WDEV-11788
			break;
			//WDEV-11665 - ends here
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.VIEW_OUTCOME:
				viewOutcome();
			break;
			
			default:
		}

		toggleTimer(false);
	}

	private void viewOutcome()
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdResults().getValue());
		if (voBook != null)
		{
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voBook);
			
			engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.VIEW});
		}
	}

	//WDEV-11788 - starts here
	private void visitComplete() 
	{
		updateTrackingStatus(AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE);
		search();
	}
	//WDEV-11788 - ends here
	
	//WDEV-11665 - starts here
	private void updateTrackingStatus(AppointmentTrackingStatus trackingStatus)
	{
		if(trackingStatus == null)
			throw new CodingRuntimeException("Can not add a null tracking status.");
		
		Booking_AppointmentVo voBooking = domain.getOpEpisode(form.grdResults().getValue());
		
		if (voBooking == null)
		{
			engine.showMessage("No Booking Found.");
			return;
		}

		//WDEV-11786 - starts here
		if(form.grdResults().getValue().getVersion_Booking_Appointment() != voBooking.getVersion_Booking_Appointment())
		{
			//simulate SOE
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		//WDEV-11786 - ends here
		
		//WDEV-11788 - starts here
		if (trackingStatus.equals(AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE) && voBooking != null && voBooking.getApptStatusIsNotNull() && voBooking.getApptStatus().equals(Status_Reason.ARRIVAL))
		{
			updateBookingWithSeenStatus(voBooking);
		}
		//WDEV-11788 - ends here
		
		populateAppointmentWithTrackingStatus(voBooking, trackingStatus);
		
		String[] error = voBooking.validate();
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}
		
		try 
	 	{
			domain.saveBookingAppointment(voBooking);
		} 
	 	catch (StaleObjectException e) 
	 	{
	 		e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		} 
	 	catch (DomainInterfaceException e) 
	 	{
	 		e.printStackTrace();
			engine.showMessage(e.getMessage());
			return;
		} 
	 	catch (UniqueKeyViolationException e) 
		{
	 		e.printStackTrace();
			engine.showMessage(e.getMessage());
			return;
		}
	}
	//WDEV-11665 - ends here

	//WDEV-11788 - starts here
	private void updateBookingWithSeenStatus(Booking_AppointmentVo voBooking) 
	{
		voBooking.setApptStatus(Status_Reason.SEEN);
		
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voBooking.getAppointmentDate());
		voStatus.setApptTime(voBooking.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(Status_Reason.SEEN);
		
		Appointment_StatusVoCollection voCollStatusHistory = voBooking.getApptStatusHistory();
		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();
		
		voCollStatusHistory.add(voStatus);
		voBooking.setCurrentStatusRecord(voStatus); 
		voBooking.setApptStatusHistory(voCollStatusHistory);
		
		voBooking.setSeenTime(new Time());
		
		populateAppointmentWithTrackingStatus(voBooking, AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT);
	}
	//WDEV-11788 - ends here

	//WDEV-11665 - starts here
	private void populateAppointmentWithTrackingStatus(Booking_AppointmentVo voBooking, AppointmentTrackingStatus trackingStatus) 
	{
		if(voBooking == null || trackingStatus == null)
			return;
		
		Appt_Tracking_Status_HistoryVoCollection trackingCollection = voBooking.getApptTrackingStatusHistory();
		
		if(trackingCollection == null)
			trackingCollection = new Appt_Tracking_Status_HistoryVoCollection();
		
		Appt_Tracking_Status_HistoryVo newTrackingStatus = new Appt_Tracking_Status_HistoryVo();
		newTrackingStatus.setTrackingStatus(trackingStatus);
		newTrackingStatus.setApptDate(voBooking.getAppointmentDate());
		newTrackingStatus.setApptTime(voBooking.getApptStartTime());
		newTrackingStatus.setStatusChangeDateTime(new DateTime());
		
		Object mosUser = domain.getMosUser();
		newTrackingStatus.setChangedBy(mosUser instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) mosUser : null);
		
		trackingCollection.add(newTrackingStatus);
		voBooking.setApptTrackingStatusHistory(trackingCollection);
	}
	//WDEV-11665 - ends here

	private void dnaPatientMenuItem() 
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdResults().getValue());
		if (voBook.getApptStatusIsNotNull() && canBeDNAed(voBook.getApptStatus(), voBook.getSession().getSessionDate()))
		{
			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
				&& domain.hasTCI(form.grdResults().getValue()))
			{
				form.getLocalContext().setbDNACalled(true);
				engine.showMessage("You are about to mark this record as DNA. Is a new TCI required?", "Warning", MessageButtons.YESNOCANCEL);
			}
			else
			{
				form.getLocalContext().setbDNACalled(true);
				engine.showMessage("Are you sure you want to mark this record as DNA?", "Warning", MessageButtons.YESNO);
			}
		}
		else
		{
			engine.showMessage("This appointment's status has already changed.");
			search();
		}
	}
	
	// WDEV-15944 record Outcome
	private void recordApptOutcome() 
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdResults().getValue());
		if (voBook != null)
		{
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voBook);
			engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.EDIT});
		}
	}

	
	private boolean canBeDNAed(Status_Reason apptStatus, Date dateSession) 
	{
		if (apptStatus != null 
			&& apptStatus.equals(Status_Reason.BOOKED))
			{
				if(dateSession != null)
				{
					if(new Date().isGreaterOrEqualThan(dateSession))
					{
						return true;
					}
				}
			}
			return false;
	}


	private void markasSeenMenuOption(boolean allowEditICP) 
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdResults().getValue());
		if (voBook.getApptStatusIsNotNull() 
			&& voBook.getApptStatus().equals(Status_Reason.ARRIVAL))
		{
			if (form.getLocalContext().getbLessThenTodaysDateIsNotNull()
				&& form.getLocalContext().getbLessThenTodaysDate())
			{
				form.getGlobalContext().RefMan.setChosenTime(null);
				form.getLocalContext().setbArrivalChosen(false);
				form.getLocalContext().setAllowEditICP(allowEditICP);
				engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog, new Object[]{"Seen Time"} );
			}
			else
				markasSeen(allowEditICP);
		}
		else 
		{
			engine.showMessage("This appointment's status has already changed.");
			search();
		}
	}

	private void arriveBookingMenuOption() 
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdResults().getValue());
		if (voBook.getApptStatusIsNotNull() && voBook.getApptStatus().equals(Status_Reason.BOOKED))
		{
			form.getGlobalContext().RefMan.setChosenTime(null); //WDEV-18188
			
			if (form.getLocalContext().getbLessThenTodaysDate()
				&& form.getLocalContext().getbLessThenTodaysDate())
			{
				form.getLocalContext().setbArrivalChosen(true);
				engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog, new Object[]{"Arrival Time"} );
			}
			else
				arriveBooking();
		}
		else 
		{
			engine.showMessage("This appointment's status has already changed.");
			search();
		}
	}

	private void dnaPatient(boolean requiresTCI)
	{
		updateBooking(Status_Reason.DNA, null, requiresTCI);
		search();
	}

	private void dischargePatient()
	{
		
		OutpatientEpisodeWithICPInfoVo appointment = form.grdResults().getSelectedRow().getValue();
		if (appointment.getICPInfoIsNotNull())
		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(appointment.getICPInfo().getCareContext()));
		form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferralRef(appointment.getID_Booking_Appointment()));
		engine.open(form.getForms().RefMan.DischargeSummaryWardPacuDialogAlias);
	}

	private void admitPatient() 
	{
		form.getGlobalContext().RefMan.setDayCaseAdmApptTime(form.grdResults().getSelectedRow().getcolApptTime());
		form.getGlobalContext().RefMan.setDayCaseAdmApptDate(form.grdResults().getSelectedRow().getValue().getAppointmentDate());
		form.getGlobalContext().RefMan.setDayCaseAdmClinicName(form.grdResults().getSelectedRow().getValue().getSession().getName());

		form.getGlobalContext().Scheduling.setBookingAppointmentRef(form.grdResults().getSelectedRow().getValue());
		
		if (form.grdResults().getSelectedRow().getValue().getSession().getSchLocation().getTypeIsNotNull()
			&& form.grdResults().getSelectedRow().getValue().getSession().getSchLocation().getType().equals(LocationType.HOSP))
			form.getGlobalContext().Core.setHospitalLoc(form.grdResults().getSelectedRow().getValue().getSessionIsNotNull() ? form.grdResults().getSelectedRow().getValue().getSession().getSchLocation() : null);
		else 
			form.getGlobalContext().Core.setHospitalLoc(new LocMostVo(form.cmbHospital().getValue().getID_Location(), 0));

		engine.open(form.getForms().RefMan.DayCaseAdmissionDialog);
	}

	private void markasSeen(boolean allowEditICP) 
	{
		//WDEV-11665
		updateBooking(Status_Reason.SEEN, AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT, false);
		
		//WDEV-11665
		if (allowEditICP && form.grdResults().getSelectedRow().getValue().getICPInfoIsNotNull())
		{
			engine.clearPatientContextInformation();//wdev-8668
			form.getGlobalContext().ICP.setPatientICPRecord(form.grdResults().getSelectedRow().getValue().getICPInfo());
			engine.open(form.getForms().ICP.PatientICP);
		}
		else
		{
			//WDEV-13354
			search();
//			toggleTimer(false);
		}
	}

	private void arriveBooking()
	{
		//WDEV-11665
		updateBooking(Status_Reason.ARRIVAL, AppointmentTrackingStatus.PATIENT_ARRIVED, false);
		search();
//		//WDEV-13354
//		toggleTimer(false);
	}

	private void updateBooking(Status_Reason stat, AppointmentTrackingStatus trackingStatus, boolean requiresNewTCI) 
	{
		Booking_AppointmentVo voBooking = domain.getOpEpisode(form.grdResults().getValue());
		if (voBooking == null)
		{
			engine.showMessage("No Booking Found.");
			return;
		}
		
		//WDEV-11786 - starts here
		if(form.grdResults().getValue().getVersion_Booking_Appointment() != voBooking.getVersion_Booking_Appointment())
		{
			//simulate SOE
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		//WDEV-11786 - ends here

		CatsReferralListVo voCats = domain.getCatsReferral(form.grdResults().getValue());
		if (voCats == null)
		{
			engine.showMessage("No CATS Referral Found.");
			return;
		}
		
		PatientElectiveListForDNAAppointmentsVo patientElectiveList = null;
		

		//WDEV-18325
		form.getGlobalContext().Core.getPatientShort().calculateAge();
		boolean isPaediatricPatient = form.getGlobalContext().Core.getPatientShort().getAgeIsNotNull() && form.getGlobalContext().Core.getPatientShort().getAge()<= ConfigFlag.GEN.PAEDIATRIC_AGE.getValue();
		boolean isFirstApptActivityforDNA = !isPaediatricPatient && Boolean.TRUE.equals(form.getLocalContext().getbDNACalled()) && canBeDNAed(voBooking.getApptStatus(), voBooking.getSession().getSessionDate())&& Boolean.TRUE.equals(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue()) && voBooking.getActivityIsNotNull() && voBooking.getActivity().getFirstAppointment() ;
		SessionSlotVo sessionSlot = null;
		
		if (stat.equals(Status_Reason.DNA))
		{
			if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
			{
    			// TODO - Also set TCI to outcome 
    			patientElectiveList = domain.getPatientElectiveList(form.grdResults().getValue());
    			
    			if (patientElectiveList != null)
    			{
    				TCIForPatientElectiveListAppointmentDNAVo currentTCI = patientElectiveList.getTCIDetails();
    				
    				// Update the TCI record - should really not be null, since the query is performed after it
    				if (currentTCI != null)
    				{
        				TCIOutcomeForAppointmentDNAVo outcomeDNA = new TCIOutcomeForAppointmentDNAVo();
        				
        				outcomeDNA.setOutcome(AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4);
        				outcomeDNA.setStatusDateTime(new DateTime());
        				outcomeDNA.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
        				
        				currentTCI.setCurrentOutcome(outcomeDNA);
        				currentTCI.getOutcomeHistory().add(outcomeDNA);
        				currentTCI.setIsActive(Boolean.FALSE);
        				
        				// Add current TCI to history, but do NOT remove it from current field yet.
        				// It will be removed in impl file, after it will be saved.
        				
        				patientElectiveList.getTCIHistory().add(currentTCI);
    				}
    				
    				// Update the status for PatientElective
    				if (requiresNewTCI == true)
    				{
    					ElectiveListStatusVo requiresNewTCIStatus = new ElectiveListStatusVo();
    					
    					requiresNewTCIStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
    					requiresNewTCIStatus.setStatusDateTime(new DateTime());
    					requiresNewTCIStatus.setStatusComment(null);
    					requiresNewTCIStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
    					requiresNewTCIStatus.setRemovalReason(null);
    					requiresNewTCIStatus.setRemovalOtherReason(null);    					
    					
						patientElectiveList.setElectiveListStatus(requiresNewTCIStatus);
						patientElectiveList.getElectiveListStatusHistory().add(requiresNewTCIStatus);
    				}
    			}
			}
									
			voCats.setHasDNAApptsForReview(true);
			
			//WDEV-9091 - starts here
			if(voBooking.getIsCABBooking() == null || Boolean.FALSE.equals(voBooking.getIsCABBooking()))
			{
				voBooking.setRequiresRebook(true);
				
				if(voBooking.getSessionSlotIsNotNull())
				{
					
					sessionSlot = (SessionSlotVo) voBooking.getSessionSlot();		//wdev-12090
					
					sessionSlot.setStatus(Status_Reason.DNA);
					
					sessionSlot.validate();
					
					
				}
			}
			//WDEV-9091 - ends here
		}

		voBooking.setApptStatus(stat);
		
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voBooking.getAppointmentDate());
		voStatus.setApptTime(voBooking.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(stat);
		
		Appointment_StatusVoCollection voCollStatusHistory = voBooking.getApptStatusHistory();
		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();
		
		voCollStatusHistory.add(voStatus);
		voBooking.setCurrentStatusRecord(voStatus); 
		voBooking.setApptStatusHistory(voCollStatusHistory);

		if (stat.equals(Status_Reason.ARRIVAL))
		{
			if (form.getGlobalContext().RefMan.getChosenTime() == null)
				voBooking.setArrivalTime(new Time());
			else
				voBooking.setArrivalTime(form.getGlobalContext().RefMan.getChosenTime());
		}
		else if (stat.equals(Status_Reason.SEEN))
		{
			//WDEV-18480
			voBooking.setSeenBy((HcpRefVo) domain.getHcpLiteUser());
			if (form.getGlobalContext().RefMan.getChosenTime() == null)
				voBooking.setSeenTime(new Time());
			else
				voBooking.setSeenTime(form.getGlobalContext().RefMan.getChosenTime());
		}
		else if (stat.equals(Status_Reason.BOOKED))
		{
			voBooking.setArrivalTime(null);
			voBooking.setOutcome(null);
			voBooking.setOutcomeComments(null);
		}
		
		//WDEV-11665
		populateAppointmentWithTrackingStatus(voBooking, trackingStatus);
		
		String[] error = voBooking.validate();
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}
		
		error = voCats.validate(error);
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}
		
		try 
	 	{
			domain.saveOPEpisode(voBooking, voCats, sessionSlot, patientElectiveList, isFirstApptActivityforDNA);
		} 
	 	catch (StaleObjectException e) 
	 	{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		} 
	 	catch (DomainInterfaceException e) 
	 	{
			engine.showMessage(e.getMessage());
			return;
		}
	}

	private void loadClinics(boolean bKeepClosed) 
	{
		if (form.cmbHospital().getValue() == null)
			return;
		
		form.cmbClinic().clear();
		SessionShortVoCollection listClinics = domain.listClinics(form.cmbHospital().getValue().getID_Location(), form.dteDate().getValue());
		if (listClinics!=null)
		{
			for (SessionShortVo item: listClinics)
			{
				StringBuffer sb = new StringBuffer();
				sb.append(item.getName());
				sb.append(" - ");
				sb.append(item.getSessionDate());
				
				form.cmbClinic().newRow(item, sb.toString());
				
				if(engine.getCurrentLocation() != null
					&& item.getSchLocationIsNotNull())
				{
					if (engine.getCurrentLocation().getID() == item.getSchLocation().getID())
						form.cmbClinic().setValue(item);
				}
			}
			if (listClinics.size() == 1)
				form.cmbClinic().setValue(listClinics.get(0));
			
			//WDEV-17933
			form.cmbClinic().setTooltip(form.cmbClinic().getValue()!=null ? form.cmbClinic().getValue().getDescription():null);
		}
	}

	@Override
	protected void onGrdResultsGridButtonClicked(int column, grdResultsRow row) throws PresentationLogicException 
	{	
	}

	@Override
	protected void onDteDateValueChanged() throws PresentationLogicException
	{
		if(form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics(false);
		else if (form.dteDate().getValue() == null){
			form.cmbClinic().clear();
			//WDEV-11624 clear grid to avoid refresh problem
			form.grdResults().getRows().clear();
			form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();
		}
			
	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException 
	{
		searchForClinics();
		
		//WDEV-11624 clear grid to avoid refresh problem
		if (form.cmbHospital().getValue() == null){
			form.grdResults().getRows().clear();
			form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();
		}
	}

	private void searchForClinics() 
	{
		if(form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics(false);
		else if (form.cmbHospital().getValue() == null)
			form.cmbClinic().clear();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (result.equals(DialogResult.OK) 
			&& formName.equals(form.getForms().RefMan.ArrivalSeenTimeDialog))
		{
			if(form.getLocalContext().getbArrivalChosenIsNotNull())
			{
				if(form.getLocalContext().getbArrivalChosen())
					arriveBooking();
				else
					markasSeen(form.getLocalContext().getAllowEditICPIsNotNull() ? form.getLocalContext().getAllowEditICP().booleanValue() : false);
			}
		}

		if (result.equals(DialogResult.OK))
		{
			//WDEV-13354
			search();
//			toggleTimer(false);
		}
		else if (form.getForms().RefMan.DischargeSummaryWardPacuDialogAlias.equals(formName))
		{
			//WDEV-13354
			search();
//			toggleTimer(false);
		}
			
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if (Boolean.TRUE.equals(form.getLocalContext().getbDNACalled()))
		{
			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
					&& domain.hasTCI(form.grdResults().getValue()))
			{
				form.getLocalContext().setUndoArrivalMessageBoxId(null);

				if (DialogResult.YES.equals(result))
					dnaPatient(true);
				else if (DialogResult.NO.equals(result))
					dnaPatient(false);
			}
			else if (DialogResult.YES.equals(result))
			{
				form.getLocalContext().setUndoArrivalMessageBoxId(null);
				dnaPatient(false);
			}
		}
		else if (form.getLocalContext().getUndoArrivalMessageBoxIdIsNotNull() && form.getLocalContext().getUndoArrivalMessageBoxId().equals(messageBoxId)
				&& DialogResult.YES.equals(result))
		{
			form.getLocalContext().setbDNACalled(false);
			updateBooking(Status_Reason.BOOKED, AppointmentTrackingStatus.UNDO_ARRIVAL, false);
			search();
		}
	}

	@Override
	protected void onGrdResultsGridHeaderClicked(int column) throws PresentationLogicException 
	{
		OutpatientEpisodeWithICPInfoVo temp = form.grdResults().getValue();
		if (column == 0)
		{
			if(form.getLocalContext().getSortOrderICPImage() == null)
				form.getLocalContext().setSortOrderICPImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getICPImageComparator(form.getLocalContext().getSortOrderICPImage()));
			
			if(form.getLocalContext().getSortOrderICPImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderICPImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderICPImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderICPImage(SortOrder.ASCENDING);
				
			
			form.grdResults().getRows().clear();
			
			
			populateGrid(voIPColl);
			
		}
		
		//WDEV-18220 
		else if (column == 1)
		{
			if(form.getLocalContext().getSortOrderOutcomeElectiveListImage() == null)
				form.getLocalContext().setSortOrderOutcomeElectiveListImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort( new ImageComparatorOutcomeWaitingList(form.getLocalContext().getSortOrderOutcomeElectiveListImage()));
			
			if(form.getLocalContext().getSortOrderOutcomeElectiveListImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderOutcomeElectiveListImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderOutcomeElectiveListImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderOutcomeElectiveListImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			populateGrid(voIPColl);
		}
		
		//WDEV-17912
		else if (column == 2)
		{
			if(form.getLocalContext().getSortOrderICABImage() == null)
				form.getLocalContext().setSortOrderICABImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort( new ImageComparator(form.getLocalContext().getSortOrderICABImage()));
			
			if(form.getLocalContext().getSortOrderICABImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderICABImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderICABImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderICABImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			populateGrid(voIPColl);
		}
		
		//WDEV-11665 - starts here
		/*if (column == 9)
		{
			if(form.getLocalContext().getSortOrderNurseImage() == null)
				form.getLocalContext().setSortOrderNurseImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getNurseImageComparator(form.getLocalContext().getSortOrderNurseImage()));
			
			if(form.getLocalContext().getSortOrderNurseImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderNurseImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderNurseImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderNurseImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		if (column == 10)
		{
			if(form.getLocalContext().getSortOrderMedicImage() == null)
				form.getLocalContext().setSortOrderMedicImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getMedicImageComparator(form.getLocalContext().getSortOrderMedicImage()));
			
			if(form.getLocalContext().getSortOrderMedicImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderMedicImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderMedicImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderMedicImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		if (column == 11)
		{
			if(form.getLocalContext().getSortOrderPhysioImage() == null)
				form.getLocalContext().setSortOrderPhysioImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getPhysioImageComparator(form.getLocalContext().getSortOrderPhysioImage()));
			
			if(form.getLocalContext().getSortOrderPhysioImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderPhysioImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderPhysioImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderPhysioImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		if (column == 12)
		{
			if(form.getLocalContext().getSortOrderAdminImage() == null)
				form.getLocalContext().setSortOrderAdminImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getAdminImageComparator(form.getLocalContext().getSortOrderAdminImage()));
			
			if(form.getLocalContext().getSortOrderAdminImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderAdminImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderAdminImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderAdminImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		*/
		//WDEV-11665 - ends here
		
		//WDEV-11665
		if (column == 12)
		{
			if(form.getLocalContext().getSortOrderTime() == null)
				form.getLocalContext().setSortOrderTime(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getTimeComparator(form.getLocalContext().getSortOrderTime()));
			
			if(form.getLocalContext().getSortOrderTime().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderTime(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderTime().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderTime(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		if (column == 7)
		{
			if(form.getLocalContext().getSortOrderDOB() == null)
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getDOBComparator(form.getLocalContext().getSortOrderDOB()));
			
			if(form.getLocalContext().getSortOrderDOB().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderDOB(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderDOB().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		
		//WDEV-11893 - starts here
		if(column == CURRENT_TRACKING_DATETIME_COL_INDEX)
		{
			if (form.getLocalContext().getSortOrderTrackingTime() == null || !form.getLocalContext().getSortOrderTrackingTime().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderTrackingTime(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortOrderTrackingTime(SortOrder.DESCENDING);
			
			populateGrid(sortRowsByTrackingDateTime(form.grdResults().getValues()));
		}
		//WDEV-11893 - ends here
		form.grdResults().setValue(temp);
		updateControlsState();
	}

	//WDEV-11893
	private OutpatientEpisodeWithICPInfoVoCollection sortRowsByTrackingDateTime(OutpatientEpisodeWithICPInfoVoCollection outpatientEpisodeWithICPInfoVoCollection) 
	{
		if(outpatientEpisodeWithICPInfoVoCollection == null || outpatientEpisodeWithICPInfoVoCollection.size() == 0)
			return null;
		
		outpatientEpisodeWithICPInfoVoCollection.sort(new DateTimeComparator(form.getLocalContext().getSortOrderTrackingTime()));
		
		return outpatientEpisodeWithICPInfoVoCollection;
	}
	
	//WDEV-11893
	@SuppressWarnings("rawtypes")
	public class DateTimeComparator implements Comparator
	{
		private int direction = 1;
		
		public DateTimeComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DateTimeComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}
		
		public int compare(Object o1, Object o2)
		{
			DateTime startDate1 = null;
			DateTime startDate2 = null;
			
			if(o1 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo outpatient1 = ((OutpatientEpisodeWithICPInfoVo) o1);
				startDate1 = outpatient1.getCurrentApptTrakingStatus() != null ? outpatient1.getCurrentApptTrakingStatus().getStatusChangeDateTime() : null;
			}
			
			if(o2 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo outpatient2 = ((OutpatientEpisodeWithICPInfoVo) o2);
				startDate2 = outpatient2.getCurrentApptTrakingStatus() != null ? outpatient2.getCurrentApptTrakingStatus().getStatusChangeDateTime() : null;
			}
			
			if(startDate1 == null)
				return -1*direction;
			
			if(startDate2 == null)
				return direction;
			
			return startDate1.compareTo(startDate2)*direction;
		}
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		//WDEV-13354
		search();
	}

	//WDEV-13354
	private void disableRefreshTemporarily()
	{
		//kill the refresh timer if it is enabled
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of Clinic List");	
			form.getLocalContext().setWasTimerEnabled(true);
		}
		else
			form.getLocalContext().setWasTimerEnabled(false);
	}
	
	@Override
	protected void onImbAutoRefreshClick() throws PresentationLogicException
	{
		//WDEV-13354
		toggleTimer(true);
	}

	//WDEV-17933
	@Override
	protected void onCmbClinicValueChanged() throws PresentationLogicException 
	{
		form.cmbClinic().setTooltip(form.cmbClinic().getValue()!=null ? form.cmbClinic().getValue().getDescription():null);
		
	}
	
	//WDEV-17912
	public class ImageComparator implements Comparator<Object>
	{
		private int direction = 1;

		public ImageComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public ImageComparator(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(Object ob1, Object ob2)
		{
			
			Integer isCab1 = 0;
			Integer isCab2 = 0;

			if (ob1 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo o1 = (OutpatientEpisodeWithICPInfoVo) ob1;
				isCab1 = (o1.getReferral() != null && Boolean.TRUE.equals(o1.getReferral().getIsCAB()) ? 1 : 0);
			}

			if (ob2 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo o2 = (OutpatientEpisodeWithICPInfoVo) ob2;
				isCab2 = (o2.getReferral() != null && Boolean.TRUE.equals(o2.getReferral().getIsCAB()) ? 1 : 0);
			}

			if (isCab1 != 0 && isCab2 != 0)
			{
				return isCab1.compareTo(isCab2) * direction;
			}

			if (isCab1 != 0 && isCab2 == 0)
			{
				return direction;
			}

			if (isCab2 != 0 && isCab1 == 0)
			{
				return -1 * direction;
			}	
			
			return 0;
		}
	}
	
	public class ImageComparatorOutcomeWaitingList implements Comparator<Object>
	{
		private int direction = 1;

		public ImageComparatorOutcomeWaitingList()
		{
			this(SortOrder.ASCENDING);
		}

		public ImageComparatorOutcomeWaitingList(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(Object ob1, Object ob2)
		{
			
			Integer sortA = 0;
			Integer sortB = 0;

			if (ob1 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo o1 = (OutpatientEpisodeWithICPInfoVo) ob1;
				if (o1.getHasElectiveListIsNotNull() && Boolean.TRUE.equals(o1.getHasElectiveList()))
					sortA = 2;
				else if (o1.getOutcomeIsNotNull() && o1.getHasElectiveList() == null)
					sortA = 1;
				else
					sortA = 0;
			}

			if (ob2 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo o2 = (OutpatientEpisodeWithICPInfoVo) ob2;
				if (o2.getHasElectiveListIsNotNull() && Boolean.TRUE.equals(o2.getHasElectiveList()))
					sortB = 2;
				else if (o2.getOutcomeIsNotNull() && o2.getHasElectiveList() == null)
					sortB = 1;
				else
					sortB = 0;
			}

			if (sortA != 0 && sortB != 0)
			{
				return sortA.compareTo(sortB) * direction;
			}

			if (sortA != 0 && sortB == 0)
			{
				return direction;
			}

			if (sortB != 0 && sortA == 0)
			{
				return -1 * direction;
			}	
			
			return 0;
		}
	}
}
