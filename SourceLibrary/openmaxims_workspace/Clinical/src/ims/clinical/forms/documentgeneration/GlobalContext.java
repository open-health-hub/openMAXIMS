//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.documentgeneration;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Clinical = new ClinicalContext(context);
		Core = new CoreContext(context);
		Admin = new AdminContext(context);
	}
	public final class ClinicalContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private ClinicalContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCurrentCorrespondanceSearchCriteriaIsNotNull()
		{
			return !cx_ClinicalCurrentCorrespondanceSearchCriteria.getValueIsNull(context);
		}
		public ims.core.vo.CorrespondenceSearchCriteriaVo getCurrentCorrespondanceSearchCriteria()
		{
			return (ims.core.vo.CorrespondenceSearchCriteriaVo)cx_ClinicalCurrentCorrespondanceSearchCriteria.getValue(context);
		}
		public void setCurrentCorrespondanceSearchCriteria(ims.core.vo.CorrespondenceSearchCriteriaVo value)
		{
			cx_ClinicalCurrentCorrespondanceSearchCriteria.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalCurrentCorrespondanceSearchCriteria = new ims.framework.ContextVariable("Clinical.CurrentCorrespondanceSearchCriteria", "_cv_Clinical.CurrentCorrespondanceSearchCriteria");
		public boolean getCurrentClinicalNoteIsNotNull()
		{
			return !cx_ClinicalCurrentClinicalNote.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalNotesVo getCurrentClinicalNote()
		{
			return (ims.core.vo.ClinicalNotesVo)cx_ClinicalCurrentClinicalNote.getValue(context);
		}
		public void setCurrentClinicalNote(ims.core.vo.ClinicalNotesVo value)
		{
			cx_ClinicalCurrentClinicalNote.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalCurrentClinicalNote = new ims.framework.ContextVariable("Clinical.CurrentClinicalNote", "_cvp_Clinical.CurrentClinicalNote");
		public boolean getCurrentClinicalCorrespondanceLiteVoIsNotNull()
		{
			return !cx_ClinicalCurrentClinicalCorrespondanceLiteVo.getValueIsNull(context);
		}
		public ims.clinical.vo.ClinicalCorrespondenceLiteVo getCurrentClinicalCorrespondanceLiteVo()
		{
			return (ims.clinical.vo.ClinicalCorrespondenceLiteVo)cx_ClinicalCurrentClinicalCorrespondanceLiteVo.getValue(context);
		}
		public void setCurrentClinicalCorrespondanceLiteVo(ims.clinical.vo.ClinicalCorrespondenceLiteVo value)
		{
			cx_ClinicalCurrentClinicalCorrespondanceLiteVo.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalCurrentClinicalCorrespondanceLiteVo = new ims.framework.ContextVariable("Clinical.CurrentClinicalCorrespondanceLiteVo", "_cv_Clinical.CurrentClinicalCorrespondanceLiteVo");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getEpisodeofCareShortIsNotNull()
		{
			return !cx_CoreEpisodeofCareShort.getValueIsNull(context);
		}
		public ims.core.vo.EpisodeofCareShortVo getEpisodeofCareShort()
		{
			return (ims.core.vo.EpisodeofCareShortVo)cx_CoreEpisodeofCareShort.getValue(context);
		}

		private ims.framework.ContextVariable cx_CoreEpisodeofCareShort = new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort");
		public boolean getGPDetailsIsNotNull()
		{
			return !cx_CoreGPDetails.getValueIsNull(context);
		}
		public ims.core.vo.GpShortVo getGPDetails()
		{
			return (ims.core.vo.GpShortVo)cx_CoreGPDetails.getValue(context);
		}
		public void setGPDetails(ims.core.vo.GpShortVo value)
		{
			cx_CoreGPDetails.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreGPDetails = new ims.framework.ContextVariable("Core.GPDetails", "_cv_Core.GPDetails");
		public boolean getClinicalNotingModeIsNotNull()
		{
			return !cx_CoreClinicalNotingMode.getValueIsNull(context);
		}
		public ims.core.vo.lookups.ClinicalNotingMode getClinicalNotingMode()
		{
			return (ims.core.vo.lookups.ClinicalNotingMode)cx_CoreClinicalNotingMode.getValue(context);
		}
		public void setClinicalNotingMode(ims.core.vo.lookups.ClinicalNotingMode value)
		{
			cx_CoreClinicalNotingMode.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreClinicalNotingMode = new ims.framework.ContextVariable("Core.ClinicalNotingMode", "_cv_Core.ClinicalNotingMode");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");
		public boolean getCurrentClinicalContactIsNotNull()
		{
			return !cx_CoreCurrentClinicalContact.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactShortVo getCurrentClinicalContact()
		{
			return (ims.core.vo.ClinicalContactShortVo)cx_CoreCurrentClinicalContact.getValue(context);
		}

		private ims.framework.ContextVariable cx_CoreCurrentClinicalContact = new ims.framework.ContextVariable("Core.CurrentClinicalContact", "_cvp_Core.CurrentClinicalContact");
		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");

		private ims.framework.Context context;
	}
	public final class AdminContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private AdminContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getMemberOfStaffShortVoCollectionIsNotNull()
		{
			return !cx_AdminMemberOfStaffShortVoCollection.getValueIsNull(context);
		}
		public ims.core.vo.MemberOfStaffShortVoCollection getMemberOfStaffShortVoCollection()
		{
			return (ims.core.vo.MemberOfStaffShortVoCollection)cx_AdminMemberOfStaffShortVoCollection.getValue(context);
		}
		public void setMemberOfStaffShortVoCollection(ims.core.vo.MemberOfStaffShortVoCollection value)
		{
			cx_AdminMemberOfStaffShortVoCollection.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_AdminMemberOfStaffShortVoCollection = new ims.framework.ContextVariable("Admin.MemberOfStaffShortVoCollection", "_cv_Admin.MemberOfStaffShortVoCollection");

		private ims.framework.Context context;
	}

	public ClinicalContext Clinical;
	public CoreContext Core;
	public AdminContext Admin;
}
