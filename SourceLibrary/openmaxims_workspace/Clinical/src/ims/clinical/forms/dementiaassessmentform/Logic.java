//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4696.13908)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.dementiaassessmentform;

import ims.clinical.vo.DementiaAssessAndInvestigateVo;
import ims.clinical.vo.DementiaFindVo;
import ims.clinical.vo.DementiaForWorklistVo;
import ims.clinical.vo.enums.DementiaEventEnumeration;
import ims.clinical.vo.enums.DementiaWorklistOpenFormModeEnum;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.lookups.DementiaWorklistStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.LayerBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormModeChanged()
	{
		updateControlsState();

	}

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args != null)
		{
			if (args.length == 2 && args[0] != null && args[1] != null && args[0] instanceof DementiaForWorklistVo)
			{
				form.getLocalContext().setselectedDementia(domain.getDementia((DementiaForWorklistVo) args[0]));
				if (DementiaWorklistOpenFormModeEnum.STEP1EDIT.equals(args[1]))
				{
					form.lyrSteps().showtabPageStep1();
					form.lyrSteps().tabPageStep1().ccStep1Find().initialize(form.getLocalContext().getselectedDementia(), FormMode.EDIT, engine.isDialog());
					form.lyrSteps().tabPageStep2().setHeaderVisible(form.getLocalContext().getselectedDementia().getStepTwoAssessIsNotNull());
					form.lyrSteps().tabPageFollowUp().setHeaderVisible(form.getLocalContext().getselectedDementia().getFollowUpAssessmentsIsNotNull() && form.getLocalContext().getselectedDementia().getFollowUpAssessments().size() > 0);
				}
				else if (DementiaWorklistOpenFormModeEnum.VIEW.equals(args[1]))
				{
					open();
					return;
				}
				else if (DementiaWorklistOpenFormModeEnum.STEP2_AMTS_EDIT.equals(args[1]))
				{
					form.lyrSteps().showtabPageStep2();
					form.lyrSteps().tabPageStep2().ccAMTS().initialize(form.getLocalContext().getselectedDementia(), FormMode.EDIT, null);
					form.lyrSteps().tabPageStep2().setHeaderVisible(true);
					form.lyrSteps().tabPageFollowUp().setHeaderVisible(form.getLocalContext().getselectedDementia().getFollowUpAssessmentsIsNotNull() && form.getLocalContext().getselectedDementia().getFollowUpAssessments().size() > 0);
				}
				else if (DementiaWorklistOpenFormModeEnum.FOLLOWUP_AMTS_EDIT.equals(args[1]))
				{
					form.lyrSteps().showtabPageFollowUp();

					form.lyrSteps().tabPageStep1().ccStep1Find().initialize(form.getLocalContext().getselectedDementia(), FormMode.VIEW,engine.isDialog());
					form.lyrSteps().tabPageStep2().ccAMTS().initialize(form.getLocalContext().getselectedDementia(), FormMode.VIEW, null);

					initialiseFollowUp(true);
					return;
				}
				else if (DementiaWorklistOpenFormModeEnum.EDIT.equals(args[1])) //WDEV-16247
				{
					Object hcp = domain.getHcpLiteUser();
					HcpLiteVo hcpLiteUser=null;
					if (hcp != null)
						hcpLiteUser=((HcpLiteVo) domain.getHcpLiteUser());
					
					DementiaFindVo voStep1Find = (form.getLocalContext().getselectedDementiaIsNotNull()?form.getLocalContext().getselectedDementia().getStepOneFind():null);
					DementiaAssessAndInvestigateVo voStep2AMTS = (form.getLocalContext().getselectedDementiaIsNotNull()?form.getLocalContext().getselectedDementia().getStepTwoAssess():null);
					if (form.getLocalContext().getselectedDementiaIsNotNull() && voStep1Find!=null && voStep2AMTS==null 
						&& ((voStep1Find.getAuthoringInformationIsNotNull() && voStep1Find.getAuthoringInformationIsNotNull() && voStep1Find.getAuthoringInformation().getAuthoringHcpIsNotNull() && voStep1Find.getAuthoringInformation().getAuthoringHcp().equals(hcpLiteUser)) 
							|| engine.hasRight(AppRight.CAN_EDIT_AND_RIE_DEMENTIA)))
					{
						form.lyrSteps().showtabPageStep1();
						form.lyrSteps().tabPageStep1().ccStep1Find().initialize(form.getLocalContext().getselectedDementia(), FormMode.EDIT, engine.isDialog());
						form.lyrSteps().tabPageStep2().setHeaderVisible(form.getLocalContext().getselectedDementia().getStepTwoAssessIsNotNull());
						form.lyrSteps().tabPageFollowUp().setHeaderVisible(form.getLocalContext().getselectedDementia().getFollowUpAssessmentsIsNotNull() && form.getLocalContext().getselectedDementia().getFollowUpAssessments().size() > 0);
					}
					else if (form.getLocalContext().getselectedDementiaIsNotNull() && voStep1Find!=null && voStep2AMTS!=null )
					{
						if ((voStep2AMTS.getAuthoringInformationIsNotNull() && voStep2AMTS.getAuthoringInformationIsNotNull() && voStep2AMTS.getAuthoringInformation().getAuthoringHcpIsNotNull() && voStep2AMTS.getAuthoringInformation().getAuthoringHcp().equals(hcpLiteUser)) 
									|| engine.hasRight(AppRight.CAN_EDIT_AND_RIE_DEMENTIA))
						{
							form.lyrSteps().showtabPageStep2();
							form.lyrSteps().tabPageStep2().ccAMTS().initialize(form.getLocalContext().getselectedDementia(), FormMode.EDIT, null);
							form.lyrSteps().tabPageStep2().setHeaderVisible(true);
							form.lyrSteps().tabPageFollowUp().setHeaderVisible(form.getLocalContext().getselectedDementia().getFollowUpAssessmentsIsNotNull() && form.getLocalContext().getselectedDementia().getFollowUpAssessments().size() > 0);
						}
						else if ((voStep2AMTS.getAuthoringInformationIsNotNull() && voStep2AMTS.getAuthoringInformationIsNotNull() && voStep2AMTS.getAuthoringInformation().getAuthoringHcpIsNotNull() && !voStep2AMTS.getAuthoringInformation().getAuthoringHcp().equals(hcpLiteUser))
								&& (voStep1Find.getAuthoringInformationIsNotNull() && voStep1Find.getAuthoringInformationIsNotNull() && voStep1Find.getAuthoringInformation().getAuthoringHcpIsNotNull() && voStep1Find.getAuthoringInformation().getAuthoringHcp().equals(hcpLiteUser)) )
						{
							form.lyrSteps().showtabPageStep1();
							form.lyrSteps().tabPageStep1().ccStep1Find().initialize(form.getLocalContext().getselectedDementia(), FormMode.EDIT, engine.isDialog());
							form.lyrSteps().tabPageStep2().setHeaderVisible(form.getLocalContext().getselectedDementia().getStepTwoAssessIsNotNull());
							form.lyrSteps().tabPageFollowUp().setHeaderVisible(form.getLocalContext().getselectedDementia().getFollowUpAssessmentsIsNotNull() && form.getLocalContext().getselectedDementia().getFollowUpAssessments().size() > 0);
						}
						
						
					}
					
				}
				initialiseFollowUp(false);
			}
		}
	}
	
	private void initialiseFollowUp(boolean bEditMode)
	{
		if (form.lyrSteps().tabPageFollowUp().isHeaderVisible())
		{						
			loadRecordBrowser();
			initialiseFollowUp(bEditMode ? FormMode.EDIT : FormMode.VIEW, bEditMode);
		}
	}

	private void loadRecordBrowser()
	{
		form.lyrSteps().tabPageFollowUp().recbrAMTS().clear();
		form.getLocalContext().getselectedDementia().getFollowUpAssessments().sort(SortOrder.DESCENDING);
		for (int i = 0 ; form.getLocalContext().getselectedDementiaIsNotNull() && form.getLocalContext().getselectedDementia().getFollowUpAssessmentsIsNotNull() && i < form.getLocalContext().getselectedDementia().getFollowUpAssessments().size() ; i++)
		{
			StringBuffer sb = new StringBuffer();
			sb.append(form.getLocalContext().getselectedDementia().getFollowUpAssessments().get(i).getAuthoringInformation().toString(" "));
			sb.append(" - Score: ");
			sb.append(form.getLocalContext().getselectedDementia().getFollowUpAssessments().get(i).getAMTSScore());
			form.lyrSteps().tabPageFollowUp().recbrAMTS().newRow(form.getLocalContext().getselectedDementia().getFollowUpAssessments().get(i), sb.toString());
		}
		
		if (form.getGlobalContext().Clinical.getAMTSRecordToViewIsNotNull())
		{
			form.lyrSteps().tabPageFollowUp().recbrAMTS().setValue(form.getGlobalContext().Clinical.getAMTSRecordToView());
			form.getGlobalContext().Clinical.setAMTSRecordToView(null);
		}
		else if (form.getLocalContext().getselectedDementiaIsNotNull() 
			&& form.getLocalContext().getselectedDementia().getFollowUpAssessmentsIsNotNull() 
			&& form.getLocalContext().getselectedDementia().getFollowUpAssessments().size() > 0)
			form.lyrSteps().tabPageFollowUp().recbrAMTS().setValue(form.getLocalContext().getselectedDementia().getFollowUpAssessments().get(0));
	}

	private void initialiseFollowUp(FormMode mode, Boolean bNewRecord)
	{
		form.lyrSteps().tabPageFollowUp().ccAMTSFollowUp().initialize(form.getLocalContext().getselectedDementia(), mode, bNewRecord ? new DementiaAssessAndInvestigateVo() : (form.lyrSteps().tabPageFollowUp().recbrAMTS().getValue() != null ? form.lyrSteps().tabPageFollowUp().recbrAMTS().getValue() : new DementiaAssessAndInvestigateVo()));
	}

	private void open()
	{
		populateScreenFromData();
		form.setMode(FormMode.VIEW);
	}
	
	private void populateScreenFromData()
	{
		if (form.getLocalContext().getselectedDementiaIsNotNull())
			form.getLocalContext().setselectedDementia(domain.getDementia(form.getLocalContext().getselectedDementia()));
		
		if(form.getLocalContext().getselectedDementia() == null) //wdev-16365
		{
			engine.close(DialogResult.ABORT);
			return;
		}
		
		form.lyrSteps().tabPageStep1().ccStep1Find().initialize(form.getLocalContext().getselectedDementia(), FormMode.VIEW, engine.isDialog());
		form.lyrSteps().showtabPageStep1();
		if (form.getLocalContext().getselectedDementia().getStepTwoAssessIsNotNull())
			form.lyrSteps().tabPageStep2().ccAMTS().initialize(form.getLocalContext().getselectedDementia(), FormMode.VIEW, null);

		form.lyrSteps().tabPageStep2().setHeaderVisible(form.getLocalContext().getselectedDementia().getStepTwoAssessIsNotNull());
		form.lyrSteps().tabPageFollowUp().setHeaderVisible(form.getLocalContext().getselectedDementia().getFollowUpAssessmentsIsNotNull() && form.getLocalContext().getselectedDementia().getFollowUpAssessments().size() > 0);
		initialiseFollowUp(false);
	}

	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (engine.isDialog())
			engine.close(DialogResult.ABORT);
	}

	private void updateControlsState()
	{

		form.lyrSteps().tabPageStep1().setHeaderEnabled(true);
		form.lyrSteps().tabPageStep2().setHeaderEnabled(true);
		form.lyrSteps().tabPageStep2().btnClose().setVisible(form.getMode().equals(FormMode.VIEW) && engine.isDialog());
	
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.lyrSteps().tabPageStep1().setHeaderEnabled(true);
			form.lyrSteps().tabPageStep2().setHeaderEnabled(true);
			form.lyrSteps().tabPageFollowUp().setHeaderEnabled(true);
		}
		else
		{
			form.lyrSteps().tabPageStep1().setHeaderEnabled(form.lyrSteps().tabPageStep1().isVisible());
			form.lyrSteps().tabPageStep2().setHeaderEnabled(form.lyrSteps().tabPageStep2().isVisible());
			form.lyrSteps().tabPageFollowUp().setHeaderEnabled(form.lyrSteps().tabPageFollowUp().isVisible());
		}
	}

	protected void onCcStep1FindValueChanged() throws PresentationLogicException
	{
		if (DementiaEventEnumeration.SAVE.equals(form.lyrSteps().tabPageStep1().ccStep1Find().getSelectedEvent()))
		{
			form.getLocalContext().setselectedDementia(form.lyrSteps().tabPageStep1().ccStep1Find().getValue());
			if (form.getLocalContext().getselectedDementia().getCurrentWorklistStatusIsNotNull() 
				&& DementiaWorklistStatus.STEP_TWO_ASSESS_INVESTIGATE_OUTSTANDING.equals(form.getLocalContext().getselectedDementia().getCurrentWorklistStatus().getStatus()))
			{
				form.lyrSteps().tabPageStep1().ccStep1Find().resetSelectedEvent();
				if (form.getLocalContext().getselectedDementia().getStepTwoAssessIsNotNull())
				{
					open();
				}
				else
				{
					form.lyrSteps().tabPageStep1().ccStep1Find().initialize(form.getLocalContext().getselectedDementia(), FormMode.VIEW, engine.isDialog());
					form.lyrSteps().showtabPageStep2();
					form.lyrSteps().tabPageStep2().setHeaderVisible(true);
					form.lyrSteps().tabPageStep2().ccAMTS().initialize(form.getLocalContext().getselectedDementia(), FormMode.EDIT, null);
					form.setMode(form.lyrSteps().tabPageStep2().ccAMTS().getMode());
				}
			}
			else if (form.getLocalContext().getselectedDementia().getStepTwoAssessIsNotNull() || form.lyrSteps().tabPageFollowUp().isHeaderVisible())
			{
				form.lyrSteps().tabPageStep1().ccStep1Find().resetSelectedEvent();
				open();
			}
			else	
			{
				form.lyrSteps().tabPageStep1().ccStep1Find().resetSelectedEvent();
				engine.close(DialogResult.CANCEL);
			}
		}
		else if (DementiaEventEnumeration.CLOSE.equals(form.lyrSteps().tabPageStep1().ccStep1Find().getSelectedEvent()))
		{
			form.lyrSteps().tabPageStep1().ccStep1Find().resetSelectedEvent();
			engine.close(DialogResult.CANCEL);
		}
		else if (DementiaEventEnumeration.NEW.equals(form.lyrSteps().tabPageStep1().ccStep1Find().getSelectedEvent()))
		{
			form.lyrSteps().tabPageStep1().ccStep1Find().resetSelectedEvent();
//			FormMode step1Mode = form.lyrSteps().tabPageStep1().ccStep1Find().getMode();
//			form.setMode(step1Mode);
			form.setMode(FormMode.EDIT);
		}
		else if (DementiaEventEnumeration.MARK_RIE.equals(form.lyrSteps().tabPageStep1().ccStep1Find().getSelectedEvent()))
		{
			form.lyrSteps().tabPageStep1().ccStep1Find().resetSelectedEvent();
			doRIE();
		}
		//SOE
		else if (DementiaEventEnumeration.CANCEL.equals(form.lyrSteps().tabPageStep1().ccStep1Find().getSelectedEvent()) 
			|| DementiaEventEnumeration.SOE.equals(form.lyrSteps().tabPageStep1().ccStep1Find().getSelectedEvent()))
		{
			open();
		}

	}

	protected void onCcAMTSValueChanged() throws PresentationLogicException
	{
		if (DementiaEventEnumeration.SAVE.equals(form.lyrSteps().tabPageStep2().ccAMTS().getSelectedEvent()) 
			|| DementiaEventEnumeration.CANCEL.equals(form.lyrSteps().tabPageStep2().ccAMTS().getSelectedEvent()))
		{
			form.lyrSteps().tabPageStep2().ccAMTS().resetSelectedEvent();
			form.getLocalContext().setselectedDementia(form.lyrSteps().tabPageStep2().ccAMTS().getValue());
			open();
			//in here needed to cater for situation that amts was shown and cancel is pressed.....the tab gets hidden and you have to reopen the dialog
			form.lyrSteps().tabPageStep2().setHeaderVisible( form.getLocalContext().getselectedDementia().getStepTwoAssessIsNotNull()
				|| 	(form.getLocalContext().getselectedDementia().getCurrentWorklistStatusIsNotNull() 
					&& DementiaWorklistStatus.STEP_TWO_ASSESS_INVESTIGATE_OUTSTANDING.equals(form.getLocalContext().getselectedDementia().getCurrentWorklistStatus().getStatus())));
			form.lyrSteps().showtabPageStep2();
			return;
		}
		else if (DementiaEventEnumeration.EDIT.equals(form.lyrSteps().tabPageStep2().ccAMTS().getSelectedEvent()))
		{
			form.lyrSteps().tabPageStep2().ccAMTS().resetSelectedEvent();
			form.setMode(FormMode.EDIT);
		}
		else if (DementiaEventEnumeration.CLOSE.equals(form.lyrSteps().tabPageStep2().ccAMTS().getSelectedEvent()))
		{
			form.lyrSteps().tabPageStep2().ccAMTS().resetSelectedEvent();
			engine.close(DialogResult.CANCEL);
		}
		else if (DementiaEventEnumeration.SOE.equals(form.lyrSteps().tabPageStep2().ccAMTS().getSelectedEvent()))
		{
			form.lyrSteps().tabPageStep2().ccAMTS().resetSelectedEvent(); // WDEV-16372 
			open();
		}
		else if (DementiaEventEnumeration.MARK_RIE.equals(form.lyrSteps().tabPageStep2().ccAMTS().getSelectedEvent()))
		{
			form.lyrSteps().tabPageStep2().ccAMTS().resetSelectedEvent();
			doRIE();
		}
	}

	private void doRIE()
	{
		
		try
		{
			form.getLocalContext().setselectedDementia(domain.rieAMTSRecord(form.getLocalContext().getselectedDementia(), form.getForms().Clinical.DementiaAssessmentFormDialog, 
					form.getLocalContext().getselectedDementia().getPatient().getID_Patient(), 
					null, 
					null,
					form.getGlobalContext().Core.getRieMessage()) );
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			populateScreenFromData();
			form.setMode(FormMode.EDIT);
			return;
		} 
		catch (StaleObjectException e)
		{
			engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			form.getLocalContext().setselectedDementia(domain.getDementia(form.getLocalContext().getselectedDementia()));
			populateScreenFromData();
			form.setMode(FormMode.EDIT);
			return;
		}
		catch (UnqViolationUncheckedException e)
		{
			engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			form.getLocalContext().setselectedDementia(domain.getDementia(form.getLocalContext().getselectedDementia()));
			populateScreenFromData();
			form.setMode(FormMode.EDIT);
			return;
		}

		//Refresh Dialog
		form.lyrSteps().tabPageStep2().setHeaderVisible(false);
		form.lyrSteps().showtabPageStep1();
		form.lyrSteps().tabPageStep1().ccStep1Find().initialize(form.getLocalContext().getselectedDementia(), FormMode.EDIT, engine.isDialog());

		if (form.getLocalContext().getselectedDementia().getFollowUpAssessmentsIsNotNull())
		{
			loadRecordBrowser();
			initialiseFollowUp(FormMode.VIEW, false);
		}
	}
	@Override
	protected void onlyrStepsTabChanged(LayerBridge tab)
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			if (tab.equals(form.lyrSteps().tabPageStep1()))
			{
				form.lyrSteps().tabPageStep1().ccStep1Find().initialize(form.getLocalContext().getselectedDementia(), FormMode.VIEW, engine.isDialog());
			}
			else if (tab.equals(form.lyrSteps().tabPageStep2()))
			{
				form.lyrSteps().tabPageStep2().ccAMTS().initialize(form.getLocalContext().getselectedDementia(), FormMode.VIEW, null);
			}
			else if (tab.equals(form.lyrSteps().tabPageFollowUp()))
			{
				form.lyrSteps().tabPageFollowUp().ccAMTSFollowUp().initialize(form.getLocalContext().getselectedDementia(), FormMode.VIEW, (form.lyrSteps().tabPageFollowUp().recbrAMTS().getValue() != null ? form.lyrSteps().tabPageFollowUp().recbrAMTS().getValue() : new DementiaAssessAndInvestigateVo())); //wdev-16366
			}
			updateControlsState();
		}
	}

	@Override
	protected void onRecbrAMTSValueChanged() throws PresentationLogicException
	{
		initialiseFollowUp(FormMode.VIEW, false);
	}

	@Override
	protected void onCcAMTSFollowUpValueChanged() throws PresentationLogicException
	{
		if (DementiaEventEnumeration.RELOAD_AMTS_BROWSER.equals(form.lyrSteps().tabPageFollowUp().ccAMTSFollowUp().getSelectedEvent()))
		{
			form.lyrSteps().tabPageFollowUp().ccAMTSFollowUp().resetSelectedEvent();
			form.getLocalContext().setselectedDementia(domain.getDementia(form.getLocalContext().getselectedDementia()));
			loadRecordBrowser();
			initialiseFollowUp(FormMode.VIEW, false);
			form.setMode(FormMode.VIEW);
		}
		else if (DementiaEventEnumeration.EDIT.equals(form.lyrSteps().tabPageFollowUp().ccAMTSFollowUp().getSelectedEvent()))
		{
			form.lyrSteps().tabPageFollowUp().ccAMTSFollowUp().resetSelectedEvent();
			form.setMode(FormMode.EDIT);
		}
		else if ( DementiaEventEnumeration.SOE.equals(form.lyrSteps().tabPageFollowUp().ccAMTSFollowUp().getSelectedEvent()) )
		{
			form.lyrSteps().tabPageFollowUp().ccAMTSFollowUp().resetSelectedEvent();
			open();
		}
	}

	@Override
	protected void onBtnCloseFollowUpClick() throws PresentationLogicException
	{
		if (engine.isDialog())
			engine.close(DialogResult.ABORT);
	}

}
