//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.edischargedischargedetailscomponent;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindansConfirmationOfHardcopyLookup();
	abstract protected void defaultansConfirmationOfHardcopyLookupValue();
	abstract protected void bindansFitToReturnWorkLookup();
	abstract protected void defaultansFitToReturnWorkLookupValue();
	abstract protected void bindansStatementOfFitnessLookup();
	abstract protected void defaultansStatementOfFitnessLookupValue();
	abstract protected void bindansCertificateofSicknessLookup();
	abstract protected void defaultansCertificateofSicknessLookupValue();
	abstract protected void bindansLivingAloneLookup();
	abstract protected void defaultansLivingAloneLookupValue();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onansConfirmationOfHardcopyValueSet(Object value);
	abstract protected void onansFitToReturnWorkValueSet(Object value);
	abstract protected void onansStatementOfFitnessValueSet(Object value);
	abstract protected void onansCertificateofSicknessValueSet(Object value);
	abstract protected void onansLivingAloneValueSet(Object value);
	abstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIComponentEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.ansConfirmationOfHardcopy().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansConfirmationOfHardcopyValueSet(value);
			}
		});
		this.form.ansFitToReturnWork().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansFitToReturnWorkValueSet(value);
			}
		});
		this.form.ansStatementOfFitness().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansStatementOfFitnessValueSet(value);
			}
		});
		this.form.ansCertificateofSickness().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansCertificateofSicknessValueSet(value);
			}
		});
		this.form.ansLivingAlone().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansLivingAloneValueSet(value);
			}
		});
		this.form.btnNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewClick();
			}
		});
		this.form.btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindansConfirmationOfHardcopyLookup();
		bindansFitToReturnWorkLookup();
		bindansStatementOfFitnessLookup();
		bindansCertificateofSicknessLookup();
		bindansLivingAloneLookup();
	}
	protected void rebindAllLookups()
	{
		bindansConfirmationOfHardcopyLookup();
		bindansFitToReturnWorkLookup();
		bindansStatementOfFitnessLookup();
		bindansCertificateofSicknessLookup();
		bindansLivingAloneLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultansConfirmationOfHardcopyLookupValue();
		defaultansFitToReturnWorkLookupValue();
		defaultansStatementOfFitnessLookupValue();
		defaultansCertificateofSicknessLookupValue();
		defaultansLivingAloneLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIComponentEngine engine;
	protected GenForm form;
}
