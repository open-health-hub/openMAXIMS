//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4535.14223)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.surgicalaudit;

import ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection;
import ims.clinical.vo.SurgicalAuditOperationDetailVo;
import ims.clinical.vo.SurgicalAuditOperationDetailVoCollection;
import ims.clinical.vo.SurgicalAuditTheatreWorklistVo;
import ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent;
import ims.clinical.vo.enums.SurgicalAuditRecoveryEvent;
import ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.PatientShort;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onlyrSurgAuditTabChanged(ims.framework.LayerBridge tab)
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			PatientShort patient = form.getGlobalContext().Core.getPatientShort();
    		CareContextShortVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
    		SurgicalAuditOperationDetailVo surgicalAudit = form.getLocalContext().getselectedSurgicalAuditOpDetail();
    
    		if (tab.equals(form.lyrSurgAudit().tabPreOperationChecks()))
    		{
    			form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().initialize(surgicalAudit);
    		}
    		else if (tab.equals(form.lyrSurgAudit().tabPreOperationChecksTheatreNurse()))
    		{
    			form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().initialize(patient, careContext, surgicalAudit);
    		}
    		else if (tab.equals(form.lyrSurgAudit().tabProcedureDetails()))
    		{
    			form.lyrSurgAudit().tabProcedureDetails().ccProcedureDetails().initialize(patient, careContext, surgicalAudit);
    		}
    		else if (tab.equals(form.lyrSurgAudit().tabPlannedActualProcedures()))
    		{
    			form.lyrSurgAudit().tabPlannedActualProcedures().ccPlannedActualProc().initialize(patient, careContext, surgicalAudit);
    		}
    		else if (tab.equals(form.lyrSurgAudit().tabRecovery()))
    		{
    			form.lyrSurgAudit().tabRecovery().ccRecovery().initialize(surgicalAudit);
    		}
    		populateRecordBrowser(form.getGlobalContext().Core.getCurrentCareContext());
    		updateControlsState();
		}
	}

	@Override
	protected void onCcPreOpChecksValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (SurgicalAuditPreOpChecksEvent.SAVE.equals(form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().getSelectedEvent()) || SurgicalAuditPreOpChecksEvent.CANCEL.equals(form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().getSelectedEvent()))
		{
			form.getLocalContext().setselectedSurgicalAuditOpDetail(form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().getValue());
			form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().resetSelectedEvent();
			open();
			return;

		}
		else if (SurgicalAuditPreOpChecksEvent.EDIT.equals(form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().getSelectedEvent()))
		{
			populateRecordBrowser(form.getGlobalContext().Core.getCurrentCareContext());
			form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().resetSelectedEvent();
		}
		FormMode preOpChecksMode = form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().getMode();
		form.setMode(preOpChecksMode);
	}

	@Override
	protected void onCcPreOpChecksTheatreNurseValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (SurgicalAuditPreOpChecksEvent.SAVE.equals(form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().getSelectedEvent()) || SurgicalAuditPreOpChecksEvent.CANCEL.equals(form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().getSelectedEvent()))
		{
			form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().resetSelectedEvent();
			open();
			return;
		}
		else if (SurgicalAuditPreOpChecksEvent.EDIT.equals(form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().getSelectedEvent()))
		{
			populateRecordBrowser(form.getGlobalContext().Core.getCurrentCareContext());
			form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().resetSelectedEvent();
		}
		FormMode preOpChecksTheatreNurseMode = form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().getMode();
		form.setMode(preOpChecksTheatreNurseMode);
	}

	@Override
	protected void onCcProcedureDetailsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{

		if (SurgicalAuditPreOpChecksEvent.SAVE.equals(form.lyrSurgAudit().tabProcedureDetails().ccProcedureDetails().getSelectedEvent()) ||SurgicalAuditPreOpChecksEvent.CANCEL.equals(form.lyrSurgAudit().tabProcedureDetails().ccProcedureDetails().getSelectedEvent()) )
		{
			form.lyrSurgAudit().tabProcedureDetails().ccProcedureDetails().resetSelectedEvent();
			open();
			return;
		}
		else if (SurgicalAuditPreOpChecksEvent.EDIT.equals(form.lyrSurgAudit().tabProcedureDetails().ccProcedureDetails().getSelectedEvent()))
		{
			populateRecordBrowser(form.getGlobalContext().Core.getCurrentCareContext());
			form.lyrSurgAudit().tabProcedureDetails().ccProcedureDetails().resetSelectedEvent();
		}
		FormMode procedureDetailsMode = form.lyrSurgAudit().tabProcedureDetails().ccProcedureDetails().getMode();
		form.setMode(procedureDetailsMode);
	}

	@Override
	protected void onCcPlannedActualProcValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (SurgicalAuditPreOpChecksEvent.SAVE.equals(form.lyrSurgAudit().tabPlannedActualProcedures().ccPlannedActualProc().getSelectedEvent()) || SurgicalAuditPreOpChecksEvent.CANCEL.equals(form.lyrSurgAudit().tabPlannedActualProcedures().ccPlannedActualProc().getSelectedEvent()))
		{
			form.lyrSurgAudit().tabPlannedActualProcedures().ccPlannedActualProc().resetSelectedEvent();
			open();
			return;
		}
		else if (SurgicalAuditPreOpChecksEvent.EDIT.equals(form.lyrSurgAudit().tabPlannedActualProcedures().ccPlannedActualProc().getSelectedEvent()))
		{
			populateRecordBrowser(form.getGlobalContext().Core.getCurrentCareContext());
			form.lyrSurgAudit().tabPlannedActualProcedures().ccPlannedActualProc().resetSelectedEvent();
		}

		FormMode plannedActualProcMode = form.lyrSurgAudit().tabPlannedActualProcedures().ccPlannedActualProc().getMode();
		form.setMode(plannedActualProcMode);
	}

	@Override
	protected void onCcRecoveryValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (SurgicalAuditRecoveryEvent.SAVE.equals(form.lyrSurgAudit().tabRecovery().ccRecovery().getSelectedEvent()) || SurgicalAuditRecoveryEvent.CANCEL.equals(form.lyrSurgAudit().tabRecovery().ccRecovery().getSelectedEvent()))
		{
			form.lyrSurgAudit().tabRecovery().ccRecovery().resetSelectedEvent();
			open();
			return;
		}
		else if (SurgicalAuditRecoveryEvent.EDIT.equals(form.lyrSurgAudit().tabRecovery().ccRecovery().getSelectedEvent()))
		{
			populateRecordBrowser(form.getGlobalContext().Core.getCurrentCareContext());
			form.lyrSurgAudit().tabRecovery().ccRecovery().resetSelectedEvent();
		}

		FormMode recoveryMode = form.lyrSurgAudit().tabRecovery().ccRecovery().getMode();	
		form.setMode(recoveryMode);
	}

	@Override
	protected void onRecbrSurgAuditValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setselectedSurgicalAuditOpDetail(form.recbrSurgAudit().getValue());
		populateScreenFromData();
		updateControlsState();
	}

	private void updateControlsState()
	{
		Boolean isBtnNewVisible = form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().isBtnNewVisible();
		Boolean isBtnEditVisible = form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().isBtnEditVisible();
		SurgicalAuditOperationDetailVo surgAudit = form.getLocalContext().getselectedSurgicalAuditOpDetail(); //

		form.lnkReturnToList().setVisible(FormMode.VIEW.equals(form.getMode()) && engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.SurgicalAuditTheatreWorklist) && form.getLocalContext().getisFormOpenedFromTheatreWorklist());

		form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().setMode(form.getMode());

		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.lyrSurgAudit().tabPreOperationChecks().setHeaderEnabled(true);
			
			form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().setHeaderEnabled(isBtnEditVisible && form.recbrSurgAudit().getValue() != null);
			
			form.lyrSurgAudit().tabProcedureDetails().setHeaderEnabled(isBtnEditVisible && (surgAudit!= null && surgAudit.getPreOpChecksTheatreNurseIsNotNull() ));  //wdev-15749
			form.lyrSurgAudit().tabProcedureDetails().ccProcedureDetails().setReadOnly(!(isBtnEditVisible && (surgAudit!= null && surgAudit.getPreOpChecksTheatreNurseIsNotNull() )));  //wdev-15749
			
			//form.lyrSurgAudit().tabProcedureDetails().setHeaderEnabled(isBtnEditVisible && form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().getConfirmPatDet());
			//form.lyrSurgAudit().tabProcedureDetails().ccProcedureDetails().setReadOnly(!(isBtnEditVisible && form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().getConfirmPatDet()));
			
			form.lyrSurgAudit().tabPlannedActualProcedures().setHeaderEnabled(isBtnEditVisible && (surgAudit!= null && surgAudit.getPreOpChecksTheatreNurseIsNotNull() )); //wdev-15749
			form.lyrSurgAudit().tabPlannedActualProcedures().ccPlannedActualProc().setReadOnly(!(isBtnEditVisible && (surgAudit!= null && surgAudit.getPreOpChecksTheatreNurseIsNotNull() ))); //wdev-15749
			
			//form.lyrSurgAudit().tabPlannedActualProcedures().setHeaderEnabled(isBtnEditVisible && form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().getConfirmPatDet());
			//form.lyrSurgAudit().tabPlannedActualProcedures().ccPlannedActualProc().setReadOnly(!(isBtnEditVisible && form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().getConfirmPatDet()));
			
			form.lyrSurgAudit().tabRecovery().setHeaderEnabled(isBtnEditVisible && (surgAudit!= null && surgAudit.getPreOpChecksTheatreNurseIsNotNull() )); //wdev-15749
			form.lyrSurgAudit().tabRecovery().ccRecovery().setReadOnly(!(isBtnEditVisible && (surgAudit!= null && surgAudit.getPreOpChecksTheatreNurseIsNotNull() ))); //wdev-15749
			
			//form.lyrSurgAudit().tabRecovery().setHeaderEnabled(isBtnEditVisible && form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().getConfirmPatDet());
			//form.lyrSurgAudit().tabRecovery().ccRecovery().setReadOnly(!(isBtnEditVisible && form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().getConfirmPatDet()));
			
			form.lyrSurgAudit().tabPreOperationChecks().setHeaderEnabled(true);
				
			if (isBtnNewVisible && form.recbrSurgAudit().getValue() == null)
			{
				form.lyrSurgAudit().showtabPreOperationChecks();
			}

		}
		else
		{
			form.lyrSurgAudit().tabPreOperationChecks().setHeaderEnabled(form.lyrSurgAudit().tabPreOperationChecks().isVisible());
			form.lyrSurgAudit().tabPlannedActualProcedures().setHeaderEnabled(form.lyrSurgAudit().tabPlannedActualProcedures().isVisible());
			form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().setHeaderEnabled(form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().isVisible());
			form.lyrSurgAudit().tabProcedureDetails().setHeaderEnabled(form.lyrSurgAudit().tabProcedureDetails().isVisible());
			form.lyrSurgAudit().tabRecovery().setHeaderEnabled(form.lyrSurgAudit().tabRecovery().isVisible());
		}

	}

	private boolean shouldCancelTabBeEditable()
	{
		// NOTE : the operation can only be cancelled if the status is -2382 or
		// -2383 or -2384 or -2385 otherwise the tab should be readonly.)
		// -2382 ->In Holding Bay
		// -2383 ->Left Holding Bay
		// -2384 ->Entered Operating Theatre
		// -2385 ->Anaesthetic Started

		//also if the operation have the Cancelled Operation Status (-2394) , operation Cancelled should be editable
		
		if (form.getLocalContext().getselectedSurgicalAuditOpDetailIsNotNull() && form.getLocalContext().getselectedSurgicalAuditOpDetail().getOperationCancelledIsNotNull() 
				&& (form.getLocalContext().getselectedSurgicalAuditOpDetail().getCurrentStatus().getOperationStatus().equals(SurgicalAuditOperationDetailStatus.IN_HOLDING_BAY) 
					|| form.getLocalContext().getselectedSurgicalAuditOpDetail().getCurrentStatus().getOperationStatus().equals(SurgicalAuditOperationDetailStatus.LEFT_HOLDING_BAY) 
					|| form.getLocalContext().getselectedSurgicalAuditOpDetail().getCurrentStatus().getOperationStatus().equals(SurgicalAuditOperationDetailStatus.ENTERED_OPERATING_THEATRE) 
					|| form.getLocalContext().getselectedSurgicalAuditOpDetail().getCurrentStatus().getOperationStatus().equals(SurgicalAuditOperationDetailStatus.ANAESTHETIC_STARTED)
					|| form.getLocalContext().getselectedSurgicalAuditOpDetail().getCurrentStatus().getOperationStatus().equals(SurgicalAuditOperationDetailStatus.CANCELLED_OPERATIONS)))
			return true;

		return false;
	}

	private void populateScreenFromData()
	{
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		CareContextShortVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
		SurgicalAuditOperationDetailVo surgicalAudit = form.getLocalContext().getselectedSurgicalAuditOpDetail();

		form.lyrSurgAudit().tabPreOperationChecks().ccPreOpChecks().initialize(surgicalAudit);
		form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().ccPreOpChecksTheatreNurse().initialize(patient, careContext, surgicalAudit);
		form.lyrSurgAudit().tabProcedureDetails().ccProcedureDetails().initialize(patient, careContext, surgicalAudit);
		form.lyrSurgAudit().tabPlannedActualProcedures().ccPlannedActualProc().initialize(patient, careContext, surgicalAudit);
		form.lyrSurgAudit().tabRecovery().ccRecovery().initialize(surgicalAudit);
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{

		if (args != null)
		{
			if (args.length == 1 && args[0] != null && args[0] instanceof SurgicalAuditTheatreWorklistVo)
			{
				form.getLocalContext().setselectedSurgicalAuditOpDetail(domain.getSurgicalAuditOperationDetail((SurgicalAuditTheatreWorklistVo) args[0]));
				form.getLocalContext().setisFormOpenedFromTheatreWorklist(true);

			}
			else
				form.getLocalContext().setisFormOpenedFromTheatreWorklist(false);
		}
		else
			form.getLocalContext().setisFormOpenedFromTheatreWorklist(false);

		open();
	}

	private void open()
	{
		populateRecordBrowser(form.getGlobalContext().Core.getCurrentCareContext());
		populateScreenFromData();
		form.setMode(FormMode.VIEW);
	}

	private void populateRecordBrowser(CareContextShortVo currentCareContext)
	{
		form.recbrSurgAudit().clear();

		SurgicalAuditOperationDetailVoCollection collSurgAudit = domain.listSurgicalAuditOperationDetailByCareContext(currentCareContext);

		for (int i = 0; i < collSurgAudit.size(); i++)
		{
			SurgicalAuditOperationDetailVo surgAudit = collSurgAudit.get(i);
			addRowToRecordBrowser(surgAudit);
		}

		if (form.getLocalContext().getselectedSurgicalAuditOpDetailIsNotNull())
		{
			form.recbrSurgAudit().setValue(form.getLocalContext().getselectedSurgicalAuditOpDetail());
		}

		form.getLocalContext().setselectedSurgicalAuditOpDetail(form.recbrSurgAudit().getValue());

	}

	private void addRowToRecordBrowser(SurgicalAuditOperationDetailVo surgAudit)
	{
		if (surgAudit == null)
		{
			return;
		}

		StringBuffer recordBrowserText = new StringBuffer();

		recordBrowserText.append(form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime());
		//recordBrowserText.append(form.getGlobalContext().Core.getCurrentCareContext().getEndDateTime() != null ? " - " + form.getGlobalContext().Core.getCurrentCareContext().getEndDateTime() : "");
		
		//WDEV-15689
		if (surgAudit.getPreOpChecksIsNotNull() && surgAudit.getPreOpChecks().getPlannedProceduresIsNotNull())
		{
			PatientProcedureForSurgicalAuditPreOpChecksVoCollection collProc = surgAudit.getPreOpChecks().getPlannedProcedures();
			for (int i=0;i<collProc.size();i++)
			{
				if (collProc.get(i).getIsPrimary())
				{
					recordBrowserText.append(" - "+collProc.get(i).getProcedureDescription());
					recordBrowserText.append(collProc.get(i).getPeformedByIsNotNull()  ? " - " + collProc.get(i).getPeformedBy() : "");
					break;
				}
			}
		}
		
		
		recordBrowserText.append(surgAudit.getCurrentStatusIsNotNull() ? " - " + surgAudit.getCurrentStatus().getOperationStatus().toString() : "");

		if (Boolean.TRUE.equals(surgAudit.getOperationCancelled()))
		{
			form.recbrSurgAudit().newRow(surgAudit, recordBrowserText.toString(), Color.Red);
			return;
		}
		form.recbrSurgAudit().newRow(surgAudit, recordBrowserText.toString());

	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.SurgicalAuditTheatreWorklist);
	}

}
