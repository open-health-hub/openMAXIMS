//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.systemsreview;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.clinical.domain.SystemsReview.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.clinical.domain.SystemsReview domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void bindgrdSymptomscolSelectLookup()
	{
		this.form.grdSymptoms().colSelectComboBox().clear();
		ims.clinical.vo.lookups.AbsentPresentCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getAbsentPresent(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.grdSymptoms().colSelectComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdSymptomscolUnitOfDurationLookup()
	{
		this.form.grdSymptoms().colUnitOfDurationComboBox().clear();
		ims.core.vo.lookups.TimeDaystoYearsCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getTimeDaystoYears(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.grdSymptoms().colUnitOfDurationComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected void clearScreen()
	{
		this.form.grdSymptoms().getRows().clear();
	}
	protected void populateScreenFromData(ims.clinical.vo.SystemReviewVo value)
	{
		clearScreen();
		if(value == null)
			return;

		// ----- Start of grdSymptoms Grid --------------------------
		ims.clinical.vo.SystemReviewSymptomVoCollection fieldgrdSymptoms = value.getSymptomsIsNotNull() ? value.getSymptoms() : null;
		if(fieldgrdSymptoms != null)
		{
			GenForm.grdSymptomsRow rowgrdSymptoms;
			for(int x = 0; x < fieldgrdSymptoms.size(); x++)
			{
				if(fieldgrdSymptoms.get(x) != null)
				{
					rowgrdSymptoms = this.form.grdSymptoms().getRows().newRow();

					rowgrdSymptoms.setcolSymptom(fieldgrdSymptoms.get(x).getSymptom());
					rowgrdSymptoms.setcolSelect(fieldgrdSymptoms.get(x).getAbsentPresent());
					rowgrdSymptoms.setcolDuration(fieldgrdSymptoms.get(x).getDurationValue());
					rowgrdSymptoms.setcolUnitOfDuration(fieldgrdSymptoms.get(x).getDurationUnit());

					rowgrdSymptoms.setValue(fieldgrdSymptoms.get(x));
				}
			}
		}
		// ----- End of grdSymptoms Grid ----------------------------
	}
	protected ims.clinical.vo.SystemReviewVo populateDataFromScreen(ims.clinical.vo.SystemReviewVo value)
	{
		if(value == null)
			value = new ims.clinical.vo.SystemReviewVo();

		// ----- Start of grdSymptoms Grid --------------------------
		value.setSymptoms(new ims.clinical.vo.SystemReviewSymptomVoCollection());
		for(int x = 0; x < this.form.grdSymptoms().getRows().size(); x++)
		{
			ims.clinical.vo.SystemReviewSymptomVo rowValue = this.form.grdSymptoms().getRows().get(x).getValue();
			if(rowValue == null)
				rowValue = new ims.clinical.vo.SystemReviewSymptomVo();

			rowValue.setSymptom(this.form.grdSymptoms().getRows().get(x).getcolSymptom());
			rowValue.setAbsentPresent(this.form.grdSymptoms().getRows().get(x).getcolSelect());
			rowValue.setDurationValue(this.form.grdSymptoms().getRows().get(x).getcolDuration());
			rowValue.setDurationUnit(this.form.grdSymptoms().getRows().get(x).getcolUnitOfDuration());

			if(value.getSymptomsIsNotNull())
				value.getSymptoms().add(rowValue);
		}
		// ----- End of grdSymptoms Grid ----------------------------

		return value;
	}
	protected ims.clinical.vo.SystemReviewVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.clinical.vo.SystemReviewVo());
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.clinical.domain.SystemsReview domain;
}
