//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ander Telleria using IMS Development Environment (version 1.70 build 3352.27411)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.edischargeopsprocscomponent;

import ims.clinical.forms.edischargeopsprocscomponent.GenForm.ctnDetailsContainer.grpProcedureTypeEnumeration;
import ims.clinical.forms.edischargeopsprocscomponent.GenForm.grdProcsRow;
import ims.clinical.vo.EDischargeSTHKSummaryDetailVo;
import ims.clinical.vo.EDischargeSTHKSummaryForProcComponentVo;
import ims.clinical.vo.SurgicalOperationNotesShortVo;
import ims.clinical.vo.enums.EDischargeLastEvent;
import ims.clinical.vo.lookups.CodingItemType;
import ims.clinical.vo.lookups.EDischargeSummarySection;
import ims.clinical.vo.lookups.EDischargeSummarySectionStatus;
import ims.clinical.vo.lookups.PatientProcedureOutcome;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientProcedureProcsComponentLiteVo;
import ims.core.vo.PatientProcedureProcsComponentLiteVoCollection;
import ims.core.vo.PatientProcedureProcsComponentVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.edischarge.vo.SummaryRefVo;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.vo.ValueObject;
import ims.vo.interfaces.IClinicalCodingValue;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;

public class Logic extends BaseLogic
{

	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setbInitialised(null);
		form.getLocalContext().setisReadonly(false);
	}

	// We initialize the Clinical Coding custom control and Authoring Info.
	private void initializeCustomControls()
	{
		// We set the type to Procedure.
		form.ctnDetails().ccProcedure().setCodingItemType(CodingItemType.PROCEDURE);
		// We set the hotlist to be selected by default.
		form.ctnDetails().ccProcedure().setHotlist(new Boolean(true));
		form.ctnDetails().ccProcedure().setSpecialty(getSpecialty());
		// The authoring user will be the current user logged into the system
		MemberOfStaffShortVo user = (MemberOfStaffShortVo) domain.getMosUser();
		if (user != null && user.getHcp() != null)
		{

			HcpLiteVo hcp = new HcpLiteVo();
			hcp.setMos(user);
			hcp.setID_Hcp(user.getHcp().getID_Hcp());
			form.getLocalContext().setHcp(hcp);
		}
		else
		{
			form.getLocalContext().setHcp(null);
		}
	}

	private void populateResopnsibleLabel()
	{
		if (form.grdProcs().getSelectedRow() == null)
		{
			CareContextVo careContext = domain.getCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			if (careContext != null && careContext.getEpisodeOfCareIsNotNull())
			{
				form.ctnDetails().lblResponsible().setValue(careContext.getEpisodeOfCare().getHcpDisplayString());
			}
		}
	}

	// On opening the form we clear everything and load the Patient Procedures
	// existing in the database to the grid.
	private void open()
	{
		form.grdProcs().getRows().clear();
		clearInstanceControls();
		form.ctnDetails().ccProcedure().setIsRequired(true);
		form.ctnDetails().ccAuthor().setIsRequiredPropertyToControls(true);

		try
		{
			displayProcedures(domain.listProcedures(form.getGlobalContext().Core.getCurrentCareContext()));
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
		}
		preSelectSavedProcedure();
		
		//	WDEV-13037
		populateCompleteCheckbox();
		
		form.setMode(FormMode.VIEW);
		updateContextMenu();
		updateControlState();
		manageReadOnly();
		form.getLocalContext().setIsIncludedChanged(null);
		form.getLocalContext().setIsSaveOrEdit(null);
	}

	//WDEV-13037
	private void populateCompleteCheckbox() 
	{
		if(form.getLocalContext().getSTHKSummary() != null)
		{
			form.getLocalContext().setSTHKSummaryVo(domain.getEDischargeSummary(form.getLocalContext().getSTHKSummary()));
			
			form.chkComplete().setValue(EDischargeSummarySectionStatus.COMPLETED.equals(getProcStatus(form.getLocalContext().getSTHKSummaryVo())));
		}
		//wdev-13397
		if(form.getLocalContext().getSTHKSummaryVo() == null)
			form.chkComplete().setVisible(Boolean.FALSE);
			
		//---------
		
	}

	//WDEV-13037
	private EDischargeSummarySectionStatus getProcStatus(EDischargeSTHKSummaryForProcComponentVo summary) 
	{
		if(summary == null || summary.getSummaryDetails() == null)
			return null;
		
		for(int i=0; i< summary.getSummaryDetails().size(); i++)
		{
			EDischargeSTHKSummaryDetailVo summaryDetails = summary.getSummaryDetails().get(i);
			
			if(summaryDetails == null)
				continue;
			
			if(EDischargeSummarySection.OPERATIONS_AND_PROCS.equals(summaryDetails.getSection()))
			{
				return summaryDetails.getProgressStatus();
			}
		}
		
		return null;
	}

	private void updateControlState()
	{
		if (form.getLocalContext().getisReadonlyIsNotNull() && form.getLocalContext().getisReadonly())
			return;

		if (form.getMode().equals(FormMode.VIEW))
		{
			// WDEV-8372
			form.ctnDetails().lblResponsible().setVisible(form.grdProcs().getSelectedRow() != null);
			form.ctnDetails().lblResponsible().setEnabled(true);

			if (form.getLocalContext().getPatientProcedureVoIsNotNull())
			{
				form.btnEdit().setVisible(true);
				form.btnEdit().setEnabled(true);

			}
			else
			{
				form.btnEdit().setVisible(false);

			}
			
			form.chkComplete().setVisible(form.getLocalContext().getSTHKSummaryVo()!= null); //wdev-13397
			
			EDischargeSummarySectionStatus procStatus = getProcStatus(form.getLocalContext().getSTHKSummaryVo());//WDEV-13252
			form.chkComplete().setEnabled(!(EDischargeSummarySectionStatus.NOT_STARTED.equals(procStatus)) && form.grdProcs().getRows().size() > 0);//WDEV-13037, WDEV-13252, wdev-14750
			
			form.grdProcs().setEnabled(true);//	WDEV-13621
			form.grdProcs().setReadOnly(false);//	WDEV-13621
		}
		else
		{
			//WDEV-12923 - starts here
			form.ctnDetails().grpProcedureType().setEnabled(form.getLocalContext().getIsIncludedChanged() == null);
			form.ctnDetails().cmbLaterality().setEnabled(form.getLocalContext().getIsIncludedChanged() == null);
			form.ctnDetails().pdtPerformed().setEnabled(form.getLocalContext().getIsIncludedChanged() == null);
			form.ctnDetails().txtSite().setEnabled(form.getLocalContext().getIsIncludedChanged() == null);
			form.ctnDetails().timProc().setEnabled(form.getLocalContext().getIsIncludedChanged() == null);
			
			//WDEV-12923 -  ends here
			
			/*WDEV-12923if (form.getLocalContext().getHcpIsNotNull())
				form.ctnDetails().ccAuthor().setEnabledAuthoringHCP(false);
			else
				form.ctnDetails().ccAuthor().setEnabledAuthoringHCP(true);
			*/
			
			
			if (form.getLocalContext().getIsSaveOrEditIsNotNull())
			{
				if (form.getLocalContext().getIsSaveOrEdit())
					form.grdProcs().setEnabled(false);
				else
					form.grdProcs().setEnabled(true);
			}
		}
		
		form.ctnDetails().ccPerformedBy().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getIsIncludedChanged() == null); // WDEV-12923
		form.ctnDetails().ccProcedure().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getIsIncludedChanged() == null); // WDEV-12923
		
		form.ctnDetails().ccAuthor().setEnabledAuthoringHCP(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getIsIncludedChanged() == null);//	WDEV-13536
		form.ctnDetails().ccAuthor().setEnabledDateTime(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getIsIncludedChanged() == null);//	WDEV-13536
	}

	// We display the procedures into the grid
	private void displayProcedures(PatientProcedureProcsComponentLiteVoCollection procedures)
	{
		form.grdProcs().getRows().clear();

		if (procedures != null)
		{
			for (PatientProcedureProcsComponentLiteVo procedure : procedures)
			{
				grdProcsRow aRow = form.grdProcs().getRows().newRow();
				aRow.setValue(procedure);

				if (procedure.getAuthoringInformationIsNotNull())
				{
					if (procedure.getAuthoringInformation().getAuthoringHcpIsNotNull() && procedure.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
					{
						aRow.setColAuthoringHCPDateTime(procedure.getAuthoringInformation().getAuthoringHcp().toString() + ", " + procedure.getAuthoringInformation().getAuthoringDateTime());
					}
					else if (procedure.getAuthoringInformation().getAuthoringHcpIsNotNull() && (!procedure.getAuthoringInformation().getAuthoringDateTimeIsNotNull()))
					{
						aRow.setColAuthoringHCPDateTime(procedure.getAuthoringInformation().getAuthoringHcp().toString());
					}
					else if ((!procedure.getAuthoringInformation().getAuthoringHcpIsNotNull()) && procedure.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
					{
						aRow.setColAuthoringHCPDateTime(procedure.getAuthoringInformation().getAuthoringDateTime().toString());
					}
				}

				// WDEV-8607
				if (procedure.getProcDateIsNotNull())
				{
					aRow.setColDate(procedure.getProcDate());
				}

				aRow.setReadOnly(false);

				if (procedure.getIncludeInDischargeLetterIsNotNull())
				{
					if (procedure.getIncludeInDischargeLetter())
					{
						aRow.setColInclude(true);
					}
					else
					{
						aRow.setColInclude(false);
					}
				}

				if (procedure.getProcedureDescriptionIsNotNull())
				{
					aRow.setColProc(procedure.getProcedureDescription());
				}
			}
		}

	}

	// Preselect the saved procedure in the grid
	private void preSelectSavedProcedure()
	{
		if (form.getLocalContext().getPatientProcedureVoIsNotNull())
		{
			boolean rowSelected = false;
			for (int i = 0; i < form.grdProcs().getRows().size(); i++)
			{
				if (form.grdProcs().getRows().get(i).getValue().equals(form.getLocalContext().getPatientProcedureVo()))
				{
					form.grdProcs().setValue(form.grdProcs().getRows().get(i).getValue());
					rowSelected = true;
					break;
				}
			}
			if (rowSelected)
				gridProcedureSelChange();
		}
	}

	private void gridProcedureSelChange()
	{

		PatientProcedureProcsComponentLiteVo voPatientProcedure = (PatientProcedureProcsComponentLiteVo) form.grdProcs().getValue();
		if (voPatientProcedure == null)
		{
			engine.showMessage("Please select a Procedure");
			return;
		}

		PatientProcedureProcsComponentVo voPatProc = domain.getProcedure(voPatientProcedure.toPatientProcedureRefVo());
		form.getLocalContext().setPatientProcedureVo(voPatProc);

		populateScreenFromData(voPatProc);
		updateContextMenu();
	}

	protected void populateScreenFromData(PatientProcedureProcsComponentVo voPatProc)
	{
		if (voPatProc == null)
			return;

		Object hcpLite = domain.getHcpLiteUser();
		CareContextVo careContextVO = domain.getCareContext(voPatProc.getCareContext());
		form.ctnDetails().lblResponsible().setValue(hcpLite != null ? (((HcpLiteVo) hcpLite).getName() != null ? ((HcpLiteVo) hcpLite).getName().toString() : null) : null);
		if (careContextVO != null)
			form.ctnDetails().lblResponsible().setValue(careContextVO.getResponsibleHCPIsNotNull() ? careContextVO.getResponsibleHCP().getIHcpName() : null);
		form.ctnDetails().ccProcedure().setValue((IClinicalCodingValue) voPatProc);
		
		// Set performed by value
		form.ctnDetails().ccPerformedBy().clear();
		form.ctnDetails().ccPerformedBy().setValue(voPatProc.getPeformedBy());
		
		form.ctnDetails().pdtPerformed().setValue(voPatProc.getProcDateIsNotNull() ? voPatProc.getProcDate() : null);
		form.ctnDetails().timProc().setValue(voPatProc.getProcTimeIsNotNull() ? voPatProc.getProcTime() : null);
		form.ctnDetails().cmbLaterality().setValue(voPatProc.getProcLateralityIsNotNull() ? voPatProc.getProcLaterality() : null);
		form.ctnDetails().txtSite().setValue(voPatProc.getSiteTextIsNotNull() ? voPatProc.getSiteText() : null);

		if (voPatProc.getAuthoringInformationIsNotNull())
			form.ctnDetails().ccAuthor().setValue(voPatProc.getAuthoringInformation());

		setResponsibleHcp(voPatProc.getCareContext());
	}

	private void setResponsibleHcp(CareContextLiteVo voCareContext)
	{
		String strHCP = new String("Responsible HCP not known");
		if (voCareContext != null)
			if (voCareContext.getEpisodeOfCareIsNotNull())
				if (voCareContext.getEpisodeOfCare().getResponsibleHCPIsNotNull())
					if (voCareContext.getEpisodeOfCare().getResponsibleHCP().getMosIsNotNull())
						if (voCareContext.getEpisodeOfCare().getResponsibleHCP().getMos().getNameIsNotNull())
							strHCP = voCareContext.getEpisodeOfCare().getResponsibleHCP().getMos().getName().toString();

		form.ctnDetails().lblResponsible().setValue(strHCP);
	}

	protected void clearInstanceControls()
	{
		form.ctnDetails().ccProcedure().clear();
		form.ctnDetails().ccAuthor().setValue(null);
		form.ctnDetails().pdtPerformed().setValue(null);
		form.ctnDetails().timProc().setValue(null);
		form.ctnDetails().cmbLaterality().setValue(null);
		form.ctnDetails().txtSite().setValue(null);
		form.grdProcs().setValue(null);
		form.getLocalContext().setPatientProcedureVo(null);
		form.getLocalContext().setCodingItemTextSubmitted(null);
		form.ctnDetails().grpProcedureType().setValue(grpProcedureTypeEnumeration.rdoSpecialty);

		form.ctnDetails().ccPerformedBy().clear();
	}

	private void updateContextMenu()
	{
		if (form.getLocalContext().getisReadonlyIsNotNull() && form.getLocalContext().getisReadonly())
			return;

		if ((form.getGlobalContext().Core.getCurrentClinicalContact() == null) && (form.getGlobalContext().Core.getCurrentCareContext() == null))
		{
			form.getContextMenus().getProcedureADDItem().setVisible(false);
			form.getContextMenus().getProcedureUPDATEItem().setVisible(false);
		}
		else
		{
			boolean viewMode = form.getMode().equals(FormMode.VIEW);
			form.getContextMenus().getProcedureADDItem().setVisible(viewMode);
			form.getContextMenus().getProcedureUPDATEItem().setVisible(viewMode && form.grdProcs().getSelectedRow() != null);

		}

		if ((form.getLocalContext().getPatientProcedureVoIsNotNull()) && (form.getLocalContext().getPatientProcedureVo().getProcedureStatusIsNotNull()) && (form.getLocalContext().getPatientProcedureVo().getProcedureStatus().equals(PatientProcedureStatus.PLANNED)))
		{
			if (form.getLocalContext().getPatientProcedureVo().getProcedureOutcomeIsNotNull())
			{
				form.getContextMenus().getProcedurePERFORMEDItem().setVisible(false);
				form.getContextMenus().getProcedureCANCELItem().setVisible(false);
			}
			else
			{
				boolean viewMode = form.getMode().equals(FormMode.VIEW);
				form.getContextMenus().getProcedurePERFORMEDItem().setVisible(viewMode);
				form.getContextMenus().getProcedureCANCELItem().setVisible(viewMode);

			}
		}
		else
		{
			form.getContextMenus().getProcedurePERFORMEDItem().setVisible(false);
			form.getContextMenus().getProcedureCANCELItem().setVisible(false);
		}
		form.getContextMenus().getProcedureVIEWASSOCIATIONSItem().setVisible(false);
		form.getContextMenus().getProcedurePERFORMEDItem().setVisible(false);
		
		//	WDEV-12785
		form.getContextMenus().getProcedureRIEItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdProcs().getValue() instanceof PatientProcedureProcsComponentLiteVo && !isOpNotesProcedures(form.grdProcs().getValue())); //wdev-15860
	}
	//wdev-15860
	private boolean isOpNotesProcedures(PatientProcedureProcsComponentLiteVo proc)
	{
		SurgicalOperationNotesShortVo tempVo = domain.getSurgicalOperationNotesShort(form.getGlobalContext().Core.getCurrentCareContext());
		
		if(	tempVo == null)
			return false;
		
		if( tempVo.getProceduresPerformedIsNotNull() )
		{
			for( int i = 0; i < tempVo.getProceduresPerformed().size();i++)
			{
				if( proc != null && proc.getID_PatientProcedureIsNotNull() && tempVo.getProceduresPerformed().get(i) != null && proc.getID_PatientProcedure().equals(tempVo.getProceduresPerformed().get(i).getID_PatientProcedure()))
					return true;
					
			}
		}
		
		if( proc != null && proc.getID_PatientProcedureIsNotNull() && tempVo.getMainProcedureIsNotNull() && proc.getID_PatientProcedure().equals(tempVo.getMainProcedure().getID_PatientProcedure()))
			return true;
			
			
		return false;
	}
	//-------------------------
	
	private Specialty getSpecialty()
	{
		if ((form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()) && (form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty();
		}
		else if ((form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()) && (form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty();
		}
		return null;
	}

	@Override
	protected void onGrdProcsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(FormMode.VIEW.equals(form.getMode()))
		{
			PatientProcedureProcsComponentLiteVo voPatientProcedure = (PatientProcedureProcsComponentLiteVo) form.grdProcs().getValue();
			if (voPatientProcedure == null)
			{
				engine.showMessage("Please select a Procedure");
				form.getLocalContext().setPatientProcedureVo(null);
				return;
			}
	
			PatientProcedureProcsComponentVo voPatProc = domain.getProcedure(voPatientProcedure);
			form.getLocalContext().setPatientProcedureVo(voPatProc);
	
			populateScreenFromData(voPatProc);
			updateContextMenu();
			updateControlState();
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		save(false);	//WDEV-13037
	}

	//WDEV-13037
	private void save(boolean wasCompleteMessageBoxDisplayed) 
	{
		// If we have changed any value in the grid we save it.
		if (form.getLocalContext().getIsIncludedChangedIsNotNull())
		{
			//WDEV-13037
			if(!wasCompleteMessageBoxDisplayed && form.chkComplete().getValue() == false && form.getLocalContext().getSTHKSummaryVo() != null) //wdev-13397
			{
				form.getLocalContext().setCompleteMessageBoxId(engine.showMessage("Do you want to mark Operations and Procedures as complete?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
				return;
			}
			
			saveChangedRows();
		}
		// If we are creating a new Patient Procedure or editing one in the
		// container we save it
		if (form.getLocalContext().getIsSaveOrEditIsNotNull() && form.getLocalContext().getIsSaveOrEdit())
		{
			if (!validateUILogic())
				return;
			PatientProcedureProcsComponentVo voPatProc = populateInstanceData(form.getLocalContext().getPatientProcedureVo());
			//if(voPatProc.getProcTime().isGreaterThan(new DateTime().getTime()))
			//{
			//	engine.showErrors(new String[]{"Time Performed cannot be in the future."});
			//	return;
			//}

			String[] uiErrors = null;
			if (voPatProc.getProcedureIsNotNull())
			{
				// Clear the procedure from the VO
				Integer idProcedure = voPatProc.getProcedure().getID_Procedure();
				if (idProcedure != null && idProcedure.intValue() < 0)
					voPatProc.setProcedure(null);
			}
			else
			{
				uiErrors = new String[1];
				uiErrors[0] = "Please select a Coding Item";
			}

			voPatProc.setProcedureStatus(PatientProcedureStatus.PERFORMED);
			voPatProc.setProcedureOutcome(PatientProcedureOutcome.PERFORMED);

			if (voPatProc.getID_PatientProcedure() == null)
				voPatProc.setIncludeInDischargeLetter(true);

			String[] errors = voPatProc.validate(uiErrors);
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}
			//---wdev-9718
			if(voPatProc.getProcDate() != null)
			{
				Date dateperformed = voPatProc.getProcDate().toDate();
				DateTime datenow = new DateTime();
				if(voPatProc.getProcTimeIsNotNull())
				{
					if(voPatProc.getProcTime().isGreaterThan(datenow.getTime()))
					{
						if(dateperformed != null)
						{
							if(dateperformed.isGreaterOrEqualThan(datenow.getDate()))
							{
								engine.showErrors(new String[]{"Time Performed cannot be in the future."});
								return;
							}
						}
						else
						{
							Integer day = 0;
							Integer month = 0;
							if(voPatProc.getProcDate().getMonth() != null )
							{
								day = 01;
								month = voPatProc.getProcDate().getMonth();
							}
							else
							{
								day = 01;
								month = 01;
								
							}
							if(voPatProc.getProcDate().getYear() > datenow.getDate().getYear())
							{
								engine.showErrors(new String[]{"Time Performed cannot be in the future."});
								return;
							}
							if((month > datenow.getDate().getMonth()) && (voPatProc.getProcDate().getYear() == datenow.getDate().getYear()) )
							{
								engine.showErrors(new String[]{"Time Performed cannot be in the future."});
								return;
							}
							if((day >= datenow.getDate().getDay())&&(month == datenow.getDate().getMonth()) && (voPatProc.getProcDate().getYear() == datenow.getDate().getYear()) )
							{
								engine.showErrors(new String[]{"Time Performed cannot be in the future."});
								return;
								
							}
							
						}
					}
				}
			}
			//-----------	
			
			//WDEV-13037
			if(!wasCompleteMessageBoxDisplayed && form.chkComplete().getValue() == false && form.getLocalContext().getSTHKSummaryVo() != null) //wdev-13397
			{
				form.getLocalContext().setCompleteMessageBoxId(engine.showMessage("Do you want to mark Operations and Procedures as complete?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
				return;
			}
			
			try
			{
				voPatProc = domain.savePatientProcedure(voPatProc, form.getGlobalContext().Core.getPatientShort().toPatientRefVo(), populateEDischargeSummary());	//	WDEV-13037
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				
				form.getLocalContext().setPatientProcedureVo(domain.getProcedure(voPatProc));
				
				form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
				form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
				form.fireCustomControlValueChanged();
				
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				open();
				form.getLocalContext().setPatientProcedureVo(domain.getProcedure(voPatProc));
				return;
			}
			form.getLocalContext().setPatientProcedureVo(voPatProc);
		}
		open();
		
		form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}

	// We save the rows we have changed in the grid
	private void saveChangedRows()
	{
		try
		{
			domain.saveProcedures(form.getLocalContext().getIsIncludedChanged(), populateEDischargeSummary());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}

	}

	private boolean validateUILogic()
	{
		ArrayList<String> errors = new ArrayList<String>();
		if (form.ctnDetails().ccAuthor().getValue() == null || (form.ctnDetails().ccAuthor().getValue().getAuthoringDateTime() == null || form.ctnDetails().ccAuthor().getValue().getAuthoringHcp() == null))
		{
			errors.add("Authoring Information is Mandatory");
		}
		// -----------------------------
		PartialDate datePerf = form.ctnDetails().pdtPerformed().getValue();

		if (datePerf != null)
		{
			datePerf = new PartialDate(datePerf.getYear() != null ? datePerf.getYear() : new Integer(2000), datePerf.getMonth() != null ? datePerf.getMonth() : new Integer(1), datePerf.getDay() != null ? datePerf.getDay() : new Integer(1));

			if (datePerf.isGreaterThan(new Date()))
			{
				errors.add("Date Performed cannot be in the Future!!!");
			}
			if (form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getDobIsNotNull() && datePerf.isLessThan(form.getGlobalContext().Core.getPatientShort().getDob()))
			{

				errors.add("Date Performed cannot be before patient DOB");

			}
		}
		// -----------------------------
		if (errors.size() > 0)
		{
			engine.showErrors(errors.toArray(new String[0]));
			return false;
		}
		return true;
	}

	@Override
	protected void onCustomControlCodingItemValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.ctnDetails().ccProcedure().isAllSelected() != null 
			&& form.ctnDetails().ccProcedure().isAllSelected().booleanValue())
		{
			form.ctnDetails().grpProcedureType().setValue(GenForm.ctnDetailsContainer.grpProcedureTypeEnumeration.rdoAll);
			form.ctnDetails().ccProcedure().setHotlist(new Boolean(false));
			form.ctnDetails().ccProcedure().search();
		}
		
		if (form.ctnDetails().ccProcedure().getSelectedItem() != null)
		{
			form.ctnDetails().ccProcedure().setParentEditing(Boolean.TRUE);
			form.ctnDetails().ccProcedure().setParentEditing(Boolean.TRUE, Boolean.FALSE);
		}
		else
		{
			form.ctnDetails().ccProcedure().setParentEditing(Boolean.TRUE);
			form.ctnDetails().ccProcedure().setParentEditing(Boolean.FALSE, Boolean.TRUE);
			
			form.ctnDetails().ccProcedure().setDescription(null);
		}
	}

	@Override
	protected void onRadioButtongrpProcedureTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().ccProcedure().setHotlist(form.ctnDetails().grpProcedureType().getValue().equals(ims.clinical.forms.edischargeopsprocscomponent.GenForm.ctnDetailsContainer.grpProcedureTypeEnumeration.rdoSpecialty) ? new Boolean(true) : new Boolean(false));
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		clearInstanceControls();
		open();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		editProcedure();
	}

	private void editProcedure()
	{
		// We set to true the value of if it is a new or an existing Patient
		// Procedure.
		form.getLocalContext().setIsSaveOrEdit(true);
		form.ctnDetails().setEnabled(true);
		form.setMode(FormMode.EDIT);
		form.grdProcs().setEnabled(false);
		updateControlState();
		updateContextMenu();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		newProcedure();
	}

	private void newProcedure()
	{
		form.getLocalContext().setIsSaveOrEdit(true);
		form.ctnDetails().setEnabled(true);
		form.setMode(FormMode.EDIT);
		clearInstanceControls();

		updateControlState();

		form.ctnDetails().ccProcedure().setHotlist(Boolean.TRUE);

		form.ctnDetails().ccProcedure().setEnabled(true);
		form.ctnDetails().ccProcedure().setValue(null);

		if (form.getLocalContext().getHcpIsNotNull())
		{
			AuthoringInformationVo author = new AuthoringInformationVo();
			DateTime dateTime = new DateTime();
			author.setAuthoringHcp(form.getLocalContext().getHcp());
			author.setAuthoringDateTime(dateTime);
			form.ctnDetails().ccAuthor().setValue(author);
		}
		
		// Initialise performed by
		form.ctnDetails().ccPerformedBy().setValue(domain.getHcpLiteUser() != null? domain.getHcp((IMos) domain.getHcpLiteUser()) : null);

		updateContextMenu();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		/*if (menuItemID == 1)
			newProcedure();

		else if (menuItemID == 2)
			editProcedure();
		*/
		
		switch(menuItemID)
		{
			case GenForm.ContextMenus.Procedure.ADD:
				newProcedure();
			break;
			
			case GenForm.ContextMenus.Procedure.UPDATE:
				editProcedure();
			break;
			
			case GenForm.ContextMenus.Procedure.RIE:
				markAsRie(form.grdProcs().getValue());
			break;
		}
	}

	//WDEV-12785
	private void markAsRie(PatientProcedureProcsComponentLiteVo value) 
	{
		if(value == null)
			return;
		
		form.getLocalContext().setProcedureToBeRIE(value);
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}

	protected PatientProcedureProcsComponentVo populateInstanceData(PatientProcedureProcsComponentVo voPatProc)
	{
		if (voPatProc == null)
		{
			voPatProc = new PatientProcedureProcsComponentVo();
			
			voPatProc.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voPatProc.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		}
		
		IClinicalCodingValue result = form.ctnDetails().ccProcedure().getValue();
		if (result != null)
		{
			ValueObject vo = result.getIClinicalCodingValue();
			if (vo instanceof ProcedureLiteVo)
			{
				voPatProc.setProcedure((ProcedureLiteVo) result.getIClinicalCodingValue());
				voPatProc.setProcedureDescription(result.getIClinicalCodingValueDescription());
			}
			else
			{
				throw new CodingRuntimeException("ProcedureLiteVo expected from component");
			}

		}
		else
		// http://jira/browse/WDEV-3518 - If no description is entered set the
		// equivalent field in the vo to null;
		{
			voPatProc.setProcedureDescription(null);
		}

		// WDEV-8607 
		voPatProc.setProcDate(form.ctnDetails().pdtPerformed().getValue());
		voPatProc.setProcTime(form.ctnDetails().timProc().getValue());
//		voPatProc.setProcEndDate(form.ctnDetails().pdtPerformed().getValue());
		
		// Set performed by
		voPatProc.setPeformedBy(domain.getHcp(form.ctnDetails().ccPerformedBy().getValue()));
		
		voPatProc.setSiteText(form.ctnDetails().txtSite().getValue());
		voPatProc.setProcLaterality(form.ctnDetails().cmbLaterality().getValue());
		voPatProc.setAuthoringInformation(form.ctnDetails().ccAuthor().getValue());
		voPatProc.setProcedureDescription(form.ctnDetails().ccProcedure().getDescription());
		voPatProc.setInfoSource(SourceofInformation.CLINICALCONTACT);
		return voPatProc;
	}

	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.ctnDetails().ccProcedure().setParentEditing(true);
		}
		else
		{
			form.ctnDetails().ccProcedure().setParentEditing(false);
			updateControlState();
		}
	}

	protected void onGrdProcsGridCheckBoxClicked(int column, grdProcsRow row, boolean isChecked) throws PresentationLogicException
	{
		PatientProcedureProcsComponentLiteVoCollection changes = form.getLocalContext().getIsIncludedChanged();
		row.getValue().setIncludeInDischargeLetter(form.grdProcs().getRowByValue(row.getValue()).getColInclude());
		if (changes == null)
			changes = new PatientProcedureProcsComponentLiteVoCollection();
		changes.add(row.getValue());
		form.getLocalContext().setIsIncludedChanged(changes);
		form.grdProcs().setValue(row.getValue());
		onGrdProcsSelectionChanged();
		form.setMode(FormMode.EDIT);
		form.grdProcs().setReadOnly(true);

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();

		//form.ctnDetails().setEnabled(false);	WDEV-12923
				
		updateControlState();
		updateContextMenu();
	}

	//WDEV-12923
	private void clearDetailsControls() 
	{
		form.ctnDetails().ccProcedure().clear();
		form.ctnDetails().ccAuthor().setValue(null);
		form.ctnDetails().pdtPerformed().setValue(null);
		form.ctnDetails().timProc().setValue(null);
		form.ctnDetails().cmbLaterality().setValue(null);
		form.ctnDetails().txtSite().setValue(null);
		form.ctnDetails().grpProcedureType().setValue(null);
		form.ctnDetails().ccPerformedBy().clear();
		form.ctnDetails().lblResponsible().setValue(null);
	}

	public void initialise()
	{
		if (form.getLocalContext().getbInitialised() == null)
		{
			updateContextMenu();
			initializeCustomControls();
			open();
			form.getLocalContext().setbInitialised(Boolean.TRUE);
		}
		else
		{
			populateCompleteCheckbox();	//wdev-13269
		}
		
		updateControlState();//	WDEV-13621
		manageReadOnly();//	WDEV-13597
		populateResopnsibleLabel();
	}

	private void manageReadOnly()
	{
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) ? true : false);
		form.btnEdit().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdProcs().getSelectedRow() != null ? true : false);

		boolean isReadOnly = form.getLocalContext().getisReadonlyIsNotNull() && form.getLocalContext().getisReadonly() && form.getMode().equals(FormMode.VIEW);
		form.btnNew().setEnabled(!isReadOnly);//	WDEV-13597
		
		if (isReadOnly)//WDEV-13597
		{
			form.btnEdit().setEnabled(false);//WDEV-13621

			form.getContextMenus().hideAllProcedureMenuItems();
			
			form.chkComplete().setEnabled(false); //WDEV-13252, WDEV-13621
			
			form.ctnDetails().ccPerformedBy().setEnabled(false);//WDEV-13621
			form.ctnDetails().ccProcedure().setEnabled(false);//WDEV-13621
			
			form.grdProcs().setReadOnly(true);//	WDEV-13621
		}
	}

	public void setReadOnly()
	{
		form.getLocalContext().setisReadonly(/* form.getGlobalContext().Clinical.geteDischargeCompleted() */form.getGlobalContext().Clinical.geteDischargeClinicalComplete());
		manageReadOnly();
	}

	public void clearLastEvent()
	{
		form.getLocalContext().setLastEvent(null);
	}

	public EDischargeLastEvent getLastEvent()
	{
		return form.getLocalContext().getLastEvent();
	}

	public void initialise(SummaryRefVo summary)
	{
		form.getLocalContext().setSTHKSummary(summary);
		initialise();
	}

	//	WDEV-12785
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			doRIE();
		}
	}

	//	WDEV-12785
	private void doRIE() 
	{
		if(form.getLocalContext().getProcedureToBeRIEIsNotNull())
		{
			try 
			{
				domain.rieProcedure(form.getLocalContext().getProcedureToBeRIE(), form.getForms().Clinical.EDischargeOpsProcsComponent, 
						form.getGlobalContext().Core.getPatientShort().getID_Patient(), 
						form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()?form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact():null,
						form.getGlobalContext().Core.getCurrentCareContextIsNotNull()?form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext():null,
						form.getGlobalContext().Core.getRieMessage(),
						form.getLocalContext().getSTHKSummary());
			} 
			catch (StaleObjectException e) 
			{
				engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			}
			catch (UnqViolationUncheckedException e)
			{
				engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			}
			
			open();
			
			form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
			form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
			form.fireCustomControlValueChanged();
		}
	}

	//WDEV-13037
	@Override
	protected void onChkCompleteValueChanged() throws PresentationLogicException 
	{
		if(FormMode.VIEW.equals(form.getMode()))
		{
			saveCompleteStatus();
		}
	}

	//WDEV-13037
	private void saveCompleteStatus() 
	{
		try 
		{
			form.getLocalContext().setSTHKSummaryVo(domain.saveEDischargeSummary(populateEDischargeSummary()));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		open();
		
		form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();	
	}

	//WDEV-13037
	private EDischargeSTHKSummaryForProcComponentVo populateEDischargeSummary() 
	{
		EDischargeSTHKSummaryForProcComponentVo summary = form.getLocalContext().getSTHKSummaryVo();
		
		if(summary != null && summary.getSummaryDetails() != null)
		{
			for(int i=0; i<summary.getSummaryDetails().size(); i++)
			{
				EDischargeSTHKSummaryDetailVo summaryDetails = summary.getSummaryDetails().get(i);
				
				if(summaryDetails == null)
					continue;
				
				if(EDischargeSummarySection.OPERATIONS_AND_PROCS.equals(summaryDetails.getSection()))
				{
					summaryDetails.setProgressStatus(form.chkComplete().getValue() ? EDischargeSummarySectionStatus.COMPLETED : EDischargeSummarySectionStatus.IN_PROGRESS);
				}
			}
		}
		
		if(summary != null)		//wdev-13375
			summary.validate();
		
		return summary;
	}

	@Override
	//WDEV-13037
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getCompleteMessageBoxId() != null && form.getLocalContext().getCompleteMessageBoxId() == messageBoxId)
		{
			if(DialogResult.YES.equals(result))
			{
				form.chkComplete().setValue(true);
			}
		}
		
		save(true);
	}
}
