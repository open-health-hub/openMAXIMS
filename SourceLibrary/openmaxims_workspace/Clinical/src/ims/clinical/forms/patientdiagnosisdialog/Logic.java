//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.patientdiagnosisdialog;

import ims.clinical.forms.patientdiagnosisdialog.GenForm.grpFilterEnumeration;
import ims.clinical.vo.PatientDiagnosisOpNotesVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.vo.CSPrimaryDiagnosisVo;
import ims.core.vo.CSPrimaryDiagnosisVoCollection;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.lookups.SourceofInformation;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.PartialDate;
import ims.vo.interfaces.IClinicalCodingValue;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
				
		if (args !=null  && args.length >0)
		{
			form.setMode(Boolean.TRUE.equals(args[0]) ? FormMode.VIEW : FormMode.EDIT);
			
		}
			
			
	}
	private void open() {
		populateScreenFromData(form.getGlobalContext().Clinical.getSelectedPatientDiagnosisOPNotes());
		
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PatientDiagnosisOpNotesVo record = populateDataFromScreen(form.getGlobalContext().Clinical.getSelectedPatientDiagnosisOPNotes());
		String[] errs = record.validate();
		if ( errs != null && errs.length > 0)
		{
			engine.showErrors(errs);
			return;
		}
		form.getGlobalContext().Clinical.setSelectedPatientDiagnosisOPNotes(record);
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void initialize()
	{
		form.grpFilter().setValue(grpFilterEnumeration.rdoSpecialty);
		

		form.ccDiagnosis().setCodingItemType(CodingItemType.DIAGNOSIS);
		setSpeciality();
		//form.ccDiagnosis().setClinicalTermMandatory(true);
		//form.ccDiagnosis().setDescriptionMandatory(true);
		form.ccDiagnosis().setIsRequired(true);
		form.ccDiagnosis().setParentEditing(true);
		
		form.ccAuthInfo().initializeComponent();
		form.setMode(FormMode.EDIT);
	}
	protected void setSpeciality()
	{
		form.ccDiagnosis().setHotlist(false);
		
		form.grpFilter().setValue(grpFilterEnumeration.rdoAll);
		
		if(form.getGlobalContext().Core.getEpisodeofCareShort() != null && form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty() != null)// 	WDEV-15962
		{
			form.ccDiagnosis().setSpecialty(form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty());// 	WDEV-15962
			form.ccDiagnosis().setHotlist(true);
			form.grpFilter().setValue(grpFilterEnumeration.rdoSpecialty);	
		}
	}
	@Override
	protected void onRadioButtongrpFilterValueChanged()	throws PresentationLogicException {
		
		if (grpFilterEnumeration.rdoAll.equals(form.grpFilter().getValue()))
		{
			form.ccDiagnosis().setHotlist(false);
		}
		else
		{
			setSpeciality();
		}
	}
	private void clearScreen()
	{
		
	}
	private void populateScreenFromData(PatientDiagnosisOpNotesVo record)
	{
		clearScreen();
		if (record == null)
			return;
		form.ccDiagnosis().setValue(record);
		//form.ccDiagnosis().setDescription(record.getDiagnosisDescription());
		//form.cmbPatDiagStatus().setValue(record.getCurrentStatusIsNotNull() ? record.getCurrentStatus().getStatus(): null);
		form.ccAuthInfo().setValue(record.getAuthoringInfo());
		form.chkMain().setValue(false);
		CSPrimaryDiagnosisVo primDiag= getPrimaryDiagnosisRecord(record);
		form.chkMain().setValue(primDiag!=null && Boolean.TRUE.equals(primDiag.getIsActive()));
		
	}
	private CSPrimaryDiagnosisVo populatePrimaryDiagnosisDataFromScreen(CSPrimaryDiagnosisVo primaryDiagnosisVo, PatientDiagnosisRefVo patientDiagnosisRef, boolean isPrimary)
	{
		if (primaryDiagnosisVo == null)
			primaryDiagnosisVo = new CSPrimaryDiagnosisVo();
		primaryDiagnosisVo.setAuthoringInformation(form.ccAuthInfo().getValue());
		primaryDiagnosisVo.setDiagnosis(patientDiagnosisRef);
		primaryDiagnosisVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		//wdev-11920
		if(primaryDiagnosisVo.getEpisodeOfCare() == null)
			primaryDiagnosisVo.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		//---------
		primaryDiagnosisVo.setIsActive(new Boolean(isPrimary));
		return primaryDiagnosisVo;
	}
	private void setCsPrimaryDiagnosis(PatientDiagnosisOpNotesVo voPatDiagnosis, boolean isChkPrimaryChecked)
	{
		CSPrimaryDiagnosisVo voCSPrimaryDiagnosis = getPrimaryDiagnosisRecord(voPatDiagnosis);
		if (voCSPrimaryDiagnosis != null || isChkPrimaryChecked)
		{
			if (voCSPrimaryDiagnosis == null)
			{
				voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(new CSPrimaryDiagnosisVo(), voPatDiagnosis, isChkPrimaryChecked);
				if (voPatDiagnosis.getPrimaryForCareSpells() == null)
					voPatDiagnosis.setPrimaryForCareSpells(new CSPrimaryDiagnosisVoCollection());
				voPatDiagnosis.getPrimaryForCareSpells().add(voCSPrimaryDiagnosis);
			}
			else
			{
				int index = voPatDiagnosis.getPrimaryForCareSpells().indexOf(voCSPrimaryDiagnosis);
				if (index >= 0)
				{
					voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(voCSPrimaryDiagnosis, voPatDiagnosis, isChkPrimaryChecked);
					voPatDiagnosis.getPrimaryForCareSpells().set(index, voCSPrimaryDiagnosis);
				}
			}
		}
	}
	private CSPrimaryDiagnosisVo getPrimaryDiagnosisRecord(PatientDiagnosisOpNotesVo voPatDiagnosis)
	{
		if (voPatDiagnosis == null || voPatDiagnosis.getPrimaryForCareSpells() == null)
			return null;

		CSPrimaryDiagnosisVoCollection voColl = voPatDiagnosis.getPrimaryForCareSpells();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagnosis);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());

			if (sameDiagnosis && sameCareContext)
				return voColl.get(i);
		}

		return null;
	}

	private PatientDiagnosisOpNotesVo populateDataFromScreen(PatientDiagnosisOpNotesVo record)
	{
		if (record == null)
			record = new PatientDiagnosisOpNotesVo();
		
		IClinicalCodingValue voResult = form.ccDiagnosis().getValue();
		if (voResult != null)
		{
			if (voResult.getIClinicalCodingValue() instanceof DiagLiteVo)
			{
				DiagLiteVo voDiagnosis = (DiagLiteVo) voResult.getIClinicalCodingValue();
				if (voDiagnosis.getID_Diagnosis() != null && voDiagnosis.getID_Diagnosis().intValue() < 0)
					record.setDiagnosis(null);
				else
					record.setDiagnosis(voDiagnosis);

				record.setDiagnosisDescription(voResult.getIClinicalCodingValueDescription());
			}
			else
				throw new CodingRuntimeException("DiagLiteVo expected from component");
		}
		else
		{
			record.setDiagnosisDescription(null);
		}
		
		if (!record.getID_PatientDiagnosisIsNotNull())
		{
			record.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			record.setAuthoringInfo(form.ccAuthInfo().getValue());
			record.setDiagnosedDate(new PartialDate());
			record.setSourceofInformation(SourceofInformation.CLINICALCONTACT);
			record.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		}
			
		//PatientDiagnosisStatusVo status = record.getCurrentStatus();
		/*if(status == null)
		{
			status = new PatientDiagnosisStatusVo();
			status.setAuthoringHCP(record.getAuthoringInfoIsNotNull()?record.getAuthoringInfo().getAuthoringHcp():null);
			status.setAuthoringDateTime(record.getAuthoringInfoIsNotNull()?record.getAuthoringInfo().getAuthoringDateTime():null);
		}
		status.setStatus(form.cmbPatDiagStatus().getValue());
		*/
		//wdev-15919
		/*if(	form.cmbPatDiagStatus().getValue() != null)
		{
			if(status == null)
			{
				status = new PatientDiagnosisStatusVo();
				status.setAuthoringHCP(record.getAuthoringInfoIsNotNull()?record.getAuthoringInfo().getAuthoringHcp():null);
				status.setAuthoringDateTime(record.getAuthoringInfoIsNotNull()?record.getAuthoringInfo().getAuthoringDateTime():null);
			}
			status.setStatus(form.cmbPatDiagStatus().getValue());
		}
		else
			status =null;
		//--------------------------
		
		
		record.setCurrentStatus(status);*/
		setCsPrimaryDiagnosis(record, form.chkMain().getValue());
		
		return record;
	}
	@Override
	protected void onCcDiagnosisValueChanged() throws PresentationLogicException {
		if (form.ccDiagnosis().isAllSelected() != null && form.ccDiagnosis().isAllSelected().booleanValue())
		{
			form.grpFilter().setValue(grpFilterEnumeration.rdoAll);
			form.ccDiagnosis().setHotlist(false);
			form.ccDiagnosis().search();
			
		}
		
	}
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		boolean hidePrimary = engine.getPreviosFormName().equals(form.getForms().Scheduling.AppointmentOutcomeDialog);
		form.lblPrimary().setVisible(!hidePrimary);
		form.chkMain().setVisible(!hidePrimary);
		form.chkMain().setEnabled(FormMode.EDIT.equals(form.getMode()));	
	}
}
