//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.otherassessment;

public abstract class BaseLogic extends Handlers
{
	private java.util.ArrayList lookupUsageErrors;

	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.clinical.domain.OtherAssessment.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.clinical.domain.OtherAssessment domain)
	{
		setContext(engine, form);
		this.domain = domain;
		if(domain.getLookupService().countLookupInstances(ims.assessment.vo.lookups.AssessmentNameCollection.class, ims.assessment.vo.lookups.AssessmentName.class, 1271004, true) == 0)
		{
			if(lookupUsageErrors == null)
				lookupUsageErrors = new java.util.ArrayList();
			lookupUsageErrors.add("The lookup type 'AssessmentName' (ID: 1271004) must have at least one active instance configured.");
		}
	}
	public final String[] getLookupUsageErrors()
	{
		if(lookupUsageErrors == null)
			return null;
		String[] errors = new String[lookupUsageErrors.size()];
		for(int x = 0; x < lookupUsageErrors.size(); x++)
		{
			errors[x] = (String)lookupUsageErrors.get(x);
		}
		return errors;
	}
	protected final void oncmbNameValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnDetails().cmbName().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.assessment.vo.lookups.AssessmentName existingInstance = (ims.assessment.vo.lookups.AssessmentName)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbNameLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.assessment.vo.lookups.AssessmentName)
		{
			ims.assessment.vo.lookups.AssessmentName instance = (ims.assessment.vo.lookups.AssessmentName)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbNameLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.assessment.vo.lookups.AssessmentName existingInstance = (ims.assessment.vo.lookups.AssessmentName)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnDetails().cmbName().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbNameLookup()
	{
		this.form.ctnDetails().cmbName().clear();
		ims.assessment.vo.lookups.AssessmentNameCollection lookupCollection = ims.assessment.vo.lookups.LookupHelper.getAssessmentName(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnDetails().cmbName().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbNameLookupValue(int id)
	{
		ims.assessment.vo.lookups.AssessmentName instance = ims.assessment.vo.lookups.LookupHelper.getAssessmentNameInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnDetails().cmbName().setValue(instance);
	}
	protected final void defaultcmbNameLookupValue()
	{
		this.form.ctnDetails().cmbName().setValue((ims.assessment.vo.lookups.AssessmentName)domain.getLookupService().getDefaultInstance(ims.assessment.vo.lookups.AssessmentName.class, engine.getFormName().getID(), ims.assessment.vo.lookups.AssessmentName.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.ctnDetails().cmbName().setValue(null);
		this.form.ctnDetails().decScore().setValue(null);
		this.form.ctnDetails().dteDate().setValue(null);
	}
	protected void populateScreenFromData(ims.clinical.vo.OtherAssessmentSummaryVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.ctnDetails().cmbName().setValue(value.getAssessmentNameIsNotNull() ? value.getAssessmentName() : null);
		this.form.ctnDetails().decScore().setValue(value.getScoreIsNotNull() ? value.getScore() : null);
		this.form.ctnDetails().dteDate().setValue(value.getAssessmentDateIsNotNull() ? value.getAssessmentDate() : null);
	}
	protected ims.clinical.vo.OtherAssessmentSummaryVo populateDataFromScreen(ims.clinical.vo.OtherAssessmentSummaryVo value)
	{
		if(value == null)
			value = new ims.clinical.vo.OtherAssessmentSummaryVo();

		value.setAssessmentName(this.form.ctnDetails().cmbName().getValue());
		value.setScore(this.form.ctnDetails().decScore().getValue());
		value.setAssessmentDate(this.form.ctnDetails().dteDate().getValue());

		return value;
	}
	protected ims.clinical.vo.OtherAssessmentSummaryVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.clinical.vo.OtherAssessmentSummaryVo());
	}
	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
	}
	public boolean allowNew()
	{
		return form.getMode() == ims.framework.enumerations.FormMode.VIEW && !form.isReadOnly();
	}
	public boolean allowUpdate()
	{
		return form.getMode() == ims.framework.enumerations.FormMode.VIEW && !form.isReadOnly();
	}
	public String[] validateUIRules()
	{
		return null;
	}
	public void clear()
	{
	}
	public void search()
	{
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.clinical.domain.OtherAssessment domain;
}
