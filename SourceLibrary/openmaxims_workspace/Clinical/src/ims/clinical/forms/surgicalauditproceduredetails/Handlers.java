//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.surgicalauditproceduredetails;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbAnaestheticUsedLookup();
	abstract protected void defaultcmbAnaestheticUsedLookupValue();
	abstract protected void bindcmbReasonForCancelationLookup();
	abstract protected void defaultcmbReasonForCancelationLookupValue();
	abstract protected void bindcmbReasonLookup();
	abstract protected void defaultcmbReasonLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbAnaestheticUsedValueSet(Object value);
	abstract protected void oncmbReasonForCancelationValueSet(Object value);
	abstract protected void onGrdCirculatingNurseSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdScrubNurseSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdAnaestheticNurseSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdRadiographerSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdConsultantAssistedBySelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdOperationPerformedBySelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdAnaesthetistAssistedBySelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdAnaesthetistSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbReasonValueSet(Object value);
	abstract protected void onRadioButtonGroupSurgicalCheckListValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAnaesthetistAssistedByNotRequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAnaesthetistNotRequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCancelOperationValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIComponentEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.cmbAnaestheticUsed().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbAnaestheticUsedValueSet(value);
			}
		});
		this.form.cmbReasonForCancelation().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbReasonForCancelationValueSet(value);
			}
		});
		this.form.grdCirculatingNurse().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdCirculatingNurseSelectionChanged();
			}
		});
		this.form.grdScrubNurse().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdScrubNurseSelectionChanged();
			}
		});
		this.form.grdAnaestheticNurse().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdAnaestheticNurseSelectionChanged();
			}
		});
		this.form.grdRadiographer().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdRadiographerSelectionChanged();
			}
		});
		this.form.grdConsultantAssistedBy().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdConsultantAssistedBySelectionChanged();
			}
		});
		this.form.grdOperationPerformedBy().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdOperationPerformedBySelectionChanged();
			}
		});
		this.form.grdAnaesthetistAssistedBy().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdAnaesthetistAssistedBySelectionChanged();
			}
		});
		this.form.grdAnaesthetist().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdAnaesthetistSelectionChanged();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.cmbReason().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbReasonValueSet(value);
			}
		});
		this.form.GroupSurgicalCheckList().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupSurgicalCheckListValueChanged();
			}
		});
		this.form.chkAnaesthetistAssistedByNotRequired().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAnaesthetistAssistedByNotRequiredValueChanged();
			}
		});
		this.form.chkAnaesthetistNotRequired().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAnaesthetistNotRequiredValueChanged();
			}
		});
		this.form.chkCancelOperation().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCancelOperationValueChanged();
			}
		});
		this.form.getContextMenus().Clinical.getCirculatingNurseEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.CirculatingNurse.EDIT, sender);
			}
		});
		this.form.getContextMenus().Clinical.getCirculatingNurseREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.CirculatingNurse.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getScrubNurseEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.ScrubNurse.EDIT, sender);
			}
		});
		this.form.getContextMenus().Clinical.getScrubNurseREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.ScrubNurse.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getAnaestheticNurseEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.AnaestheticNurse.EDIT, sender);
			}
		});
		this.form.getContextMenus().Clinical.getAnaestheticNurseREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.AnaestheticNurse.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getRadiographerEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.Radiographer.EDIT, sender);
			}
		});
		this.form.getContextMenus().Clinical.getRadiographerREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.Radiographer.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getConsultantAssistedbyEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.ConsultantAssistedby.EDIT, sender);
			}
		});
		this.form.getContextMenus().Clinical.getConsultantAssistedbyREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.ConsultantAssistedby.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getOperationPerformedbyEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.OperationPerformedby.EDIT, sender);
			}
		});
		this.form.getContextMenus().Clinical.getOperationPerformedbyREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.OperationPerformedby.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getAnaesthetistAssistedbyEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.AnaesthetistAssistedby.EDIT, sender);
			}
		});
		this.form.getContextMenus().Clinical.getAnaesthetistAssistedbyREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.AnaesthetistAssistedby.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getAnaesthetistEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.Anaesthetist.EDIT, sender);
			}
		});
		this.form.getContextMenus().Clinical.getAnaesthetistREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.Anaesthetist.REMOVE, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbAnaestheticUsedLookup();
		bindcmbReasonForCancelationLookup();
		bindcmbReasonLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbAnaestheticUsedLookup();
		bindcmbReasonForCancelationLookup();
		bindcmbReasonLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbAnaestheticUsedLookupValue();
		defaultcmbReasonForCancelationLookupValue();
		defaultcmbReasonLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIComponentEngine engine;
	protected GenForm form;
}
