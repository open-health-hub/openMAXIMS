//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.surgicalauditproceduredetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbAnaestheticUsedComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.AnaestheticType value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.AnaestheticType getValue()
		{
			return (ims.clinical.vo.lookups.AnaestheticType)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.AnaestheticType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbReasonForCancelationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.OperationCancellationReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.OperationCancellationReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.OperationCancellationReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.OperationCancellationReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.OperationCancellationReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.OperationCancellationReason getValue()
		{
			return (ims.clinical.vo.lookups.OperationCancellationReason)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.OperationCancellationReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.SurgicalCheckListNotPerformedReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.SurgicalCheckListNotPerformedReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.SurgicalCheckListNotPerformedReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.SurgicalCheckListNotPerformedReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.SurgicalCheckListNotPerformedReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.SurgicalCheckListNotPerformedReason getValue()
		{
			return (ims.clinical.vo.lookups.SurgicalCheckListNotPerformedReason)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.SurgicalCheckListNotPerformedReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdCirculatingNurseRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdCirculatingNurseRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnCirculatingNurseReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnCirculatingNurseReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnCirculatingNurseOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnCirculatingNurse()
		{
			return (String)super.row.get(0);
		}
		public void setColumnCirculatingNurse(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnCirculatingNurseTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.NurseVo getValue()
		{
			return (ims.core.vo.NurseVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.NurseVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdCirculatingNurseRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdCirculatingNurseRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdCirculatingNurseRow get(int index)
		{
			return new grdCirculatingNurseRow(super.collection.get(index));
		}
		public grdCirculatingNurseRow newRow()
		{
			return new grdCirculatingNurseRow(super.collection.newRow());
		}
		public grdCirculatingNurseRow newRow(boolean autoSelect)
		{
			return new grdCirculatingNurseRow(super.collection.newRow(autoSelect));
		}
		public grdCirculatingNurseRow newRowAt(int index)
		{
			return new grdCirculatingNurseRow(super.collection.newRowAt(index));
		}
		public grdCirculatingNurseRow newRowAt(int index, boolean autoSelect)
		{
			return new grdCirculatingNurseRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdCirculatingNurseGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.NurseVoCollection getValues()
		{
			ims.core.vo.NurseVoCollection listOfValues = new ims.core.vo.NurseVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.NurseVo getValue()
		{
			return (ims.core.vo.NurseVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.NurseVo value)
		{
			super.grid.setValue(value);
		}
		public grdCirculatingNurseRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdCirculatingNurseRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdCirculatingNurseRowCollection getRows()
		{
			return new grdCirculatingNurseRowCollection(super.grid.getRows());
		}
		public grdCirculatingNurseRow getRowByValue(ims.core.vo.NurseVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdCirculatingNurseRow(row);
		}
		public void setColumnCirculatingNurseHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnCirculatingNurseHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdScrubNurseRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdScrubNurseRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnScrubNurseReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnScrubNurseReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnScrubNurseOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnScrubNurse()
		{
			return (String)super.row.get(0);
		}
		public void setColumnScrubNurse(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnScrubNurseTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.NurseVo getValue()
		{
			return (ims.core.vo.NurseVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.NurseVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdScrubNurseRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdScrubNurseRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdScrubNurseRow get(int index)
		{
			return new grdScrubNurseRow(super.collection.get(index));
		}
		public grdScrubNurseRow newRow()
		{
			return new grdScrubNurseRow(super.collection.newRow());
		}
		public grdScrubNurseRow newRow(boolean autoSelect)
		{
			return new grdScrubNurseRow(super.collection.newRow(autoSelect));
		}
		public grdScrubNurseRow newRowAt(int index)
		{
			return new grdScrubNurseRow(super.collection.newRowAt(index));
		}
		public grdScrubNurseRow newRowAt(int index, boolean autoSelect)
		{
			return new grdScrubNurseRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdScrubNurseGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.NurseVoCollection getValues()
		{
			ims.core.vo.NurseVoCollection listOfValues = new ims.core.vo.NurseVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.NurseVo getValue()
		{
			return (ims.core.vo.NurseVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.NurseVo value)
		{
			super.grid.setValue(value);
		}
		public grdScrubNurseRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdScrubNurseRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdScrubNurseRowCollection getRows()
		{
			return new grdScrubNurseRowCollection(super.grid.getRows());
		}
		public grdScrubNurseRow getRowByValue(ims.core.vo.NurseVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdScrubNurseRow(row);
		}
		public void setColumnScrubNurseHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnScrubNurseHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdAnaestheticNurseRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAnaestheticNurseRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnAnaestheticNurseReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnAnaestheticNurseReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnAnaestheticNurseOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnAnaestheticNurse()
		{
			return (String)super.row.get(0);
		}
		public void setColumnAnaestheticNurse(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnAnaestheticNurseTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.NurseVo getValue()
		{
			return (ims.core.vo.NurseVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.NurseVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAnaestheticNurseRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAnaestheticNurseRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAnaestheticNurseRow get(int index)
		{
			return new grdAnaestheticNurseRow(super.collection.get(index));
		}
		public grdAnaestheticNurseRow newRow()
		{
			return new grdAnaestheticNurseRow(super.collection.newRow());
		}
		public grdAnaestheticNurseRow newRow(boolean autoSelect)
		{
			return new grdAnaestheticNurseRow(super.collection.newRow(autoSelect));
		}
		public grdAnaestheticNurseRow newRowAt(int index)
		{
			return new grdAnaestheticNurseRow(super.collection.newRowAt(index));
		}
		public grdAnaestheticNurseRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAnaestheticNurseRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAnaestheticNurseGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.NurseVoCollection getValues()
		{
			ims.core.vo.NurseVoCollection listOfValues = new ims.core.vo.NurseVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.NurseVo getValue()
		{
			return (ims.core.vo.NurseVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.NurseVo value)
		{
			super.grid.setValue(value);
		}
		public grdAnaestheticNurseRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAnaestheticNurseRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAnaestheticNurseRowCollection getRows()
		{
			return new grdAnaestheticNurseRowCollection(super.grid.getRows());
		}
		public grdAnaestheticNurseRow getRowByValue(ims.core.vo.NurseVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAnaestheticNurseRow(row);
		}
		public void setColumnAnaestheticNurseHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnAnaestheticNurseHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdRadiographerRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdRadiographerRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnRadiographerReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnRadiographerReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnRadiographerOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnRadiographer()
		{
			return (String)super.row.get(0);
		}
		public void setColumnRadiographer(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnRadiographerTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdRadiographerRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdRadiographerRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdRadiographerRow get(int index)
		{
			return new grdRadiographerRow(super.collection.get(index));
		}
		public grdRadiographerRow newRow()
		{
			return new grdRadiographerRow(super.collection.newRow());
		}
		public grdRadiographerRow newRow(boolean autoSelect)
		{
			return new grdRadiographerRow(super.collection.newRow(autoSelect));
		}
		public grdRadiographerRow newRowAt(int index)
		{
			return new grdRadiographerRow(super.collection.newRowAt(index));
		}
		public grdRadiographerRow newRowAt(int index, boolean autoSelect)
		{
			return new grdRadiographerRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdRadiographerGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.HcpLiteVoCollection getValues()
		{
			ims.core.vo.HcpLiteVoCollection listOfValues = new ims.core.vo.HcpLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdRadiographerRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdRadiographerRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdRadiographerRowCollection getRows()
		{
			return new grdRadiographerRowCollection(super.grid.getRows());
		}
		public grdRadiographerRow getRowByValue(ims.core.vo.HcpLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdRadiographerRow(row);
		}
		public void setColumnRadiographerHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnRadiographerHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdConsultantAssistedByRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdConsultantAssistedByRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnConsultantAssistedByReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnConsultantAssistedByReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnConsultantAssistedByOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnConsultantAssistedBy()
		{
			return (String)super.row.get(0);
		}
		public void setColumnConsultantAssistedBy(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnConsultantAssistedByTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdConsultantAssistedByRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdConsultantAssistedByRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdConsultantAssistedByRow get(int index)
		{
			return new grdConsultantAssistedByRow(super.collection.get(index));
		}
		public grdConsultantAssistedByRow newRow()
		{
			return new grdConsultantAssistedByRow(super.collection.newRow());
		}
		public grdConsultantAssistedByRow newRow(boolean autoSelect)
		{
			return new grdConsultantAssistedByRow(super.collection.newRow(autoSelect));
		}
		public grdConsultantAssistedByRow newRowAt(int index)
		{
			return new grdConsultantAssistedByRow(super.collection.newRowAt(index));
		}
		public grdConsultantAssistedByRow newRowAt(int index, boolean autoSelect)
		{
			return new grdConsultantAssistedByRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdConsultantAssistedByGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.MedicLiteVoCollection getValues()
		{
			ims.core.vo.MedicLiteVoCollection listOfValues = new ims.core.vo.MedicLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdConsultantAssistedByRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdConsultantAssistedByRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdConsultantAssistedByRowCollection getRows()
		{
			return new grdConsultantAssistedByRowCollection(super.grid.getRows());
		}
		public grdConsultantAssistedByRow getRowByValue(ims.core.vo.MedicLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdConsultantAssistedByRow(row);
		}
		public void setColumnConsultantAssistedByHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnConsultantAssistedByHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdOperationPerformedByRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdOperationPerformedByRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnOperationPerformedByReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnOperationPerformedByReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnOperationPerformedByOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnOperationPerformedBy()
		{
			return (String)super.row.get(0);
		}
		public void setColumnOperationPerformedBy(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnOperationPerformedByTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdOperationPerformedByRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdOperationPerformedByRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdOperationPerformedByRow get(int index)
		{
			return new grdOperationPerformedByRow(super.collection.get(index));
		}
		public grdOperationPerformedByRow newRow()
		{
			return new grdOperationPerformedByRow(super.collection.newRow());
		}
		public grdOperationPerformedByRow newRow(boolean autoSelect)
		{
			return new grdOperationPerformedByRow(super.collection.newRow(autoSelect));
		}
		public grdOperationPerformedByRow newRowAt(int index)
		{
			return new grdOperationPerformedByRow(super.collection.newRowAt(index));
		}
		public grdOperationPerformedByRow newRowAt(int index, boolean autoSelect)
		{
			return new grdOperationPerformedByRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdOperationPerformedByGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.MedicLiteVoCollection getValues()
		{
			ims.core.vo.MedicLiteVoCollection listOfValues = new ims.core.vo.MedicLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdOperationPerformedByRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdOperationPerformedByRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdOperationPerformedByRowCollection getRows()
		{
			return new grdOperationPerformedByRowCollection(super.grid.getRows());
		}
		public grdOperationPerformedByRow getRowByValue(ims.core.vo.MedicLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdOperationPerformedByRow(row);
		}
		public void setColumnOperationPerformedByHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnOperationPerformedByHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdAnaesthetistAssistedByRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAnaesthetistAssistedByRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnAnaesthetistAssistedbyReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnAnaesthetistAssistedbyReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnAnaesthetistAssistedbyOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnAnaesthetistAssistedby()
		{
			return (String)super.row.get(0);
		}
		public void setColumnAnaesthetistAssistedby(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnAnaesthetistAssistedbyTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAnaesthetistAssistedByRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAnaesthetistAssistedByRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAnaesthetistAssistedByRow get(int index)
		{
			return new grdAnaesthetistAssistedByRow(super.collection.get(index));
		}
		public grdAnaesthetistAssistedByRow newRow()
		{
			return new grdAnaesthetistAssistedByRow(super.collection.newRow());
		}
		public grdAnaesthetistAssistedByRow newRow(boolean autoSelect)
		{
			return new grdAnaesthetistAssistedByRow(super.collection.newRow(autoSelect));
		}
		public grdAnaesthetistAssistedByRow newRowAt(int index)
		{
			return new grdAnaesthetistAssistedByRow(super.collection.newRowAt(index));
		}
		public grdAnaesthetistAssistedByRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAnaesthetistAssistedByRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAnaesthetistAssistedByGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.MedicLiteVoCollection getValues()
		{
			ims.core.vo.MedicLiteVoCollection listOfValues = new ims.core.vo.MedicLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdAnaesthetistAssistedByRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAnaesthetistAssistedByRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAnaesthetistAssistedByRowCollection getRows()
		{
			return new grdAnaesthetistAssistedByRowCollection(super.grid.getRows());
		}
		public grdAnaesthetistAssistedByRow getRowByValue(ims.core.vo.MedicLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAnaesthetistAssistedByRow(row);
		}
		public void setColumnAnaesthetistAssistedbyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnAnaesthetistAssistedbyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdAnaesthetistRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAnaesthetistRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnAnaesthetistsReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnAnaesthetistsReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnAnaesthetistsOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnAnaesthetists()
		{
			return (String)super.row.get(0);
		}
		public void setColumnAnaesthetists(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnAnaesthetistsTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAnaesthetistRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAnaesthetistRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAnaesthetistRow get(int index)
		{
			return new grdAnaesthetistRow(super.collection.get(index));
		}
		public grdAnaesthetistRow newRow()
		{
			return new grdAnaesthetistRow(super.collection.newRow());
		}
		public grdAnaesthetistRow newRow(boolean autoSelect)
		{
			return new grdAnaesthetistRow(super.collection.newRow(autoSelect));
		}
		public grdAnaesthetistRow newRowAt(int index)
		{
			return new grdAnaesthetistRow(super.collection.newRowAt(index));
		}
		public grdAnaesthetistRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAnaesthetistRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAnaesthetistGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.MedicLiteVoCollection getValues()
		{
			ims.core.vo.MedicLiteVoCollection listOfValues = new ims.core.vo.MedicLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdAnaesthetistRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAnaesthetistRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAnaesthetistRowCollection getRows()
		{
			return new grdAnaesthetistRowCollection(super.grid.getRows());
		}
		public grdAnaesthetistRow getRowByValue(ims.core.vo.MedicLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAnaesthetistRow(row);
		}
		public void setColumnAnaesthetistsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnAnaesthetistsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}

	public static class GroupSurgicalCheckListRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 632, 464, 40, 11, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "No", startTabIndex.intValue() + 1034);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 576, 464, 40, 11, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Yes", startTabIndex.intValue() + 1032);
		}
		public void setText(GroupSurgicalCheckListEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupSurgicalCheckListEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupSurgicalCheckListEnumeration.None;
				case 0: return GroupSurgicalCheckListEnumeration.rdoSUrgicalCheckNo;
				case 1: return GroupSurgicalCheckListEnumeration.rdoSurgicalCheckYes;
			}
			return null;
		}
		public void setValue(GroupSurgicalCheckListEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupSurgicalCheckListEnumeration.None.id);
		}
		public boolean isEnabled(GroupSurgicalCheckListEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupSurgicalCheckListEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupSurgicalCheckListEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupSurgicalCheckListEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupSurgicalCheckListEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupSurgicalCheckListEnumeration None = new GroupSurgicalCheckListEnumeration(-1);
		public static GroupSurgicalCheckListEnumeration rdoSUrgicalCheckNo = new GroupSurgicalCheckListEnumeration(0);
		public static GroupSurgicalCheckListEnumeration rdoSurgicalCheckYes = new GroupSurgicalCheckListEnumeration(1);
		private GroupSurgicalCheckListEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupSurgicalCheckListEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(824, 545);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuCirculatingNurse = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuCirculatingNurseEDITItem = factory.createMenuItem(startControlID.intValue() + 1, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4820001)))
			contextMenus.Clinical.contextMenuCirculatingNurse.add(contextMenus.Clinical.contextMenuCirculatingNurseEDITItem);
		contextMenus.Clinical.contextMenuCirculatingNurseREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4820002)))
			contextMenus.Clinical.contextMenuCirculatingNurse.add(contextMenus.Clinical.contextMenuCirculatingNurseREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuCirculatingNurse);
		contextMenus.Clinical.contextMenuScrubNurse = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Clinical.contextMenuScrubNurseEDITItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4810001)))
			contextMenus.Clinical.contextMenuScrubNurse.add(contextMenus.Clinical.contextMenuScrubNurseEDITItem);
		contextMenus.Clinical.contextMenuScrubNurseREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4810002)))
			contextMenus.Clinical.contextMenuScrubNurse.add(contextMenus.Clinical.contextMenuScrubNurseREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuScrubNurse);
		contextMenus.Clinical.contextMenuAnaestheticNurse = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Clinical.contextMenuAnaestheticNurseEDITItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4800001)))
			contextMenus.Clinical.contextMenuAnaestheticNurse.add(contextMenus.Clinical.contextMenuAnaestheticNurseEDITItem);
		contextMenus.Clinical.contextMenuAnaestheticNurseREMOVEItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4800002)))
			contextMenus.Clinical.contextMenuAnaestheticNurse.add(contextMenus.Clinical.contextMenuAnaestheticNurseREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuAnaestheticNurse);
		contextMenus.Clinical.contextMenuRadiographer = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.Clinical.contextMenuRadiographerEDITItem = factory.createMenuItem(startControlID.intValue() + 7, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4790001)))
			contextMenus.Clinical.contextMenuRadiographer.add(contextMenus.Clinical.contextMenuRadiographerEDITItem);
		contextMenus.Clinical.contextMenuRadiographerREMOVEItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4790002)))
			contextMenus.Clinical.contextMenuRadiographer.add(contextMenus.Clinical.contextMenuRadiographerREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuRadiographer);
		contextMenus.Clinical.contextMenuConsultantAssistedby = factory.createMenu(startControlID.intValue() + 5);
		contextMenus.Clinical.contextMenuConsultantAssistedbyEDITItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4780001)))
			contextMenus.Clinical.contextMenuConsultantAssistedby.add(contextMenus.Clinical.contextMenuConsultantAssistedbyEDITItem);
		contextMenus.Clinical.contextMenuConsultantAssistedbyREMOVEItem = factory.createMenuItem(startControlID.intValue() + 10, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4780002)))
			contextMenus.Clinical.contextMenuConsultantAssistedby.add(contextMenus.Clinical.contextMenuConsultantAssistedbyREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuConsultantAssistedby);
		contextMenus.Clinical.contextMenuOperationPerformedby = factory.createMenu(startControlID.intValue() + 6);
		contextMenus.Clinical.contextMenuOperationPerformedbyEDITItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4770001)))
			contextMenus.Clinical.contextMenuOperationPerformedby.add(contextMenus.Clinical.contextMenuOperationPerformedbyEDITItem);
		contextMenus.Clinical.contextMenuOperationPerformedbyREMOVEItem = factory.createMenuItem(startControlID.intValue() + 12, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4770002)))
			contextMenus.Clinical.contextMenuOperationPerformedby.add(contextMenus.Clinical.contextMenuOperationPerformedbyREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuOperationPerformedby);
		contextMenus.Clinical.contextMenuAnaesthetistAssistedby = factory.createMenu(startControlID.intValue() + 7);
		contextMenus.Clinical.contextMenuAnaesthetistAssistedbyEDITItem = factory.createMenuItem(startControlID.intValue() + 13, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4760001)))
			contextMenus.Clinical.contextMenuAnaesthetistAssistedby.add(contextMenus.Clinical.contextMenuAnaesthetistAssistedbyEDITItem);
		contextMenus.Clinical.contextMenuAnaesthetistAssistedbyREMOVEItem = factory.createMenuItem(startControlID.intValue() + 14, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4760002)))
			contextMenus.Clinical.contextMenuAnaesthetistAssistedby.add(contextMenus.Clinical.contextMenuAnaesthetistAssistedbyREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuAnaesthetistAssistedby);
		contextMenus.Clinical.contextMenuAnaesthetist = factory.createMenu(startControlID.intValue() + 8);
		contextMenus.Clinical.contextMenuAnaesthetistEDITItem = factory.createMenuItem(startControlID.intValue() + 15, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4750001)))
			contextMenus.Clinical.contextMenuAnaesthetist.add(contextMenus.Clinical.contextMenuAnaesthetistEDITItem);
		contextMenus.Clinical.contextMenuAnaesthetistREMOVEItem = factory.createMenuItem(startControlID.intValue() + 16, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4750002)))
			contextMenus.Clinical.contextMenuAnaesthetist.add(contextMenus.Clinical.contextMenuAnaesthetistREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuAnaesthetist);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 264, 31, 184, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_ccOperationCancelledForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_ccOperationCancelledControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(264), new Integer(31), new Integer(184), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3), m_ccOperationCancelledForm, instance1 } );
		ims.framework.Control m_ccOperationCancelledControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3), m_ccOperationCancelledForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccOperationCancelledControl);
		Menu[] menus1 = m_ccOperationCancelledForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 124, 142, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other Anaesthetic Used:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 99, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Used:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 451, 472, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Performed:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 71, 146, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Enter Operating Theatre:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 165, 33, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancelled by:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 451, 8, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 165, 10, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 451, 437, 107, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Circulating Nurse:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 451, 421, 42, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Locum", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 451, 342, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Scrub Nurse:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 451, 326, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Locum", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 451, 238, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Anaesthetic Nurse:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 451, 222, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Locum", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 451, 490, 56, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Reasons:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 451, 360, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Circulating Nurse:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 451, 256, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Scrub Nurse:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 451, 152, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Anaesthetic Nurse:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 451, 69, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Radiographer:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 451, 456, 112, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Surgical Check List", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 460, 41, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Other:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 393, 138, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant Assisted By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 312, 145, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Operation Performed by:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 26, 256, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Not Required", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 232, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetist Assisted by:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 26, 176, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Not Required", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 152, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetist:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 22, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel Operation:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 738, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1040), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 660, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1039), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 8, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1038), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 165, 122, 267, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 568, 8, 245, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 568, 429, 245, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 1030), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(200), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 568, 334, 245, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 1028), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(200), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 568, 230, 245, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1026), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(200), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 431, 232, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 431, 152, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 672, 464, 0, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 165, 461, 267, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 165, 69, 267, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 165, 97, 267, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbAnaestheticUsedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAnaestheticUsedTemp);
		cmbAnaestheticUsedComboBox cmbAnaestheticUsed = (cmbAnaestheticUsedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaestheticUsedComboBox.class, m_cmbAnaestheticUsedTemp);
		super.addComboBox(cmbAnaestheticUsed);
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 264, 8, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbReasonForCancelationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbReasonForCancelationTemp);
		cmbReasonForCancelationComboBox cmbReasonForCancelation = (cmbReasonForCancelationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonForCancelationComboBox.class, m_cmbReasonForCancelationTemp);
		super.addComboBox(cmbReasonForCancelation);
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 568, 488, 245, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 1036), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbReasonTemp);
		cmbReasonComboBox cmbReason = (cmbReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonComboBox.class, m_cmbReasonTemp);
		super.addComboBox(cmbReason);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 8, 256, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 8, 176, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 112, 22, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Yes", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 568, 360, 245, 63, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdCirculatingNurseTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuCirculatingNurse, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdCirculatingNurseTemp);
		grdCirculatingNurseGrid grdCirculatingNurse = (grdCirculatingNurseGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCirculatingNurseGrid.class, m_grdCirculatingNurseTemp);
		grdCirculatingNurse.addStringColumn("Circulating Nurse", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdCirculatingNurse);
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 568, 256, 245, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdScrubNurseTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuScrubNurse, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdScrubNurseTemp);
		grdScrubNurseGrid grdScrubNurse = (grdScrubNurseGrid)GridFlyweightFactory.getInstance().createGridBridge(grdScrubNurseGrid.class, m_grdScrubNurseTemp);
		grdScrubNurse.addStringColumn("Scrub Nurse", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdScrubNurse);
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 568, 152, 245, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdAnaestheticNurseTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuAnaestheticNurse, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAnaestheticNurseTemp);
		grdAnaestheticNurseGrid grdAnaestheticNurse = (grdAnaestheticNurseGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAnaestheticNurseGrid.class, m_grdAnaestheticNurseTemp);
		grdAnaestheticNurse.addStringColumn("Anaesthetic Nurse", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAnaestheticNurse);
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 568, 69, 245, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdRadiographerTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuRadiographer, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdRadiographerTemp);
		grdRadiographerGrid grdRadiographer = (grdRadiographerGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRadiographerGrid.class, m_grdRadiographerTemp);
		grdRadiographer.addStringColumn("Radiographer", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdRadiographer);
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 165, 393, 267, 63, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdConsultantAssistedByTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuConsultantAssistedby, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdConsultantAssistedByTemp);
		grdConsultantAssistedByGrid grdConsultantAssistedBy = (grdConsultantAssistedByGrid)GridFlyweightFactory.getInstance().createGridBridge(grdConsultantAssistedByGrid.class, m_grdConsultantAssistedByTemp);
		grdConsultantAssistedBy.addStringColumn("Consultant Assisted by", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdConsultantAssistedBy);
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 165, 312, 267, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdOperationPerformedByTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuOperationPerformedby, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdOperationPerformedByTemp);
		grdOperationPerformedByGrid grdOperationPerformedBy = (grdOperationPerformedByGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOperationPerformedByGrid.class, m_grdOperationPerformedByTemp);
		grdOperationPerformedBy.addStringColumn("Operation Performed by", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdOperationPerformedBy);
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 165, 232, 267, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdAnaesthetistAssistedByTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuAnaesthetistAssistedby, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAnaesthetistAssistedByTemp);
		grdAnaesthetistAssistedByGrid grdAnaesthetistAssistedBy = (grdAnaesthetistAssistedByGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAnaesthetistAssistedByGrid.class, m_grdAnaesthetistAssistedByTemp);
		grdAnaesthetistAssistedBy.addStringColumn("Anaesthetist Assisted by", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAnaesthetistAssistedBy);
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 165, 152, 267, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdAnaesthetistTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuAnaesthetist, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAnaesthetistTemp);
		grdAnaesthetistGrid grdAnaesthetist = (grdAnaesthetistGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAnaesthetistGrid.class, m_grdAnaesthetistTemp);
		grdAnaesthetist.addStringColumn("Anaesthetists", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAnaesthetist);

		// RadioButton Controls
		RadioButton tmpGroupSurgicalCheckList = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE});
		super.addControl(tmpGroupSurgicalCheckList);
		GroupSurgicalCheckListRadioButton GroupSurgicalCheckList = (GroupSurgicalCheckListRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupSurgicalCheckListRadioButton.class, tmpGroupSurgicalCheckList);
		GroupSurgicalCheckList.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupSurgicalCheckList);

		// Horizontal Line Controls
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 8, 54, 800, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.core.forms.mosquery.IComponent ccOperationCancelled()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccOperationCancelledValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccOperationCancelledVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccOperationCancelledVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccOperationCancelledEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccOperationCancelledEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Label lblOperationCancelledby2()
	{
		return (Label)super.getControl(5);
	}
	public Label lblReasonForCancelationComment3()
	{
		return (Label)super.getControl(6);
	}
	public Label lblReasonForCancelation1()
	{
		return (Label)super.getControl(7);
	}
	public Label lblReasons()
	{
		return (Label)super.getControl(14);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(28);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(29);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(30);
	}
	public TextBox txtAnaestheticUsedComment()
	{
		return (TextBox)super.getControl(31);
	}
	public TextBox txtReasonForCancellationComment()
	{
		return (TextBox)super.getControl(32);
	}
	public TextBox txtLocumCirculatingNurse()
	{
		return (TextBox)super.getControl(33);
	}
	public TextBox txtLocumScrubNurse()
	{
		return (TextBox)super.getControl(34);
	}
	public TextBox txtLocumAnaestNurse()
	{
		return (TextBox)super.getControl(35);
	}
	public TextBox txtdummyAnaesthetistAssistedByRequired()
	{
		return (TextBox)super.getControl(36);
	}
	public TextBox txtdummyAnaesthetistRequired()
	{
		return (TextBox)super.getControl(37);
	}
	public TextBox txtdummySurgicalCheckList()
	{
		return (TextBox)super.getControl(38);
	}
	public TextBox txtOther()
	{
		return (TextBox)super.getControl(39);
	}
	public DateTimeControl dtimEnterOperatingTheatre()
	{
		return (DateTimeControl)super.getControl(40);
	}
	public cmbAnaestheticUsedComboBox cmbAnaestheticUsed()
	{
		return (cmbAnaestheticUsedComboBox)super.getComboBox(0);
	}
	public cmbReasonForCancelationComboBox cmbReasonForCancelation()
	{
		return (cmbReasonForCancelationComboBox)super.getComboBox(1);
	}
	public cmbReasonComboBox cmbReason()
	{
		return (cmbReasonComboBox)super.getComboBox(2);
	}
	public CheckBox chkAnaesthetistAssistedByNotRequired()
	{
		return (CheckBox)super.getControl(44);
	}
	public CheckBox chkAnaesthetistNotRequired()
	{
		return (CheckBox)super.getControl(45);
	}
	public CheckBox chkCancelOperation()
	{
		return (CheckBox)super.getControl(46);
	}
	public grdCirculatingNurseGrid grdCirculatingNurse()
	{
		return (grdCirculatingNurseGrid)super.getGrid(0);
	}
	public grdScrubNurseGrid grdScrubNurse()
	{
		return (grdScrubNurseGrid)super.getGrid(1);
	}
	public grdAnaestheticNurseGrid grdAnaestheticNurse()
	{
		return (grdAnaestheticNurseGrid)super.getGrid(2);
	}
	public grdRadiographerGrid grdRadiographer()
	{
		return (grdRadiographerGrid)super.getGrid(3);
	}
	public grdConsultantAssistedByGrid grdConsultantAssistedBy()
	{
		return (grdConsultantAssistedByGrid)super.getGrid(4);
	}
	public grdOperationPerformedByGrid grdOperationPerformedBy()
	{
		return (grdOperationPerformedByGrid)super.getGrid(5);
	}
	public grdAnaesthetistAssistedByGrid grdAnaesthetistAssistedBy()
	{
		return (grdAnaesthetistAssistedByGrid)super.getGrid(6);
	}
	public grdAnaesthetistGrid grdAnaesthetist()
	{
		return (grdAnaesthetistGrid)super.getGrid(7);
	}
	public GroupSurgicalCheckListRadioButton GroupSurgicalCheckList()
	{
		return (GroupSurgicalCheckListRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				SurgicalAuditProcedureStaffDialog = new LocalFormName(123251);
				SurgicalAuditProcedureDetails = new LocalFormName(123244);
			}
			public final FormName SurgicalAuditProcedureStaffDialog;
			public final FormName SurgicalAuditProcedureDetails;
		}

		public ClinicalForms Clinical;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentSurgicalAuditOperationDetails = new ims.framework.ContextVariable("CurrentSurgicalAuditOperationDetails", prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier + "");
			cxl_CareContextRef = new ims.framework.ContextVariable("CareContextRef", prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__CareContextRef_" + componentIdentifier + "");
			cxl_PatientRef = new ims.framework.ContextVariable("PatientRef", prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__PatientRef_" + componentIdentifier + "");
			cxl_SurgicalAuditOperationDetailsRef = new ims.framework.ContextVariable("SurgicalAuditOperationDetailsRef", prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__SurgicalAuditOperationDetailsRef_" + componentIdentifier + "");
			cxl_EditHcp = new ims.framework.ContextVariable("EditHcp", prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__EditHcp_" + componentIdentifier + "");
			cxl_CancelOperation = new ims.framework.ContextVariable("CancelOperation", prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__CancelOperation_" + componentIdentifier + "");
			cxl_selectedEvent = new ims.framework.ContextVariable("selectedEvent", prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__selectedEvent_" + componentIdentifier + "");
			cxl_isReadOnly = new ims.framework.ContextVariable("isReadOnly", prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__isReadOnly_" + componentIdentifier + "");
		}
		
		public boolean getCurrentSurgicalAuditOperationDetailsIsNotNull()
		{
			return !cxl_CurrentSurgicalAuditOperationDetails.getValueIsNull(context);
		}
		public ims.clinical.vo.SurgicalAuditOperationDetailVo getCurrentSurgicalAuditOperationDetails()
		{
			return (ims.clinical.vo.SurgicalAuditOperationDetailVo)cxl_CurrentSurgicalAuditOperationDetails.getValue(context);
		}
		public void setCurrentSurgicalAuditOperationDetails(ims.clinical.vo.SurgicalAuditOperationDetailVo value)
		{
			cxl_CurrentSurgicalAuditOperationDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentSurgicalAuditOperationDetails = null;
		public boolean getCareContextRefIsNotNull()
		{
			return !cxl_CareContextRef.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getCareContextRef()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_CareContextRef.getValue(context);
		}
		public void setCareContextRef(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CareContextRef' RefVo context variable.");
			if(value == null)
				cxl_CareContextRef.setValue(context, null);
			else
				cxl_CareContextRef.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CareContextRef = null;
		public boolean getPatientRefIsNotNull()
		{
			return !cxl_PatientRef.getValueIsNull(context);
		}
		public ims.core.patient.vo.PatientRefVo getPatientRef()
		{
			return (ims.core.patient.vo.PatientRefVo)cxl_PatientRef.getValue(context);
		}
		public void setPatientRef(ims.core.patient.vo.PatientRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'PatientRef' RefVo context variable.");
			if(value == null)
				cxl_PatientRef.setValue(context, null);
			else
				cxl_PatientRef.setValue(context, new ims.core.patient.vo.PatientRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_PatientRef = null;
		public boolean getSurgicalAuditOperationDetailsRefIsNotNull()
		{
			return !cxl_SurgicalAuditOperationDetailsRef.getValueIsNull(context);
		}
		public ims.clinical.vo.SurgicalAuditOperationDetailRefVo getSurgicalAuditOperationDetailsRef()
		{
			return (ims.clinical.vo.SurgicalAuditOperationDetailRefVo)cxl_SurgicalAuditOperationDetailsRef.getValue(context);
		}
		public void setSurgicalAuditOperationDetailsRef(ims.clinical.vo.SurgicalAuditOperationDetailRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'SurgicalAuditOperationDetailsRef' RefVo context variable.");
			if(value == null)
				cxl_SurgicalAuditOperationDetailsRef.setValue(context, null);
			else
				cxl_SurgicalAuditOperationDetailsRef.setValue(context, new ims.clinical.vo.SurgicalAuditOperationDetailRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_SurgicalAuditOperationDetailsRef = null;
		public boolean getEditHcpIsNotNull()
		{
			return !cxl_EditHcp.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.SurgicalAuditProcedureDetailsHcp getEditHcp()
		{
			return (ims.clinical.vo.enums.SurgicalAuditProcedureDetailsHcp)cxl_EditHcp.getValue(context);
		}
		public void setEditHcp(ims.clinical.vo.enums.SurgicalAuditProcedureDetailsHcp value)
		{
			cxl_EditHcp.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditHcp = null;
		public boolean getCancelOperationIsNotNull()
		{
			return !cxl_CancelOperation.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.SurgicalAuditProcedureDetailsCancelOperation getCancelOperation()
		{
			return (ims.clinical.vo.enums.SurgicalAuditProcedureDetailsCancelOperation)cxl_CancelOperation.getValue(context);
		}
		public void setCancelOperation(ims.clinical.vo.enums.SurgicalAuditProcedureDetailsCancelOperation value)
		{
			cxl_CancelOperation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CancelOperation = null;
		public boolean getselectedEventIsNotNull()
		{
			return !cxl_selectedEvent.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent getselectedEvent()
		{
			return (ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent)cxl_selectedEvent.getValue(context);
		}
		public void setselectedEvent(ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent value)
		{
			cxl_selectedEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedEvent = null;
		public boolean getisReadOnlyIsNotNull()
		{
			return !cxl_isReadOnly.getValueIsNull(context);
		}
		public Boolean getisReadOnly()
		{
			return (Boolean)cxl_isReadOnly.getValue(context);
		}
		public void setisReadOnly(Boolean value)
		{
			cxl_isReadOnly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isReadOnly = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class CirculatingNurse implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 1;
				public static final int REMOVE = 2;
			}
			public void disableAllCirculatingNurseMenuItems()
			{
				this.contextMenuCirculatingNurseEDITItem.setEnabled(false);
				this.contextMenuCirculatingNurseREMOVEItem.setEnabled(false);
			}
			public void hideAllCirculatingNurseMenuItems()
			{
				this.contextMenuCirculatingNurseEDITItem.setVisible(false);
				this.contextMenuCirculatingNurseREMOVEItem.setVisible(false);
			}
			private Menu contextMenuCirculatingNurse;
			public ReadOnlyMenuItem getCirculatingNurseEDITItem()
			{
				return this.contextMenuCirculatingNurseEDITItem;
			}
			private MenuItem contextMenuCirculatingNurseEDITItem;
			public ReadOnlyMenuItem getCirculatingNurseREMOVEItem()
			{
				return this.contextMenuCirculatingNurseREMOVEItem;
			}
			private MenuItem contextMenuCirculatingNurseREMOVEItem;
			public final class ScrubNurse implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 3;
				public static final int REMOVE = 4;
			}
			public void disableAllScrubNurseMenuItems()
			{
				this.contextMenuScrubNurseEDITItem.setEnabled(false);
				this.contextMenuScrubNurseREMOVEItem.setEnabled(false);
			}
			public void hideAllScrubNurseMenuItems()
			{
				this.contextMenuScrubNurseEDITItem.setVisible(false);
				this.contextMenuScrubNurseREMOVEItem.setVisible(false);
			}
			private Menu contextMenuScrubNurse;
			public ReadOnlyMenuItem getScrubNurseEDITItem()
			{
				return this.contextMenuScrubNurseEDITItem;
			}
			private MenuItem contextMenuScrubNurseEDITItem;
			public ReadOnlyMenuItem getScrubNurseREMOVEItem()
			{
				return this.contextMenuScrubNurseREMOVEItem;
			}
			private MenuItem contextMenuScrubNurseREMOVEItem;
			public final class AnaestheticNurse implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 5;
				public static final int REMOVE = 6;
			}
			public void disableAllAnaestheticNurseMenuItems()
			{
				this.contextMenuAnaestheticNurseEDITItem.setEnabled(false);
				this.contextMenuAnaestheticNurseREMOVEItem.setEnabled(false);
			}
			public void hideAllAnaestheticNurseMenuItems()
			{
				this.contextMenuAnaestheticNurseEDITItem.setVisible(false);
				this.contextMenuAnaestheticNurseREMOVEItem.setVisible(false);
			}
			private Menu contextMenuAnaestheticNurse;
			public ReadOnlyMenuItem getAnaestheticNurseEDITItem()
			{
				return this.contextMenuAnaestheticNurseEDITItem;
			}
			private MenuItem contextMenuAnaestheticNurseEDITItem;
			public ReadOnlyMenuItem getAnaestheticNurseREMOVEItem()
			{
				return this.contextMenuAnaestheticNurseREMOVEItem;
			}
			private MenuItem contextMenuAnaestheticNurseREMOVEItem;
			public final class Radiographer implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 7;
				public static final int REMOVE = 8;
			}
			public void disableAllRadiographerMenuItems()
			{
				this.contextMenuRadiographerEDITItem.setEnabled(false);
				this.contextMenuRadiographerREMOVEItem.setEnabled(false);
			}
			public void hideAllRadiographerMenuItems()
			{
				this.contextMenuRadiographerEDITItem.setVisible(false);
				this.contextMenuRadiographerREMOVEItem.setVisible(false);
			}
			private Menu contextMenuRadiographer;
			public ReadOnlyMenuItem getRadiographerEDITItem()
			{
				return this.contextMenuRadiographerEDITItem;
			}
			private MenuItem contextMenuRadiographerEDITItem;
			public ReadOnlyMenuItem getRadiographerREMOVEItem()
			{
				return this.contextMenuRadiographerREMOVEItem;
			}
			private MenuItem contextMenuRadiographerREMOVEItem;
			public final class ConsultantAssistedby implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 9;
				public static final int REMOVE = 10;
			}
			public void disableAllConsultantAssistedbyMenuItems()
			{
				this.contextMenuConsultantAssistedbyEDITItem.setEnabled(false);
				this.contextMenuConsultantAssistedbyREMOVEItem.setEnabled(false);
			}
			public void hideAllConsultantAssistedbyMenuItems()
			{
				this.contextMenuConsultantAssistedbyEDITItem.setVisible(false);
				this.contextMenuConsultantAssistedbyREMOVEItem.setVisible(false);
			}
			private Menu contextMenuConsultantAssistedby;
			public ReadOnlyMenuItem getConsultantAssistedbyEDITItem()
			{
				return this.contextMenuConsultantAssistedbyEDITItem;
			}
			private MenuItem contextMenuConsultantAssistedbyEDITItem;
			public ReadOnlyMenuItem getConsultantAssistedbyREMOVEItem()
			{
				return this.contextMenuConsultantAssistedbyREMOVEItem;
			}
			private MenuItem contextMenuConsultantAssistedbyREMOVEItem;
			public final class OperationPerformedby implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 11;
				public static final int REMOVE = 12;
			}
			public void disableAllOperationPerformedbyMenuItems()
			{
				this.contextMenuOperationPerformedbyEDITItem.setEnabled(false);
				this.contextMenuOperationPerformedbyREMOVEItem.setEnabled(false);
			}
			public void hideAllOperationPerformedbyMenuItems()
			{
				this.contextMenuOperationPerformedbyEDITItem.setVisible(false);
				this.contextMenuOperationPerformedbyREMOVEItem.setVisible(false);
			}
			private Menu contextMenuOperationPerformedby;
			public ReadOnlyMenuItem getOperationPerformedbyEDITItem()
			{
				return this.contextMenuOperationPerformedbyEDITItem;
			}
			private MenuItem contextMenuOperationPerformedbyEDITItem;
			public ReadOnlyMenuItem getOperationPerformedbyREMOVEItem()
			{
				return this.contextMenuOperationPerformedbyREMOVEItem;
			}
			private MenuItem contextMenuOperationPerformedbyREMOVEItem;
			public final class AnaesthetistAssistedby implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 13;
				public static final int REMOVE = 14;
			}
			public void disableAllAnaesthetistAssistedbyMenuItems()
			{
				this.contextMenuAnaesthetistAssistedbyEDITItem.setEnabled(false);
				this.contextMenuAnaesthetistAssistedbyREMOVEItem.setEnabled(false);
			}
			public void hideAllAnaesthetistAssistedbyMenuItems()
			{
				this.contextMenuAnaesthetistAssistedbyEDITItem.setVisible(false);
				this.contextMenuAnaesthetistAssistedbyREMOVEItem.setVisible(false);
			}
			private Menu contextMenuAnaesthetistAssistedby;
			public ReadOnlyMenuItem getAnaesthetistAssistedbyEDITItem()
			{
				return this.contextMenuAnaesthetistAssistedbyEDITItem;
			}
			private MenuItem contextMenuAnaesthetistAssistedbyEDITItem;
			public ReadOnlyMenuItem getAnaesthetistAssistedbyREMOVEItem()
			{
				return this.contextMenuAnaesthetistAssistedbyREMOVEItem;
			}
			private MenuItem contextMenuAnaesthetistAssistedbyREMOVEItem;
			public final class Anaesthetist implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 15;
				public static final int REMOVE = 16;
			}
			public void disableAllAnaesthetistMenuItems()
			{
				this.contextMenuAnaesthetistEDITItem.setEnabled(false);
				this.contextMenuAnaesthetistREMOVEItem.setEnabled(false);
			}
			public void hideAllAnaesthetistMenuItems()
			{
				this.contextMenuAnaesthetistEDITItem.setVisible(false);
				this.contextMenuAnaesthetistREMOVEItem.setVisible(false);
			}
			private Menu contextMenuAnaesthetist;
			public ReadOnlyMenuItem getAnaesthetistEDITItem()
			{
				return this.contextMenuAnaesthetistEDITItem;
			}
			private MenuItem contextMenuAnaesthetistEDITItem;
			public ReadOnlyMenuItem getAnaesthetistREMOVEItem()
			{
				return this.contextMenuAnaesthetistREMOVEItem;
			}
			private MenuItem contextMenuAnaesthetistREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[80];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-ID", "ID_SurgicalAuditOperationDetail");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-PATIENT", "Patient");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-CARECONTEXT", "CareContext");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-OPERATIONCANCELLED", "OperationCancelled");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-REASONFORCANCELLATION", "ReasonForCancellation");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-REASONFORCANCELLATIONCOMMENT", "ReasonForCancellationComment");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__CareContextRef_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__PatientRef_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditProcedureDetails.__internal_x_context__SurgicalAuditOperationDetailsRef_" + componentIdentifier, "BO-1072100108-ID", "ID_SurgicalAuditOperationDetail");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
