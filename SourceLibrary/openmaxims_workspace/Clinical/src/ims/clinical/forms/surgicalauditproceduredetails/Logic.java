//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4535.14223)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.surgicalauditproceduredetails;

import ims.clinical.forms.surgicalauditproceduredetails.GenForm.GroupSurgicalCheckListEnumeration;
import ims.clinical.forms.surgicalauditproceduredetails.GenForm.grdAnaestheticNurseRow;
import ims.clinical.forms.surgicalauditproceduredetails.GenForm.grdAnaesthetistAssistedByRow;
import ims.clinical.forms.surgicalauditproceduredetails.GenForm.grdAnaesthetistRow;
import ims.clinical.forms.surgicalauditproceduredetails.GenForm.grdCirculatingNurseRow;
import ims.clinical.forms.surgicalauditproceduredetails.GenForm.grdConsultantAssistedByRow;
import ims.clinical.forms.surgicalauditproceduredetails.GenForm.grdOperationPerformedByRow;
import ims.clinical.forms.surgicalauditproceduredetails.GenForm.grdRadiographerRow;
import ims.clinical.forms.surgicalauditproceduredetails.GenForm.grdScrubNurseRow;
import ims.clinical.vo.SurgicalAuditOperationDetailStatusVo;
import ims.clinical.vo.SurgicalAuditOperationDetailStatusVoCollection;
import ims.clinical.vo.SurgicalAuditOperationDetailVo;
import ims.clinical.vo.SurgicalAuditProcedureDetailsVo;
import ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent;
import ims.clinical.vo.enums.SurgicalAuditProcedureDetailsHcp;
import ims.clinical.vo.lookups.PatientProcedureOutcome;
import ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.NurseVo;
import ims.core.vo.NurseVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.MedicGrade;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//open();
		form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.CANCEL);
		form.fireCustomControlValueChanged();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(	save())
		{
			//open();
			form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.SAVE);
			form.fireCustomControlValueChanged();
		}
	}
	private boolean save()
	{
		String[] errors = validateUIRules();
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}
		SurgicalAuditOperationDetailVo record = form.getLocalContext().getCurrentSurgicalAuditOperationDetails();
		record = populateDataFromScreen(record);
		errors = record.validate();
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try 
		{
			//WDEV-15661
			if (record.getProcedureDetails()!=null && record.getProcedureDetails().getID_SurgicalAuditProcedureDetailsIsNotNull()&& Boolean.TRUE.equals(record.getOperationCancelled()))
			{
				SurgicalAuditProcedureDetailsVo tempProcedureDetails = record.getProcedureDetails();
				record.setProcedureDetails(null);
				domain.saveAndMarkAsRIE(record, tempProcedureDetails,  form.getForms().Clinical.SurgicalAuditProcedureDetails, form.getLocalContext().getPatientRef().getID_Patient(), form.getLocalContext().getCareContextRef().getID_CareContext(), "");	
			}
			else
				form.getLocalContext().setCurrentSurgicalAuditOperationDetails(domain.saveSurgicalAuditOperationDetail(record));
			/*
			if (record.getProcedureDetails().getID_SurgicalAuditProcedureDetails()==null)//new
					form.getLocalContext().setCurrentSurgicalAuditOperationDetails(domain.saveSurgicalAuditOperationDetail(record));
			else//update
					domain.saveProcedureDetails(record.getProcedureDetails());
			*/
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}
	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();

		
		
		if( form.chkCancelOperation().getValue() == false)
		{
			if( form.dtimEnterOperatingTheatre().getValue() == null) //wdev-15719
				uiErrors.add("Enter Operating Theatre is  mandatory.");
			
			if (form.dtimEnterOperatingTheatre().getValue() != null && form.dtimEnterOperatingTheatre().getValue().isGreaterThan(new DateTime())) //wdev-15719
			{
				uiErrors.add("Enter Operating Theatre cannot be set in the future!");
			}
			if (form.chkAnaesthetistNotRequired().getValue() == false)
			{
				if(	form.grdAnaesthetist().getRows().size() == 0)
					uiErrors.add("Anaesthetists are  mandatory.");
			}
			if( form.chkAnaesthetistAssistedByNotRequired().getValue() == false)
			{
				if( form.grdAnaesthetistAssistedBy().getRows().size() == 0)
					uiErrors.add("Anaesthetists Assisted by are mandatory.");
			}
			if( GroupSurgicalCheckListEnumeration.rdoSUrgicalCheckNo.equals(form.GroupSurgicalCheckList().getValue()))
			{
				if( form.cmbReason().getValue() == null)
				{
					uiErrors.add("Reason is mandatory.");
				}
			}
			
			if (!(form.GroupSurgicalCheckList().getValue().equals(GroupSurgicalCheckListEnumeration.rdoSurgicalCheckYes) || form.GroupSurgicalCheckList().getValue().equals(GroupSurgicalCheckListEnumeration.rdoSUrgicalCheckNo)))
			{
				uiErrors.add("Surgical Check List Performed is mandatory!");
			}
			
		}
		else
		{
			if( form.cmbReasonForCancelation().getValue() == null)
			{
				uiErrors.add("Reason for Cancellation is mandatory.");
			}
			
			if (form.ccOperationCancelled().getValue()==null)
			{
				uiErrors.add("Operation Cancelled by is mandatory.");
			}
		}
						
		String[] result = new String[uiErrors.size()];
		uiErrors.toArray(result);
		return result;
	}
	private SurgicalAuditOperationDetailVo populateDataFromScreen(SurgicalAuditOperationDetailVo record)
	{
		if( record == null )
			return null;
		
		record.setOperationCancelled(form.chkCancelOperation().getValue());
		record.setReasonForCancellation(form.cmbReasonForCancelation().getValue());
		record.setReasonForCancellationComment(form.txtReasonForCancellationComment().getValue());
		record.setOperationCancelledBy((HcpLiteVo)form.ccOperationCancelled().getValue());
		
		if( form.chkCancelOperation().getValue() == false)
		{
		
			SurgicalAuditProcedureDetailsVo procDetVo = record.getProcedureDetails();
			if( procDetVo == null)
				procDetVo = new SurgicalAuditProcedureDetailsVo();
			
			if( procDetVo.getPatient() == null)
				procDetVo.setPatient(form.getLocalContext().getPatientRef());
			
			if( procDetVo.getCareContext() == null)
				procDetVo.setCareContext(form.getLocalContext().getCareContextRef());
			
			if( procDetVo.getAuthoringInformation() == null)
			{
				AuthoringInformationVo tempAuthInfVo = new AuthoringInformationVo();
				if( domain.getHcpLiteUser() instanceof HcpLiteVo)
					tempAuthInfVo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
				
				tempAuthInfVo.setAuthoringDateTime(new DateTime());
				procDetVo.setAuthoringInformation(tempAuthInfVo);
							
			}
			procDetVo.setAnaesthetistNotRequired(form.chkAnaesthetistNotRequired().getValue());
			MedicLiteVoCollection anaesthetistColl = new MedicLiteVoCollection();
			for(int i = 0; i < form.grdAnaesthetist().getRows().size();i++)
			{
				anaesthetistColl.add(form.grdAnaesthetist().getRows().get(i).getValue());
			}
			if( anaesthetistColl != null && anaesthetistColl.size() > 0)
				procDetVo.setAnaesthetists(anaesthetistColl);
			else
				procDetVo.setAnaesthetists(null);
			
			procDetVo.setAnaesthetistAssistNotRequired(form.chkAnaesthetistAssistedByNotRequired().getValue());
			MedicLiteVoCollection anaesthetistAssistColl = new MedicLiteVoCollection();
			for(int i = 0; i < form.grdAnaesthetistAssistedBy().getRows().size();i++)
			{
				anaesthetistAssistColl.add(form.grdAnaesthetistAssistedBy().getRows().get(i).getValue());
			}
			if( anaesthetistAssistColl != null && anaesthetistAssistColl.size() > 0)
				procDetVo.setAnaesthetistAssistedBy(anaesthetistAssistColl);
			else
				procDetVo.setAnaesthetistAssistedBy(null);
			
			MedicLiteVoCollection operationperformedColl = new MedicLiteVoCollection();
			for(int i = 0; i < form.grdOperationPerformedBy().getRows().size();i++)
			{
				operationperformedColl.add(form.grdOperationPerformedBy().getRows().get(i).getValue());
			}
			if( operationperformedColl != null && operationperformedColl.size() > 0)
				procDetVo.setOpPerformedBy(operationperformedColl);
			else
				procDetVo.setOpPerformedBy(null);
			
			MedicLiteVoCollection consultatntAssistedColl = new MedicLiteVoCollection();
			for(int i = 0; i < form.grdConsultantAssistedBy().getRows().size();i++)
			{
				consultatntAssistedColl.add(form.grdConsultantAssistedBy().getRows().get(i).getValue());
			}
			if( consultatntAssistedColl != null && consultatntAssistedColl.size() > 0)
				procDetVo.setConsultantAssistedBy(consultatntAssistedColl);
			else
				procDetVo.setConsultantAssistedBy(null);
			
			HcpLiteVoCollection radiographerColl = new HcpLiteVoCollection(); //WDEV-15691
			for(int i = 0; i < form.grdRadiographer().getRows().size();i++)
			{
				radiographerColl.add(form.grdRadiographer().getRows().get(i).getValue());
			}
			if( radiographerColl != null && radiographerColl.size() > 0)
				procDetVo.setRadiographers(radiographerColl);
			else
				procDetVo.setRadiographers(null);
			
			NurseVoCollection AnaestheticNurseColl = new NurseVoCollection();
			for(int i = 0; i < form.grdAnaestheticNurse().getRows().size();i++)
			{
				AnaestheticNurseColl.add(form.grdAnaestheticNurse().getRows().get(i).getValue());
			}
			if( AnaestheticNurseColl != null && AnaestheticNurseColl.size() > 0)
				procDetVo.setAnaestheticNurse(AnaestheticNurseColl);
			else
				procDetVo.setAnaestheticNurse(null);
			
			procDetVo.setLocumAnaestNurse(form.txtLocumAnaestNurse().getValue());
			
			NurseVoCollection ScrubNurseColl = new NurseVoCollection();
			for(int i = 0; i < form.grdScrubNurse().getRows().size();i++)
			{
				ScrubNurseColl.add(form.grdScrubNurse().getRows().get(i).getValue());
			}
			if( ScrubNurseColl != null && ScrubNurseColl.size() > 0)
				procDetVo.setScrubNurse(ScrubNurseColl);
			else
				procDetVo.setScrubNurse(null);
			
			procDetVo.setLocumScrubNurse(form.txtLocumScrubNurse().getValue());
			
			NurseVoCollection	circulatingNurseColl = new NurseVoCollection();
			for(int i = 0; i < form.grdCirculatingNurse().getRows().size();i++)
			{
				circulatingNurseColl.add(form.grdCirculatingNurse().getRows().get(i).getValue());
			}
			if( circulatingNurseColl != null && circulatingNurseColl.size() > 0)
				procDetVo.setCirculatingNurse(circulatingNurseColl);
			else
				procDetVo.setCirculatingNurse(null);
			
			procDetVo.setLocumCirculatingNurse(form.txtLocumCirculatingNurse().getValue());
			procDetVo.setEnterOpTheatreTime(form.dtimEnterOperatingTheatre().getValue()); 		//wdev-15719
			procDetVo.setAnaestheticUsed(form.cmbAnaestheticUsed().getValue());			  		//wdev-15718
			procDetVo.setAnaestheticUsedComment(form.txtAnaestheticUsedComment().getValue());	//wdev-15718
			
			procDetVo.setOther(form.txtOther().getValue());
			if (form.GroupSurgicalCheckList().getValue() != null && form.GroupSurgicalCheckList().getValue().equals(GroupSurgicalCheckListEnumeration.rdoSurgicalCheckYes))
				procDetVo.setSurgicalCheckListPerformed(YesNo.YES);	
			else if (form.GroupSurgicalCheckList().getValue() != null && form.GroupSurgicalCheckList().getValue().equals(GroupSurgicalCheckListEnumeration.rdoSUrgicalCheckNo))
				procDetVo.setSurgicalCheckListPerformed(YesNo.NO);	  
			else
				procDetVo.setSurgicalCheckListPerformed(null);
			
			if( form.cmbReason().getVisible())
				procDetVo.setCheckListNotPerformedReason(form.cmbReason().getValue());
			else
				procDetVo.setCheckListNotPerformedReason(null);
			
			record.setProcedureDetails(procDetVo);
			
			
			if( record.getPreOpChecksIsNotNull() && record.getPreOpChecks().getPlannedProceduresIsNotNull())
			{
				
				for(int i = 0; i < record.getPreOpChecks().getPlannedProcedures().size();i++)
				{
					if( PatientProcedureStatus.CANCELLED.equals(record.getPreOpChecks().getPlannedProcedures().get(i).getProcedureStatus()) && PatientProcedureOutcome.CANCELLED.equals(record.getPreOpChecks().getPlannedProcedures().get(i).getProcedureOutcome()))
					{
						record.getPreOpChecks().getPlannedProcedures().get(i).setProcedureOutcome(null);
						record.getPreOpChecks().getPlannedProcedures().get(i).setProcedureStatus(PatientProcedureStatus.PLANNED);
						record.getPreOpChecks().getPlannedProcedures().get(i).setCancelledDate(null);
					}
				}
			}
			
			/*
			if Cancelled Checkbox is unchecked and Current Status is CANCELLED_OPERATIONS:save to change the current status to last on in history collection. 
			*/
			
			if (record.getCurrentStatus()!=null && SurgicalAuditOperationDetailStatus.CANCELLED_OPERATIONS.equals(record.getCurrentStatus().getOperationStatus()))
			{
				if (record.getStatusHistoryIsNotNull() && record.getStatusHistory().size()-2>0)
				{
					record.setCurrentStatus(record.getStatusHistory().get(record.getStatusHistory().size()-2));
					
					SurgicalAuditOperationDetailStatusVoCollection tempStatusHistory = record.getStatusHistory(); 	//wdev-17519
					tempStatusHistory.add(record.getCurrentStatus());												//wdev-15719
					record.setStatusHistory(tempStatusHistory);														//wdev-15719
				}
			}
			//wdev-15719
			if( record.getProcedureDetailsIsNotNull() && record.getProcedureDetails().getID_SurgicalAuditProcedureDetails() == null 
					&& record.getCurrentStatus() != null && !SurgicalAuditOperationDetailStatus.CANCELLED_OPERATIONS.equals(record.getCurrentStatus().getOperationStatus())
					&& SurgicalAuditOperationDetailStatus.LEFT_HOLDING_BAY.equals(record.getCurrentStatus().getOperationStatus()))
				{	
					Object mos = domain.getMosUser();

					MemberOfStaffLiteVo statusAuthoringUser = null;
					if (mos instanceof MemberOfStaffLiteVo)
						statusAuthoringUser = ((MemberOfStaffLiteVo) mos);

					SurgicalAuditOperationDetailStatusVo tempCurrentStatus = populateStatus(ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus.ENTERED_OPERATING_THEATRE, new DateTime(), statusAuthoringUser);
					record.setCurrentStatus(tempCurrentStatus);

					// Populate Status History
					
					SurgicalAuditOperationDetailStatusVoCollection tempStatusHistory = record.getStatusHistory();
					tempStatusHistory.add(tempCurrentStatus);
					record.setStatusHistory(tempStatusHistory);
			
				}
			//-------------
			
			
		}
		else
		{
			//record.setProcedureDetails(null); //WDEV-15661
			if( record.getPreOpChecksIsNotNull() && record.getPreOpChecks().getPlannedProceduresIsNotNull())
			{
				Date CancelledDate = new Date();
				for(int i = 0; i < record.getPreOpChecks().getPlannedProcedures().size();i++)
				{
					if( PatientProcedureStatus.PLANNED.equals(record.getPreOpChecks().getPlannedProcedures().get(i).getProcedureStatus()))
					{
						record.getPreOpChecks().getPlannedProcedures().get(i).setProcedureOutcome(PatientProcedureOutcome.CANCELLED);
						record.getPreOpChecks().getPlannedProcedures().get(i).setProcedureStatus(PatientProcedureStatus.CANCELLED);
						record.getPreOpChecks().getPlannedProcedures().get(i).setCancelledDate(CancelledDate);
					}
				}
			}
			
			
			//populate Current Status and Status History
			if (record.getCurrentStatus() != null && !SurgicalAuditOperationDetailStatus.CANCELLED_OPERATIONS.equals(record.getCurrentStatus().getOperationStatus()))
			{			
				Object mos = domain.getMosUser();

				MemberOfStaffLiteVo statusAuthoringUser = null;
				if (mos instanceof MemberOfStaffLiteVo)
					statusAuthoringUser = ((MemberOfStaffLiteVo) mos);

				SurgicalAuditOperationDetailStatusVo tempCurrentStatus = populateStatus(ims.clinical.vo.lookups.SurgicalAuditOperationDetailStatus.CANCELLED_OPERATIONS, new DateTime(), statusAuthoringUser);
				record.setCurrentStatus(tempCurrentStatus);

				// Populate Status History
				if (record.getStatusHistoryIsNotNull() && record.getStatusHistory().size()>0 && !SurgicalAuditOperationDetailStatus.CANCELLED_OPERATIONS.equals(record.getStatusHistory().get(record.getStatusHistory().size()-1).getOperationStatus()))
				{
					SurgicalAuditOperationDetailStatusVoCollection tempStatusHistory = record.getStatusHistory();
					tempStatusHistory.add(tempCurrentStatus);
					record.setStatusHistory(tempStatusHistory);
				}
				
			}	
			
		}
		
		return record;
	}
	
	private SurgicalAuditOperationDetailStatusVo populateStatus(SurgicalAuditOperationDetailStatus status, DateTime dateTime, MemberOfStaffLiteVo statusAuthoringUser)
	{
		SurgicalAuditOperationDetailStatusVo statusRecord = new SurgicalAuditOperationDetailStatusVo();

		statusRecord.setOperationStatus(status);
		statusRecord.setStatusDateTime(dateTime);
		statusRecord.setAuthoringUser(statusAuthoringUser);

		return statusRecord;
	}
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		HcpLiteVo tempHcp = null;
		if( domain.getHcpLiteUser() instanceof HcpLiteVo)
			tempHcp = (HcpLiteVo) domain.getHcpLiteUser();
		if( tempHcp == null)
		{
			engine.showMessage("The current user is not an HCP");
			return;
		}
		
		// Check SOE on EDIT
		if (form.getLocalContext().getCurrentSurgicalAuditOperationDetails()!=null && form.getLocalContext().getCurrentSurgicalAuditOperationDetails().getID_SurgicalAuditOperationDetailIsNotNull() && domain.isStale(form.getLocalContext().getCurrentSurgicalAuditOperationDetails()))
		{	
			form.getLocalContext().setCurrentSurgicalAuditOperationDetails(domain.getSurgicalAuditOperationDetail(form.getLocalContext().getCurrentSurgicalAuditOperationDetails()));
			clearAll();
			populateScreenFromData(form.getLocalContext().getCurrentSurgicalAuditOperationDetails());
		}
		
		form.getLocalContext().setselectedEvent(SurgicalAuditPreOpChecksEvent.EDIT);
		form.fireCustomControlValueChanged();
		
		form.setMode(FormMode.EDIT);	
	}
	
	protected void onChkAnaesthetistAssistedByNotRequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.txtdummyAnaesthetistAssistedByRequired().setEnabled(!form.chkAnaesthetistAssistedByNotRequired().getValue());
		form.grdAnaesthetistAssistedBy().getRows().clear();
		form.grdAnaesthetistAssistedBy().setEnabled(!form.chkAnaesthetistAssistedByNotRequired().getValue());
		updateContextMenu();
	}
	
	protected void onChkAnaesthetistNotRequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.txtdummyAnaesthetistRequired().setEnabled(!form.chkAnaesthetistNotRequired().getValue());
		form.grdAnaesthetist().getRows().clear();
		form.grdAnaesthetist().setEnabled(!form.chkAnaesthetistNotRequired().getValue());
		updateContextMenu();
	}
	
	protected void onChkCancelOperationValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		//enableDisableControls(!form.chkCancelOperation().getValue());
		clearProceduresDetailsControls();
		clearCancelOperationDetails(form.chkCancelOperation().getValue());
		hideDisplay();//WDEV-15653
		updateControlsState();
	}
	private void clearCancelOperationDetails(boolean value)
	{
		if(!(value==true))
		{
			form.cmbReasonForCancelation().setValue(null);
			form.txtReasonForCancellationComment().setValue(null);
			form.ccOperationCancelled().setValue(null);
		}
	}

	private void clearProceduresDetailsControls()
	{
		form.chkAnaesthetistNotRequired().setValue(null);
		form.grdAnaesthetist().getRows().clear();
		form.chkAnaesthetistAssistedByNotRequired().setValue(null);
		form.grdAnaesthetistAssistedBy().getRows().clear();
		form.grdOperationPerformedBy().getRows().clear();
		form.grdConsultantAssistedBy().getRows().clear();
		form.txtOther().setValue(null);
		form.GroupSurgicalCheckList().setValue(null);
		form.grdRadiographer().getRows().clear();
		form.grdAnaestheticNurse().getRows().clear();
		form.txtLocumAnaestNurse().setValue(null);
		form.grdScrubNurse().getRows().clear();
		form.txtLocumScrubNurse().setValue(null);
		form.grdCirculatingNurse().getRows().clear();
		form.txtLocumCirculatingNurse().setValue(null);
		form.cmbReason().setValue(null);
		form.dtimEnterOperatingTheatre().setValue(null); //wdev-15719
		form.cmbAnaestheticUsed().setValue(null);		//wdev-15718
		form.txtAnaestheticUsedComment().setValue(null);
		
	}
	
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		ArrayList<Object> tempColl = null;
		switch(menuItemID)
		{
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.Anaesthetist.EDIT:
				form.getGlobalContext().Clinical.setSelectedHcp(HcpDisType.ANAESTHETIST);
				form.getGlobalContext().Clinical.setSelectedHcpGrade(MedicGrade.CONS);//WDEV-15961
				form.getLocalContext().setEditHcp(SurgicalAuditProcedureDetailsHcp.ANAESTHETIST);
				tempColl = new ArrayList<Object>();
				for(	int i = 0; i < form.grdAnaesthetist().getRows().size();i++)
				{
					tempColl.add(form.grdAnaesthetist().getRows().get(i).getValue());
				}
				if( tempColl != null && tempColl.size() > 0)
					form.getGlobalContext().Clinical.setSelectedHCPs(tempColl);
				else
					form.getGlobalContext().Clinical.setSelectedHCPs(null);
				
				
				form.getGlobalContext().Clinical.setMedicsSurgicalAudit(getAnaesthetist());
				
				engine.open(form.getForms().Clinical.SurgicalAuditProcedureStaffDialog);		
			break;
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.Anaesthetist.REMOVE:
				if(	form.grdAnaesthetist().getValue() != null)
					form.grdAnaesthetist().removeSelectedRow();
				
				updateContextMenu();
			break;
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.AnaesthetistAssistedby.EDIT:
				form.getGlobalContext().Clinical.setSelectedHcp(HcpDisType.ANAESTHETIST);
				form.getGlobalContext().Clinical.setSelectedHcpGrade(null);//WDEV-15961
				form.getLocalContext().setEditHcp(SurgicalAuditProcedureDetailsHcp.ANESTHETISTASSISTEDBY);
				tempColl = new ArrayList<Object>();
				for(	int i = 0; i < form.grdAnaesthetistAssistedBy().getRows().size();i++)
				{
					tempColl.add(form.grdAnaesthetistAssistedBy().getRows().get(i).getValue());
				}
				if( tempColl != null && tempColl.size() > 0)
					form.getGlobalContext().Clinical.setSelectedHCPs(tempColl);
				else
					form.getGlobalContext().Clinical.setSelectedHCPs(null);
				
				form.getGlobalContext().Clinical.setMedicsSurgicalAudit(getAnaesthetist());
				
				engine.open(form.getForms().Clinical.SurgicalAuditProcedureStaffDialog);
						
			break;
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.AnaesthetistAssistedby.REMOVE:
				if(	form.grdAnaesthetistAssistedBy().getValue() != null)
					form.grdAnaesthetistAssistedBy().removeSelectedRow();
				
				updateContextMenu();
			break;
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.OperationPerformedby.EDIT:
				form.getGlobalContext().Clinical.setSelectedHcp(HcpDisType.MEDICAL);
				form.getLocalContext().setEditHcp(SurgicalAuditProcedureDetailsHcp.OPERATIONPERFORMEDBY);
				tempColl = new ArrayList<Object>();
				for(	int i = 0; i < form.grdOperationPerformedBy().getRows().size();i++)
				{
					tempColl.add(form.grdOperationPerformedBy().getRows().get(i).getValue());
				}
				if( tempColl != null && tempColl.size() > 0)
					form.getGlobalContext().Clinical.setSelectedHCPs(tempColl);
				else
					form.getGlobalContext().Clinical.setSelectedHCPs(null);
				
				form.getGlobalContext().Clinical.setMedicsSurgicalAudit(getAllMedics());
				
				engine.open(form.getForms().Clinical.SurgicalAuditProcedureStaffDialog);		
			break;
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.OperationPerformedby.REMOVE:
				if(	form.grdOperationPerformedBy().getValue() != null)
					form.grdOperationPerformedBy().removeSelectedRow();
				
				updateContextMenu();
			break;

			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.ConsultantAssistedby.EDIT:
				form.getGlobalContext().Clinical.setSelectedHcp(HcpDisType.MEDICAL);
				form.getLocalContext().setEditHcp(SurgicalAuditProcedureDetailsHcp.CONSULTATNTASSISTEDBY);
				tempColl = new ArrayList<Object>();
				for(	int i = 0; i < form.grdConsultantAssistedBy().getRows().size();i++)
				{
					tempColl.add(form.grdConsultantAssistedBy().getRows().get(i).getValue());
				}
				if( tempColl != null && tempColl.size() > 0)
					form.getGlobalContext().Clinical.setSelectedHCPs(tempColl);
				else
					form.getGlobalContext().Clinical.setSelectedHCPs(null);
				
				form.getGlobalContext().Clinical.setMedicsSurgicalAudit(getAllMedics());
				engine.open(form.getForms().Clinical.SurgicalAuditProcedureStaffDialog);		
			break;
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.ConsultantAssistedby.REMOVE:
				if(	form.grdConsultantAssistedBy().getValue() != null)
					form.grdConsultantAssistedBy().removeSelectedRow();
				
				updateContextMenu();
			break;
			
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.Radiographer.EDIT:
				form.getGlobalContext().Clinical.setSelectedHcp(HcpDisType.RADIOGRAPHER);
				form.getLocalContext().setEditHcp(SurgicalAuditProcedureDetailsHcp.RADIOGRAPHER);
				tempColl = new ArrayList<Object>();
				for(	int i = 0; i < form.grdRadiographer().getRows().size();i++)
				{
					tempColl.add(form.grdRadiographer().getRows().get(i).getValue());
				}
				if( tempColl != null && tempColl.size() > 0)
					form.getGlobalContext().Clinical.setSelectedHCPs(tempColl);
				else
					form.getGlobalContext().Clinical.setSelectedHCPs(null);
				
				//WDEV-15691
				form.getGlobalContext().Clinical.setRadiographerSurgAuditProcDetails(getRadiographer());
				
				engine.open(form.getForms().Clinical.SurgicalAuditProcedureStaffDialog);		
			break;
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.Radiographer.REMOVE:
				if(	form.grdRadiographer().getValue() != null)
					form.grdRadiographer().removeSelectedRow();
				
				updateContextMenu();
			break;
			
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.AnaestheticNurse.EDIT:
				form.getGlobalContext().Clinical.setSelectedHcp(HcpDisType.NURSING);
				form.getLocalContext().setEditHcp(SurgicalAuditProcedureDetailsHcp.ANAESTHETICNURSE);
				tempColl = new ArrayList<Object>();
				for(	int i = 0; i < form.grdAnaestheticNurse().getRows().size();i++)
				{
					tempColl.add(form.grdAnaestheticNurse().getRows().get(i).getValue());
				}
				if( tempColl != null && tempColl.size() > 0)
					form.getGlobalContext().Clinical.setSelectedHCPs(tempColl);
				else
					form.getGlobalContext().Clinical.setSelectedHCPs(null);
				
				form.getGlobalContext().Clinical.setNursessSurgicalAudit(getAllNurses());
				
				engine.open(form.getForms().Clinical.SurgicalAuditProcedureStaffDialog);		
			break;
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.AnaestheticNurse.REMOVE:
				if(	form.grdAnaestheticNurse().getValue() != null)
					form.grdAnaestheticNurse().removeSelectedRow();
				
				
				updateContextMenu();
			break;

			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.ScrubNurse.EDIT:
				form.getGlobalContext().Clinical.setSelectedHcp(HcpDisType.NURSING);
				form.getLocalContext().setEditHcp(SurgicalAuditProcedureDetailsHcp.SCRUBNURSE);
				tempColl = new ArrayList<Object>();
				for(	int i = 0; i < form.grdScrubNurse().getRows().size();i++)
				{
					tempColl.add(form.grdScrubNurse().getRows().get(i).getValue());
				}
				if( tempColl != null && tempColl.size() > 0)
					form.getGlobalContext().Clinical.setSelectedHCPs(tempColl);
				else
					form.getGlobalContext().Clinical.setSelectedHCPs(null);
				
				form.getGlobalContext().Clinical.setNursessSurgicalAudit(getAllNurses());
				engine.open(form.getForms().Clinical.SurgicalAuditProcedureStaffDialog);		
			break;
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.ScrubNurse.REMOVE:
				if(	form.grdScrubNurse().getValue() != null)
					form.grdScrubNurse().removeSelectedRow();
				
				updateContextMenu();
			break;
	
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.CirculatingNurse.EDIT:
				form.getGlobalContext().Clinical.setSelectedHcp(HcpDisType.NURSING);
				form.getLocalContext().setEditHcp(SurgicalAuditProcedureDetailsHcp.CIRCULATINGNURSE);
				tempColl = new ArrayList<Object>();
				for(	int i = 0; i < form.grdCirculatingNurse().getRows().size();i++)
				{
					tempColl.add(form.grdCirculatingNurse().getRows().get(i).getValue());
				}
				if( tempColl != null && tempColl.size() > 0)
					form.getGlobalContext().Clinical.setSelectedHCPs(tempColl);
				else
					form.getGlobalContext().Clinical.setSelectedHCPs(null);
				
				form.getGlobalContext().Clinical.setNursessSurgicalAudit(getAllNurses());
				engine.open(form.getForms().Clinical.SurgicalAuditProcedureStaffDialog);		
			break;
			case ims.clinical.forms.surgicalauditproceduredetails.GenForm.ContextMenus.ClinicalNamespace.CirculatingNurse.REMOVE:
				if(	form.grdCirculatingNurse().getValue() != null)
					form.grdCirculatingNurse().removeSelectedRow();
				
				updateContextMenu();
			break;



		}
	}
	public void initialize(ims.core.patient.vo.PatientRefVo patientRef, ims.core.admin.vo.CareContextRefVo careContextRef, ims.clinical.vo.SurgicalAuditOperationDetailRefVo surgicalAuditOperationDetailsRef)
	{
		//hideDisplay();
		form.getLocalContext().setCancelOperation(null);
		form.getLocalContext().setCareContextRef(careContextRef);
		form.getLocalContext().setPatientRef(patientRef);
		form.getLocalContext().setSurgicalAuditOperationDetailsRef(surgicalAuditOperationDetailsRef);
		form.ccOperationCancelled().initialize(MosType.HCP);
		open();
	}
	private void open()
	{
		clearAll();
		if(	form.getLocalContext().getSurgicalAuditOperationDetailsRefIsNotNull())
			form.getLocalContext().setCurrentSurgicalAuditOperationDetails(domain.getSurgicalAuditOperationDetail(form.getLocalContext().getSurgicalAuditOperationDetailsRef()));
		else
			form.getLocalContext().setCurrentSurgicalAuditOperationDetails(null);
		
		if(	form.getLocalContext().getCurrentSurgicalAuditOperationDetailsIsNotNull())
		{
			populateScreenFromData(form.getLocalContext().getCurrentSurgicalAuditOperationDetails());
		}
		form.setMode(FormMode.VIEW);
		updateControlsState();
		
	}
	private void populateScreenFromData(SurgicalAuditOperationDetailVo record)
	{
		if( record == null)
			return;
		form.chkCancelOperation().setValue(record.getOperationCancelled());
		//Populate Cancel Operation Details
		if (form.chkCancelOperation().getValue()==true)
		{
			form.cmbReasonForCancelation().setValue(record.getReasonForCancellation());
			form.txtReasonForCancellationComment().setValue(record.getReasonForCancellationComment());
			form.ccOperationCancelled().setValue(record.getOperationCancelledBy());
		}
		
		
		if(	record.getProcedureDetailsIsNotNull())
		{
			
			populategridAnaesthetist(record.getProcedureDetails().getAnaesthetists());
			populategridAnaesthetistAssistedBy(record.getProcedureDetails().getAnaesthetistAssistedBy());
			populategridOperationPerformedBy(record.getProcedureDetails().getOpPerformedBy());
			populategridConsultantAssistedBy(record.getProcedureDetails().getConsultantAssistedBy());
			populategridRadiographer(record.getProcedureDetails().getRadiographers());
			populategridAnaestheticNurse(record.getProcedureDetails().getAnaestheticNurse());
			form.txtLocumAnaestNurse().setValue(record.getProcedureDetails().getLocumAnaestNurse());
			populategridScrubNurse(record.getProcedureDetails().getScrubNurse());
			form.txtLocumScrubNurse().setValue(record.getProcedureDetails().getLocumScrubNurse());
			populategrdCirculatingNurse(record.getProcedureDetails().getCirculatingNurse());
			form.txtLocumCirculatingNurse().setValue(record.getProcedureDetails().getLocumCirculatingNurse());
			form.GroupSurgicalCheckList().setValue(record.getProcedureDetails().getSurgicalCheckListPerformedIsNotNull() ?  (record.getProcedureDetails().getSurgicalCheckListPerformed().equals(YesNo.YES) ? GroupSurgicalCheckListEnumeration.rdoSurgicalCheckYes : GroupSurgicalCheckListEnumeration.rdoSUrgicalCheckNo) : null);
			
			form.txtOther().setValue(record.getProcedureDetails().getOther());
			form.cmbReason().setValue(record.getProcedureDetails().getCheckListNotPerformedReason());
			form.chkAnaesthetistNotRequired().setValue(record.getProcedureDetails().getAnaesthetistNotRequired());
			form.grdAnaesthetist().setEnabled(!form.chkAnaesthetistNotRequired().getValue());
			form.chkAnaesthetistAssistedByNotRequired().setValue(record.getProcedureDetails().getAnaesthetistAssistNotRequired());
			form.grdAnaesthetistAssistedBy().setEnabled(!form.chkAnaesthetistAssistedByNotRequired().getValue());
			form.dtimEnterOperatingTheatre().setValue(record.getProcedureDetails().getEnterOpTheatreTime()); 	//wdev-15719
			form.cmbAnaestheticUsed().setValue(record.getProcedureDetails().getAnaestheticUsed()); 				//wdev-15718
			form.txtAnaestheticUsedComment().setValue(record.getProcedureDetails().getAnaestheticUsedComment());//wdev-15718
			form.txtAnaestheticUsedComment().setTooltip(record.getProcedureDetails().getAnaestheticUsedComment()); //wdev-15718
		}
		hideDisplay();
	}
	private void populategridAnaesthetist(MedicLiteVoCollection medicColl)
	{
		if( medicColl == null || medicColl.size() == 0)
			return;
		medicColl.sort(new MedicComparator(SortOrder.ASCENDING));
		for( int i = 0; i < medicColl.size();i++)
		{
			
			grdAnaesthetistRow row = form.grdAnaesthetist().getRows().newRow();
			row.setColumnAnaesthetists(medicColl.get(i).getMosIsNotNull() && medicColl.get(i).getMos().getNameIsNotNull() && medicColl.get(i).getMos().getNameIsNotNull() ? medicColl.get(i).getMos().getName().toString():"" );
			row.setValue(medicColl.get(i));
		}
	}
	
	private void populategridOperationPerformedBy(MedicLiteVoCollection medicColl)
	{
		if( medicColl == null || medicColl.size() == 0)
			return;
		medicColl.sort(new MedicComparator(SortOrder.ASCENDING));
		for( int i = 0; i < medicColl.size();i++)
		{
			
			grdOperationPerformedByRow row = form.grdOperationPerformedBy().getRows().newRow();
			row.setColumnOperationPerformedBy(medicColl.get(i).getMosIsNotNull() && medicColl.get(i).getMos().getNameIsNotNull() && medicColl.get(i).getMos().getNameIsNotNull() ? medicColl.get(i).getMos().getName().toString():"" );
			row.setValue(medicColl.get(i));
		}
	}
	private void populategridAnaesthetistAssistedBy(MedicLiteVoCollection medicColl)
	{
		if( medicColl == null || medicColl.size() == 0)
			return;
		medicColl.sort(new MedicComparator(SortOrder.ASCENDING));
		for( int i = 0; i < medicColl.size();i++)
		{
			grdAnaesthetistAssistedByRow row = form.grdAnaesthetistAssistedBy().getRows().newRow();
			row.setColumnAnaesthetistAssistedby(medicColl.get(i).getMosIsNotNull() && medicColl.get(i).getMos().getNameIsNotNull() && medicColl.get(i).getMos().getNameIsNotNull() ? medicColl.get(i).getMos().getName().toString():"" );
			row.setValue(medicColl.get(i));
		}
	}
	private void populategridConsultantAssistedBy(MedicLiteVoCollection medicColl)
	{
		if( medicColl == null || medicColl.size() == 0)
			return;
		medicColl.sort(new MedicComparator(SortOrder.ASCENDING));
		for( int i = 0; i < medicColl.size();i++)
		{
			grdConsultantAssistedByRow row = form.grdConsultantAssistedBy().getRows().newRow();
			row.setColumnConsultantAssistedBy(medicColl.get(i).getMosIsNotNull() && medicColl.get(i).getMos().getNameIsNotNull() && medicColl.get(i).getMos().getNameIsNotNull() ? medicColl.get(i).getMos().getName().toString():"" );
			row.setValue(medicColl.get(i));
		}
	}
	
	//WDEV-15691
	private void populategridRadiographer(HcpLiteVoCollection radiographerColl)
	{
		if( radiographerColl == null || radiographerColl.size() == 0)
			return;
		radiographerColl.sort(new RadiographerComparator(SortOrder.ASCENDING));
		for( int i = 0; i < radiographerColl.size();i++)
		{
			grdRadiographerRow row = form.grdRadiographer().getRows().newRow();
			row.setColumnRadiographer(radiographerColl.get(i).getMosIsNotNull() && radiographerColl.get(i).getMos().getNameIsNotNull() && radiographerColl.get(i).getMos().getNameIsNotNull() ? radiographerColl.get(i).getMos().getName().toString():"" );
			row.setValue(radiographerColl.get(i));
		}
	}
	
	private void populategridAnaestheticNurse(NurseVoCollection nurseColl)
	{
		if( nurseColl == null || nurseColl.size() == 0)
			return;
		nurseColl.sort(new NurseComparator(SortOrder.ASCENDING));
		for( int i = 0; i < nurseColl.size();i++)
		{
			grdAnaestheticNurseRow row = form.grdAnaestheticNurse().getRows().newRow();
			row.setColumnAnaestheticNurse(nurseColl.get(i).getMosIsNotNull() && nurseColl.get(i).getMos().getNameIsNotNull() && nurseColl.get(i).getMos().getNameIsNotNull() ? nurseColl.get(i).getMos().getName().toString():"" );
			row.setValue(nurseColl.get(i));
		}
	}
	
	private void populategridScrubNurse(NurseVoCollection nurseColl)
	{
		if( nurseColl == null || nurseColl.size() == 0)
			return;
		nurseColl.sort(new NurseComparator(SortOrder.ASCENDING));
		for( int i = 0; i < nurseColl.size();i++)
		{
			grdScrubNurseRow row = form.grdScrubNurse().getRows().newRow();
			row.setColumnScrubNurse(nurseColl.get(i).getMosIsNotNull() && nurseColl.get(i).getMos().getNameIsNotNull() && nurseColl.get(i).getMos().getNameIsNotNull() ? nurseColl.get(i).getMos().getName().toString():"" );
			row.setValue(nurseColl.get(i));
		}
	}
	
	private void populategrdCirculatingNurse(NurseVoCollection nurseColl)
	{
		if( nurseColl == null || nurseColl.size() == 0)
			return;
		nurseColl.sort(new NurseComparator(SortOrder.ASCENDING));
		for( int i = 0; i < nurseColl.size();i++)
		{
			grdCirculatingNurseRow row = form.grdCirculatingNurse().getRows().newRow();
			row.setColumnCirculatingNurse(nurseColl.get(i).getMosIsNotNull() && nurseColl.get(i).getMos().getNameIsNotNull() && nurseColl.get(i).getMos().getNameIsNotNull() ? nurseColl.get(i).getMos().getName().toString():"" );
			row.setValue(nurseColl.get(i));
		}
	}
	private void clearAll()
	{
		form.chkCancelOperation().setValue(null);
		form.chkAnaesthetistNotRequired().setValue(null);
		form.grdAnaesthetist().getRows().clear();
		form.chkAnaesthetistAssistedByNotRequired().setValue(null);
		form.grdAnaesthetistAssistedBy().getRows().clear();
		form.grdOperationPerformedBy().getRows().clear();
		form.grdConsultantAssistedBy().getRows().clear();
		form.txtOther().setValue(null);
		form.GroupSurgicalCheckList().setValue(null);
		form.grdRadiographer().getRows().clear();
		form.grdAnaestheticNurse().getRows().clear();
		form.txtLocumAnaestNurse().setValue(null);
		form.grdScrubNurse().getRows().clear();
		form.txtLocumScrubNurse().setValue(null);
		form.grdCirculatingNurse().getRows().clear();
		form.txtLocumCirculatingNurse().setValue(null);
		form.cmbReason().setValue(null);
		form.dtimEnterOperatingTheatre().setValue(null); //wdev-15718
		form.cmbAnaestheticUsed().setValue(null);
		form.txtAnaestheticUsedComment().setValue(null);
		//----------------wdev-15775
		form.cmbReasonForCancelation().setValue(null);
		form.ccOperationCancelled().setValue(null);
		form.txtReasonForCancellationComment().setValue(null);
		//------------------
		

		
	}

	
	protected void onFormModeChanged() 
	{
		updateControlsState();
		
	}

	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Clinical.SurgicalAuditProcedureStaffDialog) && result.equals(DialogResult.OK))
		{
			ArrayList<Object> tempColl = null;
			if( form.getGlobalContext().Clinical.getSelectedHCPsIsNotNull())
				tempColl = form.getGlobalContext().Clinical.getSelectedHCPs();
			if(	form.getLocalContext().getEditHcpIsNotNull() && form.getLocalContext().getEditHcp().equals(SurgicalAuditProcedureDetailsHcp.ANAESTHETIST))
			{
				form.grdAnaesthetist().getRows().clear();
				if( tempColl != null)
				{
					MedicLiteVoCollection hcpColl = new MedicLiteVoCollection();
					for(int i = 0; i < tempColl.size();i++)
					{
						MedicLiteVo tempVo = (MedicLiteVo) tempColl.get(i);
						if( tempVo != null)
							hcpColl.add(tempVo);
					}
					hcpColl.sort(new MedicComparator(SortOrder.ASCENDING));
					populategridAnaesthetist(hcpColl);
				}
				
			}
			else if ( form.getLocalContext().getEditHcpIsNotNull() && form.getLocalContext().getEditHcp().equals(SurgicalAuditProcedureDetailsHcp.ANESTHETISTASSISTEDBY))
			{
				form.grdAnaesthetistAssistedBy().getRows().clear();
				if( tempColl != null)
				{
					MedicLiteVoCollection hcpColl = new MedicLiteVoCollection();
					for(int i = 0; i < tempColl.size();i++)
					{
						MedicLiteVo tempVo = (MedicLiteVo) tempColl.get(i);
						if( tempVo != null)
							hcpColl.add(tempVo);
					}
					hcpColl.sort(new MedicComparator(SortOrder.ASCENDING));
					populategridAnaesthetistAssistedBy(hcpColl);
				}
			}
			else if( form.getLocalContext().getEditHcpIsNotNull() && form.getLocalContext().getEditHcp().equals(SurgicalAuditProcedureDetailsHcp.OPERATIONPERFORMEDBY))
			{
				form.grdOperationPerformedBy().getRows().clear();
				if( tempColl != null)
				{
					MedicLiteVoCollection hcpColl = new MedicLiteVoCollection();
					for(int i = 0; i < tempColl.size();i++)
					{
						MedicLiteVo tempVo = (MedicLiteVo) tempColl.get(i);
						if( tempVo != null)
							hcpColl.add(tempVo);
					}
					hcpColl.sort(new MedicComparator(SortOrder.ASCENDING));
					populategridOperationPerformedBy(hcpColl);
					
				}
			}
			else if( form.getLocalContext().getEditHcpIsNotNull() && form.getLocalContext().getEditHcp().equals(SurgicalAuditProcedureDetailsHcp.CONSULTATNTASSISTEDBY))
			{
				form.grdConsultantAssistedBy().getRows().clear();
				if( tempColl != null)
				{
					MedicLiteVoCollection hcpColl = new MedicLiteVoCollection();
					for(int i = 0; i < tempColl.size();i++)
					{
						MedicLiteVo tempVo = (MedicLiteVo) tempColl.get(i);
						if( tempVo != null)
							hcpColl.add(tempVo);
					}
					hcpColl.sort(new MedicComparator(SortOrder.ASCENDING));
					populategridConsultantAssistedBy(hcpColl);
				}
			}
			else if( form.getLocalContext().getEditHcpIsNotNull() && form.getLocalContext().getEditHcp().equals(SurgicalAuditProcedureDetailsHcp.RADIOGRAPHER))
			{
				form.grdRadiographer().getRows().clear();
				//WDEV-15691
				if( tempColl != null)
				{
					HcpLiteVoCollection hcpColl = new HcpLiteVoCollection();
					for(int i = 0; i < tempColl.size();i++)
					{
						HcpLiteVo tempVo = (HcpLiteVo) tempColl.get(i);
						if( tempVo != null)
							hcpColl.add(tempVo);
					}
					hcpColl.sort(new MedicComparator(SortOrder.ASCENDING));
					populategridRadiographer(hcpColl);
				}
			}
			else if( form.getLocalContext().getEditHcpIsNotNull() && form.getLocalContext().getEditHcp().equals(SurgicalAuditProcedureDetailsHcp.ANAESTHETICNURSE))
			{
				form.grdAnaestheticNurse().getRows().clear();
				if( tempColl != null)
				{
					NurseVoCollection hcpColl = new NurseVoCollection();
					for(int i = 0; i < tempColl.size();i++)
					{
						NurseVo tempVo = (NurseVo) tempColl.get(i);
						if( tempVo != null)
							hcpColl.add(tempVo);
					}
					hcpColl.sort(new NurseComparator(SortOrder.ASCENDING));
					populategridAnaestheticNurse(hcpColl);
				}
			}
			else if( form.getLocalContext().getEditHcpIsNotNull() && form.getLocalContext().getEditHcp().equals(SurgicalAuditProcedureDetailsHcp.SCRUBNURSE))
			{
				form.grdScrubNurse().getRows().clear();
				if( tempColl != null)
				{
					NurseVoCollection hcpColl = new NurseVoCollection();
					for(int i = 0; i < tempColl.size();i++)
					{
						NurseVo tempVo = (NurseVo) tempColl.get(i);
						if( tempVo != null)
							hcpColl.add(tempVo);
					}
					hcpColl.sort(new NurseComparator(SortOrder.ASCENDING));
					populategridScrubNurse(hcpColl);
				}
			}
			else if( form.getLocalContext().getEditHcpIsNotNull() && form.getLocalContext().getEditHcp().equals(SurgicalAuditProcedureDetailsHcp.CIRCULATINGNURSE))
			{
				form.grdCirculatingNurse().getRows().clear();
				if( tempColl != null)
				{
					NurseVoCollection hcpColl = new NurseVoCollection();
					for(int i = 0; i < tempColl.size();i++)
					{
						NurseVo tempVo = (NurseVo) tempColl.get(i);
						if( tempVo != null)
							hcpColl.add(tempVo);
					}
					hcpColl.sort(new NurseComparator(SortOrder.ASCENDING));
					populategrdCirculatingNurse(hcpColl);
				}
			}
			updateContextMenu();
		}
	}
	private void updateControlsState()
	{
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getCurrentSurgicalAuditOperationDetailsIsNotNull());
		form.btnEdit().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getCurrentSurgicalAuditOperationDetailsIsNotNull() && Boolean.FALSE.equals(form.getLocalContext().getisReadOnly()));
	
		form.cmbReasonForCancelation().setVisible(form.chkCancelOperation().getValue());
		form.txtReasonForCancellationComment().setVisible(form.chkCancelOperation().getValue());
		form.ccOperationCancelled().setVisible(form.chkCancelOperation().getValue());
		
		form.cmbReasonForCancelation().setEnabled(form.getMode().equals(FormMode.EDIT) && form.chkCancelOperation().getValue());
		form.txtReasonForCancellationComment().setEnabled(form.getMode().equals(FormMode.EDIT) && form.chkCancelOperation().getValue());
		form.ccOperationCancelled().setEnabled(form.getMode().equals(FormMode.EDIT) && form.chkCancelOperation().getValue());
		form.ccOperationCancelled().isRequired(form.getMode().equals(FormMode.EDIT) && form.chkCancelOperation().getValue());
		
		form.lblOperationCancelledby2().setVisible(form.chkCancelOperation().getValue());
		form.lblReasonForCancelation1().setVisible(form.chkCancelOperation().getValue());
		form.lblReasonForCancelationComment3().setVisible(form.chkCancelOperation().getValue());
		
		form.txtdummyAnaesthetistRequired().setEnabled( form.getMode().equals(FormMode.EDIT) && form.chkCancelOperation().getValue() == false && form.chkAnaesthetistNotRequired().getValue() == false);
		form.txtdummyAnaesthetistAssistedByRequired().setEnabled( form.getMode().equals(FormMode.EDIT) && form.chkCancelOperation().getValue() == false && form.chkAnaesthetistAssistedByNotRequired().getValue() == false);
		
		if(  form.getMode().equals(FormMode.EDIT))
		{
			//WDEV-15653
			form.grdAnaesthetist().setEnabled(!form.chkAnaesthetistNotRequired().getValue());
			form.grdAnaesthetistAssistedBy().setEnabled(!form.chkAnaesthetistAssistedByNotRequired().getValue());
			
			enableDisableControls(!form.chkCancelOperation().getValue());
			
			if( form.getLocalContext().getCurrentSurgicalAuditOperationDetailsIsNotNull() && form.getLocalContext().getCurrentSurgicalAuditOperationDetails().getCurrentStatusIsNotNull() && form.getLocalContext().getCurrentSurgicalAuditOperationDetails().getCurrentStatus().getOperationStatusIsNotNull())
			{
				//Cancel Operation check box control is enabled if curenstatus is in 2382 or -2383 or -2384 or -2385 and also or -2394.
				if( SurgicalAuditOperationDetailStatus.IN_HOLDING_BAY.equals(form.getLocalContext().getCurrentSurgicalAuditOperationDetails().getCurrentStatus().getOperationStatus()) 
					||  SurgicalAuditOperationDetailStatus.LEFT_HOLDING_BAY.equals(form.getLocalContext().getCurrentSurgicalAuditOperationDetails().getCurrentStatus().getOperationStatus()) 
					|| SurgicalAuditOperationDetailStatus.ENTERED_OPERATING_THEATRE.equals(form.getLocalContext().getCurrentSurgicalAuditOperationDetails().getCurrentStatus().getOperationStatus()) 
					|| SurgicalAuditOperationDetailStatus.ANAESTHETIC_STARTED.equals(form.getLocalContext().getCurrentSurgicalAuditOperationDetails().getCurrentStatus().getOperationStatus())
					|| SurgicalAuditOperationDetailStatus.CANCELLED_OPERATIONS.equals(form.getLocalContext().getCurrentSurgicalAuditOperationDetails().getCurrentStatus().getOperationStatus()))
				{
					form.chkCancelOperation().setEnabled(true);
				}
				else
					form.chkCancelOperation().setEnabled(false);
			}
			
		}
		else
		{
			form.cmbReason().setEnabled(false);
		}
		updateContextMenu();
	}
	private void updateContextMenu()
	{
		form.getContextMenus().Clinical.hideAllAnaesthetistMenuItems();
		form.getContextMenus().Clinical.hideAllAnaesthetistAssistedbyMenuItems();
		form.getContextMenus().Clinical.hideAllOperationPerformedbyMenuItems();
		form.getContextMenus().Clinical.hideAllConsultantAssistedbyMenuItems();
		form.getContextMenus().Clinical.hideAllRadiographerMenuItems();
		form.getContextMenus().Clinical.hideAllAnaestheticNurseMenuItems();
		form.getContextMenus().Clinical.hideAllScrubNurseMenuItems();
		form.getContextMenus().Clinical.hideAllCirculatingNurseMenuItems();
		
		form.getContextMenus().Clinical.getAnaesthetistEDITItem().setVisible(form.getMode().equals(FormMode.EDIT) && !form.chkCancelOperation().getValue() && !form.chkAnaesthetistNotRequired().getValue());//WDEV-15668
		form.getContextMenus().Clinical.getAnaesthetistREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdAnaesthetist().getValue() != null && !form.chkCancelOperation().getValue() && !form.chkAnaesthetistNotRequired().getValue());//WDEV-15668
		
		form.getContextMenus().Clinical.getAnaesthetistAssistedbyEDITItem().setVisible(form.getMode().equals(FormMode.EDIT) && !form.chkCancelOperation().getValue() && !form.chkAnaesthetistAssistedByNotRequired().getValue());//WDEV-15668
		form.getContextMenus().Clinical.getAnaesthetistAssistedbyREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdAnaesthetistAssistedBy().getValue() != null && !form.chkCancelOperation().getValue() && !form.chkAnaesthetistAssistedByNotRequired().getValue());//WDEV-15668
		
		form.getContextMenus().Clinical.getOperationPerformedbyEDITItem().setVisible(form.getMode().equals(FormMode.EDIT) && !form.chkCancelOperation().getValue());
		form.getContextMenus().Clinical.getOperationPerformedbyREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdOperationPerformedBy().getValue() != null && !form.chkCancelOperation().getValue());
		
		form.getContextMenus().Clinical.getConsultantAssistedbyEDITItem().setVisible(form.getMode().equals(FormMode.EDIT) && !form.chkCancelOperation().getValue());
		form.getContextMenus().Clinical.getConsultantAssistedbyREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdConsultantAssistedBy().getValue() != null && !form.chkCancelOperation().getValue());
		
		form.getContextMenus().Clinical.getRadiographerEDITItem().setVisible(form.getMode().equals(FormMode.EDIT) && !form.chkCancelOperation().getValue());
		form.getContextMenus().Clinical.getRadiographerREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdRadiographer().getValue() != null && !form.chkCancelOperation().getValue());
		
		form.getContextMenus().Clinical.getAnaestheticNurseEDITItem().setVisible(form.getMode().equals(FormMode.EDIT) && !form.chkCancelOperation().getValue());
		form.getContextMenus().Clinical.getAnaestheticNurseREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdAnaestheticNurse().getValue() != null && !form.chkCancelOperation().getValue());
		
		form.getContextMenus().Clinical.getScrubNurseEDITItem().setVisible(form.getMode().equals(FormMode.EDIT) && !form.chkCancelOperation().getValue());
		form.getContextMenus().Clinical.getScrubNurseREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdScrubNurse().getValue() != null && !form.chkCancelOperation().getValue());
		
		form.getContextMenus().Clinical.getCirculatingNurseEDITItem().setVisible(form.getMode().equals(FormMode.EDIT) && !form.chkCancelOperation().getValue());
		form.getContextMenus().Clinical.getCirculatingNurseREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdCirculatingNurse().getValue() != null && !form.chkCancelOperation().getValue());
	
	}
	private void enableDisableControls(boolean endis)
	{
		form.grdAnaesthetist().setEnabled(endis);
		form.chkAnaesthetistNotRequired().setEnabled(endis);
		form.grdAnaesthetistAssistedBy().setEnabled(endis);
		form.chkAnaesthetistAssistedByNotRequired().setEnabled(endis);
		form.grdOperationPerformedBy().setEnabled(endis);
		form.grdConsultantAssistedBy().setEnabled(endis);
		form.txtOther().setEnabled(endis);
		form.GroupSurgicalCheckList().setEnabled(endis);
		form.grdRadiographer().setEnabled(endis);
		form.grdAnaestheticNurse().setEnabled(endis);
		form.grdScrubNurse().setEnabled(endis);
		form.grdCirculatingNurse().setEnabled(endis);
		form.cmbReason().setEnabled(endis);
		//form.txtdummyAnaesthetistAssistedByRequired().setEnabled(endis);
		//form.txtdummyAnaesthetistRequired().setEnabled(endis);
		form.txtLocumAnaestNurse().setEnabled(endis);
		form.txtLocumScrubNurse().setEnabled(endis);
		form.txtLocumCirculatingNurse().setEnabled(endis);
		form.txtdummySurgicalCheckList().setEnabled(endis);
		form.dtimEnterOperatingTheatre().setEnabled(endis); //wdev-15719
		form.cmbAnaestheticUsed().setEnabled(endis); //wdev-15718
		form.txtAnaestheticUsedComment().setEnabled(endis); //wdev-15718
	}
	
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		// TODO Auto-generated method stub
		
	}

	
	public SurgicalAuditPreOpChecksEvent getSelectedEvent() 
	{
		return form.getLocalContext().getselectedEvent();
	}

	
	public void resetSelectedEvent() 
	{
		form.getLocalContext().setselectedEvent(null);
		
	}

	protected void onRadioButtonGroupSurgicalCheckListValueChanged() throws PresentationLogicException 
	{
		hideDisplay();
		
	}
	private void hideDisplay()
	{
		if( GroupSurgicalCheckListEnumeration.rdoSUrgicalCheckNo.equals(form.GroupSurgicalCheckList().getValue()))
		{
			hiddenDisplayReasons(true);
		}
		else
		{
			hiddenDisplayReasons(false);
		}
	}
	private void hiddenDisplayReasons(Boolean hiddendispaly)
	{
		form.cmbReason().setVisible(hiddendispaly);
		form.lblReasons().setVisible(hiddendispaly);
	}

	
	protected void onGrdCirculatingNurseSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenu();		
	}

	
	protected void onGrdScrubNurseSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenu();
		
	}

	
	protected void onGrdAnaestheticNurseSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenu();
		
	}

	protected void onGrdRadiographerSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenu();
		
	}
	
	protected void onGrdConsultantAssistedBySelectionChanged()	throws PresentationLogicException 
	{
		updateContextMenu();
		
	}

	protected void onGrdOperationPerformedBySelectionChanged()throws PresentationLogicException 
	{
		updateContextMenu();
		
	}

	protected void onGrdAnaesthetistAssistedBySelectionChanged() throws PresentationLogicException 
	{
		updateContextMenu();
		
	}

	
	protected void onGrdAnaesthetistSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenu();
		
	}
	private MedicLiteVoCollection getAnaesthetist()
	{
		MedicLiteVoCollection tempColl = new MedicLiteVoCollection();
		
		for( int i = 0; i < form.grdAnaesthetist().getRows().size();i++)
		{
			 tempColl.add(form.grdAnaesthetist().getRows().get(i).getValue());
		}
		for( int j = 0; j < form.grdAnaesthetistAssistedBy().getRows().size();j++)
		{
			 tempColl.add(form.grdAnaesthetistAssistedBy().getRows().get(j).getValue());
		}
		for( int k = 0; k < form.grdOperationPerformedBy().getRows().size();k++)
		{
			tempColl.add(form.grdOperationPerformedBy().getRows().get(k).getValue());
		}
		for( int l = 0; l < form.grdConsultantAssistedBy().getRows().size();l++)
		{
			tempColl.add(form.grdConsultantAssistedBy().getRows().get(l).getValue());
		}
		return tempColl;
	}
	
	//WDEV-15691
	private MedicLiteVoCollection getAllMedics() 
	{
		MedicLiteVoCollection tempColl = new MedicLiteVoCollection();
		
		for( int i = 0; i < form.grdAnaesthetist().getRows().size();i++)
		{
			 tempColl.add(form.grdAnaesthetist().getRows().get(i).getValue());
		}
		for( int j = 0; j < form.grdAnaesthetistAssistedBy().getRows().size();j++)
		{
			 tempColl.add(form.grdAnaesthetistAssistedBy().getRows().get(j).getValue());
		}
		for( int k = 0; k < form.grdOperationPerformedBy().getRows().size();k++)
		{
			tempColl.add(form.grdOperationPerformedBy().getRows().get(k).getValue());
		}
		for( int l = 0; l < form.grdConsultantAssistedBy().getRows().size();l++)
		{
			tempColl.add(form.grdConsultantAssistedBy().getRows().get(l).getValue());
		}
		
		return tempColl;
	}
	
	private HcpLiteVoCollection getRadiographer()
	{
		//WDEV-15691
		HcpLiteVoCollection tempColl = new HcpLiteVoCollection();
		for( int m = 0; m < form.grdRadiographer().getRows().size();m++)
		{
			tempColl.add(form.grdRadiographer().getRows().get(m).getValue());
		}
		
		return tempColl;
	}
	private NurseVoCollection getAllNurses()
	{
		NurseVoCollection tempColl = new NurseVoCollection();
		for( int i = 0; i < form.grdScrubNurse().getRows().size();i++)
		{
			tempColl.add( form.grdScrubNurse().getRows().get(i).getValue());
		}
		for( int j = 0; j < form.grdAnaestheticNurse().getRows().size();j++)
		{
			tempColl.add(form.grdAnaestheticNurse().getRows().get(j).getValue());
						
		}
		for( int k = 0; k < form.grdCirculatingNurse().getRows().size();k++)
		{
			tempColl.add(form.grdCirculatingNurse().getRows().get(k).getValue());
		}
		
		return tempColl;

	}
	public class MedicComparator implements Comparator
	{
		private int direction = 1;
		
		public MedicComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public MedicComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			PersonName pdate1 = null;
			PersonName pdate2 = null;
			if(ob1 instanceof MedicLiteVo )
			{
				MedicLiteVo ps1 = (MedicLiteVo)ob1;
				pdate1 = ps1.getMosIsNotNull() && ps1.getMos().getNameIsNotNull() ? ps1.getMos().getName():null;
			}
			if(ob2 instanceof MedicLiteVo)
			{
				MedicLiteVo ps2 = (MedicLiteVo)ob2;
				pdate2 = ps2.getMosIsNotNull() && ps2.getMos().getNameIsNotNull() ? ps2.getMos().getName():null;
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	public class NurseComparator implements Comparator
	{
		private int direction = 1;
		
		public NurseComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public NurseComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			PersonName pdate1 = null;
			PersonName pdate2 = null;
			if(ob1 instanceof NurseVo )
			{
				NurseVo ps1 = (NurseVo)ob1;
				pdate1 = ps1.getMosIsNotNull() && ps1.getMos().getNameIsNotNull() ? ps1.getMos().getName():null;
			}
			if(ob2 instanceof NurseVo)
			{
				NurseVo ps2 = (NurseVo)ob2;
				pdate2 = ps2.getMosIsNotNull() && ps2.getMos().getNameIsNotNull() ? ps2.getMos().getName():null;
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	
	//WDEV-15691
	public class RadiographerComparator implements Comparator
	{
		private int direction = 1;
		
		public RadiographerComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public RadiographerComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			PersonName pname1 = null;
			PersonName pname2 = null;
			if(ob1 instanceof HcpLiteVo )
			{
				HcpLiteVo ps1 = (HcpLiteVo)ob1;
				pname1 = ps1.getMosIsNotNull() && ps1.getMos().getNameIsNotNull() ? ps1.getMos().getName():null;
			}
			if(ob2 instanceof HcpLiteVo)
			{
				HcpLiteVo ps2 = (HcpLiteVo)ob2;
				pname2 = ps2.getMosIsNotNull() && ps2.getMos().getNameIsNotNull() ? ps2.getMos().getName():null;
			}
			if(pname1 != null )
				return  pname1.compareTo(pname2)*direction;
			if(pname2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	
	public void setReadOnly(Boolean argument)
	{
		form.getLocalContext().setisReadOnly(argument);
		updateControlsState();
	}


}
