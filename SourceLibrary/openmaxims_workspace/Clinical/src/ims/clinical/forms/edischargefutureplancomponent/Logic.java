//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3314.22227)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.edischargefutureplancomponent;

import ims.clinical.forms.edischargefutureplancomponent.GenForm.GroupFollowUpEnumeration;
import ims.clinical.forms.edischargefutureplancomponent.GenForm.grdFuturePlanRow;
import ims.clinical.forms.edischargefutureplancomponent.GenForm.grdResultsRow;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.DischargeFuturePlanFollowUpVo;
import ims.clinical.vo.DischargeFuturePlanFollowUpVoCollection;
import ims.clinical.vo.DischargeFuturePlanVo;
import ims.clinical.vo.NurseEnabledInstructionsVo;
import ims.clinicaladmin.vo.lookups.EDischargeHINT;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.FieldHelpVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.vo.OrderInvestigationBookingVoCollection;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
	}

	private void initializeComponent()
	{
		setTooltips();
		form.getLocalContext().setbInitialised(null);
		form.ccDischCons().initialize(MosType.MEDIC);
		form.ccSecondCons().initialize(MosType.MEDIC);
		form.getLocalContext().setisReadonly(false);

		hideControls();
	}

	private void hideControls()
	{
		form.lblExpires().setVisible(false);
		form.dteExpires().setVisible(false);
		form.lblRefrain().setVisible(false);
		form.intDays().setVisible(false);
		form.cmbTimePeriod().setVisible(false);
	}

	private void manageReadOnly()
	{
		if (form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(true);

		if (form.getLocalContext().getisReadonlyIsNotNull() && form.getLocalContext().getisReadonly() && form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(false);
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		updateContextMenus();
		open();
		form.txtNurseEnabled().setEnabled(GroupFollowUpEnumeration.rdoNurseYes.equals(form.GroupFollowUp().getValue()));
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Modified for WDEV-6886
		if (save())
		{
			open();

			form.setMode(FormMode.VIEW);
			updateContextMenus();
			form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
			form.fireCustomControlValueChanged();
		}

	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		updateContextMenus();
		open();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}

	public void clearInstanceControls()
	{
		form.GroupFollowUp().setValue(GroupFollowUpEnumeration.None);

		form.grdResults().getRows().clear();
		// -------------- wdev-8460
		form.grdFuturePlan().getRows().clear();
		form.txtNurseEnabled().setValue(null);
		form.ccDischCons().setValue(null);
		form.ccSecondCons().setValue(null);
		form.cmbDSpecialty().setValue(null);
		form.dteExpires().setValue(null);
		form.intDays().setValue(null);
		form.cmbTimePeriod().setValue(null);
		// --------------
		form.txtHospitalPlan().setValue(null);
		form.txtActions().setValue(null);
		form.grdResults().setValue(null);
		form.txtResults().setValue(null);
		form.chkMedicalCertIssued().setValue(null);
		form.dteExpires().setValue(null);
		form.intDays().setValue(null);
		form.txtComments().setValue(null);
	}

	public boolean save() throws PresentationLogicException
	{
		DischargeFuturePlanVo voFuture = populateDataFromScreen();
		String[] str = voFuture.validate(validateUIRules());
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return false;
		}

		try
		{
			voFuture = domain.saveFuturePlan(voFuture);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			open();
			form.setMode(FormMode.VIEW);
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

			form.setMode(FormMode.VIEW);
			open();
			
			// Temporary fix for WDEV-8612 (this code really belongs in the open() function)
			form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
			form.fireCustomControlValueChanged();

			return false;
		}
		form.getLocalContext().setSelectedRecord(voFuture);
		form.setMode(FormMode.VIEW);
		return true;
	}

	//WDEV-16307
	private String[] validateUIRules()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if ( (form.intDays().getValue() != null && form.cmbTimePeriod().getValue() == null) || (form.intDays().getValue() == null && form.cmbTimePeriod().getValue() != null))
		{
			
			listOfErrors.add("Please complete both Refrain from Work fields.");
		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

	return result;
	}

	private DischargeFuturePlanVo populateDataFromScreen()
	{

		DischargeFuturePlanVo voFuture = null;
		if (form.getLocalContext().getSelectedRecordIsNotNull())
			voFuture = form.getLocalContext().getSelectedRecord();
		else
			voFuture = new DischargeFuturePlanVo();

		if (voFuture.getCareContext() == null)
			voFuture.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		voFuture = populateFollowDetails(voFuture);

		voFuture.setHospitalPlan(form.txtHospitalPlan().getValue());
		voFuture.setActionsforGPandCommunity(form.txtActions().getValue());

		OrderInvestigationBookingVoCollection voColl = new OrderInvestigationBookingVoCollection();
		for (int i = 0; i < form.grdResults().getRows().size(); i++)
		{
			if (form.grdResults().getRows().get(i).getColInclude())
				voColl.add(form.grdResults().getRows().get(i).getValue());
		}
		voFuture.setResultsAwaited(voColl);

		voFuture.setOtherResultsAwaited(form.txtResults().getValue());
		voFuture.setMedicalCertificationIssued(form.chkMedicalCertIssued().getValue() ? YesNo.YES : YesNo.NO);

		if (form.chkMedicalCertIssued().getValue())
		{
			voFuture.setCertificateExpiresDate(form.dteExpires().getValue());
			voFuture.setRefrainFromWorkValue(form.intDays().getValue());
			voFuture.setRefrainFromWorkUnit(form.cmbTimePeriod().getValue());
		}
		else
		{
			voFuture.setCertificateExpiresDate(null);
			voFuture.setRefrainFromWorkValue(null);
			voFuture.setRefrainFromWorkUnit(null);
		}
		voFuture.setComments(form.txtComments().getValue());

		voFuture.setWasNurseEnabledDischarge(form.GroupFollowUp().getValue().equals(GroupFollowUpEnumeration.rdoNurseYes) ? true : false);
		//---------------------
		if(voFuture.getNurseEnabledInstructions() == null)
		{
			NurseEnabledInstructionsVo voNe = new NurseEnabledInstructionsVo();
			voNe.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voNe.setNurseEnabledInstructions(form.txtNurseEnabled().getValue());
			voFuture.setNurseEnabledInstructions(voNe);
		}
		else
			voFuture.getNurseEnabledInstructions().setNurseEnabledInstructions(form.txtNurseEnabled().getValue());

		//-----------------------
		DischargeDetailsVo voDisch = null;
		if (form.getLocalContext().getSelectedRecordIsNotNull() && voFuture.getDischargeDetailsIsNotNull())
			voDisch = form.getLocalContext().getSelectedRecord().getDischargeDetails();
		else
			voDisch = new DischargeDetailsVo();

		if (voDisch != null)
		{
			IMos hcp = form.ccDischCons().getValue();
			if (hcp != null)
			{
				HcpLiteVo completingHcp = domain.getHcp((HcpRefVo) hcp);
				voDisch.setDischargingConsultant(completingHcp);
			}
			IMos hcp2 = form.ccSecondCons().getValue();
			if (hcp2 != null)
			{
				HcpLiteVo completingHcp2 = domain.getHcp((HcpRefVo) hcp2);
				voDisch.setSecondaryDischargingConsultant(completingHcp2);
			}
			voDisch.setDischargingSpecialty(form.cmbDSpecialty().getValue());

			if (voDisch.getCareContext() == null)
				voDisch.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			//--------------------------------------------------------------------------
			//if(voDisch.getNurseEnabledInstructions() == null)
				voDisch.setNurseEnabledInstructions(voFuture.getNurseEnabledInstructions());
			//-----------------------------------------------------------------------------
	// TODO		voDisch.setNurseEnabledInstructions(form.txtNurseEnabled().getValue());
			voFuture.setDischargeDetails(voDisch);

		}

		return voFuture;
	}

	private DischargeFuturePlanVo populateFollowDetails(DischargeFuturePlanVo voFuture)
	{
		DischargeFuturePlanFollowUpVoCollection voColl = new DischargeFuturePlanFollowUpVoCollection();
		for (int i = 0; i < form.grdFuturePlan().getRows().size(); i++)
		{
			DischargeFuturePlanFollowUpVo voFutureFOllowup = new DischargeFuturePlanFollowUpVo();
			if (form.grdFuturePlan().getRows().get(i).getValue() != null)
				voFutureFOllowup = form.grdFuturePlan().getRows().get(i).getValue();

			voFutureFOllowup.setHospitalFollowUp(form.grdFuturePlan().getRows().get(i).getColHospFollowUp());
			voFutureFOllowup.setFollowUpInValue(form.grdFuturePlan().getRows().get(i).getColIN());
			voFutureFOllowup.setFollowUpInUnit(form.grdFuturePlan().getRows().get(i).getColPeriod());
			voFutureFOllowup.setFollowUpHCP((HcpLiteVo) form.grdFuturePlan().getRows().get(i).getColHCP().getValue());
			voFutureFOllowup.setFollowUpSpecialty(form.grdFuturePlan().getRows().get(i).getColSpec());
			voFutureFOllowup.setLocation((LocationLiteVo) form.grdFuturePlan().getRows().get(i).getColLoc().getValue());

			voColl.add(voFutureFOllowup);
		}
		voFuture.setFollowUpDetails(voColl);

		return voFuture;
	}

	public void open()
	{
		DischargeFuturePlanVo voFuture = domain.getFuturePlan(form.getGlobalContext().Core.getCurrentCareContext());
		// ---- wdev-8460
		// if (voFuture != null)
		// ------------------
		populateScreenFromData(voFuture);

		if (voFuture == null)
		{
			DischargeDetailsVo voDD = domain.getDischargeDetails(form.getGlobalContext().Core.getCurrentCareContext());
			if (voDD != null)
			{
				voFuture = new DischargeFuturePlanVo();
				//--------------------
				if(voDD.getNurseEnabledInstructions() == null)
				{
					NurseEnabledInstructionsVo voNE = domain.getNurseEnabledInstructions(form.getGlobalContext().Core.getCurrentCareContext());
					if(voNE != null)
					{
						
						voDD.setNurseEnabledInstructions(voNE);
						voFuture.setNurseEnabledInstructions(voNE);
						
						if(voFuture.getNurseEnabledInstructions().getNurseEnabledInstructionsIsNotNull())
							form.GroupFollowUp().setValue(GroupFollowUpEnumeration.rdoNurseYes);
					}
				}
				//--------------------
				voFuture.setDischargeDetails(voDD);

				if (form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCPIsNotNull() && voDD.getDischargingConsultant() == null)
				{
					form.ccDischCons().setValue(form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCP());
					form.cmbDSpecialty().setValue(form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty());
				}
				else
				{
					form.ccDischCons().setValue(voDD.getDischargingConsultant());
					form.cmbDSpecialty().setValue(voDD.getDischargingSpecialty());
				}
				if (voDD.getNurseEnabledInstructionsIsNotNull())
				{
//					 TODO				form.txtNurseEnabled().setValue(voDD.getNurseEnabledInstructions());
					//------
					form.txtNurseEnabled().setValue(voDD.getNurseEnabledInstructions().getNurseEnabledInstructions());
					//-----
					form.GroupFollowUp().setValue(GroupFollowUpEnumeration.rdoNurseYes);
				}
			}
		}
		//-------------
		else
		{	if(voFuture.getDischargeDetails() == null)
			{
				DischargeDetailsVo voDD = domain.getDischargeDetails(form.getGlobalContext().Core.getCurrentCareContext());
				if (voDD != null)
					voFuture.setDischargeDetails(voDD);
			}
			if(voFuture.getNurseEnabledInstructionsIsNotNull() && voFuture.getNurseEnabledInstructions().getNurseEnabledInstructionsIsNotNull())
				form.GroupFollowUp().setValue(GroupFollowUpEnumeration.rdoNurseYes);
		}
		//----------------
		form.getLocalContext().setSelectedRecord(voFuture);

		if (form.getMode().equals(FormMode.EDIT))
			listAllInvestigations_OrderedAndSentOnly();

		updateContextMenus();
		manageReadOnly();
		showHideMedicalCert();
	}

	private void listAllInvestigations_OrderedAndSentOnly()
	{
		OrderInvestigationBookingVoCollection voColl = domain.listResultsAwaited(form.getGlobalContext().Core.getPatientShort(), ConfigFlag.UI.EDISCHARGE_RESULTS_NUM_DAYS.getValue());
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			boolean bFound = false;
			for (int j = 0; j < form.grdResults().getRows().size(); j++)
			{
				if (voColl.get(i).equals(form.grdResults().getRows().get(j).getValue()))
				{
					bFound = true;
					break;
				}
			}

			if (!bFound && voColl.get(i).getInvestigationIsNotNull() && voColl.get(i).getInvestigation().getInvestigationIndexIsNotNull() && voColl.get(i).getInvestigation().getInvestigationIndex().getNameIsNotNull())
			{
				grdResultsRow row = form.grdResults().getRows().newRow();
				row.setColInv(voColl.get(i).getInvestigation().getInvestigationIndex().getName());
				row.setValue(voColl.get(i));
			}
		}
	}

	private void populateScreenFromData(DischargeFuturePlanVo voFuture)
	{
		clearInstanceControls();

		if (voFuture == null)
			return;

		form.grdFuturePlan().getRows().clear();
		for (int i = 0; voFuture.getFollowUpDetailsIsNotNull() && i < voFuture.getFollowUpDetails().size(); i++)
		{
			grdFuturePlanRow row = form.grdFuturePlan().getRows().newRow();

			row.setColHospFollowUp(voFuture.getFollowUpDetails().get(i).getHospitalFollowUpIsNotNull() ? voFuture.getFollowUpDetails().get(i).getHospitalFollowUp() : null);
			row.setColIN(voFuture.getFollowUpDetails().get(i).getFollowUpInValueIsNotNull() ? voFuture.getFollowUpDetails().get(i).getFollowUpInValue() : null);
			row.setColPeriod(voFuture.getFollowUpDetails().get(i).getFollowUpInUnitIsNotNull() ? voFuture.getFollowUpDetails().get(i).getFollowUpInUnit() : null);
			row.getColHCP().clear();
			if (voFuture.getFollowUpDetails().get(i).getFollowUpHCPIsNotNull())
			{
				row.getColHCP().newRow(voFuture.getFollowUpDetails().get(i).getFollowUpHCP(), voFuture.getFollowUpDetails().get(i).getFollowUpHCP().getName().toString());
				row.getColHCP().setValue(voFuture.getFollowUpDetails().get(i).getFollowUpHCP());
			}
			row.setColSpec(voFuture.getFollowUpDetails().get(i).getFollowUpSpecialtyIsNotNull() ? voFuture.getFollowUpDetails().get(i).getFollowUpSpecialty() : null);
			row.getColLoc().clear();
			if (voFuture.getFollowUpDetails().get(i).getLocationIsNotNull())
			{
				row.getColLoc().newRow(voFuture.getFollowUpDetails().get(i).getLocation(), voFuture.getFollowUpDetails().get(i).getLocation().getName().toString());
				row.getColLoc().setValue(voFuture.getFollowUpDetails().get(i).getLocation());
			}

			row.setValue(voFuture.getFollowUpDetails().get(i));
			
			//wdev-9379
			enableDisableNonHospFollowUp(row);
		}

		form.txtHospitalPlan().setValue(voFuture.getHospitalPlanIsNotNull() ? voFuture.getHospitalPlan() : null);
		form.txtActions().setValue(voFuture.getActionsforGPandCommunityIsNotNull() ? voFuture.getActionsforGPandCommunity() : null);

		for (int i = 0; voFuture.getResultsAwaitedIsNotNull() && i < voFuture.getResultsAwaited().size(); i++)
		{
			grdResultsRow row = form.grdResults().getRows().newRow();
			row.setColInv(voFuture.getResultsAwaited().get(i).getInvestigationIsNotNull() && voFuture.getResultsAwaited().get(i).getInvestigation().getInvestigationIndexIsNotNull() ? voFuture.getResultsAwaited().get(i).getInvestigation().getInvestigationIndex().getName() : "");
			row.setColInclude(Boolean.TRUE);
			row.setValue(voFuture.getResultsAwaited().get(i));
		}

		form.txtResults().setValue(voFuture.getOtherResultsAwaitedIsNotNull() ? voFuture.getOtherResultsAwaited() : null);

		form.chkMedicalCertIssued().setValue(voFuture.getMedicalCertificationIssuedIsNotNull() ? (voFuture.getMedicalCertificationIssued().equals(YesNo.YES) ? Boolean.TRUE : Boolean.FALSE) : Boolean.FALSE);
		showHideMedicalCert();

		form.dteExpires().setValue(voFuture.getCertificateExpiresDateIsNotNull() ? voFuture.getCertificateExpiresDate() : null);
		form.intDays().setValue(voFuture.getRefrainFromWorkValueIsNotNull() ? voFuture.getRefrainFromWorkValue() : null);
		form.cmbTimePeriod().setValue(voFuture.getRefrainFromWorkUnitIsNotNull() ? voFuture.getRefrainFromWorkUnit() : null);

		form.txtComments().setValue(voFuture.getCommentsIsNotNull() ? voFuture.getComments() : null);

		form.GroupFollowUp().setValue(voFuture.getWasNurseEnabledDischargeIsNotNull() && voFuture.getWasNurseEnabledDischarge().equals(Boolean.TRUE) ? GroupFollowUpEnumeration.rdoNurseYes : GroupFollowUpEnumeration.rdoNurseNo);
		//-------------
		form.txtNurseEnabled().setValue(voFuture.getNurseEnabledInstructionsIsNotNull() ? voFuture.getNurseEnabledInstructions().getNurseEnabledInstructions() : null);
		//-------------
//		 TODO	form.txtNurseEnabled().setValue(voFuture.getDischargeDetailsIsNotNull() ? voFuture.getDischargeDetails().getNurseEnabledInstructions() : null);

		if (form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCPIsNotNull())
			form.ccDischCons().setValue(form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCP());

		if (voFuture.getDischargeDetailsIsNotNull())
		{
			DischargeDetailsVo voDisch = voFuture.getDischargeDetails();

			form.ccDischCons().setValue(voDisch.getDischargingConsultantIsNotNull() ? voDisch.getDischargingConsultant() : null);
			form.ccSecondCons().setValue(voDisch.getSecondaryDischargingConsultantIsNotNull() ? voDisch.getSecondaryDischargingConsultant() : null);
			form.cmbDSpecialty().setValue(voDisch.getDischargingSpecialtyIsNotNull() ? voDisch.getDischargingSpecialty() : null);
		}
	}

	private void setTooltips()
	{
		EDischargeHINT lkpHint = new EDischargeHINT();

		lkpHint.setId(-1711); // Hospital Plan
		FieldHelpVo voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbHospitalPlanHINT().setTooltip(voHint.getHelpText());

		lkpHint.setId(-1712); // Actions for GP and Community
		voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbActionsHINT().setTooltip(voHint.getHelpText());

		lkpHint.setId(-1713); // Other Result Awaited
		voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbResultsHINT().setTooltip(voHint.getHelpText());

		lkpHint.setId(-1714); // Future Plan Comments
		voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbCommentsHINT().setTooltip(voHint.getHelpText());
	}

	@Override
	protected void onChkMedicalCertIssuedValueChanged() throws PresentationLogicException
	{
		showHideMedicalCert();
	}

	private void showHideMedicalCert()
	{

		boolean bVisible = false;
		if (form.chkMedicalCertIssued().getValue())
			bVisible = true;

		form.lblExpires().setVisible(bVisible);
		form.dteExpires().setVisible(bVisible);
		form.dteExpires().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.lblRefrain().setVisible(bVisible);
		form.intDays().setVisible(bVisible);
		form.intDays().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.cmbTimePeriod().setVisible(bVisible);
		form.cmbTimePeriod().setEnabled(form.getMode().equals(FormMode.EDIT));
	}

	public void initialise()
	{
		if (form.getLocalContext().getbInitialised() == null)
		{
			initializeComponent();

			form.getLocalContext().setbInitialised(Boolean.TRUE);
			
			open();
		}
	}

	@Override
	protected void onGrdResultsGridCheckBoxClicked(int column, grdResultsRow row, boolean isChecked) throws PresentationLogicException
	{
	// TODO Auto-generated method stub

	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newFuturePlan();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				updateFuturePlan();
				break;
		}
	}

	private void updateFuturePlan()
	{}

	private void newFuturePlan()
	{
		form.grdFuturePlan().getRows().newRow();
	}

	protected void updateContextMenus()
	{
		form.getContextMenus().hideAllGenericGridMenuItems();

		form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdFuturePlan().getSelectedRow() != null);
	}

	@Override
	protected void onGrdFuturePlanSelectionChanged() throws PresentationLogicException
	{
	// TODO Auto-generated method stub

	}

	@Override
	protected void onGrdFuturePlanGridQueryComboBoxTextSubmited(int column, grdFuturePlanRow row, String text) throws PresentationLogicException
	{
		if (column == 3) // HCP
			loadHcps(row, text);
		else if (column == 5)// Location
			loadLocations(row, text);
	}

	private void loadLocations(grdFuturePlanRow row, String text)
	{
		LocationLiteVoCollection voColl = domain.listWards(text);
		row.getColLoc().clear();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
			row.getColLoc().newRow(voColl.get(i), voColl.get(i).getName().toString());

		if (voColl != null && voColl.size() == 1)
			row.getColLoc().setValue(voColl.get(0));
		else if (voColl != null && voColl.size() > 1)
			row.getColLoc().showOpened();

	}

	private void loadHcps(grdFuturePlanRow row, String text)
	{
		HcpFilter voFilter = new HcpFilter();
		PersonName voName = new PersonName();
		voName.setSurname(text);
		voFilter.setQueryName(voName);
		voFilter.setHcpType(HcpDisType.MEDICAL);
		HcpLiteVoCollection voColl = domain.listHCPs(voFilter);
		row.getColHCP().clear();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
			row.getColHCP().newRow(voColl.get(i), voColl.get(i).getName().toString());

		if (voColl != null && voColl.size() == 1)
			row.getColHCP().setValue(voColl.get(0));
		else if (voColl != null && voColl.size() > 1)
			row.getColHCP().showOpened();
	}

	@Override
	protected void onRadioButtonGroupFollowUpValueChanged() throws PresentationLogicException
	{
		form.txtNurseEnabled().setEnabled(form.GroupFollowUp().getValue().equals(GroupFollowUpEnumeration.rdoNurseYes));
		if (form.GroupFollowUp().getValue().equals(GroupFollowUpEnumeration.rdoNurseNo))
			form.txtNurseEnabled().setValue(null);
	}

	public void setReadOnly()
	{
		form.getLocalContext().setisReadonly(
		/* form.getGlobalContext().Clinical.geteDischargeCompleted() */form.getGlobalContext().Clinical.geteDischargeClinicalComplete());
		manageReadOnly();
	}

	@Override
	protected void onGrdFuturePlanGridComboBoxSelectionChanged(int column, grdFuturePlanRow row, Object value) throws PresentationLogicException {
		enableDisableNonHospFollowUp(row);
	}

	private void enableDisableNonHospFollowUp(grdFuturePlanRow row)
	{
		if(row.getColHospFollowUp()!=null && row.getColHospFollowUp().equals(YesNo.NO)){
			row.setColINReadOnly(true);
			row.setColPeriodReadOnly(true);
			row.setColHCPReadOnly(true);
			row.setColSpecReadOnly(true);
			row.setColLocReadOnly(true);
			
			row.setColIN(null);
			row.setColPeriod(null);
			row.getColHCP().setValue(null);
			row.setColSpec(null);
			row.getColLoc().setValue(null);
		}
		else{
			row.setColINReadOnly(false);
			row.setColPeriodReadOnly(false);
			row.setColHCPReadOnly(false);
			row.setColSpecReadOnly(false);
			row.setColLocReadOnly(false);
		}
	}

}
