//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3936.28190)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.edischargemedicationonadmissioncomponent;

import ims.clinical.forms.edischargemedicationonadmissioncomponent.GenForm.GroupMedicationChangesEnumeration;
import ims.clinical.forms.edischargemedicationonadmissioncomponent.GenForm.GroupMedicationOnAdmissionEnumeration;
import ims.clinical.vo.EDischargeSTHKSummaryVo;
import ims.clinical.vo.MedicationOnAdmissionAndChangesLiteVo;
import ims.clinical.vo.enums.EDischargeLastEvent;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	//--------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Component interface functions
	//--------------------------------------------------------------------------------------------------------------------------------------------------------

	public void initialise()
	{
		initialize();
		
		open();
	}

	public void initialise(EDischargeSTHKSummaryVo dischargeSummary)
	{
		// Set discharge summary to local context
		form.getLocalContext().setDischargeSummary(dischargeSummary);

		initialise();
		
		open();
	}

	public void refresh()
	{
		open();
	}

	/**
	 * Component interface function used to set the CareContext 
	 */
	public void setCareContext(CareContextRefVo careContext)
	{
		form.getLocalContext().setCareContext(careContext);
	}

	/**
	 * Component interface function used to return current value of the medication (MedicationOnAdmissionAndChangesLiteVo)
	 * CAUTION: Might not be the value stored in the data base (especially if the component is in edit mode)
	 */
	public MedicationOnAdmissionAndChangesLiteVo getValue()
	{
		return form.getLocalContext().getMedication();
	}

	/**
	 * 	Component interface function used to set the component in read-only mode
	 */
	public void setReadOnly()
	{
		form.getLocalContext().setReadOnlyMode(Boolean.TRUE);
		form.setMode(FormMode.VIEW);
	}

	/**
	 *	Component interface function used to set the component in read-only or read-write mode
	 */
	public void setReadOnly(Boolean value)
	{
		form.getLocalContext().setReadOnlyMode(value);
		form.setMode(FormMode.VIEW);
	}

	public EDischargeLastEvent getLastEvent()
	{
		return form.getLocalContext().getLastEvent();
	}

	public void clearLastEvent()
	{
		form.getLocalContext().setLastEvent(null);
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers
	//--------------------------------------------------------------------------------------------------------------------------------------------------------
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
//		initialize();
//		
//		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		// No need to clear the local context as this is a SIP pattern form
		// Set form mode to EDIT mode
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		// Will edit current local context as this is a SIP pattern form
		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
			open();
	}

	@Override
	protected void onChkCompleteValueChanged() throws PresentationLogicException
	{
		// Validate the form for mandatory text entered
		if (Boolean.TRUE.equals(form.chkComplete().getValue()))
		{
			String[] errors = validateUIRules();
			
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
			}
		}
		
	}

	@Override
	protected void onRadioButtonGroupMedicationChangesValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}


	@Override
	protected void onRadioButtonGroupMedicationOnAdmissionValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}


	//--------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//--------------------------------------------------------------------------------------------------------------------------------------------------------

	public void initialize()
	{
		form.getLocalContext().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
	}
	
	public void open()
	{
		// Get the medication from data base into local context
		form.getLocalContext().setMedication(domain.getMedication(form.getLocalContext().getCareContext()));
		
		// Display the medication data on form
		populateScreenFromData(form.getLocalContext().getMedication());
		
		// Set form to VIEW mode
		form.setMode(FormMode.VIEW);
	}

	private boolean save() throws PresentationLogicException
	{
		// Get data from screen
		form.getLocalContext().setMedication(populateDataFromScreen(form.getLocalContext().getMedication()));
		
		// Validate & custom validate the VO
		String[] errors = validateUIRules();
		errors = form.getLocalContext().getMedication().validate(errors);
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		// Try to save
		try
		{
			form.getLocalContext().setMedication(domain.saveMedication(form.getLocalContext().getMedication(), form.getLocalContext().getDischargeSummary()));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}

		form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
		form.fireCustomControlValueChanged();
		
		return true;
	}

	private void updateControlsState()
	{
		// We need to separate conditions by mode
		
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNew().setVisible(!form.getLocalContext().getMedicationIsNotNull());
			form.btnEdit().setVisible(form.getLocalContext().getMedicationIsNotNull());
			
			form.btnNew().setEnabled(form.getLocalContext().getReadOnlyMode() == null || !form.getLocalContext().getReadOnlyMode());
			form.btnEdit().setEnabled(form.getLocalContext().getReadOnlyMode() == null ||  !form.getLocalContext().getReadOnlyMode());
		}
		else
		{
			form.btnSave().setVisible(true);
			form.btnSave().setEnabled(form.getLocalContext().getReadOnlyMode() == null ||  !form.getLocalContext().getReadOnlyMode());
			
			form.txtMedAdmission().setEnabled(GroupMedicationOnAdmissionEnumeration.rdoMedicationOnAdmissionYes.equals(form.GroupMedicationOnAdmission().getValue()));
			form.txtMedicationChanged().setEnabled(GroupMedicationChangesEnumeration.rdoMedicationChangesYes.equals(form.GroupMedicationChanges().getValue()));
		}
	}

	private void clearInstanceControls()
	{
		form.GroupMedicationOnAdmission().setValue(null);
		form.GroupMedicationChanges().setValue(null);
		form.txtMedAdmission().setValue(null);
		form.txtMedicationChanged().setValue(null);
		form.chkComplete().setValue(null);
	}

	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Data exchange functions
	//--------------------------------------------------------------------------------------------------------------------------------------------------------
	private void populateScreenFromData(MedicationOnAdmissionAndChangesLiteVo medication)
	{
		// Clear instance controls
		clearInstanceControls();
		
		// Terminate if the parameter is null
		if (medication == null)
			return;
		
		
		// Display the medication

		// Set the MedicationOnAdmission radio button value
		if (YesNo.YES.equals(medication.getRecordMedicationOnAdmission()))
		{
			form.GroupMedicationOnAdmission().setValue(GroupMedicationOnAdmissionEnumeration.rdoMedicationOnAdmissionYes);
		}
		else if (YesNo.NO.equals(medication.getRecordMedicationOnAdmission()))
		{
			form.GroupMedicationOnAdmission().setValue(GroupMedicationOnAdmissionEnumeration.rdoMedicationOnAdmissionNo);
		}
		else
		{
			form.GroupMedicationOnAdmission().setValue(null);
		}
		
		// Set the MedicationOnAdmission text value
		form.txtMedAdmission().setValue(medication.getMedicationOnAdmission());

		
		// Set the MedicationChanges radio button value
		if (YesNo.YES.equals(medication.getRecordMedicationChanges()))
		{
			form.GroupMedicationChanges().setValue(GroupMedicationChangesEnumeration.rdoMedicationChangesYes);
		}
		else if (YesNo.NO.equals(medication.getRecordMedicationChanges()))
		{
			form.GroupMedicationChanges().setValue(GroupMedicationChangesEnumeration.rdoMedicationChangesNo);
		}
		else
		{
			form.GroupMedicationChanges().setValue(null);
		}
		
		// Set the MedicationChanges text value
		form.txtMedicationChanged().setValue(medication.getMedicationChanges());
		
		// Set the check-box Complete value 
		form.chkComplete().setValue(Boolean.TRUE.equals(medication.getIsComplete()));
	}

	private MedicationOnAdmissionAndChangesLiteVo populateDataFromScreen(MedicationOnAdmissionAndChangesLiteVo medication)
	{
		// Create a new VO if one passed is null
		if (medication == null)
			medication = new MedicationOnAdmissionAndChangesLiteVo();
		
		// Set the care context
		medication.setCareContext(form.getLocalContext().getCareContext());

		// Get the MedicaitonOnAdmission radio button
		if (GroupMedicationOnAdmissionEnumeration.rdoMedicationOnAdmissionYes.equals(form.GroupMedicationOnAdmission().getValue()))
		{
			medication.setRecordMedicationOnAdmission(YesNo.YES);
		}
		else if (GroupMedicationOnAdmissionEnumeration.rdoMedicationOnAdmissionNo.equals(form.GroupMedicationOnAdmission().getValue()))
		{
			medication.setRecordMedicationOnAdmission(YesNo.NO);
		}
		else
		{
			medication.setRecordMedicationOnAdmission(null);
		}
		
		// Get MedicationOnAdmission text
		medication.setMedicationOnAdmission(form.txtMedAdmission().getValue());
		
		// Get the MedicationChanges radio button
		if (GroupMedicationChangesEnumeration.rdoMedicationChangesYes.equals(form.GroupMedicationChanges().getValue()))
		{
			medication.setRecordMedicationChanges(YesNo.YES);
		}
		else if (GroupMedicationChangesEnumeration.rdoMedicationChangesNo.equals(form.GroupMedicationChanges().getValue()))
		{
			medication.setRecordMedicationChanges(YesNo.NO);
		}
		else
		{
			medication.setRecordMedicationChanges(null);
		}
		
		// Get the MedicationChanges text
		medication.setMedicationChanges(form.txtMedicationChanged().getValue());
		
		// Get the Complete value
		medication.setIsComplete(form.chkComplete().getValue());

		// Return the VO
		return medication;
	}


	private String[] validateUIRules()
	{
		// Create a new list of arrays
		ArrayList<String> listOfErrors = new ArrayList<String>();

		// Check to see if the MedicationOnAdmission is mandatory and completed
		if (GroupMedicationOnAdmissionEnumeration.rdoMedicationOnAdmissionYes.equals(form.GroupMedicationOnAdmission().getValue())
				&& (form.txtMedAdmission().getValue() == null || form.txtMedAdmission().getValue().length() == 0))
		{
			listOfErrors.add("Medication On Admission is mandatory");
		}
		
		// Check to see if the MedicationChanges is mandatory and completed
		/*if (GroupMedicationChangesEnumeration.rdoMedicationChangesYes.equals(form.GroupMedicationChanges().getValue())
				&& (form.txtMedicationChanged().getValue() == null || form.txtMedicationChanged().getValue().length() == 0))
		{
			listOfErrors.add("Medication Changes is mandatory");
		}*/


		// Check to see if any errors were found
		int errorCount = listOfErrors.size();

		if (errorCount == 0)
			return null;

		// Transform the error list into an array
		String[] errors = new String[errorCount];

		for (int i = 0; i < errorCount; i++)
		{
			errors[i] = listOfErrors.get(i);
		}

		// Return the array of errors
		return errors;
	}
}
