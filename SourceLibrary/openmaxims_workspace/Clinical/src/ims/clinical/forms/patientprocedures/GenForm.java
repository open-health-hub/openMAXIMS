//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.patientprocedures;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbLateralityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.LateralityLRB getValue()
		{
			return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.LateralityLRB value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbPerfByComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.interfaces.IMos value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.vo.interfaces.IMos value)
		{
			return super.control.removeRow(value);
		}
		public ims.vo.interfaces.IMos getValue()
		{
			return (ims.vo.interfaces.IMos)super.control.getValue();
		}
		public void setValue(ims.vo.interfaces.IMos value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbProcedureComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ProcedureLiteVo getValue()
		{
			return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ProcedureLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdProcedureRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProcedureRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolDateOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Date getcolDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setcolDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellcolDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolProcedureReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolProcedureOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolProcedure()
		{
			return (String)super.row.get(1);
		}
		public void setcolProcedure(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolProcedureTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.PatientProcedureVo getValue()
		{
			return (ims.core.vo.PatientProcedureVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientProcedureVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProcedureRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProcedureRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProcedureRow get(int index)
		{
			return new grdProcedureRow(super.collection.get(index));
		}
		public grdProcedureRow newRow()
		{
			return new grdProcedureRow(super.collection.newRow());
		}
		public grdProcedureRow newRow(boolean autoSelect)
		{
			return new grdProcedureRow(super.collection.newRow(autoSelect));
		}
		public grdProcedureRow newRowAt(int index)
		{
			return new grdProcedureRow(super.collection.newRowAt(index));
		}
		public grdProcedureRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProcedureRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProcedureGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.PatientProcedureVo[] getValues()
		{
			ims.core.vo.PatientProcedureVo[] listOfValues = new ims.core.vo.PatientProcedureVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.PatientProcedureVo getValue()
		{
			return (ims.core.vo.PatientProcedureVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientProcedureVo value)
		{
			super.grid.setValue(value);
		}
		public grdProcedureRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProcedureRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProcedureRowCollection getRows()
		{
			return new grdProcedureRowCollection(super.grid.getRows());
		}
		public grdProcedureRow getRowByValue(ims.core.vo.PatientProcedureVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProcedureRow(row);
		}
		public void setcolDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdImpDevInsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdImpDevInsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColImplDevInsertedReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColImplDevInsertedReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColImplDevInsertedOpened()
		{
			super.row.showOpened(0);
		}
		public String getColImplDevInserted()
		{
			return (String)super.row.get(0);
		}
		public void setColImplDevInserted(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColImplDevInsertedTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.PatientCharacteristicVo getValue()
		{
			return (ims.core.vo.PatientCharacteristicVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientCharacteristicVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdImpDevInsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdImpDevInsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdImpDevInsRow get(int index)
		{
			return new grdImpDevInsRow(super.collection.get(index));
		}
		public grdImpDevInsRow newRow()
		{
			return new grdImpDevInsRow(super.collection.newRow());
		}
		public grdImpDevInsRow newRow(boolean autoSelect)
		{
			return new grdImpDevInsRow(super.collection.newRow(autoSelect));
		}
		public grdImpDevInsRow newRowAt(int index)
		{
			return new grdImpDevInsRow(super.collection.newRowAt(index));
		}
		public grdImpDevInsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdImpDevInsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdImpDevInsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.PatientCharacteristicVo[] getValues()
		{
			ims.core.vo.PatientCharacteristicVo[] listOfValues = new ims.core.vo.PatientCharacteristicVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.PatientCharacteristicVo getValue()
		{
			return (ims.core.vo.PatientCharacteristicVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientCharacteristicVo value)
		{
			super.grid.setValue(value);
		}
		public grdImpDevInsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdImpDevInsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdImpDevInsRowCollection getRows()
		{
			return new grdImpDevInsRowCollection(super.grid.getRows());
		}
		public grdImpDevInsRow getRowByValue(ims.core.vo.PatientCharacteristicVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdImpDevInsRow(row);
		}
		public void setColImplDevInsertedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColImplDevInsertedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdImpDevRemRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdImpDevRemRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColImplDevRemovedReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColImplDevRemovedReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColImplDevRemovedOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getColImplDevRemoved()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellColImplDevRemovedTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.PatientCharacteristicVo getValue()
		{
			return (ims.core.vo.PatientCharacteristicVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientCharacteristicVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdImpDevRemRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdImpDevRemRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdImpDevRemRow get(int index)
		{
			return new grdImpDevRemRow(super.collection.get(index));
		}
		public grdImpDevRemRow newRow()
		{
			return new grdImpDevRemRow(super.collection.newRow());
		}
		public grdImpDevRemRow newRow(boolean autoSelect)
		{
			return new grdImpDevRemRow(super.collection.newRow(autoSelect));
		}
		public grdImpDevRemRow newRowAt(int index)
		{
			return new grdImpDevRemRow(super.collection.newRowAt(index));
		}
		public grdImpDevRemRow newRowAt(int index, boolean autoSelect)
		{
			return new grdImpDevRemRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdImpDevRemGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		public ims.core.vo.PatientCharacteristicVo[] getValues()
		{
			ims.core.vo.PatientCharacteristicVo[] listOfValues = new ims.core.vo.PatientCharacteristicVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.PatientCharacteristicVo getValue()
		{
			return (ims.core.vo.PatientCharacteristicVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientCharacteristicVo value)
		{
			super.grid.setValue(value);
		}
		public grdImpDevRemRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdImpDevRemRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdImpDevRemRowCollection getRows()
		{
			return new grdImpDevRemRowCollection(super.grid.getRows());
		}
		public grdImpDevRemRow getRowByValue(ims.core.vo.PatientCharacteristicVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdImpDevRemRow(row);
		}
		public void setColImplDevRemovedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColImplDevRemovedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdOtherHcpRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdOtherHcpRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColHcpReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColHcpReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColHcpOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getColHcp()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellColHcpTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdOtherHcpRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdOtherHcpRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdOtherHcpRow get(int index)
		{
			return new grdOtherHcpRow(super.collection.get(index));
		}
		public grdOtherHcpRow newRow()
		{
			return new grdOtherHcpRow(super.collection.newRow());
		}
		public grdOtherHcpRow newRow(boolean autoSelect)
		{
			return new grdOtherHcpRow(super.collection.newRow(autoSelect));
		}
		public grdOtherHcpRow newRowAt(int index)
		{
			return new grdOtherHcpRow(super.collection.newRowAt(index));
		}
		public grdOtherHcpRow newRowAt(int index, boolean autoSelect)
		{
			return new grdOtherHcpRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdOtherHcpGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		public ims.core.vo.HcpLiteVoCollection getValues()
		{
			ims.core.vo.HcpLiteVoCollection listOfValues = new ims.core.vo.HcpLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdOtherHcpRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdOtherHcpRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdOtherHcpRowCollection getRows()
		{
			return new grdOtherHcpRowCollection(super.grid.getRows());
		}
		public grdOtherHcpRow getRowByValue(ims.core.vo.HcpLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdOtherHcpRow(row);
		}
		public void setColHcpHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColHcpHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getpatientProcedure();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuImplantDevicesAddGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuImplantDevicesAddGridADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuImplantDevicesAddGrid.add(contextMenus.contextMenuImplantDevicesAddGridADDItem);
		contextMenus.contextMenuImplantDevicesAddGridREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuImplantDevicesAddGrid.add(contextMenus.contextMenuImplantDevicesAddGridREMOVEItem);
		form.registerMenu(contextMenus.contextMenuImplantDevicesAddGrid);
		contextMenus.contextMenuImplantDevicesRemoveGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuImplantDevicesRemoveGridADDItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuImplantDevicesRemoveGrid.add(contextMenus.contextMenuImplantDevicesRemoveGridADDItem);
		contextMenus.contextMenuImplantDevicesRemoveGridREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuImplantDevicesRemoveGrid.add(contextMenus.contextMenuImplantDevicesRemoveGridREMOVEItem);
		form.registerMenu(contextMenus.contextMenuImplantDevicesRemoveGrid);
		contextMenus.contextMenuHcpGrid = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuHcpGridADDItem = factory.createMenuItem(startControlID.intValue() + 5, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuHcpGrid.add(contextMenus.contextMenuHcpGridADDItem);
		contextMenus.contextMenuHcpGridREMOVEItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuHcpGrid.add(contextMenus.contextMenuHcpGridREMOVEItem);
		form.registerMenu(contextMenus.contextMenuHcpGrid);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 312, 8, 528, 576, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 520, 312, 64, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(8), new Integer(520), new Integer(312), new Integer(64), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 3), m_customControlAuthoringInfoForm, instance1 } );
		ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 3), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringInfoControl);
		Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 328, 66, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 328, 98, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Performed By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 328, 128, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Notes:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 512, 34, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 608, 66, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Site:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 608, 98, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 328, 34, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 764, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 680, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 672, 64, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 416, 128, 408, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// PartialDateBox Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 416, 32, 88, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 672, 96, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbLateralityTemp);
		cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
		super.addComboBox(cmbLaterality);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 416, 96, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbPerfByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbPerfByTemp);
		qmbPerfByComboBox qmbPerfBy = (qmbPerfByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbPerfByComboBox.class, m_qmbPerfByTemp);
		super.addComboBox(qmbPerfBy);
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 416, 64, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbProcedureTemp);
		qmbProcedureComboBox qmbProcedure = (qmbProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureComboBox.class, m_qmbProcedureTemp);
		super.addComboBox(qmbProcedure);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 608, 34, 136, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Significant Procedure", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 288, 504, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdProcedureTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.EDITABLE, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdProcedureTemp);
		grdProcedureGrid grdProcedure = (grdProcedureGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProcedureGrid.class, m_grdProcedureTemp);
		grdProcedure.addDateColumn("Date", 0, 0, 80, true, true, null, false, 1, true);
		grdProcedure.addStringColumn("Procedure", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdProcedure);
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 328, 236, 240, 188, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdImpDevInsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuImplantDevicesAddGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdImpDevInsTemp);
		grdImpDevInsGrid grdImpDevIns = (grdImpDevInsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdImpDevInsGrid.class, m_grdImpDevInsTemp);
		grdImpDevIns.addStringColumn("Implanted Devices Inserted", 0, 0, -1, false, false, 0, 255, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdImpDevIns);
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 584, 232, 240, 188, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdImpDevRemTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuImplantDevicesRemoveGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdImpDevRemTemp);
		grdImpDevRemGrid grdImpDevRem = (grdImpDevRemGrid)GridFlyweightFactory.getInstance().createGridBridge(grdImpDevRemGrid.class, m_grdImpDevRemTemp);
		grdImpDevRem.addMutableComboBoxColumn("Implanted Devices Removed", 0, 0, -1, false, true, false, false, false, true, -1);
		super.addGrid(grdImpDevRem);
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 328, 432, 496, 136, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdOtherHcpTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuHcpGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdOtherHcpTemp);
		grdOtherHcpGrid grdOtherHcp = (grdOtherHcpGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOtherHcpGrid.class, m_grdOtherHcpTemp);
		grdOtherHcp.addMutableComboBoxColumn("Other HCP's Present", 0, 0, -1, false, true, true, false, true, true, -1);
		super.addGrid(grdOtherHcp);

		// Time Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 552, 32, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean iscustomControlAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setcustomControlAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public Button btnNew()
	{
		return (Button)super.getControl(9);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(10);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(11);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(12);
	}
	public TextBox txtSite()
	{
		return (TextBox)super.getControl(13);
	}
	public TextBox txtNotes()
	{
		return (TextBox)super.getControl(14);
	}
	public PartialDateBox pdtProcedure()
	{
		return (PartialDateBox)super.getControl(15);
	}
	public cmbLateralityComboBox cmbLaterality()
	{
		return (cmbLateralityComboBox)super.getComboBox(0);
	}
	public qmbPerfByComboBox qmbPerfBy()
	{
		return (qmbPerfByComboBox)super.getComboBox(1);
	}
	public qmbProcedureComboBox qmbProcedure()
	{
		return (qmbProcedureComboBox)super.getComboBox(2);
	}
	public CheckBox chkSignifProc()
	{
		return (CheckBox)super.getControl(19);
	}
	public grdProcedureGrid grdProcedure()
	{
		return (grdProcedureGrid)super.getGrid(0);
	}
	public grdImpDevInsGrid grdImpDevIns()
	{
		return (grdImpDevInsGrid)super.getGrid(1);
	}
	public grdImpDevRemGrid grdImpDevRem()
	{
		return (grdImpDevRemGrid)super.getGrid(2);
	}
	public grdOtherHcpGrid grdOtherHcp()
	{
		return (grdOtherHcpGrid)super.getGrid(3);
	}
	public TimeControl tmeProcedure()
	{
		return (TimeControl)super.getControl(24);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
				DeleteDisabled = new ImageHelper(102177, "Images/Core/delete_dis.png", new Integer(16), new Integer(16));
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image NewDisabled;
			public final ims.framework.utils.Image DeleteDisabled;
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image Delete;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_patientProcedure = new ims.framework.ContextVariable("patientProcedure", prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier + "");
		}
		
		public boolean getpatientProcedureIsNotNull()
		{
			return !cxl_patientProcedure.getValueIsNull(context);
		}
		public ims.core.vo.PatientProcedureVo getpatientProcedure()
		{
			return (ims.core.vo.PatientProcedureVo)cxl_patientProcedure.getValue(context);
		}
		public void setpatientProcedure(ims.core.vo.PatientProcedureVo value)
		{
			cxl_patientProcedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_patientProcedure = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class ImplantDevicesAddGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 1;
			public static final int REMOVE = 2;
		}
		public void disableAllImplantDevicesAddGridMenuItems()
		{
			this.contextMenuImplantDevicesAddGridADDItem.setEnabled(false);
			this.contextMenuImplantDevicesAddGridREMOVEItem.setEnabled(false);
		}
		public void hideAllImplantDevicesAddGridMenuItems()
		{
			this.contextMenuImplantDevicesAddGridADDItem.setVisible(false);
			this.contextMenuImplantDevicesAddGridREMOVEItem.setVisible(false);
		}
		private Menu contextMenuImplantDevicesAddGrid;
		public MenuItem getImplantDevicesAddGridADDItem()
		{
			return this.contextMenuImplantDevicesAddGridADDItem;
		}
		private MenuItem contextMenuImplantDevicesAddGridADDItem;
		public MenuItem getImplantDevicesAddGridREMOVEItem()
		{
			return this.contextMenuImplantDevicesAddGridREMOVEItem;
		}
		private MenuItem contextMenuImplantDevicesAddGridREMOVEItem;
		public final class ImplantDevicesRemoveGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 3;
			public static final int REMOVE = 4;
		}
		public void disableAllImplantDevicesRemoveGridMenuItems()
		{
			this.contextMenuImplantDevicesRemoveGridADDItem.setEnabled(false);
			this.contextMenuImplantDevicesRemoveGridREMOVEItem.setEnabled(false);
		}
		public void hideAllImplantDevicesRemoveGridMenuItems()
		{
			this.contextMenuImplantDevicesRemoveGridADDItem.setVisible(false);
			this.contextMenuImplantDevicesRemoveGridREMOVEItem.setVisible(false);
		}
		private Menu contextMenuImplantDevicesRemoveGrid;
		public MenuItem getImplantDevicesRemoveGridADDItem()
		{
			return this.contextMenuImplantDevicesRemoveGridADDItem;
		}
		private MenuItem contextMenuImplantDevicesRemoveGridADDItem;
		public MenuItem getImplantDevicesRemoveGridREMOVEItem()
		{
			return this.contextMenuImplantDevicesRemoveGridREMOVEItem;
		}
		private MenuItem contextMenuImplantDevicesRemoveGridREMOVEItem;
		public final class HcpGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 5;
			public static final int REMOVE = 6;
		}
		public void disableAllHcpGridMenuItems()
		{
			this.contextMenuHcpGridADDItem.setEnabled(false);
			this.contextMenuHcpGridREMOVEItem.setEnabled(false);
		}
		public void hideAllHcpGridMenuItems()
		{
			this.contextMenuHcpGridADDItem.setVisible(false);
			this.contextMenuHcpGridREMOVEItem.setVisible(false);
		}
		private Menu contextMenuHcpGrid;
		public MenuItem getHcpGridADDItem()
		{
			return this.contextMenuHcpGridADDItem;
		}
		private MenuItem contextMenuHcpGridADDItem;
		public MenuItem getHcpGridREMOVEItem()
		{
			return this.contextMenuHcpGridREMOVEItem;
		}
		private MenuItem contextMenuHcpGridREMOVEItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[102];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-ID", "ID_PatientProcedure");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCDATE", "ProcDate");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-SITETEXT", "SiteText");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCLATERALITY", "ProcLaterality");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCTIME", "ProcTime");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-NOTES", "Notes");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCEDUREURGENCY", "ProcedureUrgency");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-DATEPLANNED", "DatePlanned");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PLANNEDPROC", "PlannedProc");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCSITE", "ProcSite");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PEFORMEDBY", "PeformedBy");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCEDUREINTENT", "ProcedureIntent");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-LOCATION", "Location");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-SPECIALTY", "Specialty");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-CONFIRMEDSTATUS", "ConfirmedStatus");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-CONFIRMEDDATETIME", "ConfirmedDateTime");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-EXCLUDEFROMOTHERS", "ExcludeFromOthers");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCLOCATION", "ProcLocation");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-CANCELLEDDATE", "CancelledDate");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-CANCELLEDREASON", "CancelledReason");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-SURGEONSGRADE", "SurgeonsGrade");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCENDDATE", "ProcEndDate");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-PROCENDTIME", "ProcEndTime");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProcedures.__internal_x_context__patientProcedure_" + componentIdentifier, "BO-1003100017-SIGNIFPROC", "SignifProc");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
