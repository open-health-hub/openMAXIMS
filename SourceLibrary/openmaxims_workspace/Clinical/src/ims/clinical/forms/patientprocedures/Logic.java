//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 50202.1231)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.patientprocedures;

import ims.configuration.gen.ConfigFlag;
import ims.clinical.forms.patientprocedures.BaseLogic;
import ims.clinical.forms.patientprocedures.GenForm;
import ims.clinical.forms.patientprocedures.GenForm.grdOtherHcpRow;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientCharacteristicVo;
import ims.core.vo.PatientCharacteristicVoCollection;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.PatientProcedureVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.lookups.PatientCharacteresticType;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}
	
	private void open() 
	{
		//form.btnUpdate().setEnabled(false);//wdev-15298
		this.clearScreen();
		populateProceduresGrid();
		setRemoveMenuVisibilities();
		
		// Reselect the patient procedure
		form.getLocalContext().setpatientProcedure(domain.getPatientProcedure(form.getLocalContext().getpatientProcedure()));
		form.grdProcedure().setValue(form.getLocalContext().getpatientProcedure());
		populateScreenFromData(form.getLocalContext().getpatientProcedure());
		
		form.setMode(FormMode.VIEW);
	}

	private void setRemoveMenuVisibilities() 
	{
		setInsertedRemoveVisibility();
		setRemovedRemoveVisibility();
		setHcpRemoveVisibility();
	}
	
	private void populateProceduresGrid() 
	{
		form.grdProcedure().getRows().clear();
		
		PatientProcedureVoCollection voCollProcedures = domain.listClinicalContactProcedures(form.getGlobalContext().Core.getCurrentClinicalContact(), form.getGlobalContext().Core.getCurrentCareContext());
		if(voCollProcedures != null)
		{
			GenForm.grdProcedureRow row = null;
			for(int i=0;i<voCollProcedures.size();i++)
			{
				row = form.grdProcedure().getRows().newRow();
				if (voCollProcedures.get(i).getProcDateIsNotNull())
					row.setcolDate(voCollProcedures.get(i).getProcDate().toDate());
				if(voCollProcedures.get(i).getProcedure() != null)
					row.setcolProcedure(voCollProcedures.get(i).getProcedure().getProcedureName());
				else if (voCollProcedures.get(i).getProcedure() == null)
					row.setcolProcedure(voCollProcedures.get(i).getProcedureDescription());
					
				row.setValue(voCollProcedures.get(i));
			}
		}	
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		this.clearScreen();
		
		form.grdProcedure().setValue(null);
		
		form.customControlAuthoringInfo().initializeComponent();
		
		form.pdtProcedure().setValue(new PartialDate(new Date()));
		form.tmeProcedure().setValue(new Time());
		
		//form.btnUpdate().setEnabled(false);//wdev-15298
		
		//WDEV-11545 - Set local context to null when creating a new PatientProcedure
		form.getLocalContext().setpatientProcedure(null);
		form.setMode(FormMode.EDIT);
		form.setcustomControlAuthoringInfoEnabled(true);
	}
	
	protected void onGrdProcedureSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		//form.btnUpdate().setEnabled(true);//wdev-15298
		populateScreenFromData(form.grdProcedure().getValue());
		form.getLocalContext().setpatientProcedure(form.grdProcedure().getValue());
		
		updateControlsState();//wdev-15298
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//form.btnUpdate().setEnabled(false);//wdev-15298
		form.setMode(FormMode.EDIT);
		form.setcustomControlAuthoringInfoEnabled(false);
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		form.setMode(FormMode.VIEW);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PatientProcedureVo voProcedure = form.getLocalContext().getpatientProcedure();
		
		//Check to see the Performing HCP is not in the Other HCP collection
		for(int i=0 ; i < form.grdOtherHcp().getRows().size() ; i++)
		{
			
			//WDEV-4466
			if(form.qmbPerfBy().getValue()== null)
				break;
			
			if ( form.grdOtherHcp().getRows().get(i).getColHcp().getValue() != null)
			{
				HcpLiteVo voHcpLite = (HcpLiteVo) form.grdOtherHcp().getRows().get(i).getColHcp().getValue(); 
				//WDEV-9946
				if(form.qmbPerfBy().getValue().getIMosHcpId() != null)
				{
					if(voHcpLite.getID_Hcp().equals(form.qmbPerfBy().getValue().getIMosHcpId()))
					{
						engine.showMessage("You cannot enter your Performing HCP in the Other HCP's present grid. Please update your entry and save again.");
						return;
					}					
				}
			}
		}		

		voProcedure = this.populateDataFromScreen(voProcedure);
		voProcedure.setProcedureDescription(form.qmbProcedure().getEditedText());
		if (voProcedure.getProcedureIsNotNull() && !voProcedure.getProcedure().getID_ProcedureIsNotNull())
			voProcedure.setProcedure(null);
		
		if (voProcedure.getID_PatientProcedure() == null)
		{
			// Set default data
			voProcedure.setProcedureStatus(PatientProcedureStatus.PERFORMED);
			voProcedure.setInfoSource(SourceofInformation.CLINICALCONTACT);
		}
		
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			voProcedure.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		else if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			voProcedure.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		String[] arrErrors = voProcedure.validate();
		if( arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try 
		{
			form.getLocalContext().setpatientProcedure(domain.savePatientProcedure(voProcedure, form.getGlobalContext().Core.getPatientShort()));
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		catch (UniqueKeyViolationException e1)
		{
			engine.showMessage(e1.toString());
			open();
			return;
		}
		
		
		open();
		form.setMode(FormMode.VIEW);
	}
	
	protected void onQmbPerfByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbPerfBy().clear();
		
		HcpLiteVoCollection hcpColl = domain.listHcpLiteByName(value);
		for (int i = 0; i < hcpColl.size(); i++)
		{
			HcpLiteVo hcp = hcpColl.get(i);
			form.qmbPerfBy().newRow(hcp, hcp.toString());			
		}
		if (hcpColl.size() == 1)
		{
			form.qmbPerfBy().setValue(hcpColl.get(0));
		}
		else if (hcpColl.size() > 1)
		{
			form.qmbPerfBy().showOpened();		
		}		
	}

	protected void onQmbProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbProcedure().clear();
		ProcedureLiteVoCollection procColl;
		try 
		{
			procColl = domain.listProcedures(value);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		if(procColl != null)
		{
			for (int i = 0; i < procColl.size(); i++)
			{
				ProcedureLiteVo proc = procColl.get(i);
				form.qmbProcedure().newRow(proc, proc.getProcedureName());			
			}
			if (procColl.size() == 1)
			{
				form.qmbProcedure().setValue(procColl.get(0));
			}
			else if (procColl.size() > 1)
			{
				form.qmbProcedure().showOpened();		
			}
		}
		else
		{
			engine.showMessage("No procedures found.");
		}
	}
	
	protected void clearScreen() 
	{
		super.clearScreen();
		
		form.grdImpDevIns().getRows().clear();
		form.grdImpDevRem().getRows().clear();
		form.grdOtherHcp().getRows().clear();
		form.txtSite().setValue(null);
		form.tmeProcedure().setValue(null);
		form.qmbProcedure().setValue(null);
		form.qmbPerfBy().setValue(null);
		form.customControlAuthoringInfo().setValue(null);
	}

	protected PatientProcedureVo populateDataFromScreen(PatientProcedureVo value) 
	{	
		if (value == null)
		{
			value = new PatientProcedureVo();
			
			value.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			value.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			value.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		}
		value = super.populateDataFromScreen(value);
		
		value.setAuthoringInformation(form.customControlAuthoringInfo().getValue());

		//Inserted
		for(int x = 0; x < form.grdImpDevIns().getRows().size(); x++)
		{
			//28/10/2005 - Fix. Avoid saving empty rows
			String implDevice = form.grdImpDevIns().getRows().get(x).getColImplDevInserted();
			if(implDevice != null && implDevice.trim().equals("") == false)
			{
				PatientCharacteristicVo rowValue = form.grdImpDevIns().getRows().get(x).getValue();
				if(rowValue == null)
					rowValue = new ims.core.vo.PatientCharacteristicVo();
	
				rowValue.setCharacteresticType(PatientCharacteresticType.IMPLANTEDDEVICE);
				if(rowValue.getDateInserted() == null)
					rowValue.setDateInserted(new Date());
				// WDEV-4469	
				if(rowValue.getPatient() == null)
					rowValue.setPatient(form.getGlobalContext().Core.getPatientShort().toPatientRefVo());
				
				if (rowValue.getIsRemoved() == null)
					rowValue.setIsRemoved(Boolean.FALSE);
						
				//Make sure not Removed = TRUE
				if ( (rowValue.getIsRemovedIsNotNull())
						&& ( ! rowValue.getIsRemoved().booleanValue()))
					rowValue.setIsRemoved(Boolean.FALSE);
				
				rowValue.setImplantedDevice(form.grdImpDevIns().getRows().get(x).getColImplDevInserted());
				rowValue.setIsActive(Boolean.TRUE);
				
				if ( (rowValue.getCareContext() == null) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()) )
					rowValue.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				
				if(value.getInsertedDevices() == null)
					value.setInsertedDevices(new PatientCharacteristicVoCollection());
				if(value.getInsertedDevicesIsNotNull())
				{
					if (value.getInsertedDevices().add(rowValue) == false)//It is already in the collection so need to update it.
					{
						int nIndex = value.getInsertedDevices().indexOf(rowValue);
						value.getInsertedDevices().set(nIndex, rowValue);
					}
				}
			}
		}
		//Now check Inserted grid for anything that was Removed.
		if(value.getInsertedDevices() != null)
		{
			PatientCharacteristicVoCollection voColl = value.getInsertedDevices();
			for(int i = 0; i < voColl.size(); i++)
			{
				PatientCharacteristicVo voPatChar = voColl.get(i);
				boolean bFound = false;
				
				for(int j = 0; j < form.grdImpDevIns().getRows().size(); j++)
				{
					//Look for a match in the Grid and the Collection, if there is not one the Coll entry was removed Mark it as such
					if (   (voPatChar.getID_PatientCharacteristicIsNotNull()) 
						&& (form.grdImpDevIns().getRows().get(j).getValue() != null)
						&& (form.grdImpDevIns().getRows().get(j).getValue().getID_PatientCharacteristicIsNotNull())
						&& (voPatChar.getID_PatientCharacteristic().equals(form.grdImpDevIns().getRows().get(j).getValue().getID_PatientCharacteristic())) )
						bFound = true;

					if (form.grdImpDevIns().getRows().get(j).getValue() == null)//New row and so mark as found
						bFound = true;
				}
				if ((bFound == false) && (voPatChar.getID_PatientCharacteristicIsNotNull()) )
				{
					voPatChar.setIsActive(Boolean.FALSE);
					
					voColl.set(i, voPatChar);
					value.setInsertedDevices(voColl);
				}
			}
		}

		//Removed	
		for(int x = 0; x < form.grdImpDevRem().getRows().size(); x++)
		{
			//28/10/2005 - Fix. Avoid saving empty rows
			Object implDevice = form.grdImpDevRem().getRows().get(x).getColImplDevRemoved().getValue();
			if(implDevice != null)
			{
				PatientCharacteristicVo rowValue = (PatientCharacteristicVo) form.grdImpDevRem().getRows().get(x).getColImplDevRemoved().getValue();
				
				if(rowValue == null)
					rowValue = new ims.core.vo.PatientCharacteristicVo();
				
				rowValue.setCharacteresticType(PatientCharacteresticType.IMPLANTEDDEVICE);
				if(rowValue.getDateRemoved() == null)
					rowValue.setDateRemoved(new Date());
	
				rowValue.setIsRemoved(Boolean.TRUE);
				if(implDevice instanceof PatientCharacteristicVo)
					rowValue.setImplantedDevice(((PatientCharacteristicVo)implDevice).getImplantedDevice());
				rowValue.setIsActive(Boolean.TRUE);
				
				if ( (rowValue.getCareContext() == null) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()) )
					rowValue.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

				if(value.getRemovedDevices() == null)
					value.setRemovedDevices(new ims.core.vo.PatientCharacteristicVoCollection());
				if(value.getRemovedDevicesIsNotNull())
				{
					if (value.getRemovedDevices().add(rowValue) == false)//It is already in the collection so need to update it.
					{
						int nIndex = value.getRemovedDevices().indexOf(rowValue);
						value.getRemovedDevices().set(nIndex, rowValue);
					}
				}
			}
		}
		//Now check Removed grid for anything that was Removed.
		if(value.getRemovedDevices() != null)
		{
			PatientCharacteristicVoCollection voColl = value.getRemovedDevices();
			for(int i = 0; i < voColl.size(); i++)
			{
				PatientCharacteristicVo voPatChar = voColl.get(i);
				boolean bFound = false;
				
				for(int j = 0; j < form.grdImpDevRem().getRows().size(); j++)
				{
					//Look for a match in the Grid and the Collection, if there is not one the Coll entry was removed Mark it as such
					if (   (voPatChar.getID_PatientCharacteristicIsNotNull()) 
						&& (form.grdImpDevRem().getRows().get(j).getValue() != null)
						&& (form.grdImpDevRem().getRows().get(j).getValue().getID_PatientCharacteristicIsNotNull())
						&& (voPatChar.getID_PatientCharacteristic().equals(form.grdImpDevRem().getRows().get(j).getValue().getID_PatientCharacteristic())) )
						bFound = true;
					
					if (form.grdImpDevRem().getRows().get(j).getValue() == null)//New row and so mark as found
						bFound = true;
				}
				if ((bFound == false) && (voPatChar.getID_PatientCharacteristicIsNotNull()) )
				{
					voPatChar.setIsRemoved(Boolean.FALSE);
					
					voColl.set(i, voPatChar);
					value.setRemovedDevices(voColl);
				}
			}
		}
		
		//Other Hcps
		value.setHCPPresent(new HcpLiteVoCollection());
		for(int i=0;i<form.grdOtherHcp().getRows().size();i++)
		{
			if(form.grdOtherHcp().getRows().get(i).getColHcp().getValue()!= null)
				value.getHCPPresent().add((HcpLiteVo) form.grdOtherHcp().getRows().get(i).getColHcp().getValue()); 	
		}		
		
		value.setPeformedBy(form.qmbPerfBy().getValue());
		value.setProcedure(form.qmbProcedure().getValue());
		value.setProcedureDescription(form.qmbProcedure().getEditedText());//wdev-9166
		value.setLocation(form.txtSite().getValue());
		//Info Source cannot be null, its not going on the screen, so putting it in here.
		value.setInfoSource(SourceofInformation.CORRESPONDENCE);
		
		//TODO : associated clinical notes (ask koc)
		return value;
	}

	
	protected void populateScreenFromData(PatientProcedureVo value) 
	{
		if (value == null)
			return;
		
		super.populateScreenFromData(value);
		
		form.qmbProcedure().clear();
		if(value.getProcedure() != null)
		{
			form.qmbProcedure().newRow(value.getProcedure(), value.getProcedure().getProcedureName());
			form.qmbProcedure().setValue(value.getProcedure());
		}
		else
		{
			ProcedureLiteVo vo = new ProcedureLiteVo();
			vo.setProcedureName(value.getProcedureDescription());
			form.qmbProcedure().newRow(vo, vo.getProcedureName());
			form.qmbProcedure().setValue(vo);
		}
		
		form.qmbPerfBy().clear();
		if(value.getPeformedBy() != null)
		{
			form.qmbPerfBy().newRow(value.getPeformedBy(), value.getPeformedBy().toString());
			form.qmbPerfBy().setValue(value.getPeformedBy());
		}	
		
		if(value.getAuthoringInformationIsNotNull())
		{
			form.customControlAuthoringInfo().setValue(value.getAuthoringInformation());
		}

		if(value.getLocationIsNotNull())
			form.txtSite().setValue(value.getLocation());
		
		//Inserted
		if(value.getInsertedDevices() != null)
		{
			GenForm.grdImpDevInsRow row;
			for(int x = 0; x < value.getInsertedDevices().size(); x++)
			{
				if(value.getInsertedDevices().get(x).getIsActive().booleanValue())
				{
					row = form.grdImpDevIns().getRows().newRow();
					row.setValue(value.getInsertedDevices().get(x));
					row.setColImplDevInserted(value.getInsertedDevices().get(x).getImplantedDevice());
				}
			}
		}
		
		//Removed
		if(value.getRemovedDevices() != null)
		{
			GenForm.grdImpDevRemRow row;
			for(int x = 0; x < value.getRemovedDevices().size(); x++)
			{
				if(value.getRemovedDevices().get(x).getIsRemoved().booleanValue())
				{
					row = form.grdImpDevRem().getRows().newRow();
					row.setValue(value.getRemovedDevices().get(x));
					row.getColImplDevRemoved().newRow(value.getRemovedDevices().get(x), value.getRemovedDevices().get(x).getImplantedDevice());
					row.getColImplDevRemoved().setValue(value.getRemovedDevices().get(x));
				}
			}
		}

		//other hcps
		if(value.getHCPPresent() != null)
		{
			GenForm.grdOtherHcpRow row;
			for(int x=0;x<value.getHCPPresent().size(); x++)
			{
				row = form.grdOtherHcp().getRows().newRow();
				row.setValue(value.getHCPPresent().get(x));
				row.getColHcp().newRow(value.getHCPPresent().get(x), value.getHCPPresent().get(x).toString());
				row.getColHcp().setValue(value.getHCPPresent().get(x));
			}
		}
		
		//TODO : associated clinical notes (ask koc)
	}

	protected void onImbAddInsertedClick() 
	{
		newInsertedImplantDevice();
	}

	private void newInsertedImplantDevice() 
	{
		GenForm.grdImpDevInsRow row = form.grdImpDevIns().getRows().newRow();
		row.setValue(new PatientCharacteristicVo());
	}

	
	protected void onImbAddOtherHcpClick() 
	{
		newHcp();
	}

	private void newHcp() 
	{
		form.grdOtherHcp().getRows().newRow();
	}

	protected void onImbRemoveInsertedClick() 
	{
		removeInsertedImplantDevice();
	}

	private void removeInsertedImplantDevice() 
	{
		if(form.grdImpDevIns().getSelectedRowIndex() > -1)
			form.grdImpDevIns().getRows().remove(form.grdImpDevIns().getSelectedRowIndex());
	}
	
	protected void onImbRemoveOtherHcpClick() 
	{
		removeHcp();
	}

	private void removeHcp() 
	{
		if(form.grdOtherHcp().getSelectedRowIndex() > -1)
			form.grdOtherHcp().getRows().remove(form.grdOtherHcp().getSelectedRowIndex());
	}

	protected void onImbAddRemovedClick() 
	{
		newRemovedImplantDevice();
	}

	private void newRemovedImplantDevice() 
	{
		PatientCharacteristicVoCollection voCharColl = listCharacteristic();
		
		if(voCharColl.size() == 0)
			engine.showMessage("No Devices Exist");	
		
		GenForm.grdImpDevRemRow row = null;
		for(int i = 0 ; i < voCharColl.size() ; i++)
		{
			if(i == 0)
				row = form.grdImpDevRem().getRows().newRow();
			
			row.getColImplDevRemoved().newRow(voCharColl.get(i), voCharColl.get(i).getImplantedDevice());
		}
	}

	
	private PatientCharacteristicVoCollection listCharacteristic() 
	{
		return domain.listCharchteristic(form.getLocalContext().getpatientProcedure(), form.getGlobalContext().Core.getPatientShort());
	}

	protected void onImbRemoveRemovedClick() 
	{
		removeRemovedImplantDevice();
	}

	private void removeRemovedImplantDevice() 
	{
		if(form.grdImpDevRem().getSelectedRowIndex() > -1)
			form.grdImpDevRem().getRows().remove(form.grdImpDevRem().getSelectedRowIndex());
	}

	protected void onGrdOtherHcpGridQueryComboBoxTextSubmited(int column, grdOtherHcpRow row, String text) throws PresentationLogicException 
	{
		HcpLiteVoCollection collHcps = domain.listHcpLiteByName(text);
		
		row.getColHcp().clear();
		
		if(collHcps == null)
			return;

		for(int i=0;i<collHcps.size();i++)
			row.getColHcp().newRow(collHcps.get(i),collHcps.get(i).toString());					
	
		if (collHcps.size() == 1)
			row.getColHcp().setValue(collHcps.get(0));
		else if(collHcps.size() > 1)
			row.getColHcp().showOpened();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		if (sender.equals(form.grdOtherHcp()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.HcpGrid.ADD:
					newHcp();
					break;
				case GenForm.ContextMenus.HcpGrid.REMOVE:
					removeHcp();
					setHcpRemoveVisibility();
					break;
			}			
		}
		else if (sender.equals(form.grdImpDevIns()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.ImplantDevicesAddGrid.ADD:
					newInsertedImplantDevice();
					break;
				case GenForm.ContextMenus.ImplantDevicesAddGrid.REMOVE:
					removeInsertedImplantDevice();
					setInsertedRemoveVisibility();
					break;
			}
		}
		else if (sender.equals(form.grdImpDevRem()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.ImplantDevicesRemoveGrid.ADD:
					newRemovedImplantDevice();
					break;
				case GenForm.ContextMenus.ImplantDevicesRemoveGrid.REMOVE:
					removeRemovedImplantDevice();
					setRemovedRemoveVisibility();
			}
		}
		
	}
	
	
	private void setRemovedRemoveVisibility() 
	{
		boolean bVisible = 	form.grdImpDevRem().getSelectedRowIndex() != -1 && 
		form.getMode().equals(FormMode.EDIT);
	   
		form.getContextMenus().getImplantDevicesRemoveGridREMOVEItem().setVisible(bVisible);			
	}

	private void setInsertedRemoveVisibility()
	{
		boolean bVisible = 	form.grdImpDevIns().getSelectedRowIndex() != -1 && 
		form.getMode().equals(FormMode.EDIT);	   
		form.getContextMenus().getImplantDevicesAddGridREMOVEItem().setVisible(bVisible);
	}
	
	
	private void setHcpRemoveVisibility()
	{
		boolean bVisible = 	form.grdOtherHcp().getSelectedRowIndex() != -1 && 
							form.getMode().equals(FormMode.EDIT);
						   
		form.getContextMenus().getHcpGridREMOVEItem().setVisible(bVisible);
	}

	protected void onFormModeChanged() 
	{
		updateControlsState();//wdev-15298
		
		boolean bVisible = form.getMode().equals(FormMode.EDIT);
		
		form.getContextMenus().getHcpGridADDItem().setVisible(bVisible);
		form.getContextMenus().getImplantDevicesAddGridADDItem().setVisible(bVisible);
		form.getContextMenus().getImplantDevicesRemoveGridADDItem().setVisible(bVisible);		
	}

	//wdev-15298
	private void updateControlsState()
	{
		form.btnUpdate().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdProcedure().getValue() != null);
	}

	protected void onGrdImpDevRemSelectionChanged() throws PresentationLogicException 
	{
		setRemovedRemoveVisibility();		
	}

	protected void onGrdImpDevInsSelectionChanged() throws PresentationLogicException 
	{
		setInsertedRemoveVisibility();		
	}

	protected void onGrdOtherHcpSelectionChanged() throws PresentationLogicException 
	{
		setHcpRemoveVisibility();		
	}
}
