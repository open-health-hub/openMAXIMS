//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by Brendan Woods using IMS Development Environment (version 1.20 build 40729.900)
//Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.medicationonadmission;



import ims.clinical.vo.ReasonVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.Hcp;
import ims.core.vo.MedicationDose;
import ims.core.vo.MedicationDoseCollection;
import ims.core.vo.MedicationLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientMedicationLiteVoCollection;
import ims.core.vo.PatientMedicationVo;
import ims.core.vo.PatientMedicationVoCollection;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.MedicationDoseReasonStopped;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.vo.LookupInstVo;
import ims.vo.interfaces.IClinicalCodingValue;

public class Logic extends BaseLogic
{
	
	
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		
		
		form.Group1().setValue(GenForm.Group1Enumeration.rdoCurrent);	
		open();
		//form.setMode(FormMode.VIEW);
		
		//WDEV-14887
		/*form.btnUpdate().setEnabled(false);
		form.btnInactivate().setEnabled(false);*/
		
		isBtnCloseVisible(false);
			
		if ( (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
				&& (form.getGlobalContext().Clinical.getReturnToFormName().equals(engine.getPreviousNonDialogFormName())) ||
				isDialog())
				{
					isBtnCloseVisible(true);
					newInstance();
				}
				else
				{
					isBtnCloseVisible(true);
					form.getGlobalContext().Clinical.setReturnToFormName(null);
				}
	}
	
	private void initialize()
	{
		initializeContextMenu();
		
		initializeCustomControl();
		
		// Clear global context
		form.getGlobalContext().Clinical.setReturnToFormMode(null);
		form.getGlobalContext().Clinical.setReturnToFormCDIDescription(null);
		
		// Clear local context for RIE
		form.getLocalContext().setRecord(null);
		
		// Check for previous medications
		setPreviousMedicationsStatus();
	}

	private void setPreviousMedicationsStatus()
	{
		form.getLocalContext().setHasPreviousMedication(Boolean.FALSE);
		
		PatientMedicationLiteVoCollection voCollMedication = domain.listPatientLastMedication(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime());

		if(voCollMedication != null && voCollMedication.size() > 0)
		{
			form.getLocalContext().setHasPreviousMedication(Boolean.TRUE);
		}
	}

	private void initializeContextMenu()
	{
		form.getContextMenus().Clinical.hideAllMedicationOnAdmissionMenuItems();
	}

	private void open()
	{
		// Set has medications
		setHasMedications();
		
		clearFields();
		form.ctnDetails().setCollapsed(true);
		form.btnUpdate().setEnabled(false);
		form.btnInactivate().setEnabled(false);
		
		form.grdMedication().getRows().clear();
		
		PatientMedicationVoCollection voColl = null;

		if (form.Group1().getValue().equals(GenForm.Group1Enumeration.rdoCurrent))
		{
			voColl = domain.listMedicationOnAdmission(null, form.getGlobalContext().Core.getCurrentCareContext(), false);
		}
		else if(form.Group1().getValue().equals(GenForm.Group1Enumeration.rdoDiscontinued))
		{
			voColl = domain.listMedicationOnAdmission(null, form.getGlobalContext().Core.getCurrentCareContext(), true);
		}
		else if(form.Group1().getValue().equals(GenForm.Group1Enumeration.rdoAll))
		{
			voColl = domain.listMedicationOnAdmission(null, form.getGlobalContext().Core.getCurrentCareContext(), null);
		}
		
		GenForm.grdMedicationRow row = null;
		if(voColl != null)
		{
			for(int i=0;i<voColl.size();i++)
			{
				row = form.grdMedication().getRows().newRow();
		
				if(	voColl.get(i).getMedication() != null)
				{
					row.setcolDrug(voColl.get(i).getMedication().getMedicationName());
					row.setTooltipForcolDrug(voColl.get(i).getMedication().getMedicationName());	//wdev-14712
				}
				else
				{
					row.setcolDrug(voColl.get(i).getOtherMedicationText());
					row.setTooltipForcolDrug(voColl.get(i).getOtherMedicationText());	//wdev-14712
				}
				
				if(	voColl.get(i).getFrequency() != null)
				{
					row.setcolFreq(voColl.get(i).getFrequency().getText());
					row.setTooltipForcolFreq(voColl.get(i).getFrequency().getText());	//wdev-14712
				}
				
				//There will only be ONE Perscribed Dose record
				if (voColl.get(i).getPrescribedDoses() != null && voColl.get(i).getPrescribedDoses().size() > 0)
				{
					MedicationDose dose = voColl.get(i).getPrescribedDoses().get(0);
					if(dose.getAdminRoute() != null)
					{
						row.setcolRoute(dose.getAdminRoute().getText());
						row.setTooltipForcolRoute(dose.getAdminRoute().getText());		//wdev-14712
					}
					row.setcolDose(dose.getDose());
					row.setTooltipForcolDose(dose.getDose());							//wdev-14712
					row.setcolWhenTaken(dose.getWhenTaken());
					row.setTooltipForcolWhenTaken(dose.getWhenTaken());					//wdev-14712
				}
							
				row.setcolDiff(voColl.get(i).getDifficultiesWithMed());
				row.setTooltipForcolDiff(voColl.get(i).getDifficultiesWithMed());		//wdev-14712
				
				
				if(engine.getFormName().equals(form.getForms().Clinical.MedicationOnDischarge))
				{
					if ((voColl.get(i).getIsDischargeMedicationIsNotNull()) && (voColl.get(i).getIsDischargeMedication().booleanValue()) )
						row.setcolTTO(form.getImages().Core.Pin);
				}
				
				row.setValue(voColl.get(i));
				
				// WDEV-13297
				// Null check added.
				if (Boolean.TRUE.equals(voColl.get(i).getIsDiscontinued()))
				{
					String str= "Date:";
					str += voColl.get(i).getIsDiscontinuedDate() == null? "":voColl.get(i).getIsDiscontinuedDate().toString();
					str += ',';
					str += "User:";
					
					if(voColl.get(i).getIsDiscontinuedHcp() != null && voColl.get(i).getIsDiscontinuedHcp().getIMosName() != null)
						str += voColl.get(i).getIsDiscontinuedHcp().getIMosName();
					//wdev-14628
					if(	voColl.get(i).getIsDiscontinuedReasonIsNotNull())
					{
						str += ',';
						str += "Reason:";
						str += voColl.get(i).getIsDiscontinuedReason().getIItemText();
					}
					if(	voColl.get(i).getIsDiscontinuedReasonTextIsNotNull())
					{
						str += ',';
						str += "Comment:";
						str += voColl.get(i).getIsDiscontinuedReasonText();
					}
					//---------
					
					row.setTooltip(str);
					row.setBackColor(Color.Red);
				}
			}
			if(form.getLocalContext().getRecordIsNotNull() && voColl.contains(form.getLocalContext().getRecord()))
			{
				form.getLocalContext().setRecord(domain.getPatientMedication(form.getLocalContext().getRecord()));
				form.grdMedication().setValue(form.getLocalContext().getRecord());
				showDetails(form.getLocalContext().getRecord());
				
				
				boolean isDiscontinued = form.getLocalContext().getRecord().getIsDiscontinuedIsNotNull() && form.getLocalContext().getRecord().getIsDiscontinued();
				form.btnInactivate().setEnabled(!isDiscontinued);
				form.btnUpdate().setEnabled(!isDiscontinued);
			}
			else
				form.grdMedication().setValue(null);
		}
		
		form.ctnDetails().setCollapsed(false);	
		
		form.setMode(FormMode.VIEW);
	}
	
	private void setHasMedications()
	{
		form.getLocalContext().setHasMedications(Boolean.FALSE);
		
		PatientMedicationVoCollection medications = domain.listMedicationOnAdmission(null, form.getGlobalContext().Core.getCurrentCareContext());
		
		if (medications == null || medications.size() > 0)
		{
			form.getLocalContext().setHasMedications(Boolean.TRUE);
		}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-14887
		if (form.getLocalContext().getRecordIsNotNull() && ! form.getLocalContext().getRecord().getID_PatientMedicationIsNotNull())
		{
			form.getLocalContext().setRecord(null);
		}
		
		open();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PatientMedicationVo voMed = (PatientMedicationVo) form.getLocalContext().getRecord().clone();//clone---

		AuthoringInformationVo  voAuthInfo = voMed.getAuthoringInformation();
		if(voAuthInfo == null)
			voAuthInfo = new AuthoringInformationVo();
		
		
		voAuthInfo.setAuthoringDateTime(form.ctnDetails().customControlAuthor().getValue().getAuthoringDateTime());
		voAuthInfo.setAuthoringHcp(form.ctnDetails().customControlAuthor().getValue().getAuthoringHcp());
		
		//WDEV-12901 set Recording Information
		if(voMed.getRecordingInformation()==null){
			RecordingUserInformationVo voRecordingUserInformation = new RecordingUserInformationVo();
			voRecordingUserInformation.setRecordingUser(form.ctnDetails().cmbRecordingHCP().getValue());
			voRecordingUserInformation.setRecordingDateTime(new DateTime());
			voMed.setRecordingInformation(voRecordingUserInformation);
		}
		
		voMed.setAuthoringInformation(voAuthInfo);
		voMed.setIsDiscontinued(Boolean.FALSE);
		
		if ((form.ctnDetails().cmbRoute().getValue() == null))
		{
			engine.showMessage("Route is a mandatory field."); 
			return;
		}
		if ((form.ctnDetails().cmbFrequency().getValue() == null))
		{
			engine.showMessage("Frequency is a mandatory field."); 
			return;
		}
				
		MedicationDoseCollection dosesColl= new MedicationDoseCollection();
		MedicationDose voMedDose = new MedicationDose();
		voMedDose.setAdminRoute(form.ctnDetails().cmbRoute().getValue());
		voMedDose.setDose(form.ctnDetails().txtDose().getValue());
		voMedDose.setWhenTaken(form.ctnDetails().txtTakenWhen().getValue());
		voMedDose.setAuthoringInformation(voAuthInfo);

		dosesColl.add(voMedDose);
		voMed.setPrescribedDoses(dosesColl);
		
		voMed.setFrequency(form.ctnDetails().cmbFrequency().getValue());
		voMed.setDifficultiesWithMed(form.ctnDetails().txtDifficulties().getValue());  
		if(voMed.getMedication() != null)
			voMed.getMedication().setIsActive(Boolean.TRUE);
		
		IClinicalCodingValue voResult = form.ctnDetails().customControlCodingItem().getValue();
		if (voResult != null)
		{
			if (voResult.getIClinicalCodingValue() instanceof MedicationLiteVo)
			{
				voMed.setMedication((MedicationLiteVo) voResult.getIClinicalCodingValue());
				voMed.setOtherMedicationText(voResult.getIClinicalCodingValueDescription());						
			}
			else
				throw new CodingRuntimeException("MedicationLiteVo expected from component");				
		}
		else //http://jira/browse/WDEV-3518 - If no description is entered set the equivalent field in the vo to null;
		{
			voMed.setOtherMedicationText(null);
		}
		
		//form.setMode(FormMode.VIEW); //-----------------
		
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			voMed.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			voMed.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		voMed.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		//wdev-12768
		voMed.setSelfMedicating(form.ctnDetails().chkSelfMedicating().getValue());
		//----------
		
		String[] errors = voMed.validate(validateUIRules());
		
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		//--------------------------
		form.setMode(FormMode.VIEW);
		//---------------------------
		try 
		{
			voMed = domain.saveMedicationOnAdmission(voMed);
			if (isDialog())
			{
				form.getGlobalContext().Clinical.setDialogFormName(engine.getFormName());
			}
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		
		//Wdev-1326
		setReturnToFormDescription(voMed);
		form.getLocalContext().setRecord(voMed);
		
		open();
	}
	//---------------------------
    private String[] validateUIRules()
    {
    	if(form.ctnDetails().customControlCodingItem().getSelectedItem() == null)
    		return new String[]{"Clinical Term is Mandatory"};
    	else
    		return null;
    }
    //----------------------------------
	private void setReturnToFormDescription(PatientMedicationVo voMed) 
	{
		if ( (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
				&& (form.getGlobalContext().Clinical.getReturnToFormName().equals(engine.getPreviousNonDialogFormName())) )
		{
			//Set the CDI Description for the return to form link
			String str = form.getGlobalContext().Clinical.getReturnToFormCDIDescriptionIsNotNull() ? form.getGlobalContext().Clinical.getReturnToFormCDIDescription() : "";
			StringBuffer sb = new StringBuffer();
			sb.append(str);
			if  (sb.length() > 0)
				sb.append(", ");
			
			if (voMed.getMedicationIsNotNull())
				sb.append(voMed.getMedicationIsNotNull() ? voMed.getMedication().getMedicationName()  : "");
			else
				sb.append(voMed.getOtherMedicationText());
			
			form.getGlobalContext().Clinical.setReturnToFormCDIDescription(sb.toString());
			form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		}
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	private void newInstance()
	{
		clearFields();
				
		form.setMode(FormMode.EDIT);
		form.btnInactivate().setEnabled(false);
		form.btnUpdate().setEnabled(false);
		form.ctnDetails().customControlCodingItem().setClinicalTermMandatory(true);
		form.ctnDetails().customControlCodingItem().setDescriptionMandatory(true);
		
		PatientMedicationVo voMed = new PatientMedicationVo();
		form.getLocalContext().setRecord(voMed);

		form.ctnDetails().setCollapsed(false);
		
		form.ctnDetails().setcustomControlAuthorEnabled(true);
		setAuthoringInfo();
		
		Object mos = domain.getMosUser();
		if(mos != null){
			form.ctnDetails().cmbRecordingHCP().newRow((MemberOfStaffLiteVo)mos, mos.toString());
			form.ctnDetails().cmbRecordingHCP().setValue((MemberOfStaffLiteVo)mos);
		}
		form.ctnDetails().dtimRecordingDateTime().setValue(new DateTime());
	}
	private void setAuthoringInfo() 
	{
		form.ctnDetails().customControlAuthor().initializeComponent();
		form.ctnDetails().customControlAuthor().setEnabledAuthoringHCP(Boolean.TRUE);
		form.ctnDetails().customControlAuthor().setEnabledDateTime(Boolean.TRUE);
	}

	private void clearFields()
	{
		form.ctnDetails().customControlAuthor().setValue(null);
		form.ctnDetails().customControlCodingItem().clear();
		form.ctnDetails().cmbRecordingHCP().setValue(null);//WDEV-12901 
		form.ctnDetails().dtimRecordingDateTime().setValue(null);//WDEV-12901 
		form.ctnDetails().cmbRoute().setValue(null);
		form.ctnDetails().txtDose().setValue("");
		form.ctnDetails().cmbFrequency().setValue(null);	
		form.ctnDetails().txtTakenWhen().setValue("");
		form.ctnDetails().txtDifficulties().setValue("");
		//wdev-12768
		form.ctnDetails().chkSelfMedicating().setValue(null);
		//-----------
}

	private void showDetails(PatientMedicationVo voMed)
	{
		if(voMed == null)
			return;
		
		if (voMed.getFrequency() != null)
			form.ctnDetails().cmbFrequency().setValue(voMed.getFrequency());
		
		if(voMed.getAuthoringInformationIsNotNull())
			form.ctnDetails().customControlAuthor().setValue(voMed.getAuthoringInformation()); 
		else
			form.ctnDetails().customControlAuthor().setValue(null);			
		
		form.ctnDetails().customControlCodingItem().setValue(voMed);		
		
		if (voMed.getPrescribedDoses() != null && voMed.getPrescribedDoses().size() > 0)
		{
			MedicationDose dose = voMed.getPrescribedDoses().get(0);
			form.ctnDetails().txtDose().setValue(dose.getDose());			
			form.ctnDetails().cmbRoute().setValue(dose.getAdminRoute());
			form.ctnDetails().txtTakenWhen().setValue(dose.getWhenTaken());
		}
		form.ctnDetails().txtDifficulties().setValue(voMed.getDifficultiesWithMed());
		//wdev-12768
		form.ctnDetails().chkSelfMedicating().setValue(voMed.getSelfMedicating());
		//------------
		form.ctnDetails().setCollapsed(false);
		
		if(voMed.getRecordingInformationIsNotNull()){
			MemberOfStaffLiteVo mos = voMed.getRecordingInformation().getRecordingUser();
			if(mos!=null){
				form.ctnDetails().cmbRecordingHCP().newRow(mos, mos.toString());
				form.ctnDetails().cmbRecordingHCP().setValue(mos);	
			}
			form.ctnDetails().dtimRecordingDateTime().setValue(voMed.getRecordingInformation().getRecordingDateTime());
		}
	}
	
	protected void onGrdMedicationSelectionChanged() throws PresentationLogicException 
	{
		clearFields(); 
		
		PatientMedicationVo voMed = null;
		if(form.grdMedication().getValue() instanceof PatientMedicationVo)
			voMed = domain.getPatientMedication(form.grdMedication().getValue());
		
		form.getLocalContext().setRecord(voMed);
		showDetails(voMed);
		form.btnUpdate().setEnabled(true);
		if(voMed != null && voMed.getIsDiscontinuedIsNotNull() && !voMed.getIsDiscontinued()){
			form.btnInactivate().setEnabled(true);
			form.btnUpdate().setEnabled(true);
		}
		else{
			form.btnInactivate().setEnabled(false);
			form.btnUpdate().setEnabled(false);
		}
		
		updateControlsState();
	}
	
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		updateInstance();
	}

	private void updateInstance()
	{
		form.setMode(FormMode.EDIT);

		form.ctnDetails().customControlAuthor().setEnabledAuthoringHCP(Boolean.FALSE);
		form.ctnDetails().customControlAuthor().setEnabledDateTime(Boolean.FALSE);
		form.btnUpdate().setEnabled(false);
		form.btnInactivate().setEnabled(false);
		form.ctnDetails().setCollapsed(false);
		form.ctnDetails().setcustomControlAuthorEnabled(false);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		/*if (formName.equals(form.getForms().Core.YesNoDialog) && result.equals(DialogResult.YES))
		{
			saveInactiveRecord();
			
			
		}*/
		if(	formName.equals(form.getForms().Clinical.ReasonDialog) && result.equals(DialogResult.OK))
		{
			saveInactiveRecord();
		}
		else if (formName.equals(form.getForms().Clinical.CopyLastMedication) && result.equals(DialogResult.OK))
		{
			PatientMedicationVoCollection voCollMedication = form.getGlobalContext().Clinical.getPatientMedicationCollection();
			if(voCollMedication != null)
			{
				for(int i=0; i<voCollMedication.size();i++)
				{
					voCollMedication.get(i).setID_PatientMedication(null);
					
					// Check prescribed doses and clear the ID's
					if (voCollMedication.get(i).getPrescribedDosesIsNotNull() && voCollMedication.get(i).getPrescribedDoses().size() > 0)
					{
						voCollMedication.get(i).getPrescribedDoses().get(0).setID_PatientMedicationDose(null);
					}
					
					voCollMedication.get(i).setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
					voCollMedication.get(i).setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
					voCollMedication.get(i).validate();
					try
					{
						domain.saveMedicationOnAdmission(voCollMedication.get(i));
					}
					catch (StaleObjectException e)
					{
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
						onFormOpen();
						break;
					}
				}
			}
			open();
		}
	}

	private void saveInactiveRecord() 
	{
		PatientMedicationVo voMed = form.grdMedication().getValue();
		voMed.setIsDiscontinued(Boolean.TRUE);
		voMed.setIsDiscontinuedDate(new Date());
		voMed.setIsDiscontinuedHcp((Hcp)domain.getHcpUser());
		
		//-------wdev-14628
		if( form.getGlobalContext().Clinical.getReasonIsNotNull())
		{
			ReasonVo tempVo = form.getGlobalContext().Clinical.getReason();
			LookupInstVo inst = null;
			if(	tempVo.getInstanceLookupIdIsNotNull())
				inst = LookupHelper.getMedicationDoseReasonStoppedInstance(this.domain.getLookupService(),tempVo.getInstanceLookupId());
			
			if(	inst != null)
				voMed.setIsDiscontinuedReason((MedicationDoseReasonStopped) inst);
			
			voMed.setIsDiscontinuedReasonText(tempVo.getComment());
		}
		//----------------
		String[] errors = voMed.validate();
		
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}	
		
		try 
		{
			form.getLocalContext().setRecord(domain.saveMedicationOnAdmission(voMed));
			if (isDialog())
			{
				form.getGlobalContext().Clinical.setDialogFormName(engine.getFormName());
			}
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		//form.setMode(FormMode.VIEW);
		open();
	}

	protected void onBtnInactivateClick() throws PresentationLogicException 
	{
		inactivateInstance();	
	}

	private void inactivateInstance()
	{
		//form.getGlobalContext().Core.setYesNoDialogMessage("Are you sure you wish to make this record inactive");
		//engine.open(form.getForms().Core.YesNoDialog);
		engine.open(form.getForms().Clinical.ReasonDialog, new Object[]{MedicationDoseReasonStopped.TYPE_ID});
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	private void updateControlsState() 
	{
		form.ctnDetails().customControlCodingItem().setParentEditing(new Boolean(form.getMode().equals(FormMode.EDIT)));
		
		if (form.getMode().equals(FormMode.EDIT))
			form.ctnDetails().setcustomControlCodingItemEnabled(true);
		
		//if (engine.getFormName().equals(form.getForms().Clinical.Medication) || engine.getFormName().equals(form.getForms().Clinical.MedicationOnAdmission) || engine.getFormName().equals(form.getForms().Clinical.MedicationOnDischarge))
		form.btnClose().setVisible(isDialog());
		
		updateContextMenuState();
	}

	private void updateContextMenuState()
	{
		form.getContextMenus().Clinical.getMedicationOnAdmissionNEWItem().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.getContextMenus().Clinical.getMedicationOnAdmissionEDITItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdMedication().getValue() != null && !Boolean.TRUE.equals(form.grdMedication().getValue().getIsDiscontinued()));
		form.getContextMenus().Clinical.getMedicationOnAdmissionINACTIVATEItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdMedication().getValue() != null && !Boolean.TRUE.equals(form.grdMedication().getValue().getIsDiscontinued()));
		
		form.getContextMenus().Clinical.getMedicationOnAdmissionCOPY_LASTItem().setVisible(Boolean.FALSE.equals(form.getLocalContext().getHasMedications())
																							&& Boolean.TRUE.equals(form.getLocalContext().getHasPreviousMedication()));
	}

	private void initializeCustomControl() 
	{
		form.ctnDetails().customControlCodingItem().setCodingItemType(CodingItemType.MEDICATION,true);
		form.ctnDetails().customControlCodingItem().setHotlist(new Boolean(false));		
	}

	private void isBtnCloseVisible(boolean value)
	{
		form.btnClose().setEnabled(value);
		form.btnClose().setVisible(value);
	}
	
	private boolean isDialog()
	{
		return engine.isDialog();
	}

	protected void onBtnCloseClick() throws PresentationLogicException
	{
		//engine.open(form.getGlobalContext().Clinical.getReturnToFormName());
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onRadioButtonGroup1ValueChanged() throws PresentationLogicException 
	{
		open();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.MedicationOnAdmission.NEW:
				newInstance();
				break;
				
			case GenForm.ContextMenus.ClinicalNamespace.MedicationOnAdmission.EDIT:
				updateInstance();
				break;
				
			case GenForm.ContextMenus.ClinicalNamespace.MedicationOnAdmission.INACTIVATE:
				inactivateInstance();
				break;

			case GenForm.ContextMenus.ClinicalNamespace.MedicationOnAdmission.COPY_LAST:
				engine.open(form.getForms().Clinical.CopyLastMedication, new Object[] { form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime()});
				break;
		}
		
		updateControlsState();
	}
}
