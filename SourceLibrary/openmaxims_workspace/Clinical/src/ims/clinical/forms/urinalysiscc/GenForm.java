//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.urinalysiscc;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbRecordingHCPComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.MemberOfStaffLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.MemberOfStaffLiteVo getValue()
		{
			return (ims.core.vo.MemberOfStaffLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.MemberOfStaffLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPHComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.UrinalysisPH value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.UrinalysisPH value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.UrinalysisPH value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.UrinalysisPH value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.UrinalysisPH value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.UrinalysisPH getValue()
		{
			return (ims.core.vo.lookups.UrinalysisPH)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.UrinalysisPH value)
		{
			super.control.setValue(value);
		}
	}
	public static class recbrAllRecordsRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.Urinalysis value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.Urinalysis value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.Urinalysis value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.Urinalysis value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.core.vo.Urinalysis value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.core.vo.Urinalysis value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.core.vo.Urinalysis value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.core.vo.Urinalysis value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.core.vo.Urinalysis getValue()
		{
			return (ims.core.vo.Urinalysis)super.control.getValue();
		}
		public void setValue(ims.core.vo.Urinalysis value)
		{
			super.control.setValue(value);
		}
	}

	public static class grpFilterByRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 200, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "All", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 138, 8, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Active", startTabIndex.intValue() + 1);
		}
		public void setText(grpFilterByEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpFilterByEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpFilterByEnumeration.None;
				case 0: return grpFilterByEnumeration.rdoAll;
				case 1: return grpFilterByEnumeration.rdoActive;
			}
			return null;
		}
		public void setValue(grpFilterByEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpFilterByEnumeration.None.id);
		}
		public boolean isEnabled(grpFilterByEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpFilterByEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpFilterByEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpFilterByEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpFilterByEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpFilterByEnumeration None = new grpFilterByEnumeration(-1);
		public static grpFilterByEnumeration rdoAll = new grpFilterByEnumeration(0);
		public static grpFilterByEnumeration rdoActive = new grpFilterByEnumeration(1);
		private grpFilterByEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpFilterByEnumeration)o).id;
		}
		private int id;
	}

	public static class grpAscorbicRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 396, 357, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "", startTabIndex.intValue() + 1046);
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 340, 357, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "", startTabIndex.intValue() + 1045);
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 284, 357, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "", startTabIndex.intValue() + 1044);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 228, 357, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(3, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "", startTabIndex.intValue() + 1043);
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 172, 357, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(4, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "", startTabIndex.intValue() + 1042);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 116, 357, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(5, anchoringHelper8.getX(), anchoringHelper8.getY(), anchoringHelper8.getWidth(), "", startTabIndex.intValue() + 1041);
		}
		public void setText(grpAscorbicEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpAscorbicEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpAscorbicEnumeration.None;
				case 0: return grpAscorbicEnumeration.rdoAscorbicTrace;
				case 1: return grpAscorbicEnumeration.rdoAscorbicPlus4;
				case 2: return grpAscorbicEnumeration.rdoAscorbicPlus3;
				case 3: return grpAscorbicEnumeration.rdoAscorbicPlus2;
				case 4: return grpAscorbicEnumeration.rdoAscorbicPlus;
				case 5: return grpAscorbicEnumeration.rdoAscorbicNeg;
			}
			return null;
		}
		public void setValue(grpAscorbicEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpAscorbicEnumeration.None.id);
		}
		public boolean isEnabled(grpAscorbicEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpAscorbicEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpAscorbicEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpAscorbicEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpAscorbicEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpAscorbicEnumeration None = new grpAscorbicEnumeration(-1);
		public static grpAscorbicEnumeration rdoAscorbicTrace = new grpAscorbicEnumeration(0);
		public static grpAscorbicEnumeration rdoAscorbicPlus4 = new grpAscorbicEnumeration(1);
		public static grpAscorbicEnumeration rdoAscorbicPlus3 = new grpAscorbicEnumeration(2);
		public static grpAscorbicEnumeration rdoAscorbicPlus2 = new grpAscorbicEnumeration(3);
		public static grpAscorbicEnumeration rdoAscorbicPlus = new grpAscorbicEnumeration(4);
		public static grpAscorbicEnumeration rdoAscorbicNeg = new grpAscorbicEnumeration(5);
		private grpAscorbicEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpAscorbicEnumeration)o).id;
		}
		private int id;
	}

	public static class grpNitrateRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 172, 437, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper9.getX(), anchoringHelper9.getY(), anchoringHelper9.getWidth(), "", startTabIndex.intValue() + 1060);
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 116, 437, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "", startTabIndex.intValue() + 1059);
		}
		public void setText(grpNitrateEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpNitrateEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpNitrateEnumeration.None;
				case 0: return grpNitrateEnumeration.rdoNitratePos;
				case 1: return grpNitrateEnumeration.rdoNitrateNeg;
			}
			return null;
		}
		public void setValue(grpNitrateEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpNitrateEnumeration.None.id);
		}
		public boolean isEnabled(grpNitrateEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpNitrateEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpNitrateEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpNitrateEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpNitrateEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpNitrateEnumeration None = new grpNitrateEnumeration(-1);
		public static grpNitrateEnumeration rdoNitratePos = new grpNitrateEnumeration(0);
		public static grpNitrateEnumeration rdoNitrateNeg = new grpNitrateEnumeration(1);
		private grpNitrateEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpNitrateEnumeration)o).id;
		}
		private int id;
	}

	public static class grpUbgRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 396, 405, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "", startTabIndex.intValue() + 1058);
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 340, 405, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper12.getX(), anchoringHelper12.getY(), anchoringHelper12.getWidth(), "", startTabIndex.intValue() + 1057);
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 284, 405, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper13.getX(), anchoringHelper13.getY(), anchoringHelper13.getWidth(), "", startTabIndex.intValue() + 1056);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 228, 405, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(3, anchoringHelper14.getX(), anchoringHelper14.getY(), anchoringHelper14.getWidth(), "", startTabIndex.intValue() + 1055);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 172, 405, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(4, anchoringHelper15.getX(), anchoringHelper15.getY(), anchoringHelper15.getWidth(), "", startTabIndex.intValue() + 1054);
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 116, 405, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(5, anchoringHelper16.getX(), anchoringHelper16.getY(), anchoringHelper16.getWidth(), "", startTabIndex.intValue() + 1053);
		}
		public void setText(grpUbgEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpUbgEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpUbgEnumeration.None;
				case 0: return grpUbgEnumeration.rdoUBGTrace;
				case 1: return grpUbgEnumeration.rdoUBGPlus4;
				case 2: return grpUbgEnumeration.rdoUBGPlus3;
				case 3: return grpUbgEnumeration.rdoUBGPlus2;
				case 4: return grpUbgEnumeration.rdoUBGPlus1;
				case 5: return grpUbgEnumeration.rdoUBGNeg;
			}
			return null;
		}
		public void setValue(grpUbgEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpUbgEnumeration.None.id);
		}
		public boolean isEnabled(grpUbgEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpUbgEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpUbgEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpUbgEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpUbgEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpUbgEnumeration None = new grpUbgEnumeration(-1);
		public static grpUbgEnumeration rdoUBGTrace = new grpUbgEnumeration(0);
		public static grpUbgEnumeration rdoUBGPlus4 = new grpUbgEnumeration(1);
		public static grpUbgEnumeration rdoUBGPlus3 = new grpUbgEnumeration(2);
		public static grpUbgEnumeration rdoUBGPlus2 = new grpUbgEnumeration(3);
		public static grpUbgEnumeration rdoUBGPlus1 = new grpUbgEnumeration(4);
		public static grpUbgEnumeration rdoUBGNeg = new grpUbgEnumeration(5);
		private grpUbgEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpUbgEnumeration)o).id;
		}
		private int id;
	}

	public static class grpBilRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 396, 381, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper17.getX(), anchoringHelper17.getY(), anchoringHelper17.getWidth(), "", startTabIndex.intValue() + 1052);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 340, 381, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper18.getX(), anchoringHelper18.getY(), anchoringHelper18.getWidth(), "", startTabIndex.intValue() + 1051);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 284, 381, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper19.getX(), anchoringHelper19.getY(), anchoringHelper19.getWidth(), "", startTabIndex.intValue() + 1050);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 228, 381, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(3, anchoringHelper20.getX(), anchoringHelper20.getY(), anchoringHelper20.getWidth(), "", startTabIndex.intValue() + 1049);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 172, 381, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(4, anchoringHelper21.getX(), anchoringHelper21.getY(), anchoringHelper21.getWidth(), "", startTabIndex.intValue() + 1048);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 116, 381, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(5, anchoringHelper22.getX(), anchoringHelper22.getY(), anchoringHelper22.getWidth(), "", startTabIndex.intValue() + 1047);
		}
		public void setText(grpBilEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpBilEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpBilEnumeration.None;
				case 0: return grpBilEnumeration.rdoBILTrace;
				case 1: return grpBilEnumeration.rdoBILPlus4;
				case 2: return grpBilEnumeration.rdoBILPlus3;
				case 3: return grpBilEnumeration.rdoBILPlus2;
				case 4: return grpBilEnumeration.rdoBILPlus;
				case 5: return grpBilEnumeration.rdoBILNeg;
			}
			return null;
		}
		public void setValue(grpBilEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpBilEnumeration.None.id);
		}
		public boolean isEnabled(grpBilEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpBilEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpBilEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpBilEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpBilEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpBilEnumeration None = new grpBilEnumeration(-1);
		public static grpBilEnumeration rdoBILTrace = new grpBilEnumeration(0);
		public static grpBilEnumeration rdoBILPlus4 = new grpBilEnumeration(1);
		public static grpBilEnumeration rdoBILPlus3 = new grpBilEnumeration(2);
		public static grpBilEnumeration rdoBILPlus2 = new grpBilEnumeration(3);
		public static grpBilEnumeration rdoBILPlus = new grpBilEnumeration(4);
		public static grpBilEnumeration rdoBILNeg = new grpBilEnumeration(5);
		private grpBilEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpBilEnumeration)o).id;
		}
		private int id;
	}

	public static class grpGluRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 396, 333, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper23.getX(), anchoringHelper23.getY(), anchoringHelper23.getWidth(), "", startTabIndex.intValue() + 1040);
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 340, 333, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper24.getX(), anchoringHelper24.getY(), anchoringHelper24.getWidth(), "", startTabIndex.intValue() + 1039);
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 284, 333, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper25.getX(), anchoringHelper25.getY(), anchoringHelper25.getWidth(), "", startTabIndex.intValue() + 1038);
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 228, 333, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(3, anchoringHelper26.getX(), anchoringHelper26.getY(), anchoringHelper26.getWidth(), "", startTabIndex.intValue() + 1037);
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 172, 333, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(4, anchoringHelper27.getX(), anchoringHelper27.getY(), anchoringHelper27.getWidth(), "", startTabIndex.intValue() + 1036);
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 116, 333, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(5, anchoringHelper28.getX(), anchoringHelper28.getY(), anchoringHelper28.getWidth(), "", startTabIndex.intValue() + 1035);
		}
		public void setText(grpGluEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpGluEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpGluEnumeration.None;
				case 0: return grpGluEnumeration.rdoGLUTrace;
				case 1: return grpGluEnumeration.rdoGLUPlus4;
				case 2: return grpGluEnumeration.rdoGLUPlus3;
				case 3: return grpGluEnumeration.rdoGLUPlus2;
				case 4: return grpGluEnumeration.rdoGLUPlus1;
				case 5: return grpGluEnumeration.rdoGLUNeg;
			}
			return null;
		}
		public void setValue(grpGluEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpGluEnumeration.None.id);
		}
		public boolean isEnabled(grpGluEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpGluEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpGluEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpGluEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpGluEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpGluEnumeration None = new grpGluEnumeration(-1);
		public static grpGluEnumeration rdoGLUTrace = new grpGluEnumeration(0);
		public static grpGluEnumeration rdoGLUPlus4 = new grpGluEnumeration(1);
		public static grpGluEnumeration rdoGLUPlus3 = new grpGluEnumeration(2);
		public static grpGluEnumeration rdoGLUPlus2 = new grpGluEnumeration(3);
		public static grpGluEnumeration rdoGLUPlus1 = new grpGluEnumeration(4);
		public static grpGluEnumeration rdoGLUNeg = new grpGluEnumeration(5);
		private grpGluEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpGluEnumeration)o).id;
		}
		private int id;
	}

	public static class grpKetonesRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 396, 309, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper29.getX(), anchoringHelper29.getY(), anchoringHelper29.getWidth(), "", startTabIndex.intValue() + 1034);
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 340, 309, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper30.getX(), anchoringHelper30.getY(), anchoringHelper30.getWidth(), "", startTabIndex.intValue() + 1033);
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 284, 309, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper31.getX(), anchoringHelper31.getY(), anchoringHelper31.getWidth(), "", startTabIndex.intValue() + 1032);
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 228, 309, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(3, anchoringHelper32.getX(), anchoringHelper32.getY(), anchoringHelper32.getWidth(), "", startTabIndex.intValue() + 1031);
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 172, 309, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(4, anchoringHelper33.getX(), anchoringHelper33.getY(), anchoringHelper33.getWidth(), "", startTabIndex.intValue() + 1030);
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 116, 309, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(5, anchoringHelper34.getX(), anchoringHelper34.getY(), anchoringHelper34.getWidth(), "", startTabIndex.intValue() + 1029);
		}
		public void setText(grpKetonesEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpKetonesEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpKetonesEnumeration.None;
				case 0: return grpKetonesEnumeration.rdoKetonesTrace;
				case 1: return grpKetonesEnumeration.rdoKetonesPlus4;
				case 2: return grpKetonesEnumeration.rdoKetonesPlus3;
				case 3: return grpKetonesEnumeration.rdoKetonesPlus2;
				case 4: return grpKetonesEnumeration.rdoKetonesPlus1;
				case 5: return grpKetonesEnumeration.rdoKetonesNeg;
			}
			return null;
		}
		public void setValue(grpKetonesEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpKetonesEnumeration.None.id);
		}
		public boolean isEnabled(grpKetonesEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpKetonesEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpKetonesEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpKetonesEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpKetonesEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpKetonesEnumeration None = new grpKetonesEnumeration(-1);
		public static grpKetonesEnumeration rdoKetonesTrace = new grpKetonesEnumeration(0);
		public static grpKetonesEnumeration rdoKetonesPlus4 = new grpKetonesEnumeration(1);
		public static grpKetonesEnumeration rdoKetonesPlus3 = new grpKetonesEnumeration(2);
		public static grpKetonesEnumeration rdoKetonesPlus2 = new grpKetonesEnumeration(3);
		public static grpKetonesEnumeration rdoKetonesPlus1 = new grpKetonesEnumeration(4);
		public static grpKetonesEnumeration rdoKetonesNeg = new grpKetonesEnumeration(5);
		private grpKetonesEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpKetonesEnumeration)o).id;
		}
		private int id;
	}

	public static class grpBloodRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 396, 285, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper35.getX(), anchoringHelper35.getY(), anchoringHelper35.getWidth(), "", startTabIndex.intValue() + 1028);
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 340, 285, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper36.getX(), anchoringHelper36.getY(), anchoringHelper36.getWidth(), "", startTabIndex.intValue() + 1027);
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 284, 285, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper37.getX(), anchoringHelper37.getY(), anchoringHelper37.getWidth(), "", startTabIndex.intValue() + 1026);
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 228, 285, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(3, anchoringHelper38.getX(), anchoringHelper38.getY(), anchoringHelper38.getWidth(), "", startTabIndex.intValue() + 1025);
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 172, 285, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(4, anchoringHelper39.getX(), anchoringHelper39.getY(), anchoringHelper39.getWidth(), "", startTabIndex.intValue() + 1024);
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 116, 285, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(5, anchoringHelper40.getX(), anchoringHelper40.getY(), anchoringHelper40.getWidth(), "", startTabIndex.intValue() + 1023);
		}
		public void setText(grpBloodEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpBloodEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpBloodEnumeration.None;
				case 0: return grpBloodEnumeration.rdoBloodTrace;
				case 1: return grpBloodEnumeration.rdoBloodPlus4;
				case 2: return grpBloodEnumeration.rdoBloodPlus3;
				case 3: return grpBloodEnumeration.rdoBloodPlus2;
				case 4: return grpBloodEnumeration.rdoBloodPlus1;
				case 5: return grpBloodEnumeration.rdoBloodNeg;
			}
			return null;
		}
		public void setValue(grpBloodEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpBloodEnumeration.None.id);
		}
		public boolean isEnabled(grpBloodEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpBloodEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpBloodEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpBloodEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpBloodEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpBloodEnumeration None = new grpBloodEnumeration(-1);
		public static grpBloodEnumeration rdoBloodTrace = new grpBloodEnumeration(0);
		public static grpBloodEnumeration rdoBloodPlus4 = new grpBloodEnumeration(1);
		public static grpBloodEnumeration rdoBloodPlus3 = new grpBloodEnumeration(2);
		public static grpBloodEnumeration rdoBloodPlus2 = new grpBloodEnumeration(3);
		public static grpBloodEnumeration rdoBloodPlus1 = new grpBloodEnumeration(4);
		public static grpBloodEnumeration rdoBloodNeg = new grpBloodEnumeration(5);
		private grpBloodEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpBloodEnumeration)o).id;
		}
		private int id;
	}

	public static class grpProteinRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 396, 261, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper41.getX(), anchoringHelper41.getY(), anchoringHelper41.getWidth(), "", startTabIndex.intValue() + 1022);
			RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 340, 261, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper42.getX(), anchoringHelper42.getY(), anchoringHelper42.getWidth(), "", startTabIndex.intValue() + 1021);
			RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 284, 261, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper43.getX(), anchoringHelper43.getY(), anchoringHelper43.getWidth(), "", startTabIndex.intValue() + 1020);
			RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 228, 261, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(3, anchoringHelper44.getX(), anchoringHelper44.getY(), anchoringHelper44.getWidth(), "", startTabIndex.intValue() + 1019);
			RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 172, 261, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(4, anchoringHelper45.getX(), anchoringHelper45.getY(), anchoringHelper45.getWidth(), "", startTabIndex.intValue() + 1018);
			RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 116, 261, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(5, anchoringHelper46.getX(), anchoringHelper46.getY(), anchoringHelper46.getWidth(), "", startTabIndex.intValue() + 1017);
		}
		public void setText(grpProteinEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpProteinEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpProteinEnumeration.None;
				case 0: return grpProteinEnumeration.rdoProteinTrace;
				case 1: return grpProteinEnumeration.rdoProteinPlus4;
				case 2: return grpProteinEnumeration.rdoProteinPlus3;
				case 3: return grpProteinEnumeration.rdoProteinPlus2;
				case 4: return grpProteinEnumeration.rdoProteinPlus1;
				case 5: return grpProteinEnumeration.rdoProteinNeg;
			}
			return null;
		}
		public void setValue(grpProteinEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpProteinEnumeration.None.id);
		}
		public boolean isEnabled(grpProteinEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpProteinEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpProteinEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpProteinEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpProteinEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpProteinEnumeration None = new grpProteinEnumeration(-1);
		public static grpProteinEnumeration rdoProteinTrace = new grpProteinEnumeration(0);
		public static grpProteinEnumeration rdoProteinPlus4 = new grpProteinEnumeration(1);
		public static grpProteinEnumeration rdoProteinPlus3 = new grpProteinEnumeration(2);
		public static grpProteinEnumeration rdoProteinPlus2 = new grpProteinEnumeration(3);
		public static grpProteinEnumeration rdoProteinPlus1 = new grpProteinEnumeration(4);
		public static grpProteinEnumeration rdoProteinNeg = new grpProteinEnumeration(5);
		private grpProteinEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpProteinEnumeration)o).id;
		}
		private int id;
	}

	public static class grpLeucocytesRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 396, 237, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper47.getX(), anchoringHelper47.getY(), anchoringHelper47.getWidth(), "", startTabIndex.intValue() + 1016);
			RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 340, 237, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper48.getX(), anchoringHelper48.getY(), anchoringHelper48.getWidth(), "", startTabIndex.intValue() + 1015);
			RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 284, 237, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper49.getX(), anchoringHelper49.getY(), anchoringHelper49.getWidth(), "", startTabIndex.intValue() + 1014);
			RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 228, 237, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(3, anchoringHelper50.getX(), anchoringHelper50.getY(), anchoringHelper50.getWidth(), "", startTabIndex.intValue() + 1013);
			RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 172, 237, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(4, anchoringHelper51.getX(), anchoringHelper51.getY(), anchoringHelper51.getWidth(), "", startTabIndex.intValue() + 1012);
			RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 116, 237, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(5, anchoringHelper52.getX(), anchoringHelper52.getY(), anchoringHelper52.getWidth(), "", startTabIndex.intValue() + 1011);
		}
		public void setText(grpLeucocytesEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpLeucocytesEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpLeucocytesEnumeration.None;
				case 0: return grpLeucocytesEnumeration.rdoLeucocytesTrace;
				case 1: return grpLeucocytesEnumeration.rdoLeucocytesPlus4;
				case 2: return grpLeucocytesEnumeration.rdoLeucocytesPlus3;
				case 3: return grpLeucocytesEnumeration.rdoLeucocytesPlus2;
				case 4: return grpLeucocytesEnumeration.rdoLeucocytesPlus1;
				case 5: return grpLeucocytesEnumeration.rdoLeucocytesNeg;
			}
			return null;
		}
		public void setValue(grpLeucocytesEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpLeucocytesEnumeration.None.id);
		}
		public boolean isEnabled(grpLeucocytesEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpLeucocytesEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpLeucocytesEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpLeucocytesEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpLeucocytesEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpLeucocytesEnumeration None = new grpLeucocytesEnumeration(-1);
		public static grpLeucocytesEnumeration rdoLeucocytesTrace = new grpLeucocytesEnumeration(0);
		public static grpLeucocytesEnumeration rdoLeucocytesPlus4 = new grpLeucocytesEnumeration(1);
		public static grpLeucocytesEnumeration rdoLeucocytesPlus3 = new grpLeucocytesEnumeration(2);
		public static grpLeucocytesEnumeration rdoLeucocytesPlus2 = new grpLeucocytesEnumeration(3);
		public static grpLeucocytesEnumeration rdoLeucocytesPlus1 = new grpLeucocytesEnumeration(4);
		public static grpLeucocytesEnumeration rdoLeucocytesNeg = new grpLeucocytesEnumeration(5);
		private grpLeucocytesEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpLeucocytesEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(540, 519);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 8, 176, 440, 312, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 0, 45, 540, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper54.getSize(), instance1, startTabIndex.intValue() + 6, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(0), new Integer(45), new Integer(540), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 6), m_customControlAuthoringInfoForm, instance1 } );
		ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 6), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringInfoControl);
		Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Filter by:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 27, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urinalysis Records:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 134, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording Date/Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 8, 108, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 20, 461, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Inactivate:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 20, 357, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ascorbic Acid:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 116, 213, 27, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Neg", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 172, 213, 13, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "+", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 388, 213, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Trace", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 20, 437, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Nitrate:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 332, 213, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "++++", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 276, 213, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "+++", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 228, 213, 23, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "++", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 116, 421, 27, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Neg", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 212, 461, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specific Gravity:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 388, 461, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "1 - 1.03", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 388, 437, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "5 - 8", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 212, 437, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "pH:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 172, 421, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pos", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 20, 261, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Protein:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 20, 381, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bilirubin:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 20, 405, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urobilinogen:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 20, 333, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Glucose:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 20, 309, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ketones:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 20, 285, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Blood:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 20, 237, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Leucocytes:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 20, 190, 152, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Abnormality Detected:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 8, 157, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Sample:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 376, 493, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 1068), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 456, 493, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 1070), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 88, 493, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 1066), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 8, 493, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 1064), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 138, 132, 387, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 138, 106, 387, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbRecordingHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbRecordingHCPTemp);
		cmbRecordingHCPComboBox cmbRecordingHCP = (cmbRecordingHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRecordingHCPComboBox.class, m_cmbRecordingHCPTemp);
		super.addComboBox(cmbRecordingHCP);
		RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 308, 435, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbPHTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 1061), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbPHTemp);
		cmbPHComboBox cmbPH = (cmbPHComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPHComboBox.class, m_cmbPHTemp);
		super.addComboBox(cmbPH);

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 138, 25, 387, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrAllRecordsTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrAllRecordsTemp);
		recbrAllRecordsRecordBrowser recbrAllRecords = (recbrAllRecordsRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrAllRecordsRecordBrowser.class, m_recbrAllRecordsTemp);
		super.addRecordBrowser(recbrAllRecords);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 116, 461, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 1062), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 172, 190, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 80, 157, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));

		// DecimalBox Controls
		RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 308, 459, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 1063), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));

		// RadioButton Controls
		RadioButton tmpgrpFilterBy = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpgrpFilterBy);
		grpFilterByRadioButton grpFilterBy = (grpFilterByRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpFilterByRadioButton.class, tmpgrpFilterBy);
		grpFilterBy.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpFilterBy);
		RadioButton tmpgrpAscorbic = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpgrpAscorbic);
		grpAscorbicRadioButton grpAscorbic = (grpAscorbicRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpAscorbicRadioButton.class, tmpgrpAscorbic);
		grpAscorbic.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpAscorbic);
		RadioButton tmpgrpNitrate = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpgrpNitrate);
		grpNitrateRadioButton grpNitrate = (grpNitrateRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpNitrateRadioButton.class, tmpgrpNitrate);
		grpNitrate.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpNitrate);
		RadioButton tmpgrpUbg = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpgrpUbg);
		grpUbgRadioButton grpUbg = (grpUbgRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpUbgRadioButton.class, tmpgrpUbg);
		grpUbg.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpUbg);
		RadioButton tmpgrpBil = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpgrpBil);
		grpBilRadioButton grpBil = (grpBilRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpBilRadioButton.class, tmpgrpBil);
		grpBil.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpBil);
		RadioButton tmpgrpGlu = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpgrpGlu);
		grpGluRadioButton grpGlu = (grpGluRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpGluRadioButton.class, tmpgrpGlu);
		grpGlu.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpGlu);
		RadioButton tmpgrpKetones = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpgrpKetones);
		grpKetonesRadioButton grpKetones = (grpKetonesRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpKetonesRadioButton.class, tmpgrpKetones);
		grpKetones.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpKetones);
		RadioButton tmpgrpBlood = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpgrpBlood);
		grpBloodRadioButton grpBlood = (grpBloodRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpBloodRadioButton.class, tmpgrpBlood);
		grpBlood.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpBlood);
		RadioButton tmpgrpProtein = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpgrpProtein);
		grpProteinRadioButton grpProtein = (grpProteinRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpProteinRadioButton.class, tmpgrpProtein);
		grpProtein.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpProtein);
		RadioButton tmpgrpLeucocytes = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpgrpLeucocytes);
		grpLeucocytesRadioButton grpLeucocytes = (grpLeucocytesRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpLeucocytesRadioButton.class, tmpgrpLeucocytes);
		grpLeucocytes.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpLeucocytes);
	}


	public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean iscustomControlAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setcustomControlAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public Button btnSave()
	{
		return (Button)super.getControl(30);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(31);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(32);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(33);
	}
	public DateTimeControl dtimRecordingDateTime()
	{
		return (DateTimeControl)super.getControl(34);
	}
	public cmbRecordingHCPComboBox cmbRecordingHCP()
	{
		return (cmbRecordingHCPComboBox)super.getComboBox(0);
	}
	public cmbPHComboBox cmbPH()
	{
		return (cmbPHComboBox)super.getComboBox(1);
	}
	public recbrAllRecordsRecordBrowser recbrAllRecords()
	{
		return (recbrAllRecordsRecordBrowser)super.getRecordBrowser(0);
	}
	public CheckBox chkInactive()
	{
		return (CheckBox)super.getControl(38);
	}
	public CheckBox chkNoAbnormality()
	{
		return (CheckBox)super.getControl(39);
	}
	public CheckBox chkNoSample()
	{
		return (CheckBox)super.getControl(40);
	}
	public DecimalBox decSpecificGravity()
	{
		return (DecimalBox)super.getControl(41);
	}
	public grpFilterByRadioButton grpFilterBy()
	{
		return (grpFilterByRadioButton)super.getRadioButton(0);
	}
	public grpAscorbicRadioButton grpAscorbic()
	{
		return (grpAscorbicRadioButton)super.getRadioButton(1);
	}
	public grpNitrateRadioButton grpNitrate()
	{
		return (grpNitrateRadioButton)super.getRadioButton(2);
	}
	public grpUbgRadioButton grpUbg()
	{
		return (grpUbgRadioButton)super.getRadioButton(3);
	}
	public grpBilRadioButton grpBil()
	{
		return (grpBilRadioButton)super.getRadioButton(4);
	}
	public grpGluRadioButton grpGlu()
	{
		return (grpGluRadioButton)super.getRadioButton(5);
	}
	public grpKetonesRadioButton grpKetones()
	{
		return (grpKetonesRadioButton)super.getRadioButton(6);
	}
	public grpBloodRadioButton grpBlood()
	{
		return (grpBloodRadioButton)super.getRadioButton(7);
	}
	public grpProteinRadioButton grpProtein()
	{
		return (grpProteinRadioButton)super.getRadioButton(8);
	}
	public grpLeucocytesRadioButton grpLeucocytes()
	{
		return (grpLeucocytesRadioButton)super.getRadioButton(9);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedUrinalysis = new ims.framework.ContextVariable("SelectedUrinalysis", prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier + "");
			cxl_isEnabled = new ims.framework.ContextVariable("isEnabled", prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__isEnabled_" + componentIdentifier + "");
			cxl_SelectedEvent = new ims.framework.ContextVariable("SelectedEvent", prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedEvent_" + componentIdentifier + "");
		}
		
		public boolean getSelectedUrinalysisIsNotNull()
		{
			return !cxl_SelectedUrinalysis.getValueIsNull(context);
		}
		public ims.core.vo.Urinalysis getSelectedUrinalysis()
		{
			return (ims.core.vo.Urinalysis)cxl_SelectedUrinalysis.getValue(context);
		}
		public void setSelectedUrinalysis(ims.core.vo.Urinalysis value)
		{
			cxl_SelectedUrinalysis.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedUrinalysis = null;
		public boolean getisEnabledIsNotNull()
		{
			return !cxl_isEnabled.getValueIsNull(context);
		}
		public Boolean getisEnabled()
		{
			return (Boolean)cxl_isEnabled.getValue(context);
		}
		public void setisEnabled(Boolean value)
		{
			cxl_isEnabled.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isEnabled = null;
		public boolean getSelectedEventIsNotNull()
		{
			return !cxl_SelectedEvent.getValueIsNull(context);
		}
		public ims.emergency.vo.enums.EdAssessment_CustomControlsEvents getSelectedEvent()
		{
			return (ims.emergency.vo.enums.EdAssessment_CustomControlsEvents)cxl_SelectedEvent.getValue(context);
		}
		public void setSelectedEvent(ims.emergency.vo.enums.EdAssessment_CustomControlsEvents value)
		{
			cxl_SelectedEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedEvent = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[87];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-ID", "ID_Urinalysis");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-PROTEIN", "Protein");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-BLOOD", "Blood");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-KETONES", "Ketones");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-GLUCOSE", "Glucose");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-NITRATE", "Nitrate");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-PH", "PH");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-NOSAMPLE", "NoSample");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-ISACTIVE", "IsActive");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.UrinalysisCc.__internal_x_context__SelectedUrinalysis_" + componentIdentifier, "BO-1022100012-CARECONTEXT", "CareContext");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
