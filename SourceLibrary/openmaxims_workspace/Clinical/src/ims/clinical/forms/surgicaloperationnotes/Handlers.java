//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.surgicaloperationnotes;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnStartClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkReturnClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyr1TabChanged(ims.framework.LayerBridge tab);
	abstract protected void onCcGeneralDetailsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcOperationDetailValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcDiagramValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcPostOpInstructionValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcPreviewValueChanged() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormOpen(args);
			}
		});
		this.form.btnStart().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnStartClick();
			}
		});
		this.form.lnkReturn().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkReturnClick();
			}
		});
		this.form.lyr1().tabGeneralInstructions().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyr1tabGeneralInstructionsActivated();
			}
		});
		this.form.lyr1().tabOperationDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyr1tabOperationDetailsActivated();
			}
		});
		this.form.lyr1().tabDiagram().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyr1tabDiagramActivated();
			}
		});
		this.form.lyr1().tabPostOp().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyr1tabPostOpActivated();
			}
		});
		this.form.lyr1().tabPreview().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyr1tabPreviewActivated();
			}
		});
		this.form.lyr1().tabGeneralInstructions().setccGeneralDetailsValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcGeneralDetailsValueChanged();
			}
		});
		this.form.lyr1().tabOperationDetails().setccOperationDetailValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcOperationDetailValueChanged();
			}
		});
		this.form.lyr1().tabDiagram().setccDiagramValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcDiagramValueChanged();
			}
		});
		this.form.lyr1().tabPostOp().setccPostOpInstructionValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcPostOpInstructionValueChanged();
			}
		});
		this.form.lyr1().tabPreview().setccPreviewValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcPreviewValueChanged();
			}
		});
	}
	private void onlyr1tabGeneralInstructionsActivated()
	{
		this.form.lyr1().showtabGeneralInstructions();
		onlyr1TabChanged(this.form.lyr1().tabGeneralInstructions());
	}
	private void onlyr1tabOperationDetailsActivated()
	{
		this.form.lyr1().showtabOperationDetails();
		onlyr1TabChanged(this.form.lyr1().tabOperationDetails());
	}
	private void onlyr1tabDiagramActivated()
	{
		this.form.lyr1().showtabDiagram();
		onlyr1TabChanged(this.form.lyr1().tabDiagram());
	}
	private void onlyr1tabPostOpActivated()
	{
		this.form.lyr1().showtabPostOp();
		onlyr1TabChanged(this.form.lyr1().tabPostOp());
	}
	private void onlyr1tabPreviewActivated()
	{
		this.form.lyr1().showtabPreview();
		onlyr1TabChanged(this.form.lyr1().tabPreview());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
