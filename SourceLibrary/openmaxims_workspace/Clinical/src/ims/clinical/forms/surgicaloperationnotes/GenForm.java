//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.surgicaloperationnotes;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabGeneralInstructionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 570, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccGeneralDetailsForm = loader.loadComponent(123171, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
				//ims.framework.Control m_ccGeneralDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(0), new Integer(824), new Integer(570), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3), m_ccGeneralDetailsForm, instance1 } );
				ims.framework.Control m_ccGeneralDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3), m_ccGeneralDetailsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccGeneralDetailsControl);
				Menu[] menus1 = m_ccGeneralDetailsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.surgicalopnotesgeneraldetailscc.IComponent ccGeneralDetails()
			{
				return (ims.clinical.forms.surgicalopnotesgeneraldetailscc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccGeneralDetailsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccGeneralDetailsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccGeneralDetailsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccGeneralDetailsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccGeneralDetailsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabOperationDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 824, 560, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccOperationDetailForm = loader.loadComponent(123174, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 1004, skipContextValidation);
				//ims.framework.Control m_ccOperationDetailControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), new Integer(8), new Integer(824), new Integer(560), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1004), m_ccOperationDetailForm, instance1 } );
				ims.framework.Control m_ccOperationDetailControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1004), m_ccOperationDetailForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccOperationDetailControl);
				Menu[] menus1 = m_ccOperationDetailForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.surgicalopnotesoperationdetailscc.IComponent ccOperationDetail()
			{
				return (ims.clinical.forms.surgicalopnotesoperationdetailscc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccOperationDetailValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccOperationDetailVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccOperationDetailVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccOperationDetailEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccOperationDetailEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabDiagramContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 568, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccDiagramForm = loader.loadComponent(123173, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 2005, skipContextValidation);
				//ims.framework.Control m_ccDiagramControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(0), new Integer(0), new Integer(824), new Integer(568), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2005), m_ccDiagramForm, instance1 } );
				ims.framework.Control m_ccDiagramControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2005), m_ccDiagramForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccDiagramControl);
				Menu[] menus1 = m_ccDiagramForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.surgicalopnotesdiagramcc.IComponent ccDiagram()
			{
				return (ims.clinical.forms.surgicalopnotesdiagramcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccDiagramValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccDiagramVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccDiagramVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccDiagramEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccDiagramEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPostOpContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 816, 560, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccPostOpInstructionForm = loader.loadComponent(123172, appForm, startControlID * 10 + 4000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 3006, skipContextValidation);
				//ims.framework.Control m_ccPostOpInstructionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(0), new Integer(8), new Integer(816), new Integer(560), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3006), m_ccPostOpInstructionForm, instance1 } );
				ims.framework.Control m_ccPostOpInstructionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3006), m_ccPostOpInstructionForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPostOpInstructionControl);
				Menu[] menus1 = m_ccPostOpInstructionForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.surgicalopnotespostopinstructionscc.IComponent ccPostOpInstruction()
			{
				return (ims.clinical.forms.surgicalopnotespostopinstructionscc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPostOpInstructionValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPostOpInstructionVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPostOpInstructionVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPostOpInstructionEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPostOpInstructionEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPreviewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 816, 568, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccPreviewForm = loader.loadComponent(123175, appForm, startControlID * 10 + 5000, anchoringHelper5.getSize(), instance1, startTabIndex.intValue() + 4007, skipContextValidation);
				//ims.framework.Control m_ccPreviewControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(8), new Integer(0), new Integer(816), new Integer(568), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4007), m_ccPreviewForm, instance1 } );
				ims.framework.Control m_ccPreviewControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4007), m_ccPreviewForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPreviewControl);
				Menu[] menus1 = m_ccPreviewForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.surgicalopnotespreviewcc.IComponent ccPreview()
			{
				return (ims.clinical.forms.surgicalopnotespreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPreviewValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPreviewVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPreviewVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPreviewEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPreviewEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 600, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabGeneralInstructions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"General Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabGeneralInstructionsContainer m_tabGeneralInstructionsContainer = (tabGeneralInstructionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGeneralInstructionsContainer.class, m_tabGeneralInstructions, factory);
			super.addContainer(m_tabGeneralInstructions, m_tabGeneralInstructionsContainer);
			ims.framework.utils.SizeInfo m_tabGeneralInstructionsDesignSize = new ims.framework.utils.SizeInfo(832, 600);
			ims.framework.utils.SizeInfo m_tabGeneralInstructionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper6.getWidth(), anchoringHelper6.getHeight());
			m_tabGeneralInstructionsContainer.setContext(form, appForm, m_tabGeneralInstructions, loader, startControlID, m_tabGeneralInstructionsDesignSize, m_tabGeneralInstructionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 600, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOperationDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Operation Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOperationDetailsContainer m_tabOperationDetailsContainer = (tabOperationDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOperationDetailsContainer.class, m_tabOperationDetails, factory);
			super.addContainer(m_tabOperationDetails, m_tabOperationDetailsContainer);
			ims.framework.utils.SizeInfo m_tabOperationDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 600);
			ims.framework.utils.SizeInfo m_tabOperationDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper7.getWidth(), anchoringHelper7.getHeight());
			m_tabOperationDetailsContainer.setContext(form, appForm, m_tabOperationDetails, loader, startControlID, m_tabOperationDetailsDesignSize, m_tabOperationDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 600, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDiagram = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Diagram", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDiagramContainer m_tabDiagramContainer = (tabDiagramContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDiagramContainer.class, m_tabDiagram, factory);
			super.addContainer(m_tabDiagram, m_tabDiagramContainer);
			ims.framework.utils.SizeInfo m_tabDiagramDesignSize = new ims.framework.utils.SizeInfo(832, 600);
			ims.framework.utils.SizeInfo m_tabDiagramRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper8.getWidth(), anchoringHelper8.getHeight());
			m_tabDiagramContainer.setContext(form, appForm, m_tabDiagram, loader, startControlID, m_tabDiagramDesignSize, m_tabDiagramRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 600, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPostOp = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Post Op Instructions", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPostOpContainer m_tabPostOpContainer = (tabPostOpContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPostOpContainer.class, m_tabPostOp, factory);
			super.addContainer(m_tabPostOp, m_tabPostOpContainer);
			ims.framework.utils.SizeInfo m_tabPostOpDesignSize = new ims.framework.utils.SizeInfo(832, 600);
			ims.framework.utils.SizeInfo m_tabPostOpRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper9.getWidth(), anchoringHelper9.getHeight());
			m_tabPostOpContainer.setContext(form, appForm, m_tabPostOp, loader, startControlID, m_tabPostOpDesignSize, m_tabPostOpRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 600, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPreview = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Preview", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPreviewContainer m_tabPreviewContainer = (tabPreviewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPreviewContainer.class, m_tabPreview, factory);
			super.addContainer(m_tabPreview, m_tabPreviewContainer);
			ims.framework.utils.SizeInfo m_tabPreviewDesignSize = new ims.framework.utils.SizeInfo(832, 600);
			ims.framework.utils.SizeInfo m_tabPreviewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper10.getWidth(), anchoringHelper10.getHeight());
			m_tabPreviewContainer.setContext(form, appForm, m_tabPreview, loader, startControlID, m_tabPreviewDesignSize, m_tabPreviewRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabGeneralInstructions().setVisible(false);
			tabOperationDetails().setVisible(false);
			tabDiagram().setVisible(false);
			tabPostOp().setVisible(false);
			tabPreview().setVisible(false);
		}
		public void settabGeneralInstructionsEnabled(boolean value)
		{
			tabGeneralInstructions().setEnabled(value);
		}
		public void settabOperationDetailsEnabled(boolean value)
		{
			tabOperationDetails().setEnabled(value);
		}
		public void settabDiagramEnabled(boolean value)
		{
			tabDiagram().setEnabled(value);
		}
		public void settabPostOpEnabled(boolean value)
		{
			tabPostOp().setEnabled(value);
		}
		public void settabPreviewEnabled(boolean value)
		{
			tabPreview().setEnabled(value);
		}
		public void showtabGeneralInstructions()
		{
			tabOperationDetails().setVisible(false);
			tabDiagram().setVisible(false);
			tabPostOp().setVisible(false);
			tabPreview().setVisible(false);
			tabGeneralInstructions().setVisible(true);
		}
		public void showtabOperationDetails()
		{
			tabGeneralInstructions().setVisible(false);
			tabDiagram().setVisible(false);
			tabPostOp().setVisible(false);
			tabPreview().setVisible(false);
			tabOperationDetails().setVisible(true);
		}
		public void showtabDiagram()
		{
			tabGeneralInstructions().setVisible(false);
			tabOperationDetails().setVisible(false);
			tabPostOp().setVisible(false);
			tabPreview().setVisible(false);
			tabDiagram().setVisible(true);
		}
		public void showtabPostOp()
		{
			tabGeneralInstructions().setVisible(false);
			tabOperationDetails().setVisible(false);
			tabDiagram().setVisible(false);
			tabPreview().setVisible(false);
			tabPostOp().setVisible(true);
		}
		public void showtabPreview()
		{
			tabGeneralInstructions().setVisible(false);
			tabOperationDetails().setVisible(false);
			tabDiagram().setVisible(false);
			tabPostOp().setVisible(false);
			tabPreview().setVisible(true);
		}

		public tabGeneralInstructionsContainer tabGeneralInstructions()
		{
			return (tabGeneralInstructionsContainer)super.layers.get(0);
		}
		public tabOperationDetailsContainer tabOperationDetails()
		{
			return (tabOperationDetailsContainer)super.layers.get(1);
		}
		public tabDiagramContainer tabDiagram()
		{
			return (tabDiagramContainer)super.layers.get(2);
		}
		public tabPostOpContainer tabPostOp()
		{
			return (tabPostOpContainer)super.layers.get(3);
		}
		public tabPreviewContainer tabPreview()
		{
			return (tabPreviewContainer)super.layers.get(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 1, 168, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start eOpNotes", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Link Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 728, 8, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnStart()
	{
		return (Button)super.getControl(5);
	}
	public Link lnkReturn()
	{
		return (Link)super.getControl(6);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				ConsultantProcedureHotlistDialog = new LocalFormName(104132);
				SearchGraphicalAssessment = new LocalFormName(123169);
				DiagnosisDialog = new LocalFormName(123146);
				SurgicalOpNotes = new LocalFormName(123181);
				SurgicalOpNotesList = new LocalFormName(123180);
			}
			public final FormName ConsultantProcedureHotlistDialog;
			public final FormName SearchGraphicalAssessment;
			public final FormName DiagnosisDialog;
			public final FormName SurgicalOpNotes;
			public final FormName SurgicalOpNotesList;
		}

		public ClinicalForms Clinical;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SurgicalOperationSummary = new ims.framework.ContextVariable("SurgicalOperationSummary", prefix + "_lv_Clinical.SurgicalOperationNotes.__internal_x_context__SurgicalOperationSummary_" + componentIdentifier + "");
		}
		
		public boolean getSurgicalOperationSummaryIsNotNull()
		{
			return !cxl_SurgicalOperationSummary.getValueIsNull(context);
		}
		public ims.clinical.vo.SurgicalOperationSummaryVo getSurgicalOperationSummary()
		{
			return (ims.clinical.vo.SurgicalOperationSummaryVo)cxl_SurgicalOperationSummary.getValue(context);
		}
		public void setSurgicalOperationSummary(ims.clinical.vo.SurgicalOperationSummaryVo value)
		{
			cxl_SurgicalOperationSummary.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SurgicalOperationSummary = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[75];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOperationNotes.__internal_x_context__SurgicalOperationSummary_" + componentIdentifier, "BO-1072100111-ID", "ID_SurgicalOperationSummary");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOperationNotes.__internal_x_context__SurgicalOperationSummary_" + componentIdentifier, "BO-1072100111-CARECONTEXT", "CareContext");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOperationNotes.__internal_x_context__SurgicalOperationSummary_" + componentIdentifier, "BO-1072100111-OPERATIONDETAILSCOMPLETED", "OperationDetailsCompleted");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOperationNotes.__internal_x_context__SurgicalOperationSummary_" + componentIdentifier, "BO-1072100111-SUMMARYDOCUMENTGENERATED", "SummaryDocumentGenerated");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
