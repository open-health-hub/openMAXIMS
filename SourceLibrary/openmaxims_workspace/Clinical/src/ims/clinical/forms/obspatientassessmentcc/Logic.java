//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4680.16533)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.obspatientassessmentcc;

import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentLiteVoCollection;
import ims.assessment.vo.UserAssessmentVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PatientAssessmentStatusReasonCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.EmergencyAttendanceForObsPatientAssessmentVo;
import ims.emergency.vo.enums.EdAssessment_CustomControlsEvents;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	public void initialize()
	{
		loadStatusCombo(false);
		form.customControlCompleted().setLabels(AuthoringLabelType.COMPLETING_COMPLETED);
		open();
	}

	private void loadStatusCombo(boolean removeNonCommenced)
	{
		//Status - has to load only parents
		form.cmbStatus().clear();
		PatientAssessmentStatusReasonCollection voColl = LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());
		for(int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if(voColl.get(i).getParent() == null)
			{
				//if(removeNonCommenced && voColl.get(i).equals(PatientAssessmentStatusReason.NOTCOMMENCED))
					//continue;
				
				form.cmbStatus().newRow(voColl.get(i), voColl.get(i).toString());
			}
		}
	}
	
	private void open()
	{
		form.getLocalContext().setcurrentEmergencyAttendance(form.getGlobalContext().Core.getCurrentCareContextIsNotNull()? domain.getEmergencyAttendance(form.getGlobalContext().Core.getCurrentCareContext()):null);
		form.getLocalContext().setcurrentObsPatAssessment(form.getLocalContext().getcurrentEmergencyAttendanceIsNotNull()?form.getLocalContext().getcurrentEmergencyAttendance().getObsPatientAssessment():null);
		
		form.setMode(FormMode.VIEW);
		populateScreenFromData(form.getLocalContext().getcurrentObsPatAssessment());
		
	}

	private void populateScreenFromData(PatientAssessmentVo obsPatientAssessment)
	{
		clearData();
		
		if (obsPatientAssessment!=null)
		{
			form.ccAssessment().clearComponent();
			form.ccAssessment().setPatientAssessment(obsPatientAssessment, form.getMode().equals(FormMode.VIEW));
			populateCombos(obsPatientAssessment);
			populateAuthoring(obsPatientAssessment);
			populateCompletedHCPCustomControl(obsPatientAssessment);
		}
		else
			initializeCustomControl();
			
	}
	private boolean initializeCustomControl() 
	{
		UserAssessmentLiteVoCollection list = null;
		form.ccAssessment().clearComponent();
		if (form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull())
			list  = domain.listAssessments(form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty());
		
		if (list != null && list.size() == 1)
		{
			form.getLocalContext().setChosenAssessment(domain.getUserAssessment(list.get(0)));
			loadAssessment();
		}
		else if (list != null && list.size() > 1)
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.getGlobalContext().Assessment.setAssessmentsForSpecialtyCollection(list);
				engine.open(form.getForms().Assessment.AssessmentsForSpecialty);
			}
		}
			
		if (list==null || (list!=null && list.size() == 0))
		{
			if (form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()
				&& form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull())
				engine.showMessage("No configured assessment was found for Specialty - " + form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty().toString() + " and TaxonomyMapping MAXIMS = ED_ASSESS.", "No Configured Assessment", MessageButtons.OK, MessageIcon.WARNING);
			else
				engine.showMessage("No configured assessment was found for the current Specialty  and TaxonomyMapping MAXIMS = ED_ASSESS.", "No Configured Assessment", MessageButtons.OK, MessageIcon.WARNING);
			
			form.setMode(FormMode.VIEW);
			return false;
		}
		
		form.getLocalContext().setisEnabled(true);
		return true;
	}
	
	private void loadAssessment()
	{
		if (form.getLocalContext().getChosenAssessmentIsNotNull())
		{
			PatientAssessmentVo newAssessment = new PatientAssessmentVo();
			PatientAssessmentDataVo assessmentData = new PatientAssessmentDataVo();	
			UserAssessmentVo userAssessment = form.getLocalContext().getChosenAssessment();
			assessmentData.setUserAssessment(userAssessment);
			assessmentData.setGroupQuestionWidth(userAssessment.getGroupQuestionWidth());
			newAssessment.setAssessmentData(assessmentData);	

			form.ccAssessment().setPatientAssessment(newAssessment, form.getMode().equals(FormMode.VIEW),PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		}		
	}
	
	private void populateCombos(PatientAssessmentVo patientAssessment)
	{
		if(patientAssessment == null)
			return;
		
		PatientAssessmentStatusReason status = patientAssessment.getStatus();
		boolean isEditMode = form.getMode().equals(FormMode.EDIT);
		if (isEditMode)
		{
			loadStatusCombo(true);
			//if(status != null && status.equals(PatientAssessmentStatusReason.NOTCOMMENCED))
				//status = PatientAssessmentStatusReason.INPROGRESS;
		}
		form.cmbStatus().setValue(status);
		cmbStatusValueChanged();
		form.cmbReason().setValue(patientAssessment.getStatusReason());
	}
	
	private void populateCompletedHCPCustomControl(PatientAssessmentVo patientAssessment)
	{
		if(patientAssessment == null)
			return;
		
		AuthoringInformationVo completedData = new AuthoringInformationVo();
		completedData.setAuthoringHcp(patientAssessment.getCompletedHCP());
		completedData.setAuthoringDateTime(patientAssessment.getCompletedDateTime());
		form.customControlCompleted().setValue(completedData);
	}
	
	private void populateAuthoring(PatientAssessmentVo patientAssessment)
	{
		AuthoringInformationVo voAuthoringInfo = null;
		if(patientAssessment != null)
			voAuthoringInfo = patientAssessment.getAuthoringInformation();
		
		if(voAuthoringInfo != null)
			form.customControlAuthoring().setValue(voAuthoringInfo);
		else
			form.customControlAuthoring().initializeComponent();
	}
	
	private void cmbStatusValueChanged()
	{
		boolean editMode = form.getMode().equals(FormMode.EDIT);
		
		form.cmbReason().clear();
		loadReasonCombo();	
		
		
		if(editMode)
		{
			form.customControlCompleted().initializeComponent();
			form.setcustomControlCompletedEnabled(true);	
		} 
		
		if (editMode)
		{
			if (PatientAssessmentStatusReason.COMPLETED.equals(form.cmbStatus().getValue()))
				form.customControlCompleted().initializeComponent();
			else
				form.customControlCompleted().setValue(null);
		}
		
		//enableConfirmingHCPComponent();
	}
	
	private void loadReasonCombo()
	{
		PatientAssessmentStatusReason parentLkp = form.cmbStatus().getValue();
		PatientAssessmentStatusReasonCollection voColl = LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());
		for(int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if(voColl.get(i).getParent() != null && voColl.get(i).getParent().equals(parentLkp))
				form.cmbReason().newRow(voColl.get(i), voColl.get(i).toString());
		}
	}	
	
	private void clearData()
	{
		form.ccAssessment().clearComponent();
		form.cmbStatus().setValue(null);
		form.cmbReason().clear();
		form.customControlAuthoring().setValue(null);
		form.customControlCompleted().setValue(null);
	}

	
	public void setEnabled(Boolean argument)
	{
		form.getLocalContext().setisEnabled(argument);
		updateControlState();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlState();
	}

	private void updateControlState()
	{
		form.ccAssessment().setReadOnly(FormMode.VIEW.equals(form.getMode()));		
		form.setcustomControlAuthoringEnabled(FormMode.EDIT.equals(form.getMode()));//WDEV-17342
		form.customControlAuthoring().setIsRequiredPropertyToControls(FormMode.EDIT.equals(form.getMode()));
		
		form.cmbStatus().setEnabled(FormMode.EDIT.equals(form.getMode()));//WDEV-17342
		form.cmbReason().setEnabled(FormMode.EDIT.equals(form.getMode()));//WDEV-17342
	
		form.setcustomControlCompletedEnabled(FormMode.EDIT.equals(form.getMode()) && PatientAssessmentStatusReason.COMPLETED.equals(form.cmbStatus().getValue()));
		form.customControlCompleted().setIsRequiredPropertyToControls(FormMode.EDIT.equals(form.getMode()) && PatientAssessmentStatusReason.COMPLETED.equals(form.cmbStatus().getValue())); 
		
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && (form.getLocalContext().getcurrentObsPatAssessment()==null || (form.getLocalContext().getcurrentObsPatAssessment()!=null && !PatientAssessmentStatusReason.COMPLETED.equals(form.getLocalContext().getcurrentObsPatAssessment().getStatus()))));
		form.btnEdit().setEnabled(FormMode.VIEW.equals(form.getMode()) && Boolean.TRUE.equals(form.getLocalContext().getisEnabled()) && (form.getLocalContext().getcurrentObsPatAssessment()==null || (form.getLocalContext().getcurrentObsPatAssessment()!=null && !PatientAssessmentStatusReason.COMPLETED.equals(form.getLocalContext().getcurrentObsPatAssessment().getStatus()))));	
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Assessment.AssessmentsForSpecialty)&& result.equals(DialogResult.OK)	&& form.getGlobalContext().Core.getSelectedUserAssessmentLiteIsNotNull())
		{
			form.getLocalContext().setChosenAssessment(domain.getUserAssessment(form.getGlobalContext().Core.getSelectedUserAssessmentLite()));
			loadAssessment();
		}
		else if(formName.equals(form.getForms().Assessment.AssessmentsForSpecialty) && result.equals(DialogResult.CANCEL))
		{
			form.setMode(FormMode.VIEW);
			form.fireCustomControlValueChanged();
			open();
		}
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{	
		//WDEV-17337
		form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.CANCEL);
		form.fireCustomControlValueChanged();
		open();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		//WDEV-17337
		form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.SAVE);
		form.fireCustomControlValueChanged();
		if (save())
			open();
	}

	private boolean save()
	{
		EmergencyAttendanceForObsPatientAssessmentVo emergAttObsPatAssessmentTosave=populateDataFromScreen(form.getLocalContext().getcurrentObsPatAssessment());
		
		String[] errors = emergAttObsPatAssessmentTosave.validate(getUIErrors());

		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return false;
		}
		
		
		try 
		{
			form.getLocalContext().setcurrentEmergencyAttendance(domain.save(emergAttObsPatAssessmentTosave));
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		return true;
	}

	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.cmbStatus().getValue()==null)
		{
			errors.add("Status is mandatory!");
		}
		
		if (form.customControlCompleted().getValue()==null)
		{
			errors.add("Completing Information is mandatory!");
		}
		
		//WDEV-17342
		if (PatientAssessmentStatusReason.COMPLETED.equals(form.cmbStatus().getValue()))
		{
			String[] ccAssessmentErrors = form.ccAssessment().validateData();
			if (ccAssessmentErrors!=null && ccAssessmentErrors.length>0)
			{
				for (int i=0;i<ccAssessmentErrors.length;i++)
				{
					errors.add(form.ccAssessment().validateData()[i]);
				}
			}
		}
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	
	private EmergencyAttendanceForObsPatientAssessmentVo populateDataFromScreen(PatientAssessmentVo voPatientAssessment)
	{
		boolean isAssessmentCompleted = form.cmbStatus().getValue() != null && form.cmbStatus().getValue().equals(PatientAssessmentStatusReason.COMPLETED);
		
		if (voPatientAssessment==null)
			voPatientAssessment=new PatientAssessmentVo();
		else
			voPatientAssessment=(PatientAssessmentVo)voPatientAssessment.clone();
		
		EmergencyAttendanceForObsPatientAssessmentVo emergencyAttToSave = form.getLocalContext().getcurrentEmergencyAttendance();
		
		voPatientAssessment = form.ccAssessment().getPatientAssessment();
		voPatientAssessment.setStatus(form.cmbStatus().getValue());
		voPatientAssessment.setStatusReason(form.cmbReason().getValue());
		
		voPatientAssessment.setAuthoringInformation(form.customControlAuthoring().getValue());
		
		//Completed Assessment
		if(isAssessmentCompleted)
		{
			AuthoringInformationVo completedData = form.customControlCompleted().getValue();
			if(completedData != null)
			{
				voPatientAssessment.setCompletedDateTime(completedData.getAuthoringDateTime());
				voPatientAssessment.setCompletedHCP(completedData.getAuthoringHcp());
			}
		}
		else //WDEV-17342
		{
			voPatientAssessment.setCompletedDateTime(null);
			voPatientAssessment.setCompletedHCP(null);
		}

		if(voPatientAssessment.getPatient() == null)
			voPatientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());

		if(voPatientAssessment.getEpisodeOfCare() == null)
			voPatientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		if (voPatientAssessment.getCareContext() == null)
			voPatientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		emergencyAttToSave.setObsPatientAssessment(voPatientAssessment);
		
		
		return emergencyAttToSave;
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		if (form.getLocalContext().getcurrentObsPatAssessment()==null)
		{
			if ( !initializeCustomControl())
				return;
			
			form.cmbStatus().setValue(PatientAssessmentStatusReason.INPROGRESS);	
			cmbStatusValueChanged();
			form.customControlAuthoring().initializeComponent();
		}
		else
		{
			//check SOE on edit
			form.getLocalContext().setcurrentObsPatAssessment(domain.getObsPatientAssessment(form.getLocalContext().getcurrentObsPatAssessment()));
			
			if (PatientAssessmentStatusReason.COMPLETED.equals(form.getLocalContext().getcurrentObsPatAssessment().getStatus()))
			{
				engine.showMessage("The Patient Assessment was completed by another user. The screen will be refreshed. ");
				open();
				return;
			}
			populateScreenFromData(form.getLocalContext().getcurrentObsPatAssessment());
		}
	}

	@Override
	protected void onCmbStatusValueChanged() throws PresentationLogicException
	{
		cmbStatusValueChanged();
	}

	//WDEV-17337
	public EdAssessment_CustomControlsEvents getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}
	
	//WDEV-17337
	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}
	
}
