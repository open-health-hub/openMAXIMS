//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2306.21763)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.procedures;

import ims.clinical.forms.procedures.GenForm.ctnDetailsContainer.GroupExcludeEnumeration;
import ims.clinical.forms.procedures.GenForm.ctnDetailsContainer.GroupStatusEnumeration;
import ims.clinical.forms.procedures.GenForm.ctnDetailsContainer.grpProcedureTypeEnumeration;
import ims.clinical.vo.ClinicalDIAssociationVoCollection;
import ims.clinical.vo.lookups.CodingItemType;
import ims.clinical.vo.lookups.PatientProcedureOutcome;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.PatientProcedureRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientProcedureShortListVo;
import ims.core.vo.PatientProcedureShortListVoCollection;
import ims.core.vo.PatientProcedureShortVo;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.vo.ValueObject;
import ims.vo.interfaces.IClinicalCodingValue;

import java.util.ArrayList;
import java.util.Collections;

public class Logic extends BaseLogic
{
	private static final String		NO_CODE_ITEM_SELECTED	= "No Suitable Term Selected";

	private static final int		PROC_DESC_ID			= 1;
	private static final int		COMPLICATION_ID			= 2;
	private static final int		SITE_ID					= 3;
	private static final int		PMH_ID					= 4;
	private static final int		STATUS_ID				= 5;
	private static final int		ASSOCIATIONS_ID			= 6;
	private static final int		DATE_PERF_ID			= 7;
	private static final int		AUTH_HCP_ID				= 8;
	private static final int		AUTH_DATE_ID			= 9;
	private static final int		AUDIT_ID				= 10;

	private static final Integer	COL_PROC_DESC			= new Integer(PROC_DESC_ID);
	private static final Integer	COL_COMPLICATION_0WIDTH	= new Integer(COMPLICATION_ID);
	private static final Integer	COL_SITE				= new Integer(SITE_ID);
	private static final Integer	COL_PMH					= new Integer(PMH_ID);
	private static final Integer	COL_STATUS				= new Integer(STATUS_ID);
	private static final Integer	COL_ASSOCS				= new Integer(ASSOCIATIONS_ID);
	private static final Integer	COL_DATE_PERF_0WIDTH	= new Integer(DATE_PERF_ID);
	private static final Integer	COL_AUTH_HCP			= new Integer(AUTH_HCP_ID);
	private static final Integer	COL_AUTH_DATE			= new Integer(AUTH_DATE_ID);
	private static final Integer	COL_AUDIT				= new Integer(AUDIT_ID);

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		initializeCustomControl();
		open();
		postInitialize();
		updateControlsState();
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Clinical.PatientProcedureChecklistDialog))
		{
			open();
			updateControlsState();
			return;
		}
		if (result.equals(DialogResult.OK))
		{
			if (formName.equals(form.getForms().Core.CancelPatientProcedure))
			{
				PatientProcedureVo voPatProc = form.getGlobalContext().Core.getSelectedPatientProcedure();
				if (voPatProc != null)
				{
					voPatProc.setProcedureOutcome(PatientProcedureOutcome.CANCELLED);
					// voPatProc.setProcedureStatus(PatientProcedureStatus);

					form.getLocalContext().setPatientProcedureVo(voPatProc);

					String[] uiErrors = null;
					String[] errors = voPatProc.validate(uiErrors);
					if (errors != null)
					{
						engine.showErrors(errors);
						return;
					}

					try
					{
						voPatProc = domain.savePlannedProcedure(voPatProc, form.getGlobalContext().Core.getPatientShort());
					}
					catch (StaleObjectException e)
					{
						engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
						open();
						form.getLocalContext().setPatientProcedureVo(domain.getProcedure(voPatProc));
						return;
					}
					catch (UniqueKeyViolationException e)
					{
						engine.showMessage(e.getMessage());
						open();
						form.getLocalContext().setPatientProcedureVo(domain.getProcedure(voPatProc));
						return;
					}
					open();
				}
			}
		}
		
		if((formName.equals(form.getForms().Clinical.IntraOperativeCareRecordDialog) || (formName.equals(form.getForms().Clinical.CataractIntraOperativeCareRecordDialog))))
		{
			open();
			updateControlsState();
		}
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
		enableLinkControl();
	}

	private void enableLinkControl()
	{
		boolean visible = form.getMode().equals(FormMode.VIEW) && form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull();
		boolean isDialog = engine.isDialog();
		isBtnCloseVisible(visible && isDialog);
	}

	private void updateControlsState()
	{
		enableContextMenu();
		boolean bAddnew = form.getMode().equals(FormMode.EDIT) && form.getLocalContext().getPatientProcedureVoIsNotNull() && form.getLocalContext().getPatientProcedureVo().getID_PatientProcedure() == null;

		if (form.getMode().equals(FormMode.EDIT))
			form.ctnDetails().cmbSource().setEnabled(form.ctnDetails().chkPMH().getValue());

		boolean isPlanned = form.ctnDetails().GroupStatus().getValue().equals(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPlanned);
		if (form.getMode().equals(FormMode.EDIT))
		{
			hideOrDisplayUrgencyAndPerformedControls();
			form.ctnDetails().GroupStatus().setEnabled(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPlanned, true);
			form.ctnDetails().GroupStatus().setEnabled(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPerformed, true);
			form.ctnDetails().cmbUrgency().setEnabled(true);
			form.ctnDetails().pdtPlanned().setEnabled(true);

			form.ctnDetails().timPerformed().setEnabled(true);
			form.ctnDetails().pdtPerformed().setEnabled(true);

		}
		else
		{
			form.ctnDetails().GroupStatus().setEnabled(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPlanned, false);
			form.ctnDetails().GroupStatus().setEnabled(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPerformed, false);
			form.ctnDetails().pdtPerformed().setEnabled(false);
			form.ctnDetails().timPerformed().setEnabled(false);
			form.ctnDetails().cmbUrgency().setEnabled(false);
			form.ctnDetails().pdtPlanned().setEnabled(false);

			form.ctnDetails().lblUrgency().setVisible(isPlanned);
			form.ctnDetails().cmbUrgency().setVisible(isPlanned);
			form.ctnDetails().pdtPlanned().setVisible(isPlanned);
			form.ctnDetails().lblDatePlanned().setVisible(isPlanned);

			form.ctnDetails().lblDatePerformed().setVisible(!isPlanned);
			form.ctnDetails().lblTimePerformed().setVisible(!isPlanned);
			form.ctnDetails().pdtPerformed().setVisible(!isPlanned);
			form.ctnDetails().timPerformed().setVisible(!isPlanned);
		}

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.ctnDetails().grpProcedureType().setValue(GenForm.ctnDetailsContainer.grpProcedureTypeEnumeration.rdoSpecialty);
			setInitialCustomControlCodingSettings();
			form.ctnDetails().GroupStatus().setEnabled(form.getLocalContext().getPatientProcedureVo().getID_PatientProcedure() == null);
			form.ctnDetails().grpProcedureType().setEnabled(bAddnew);
			form.ctnDetails().setcustomControlCodingItemEnabled(true);
		}

		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnNew().setVisible(true);
			form.btnNew().setEnabled(!(ConfigFlag.UI.PLANNED_PROCEDURES_TO_BE_CREATED_VIA_SFS.getValue() && Boolean.TRUE.equals(form.getLocalContext().getPlannedProceduresWithoutIntraOperativeExists())));
			
			form.btnEdit().setVisible(form.dyngrdProcedure().getSelectedRow() != null && !engine.isRIEMode());

			// Requested by KOC - Temporary Change in functionality for BHRT 1.8 release - Button needs to be hidden
			form.btnCheckList().setVisible(false);
			/*
			 * if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()) form.btnCheckList().setVisible(true); else form.btnCheckList().setVisible(false);
			 */
		}

		form.ctnDetails().customControlCodingItem().setParentEditing(new Boolean(form.getMode().equals(FormMode.EDIT)));
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setPatientProcedureVo(null);
		open();
		form.setMode(FormMode.VIEW);
	}

	protected void onBtnAssociationsClick() throws PresentationLogicException
	{
		PatientProcedureVo patientProcedureVo = form.getLocalContext().getPatientProcedureVo();
		if (patientProcedureVo == null)
			patientProcedureVo = new PatientProcedureVo();

		patientProcedureVo.setProcedureDescription(form.ctnDetails().customControlCodingItem().getDescription());

		form.getGlobalContext().Clinical.setClinicalDIassociationsFormMode(form.getMode());
		form.getGlobalContext().Clinical.PatientSummary.setPrimaryAssociation(patientProcedureVo);
		engine.open(form.getForms().Clinical.ClinicalDiAssociations);
	}

	protected void onImbSearchClick()
	{
		engine.open(form.getForms().Core.TaxonomySearch);
	}

	private Specialty getSpecialty()
	{
		if ((form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()) && (form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty();
		}
		else if ((form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()) && (form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty();
		}
		return null;
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save() == false)
			return;

		ClinicalDIAssociationVoCollection voDIAssociation = form.getGlobalContext().Clinical.getClinicalDIAssociationVoCollection();
		if (voDIAssociation != null && voDIAssociation.size() > 0)
		{
			setPrimaryProcedure(voDIAssociation);
			saveDIAssociations(voDIAssociation);
		}
		open();
		form.setMode(FormMode.VIEW);
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.Procedure.ADD :
				
				if (ConfigFlag.UI.PLANNED_PROCEDURES_TO_BE_CREATED_VIA_SFS.getValue())
				{
					newInstanceFormIntraOperativeCareRecord();
				}
				else
				{
					newInstance();
				}
			break;
			
			case GenForm.ContextMenus.Procedure.UPDATE :
				updateInstance();
			break;
			case GenForm.ContextMenus.Procedure.CANCEL :
				cancelInstance();
			break;
			case GenForm.ContextMenus.Procedure.PERFORMED :
				performInstance();
			break;

			case GenForm.ContextMenus.Procedure.VIEWASSOCIATIONS :
				viewAssociations();
			break;
			
			case GenForm.ContextMenus.Procedure.NEWINTRAOPERATIVEDETAILS:
				newIntraOperativeDetails();
				break;
			
			case GenForm.ContextMenus.Procedure.EDITINTRAOPERATIVEDETAILS:
				editIntraOperativeDetails();
				break;
			case GenForm.ContextMenus.Procedure.NEWCATARACTINTRAOPERATIVEDETAILS:
				newCataractIntraOperativeDetails();
				break;
			case GenForm.ContextMenus.Procedure.EDITCATARACTINTRAOPERATIVEDETAILS:
				editCataractIntraOperativeDetails();
				break;
		}
		
		updateControlsState();
	}

	private void editIntraOperativeDetails() 
	{
		engine.open(form.getForms().Clinical.IntraOperativeCareRecordDialog);
	}

	private void newIntraOperativeDetails() 
	{
		engine.open(form.getForms().Clinical.IntraOperativeCareRecordDialog, new Object[] {FormMode.EDIT});
	}
	private void newCataractIntraOperativeDetails() 
	{
		engine.open(form.getForms().Clinical.CataractIntraOperativeCareRecordDialog, new Object[] {FormMode.EDIT});
		
	}
	private void editCataractIntraOperativeDetails()
	{
		engine.open(form.getForms().Clinical.CataractIntraOperativeCareRecordDialog);
	}
	private void performInstance()
	{
		// TODO
		// - update the outcome of the originating procedure to 'performed'
		// - create a new procedure setting the status to performed
		// and copying the coding item, description, laterality, site, exclude, attributes,
		// default in recording/authoring user and date time.

		PatientProcedureVo voPatProc = form.getLocalContext().getPatientProcedureVo();
		PatientProcedureVo voNewPatProc = new PatientProcedureVo();
		if (voPatProc != null)
		{
			voPatProc.setProcedureOutcome(PatientProcedureOutcome.PERFORMED);

			form.getLocalContext().setPatientProcedureVo(voPatProc);

			/*
			 * String[] uiErrors = null; String[] errors = voPatProc.validate(uiErrors); if (errors != null) { engine.showErrors(errors); return; }
			 * 
			 * try { voPatProc = domain.savePlannedProcedure(voPatProc, form.getGlobalContext().Core.getPatientShort()); } catch (StaleObjectException e) { engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()); open(); form.getLocalContext().setPatientProcedureVo(domain.getProcedure(voPatProc)); return; } catch (UniqueKeyViolationException e) { engine.showMessage(e.getMessage()); open(); form.getLocalContext().setPatientProcedureVo(domain.getProcedure(voPatProc)); return; }
			 */
			open();
			form.dyngrdProcedure().setValue(null);

			PatientProcedureRefVo voRefPlannedProc = new PatientProcedureRefVo();
			voRefPlannedProc.setID_PatientProcedure(voPatProc.getID_PatientProcedure());
			voNewPatProc.setPlannedProc(voRefPlannedProc);

			voNewPatProc.setProcedure(voPatProc.getProcedure());
			voNewPatProc.setProcedureDescription(voPatProc.getProcedureDescription());
			voNewPatProc.setProcLaterality(voPatProc.getProcLaterality());
			voNewPatProc.setSiteText(voPatProc.getSiteText());
			voNewPatProc.setExcludeFromOthers(voPatProc.getExcludeFromOthers()); // voNewPatProc.getAuthoringInformation().setAuthoringDateTime(new DateTime());

			AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
			voAuthoring.setAuthoringDateTime(new DateTime());
			voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
			voNewPatProc.setAuthoringInformation(voAuthoring);
			voNewPatProc.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voNewPatProc.setProcedureStatus(PatientProcedureStatus.PERFORMED);

			clearInstanceControls();
			populateScreenFromData(voNewPatProc);

			form.ctnDetails().dtimUser().setValue(new DateTime());

			Object hcpLite = domain.getHcpLiteUser();
			form.ctnDetails().txtRecordingHCP().setValue(hcpLite != null ? (((HcpLiteVo) hcpLite).getName() != null ? ((HcpLiteVo) hcpLite).getName().toString() : null) : null);

			form.ctnDetails().customControlAuthoringInfo().initializeComponent();

			form.ctnDetails().GroupStatus().setValue(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPerformed);

			form.ctnDetails().grpProcedureType().setValue(GenForm.ctnDetailsContainer.grpProcedureTypeEnumeration.rdoSpecialty);
			setInitialCustomControlCodingSettings();

			form.getLocalContext().setPatientProcedureVo(voNewPatProc);// new PatientProcedureVo());

			form.setMode(FormMode.EDIT);

			enableAuthoringControls(Boolean.FALSE);
			hideOrDisplayUrgencyAndPerformedControls();

			form.ctnDetails().customControlCodingItem().setParentEditing(Boolean.TRUE, Boolean.TRUE);

			form.ctnDetails().GroupStatus().setEnabled(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPlanned, false);
			form.ctnDetails().GroupStatus().setEnabled(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPerformed, false);
		}
	}

	private void enableAuthoringControls(Boolean bEnabled)
	{
		form.ctnDetails().customControlAuthoringInfo().setEnabledAuthoringHCP(bEnabled);
		form.ctnDetails().customControlAuthoringInfo().setEnabledDateTime(bEnabled);
	}

	private void cancelInstance()
	{
		form.getGlobalContext().Core.setSelectedPatientProcedure(form.getLocalContext().getPatientProcedureVo());
		engine.open(form.getForms().Core.CancelPatientProcedure);
	}

	// --- Private methods ------------
	private void initialize()
	{
		if ((form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull()) && (form.getGlobalContext().Clinical.getReturnToFormName().equals(engine.getPreviousNonDialogFormName())))
			isBtnCloseVisible(engine.isDialog());
		else
		{
			isBtnCloseVisible(false);
			form.getGlobalContext().Clinical.setReturnToFormName(null);
		}

		enableContextMenu();
		form.ctnDetails().btnAssociations().setImage(form.getImages().Core.AssociationsLHS);
		formatProceduresGrid();
		clearGlobalContextVariables();
	}

	private void formatProceduresGrid()
	{
		form.dyngrdProcedure().clear();

		form.dyngrdProcedure().setSelectable(true);

		DynamicGridColumn column = form.dyngrdProcedure().getColumns().newColumn("Procedure Description");
		column.setIdentifier(COL_PROC_DESC);
		column.setWidth(250);
		column.setDynamicWidthSupported(true);

		column = form.dyngrdProcedure().getColumns().newColumn("Complication");
		column.setIdentifier(COL_COMPLICATION_0WIDTH);
		column.setWidth(0);
		column.setDynamicWidthSupported(true);

		column = form.dyngrdProcedure().getColumns().newColumn("Site");
		column.setIdentifier(COL_SITE);
		column.setWidth(70);
		column.setDynamicWidthSupported(true);

		column = form.dyngrdProcedure().getColumns().newColumn("PMH");
		column.setIdentifier(COL_PMH);
		column.setWidth(40);
		column.setDynamicWidthSupported(true);

		column = form.dyngrdProcedure().getColumns().newColumn("Status(Outcome)");
		column.setIdentifier(COL_STATUS);
		column.setWidth(100);

		column = form.dyngrdProcedure().getColumns().newColumn("Associations");
		column.setIdentifier(COL_ASSOCS);
		column.setWidth(75);
		column.setAlignment(Alignment.CENTER);
		// column.setDynamicWidthSupported(true);

		column = form.dyngrdProcedure().getColumns().newColumn("Date Performed");
		column.setIdentifier(COL_DATE_PERF_0WIDTH);
		column.setWidth(0);
		column.setDynamicWidthSupported(true);

		column = form.dyngrdProcedure().getColumns().newColumn("Authoring HCP");
		column.setIdentifier(COL_AUTH_HCP);
		column.setWidth(150);
		column.setDynamicWidthSupported(true);

		column = form.dyngrdProcedure().getColumns().newColumn("Authoring Date");
		column.setIdentifier(COL_AUTH_DATE);
		column.setWidth(95);
		column.setDynamicWidthSupported(true);

		column = form.dyngrdProcedure().getColumns().newColumn("");
		column.setIdentifier(COL_AUDIT);
		column.setWidth(-1);
		column.setAlignment(Alignment.CENTER);
		column.setDynamicWidthSupported(true);
	}

	private void initializeCustomControl()
	{
		form.ctnDetails().customControlCodingItem().setCodingItemType(CodingItemType.PROCEDURE);
		form.ctnDetails().customControlCodingItem().setHotlist(new Boolean(true));
		form.ctnDetails().customControlCodingItem().setSpecialty(getSpecialty());
	}

	private void open()
	{
		clearGrid();
		clearInstanceControls();

		displayProcedures(domain.listProcedureShortListVoByPatient(form.getGlobalContext().Core.getPatientShort()));
		preSelectSavedProcedure();
		clearGlobalContextVariables();
		form.ctnDetails().setCollapsed(!(form.getLocalContext().getPatientProcedureVoIsNotNull()));

	}

	private void preSelectSavedProcedure()
	{
		
		//for RIE
		if(form.getLocalContext().getPatientProcedureVoIsNotNull() && form.getLocalContext().getPatientProcedureVo().getID_PatientProcedureIsNotNull())
		{
			form.getLocalContext().setPatientProcedureVo(domain.getProcedure(form.getLocalContext().getPatientProcedureVo()));
			selectIntraOperativeRecords(form.getLocalContext().getPatientProcedureVo());
		/*	form.getGlobalContext().Clinical.setPatientProcedureForIntraOperativeDialog(form.getLocalContext().getPatientProcedureVo());
			if (form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecordIsNotNull()){
			form.getLocalContext().setIntraOperativeCareCurrentRecord(domain.getIntraOperativeCareRecord(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecord()));
			}*/
		}
		
		if (form.getLocalContext().getPatientProcedureVoIsNotNull())
		{
			boolean rowSelected = false;
			for (int i = 0; i < form.dyngrdProcedure().getRows().size() && !rowSelected; i++)
			{
				rowSelected = getRowSelected(form.dyngrdProcedure().getRows().get(i), form.getLocalContext().getPatientProcedureVo());
			}
			
			if (rowSelected)
				gridProcedureSelChange();
			
		}
	}

	private boolean getRowSelected(DynamicGridRow dynamicGridRow, PatientProcedureVo patientProcedureVo) 
	{
		if (dynamicGridRow.getValue().equals(form.getLocalContext().getPatientProcedureVo()))
		{
			form.dyngrdProcedure().setValue(dynamicGridRow.getValue());
			
			if(dynamicGridRow.getParent() != null)
				dynamicGridRow.getParent().setExpanded(true);
			
			return true;
		}
		
		for(int i=0; i<dynamicGridRow.getRows().size(); i++)
		{
			return getRowSelected(dynamicGridRow.getRows().get(i), patientProcedureVo);
		}
		
		return false;
	}

	private void displayProcedures(PatientProcedureShortListVoCollection collection)
	{
		form.getLocalContext().setPlannedProceduresWithoutIntraOperativeExists(Boolean.FALSE);
		
		form.dyngrdProcedure().getRows().clear();
		for (int i = 0; collection != null && i < collection.size(); i++)
		{
			PatientProcedureShortListVo voPatientProcedureShortList = collection.get(i);

			// /See if it is a Performed Procedure
			// if so find its linked Planned Procedure and add it as a child
			// If it is a planned Procedure check to see its not in the grid, if not check to see if linked to any
			// Performed Procedures not yet displayed in the grid, if not add as a parent level record.

			if ((voPatientProcedureShortList.getProcedureStatusIsNotNull()) && (voPatientProcedureShortList.getProcedureStatus().equals(PatientProcedureStatus.PERFORMED)))
			{
				DynamicGridRow rowParent = form.dyngrdProcedure().getRows().newRow();
				setDynamicRowData(rowParent, voPatientProcedureShortList);

				// Find its associated Planned record and display it as a child.
				for (int j = 0; collection != null && j < collection.size(); j++)
				{
					PatientProcedureShortListVo voToCheck = collection.get(j);

					if (voToCheck.getProcedureStatusIsNotNull() && voToCheck.getProcedureStatus().equals(PatientProcedureStatus.PLANNED) && voPatientProcedureShortList.getPlannedProcIsNotNull() && voPatientProcedureShortList.getPlannedProc().getID_PatientProcedure().equals(voToCheck.getID_PatientProcedure()))
					{
						DynamicGridRow rowChild = rowParent.getRows().newRow();
						setDynamicRowData(rowChild, voToCheck);
					}
				}
			}

			if ((voPatientProcedureShortList.getProcedureStatusIsNotNull()) && (voPatientProcedureShortList.getProcedureStatus().equals(PatientProcedureStatus.PLANNED)))
			{
				// WDEV-13471
				// If we find a planned procedure without IntraOperative record then remember
				if (!voPatientProcedureShortList.getIntraOperativeRecordIsNotNull())
				{
					form.getLocalContext().setPlannedProceduresWithoutIntraOperativeExists(Boolean.TRUE);
				}
				
				boolean bFound = false;
				// Check this row does not exist in the grid, if not and it has not parent row.....add as a parent
				for (int j = 0; collection != null && j < collection.size(); j++)
				{
					PatientProcedureShortListVo voToCheck = collection.get(j);

					if (voToCheck.getProcedureStatusIsNotNull() && voToCheck.getProcedureStatus().equals(PatientProcedureStatus.PERFORMED) && voToCheck.getPlannedProcIsNotNull() && voToCheck.getPlannedProc().getID_PatientProcedure().equals(voPatientProcedureShortList.getID_PatientProcedure()))
						bFound = true;
				}

				if (!bFound)
				{
					DynamicGridRow rowParent = form.dyngrdProcedure().getRows().newRow();
					setDynamicRowData(rowParent, voPatientProcedureShortList);
				}
			}
		}

	}

	private DynamicGridColumn getColByIdentifier(Object indentifier)
	{
		return form.dyngrdProcedure().getColumns().getByIdentifier(indentifier);
	}

	/**
	 * @param row
	 * @param voPatProcShortList
	 */
	private void setDynamicRowData(DynamicGridRow row, PatientProcedureShortListVo voPatProcShortList)
	{
		DynamicGridCell cellProc = row.getCells().newCell(getColByIdentifier(COL_PROC_DESC), DynamicCellType.LABEL);
		cellProc.setValue(voPatProcShortList.getProcedureDescriptionIsNotNull() ? voPatProcShortList.getProcedureDescription() : NO_CODE_ITEM_SELECTED);
		cellProc.setIdentifier(COL_PROC_DESC);
		cellProc.setTooltip(voPatProcShortList.getProcedureDescriptionIsNotNull() ? voPatProcShortList.getProcedureDescription() : NO_CODE_ITEM_SELECTED);
		cellProc.setWidth(250);

		DynamicGridCell cellSite = row.getCells().newCell(getColByIdentifier(COL_SITE), DynamicCellType.LABEL);
		cellSite.setValue(voPatProcShortList.getSiteText());
		cellSite.setIdentifier(COL_SITE);
		cellSite.setWidth(70);

		DynamicGridCell cellPMH = row.getCells().newCell(getColByIdentifier(COL_PMH), DynamicCellType.IMAGE);
		cellPMH.setWidth(40);
		if (voPatProcShortList.getInfoSourceIsNotNull() && !voPatProcShortList.getInfoSource().equals(SourceofInformation.CLINICALCONTACT))
		{
			cellPMH.setValue(form.getImages().Core.Memo);
			cellPMH.setIdentifier(COL_PMH);

			StringBuffer sb = new StringBuffer("");
			if (voPatProcShortList.getInfoSourceIsNotNull())
				sb.append("<b>Source: </b>" + voPatProcShortList.getInfoSource());

			if (voPatProcShortList.getProcDateIsNotNull())
				sb.append(" - " + voPatProcShortList.getProcDate().toString());

			cellPMH.setTooltip(sb.toString());
		}
		else
		{
			cellPMH.setValue(null);
			cellPMH.setIdentifier(COL_PMH);
			cellPMH.setTooltip("");
		}

		DynamicGridCell cellStatus = row.getCells().newCell(getColByIdentifier(COL_STATUS), DynamicCellType.LABEL);

		// WDEV-2184
		// cellStatus.setValue(voPatProcShortList.getProcedureStatusIsNotNull() ? voPatProcShortList.getProcedureStatus().toString() : "");

		PatientProcedureShortVo voPatientProcedureShort = null; 
		if(voPatProcShortList != null && voPatProcShortList.getID_PatientProcedureIsNotNull())
			voPatientProcedureShort = domain.getProcedure(voPatProcShortList);

		// WDEV-2184
		if (voPatientProcedureShort != null && voPatientProcedureShort.getProcedureStatusIsNotNull())
		{
			if (voPatientProcedureShort.getDatePlannedIsNotNull())
				cellStatus.setValue("Booked");
			else
				cellStatus.setValue(voPatientProcedureShort.getProcedureStatus().toString());
		}
		else
			cellStatus.setValue("");

		cellStatus.setIdentifier(COL_STATUS);
		cellStatus.setWidth(100);

		if ((voPatProcShortList.getProcedureStatusIsNotNull()) && (voPatProcShortList.getProcedureStatus().equals(PatientProcedureStatus.PLANNED)))
		{
			StringBuffer sb = new StringBuffer("");
			if (voPatProcShortList.getProcedureUrgencyIsNotNull())
				sb.append("<b>Urgency: </b>" + voPatProcShortList.getProcedureUrgency());

			if (voPatProcShortList.getProcedureOutcomeIsNotNull())
			{
				if (voPatProcShortList.getProcedureOutcome().equals(PatientProcedureOutcome.CANCELLED))
				{
					sb.append(" - ");
					if (voPatProcShortList.getCancelledDateIsNotNull())
						sb.append("<b>Cancel Date/Reason: </b>" + voPatProcShortList.getCancelledDate().toString());

					sb.append(" ");

					if (voPatProcShortList.getCancelledReasonIsNotNull())
						sb.append(voPatProcShortList.getCancelledReason());
				}
				else if (voPatProcShortList.getProcedureOutcome().equals(PatientProcedureOutcome.PERFORMED))
				{
				}
				// WDEV-2184
				if (voPatProcShortList.getProcedureOutcome().equals(PatientProcedureOutcome.CANCELLED))
				{
					if (voPatientProcedureShort != null && voPatientProcedureShort.getDatePlannedIsNotNull())
						cellStatus.setValue(voPatProcShortList.getProcedureStatusIsNotNull() ? "Booked " + "(" + voPatProcShortList.getProcedureOutcome().toString() + ")" : "");
					else
						cellStatus.setValue(voPatProcShortList.getProcedureStatusIsNotNull() ? voPatProcShortList.getProcedureStatus().toString() + "(" + voPatProcShortList.getProcedureOutcome().toString() + ")" : "");
				}
				else
				{
					if (voPatientProcedureShort != null && voPatientProcedureShort.getDatePlannedIsNotNull())
						cellStatus.setValue(voPatProcShortList.getProcedureStatusIsNotNull() ? "Booked" : "");
					else
						cellStatus.setValue(voPatProcShortList.getProcedureStatusIsNotNull() ? voPatProcShortList.getProcedureStatus().toString() : "");
				}
				cellStatus.setIdentifier(COL_STATUS);
			}
			cellStatus.setTooltip(sb.toString());
		}
		else if ((voPatProcShortList.getProcedureStatusIsNotNull()) && (voPatProcShortList.getProcedureStatus().equals(PatientProcedureStatus.PERFORMED)))
		{
			StringBuffer sb = new StringBuffer("");
			if (voPatProcShortList.getProcDateIsNotNull())
				sb.append("<b>Procedure Date/Time: </b>" + voPatProcShortList.getProcDate().toString());

			if (voPatProcShortList.getProcTimeIsNotNull())
				sb.append(" - " + voPatProcShortList.getProcTime().toString());

			cellStatus.setTooltip(sb.toString());
		}

		// WDEV-1420
		if (domain.checkIfClinicalCDIAssociationsExist(voPatProcShortList) == Boolean.TRUE)
		{
			DynamicGridCell cellAssoc = row.getCells().newCell(getColByIdentifier(COL_ASSOCS), DynamicCellType.IMAGE);
			cellAssoc.setWidth(75);
			cellAssoc.setValue(form.getImages().Core.AssociationsLHS);
			cellAssoc.setIdentifier(COL_ASSOCS);
			cellAssoc.setTooltip("Linking Association Present");
		}
		else
		{
			DynamicGridCell cellAssoc = row.getCells().newCell(getColByIdentifier(COL_ASSOCS), DynamicCellType.LABEL);
			cellAssoc.setWidth(75);
			cellAssoc.setValue(null);
			cellAssoc.setIdentifier(COL_ASSOCS);
			cellAssoc.setTooltip("");
		}

		DynamicGridCell cellAuthorHCP = row.getCells().newCell(getColByIdentifier(COL_AUTH_HCP), DynamicCellType.LABEL);
		cellAuthorHCP.setValue(voPatProcShortList.getAuthoringInformationIsNotNull() && voPatProcShortList.getAuthoringInformation().getAuthoringHcpIsNotNull() ? voPatProcShortList.getAuthoringInformation().getAuthoringHcp().toString() : "");
		cellAuthorHCP.setIdentifier(COL_AUTH_HCP);
		cellAuthorHCP.setWidth(150);

		DynamicGridCell cellAuthorDate = row.getCells().newCell(getColByIdentifier(COL_AUTH_DATE), DynamicCellType.LABEL);
		cellAuthorDate.setValue(voPatProcShortList.getAuthoringInformationIsNotNull() && voPatProcShortList.getAuthoringInformation().getAuthoringDateTimeIsNotNull() ? voPatProcShortList.getAuthoringInformation().getAuthoringDateTime().toString() : "");
		cellAuthorDate.setIdentifier(COL_AUTH_DATE);
		cellAuthorDate.setWidth(95);

		if ((voPatProcShortList.getSysInfoIsNotNull()) && (voPatProcShortList.getSysInfo().getLastupdateUser() != null))
		{
			DynamicGridCell cellAudit = row.getCells().newCell(getColByIdentifier(COL_AUDIT), DynamicCellType.IMAGE);
			cellAudit.setValue(form.getImages().Core.EditDisabled);
			cellAudit.setIdentifier(COL_AUDIT);
			cellAudit.setTooltip("This record has been updated.");
		}

		row.setValue(voPatProcShortList);
	}

	private void clearGrid()
	{
		form.dyngrdProcedure().getRows().clear();
	}

	private void newInstance()
	{
		clearInstanceControls();

		form.ctnDetails().GroupExclude().setValue(GroupExcludeEnumeration.rdoNo);
		form.ctnDetails().customControlCodingItem().setIsRequired(true);
		PatientProcedureVo voPatProc = new PatientProcedureVo();
		if (voPatProc.getID_PatientProcedure() == null)
		{
			// Set default data
			voPatProc.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			voPatProc.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voPatProc.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			
			form.ctnDetails().setCollapsed(false);
			voPatProc.setProcedureStatus(PatientProcedureStatus.PLANNED);
			voPatProc.setInfoSource(SourceofInformation.CLINICALCONTACT);
			voPatProc.setSignifProc(new Boolean(false));
		}
		form.getLocalContext().setPatientProcedureVo(voPatProc);

		// WDEV-1038
		setResponsibleHcp(form.getGlobalContext().Core.getCurrentCareContext());

		form.ctnDetails().dtimUser().setValue(new DateTime());

		Object hcpLite = domain.getHcpLiteUser();
		form.ctnDetails().txtRecordingHCP().setValue(hcpLite != null ? (((HcpLiteVo) hcpLite).getName() != null ? ((HcpLiteVo) hcpLite).getName().toString() : null) : null);

		form.ctnDetails().customControlAuthoringInfo().initializeComponent();

		form.ctnDetails().GroupStatus().setValue(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPlanned);

		form.ctnDetails().grpProcedureType().setValue(GenForm.ctnDetailsContainer.grpProcedureTypeEnumeration.rdoSpecialty);
		setInitialCustomControlCodingSettings();

		form.setMode(FormMode.EDIT);
		enableAuthoringControls(Boolean.TRUE);
		hideOrDisplayUrgencyAndPerformedControls();
	}

	private void updateInstance()
	{
		form.setMode(FormMode.EDIT);
		form.ctnDetails().customControlCodingItem().setIsRequired(true);
		enableAuthoringControls(Boolean.FALSE);
		// form.txtProcedureDetails().setEnabled(true);
	}
	
	private String[] validateUIRules(String[] existingErrors)
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();
		if (existingErrors != null)
		{
			Collections.addAll(listOfErrors,existingErrors);
		}
		PartialDate pdtPerformed = form.ctnDetails().pdtPerformed().getValue();
		if (form.ctnDetails().GroupStatus().getValue().equals(GroupStatusEnumeration.rdoPerformed) && pdtPerformed != null)
		{
			
			
			if (getDateFromPartialDate(pdtPerformed).isGreaterThan(new ims.framework.utils.Date()))
			{
				listOfErrors.add("Date Performed can not be in the future");
			}
		}
		//WDEV-13303 
		else if(form.ctnDetails().GroupStatus().getValue().equals(GroupStatusEnumeration.rdoPerformed) && pdtPerformed == null)
			listOfErrors.add("Date Performed is mandatory for Performed procedures.");
				
		if (listOfErrors.size() == 0 )
			return null;
		String[] returningErrors = new String[listOfErrors.size()];
		listOfErrors.toArray(returningErrors);
		return returningErrors;
	}
	private ims.framework.utils.Date getDateFromPartialDate(PartialDate pdate)
	{
		ims.framework.utils.Date date = new ims.framework.utils.Date();
		Integer aux = pdate.getDay();
		if (aux == null)
		{
			aux = 1;
		}
		date.setDay(aux.intValue());
		aux = pdate.getMonth();
		if (aux == null)
		{
			aux = 1;
		}
		date.setMonth(aux.intValue());
		aux = pdate.getYear();
		if (aux == null)
		{
			aux = 2000;
		}
		date.setYear(aux.intValue());
	
		return date;
	}
	private boolean save()
	{
		PatientProcedureVo voPatProc = populateInstanceData(form.getLocalContext().getPatientProcedureVo());
		//if(voPatProc.getProcTimeIsNotNull())
		//{
		//	if(voPatProc.getProcTime().isGreaterThan(new DateTime().getTime()))
		//	{
		//		engine.showErrors(new String[]{"Time Performed cannot ne in the future."});
		//		return false;
		//	}
		//}

		String[] uiErrors = null;
		if (voPatProc.getProcedureIsNotNull())
		{
			// Clear the procedure from the VO
			Integer idProcedure = voPatProc.getProcedure().getID_Procedure();
			if (idProcedure != null && idProcedure.intValue() < 0)
				voPatProc.setProcedure(null);
		}
		else
		{
			uiErrors = new String[1];
			uiErrors[0] = "Please select a Clinical Term";
		}

		String[] errors = voPatProc.validate(validateUIRules(uiErrors));
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		//---wdev-9718
		if(voPatProc.getProcDate() != null)
		{
			Date dateperformed = voPatProc.getProcDate().toDate();
			DateTime datenow = new DateTime();
			if(voPatProc.getProcTimeIsNotNull())
			{
				if(voPatProc.getProcTime().isGreaterThan(datenow.getTime()))
				{
					if(dateperformed != null)
					{
						if(dateperformed.isGreaterOrEqualThan(datenow.getDate()))
						{
							engine.showErrors(new String[]{"Time Performed cannot be in the future."});
							return false;
						}
					}
					else
					{
						Integer day = 0;
						Integer month = 0;
						if(voPatProc.getProcDate().getMonth() != null )
						{
							day = 01;
							month = voPatProc.getProcDate().getMonth();
						}
						else
						{
							day = 01;
							month = 01;
							
						}
						if(voPatProc.getProcDate().getYear() > datenow.getDate().getYear())
						{
							engine.showErrors(new String[]{"Time Performed cannot be in the future."});
							return false;
						}
						if((month > datenow.getDate().getMonth()) && (voPatProc.getProcDate().getYear() == datenow.getDate().getYear()) )
						{
							engine.showErrors(new String[]{"Time Performed cannot be in the future."});
							return false;
						}
						if((day >= datenow.getDate().getDay())&&(month == datenow.getDate().getMonth()) && (voPatProc.getProcDate().getYear() == datenow.getDate().getYear()) )
						{
							engine.showErrors(new String[]{"Time Performed cannot be in the future."});
							return false;
							
						}
						
					}
				}
			}
		}
		//-----------
		try
		{
			voPatProc = domain.savePlannedProcedure(voPatProc, form.getGlobalContext().Core.getPatientShort());
			if (isDialog())
			{
				form.getGlobalContext().Clinical.setDialogFormName(engine.getFormName());
			}
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.getLocalContext().setPatientProcedureVo(domain.getProcedure(voPatProc));
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
			form.getLocalContext().setPatientProcedureVo(domain.getProcedure(voPatProc));
			return false;
		}

		// Wdev-1326
		setReturnToFormDescription(voPatProc);

		form.getLocalContext().setPatientProcedureVo(voPatProc);

		return true;
	}

	private void setReturnToFormDescription(PatientProcedureVo voPatientProc)
	{
		if ((form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull()) && (form.getGlobalContext().Clinical.getReturnToFormName().equals(engine.getPreviousNonDialogFormName())))
		{
			// Set the CDI Description for the return to form link
			String str = form.getGlobalContext().Clinical.getReturnToFormCDIDescriptionIsNotNull() ? form.getGlobalContext().Clinical.getReturnToFormCDIDescription() : "";
			StringBuffer sb = new StringBuffer();
			sb.append(str);
			if (sb.length() > 0)
				sb.append(", ");

			sb.append(voPatientProc.getProcedureDescription());

			form.getGlobalContext().Clinical.setReturnToFormCDIDescription(sb.toString());
			form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		}
	}

	protected PatientProcedureVo populateInstanceData(PatientProcedureVo voPatProc)
	{
		if (form.ctnDetails().GroupExclude().getValue().equals(GroupExcludeEnumeration.rdoYes))
			voPatProc.setExcludeFromOthers(new Boolean(true));
		else if (form.ctnDetails().GroupExclude().getValue().equals(GroupExcludeEnumeration.rdoNo))
			voPatProc.setExcludeFromOthers(new Boolean(false));
		else
			voPatProc.setExcludeFromOthers(null);

		IClinicalCodingValue result = form.ctnDetails().customControlCodingItem().getValue();
		if (result != null)
		{
			ValueObject vo = result.getIClinicalCodingValue();
			if (vo instanceof ProcedureLiteVo)
			{
				voPatProc.setProcedure((ProcedureLiteVo) result.getIClinicalCodingValue());
				voPatProc.setProcedureDescription(result.getIClinicalCodingValueDescription());
			}
			else
			{
				throw new CodingRuntimeException("ProcedureLiteVo expected from component");
			}

		}
		else
		// http://jira/browse/WDEV-3518 - If no description is entered set the equivalent field in the vo to null;
		{
			voPatProc.setProcedureDescription(null);
		}

		if (form.ctnDetails().chkPMH().getValue())
		{
			voPatProc.setInfoSource(form.ctnDetails().cmbSource().getValue());
			voPatProc.setIsPMH(Boolean.TRUE);
		}
		else
		{
			voPatProc.setInfoSource(SourceofInformation.CLINICALCONTACT);
			voPatProc.setIsPMH(Boolean.FALSE);
		}

		if (form.ctnDetails().GroupStatus().getValue().equals(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPlanned))
			voPatProc.setProcedureStatus(PatientProcedureStatus.PLANNED);
		else
			voPatProc.setProcedureStatus(PatientProcedureStatus.PERFORMED);

		voPatProc.setProcDate(form.ctnDetails().pdtPerformed().getValue());
		voPatProc.setProcTime(form.ctnDetails().timPerformed().getValue());
		voPatProc.setProcedureUrgency(form.ctnDetails().cmbUrgency().getValue());
		voPatProc.setDatePlanned(form.ctnDetails().pdtPlanned().getValue());

		voPatProc.setSiteText(form.ctnDetails().txtSite().getValue());
		voPatProc.setProcLaterality(form.ctnDetails().cmbLaterality().getValue());
		voPatProc.setAuthoringInformation(form.ctnDetails().customControlAuthoringInfo().getValue());

		return voPatProc;

	}

	protected void populateScreenFromData(PatientProcedureVo voPatProc)
	{
		if (voPatProc == null)
			return;
		super.populateScreenFromData(voPatProc);

		if (voPatProc.getExcludeFromOthersIsNotNull())
		{
			if (voPatProc.getExcludeFromOthers().booleanValue())
				form.ctnDetails().GroupExclude().setValue(GroupExcludeEnumeration.rdoYes);
			else
				form.ctnDetails().GroupExclude().setValue(GroupExcludeEnumeration.rdoNo);
		}
		if (voPatProc.getSysInfoIsNotNull())
		{
			Object hcpLite = domain.getHcpLiteUser();
			form.ctnDetails().txtRecordingHCP().setValue(hcpLite != null ? (((HcpLiteVo) hcpLite).getName() != null ? ((HcpLiteVo) hcpLite).getName().toString() : null) : null);
			form.ctnDetails().dtimUser().setValue(voPatProc.getSysInfo().getCreationDateTime());
		}

		form.ctnDetails().customControlCodingItem().setValue(voPatProc);

		if (voPatProc.getInfoSourceIsNotNull() && !voPatProc.getInfoSource().equals(SourceofInformation.CLINICALCONTACT))
		{
			form.ctnDetails().chkPMH().setValue(true);
			form.ctnDetails().cmbSource().setValue(voPatProc.getInfoSource());
		}
		else
		{
			form.ctnDetails().chkPMH().setValue(false);
			form.ctnDetails().cmbSource().setValue(null);
		}

		if (voPatProc.getProcedureStatusIsNotNull())
		{
			if (voPatProc.getProcedureStatus().equals(PatientProcedureStatus.PLANNED))
				form.ctnDetails().GroupStatus().setValue(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPlanned);
			else
				form.ctnDetails().GroupStatus().setValue(GenForm.ctnDetailsContainer.GroupStatusEnumeration.rdoPerformed);

			hideOrDisplayUrgencyAndPerformedControls();
		}

		form.ctnDetails().pdtPerformed().setValue(voPatProc.getProcDateIsNotNull() ? voPatProc.getProcDate() : null);
		form.ctnDetails().timPerformed().setValue(voPatProc.getProcTimeIsNotNull() ? voPatProc.getProcTime() : null);
		form.ctnDetails().cmbUrgency().setValue(voPatProc.getProcedureUrgencyIsNotNull() ? voPatProc.getProcedureUrgency() : null);
		form.ctnDetails().pdtPlanned().setValue(voPatProc.getDatePlanned());

		if (voPatProc.getAuthoringInformationIsNotNull())
			form.ctnDetails().customControlAuthoringInfo().setValue(voPatProc.getAuthoringInformation());

		setResponsibleHcp(voPatProc.getCareContext());
	}

	private void setResponsibleHcp(CareContextLiteVo voCareContext)
	{
		String strHCP = new String("Responsible HCP not known");
		if (voCareContext != null)
			if (voCareContext.getEpisodeOfCareIsNotNull())
				if (voCareContext.getEpisodeOfCare().getResponsibleHCPIsNotNull())
					if (voCareContext.getEpisodeOfCare().getResponsibleHCP().getMosIsNotNull())
						if (voCareContext.getEpisodeOfCare().getResponsibleHCP().getMos().getNameIsNotNull())
							strHCP = voCareContext.getEpisodeOfCare().getResponsibleHCP().getMos().getName().toString();

		form.ctnDetails().lblResponsibleHCP().setValue(strHCP);
	}

	protected void clearInstanceControls()
	{
		form.ctnDetails().customControlCodingItem().clear();
		form.ctnDetails().customControlAuthoringInfo().setValue(null);
		form.ctnDetails().GroupExclude().setValue(GroupExcludeEnumeration.None);
		form.ctnDetails().txtRecordingHCP().setValue(null);
		form.ctnDetails().dtimUser().setValue(null);
		form.ctnDetails().lblResponsibleHCP().setValue(null);
		form.ctnDetails().chkPMH().setValue(false);
		form.ctnDetails().cmbSource().setValue(null);
		form.ctnDetails().GroupStatus().setValue(GenForm.ctnDetailsContainer.GroupStatusEnumeration.None);
		form.ctnDetails().cmbUrgency().setValue(null);
		form.ctnDetails().pdtPlanned().setValue(null);
		form.ctnDetails().pdtPerformed().setValue(null);
		form.ctnDetails().timPerformed().setValue(null);

		super.clearScreen();
	}

	private void enableContextMenu()
	{
		if (engine.isRIEMode())
		{
			form.getContextMenus().hideAllProcedureMenuItems();
			return;
		}
		
		
		if ((form.getGlobalContext().Core.getCurrentClinicalContact() == null) && (form.getGlobalContext().Core.getCurrentCareContext() == null))
		{
			form.getContextMenus().getProcedureADDItem().setVisible(false);
			form.getContextMenus().getProcedureUPDATEItem().setVisible(false);
		}
		else
		{
			boolean viewMode = form.getMode().equals(FormMode.VIEW);
			
			// TODO - Uncomment flag here
			form.getContextMenus().getProcedureADDItem().setVisible(viewMode && !(ConfigFlag.UI.PLANNED_PROCEDURES_TO_BE_CREATED_VIA_SFS.getValue() && Boolean.TRUE.equals(form.getLocalContext().getPlannedProceduresWithoutIntraOperativeExists())));
			// form.getContextMenus().getProcedureUPDATEItem().setVisible(viewMode && form.grdProcedure().getSelectedRowIndex() >= 0);
			form.getContextMenus().getProcedureUPDATEItem().setVisible(viewMode && form.dyngrdProcedure().getSelectedRow() != null);
			form.getContextMenus().getProcedureVIEWASSOCIATIONSItem().setVisible(viewMode && hasAssociations());
		}

		if ((form.getLocalContext().getPatientProcedureVoIsNotNull()) && (form.getLocalContext().getPatientProcedureVo().getProcedureStatusIsNotNull()) && (form.getLocalContext().getPatientProcedureVo().getProcedureStatus().equals(PatientProcedureStatus.PLANNED)))
		{
			if (form.getLocalContext().getPatientProcedureVo().getProcedureOutcomeIsNotNull())
			{
				form.getContextMenus().getProcedurePERFORMEDItem().setVisible(false);
				form.getContextMenus().getProcedureCANCELItem().setVisible(false);
			}
			else
			{
				boolean viewMode = form.getMode().equals(FormMode.VIEW);
				//form.getContextMenus().getProcedurePERFORMEDItem().setVisible(viewMode);// true);
				form.getContextMenus().getProcedureCANCELItem().setVisible(viewMode);// true);
				form.getContextMenus().getProcedureVIEWASSOCIATIONSItem().setVisible(viewMode && hasAssociations());
			}
		}
		else
		{
			form.getContextMenus().getProcedurePERFORMEDItem().setVisible(false);
			form.getContextMenus().getProcedureCANCELItem().setVisible(false);
		}

		if (form.dyngrdProcedure().getSelectedRow() != null)
		{
			if (form.dyngrdProcedure().getSelectedRow().getParent() != null)
			{
				form.getContextMenus().getProcedurePERFORMEDItem().setVisible(false);
				form.getContextMenus().getProcedureCANCELItem().setVisible(false);
				form.getContextMenus().getProcedureUPDATEItem().setVisible(false);
			}
		}
		
		//WDEV-7987  
		if(form.getLocalContext().getPatientProcedureVoIsNotNull()){
			
			//WDEV-14745
			boolean isCancelled = false;
			if (form.getLocalContext().getPatientProcedureVo().getProcedureOutcomeIsNotNull() && form.getLocalContext().getPatientProcedureVo().getProcedureOutcome().equals(PatientProcedureOutcome.CANCELLED))
			{
				isCancelled = true;
			}
			//WDEV-8076
			form.getContextMenus().getProcedureNEWINTRAOPERATIVEDETAILSItem().setVisible(form.getMode().equals(FormMode.VIEW) && !form.getLocalContext().getIntraOperativeCareCurrentRecordIsNotNull() && ! isCancelled);
			form.getContextMenus().getProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem().setVisible(form.getMode().equals(FormMode.VIEW) && !form.getLocalContext().getIntraOperativeCareCurrentRecordIsNotNull() && ! isCancelled);
			
			form.getContextMenus().getProcedureEDITINTRAOPERATIVEDETAILSItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getIntraOperativeCareCurrentRecordIsNotNull()&&form.getLocalContext().getIntraOperativeCareCurrentRecord().getIntraOperativeDetailsIsNotNull() && ! isCancelled);
			form.getContextMenus().getProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getIntraOperativeCareCurrentRecordIsNotNull() &&  form.getLocalContext().getIntraOperativeCareCurrentRecord().getCataractIntraOperativeDetailIsNotNull() && ! isCancelled);
		}
		else{
			form.getContextMenus().getProcedureNEWINTRAOPERATIVEDETAILSItem().setVisible(false);
			form.getContextMenus().getProcedureEDITINTRAOPERATIVEDETAILSItem().setVisible(false);
			form.getContextMenus().getProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem().setVisible(false);
			form.getContextMenus().getProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem().setVisible(false);
		}
	}

	private boolean hasAssociations()
	{
		DynamicGridRow row = form.dyngrdProcedure().getSelectedRow();
		if (row != null)
		{
			DynamicGridCell cellAssoc = row.getCells().get(getColByIdentifier(COL_ASSOCS));
			if (cellAssoc != null && cellAssoc.getValue() != null)
				return true;
		}

		return false;
	}

	private void gridProcedureSelChange()
	{
		// PatientProcedureShortListVo voPatientProcedureShortList = form.grdProcedure().getValue();
 		PatientProcedureShortListVo voPatientProcedureShortList = (PatientProcedureShortListVo) form.dyngrdProcedure().getValue();
		if (voPatientProcedureShortList == null)
		{
			engine.showMessage("Please select a Planned Procedure");
			return;
		}

		PatientProcedureVo voPatProc = domain.getProcedure(voPatientProcedureShortList);
		form.getLocalContext().setPatientProcedureVo(voPatProc);
		form.getGlobalContext().Clinical.setPatientProcedureForIntraOperativeDialog(voPatProc);
		selectIntraOperativeRecords(voPatProc);
		
		populateScreenFromData(voPatProc);
		enableContextMenu();
	}

	/**
	 * WDEV-8399
	 * Selects the intra operative care record.
	 * If the current patient procedure has an intra operative detail than it selects
	 * that record. If not it verifies if the planned procedure exists and has a intra
	 * operative detail.
	 * @param voPatProc - the patient procedure correspondent to the current row
	 */
	private void selectIntraOperativeRecords(PatientProcedureVo voPatProc)
	{
		if (voPatProc == null)
			return;

		form.getLocalContext().setIntraOperativeCareCurrentRecord(null);
		
		if (form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() && form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecordIsNotNull())
		{
			form.getLocalContext().setIntraOperativeCareCurrentRecord(domain.getIntraOperativeCareRecord(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecord()));
		}
		else 
		{
			if (voPatProc.getPlannedProcIsNotNull())
			{
				form.getGlobalContext().Clinical.setPatientProcedureForIntraOperativeDialog(domain.getProcedure(voPatProc.getPlannedProc()));
				
				if (form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() && form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecordIsNotNull())
				{
					form.getLocalContext().setIntraOperativeCareCurrentRecord(domain.getIntraOperativeCareRecord(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecord()));
				}
			}
		}
	}

	// --- End Privdate methods --------

	private void hideOrDisplayUrgencyAndPerformedControls()
	{
		// form.Group1().getValue().equals(Group1Enumeration.rdoResults)
		if (form.ctnDetails().GroupStatus().getValue().equals(GroupStatusEnumeration.rdoPerformed))
		{
			form.ctnDetails().lblDatePerformed().setVisible(true);
			form.ctnDetails().lblTimePerformed().setVisible(true);
			form.ctnDetails().pdtPerformed().setVisible(true);
			form.ctnDetails().timPerformed().setVisible(true);

			form.ctnDetails().lblUrgency().setVisible(false);
			form.ctnDetails().cmbUrgency().setVisible(false);
			form.ctnDetails().pdtPlanned().setVisible(false);
			form.ctnDetails().lblDatePlanned().setVisible(false);
		}
		else
		// PMH
		{
			// pmh - inactivate the planned radio button, set to performed radio to true and allow the user
			// supply the date/time of the procedure supporting recording of partial date.

			form.ctnDetails().lblUrgency().setVisible(true);
			form.ctnDetails().cmbUrgency().setVisible(true);
			form.ctnDetails().pdtPlanned().setVisible(true);
			form.ctnDetails().lblDatePlanned().setVisible(true);

			form.ctnDetails().lblDatePerformed().setVisible(false);
			form.ctnDetails().lblTimePerformed().setVisible(false);
			form.ctnDetails().pdtPerformed().setVisible(false);
			form.ctnDetails().timPerformed().setVisible(false);
		}

	}

	protected void onRadioButtonGroupStatusValueChanged() throws PresentationLogicException
	{
		hideOrDisplayUrgencyAndPerformedControls();
	}

	private boolean saveDIAssociations(ClinicalDIAssociationVoCollection voDIAssociation)
	{
		if (voDIAssociation != null)
		{
			String[] errors = voDIAssociation.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return false;
			}

			try
			{
				domain.saveClinicalDiAssociation(voDIAssociation);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return false;
			}
		}

		return true;
	}

	private void clearGlobalContextVariables()
	{
		form.getGlobalContext().Clinical.setClinicalDIAssociationVoCollection(null);
	}

	private void setPrimaryProcedure(ClinicalDIAssociationVoCollection voDIAssociation)
	{
		PatientProcedureVo voPatientProcedure = form.getLocalContext().getPatientProcedureVo();
		for (int i = 0; voPatientProcedure != null && voDIAssociation != null && i < voDIAssociation.size(); i++)
		{
			if (voDIAssociation.get(i).getPrimProcedure() == null || voDIAssociation.get(i).getPrimProcedure().getID_PatientProcedure() == null)
				voDIAssociation.get(i).setPrimProcedure(voPatientProcedure);
		}
	}

	private void postInitialize()
	{
		FormMode mode = form.getGlobalContext().Clinical.getReturnToFormMode();
		if (mode != null && mode.equals(FormMode.EDIT) && engine.getPreviousNonDialogFormName() != null // WDEV-1548
				&& !engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.Procedures) || (isDialog() && !(engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientSummary) || engine.getPreviousNonDialogFormName().equals(form.getForms().Nursing.NursingAdmission))))
		{
			newInstance();
			form.getGlobalContext().Clinical.setReturnToFormMode(null);
		}

		// WDEV-1421
		if ((engine.getPreviousNonDialogFormName() != null && engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientSummary) || engine.getPreviousNonDialogFormName() != null && engine.getPreviousNonDialogFormName().equals(form.getForms().Nursing.NursingAdmission)) && isDialog())
		{
			if (form.getGlobalContext().Clinical.getReturnToFormMode() == null)
			{
				newInstance();
				form.getGlobalContext().Clinical.setReturnToFormMode(null);
			}
			else if (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() && form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.VIEW))
			{
				form.setMode(FormMode.VIEW);
				// Highlight the linked PatientProblem record.
				for (int i = 0; i < form.dyngrdProcedure().getRows().size(); i++)
				{
					if ((form.dyngrdProcedure().getRows().get(i).getValue() != null) && (form.getGlobalContext().Clinical.getSelectedPatientProcedureFromPatientSummaryIsNotNull()) && (form.dyngrdProcedure().getRows().get(i).getValue().equals(form.getGlobalContext().Clinical.getSelectedPatientProcedureFromPatientSummary())) || ((form.dyngrdProcedure().getRows().get(i).getValue() != null) && (form.getGlobalContext().Clinical.getSelectedPatientProcedureFromNursingAdmissionIsNotNull()) && (form.dyngrdProcedure().getRows().get(i).getValue().equals(form.getGlobalContext().Clinical.getSelectedPatientProcedureFromNursingAdmission()))))
					{
						form.dyngrdProcedure().setValue(form.dyngrdProcedure().getRows().get(i).getValue());

						gridProcedureSelChange();

						// WDEV-2235
						form.ctnDetails().setCollapsed(false);
						if (form.getGlobalContext().Clinical.getSelectedPatientProcedureFromPatientSummaryIsNotNull())
							form.getGlobalContext().Clinical.setSelectedPatientProcedureFromPatientSummary(null);
						if (form.getGlobalContext().Clinical.getSelectedPatientProcedureFromNursingAdmissionIsNotNull())
							form.getGlobalContext().Clinical.setSelectedPatientProcedureFromNursingAdmission(null);
					}
				}
			}
		}

	}

	protected void onFormClosing(CancelArgs args) throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setClinicalDIassociationsFormMode(null);
	}

	protected void onRadioButtongrpProcedureTypeValueChanged() throws PresentationLogicException
	{
		form.ctnDetails().customControlCodingItem().setHotlist(form.ctnDetails().grpProcedureType().getValue().equals(grpProcedureTypeEnumeration.rdoProcedures) ? new Boolean(false) : new Boolean(true));
	}

	protected void onCustomControlCodingItemValueChanged() throws PresentationLogicException
	{
		if (form.ctnDetails().customControlCodingItem().isAllSelected() != null && form.ctnDetails().customControlCodingItem().isAllSelected().booleanValue())
		{
			form.ctnDetails().grpProcedureType().setValue(GenForm.ctnDetailsContainer.grpProcedureTypeEnumeration.rdoProcedures);
			form.ctnDetails().customControlCodingItem().setHotlist(new Boolean(false));
			form.ctnDetails().customControlCodingItem().search();
		}
	}

	protected void viewAssociations()
	{
		DynamicGridRow row = form.dyngrdProcedure().getSelectedRow();
		if (row == null)
			throw new CodingRuntimeException("No row selected");

		DynamicGridCell cell = row.getCells().get(getColByIdentifier(COL_ASSOCS));

		if ((cell != null) && (cell.getColumn().equals(getColumn(COL_ASSOCS))) && (cell.getRow() != null) && (cell.getRow().getValue() != null))
		{
			form.getGlobalContext().Clinical.setClinicalDIassociationsFormMode(FormMode.VIEW);
			form.getGlobalContext().Clinical.PatientSummary.setPrimaryAssociation((PatientProcedureShortListVo) cell.getRow().getValue());
			engine.open(form.getForms().Clinical.ClinicalDiAssociations);
		}
	}

	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdProcedure().getColumns().getByIdentifier(identifier);
	}

	protected void onDyngrdProcedureRowSelectionChanged(DynamicGridRow row)
	{
		gridProcedureSelChange();
		form.ctnDetails().cmbSource().setRequired(form.ctnDetails().chkPMH().getValue());	//wdev-13314
		form.ctnDetails().setCollapsed(false);
		updateControlsState();
	}

	protected void onBtnEditClick() throws PresentationLogicException
	{
		updateInstance();
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		if (ConfigFlag.UI.PLANNED_PROCEDURES_TO_BE_CREATED_VIA_SFS.getValue())
		{
			newInstanceFormIntraOperativeCareRecord();
		}
		else
		{
			newInstance();
		}
	}

	/**
	 *	WDEV-13471
	 *	Function used to create a new PatientProcedure from IntraOperative Care Record form
	 */
	private void newInstanceFormIntraOperativeCareRecord()
	{
		clearInstanceControls();
		
		form.getGlobalContext().Clinical.setPatientProcedureForIntraOperativeDialog(null);
		
		engine.open(form.getForms().Clinical.IntraOperativeCareRecordDialog, new Object[] {FormMode.EDIT});
	}

	protected void onChkPMHValueChanged() throws PresentationLogicException
	{
		form.ctnDetails().cmbSource().setEnabled(form.ctnDetails().chkPMH().getValue());
		form.ctnDetails().cmbSource().setRequired(form.ctnDetails().chkPMH().getValue());	//wdev-13314
		form.ctnDetails().cmbSource().setValue(null);
	}

	// WDEV-2243
	private void setInitialCustomControlCodingSettings()
	{
		form.ctnDetails().customControlCodingItem().setSearchAllSelected(Boolean.FALSE);
		form.ctnDetails().customControlCodingItem().setHotlist(Boolean.TRUE);
	}

	private void isBtnCloseVisible(boolean value)
	{
		form.btnClose().setEnabled(value);
		form.btnClose().setVisible(value);
	}

	private boolean isDialog()
	{
		return engine.isDialog();
	}

	protected void onBtnCloseClick() throws PresentationLogicException
	{
		// engine.open(form.getGlobalContext().Clinical.getReturnToFormName());
		engine.close(DialogResult.OK);
	}

	protected void onBtnCheckListClick() throws PresentationLogicException
	{
		// Requested by KOC - Temporary Change in functionality for BHRT 1.8 release - Form is not to be displayed
		// engine.open(form.getForms().Clinical.PatientProcedureChecklistDialog);
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		
	}
}
