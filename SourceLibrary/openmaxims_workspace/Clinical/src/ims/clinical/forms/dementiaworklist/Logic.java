//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4696.13908)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.dementiaworklist;

import ims.admin.vo.DementiaColourConfigVo;
import ims.admin.vo.DementiaColourConfigVoCollection;
import ims.clinical.vo.DementiaAssessAndInvestigateVo;
import ims.clinical.vo.DementiaFindVo;
import ims.clinical.vo.DementiaForWorklistVo;
import ims.clinical.vo.DementiaVo;
import ims.clinical.vo.DementiaWorklistSearchCriteriaVo;
import ims.clinical.vo.DementialManualClassAssemblyVo;
import ims.clinical.vo.DementialManualClassAssemblyVoCollection;
import ims.clinical.vo.PatientForDementiaVo;
import ims.clinical.vo.enums.DementiaWorklistOpenFormModeEnum;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.DementiaRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocSiteLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.DementiaWorklistStatus;
import ims.core.vo.lookups.DementiaWorklistStatusCollection;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int COL_IDENTIFIER = 0;
	private static final int COL_SURNAME = 1;
	private static final int COL_FORENAME = 2;
	private static final int COL_DOB = 3;
	private static final int COL_WARD = 4;
	private static final int COL_DISCHARGEDATE = 5;
	private static final int COL_CONSULTANT = 6;
	private static final int COL_STATUS = 7;
	private static final int COL_HOURSTOBREACH = 8;
	private static final int COL_ICON = 9;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	private void initialize()
	{
		populateHospitalCombo();

		ILocation currentLocation = engine.getCurrentLocation();
		LocSiteLiteVo currentHospiptal = domain.getCurrentHospital(currentLocation);
		form.cmbHospital().setValue(currentHospiptal);

		if (form.cmbHospital().getValue() != null && currentLocation instanceof LocationLiteVo)
		{
			listWards(form.cmbHospital().getValue(), null, false);
			form.qmbWard().setValue((LocationLiteVo) currentLocation);
		}

		// Load Configuration into context for use in components
		form.getGlobalContext().Admin.setDementiaConfiguration(domain.getDementiaConfiguration());

		form.ccConsultant().initialize(MosType.MEDIC);

		bindDementiaStatusCombo();

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		form.cmbIDType().setValue(dispIdType);

		form.chkInpatientOnly().setValue(true);
		form.chkDelirum().setValue(false);
		form.chkDementiaConfirmed().setValue(false);
		form.chkExclude().setValue(false);

		form.imbRefresh().setEnabled(false);//wdev-16983

		initializeDynPatGrid();
		form.getLocalContext().setWasTimerOn(false);

		form.getTimers().gettimerRefresh().setInterval(ConfigFlag.GEN.DEMENTIA_WORKLIST_TIMER_INTERVAL.getValue());

	}

	private void initializeDynPatGrid()
	{
		form.dyngrdPatients().clear();

		DynamicGridColumn column;

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		form.dyngrdPatients().setSelectable(true);
		
		form.dyngrdPatients().setHeaderHeight(40);
		
		column = form.dyngrdPatients().getColumns().newColumn(dispIdType.getText());
		column.setIdentifier(COL_IDENTIFIER);
		column.setWidth(70);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdPatients().getColumns().newColumn("Surname");
		column.setIdentifier(COL_SURNAME);
		column.setWidth(95);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdPatients().getColumns().newColumn("Forename");
		column.setIdentifier(COL_FORENAME);
		column.setWidth(95);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdPatients().getColumns().newColumn("DOB");
		column.setIdentifier(COL_DOB);
		column.setWidth(65);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdPatients().getColumns().newColumn("Ward");
		column.setIdentifier(COL_WARD);
		column.setWidth(95);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		if (!form.chkInpatientOnly().getValue())
		{
			column = form.dyngrdPatients().getColumns().newColumn("Discharge\nDate");
			column.setIdentifier(COL_DISCHARGEDATE);
			column.setWidth(78);
			column.setCanGrow(true);
			column.setSortMode(SortMode.MANUAL);
		}
		column = form.dyngrdPatients().getColumns().newColumn("Consultant");
		column.setIdentifier(COL_CONSULTANT);
		column.setWidth(90);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdPatients().getColumns().newColumn("Worklist Status");
		column.setIdentifier(COL_STATUS);
		column.setWidth(-1);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdPatients().getColumns().newColumn("Hours to\nBreach");
		column.setIdentifier(COL_HOURSTOBREACH);
		column.setWidth(70);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdPatients().getColumns().newColumn("Dementia/\nDelirium");
		column.setIdentifier(COL_ICON);
		column.setWidth(-1);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);

	}

	private void populateHospitalCombo()
	{
		LocSiteLiteVoCollection hospitals = domain.listHospitals();

		if (hospitals == null || hospitals.size() == 0)
			return;

		for (LocSiteLiteVo hospital : hospitals)
		{
			if (hospital == null)
				continue;

			form.cmbHospital().newRow(hospital, hospital.getName());
		}
	}

	private void listWards(LocSiteLiteVo locSiteLiteVo, String wardName, boolean showOpened)
	{
		form.qmbWard().clear();

		if (locSiteLiteVo == null || locSiteLiteVo.getID_Location() == null)
			return;

		LocationLiteVoCollection wards = domain.listWards(locSiteLiteVo, wardName);

		if (wards == null || wards.size() == 0)
			return;

		for (LocationLiteVo ward : wards)
		{
			if (ward == null)
				continue;

			form.qmbWard().newRow(ward, ward.getName());
		}

		if (showOpened)
		{
			if (wards.size() == 1)
			{
				form.qmbWard().setValue(wards.get(0));
				return;
			}

			form.qmbWard().showOpened();
		}
	}

	private void bindDementiaStatusCombo()
	{
		form.cmbStatus().clear();

		DementiaWorklistStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getDementiaWorklistStatus(this.domain.getLookupService());
		for (int i = 0; i < lookupCollection.size(); i++)
		{
			// not sure if needed
			// if(DementiaWorklistStatus.COMPLETED.equals(lookupCollection.get(i)))
			// continue;

			form.cmbStatus().newRow(lookupCollection.get(i), lookupCollection.get(i).getText(), lookupCollection.get(i).getImage(), lookupCollection.get(i).getTextColor());
		}
	}

	private void open()
	{
		if (form.getGlobalContext().Clinical.getDementiaWorklistSearchCriteriaIsNotNull())
		{
			populateSearchCriteriaScreenFromData(form.getGlobalContext().Clinical.getDementiaWorklistSearchCriteria());

			if (form.getGlobalContext().Clinical.getDementiaWorklistSearchCriteria().getWasTimerOnIsNotNull() && form.getGlobalContext().Clinical.getDementiaWorklistSearchCriteria().getWasTimerOn())
			{
				form.getLocalContext().setWasTimerOn(true);
				toggleTimer(false);
			}
		}
		
		
		if (form.getGlobalContext().Clinical.getDementiaWorklistSearchCriteriaIsNotNull() && search())
		{
			form.getGlobalContext().Clinical.setDementiaWorklistSearchCriteria(populateSearchCriteriaDataFromScreen());
		}
		
		updateControlsState();
	}

	private DementiaWorklistSearchCriteriaVo populateSearchCriteriaDataFromScreen()
	{
		DementiaWorklistSearchCriteriaVo criteria = new DementiaWorklistSearchCriteriaVo();

		criteria.setHospital(form.cmbHospital().getValue());
		criteria.setWard(form.qmbWard().getValue());
		criteria.setAdmissionDateFrom(form.dteFrom().getValue()!=null?new DateTime(form.dteFrom().getValue(), new Time(0, 0, 0)):null);
		criteria.setAdmissionDateTo(form.dteTo().getValue()!=null?new DateTime(form.dteTo().getValue(),new Time(23, 59, 59)):null);
		criteria.setConsultant(form.ccConsultant().getValue());
		criteria.setSpecialty(form.cmbSpecialty().getValue());
		criteria.setDementiaStatus(form.cmbStatus().getValue());
		criteria.setSurname(form.txtSurname().getValue());
		criteria.setForename(form.txtForename().getValue());

		if (form.txtIDValue().getValue() != null)
		{
			criteria.setPatIdType(form.cmbIDType().getValue());
			criteria.setPatIdValue(form.txtIDValue().getValue());
		}

		criteria.setDOB(form.pdtDOB().getValue());
		criteria.setInpatientOnly(form.chkInpatientOnly().getValue());
		criteria.setExcludeRemoved(form.chkExclude().getValue());
		criteria.setDementiaConfirmed(form.chkDementiaConfirmed().getValue());
		criteria.setDeliriumConfirmed(form.chkDelirum().getValue());
		criteria.setWasTimerOn(form.getLocalContext().getWasTimerOn());

		return criteria;
	}

	private boolean search()
	{
		initializeDynPatGrid();
		form.dyngrdPatients().getRows().clear();

		if (isSearchCriteriaValid())
		{
			form.getLocalContext().setConsultantSortOrder(SortOrder.DESCENDING);
			form.getLocalContext().setAdmissionDateSortOrder(SortOrder.ASCENDING);
			form.getLocalContext().setDDSortOrder(SortOrder.ASCENDING);

			DementialManualClassAssemblyVoCollection listManual = domain.listPatientsManualAssembley(populateSearchCriteriaDataFromScreen());
			
			// sort collection - after Hours To Breach
			if (listManual!=null)
			{
				listManual.sort(new HoursToBreachComparator(SortOrder.ASCENDING));
				//list.sort(new DobComparator(SortOrder.ASCENDING));
				
				form.imbRefresh().setEnabled(true); //wdev-16983
			}
			populateScreenFromData(listManual);
			
			return true;
		}

		return false;
	}

	private void populateScreenFromData(DementialManualClassAssemblyVoCollection list)
	{
		form.dyngrdPatients().getRows().clear();

		if (list == null || list.size() == 0)
		{
			engine.showMessage("No records found.");
			form.imbRefresh().setEnabled(false); //wdev-16983
			
			return;
		}

		for (int i = 0; i < list.size(); i++)
		{
			if (list.get(i) == null)
				continue;

			addRowToGrid(list.get(i));
		}

		form.dyngrdPatients().setValue(form.getLocalContext().getSelectedInstance());
		
	}

	private void addRowToGrid(DementialManualClassAssemblyVo dementiaVo)
	{
		if (dementiaVo == null || dementiaVo.getPatientSurname() == null)
			return;

		DynamicGridRow newRow = form.dyngrdPatients().getRows().newRow();

		if (dementiaVo.getPatientIdentifierIsNotNull())
		{
			DynamicGridCell cellId = newRow.getCells().newCell(getColumnDynGrid(COL_IDENTIFIER), DynamicCellType.STRING);
			cellId.setValue(dementiaVo.getPatientIdentifier());
			cellId.setTooltip(dementiaVo.getPatientIdentifier());
			cellId.getColumn().setAlignment(Alignment.LEFT);
		}

		if (dementiaVo.getPatientSurnameIsNotNull())
		{

			DynamicGridCell cellSurname = newRow.getCells().newCell(getColumnDynGrid(COL_SURNAME), DynamicCellType.STRING);
			cellSurname.setValue(dementiaVo.getPatientSurname());
			cellSurname.setTooltip(dementiaVo.getPatientSurname());
			cellSurname.getColumn().setAlignment(Alignment.LEFT);

			DynamicGridCell cellForename = newRow.getCells().newCell(getColumnDynGrid(COL_FORENAME), DynamicCellType.STRING);
			cellForename.setValue(dementiaVo.getPatientForename());
			cellForename.setTooltip(dementiaVo.getPatientForename());
			cellForename.getColumn().setAlignment(Alignment.LEFT);

		}

		if (dementiaVo.getPatientDOBIsNotNull())	
		{
			DynamicGridCell cellDOB = newRow.getCells().newCell(getColumnDynGrid(COL_DOB), DynamicCellType.STRING);
			cellDOB.setValue(dementiaVo.getPatientDOB() != null ? dementiaVo.getPatientDOB().toString() : ""); // toString(DateFormat.STANDARD)
			cellDOB.setTooltip(dementiaVo.getPatientDOB() != null ? dementiaVo.getPatientDOB().toString() : ""); // toString(DateFormat.STANDARD)
			cellDOB.getColumn().setAlignment(Alignment.LEFT);
		}

		if (dementiaVo.getWardIsNotNull())
		{
			DynamicGridCell cellWard = newRow.getCells().newCell(getColumnDynGrid(COL_WARD), DynamicCellType.STRING);
			cellWard.setValue(dementiaVo.getWard());
			cellWard.setTooltip(dementiaVo.getWard());
			cellWard.getColumn().setAlignment(Alignment.LEFT);
		}

		if (!form.chkInpatientOnly().getValue() && dementiaVo.getDischargeDateTimeIsNotNull())
		{
			DynamicGridCell cellDischargeDate = newRow.getCells().newCell(getColumnDynGrid(COL_DISCHARGEDATE), DynamicCellType.STRING);
			cellDischargeDate.setValue(dementiaVo.getDischargeDateTime().toString());
			cellDischargeDate.setTooltip(dementiaVo.getDischargeDateTime().toString());
			cellDischargeDate.getColumn().setAlignment(Alignment.LEFT);
			
			if (dementiaVo.getDischargeDateTime()!=null)
			{
				newRow.setBackColor(ConfigFlag.UI.DISCHARGED_ROW_COLOUR.getValue());
			}
		}

		if (dementiaVo.getConsultantIsNotNull())
		{
			DynamicGridCell cellConsultant = newRow.getCells().newCell(getColumnDynGrid(COL_CONSULTANT), DynamicCellType.STRING);
			cellConsultant.setValue(dementiaVo.getConsultant());
			cellConsultant.setTooltip(dementiaVo.getConsultant());
			cellConsultant.getColumn().setAlignment(Alignment.LEFT);
		}

		if (dementiaVo.getCurrentStatusIsNotNull())
		{
			DynamicGridCell cellStatus = newRow.getCells().newCell(getColumnDynGrid(COL_STATUS), DynamicCellType.STRING);
			cellStatus.setValue(dementiaVo.getCurrentStatus().getText());
			cellStatus.setTooltip(dementiaVo.getCurrentStatus().getText());
			cellStatus.getColumn().setAlignment(Alignment.LEFT);

			if (dementiaVo.getIsExcludedFromWorklistIsNotNull()
				&& dementiaVo.getIsExcludedFromWorklist())
			{
				StringBuffer sb = new StringBuffer();
				sb.append(dementiaVo.getCurrentStatus().getText());
				if (dementiaVo.getReasonForExclusionIsNotNull())//wdev-16356
				{
					sb.append(" - Reason for Exclusion : ");
					sb.append(dementiaVo.getReasonForExclusion());
				}
				cellStatus.setTooltip(sb.toString());
			}
		}
		
		if (dementiaVo.getDischargeDateTime()==null && DementiaWorklistStatus.STEP_ONE_FIND_OUTSTANDING.equals(dementiaVo.getCurrentStatus()) 
				&& dementiaVo.getBreachDateTimeIsNotNull())
		{
			Integer allMinutes = calculateDateDiffInMinutes(new DateTime(), dementiaVo.getBreachDateTime());
			int hoursToBreach = allMinutes/60;
			
			DynamicGridCell cellHoursToBreach = newRow.getCells().newCell(getColumnDynGrid(COL_HOURSTOBREACH), DynamicCellType.INT);
			//cellHoursToBreach.setValue(String.valueOf(hoursToBreach));
			cellHoursToBreach.setValue(hoursToBreach);
			cellHoursToBreach.setTooltip(String.valueOf(hoursToBreach));
			cellHoursToBreach.getColumn().setAlignment(Alignment.LEFT);
			
			//the records that have already Breached the DeadLine, the colour should be displayed from a flag
			if (new DateTime().isGreaterThan(dementiaVo.getBreachDateTime()))
			{
				newRow.setBackColor(ConfigFlag.UI.DEMENTIA_BREACHED_ROW_COLOUR.getValue());
			}
			else
			{	
				DementiaColourConfigVoCollection collColourConfig = form.getGlobalContext().Admin.getDementiaConfiguration().getColourConfig();
				for (int i=0;i<collColourConfig.size();i++)
				{
					DementiaColourConfigVo colourConfig = collColourConfig.get(i);
					if (hoursToBreach>=colourConfig.getFromHours() && hoursToBreach<=colourConfig.getToHours())
					{
						newRow.setBackColor(colourConfig.getWorklistEntryColour());
					}
				}							
			}
		}
		
		if (dementiaVo.getDeliriumConfirmedIsNotNull() && dementiaVo.getDeliriumConfirmed())
		{
			DynamicGridCell cellStatus = newRow.getCells().newCell(getColumnDynGrid(COL_ICON), DynamicCellType.IMAGE);
			cellStatus.setValue(form.getImages().Clinical.DeleriumNew);
			cellStatus.setTooltip("Delirium Confirmed");
			cellStatus.getColumn().setAlignment(Alignment.LEFT);
		}
		else if (dementiaVo.getDementiaConfirmedIsNotNull() && dementiaVo.getDementiaConfirmed())
		{
			DynamicGridCell cellStatus = newRow.getCells().newCell(getColumnDynGrid(COL_ICON), DynamicCellType.IMAGE);
			cellStatus.setValue(form.getImages().Clinical.DementiaNew);
			cellStatus.setTooltip("Dementia Confirmed");
			cellStatus.getColumn().setAlignment(Alignment.LEFT);
		}
		
		if (dementiaVo.getDischargeDateTime()==null && DementiaWorklistStatus.COMPLETED.equals(dementiaVo.getCurrentStatus()) 
			&& dementiaVo.getDementiaConfirmedIsNotNull() && dementiaVo.getDementiaConfirmed())
		{
			newRow.setBackColor(Color.LightGray);
		}
		newRow.setValue(dementiaVo);

	}

	private Integer calculateDateDiffInMinutes(DateTime fromDate, DateTime toDate) 
	{
		if(fromDate == null || toDate == null)
			return null;
		
		long fromDateInMillis = fromDate.getJavaDate().getTime();
		long toDateInMillis = toDate.getJavaDate().getTime();
		return (int)(((toDateInMillis - fromDateInMillis)/1000)/60);
	}
	
	private ims.core.vo.PatientId getDisplayID(PatientForDementiaVo patient)
	{
		String configFlagIDType = ims.configuration.ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue();
		ims.core.vo.lookups.PatIdType type = ims.core.vo.lookups.PatIdType.getNegativeInstance(configFlagIDType);

		if (type == null)
			type = ims.core.vo.lookups.PatIdType.HOSPNUM;

		for (int i = 0; i < patient.getIdentifiers().size(); i++)
		{
			ims.core.vo.PatientId id = patient.getIdentifiers().get(i);
			if (id.getType().equals(type))
			{
				return id;
			}
		}

		return null;
	}

	private DynamicGridColumn getColumnDynGrid(Integer identifier)
	{
		return form.dyngrdPatients().getColumns().getByIdentifier(identifier);
	}

	private void toggleTimer(boolean fromButton)
	{
		if (fromButton && !form.getTimers().gettimerRefresh().isEnabled())
		{
			if (!isSearchCriteriaValid())
				return;
		}

		boolean reinstateTimer = form.getLocalContext().getWasTimerOn();

		if (form.getTimers().gettimerRefresh().isEnabled())
		{
			form.getTimers().gettimerRefresh().setEnabled(false);

			form.imbRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbRefresh().setTooltip("Click button to start the automatic refresh");

			form.getLocalContext().setWasTimerOn(false);
			if (form.getGlobalContext().Clinical.getDementiaWorklistSearchCriteriaIsNotNull())
				form.getGlobalContext().Clinical.getDementiaWorklistSearchCriteria().setWasTimerOn(false);
		}
		else if (!form.getTimers().gettimerRefresh().isEnabled())
		{
			if (fromButton || reinstateTimer)
			{
				form.getTimers().gettimerRefresh().setEnabled(true);

				form.imbRefresh().setTooltip("Click button to stop the automatic refresh");
				form.imbRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
				form.imbRefresh().setEnabled(true);

				form.getLocalContext().setWasTimerOn(true);
				if (form.getGlobalContext().Clinical.getDementiaWorklistSearchCriteriaIsNotNull())
					form.getGlobalContext().Clinical.getDementiaWorklistSearchCriteria().setWasTimerOn(true);
			}
		}
	}

	private boolean isSearchCriteriaValid()
	{
		Date dateFrom = form.dteFrom().getValue();
		Date dateTo = form.dteTo().getValue();

		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			engine.showMessage("Admission Date From cannot be greater than Admission Date To", "Validation error", MessageButtons.OK, MessageIcon.ERROR);
			return false;
		}

		if (isAtLeastOneSearchFieldCompleted())
			return true;

		engine.showMessage("Complete at least one search field.", "Validation error", MessageButtons.OK, MessageIcon.ERROR);

		return false;
	}

	private boolean isAtLeastOneSearchFieldCompleted()
	{
		return form.cmbHospital().getValue() != null || form.qmbWard().getValue() != null || form.dteFrom().getValue() != null || form.dteTo().getValue() != null || form.ccConsultant().getValue() != null || form.cmbSpecialty().getValue() != null || form.cmbStatus().getValue() != null || form.txtSurname().getValue() != null || form.txtForename().getValue() != null || form.txtIDValue().getValue() != null || form.pdtDOB().getValue() != null || Boolean.TRUE.equals(form.chkExclude().getValue() || Boolean.TRUE.equals(form.chkDementiaConfirmed().getValue()) || Boolean.TRUE.equals(form.chkDelirum().getValue()) ||Boolean.TRUE.equals(form.chkInpatientOnly().getValue()));
	}

	private void populateSearchCriteriaScreenFromData(DementiaWorklistSearchCriteriaVo criteria)
	{
		clearScreen();

		if (criteria == null)
			return;

		form.cmbHospital().setValue(criteria.getHospital());

		if (criteria.getWardIsNotNull())
		{
			form.qmbWard().newRow(criteria.getWard(), criteria.getWard().getName());
		}

		form.qmbWard().setValue(criteria.getWard());
		
		form.dteFrom().setValue(criteria.getAdmissionDateFromIsNotNull()? criteria.getAdmissionDateFrom().getDate():null);
		form.dteTo().setValue(criteria.getAdmissionDateToIsNotNull()? criteria.getAdmissionDateTo().getDate():null);
		form.ccConsultant().setValue(criteria.getConsultant());
		form.cmbSpecialty().setValue(criteria.getSpecialty());
		form.cmbStatus().setValue(criteria.getDementiaStatus());
		form.txtSurname().setValue(criteria.getSurname());
		form.txtForename().setValue(criteria.getForename());
		form.cmbIDType().setValue(criteria.getPatIdType() != null ? criteria.getPatIdType() : PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
		form.txtIDValue().setValue(criteria.getPatIdValue());
		form.pdtDOB().setValue(criteria.getDOB());

		form.chkExclude().setValue(criteria.getExcludeRemoved());
		form.chkDelirum().setValue(criteria.getDeliriumConfirmed());
		form.chkDementiaConfirmed().setValue(criteria.getDementiaConfirmed());
		form.chkInpatientOnly().setValue(criteria.getInpatientOnly());

		form.dyngrdPatients().getRows().clear();

	}

	private void clearScreen()
	{
		form.cmbHospital().setValue(null);
		form.qmbWard().clear();
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.ccConsultant().clear();
		form.cmbSpecialty().setValue(null);
		form.cmbStatus().setValue(null);
		form.txtSurname().setValue(null);
		form.txtForename().setValue(null);
		form.cmbIDType().setValue(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
		form.txtIDValue().setValue(null);
		form.pdtDOB().setValue(null);
		form.chkExclude().setValue(null);
		form.chkDelirum().setValue(null);
		form.chkDementiaConfirmed().setValue(null);
		form.chkInpatientOnly().setValue(null);
		form.dyngrdPatients().getRows().clear();
		form.imbRefresh().setEnabled(false);//wdev-16983
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Clinical.DementiaRIEConfirmationDialog) 
			&& result.equals(DialogResult.CONFIRM))
			rieDementiaWorklistEntry();
		
		search();
		updateControlsState();
	}

	private void rieDementiaWorklistEntry()
	{
		try
		{
			DementiaVo voDementia = domain.getDementiaForRIEUse(new DementiaRefVo(((DementialManualClassAssemblyVo) form.dyngrdPatients().getValue()).getDementiaId(),0));
			if (voDementia != null)
				domain.rieDementiaRecord(voDementia, form.getForms().Clinical.DementiaAssessmentFormDialog, 
					voDementia.getPatient().getID_Patient(), 
					null, 
					null,
					"Patient was on Dementia worklist in error. The Demantia record was RIEd via worklist functionality - Confirmation dialog.");
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
		} 
		catch (StaleObjectException e)
		{
			engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
		}
		catch (UnqViolationUncheckedException e)
		{
			engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
		}
	}

	@Override
	protected void onImbRefreshClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setPatientShort(null);
		form.dyngrdPatients().setValue(null);
		form.getLocalContext().setSelectedInstance(null);
		
		toggleTimer(true);
		updateControlsState();
	}

	@Override
	protected void onQmbWardTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbHospital().getValue() == null)
		{
			engine.showMessage("Please select a Hospital");
			form.cmbHospital().setFocus();
			return;
		}

		listWards(form.cmbHospital().getValue(), value, true);
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();

		form.getLocalContext().setSelectedInstance(null);
		form.getGlobalContext().Clinical.setDementiaWorklistSearchCriteria(null);
		form.getGlobalContext().Core.setPatientShort(null);
		updateControlsState();
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch();
	}

	private void doSearch()
	{
		form.getLocalContext().setSelectedInstance(null);

		if (search())
		{
			form.getGlobalContext().Clinical.setDementiaWorklistSearchCriteria(populateSearchCriteriaDataFromScreen());
		}

		updateControlsState();
	}

	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbWard().clear();
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.DementiaWorklistMenu.STEP1:// record Step1
				engine.open(form.getForms().Clinical.DementiaAssessmentFormDialog, new Object[] { form.getLocalContext().getSelectedInstance(), DementiaWorklistOpenFormModeEnum.STEP1EDIT });
				break;
			case GenForm.ContextMenus.ClinicalNamespace.DementiaWorklistMenu.STEP2:// record Step2
				engine.open(form.getForms().Clinical.DementiaAssessmentFormDialog, new Object[] { form.getLocalContext().getSelectedInstance(), DementiaWorklistOpenFormModeEnum.STEP2_AMTS_EDIT });
				break;
			case GenForm.ContextMenus.ClinicalNamespace.DementiaWorklistMenu.VIEW:// VIEW
				engine.open(form.getForms().Clinical.DementiaAssessmentFormDialog, new Object[] { form.getLocalContext().getSelectedInstance(), DementiaWorklistOpenFormModeEnum.VIEW });
				break;
			case GenForm.ContextMenus.ClinicalNamespace.DementiaWorklistMenu.EDIT:// EDIT //WDEV-16247
				engine.open(form.getForms().Clinical.DementiaAssessmentFormDialog, new Object[] { form.getLocalContext().getSelectedInstance(), DementiaWorklistOpenFormModeEnum.EDIT });
				break;	
			case GenForm.ContextMenus.ClinicalNamespace.DementiaWorklistMenu.RECORD_FOLLOWUP_AMTS:// record Step2
				engine.open(form.getForms().Clinical.DementiaAssessmentFormDialog, new Object[] { form.getLocalContext().getSelectedInstance(), DementiaWorklistOpenFormModeEnum.FOLLOWUP_AMTS_EDIT });
				break;
			case GenForm.ContextMenus.ClinicalNamespace.DementiaWorklistMenu.CORRECT_CCOMPLETION_DATE_STEP1:
				engine.open(form.getForms().Clinical.DementiaCorrectCompletionDateStep1Dialog, new Object[] { form.getLocalContext().getSelectedInstance() });
				break;

			case GenForm.ContextMenus.ClinicalNamespace.DementiaWorklistMenu.CORRECT_CCOMPLETION_DATE_STEP2:
				engine.open(form.getForms().Clinical.DementiaCorrectCompletionDateStep2Dialog, new Object[] { form.getLocalContext().getSelectedInstance() });
				break;

			case GenForm.ContextMenus.ClinicalNamespace.DementiaWorklistMenu.EXCLUDE_FROM_DEMENTIA_SCREENING:
				engine.open(form.getForms().Clinical.DementiaExcludefromDementiaScreeningDialog, new Object[] { form.getLocalContext().getSelectedInstance() });
				break;
			case GenForm.ContextMenus.ClinicalNamespace.DementiaWorklistMenu.RIE_REMOVE_FROM_WORKLIST:
				engine.open(form.getForms().Clinical.DementiaRIEConfirmationDialog);
				break;		
			case GenForm.ContextMenus.ClinicalNamespace.DementiaWorklistMenu.CONFIRM_PATIENT:
				engine.open(form.getForms().Clinical.DementiaConfirmPatientWillBePutOnDementiaPathwayDialog, new Object[] { form.getLocalContext().getSelectedInstance() });
				break;
		}

	}

	@Override
	protected void onTimer(ims.framework.controls.Timer timer) throws ims.framework.exceptions.PresentationLogicException
	{
		if(search())
		{
			form.getGlobalContext().Clinical.setDementiaWorklistSearchCriteria(populateSearchCriteriaDataFromScreen());
		}
		
		updateControlsState();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		boolean enableControls = !form.getTimers().gettimerRefresh().isEnabled();
		
		DementialManualClassAssemblyVo selectedRowValue = (DementialManualClassAssemblyVo) form.dyngrdPatients().getValue();
		
		//WDEV-16247
		Object hcp = domain.getHcpLiteUser();
		HcpLiteVo hcpLiteUser=null;
		if (hcp != null)
			hcpLiteUser=((HcpLiteVo) domain.getHcpLiteUser());
		
		DementiaVo voDementia = (selectedRowValue!=null ? domain.getDementia(new DementiaRefVo(((DementialManualClassAssemblyVo) selectedRowValue).getDementiaId(),0)) : null);

		DementiaFindVo voStep1Find = (voDementia!=null?voDementia.getStepOneFind():null);
		DementiaAssessAndInvestigateVo voStep2AMTS = (voDementia!=null?voDementia.getStepTwoAssess():null);
		
		Integer hours = (voDementia!=null && voDementia.getAdmissionDateTime()!=null?calculateDateDiffInMinutes(voDementia.getAdmissionDateTime(),new DateTime())/60:null);
		
		form.cmbHospital().setEnabled(enableControls);
		form.qmbWard().setEnabled(form.cmbHospital().getValue() != null && enableControls);

		form.dteFrom().setEnabled(enableControls);
		form.dteTo().setEnabled(enableControls);

		form.ccConsultant().setEnabled(enableControls);
		form.cmbSpecialty().setEnabled(enableControls);
		form.cmbStatus().setEnabled(enableControls);

		form.txtSurname().setEnabled(enableControls);
		form.txtForename().setEnabled(enableControls);
		form.cmbIDType().setEnabled(enableControls);
		form.txtIDValue().setEnabled(enableControls);
		form.pdtDOB().setEnabled(enableControls);
		form.chkExclude().setEnabled(enableControls);
		form.chkDelirum().setEnabled(enableControls);
		form.chkDementiaConfirmed().setEnabled(enableControls);
		form.chkInpatientOnly().setEnabled(enableControls);

		form.imbSearch().setEnabled(enableControls);
		form.imbClear().setEnabled(enableControls);

		form.getContextMenus().Clinical.hideAllDementiaWorklistMenuMenuItems();
		form.getContextMenus().Clinical.getDementiaWorklistMenuVIEWItem().setVisible(selectedRowValue != null && voDementia.getStepOneFindIsNotNull());
		//EDIT Context Menu	
		form.getContextMenus().Clinical.getDementiaWorklistMenuEDITItem().setVisible(hcpLiteUser!=null && selectedRowValue != null && (voStep1Find!=null || voStep2AMTS!=null)
									&&((voStep1Find!=null  && voStep1Find.getAuthoringInformationIsNotNull() &&voStep1Find.getAuthoringInformation().getAuthoringHcpIsNotNull() &&  voStep1Find.getAuthoringInformation().getAuthoringHcp().equals(hcpLiteUser))
										|| (voStep2AMTS!=null && voStep2AMTS.getAuthoringInformationIsNotNull() && voStep2AMTS.getAuthoringInformation().getAuthoringHcpIsNotNull() && voStep2AMTS.getAuthoringInformation().getAuthoringHcp().equals(hcpLiteUser))
										|| engine.hasRight(AppRight.CAN_EDIT_AND_RIE_DEMENTIA)));	
		form.getContextMenus().Clinical.getDementiaWorklistMenuSTEP1Item().setVisible(hcpLiteUser!=null 
				&& selectedRowValue != null 
				&& DementiaWorklistStatus.STEP_ONE_FIND_OUTSTANDING.equals(voDementia.getCurrentWorklistStatus().getStatus()));
		form.getContextMenus().Clinical.getDementiaWorklistMenuSTEP2Item().setVisible(hcpLiteUser!=null 
				&& selectedRowValue != null 
				&& (voDementia.getCurrentWorklistStatusIsNotNull() 
				&& DementiaWorklistStatus.STEP_TWO_ASSESS_INVESTIGATE_OUTSTANDING.equals(voDementia.getCurrentWorklistStatus().getStatus())));
		form.getContextMenus().Clinical.getDementiaWorklistMenuRECORD_FOLLOWUP_AMTSItem().setVisible(hcpLiteUser!=null 
				&& selectedRowValue != null && voDementia.getStepTwoAssessIsNotNull());
		form.getContextMenus().Clinical.getDementiaWorklistMenuEXCLUDE_FROM_DEMENTIA_SCREENINGItem().setVisible(selectedRowValue != null 
				&& selectedRowValue.getIsExcludedFromWorklist()==null 
				&& (hours!=null && hours>form.getGlobalContext().Admin.getDementiaConfiguration().getRemoveTimePeriod())
				&& ! DementiaWorklistStatus.COMPLETED.equals(voDementia.getCurrentWorklistStatus().getStatus())
				&& ! DementiaWorklistStatus.FOR_REFERRAL.equals(voDementia.getCurrentWorklistStatus().getStatus()) );
		form.getContextMenus().Clinical.getDementiaWorklistMenuCONFIRM_PATIENTItem().setVisible(selectedRowValue != null 
				&& (voDementia.getCurrentWorklistStatusIsNotNull() 
						&& DementiaWorklistStatus.COMPLETED.equals(voDementia.getCurrentWorklistStatus().getStatus())) 
						&& (Boolean.TRUE.equals(selectedRowValue.getDementiaConfirmed())) 
						&& voDementia.getConfirmedPatientPutOnDementiaPathway()==null);
		form.getContextMenus().Clinical.getDementiaWorklistMenuRIE_REMOVE_FROM_WORKLISTItem().setVisible(selectedRowValue != null 
				&& engine.hasRight(AppRight.CAN_EDIT_AND_RIE_DEMENTIA) );	
		form.getContextMenus().Clinical.getDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP1Item().setVisible(selectedRowValue != null 
				&& voDementia.getStepOneFindIsNotNull());
		form.getContextMenus().Clinical.getDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP2Item().setVisible(selectedRowValue != null 
				&& voDementia.getStepOneFindIsNotNull() && voDementia.getStepTwoAssessIsNotNull());

		
	}

	@Override
	protected void onDyngrdPatientsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		form.getGlobalContext().Core.setPatientShort(null);
		
		DementiaForWorklistVo voDementia = null;
		if (form.dyngrdPatients().getValue() != null && form.dyngrdPatients().getValue() instanceof DementialManualClassAssemblyVo)
			voDementia = domain.getDementiaForWorklist(new DementiaRefVo(((DementialManualClassAssemblyVo) form.dyngrdPatients().getValue()).getDementiaId(),0));
		else
			voDementia = domain.getDementiaForWorklist((DementiaForWorklistVo)form.dyngrdPatients().getValue());

		if (voDementia == null) // This record could have been RIE'ed and so no longer exists for the worklist
		{
			engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			doSearch();
			return;
		}
			
	//	row.setValue(voDementia);
	//  DementiaForWorklistVo rowValue = (DementiaForWorklistVo) form.dyngrdPatients().getValue();

		if (voDementia.getPatientIsNotNull())
		{
			form.getGlobalContext().Core.setPatientShort(domain.getPatient(voDementia.getPatient()));
		}
		form.getLocalContext().setSelectedInstance(voDementia);
		updateControlsState();
	}

	@Override
	protected void onDyngrdPatientsColumnHeaderClicked(DynamicGridColumn column)
	{
		DementialManualClassAssemblyVoCollection values = new DementialManualClassAssemblyVoCollection();
		for (int i=0;i<form.dyngrdPatients().getRows().size();i++)
		{
			values.add((DementialManualClassAssemblyVo) form.dyngrdPatients().getRows().get(i).getValue());
		}
		
		if (values==null || values.size()<=1)
			return;
		
		switch((Integer)column.getIdentifier())
		{
			case COL_CONSULTANT:
				form.getLocalContext().setConsultantSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getConsultantSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new ConsultantComparator(form.getLocalContext().getConsultantSortOrder()));
			break;
				
			case COL_DOB:
				form.getLocalContext().setDOBSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getDOBSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new DobComparator(form.getLocalContext().getDOBSortOrder()));
			break;
			
			case COL_HOURSTOBREACH:
				form.getLocalContext().setHoursToBreachSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getHoursToBreachSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new HoursToBreachComparator(form.getLocalContext().getHoursToBreachSortOrder()));
			break;
			case COL_ICON:
				form.getLocalContext().setIconSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getIconSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new IconComparator(form.getLocalContext().getIconSortOrder()));
			break;
			case COL_DISCHARGEDATE:
				form.getLocalContext().setDDSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getDDSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new DischargeDateComparator(form.getLocalContext().getDDSortOrder()));
			break;
			
				
		}
			
		populateScreenFromData(values);
		
	}

	@Override
	protected void onChkInpatientOnlyValueChanged() throws PresentationLogicException
	{
		//initializeDynPatGrid();
		//onImbSearchClick();
	}
	
	public class ConsultantComparator  implements Comparator
	{
		private int direction = 1;

		public ConsultantComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public ConsultantComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
		}

		public int compare(Object ob1, Object ob2)
		{
			String cons1 = null;
			String cons2 = null;
			if (ob1 instanceof DementialManualClassAssemblyVo)
			{
				DementialManualClassAssemblyVo dem1=(DementialManualClassAssemblyVo)ob1;
				cons1 = dem1.getConsultantSortIsNotNull() ? dem1.getConsultantSort() : null;
			}
			if (ob2 instanceof DementialManualClassAssemblyVo)
			{
				DementialManualClassAssemblyVo dem2=(DementialManualClassAssemblyVo)ob2;
					cons2 = dem2.getConsultantSortIsNotNull() ? dem2.getConsultantSort() : null;
			}
			if (cons1 != null && cons2!=null)
				return cons1.compareTo(cons2) * direction;
			if (cons1 == null)
				return (-1) * direction;
			if (cons2==null)
				return direction;
			return 0;
		}

	}
	
	public class DobComparator implements Comparator
	{
		private int direction = 1;
		
		public DobComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DobComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			PartialDate pdate1 = null;
			PartialDate pdate2 = null;
			if (ob1 instanceof DementialManualClassAssemblyVo)
			{
				DementialManualClassAssemblyVo dem1=(DementialManualClassAssemblyVo)ob1;
				pdate1 = dem1.getPatientDOBIsNotNull()?dem1.getPatientDOB():null;
			}
			if (ob2 instanceof DementialManualClassAssemblyVo)
			{
				DementialManualClassAssemblyVo dem2=(DementialManualClassAssemblyVo)ob2;
				pdate2 = dem2.getPatientDOBIsNotNull()?dem2.getPatientDOB():null;
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

	public class DischargeDateComparator implements Comparator
	{
		private int direction = 1;
		
		public DischargeDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DischargeDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime pdate1 = null;
			DateTime pdate2 = null;
			if (ob1 instanceof DementialManualClassAssemblyVo)
			{
				DementialManualClassAssemblyVo dem1=(DementialManualClassAssemblyVo)ob1;
				pdate1 = dem1.getDischargeDateTimeIsNotNull()?dem1.getDischargeDateTime():null;
			}
			if (ob2 instanceof DementialManualClassAssemblyVo)
			{
				DementialManualClassAssemblyVo dem2=(DementialManualClassAssemblyVo)ob2;
				pdate2 = dem2.getDischargeDateTimeIsNotNull()?dem2.getDischargeDateTime():null;
			}
			
			if (pdate1 == null && pdate2 != null)
			{
				return -1 * direction;
			}
			
			if (pdate1 != null && pdate2 == null)
			{
				return direction;
			}

			if (pdate1 != null && pdate2 != null)
				return direction * pdate1.compareTo(pdate2);
			else
				return 0;
		//	if(pdate1 != null )
		//		return  pdate1.compareTo(pdate2)*direction;
		//	if(pdate2 != null)
		//		return (-1)*direction;
		//	
		//	return 0;
		}
	
	}
	

	public class HoursToBreachComparator implements Comparator
	{
		private int direction = 1;
		
		public HoursToBreachComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public HoursToBreachComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Integer hoursToBreach1 = null;
			Integer hoursToBreach2 = null;
			if (ob1 instanceof DementialManualClassAssemblyVo)
			{
				DementialManualClassAssemblyVo dem1=(DementialManualClassAssemblyVo)ob1;
				if (dem1.getDischargeDateTime()==null && dem1.getCurrentStatusIsNotNull() && DementiaWorklistStatus.STEP_ONE_FIND_OUTSTANDING.equals(dem1.getCurrentStatus()) && dem1.getBreachDateTimeIsNotNull())
				{
					hoursToBreach1 = calculateDateDiffInMinutes(new DateTime(), dem1.getBreachDateTime())/60;
				}
				else
				{
					//hoursToBreach1=Integer.MIN_VALUE;
					hoursToBreach1=null;
				}
			}
			if (ob2 instanceof DementialManualClassAssemblyVo)
			{
				DementialManualClassAssemblyVo dem2=(DementialManualClassAssemblyVo)ob2;
				if (dem2.getDischargeDateTime()==null && dem2.getCurrentStatusIsNotNull() && DementiaWorklistStatus.STEP_ONE_FIND_OUTSTANDING.equals(dem2.getCurrentStatus()) && dem2.getBreachDateTimeIsNotNull())
				{
					hoursToBreach2 = calculateDateDiffInMinutes(new DateTime(), dem2.getBreachDateTime())/60;
				}
				else
				{
					//hoursToBreach2=Integer.MIN_VALUE;
					hoursToBreach2=null;
				}

			}
			if(hoursToBreach1 != null && hoursToBreach2 != null)
				return  hoursToBreach1.compareTo(hoursToBreach2)*direction;
			if(hoursToBreach1 == null && hoursToBreach2!=null)
				return 1;
			if (hoursToBreach2==null && hoursToBreach1 != null)
				return -1;

			return 0;
		}
	
	}
	
	public class IconComparator implements Comparator
	{
		private int direction = 1;
		
		public IconComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public IconComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Integer icon1 = null;
			Integer icon2 = null;
			if (ob1 instanceof DementialManualClassAssemblyVo)
			{
				DementialManualClassAssemblyVo dem1=(DementialManualClassAssemblyVo)ob1;
				if (dem1.getDementiaConfirmedIsNotNull() && dem1.getDementiaConfirmed())
				{
					icon1=2;
				}
				else if (dem1.getDeliriumConfirmedIsNotNull() && dem1.getDeliriumConfirmed())
				{
					icon1=1;
				}
			}
			if (ob2 instanceof DementialManualClassAssemblyVo)
			{
				DementialManualClassAssemblyVo dem2=(DementialManualClassAssemblyVo)ob2;
				if (dem2.getDementiaConfirmedIsNotNull() && dem2.getDementiaConfirmed())
				{
					icon2=2;
				}
				else if (dem2.getDeliriumConfirmedIsNotNull() && dem2.getDeliriumConfirmed())
				{
					icon2=1;
				}

			}
			
			if (icon1 != null && icon2!=null)
				return icon1.compareTo(icon2) * direction;
			if (icon1 == null)
				return (-1) * direction;
			if (icon2==null)
				return direction;
			
			return 0;
		}
	
	}

	@Override
	protected void onChkDelirumValueChanged() throws PresentationLogicException
	{
		form.chkDementiaConfirmed().setValue(null);
		
	}

	@Override
	protected void onChkDementiaConfirmedValueChanged() throws PresentationLogicException
	{
		form.chkDelirum().setValue(null);
		
	}
}
