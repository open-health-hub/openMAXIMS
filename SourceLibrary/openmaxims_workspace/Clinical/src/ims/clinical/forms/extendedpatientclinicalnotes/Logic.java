//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3853.21665)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.extendedpatientclinicalnotes;

import ims.clinical.vo.ExtendedClinicalNotesFilterVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ClinicalNotesRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextListVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.ClinicalNoteStatusVo;
import ims.core.vo.ClinicalNoteStatusVoCollection;
import ims.core.vo.ClinicalNotesShortVo;
import ims.core.vo.ClinicalNotesShortVoCollection;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.lookups.ClinicalNotesStatus;
import ims.core.vo.lookups.ClinicalNotingMode;
import ims.core.vo.lookups.SourceOfNote;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void initialise()
	{
		initializeDynamicGrid();
		form.getLocalContext().setClinicalContactErr(true);
		form.btnPrint().setEnabled(false);
		form.btnPrint().setVisible(false);
		
		form.cmbStatus().removeRow(ClinicalNotesStatus.ACTIVE);
		form.cmbStatus().removeRow(ClinicalNotesStatus.PREVALIDATION);
		
		loadHcpDisciplines();
	}

	private void loadHcpDisciplines()
	{
		form.cmbDiscipline().clear();
		ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(domain.getLookupService());
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			if (lookupCollection.get(x).isActive() == true && lookupCollection.get(x).getParent() == null)
				form.cmbDiscipline().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}

	private void initializeDynamicGrid()
	{
		form.dyngrdNotes().clear();
		form.dyngrdNotes().setSelectable(true);
		form.dyngrdNotes().setReadOnly(true);

		DynamicGridColumn correctedColumn = form.dyngrdNotes().getColumns().newColumn("", true);
		correctedColumn.setWidth(30);
		correctedColumn.setIdentifier(new String("CORRECT"));

		DynamicGridColumn authoringdateColumn = form.dyngrdNotes().getColumns().newColumn("Recording Date Time", true);
		authoringdateColumn.setWidth(125);//WDEV-15112
		authoringdateColumn.setIdentifier(new String("Recording Date"));

		DynamicGridColumn authoringHCPColumn = form.dyngrdNotes().getColumns().newColumn("Recording User", true);
		authoringHCPColumn.setWidth(150);
		authoringHCPColumn.setIdentifier(new String("Recording User"));

		DynamicGridColumn disColumn = form.dyngrdNotes().getColumns().newColumn("Discipline", true);
		disColumn.setWidth(70);
		disColumn.setIdentifier(new String("Discipline"));
		disColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn statusColumn = form.dyngrdNotes().getColumns().newColumn("Status", true);
		statusColumn.setWidth(70);
		statusColumn.setIdentifier(new String("Status"));
		statusColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn ntColumn = form.dyngrdNotes().getColumns().newColumn("NoteType", true);
		ntColumn.setWidth(100);
		ntColumn.setIdentifier(new String("Note Type"));
		ntColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn notesColumn = form.dyngrdNotes().getColumns().newColumn("Note", true);
		notesColumn.setWidth(-1);
		notesColumn.setIdentifier(new String("Note"));
	}

	private void search()
	{
		form.getGlobalContext().Core.setClinicalNotesShort(null);

		ExtendedClinicalNotesFilterVo filter = setFilter();

		if(form.dtimFrom().getValue() != null && form.dtimTo().getValue() != null )
		{
			if(form.dtimFrom().getValue().isGreaterThan(form.dtimTo().getValue()))
			{
				engine.showMessage("Please enter From and To dates that are in chronological order");
				return;
			}
		}

		ClinicalNotesShortVoCollection voCollNotes = domain.listClinicalNote(filter);
		form.dyngrdNotes().getRows().clear();
		//WDEV-10261 clear context menu
		clearContextMenu();

		if (voCollNotes == null || voCollNotes.size() == 0)
		{
			engine.showMessage("No matching records found");
			form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());
			updateContextMenu();//wdev-13075	
			updateControlsState();//WDEV-14616	
			return;
		}

		form.getGlobalContext().Clinical.setExtendedClinicalNotesListFilter(filter);
		form.btnPrint().setEnabled(true);
		form.btnPrint().setVisible(true);
		populateDynamicGrid(voCollNotes);
		updateContextMenu();
		updateControlsState();//WDEV-14616

		form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());
	}
	
	//WDEV-14616
	private void updateControlsState() 
	{
		form.btnPrint().setVisible(form.dyngrdNotes().getRows().size()>0);
		
	}

	private void populateDynamicGrid(ClinicalNotesShortVoCollection voCollNotes)
	{
		updateContextMenu();

		for (int i = 0; i < voCollNotes.size(); i++)
		{
			DynamicGridRow row = form.dyngrdNotes().getRows().newRow();

			ClinicalNotesShortVo note = voCollNotes.get(i);

			setColAuthoringDate(note, row);
			setColAuthoringHCP(note, row);

			if (note.getIsCorrectedIsNotNull() && note.getIsCorrected().booleanValue())
				setColCorrect(row);

			if (note.getDisciplineIsNotNull())
				setColDiscipline(note, row);

			if (note.getNoteClassificationIsNotNull())
				setColNoteType(note, row);

			if (note.getCurrentStatusIsNotNull() && note.getCurrentStatus().getStatusIsNotNull())
				setColStatus(note, row);

			setColNote(note, row);

			row.setValue(note);
		}
	}

	private void setColNote(ClinicalNotesShortVo voNote, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Note");
		if (col == null)
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell noteCell = row.getCells().newCell(col, DynamicCellType.HTMLVIEW);
		
		if (voNote.getAuthoringInfoIsNotNull()
			&& voNote.getAuthoringInfo().getAuthoringHcpIsNotNull()
			&& voNote.getRecordingUserIsNotNull()
			&& voNote.getAuthoringInfo().getAuthoringHcp().getMosIsNotNull()
			&& ! voNote.getAuthoringInfo().getAuthoringHcp().getMos().getID_MemberOfStaff().equals(voNote.getRecordingUser().getID_MemberOfStaff()))
		{
			StringBuffer sb = new StringBuffer();
			sb.append("Charted on behalf of: " + voNote.getAuthoringInfo().getAuthoringHcp().getMos().getName().toString());
			sb.append(":- ");
			sb.append("<br>");
			
			sb.append(voNote.getClinicalNote());
				
			if (voNote.getCurrentStatusIsNotNull()
				&& voNote.getCurrentStatus().getStatusIsNotNull()
				&& voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.CORRECTED))
				addCorrectedText(sb, voNote.getCurrentStatus());

			noteCell.setValue(sb.toString());
		}
		else if (voNote.getCurrentStatusIsNotNull()
			&& voNote.getCurrentStatus().getStatusIsNotNull()
			&& voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.CORRECTED))
		{
			StringBuffer sb = new StringBuffer();

			sb.append(voNote.getClinicalNote());
			sb.append("<br>");
			
			addCorrectedText(sb, voNote.getCurrentStatus());
			
			noteCell.setValue(sb.toString());
		}
		else
			noteCell.setValue(voNote.getClinicalNote());
	}

	private void addCorrectedText(StringBuffer sb, ClinicalNoteStatusVo currentStatus) 
	{
		sb.append("<br>");
		sb.append("  Corrected by : ");
		sb.append(currentStatus.getCorrectedByIsNotNull() ? currentStatus.getCorrectedBy().getName() : "");
		sb.append(" on ");
		sb.append(currentStatus.getDateTimeIsNotNull() ? currentStatus.getDateTime().getDate().toString() : " ");
		sb.append(" at ");
		sb.append(currentStatus.getDateTimeIsNotNull() ? currentStatus.getDateTime().getTime().toString() : " ");
		sb.append(" for the following reason :- ");
		sb.append("<br>");
		sb.append(currentStatus.getCorrectionReasonIsNotNull() ? currentStatus.getCorrectionReason() : " NO REASON GIVEN");
	}

	private void setColStatus(ClinicalNotesShortVo note, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Status");
		if (col == null)
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell statusCell = row.getCells().newCell(col, DynamicCellType.STRING);
		statusCell.setValue(note.getCurrentStatus().getStatus().getText());
		
		StringBuffer sb = new StringBuffer();
		sb.append("Status set by : ");
		sb.append(note.getCurrentStatus().getMOSIsNotNull() ? note.getCurrentStatus().getMOS().getName() : "");
		sb.append(" on ");
		sb.append(note.getCurrentStatus().getDateTimeIsNotNull() ? note.getCurrentStatus().getDateTime().toString() : "");
		statusCell.setTooltip(sb.toString());
	}

	private void setColDiscipline(ClinicalNotesShortVo note, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Discipline");
		if (col == null)
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell disCell = row.getCells().newCell(col, DynamicCellType.STRING);
		disCell.setValue(note.getDisciplineIsNotNull() ? note.getDiscipline().getText() : "");
	}

	private void setColNoteType(ClinicalNotesShortVo note, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Note Type");
		if (col == null)
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell disCell = row.getCells().newCell(col, DynamicCellType.STRING);
		disCell.setValue(note.getNoteClassificationIsNotNull() ? note.getNoteClassification().getText() : "");
	}

	private void setColCorrect(DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("CORRECT");
		if (col == null)
			throw new DomainRuntimeException("No column for CORRECT");

		DynamicGridCell correctCell = row.getCells().newCell(col, DynamicCellType.IMAGE);
		correctCell.setValue(form.getImages().Core.CareSpell);
	}

	private void setColAuthoringHCP(ClinicalNotesShortVo note, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Recording User");
		if (col == null)
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell dateCell = row.getCells().newCell(col, DynamicCellType.WRAPTEXT);
		StringBuffer value = new StringBuffer();
		
		if (note.getRecordingUserIsNotNull())
			value.append(note.getRecordingUser().toString());

		dateCell.setValue(value.toString());
		
		// Set cell tooltip
		dateCell.setTooltip(buildNoteTooltip(note));
	}

	/**
	 * @param note
	 * @return
	 */
	private String buildNoteTooltip(ClinicalNotesShortVo note)
	{
		if(note == null) //WDEV-12766
			return null;
		
		StringBuilder tooltip = new StringBuilder();

		// Build "Recorded By"
		tooltip.append("<b>Authored By:</b> ");
		if (note.getAuthoringInfoIsNotNull() && note.getAuthoringInfo().getAuthoringHcpIsNotNull())
			tooltip.append(note.getAuthoringInfo().getAuthoringHcp().toString()).append(" - "); 
		if (note.getAuthoringInfoIsNotNull() &&  note.getAuthoringInfo().getAuthoringDateTimeIsNotNull())
			tooltip.append(note.getAuthoringInfo().getAuthoringDateTime().toString());
		// Build "Confirmed By"
		if(note.getCurrentStatusIsNotNull() && ClinicalNotesStatus.CONFIRMED.equals(note.getCurrentStatus().getStatus())) //WDEV-12766
		{
			tooltip.append("<br><b>Confirmed By:</b> ");
			tooltip.append(note.getCurrentStatus().getMOSIsNotNull() && note.getCurrentStatus().getMOS().getNameIsNotNull() ? note.getCurrentStatus().getMOS().getName().toString() : "").append(" - "); //WDEV-12766
			tooltip.append(note.getCurrentStatus().getDateTimeIsNotNull() ? note.getCurrentStatus().getDateTime().toString() : ""); //WDEV-12766
		}
		
		return tooltip.toString();
	}
	
	private void setColAuthoringDate(ClinicalNotesShortVo note, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Recording Date");
		if (col == null)
			throw new DomainRuntimeException("No column for Identifier");
		
		DynamicGridCell dateCell = row.getCells().newCell(col, DynamicCellType.WRAPTEXT);
		StringBuffer value = new StringBuffer();

		if (note.getRecordingDateTimeIsNotNull())
		{
			value.append(note.getRecordingDateTime().toString());
		}

		dateCell.setValue(value.toString());
		dateCell.setTooltip(buildNoteTooltip(note));
	}

	private ExtendedClinicalNotesFilterVo setFilter()
	{
		ExtendedClinicalNotesFilterVo filter = new ExtendedClinicalNotesFilterVo();
		filter.setDiscipline(form.cmbDiscipline().getValue());
		filter.setDateFrom(form.dtimFrom().getValue());
		filter.setDateTo(form.dtimTo().getValue());
		filter.setPatient(form.getGlobalContext().Core.getPatientShort());
		filter.setCareContext(form.cmbCareContext().getValue());
		filter.setNoteClassification(form.cmbNoteType().getValue());
		filter.setStatus(form.cmbStatus().getValue());
		filter.setPatientNotesOnly(form.chkContextLess().getValue());
		
		return filter;
	}

	private DynamicGridColumn getCol(String identifier)
	{
		return form.dyngrdNotes().getColumns().getByIdentifier(identifier);
	}

	private void open()
	{
		form.getLocalContext().setClinicalNoteVoForContext(null);
		form.getGlobalContext().Clinical.setReturnToFormMode(null);
		
		form.getLocalContext().setClinicalContactErr(true);
		
		loadCareContexts();
		
		if (form.getGlobalContext().Clinical.getExtendedClinicalNotesListFilter() == null)
		{
			if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			{
				form.cmbCareContext().setValue(form.getGlobalContext().Core.getCurrentCareContext());
				//form.dtimFrom().setValue(form.getGlobalContext().Core.getCurrentCareContext().getStartDateTimeIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime() : null);
				//form.dtimTo().setValue(new DateTime());
			}
			resetSearchCriteriaAndSearch(true);
		}
		else
			resetSearchCriteriaAndSearch(false);
		
		updateContextMenu();
	}

	private void resetSearchCriteriaAndSearch(boolean bForceSearch) 
	{
		if (form.getGlobalContext().Clinical.getExtendedClinicalNotesListFilterIsNotNull())
		{
			ExtendedClinicalNotesFilterVo filter = form.getGlobalContext().Clinical.getExtendedClinicalNotesListFilter();

			form.cmbDiscipline().setValue(filter.getDiscipline());
			form.dtimFrom().setValue(filter.getDateFrom());
			form.dtimTo().setValue(filter.getDateTo());
			form.cmbCareContext().setValue(form.getGlobalContext().Core.getCurrentCareContext());

			form.cmbNoteType().setValue(filter.getNoteClassification());
			form.cmbStatus().setValue(filter.getStatus());

			form.chkContextLess().setValue(filter.getPatientNotesOnly());

			search();
		}
		else if (bForceSearch)
			search();
	}

	private void loadCareContexts() 
	{
		CareContextShortVoCollection voColl = domain.listCareContexts(form.getGlobalContext().Core.getPatientShort());
		
		form.cmbCareContext().clear();
		
		for (int i = 0 ; voColl != null && i < voColl.size() ; i++)
		{
			StringBuffer sb = new StringBuffer();
			sb.append(voColl.get(i).createDisplayString());
			if (voColl.get(i).getContextIsNotNull())
			{
				sb.append(" - ");
				sb.append(voColl.get(i).getContext()); 
			}
			form.cmbCareContext().newRow(voColl.get(i), sb.toString());
		}
		
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-14616 
		if (formName.equals(form.getForms().Clinical.ExtendedCarePlanClinicalNotesDialog)&& result.equals(DialogResult.OK)&& form.dtimTo().getValue() != null && ims.clinical.vo.enums.ExtendedPatientClinicalNotes_ContextMenuSelected.ADD.equals(form.getLocalContext().getcontextMenuSelected()))
		{
			DateTime dt = form.dtimTo().getValue();
			dt.addMinutes(15);
			
			form.dtimTo().setValue(null);//WDEV-14616 
			form.dtimTo().setValue(dt);
			
			form.getLocalContext().setcontextMenuSelected(null);//WDEV-14616 
		}
		
		search();
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.ExtendedClinicalNotes.ADD :
				newClinicalNote();
			break;
			case GenForm.ContextMenus.ClinicalNamespace.ExtendedClinicalNotes.EDIT :
				editClinicalNote();
			break;
			case GenForm.ContextMenus.ClinicalNamespace.ExtendedClinicalNotes.CORRECT :
				correctClinicalNote();
			break;
			case GenForm.ContextMenus.ClinicalNamespace.ExtendedClinicalNotes.VIEW :
				viewClinicalNote();
			break;
			case GenForm.ContextMenus.ClinicalNamespace.ExtendedClinicalNotes.CONFIRMED :
				showConfirmDialog();
			break;

			default :
		}
	}

	private void showConfirmDialog() 
	{
		form.getLocalContext().setMessageBoxId(engine.showMessage("Are you sure you want to mark this Clinical note as Confirmed?", "Confirm", MessageButtons.YESNO));
		
	}

	private void confirmClinicalNote() 
	{
		if (form.dyngrdNotes().getSelectedRow() != null)
		{
			ClinicalNotesRefVo selectedClinicalNote = (ClinicalNotesRefVo) form.dyngrdNotes().getSelectedRow().getValue();
			
			//WDEV-15239
			if (selectedClinicalNote.getID_ClinicalNotesIsNotNull() && domain.isStale(selectedClinicalNote))
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				search();
				return;
			}
		
			ClinicalNotesVo voClinNote = domain.getClinicalNote(selectedClinicalNote);
			
			ClinicalNoteStatusVo voStat = new ClinicalNoteStatusVo();
			voStat.setDateTime(new DateTime());
			voStat.setMOS((MemberOfStaffShortVo)domain.getMosUser());
			voStat.setStatus(ClinicalNotesStatus.CONFIRMED);			//wdev-11941
			voClinNote.setCurrentStatus(voStat);
			
			voClinNote.setStatusHistory(addStatusToCollection(voClinNote.getStatusHistory(),voStat));
			
			if (ConfigFlag.GEN.CARE_PLAN_FUNCTIONALITY_TYPE.getValue().toString().equals("CCO")
				&& voClinNote.getID_ClinicalNotesIsNotNull()
				&& voClinNote.getAuthoringInfo() == null)//added to get around the fact that authoring info is mandatory in BO.
				voClinNote.setAuthoringInfo(new AuthoringInformationVo());//if fields are blank a AuthoringInfo object will be put in here and get around the non-null.

			String[] errors = voClinNote.validate();
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return;
			}
			
			try 
			{
				domain.saveClinicalNotes(voClinNote);
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				search();
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				search();
			}
			search();
		}
	}

	private ClinicalNoteStatusVoCollection addStatusToCollection(ClinicalNoteStatusVoCollection statusHistory, ClinicalNoteStatusVo voStat) 
	{
		ClinicalNoteStatusVoCollection voColl = statusHistory;
		if (voColl == null)
			voColl = new ClinicalNoteStatusVoCollection();
		voColl.add(voStat);
		
		return voColl;
	}
	
	private void correctClinicalNote()
	{
		selectClinicalNoteInGlobalContext();

		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.CORRECTION);
		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE))
			engine.open(form.getForms().Therapies.SOAPNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.TLT_NOTE))
			engine.open(form.getForms().Clinical.TherapiesNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNote().booleanValue())
		{
			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
		}
		else
			engine.open(form.getForms().Clinical.ExtendedClinicalNotesDialog);
	}

	private void newClinicalNote()
	{
		form.getGlobalContext().Core.setClinicalNotesShort(null);
		form.getGlobalContext().Clinical.setCurrentClinicalNote(null);
		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.NEW);
		
		//WDEV-14616
		form.getLocalContext().setcontextMenuSelected(ims.clinical.vo.enums.ExtendedPatientClinicalNotes_ContextMenuSelected.ADD);

		engine.open(form.getForms().Clinical.ExtendedCarePlanClinicalNotesDialog);

//		if (engine.getFormName().equals(form.getForms().Clinical.ExtendedPatientClinicalNotesCarePlansList))
//			engine.open(form.getForms().Clinical.ExtendedCarePlanClinicalNotesDialog);
//		else
//			engine.open(form.getForms().Clinical.ExtendedClinicalNotesDialog);
	}

	private void editClinicalNote()
	{
		selectClinicalNoteInGlobalContext();

		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.UPDATE);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE))
			engine.open(form.getForms().Therapies.SOAPNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.TLT_NOTE))
			engine.open(form.getForms().Clinical.TherapiesNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNote().booleanValue())
		{
			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
		}
		else
		{
			if (engine.getFormName().equals(form.getForms().Clinical.ExtendedPatientClinicalNotesCarePlansList))
				engine.open(form.getForms().Clinical.ExtendedCarePlanClinicalNotesDialog);
			else
				engine.open(form.getForms().Clinical.ExtendedClinicalNotesDialog);
		}

	}

	private void viewClinicalNote()
	{
		selectClinicalNoteInGlobalContext();

		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.VIEW);
		form.getGlobalContext().Core.setClinicalNotingMode(null);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE))
			engine.open(form.getForms().Therapies.SOAPNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.TLT_NOTE))
			engine.open(form.getForms().Clinical.TherapiesNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNote().booleanValue())
		{
			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);

			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
		}
		else
		{
			form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.VIEW);
			if (engine.getFormName().equals(form.getForms().Clinical.ExtendedPatientClinicalNotesCarePlansList))
			{
		//		if (form.getGlobalContext().Core.getClinicalNotesShortIsNotNull()
		//			&& form.getGlobalContext().Core.getClinicalNotesShort().getIsCorrectedIsNotNull()
		//			&& form.getGlobalContext().Core.getClinicalNotesShort().getIsCorrected())
		//			engine.open(form.getForms().Clinical.ExtendedClinicalNotesDialog);
		//		else
					engine.open(form.getForms().Clinical.ExtendedCarePlanClinicalNotesDialog);
			}
			else
				engine.open(form.getForms().Clinical.ExtendedClinicalNotesDialog);
		}

	}

	private void selectClinicalNoteInGlobalContext()
	{
		form.getGlobalContext().Core.setClinicalNotesShort((ClinicalNotesShortVo) form.dyngrdNotes().getSelectedRow().getValue());
		form.getGlobalContext().Clinical.setCurrentClinicalNote(domain.getClinicalNote((ClinicalNotesShortVo) form.dyngrdNotes().getSelectedRow().getValue()));
	}

	protected void onDyngrdNotesRowSelectionChanged(DynamicGridRow row)
	{
		selectDynamicRow(row);
	}

	private void selectDynamicRow(DynamicGridRow row)
	{
		if (row == null)
			return;

		form.getGlobalContext().Core.setClinicalNotesShort((ClinicalNotesShortVo) form.dyngrdNotes().getValue());

		form.getGlobalContext().Clinical.setCurrentClinicalNote(domain.getClinicalNote((ClinicalNotesShortVo) form.dyngrdNotes().getValue()));

		// WDEV-2511
		/*if (domain.getMosUser() == null)  //commented for WDEV-14624
			{
		clearContextMenu();
			form.getContextMenus().Clinical.getExtendedClinicalNotesVIEWItem().setVisible(true);//WDEV-14624
			return;
		}
		*/ 
		updateContextMenu();
		
	}

	private void updateContextMenu()
	{
		clearContextMenu();
		
		//WDEV-14624
		if (domain.getMosUser() == null)
		{
			form.getContextMenus().Clinical.getExtendedClinicalNotesVIEWItem().setVisible(form.dyngrdNotes().getSelectedRow() != null);
			form.getContextMenus().Clinical.getExtendedClinicalNotesADDItem().setEnabled(false);
			return;
		}
		
		handleNotingAddMenuItemVisibility();
		
		//if there is a Contact in the GC, check to see if there is a note for it. If not show ADD.
		checkForNoteForClinicalContact();

		if (form.dyngrdNotes().getSelectedRow() != null 
			&& form.dyngrdNotes().getSelectedRow().getValue() != null)
		{
			ClinicalNotesShortVo voNote = (ClinicalNotesShortVo) form.dyngrdNotes().getSelectedRow().getValue();

			form.getContextMenus().Clinical.getExtendedClinicalNotesEDITItem().setVisible(true);

			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull()
				&&form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsCorrectedIsNotNull() 
				&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsCorrected().booleanValue())
			{
				form.getContextMenus().Clinical.getExtendedClinicalNotesEDITItem().setVisible(false);
				form.getContextMenus().Clinical.getExtendedClinicalNotesCORRECTItem().setVisible(false);
				form.getContextMenus().Clinical.getExtendedClinicalNotesCONFIRMEDItem().setVisible(false);
			}
			
			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() 
				&& domain.getHcpLiteUser() == null)
			{
				form.getContextMenus().Clinical.getExtendedClinicalNotesEDITItem().setVisible(false);
				form.getContextMenus().Clinical.getExtendedClinicalNotesCORRECTItem().setVisible(false);
				form.getContextMenus().Clinical.getExtendedClinicalNotesCONFIRMEDItem().setVisible(false);
			}
			
			form.getContextMenus().Clinical.getExtendedClinicalNotesVIEWItem().setVisible(true);

			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() 
				&& form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
				&& ( (form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContactIsNotNull()
						&& ! form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()) )
					|| 	(form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContact() == null)) )
				form.getContextMenus().Clinical.getExtendedClinicalNotesEDITItem().setVisible(false);

			checkIfADDShouldBeHidden();

			if (form.dyngrdNotes().getSelectedRow().getValue() instanceof ClinicalNotesShortVo)
			{
				if (rulesForCorrectContexMenus(voNote))
					form.getContextMenus().Clinical.getExtendedClinicalNotesCORRECTItem().setVisible(true);

				form.getContextMenus().Clinical.getExtendedClinicalNotesADDItem().setVisible(true);

				form.getContextMenus().Clinical.getExtendedClinicalNotesEDITItem().setVisible(voNote.getCurrentStatusIsNotNull() 
								&& voNote.getCurrentStatus().getStatusIsNotNull()
								&& voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT));
				
				form.getContextMenus().Clinical.getExtendedClinicalNotesCONFIRMEDItem().setVisible(voNote.getCurrentStatusIsNotNull() 
						&& voNote.getCurrentStatus().getStatusIsNotNull()
						&& voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT)
						//&& (domain.getHcpLiteUser() != null ? true : false)
						&& engine.hasRight(AppRight.CAN_CONFIRM_NURSING_DOCUMENTATION));
				
				form.getContextMenus().Clinical.getExtendedClinicalNotesVIEWItem().setVisible(true);
				
				checkForNoteForClinicalContact();
				checkIfADDShouldBeHidden();
			}
			checkIfEditViewCorrectShouldBeHidden(voNote.getCareContext());
			return;
		}
		checkIfADDShouldBeHidden();
		checkIfEditViewCorrectShouldBeHidden(null);
		
	}

	private void checkIfEditViewCorrectShouldBeHidden(CareContextListVo voCareContext) 
	{
		if (form.getGlobalContext().Core.getCurrentCareContext() == null
			|| (voCareContext != null 
				&& form.getGlobalContext().Core.getCurrentCareContext() != null
				&& ! form.getGlobalContext().Core.getCurrentCareContext().equals(voCareContext)))
		{
			form.getContextMenus().Clinical.getExtendedClinicalNotesCORRECTItem().setVisible(false);
			form.getContextMenus().Clinical.getExtendedClinicalNotesEDITItem().setVisible(false);
			form.getContextMenus().Clinical.getExtendedClinicalNotesCONFIRMEDItem().setVisible(false);
		}
	}

	private void handleNotingAddMenuItemVisibility()
	{
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			if(form.getLocalContext().getClinicalContactErr() != null 
					&& form.getLocalContext().getClinicalContactErr() == true )
			{
				if (form.getLocalContext().getClinicalNoteVoForContext() == null)
					form.getContextMenus().Clinical.getExtendedClinicalNotesADDItem().setVisible(true);
			}
		}
		else
			form.getContextMenus().Clinical.getExtendedClinicalNotesADDItem().setVisible(true);
	}

	private void checkIfADDShouldBeHidden()
	{
		if ( (form.getGlobalContext().Core.getCurrentCareContext() == null)
			|| (form.getGlobalContext().Core.getCurrentCareContext() == null
				&& form.getGlobalContext().Core.getCurrentClinicalContact() == null))
		{
			form.getContextMenus().Clinical.getExtendedClinicalNotesADDItem().setVisible(false);
			return;
		}
			
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() 
			&& form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
			&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContactIsNotNull()
			&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())) 	
			form.getContextMenus().Clinical.getExtendedClinicalNotesADDItem().setVisible(false);
	}

	private void checkForNoteForClinicalContact() 
	{
		boolean bFound = false;
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			try
			{
				if (domain.getClinicalNotesForContact(form.getGlobalContext().Core.getCurrentClinicalContact()) != null)
					bFound = true; 
			}
			catch (Exception e)
			{
				
				if(form.getLocalContext().getClinicalContactErr()== true)
				{
					engine.showMessage(e.getMessage());
					form.getLocalContext().setClinicalContactErr(false);
				}
				
				
				form.getContextMenus().Clinical.getExtendedClinicalNotesADDItem().setVisible(false);
				return;
			}
		}
		if(bFound)
			form.getContextMenus().Clinical.getExtendedClinicalNotesADDItem().setVisible(false);
	}

	private void clearContextMenu()
	{
		form.getContextMenus().Clinical.getExtendedClinicalNotesADDItem().setVisible(false);
		form.getContextMenus().Clinical.getExtendedClinicalNotesEDITItem().setVisible(false);
		form.getContextMenus().Clinical.getExtendedClinicalNotesVIEWItem().setVisible(false);
		form.getContextMenus().Clinical.getExtendedClinicalNotesVALIDATEItem().setVisible(false);
		form.getContextMenus().Clinical.getExtendedClinicalNotesCORRECTItem().setVisible(false);
		form.getContextMenus().Clinical.getExtendedClinicalNotesCONFIRMEDItem().setVisible(false);
	}

	private boolean rulesForCorrectContexMenus(ClinicalNotesShortVo voNote)
	{
		if (voNote.getCurrentStatusIsNotNull() 
			&& voNote.getCurrentStatus().getStatusIsNotNull() 
			&& (voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT)
				|| voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.ACTIVE)
				|| voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.CONFIRMED)) )
			//&& domain.getHcpLiteUser() != null
			//&& testDiscipline(voNote))
			return true;

		return false;
	}

/*	private boolean testDiscipline(ClinicalNotesShortVo voNote)
	{
		if (ConfigFlag.GEN.CARE_PLAN_FUNCTIONALITY_TYPE.getValue().toString().equals("CCO")
			&& voNote != null
			&& voNote.getID_ClinicalNotesIsNotNull()
			&& ((voNote.getAuthoringInfo() == null)
				|| (voNote.getAuthoringInfo() != null
					&& voNote.getAuthoringInfo().getAuthoringHcp() == null)) )//added to get around the fact that authoring info is mandatory in BO.
			return true;

		MemberOfStaffVo fullVo = null;
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo) domain.getMosUser();
		if (mos != null)
			fullVo = domain.getMemberOfStaff(mos);

		if (fullVo != null)
		{
			if (fullVo.getHcpIsNotNull())
			{
				if (fullVo.getHcp().getHcpTypeIsNotNull())
				{
					if (voNote.getAuthoringInfoIsNotNull() 
							&& voNote.getAuthoringInfo().getAuthoringHcpIsNotNull() 
							&& voNote.getAuthoringInfo().getAuthoringHcp().getHcpTypeIsNotNull())
					{
						if (voNote.getAuthoringInfo().getAuthoringHcp().getHcpType().equals(fullVo.getHcp().getHcpType()))
							return true;
					}
				}
			}
		}
		return false;
	}
*/
	protected void onImbClearClick() throws PresentationLogicException
	{
		clearTabControls();
		clearContextMenu();
		handleNotingAddMenuItemVisibility();
		form.getGlobalContext().Clinical.setExtendedClinicalNotesListFilter(null);
		form.btnPrint().setEnabled(false);
		form.btnPrint().setVisible(false);
		updateContextMenu();//wdev-13075
		updateControlsState();//WDEV-14616
	}

	private void clearTabControls()
	{
		form.chkContextLess().setValue(false);
		form.cmbCareContext().setEnabled(true);//WDEV-13180 
		form.dyngrdNotes().getRows().clear();
		form.cmbCareContext().setValue(null);
		form.cmbDiscipline().setValue(null);
		form.cmbNoteType().setValue(null);
		form.dtimFrom().setValue(null);
		form.dtimTo().setValue(null);
		form.cmbStatus().setValue(null);
		form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());
	}

	protected void onImbSearchClick() throws PresentationLogicException
	{
		search();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if (result.equals(DialogResult.YES)
			&& form.getLocalContext().getMessageBoxIdIsNotNull()
			&& messageBoxId == form.getLocalContext().getMessageBoxId())
		confirmClinicalNote();
	}

	@Override
	protected void onBtnPrintClick() throws PresentationLogicException 
	{
		printReport();
	}
	private boolean printReport() 
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		Object[] obj = null;
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		obj = domain.getReportAndTemplate(244);
			
		if (form.cmbCareContext().getValue() != null)
			client.addSeed(new SeedValue("CareContext_id",  form.cmbCareContext().getValue().getID_CareContext(), Integer.class));
		else
			client.addSeed(new SeedValue("CareContext_id",  null, Integer.class));
		
		if (form.cmbNoteType().getValue() != null)
			client.addSeed(new SeedValue("NoteType_id",  form.cmbNoteType().getValue().getID(), Integer.class));
		else
			client.addSeed(new SeedValue("NoteType_id",  null, Integer.class));

		if (form.cmbDiscipline().getValue() != null)
			client.addSeed(new SeedValue("Discipline_id",  form.cmbDiscipline().getValue().getID(), Integer.class));
		else
			client.addSeed(new SeedValue("Discipline_id",  null, Integer.class));

		if (form.dtimFrom().getValue() != null)
			client.addSeed(new SeedValue("FromDate",  form.dtimFrom().getValue().getJavaDate(), java.util.Date.class));
		else
			client.addSeed(new SeedValue("FromDate",  null, java.util.Date.class));

		if (form.dtimTo().getValue() != null)
			client.addSeed(new SeedValue("ToDate",  form.dtimTo().getValue().getJavaDate(), java.util.Date.class));
		else
			client.addSeed(new SeedValue("ToDate",  null, java.util.Date.class));

		if (form.cmbStatus().getValue() != null)
			client.addSeed(new SeedValue("Status_id",  form.cmbStatus().getValue().getID(), Integer.class));
		else
			client.addSeed(new SeedValue("Status_id",  null, Integer.class));

		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
			client.addSeed(new SeedValue("Patient_id",  form.getGlobalContext().Core.getPatientShort().getID_Patient(), Integer.class));
		else
			client.addSeed(new SeedValue("Patient_id",  null, Integer.class));

		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return false;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return false;
		}
				
		try
		{					
			String url = client.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, "PDF", null, 1);
			if (url != null)
			{
				engine.openUrl(url);
			}						
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return false;
		}	
		
		return true;
	}
	
	@Override
	protected void onChkContextLessValueChanged() throws PresentationLogicException 
	{
		form.cmbCareContext().setEnabled(! form.chkContextLess().getValue());
		if (form.chkContextLess().getValue())
			form.cmbCareContext().setValue(null);
		else
			form.cmbCareContext().setValue(form.getGlobalContext().Core.getCurrentCareContext());
			
	}

}
