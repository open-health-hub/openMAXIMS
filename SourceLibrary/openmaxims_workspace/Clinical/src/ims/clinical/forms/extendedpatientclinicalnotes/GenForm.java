//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.extendedpatientclinicalnotes;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.ClinicalNotesStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.ClinicalNotesStatus getValue()
		{
			return (ims.core.vo.lookups.ClinicalNotesStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.ClinicalNotesStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbDisciplineComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.HcpDisType getValue()
		{
			return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.HcpDisType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbNoteTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.ClinicalNoteClassification value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.ClinicalNoteClassification value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.ClinicalNoteClassification value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.ClinicalNoteClassification value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.ClinicalNoteClassification value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.ClinicalNoteClassification getValue()
		{
			return (ims.clinical.vo.lookups.ClinicalNoteClassification)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.ClinicalNoteClassification value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbCareContextComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.CareContextShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.CareContextShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.CareContextShortVo getValue()
		{
			return (ims.core.vo.CareContextShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.CareContextShortVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalNotesVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalNotesVo' of the global context variable 'Clinical.CurrentClinicalNote' is not supported.");
		if(!context.isValidContextType(ims.clinical.vo.ExtendedClinicalNotesFilterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.clinical.vo.ExtendedClinicalNotesFilterVo' of the global context variable 'Clinical.ExtendedClinicalNotesListFilter' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(125);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuExtendedClinicalNotes = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuExtendedClinicalNotesADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3560001)))
			contextMenus.Clinical.contextMenuExtendedClinicalNotes.add(contextMenus.Clinical.contextMenuExtendedClinicalNotesADDItem);
		contextMenus.Clinical.contextMenuExtendedClinicalNotesEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(103102), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3560008)))
			contextMenus.Clinical.contextMenuExtendedClinicalNotes.add(contextMenus.Clinical.contextMenuExtendedClinicalNotesEDITItem);
		contextMenus.Clinical.contextMenuExtendedClinicalNotesCONFIRMEDItem = factory.createMenuItem(startControlID.intValue() + 3, "Confirmed", true, false, new Integer(102209), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3560007)))
			contextMenus.Clinical.contextMenuExtendedClinicalNotes.add(contextMenus.Clinical.contextMenuExtendedClinicalNotesCONFIRMEDItem);
		contextMenus.Clinical.contextMenuExtendedClinicalNotesVALIDATEItem = factory.createMenuItem(startControlID.intValue() + 4, "Validate", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3560002)))
			contextMenus.Clinical.contextMenuExtendedClinicalNotes.add(contextMenus.Clinical.contextMenuExtendedClinicalNotesVALIDATEItem);
		contextMenus.Clinical.contextMenuExtendedClinicalNotesCORRECTItem = factory.createMenuItem(startControlID.intValue() + 5, "Correct", true, false, new Integer(102168), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3560003)))
			contextMenus.Clinical.contextMenuExtendedClinicalNotes.add(contextMenus.Clinical.contextMenuExtendedClinicalNotesCORRECTItem);
		contextMenus.Clinical.contextMenuExtendedClinicalNotesVIEWItem = factory.createMenuItem(startControlID.intValue() + 6, "View", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3560004)))
			contextMenus.Clinical.contextMenuExtendedClinicalNotes.add(contextMenus.Clinical.contextMenuExtendedClinicalNotesVIEWItem);
		contextMenus.Clinical.contextMenuExtendedClinicalNotesREVIEWItem = factory.createMenuItem(startControlID.intValue() + 7, "Review", true, false, new Integer(102222), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3560005)))
			contextMenus.Clinical.contextMenuExtendedClinicalNotes.add(contextMenus.Clinical.contextMenuExtendedClinicalNotesREVIEWItem);
		contextMenus.Clinical.contextMenuExtendedClinicalNotesSTATUS_HISTItem = factory.createMenuItem(startControlID.intValue() + 8, "View Correction Notes", true, false, new Integer(102253), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3560006)))
			contextMenus.Clinical.contextMenuExtendedClinicalNotes.add(contextMenus.Clinical.contextMenuExtendedClinicalNotesSTATUS_HISTItem);
		form.registerMenu(contextMenus.Clinical.contextMenuExtendedClinicalNotes);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 496, 98, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 98, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discipline:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 66, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Note Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 606, 51, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total : 0", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 34, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Care Context:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 496, 66, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 496, 34, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "From:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 752, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 544, 64, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 544, 32, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 544, 96, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 104, 96, 368, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbDisciplineTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDisciplineTemp);
		cmbDisciplineComboBox cmbDiscipline = (cmbDisciplineComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDisciplineComboBox.class, m_cmbDisciplineTemp);
		super.addComboBox(cmbDiscipline);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 104, 64, 368, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbNoteTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbNoteTypeTemp);
		cmbNoteTypeComboBox cmbNoteType = (cmbNoteTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbNoteTypeComboBox.class, m_cmbNoteTypeTemp);
		super.addComboBox(cmbNoteType);
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 104, 32, 368, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbCareContextTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbCareContextTemp);
		cmbCareContextComboBox cmbCareContext = (cmbCareContextComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCareContextComboBox.class, m_cmbCareContextTemp);
		super.addComboBox(cmbCareContext);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 104, 8, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Patient Notes Only", Boolean.TRUE, null}));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 136, 816, 456, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Clinical.contextMenuExtendedClinicalNotes, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 808, 10, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear All", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 768, 10, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblTotal()
	{
		return (Label)super.getControl(3);
	}
	public Button btnPrint()
	{
		return (Button)super.getControl(7);
	}
	public DateTimeControl dtimTo()
	{
		return (DateTimeControl)super.getControl(8);
	}
	public DateTimeControl dtimFrom()
	{
		return (DateTimeControl)super.getControl(9);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(0);
	}
	public cmbDisciplineComboBox cmbDiscipline()
	{
		return (cmbDisciplineComboBox)super.getComboBox(1);
	}
	public cmbNoteTypeComboBox cmbNoteType()
	{
		return (cmbNoteTypeComboBox)super.getComboBox(2);
	}
	public cmbCareContextComboBox cmbCareContext()
	{
		return (cmbCareContextComboBox)super.getComboBox(3);
	}
	public CheckBox chkContextLess()
	{
		return (CheckBox)super.getControl(14);
	}
	public DynamicGrid dyngrdNotes()
	{
		return (DynamicGrid)super.getControl(15);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(16);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(17);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Therapies = new TherapiesForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				ClinicalNoteDrawingDialog = new LocalFormName(102175);
				TherapiesNoteDialog = new LocalFormName(134132);
				ClinicalNoteDrawing = new LocalFormName(102177);
				TherapiesNote = new LocalFormName(134131);
				ExtendedClinicalNotesDialog = new LocalFormName(123195);
				ExtendedCarePlanClinicalNotesDialog = new LocalFormName(123232);
				ExtendedPatientClinicalNotesCarePlansList = new LocalFormName(123233);
			}
			public final FormName ClinicalNoteDrawingDialog;
			public final FormName TherapiesNoteDialog;
			public final FormName ClinicalNoteDrawing;
			public final FormName TherapiesNote;
			public final FormName ExtendedClinicalNotesDialog;
			public final FormName ExtendedCarePlanClinicalNotesDialog;
			public final FormName ExtendedPatientClinicalNotesCarePlansList;
		}
		public final class TherapiesForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private TherapiesForms()
			{
				SOAPNoteDialog = new LocalFormName(112149);
			}
			public final FormName SOAPNoteDialog;
		}

		public ClinicalForms Clinical;
		public TherapiesForms Therapies;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				CareSpell = new ImageHelper(102253, "Images/Core/CareSpell.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image CareSpell;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				ClinicalTeam = new ImageHelper(103150, "Images/Admin/Users-3.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClinicalTeam;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ClinicalNoteVoForContext = new ims.framework.ContextVariable("ClinicalNoteVoForContext", prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier + "");
			cxl_ClinicalContactErr = new ims.framework.ContextVariable("ClinicalContactErr", prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalContactErr_" + componentIdentifier + "");
			cxl_MessageBoxId = new ims.framework.ContextVariable("MessageBoxId", prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__MessageBoxId_" + componentIdentifier + "");
			cxl_contextMenuSelected = new ims.framework.ContextVariable("contextMenuSelected", prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__contextMenuSelected_" + componentIdentifier + "");
		}
		
		public boolean getClinicalNoteVoForContextIsNotNull()
		{
			return !cxl_ClinicalNoteVoForContext.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalNotesVo getClinicalNoteVoForContext()
		{
			return (ims.core.vo.ClinicalNotesVo)cxl_ClinicalNoteVoForContext.getValue(context);
		}
		public void setClinicalNoteVoForContext(ims.core.vo.ClinicalNotesVo value)
		{
			cxl_ClinicalNoteVoForContext.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClinicalNoteVoForContext = null;
		public boolean getClinicalContactErrIsNotNull()
		{
			return !cxl_ClinicalContactErr.getValueIsNull(context);
		}
		public Boolean getClinicalContactErr()
		{
			return (Boolean)cxl_ClinicalContactErr.getValue(context);
		}
		public void setClinicalContactErr(Boolean value)
		{
			cxl_ClinicalContactErr.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClinicalContactErr = null;
		public boolean getMessageBoxIdIsNotNull()
		{
			return !cxl_MessageBoxId.getValueIsNull(context);
		}
		public Integer getMessageBoxId()
		{
			return (Integer)cxl_MessageBoxId.getValue(context);
		}
		public void setMessageBoxId(Integer value)
		{
			cxl_MessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxId = null;
		public boolean getcontextMenuSelectedIsNotNull()
		{
			return !cxl_contextMenuSelected.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.ExtendedPatientClinicalNotes_ContextMenuSelected getcontextMenuSelected()
		{
			return (ims.clinical.vo.enums.ExtendedPatientClinicalNotes_ContextMenuSelected)cxl_contextMenuSelected.getValue(context);
		}
		public void setcontextMenuSelected(ims.clinical.vo.enums.ExtendedPatientClinicalNotes_ContextMenuSelected value)
		{
			cxl_contextMenuSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_contextMenuSelected = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ExtendedClinicalNotes implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
				public static final int CONFIRMED = 3;
				public static final int VALIDATE = 4;
				public static final int CORRECT = 5;
				public static final int VIEW = 6;
				public static final int REVIEW = 7;
				public static final int STATUS_HIST = 8;
			}
			public void disableAllExtendedClinicalNotesMenuItems()
			{
				this.contextMenuExtendedClinicalNotesADDItem.setEnabled(false);
				this.contextMenuExtendedClinicalNotesEDITItem.setEnabled(false);
				this.contextMenuExtendedClinicalNotesCONFIRMEDItem.setEnabled(false);
				this.contextMenuExtendedClinicalNotesVALIDATEItem.setEnabled(false);
				this.contextMenuExtendedClinicalNotesCORRECTItem.setEnabled(false);
				this.contextMenuExtendedClinicalNotesVIEWItem.setEnabled(false);
				this.contextMenuExtendedClinicalNotesREVIEWItem.setEnabled(false);
				this.contextMenuExtendedClinicalNotesSTATUS_HISTItem.setEnabled(false);
			}
			public void hideAllExtendedClinicalNotesMenuItems()
			{
				this.contextMenuExtendedClinicalNotesADDItem.setVisible(false);
				this.contextMenuExtendedClinicalNotesEDITItem.setVisible(false);
				this.contextMenuExtendedClinicalNotesCONFIRMEDItem.setVisible(false);
				this.contextMenuExtendedClinicalNotesVALIDATEItem.setVisible(false);
				this.contextMenuExtendedClinicalNotesCORRECTItem.setVisible(false);
				this.contextMenuExtendedClinicalNotesVIEWItem.setVisible(false);
				this.contextMenuExtendedClinicalNotesREVIEWItem.setVisible(false);
				this.contextMenuExtendedClinicalNotesSTATUS_HISTItem.setVisible(false);
			}
			private Menu contextMenuExtendedClinicalNotes;
			public ReadOnlyMenuItem getExtendedClinicalNotesADDItem()
			{
				return this.contextMenuExtendedClinicalNotesADDItem;
			}
			private MenuItem contextMenuExtendedClinicalNotesADDItem;
			public ReadOnlyMenuItem getExtendedClinicalNotesEDITItem()
			{
				return this.contextMenuExtendedClinicalNotesEDITItem;
			}
			private MenuItem contextMenuExtendedClinicalNotesEDITItem;
			public ReadOnlyMenuItem getExtendedClinicalNotesCONFIRMEDItem()
			{
				return this.contextMenuExtendedClinicalNotesCONFIRMEDItem;
			}
			private MenuItem contextMenuExtendedClinicalNotesCONFIRMEDItem;
			public ReadOnlyMenuItem getExtendedClinicalNotesVALIDATEItem()
			{
				return this.contextMenuExtendedClinicalNotesVALIDATEItem;
			}
			private MenuItem contextMenuExtendedClinicalNotesVALIDATEItem;
			public ReadOnlyMenuItem getExtendedClinicalNotesCORRECTItem()
			{
				return this.contextMenuExtendedClinicalNotesCORRECTItem;
			}
			private MenuItem contextMenuExtendedClinicalNotesCORRECTItem;
			public ReadOnlyMenuItem getExtendedClinicalNotesVIEWItem()
			{
				return this.contextMenuExtendedClinicalNotesVIEWItem;
			}
			private MenuItem contextMenuExtendedClinicalNotesVIEWItem;
			public ReadOnlyMenuItem getExtendedClinicalNotesREVIEWItem()
			{
				return this.contextMenuExtendedClinicalNotesREVIEWItem;
			}
			private MenuItem contextMenuExtendedClinicalNotesREVIEWItem;
			public ReadOnlyMenuItem getExtendedClinicalNotesSTATUS_HISTItem()
			{
				return this.contextMenuExtendedClinicalNotesSTATUS_HISTItem;
			}
			private MenuItem contextMenuExtendedClinicalNotesSTATUS_HISTItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[101];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTETYPE", "NoteType");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEW", "ForReview");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-NOTETYPE", "NoteType");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-DISCIPLINE", "Discipline");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-CARECONTEXT", "CareContext");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ExtendedPatientClinicalNotes.__internal_x_context__ClinicalNoteVoForContext_" + componentIdentifier, "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
