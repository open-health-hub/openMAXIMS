//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.dischargeinpatient;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class layerControl1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tab1Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class comDestComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.coe.vo.lookups.DischargeDestination value)
				{
					return super.control.removeRow(value);
				}
				public ims.coe.vo.lookups.DischargeDestination getValue()
				{
					return (ims.coe.vo.lookups.DischargeDestination)super.control.getValue();
				}
				public void setValue(ims.coe.vo.lookups.DischargeDestination value)
				{
					super.control.setValue(value);
				}
			}
			public static class gridActionsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected gridActionsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColActionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColActionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColActionOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColAction(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.coe.vo.lookups.DischargeActions getColAction()
				{
					return (ims.coe.vo.lookups.DischargeActions)super.row.get(0);
				}
				public void setColAction(ims.coe.vo.lookups.DischargeActions value)
				{
					super.row.set(0, value);
				}
				public void setCellColActionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColStatus(String value)
				{
					super.row.setTooltip(1, value);
				}
				public boolean getColStatus()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColStatus(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColActionDateReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColActionDateReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColActionDateOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColActionDate(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColActionDate()
				{
					return (String)super.row.get(2);
				}
				public void setColActionDate(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColActionDateTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColByReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColByReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColByOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColBy(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColBy()
				{
					return (String)super.row.get(3);
				}
				public void setColBy(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColByTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColByValueReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColByValueReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColByValueOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColByValue(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.core.vo.HcpLiteVo getColByValue()
				{
					return (ims.core.vo.HcpLiteVo)super.row.get(4);
				}
				public void setColByValue(ims.core.vo.HcpLiteVo value)
				{
					super.row.set(4, value);
				}
				public void setCellColByValueTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDetailsReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDetailsReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDetailsOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColDetails(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColDetails()
				{
					return (String)super.row.get(5);
				}
				public void setColDetails(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDetailsTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.coe.vo.DischargeActions getValue()
				{
					return (ims.coe.vo.DischargeActions)super.row.getValue();
				}
				public void setValue(ims.coe.vo.DischargeActions value)
				{
					super.row.setValue(value);
				}
			}
			public static class gridActionsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private gridActionsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public gridActionsRow get(int index)
				{
					return new gridActionsRow(super.collection.get(index));
				}
				public gridActionsRow newRow()
				{
					return new gridActionsRow(super.collection.newRow());
				}
				public gridActionsRow newRow(boolean autoSelect)
				{
					return new gridActionsRow(super.collection.newRow(autoSelect));
				}
				public gridActionsRow newRowAt(int index)
				{
					return new gridActionsRow(super.collection.newRowAt(index));
				}
				public gridActionsRow newRowAt(int index, boolean autoSelect)
				{
					return new gridActionsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class gridActionsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
				{
					super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
				}
				public ims.coe.vo.DischargeActions[] getValues()
				{
					ims.coe.vo.DischargeActions[] listOfValues = new ims.coe.vo.DischargeActions[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.coe.vo.DischargeActions getValue()
				{
					return (ims.coe.vo.DischargeActions)super.grid.getValue();
				}
				public void setValue(ims.coe.vo.DischargeActions value)
				{
					super.grid.setValue(value);
				}
				public gridActionsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new gridActionsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public gridActionsRowCollection getRows()
				{
					return new gridActionsRowCollection(super.grid.getRows());
				}
				public gridActionsRow getRowByValue(ims.coe.vo.DischargeActions value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new gridActionsRow(row);
				}
				public void setColActionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColActionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColActionDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColActionDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColByHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColByHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColByValueHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColByValueHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDetailsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDetailsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 384, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Planned Discharge", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 416, 16, 408, 56, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Discharge", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 168, 40, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Destination:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 19, 40, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 432, 40, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date / Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 638, 40, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "HCP:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 392, 559, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Discharge", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 559, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 559, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 656, 559, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 741, 559, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 671, 38, 145, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 584, 38, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 512, 38, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 56, 38, 100, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 240, 38, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_comDestTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_comDestTemp);
				comDestComboBox comDest = (comDestComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(comDestComboBox.class, m_comDestTemp);
				super.addComboBox(comDest);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 808, 456, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_gridActionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_gridActionsTemp);
				gridActionsGrid gridActions = (gridActionsGrid)GridFlyweightFactory.getInstance().createGridBridge(gridActionsGrid.class, m_gridActionsTemp);
				gridActions.addStringColumn("Action List", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				gridActions.addBoolColumn("Complete", 1, 1, 65, false, true, 0, true);
				gridActions.addStringColumn("Date", 0, 0, 65, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				gridActions.addStringColumn("By", 0, 0, 95, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				gridActions.addStringColumn("Column Header", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				gridActions.addWrapTextColumn("Details", 0, 0, -1, false, false, 0, true);
				super.addGrid(gridActions);
			}

			public Button btnDischarge()
			{
				return (Button)super.getControl(6);
			}
			public Button btnNewAction()
			{
				return (Button)super.getControl(7);
			}
			public Button btnUpdateAction()
			{
				return (Button)super.getControl(8);
			}
			public Button btnSaveActions()
			{
				return (Button)super.getControl(9);
			}
			public Button btnCancelActions()
			{
				return (Button)super.getControl(10);
			}
			public TextBox textBoxBy()
			{
				return (TextBox)super.getControl(11);
			}
			public TextBox textBoxTime()
			{
				return (TextBox)super.getControl(12);
			}
			public TextBox textBoxDate()
			{
				return (TextBox)super.getControl(13);
			}
			public DateControl dateCommenced()
			{
				return (DateControl)super.getControl(14);
			}
			public comDestComboBox comDest()
			{
				return (comDestComboBox)super.getComboBox(0);
			}
			public gridActionsGrid gridActions()
			{
				return (gridActionsGrid)super.getGrid(0);
			}
		}
		public static class tab2Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class gridFunctionalRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected gridFunctionalRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setIsParentRow(boolean value)
				{
					super.setIsParentRow(value);
				}
				public boolean isParentRow()
				{
					return super.isParentRow();
				}
				public void setExpanded(boolean value)
				{
					super.setExpanded(value);
				}
				public boolean isExpanded()
				{
					return super.isExpanded();
				}
				public void setColFunctionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColFunctionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColFunctionOpened()
				{
					super.row.showOpened(0);
				}
				public ims.coe.vo.lookups.DischargeFunctional getColFunction()
				{
					return (ims.coe.vo.lookups.DischargeFunctional)super.row.get(0);
				}
				public void setColFunction(ims.coe.vo.lookups.DischargeFunctional value)
				{
					super.row.set(0, value);
				}
				public void setCellColFunctionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(1);
				}
				public ims.core.vo.lookups.YesNoUnknown getColStatus()
				{
					return (ims.core.vo.lookups.YesNoUnknown)super.row.get(1);
				}
				public void setColStatus(ims.core.vo.lookups.YesNoUnknown value)
				{
					super.row.set(1, value, true);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDetailsReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDetailsReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDetailsOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDetails()
				{
					return (String)super.row.get(2);
				}
				public void setColDetails(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDetailsTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.coe.vo.DischargeFunctional getValue()
				{
					return (ims.coe.vo.DischargeFunctional)super.row.getValue();
				}
				public void setValue(ims.coe.vo.DischargeFunctional value)
				{
					super.row.setValue(value);
				}
				public gridFunctionalRow getParentRow()
				{
					return super.row.getParent() == null ? null : new gridFunctionalRow(super.row.getParent());
				}
				public gridFunctionalRowCollection getRows()
				{
					if(this.collection == null)
						this.collection = new gridFunctionalRowCollection(super.row.getRows());
					return this.collection;
				}
				private gridFunctionalRowCollection collection;
			}
			public static class gridFunctionalRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private gridFunctionalRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public gridFunctionalRow get(int index)
				{
					return new gridFunctionalRow(super.collection.get(index));
				}
				public gridFunctionalRow newRow()
				{
					return new gridFunctionalRow(super.collection.newRow());
				}
				public gridFunctionalRow newRow(boolean autoSelect)
				{
					return new gridFunctionalRow(super.collection.newRow(autoSelect));
				}
				public gridFunctionalRow newRowAt(int index)
				{
					return new gridFunctionalRow(super.collection.newRowAt(index));
				}
				public gridFunctionalRow newRowAt(int index, boolean autoSelect)
				{
					return new gridFunctionalRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class gridFunctionalGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public GenForm.layerControl1Layer.tab2Container.gridFunctionalRow[] getAllRows()
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.layerControl1Layer.tab2Container.gridFunctionalRow row = getRows().get(x);
						rows.add(row);
						GenForm.layerControl1Layer.tab2Container.gridFunctionalRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.layerControl1Layer.tab2Container.gridFunctionalRow[] result = new GenForm.layerControl1Layer.tab2Container.gridFunctionalRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.layerControl1Layer.tab2Container.gridFunctionalRow)rows.get(x);
					}
					return result;
				}
				public GenForm.layerControl1Layer.tab2Container.gridFunctionalRow[] getAllRows(GenForm.layerControl1Layer.tab2Container.gridFunctionalRow parentRow)
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.layerControl1Layer.tab2Container.gridFunctionalRow row = parentRow.getRows().get(x);
						rows.add(row);
						GenForm.layerControl1Layer.tab2Container.gridFunctionalRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.layerControl1Layer.tab2Container.gridFunctionalRow[] result = new GenForm.layerControl1Layer.tab2Container.gridFunctionalRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.layerControl1Layer.tab2Container.gridFunctionalRow)rows.get(x);
					}
					return result;
				}
				public void expandAll()
				{
					expandCollapseAll(true);
				}
				public void collapseAll()
				{
					expandCollapseAll(false);
				}
				private void expandCollapseAll(boolean expand)
				{
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.layerControl1Layer.tab2Container.gridFunctionalRow row = getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void expandCollapseRow(GenForm.layerControl1Layer.tab2Container.gridFunctionalRow parentRow, boolean expand)
				{
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.layerControl1Layer.tab2Container.gridFunctionalRow row = parentRow.getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				public void populateTree(ims.framework.cn.data.TreeModel value)
				{
					populateTree(value, false);
				}
				public void populateTree(ims.framework.cn.data.TreeModel value, boolean displayImages)
				{
					getRows().clear();
					ims.framework.cn.data.TreeNode[] nodes = value.getRootNodes();
					for(int x = 0; x < nodes.length; x++)
					{
						populateTreeNode(null, nodes[x], displayImages);
					}
				}
				private void populateTreeNode(GenForm.layerControl1Layer.tab2Container.gridFunctionalRow parentRow, ims.framework.cn.data.TreeNode value, boolean displayImages)
				{
					if(ims.coe.vo.lookups.DischargeFunctional.class.isAssignableFrom(value.getClass()))
					{
						GenForm.layerControl1Layer.tab2Container.gridFunctionalRow row = null;
						if(parentRow == null)
							row = getRows().newRow();
						else
							row = parentRow.getRows().newRow();
						row.setColFunction((ims.coe.vo.lookups.DischargeFunctional)value);
						if(displayImages)
						{
							if(value.getExpandedImage() != null)
								row.setExpandedImage(value.getExpandedImage());
							if(value.getCollapsedImage() != null)
								row.setCollapsedImage(value.getCollapsedImage());
						}
						ims.framework.cn.data.TreeNode[] nodes = value.getChildren();
						for(int x = 0; x < nodes.length; x++)
						{
							populateTreeNode(row, nodes[x], displayImages);
						}
					}
				}
				private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
				}
				private void addAnswerBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int imageHeight, boolean canBeEmpty, boolean canGrow)
				{
					super.grid.addAnswerBoxColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, imageHeight, canBeEmpty, canGrow);
				}
				public void answerBoxColumnClear(int column)
				{
					super.grid.answerBoxColumnClear(column);
				}
				public void answerBoxColumnNewOption(int column, AnswerBoxOption option)
				{
					super.grid.answerBoxColumnNewOption(column, option);
				}
				private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
				{
					super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
				}
				public ims.coe.vo.DischargeFunctional[] getValues()
				{
					ims.coe.vo.DischargeFunctional[] listOfValues = new ims.coe.vo.DischargeFunctional[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.coe.vo.DischargeFunctional getValue()
				{
					return (ims.coe.vo.DischargeFunctional)super.grid.getValue();
				}
				public void setValue(ims.coe.vo.DischargeFunctional value)
				{
					super.grid.setValue(value);
				}
				public gridFunctionalRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new gridFunctionalRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public gridFunctionalRowCollection getRows()
				{
					return new gridFunctionalRowCollection(super.grid.getRows());
				}
				public gridFunctionalRow getRowByValue(ims.coe.vo.DischargeFunctional value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new gridFunctionalRow(row);
				}
				public void setColFunctionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColFunctionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public GridMutableAnswerBox ColStatusAnswerBox()
				{
					return null;//return new GridMutableAnswerBox(super.grid, 1);
				}
				public void setColDetailsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDetailsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 368, 16, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Authoring HCP :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 136, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring Date / Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 504, 37, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Notes", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 559, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 741, 559, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 656, 559, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 559, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 760, 16, 56, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Print", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 472, 16, 137, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 520, 808, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 144, 16, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 808, 448, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_gridFunctionalTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_gridFunctionalTemp);
				gridFunctionalGrid gridFunctional = (gridFunctionalGrid)GridFlyweightFactory.getInstance().createGridBridge(gridFunctionalGrid.class, m_gridFunctionalTemp);
				gridFunctional.addTreeColumn("Funtional Assessment and Supports", 0, 250, false, true);
				gridFunctional.addAnswerBoxColumn("Status", 1, 1, 65, false, false, 10, true, true);
				gridFunctional.addWrapTextColumn("Details", 0, 0, -1, false, false, 0, true);
				super.addGrid(gridFunctional);
		
				// Time Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 272, 16, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
			}

			public Button btnNewFuncAss()
			{
				return (Button)super.getControl(3);
			}
			public Button btnCancelFuncAss()
			{
				return (Button)super.getControl(4);
			}
			public Button btnSaveFuncAss()
			{
				return (Button)super.getControl(5);
			}
			public Button btnUpdateFuncAss()
			{
				return (Button)super.getControl(6);
			}
			public Button bPrint()
			{
				return (Button)super.getControl(7);
			}
			public TextBox txtHCP()
			{
				return (TextBox)super.getControl(8);
			}
			public TextBox textBoxNotes()
			{
				return (TextBox)super.getControl(9);
			}
			public DateControl dteFuncAssess()
			{
				return (DateControl)super.getControl(10);
			}
			public gridFunctionalGrid gridFunctional()
			{
				return (gridFunctionalGrid)super.getGrid(0);
			}
			public TimeControl timFuncAssess()
			{
				return (TimeControl)super.getControl(12);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Discharge and Actions", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab1Container m_tab1Container = (tab1Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab1Container.class, m_tab1, factory);
			super.addContainer(m_tab1, m_tab1Container);
			ims.framework.utils.SizeInfo m_tab1DesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tab1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper31.getWidth(), anchoringHelper31.getHeight());
			m_tab1Container.setContext(form, appForm, m_tab1, loader, form_images_local, startControlID, m_tab1DesignSize, m_tab1RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab2 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Discharge Functional Assessment and Support", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab2Container m_tab2Container = (tab2Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab2Container.class, m_tab2, factory);
			super.addContainer(m_tab2, m_tab2Container);
			ims.framework.utils.SizeInfo m_tab2DesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tab2RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper32.getWidth(), anchoringHelper32.getHeight());
			m_tab2Container.setContext(form, appForm, m_tab2, loader, form_images_local, startControlID, m_tab2DesignSize, m_tab2RuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
		}
		public void settab1Enabled(boolean value)
		{
			tab1().setEnabled(value);
		}
		public void settab2Enabled(boolean value)
		{
			tab2().setEnabled(value);
		}
		public void showtab1()
		{
			tab2().setVisible(false);
			tab1().setVisible(true);
		}
		public void showtab2()
		{
			tab1().setVisible(false);
			tab2().setVisible(true);
		}

		public tab1Container tab1()
		{
			return (tab1Container)super.layers.get(0);
		}
		public tab2Container tab2()
		{
			return (tab2Container)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		layerControl1Layer m_layerControl1Layer = (layerControl1Layer)LayerFlyweightFactory.getInstance().createLayer(layerControl1Layer.class, this, factory);
		super.addLayer(m_layerControl1Layer);
		m_layerControl1Layer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public layerControl1Layer layerControl1()
	{
		return (layerControl1Layer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			COE = new COEForms();
			Core = new CoreForms();
		}
		public final class COEForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private COEForms()
			{
				DischargeDialog = new LocalFormName(101151);
				RptDischarge = new LocalFormName(101179);
			}
			public final FormName DischargeDialog;
			public final FormName RptDischarge;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				Reports = new LocalFormName(102156);
			}
			public final FormName Reports;
		}

		public COEForms COE;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_Clear = new ImageHelper(102104, "Images/Core/AnswerBox_Clear.jpg", new Integer(10), new Integer(10));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(10), new Integer(10));
				AnswerBox_Unknown = new ImageHelper(102102, "Images/Core/AnswerBox_Unknown.gif", new Integer(10), new Integer(10));
			}
			public final ims.framework.utils.Image AnswerBox_Clear;
			public final ims.framework.utils.Image AnswerBox_Yes;
			public final ims.framework.utils.Image AnswerBox_No;
			public final ims.framework.utils.Image AnswerBox_Unknown;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_DischargeToUpdate = new ims.framework.ContextVariable("DischargeToUpdate", prefix + "_lv_Clinical.DischargeInpatient.__internal_x_context__DischargeToUpdate_" + componentIdentifier + "");
		}
		
		public boolean getDischargeToUpdateIsNotNull()
		{
			return !cxl_DischargeToUpdate.getValueIsNull(context);
		}
		public ims.coe.vo.Discharge getDischargeToUpdate()
		{
			return (ims.coe.vo.Discharge)cxl_DischargeToUpdate.getValue(context);
		}
		public void setDischargeToUpdate(ims.coe.vo.Discharge value)
		{
			cxl_DischargeToUpdate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DischargeToUpdate = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[76];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_COE.DischargeInpatient", "BO-1017100000-ID", "ID_Discharge");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_COE.DischargeInpatient", "BO-1017100000-DATECOMMENCED", "DateCommenced");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_COE.DischargeInpatient", "BO-1017100000-DESTINATION", "Destination");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_COE.DischargeInpatient", "BO-1017100000-DATETIMEDISCHARGED", "DateTimeDischarged");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_COE.DischargeInpatient", "BO-1017100000-NOTES", "Notes");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
