//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.patientproblems;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbSourceComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.SourceofInformation value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.SourceofInformation value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.SourceofInformation getValue()
			{
				return (ims.core.vo.lookups.SourceofInformation)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.SourceofInformation value)
			{
				super.control.setValue(value);
			}
		}
		public static class qmbResolvedByComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.Hcp value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.Hcp value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.Hcp getValue()
			{
				return (ims.core.vo.Hcp)super.control.getValue();
			}
			public void setValue(ims.core.vo.Hcp value)
			{
				super.control.setValue(value);
			}
			public void setEditedText(String text)
			{
				super.control.setEditedText(text);
			}
			public String getEditedText()
			{
				return super.control.getEditedText();
			}
		}
	
		public static class Group1RadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 232, 12, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "All Problems", startTabIndex.intValue() + 5);
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 118, 12, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 4);
			}
			public void setText(Group1Enumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public Group1Enumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return Group1Enumeration.None;
					case 0: return Group1Enumeration.rdoAll;
					case 1: return Group1Enumeration.rdoSpecialtyHotlist;
				}
				return null;
			}
			public void setValue(Group1Enumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(Group1Enumeration.None.id);
			}
			public boolean isEnabled(Group1Enumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(Group1Enumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(Group1Enumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(Group1Enumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class Group1Enumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static Group1Enumeration None = new Group1Enumeration(-1);
			public static Group1Enumeration rdoAll = new Group1Enumeration(0);
			public static Group1Enumeration rdoSpecialtyHotlist = new Group1Enumeration(1);
			private Group1Enumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((Group1Enumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 456, 184, 351, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			ims.framework.FormUiLogic m_customControlAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 1014, skipContextValidation);
			//ims.framework.Control m_customControlAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(456), new Integer(184), new Integer(351), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 1014), m_customControlAuthoringForm, instance1 } );
			ims.framework.Control m_customControlAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 1014), m_customControlAuthoringForm, instance1, Boolean.FALSE } );
			super.addControl(m_customControlAuthoringControl);
			Menu[] menus1 = m_customControlAuthoringForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
			ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 25, 800, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_customControlCodingItemForm = loader.loadComponent(123133, appForm, startControlID * 10 + 2000, anchoringHelper4.getSize(), instance2, startTabIndex.intValue() + 6, skipContextValidation);
			//ims.framework.Control m_customControlCodingItemControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(8), new Integer(25), new Integer(800), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 6), m_customControlCodingItemForm, instance2 } );
			ims.framework.Control m_customControlCodingItemControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 6), m_customControlCodingItemForm, instance2, Boolean.FALSE } );
			super.addControl(m_customControlCodingItemControl);
			Menu[] menus2 = m_customControlCodingItemForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus2.length; x++)
			{
				form.registerMenu(menus2[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 464, 152, 131, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Recording Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 464, 128, 95, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Recording User:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 120, 232, 224, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "                                                  ", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 232, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 200, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Resolved Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 144, 176, 23, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "By:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 176, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Resolved:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 152, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Problem:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 120, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Onset Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 96, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source:", new Integer(1), null, new Integer(0)}));
	
			// Button Controls
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 464, 96, 108, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Associations", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 600, 128, 192, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 120, 200, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
	
			// Date Time Controls
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 600, 152, 192, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
	
			// PartialDateBox Controls
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 120, 120, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 120, 95, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ComboBox m_cmbSourceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSourceTemp);
			cmbSourceComboBox cmbSource = (cmbSourceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceComboBox.class, m_cmbSourceTemp);
			super.addComboBox(cmbSource);
	
			// Query ComboBox Controls
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 168, 176, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ComboBox m_qmbResolvedByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
			addControl(m_qmbResolvedByTemp);
			qmbResolvedByComboBox qmbResolvedBy = (qmbResolvedByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbResolvedByComboBox.class, m_qmbResolvedByTemp);
			super.addComboBox(qmbResolvedBy);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 120, 176, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 120, 152, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
	
			// RadioButton Controls
			RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpGroup1);
			Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
			Group1.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(Group1);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public ims.core.forms.authoringinfo.IComponent customControlAuthoring()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
		}
		public void setcustomControlAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
		}
		public void setcustomControlAuthoringVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setVisible(value);
		}
		public boolean iscustomControlAuthoringVisible()
		{
			return ((ims.framework.Control)super.getControl(0)).isVisible();
		}
		public void setcustomControlAuthoringEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setEnabled(value);
		}
		public boolean iscustomControlAuthoringEnabled()
		{
			return ((ims.framework.Control)super.getControl(0)).isEnabled();
		}
		public ims.clinical.forms.clinicalcoding.IComponent customControlCodingItem()
		{
			return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
		}
		public void setcustomControlCodingItemValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
		}
		public void setcustomControlCodingItemVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setVisible(value);
		}
		public boolean iscustomControlCodingItemVisible()
		{
			return ((ims.framework.Control)super.getControl(1)).isVisible();
		}
		public void setcustomControlCodingItemEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setEnabled(value);
		}
		public boolean iscustomControlCodingItemEnabled()
		{
			return ((ims.framework.Control)super.getControl(1)).isEnabled();
		}
		public Label lblResponsibleHCP()
		{
			return (Label)super.getControl(4);
		}
		public Label lbl13()
		{
			return (Label)super.getControl(8);
		}
		public Button btnAssociations()
		{
			return (Button)super.getControl(12);
		}
		public TextBox txtRecordingUser()
		{
			return (TextBox)super.getControl(13);
		}
		public DateControl dteResolved()
		{
			return (DateControl)super.getControl(14);
		}
		public DateTimeControl dtimRecording()
		{
			return (DateTimeControl)super.getControl(15);
		}
		public PartialDateBox pdtOnset()
		{
			return (PartialDateBox)super.getControl(16);
		}
		public cmbSourceComboBox cmbSource()
		{
			return (cmbSourceComboBox)super.getComboBox(0);
		}
		public qmbResolvedByComboBox qmbResolvedBy()
		{
			return (qmbResolvedByComboBox)super.getComboBox(1);
		}
		public CheckBox chkResolved()
		{
			return (CheckBox)super.getControl(19);
		}
		public CheckBox chkPrimarProblem()
		{
			return (CheckBox)super.getControl(20);
		}
		public Group1RadioButton Group1()
		{
			return (Group1RadioButton)super.getRadioButton(0);
		}
	}
	public static class grdProblemListRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProblemListRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColProblemDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColProblemDescriptionReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColProblemDescriptionOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColProblemDescription(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColProblemDescription()
		{
			return (String)super.row.get(0);
		}
		public void setColProblemDescription(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColProblemDescriptionTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColStatusReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColStatusOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColStatus(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColStatus()
		{
			return (String)super.row.get(1);
		}
		public void setColStatus(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColStatusTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolAuthoringHCPReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolAuthoringHCPReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolAuthoringHCPOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolAuthoringHCP(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolAuthoringHCP()
		{
			return (String)super.row.get(2);
		}
		public void setcolAuthoringHCP(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolAuthoringHCPTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColAuthoringDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColAuthoringDateTimeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColAuthoringDateTimeOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColAuthoringDateTime(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColAuthoringDateTime()
		{
			return (String)super.row.get(3);
		}
		public void setColAuthoringDateTime(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColAuthoringDateTimeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColAssociationsReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColAssociationsReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void setColAssociationsEmpty(boolean value)
		{
			super.row.setIsEmpty(4, value);
		}
		public boolean isColAssociationsEmpty()
		{
			return super.row.isEmpty(4);
		}
		public void showColAssociationsOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColAssociations(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.framework.utils.Image getColAssociations()
		{
			return (ims.framework.utils.Image)super.row.get(4);
		}
		public void setColAssociations(ims.framework.utils.Image value)
		{
			super.row.set(4, value);
		}
		public void setCellColAssociationsTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColPrimaryReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColPrimaryReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColPrimaryOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColPrimary(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.framework.utils.Image getColPrimary()
		{
			return (ims.framework.utils.Image)super.row.get(5);
		}
		public void setColPrimary(ims.framework.utils.Image value)
		{
			super.row.set(5, value);
		}
		public void setCellColPrimaryTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColAuditReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColAuditReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColAuditOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColAudit(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.framework.utils.Image getColAudit()
		{
			return (ims.framework.utils.Image)super.row.get(6);
		}
		public void setColAudit(ims.framework.utils.Image value)
		{
			super.row.set(6, value);
		}
		public void setCellColAuditTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.core.vo.PatientProblemListVo getValue()
		{
			return (ims.core.vo.PatientProblemListVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientProblemListVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProblemListRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProblemListRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProblemListRow get(int index)
		{
			return new grdProblemListRow(super.collection.get(index));
		}
		public grdProblemListRow newRow()
		{
			return new grdProblemListRow(super.collection.newRow());
		}
		public grdProblemListRow newRow(boolean autoSelect)
		{
			return new grdProblemListRow(super.collection.newRow(autoSelect));
		}
		public grdProblemListRow newRowAt(int index)
		{
			return new grdProblemListRow(super.collection.newRowAt(index));
		}
		public grdProblemListRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProblemListRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProblemListGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
		{
			super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.core.vo.PatientProblemListVoCollection getValues()
		{
			ims.core.vo.PatientProblemListVoCollection listOfValues = new ims.core.vo.PatientProblemListVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientProblemListVo getValue()
		{
			return (ims.core.vo.PatientProblemListVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientProblemListVo value)
		{
			super.grid.setValue(value);
		}
		public grdProblemListRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProblemListRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProblemListRowCollection getRows()
		{
			return new grdProblemListRowCollection(super.grid.getRows());
		}
		public grdProblemListRow getRowByValue(ims.core.vo.PatientProblemListVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProblemListRow(row);
		}
		public void setColProblemDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColProblemDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolAuthoringHCPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolAuthoringHCPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColAuthoringDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColAuthoringDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColAssociationsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColAssociationsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColPrimaryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColPrimaryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColAuditHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColAuditHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedInstance();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuPatientProblem = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuPatientProblemNewItem = factory.createMenuItem(startControlID.intValue() + 1, "New Patient Problem", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuPatientProblem.add(contextMenus.contextMenuPatientProblemNewItem);
		contextMenus.contextMenuPatientProblemUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Patient Problem", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuPatientProblem.add(contextMenus.contextMenuPatientProblemUpdateItem);
		contextMenus.contextMenuPatientProblemMarkAsPrimaryItem = factory.createMenuItem(startControlID.intValue() + 3, "Mark Patient Problem as Primary", true, false, new Integer(102212), true, true);
		contextMenus.contextMenuPatientProblem.add(contextMenus.contextMenuPatientProblemMarkAsPrimaryItem);
		contextMenus.contextMenuPatientProblemViewAssociationsItem = factory.createMenuItem(startControlID.intValue() + 4, "View Associations", true, false, new Integer(102266), false, false);
		contextMenus.contextMenuPatientProblem.add(contextMenus.contextMenuPatientProblemViewAssociationsItem);
		form.registerMenu(contextMenus.contextMenuPatientProblem);


		// Container Clasess
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 312, 816, 272, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 272);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper24.getWidth(), anchoringHelper24.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 387, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 2017), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 2015), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 757, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 2020), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Exclude Resolved", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 272, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdProblemListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuPatientProblem, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdProblemListTemp);
		grdProblemListGrid grdProblemList = (grdProblemListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProblemListGrid.class, m_grdProblemListTemp);
		grdProblemList.addWrapTextColumn("Problem Description", 0, 0, 290, true, false, 0, true);
		grdProblemList.addStringColumn("Status", 0, 0, 0, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProblemList.addStringColumn("Authoring HCP", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProblemList.addStringColumn("Authoring Date/Time", 0, 0, 140, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProblemList.addImageColumn(" ", 1, 1, 65, true, 0);
		grdProblemList.addImageColumn(" ", 1, 1, 65, false, 0);
		grdProblemList.addImageColumn(" ", 1, 1, -1, true, 0);
		super.addGrid(grdProblemList);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(1);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(2);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(3);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(4);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public CheckBox chkRemoveResolved()
	{
		return (CheckBox)super.getControl(6);
	}
	public grdProblemListGrid grdProblemList()
	{
		return (grdProblemListGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Clinical = new ClinicalForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				TaxonomySearch = new LocalFormName(104102);
			}
			public final FormName TaxonomySearch;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				ClinicalDiAssociations = new LocalFormName(123121);
				PatientSummary = new LocalFormName(123118);
				PatientProblems = new LocalFormName(123120);
			}
			public final FormName ClinicalDiAssociations;
			public final FormName PatientSummary;
			public final FormName PatientProblems;
		}

		public CoreForms Core;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Search = new ImageHelper(102120, "Images/Core/bin.gif", new Integer(15), new Integer(15));
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				Pin = new ImageHelper(102212, "Images/Core/Push Pin.gif", new Integer(16), new Integer(16));
				AssociationsBtn = new ImageHelper(102265, "Images/Core/Associations.bmp", new Integer(19), new Integer(19));
				AssociationsLHS = new ImageHelper(102266, "Images/Core/AssociationsLHS.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Search;
			public final ims.framework.utils.Image EditDisabled;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image Pin;
			public final ims.framework.utils.Image AssociationsBtn;
			public final ims.framework.utils.Image AssociationsLHS;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Setting = new ims.framework.ContextVariable("Setting", prefix + "_lv_Clinical.PatientProblems.__internal_x_context__Setting_" + componentIdentifier + "");
			cxl_CodingItemTextSubmitted = new ims.framework.ContextVariable("CodingItemTextSubmitted", prefix + "_lv_Clinical.PatientProblems.__internal_x_context__CodingItemTextSubmitted_" + componentIdentifier + "");
			cxl_SelectedInstance = new ims.framework.ContextVariable("SelectedInstance", prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier + "");
		}
		
		public boolean getSettingIsNotNull()
		{
			return !cxl_Setting.getValueIsNull(context);
		}
		public Boolean getSetting()
		{
			return (Boolean)cxl_Setting.getValue(context);
		}
		public void setSetting(Boolean value)
		{
			cxl_Setting.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Setting = null;
		public boolean getCodingItemTextSubmittedIsNotNull()
		{
			return !cxl_CodingItemTextSubmitted.getValueIsNull(context);
		}
		public String getCodingItemTextSubmitted()
		{
			return (String)cxl_CodingItemTextSubmitted.getValue(context);
		}
		public void setCodingItemTextSubmitted(String value)
		{
			cxl_CodingItemTextSubmitted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CodingItemTextSubmitted = null;
		public boolean getSelectedInstanceIsNotNull()
		{
			return !cxl_SelectedInstance.getValueIsNull(context);
		}
		public ims.core.vo.PatientProblemVo getSelectedInstance()
		{
			return (ims.core.vo.PatientProblemVo)cxl_SelectedInstance.getValue(context);
		}
		public void setSelectedInstance(ims.core.vo.PatientProblemVo value)
		{
			cxl_SelectedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInstance = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class PatientProblem implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int New = 1;
			public static final int Update = 2;
			public static final int MarkAsPrimary = 3;
			public static final int ViewAssociations = 4;
		}
		public void disableAllPatientProblemMenuItems()
		{
			this.contextMenuPatientProblemNewItem.setEnabled(false);
			this.contextMenuPatientProblemUpdateItem.setEnabled(false);
			this.contextMenuPatientProblemMarkAsPrimaryItem.setEnabled(false);
			this.contextMenuPatientProblemViewAssociationsItem.setEnabled(false);
		}
		public void hideAllPatientProblemMenuItems()
		{
			this.contextMenuPatientProblemNewItem.setVisible(false);
			this.contextMenuPatientProblemUpdateItem.setVisible(false);
			this.contextMenuPatientProblemMarkAsPrimaryItem.setVisible(false);
			this.contextMenuPatientProblemViewAssociationsItem.setVisible(false);
		}
		private Menu contextMenuPatientProblem;
		public MenuItem getPatientProblemNewItem()
		{
			return this.contextMenuPatientProblemNewItem;
		}
		private MenuItem contextMenuPatientProblemNewItem;
		public MenuItem getPatientProblemUpdateItem()
		{
			return this.contextMenuPatientProblemUpdateItem;
		}
		private MenuItem contextMenuPatientProblemUpdateItem;
		public MenuItem getPatientProblemMarkAsPrimaryItem()
		{
			return this.contextMenuPatientProblemMarkAsPrimaryItem;
		}
		private MenuItem contextMenuPatientProblemMarkAsPrimaryItem;
		public MenuItem getPatientProblemViewAssociationsItem()
		{
			return this.contextMenuPatientProblemViewAssociationsItem;
		}
		private MenuItem contextMenuPatientProblemViewAssociationsItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[109];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-ID", "ID_SoapNote");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-SUBJECTIVENOTE", "SubjectiveNote");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-OBJECTIVENOTE", "ObjectiveNote");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-ANALYSISNOTE", "AnalysisNote");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-PLANNOTE", "PlanNote");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-CLINICALNOTE", "ClinicalNote");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-CARECONTEXT", "CareContext");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTETYPE", "NoteType");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEW", "ForReview");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProblemFromPatientSummary", "BO-1023100001-ID", "ID_PatientProblem");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-ID", "ID_PatientProblem");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-PATIENTPROBLEM", "PatientProblem");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-STATUS", "Status");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-ISPRESENTINGPROBLEM", "IsPresentingProblem");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-CLINICALCONTACT", "ClinicalContact");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-PROBLEMCONTEXT", "ProblemContext");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-ISACTIVE", "IsActive");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-ISRESOLVED", "IsResolved");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-DATERESOLVED", "DateResolved");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-ONSET", "Onset");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-SOURCE", "Source");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-PROBLEMNOTE", "ProblemNote");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientProblems.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1023100001-SPECIALTY", "Specialty");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
