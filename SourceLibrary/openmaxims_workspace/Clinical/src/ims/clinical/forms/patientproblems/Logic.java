//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.44 build 2245.22719)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.patientproblems;

import java.util.ArrayList;

import ims.core.clinical.vo.PatientProblemRefVo;
import ims.core.vo.PatientProblemVo;
import ims.clinical.forms.patientproblems.GenForm.ctnDetailsContainer.Group1Enumeration;
import ims.clinical.forms.patientproblems.GenForm.grdProblemListRow;
import ims.clinical.vo.ClinicalDIAssociationVoCollection;
import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CSPrimaryProblemVo;
import ims.core.vo.CSPrimaryProblemVoCollection;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientProblemListVo;
import ims.core.vo.PatientProblemListVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IClinicalCodingValue;
public class Logic extends BaseLogic
{
	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		initializeCustomControl();
		open();
		postInitialize();
		updateControlsState();
	}
	
	protected void onFormModeChanged()
	{
		updateControlsState();
		enableLinkControl();
		enableChkResolved();
	}

	private void enableLinkControl()
	{
		boolean visible = form.getMode().equals(FormMode.VIEW) && form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull();
		setBtnCloseVisible(visible && isDialog());		
	}
	
	
	private Specialty getSpecialty() 
	{
		if ( (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() )
			&& (form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialtyIsNotNull()) )
		{
			return form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty();
		}
		else if ( (form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull() )
					&& (form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull()) )
		{
			return form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty();
		}
		return null;
	}

	protected void onGrdProblemListSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		selectProblem();
	}
	
	private void selectProblem() 
	{
		clearInstanceControls();
		PatientProblemListVo patientProblem = form.grdProblemList().getValue();
		if(patientProblem != null)
		{
			form.ctnDetails().setCollapsed(false);
			PatientProblemVo voSelectedInstance = domain.get(patientProblem);		
			form.getLocalContext().setSelectedInstance(voSelectedInstance);
			populateInstanceControls(voSelectedInstance);
		}
		updateControlsState();
	}
	private void populateInstanceControls(PatientProblemVo voSelectedInstance) 
	{
		setResponsibleHCP(voSelectedInstance.getCareContext());

		if (voSelectedInstance.getSysInfo() !=null)
		{
			MemberOfStaffShortVo mos = (MemberOfStaffShortVo)domain.getMosUser(voSelectedInstance.getSysInfo().getCreationUser());
            if (mos != null && mos.getNameIsNotNull())
            {
            	form.ctnDetails().txtRecordingUser().setValue(mos.getName().toString());
            }			
            
            form.ctnDetails().dtimRecording().setValue(voSelectedInstance.getSysInfo().getCreationDateTime());
		}
		
		form.ctnDetails().customControlCodingItem().setValue(voSelectedInstance);
				
		form.ctnDetails().cmbSource().setValue(voSelectedInstance.getSource());		
		form.ctnDetails().chkPrimarProblem().setValue(getIsPrimaryProblemActive(voSelectedInstance));
		
		//Resolved
		form.ctnDetails().chkResolved().setValue(voSelectedInstance.getIsResolvedIsNotNull() && voSelectedInstance.getIsResolved().booleanValue());
		form.ctnDetails().dteResolved().setValue(voSelectedInstance.getDateResolved());
		if(voSelectedInstance.getResolvedHCPIsNotNull())
		{
			form.ctnDetails().qmbResolvedBy().newRow(voSelectedInstance.getResolvedHCP(), voSelectedInstance.getResolvedHCP().toString());
			form.ctnDetails().qmbResolvedBy().setValue(voSelectedInstance.getResolvedHCP());
		}
		form.ctnDetails().pdtOnset().setValue(voSelectedInstance.getOnset());
		form.ctnDetails().customControlAuthoring().setValue(getAuthoringInfo(voSelectedInstance));
	}
	
	private boolean getIsPrimaryProblemActive(PatientProblemListVo voPatientProblemList)
	{
		if(voPatientProblemList != null && voPatientProblemList.getPrimaryForCareSpellsIsNotNull())
		{
			for (int i = 0; i < voPatientProblemList.getPrimaryForCareSpells().size(); i++)
			{
				CSPrimaryProblemVo voCsPrimaryProblem = voPatientProblemList.getPrimaryForCareSpells().get(i);
				boolean isActive 	= voCsPrimaryProblem.getIsActiveIsNotNull() && voCsPrimaryProblem.getIsActive().booleanValue();
				boolean sameProblem = voCsPrimaryProblem.getPatientProblemIsNotNull() && voCsPrimaryProblem.getPatientProblem().equals(voPatientProblemList);
				boolean sameCareContext = voCsPrimaryProblem.getCareContextIsNotNull() && voCsPrimaryProblem.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());
				if(isActive && sameProblem && sameCareContext)
					return true;
			}
		}

		return false;
	}

	protected void onLnkReturnClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
			engine.open(form.getGlobalContext().Clinical.getReturnToFormName());
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			ClinicalDIAssociationVoCollection voDIAssociation = form.getGlobalContext().Clinical.getClinicalDIAssociationVoCollection();
			if(voDIAssociation != null && voDIAssociation.size() > 0)
			{
				setPrimaryProblem(voDIAssociation);
				saveDIAssociations(voDIAssociation);
			}
			open();
		}
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.PatientProblem.New:
				newInstance();
			break;
			
			case GenForm.ContextMenus.PatientProblem.Update:
				updateInstance();
			break;
			
			case GenForm.ContextMenus.PatientProblem.MarkAsPrimary:
				markProblemAsPrimary();
			break;
			
			case GenForm.ContextMenus.PatientProblem.ViewAssociations:
				viewAssociations();
			break;
		}
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		clear();
		//populateListControl(domain.listPatientProblemsByEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort()));
		//populateListControl(domain.listPatientProblemsByPatient(form.getGlobalContext().Core.getPatientShort()));
		onChkRemoveResolvedValueChanged();
	
		form.getLocalContext().setSelectedInstance(null);
		
		
		updateControlsState();
		form.ctnDetails().setCollapsed(!(form.grdProblemList().getSelectedRowIndex() >=0));
		clearGlobalContextVariables();
		form.setMode(FormMode.VIEW);
		
		
	}
	
	private void populateListControl(PatientProblemListVoCollection voCollPatientProblems) 
	{
		if (voCollPatientProblems == null)
			return;
		for (int i = 0; i < voCollPatientProblems.size(); i++)
		{
			GenForm.grdProblemListRow listRow = form.grdProblemList().getRows().newRow();
			PatientProblemListVo patientProblemListVo = voCollPatientProblems.get(i);
			setGridRowData(listRow, patientProblemListVo);
		}
	}

	private void setGridRowData(GenForm.grdProblemListRow listRow, PatientProblemListVo patientProblemListVo)
	{
		listRow.setValue(patientProblemListVo);
		listRow.setColStatus(patientProblemListVo.getStatus() != null ? patientProblemListVo.getStatus().toString() : null);
		if (patientProblemListVo.getAuthoringInformationIsNotNull())
		{
			listRow.setColAuthoringDateTime(patientProblemListVo.getAuthoringInformation().getAuthoringDateTime() != null ? patientProblemListVo.getAuthoringInformation().getAuthoringDateTime().toString() : null);
			listRow.setcolAuthoringHCP(patientProblemListVo.getAuthoringInformation().getAuthoringHcp() != null ? patientProblemListVo.getAuthoringInformation().getAuthoringHcp().toString() : null);			
		}
		
		listRow.setColProblemDescription(patientProblemListVo.getPatientProblem() != null ? patientProblemListVo.getPatientProblem() : null);

		//WDEV-1420
		if (domain.checkIfClinicalCDIAssociationsExist(patientProblemListVo) == Boolean.TRUE)
		{
			listRow.setColAssociations(form.getImages().Core.AssociationsLHS);
			listRow.setTooltipForColAssociations("Linking Association Present");
		}
		else
		{			
			listRow.setColAssociationsEmpty(true);
			listRow.setTooltipForColAssociations("");
		}

		//WDEV-1420
		if (getIsPrimaryProblemActive(patientProblemListVo))
		{
			listRow.setColPrimary(form.getImages().Core.Pin);
			listRow.setTooltipForColPrimary("Problem is marked as a Primary Problem");
		}
		else
		{
			listRow.setColPrimary(null);
			listRow.setTooltipForColPrimary("");
		}

		if (patientProblemListVo.getSysInfoIsNotNull() && patientProblemListVo.getSysInfo().getLastupdateUser() != null)
		{
			listRow.setColAudit(form.getImages().Core.EditDisabled);
			listRow.setTooltipForColAudit("Problem has Audit information");//WDEV-1420
		}
		else
			listRow.setTooltipForColAudit("");//WDEV-1420

 	}
	
	public void clearInstanceControls()
	{
		form.ctnDetails().customControlCodingItem().clear();
		form.ctnDetails().cmbSource().setValue(null);
		form.ctnDetails().dtimRecording().setValue(null);
		form.ctnDetails().txtRecordingUser().setValue(null);
		form.ctnDetails().customControlAuthoring().setValue(null);
		form.ctnDetails().lblResponsibleHCP().setValue(null);
		form.ctnDetails().chkPrimarProblem().setValue(false);
		form.ctnDetails().cmbSource().setValue(null);
		form.ctnDetails().chkResolved().setValue(false);
		form.ctnDetails().qmbResolvedBy().setValue(null);
		form.ctnDetails().dteResolved().setValue(null);
		form.ctnDetails().pdtOnset().setValue(null);
	}
	
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		PatientProblemVo voNewInstance = new PatientProblemVo();
		voNewInstance.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voNewInstance.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		form.getLocalContext().setSelectedInstance(voNewInstance);

		clearInstanceControls();
		setDefaultInstanceControls();

		setResponsibleHCP(form.getGlobalContext().Core.getCurrentCareContext());
		form.ctnDetails().setCollapsed(false);
		form.setMode(FormMode.EDIT);
	}
	
	private void setDefaultInstanceControls() 
	{
		//Default the Recording User and Date
		form.ctnDetails().dtimRecording().setValue(new DateTime());
		
		Object hcpLite = domain.getHcpLiteUser(); 
		form.ctnDetails().txtRecordingUser().setValue(hcpLite != null ? 
				(((HcpLiteVo)hcpLite).getName() != null ? ((HcpLiteVo)hcpLite).getName().toString() : null ) : null);
		
		form.ctnDetails().customControlAuthoring().initializeComponent();
	}
	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		PatientProblemVo currentInstance = populateInstanceData();
				
		String[] uiErrors = getUiErrors();
		
		return savePatientProcedure(currentInstance, uiErrors);
	}

	/**
	 * @param currentInstance
	 * @param uiErrors
	 * @return
	 * @throws PresentationLogicException
	 */
	private boolean savePatientProcedure(PatientProblemVo currentInstance, String[] uiErrors) throws PresentationLogicException
	{
		String[] errors = currentInstance.validate(uiErrors);
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedInstance(domain.save(currentInstance));
			if (isDialog())
			{
				form.getGlobalContext().Clinical.setDialogFormName(engine.getFormName());
			}
		} 
		catch (StaleObjectException e) 
		{			
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}		
		
		//Wdev-1326
		setReturnToFormDescription(currentInstance);

		return true;
	}

	private void setReturnToFormDescription(PatientProblemVo currentInstance) 
	{
		if ( (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
				&& (form.getGlobalContext().Clinical.getReturnToFormName().equals(engine.getPreviousNonDialogFormName())) )
		{
			//Set the CDI Description for the return to form link
			String str = form.getGlobalContext().Clinical.getReturnToFormCDIDescriptionIsNotNull() ? form.getGlobalContext().Clinical.getReturnToFormCDIDescription() : "";
			StringBuffer sb = new StringBuffer();
			sb.append(str);
			if  (sb.length() > 0)
				sb.append(", ");
			
			sb.append(currentInstance.getPatientProblem());
			
			form.getGlobalContext().Clinical.setReturnToFormCDIDescription(sb.toString());
			form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		}
	}

	private PatientProblemVo populateInstanceData() 
	{
		PatientProblemVo voSelectedInstance = form.getLocalContext().getSelectedInstance();
		
		if(voSelectedInstance == null)
		{
			voSelectedInstance = new PatientProblemVo();
			voSelectedInstance.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			voSelectedInstance.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voSelectedInstance.setIsActive(Boolean.TRUE);
		}
		
		IClinicalCodingValue result = form.ctnDetails().customControlCodingItem().getValue();
		if (result != null)
		{
			if (result.getIClinicalCodingValue() instanceof ClinicalProblemShortVo)
			{
				voSelectedInstance.setProblem((ClinicalProblemShortVo) result.getIClinicalCodingValue());
				voSelectedInstance.setPatientProblem(result.getIClinicalCodingValueDescription());				
			}
			else
			{
				throw new CodingRuntimeException("ClinicalProblemShortVo expected from component");
			}
		}		
		else //http://jira/browse/WDEV-3518 - If no description is entered set the equivalent field in the vo to null;
		{
			voSelectedInstance.setPatientProblem(null);
		}
		
		if (voSelectedInstance.getProblemIsNotNull())
		{
			// Clear the procedure from the VO
			Integer idProblem = voSelectedInstance.getProblem().getID_ClinicalProblem();
			if (idProblem != null && idProblem.intValue() < 0)
				voSelectedInstance.setProblem(null);
		}
		
		AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
		voAuthoring.setAuthoringHcp(form.ctnDetails().customControlAuthoring().getValue().getAuthoringHcp());
		voAuthoring.setAuthoringDateTime(form.ctnDetails().customControlAuthoring().getValue().getAuthoringDateTime());
		voSelectedInstance.setAuthoringInformation(voAuthoring);
		
		voSelectedInstance.setSource(form.ctnDetails().cmbSource().getValue());
		
		
		if(form.ctnDetails().chkResolved().getValue())
		{
			voSelectedInstance.setDateResolved(form.ctnDetails().dteResolved().getValue());
			voSelectedInstance.setIsResolved(new Boolean(true));
			voSelectedInstance.setResolvedHCP(form.ctnDetails().qmbResolvedBy().getValue());
		}
		else
		{
			voSelectedInstance.setDateResolved(null);
			voSelectedInstance.setIsResolved(new Boolean(false));
			voSelectedInstance.setResolvedHCP(null);
		}
		
		voSelectedInstance.setOnset(form.ctnDetails().pdtOnset().getValue());
		
		//Primary Procedure
		setCsPrimaryProcedure(voSelectedInstance, form.ctnDetails().chkPrimarProblem().getValue());

		return voSelectedInstance;
	}
	
	private void setCsPrimaryProcedure(PatientProblemVo voPatientProblem, boolean isChkPrimaryChecked)
	{
		CSPrimaryProblemVo voCSPrimaryProcedure = getPrimaryProcedureRecord(voPatientProblem);
		//Update only when checked or record existing  
		if(voCSPrimaryProcedure != null || isChkPrimaryChecked)
		{
			if(voCSPrimaryProcedure == null)
			{
				voCSPrimaryProcedure = populatePrimaryProblemDataFromScreen(new CSPrimaryProblemVo(), voPatientProblem, isChkPrimaryChecked);
				if(voPatientProblem.getPrimaryForCareSpells() == null)
					voPatientProblem.setPrimaryForCareSpells(new CSPrimaryProblemVoCollection());
				voPatientProblem.getPrimaryForCareSpells().add(voCSPrimaryProcedure);
			}
			else
			{
				int index = voPatientProblem.getPrimaryForCareSpells().indexOf(voCSPrimaryProcedure);
				if(index >=0)
				{
					voCSPrimaryProcedure = populatePrimaryProblemDataFromScreen(voCSPrimaryProcedure, voPatientProblem, isChkPrimaryChecked);
					voPatientProblem.getPrimaryForCareSpells().set(index, voCSPrimaryProcedure);
				}
			}
		}
	}
	
	private CSPrimaryProblemVo getPrimaryProcedureRecord(PatientProblemVo voPatProcedure)
	{
		if(voPatProcedure == null || voPatProcedure.getPrimaryForCareSpells() == null)
			return null;
		
		CSPrimaryProblemVoCollection voColl = voPatProcedure.getPrimaryForCareSpells();
		for (int i = 0; voColl != null && i <voColl.size(); i++)
		{
			boolean sameProcedure   = voColl.get(i).getPatientProblemIsNotNull() && voColl.get(i).getPatientProblem().equals(voPatProcedure);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());
			
			if(sameProcedure && sameCareContext)
				return voColl.get(i);
		}

		return null;
	}
	
	private CSPrimaryProblemVo populatePrimaryProblemDataFromScreen(CSPrimaryProblemVo coCsPrimaryProblem, PatientProblemRefVo patientDiagnosisRef, boolean isActive)
	{
		if (coCsPrimaryProblem == null)
			coCsPrimaryProblem = new CSPrimaryProblemVo();
		coCsPrimaryProblem.setAuthoringInformation(form.ctnDetails().customControlAuthoring().getValue());
		coCsPrimaryProblem.setPatientProblem(patientDiagnosisRef);
		coCsPrimaryProblem.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		coCsPrimaryProblem.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		coCsPrimaryProblem.setIsActive(new Boolean(isActive));
		return coCsPrimaryProblem;
	}
	
	public void updateControlsState()
	{
		if (!engine.isDialog())
		{
			
			form.btnClose().setEnabled(false);
			form.btnClose().setVisible(false);
		}
		else
		{
			form.btnClose().setEnabled(true);
			form.btnClose().setVisible(true);
		}
			
		boolean bAddnew = form.getMode().equals(FormMode.EDIT) && 
						  form.getLocalContext().getSelectedInstanceIsNotNull() &&
						  form.getLocalContext().getSelectedInstance().getID_PatientProblem() == null;
 
		if ((form.getGlobalContext().Core.getCurrentClinicalContact() == null) && (form.getGlobalContext().Core.getCurrentCareContext() == null))
		{
			form.getContextMenus().hideAllPatientProblemMenuItems();
		}
		else
		{
			boolean viewMode = form.getMode().equals(FormMode.VIEW);
			boolean gridRecordSelected = form.grdProblemList().getSelectedRowIndex() >= 0;
			boolean hasAssociations = form.grdProblemList().getSelectedRow() != null && form.grdProblemList().getSelectedRow().getColAssociations() != null;
			
			form.getContextMenus().getPatientProblemNewItem().setVisible(viewMode);
			form.getContextMenus().getPatientProblemUpdateItem().setVisible(viewMode && gridRecordSelected);
			form.getContextMenus().getPatientProblemMarkAsPrimaryItem().setVisible(viewMode && gridRecordSelected && !getIsPrimaryProblemActive(form.grdProblemList().getValue()));
			form.getContextMenus().getPatientProblemViewAssociationsItem().setVisible(viewMode && hasAssociations);
		}
		
		if (form.getMode().equals(FormMode.EDIT))			
		{
			form.ctnDetails().Group1().setValue(Group1Enumeration.rdoSpecialtyHotlist);
			setInitialCustomControlCodingSettings();
			form.ctnDetails().Group1().setEnabled(bAddnew);
			form.ctnDetails().setcustomControlCodingItemEnabled(true);	
			form.chkRemoveResolved().setEnabled(false);
		}
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(form.grdProblemList().getSelectedRowIndex() >=0);
			form.chkRemoveResolved().setEnabled(true);
		}
		enableHcpAuthoring();		

		form.ctnDetails().customControlCodingItem().setParentEditing(new Boolean(form.getMode().equals(FormMode.EDIT)));
	

	
	
	}
	
	//WDEV-2243
	private void setInitialCustomControlCodingSettings()
	{
		form.ctnDetails().customControlCodingItem().setSearchAllSelected(Boolean.FALSE);
		form.ctnDetails().customControlCodingItem().setHotlist(Boolean.TRUE);
	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}
	
	public void initialize() throws ims.framework.exceptions.FormOpenException	
	{
		if ( (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
		&& (form.getGlobalContext().Clinical.getReturnToFormName().equals(engine.getPreviousNonDialogFormName())) )
			setBtnCloseVisible(isDialog());
		else
		{
			setBtnCloseVisible(false);
			form.getGlobalContext().Clinical.setReturnToFormName(null);
		}

		clearGlobalContextVariables();
		form.ctnDetails().customControlAuthoring().setHcpType(HcpDisType.MEDICAL);
		form.ctnDetails().btnAssociations().setImage(form.getImages().Core.AssociationsLHS);
	}
	
	private void setResponsibleHCP(CareContextLiteVo voCareContext) 
	{		
		String strHCP = new String("Responsible HCP not known");		
		if (voCareContext != null)
				if (voCareContext.getEpisodeOfCareIsNotNull())
					if (voCareContext.getEpisodeOfCare().getResponsibleHCPIsNotNull())
						if (voCareContext.getEpisodeOfCare().getResponsibleHCP().getMosIsNotNull())
							if (voCareContext.getEpisodeOfCare().getResponsibleHCP().getMos().getNameIsNotNull())
								strHCP = voCareContext.getEpisodeOfCare().getResponsibleHCP().getMos().getName().toString();
		
		form.ctnDetails().lblResponsibleHCP().setValue(strHCP);
	}
	
	public void clear()
	{
		form.grdProblemList().getRows().clear();
		clearInstanceControls();
	}

	protected void onQmbResolvedByTextSubmited(String value) throws PresentationLogicException 
	{
		form.ctnDetails().qmbResolvedBy().clear();
		Hcp filter = new Hcp();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		filter.setHcpType(HcpDisType.MEDICAL);
		
		HcpCollection voHCPColl = domain.listHCPs(filter);
		
		if(voHCPColl != null)
		{
			for (int i = 0; i < voHCPColl.size(); i++)
			{
				form.ctnDetails().qmbResolvedBy().newRow(voHCPColl.get(i), voHCPColl.get(i).getName().toString());
			}
			if (voHCPColl.size() == 1)
			{
				form.ctnDetails().qmbResolvedBy().setValue(voHCPColl.get(0));
			}
			else if (voHCPColl.size() > 1)
			{
				form.ctnDetails().qmbResolvedBy().showOpened();		
			}
		}
	}
	
	private void clearGlobalContextVariables()
	{
		form.getGlobalContext().Clinical.setClinicalDIAssociationVoCollection(null);		
	}

	protected void onBtnAssociationsClick() throws PresentationLogicException
	{
		PatientProblemVo patientProblemVo = form.getLocalContext().getSelectedInstance();
		if(patientProblemVo == null)
			patientProblemVo = new PatientProblemVo();
		
		patientProblemVo.setPatientProblem(form.ctnDetails().customControlCodingItem().getDescription());

		form.getGlobalContext().Clinical.setClinicalDIassociationsFormMode(form.getMode());
		form.getGlobalContext().Clinical.PatientSummary.setPrimaryAssociation(patientProblemVo);
		engine.open(form.getForms().Clinical.ClinicalDiAssociations);
			
	}
	
	private void setPrimaryProblem(ClinicalDIAssociationVoCollection voDIAssociation)
	{
		PatientProblemVo patientProblemVo = form.getLocalContext().getSelectedInstance();
		for (int i = 0; patientProblemVo != null && voDIAssociation != null && i < voDIAssociation.size(); i++)
		{
			if(voDIAssociation.get(i).getPrimProblem() == null || voDIAssociation.get(i).getPrimProblem().getID_PatientProblem() == null)
				voDIAssociation.get(i).setPrimProblem(patientProblemVo);
		}
	}
	
	private boolean saveDIAssociations(ClinicalDIAssociationVoCollection voDIAssociation)
	{
		if(voDIAssociation != null)
		{
			String[] errors = voDIAssociation.validate();
			if(errors != null)
			{
				engine.showErrors(errors);
				return false;
			}
			
			try
			{
				domain.saveClinicalDiAssociation(voDIAssociation);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return false;
			}
		}
		
		return true;
	}

	protected void viewAssociations()
	{
		grdProblemListRow row = form.grdProblemList().getSelectedRow();
		if(row == null)
			throw new CodingRuntimeException("No row selected");
		
		form.getGlobalContext().Clinical.setClinicalDIassociationsFormMode(FormMode.VIEW);
		form.getGlobalContext().Clinical.PatientSummary.setPrimaryAssociation(row.getValue());
		engine.open(form.getForms().Clinical.ClinicalDiAssociations);
	}
	
	private void postInitialize() throws PresentationLogicException
	{
		FormMode mode = form.getGlobalContext().Clinical.getReturnToFormMode();
		if(mode != null && mode.equals(FormMode.EDIT)
			&& engine.getPreviousNonDialogFormName() != null 		//WDEV-1548
			&& ! engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientProblems) ||
			(isDialog() && 
					!engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientSummary)))//WDEV-1548
		{
			newInstance();
			form.getGlobalContext().Clinical.setReturnToFormMode(null);
		}
		
		//WDEV-1421
		if (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientSummary) && isDialog())
		{
			if (form.getGlobalContext().Clinical.getReturnToFormMode() == null)
			{
				newInstance();
				form.getGlobalContext().Clinical.setReturnToFormMode(null);
			}		
			else if (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() &&
						form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.VIEW))
			{	
				form.setMode(FormMode.VIEW);
				//Highlight the linked PatientProblem record.
				for (int i = 0 ; i < form.grdProblemList().getRows().size() ; i++)
				{
					if ( (form.grdProblemList().getRows().get(i).getValue() != null) && (form.getGlobalContext().Clinical.getSelectedPatientProblemFromPatientSummaryIsNotNull())
					&& (form.grdProblemList().getRows().get(i).getValue().equals(form.getGlobalContext().Clinical.getSelectedPatientProblemFromPatientSummary())) )
					{
						form.grdProblemList().setValue(form.grdProblemList().getRows().get(i).getValue());
						
						selectProblem();
						
						form.getGlobalContext().Clinical.setSelectedPatientProblemFromPatientSummary(null);
					}
				}
			}
		}
	}

	protected void onFormClosing(CancelArgs args) throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setClinicalDIassociationsFormMode(null);
	}
	
	private AuthoringInformationVo getAuthoringInfo(PatientProblemVo voSelectedInstance)
	{
		return voSelectedInstance.getAuthoringInformation();
	}

	private void enableHcpAuthoring()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			PatientProblemVo voSelectedInstance = form.getLocalContext().getSelectedInstance();
			if (voSelectedInstance == null || voSelectedInstance.getAuthoringInformation() == null)
			{
				form.ctnDetails().setcustomControlAuthoringEnabled(true);
			}
		}
		else
			form.ctnDetails().setcustomControlAuthoringEnabled(false);
	}

	protected void onChkResolvedValueChanged() throws PresentationLogicException
	{
		enableChkResolved();
		setChkResolvedControls();
		setDefaultResolvedValue();
	}
	
	private void enableChkResolved()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			boolean enableResolvedControl = form.ctnDetails().chkResolved().getValue() && form.ctnDetails().chkResolved().isEnabled();
			form.ctnDetails().qmbResolvedBy().setEnabled(enableResolvedControl);
			form.ctnDetails().dteResolved().setEnabled(enableResolvedControl);
		}
	}
	
	private void setChkResolvedControls()
	{
		boolean resolved   = form.ctnDetails().chkResolved().getValue();
		boolean isEditMode = form.getMode().equals(FormMode.EDIT);

		if (isEditMode && resolved == false)
		{
			form.ctnDetails().qmbResolvedBy().clear();
			form.ctnDetails().dteResolved().setValue(null);
		}
	}
	
	private void setDefaultResolvedValue()
	{
		if(form.ctnDetails().chkResolved().getValue())
		{
			Hcp hcp = (Hcp) domain.getHcpUser();
			if(hcp != null)
			{
				form.ctnDetails().qmbResolvedBy().newRow(hcp, hcp.toString());
				form.ctnDetails().qmbResolvedBy().setValue(hcp);
			}
			form.ctnDetails().dteResolved().setValue(new Date());
		}
	}
	
	private String[] getUiErrors()
	{
		String[] uiErrors = null;
		ArrayList uiErrorsList = new ArrayList();
		
		if(form.ctnDetails().chkResolved().getValue())
		{
			if(form.ctnDetails().qmbResolvedBy().getValue() == null)
			{
				uiErrorsList.add("Please select Resolved By");
			}
			
			if(form.ctnDetails().dteResolved().getValue() == null)
			{
				uiErrorsList.add("Please select Resolved Date");
			}
		}
		
		if(uiErrorsList.size() > 0)
		{
			uiErrors = new String[uiErrorsList.size()];
			uiErrorsList.toArray(uiErrors);
		}
		return uiErrors;
	}
	
	
	
	private void markProblemAsPrimary() throws PresentationLogicException
	{
		PatientProblemListVo voPatienProblemList = form.grdProblemList().getValue();
		if(voPatienProblemList == null)
		{
			engine.showErrors(new String[]{"Please select a Diagnosis / Complication"});
			return;
		}
		
		PatientProblemVo voPatientProblem = domain.get(voPatienProblemList);
		
		setCsPrimaryProcedure(voPatientProblem, true);
		
		if(savePatientProcedure(voPatientProblem,null))
		{
			PatientProblemVo voPatProblem = form.getLocalContext().getSelectedInstance();
			grdProblemListRow row = form.grdProblemList().getRowByValue(voPatProblem);
			if(row != null)
			{
				setGridRowData(row, voPatProblem);
				selectProblem();
			}
		}
	}
	
	private void initializeCustomControl() 
	{
		form.ctnDetails().customControlCodingItem().setCodingItemType(CodingItemType.PROBLEM);
		form.ctnDetails().customControlCodingItem().setHotlist(new Boolean(true));
		form.ctnDetails().customControlCodingItem().setSpecialty(getSpecialty());
		form.ctnDetails().customControlCodingItem().setClinicalTermMandatory(true);
		form.ctnDetails().customControlCodingItem().setDescriptionMandatory(true);
	}

	protected void onCustomControlCodingItemValueChanged() throws PresentationLogicException 
	{
		if (form.ctnDetails().customControlCodingItem().isAllSelected() != null && form.ctnDetails().customControlCodingItem().isAllSelected().booleanValue())
		{
			form.ctnDetails().Group1().setValue(Group1Enumeration.rdoAll);
			form.ctnDetails().customControlCodingItem().setHotlist(new Boolean(false));
			form.ctnDetails().customControlCodingItem().search();			
		}				
	}

	protected void onRadioButtonGroup1ValueChanged() throws PresentationLogicException 
	{
		form.ctnDetails().customControlCodingItem().setHotlist(form.ctnDetails().Group1().getValue().equals(Group1Enumeration.rdoAll) ? new Boolean(false) : new Boolean(true));
//		if (form.ctnDetails().customControlCodingItem().isAllSelected() != null && form.ctnDetails().customControlCodingItem().isAllSelected().booleanValue())
//		{
//			form.Group1().setValue(Group1Enumeration.rdoAll);
//		}				
	}

	protected void onBtnEditClick() throws PresentationLogicException
	{
		updateInstance();
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}

	protected void onChkRemoveResolvedValueChanged() throws PresentationLogicException
	{
		clear();
		form.getLocalContext().setSelectedInstance(null);
		if (form.chkRemoveResolved().getValue() == true)
		{
			populateListControl(domain.listPatientProblemsByPatient(form.getGlobalContext().Core.getPatientShort(), Boolean.TRUE));	
		}
		if (form.chkRemoveResolved().getValue() == false)
		{
			populateListControl(domain.listPatientProblemsByPatient(form.getGlobalContext().Core.getPatientShort(), Boolean.FALSE));	
		}
		updateControlsState();
	}

	private void setBtnCloseVisible(boolean value)
	{
		form.btnClose().setEnabled(value);
		form.btnClose().setVisible(value);
	}
	
	private boolean isDialog()
	{
		return engine.isDialog();
	}

	protected void onBtnCloseClick() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		/*if (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
			engine.open(form.getGlobalContext().Clinical.getReturnToFormName());*/
		engine.close(DialogResult.OK);
	}
	
}
