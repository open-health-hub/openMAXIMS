//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.intraoperativecarerecord;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbAnaestheticUsedLookup();
	abstract protected void defaultcmbAnaestheticUsedLookupValue();
	abstract protected void bindcmbPresureLookup();
	abstract protected void defaultcmbPresureLookupValue();
	abstract protected void bindcmbPositionLookup();
	abstract protected void defaultcmbPositionLookupValue();
	abstract protected void bindcmbDiathermyPlateLookup();
	abstract protected void defaultcmbDiathermyPlateLookupValue();
	abstract protected void bindcmbDiathermyPlateSite2Lookup();
	abstract protected void defaultcmbDiathermyPlateSite2LookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRieClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyr1TabChanged(ims.framework.LayerBridge tab);
	abstract protected void oncmbAnaestheticUsedValueSet(Object value);
	abstract protected void onChkDifficultyWithInsertionValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCatheterValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonDrainsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntEstimatedBloodLossValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkEstimatedBloodLossYesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPresureValueSet(Object value);
	abstract protected void oncmbPositionValueSet(Object value);
	abstract protected void onChkTourniquetValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDiathermyPlateValueSet(Object value);
	abstract protected void oncmbDiathermyPlateSite2ValueSet(Object value);
	abstract protected void onGrdPositionGridCheckBoxClicked(int column, GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.grdPositionRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdTableGridCheckBoxClicked(int column, GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.grdTableRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdAnaesthetisCellValueChanged(ims.framework.controls.DynamicGridCell cell);
	abstract protected void onDyngrdAnaesthetisRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdSkinPreparationGridCheckBoxClicked(int column, GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.grdSkinPreparationRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnRie().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRieClick();
			}
		});
		this.form.btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.btnNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.lyr1().tabCareRecord().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyr1tabCareRecordActivated();
			}
		});
		this.form.lyr1().tabDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyr1tabDetailsActivated();
			}
		});
		this.form.lyr1().tabPackagesAndConsumables().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyr1tabPackagesAndConsumablesActivated();
			}
		});
		this.form.lyr1().tabCareRecord().cmbAnaestheticUsed().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbAnaestheticUsedValueSet(value);
			}
		});
		this.form.lyr1().tabDetails().ctn1().chkDifficultyWithInsertion().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkDifficultyWithInsertionValueChanged();
			}
		});
		this.form.lyr1().tabDetails().ctn1().chkCatheter().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCatheterValueChanged();
			}
		});
		this.form.lyr1().tabDetails().ctn1().Drains().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonDrainsValueChanged();
			}
		});
		this.form.lyr1().tabDetails().ctn1().intEstimatedBloodLoss().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntEstimatedBloodLossValueChanged();
			}
		});
		this.form.lyr1().tabDetails().ctn1().chkEstimatedBloodLossYes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkEstimatedBloodLossYesValueChanged();
			}
		});
		this.form.lyr1().tabDetails().ctn1().cmbPresure().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPresureValueSet(value);
			}
		});
		this.form.lyr1().tabDetails().ctn1().cmbPosition().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPositionValueSet(value);
			}
		});
		this.form.lyr1().tabDetails().ctn1().chkTourniquet().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkTourniquetValueChanged();
			}
		});
		this.form.lyr1().tabDetails().ctn1().cmbDiathermyPlate().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDiathermyPlateValueSet(value);
			}
		});
		this.form.lyr1().tabDetails().ctn1().cmbDiathermyPlateSite2().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDiathermyPlateSite2ValueSet(value);
			}
		});
		this.form.lyr1().tabDetails().ctn1().grdPosition().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPositionGridCheckBoxClicked(column, new GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.grdPositionRow(row), isChecked);
			}
		});
		this.form.lyr1().tabDetails().ctn1().grdTable().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdTableGridCheckBoxClicked(column, new GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.grdTableRow(row), isChecked);
			}
		});
		this.form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().setDynamicGridCellValueChangedEvent(new DynamicGridCellValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdAnaesthetisCellValueChanged(cell);
			}
		});
		this.form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdAnaesthetisRowSelectionChanged(row);
			}
		});
		this.form.lyr1().tabDetails().ctn1().grdSkinPreparation().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdSkinPreparationGridCheckBoxClicked(column, new GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.grdSkinPreparationRow(row), isChecked);
			}
		});
		this.form.getContextMenus().Clinical.getLocalAnaestheticMenuADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.LocalAnaestheticMenu.ADD, sender);
			}
		});
		this.form.getContextMenus().Clinical.getLocalAnaestheticMenuREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.LocalAnaestheticMenu.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getIntraOperativeTheatrePackageAddItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.IntraOperativeTheatrePackage.Add, sender);
			}
		});
		this.form.getContextMenus().Clinical.getIntraOperativeTheatrePackageRemoveItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.IntraOperativeTheatrePackage.Remove, sender);
			}
		});
		this.form.getContextMenus().Clinical.getIntraOperativeProsthesisAddItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.IntraOperativeProsthesis.Add, sender);
			}
		});
		this.form.getContextMenus().Clinical.getIntraOperativeProsthesisRemoveItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.IntraOperativeProsthesis.Remove, sender);
			}
		});
		this.form.getContextMenus().Clinical.getIntraOperativeDrugAddItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.IntraOperativeDrug.Add, sender);
			}
		});
		this.form.getContextMenus().Clinical.getIntraOperativeDrugRemoveItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.IntraOperativeDrug.Remove, sender);
			}
		});
		this.form.getContextMenus().Clinical.getIntraOperativeConsumableAddItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.IntraOperativeConsumable.Add, sender);
			}
		});
		this.form.getContextMenus().Clinical.getIntraOperativeConsumableRemoveItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.IntraOperativeConsumable.Remove, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbAnaestheticUsedLookup();
		bindcmbPresureLookup();
		bindcmbPositionLookup();
		bindcmbDiathermyPlateLookup();
		bindcmbDiathermyPlateSite2Lookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbAnaestheticUsedLookup();
		bindcmbPresureLookup();
		bindcmbPositionLookup();
		bindcmbDiathermyPlateLookup();
		bindcmbDiathermyPlateSite2Lookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbAnaestheticUsedLookupValue();
		defaultcmbPresureLookupValue();
		defaultcmbPositionLookupValue();
		defaultcmbDiathermyPlateLookupValue();
		defaultcmbDiathermyPlateSite2LookupValue();
	}
	private void onlyr1tabCareRecordActivated()
	{
		this.form.lyr1().showtabCareRecord();
		onlyr1TabChanged(this.form.lyr1().tabCareRecord());
	}
	private void onlyr1tabDetailsActivated()
	{
		this.form.lyr1().showtabDetails();
		onlyr1TabChanged(this.form.lyr1().tabDetails());
	}
	private void onlyr1tabPackagesAndConsumablesActivated()
	{
		this.form.lyr1().showtabPackagesAndConsumables();
		onlyr1TabChanged(this.form.lyr1().tabPackagesAndConsumables());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
