//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.70 build 3478.14513)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.intraoperativecarerecord;

import ims.RefMan.vo.CatsReferralVo;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabCareRecordContainer.PlannedUnplannedEnumeration;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.CorrectEnumeration;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.DrainsEnumeration;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.InstrumentCorrectEnumeration;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.NationalEnumeration;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.NeedleCorrectEnumeration;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.SkinIntact2Enumeration;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.SkinIntactEnumeration;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.SkinShaved2Enumeration;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.SkinShavedEnumeration;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.SuturedEnumeration;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.grdPositionRow;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.grdSkinClosureRow;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.grdSkinPreparationRow;
import ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.grdTableRow;
import ims.clinical.vo.CatheterDetailVo;
import ims.clinical.vo.DiathermyPlateDetailVo;
import ims.clinical.vo.DrainsVo;
import ims.clinical.vo.IntraOperativeCareRecordVo;
import ims.clinical.vo.IntraOperativeDetailsVo;
import ims.clinical.vo.LimbCareVo;
import ims.clinical.vo.LocalAnaestheticAdministeredVo;
import ims.clinical.vo.LocalAnaestheticAdministeredVoCollection;
import ims.clinical.vo.TableDeviceVo;
import ims.clinical.vo.TableDeviceVoCollection;
import ims.clinical.vo.TourniquetDetailVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.clinical.vo.lookups.DressingCollection;
import ims.clinical.vo.lookups.LocalAnaesthetic;
import ims.clinical.vo.lookups.LocalAnaestheticCollection;
import ims.clinical.vo.lookups.PatientProcedureOutcome;
import ims.clinical.vo.lookups.SkinClosureCollection;
import ims.clinical.vo.lookups.SkinPreparationused;
import ims.clinical.vo.lookups.SkinPreparationusedCollection;
import ims.clinical.vo.lookups.TableDevices;
import ims.clinical.vo.lookups.TableDevicesCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.PatientProcedureRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocShortVoCollection;
import ims.core.vo.NurseVo;
import ims.core.vo.PatientProcedureLiteVo;
import ims.core.vo.PatientProcedureShortVo;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PatientPosition;
import ims.core.vo.lookups.PatientPositionCollection;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.scheduling.vo.Booking_AppointmentShortVo;
import ims.scheduling.vo.Booking_AppointmentShortVoCollection;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int COL_DRUG = 1;
	private static final int COL_MLS = 2;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();

		if (args != null && args.length > 0 && args[0] instanceof FormMode && isIntraOperativeCareRecordDialog())
		{
			//wdev-12096
			form.getLocalContext().setNewOrEditMode(Boolean.TRUE);
			//------------
			newInstance();
			form.setMode((FormMode) args[0]);
			//wdev-12096
			populateTheatreBookingCombo();
			//-------------------
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setNewOrEditMode(Boolean.FALSE);
		updateInstance();
		//wdev-12347
		if (form.getMode().equals(FormMode.EDIT))
			if((form.lyr1().tabDetails().isVisible()))
			{
				if(form.lyr1().tabDetails().ctn1().ccSCNurse().getValue() == null && form.lyr1().tabCareRecord().ccScrubNurse().getValue() != null)
					form.lyr1().tabDetails().ctn1().ccSCNurse().setValue(form.lyr1().tabCareRecord().ccScrubNurse().getValue());
				if(form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().getValue() == null && form.lyr1().tabCareRecord().ccCirculatingNurse().getValue() != null)
					form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().setValue(form.lyr1().tabCareRecord().ccCirculatingNurse().getValue());
			}
		//--------
	
	}

	private void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//wdev-12096
		form.getLocalContext().setNewOrEditMode(Boolean.TRUE);
		//------------
		newInstance();
		//wdev-12096
		populateTheatreBookingCombo();
		//-------------------
		//wdev-12347
		if (form.getMode().equals(FormMode.EDIT))
			if((form.lyr1().tabDetails().isVisible()))
			{
				if(form.lyr1().tabDetails().ctn1().ccSCNurse().getValue() == null && form.lyr1().tabCareRecord().ccScrubNurse().getValue() != null)
					form.lyr1().tabDetails().ctn1().ccSCNurse().setValue(form.lyr1().tabCareRecord().ccScrubNurse().getValue());
				if(form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().getValue() == null && form.lyr1().tabCareRecord().ccCirculatingNurse().getValue() != null)
					form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().setValue(form.lyr1().tabCareRecord().ccCirculatingNurse().getValue());
			}
		//--------
		defaultTheatre();//wdev-14786
	}

	private void defaultTheatre()
	{
		//1. 	If there is a "Theatre booking" defaulted then the "Location" field will be defaulted to the 
		//		location based on the location associated with the defaulted theatre appointment.
		if (form.lyr1().tabCareRecord().cmbTheatreBooking().getValue() != null)
		{
			Booking_AppointmentShortVo voAppt = form.lyr1().tabCareRecord().cmbTheatreBooking().getValue();
			loadTheatreCombo(voAppt.getSessionIsNotNull() ? voAppt.getSession().getSchLocation() : null);
		}
		//2. 	If there is no default for the "Theatre booking" then the logic will retrieve the most recent 
		//		outpatient appointment where the appointment date = current date. If there is an appointment 
		//		retrieved then the "Location" combo will list all "Theatre locations" for the hospital associated with the appointment location.
		else if (form.lyr1().tabCareRecord().cmbTheatreBooking().getValue() == null)
		{
			Booking_AppointmentShortVo voAppt = domain.getMostRecentOutPatientAppointment(form.getGlobalContext().Core.getPatientShort());
			if (voAppt != null)
			{
				loadTheatreCombo(voAppt.getSessionIsNotNull() ? voAppt.getSession().getSchLocation() : null);
			}
			else
			{
				//3. 	If there is no theatre booking or outpatient appointment then the location combo should only list 
				//		and display for the theatre locations based on the hospital for the logged on user's location
				loadTheatreCombo((LocationRefVo) engine.getCurrentLocation());
			}
		}
	}

	private void newInstance()
	{
		form.lyr1().tabCareRecord().ccAuth().initializeComponent();
		form.lyr1().tabCareRecord().ccPlannedProcedure().setValue(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() ? form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog() : null);
		form.lyr1().tabCareRecord().ccActualProcedurePerformed().setValue(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() ? form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog() : null);

		// form.getLocalContext().setPlannedPatientProcedure(domain.getProcedureFromSuitableForSurgery(form.getGlobalContext().Core.getCurrentCareContext()));
		// form.lyr1().tabCareRecord().ccPlannedProcedure().setValue(form.getLocalContext().getPlannedPatientProcedure());

		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			engine.close(DialogResult.OK);
		}
		else
		{
			open();
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	private boolean save() throws PresentationLogicException
	{
		boolean bSavePerformInstance = false;
		if (form.getLocalContext().getCurrentRecord() == null || form.getLocalContext().getCurrentRecord().getActualProcedure() == null)
			bSavePerformInstance = true;

		IntraOperativeCareRecordVo record = populateInstanceData(form.getLocalContext().getCurrentRecord());
		InpatientEpisodeVo inPatient = domain.getInpatientRecord(form.getGlobalContext().Core.getPatientShort());
		if (inPatient != null)
		{
			record.setAdmissionType(inPatient.getAdmissionType());
			record.setReadmissionType(inPatient.getReadmissionType());
		}
		String[] errors = record.validate(validateUIRules());
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			form.getLocalContext().setCurrentRecord(domain.save(record, form.lyr1().tabCareRecord().cmbTheatreBooking().getValue()));
			
			// Re-populate patient procedure
			form.getGlobalContext().Clinical.setPatientProcedureForIntraOperativeDialog(domain.getProcedure(form.getLocalContext().getCurrentRecord().getPlannedProcedure()));
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		if (bSavePerformInstance)
			savePerformInstance();

		return true;
	}

	private void savePerformInstance()
	{
		PatientProcedureVo voCurrentPatProc = domain.getProcedure(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog());

		if (voCurrentPatProc != null)
		{
			if (voCurrentPatProc.getProcedureStatusIsNotNull() && voCurrentPatProc.getProcedureStatus().equals(PatientProcedureStatus.PERFORMED))
				return;

			PatientProcedureVo voNewPatProc = domain.getProcedure(form.getLocalContext().getCurrentRecord().getActualProcedure());

			voCurrentPatProc.setProcedureOutcome(PatientProcedureOutcome.PERFORMED);

			PatientProcedureRefVo voRefPlannedProc = new PatientProcedureRefVo();
			voRefPlannedProc.setID_PatientProcedure(voCurrentPatProc.getID_PatientProcedure());
			voNewPatProc.setPlannedProc(voRefPlannedProc);

			voNewPatProc.setProcedureStatus(PatientProcedureStatus.PLANNED);
			voNewPatProc.setInfoSource(SourceofInformation.CLINICALCONTACT);
			voNewPatProc.setSignifProc(new Boolean(false));
			voNewPatProc.setProcLaterality(voCurrentPatProc.getProcLaterality());
			voNewPatProc.setSiteText(voCurrentPatProc.getSiteText());
			voNewPatProc.setExcludeFromOthers(voCurrentPatProc.getExcludeFromOthers());

			AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
			voAuthoring.setAuthoringDateTime(new DateTime());
			voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
			voNewPatProc.setAuthoringInformation(voAuthoring);
			voNewPatProc.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voNewPatProc.setProcedureStatus(PatientProcedureStatus.PERFORMED);

			String[] uiErrors = null;

			if (!voNewPatProc.getClinicalContactIsNotNull())
				voNewPatProc.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

			if (!voNewPatProc.getCareContextIsNotNull())
				voNewPatProc.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

			String[] errors = voNewPatProc.validate(uiErrors);
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}

			try
			{
				voNewPatProc = domain.saveProcedure(voNewPatProc, form.getGlobalContext().Core.getPatientShort());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
		}
	}

	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();

		/*if (form.lyr1().tabCareRecord().dtimInTheatreTime().getValue() != null && form.lyr1().tabCareRecord().dtimOutTheatreTime().getValue() != null && form.lyr1().tabCareRecord().dtimInTheatreTime().getValue().isGreaterThan(form.lyr1().tabCareRecord().dtimOutTheatreTime().getValue()))
		{
			uiErrors.add("In Theatre Time can not be set after Out Theatre Time.");
		}*/

		if (form.lyr1().tabCareRecord().dtimSurgeryStart().getValue() != null && form.lyr1().tabCareRecord().dtimSurgeryFinish().getValue() != null && form.lyr1().tabCareRecord().dtimSurgeryStart().getValue().isGreaterThan(form.lyr1().tabCareRecord().dtimSurgeryFinish().getValue()))
		{
			uiErrors.add("Surgery start can not be set after Surgery finish.");
		}

		if (!(form.lyr1().tabCareRecord().PlannedUnplanned().getValue().equals(PlannedUnplannedEnumeration.rdoPlanned) || form.lyr1().tabCareRecord().PlannedUnplanned().getValue().equals(PlannedUnplannedEnumeration.rdoUnplanned)))
		{
			uiErrors.add("Please specify if  the actual procedure is planned or unplanned.");
		}

		if (form.lyr1().tabDetails().ctn1().dtimTimeOn().getValue() != null && form.lyr1().tabDetails().ctn1().dtimTimeOff().getValue() != null && form.lyr1().tabDetails().ctn1().dtimTimeOn().getValue().isGreaterThan(form.lyr1().tabDetails().ctn1().dtimTimeOff().getValue()))
		{
			uiErrors.add("Time On cannot be set after Time Off.");
		}
		//wdev-11676
		if (form.lyr1().tabDetails().ctn1().dtimCatheterInTime().getValue() != null && form.lyr1().tabDetails().ctn1().dtimCatheterOutTime().getValue() != null && form.lyr1().tabDetails().ctn1().dtimCatheterInTime().getValue().isGreaterThan(form.lyr1().tabDetails().ctn1().dtimCatheterOutTime().getValue()))
		{
			uiErrors.add("Catheter In Time can not be set after Catheter Out Time.");
		}
		//----------

		if (checkOtherSkinPreparation())
		{
			uiErrors.add("Please set Other Skin Preparation Used.");
		}

		if (checkOtherTable())
		{
			uiErrors.add("Please set Other Table Device.");
		}

	/*	if (checkOtherDiathermyPlate())
		{
			uiErrors.add("Please set Other Other Diathermy Plate.");
		}
		//wdev-11676 */
		/*if (checkOtherDiathermyPlateSite2())
		{
			uiErrors.add("Please set Other Other Diathermy Plate.");
		}
		*/
		//------------

		if (form.lyr1().tabDetails().ctn1().chkCatheter().getValue() == true && form.lyr1().tabDetails().ctn1().ccCatherterInsertedBy().getValue() == null)
		{
			uiErrors.add("Catheter Inserted by is mandatory");
		}

		String[] result = new String[uiErrors.size()];
		uiErrors.toArray(result);
		return result;
	}

	/*private boolean checkOtherDiathermyPlate()
	{
		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdDiathermyPlate().getRows().size(); i++)
		{
			if (DiathermyType.OTHER.equals(form.lyr1().tabDetails().ctn1().grdDiathermyPlate().getRows().get(i).getValue()) && form.lyr1().tabDetails().ctn1().grdDiathermyPlate().getRows().get(i).getcolSelect() && (form.lyr1().tabDetails().ctn1().grdDiathermyPlate().getRows().get(i).getcolOther() == null || form.lyr1().tabDetails().ctn1().grdDiathermyPlate().getRows().get(i).getcolOther().length() == 0))

				return true;
		}

		return false;
	}*/
	

	private boolean checkOtherTable()
	{
		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdTable().getRows().size(); i++)
		{
			if (TableDevices.OTHER.equals(form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).getValue()) && form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).getcolSelect() && (form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).getcolOther() == null || form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).getcolOther().length() == 0))

				return true;
		}

		return false;
	}

	private boolean checkOtherSkinPreparation()
	{
		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().size(); i++)
		{
			if (SkinPreparationused.OTHER.equals(form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(i).getValue()) && form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(i).getcolSelect() && (form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(i).getcolOther() == null || form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(i).getcolOther().length() == 0))

				return true;
		}

		return false;
	}

	private IntraOperativeCareRecordVo populateInstanceData(IntraOperativeCareRecordVo currentRecord)
	{
		if (currentRecord == null)
		{
			currentRecord = new IntraOperativeCareRecordVo();
			
			// WDEV-9886: If we are creating a new IntraOperativeCareRecordVo then link the PAS EVENT from Care Context
			currentRecord.setPasEvent(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getPasEvent() : null);
		}
		currentRecord.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		currentRecord.setAuthoringInformation(form.lyr1().tabCareRecord().ccAuth().getValue());

		if (form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull())
		{
			currentRecord.setPlannedProcedure(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog());
		}
		else
		{
			// Create a new patient procedure
			PatientProcedureShortVo plannedProcedure = new PatientProcedureShortVo();
			
			plannedProcedure.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			plannedProcedure.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			
			plannedProcedure.setInfoSource(SourceofInformation.CORRESPONDENCE);
			plannedProcedure.setProcedure((ProcedureLiteVo) form.lyr1().tabCareRecord().ccPlannedProcedure().getSelectedItem());
			plannedProcedure.setProcedureDescription(form.lyr1().tabCareRecord().ccPlannedProcedure().getDescription());

			plannedProcedure.setProcedureStatus(PatientProcedureStatus.PLANNED);
			plannedProcedure.setProcDate(form.lyr1().tabCareRecord().dteDate().getValue() != null ? new PartialDate(form.lyr1().tabCareRecord().dteDate().getValue()) : null);// wdev-8393
			
			plannedProcedure.setAuthoringInformation(currentRecord.getAuthoringInformation());

			currentRecord.setPlannedProcedure(plannedProcedure);
		}

		// Get actual procedure && procedure description
		if (form.lyr1().tabCareRecord().ccActualProcedurePerformed().getValue() == null)
		{
			if (currentRecord.getActualProcedureIsNotNull())
			{
				currentRecord.getActualProcedure().setProcedure(null);
				currentRecord.getActualProcedure().setProcedureDescription(form.lyr1().tabCareRecord().ccActualProcedurePerformed().getDescription() == null ? "" : form.lyr1().tabCareRecord().ccActualProcedurePerformed().getDescription());
			}
		}
		else
		{
			ProcedureLiteVo procedure = (ProcedureLiteVo) form.lyr1().tabCareRecord().ccActualProcedurePerformed().getSelectedItem();

			if (!currentRecord.getActualProcedureIsNotNull())
			{
				currentRecord.setActualProcedure(newPatientProcedure(procedure, form.lyr1().tabCareRecord().ccActualProcedurePerformed().getDescription(), form.getGlobalContext().Core.getCurrentCareContext(), currentRecord.getAuthoringInformation(), SourceofInformation.CORRESPONDENCE));
			}
			else if (!procedure.equals(currentRecord.getActualProcedure().getProcedure()))
			{
				currentRecord.getActualProcedure().setProcedure(procedure);
				currentRecord.getActualProcedure().setProcedureDescription(form.lyr1().tabCareRecord().ccActualProcedurePerformed().getDescription());
			}
			else
				currentRecord.getActualProcedure().setProcedureDescription(form.lyr1().tabCareRecord().ccActualProcedurePerformed().getDescription()); //wdev-12343
		}

		currentRecord.setProcedureDate(form.lyr1().tabCareRecord().dteDate().getValue());
		currentRecord.setTheatre(form.lyr1().tabCareRecord().cmbTheatre().getValue());
		currentRecord.setInTheatreTime(form.lyr1().tabCareRecord().dtimInTheatreTime().getValue());
		
		//wdev-12096
		//currentRecord.setAnaestheticUsed(form.lyr1().tabCareRecord().txtAnaestheticUsed().getValue());
		currentRecord.setAnaestheticUsed(form.lyr1().tabCareRecord().cmbAnaestheticUsed().getValue()); 	//wdev-13774
		currentRecord.setIntoPacuTime(form.lyr1().tabCareRecord().dtimTimeIntoPACU().getValue());
		currentRecord.setTimeIntoRecovery(form.lyr1().tabCareRecord().dtimStageOneRecovery().getValue());
		currentRecord.setTimeOutOfRecovery(form.lyr1().tabCareRecord().dtimTimeOutOfRecovery().getValue());
		
		//-----------------
		currentRecord.setSurgeryStartTime(form.lyr1().tabCareRecord().dtimSurgeryStart().getValue());
		currentRecord.setSurgeryEndTime(form.lyr1().tabCareRecord().dtimSurgeryFinish().getValue());
		currentRecord.setAnaesthetistStartTime(form.lyr1().tabCareRecord().dtimAnaesthetistS().getValue());

		currentRecord.setSurgeon((HcpLiteVo) form.lyr1().tabCareRecord().ccSurgeon().getValue());
		currentRecord.setSurgeonAssistant((HcpLiteVo) form.lyr1().tabCareRecord().ccSurgeonAssistant().getValue());
		currentRecord.setAnaesthetist((HcpLiteVo) form.lyr1().tabCareRecord().ccAnaesthetist().getValue());
		currentRecord.setODA((HcpLiteVo) form.lyr1().tabCareRecord().ccODAODP().getValue());
		currentRecord.setScrubNurse((NurseVo) form.lyr1().tabCareRecord().ccScrubNurse().getValue());
		currentRecord.setCirculatingNurse((NurseVo) form.lyr1().tabCareRecord().ccCirculatingNurse().getValue());
		currentRecord.setOther(form.lyr1().tabCareRecord().txtOther().getValue());
		currentRecord.setWasPlannedProcedure(form.lyr1().tabCareRecord().PlannedUnplanned().getValue().equals(PlannedUnplannedEnumeration.rdoPlanned));
		currentRecord.setWasUnplannedProcedure(form.lyr1().tabCareRecord().PlannedUnplanned().getValue().equals(PlannedUnplannedEnumeration.rdoUnplanned));

		currentRecord.setIntraOperativeDetails(populateInstanceIntraOperativeDetails(currentRecord.getIntraOperativeDetails()));

		return currentRecord;
	}

	private PatientProcedureLiteVo newPatientProcedure(ProcedureLiteVo procedure, String description, CareContextShortVo careContext, AuthoringInformationVo authoringInformation, SourceofInformation sourceOfInformation)
	{
		if (description == null || careContext == null || sourceOfInformation == null)
			return null;

		PatientProcedureLiteVo patientProcedure = new PatientProcedureLiteVo();

		patientProcedure.setProcedure(procedure);
		patientProcedure.setProcedureDescription(description);

		patientProcedure.setCareContext(careContext);
		patientProcedure.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		patientProcedure.setAuthoringInformation(authoringInformation);
		patientProcedure.setInfoSource(sourceOfInformation);
		patientProcedure.setProcedureStatus(PatientProcedureStatus.PLANNED);
		patientProcedure.setProcDate(form.lyr1().tabCareRecord().dteDate().getValue() != null ? new PartialDate(form.lyr1().tabCareRecord().dteDate().getValue()) : null);// wdev-8393

		return patientProcedure;
	}

	private IntraOperativeDetailsVo populateInstanceIntraOperativeDetails(IntraOperativeDetailsVo intraOperativeDetails)
	{
		if (intraOperativeDetails == null)
		{
			intraOperativeDetails = new IntraOperativeDetailsVo();
		}

		intraOperativeDetails.setSkinPreparationUsed(getFromSkinPreparationGrid(intraOperativeDetails));
		intraOperativeDetails.setSkinClosure(getFromSkinClosureGrid());
		intraOperativeDetails.setPatientPosition(getFromPositionGrid());
		intraOperativeDetails.setTableDevices(getFromTableGrid(intraOperativeDetails));
		intraOperativeDetails.setLocalAnastheticUsed(getFromAnaestheticGrid(intraOperativeDetails.getLocalAnastheticUsed()));
		intraOperativeDetails.setDressing(getFromDressingsGrid());
		intraOperativeDetails.setDiathermyPlateDetail(populateDiathermyPlateFromScreen(intraOperativeDetails));
		//wdev-11676
		intraOperativeDetails.setDiathermyPlateDetailSiteTwo(populateDiathermyPlateSite2FromScreen(intraOperativeDetails));
		//---------
		intraOperativeDetails.setLimbCare(populateLimbCareFromScreen(intraOperativeDetails.getLimbCare()));
		intraOperativeDetails.setTourniquetDetail(populateTourniquetFromScreen(intraOperativeDetails.getTourniquetDetail()));
		
		intraOperativeDetails.setDrains(populateDrainsFromScreen(intraOperativeDetails.getDrains()));

		intraOperativeDetails.setCatheterDetail(populateCatheterFromScreen(intraOperativeDetails.getCatheterDetail()));
		intraOperativeDetails.setMlsOfWaterIballoon(form.lyr1().tabDetails().ctn1().intMlsOfWater().getValue());

		intraOperativeDetails.setSpecimenType(form.lyr1().tabDetails().ctn1().txtSpecimenType().getValue());
		intraOperativeDetails.setHistopathology(form.lyr1().tabDetails().ctn1().chkHistopathology().getValue());
		intraOperativeDetails.setHaematology(form.lyr1().tabDetails().ctn1().chkHaematology().getValue());
		intraOperativeDetails.setMicrobiology(form.lyr1().tabDetails().ctn1().chkMicrobiology().getValue());
		intraOperativeDetails.setCytology(form.lyr1().tabDetails().ctn1().chkCytology().getValue());

		
		if (form.lyr1().tabDetails().ctn1().Correct().getValue() != null && form.lyr1().tabDetails().ctn1().Correct().getValue().equals(CorrectEnumeration.rdoCorrectYes))
			intraOperativeDetails.setSwabCount(YesNo.YES);	//wdev-11676
		else if (form.lyr1().tabDetails().ctn1().Correct().getValue() != null && form.lyr1().tabDetails().ctn1().Correct().getValue().equals(CorrectEnumeration.rdoCorrectNo))
			intraOperativeDetails.setSwabCount(YesNo.NO);   //wdev-11676
		else
			intraOperativeDetails.setSwabCount(null);		//wdev-11676

				
		//wdev-11676
		if (form.lyr1().tabDetails().ctn1().InstrumentCorrect().getValue() != null && form.lyr1().tabDetails().ctn1().InstrumentCorrect().getValue().equals(InstrumentCorrectEnumeration.rdoInstrumentCorrectYes))
			intraOperativeDetails.setInstrumentCount(YesNo.YES);	
		else if (form.lyr1().tabDetails().ctn1().InstrumentCorrect().getValue() != null && form.lyr1().tabDetails().ctn1().InstrumentCorrect().getValue().equals(InstrumentCorrectEnumeration.rdoInstrumentCorrectNo))
			intraOperativeDetails.setInstrumentCount(YesNo.NO);   
		else
			intraOperativeDetails.setInstrumentCount(null);		
				
		if (form.lyr1().tabDetails().ctn1().NeedleCorrect().getValue() != null && form.lyr1().tabDetails().ctn1().NeedleCorrect().getValue().equals(NeedleCorrectEnumeration.rdoNeedleCorrectYes))
			intraOperativeDetails.setNeedleCount(YesNo.YES);	
		else if (form.lyr1().tabDetails().ctn1().NeedleCorrect().getValue() != null && form.lyr1().tabDetails().ctn1().NeedleCorrect().getValue().equals(NeedleCorrectEnumeration.rdoNeedleCorrectNo))
			intraOperativeDetails.setNeedleCount(YesNo.NO);   
		else
			intraOperativeDetails.setNeedleCount(null);		

		//wdev-12347
		if( form.lyr1().tabDetails().ctn1().ccSCNurse().getValue() == null && form.lyr1().tabCareRecord().ccScrubNurse().getValue() != null)
			form.lyr1().tabDetails().ctn1().ccSCNurse().setValue(form.lyr1().tabCareRecord().ccScrubNurse().getValue());
		if( form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().getValue() == null && form.lyr1().tabCareRecord().ccCirculatingNurse().getValue() != null)
			form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().setValue(form.lyr1().tabCareRecord().ccCirculatingNurse().getValue());
		//----------
		
		intraOperativeDetails.setScrubNurse((NurseVo) form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().getValue());
		intraOperativeDetails.setCirculatingNurse((NurseVo) form.lyr1().tabDetails().ctn1().ccSCNurse().getValue());
		
		if (form.lyr1().tabDetails().ctn1().National().getValue() != null && form.lyr1().tabDetails().ctn1().National().getValue().equals(NationalEnumeration.rdoNationalYes))
			intraOperativeDetails.setNationalJointRegistryCompleted(YesNo.YES);
		else if (form.lyr1().tabDetails().ctn1().National().getValue() != null && form.lyr1().tabDetails().ctn1().National().getValue().equals(NationalEnumeration.rdoNationalNo))
			intraOperativeDetails.setNationalJointRegistryCompleted(YesNo.NO);
		else
			intraOperativeDetails.setNationalJointRegistryCompleted(null);

		intraOperativeDetails.setNationalJointRegistryCompletedBy((NurseVo) form.lyr1().tabDetails().ctn1().ccCompletedBy().getValue());
		intraOperativeDetails.setCountComments(form.lyr1().tabDetails().ctn1().txtComments().getValue());

		//-----------------------
				

		return intraOperativeDetails;
	}

	private LocalAnaestheticAdministeredVoCollection getFromAnaestheticGrid(LocalAnaestheticAdministeredVoCollection localAnastheticUsed)
	{
		if (localAnastheticUsed == null)
			localAnastheticUsed = new LocalAnaestheticAdministeredVoCollection();

		localAnastheticUsed.clear();

		DynamicGridColumn columnDrug = form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().getByIdentifier(COL_DRUG);
		DynamicGridColumn columnMls = form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().getByIdentifier(COL_MLS);

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().size(); i++)
		{
			// WDEV-7987
			LocalAnaestheticAdministeredVo usedAnaesthetic = null;
			if (form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().get(i).getCells().get(columnDrug).getValue() instanceof LocalAnaesthetic || form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().get(i).getCells().get(columnMls).getValue() != null)
			{
				if (form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().get(i).getValue() instanceof LocalAnaestheticAdministeredVo)
				{
					usedAnaesthetic = (LocalAnaestheticAdministeredVo) form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().get(i).getValue();
				}
				if (usedAnaesthetic == null)
					usedAnaesthetic = new LocalAnaestheticAdministeredVo();

				usedAnaesthetic.setLocalAnaesthetic((LocalAnaesthetic) form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().get(i).getCells().get(columnDrug).getValue());
				usedAnaesthetic.setMls((Float) form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().get(i).getCells().get(columnMls).getValue());

				localAnastheticUsed.add(usedAnaesthetic);
			}
		}

		return localAnastheticUsed.size() == 0 ? null : localAnastheticUsed;
	}

	private CatheterDetailVo populateCatheterFromScreen(CatheterDetailVo catheterDetail)
	{
		if (form.lyr1().tabDetails().ctn1().chkCatheter().getValue() != true)
			return null;
		if (catheterDetail == null)
			catheterDetail = new CatheterDetailVo();

		catheterDetail.setCatheterInserted(Boolean.TRUE.equals(form.lyr1().tabDetails().ctn1().chkCatheter().getValue()) ? YesNo.YES : YesNo.NO);
		catheterDetail.setCatheterInsertedBy((HcpLiteVo) form.lyr1().tabDetails().ctn1().ccCatherterInsertedBy().getValue());
		catheterDetail.setDifficultyWithInsertion(Boolean.TRUE.equals(form.lyr1().tabDetails().ctn1().chkDifficultyWithInsertion().getValue()) ? YesNo.YES : YesNo.NO);
		catheterDetail.setInsertionComments(Boolean.TRUE.equals(form.lyr1().tabDetails().ctn1().chkDifficultyWithInsertion().getValue()) ? form.lyr1().tabDetails().ctn1().txtDifficulty().getValue() : null);
		//wdev-11676
		catheterDetail.setTimeOn(form.lyr1().tabDetails().ctn1().dtimCatheterInTime().getValue());
		catheterDetail.setTimeOff(form.lyr1().tabDetails().ctn1().dtimCatheterOutTime().getValue());
		//--------------

		return catheterDetail;
	}

	private TourniquetDetailVo populateTourniquetFromScreen(TourniquetDetailVo tourniquetDetail)
	{
		if (form.lyr1().tabDetails().ctn1().chkTourniquet().getValue() != true)
			return null;
		if (tourniquetDetail == null)
			tourniquetDetail = new TourniquetDetailVo();

		tourniquetDetail.setTourniquet(Boolean.TRUE.equals(form.lyr1().tabDetails().ctn1().chkTourniquet().getValue()) ? YesNo.YES : null);
		tourniquetDetail.setTourniquetPosition(form.lyr1().tabDetails().ctn1().cmbPosition().getValue());
		tourniquetDetail.setTourniquetPressure(form.lyr1().tabDetails().ctn1().cmbPresure().getValue());
		tourniquetDetail.setTimeOn(form.lyr1().tabDetails().ctn1().dtimTimeOn().getValue());
		tourniquetDetail.setTimeOff(form.lyr1().tabDetails().ctn1().dtimTimeOff().getValue());

		return tourniquetDetail;
	}
	

	private DressingCollection getFromDressingsGrid()
	{
		DressingCollection dressingCollection = new DressingCollection();

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdDressings().getRows().size(); i++)
		{
			if (form.lyr1().tabDetails().ctn1().grdDressings().getRows().get(i).getcolSelect())
			{
				dressingCollection.add(form.lyr1().tabDetails().ctn1().grdDressings().getRows().get(i).getValue());
			}
		}

		return dressingCollection.size() == 0 ? null : dressingCollection;
	}

	private TableDeviceVoCollection getFromTableGrid(IntraOperativeDetailsVo intraOperativeDetails)
	{
		
		TableDeviceVoCollection tempVoColl = new TableDeviceVoCollection();		//wdev-12832

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdTable().getRows().size(); i++)
		{
			TableDeviceVo tableDeviceVo = new TableDeviceVo();	//wdev-12832
			if (TableDevices.OTHER.equals(form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).getValue()))
			{
				tableDeviceVo.setOtherTableDevice(form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).getcolOther());	//wdev-12832
				
			}

			if (form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).getcolSelect())
			{
				tableDeviceVo.setTableDevice(form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).getValue());			//wdev-12832
				tempVoColl.add(tableDeviceVo);	//wdev-12832
			}
		}

		return tempVoColl;					//wdev-12832
	}

	private PatientPosition getFromPositionGrid()
	{
		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdPosition().getRows().size(); i++)
		{
			if (form.lyr1().tabDetails().ctn1().grdPosition().getRows().get(i).getcolSelect())
			{
				return form.lyr1().tabDetails().ctn1().grdPosition().getRows().get(i).getValue();
			}
		}

		return null;
	}

	private SkinClosureCollection getFromSkinClosureGrid()
	{
		SkinClosureCollection skinClosureCollection = new SkinClosureCollection();

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdSkinClosure().getRows().size(); i++)
		{
			if (form.lyr1().tabDetails().ctn1().grdSkinClosure().getRows().get(i).getcolSelect())
			{
				skinClosureCollection.add(form.lyr1().tabDetails().ctn1().grdSkinClosure().getRows().get(i).getValue());
			}
		}

		return skinClosureCollection.size() == 0 ? null : skinClosureCollection;
	}

	private SkinPreparationusedCollection getFromSkinPreparationGrid(IntraOperativeDetailsVo intraOperativeDetails)
	{
		SkinPreparationusedCollection skinPreparationusedCollection = new SkinPreparationusedCollection();

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().size(); i++)
		{
			if (form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(i).getcolSelect())
			{
				skinPreparationusedCollection.add(form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(i).getValue());
			}

			if (SkinPreparationused.OTHER.equals(form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(i).getValue()))
			{
				intraOperativeDetails.setOtherSkinPreparationUsed(form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(i).getcolOther());
			}
		}

		return skinPreparationusedCollection.size() == 0 ? null : skinPreparationusedCollection;
	}

	private DrainsVo populateDrainsFromScreen(DrainsVo drains)
	{
		if (!DrainsEnumeration.rdoDrainsYes.equals(form.lyr1().tabDetails().ctn1().Drains().getValue()))
		{
			//wdev-12245
			drains = new DrainsVo();
			if (form.lyr1().tabDetails().ctn1().Drains().getValue() != null && form.lyr1().tabDetails().ctn1().Drains().getValue().equals(DrainsEnumeration.rdoDrainsYes))
				drains.setDrains(YesNo.YES);
			else if (form.lyr1().tabDetails().ctn1().Drains().getValue() != null && form.lyr1().tabDetails().ctn1().Drains().getValue().equals(DrainsEnumeration.rdoDrainsNo))
				drains.setDrains(YesNo.NO);
			else
				drains.setDrains(null);
			drains.setTypeOfDrain(" ");
			
			drains.setWasMinBloodLoss(form.lyr1().tabDetails().ctn1().chkEstimatedBloodLossYes().getValue());	//wdev-12347
			drains.setEstimatedBloodLoss(form.lyr1().tabDetails().ctn1().intEstimatedBloodLoss().getValue());	//wdev-12347
			
			return drains;
			//-------------
			
			
		}
		if (drains == null)
		{
			drains = new DrainsVo();
		}
		if(form.lyr1().tabDetails().ctn1().txtTypeOfDrain().getValue() != null && form.lyr1().tabDetails().ctn1().txtTypeOfDrain().getValue().length() == 1 && form.lyr1().tabDetails().ctn1().txtTypeOfDrain().getValue().contains(" "))
			form.lyr1().tabDetails().ctn1().txtTypeOfDrain().setValue(null);
		drains.setTypeOfDrain(form.lyr1().tabDetails().ctn1().txtTypeOfDrain().getValue());

		if (form.lyr1().tabDetails().ctn1().Drains().getValue() != null && form.lyr1().tabDetails().ctn1().Drains().getValue().equals(DrainsEnumeration.rdoDrainsYes))
			drains.setDrains(YesNo.YES);
		else if (form.lyr1().tabDetails().ctn1().Drains().getValue() != null && form.lyr1().tabDetails().ctn1().Drains().getValue().equals(DrainsEnumeration.rdoDrainsNo))
			drains.setDrains(YesNo.NO);
		else
			drains.setDrains(null);

		if (form.lyr1().tabDetails().ctn1().Sutured().getValue() != null && form.lyr1().tabDetails().ctn1().Sutured().getValue().equals(SuturedEnumeration.rdoSuturedYes))
			drains.setSutured(YesNo.YES);
		else if (form.lyr1().tabDetails().ctn1().Sutured().getValue() != null && form.lyr1().tabDetails().ctn1().Sutured().getValue().equals(SuturedEnumeration.rdoSuturedNo))
			drains.setSutured(YesNo.NO);
		else
			drains.setSutured(null);

		drains.setWasMinBloodLoss(form.lyr1().tabDetails().ctn1().chkEstimatedBloodLossYes().getValue());
		drains.setEstimatedBloodLoss(form.lyr1().tabDetails().ctn1().intEstimatedBloodLoss().getValue());

		return drains;
	}

	private LimbCareVo populateLimbCareFromScreen(LimbCareVo limbCare)
	{
		if (limbCare == null)
		{
			limbCare = new LimbCareVo();
		}

		limbCare.setHadPaddedArmSupportLeft(form.lyr1().tabDetails().ctn1().chkPaddedArmSupportLeft().getValue());
		limbCare.setHadPaddedArmSupportRight(form.lyr1().tabDetails().ctn1().chkPaddedArmSupportRight().getValue());
		limbCare.setHadLeftArmFoldedAcrossPatientsChest(form.lyr1().tabDetails().ctn1().chkFoldedAcrossPatientLeft().getValue());
		limbCare.setHadRightArmFoldedAcrossPatientsChest1(form.lyr1().tabDetails().ctn1().chkFoldedAcrossPatientRight().getValue());
		limbCare.setHasLeftArmSecuredBySide(form.lyr1().tabDetails().ctn1().chkSecuredLeft().getValue());
		limbCare.setHasRightArmSecuredBySide(form.lyr1().tabDetails().ctn1().chkSecuredRight().getValue());
		limbCare.setHadLeftLegDVTProphylaxsis(form.lyr1().tabDetails().ctn1().chkDVTProphylaxsisLeft().getValue());
		limbCare.setHadRightLegDVTProphylaxsis(form.lyr1().tabDetails().ctn1().chkDVTProphylaxsisRight().getValue());
		limbCare.setHadLeftLegGelPad(form.lyr1().tabDetails().ctn1().chkGelPadLeft().getValue());
		limbCare.setHadRightLegGelPad(form.lyr1().tabDetails().ctn1().chkGelPadRight().getValue());

		return limbCare;
	}

	private DiathermyPlateDetailVo populateDiathermyPlateFromScreen(IntraOperativeDetailsVo intraOperativeDetails)
	{
		if (intraOperativeDetails == null)
			return null;

		DiathermyPlateDetailVo diathermyPlateDetail = intraOperativeDetails.getDiathermyPlateDetail();

		if (diathermyPlateDetail == null)
		{
			diathermyPlateDetail = new DiathermyPlateDetailVo();
		}

		diathermyPlateDetail.setDiathermyType(form.lyr1().tabDetails().ctn1().cmbDiathermyPlate().getValue());
		diathermyPlateDetail.setPlatePosition(form.lyr1().tabDetails().ctn1().txtPosition().getValue());

		if (form.lyr1().tabDetails().ctn1().SkinShaved().getValue() != null && form.lyr1().tabDetails().ctn1().SkinShaved().getValue().equals(SkinShavedEnumeration.rdoYes))
			diathermyPlateDetail.setSkinShaved(YesNo.YES);
		else if (form.lyr1().tabDetails().ctn1().SkinShaved().getValue() != null && form.lyr1().tabDetails().ctn1().SkinShaved().getValue().equals(SkinShavedEnumeration.rdoNo))
			diathermyPlateDetail.setSkinShaved(YesNo.NO);
		else
			diathermyPlateDetail.setSkinShaved(null);

		if (form.lyr1().tabDetails().ctn1().SkinIntact().getValue() != null && form.lyr1().tabDetails().ctn1().SkinIntact().getValue().equals(SkinIntactEnumeration.rdoYesS))
			diathermyPlateDetail.setSkinintact(YesNo.YES);
		else if (form.lyr1().tabDetails().ctn1().SkinIntact().getValue() != null && form.lyr1().tabDetails().ctn1().SkinIntact().getValue().equals(SkinIntactEnumeration.rdoNoS))
			diathermyPlateDetail.setSkinintact(YesNo.NO);
		else
			diathermyPlateDetail.setSkinintact(null);

		return diathermyPlateDetail;
	}
	//wdev-11676
	private DiathermyPlateDetailVo populateDiathermyPlateSite2FromScreen(IntraOperativeDetailsVo intraOperativeDetails)
	{
		if (intraOperativeDetails == null)
			return null;

		DiathermyPlateDetailVo diathermyPlateDetail = intraOperativeDetails.getDiathermyPlateDetailSiteTwo();

		if (diathermyPlateDetail == null)
		{
			diathermyPlateDetail = new DiathermyPlateDetailVo();
		}

		diathermyPlateDetail.setDiathermyType(form.lyr1().tabDetails().ctn1().cmbDiathermyPlateSite2().getValue());
		diathermyPlateDetail.setPlatePosition(form.lyr1().tabDetails().ctn1().txtPosition2().getValue());

		if (form.lyr1().tabDetails().ctn1().SkinShaved2().getValue() != null && form.lyr1().tabDetails().ctn1().SkinShaved2().getValue().equals(SkinShaved2Enumeration.rdoYesSS))
			diathermyPlateDetail.setSkinShaved(YesNo.YES);
		else if (form.lyr1().tabDetails().ctn1().SkinShaved2().getValue() != null && form.lyr1().tabDetails().ctn1().SkinShaved2().getValue().equals(SkinShaved2Enumeration.rdoNoSS))
			diathermyPlateDetail.setSkinShaved(YesNo.NO);
		else
			diathermyPlateDetail.setSkinShaved(null);

		if (form.lyr1().tabDetails().ctn1().SkinIntact2().getValue() != null && form.lyr1().tabDetails().ctn1().SkinIntact2().getValue().equals(SkinIntact2Enumeration.rdoYesSSS))
			diathermyPlateDetail.setSkinintact(YesNo.YES);
		else if (form.lyr1().tabDetails().ctn1().SkinIntact2().getValue() != null && form.lyr1().tabDetails().ctn1().SkinIntact2().getValue().equals(SkinIntact2Enumeration.rdoNoSSS))
			diathermyPlateDetail.setSkinintact(YesNo.NO);
		else
			diathermyPlateDetail.setSkinintact(null);

		return diathermyPlateDetail;
	}
	
	//------------

	
	
	//-------------

	/*
	 * private PatientProcedureLiteVo
	 * createPlannedPatientProcedure(PatientProcedureLiteVo patientProcedure) {
	 * if(form.getLocalContext().getPlannedPatientProcedureIsNotNull()) { return
	 * form.getLocalContext().getPlannedPatientProcedure(); }
	 * 
	 * if((ProcedureLiteVo)
	 * form.lyr1().tabCareRecord().ccPlannedProcedure().getSelectedItem() ==
	 * null || form.lyr1().tabCareRecord().ccPlannedProcedure().getDescription() ==
	 * null) { return null; } patientProcedure = new PatientProcedureLiteVo();
	 * 
	 * patientProcedure.setProcedure((ProcedureLiteVo)
	 * form.lyr1().tabCareRecord().ccPlannedProcedure().getSelectedItem());
	 * patientProcedure.setProcedureDescription(form.lyr1().tabCareRecord().ccPlannedProcedure().getDescription());
	 * patientProcedure.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
	 * patientProcedure.setAuthoringInformation(form.lyr1().tabCareRecord().ccAuth().getValue());
	 * patientProcedure.setInfoSource(SourceofInformation.CORRESPONDENCE);
	 * 
	 * return patientProcedure; }
	 */

	@Override
	protected void onlyr1TabChanged(ims.framework.LayerBridge tab)
	{
		form.lyr1().tabDetails().ctn1().grdPosition().resetScrollPosition();
		form.lyr1().tabDetails().ctn1().grdTable().resetScrollPosition();
		//form.lyr1().tabDetails().ctn1().grdDiathermyPlate().resetScrollPosition();
		//wdev-11676
		//form.lyr1().tabDetails().ctn1().grdDiathermyPlate2().resetScrollPosition();
		//-----------
		
		if (tab.equals(form.lyr1().tabPackagesAndConsumables()))
		{
			form.getContextMenus().Clinical.getIntraOperativeConsumableAddItem().setVisible(true);
			form.getContextMenus().Clinical.getIntraOperativeConsumableRemoveItem().setVisible(form.lyr1().tabPackagesAndConsumables().grd1().getSelectedRow() != null ? true : false);
			form.getContextMenus().Clinical.getIntraOperativeDrugAddItem().setVisible(true);
			form.getContextMenus().Clinical.getIntraOperativeDrugRemoveItem().setVisible(form.lyr1().tabPackagesAndConsumables().grd2().getSelectedRow() != null ? true : false);
			form.getContextMenus().Clinical.getIntraOperativeTheatrePackageAddItem().setVisible(true);
			form.getContextMenus().Clinical.getIntraOperativeTheatrePackageRemoveItem().setVisible(form.lyr1().tabPackagesAndConsumables().grd4().getSelectedRow() != null ? true : false);
			form.getContextMenus().Clinical.getIntraOperativeProsthesisAddItem().setVisible(true);
			form.getContextMenus().Clinical.getIntraOperativeProsthesisRemoveItem().setVisible(form.lyr1().tabPackagesAndConsumables().grd3().getSelectedRow() != null ? true : false);			
			
			populateAnaestheticType();
		}
		//wdev-12347
		if (form.getMode().equals(FormMode.EDIT))
			if(tab.equals(form.lyr1().tabDetails()))
			{
				if(form.lyr1().tabDetails().ctn1().ccSCNurse().getValue() == null && form.lyr1().tabCareRecord().ccScrubNurse().getValue() != null)
					form.lyr1().tabDetails().ctn1().ccSCNurse().setValue(form.lyr1().tabCareRecord().ccScrubNurse().getValue());
				if(form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().getValue() == null && form.lyr1().tabCareRecord().ccCirculatingNurse().getValue() != null)
					form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().setValue(form.lyr1().tabCareRecord().ccCirculatingNurse().getValue());
			}
		
		//--------
	}

	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
		if (!populateSkinPreparationGrid())
			throw new FormOpenException("No Skin Preparation Used lookups setup for this screen");

		if (!populateSkinClosureGrid())
			throw new FormOpenException("No Skin Closure lookups setup for this screen");

		if (!populatePatientPositionGrid())
			throw new FormOpenException("No Patient Position lookups setup for this screen");

		if (!populateTableGrid())
			throw new FormOpenException("No Table Devices lookups setup for this screen");

		if (!populateDressingGrid())
			throw new FormOpenException("No Dressing lookups setup for this screen");

		/* http://jira/browse/WDEV-11965 - added by NMCA */
		if (ConfigFlag.GEN.SHOW_INTRA_OPERATIVE_PACKAGES_AND_CONSUMABLES_TAB.getValue())
		{
			form.lyr1().tabPackagesAndConsumables().setVisible(true);
			form.lyr1().tabPackagesAndConsumables().setHeaderVisible(true);
		}
		else
		{
			form.lyr1().tabPackagesAndConsumables().setVisible(false);
			form.lyr1().tabPackagesAndConsumables().setHeaderVisible(false);
		}
		form.lyr1().showtabCareRecord();
		/* http://jira/browse/WDEV-11965 - added by NMCA */
		
	/*	if (!populateDiathermyGrid())
			throw new FormOpenException("No Diathermy Type lookups setup for this screen");
		//wdev-11676
		if (!populateDiathermySite2Grid())
			throw new FormOpenException("No Diathermy Type lookups setup for this screen");
		//-----------
	*/
		initializeTabCareRecord();
		initializeTabDetails();				
	}

	private void initializeTabDetails()
	{
		form.lyr1().tabDetails().ctn1().ccCatherterInsertedBy().initialize(MosType.HCP);
		form.lyr1().tabDetails().ctn1().ccCatherterInsertedBy().isRequired(true);

		form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().initialize(MosType.HCP, HcpDisType.NURSING);
		//wdev-11676
		form.lyr1().tabDetails().ctn1().ccSCNurse().initialize(MosType.HCP, HcpDisType.NURSING);
		form.lyr1().tabDetails().ctn1().ccCompletedBy().initialize(MosType.HCP, HcpDisType.NURSING);
		//------------
		initializeAnaesthetisGrid();
	}

	private void initializeAnaesthetisGrid()
	{
		form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().clear();

		form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().newColumn("Drugs", COL_DRUG);
		form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().getByIdentifier(COL_DRUG).setWidth(250);
		form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().getByIdentifier(COL_DRUG).setCanGrow(true);

		form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().newColumn("Mls", COL_MLS);
		form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().getByIdentifier(COL_MLS).setWidth(41);
		form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().getByIdentifier(COL_MLS).setCanGrow(false);
	}

	private void initializeTabCareRecord()
	{
		form.lyr1().tabCareRecord().ccActualProcedurePerformed().setCodingItemType(CodingItemType.PROCEDURE);
		form.lyr1().tabCareRecord().ccActualProcedurePerformed().setHotlist(new Boolean(false));
		form.lyr1().tabCareRecord().ccActualProcedurePerformed().setIsRequired(true);
		form.lyr1().tabCareRecord().ccPlannedProcedure().setCodingItemType(CodingItemType.PROCEDURE);
		form.lyr1().tabCareRecord().ccPlannedProcedure().setHotlist(new Boolean(false));
		form.lyr1().tabCareRecord().ccPlannedProcedure().setIsRequired(true);

		form.lyr1().tabCareRecord().ccSurgeon().initialize(MosType.HCP);
		form.lyr1().tabCareRecord().ccSurgeonAssistant().initialize(MosType.HCP);
		form.lyr1().tabCareRecord().ccAnaesthetist().initialize(MosType.HCP);
		form.lyr1().tabCareRecord().ccODAODP().initialize(MosType.HCP);

		form.lyr1().tabCareRecord().ccScrubNurse().initialize(MosType.HCP, HcpDisType.NURSING);
		form.lyr1().tabCareRecord().ccCirculatingNurse().initialize(MosType.HCP, HcpDisType.NURSING);
		
		//wdev-12096
		form.getLocalContext().setNewOrEditMode(null);
		//-----------

		loadTheatreCombo(null);
	}

	
	//-----------

	private boolean populateDressingGrid()
	{
		DressingCollection dressingColl = (ims.clinical.vo.lookups.LookupHelper.getDressing(domain.getLookupService()));

		if (dressingColl == null || dressingColl.size() == 0)
		{
			return false;
		}

		form.lyr1().tabDetails().ctn1().grdDressings().getRows().clear();
		for (int i = 0; i < dressingColl.size(); i++)
		{
			ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabDetailsContainer.ctn1Container.grdDressingsRow newRow = form.lyr1().tabDetails().ctn1().grdDressings().getRows().newRow();
			newRow.setcolDressing(dressingColl.get(i).getIItemText());
			newRow.setValue(dressingColl.get(i));
		}

		return true;
	}

	private boolean populateTableGrid()
	{
		TableDevicesCollection tableDevicesColl = (ims.clinical.vo.lookups.LookupHelper.getTableDevices(domain.getLookupService()));

		if (tableDevicesColl == null || tableDevicesColl.size() == 0)
		{
			return false;
		}

		form.lyr1().tabDetails().ctn1().grdTable().getRows().clear();
		for (int i = 0; i < tableDevicesColl.size(); i++)
		{
			grdTableRow newRow = form.lyr1().tabDetails().ctn1().grdTable().getRows().newRow();
			newRow.setcolTable(tableDevicesColl.get(i).getIItemText());
			newRow.setcolOtherReadOnly(true);
			newRow.setValue(tableDevicesColl.get(i));
		}

		return true;
	}

	private boolean populatePatientPositionGrid()
	{
		PatientPositionCollection patientPositionColl = (ims.core.vo.lookups.LookupHelper.getPatientPosition(domain.getLookupService()));

		if (patientPositionColl == null || patientPositionColl.size() == 0)
		{
			return false;
		}

		form.lyr1().tabDetails().ctn1().grdPosition().getRows().clear();
		for (int i = 0; i < patientPositionColl.size(); i++)
		{
			grdPositionRow newRow = form.lyr1().tabDetails().ctn1().grdPosition().getRows().newRow();
			newRow.setcolPosition(patientPositionColl.get(i).getIItemText());
			newRow.setValue(patientPositionColl.get(i));
		}

		return true;
	}

	private boolean populateSkinClosureGrid()
	{
		SkinClosureCollection skinClosureColl = (ims.clinical.vo.lookups.LookupHelper.getSkinClosure(domain.getLookupService()));

		if (skinClosureColl == null || skinClosureColl.size() == 0)
		{
			return false;
		}

		form.lyr1().tabDetails().ctn1().grdSkinClosure().getRows().clear();
		for (int i = 0; i < skinClosureColl.size(); i++)
		{
			grdSkinClosureRow newRow = form.lyr1().tabDetails().ctn1().grdSkinClosure().getRows().newRow();
			newRow.setcolSkinClosure(skinClosureColl.get(i).getIItemText());
			newRow.setValue(skinClosureColl.get(i));
		}

		return true;
	}

	private boolean populateSkinPreparationGrid()
	{
		SkinPreparationusedCollection skinPrepColl = (ims.clinical.vo.lookups.LookupHelper.getSkinPreparationused(domain.getLookupService()));

		if (skinPrepColl == null || skinPrepColl.size() == 0)
		{
			return false;
		}

		form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().clear();
		for (int i = 0; i < skinPrepColl.size(); i++)
		{
			grdSkinPreparationRow newRow = form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().newRow();
			newRow.setcolSkinPrepation(skinPrepColl.get(i).getIItemText());
			newRow.setcolOtherReadOnly(true);
			newRow.setValue(skinPrepColl.get(i));
		}

		return true;
	}

	private void loadTheatreCombo(LocationRefVo appointmentLocation)
	{
		form.lyr1().tabCareRecord().cmbTheatre().clear();
		LocShortVoCollection collLocShortVo = domain.listTheatres(appointmentLocation);
		if (collLocShortVo != null)
		{
			for (LocShortVo item : collLocShortVo)
			{
				form.lyr1().tabCareRecord().cmbTheatre().newRow(item, item.getName());

				if (engine.getCurrentLocation() != null)
				{
					if (engine.getCurrentLocation().getID() == item.getID_Location().intValue())
						form.lyr1().tabCareRecord().cmbTheatre().setValue(item);
				}
			}
		}
	}

	private void updateControlsState()
	{
		
		if(engine.getFormName().equals(form.getForms().Clinical.IntraOperativeCareRecordDialog))	//wdev-12096
		{
			if (!form.getMode().equals(FormMode.EDIT))
			{
			form.btnCancel().setVisible(true);
			}
			form.btnCancel().setText(form.getMode().equals(FormMode.VIEW) ? "Close" : "Cancel");
		}
		else
			form.btnCancel().setVisible(form.getMode().equals(FormMode.VIEW)? false : true);		//wdev-12096														//wdev-12096	
		
		if (form.getMode().equals(FormMode.VIEW))
		{
			Boolean buttonNew = !form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() || (form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() && !form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecordIsNotNull());
			form.btnNew().setVisible(true);
			form.btnNew().setEnabled(buttonNew);

			Boolean buttonEdit = form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() && form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecordIsNotNull();
			form.btnEdit().setVisible(buttonEdit);
			form.btnEdit().setEnabled(buttonEdit);
			form.btnRie().setVisible(buttonEdit);
			form.btnRie().setEnabled(buttonEdit);
			form.lyr1().tabDetails().ctn1().ccCatherterInsertedBy().setEnabled(false);
		}

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.lyr1().tabCareRecord().ccPlannedProcedure().setParentEditing(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog() == null);

			//form.lyr1().tabCareRecord().ccActualProcedurePerformed().setParentEditing(true); 	//WDEV-15330
			//form.lyr1().tabCareRecord().ccActualProcedurePerformed().setEnabled(true); 	//WDEV-15330

			boolean drainsActive = DrainsEnumeration.rdoDrainsYes.equals(form.lyr1().tabDetails().ctn1().Drains().getValue());
			form.lyr1().tabDetails().ctn1().Sutured().setEnabled(drainsActive);
			form.lyr1().tabDetails().ctn1().txtTypeOfDrain().setEnabled(drainsActive);
			form.lyr1().tabDetails().ctn1().chkEstimatedBloodLossYes().setEnabled(form.lyr1().tabDetails().ctn1().intEstimatedBloodLoss().getValue() == null);	//wdev-12347
			form.lyr1().tabDetails().ctn1().intEstimatedBloodLoss().setEnabled(form.lyr1().tabDetails().ctn1().chkEstimatedBloodLossYes().getValue() != true);	//wdev-12347

			boolean chateterActive = form.lyr1().tabDetails().ctn1().chkCatheter().getValue() == true;
			form.lyr1().tabDetails().ctn1().ccCatherterInsertedBy().setEnabled(chateterActive);
			form.lyr1().tabDetails().ctn1().chkDifficultyWithInsertion().setEnabled(chateterActive);
			form.lyr1().tabDetails().ctn1().intMlsOfWater().setEnabled(chateterActive);//WDEV-15328
			form.lyr1().tabDetails().ctn1().txtDifficulty().setEnabled(chateterActive && form.lyr1().tabDetails().ctn1().chkDifficultyWithInsertion().getValue());
			//wdev-11676
			form.lyr1().tabDetails().ctn1().dtimCatheterInTime().setEnabled(chateterActive);
			form.lyr1().tabDetails().ctn1().dtimCatheterOutTime().setEnabled(chateterActive);
			//---------

			boolean tourniquetActive = form.lyr1().tabDetails().ctn1().chkTourniquet().getValue() == true;
			form.lyr1().tabDetails().ctn1().cmbPosition().setEnabled(tourniquetActive);
			form.lyr1().tabDetails().ctn1().cmbPresure().setEnabled(tourniquetActive);
			form.lyr1().tabDetails().ctn1().dtimTimeOn().setEnabled(tourniquetActive);
			form.lyr1().tabDetails().ctn1().dtimTimeOff().setEnabled(tourniquetActive);
			
			//wdev-12096
			if(form.getLocalContext().getNewOrEditModeIsNotNull())
				form.lyr1().tabCareRecord().cmbTheatreBooking().setEnabled(form.getLocalContext().getNewOrEditMode());
			

		}
		
		form.lyr1().tabCareRecord().ccActualProcedurePerformed().setParentEditing(new Boolean(FormMode.EDIT.equals(form.getMode())));// 	WDEV-15330
		form.lyr1().tabCareRecord().ccActualProcedurePerformed().setParentEditing(new Boolean(FormMode.EDIT.equals(form.getMode())), true);// 	WDEV-15330
		form.lyr1().tabCareRecord().ccActualProcedurePerformed().setMode(form.getMode());// 	WDEV-15330
		
		form.getContextMenus().Clinical.getLocalAnaestheticMenuADDItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().Clinical.getLocalAnaestheticMenuREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getSelectedRow() != null);
	}

	public void open() throws PresentationLogicException
	{
		form.getLocalContext().setCurrentRecord(null);
		if (form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull())
		{
			form.getGlobalContext().Clinical.setPatientProcedureForIntraOperativeDialog(domain.getProcedure(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog()));
			
			//WDEV-14764
			if (form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull())
			{
				if (form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecordIsNotNull())
				{
					form.getLocalContext().setCurrentRecord(domain.getIntraOperativeCareRecord(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecord()));
				}
			}
		}
		
		populateInstanceControls(form.getLocalContext().getCurrentRecord());

		form.setMode(FormMode.VIEW);
	}

	private boolean isIntraOperativeCareRecordDialog()
	{
		if (engine.getFormName().equals(form.getForms().Clinical.IntraOperativeCareRecordDialog))
			return true;

		return false;
	}

	private void populateInstanceControls(IntraOperativeCareRecordVo currentRecord)
	{
		clearIntraOperativeCareRecords();

		if (currentRecord == null)
			return;

		populateIntraOperativeCareRecords(currentRecord);
		populateIntraOperativeDetails(currentRecord.getIntraOperativeDetails());
	}

	private void populateIntraOperativeDetails(IntraOperativeDetailsVo intraOperativeDetails)
	{
		if (intraOperativeDetails == null)
			return;

		setSkinPreparationGrid(intraOperativeDetails.getSkinPreparationUsed(), intraOperativeDetails.getOtherSkinPreparationUsed());
		setSkinClosureGrid(intraOperativeDetails.getSkinClosure());
		setPatientPositionGrid(intraOperativeDetails.getPatientPosition());
		setTableGrid(intraOperativeDetails.getTableDevices());	//wdev-12832
		setAnaesthetisGrid(intraOperativeDetails.getLocalAnastheticUsed());
		setDressingsGrid(intraOperativeDetails.getDressing());

		if (intraOperativeDetails.getDiathermyPlateDetailIsNotNull())
		{
			
			form.lyr1().tabDetails().ctn1().cmbDiathermyPlate().setValue(intraOperativeDetails.getDiathermyPlateDetail().getDiathermyType()); //wdev-11676
			form.lyr1().tabDetails().ctn1().txtPosition().setValue(intraOperativeDetails.getDiathermyPlateDetail().getPlatePositionIsNotNull() ? intraOperativeDetails.getDiathermyPlateDetail().getPlatePosition() : null);

			form.lyr1().tabDetails().ctn1().SkinShaved().setValue(intraOperativeDetails.getDiathermyPlateDetail().getSkinShavedIsNotNull() ? (intraOperativeDetails.getDiathermyPlateDetail().getSkinShaved().equals(YesNo.YES) ? SkinShavedEnumeration.rdoYes : SkinShavedEnumeration.rdoNo) : null);
			form.lyr1().tabDetails().ctn1().SkinIntact().setValue(intraOperativeDetails.getDiathermyPlateDetail().getSkinintactIsNotNull() ? (intraOperativeDetails.getDiathermyPlateDetail().getSkinintact().equals(YesNo.YES) ? SkinIntactEnumeration.rdoYesS : SkinIntactEnumeration.rdoNoS) : null);
		}
		//wdev-11676
		if (intraOperativeDetails.getDiathermyPlateDetailSiteTwoIsNotNull())
		{
			
			form.lyr1().tabDetails().ctn1().cmbDiathermyPlateSite2().setValue(intraOperativeDetails.getDiathermyPlateDetailSiteTwo().getDiathermyType());
			form.lyr1().tabDetails().ctn1().txtPosition2().setValue(intraOperativeDetails.getDiathermyPlateDetailSiteTwo().getPlatePositionIsNotNull() ? intraOperativeDetails.getDiathermyPlateDetailSiteTwo().getPlatePosition() : null);

			form.lyr1().tabDetails().ctn1().SkinShaved2().setValue(intraOperativeDetails.getDiathermyPlateDetailSiteTwo().getSkinShavedIsNotNull() ? (intraOperativeDetails.getDiathermyPlateDetailSiteTwo().getSkinShaved().equals(YesNo.YES) ? SkinShaved2Enumeration.rdoYesSS : SkinShaved2Enumeration.rdoNoSS) : null);
			form.lyr1().tabDetails().ctn1().SkinIntact2().setValue(intraOperativeDetails.getDiathermyPlateDetailSiteTwo().getSkinintactIsNotNull() ? (intraOperativeDetails.getDiathermyPlateDetailSiteTwo().getSkinintact().equals(YesNo.YES) ? SkinIntact2Enumeration.rdoYesSSS : SkinIntact2Enumeration.rdoNoSSS) : null);
		}
		//-------

		if (intraOperativeDetails.getLimbCareIsNotNull())
		{
			form.lyr1().tabDetails().ctn1().chkPaddedArmSupportLeft().setValue(intraOperativeDetails.getLimbCare().getHadPaddedArmSupportLeftIsNotNull() ? intraOperativeDetails.getLimbCare().getHadPaddedArmSupportLeft() : null);
			form.lyr1().tabDetails().ctn1().chkPaddedArmSupportRight().setValue(intraOperativeDetails.getLimbCare().getHadPaddedArmSupportRightIsNotNull() ? intraOperativeDetails.getLimbCare().getHadPaddedArmSupportRight() : null);

			form.lyr1().tabDetails().ctn1().chkFoldedAcrossPatientLeft().setValue(intraOperativeDetails.getLimbCare().getHadLeftArmFoldedAcrossPatientsChestIsNotNull() ? intraOperativeDetails.getLimbCare().getHadLeftArmFoldedAcrossPatientsChest() : null);
			form.lyr1().tabDetails().ctn1().chkFoldedAcrossPatientRight().setValue(intraOperativeDetails.getLimbCare().getHadRightArmFoldedAcrossPatientsChest1IsNotNull() ? intraOperativeDetails.getLimbCare().getHadRightArmFoldedAcrossPatientsChest1() : null);

			form.lyr1().tabDetails().ctn1().chkSecuredLeft().setValue(intraOperativeDetails.getLimbCare().getHasLeftArmSecuredBySideIsNotNull() ? intraOperativeDetails.getLimbCare().getHasLeftArmSecuredBySide() : null);
			form.lyr1().tabDetails().ctn1().chkSecuredRight().setValue(intraOperativeDetails.getLimbCare().getHasRightArmSecuredBySideIsNotNull() ? intraOperativeDetails.getLimbCare().getHasRightArmSecuredBySide() : null);

			form.lyr1().tabDetails().ctn1().chkDVTProphylaxsisLeft().setValue(intraOperativeDetails.getLimbCare().getHadLeftLegDVTProphylaxsisIsNotNull() ? intraOperativeDetails.getLimbCare().getHadLeftLegDVTProphylaxsis() : null);
			form.lyr1().tabDetails().ctn1().chkDVTProphylaxsisRight().setValue(intraOperativeDetails.getLimbCare().getHadRightLegDVTProphylaxsisIsNotNull() ? intraOperativeDetails.getLimbCare().getHadRightLegDVTProphylaxsis() : null);

			form.lyr1().tabDetails().ctn1().chkGelPadLeft().setValue(intraOperativeDetails.getLimbCare().getHadLeftLegGelPadIsNotNull() ? intraOperativeDetails.getLimbCare().getHadLeftLegGelPad() : null);
			form.lyr1().tabDetails().ctn1().chkGelPadRight().setValue(intraOperativeDetails.getLimbCare().getHadRightLegGelPadIsNotNull() ? intraOperativeDetails.getLimbCare().getHadRightLegGelPad() : null);
		}

		if (intraOperativeDetails.getTourniquetDetailIsNotNull())
		{
			form.lyr1().tabDetails().ctn1().chkTourniquet().setValue((intraOperativeDetails.getTourniquetDetail().getTourniquetIsNotNull() && intraOperativeDetails.getTourniquetDetail().getTourniquet().equals(YesNo.YES)) ? true : false);
			form.lyr1().tabDetails().ctn1().cmbPosition().setValue(intraOperativeDetails.getTourniquetDetail().getTourniquetPositionIsNotNull() ? intraOperativeDetails.getTourniquetDetail().getTourniquetPosition() : null);
			form.lyr1().tabDetails().ctn1().cmbPresure().setValue(intraOperativeDetails.getTourniquetDetail().getTourniquetPressureIsNotNull() ? intraOperativeDetails.getTourniquetDetail().getTourniquetPressure() : null);
			form.lyr1().tabDetails().ctn1().dtimTimeOn().setValue(intraOperativeDetails.getTourniquetDetail().getTimeOnIsNotNull() ? intraOperativeDetails.getTourniquetDetail().getTimeOn() : null);
			form.lyr1().tabDetails().ctn1().dtimTimeOff().setValue(intraOperativeDetails.getTourniquetDetail().getTimeOffIsNotNull() ? intraOperativeDetails.getTourniquetDetail().getTimeOff() : null);
		}
		
		if (intraOperativeDetails.getDrainsIsNotNull())
		{
			form.lyr1().tabDetails().ctn1().txtTypeOfDrain().setValue(intraOperativeDetails.getDrains().getTypeOfDrainIsNotNull() ? intraOperativeDetails.getDrains().getTypeOfDrain() : null);
			form.lyr1().tabDetails().ctn1().Drains().setValue(intraOperativeDetails.getDrains().getDrainsIsNotNull() ? (intraOperativeDetails.getDrains().getDrains().equals(YesNo.YES) ? DrainsEnumeration.rdoDrainsYes : DrainsEnumeration.rdoDrainsNo) : null);
			form.lyr1().tabDetails().ctn1().Sutured().setValue(intraOperativeDetails.getDrains().getSuturedIsNotNull() ? (intraOperativeDetails.getDrains().getSutured().equals(YesNo.YES) ? SuturedEnumeration.rdoSuturedYes : SuturedEnumeration.rdoSuturedNo) : null);
			form.lyr1().tabDetails().ctn1().chkEstimatedBloodLossYes().setValue((intraOperativeDetails.getDrains().getWasMinBloodLossIsNotNull() && intraOperativeDetails.getDrains().getWasMinBloodLoss()) ? true : false);
			form.lyr1().tabDetails().ctn1().intEstimatedBloodLoss().setValue(intraOperativeDetails.getDrains().getEstimatedBloodLossIsNotNull() ? intraOperativeDetails.getDrains().getEstimatedBloodLoss() : null);
		}

		if (intraOperativeDetails.getCatheterDetailIsNotNull())
		{
			form.lyr1().tabDetails().ctn1().chkCatheter().setValue((intraOperativeDetails.getCatheterDetail().getCatheterInsertedIsNotNull() && intraOperativeDetails.getCatheterDetail().getCatheterInserted().equals(YesNo.YES)) ? true : false);
			form.lyr1().tabDetails().ctn1().ccCatherterInsertedBy().setValue(intraOperativeDetails.getCatheterDetail().getCatheterInsertedByIsNotNull() ? intraOperativeDetails.getCatheterDetail().getCatheterInsertedBy() : null);
			form.lyr1().tabDetails().ctn1().chkDifficultyWithInsertion().setValue((intraOperativeDetails.getCatheterDetail().getDifficultyWithInsertionIsNotNull() && intraOperativeDetails.getCatheterDetail().getDifficultyWithInsertion().equals(YesNo.YES)) ? true : false);
			form.lyr1().tabDetails().ctn1().txtDifficulty().setValue(intraOperativeDetails.getCatheterDetail().getInsertionCommentsIsNotNull() ? intraOperativeDetails.getCatheterDetail().getInsertionComments() : null);
			//wdev-11676
			form.lyr1().tabDetails().ctn1().dtimCatheterInTime().setValue(intraOperativeDetails.getCatheterDetail().getTimeOnIsNotNull() ? intraOperativeDetails.getCatheterDetail().getTimeOn() : null);
			form.lyr1().tabDetails().ctn1().dtimCatheterOutTime().setValue(intraOperativeDetails.getCatheterDetail().getTimeOffIsNotNull() ? intraOperativeDetails.getCatheterDetail().getTimeOff() : null);
			//--------------
		}
		form.lyr1().tabDetails().ctn1().intMlsOfWater().setValue(intraOperativeDetails.getMlsOfWaterIballoonIsNotNull() ? intraOperativeDetails.getMlsOfWaterIballoon() : null);

		form.lyr1().tabDetails().ctn1().txtSpecimenType().setValue(intraOperativeDetails.getSpecimenTypeIsNotNull() ? intraOperativeDetails.getSpecimenType() : null);
		form.lyr1().tabDetails().ctn1().chkHistopathology().setValue((intraOperativeDetails.getHistopathologyIsNotNull() && intraOperativeDetails.getHistopathology()) ? true : false);
		form.lyr1().tabDetails().ctn1().chkHaematology().setValue((intraOperativeDetails.getHaematologyIsNotNull() && intraOperativeDetails.getHaematology()) ? true : false);
		form.lyr1().tabDetails().ctn1().chkMicrobiology().setValue((intraOperativeDetails.getMicrobiologyIsNotNull() && intraOperativeDetails.getMicrobiology()) ? true : false);
		form.lyr1().tabDetails().ctn1().chkCytology().setValue((intraOperativeDetails.getCytologyIsNotNull() && intraOperativeDetails.getCytology()) ? true : false);

		
		form.lyr1().tabDetails().ctn1().Correct().setValue(intraOperativeDetails.getSwabCountIsNotNull() ? (intraOperativeDetails.getSwabCount().equals(YesNo.YES) ? CorrectEnumeration.rdoCorrectYes : CorrectEnumeration.rdoCorrectNo) : null);
		//wdev-11676
		form.lyr1().tabDetails().ctn1().InstrumentCorrect().setValue(intraOperativeDetails.getInstrumentCountIsNotNull() ? (intraOperativeDetails.getInstrumentCount().equals(YesNo.YES) ? InstrumentCorrectEnumeration.rdoInstrumentCorrectYes : InstrumentCorrectEnumeration.rdoInstrumentCorrectNo) : null);
		form.lyr1().tabDetails().ctn1().NeedleCorrect().setValue(intraOperativeDetails.getNeedleCountIsNotNull() ? (intraOperativeDetails.getNeedleCount().equals(YesNo.YES) ? NeedleCorrectEnumeration.rdoNeedleCorrectYes : NeedleCorrectEnumeration.rdoNeedleCorrectNo) : null);
		//-------------------------
		
		form.lyr1().tabDetails().ctn1().National().setValue(intraOperativeDetails.getNationalJointRegistryCompletedIsNotNull() ? (intraOperativeDetails.getNationalJointRegistryCompleted().equals(YesNo.YES) ? NationalEnumeration.rdoNationalYes : NationalEnumeration.rdoNationalNo) : null);
		form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().setValue(intraOperativeDetails.getScrubNurseIsNotNull() ? intraOperativeDetails.getScrubNurse() : null);
		
		//wdev-11676
		form.lyr1().tabDetails().ctn1().ccSCNurse().setValue(intraOperativeDetails.getCirculatingNurseIsNotNull() ? intraOperativeDetails.getCirculatingNurse() : null);
		form.lyr1().tabDetails().ctn1().ccCompletedBy().setValue(intraOperativeDetails.getNationalJointRegistryCompletedByIsNotNull() ? intraOperativeDetails.getNationalJointRegistryCompletedBy() : null);
		form.lyr1().tabDetails().ctn1().txtComments().setValue(intraOperativeDetails.getCountComments());
		//--------------
		
		
	}

	private void setAnaesthetisGrid(LocalAnaestheticAdministeredVoCollection localAnastheticUsed)
	{
		if (localAnastheticUsed == null || localAnastheticUsed.size() == 0)
			return;

		for (int i = 0; i < localAnastheticUsed.size(); i++)
		{
			addAnaesthetisRow(localAnastheticUsed.get(i));
		}
	}

	private void addAnaesthetisRow(LocalAnaestheticAdministeredVo localAnaestheticAdministeredVo)
	{
		DynamicGridRow newRow = form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().newRow();
		newRow.setValue(localAnaestheticAdministeredVo);

		DynamicGridColumn column = null;
		DynamicGridCell cell = null;

		column = form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().getByIdentifier(COL_DRUG);
		cell = newRow.getCells().newCell(column, DynamicCellType.ENUMERATION);

		populateLocalAnaesthetic(ims.clinical.vo.lookups.LookupHelper.getLocalAnaesthetic(domain.getLookupService()), cell);
		cell.setValue(localAnaestheticAdministeredVo != null ? localAnaestheticAdministeredVo.getLocalAnaesthetic() : null);
		cell.setAutoPostBack(true);
		updateCell(cell);

		column = form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().getByIdentifier(COL_MLS);
		cell = newRow.getCells().newCell(column, DynamicCellType.DECIMAL);
		cell.setValue(localAnaestheticAdministeredVo != null ? localAnaestheticAdministeredVo.getMls() : null);
		form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().setSelectedRow(null);
	}

	private void updateCell(DynamicGridCell cell)
	{
		DynamicGridRow updatedRow = cell.getRow();
		DynamicGridColumn column = form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().getByIdentifier(COL_DRUG);

		// updatedRow.setValue((Specialty) cell.getValue());

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().size(); i++)
		{
			DynamicGridRow currentRow = form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().get(i);

			if (!currentRow.equals(updatedRow))
			{
				populateLocalAnaesthetic(ims.clinical.vo.lookups.LookupHelper.getLocalAnaesthetic(domain.getLookupService()), currentRow.getCells().get(column));
			}
		}
	}

	private void populateLocalAnaesthetic(LocalAnaestheticCollection localAnaesthetic, DynamicGridCell cell)
	{
		if (localAnaesthetic == null || localAnaesthetic.size() == 0 || cell == null)
			return;

		LocalAnaesthetic cellValue = (LocalAnaesthetic) cell.getValue();

		cell.getItems().clear();

		for (int i = 0; i < localAnaesthetic.size(); i++)
		{
			if (!alreadyAdded(localAnaesthetic.get(i), cell))
			{
				cell.getItems().newItem(localAnaesthetic.get(i));
			}
		}

		cell.setValue(cellValue);
	}

	private boolean alreadyAdded(LocalAnaesthetic localAnaesthetic, DynamicGridCell cell)
	{
		if (localAnaesthetic == null || cell == null)
			return true;

		DynamicGridColumn column = form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().getByIdentifier(COL_DRUG);

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().size(); i++)
		{
			if (!cell.getRow().equals(form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().get(i)) && form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().get(i).getCells().get(column).getValue() != null && form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().get(i).getCells().get(column).getValue().equals(localAnaesthetic))
				return true;
		}

		return false;
	}

	
	private void setDressingsGrid(DressingCollection dressing)
	{
		if (dressing == null || dressing.size() == 0)
			return;

		for (int i = 0; i < dressing.size(); i++)
		{
			if (dressing.get(i) == null)
				continue;

			for (int j = 0; j < form.lyr1().tabDetails().ctn1().grdDressings().getRows().size(); j++)
			{
				if (dressing.get(i).equals(form.lyr1().tabDetails().ctn1().grdDressings().getRows().get(j).getValue()))
				{
					form.lyr1().tabDetails().ctn1().grdDressings().getRows().get(j).setcolSelect(true);
					break;
				}
			}
		}
	}

	private void setTableGrid(TableDeviceVoCollection tableDevices)
	{
		if (tableDevices == null)
			return;

		for (int j = 0; j < form.lyr1().tabDetails().ctn1().grdTable().getRows().size(); j++)
		{
			for(int k = 0; k < tableDevices.size(); k++ )	//wdev-12832
			{
				TableDeviceVo tableDevicesVo = tableDevices.get(k);
				if(tableDevicesVo == null)
					continue;
				if (tableDevicesVo.getTableDevice().equals(form.lyr1().tabDetails().ctn1().grdTable().getRows().get(j).getValue()))
				{
					form.lyr1().tabDetails().ctn1().grdTable().getRows().get(j).setcolSelect(true);
	
					if (TableDevices.OTHER.equals(tableDevicesVo.getTableDevice()))
					{
						form.lyr1().tabDetails().ctn1().grdTable().getRows().get(j).setcolOther(tableDevicesVo.getOtherTableDevice());
						form.lyr1().tabDetails().ctn1().grdTable().getRows().get(j).setcolOtherReadOnly(false);
					}
	
					form.lyr1().tabDetails().ctn1().grdTable().setValue(tableDevicesVo.getTableDevice());
					form.lyr1().tabDetails().ctn1().grdTable().resetScrollPosition();
					break;
				}
			}
		}
	}

	private void setPatientPositionGrid(PatientPosition patientPosition)
	{
		if (patientPosition == null)
			return;

		for (int j = 0; j < form.lyr1().tabDetails().ctn1().grdPosition().getRows().size(); j++)
		{
			if (patientPosition.equals(form.lyr1().tabDetails().ctn1().grdPosition().getRows().get(j).getValue()))
			{
				form.lyr1().tabDetails().ctn1().grdPosition().getRows().get(j).setcolSelect(true);
				form.lyr1().tabDetails().ctn1().grdPosition().setValue(patientPosition);
				form.lyr1().tabDetails().ctn1().grdPosition().resetScrollPosition();
				break;
			}
		}
	}

	private void setSkinClosureGrid(SkinClosureCollection skinClosure)
	{
		if (skinClosure == null || skinClosure.size() == 0)
			return;

		for (int i = 0; i < skinClosure.size(); i++)
		{
			if (skinClosure.get(i) == null)
				continue;

			for (int j = 0; j < form.lyr1().tabDetails().ctn1().grdSkinClosure().getRows().size(); j++)
			{
				if (skinClosure.get(i).equals(form.lyr1().tabDetails().ctn1().grdSkinClosure().getRows().get(j).getValue()))
				{
					form.lyr1().tabDetails().ctn1().grdSkinClosure().getRows().get(j).setcolSelect(true);
					break;
				}
			}
		}
	}

	private void setSkinPreparationGrid(SkinPreparationusedCollection skinPreparationUsed, String otherSkinPreparation)
	{
		if (skinPreparationUsed == null || skinPreparationUsed.size() == 0)
			return;

		for (int i = 0; i < skinPreparationUsed.size(); i++)
		{
			if (skinPreparationUsed.get(i) == null)
				continue;

			for (int j = 0; j < form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().size(); j++)
			{
				if (skinPreparationUsed.get(i).equals(form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(j).getValue()))
				{
					form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(j).setcolSelect(true);

					if (SkinPreparationused.OTHER.equals(skinPreparationUsed.get(i)))
					{
						form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(j).setcolOther(otherSkinPreparation);
						form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(j).setcolOtherReadOnly(false);
					}
					break;
				}
			}
		}
	}

	private void populateIntraOperativeCareRecords(IntraOperativeCareRecordVo currentRecord)
	{
		if (currentRecord == null)
			return;

		form.lyr1().tabCareRecord().ccAuth().setValue(currentRecord.getAuthoringInformationIsNotNull() ? currentRecord.getAuthoringInformation() : null);

		form.lyr1().tabCareRecord().ccPlannedProcedure().setValue(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog());

		form.lyr1().tabCareRecord().ccActualProcedurePerformed().setValue(currentRecord.getActualProcedureIsNotNull() ? currentRecord.getActualProcedure() : null);

		form.lyr1().tabCareRecord().dteDate().setValue(currentRecord.getProcedureDateIsNotNull() ? currentRecord.getProcedureDate() : null);
		if (currentRecord.getTheatreIsNotNull())
		{
			form.lyr1().tabCareRecord().cmbTheatre().newRow(currentRecord.getTheatre(), currentRecord.getTheatre().getName());
			form.lyr1().tabCareRecord().cmbTheatre().setValue(currentRecord.getTheatre());
		}
		form.lyr1().tabCareRecord().dtimInTheatreTime().setValue(currentRecord.getInTheatreTimeIsNotNull() ? currentRecord.getInTheatreTime() : null);
		
		//wdev-12096
		//form.lyr1().tabCareRecord().txtAnaestheticUsed().setValue(currentRecord.getAnaestheticUsedIsNotNull() ? currentRecord.getAnaestheticUsed():null);
		form.lyr1().tabCareRecord().cmbAnaestheticUsed().setValue(currentRecord.getAnaestheticUsedIsNotNull() ? currentRecord.getAnaestheticUsed():null); //wdev-13774
		form.lyr1().tabCareRecord().dtimTimeIntoPACU().setValue(currentRecord.getIntoPacuTimeIsNotNull() ? currentRecord.getIntoPacuTime():null);
		form.lyr1().tabCareRecord().dtimStageOneRecovery().setValue(currentRecord.getTimeIntoRecoveryIsNotNull() ? currentRecord.getTimeIntoRecovery():null);
		form.lyr1().tabCareRecord().dtimTimeOutOfRecovery().setValue(currentRecord.getTimeOutOfRecoveryIsNotNull() ? currentRecord.getTimeOutOfRecovery():null);
		
		//WDEV-12173
		Booking_AppointmentShortVo voAppt = domain.getTheatreApptForIntraOperativeCareRecord(currentRecord);
		if(voAppt != null && voAppt.getAppointmentDateIsNotNull())
			form.lyr1().tabCareRecord().cmbTheatreBooking().newRow(voAppt, voAppt.getAppointmentDate().toString()+(voAppt.getApptStartTime()!=null?" "+
					voAppt.getApptStartTime().toString():(voAppt.getTheatreBookingIsNotNull()&&voAppt.getTheatreBooking().getTCITimeIsNotNull()?" "+voAppt.getTheatreBooking().getTCITime().getText():"")));
		
		form.lyr1().tabCareRecord().cmbTheatreBooking().setValue(voAppt);
		
		//-------------
		form.lyr1().tabCareRecord().dtimSurgeryStart().setValue(currentRecord.getSurgeryStartTimeIsNotNull() ? currentRecord.getSurgeryStartTime() : null);
		form.lyr1().tabCareRecord().dtimSurgeryFinish().setValue(currentRecord.getSurgeryEndTimeIsNotNull() ? currentRecord.getSurgeryEndTime() : null);

		form.lyr1().tabCareRecord().dtimAnaesthetistS().setValue(currentRecord.getAnaesthetistStartTimeIsNotNull() ? currentRecord.getAnaesthetistStartTime() : null);
		form.lyr1().tabCareRecord().ccSurgeon().setValue(currentRecord.getSurgeonIsNotNull() ? currentRecord.getSurgeon() : null);
		form.lyr1().tabCareRecord().ccSurgeonAssistant().setValue(currentRecord.getSurgeonAssistantIsNotNull() ? currentRecord.getSurgeonAssistant() : null);
		form.lyr1().tabCareRecord().ccAnaesthetist().setValue(currentRecord.getAnaesthetistIsNotNull() ? currentRecord.getAnaesthetist() : null);
		form.lyr1().tabCareRecord().ccODAODP().setValue(currentRecord.getODAIsNotNull() ? currentRecord.getODA() : null);
		form.lyr1().tabCareRecord().ccScrubNurse().setValue(currentRecord.getScrubNurseIsNotNull() ? currentRecord.getScrubNurse() : null);
		form.lyr1().tabCareRecord().ccCirculatingNurse().setValue(currentRecord.getCirculatingNurseIsNotNull() ? currentRecord.getCirculatingNurse() : null);

		form.lyr1().tabCareRecord().txtOther().setValue(currentRecord.getOtherIsNotNull() ? currentRecord.getOther() : null);

		form.lyr1().tabCareRecord().PlannedUnplanned().setValue(currentRecord.getWasPlannedProcedureIsNotNull() && currentRecord.getWasPlannedProcedure() ? PlannedUnplannedEnumeration.rdoPlanned : PlannedUnplannedEnumeration.rdoUnplanned);
	}

	private void clearIntraOperativeCareRecords()
	{
		form.lyr1().tabCareRecord().ccAuth().setValue(null);
		form.lyr1().tabCareRecord().ccActualProcedurePerformed().setValue(null);
		form.lyr1().tabCareRecord().ccPlannedProcedure().setValue(null);
		form.lyr1().tabCareRecord().dteDate().setValue(null);
		form.lyr1().tabCareRecord().cmbTheatre().setValue(null);
		form.lyr1().tabCareRecord().dtimInTheatreTime().setValue(null);
		//form.lyr1().tabCareRecord().dtimOutTheatreTime().setValue(null);
		form.lyr1().tabCareRecord().dtimSurgeryStart().setValue(null);
		form.lyr1().tabCareRecord().dtimSurgeryFinish().setValue(null);
		
		form.lyr1().tabCareRecord().dtimAnaesthetistS().setValue(null);
		form.lyr1().tabCareRecord().ccSurgeon().setValue(null);
		form.lyr1().tabCareRecord().ccSurgeonAssistant().setValue(null);
		form.lyr1().tabCareRecord().ccAnaesthetist().setValue(null);
		form.lyr1().tabCareRecord().ccODAODP().setValue(null);
		form.lyr1().tabCareRecord().ccScrubNurse().setValue(null);
		form.lyr1().tabCareRecord().ccCirculatingNurse().setValue(null);
		form.lyr1().tabCareRecord().txtOther().setValue(null);
		form.lyr1().tabCareRecord().PlannedUnplanned().setValue(null);
		//wdev-12096
		form.lyr1().tabCareRecord().dtimStageOneRecovery().setValue(null);
		form.lyr1().tabCareRecord().dtimTimeIntoPACU().setValue(null);
		form.lyr1().tabCareRecord().dtimTimeOutOfRecovery().setValue(null);
		form.lyr1().tabCareRecord().cmbAnaestheticUsed().setValue(null); //wdev-13774
		form.lyr1().tabCareRecord().cmbTheatreBooking().clear();
		//---------------

		clearIntraOperativeDetails();
	}

	private void clearIntraOperativeDetails()
	{
		clearSkinPreparationGrid();
		clearSkinClosureGrid();
		clearPositionGrid();
		clearTableGrid();
		clearDressingsGrid();

		clearDiathermyPlateGrid();
		clearDiathermyPlateSite2Grid();

		form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().clear();
		form.lyr1().tabDetails().ctn1().txtPosition().setValue(null);
		form.lyr1().tabDetails().ctn1().SkinShaved().setValue(null);
		form.lyr1().tabDetails().ctn1().SkinIntact().setValue(null);
		form.lyr1().tabDetails().ctn1().txtPosition2().setValue(null);
		form.lyr1().tabDetails().ctn1().SkinShaved2().setValue(null);
		form.lyr1().tabDetails().ctn1().SkinIntact2().setValue(null);

		
		form.lyr1().tabDetails().ctn1().chkPaddedArmSupportLeft().setValue(null);
		form.lyr1().tabDetails().ctn1().chkPaddedArmSupportRight().setValue(null);
		form.lyr1().tabDetails().ctn1().chkFoldedAcrossPatientLeft().setValue(null);
		form.lyr1().tabDetails().ctn1().chkFoldedAcrossPatientRight().setValue(null);
		form.lyr1().tabDetails().ctn1().chkSecuredLeft().setValue(null);
		form.lyr1().tabDetails().ctn1().chkSecuredRight().setValue(null);
		form.lyr1().tabDetails().ctn1().chkDVTProphylaxsisLeft().setValue(null);
		form.lyr1().tabDetails().ctn1().chkDVTProphylaxsisRight().setValue(null);
		form.lyr1().tabDetails().ctn1().chkGelPadLeft().setValue(null);
		form.lyr1().tabDetails().ctn1().chkGelPadRight().setValue(null);

		form.lyr1().tabDetails().ctn1().chkTourniquet().setValue(null);
		form.lyr1().tabDetails().ctn1().cmbPosition().setValue(null);
		form.lyr1().tabDetails().ctn1().cmbPresure().setValue(null);
		form.lyr1().tabDetails().ctn1().dtimTimeOn().setValue(null);
		form.lyr1().tabDetails().ctn1().dtimTimeOff().setValue(null);
		
				
		//---------

		form.lyr1().tabDetails().ctn1().txtTypeOfDrain().setValue(null);
		form.lyr1().tabDetails().ctn1().Drains().setValue(null);
		form.lyr1().tabDetails().ctn1().Sutured().setValue(null);
		form.lyr1().tabDetails().ctn1().chkEstimatedBloodLossYes().setValue(null);
		form.lyr1().tabDetails().ctn1().intEstimatedBloodLoss().setValue(null);

		form.lyr1().tabDetails().ctn1().chkCatheter().setValue(null);
		form.lyr1().tabDetails().ctn1().ccCatherterInsertedBy().setValue(null);
		form.lyr1().tabDetails().ctn1().chkDifficultyWithInsertion().setValue(null);
		form.lyr1().tabDetails().ctn1().txtDifficulty().setValue(null);
		form.lyr1().tabDetails().ctn1().intMlsOfWater().setValue(null);
		//wdev-11676
		form.lyr1().tabDetails().ctn1().dtimCatheterInTime().setValue(null);
		form.lyr1().tabDetails().ctn1().dtimCatheterOutTime().setValue(null);
		//------------

		form.lyr1().tabDetails().ctn1().txtSpecimenType().setValue(null);
		form.lyr1().tabDetails().ctn1().chkHistopathology().setValue(null);
		form.lyr1().tabDetails().ctn1().chkHaematology().setValue(null);
		form.lyr1().tabDetails().ctn1().chkCytology().setValue(null);
		form.lyr1().tabDetails().ctn1().chkMicrobiology().setValue(null);

		form.lyr1().tabDetails().ctn1().Correct().setValue(null);
		form.lyr1().tabDetails().ctn1().ccSwabScrubNurse().setValue(null);
		//wdev-11676
		form.lyr1().tabDetails().ctn1().InstrumentCorrect().setValue(null);
		form.lyr1().tabDetails().ctn1().ccSCNurse().setValue(null);
		form.lyr1().tabDetails().ctn1().NeedleCorrect().setValue(null);
		form.lyr1().tabDetails().ctn1().National().setValue(null);
		form.lyr1().tabDetails().ctn1().ccCompletedBy().setValue(null);
		form.lyr1().tabDetails().ctn1().txtComments().setValue(null);
		//-------------
				
	}

	private void clearDiathermyPlateGrid()
	{
		form.lyr1().tabDetails().ctn1().cmbDiathermyPlate().setValue(null);
	
	}
	//wdev-11676
	private void clearDiathermyPlateSite2Grid()
	{
		form.lyr1().tabDetails().ctn1().cmbDiathermyPlateSite2().setValue(null);
		
	}
	//---------------

	private void clearDressingsGrid()
	{
		form.lyr1().tabDetails().ctn1().grdDressings().setValue(null);

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdDressings().getRows().size(); i++)
		{
			form.lyr1().tabDetails().ctn1().grdDressings().getRows().get(i).setcolSelect(false);
		}
	}

	private void clearTableGrid()
	{
		form.lyr1().tabDetails().ctn1().grdTable().setValue(null);

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdTable().getRows().size(); i++)
		{
			form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).setcolSelect(false);
			form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).setcolOther(null);
		}
	}

	private void clearPositionGrid()
	{
		form.lyr1().tabDetails().ctn1().grdPosition().setValue(null);

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdPosition().getRows().size(); i++)
		{
			form.lyr1().tabDetails().ctn1().grdPosition().getRows().get(i).setcolSelect(false);
		}
	}

	private void clearSkinClosureGrid()
	{
		form.lyr1().tabDetails().ctn1().grdSkinClosure().setValue(null);

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdSkinClosure().getRows().size(); i++)
		{
			form.lyr1().tabDetails().ctn1().grdSkinClosure().getRows().get(i).setcolSelect(false);
		}
	}

	private void clearSkinPreparationGrid()
	{
		form.lyr1().tabDetails().ctn1().grdSkinPreparation().setValue(null);

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().size(); i++)
		{
			form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(i).setcolSelect(false);
			form.lyr1().tabDetails().ctn1().grdSkinPreparation().getRows().get(i).setcolOther(null);
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.LocalAnaestheticMenu.ADD:
				addAnaesthetisRow(null);
				updateControlsState();
				break;

			case GenForm.ContextMenus.ClinicalNamespace.LocalAnaestheticMenu.REMOVE:
				removeAnaesthetisRow();
				break;
			
			case GenForm.ContextMenus.ClinicalNamespace.IntraOperativeConsumable.Add:
				engine.open(form.getForms().Clinical.PackagesAndConsumables, new Object[]{1, form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog()});
				form.getLocalContext().setPackageAndConsumableType(1);
				break;

			case GenForm.ContextMenus.ClinicalNamespace.IntraOperativeConsumable.Remove:
				
				break;

			case GenForm.ContextMenus.ClinicalNamespace.IntraOperativeDrug.Add:
				engine.open(form.getForms().Clinical.PackagesAndConsumables, new Object[]{2, form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog()});
				form.getLocalContext().setPackageAndConsumableType(2);
				break;

			case GenForm.ContextMenus.ClinicalNamespace.IntraOperativeDrug.Remove:
				
				break;
						
			case GenForm.ContextMenus.ClinicalNamespace.IntraOperativeProsthesis.Add:
				engine.open(form.getForms().Clinical.PackagesAndConsumables, new Object[]{3, form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog()});
				form.getLocalContext().setPackageAndConsumableType(3);
				break;

			case GenForm.ContextMenus.ClinicalNamespace.IntraOperativeProsthesis.Remove:

				break;
			
			case GenForm.ContextMenus.ClinicalNamespace.IntraOperativeTheatrePackage.Add:
				engine.open(form.getForms().Clinical.PackagesAndConsumables, new Object[]{4, form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog()});
				form.getLocalContext().setPackageAndConsumableType(4);
				break;

			case GenForm.ContextMenus.ClinicalNamespace.IntraOperativeTheatrePackage.Remove:
				
				break;
	
	
		}

		updateControlsState();
	}

	private void removeAnaesthetisRow()
	{
		form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().remove(form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getSelectedRow());

		DynamicGridColumn column = form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getColumns().getByIdentifier(COL_DRUG);

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().size(); i++)
		{
			DynamicGridRow updatedRow = form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().getRows().get(i);
			populateLocalAnaesthetic(ims.clinical.vo.lookups.LookupHelper.getLocalAnaesthetic(domain.getLookupService()), updatedRow.getCells().get(column));
		}
	}

	@Override
	protected void onDyngrdAnaesthetisCellValueChanged(DynamicGridCell cell)
	{
		updateCell(cell);
		//wdev-12245
		form.lyr1().tabDetails().ctn1().dyngrdAnaesthetis().setSelectedRow(null);
		updateControlsState();
		//end wdev-12245
	}

	@Override
	protected void onDyngrdAnaesthetisRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onGrdSkinPreparationGridCheckBoxClicked(int column, grdSkinPreparationRow row, boolean isChecked) throws PresentationLogicException
	{
		Boolean otherCondition = !(row.getValue() instanceof SkinPreparationused && row.getValue().equals(SkinPreparationused.OTHER) && isChecked);

		row.setcolOtherReadOnly(otherCondition);
		if (otherCondition)
			row.setcolOther(null);
	}

	
	@Override
	protected void onGrdTableGridCheckBoxClicked(int column, grdTableRow row, boolean isChecked) throws PresentationLogicException
	{
		Boolean otherCondition = !(row.getValue() instanceof TableDevices && row.getValue().equals(TableDevices.OTHER) && isChecked);

		row.setcolOtherReadOnly(otherCondition);
		if (otherCondition)
			row.setcolOther(null);

		//if (isChecked)
		//	clearOtherSelectionOnTableGrid(row);
	}

	private void clearOtherSelectionOnTableGrid(grdTableRow row)
	{
		if (row == null || row.getValue() == null)
			return;

		form.lyr1().tabDetails().ctn1().grdTable().setValue(row.getValue());

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdTable().getRows().size(); i++)
		{
			if (!row.getValue().equals(form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).getValue()))
			{
				form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).setcolSelect(false);

				if (TableDevices.OTHER.equals(form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).getValue()))
				{
					form.lyr1().tabDetails().ctn1().grdTable().getRows().get(i).setcolOther(null);
				}
			}
		}
	}

	@Override
	protected void onGrdPositionGridCheckBoxClicked(int column, grdPositionRow row, boolean isChecked) throws PresentationLogicException
	{
		if (isChecked)
			clearOtherSelectionOnPositionGrid(row);
	}

	private void clearOtherSelectionOnPositionGrid(grdPositionRow row)
	{
		if (row == null || row.getValue() == null)
			return;

		form.lyr1().tabDetails().ctn1().grdPosition().setValue(row.getValue());

		for (int i = 0; i < form.lyr1().tabDetails().ctn1().grdPosition().getRows().size(); i++)
		{
			if (!row.getValue().equals(form.lyr1().tabDetails().ctn1().grdPosition().getRows().get(i).getValue()))
			{
				form.lyr1().tabDetails().ctn1().grdPosition().getRows().get(i).setcolSelect(false);
			}
		}
	}

	@Override
	protected void onChkDifficultyWithInsertionValueChanged() throws PresentationLogicException
	{
		updateControlsState();

		if (!form.lyr1().tabDetails().ctn1().chkDifficultyWithInsertion().getValue())
			form.lyr1().tabDetails().ctn1().txtDifficulty().setValue(null);
	}

	@Override
	protected void onChkCatheterValueChanged() throws PresentationLogicException
	{
	
		//WDEV-15328
		if ( ! form.lyr1().tabDetails().ctn1().chkCatheter().getValue())
		{
			form.lyr1().tabDetails().ctn1().ccCatherterInsertedBy().clear();
			form.lyr1().tabDetails().ctn1().intMlsOfWater().setValue(null);
			form.lyr1().tabDetails().ctn1().dtimCatheterInTime().setValue(null);
			form.lyr1().tabDetails().ctn1().dtimCatheterOutTime().setValue(null);
			
			form.lyr1().tabDetails().ctn1().chkDifficultyWithInsertion().setValue(false);
			onChkDifficultyWithInsertionValueChanged();
		}
		
		updateControlsState();

	}

	@Override
	protected void onRadioButtonDrainsValueChanged() throws PresentationLogicException
	{
		//WDEV-15328
		if (form.lyr1().tabDetails().ctn1().Drains().getValue().equals(DrainsEnumeration.rdoDrainsNo))
		{
			form.lyr1().tabDetails().ctn1().txtTypeOfDrain().setValue(null);
			form.lyr1().tabDetails().ctn1().Sutured().setValue(SuturedEnumeration.rdoSuturedNo);
		}
		
		updateControlsState();

	}

	@Override
	protected void onChkEstimatedBloodLossYesValueChanged() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onChkTourniquetValueChanged() throws PresentationLogicException
	{
		//WDEV-15328
		if ( ! form.lyr1().tabDetails().ctn1().chkTourniquet().getValue())
		{
			form.lyr1().tabDetails().ctn1().cmbPosition().setValue(null);
			form.lyr1().tabDetails().ctn1().cmbPresure().setValue(null);
			form.lyr1().tabDetails().ctn1().dtimTimeOn().setValue(null);
			form.lyr1().tabDetails().ctn1().dtimTimeOff().setValue(null);
		}
		
		updateControlsState();

	}
		
	//@Override
	protected void onIntEstimatedBloodLossValueChanged() throws PresentationLogicException
	{
		form.lyr1().tabDetails().ctn1().chkEstimatedBloodLossYes().setValue(null);
		updateControlsState();

	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{	
		if (result.equals(DialogResult.OK))
		{
			if (formName.equals(form.getForms().Core.RieConfirmationDialog))
			{
				try
				{
					domain.rieIntraOperativeCareRecordAndActualProcedure(form.getLocalContext().getCurrentRecord(),
							form.getForms().Clinical.IntraOperativeCareRecordDialog,
							form.getGlobalContext().Core.getPatientShortIsNotNull()?form.getGlobalContext().Core.getPatientShort().getID_Patient():null, 
							form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()?form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact():null,
							form.getGlobalContext().Core.getCurrentCareContextIsNotNull()?form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext():null, 
							form.getGlobalContext().Core.getRieMessage());
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				}
				open();
				updateControlsState();
				return;
			}
			else
			{
				ArrayList<String> items = form.getGlobalContext().Clinical.getPackageAndConsumableItems();

				if (items != null && items.size() > 0)
				{
					for (int i = 0; i < items.size(); i++) 
					{			
						if (form.getLocalContext().getPackageAndConsumableTypeIsNotNull())
						{
							if (form.getLocalContext().getPackageAndConsumableType().equals(1))
							{
								ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabPackagesAndConsumablesContainer.grd1Row row = form.lyr1().tabPackagesAndConsumables().grd1().getRows().newRow();
								row.setColumn1(items.get(i));
							}
							else if (form.getLocalContext().getPackageAndConsumableType().equals(2))
							{
								ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabPackagesAndConsumablesContainer.grd2Row row = form.lyr1().tabPackagesAndConsumables().grd2().getRows().newRow();
								row.setColumn1(items.get(i));
							}
							else if (form.getLocalContext().getPackageAndConsumableType().equals(3))
							{
								ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabPackagesAndConsumablesContainer.grd3Row row = form.lyr1().tabPackagesAndConsumables().grd3().getRows().newRow();
								row.setColumn1(items.get(i));
							}
							else if (form.getLocalContext().getPackageAndConsumableType().equals(4))
							{
								ims.clinical.forms.intraoperativecarerecord.GenForm.lyr1Layer.tabPackagesAndConsumablesContainer.grd4Row row = form.lyr1().tabPackagesAndConsumables().grd4().getRows().newRow();
								row.setColumn1(items.get(i));
							}
						}
					}
				}
			}
		}
	}
	
	private void populateAnaestheticType()
	{
		form.lyr1().tabPackagesAndConsumables().cmb1().newRow("General", "General");
		form.lyr1().tabPackagesAndConsumables().cmb1().newRow("Local", "Local");
	}

	
	//wdev-12096
	private void populateTheatreBookingCombo()
	{
		Boolean flagAppmatchDate = false;
		CatsReferralVo catsRefVo = domain.getCatsReferral(form.getGlobalContext().Core.getCurrentCareContext());
		Booking_AppointmentShortVoCollection voCol = domain.getBookingAppt(catsRefVo);
		form.lyr1().tabCareRecord().cmbTheatreBooking().clear();
		if(voCol != null)
		{
			for(int i = 0; i < voCol.size();i++)
			{
				Booking_AppointmentShortVo app = voCol.get(i);
				form.lyr1().tabCareRecord().cmbTheatreBooking().newRow(app, app.getAppointmentDate().toString()+(app.getApptStartTime()!=null?" "+
						app.getApptStartTime().toString():(app.getTheatreBookingIsNotNull()&&app.getTheatreBooking().getTCITimeIsNotNull()?" "+app.getTheatreBooking().getTCITime().getText():"")));
				if(flagAppmatchDate == false && app.getAppointmentDate().equals(new Date()))
				{
					flagAppmatchDate = true;
					form.lyr1().tabCareRecord().cmbTheatreBooking().setValue(app);
					
				}
					
			}
			
		}
	}
	//--------------

	@Override
	protected void onBtnRieClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}

	

	
	

	
	
	
}
