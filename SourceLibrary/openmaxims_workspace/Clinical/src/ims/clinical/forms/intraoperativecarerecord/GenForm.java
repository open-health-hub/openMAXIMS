//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.intraoperativecarerecord;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabCareRecordContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbAnaestheticUsedComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.AnaestheticUsed value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticUsed value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticUsed value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticUsed value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.AnaestheticUsed value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.AnaestheticUsed getValue()
				{
					return (ims.clinical.vo.lookups.AnaestheticUsed)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.AnaestheticUsed value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTheatreBookingComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.Booking_AppointmentShortVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.Booking_AppointmentShortVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.Booking_AppointmentShortVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.Booking_AppointmentShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.Booking_AppointmentShortVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.Booking_AppointmentShortVo getValue()
				{
					return (ims.scheduling.vo.Booking_AppointmentShortVo)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.Booking_AppointmentShortVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTheatreComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocShortVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocShortVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocShortVo getValue()
				{
					return (ims.core.vo.LocShortVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocShortVo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class PlannedUnplannedRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 94, 541, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Unplanned", startTabIndex.intValue() + 9030);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 22, 541, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Planned", startTabIndex.intValue() + 9029);
				}
				public void setText(PlannedUnplannedEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public PlannedUnplannedEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return PlannedUnplannedEnumeration.None;
						case 0: return PlannedUnplannedEnumeration.rdoUnplanned;
						case 1: return PlannedUnplannedEnumeration.rdoPlanned;
					}
					return null;
				}
				public void setValue(PlannedUnplannedEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(PlannedUnplannedEnumeration.None.id);
				}
				public boolean isEnabled(PlannedUnplannedEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(PlannedUnplannedEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(PlannedUnplannedEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(PlannedUnplannedEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class PlannedUnplannedEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static PlannedUnplannedEnumeration None = new PlannedUnplannedEnumeration(-1);
				public static PlannedUnplannedEnumeration rdoUnplanned = new PlannedUnplannedEnumeration(0);
				public static PlannedUnplannedEnumeration rdoPlanned = new PlannedUnplannedEnumeration(1);
				private PlannedUnplannedEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((PlannedUnplannedEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 800, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Planned Procedure", new Integer(1), ""}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 440, 800, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Actual Procedure performed", new Integer(1), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 560, 384, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccCirculatingNurseForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper5.getSize(), instance1, startTabIndex.intValue() + 7026, skipContextValidation);
				//ims.framework.Control m_ccCirculatingNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(560), new Integer(384), new Integer(248), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 7026), m_ccCirculatingNurseForm, instance1 } );
				ims.framework.Control m_ccCirculatingNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 7026), m_ccCirculatingNurseForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccCirculatingNurseControl);
				Menu[] menus1 = m_ccCirculatingNurseForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 128, 384, 280, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccScrubNurseForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper6.getSize(), instance2, startTabIndex.intValue() + 6025, skipContextValidation);
				//ims.framework.Control m_ccScrubNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(128), new Integer(384), new Integer(280), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 6025), m_ccScrubNurseForm, instance2 } );
				ims.framework.Control m_ccScrubNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 6025), m_ccScrubNurseForm, instance2, Boolean.FALSE } );
				super.addControl(m_ccScrubNurseControl);
				Menu[] menus2 = m_ccScrubNurseForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
				ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 560, 360, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccODAODPForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper7.getSize(), instance3, startTabIndex.intValue() + 5024, skipContextValidation);
				//ims.framework.Control m_ccODAODPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(560), new Integer(360), new Integer(248), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 5024), m_ccODAODPForm, instance3 } );
				ims.framework.Control m_ccODAODPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 5024), m_ccODAODPForm, instance3, Boolean.FALSE } );
				super.addControl(m_ccODAODPControl);
				Menu[] menus3 = m_ccODAODPForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus3.length; x++)
				{
					form.registerMenu(menus3[x]);
				}
				ims.framework.CustomComponent instance4 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 128, 360, 280, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccAnaesthetistForm = loader.loadComponent(102256, appForm, startControlID * 10 + 4000, anchoringHelper8.getSize(), instance4, startTabIndex.intValue() + 4022, skipContextValidation);
				//ims.framework.Control m_ccAnaesthetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(128), new Integer(360), new Integer(280), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4022), m_ccAnaesthetistForm, instance4 } );
				ims.framework.Control m_ccAnaesthetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4022), m_ccAnaesthetistForm, instance4, Boolean.FALSE } );
				super.addControl(m_ccAnaesthetistControl);
				Menu[] menus4 = m_ccAnaesthetistForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus4.length; x++)
				{
					form.registerMenu(menus4[x]);
				}
				ims.framework.CustomComponent instance5 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 560, 336, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccSurgeonAssistantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 5000, anchoringHelper9.getSize(), instance5, startTabIndex.intValue() + 3020, skipContextValidation);
				//ims.framework.Control m_ccSurgeonAssistantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(560), new Integer(336), new Integer(248), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3020), m_ccSurgeonAssistantForm, instance5 } );
				ims.framework.Control m_ccSurgeonAssistantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011),  new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3020), m_ccSurgeonAssistantForm, instance5, Boolean.FALSE } );
				super.addControl(m_ccSurgeonAssistantControl);
				Menu[] menus5 = m_ccSurgeonAssistantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus5.length; x++)
				{
					form.registerMenu(menus5[x]);
				}
				ims.framework.CustomComponent instance6 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 128, 336, 280, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccSurgeonForm = loader.loadComponent(102256, appForm, startControlID * 10 + 6000, anchoringHelper10.getSize(), instance6, startTabIndex.intValue() + 2018, skipContextValidation);
				//ims.framework.Control m_ccSurgeonControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(128), new Integer(336), new Integer(280), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2018), m_ccSurgeonForm, instance6 } );
				ims.framework.Control m_ccSurgeonControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013),  new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2018), m_ccSurgeonForm, instance6, Boolean.FALSE } );
				super.addControl(m_ccSurgeonControl);
				Menu[] menus6 = m_ccSurgeonForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus6.length; x++)
				{
					form.registerMenu(menus6[x]);
				}
				ims.framework.CustomComponent instance7 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 400, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccAuthForm = loader.loadComponent(102228, appForm, startControlID * 10 + 7000, anchoringHelper11.getSize(), instance7, startTabIndex.intValue() + 1, skipContextValidation);
				//ims.framework.Control m_ccAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(8), new Integer(8), new Integer(400), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_ccAuthForm, instance7 } );
				ims.framework.Control m_ccAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015),  new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_ccAuthForm, instance7, Boolean.TRUE } );
				super.addControl(m_ccAuthControl);
				Menu[] menus7 = m_ccAuthForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus7.length; x++)
				{
					form.registerMenu(menus7[x]);
				}
				ims.framework.CustomComponent instance8 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 120, 792, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccPlannedProcedureForm = loader.loadComponent(123133, appForm, startControlID * 10 + 8000, anchoringHelper12.getSize(), instance8, startTabIndex.intValue() + 1004, skipContextValidation);
				//ims.framework.Control m_ccPlannedProcedureControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(16), new Integer(120), new Integer(792), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1004), m_ccPlannedProcedureForm, instance8 } );
				ims.framework.Control m_ccPlannedProcedureControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1017),  new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1004), m_ccPlannedProcedureForm, instance8, Boolean.FALSE } );
				super.addControl(m_ccPlannedProcedureControl);
				Menu[] menus8 = m_ccPlannedProcedureForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus8.length; x++)
				{
					form.registerMenu(menus8[x]);
				}
				ims.framework.CustomComponent instance9 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 477, 792, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccActualProcedurePerformedForm = loader.loadComponent(123133, appForm, startControlID * 10 + 9000, anchoringHelper13.getSize(), instance9, startTabIndex.intValue() + 8028, skipContextValidation);
				//ims.framework.Control m_ccActualProcedurePerformedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(16), new Integer(477), new Integer(792), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 8028), m_ccActualProcedurePerformedForm, instance9 } );
				ims.framework.Control m_ccActualProcedurePerformedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019),  new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 8028), m_ccActualProcedurePerformedForm, instance9, Boolean.TRUE } );
				super.addControl(m_ccActualProcedurePerformedControl);
				Menu[] menus9 = m_ccActualProcedurePerformedForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus9.length; x++)
				{
					form.registerMenu(menus9[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 24, 320, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recovery:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 15, 66, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre Booking:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 416, 313, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time Out Of Recovery:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 23, 306, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time Into", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 24, 238, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time Into PACU:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 416, 186, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Used:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 416, 246, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 416, 230, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 416, 263, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgery start: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 24, 288, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgery finish :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 24, 338, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgeon :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 416, 338, 118, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgeon Assistant : ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 416, 410, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 24, 362, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetist :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 416, 362, 139, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ODA/ODP/Anaes Tech :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 416, 386, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Circulating Nurse :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 24, 386, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Scrub Nurse :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 24, 186, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 24, 210, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 24, 263, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "In Theatre Time :", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 176, 540, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 560, 408, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 8027), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 128, 184, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 2005), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 560, 311, 232, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 2016), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 128, 311, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 2015), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 128, 236, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 2010), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 560, 236, 232, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 2011), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 128, 261, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 2012), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 128, 286, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 2014), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 560, 261, 232, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 2013), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 560, 184, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbAnaestheticUsedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 2006), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAnaestheticUsedTemp);
				cmbAnaestheticUsedComboBox cmbAnaestheticUsed = (cmbAnaestheticUsedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaestheticUsedComboBox.class, m_cmbAnaestheticUsedTemp);
				super.addComboBox(cmbAnaestheticUsed);
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 168, 64, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTheatreBookingTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 1003), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTheatreBookingTemp);
				cmbTheatreBookingComboBox cmbTheatreBooking = (cmbTheatreBookingComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTheatreBookingComboBox.class, m_cmbTheatreBookingTemp);
				super.addComboBox(cmbTheatreBooking);
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 128, 208, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTheatreTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 2008), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbTheatreTemp);
				cmbTheatreComboBox cmbTheatre = (cmbTheatreComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTheatreComboBox.class, m_cmbTheatreTemp);
				super.addComboBox(cmbTheatre);
		
				// RadioButton Controls
				RadioButton tmpPlannedUnplanned = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpPlannedUnplanned);
				PlannedUnplannedRadioButton PlannedUnplanned = (PlannedUnplannedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(PlannedUnplannedRadioButton.class, tmpPlannedUnplanned);
				PlannedUnplanned.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(PlannedUnplanned);
			}

			public ims.core.forms.mosquery.IComponent ccCirculatingNurse()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setccCirculatingNurseValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setccCirculatingNurseVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isccCirculatingNurseVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setccCirculatingNurseEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isccCirculatingNurseEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccScrubNurse()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(3)).getLogic();
			}
			public void setccScrubNurseValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(3)).setValueChangedEvent(delegate);
			}
			public void setccScrubNurseVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(3)).setVisible(value);
			}
			public boolean isccScrubNurseVisible()
			{
				return ((ims.framework.Control)super.getControl(3)).isVisible();
			}
			public void setccScrubNurseEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(3)).setEnabled(value);
			}
			public boolean isccScrubNurseEnabled()
			{
				return ((ims.framework.Control)super.getControl(3)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccODAODP()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(4)).getLogic();
			}
			public void setccODAODPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(4)).setValueChangedEvent(delegate);
			}
			public void setccODAODPVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(4)).setVisible(value);
			}
			public boolean isccODAODPVisible()
			{
				return ((ims.framework.Control)super.getControl(4)).isVisible();
			}
			public void setccODAODPEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(4)).setEnabled(value);
			}
			public boolean isccODAODPEnabled()
			{
				return ((ims.framework.Control)super.getControl(4)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccAnaesthetist()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(5)).getLogic();
			}
			public void setccAnaesthetistValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(5)).setValueChangedEvent(delegate);
			}
			public void setccAnaesthetistVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(5)).setVisible(value);
			}
			public boolean isccAnaesthetistVisible()
			{
				return ((ims.framework.Control)super.getControl(5)).isVisible();
			}
			public void setccAnaesthetistEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(5)).setEnabled(value);
			}
			public boolean isccAnaesthetistEnabled()
			{
				return ((ims.framework.Control)super.getControl(5)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccSurgeonAssistant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(6)).getLogic();
			}
			public void setccSurgeonAssistantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(6)).setValueChangedEvent(delegate);
			}
			public void setccSurgeonAssistantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(6)).setVisible(value);
			}
			public boolean isccSurgeonAssistantVisible()
			{
				return ((ims.framework.Control)super.getControl(6)).isVisible();
			}
			public void setccSurgeonAssistantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(6)).setEnabled(value);
			}
			public boolean isccSurgeonAssistantEnabled()
			{
				return ((ims.framework.Control)super.getControl(6)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccSurgeon()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(7)).getLogic();
			}
			public void setccSurgeonValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(7)).setValueChangedEvent(delegate);
			}
			public void setccSurgeonVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(7)).setVisible(value);
			}
			public boolean isccSurgeonVisible()
			{
				return ((ims.framework.Control)super.getControl(7)).isVisible();
			}
			public void setccSurgeonEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(7)).setEnabled(value);
			}
			public boolean isccSurgeonEnabled()
			{
				return ((ims.framework.Control)super.getControl(7)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent ccAuth()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(8)).getLogic();
			}
			public void setccAuthValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(8)).setValueChangedEvent(delegate);
			}
			public void setccAuthVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(8)).setVisible(value);
			}
			public boolean isccAuthVisible()
			{
				return ((ims.framework.Control)super.getControl(8)).isVisible();
			}
			public void setccAuthEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(8)).setEnabled(value);
			}
			public boolean isccAuthEnabled()
			{
				return ((ims.framework.Control)super.getControl(8)).isEnabled();
			}
			public ims.clinical.forms.clinicalcoding.IComponent ccPlannedProcedure()
			{
				return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(9)).getLogic();
			}
			public void setccPlannedProcedureValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(9)).setValueChangedEvent(delegate);
			}
			public void setccPlannedProcedureVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(9)).setVisible(value);
			}
			public boolean isccPlannedProcedureVisible()
			{
				return ((ims.framework.Control)super.getControl(9)).isVisible();
			}
			public void setccPlannedProcedureEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(9)).setEnabled(value);
			}
			public boolean isccPlannedProcedureEnabled()
			{
				return ((ims.framework.Control)super.getControl(9)).isEnabled();
			}
			public ims.clinical.forms.clinicalcoding.IComponent ccActualProcedurePerformed()
			{
				return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(10)).getLogic();
			}
			public void setccActualProcedurePerformedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(10)).setValueChangedEvent(delegate);
			}
			public void setccActualProcedurePerformedVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(10)).setVisible(value);
			}
			public boolean isccActualProcedurePerformedVisible()
			{
				return ((ims.framework.Control)super.getControl(10)).isVisible();
			}
			public void setccActualProcedurePerformedEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(10)).setEnabled(value);
			}
			public boolean isccActualProcedurePerformedEnabled()
			{
				return ((ims.framework.Control)super.getControl(10)).isEnabled();
			}
			public TextBox txtRdoButton()
			{
				return (TextBox)super.getControl(31);
			}
			public TextBox txtOther()
			{
				return (TextBox)super.getControl(32);
			}
			public DateControl dteDate()
			{
				return (DateControl)super.getControl(33);
			}
			public DateTimeControl dtimTimeOutOfRecovery()
			{
				return (DateTimeControl)super.getControl(34);
			}
			public DateTimeControl dtimStageOneRecovery()
			{
				return (DateTimeControl)super.getControl(35);
			}
			public DateTimeControl dtimTimeIntoPACU()
			{
				return (DateTimeControl)super.getControl(36);
			}
			public DateTimeControl dtimAnaesthetistS()
			{
				return (DateTimeControl)super.getControl(37);
			}
			public DateTimeControl dtimInTheatreTime()
			{
				return (DateTimeControl)super.getControl(38);
			}
			public DateTimeControl dtimSurgeryFinish()
			{
				return (DateTimeControl)super.getControl(39);
			}
			public DateTimeControl dtimSurgeryStart()
			{
				return (DateTimeControl)super.getControl(40);
			}
			public cmbAnaestheticUsedComboBox cmbAnaestheticUsed()
			{
				return (cmbAnaestheticUsedComboBox)super.getComboBox(0);
			}
			public cmbTheatreBookingComboBox cmbTheatreBooking()
			{
				return (cmbTheatreBookingComboBox)super.getComboBox(1);
			}
			public cmbTheatreComboBox cmbTheatre()
			{
				return (cmbTheatreComboBox)super.getComboBox(2);
			}
			public PlannedUnplannedRadioButton PlannedUnplanned()
			{
				return (PlannedUnplannedRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class ctn1Container extends ContainerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbPresureComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinical.vo.lookups.TourniquetPressure value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinical.vo.lookups.TourniquetPressure value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinical.vo.lookups.TourniquetPressure value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinical.vo.lookups.TourniquetPressure value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinical.vo.lookups.TourniquetPressure value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinical.vo.lookups.TourniquetPressure getValue()
					{
						return (ims.clinical.vo.lookups.TourniquetPressure)super.control.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.TourniquetPressure value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbPositionComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinical.vo.lookups.TourniquetPosition value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinical.vo.lookups.TourniquetPosition value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinical.vo.lookups.TourniquetPosition value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinical.vo.lookups.TourniquetPosition value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinical.vo.lookups.TourniquetPosition value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinical.vo.lookups.TourniquetPosition getValue()
					{
						return (ims.clinical.vo.lookups.TourniquetPosition)super.control.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.TourniquetPosition value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbDiathermyPlateComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinical.vo.lookups.DiathermyType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinical.vo.lookups.DiathermyType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinical.vo.lookups.DiathermyType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinical.vo.lookups.DiathermyType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinical.vo.lookups.DiathermyType value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinical.vo.lookups.DiathermyType getValue()
					{
						return (ims.clinical.vo.lookups.DiathermyType)super.control.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.DiathermyType value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbDiathermyPlateSite2ComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinical.vo.lookups.DiathermyType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinical.vo.lookups.DiathermyType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinical.vo.lookups.DiathermyType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinical.vo.lookups.DiathermyType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinical.vo.lookups.DiathermyType value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinical.vo.lookups.DiathermyType getValue()
					{
						return (ims.clinical.vo.lookups.DiathermyType)super.control.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.DiathermyType value)
					{
						super.control.setValue(value);
					}
				}
				public static class grdPositionRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdPositionRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolPositionReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolPositionReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolPositionOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolPosition()
					{
						return (String)super.row.get(0);
					}
					public void setcolPosition(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolPositionTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolSelectReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolSelectReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolSelectOpened()
					{
						super.row.showOpened(1);
					}
					public boolean getcolSelect()
					{
						return ((Boolean)super.row.get(1)).booleanValue();
					}
					public void setcolSelect(boolean value)
					{
						super.row.set(1, new Boolean(value));
					}
					public void setCellcolSelectTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public ims.core.vo.lookups.PatientPosition getValue()
					{
						return (ims.core.vo.lookups.PatientPosition)super.row.getValue();
					}
					public void setValue(ims.core.vo.lookups.PatientPosition value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdPositionRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdPositionRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdPositionRow get(int index)
					{
						return new grdPositionRow(super.collection.get(index));
					}
					public grdPositionRow newRow()
					{
						return new grdPositionRow(super.collection.newRow());
					}
					public grdPositionRow newRow(boolean autoSelect)
					{
						return new grdPositionRow(super.collection.newRow(autoSelect));
					}
					public grdPositionRow newRowAt(int index)
					{
						return new grdPositionRow(super.collection.newRowAt(index));
					}
					public grdPositionRow newRowAt(int index, boolean autoSelect)
					{
						return new grdPositionRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdPositionGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.core.vo.lookups.PatientPosition[] getValues()
					{
						ims.core.vo.lookups.PatientPosition[] listOfValues = new ims.core.vo.lookups.PatientPosition[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.core.vo.lookups.PatientPosition getValue()
					{
						return (ims.core.vo.lookups.PatientPosition)super.grid.getValue();
					}
					public void setValue(ims.core.vo.lookups.PatientPosition value)
					{
						super.grid.setValue(value);
					}
					public grdPositionRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdPositionRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdPositionRowCollection getRows()
					{
						return new grdPositionRowCollection(super.grid.getRows());
					}
					public grdPositionRow getRowByValue(ims.core.vo.lookups.PatientPosition value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdPositionRow(row);
					}
					public void setcolPositionHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolPositionHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolSelectHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolSelectHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
				}
				public static class grdTableRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdTableRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolTableReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolTableReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolTableOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolTable()
					{
						return (String)super.row.get(0);
					}
					public void setcolTable(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolTableTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolSelectReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolSelectReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolSelectOpened()
					{
						super.row.showOpened(1);
					}
					public boolean getcolSelect()
					{
						return ((Boolean)super.row.get(1)).booleanValue();
					}
					public void setcolSelect(boolean value)
					{
						super.row.set(1, new Boolean(value));
					}
					public void setCellcolSelectTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setcolOtherReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean iscolOtherReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showcolOtherOpened()
					{
						super.row.showOpened(2);
					}
					public String getcolOther()
					{
						return (String)super.row.get(2);
					}
					public void setcolOther(String value)
					{
						super.row.set(2, value);
					}
					public void setCellcolOtherTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public ims.clinical.vo.lookups.TableDevices getValue()
					{
						return (ims.clinical.vo.lookups.TableDevices)super.row.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.TableDevices value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdTableRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdTableRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdTableRow get(int index)
					{
						return new grdTableRow(super.collection.get(index));
					}
					public grdTableRow newRow()
					{
						return new grdTableRow(super.collection.newRow());
					}
					public grdTableRow newRow(boolean autoSelect)
					{
						return new grdTableRow(super.collection.newRow(autoSelect));
					}
					public grdTableRow newRowAt(int index)
					{
						return new grdTableRow(super.collection.newRowAt(index));
					}
					public grdTableRow newRowAt(int index, boolean autoSelect)
					{
						return new grdTableRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdTableGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.clinical.vo.lookups.TableDevices[] getValues()
					{
						ims.clinical.vo.lookups.TableDevices[] listOfValues = new ims.clinical.vo.lookups.TableDevices[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.clinical.vo.lookups.TableDevices getValue()
					{
						return (ims.clinical.vo.lookups.TableDevices)super.grid.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.TableDevices value)
					{
						super.grid.setValue(value);
					}
					public grdTableRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdTableRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdTableRowCollection getRows()
					{
						return new grdTableRowCollection(super.grid.getRows());
					}
					public grdTableRow getRowByValue(ims.clinical.vo.lookups.TableDevices value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdTableRow(row);
					}
					public void setcolTableHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolTableHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolSelectHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolSelectHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setcolOtherHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getcolOtherHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
				}
				public static class grdDressingsRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdDressingsRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolDressingReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolDressingReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolDressingOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolDressing()
					{
						return (String)super.row.get(0);
					}
					public void setcolDressing(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolDressingTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolSelectReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolSelectReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolSelectOpened()
					{
						super.row.showOpened(1);
					}
					public boolean getcolSelect()
					{
						return ((Boolean)super.row.get(1)).booleanValue();
					}
					public void setcolSelect(boolean value)
					{
						super.row.set(1, new Boolean(value));
					}
					public void setCellcolSelectTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public ims.clinical.vo.lookups.Dressing getValue()
					{
						return (ims.clinical.vo.lookups.Dressing)super.row.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.Dressing value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdDressingsRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdDressingsRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdDressingsRow get(int index)
					{
						return new grdDressingsRow(super.collection.get(index));
					}
					public grdDressingsRow newRow()
					{
						return new grdDressingsRow(super.collection.newRow());
					}
					public grdDressingsRow newRow(boolean autoSelect)
					{
						return new grdDressingsRow(super.collection.newRow(autoSelect));
					}
					public grdDressingsRow newRowAt(int index)
					{
						return new grdDressingsRow(super.collection.newRowAt(index));
					}
					public grdDressingsRow newRowAt(int index, boolean autoSelect)
					{
						return new grdDressingsRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdDressingsGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.clinical.vo.lookups.Dressing[] getValues()
					{
						ims.clinical.vo.lookups.Dressing[] listOfValues = new ims.clinical.vo.lookups.Dressing[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.clinical.vo.lookups.Dressing getValue()
					{
						return (ims.clinical.vo.lookups.Dressing)super.grid.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.Dressing value)
					{
						super.grid.setValue(value);
					}
					public grdDressingsRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdDressingsRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdDressingsRowCollection getRows()
					{
						return new grdDressingsRowCollection(super.grid.getRows());
					}
					public grdDressingsRow getRowByValue(ims.clinical.vo.lookups.Dressing value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdDressingsRow(row);
					}
					public void setcolDressingHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolDressingHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolSelectHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolSelectHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
				}
				public static class grdSkinClosureRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdSkinClosureRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolSkinClosureReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolSkinClosureReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolSkinClosureOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolSkinClosure()
					{
						return (String)super.row.get(0);
					}
					public void setcolSkinClosure(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolSkinClosureTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolSelectReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolSelectReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolSelectOpened()
					{
						super.row.showOpened(1);
					}
					public boolean getcolSelect()
					{
						return ((Boolean)super.row.get(1)).booleanValue();
					}
					public void setcolSelect(boolean value)
					{
						super.row.set(1, new Boolean(value));
					}
					public void setCellcolSelectTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public ims.clinical.vo.lookups.SkinClosure getValue()
					{
						return (ims.clinical.vo.lookups.SkinClosure)super.row.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.SkinClosure value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdSkinClosureRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdSkinClosureRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdSkinClosureRow get(int index)
					{
						return new grdSkinClosureRow(super.collection.get(index));
					}
					public grdSkinClosureRow newRow()
					{
						return new grdSkinClosureRow(super.collection.newRow());
					}
					public grdSkinClosureRow newRow(boolean autoSelect)
					{
						return new grdSkinClosureRow(super.collection.newRow(autoSelect));
					}
					public grdSkinClosureRow newRowAt(int index)
					{
						return new grdSkinClosureRow(super.collection.newRowAt(index));
					}
					public grdSkinClosureRow newRowAt(int index, boolean autoSelect)
					{
						return new grdSkinClosureRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdSkinClosureGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.clinical.vo.lookups.SkinClosure[] getValues()
					{
						ims.clinical.vo.lookups.SkinClosure[] listOfValues = new ims.clinical.vo.lookups.SkinClosure[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.clinical.vo.lookups.SkinClosure getValue()
					{
						return (ims.clinical.vo.lookups.SkinClosure)super.grid.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.SkinClosure value)
					{
						super.grid.setValue(value);
					}
					public grdSkinClosureRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdSkinClosureRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdSkinClosureRowCollection getRows()
					{
						return new grdSkinClosureRowCollection(super.grid.getRows());
					}
					public grdSkinClosureRow getRowByValue(ims.clinical.vo.lookups.SkinClosure value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdSkinClosureRow(row);
					}
					public void setcolSkinClosureHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolSkinClosureHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolSelectHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolSelectHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
				}
				public static class grdSkinPreparationRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdSkinPreparationRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolSkinPrepationReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolSkinPrepationReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolSkinPrepationOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolSkinPrepation()
					{
						return (String)super.row.get(0);
					}
					public void setcolSkinPrepation(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolSkinPrepationTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolSelectReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolSelectReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolSelectOpened()
					{
						super.row.showOpened(1);
					}
					public boolean getcolSelect()
					{
						return ((Boolean)super.row.get(1)).booleanValue();
					}
					public void setcolSelect(boolean value)
					{
						super.row.set(1, new Boolean(value));
					}
					public void setCellcolSelectTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setcolOtherReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean iscolOtherReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showcolOtherOpened()
					{
						super.row.showOpened(2);
					}
					public String getcolOther()
					{
						return (String)super.row.get(2);
					}
					public void setcolOther(String value)
					{
						super.row.set(2, value);
					}
					public void setCellcolOtherTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public ims.clinical.vo.lookups.SkinPreparationused getValue()
					{
						return (ims.clinical.vo.lookups.SkinPreparationused)super.row.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.SkinPreparationused value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdSkinPreparationRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdSkinPreparationRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdSkinPreparationRow get(int index)
					{
						return new grdSkinPreparationRow(super.collection.get(index));
					}
					public grdSkinPreparationRow newRow()
					{
						return new grdSkinPreparationRow(super.collection.newRow());
					}
					public grdSkinPreparationRow newRow(boolean autoSelect)
					{
						return new grdSkinPreparationRow(super.collection.newRow(autoSelect));
					}
					public grdSkinPreparationRow newRowAt(int index)
					{
						return new grdSkinPreparationRow(super.collection.newRowAt(index));
					}
					public grdSkinPreparationRow newRowAt(int index, boolean autoSelect)
					{
						return new grdSkinPreparationRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdSkinPreparationGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.clinical.vo.lookups.SkinPreparationused[] getValues()
					{
						ims.clinical.vo.lookups.SkinPreparationused[] listOfValues = new ims.clinical.vo.lookups.SkinPreparationused[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.clinical.vo.lookups.SkinPreparationused getValue()
					{
						return (ims.clinical.vo.lookups.SkinPreparationused)super.grid.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.SkinPreparationused value)
					{
						super.grid.setValue(value);
					}
					public grdSkinPreparationRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdSkinPreparationRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdSkinPreparationRowCollection getRows()
					{
						return new grdSkinPreparationRowCollection(super.grid.getRows());
					}
					public grdSkinPreparationRow getRowByValue(ims.clinical.vo.lookups.SkinPreparationused value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdSkinPreparationRow(row);
					}
					public void setcolSkinPrepationHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolSkinPrepationHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolSelectHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolSelectHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setcolOtherHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getcolOtherHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
				}
			
				public static class NationalRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 684, 1353, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper47.getX(), anchoringHelper47.getY(), anchoringHelper47.getWidth(), "No", startTabIndex.intValue() + 12150);
						RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 640, 1353, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper48.getX(), anchoringHelper48.getY(), anchoringHelper48.getWidth(), "Yes", startTabIndex.intValue() + 12148);
					}
					public void setText(NationalEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public NationalEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return NationalEnumeration.None;
							case 0: return NationalEnumeration.rdoNationalNo;
							case 1: return NationalEnumeration.rdoNationalYes;
						}
						return null;
					}
					public void setValue(NationalEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(NationalEnumeration.None.id);
					}
					public boolean isEnabled(NationalEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(NationalEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(NationalEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(NationalEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class NationalEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static NationalEnumeration None = new NationalEnumeration(-1);
					public static NationalEnumeration rdoNationalNo = new NationalEnumeration(0);
					public static NationalEnumeration rdoNationalYes = new NationalEnumeration(1);
					private NationalEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((NationalEnumeration)o).id;
					}
					private int id;
				}
			
				public static class InstrumentCorrectRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 220, 1305, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper49.getX(), anchoringHelper49.getY(), anchoringHelper49.getWidth(), "No", startTabIndex.intValue() + 10140);
						RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 172, 1305, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper50.getX(), anchoringHelper50.getY(), anchoringHelper50.getWidth(), "Yes", startTabIndex.intValue() + 10139);
					}
					public void setText(InstrumentCorrectEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public InstrumentCorrectEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return InstrumentCorrectEnumeration.None;
							case 0: return InstrumentCorrectEnumeration.rdoInstrumentCorrectNo;
							case 1: return InstrumentCorrectEnumeration.rdoInstrumentCorrectYes;
						}
						return null;
					}
					public void setValue(InstrumentCorrectEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(InstrumentCorrectEnumeration.None.id);
					}
					public boolean isEnabled(InstrumentCorrectEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(InstrumentCorrectEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(InstrumentCorrectEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(InstrumentCorrectEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class InstrumentCorrectEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static InstrumentCorrectEnumeration None = new InstrumentCorrectEnumeration(-1);
					public static InstrumentCorrectEnumeration rdoInstrumentCorrectNo = new InstrumentCorrectEnumeration(0);
					public static InstrumentCorrectEnumeration rdoInstrumentCorrectYes = new InstrumentCorrectEnumeration(1);
					private InstrumentCorrectEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((InstrumentCorrectEnumeration)o).id;
					}
					private int id;
				}
			
				public static class NeedleCorrectRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 220, 1329, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper51.getX(), anchoringHelper51.getY(), anchoringHelper51.getWidth(), "No", startTabIndex.intValue() + 10142);
						RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 172, 1329, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper52.getX(), anchoringHelper52.getY(), anchoringHelper52.getWidth(), "Yes", startTabIndex.intValue() + 10141);
					}
					public void setText(NeedleCorrectEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public NeedleCorrectEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return NeedleCorrectEnumeration.None;
							case 0: return NeedleCorrectEnumeration.rdoNeedleCorrectNo;
							case 1: return NeedleCorrectEnumeration.rdoNeedleCorrectYes;
						}
						return null;
					}
					public void setValue(NeedleCorrectEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(NeedleCorrectEnumeration.None.id);
					}
					public boolean isEnabled(NeedleCorrectEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(NeedleCorrectEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(NeedleCorrectEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(NeedleCorrectEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class NeedleCorrectEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static NeedleCorrectEnumeration None = new NeedleCorrectEnumeration(-1);
					public static NeedleCorrectEnumeration rdoNeedleCorrectNo = new NeedleCorrectEnumeration(0);
					public static NeedleCorrectEnumeration rdoNeedleCorrectYes = new NeedleCorrectEnumeration(1);
					private NeedleCorrectEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((NeedleCorrectEnumeration)o).id;
					}
					private int id;
				}
			
				public static class CorrectRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 220, 1281, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper53.getX(), anchoringHelper53.getY(), anchoringHelper53.getWidth(), "No", startTabIndex.intValue() + 10137);
						RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 172, 1281, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper54.getX(), anchoringHelper54.getY(), anchoringHelper54.getWidth(), "Yes", startTabIndex.intValue() + 10135);
					}
					public void setText(CorrectEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public CorrectEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return CorrectEnumeration.None;
							case 0: return CorrectEnumeration.rdoCorrectNo;
							case 1: return CorrectEnumeration.rdoCorrectYes;
						}
						return null;
					}
					public void setValue(CorrectEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(CorrectEnumeration.None.id);
					}
					public boolean isEnabled(CorrectEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(CorrectEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(CorrectEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(CorrectEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class CorrectEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static CorrectEnumeration None = new CorrectEnumeration(-1);
					public static CorrectEnumeration rdoCorrectNo = new CorrectEnumeration(0);
					public static CorrectEnumeration rdoCorrectYes = new CorrectEnumeration(1);
					private CorrectEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((CorrectEnumeration)o).id;
					}
					private int id;
				}
			
				public static class SuturedRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 728, 1011, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						control.addButton(0, anchoringHelper55.getX(), anchoringHelper55.getY(), anchoringHelper55.getWidth(), "No", startTabIndex.intValue() + 10114);
						RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 688, 1011, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						control.addButton(1, anchoringHelper56.getX(), anchoringHelper56.getY(), anchoringHelper56.getWidth(), "Yes", startTabIndex.intValue() + 10113);
					}
					public void setText(SuturedEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public SuturedEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return SuturedEnumeration.None;
							case 0: return SuturedEnumeration.rdoSuturedNo;
							case 1: return SuturedEnumeration.rdoSuturedYes;
						}
						return null;
					}
					public void setValue(SuturedEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(SuturedEnumeration.None.id);
					}
					public boolean isEnabled(SuturedEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(SuturedEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(SuturedEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(SuturedEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class SuturedEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static SuturedEnumeration None = new SuturedEnumeration(-1);
					public static SuturedEnumeration rdoSuturedNo = new SuturedEnumeration(0);
					public static SuturedEnumeration rdoSuturedYes = new SuturedEnumeration(1);
					private SuturedEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((SuturedEnumeration)o).id;
					}
					private int id;
				}
			
				public static class DrainsRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 552, 1011, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper57.getX(), anchoringHelper57.getY(), anchoringHelper57.getWidth(), "No", startTabIndex.intValue() + 10111);
						RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 512, 1011, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper58.getX(), anchoringHelper58.getY(), anchoringHelper58.getWidth(), "Yes", startTabIndex.intValue() + 10109);
					}
					public void setText(DrainsEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public DrainsEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return DrainsEnumeration.None;
							case 0: return DrainsEnumeration.rdoDrainsNo;
							case 1: return DrainsEnumeration.rdoDrainsYes;
						}
						return null;
					}
					public void setValue(DrainsEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(DrainsEnumeration.None.id);
					}
					public boolean isEnabled(DrainsEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(DrainsEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(DrainsEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(DrainsEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class DrainsEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static DrainsEnumeration None = new DrainsEnumeration(-1);
					public static DrainsEnumeration rdoDrainsNo = new DrainsEnumeration(0);
					public static DrainsEnumeration rdoDrainsYes = new DrainsEnumeration(1);
					private DrainsEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((DrainsEnumeration)o).id;
					}
					private int id;
				}
			
				public static class SkinShavedRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 139, 408, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper59.getX(), anchoringHelper59.getY(), anchoringHelper59.getWidth(), "No", startTabIndex.intValue() + 10079);
						RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 99, 408, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper60.getX(), anchoringHelper60.getY(), anchoringHelper60.getWidth(), "Yes", startTabIndex.intValue() + 10077);
					}
					public void setText(SkinShavedEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public SkinShavedEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return SkinShavedEnumeration.None;
							case 0: return SkinShavedEnumeration.rdoNo;
							case 1: return SkinShavedEnumeration.rdoYes;
						}
						return null;
					}
					public void setValue(SkinShavedEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(SkinShavedEnumeration.None.id);
					}
					public boolean isEnabled(SkinShavedEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(SkinShavedEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(SkinShavedEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(SkinShavedEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class SkinShavedEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static SkinShavedEnumeration None = new SkinShavedEnumeration(-1);
					public static SkinShavedEnumeration rdoNo = new SkinShavedEnumeration(0);
					public static SkinShavedEnumeration rdoYes = new SkinShavedEnumeration(1);
					private SkinShavedEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((SkinShavedEnumeration)o).id;
					}
					private int id;
				}
			
				public static class SkinIntactRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 284, 409, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper61.getX(), anchoringHelper61.getY(), anchoringHelper61.getWidth(), "No", startTabIndex.intValue() + 10083);
						RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 244, 409, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper62.getX(), anchoringHelper62.getY(), anchoringHelper62.getWidth(), "Yes", startTabIndex.intValue() + 10081);
					}
					public void setText(SkinIntactEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public SkinIntactEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return SkinIntactEnumeration.None;
							case 0: return SkinIntactEnumeration.rdoNoS;
							case 1: return SkinIntactEnumeration.rdoYesS;
						}
						return null;
					}
					public void setValue(SkinIntactEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(SkinIntactEnumeration.None.id);
					}
					public boolean isEnabled(SkinIntactEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(SkinIntactEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(SkinIntactEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(SkinIntactEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class SkinIntactEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static SkinIntactEnumeration None = new SkinIntactEnumeration(-1);
					public static SkinIntactEnumeration rdoNoS = new SkinIntactEnumeration(0);
					public static SkinIntactEnumeration rdoYesS = new SkinIntactEnumeration(1);
					private SkinIntactEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((SkinIntactEnumeration)o).id;
					}
					private int id;
				}
			
				public static class SkinShaved2RadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 477, 408, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper63.getX(), anchoringHelper63.getY(), anchoringHelper63.getWidth(), "No", startTabIndex.intValue() + 10091);
						RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 434, 408, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper64.getX(), anchoringHelper64.getY(), anchoringHelper64.getWidth(), "Yes", startTabIndex.intValue() + 10090);
					}
					public void setText(SkinShaved2Enumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public SkinShaved2Enumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return SkinShaved2Enumeration.None;
							case 0: return SkinShaved2Enumeration.rdoNoSS;
							case 1: return SkinShaved2Enumeration.rdoYesSS;
						}
						return null;
					}
					public void setValue(SkinShaved2Enumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(SkinShaved2Enumeration.None.id);
					}
					public boolean isEnabled(SkinShaved2Enumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(SkinShaved2Enumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(SkinShaved2Enumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(SkinShaved2Enumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class SkinShaved2Enumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static SkinShaved2Enumeration None = new SkinShaved2Enumeration(-1);
					public static SkinShaved2Enumeration rdoNoSS = new SkinShaved2Enumeration(0);
					public static SkinShaved2Enumeration rdoYesSS = new SkinShaved2Enumeration(1);
					private SkinShaved2Enumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((SkinShaved2Enumeration)o).id;
					}
					private int id;
				}
			
				public static class SkinIntact2RadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 736, 409, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						control.addButton(0, anchoringHelper65.getX(), anchoringHelper65.getY(), anchoringHelper65.getWidth(), "No", startTabIndex.intValue() + 10093);
						RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 696, 409, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						control.addButton(1, anchoringHelper66.getX(), anchoringHelper66.getY(), anchoringHelper66.getWidth(), "Yes", startTabIndex.intValue() + 10092);
					}
					public void setText(SkinIntact2Enumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public SkinIntact2Enumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return SkinIntact2Enumeration.None;
							case 0: return SkinIntact2Enumeration.rdoNoSSS;
							case 1: return SkinIntact2Enumeration.rdoYesSSS;
						}
						return null;
					}
					public void setValue(SkinIntact2Enumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(SkinIntact2Enumeration.None.id);
					}
					public boolean isEnabled(SkinIntact2Enumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(SkinIntact2Enumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(SkinIntact2Enumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(SkinIntact2Enumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class SkinIntact2Enumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static SkinIntact2Enumeration None = new SkinIntact2Enumeration(-1);
					public static SkinIntact2Enumeration rdoNoSSS = new SkinIntact2Enumeration(0);
					public static SkinIntact2Enumeration rdoYesSSS = new SkinIntact2Enumeration(1);
					private SkinIntact2Enumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((SkinIntact2Enumeration)o).id;
					}
					private int id;
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Panel Controls
					RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 392, 1257, 392, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"National Joint Registry", new Integer(2), ""}));
					RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 4, 144, 324, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Limbcare", new Integer(2), ""}));
					RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 4, 1257, 380, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Swabs Count/ Instrument Count/ Needle Count", new Integer(2), ""}));
					RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 336, 144, 448, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Catheter", new Integer(2), ""}));
					RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 392, 1122, 392, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Specimens", new Integer(2), ""}));
					RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 392, 979, 392, 136, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Drains", new Integer(2), ""}));
					RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 4, 493, 780, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Tourniquet", new Integer(2), ""}));
					RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 4, 328, 324, 158, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Diathermy Plate Site 1", new Integer(2), ""}));
					RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 336, 328, 448, 158, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Diathermy Plate Site 2", new Integer(2), ""}));
			
					// Custom Controls
					ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 520, 1377, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ims.framework.FormUiLogic m_ccCompletedByForm = loader.loadComponent(102256, appForm, startControlID * 10 + 10000, anchoringHelper76.getSize(), instance1, startTabIndex.intValue() + 12152, skipContextValidation);
					//ims.framework.Control m_ccCompletedByControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(520), new Integer(1377), new Integer(256), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 12152), m_ccCompletedByForm, instance1 } );
					ims.framework.Control m_ccCompletedByControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1064),  new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 12152), m_ccCompletedByForm, instance1, Boolean.FALSE } );
					super.addControl(m_ccCompletedByControl);
					Menu[] menus1 = m_ccCompletedByForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus1.length; x++)
					{
						form.registerMenu(menus1[x]);
					}
					ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 124, 1439, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ims.framework.FormUiLogic m_ccSCNurseForm = loader.loadComponent(102256, appForm, startControlID * 10 + 11000, anchoringHelper77.getSize(), instance2, startTabIndex.intValue() + 11147, skipContextValidation);
					//ims.framework.Control m_ccSCNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(124), new Integer(1439), new Integer(264), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 11147), m_ccSCNurseForm, instance2 } );
					ims.framework.Control m_ccSCNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1066),  new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 11147), m_ccSCNurseForm, instance2, Boolean.FALSE } );
					super.addControl(m_ccSCNurseControl);
					Menu[] menus2 = m_ccSCNurseForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus2.length; x++)
					{
						form.registerMenu(menus2[x]);
					}
					ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 124, 1415, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ims.framework.FormUiLogic m_ccSwabScrubNurseForm = loader.loadComponent(102256, appForm, startControlID * 10 + 12000, anchoringHelper78.getSize(), instance3, startTabIndex.intValue() + 10145, skipContextValidation);
					//ims.framework.Control m_ccSwabScrubNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(124), new Integer(1415), new Integer(264), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 10145), m_ccSwabScrubNurseForm, instance3 } );
					ims.framework.Control m_ccSwabScrubNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1068),  new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 10145), m_ccSwabScrubNurseForm, instance3, Boolean.FALSE } );
					super.addControl(m_ccSwabScrubNurseControl);
					Menu[] menus3 = m_ccSwabScrubNurseForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus3.length; x++)
					{
						form.registerMenu(menus3[x]);
					}
					ims.framework.CustomComponent instance4 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 512, 176, 272, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ims.framework.FormUiLogic m_ccCatherterInsertedByForm = loader.loadComponent(102256, appForm, startControlID * 10 + 13000, anchoringHelper79.getSize(), instance4, startTabIndex.intValue() + 9061, skipContextValidation);
					//ims.framework.Control m_ccCatherterInsertedByControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(512), new Integer(176), new Integer(272), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 9061), m_ccCatherterInsertedByForm, instance4 } );
					ims.framework.Control m_ccCatherterInsertedByControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1070),  new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 9061), m_ccCatherterInsertedByForm, instance4, Boolean.TRUE } );
					super.addControl(m_ccCatherterInsertedByControl);
					Menu[] menus4 = m_ccCatherterInsertedByForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus4.length; x++)
					{
						form.registerMenu(menus4[x]);
					}
			
					// Label Controls
					RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 384, 1512, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 424, 1379, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Completed by:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 424, 1353, 203, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "National Joint Registry Completed:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 19, 219, 143, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Secured by patients side", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 19, 267, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Gel Pad", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 19, 251, 167, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DVT Prophylaxis / Flowtrons", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 204, 171, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Right", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 180, 171, 26, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Left", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 19, 203, 166, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Folded across patients chest", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 19, 187, 166, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Padded arm support / Board", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 12, 235, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Legs", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 12, 171, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Arms", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 12, 1353, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 12, 1305, 159, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Instrument Count Correct :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 12, 1329, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Needle Count Correct :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 12, 1441, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Scrub Nurse:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 12, 1417, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Circulating Nurse :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 12, 1281, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Swab Count Correct :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 344, 290, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Catheter Out Time:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 344, 265, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Catheter In Time:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 344, 200, 146, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Difficulty With Insertion:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 344, 176, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Catheter Inserted:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 344, 242, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mls of water in balloon :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 424, 1150, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specimen Type:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 424, 1202, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cytology", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 560, 1202, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Haematology", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 664, 1202, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Microbiology", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 424, 1186, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Histopathology", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 424, 1037, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type of Drain:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 624, 1012, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Sutured :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 424, 1012, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Drains:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 733, 1067, 21, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mls", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 688, 1067, 14, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "or", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 648, 1067, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Yes", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 552, 1067, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Minimal < = 100mls", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 424, 1067, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated Blood Loss :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 12, 618, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time Off:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 12, 591, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time On:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper118 = new RuntimeAnchoring(designSize, runtimeSize, 12, 567, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper118.getX()), new Integer(anchoringHelper118.getY()), new Integer(anchoringHelper118.getWidth()), new Integer(anchoringHelper118.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pressure:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper119 = new RuntimeAnchoring(designSize, runtimeSize, 12, 543, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper119.getX()), new Integer(anchoringHelper119.getY()), new Integer(anchoringHelper119.getWidth()), new Integer(anchoringHelper119.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Position:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper120 = new RuntimeAnchoring(designSize, runtimeSize, 12, 520, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper120.getX()), new Integer(anchoringHelper120.getY()), new Integer(anchoringHelper120.getWidth()), new Integer(anchoringHelper120.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tourniquet", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper121 = new RuntimeAnchoring(designSize, runtimeSize, 12, 387, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper121.getX()), new Integer(anchoringHelper121.getY()), new Integer(anchoringHelper121.getWidth()), new Integer(anchoringHelper121.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plate Site 1:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper122 = new RuntimeAnchoring(designSize, runtimeSize, 12, 371, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper122.getX()), new Integer(anchoringHelper122.getY()), new Integer(anchoringHelper122.getWidth()), new Integer(anchoringHelper122.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diathermy", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper123 = new RuntimeAnchoring(designSize, runtimeSize, 177, 410, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper123.getX()), new Integer(anchoringHelper123.getY()), new Integer(anchoringHelper123.getWidth()), new Integer(anchoringHelper123.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Skin intact :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper124 = new RuntimeAnchoring(designSize, runtimeSize, 12, 410, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper124.getX()), new Integer(anchoringHelper124.getY()), new Integer(anchoringHelper124.getWidth()), new Integer(anchoringHelper124.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Skin Shaved :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper125 = new RuntimeAnchoring(designSize, runtimeSize, 12, 434, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper125.getX()), new Integer(anchoringHelper125.getY()), new Integer(anchoringHelper125.getWidth()), new Integer(anchoringHelper125.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plate Position:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper126 = new RuntimeAnchoring(designSize, runtimeSize, 346, 392, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(anchoringHelper126.getX()), new Integer(anchoringHelper126.getY()), new Integer(anchoringHelper126.getWidth()), new Integer(anchoringHelper126.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plate Site 2:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper127 = new RuntimeAnchoring(designSize, runtimeSize, 346, 376, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1118), new Integer(anchoringHelper127.getX()), new Integer(anchoringHelper127.getY()), new Integer(anchoringHelper127.getWidth()), new Integer(anchoringHelper127.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diathermy", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper128 = new RuntimeAnchoring(designSize, runtimeSize, 616, 411, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1119), new Integer(anchoringHelper128.getX()), new Integer(anchoringHelper128.getY()), new Integer(anchoringHelper128.getWidth()), new Integer(anchoringHelper128.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Skin intact :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper129 = new RuntimeAnchoring(designSize, runtimeSize, 344, 410, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1120), new Integer(anchoringHelper129.getX()), new Integer(anchoringHelper129.getY()), new Integer(anchoringHelper129.getWidth()), new Integer(anchoringHelper129.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Skin Shaved :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper130 = new RuntimeAnchoring(designSize, runtimeSize, 344, 434, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1121), new Integer(anchoringHelper130.getX()), new Integer(anchoringHelper130.getY()), new Integer(anchoringHelper130.getWidth()), new Integer(anchoringHelper130.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plate Position:", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper131 = new RuntimeAnchoring(designSize, runtimeSize, 124, 1353, 248, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1122), new Integer(anchoringHelper131.getX()), new Integer(anchoringHelper131.getY()), new Integer(anchoringHelper131.getWidth()), new Integer(anchoringHelper131.getHeight()), new Integer(startTabIndex.intValue() + 10143), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper132 = new RuntimeAnchoring(designSize, runtimeSize, 512, 200, 256, 34, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1123), new Integer(anchoringHelper132.getX()), new Integer(anchoringHelper132.getY()), new Integer(anchoringHelper132.getWidth()), new Integer(anchoringHelper132.getHeight()), new Integer(startTabIndex.intValue() + 10065), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper133 = new RuntimeAnchoring(designSize, runtimeSize, 520, 1146, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1124), new Integer(anchoringHelper133.getX()), new Integer(anchoringHelper133.getY()), new Integer(anchoringHelper133.getWidth()), new Integer(anchoringHelper133.getHeight()), new Integer(startTabIndex.intValue() + 10122), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper134 = new RuntimeAnchoring(designSize, runtimeSize, 512, 1035, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1125), new Integer(anchoringHelper134.getX()), new Integer(anchoringHelper134.getY()), new Integer(anchoringHelper134.getWidth()), new Integer(anchoringHelper134.getHeight()), new Integer(startTabIndex.intValue() + 10115), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper135 = new RuntimeAnchoring(designSize, runtimeSize, 100, 432, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1126), new Integer(anchoringHelper135.getX()), new Integer(anchoringHelper135.getY()), new Integer(anchoringHelper135.getWidth()), new Integer(anchoringHelper135.getHeight()), new Integer(startTabIndex.intValue() + 10085), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper136 = new RuntimeAnchoring(designSize, runtimeSize, 434, 432, 334, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1127), new Integer(anchoringHelper136.getX()), new Integer(anchoringHelper136.getY()), new Integer(anchoringHelper136.getWidth()), new Integer(anchoringHelper136.getHeight()), new Integer(startTabIndex.intValue() + 10095), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// Date Time Controls
					RuntimeAnchoring anchoringHelper137 = new RuntimeAnchoring(designSize, runtimeSize, 512, 284, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1128), new Integer(anchoringHelper137.getX()), new Integer(anchoringHelper137.getY()), new Integer(anchoringHelper137.getWidth()), new Integer(anchoringHelper137.getHeight()), new Integer(startTabIndex.intValue() + 10071), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper138 = new RuntimeAnchoring(designSize, runtimeSize, 512, 263, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1129), new Integer(anchoringHelper138.getX()), new Integer(anchoringHelper138.getY()), new Integer(anchoringHelper138.getWidth()), new Integer(anchoringHelper138.getHeight()), new Integer(startTabIndex.intValue() + 10069), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper139 = new RuntimeAnchoring(designSize, runtimeSize, 68, 614, 708, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1130), new Integer(anchoringHelper139.getX()), new Integer(anchoringHelper139.getY()), new Integer(anchoringHelper139.getWidth()), new Integer(anchoringHelper139.getHeight()), new Integer(startTabIndex.intValue() + 10102), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper140 = new RuntimeAnchoring(designSize, runtimeSize, 68, 589, 708, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1131), new Integer(anchoringHelper140.getX()), new Integer(anchoringHelper140.getY()), new Integer(anchoringHelper140.getWidth()), new Integer(anchoringHelper140.getHeight()), new Integer(startTabIndex.intValue() + 10101), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper141 = new RuntimeAnchoring(designSize, runtimeSize, 68, 565, 708, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbPresureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1132), new Integer(anchoringHelper141.getX()), new Integer(anchoringHelper141.getY()), new Integer(anchoringHelper141.getWidth()), new Integer(anchoringHelper141.getHeight()), new Integer(startTabIndex.intValue() + 10100), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbPresureTemp);
					cmbPresureComboBox cmbPresure = (cmbPresureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPresureComboBox.class, m_cmbPresureTemp);
					super.addComboBox(cmbPresure);
					RuntimeAnchoring anchoringHelper142 = new RuntimeAnchoring(designSize, runtimeSize, 68, 541, 708, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbPositionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1133), new Integer(anchoringHelper142.getX()), new Integer(anchoringHelper142.getY()), new Integer(anchoringHelper142.getWidth()), new Integer(anchoringHelper142.getHeight()), new Integer(startTabIndex.intValue() + 10098), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbPositionTemp);
					cmbPositionComboBox cmbPosition = (cmbPositionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPositionComboBox.class, m_cmbPositionTemp);
					super.addComboBox(cmbPosition);
					RuntimeAnchoring anchoringHelper143 = new RuntimeAnchoring(designSize, runtimeSize, 100, 376, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbDiathermyPlateTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1134), new Integer(anchoringHelper143.getX()), new Integer(anchoringHelper143.getY()), new Integer(anchoringHelper143.getWidth()), new Integer(anchoringHelper143.getHeight()), new Integer(startTabIndex.intValue() + 10074), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbDiathermyPlateTemp);
					cmbDiathermyPlateComboBox cmbDiathermyPlate = (cmbDiathermyPlateComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDiathermyPlateComboBox.class, m_cmbDiathermyPlateTemp);
					super.addComboBox(cmbDiathermyPlate);
					RuntimeAnchoring anchoringHelper144 = new RuntimeAnchoring(designSize, runtimeSize, 434, 376, 334, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbDiathermyPlateSite2Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1135), new Integer(anchoringHelper144.getX()), new Integer(anchoringHelper144.getY()), new Integer(anchoringHelper144.getWidth()), new Integer(anchoringHelper144.getHeight()), new Integer(startTabIndex.intValue() + 10087), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbDiathermyPlateSite2Temp);
					cmbDiathermyPlateSite2ComboBox cmbDiathermyPlateSite2 = (cmbDiathermyPlateSite2ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDiathermyPlateSite2ComboBox.class, m_cmbDiathermyPlateSite2Temp);
					super.addComboBox(cmbDiathermyPlateSite2);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper145 = new RuntimeAnchoring(designSize, runtimeSize, 211, 219, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1136), new Integer(anchoringHelper145.getX()), new Integer(anchoringHelper145.getY()), new Integer(anchoringHelper145.getWidth()), new Integer(anchoringHelper145.getHeight()), new Integer(startTabIndex.intValue() + 9046), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper146 = new RuntimeAnchoring(designSize, runtimeSize, 187, 219, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1137), new Integer(anchoringHelper146.getX()), new Integer(anchoringHelper146.getY()), new Integer(anchoringHelper146.getWidth()), new Integer(anchoringHelper146.getHeight()), new Integer(startTabIndex.intValue() + 9044), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper147 = new RuntimeAnchoring(designSize, runtimeSize, 211, 267, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1138), new Integer(anchoringHelper147.getX()), new Integer(anchoringHelper147.getY()), new Integer(anchoringHelper147.getWidth()), new Integer(anchoringHelper147.getHeight()), new Integer(startTabIndex.intValue() + 9055), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper148 = new RuntimeAnchoring(designSize, runtimeSize, 211, 251, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1139), new Integer(anchoringHelper148.getX()), new Integer(anchoringHelper148.getY()), new Integer(anchoringHelper148.getWidth()), new Integer(anchoringHelper148.getHeight()), new Integer(startTabIndex.intValue() + 9051), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper149 = new RuntimeAnchoring(designSize, runtimeSize, 187, 267, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1140), new Integer(anchoringHelper149.getX()), new Integer(anchoringHelper149.getY()), new Integer(anchoringHelper149.getWidth()), new Integer(anchoringHelper149.getHeight()), new Integer(startTabIndex.intValue() + 9053), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper150 = new RuntimeAnchoring(designSize, runtimeSize, 187, 251, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1141), new Integer(anchoringHelper150.getX()), new Integer(anchoringHelper150.getY()), new Integer(anchoringHelper150.getWidth()), new Integer(anchoringHelper150.getHeight()), new Integer(startTabIndex.intValue() + 9049), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper151 = new RuntimeAnchoring(designSize, runtimeSize, 211, 203, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1142), new Integer(anchoringHelper151.getX()), new Integer(anchoringHelper151.getY()), new Integer(anchoringHelper151.getWidth()), new Integer(anchoringHelper151.getHeight()), new Integer(startTabIndex.intValue() + 9042), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper152 = new RuntimeAnchoring(designSize, runtimeSize, 187, 203, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1143), new Integer(anchoringHelper152.getX()), new Integer(anchoringHelper152.getY()), new Integer(anchoringHelper152.getWidth()), new Integer(anchoringHelper152.getHeight()), new Integer(startTabIndex.intValue() + 9040), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper153 = new RuntimeAnchoring(designSize, runtimeSize, 211, 187, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1144), new Integer(anchoringHelper153.getX()), new Integer(anchoringHelper153.getY()), new Integer(anchoringHelper153.getWidth()), new Integer(anchoringHelper153.getHeight()), new Integer(startTabIndex.intValue() + 9038), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper154 = new RuntimeAnchoring(designSize, runtimeSize, 187, 187, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1145), new Integer(anchoringHelper154.getX()), new Integer(anchoringHelper154.getY()), new Integer(anchoringHelper154.getWidth()), new Integer(anchoringHelper154.getHeight()), new Integer(startTabIndex.intValue() + 9036), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper155 = new RuntimeAnchoring(designSize, runtimeSize, 488, 200, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1146), new Integer(anchoringHelper155.getX()), new Integer(anchoringHelper155.getY()), new Integer(anchoringHelper155.getWidth()), new Integer(anchoringHelper155.getHeight()), new Integer(startTabIndex.intValue() + 10063), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper156 = new RuntimeAnchoring(designSize, runtimeSize, 488, 176, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1147), new Integer(anchoringHelper156.getX()), new Integer(anchoringHelper156.getY()), new Integer(anchoringHelper156.getWidth()), new Integer(anchoringHelper156.getHeight()), new Integer(startTabIndex.intValue() + 9058), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper157 = new RuntimeAnchoring(designSize, runtimeSize, 520, 1202, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1148), new Integer(anchoringHelper157.getX()), new Integer(anchoringHelper157.getY()), new Integer(anchoringHelper157.getWidth()), new Integer(anchoringHelper157.getHeight()), new Integer(startTabIndex.intValue() + 10127), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper158 = new RuntimeAnchoring(designSize, runtimeSize, 640, 1202, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1149), new Integer(anchoringHelper158.getX()), new Integer(anchoringHelper158.getY()), new Integer(anchoringHelper158.getWidth()), new Integer(anchoringHelper158.getHeight()), new Integer(startTabIndex.intValue() + 10130), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper159 = new RuntimeAnchoring(designSize, runtimeSize, 744, 1202, 16, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1150), new Integer(anchoringHelper159.getX()), new Integer(anchoringHelper159.getY()), new Integer(anchoringHelper159.getWidth()), new Integer(anchoringHelper159.getHeight()), new Integer(startTabIndex.intValue() + 10133), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper160 = new RuntimeAnchoring(designSize, runtimeSize, 520, 1186, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1151), new Integer(anchoringHelper160.getX()), new Integer(anchoringHelper160.getY()), new Integer(anchoringHelper160.getWidth()), new Integer(anchoringHelper160.getHeight()), new Integer(startTabIndex.intValue() + 10125), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper161 = new RuntimeAnchoring(designSize, runtimeSize, 672, 1067, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1152), new Integer(anchoringHelper161.getX()), new Integer(anchoringHelper161.getY()), new Integer(anchoringHelper161.getWidth()), new Integer(anchoringHelper161.getHeight()), new Integer(startTabIndex.intValue() + 10117), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper162 = new RuntimeAnchoring(designSize, runtimeSize, 84, 520, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1153), new Integer(anchoringHelper162.getX()), new Integer(anchoringHelper162.getY()), new Integer(anchoringHelper162.getWidth()), new Integer(anchoringHelper162.getHeight()), new Integer(startTabIndex.intValue() + 10096), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper163 = new RuntimeAnchoring(designSize, runtimeSize, 4, 6, 324, 130, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Grid m_grdPositionTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1154), new Integer(anchoringHelper163.getX()), new Integer(anchoringHelper163.getY()), new Integer(anchoringHelper163.getWidth()), new Integer(anchoringHelper163.getHeight()), new Integer(startTabIndex.intValue() + 9032), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdPositionTemp);
					grdPositionGrid grdPosition = (grdPositionGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPositionGrid.class, m_grdPositionTemp);
					grdPosition.addStringColumn("Patient Position", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdPosition.addBoolColumn("Select", 0, 0, 41, false, true, 0, false);
					super.addGrid(grdPosition);
					RuntimeAnchoring anchoringHelper164 = new RuntimeAnchoring(designSize, runtimeSize, 336, 6, 448, 130, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					Grid m_grdTableTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1155), new Integer(anchoringHelper164.getX()), new Integer(anchoringHelper164.getY()), new Integer(anchoringHelper164.getWidth()), new Integer(anchoringHelper164.getHeight()), new Integer(startTabIndex.intValue() + 9034), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdTableTemp);
					grdTableGrid grdTable = (grdTableGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTableGrid.class, m_grdTableTemp);
					grdTable.addStringColumn("Table / Devices", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdTable.addBoolColumn("Select", 0, 0, 41, false, true, 0, false);
					grdTable.addStringColumn("Other", 1, 0, -1, false, false, 0, 125, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					super.addGrid(grdTable);
					RuntimeAnchoring anchoringHelper165 = new RuntimeAnchoring(designSize, runtimeSize, 4, 979, 380, 136, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Grid m_grdDressingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1156), new Integer(anchoringHelper165.getX()), new Integer(anchoringHelper165.getY()), new Integer(anchoringHelper165.getWidth()), new Integer(anchoringHelper165.getHeight()), new Integer(startTabIndex.intValue() + 10107), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdDressingsTemp);
					grdDressingsGrid grdDressings = (grdDressingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDressingsGrid.class, m_grdDressingsTemp);
					grdDressings.addStringColumn("Dressings", 0, 0, 250, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdDressings.addBoolColumn("Select", 0, 0, 41, false, false, 0, false);
					super.addGrid(grdDressings);
					RuntimeAnchoring anchoringHelper166 = new RuntimeAnchoring(designSize, runtimeSize, 4, 821, 780, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					Grid m_grdSkinClosureTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1157), new Integer(anchoringHelper166.getX()), new Integer(anchoringHelper166.getY()), new Integer(anchoringHelper166.getWidth()), new Integer(anchoringHelper166.getHeight()), new Integer(startTabIndex.intValue() + 10105), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdSkinClosureTemp);
					grdSkinClosureGrid grdSkinClosure = (grdSkinClosureGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSkinClosureGrid.class, m_grdSkinClosureTemp);
					grdSkinClosure.addStringColumn("Skin Closure", 0, 0, 380, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdSkinClosure.addBoolColumn("Select", 0, 0, 41, false, false, 0, false);
					super.addGrid(grdSkinClosure);
					RuntimeAnchoring anchoringHelper167 = new RuntimeAnchoring(designSize, runtimeSize, 4, 661, 780, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					Grid m_grdSkinPreparationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1158), new Integer(anchoringHelper167.getX()), new Integer(anchoringHelper167.getY()), new Integer(anchoringHelper167.getWidth()), new Integer(anchoringHelper167.getHeight()), new Integer(startTabIndex.intValue() + 10103), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdSkinPreparationTemp);
					grdSkinPreparationGrid grdSkinPreparation = (grdSkinPreparationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSkinPreparationGrid.class, m_grdSkinPreparationTemp);
					grdSkinPreparation.addStringColumn("Skin Prepation Used", 0, 0, 380, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdSkinPreparation.addBoolColumn("Select", 0, 0, 41, false, true, 0, false);
					grdSkinPreparation.addStringColumn("Other", 1, 0, -1, false, false, 0, 125, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					super.addGrid(grdSkinPreparation);
			
					// Dynamic Grid Controls
					RuntimeAnchoring anchoringHelper168 = new RuntimeAnchoring(designSize, runtimeSize, 4, 1122, 380, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1159), new Integer(anchoringHelper168.getX()), new Integer(anchoringHelper168.getY()), new Integer(anchoringHelper168.getWidth()), new Integer(anchoringHelper168.getHeight()), new Integer(startTabIndex.intValue() + 10120), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT, contextMenus.Clinical.contextMenuLocalAnaestheticMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			
					// IntBox Controls
					RuntimeAnchoring anchoringHelper169 = new RuntimeAnchoring(designSize, runtimeSize, 512, 240, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1160), new Integer(anchoringHelper169.getX()), new Integer(anchoringHelper169.getY()), new Integer(anchoringHelper169.getWidth()), new Integer(anchoringHelper169.getHeight()), new Integer(startTabIndex.intValue() + 10067), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
					RuntimeAnchoring anchoringHelper170 = new RuntimeAnchoring(designSize, runtimeSize, 698, 1065, 32, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1161), new Integer(anchoringHelper170.getX()), new Integer(anchoringHelper170.getY()), new Integer(anchoringHelper170.getWidth()), new Integer(anchoringHelper170.getHeight()), new Integer(startTabIndex.intValue() + 10119), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(9)}));
			
					// RadioButton Controls
					RadioButton tmpNational = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1162), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpNational);
					NationalRadioButton National = (NationalRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(NationalRadioButton.class, tmpNational);
					National.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(National);
					RadioButton tmpInstrumentCorrect = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1163), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpInstrumentCorrect);
					InstrumentCorrectRadioButton InstrumentCorrect = (InstrumentCorrectRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(InstrumentCorrectRadioButton.class, tmpInstrumentCorrect);
					InstrumentCorrect.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(InstrumentCorrect);
					RadioButton tmpNeedleCorrect = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1164), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpNeedleCorrect);
					NeedleCorrectRadioButton NeedleCorrect = (NeedleCorrectRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(NeedleCorrectRadioButton.class, tmpNeedleCorrect);
					NeedleCorrect.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(NeedleCorrect);
					RadioButton tmpCorrect = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1165), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpCorrect);
					CorrectRadioButton Correct = (CorrectRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(CorrectRadioButton.class, tmpCorrect);
					Correct.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(Correct);
					RadioButton tmpSutured = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1166), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE});
					super.addControl(tmpSutured);
					SuturedRadioButton Sutured = (SuturedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(SuturedRadioButton.class, tmpSutured);
					Sutured.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(Sutured);
					RadioButton tmpDrains = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1167), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpDrains);
					DrainsRadioButton Drains = (DrainsRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(DrainsRadioButton.class, tmpDrains);
					Drains.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(Drains);
					RadioButton tmpSkinShaved = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1168), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpSkinShaved);
					SkinShavedRadioButton SkinShaved = (SkinShavedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(SkinShavedRadioButton.class, tmpSkinShaved);
					SkinShaved.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(SkinShaved);
					RadioButton tmpSkinIntact = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1169), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpSkinIntact);
					SkinIntactRadioButton SkinIntact = (SkinIntactRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(SkinIntactRadioButton.class, tmpSkinIntact);
					SkinIntact.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(SkinIntact);
					RadioButton tmpSkinShaved2 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1170), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpSkinShaved2);
					SkinShaved2RadioButton SkinShaved2 = (SkinShaved2RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(SkinShaved2RadioButton.class, tmpSkinShaved2);
					SkinShaved2.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(SkinShaved2);
					RadioButton tmpSkinIntact2 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1171), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE});
					super.addControl(tmpSkinIntact2);
					SkinIntact2RadioButton SkinIntact2 = (SkinIntact2RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(SkinIntact2RadioButton.class, tmpSkinIntact2);
					SkinIntact2.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(SkinIntact2);
				}
				public ims.core.forms.mosquery.IComponent ccCompletedBy()
				{
					return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(9)).getLogic();
				}
				public void setccCompletedByValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(9)).setValueChangedEvent(delegate);
				}
				public void setccCompletedByVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(9)).setVisible(value);
				}
				public boolean isccCompletedByVisible()
				{
					return ((ims.framework.Control)super.getControl(9)).isVisible();
				}
				public void setccCompletedByEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(9)).setEnabled(value);
				}
				public boolean isccCompletedByEnabled()
				{
					return ((ims.framework.Control)super.getControl(9)).isEnabled();
				}
				public ims.core.forms.mosquery.IComponent ccSCNurse()
				{
					return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(10)).getLogic();
				}
				public void setccSCNurseValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(10)).setValueChangedEvent(delegate);
				}
				public void setccSCNurseVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(10)).setVisible(value);
				}
				public boolean isccSCNurseVisible()
				{
					return ((ims.framework.Control)super.getControl(10)).isVisible();
				}
				public void setccSCNurseEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(10)).setEnabled(value);
				}
				public boolean isccSCNurseEnabled()
				{
					return ((ims.framework.Control)super.getControl(10)).isEnabled();
				}
				public ims.core.forms.mosquery.IComponent ccSwabScrubNurse()
				{
					return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(11)).getLogic();
				}
				public void setccSwabScrubNurseValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(11)).setValueChangedEvent(delegate);
				}
				public void setccSwabScrubNurseVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(11)).setVisible(value);
				}
				public boolean isccSwabScrubNurseVisible()
				{
					return ((ims.framework.Control)super.getControl(11)).isVisible();
				}
				public void setccSwabScrubNurseEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(11)).setEnabled(value);
				}
				public boolean isccSwabScrubNurseEnabled()
				{
					return ((ims.framework.Control)super.getControl(11)).isEnabled();
				}
				public ims.core.forms.mosquery.IComponent ccCatherterInsertedBy()
				{
					return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(12)).getLogic();
				}
				public void setccCatherterInsertedByValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(12)).setValueChangedEvent(delegate);
				}
				public void setccCatherterInsertedByVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(12)).setVisible(value);
				}
				public boolean isccCatherterInsertedByVisible()
				{
					return ((ims.framework.Control)super.getControl(12)).isVisible();
				}
				public void setccCatherterInsertedByEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(12)).setEnabled(value);
				}
				public boolean isccCatherterInsertedByEnabled()
				{
					return ((ims.framework.Control)super.getControl(12)).isEnabled();
				}
				public TextBox txtComments()
				{
					return (TextBox)super.getControl(64);
				}
				public TextBox txtDifficulty()
				{
					return (TextBox)super.getControl(65);
				}
				public TextBox txtSpecimenType()
				{
					return (TextBox)super.getControl(66);
				}
				public TextBox txtTypeOfDrain()
				{
					return (TextBox)super.getControl(67);
				}
				public TextBox txtPosition()
				{
					return (TextBox)super.getControl(68);
				}
				public TextBox txtPosition2()
				{
					return (TextBox)super.getControl(69);
				}
				public DateTimeControl dtimCatheterOutTime()
				{
					return (DateTimeControl)super.getControl(70);
				}
				public DateTimeControl dtimCatheterInTime()
				{
					return (DateTimeControl)super.getControl(71);
				}
				public DateTimeControl dtimTimeOff()
				{
					return (DateTimeControl)super.getControl(72);
				}
				public DateTimeControl dtimTimeOn()
				{
					return (DateTimeControl)super.getControl(73);
				}
				public cmbPresureComboBox cmbPresure()
				{
					return (cmbPresureComboBox)super.getComboBox(0);
				}
				public cmbPositionComboBox cmbPosition()
				{
					return (cmbPositionComboBox)super.getComboBox(1);
				}
				public cmbDiathermyPlateComboBox cmbDiathermyPlate()
				{
					return (cmbDiathermyPlateComboBox)super.getComboBox(2);
				}
				public cmbDiathermyPlateSite2ComboBox cmbDiathermyPlateSite2()
				{
					return (cmbDiathermyPlateSite2ComboBox)super.getComboBox(3);
				}
				public CheckBox chkSecuredRight()
				{
					return (CheckBox)super.getControl(78);
				}
				public CheckBox chkSecuredLeft()
				{
					return (CheckBox)super.getControl(79);
				}
				public CheckBox chkGelPadRight()
				{
					return (CheckBox)super.getControl(80);
				}
				public CheckBox chkDVTProphylaxsisRight()
				{
					return (CheckBox)super.getControl(81);
				}
				public CheckBox chkGelPadLeft()
				{
					return (CheckBox)super.getControl(82);
				}
				public CheckBox chkDVTProphylaxsisLeft()
				{
					return (CheckBox)super.getControl(83);
				}
				public CheckBox chkFoldedAcrossPatientRight()
				{
					return (CheckBox)super.getControl(84);
				}
				public CheckBox chkFoldedAcrossPatientLeft()
				{
					return (CheckBox)super.getControl(85);
				}
				public CheckBox chkPaddedArmSupportRight()
				{
					return (CheckBox)super.getControl(86);
				}
				public CheckBox chkPaddedArmSupportLeft()
				{
					return (CheckBox)super.getControl(87);
				}
				public CheckBox chkDifficultyWithInsertion()
				{
					return (CheckBox)super.getControl(88);
				}
				public CheckBox chkCatheter()
				{
					return (CheckBox)super.getControl(89);
				}
				public CheckBox chkCytology()
				{
					return (CheckBox)super.getControl(90);
				}
				public CheckBox chkHaematology()
				{
					return (CheckBox)super.getControl(91);
				}
				public CheckBox chkMicrobiology()
				{
					return (CheckBox)super.getControl(92);
				}
				public CheckBox chkHistopathology()
				{
					return (CheckBox)super.getControl(93);
				}
				public CheckBox chkEstimatedBloodLossYes()
				{
					return (CheckBox)super.getControl(94);
				}
				public CheckBox chkTourniquet()
				{
					return (CheckBox)super.getControl(95);
				}
				public grdPositionGrid grdPosition()
				{
					return (grdPositionGrid)super.getGrid(0);
				}
				public grdTableGrid grdTable()
				{
					return (grdTableGrid)super.getGrid(1);
				}
				public grdDressingsGrid grdDressings()
				{
					return (grdDressingsGrid)super.getGrid(2);
				}
				public grdSkinClosureGrid grdSkinClosure()
				{
					return (grdSkinClosureGrid)super.getGrid(3);
				}
				public grdSkinPreparationGrid grdSkinPreparation()
				{
					return (grdSkinPreparationGrid)super.getGrid(4);
				}
				public DynamicGrid dyngrdAnaesthetis()
				{
					return (DynamicGrid)super.getControl(101);
				}
				public IntBox intMlsOfWater()
				{
					return (IntBox)super.getControl(102);
				}
				public IntBox intEstimatedBloodLoss()
				{
					return (IntBox)super.getControl(103);
				}
				public NationalRadioButton National()
				{
					return (NationalRadioButton)super.getRadioButton(0);
				}
				public InstrumentCorrectRadioButton InstrumentCorrect()
				{
					return (InstrumentCorrectRadioButton)super.getRadioButton(1);
				}
				public NeedleCorrectRadioButton NeedleCorrect()
				{
					return (NeedleCorrectRadioButton)super.getRadioButton(2);
				}
				public CorrectRadioButton Correct()
				{
					return (CorrectRadioButton)super.getRadioButton(3);
				}
				public SuturedRadioButton Sutured()
				{
					return (SuturedRadioButton)super.getRadioButton(4);
				}
				public DrainsRadioButton Drains()
				{
					return (DrainsRadioButton)super.getRadioButton(5);
				}
				public SkinShavedRadioButton SkinShaved()
				{
					return (SkinShavedRadioButton)super.getRadioButton(6);
				}
				public SkinIntactRadioButton SkinIntact()
				{
					return (SkinIntactRadioButton)super.getRadioButton(7);
				}
				public SkinShaved2RadioButton SkinShaved2()
				{
					return (SkinShaved2RadioButton)super.getRadioButton(8);
				}
				public SkinIntact2RadioButton SkinIntact2()
				{
					return (SkinIntact2RadioButton)super.getRadioButton(9);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Container Clasess
				RuntimeAnchoring anchoringHelper171 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 544, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_ctn1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1172), new Integer(anchoringHelper171.getX()), new Integer(anchoringHelper171.getY()), new Integer(anchoringHelper171.getWidth()), new Integer(anchoringHelper171.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
				addControl(m_ctn1);
				ctn1Container ctn1 = (ctn1Container)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctn1Container.class, m_ctn1, factory);
				ims.framework.utils.SizeInfo m_ctn1DesignSize = new ims.framework.utils.SizeInfo(816, 544);
				ims.framework.utils.SizeInfo m_ctn1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper171.getWidth(), anchoringHelper171.getHeight());
				ctn1.setContext(form, appForm, m_ctn1, loader, form_images_local, contextMenus, startControlID, m_ctn1DesignSize, m_ctn1RuntimeSize, startTabIndex, skipContextValidation);
				super.addContainer(ctn1);
			}

			public ctn1Container ctn1()
			{
				return (ctn1Container)super.getContainer(0);
			}
		}
		public static class tabPackagesAndConsumablesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmb1ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class grd4Row extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grd4Row(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColumn1ReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColumn1ReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColumn1Opened()
				{
					super.row.showOpened(0);
				}
				public String getColumn1()
				{
					return (String)super.row.get(0);
				}
				public void setColumn1(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColumn1Tooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColumn2ReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColumn2ReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColumn2Opened()
				{
					super.row.showOpened(1);
				}
				public Integer getColumn2()
				{
					return (Integer)super.row.get(1);
				}
				public void setColumn2(Integer value)
				{
					super.row.set(1, value);
				}
				public void setCellColumn2Tooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grd4RowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grd4RowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grd4Row get(int index)
				{
					return new grd4Row(super.collection.get(index));
				}
				public grd4Row newRow()
				{
					return new grd4Row(super.collection.newRow());
				}
				public grd4Row newRow(boolean autoSelect)
				{
					return new grd4Row(super.collection.newRow(autoSelect));
				}
				public grd4Row newRowAt(int index)
				{
					return new grd4Row(super.collection.newRowAt(index));
				}
				public grd4Row newRowAt(int index, boolean autoSelect)
				{
					return new grd4Row(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grd4Grid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grd4Row getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grd4Row(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grd4RowCollection getRows()
				{
					return new grd4RowCollection(super.grid.getRows());
				}
				public grd4Row getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grd4Row(row);
				}
				public void setColumn1HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColumn1HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColumn2HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColumn2HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grd3Row extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grd3Row(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColumn1ReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColumn1ReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColumn1Opened()
				{
					super.row.showOpened(0);
				}
				public String getColumn1()
				{
					return (String)super.row.get(0);
				}
				public void setColumn1(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColumn1Tooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grd3RowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grd3RowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grd3Row get(int index)
				{
					return new grd3Row(super.collection.get(index));
				}
				public grd3Row newRow()
				{
					return new grd3Row(super.collection.newRow());
				}
				public grd3Row newRow(boolean autoSelect)
				{
					return new grd3Row(super.collection.newRow(autoSelect));
				}
				public grd3Row newRowAt(int index)
				{
					return new grd3Row(super.collection.newRowAt(index));
				}
				public grd3Row newRowAt(int index, boolean autoSelect)
				{
					return new grd3Row(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grd3Grid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grd3Row getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grd3Row(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grd3RowCollection getRows()
				{
					return new grd3RowCollection(super.grid.getRows());
				}
				public grd3Row getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grd3Row(row);
				}
				public void setColumn1HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColumn1HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public static class grd2Row extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grd2Row(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColumn1ReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColumn1ReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColumn1Opened()
				{
					super.row.showOpened(0);
				}
				public String getColumn1()
				{
					return (String)super.row.get(0);
				}
				public void setColumn1(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColumn1Tooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColumn2ReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColumn2ReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColumn2Opened()
				{
					super.row.showOpened(1);
				}
				public Integer getColumn2()
				{
					return (Integer)super.row.get(1);
				}
				public void setColumn2(Integer value)
				{
					super.row.set(1, value);
				}
				public void setCellColumn2Tooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grd2RowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grd2RowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grd2Row get(int index)
				{
					return new grd2Row(super.collection.get(index));
				}
				public grd2Row newRow()
				{
					return new grd2Row(super.collection.newRow());
				}
				public grd2Row newRow(boolean autoSelect)
				{
					return new grd2Row(super.collection.newRow(autoSelect));
				}
				public grd2Row newRowAt(int index)
				{
					return new grd2Row(super.collection.newRowAt(index));
				}
				public grd2Row newRowAt(int index, boolean autoSelect)
				{
					return new grd2Row(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grd2Grid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grd2Row getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grd2Row(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grd2RowCollection getRows()
				{
					return new grd2RowCollection(super.grid.getRows());
				}
				public grd2Row getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grd2Row(row);
				}
				public void setColumn1HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColumn1HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColumn2HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColumn2HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grd1Row extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grd1Row(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColumn1ReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColumn1ReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColumn1Opened()
				{
					super.row.showOpened(0);
				}
				public String getColumn1()
				{
					return (String)super.row.get(0);
				}
				public void setColumn1(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColumn1Tooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColumn2ReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColumn2ReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColumn2Opened()
				{
					super.row.showOpened(1);
				}
				public Integer getColumn2()
				{
					return (Integer)super.row.get(1);
				}
				public void setColumn2(Integer value)
				{
					super.row.set(1, value);
				}
				public void setCellColumn2Tooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grd1RowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grd1RowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grd1Row get(int index)
				{
					return new grd1Row(super.collection.get(index));
				}
				public grd1Row newRow()
				{
					return new grd1Row(super.collection.newRow());
				}
				public grd1Row newRow(boolean autoSelect)
				{
					return new grd1Row(super.collection.newRow(autoSelect));
				}
				public grd1Row newRowAt(int index)
				{
					return new grd1Row(super.collection.newRowAt(index));
				}
				public grd1Row newRowAt(int index, boolean autoSelect)
				{
					return new grd1Row(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grd1Grid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grd1Row getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grd1Row(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grd1RowCollection getRows()
				{
					return new grd1RowCollection(super.grid.getRows());
				}
				public grd1Row getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grd1Row(row);
				}
				public void setColumn1HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColumn1HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColumn2HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColumn2HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper172 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 400, 496, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1173), new Integer(anchoringHelper172.getX()), new Integer(anchoringHelper172.getY()), new Integer(anchoringHelper172.getWidth()), new Integer(anchoringHelper172.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Consumables and Drugs", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper173 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1174), new Integer(anchoringHelper173.getX()), new Integer(anchoringHelper173.getY()), new Integer(anchoringHelper173.getWidth()), new Integer(anchoringHelper173.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic type:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper174 = new RuntimeAnchoring(designSize, runtimeSize, 120, 16, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmb1Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1175), new Integer(anchoringHelper174.getX()), new Integer(anchoringHelper174.getY()), new Integer(anchoringHelper174.getWidth()), new Integer(anchoringHelper174.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmb1Temp);
				cmb1ComboBox cmb1 = (cmb1ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb1ComboBox.class, m_cmb1Temp);
				super.addComboBox(cmb1);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper175 = new RuntimeAnchoring(designSize, runtimeSize, 424, 304, 384, 240, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grd4Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1176), new Integer(anchoringHelper175.getX()), new Integer(anchoringHelper175.getY()), new Integer(anchoringHelper175.getWidth()), new Integer(anchoringHelper175.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuIntraOperativeTheatrePackage, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grd4Temp);
				grd4Grid grd4 = (grd4Grid)GridFlyweightFactory.getInstance().createGridBridge(grd4Grid.class, m_grd4Temp);
				grd4.addStringColumn("Theatre Package", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd4.addIntColumn("Amount", 0, 0, -1, false, true, null, false, 0, true);
				super.addGrid(grd4);
				RuntimeAnchoring anchoringHelper176 = new RuntimeAnchoring(designSize, runtimeSize, 424, 16, 384, 272, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grd3Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1177), new Integer(anchoringHelper176.getX()), new Integer(anchoringHelper176.getY()), new Integer(anchoringHelper176.getWidth()), new Integer(anchoringHelper176.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuIntraOperativeProsthesis, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grd3Temp);
				grd3Grid grd3 = (grd3Grid)GridFlyweightFactory.getInstance().createGridBridge(grd3Grid.class, m_grd3Temp);
				grd3.addStringColumn("Prosthesis", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grd3);
				RuntimeAnchoring anchoringHelper177 = new RuntimeAnchoring(designSize, runtimeSize, 16, 304, 384, 232, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grd2Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1178), new Integer(anchoringHelper177.getX()), new Integer(anchoringHelper177.getY()), new Integer(anchoringHelper177.getWidth()), new Integer(anchoringHelper177.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuIntraOperativeDrug, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grd2Temp);
				grd2Grid grd2 = (grd2Grid)GridFlyweightFactory.getInstance().createGridBridge(grd2Grid.class, m_grd2Temp);
				grd2.addStringColumn("Drug", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd2.addIntColumn("Amount", 0, 0, -1, false, true, null, false, 0, true);
				super.addGrid(grd2);
				RuntimeAnchoring anchoringHelper178 = new RuntimeAnchoring(designSize, runtimeSize, 16, 72, 384, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grd1Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1179), new Integer(anchoringHelper178.getX()), new Integer(anchoringHelper178.getY()), new Integer(anchoringHelper178.getWidth()), new Integer(anchoringHelper178.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuIntraOperativeConsumable, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grd1Temp);
				grd1Grid grd1 = (grd1Grid)GridFlyweightFactory.getInstance().createGridBridge(grd1Grid.class, m_grd1Temp);
				grd1.addStringColumn("Consumable", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd1.addIntColumn("Amount", 0, 0, -1, false, true, null, false, 0, true);
				super.addGrid(grd1);
			}

			public cmb1ComboBox cmb1()
			{
				return (cmb1ComboBox)super.getComboBox(0);
			}
			public grd4Grid grd4()
			{
				return (grd4Grid)super.getGrid(0);
			}
			public grd3Grid grd3()
			{
				return (grd3Grid)super.getGrid(1);
			}
			public grd2Grid grd2()
			{
				return (grd2Grid)super.getGrid(2);
			}
			public grd1Grid grd1()
			{
				return (grd1Grid)super.getGrid(3);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper179 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCareRecord = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1180), new Integer(anchoringHelper179.getX()), new Integer(anchoringHelper179.getY()), new Integer(anchoringHelper179.getWidth()), new Integer(anchoringHelper179.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Intra Operative Care Record", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCareRecordContainer m_tabCareRecordContainer = (tabCareRecordContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCareRecordContainer.class, m_tabCareRecord, factory);
			super.addContainer(m_tabCareRecord, m_tabCareRecordContainer);
			ims.framework.utils.SizeInfo m_tabCareRecordDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabCareRecordRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper179.getWidth(), anchoringHelper179.getHeight());
			m_tabCareRecordContainer.setContext(form, appForm, m_tabCareRecord, loader, form_images_local, contextMenus, startControlID, m_tabCareRecordDesignSize, m_tabCareRecordRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper180 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1181), new Integer(anchoringHelper180.getX()), new Integer(anchoringHelper180.getY()), new Integer(anchoringHelper180.getWidth()), new Integer(anchoringHelper180.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Intra Operative Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDetailsContainer m_tabDetailsContainer = (tabDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsContainer.class, m_tabDetails, factory);
			super.addContainer(m_tabDetails, m_tabDetailsContainer);
			ims.framework.utils.SizeInfo m_tabDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper180.getWidth(), anchoringHelper180.getHeight());
			m_tabDetailsContainer.setContext(form, appForm, m_tabDetails, loader, form_images_local, contextMenus, startControlID, m_tabDetailsDesignSize, m_tabDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper181 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPackagesAndConsumables = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1182), new Integer(anchoringHelper181.getX()), new Integer(anchoringHelper181.getY()), new Integer(anchoringHelper181.getWidth()), new Integer(anchoringHelper181.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Packages and Consumables", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPackagesAndConsumablesContainer m_tabPackagesAndConsumablesContainer = (tabPackagesAndConsumablesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPackagesAndConsumablesContainer.class, m_tabPackagesAndConsumables, factory);
			super.addContainer(m_tabPackagesAndConsumables, m_tabPackagesAndConsumablesContainer);
			ims.framework.utils.SizeInfo m_tabPackagesAndConsumablesDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabPackagesAndConsumablesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper181.getWidth(), anchoringHelper181.getHeight());
			m_tabPackagesAndConsumablesContainer.setContext(form, appForm, m_tabPackagesAndConsumables, loader, form_images_local, contextMenus, startControlID, m_tabPackagesAndConsumablesDesignSize, m_tabPackagesAndConsumablesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabCareRecord().setVisible(false);
			tabDetails().setVisible(false);
			tabPackagesAndConsumables().setVisible(false);
		}
		public void settabCareRecordEnabled(boolean value)
		{
			tabCareRecord().setEnabled(value);
		}
		public void settabDetailsEnabled(boolean value)
		{
			tabDetails().setEnabled(value);
		}
		public void settabPackagesAndConsumablesEnabled(boolean value)
		{
			tabPackagesAndConsumables().setEnabled(value);
		}
		public void showtabCareRecord()
		{
			tabDetails().setVisible(false);
			tabPackagesAndConsumables().setVisible(false);
			tabCareRecord().setVisible(true);
		}
		public void showtabDetails()
		{
			tabCareRecord().setVisible(false);
			tabPackagesAndConsumables().setVisible(false);
			tabDetails().setVisible(true);
		}
		public void showtabPackagesAndConsumables()
		{
			tabCareRecord().setVisible(false);
			tabDetails().setVisible(false);
			tabPackagesAndConsumables().setVisible(true);
		}

		public tabCareRecordContainer tabCareRecord()
		{
			return (tabCareRecordContainer)super.layers.get(0);
		}
		public tabDetailsContainer tabDetails()
		{
			return (tabDetailsContainer)super.layers.get(1);
		}
		public tabPackagesAndConsumablesContainer tabPackagesAndConsumables()
		{
			return (tabPackagesAndConsumablesContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuLocalAnaestheticMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuLocalAnaestheticMenuADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuLocalAnaestheticMenu.add(contextMenus.Clinical.contextMenuLocalAnaestheticMenuADDItem);
		contextMenus.Clinical.contextMenuLocalAnaestheticMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.Clinical.contextMenuLocalAnaestheticMenu.add(contextMenus.Clinical.contextMenuLocalAnaestheticMenuREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuLocalAnaestheticMenu);
		contextMenus.Clinical.contextMenuIntraOperativeTheatrePackage = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Clinical.contextMenuIntraOperativeTheatrePackageAddItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3760001)))
			contextMenus.Clinical.contextMenuIntraOperativeTheatrePackage.add(contextMenus.Clinical.contextMenuIntraOperativeTheatrePackageAddItem);
		contextMenus.Clinical.contextMenuIntraOperativeTheatrePackageRemoveItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3760002)))
			contextMenus.Clinical.contextMenuIntraOperativeTheatrePackage.add(contextMenus.Clinical.contextMenuIntraOperativeTheatrePackageRemoveItem);
		form.registerMenu(contextMenus.Clinical.contextMenuIntraOperativeTheatrePackage);
		contextMenus.Clinical.contextMenuIntraOperativeProsthesis = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Clinical.contextMenuIntraOperativeProsthesisAddItem = factory.createMenuItem(startControlID.intValue() + 5, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3770001)))
			contextMenus.Clinical.contextMenuIntraOperativeProsthesis.add(contextMenus.Clinical.contextMenuIntraOperativeProsthesisAddItem);
		contextMenus.Clinical.contextMenuIntraOperativeProsthesisRemoveItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3770002)))
			contextMenus.Clinical.contextMenuIntraOperativeProsthesis.add(contextMenus.Clinical.contextMenuIntraOperativeProsthesisRemoveItem);
		form.registerMenu(contextMenus.Clinical.contextMenuIntraOperativeProsthesis);
		contextMenus.Clinical.contextMenuIntraOperativeDrug = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.Clinical.contextMenuIntraOperativeDrugAddItem = factory.createMenuItem(startControlID.intValue() + 7, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3750001)))
			contextMenus.Clinical.contextMenuIntraOperativeDrug.add(contextMenus.Clinical.contextMenuIntraOperativeDrugAddItem);
		contextMenus.Clinical.contextMenuIntraOperativeDrugRemoveItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3750002)))
			contextMenus.Clinical.contextMenuIntraOperativeDrug.add(contextMenus.Clinical.contextMenuIntraOperativeDrugRemoveItem);
		form.registerMenu(contextMenus.Clinical.contextMenuIntraOperativeDrug);
		contextMenus.Clinical.contextMenuIntraOperativeConsumable = factory.createMenu(startControlID.intValue() + 5);
		contextMenus.Clinical.contextMenuIntraOperativeConsumableAddItem = factory.createMenuItem(startControlID.intValue() + 9, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3740001)))
			contextMenus.Clinical.contextMenuIntraOperativeConsumable.add(contextMenus.Clinical.contextMenuIntraOperativeConsumableAddItem);
		contextMenus.Clinical.contextMenuIntraOperativeConsumableRemoveItem = factory.createMenuItem(startControlID.intValue() + 10, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3740002)))
			contextMenus.Clinical.contextMenuIntraOperativeConsumable.add(contextMenus.Clinical.contextMenuIntraOperativeConsumableRemoveItem);
		form.registerMenu(contextMenus.Clinical.contextMenuIntraOperativeConsumable);


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper182 = new RuntimeAnchoring(designSize, runtimeSize, 168, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1183), new Integer(anchoringHelper182.getX()), new Integer(anchoringHelper182.getY()), new Integer(anchoringHelper182.getWidth()), new Integer(anchoringHelper182.getHeight()), new Integer(startTabIndex.intValue() + 13159), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "RIE", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper183 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1184), new Integer(anchoringHelper183.getX()), new Integer(anchoringHelper183.getY()), new Integer(anchoringHelper183.getWidth()), new Integer(anchoringHelper183.getHeight()), new Integer(startTabIndex.intValue() + 13157), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper184 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1185), new Integer(anchoringHelper184.getX()), new Integer(anchoringHelper184.getY()), new Integer(anchoringHelper184.getWidth()), new Integer(anchoringHelper184.getHeight()), new Integer(startTabIndex.intValue() + 13154), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper185 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1186), new Integer(anchoringHelper185.getX()), new Integer(anchoringHelper185.getY()), new Integer(anchoringHelper185.getWidth()), new Integer(anchoringHelper185.getHeight()), new Integer(startTabIndex.intValue() + 13161), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper186 = new RuntimeAnchoring(designSize, runtimeSize, 686, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1187), new Integer(anchoringHelper186.getX()), new Integer(anchoringHelper186.getY()), new Integer(anchoringHelper186.getWidth()), new Integer(anchoringHelper186.getHeight()), new Integer(startTabIndex.intValue() + 13160), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnRie()
	{
		return (Button)super.getControl(3);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(4);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(7);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Clinical = new ClinicalForms();
			Core = new CoreForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				TheatreList = new LocalFormName(134154);
			}
			public final FormName TheatreList;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				IntraOperativeCareRecordDialog = new LocalFormName(134158);
				PackagesAndConsumables = new LocalFormName(123219);
			}
			public final FormName IntraOperativeCareRecordDialog;
			public final FormName PackagesAndConsumables;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}

		public RefManForms RefMan;
		public ClinicalForms Clinical;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Clinical = new ClinicalImages();
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				Action_selected = new ImageHelper(123105, "Images/Clinical/action_24x24.png", new Integer(24), new Integer(24));
				Action_unselected = new ImageHelper(123108, "Images/Clinical/action_unselected_24x24.png", new Integer(24), new Integer(24));
				Medication = new ImageHelper(123111, "Images/Clinical/medication_24x24.png", new Integer(24), new Integer(24));
				Observations = new ImageHelper(123110, "Images/Clinical/observations_24x24.png", new Integer(24), new Integer(24));
				Patient_details = new ImageHelper(123112, "Images/Clinical/patient_details_24x24.png", new Integer(24), new Integer(24));
				Phases = new ImageHelper(123107, "Images/Clinical/phases_24x24.png", new Integer(24), new Integer(24));
				Stage = new ImageHelper(123106, "Images/Clinical/stage_24x24.png", new Integer(24), new Integer(24));
				Stages = new ImageHelper(123109, "Images/Clinical/stages_24x24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Action_selected;
			public final ims.framework.utils.Image Action_unselected;
			public final ims.framework.utils.Image Medication;
			public final ims.framework.utils.Image Observations;
			public final ims.framework.utils.Image Patient_details;
			public final ims.framework.utils.Image Phases;
			public final ims.framework.utils.Image Stage;
			public final ims.framework.utils.Image Stages;
		}
		public final ClinicalImages Clinical;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentRecord = new ims.framework.ContextVariable("CurrentRecord", prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier + "");
			cxl_PlannedPatientProcedure = new ims.framework.ContextVariable("PlannedPatientProcedure", prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier + "");
			cxl_PackageAndConsumableType = new ims.framework.ContextVariable("PackageAndConsumableType", prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PackageAndConsumableType_" + componentIdentifier + "");
			cxl_NewOrEditMode = new ims.framework.ContextVariable("NewOrEditMode", prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__NewOrEditMode_" + componentIdentifier + "");
		}
		
		public boolean getCurrentRecordIsNotNull()
		{
			return !cxl_CurrentRecord.getValueIsNull(context);
		}
		public ims.clinical.vo.IntraOperativeCareRecordVo getCurrentRecord()
		{
			return (ims.clinical.vo.IntraOperativeCareRecordVo)cxl_CurrentRecord.getValue(context);
		}
		public void setCurrentRecord(ims.clinical.vo.IntraOperativeCareRecordVo value)
		{
			cxl_CurrentRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentRecord = null;
		public boolean getPlannedPatientProcedureIsNotNull()
		{
			return !cxl_PlannedPatientProcedure.getValueIsNull(context);
		}
		public ims.core.vo.PatientProcedureLiteVo getPlannedPatientProcedure()
		{
			return (ims.core.vo.PatientProcedureLiteVo)cxl_PlannedPatientProcedure.getValue(context);
		}
		public void setPlannedPatientProcedure(ims.core.vo.PatientProcedureLiteVo value)
		{
			cxl_PlannedPatientProcedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PlannedPatientProcedure = null;
		public boolean getPackageAndConsumableTypeIsNotNull()
		{
			return !cxl_PackageAndConsumableType.getValueIsNull(context);
		}
		public Integer getPackageAndConsumableType()
		{
			return (Integer)cxl_PackageAndConsumableType.getValue(context);
		}
		public void setPackageAndConsumableType(Integer value)
		{
			cxl_PackageAndConsumableType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PackageAndConsumableType = null;
		public boolean getNewOrEditModeIsNotNull()
		{
			return !cxl_NewOrEditMode.getValueIsNull(context);
		}
		public Boolean getNewOrEditMode()
		{
			return (Boolean)cxl_NewOrEditMode.getValue(context);
		}
		public void setNewOrEditMode(Boolean value)
		{
			cxl_NewOrEditMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NewOrEditMode = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class LocalAnaestheticMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int REMOVE = 2;
			}
			public void disableAllLocalAnaestheticMenuMenuItems()
			{
				this.contextMenuLocalAnaestheticMenuADDItem.setEnabled(false);
				this.contextMenuLocalAnaestheticMenuREMOVEItem.setEnabled(false);
			}
			public void hideAllLocalAnaestheticMenuMenuItems()
			{
				this.contextMenuLocalAnaestheticMenuADDItem.setVisible(false);
				this.contextMenuLocalAnaestheticMenuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuLocalAnaestheticMenu;
			public ReadOnlyMenuItem getLocalAnaestheticMenuADDItem()
			{
				return this.contextMenuLocalAnaestheticMenuADDItem;
			}
			private MenuItem contextMenuLocalAnaestheticMenuADDItem;
			public ReadOnlyMenuItem getLocalAnaestheticMenuREMOVEItem()
			{
				return this.contextMenuLocalAnaestheticMenuREMOVEItem;
			}
			private MenuItem contextMenuLocalAnaestheticMenuREMOVEItem;
			public final class IntraOperativeTheatrePackage implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 3;
				public static final int Remove = 4;
			}
			public void disableAllIntraOperativeTheatrePackageMenuItems()
			{
				this.contextMenuIntraOperativeTheatrePackageAddItem.setEnabled(false);
				this.contextMenuIntraOperativeTheatrePackageRemoveItem.setEnabled(false);
			}
			public void hideAllIntraOperativeTheatrePackageMenuItems()
			{
				this.contextMenuIntraOperativeTheatrePackageAddItem.setVisible(false);
				this.contextMenuIntraOperativeTheatrePackageRemoveItem.setVisible(false);
			}
			private Menu contextMenuIntraOperativeTheatrePackage;
			public ReadOnlyMenuItem getIntraOperativeTheatrePackageAddItem()
			{
				return this.contextMenuIntraOperativeTheatrePackageAddItem;
			}
			private MenuItem contextMenuIntraOperativeTheatrePackageAddItem;
			public ReadOnlyMenuItem getIntraOperativeTheatrePackageRemoveItem()
			{
				return this.contextMenuIntraOperativeTheatrePackageRemoveItem;
			}
			private MenuItem contextMenuIntraOperativeTheatrePackageRemoveItem;
			public final class IntraOperativeProsthesis implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 5;
				public static final int Remove = 6;
			}
			public void disableAllIntraOperativeProsthesisMenuItems()
			{
				this.contextMenuIntraOperativeProsthesisAddItem.setEnabled(false);
				this.contextMenuIntraOperativeProsthesisRemoveItem.setEnabled(false);
			}
			public void hideAllIntraOperativeProsthesisMenuItems()
			{
				this.contextMenuIntraOperativeProsthesisAddItem.setVisible(false);
				this.contextMenuIntraOperativeProsthesisRemoveItem.setVisible(false);
			}
			private Menu contextMenuIntraOperativeProsthesis;
			public ReadOnlyMenuItem getIntraOperativeProsthesisAddItem()
			{
				return this.contextMenuIntraOperativeProsthesisAddItem;
			}
			private MenuItem contextMenuIntraOperativeProsthesisAddItem;
			public ReadOnlyMenuItem getIntraOperativeProsthesisRemoveItem()
			{
				return this.contextMenuIntraOperativeProsthesisRemoveItem;
			}
			private MenuItem contextMenuIntraOperativeProsthesisRemoveItem;
			public final class IntraOperativeDrug implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 7;
				public static final int Remove = 8;
			}
			public void disableAllIntraOperativeDrugMenuItems()
			{
				this.contextMenuIntraOperativeDrugAddItem.setEnabled(false);
				this.contextMenuIntraOperativeDrugRemoveItem.setEnabled(false);
			}
			public void hideAllIntraOperativeDrugMenuItems()
			{
				this.contextMenuIntraOperativeDrugAddItem.setVisible(false);
				this.contextMenuIntraOperativeDrugRemoveItem.setVisible(false);
			}
			private Menu contextMenuIntraOperativeDrug;
			public ReadOnlyMenuItem getIntraOperativeDrugAddItem()
			{
				return this.contextMenuIntraOperativeDrugAddItem;
			}
			private MenuItem contextMenuIntraOperativeDrugAddItem;
			public ReadOnlyMenuItem getIntraOperativeDrugRemoveItem()
			{
				return this.contextMenuIntraOperativeDrugRemoveItem;
			}
			private MenuItem contextMenuIntraOperativeDrugRemoveItem;
			public final class IntraOperativeConsumable implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 9;
				public static final int Remove = 10;
			}
			public void disableAllIntraOperativeConsumableMenuItems()
			{
				this.contextMenuIntraOperativeConsumableAddItem.setEnabled(false);
				this.contextMenuIntraOperativeConsumableRemoveItem.setEnabled(false);
			}
			public void hideAllIntraOperativeConsumableMenuItems()
			{
				this.contextMenuIntraOperativeConsumableAddItem.setVisible(false);
				this.contextMenuIntraOperativeConsumableRemoveItem.setVisible(false);
			}
			private Menu contextMenuIntraOperativeConsumable;
			public ReadOnlyMenuItem getIntraOperativeConsumableAddItem()
			{
				return this.contextMenuIntraOperativeConsumableAddItem;
			}
			private MenuItem contextMenuIntraOperativeConsumableAddItem;
			public ReadOnlyMenuItem getIntraOperativeConsumableRemoveItem()
			{
				return this.contextMenuIntraOperativeConsumableRemoveItem;
			}
			private MenuItem contextMenuIntraOperativeConsumableRemoveItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[130];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCDATE", "ProcDate");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SITETEXT", "SiteText");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCLATERALITY", "ProcLaterality");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCTIME", "ProcTime");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-NOTES", "Notes");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREURGENCY", "ProcedureUrgency");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-DATEPLANNED", "DatePlanned");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PLANNEDPROC", "PlannedProc");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCSITE", "ProcSite");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PEFORMEDBY", "PeformedBy");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREINTENT", "ProcedureIntent");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-LOCATION", "Location");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SPECIALTY", "Specialty");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CONFIRMEDSTATUS", "ConfirmedStatus");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CONFIRMEDDATETIME", "ConfirmedDateTime");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-EXCLUDEFROMOTHERS", "ExcludeFromOthers");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCLOCATION", "ProcLocation");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CANCELLEDDATE", "CancelledDate");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CANCELLEDREASON", "CancelledReason");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SURGEONSGRADE", "SurgeonsGrade");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCENDDATE", "ProcEndDate");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCENDTIME", "ProcEndTime");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SIGNIFPROC", "SignifProc");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-ID", "ID_IntraOperativeCareRecord");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-CARECONTEXT", "CareContext");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-PROCEDUREDATE", "ProcedureDate");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-INTHEATRETIME", "InTheatreTime");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-SURGERYSTARTTIME", "SurgeryStartTime");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-SURGERYENDTIME", "SurgeryEndTime");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-ANAESTHETISTSTARTTIME", "AnaesthetistStartTime");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-OTHER", "Other");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-WASPLANNEDPROCEDURE", "WasPlannedProcedure");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-WASUNPLANNEDPROCEDURE", "WasUnplannedProcedure");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-ADMISSIONTYPE", "AdmissionType");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-READMISSIONTYPE", "ReadmissionType");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-PASEVENT", "PasEvent");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-INTOPACUTIME", "IntoPacuTime");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-TIMEINTORECOVERY", "TimeIntoRecovery");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-TIMEOUTOFRECOVERY", "TimeOutOfRecovery");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-ANAESTHETICUSED", "AnaestheticUsed");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-ID", "ID_PatientProcedure");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-PROCDATE", "ProcDate");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-SITETEXT", "SiteText");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-PROCLATERALITY", "ProcLaterality");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-PROCTIME", "ProcTime");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-ISPRIMARY", "IsPrimary");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
