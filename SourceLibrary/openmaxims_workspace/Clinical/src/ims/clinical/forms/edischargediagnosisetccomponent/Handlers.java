//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.edischargediagnosisetccomponent;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbDiagLateralityLookup();
	abstract protected void defaultcmbDiagLateralityLookupValue();
	abstract protected void bindcmbComorbLateralityLookup();
	abstract protected void defaultcmbComorbLateralityLookupValue();
	abstract protected void bindcmbCompLateralityLookup();
	abstract protected void defaultcmbCompLateralityLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPreviousGridHeaderClicked(int column) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPreviousSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPreviousGridCheckBoxClicked(int column, GenForm.grdPreviousRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNoDiagnosisValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNoComorValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNoCompValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdComplicationsGridHeaderClicked(int column) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdComplicationsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdComplicationsGridCheckBoxClicked(int column, GenForm.ctnCurrentDiagnosesContainer.grdComplicationsRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdComorbidityGridHeaderClicked(int column) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdComorbiditySelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdComorbidityGridCheckBoxClicked(int column, GenForm.ctnCurrentDiagnosesContainer.grdComorbidityRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDiagnosesGridHeaderClicked(int column) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDiagnosesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDiagnosesGridCheckBoxClicked(int column, GenForm.ctnCurrentDiagnosesContainer.grdDiagnosesRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkReturnToListClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDiagLateralityValueSet(Object value);
	abstract protected void onCcClinicalTermValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupSelectionValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbComorbLateralityValueSet(Object value);
	abstract protected void onLnkComorReturnClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcComorbClinicalTermValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupSelectionComorValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkComplicationReturnClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcCompClinicalTermValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbCompLateralityValueSet(Object value);
	abstract protected void onRadioButtonGroupSelectionCompValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIComponentEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setMessageBoxClosedEvent(new MessageBoxClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onMessageBoxClosed(messageBoxId, result);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.grdPrevious().setGridHeaderClickedEvent(new GridHeaderClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPreviousGridHeaderClicked(column);
			}
		});
		this.form.grdPrevious().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPreviousSelectionChanged();
			}
		});
		this.form.grdPrevious().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPreviousGridCheckBoxClicked(column, new GenForm.grdPreviousRow(row), isChecked);
			}
		});
		this.form.ctnCurrentDiagnoses().chkNoDiagnosis().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNoDiagnosisValueChanged();
			}
		});
		this.form.ctnCurrentDiagnoses().chkNoComor().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNoComorValueChanged();
			}
		});
		this.form.ctnCurrentDiagnoses().chkNoComp().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNoCompValueChanged();
			}
		});
		this.form.ctnCurrentDiagnoses().grdComplications().setGridHeaderClickedEvent(new GridHeaderClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdComplicationsGridHeaderClicked(column);
			}
		});
		this.form.ctnCurrentDiagnoses().grdComplications().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdComplicationsSelectionChanged();
			}
		});
		this.form.ctnCurrentDiagnoses().grdComplications().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdComplicationsGridCheckBoxClicked(column, new GenForm.ctnCurrentDiagnosesContainer.grdComplicationsRow(row), isChecked);
			}
		});
		this.form.ctnCurrentDiagnoses().grdComorbidity().setGridHeaderClickedEvent(new GridHeaderClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdComorbidityGridHeaderClicked(column);
			}
		});
		this.form.ctnCurrentDiagnoses().grdComorbidity().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdComorbiditySelectionChanged();
			}
		});
		this.form.ctnCurrentDiagnoses().grdComorbidity().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdComorbidityGridCheckBoxClicked(column, new GenForm.ctnCurrentDiagnosesContainer.grdComorbidityRow(row), isChecked);
			}
		});
		this.form.ctnCurrentDiagnoses().grdDiagnoses().setGridHeaderClickedEvent(new GridHeaderClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDiagnosesGridHeaderClicked(column);
			}
		});
		this.form.ctnCurrentDiagnoses().grdDiagnoses().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDiagnosesSelectionChanged();
			}
		});
		this.form.ctnCurrentDiagnoses().grdDiagnoses().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDiagnosesGridCheckBoxClicked(column, new GenForm.ctnCurrentDiagnosesContainer.grdDiagnosesRow(row), isChecked);
			}
		});
		this.form.ctnDiagnosisControls().lnkReturnToList().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkReturnToListClick();
			}
		});
		this.form.ctnDiagnosisControls().cmbDiagLaterality().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDiagLateralityValueSet(value);
			}
		});
		this.form.ctnDiagnosisControls().setccDiagnosisClinicalTermValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcClinicalTermValueChanged();
			}
		});
		this.form.ctnDiagnosisControls().GroupSelection().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupSelectionValueChanged();
			}
		});
		this.form.ctnCoMorbidityControls().cmbComorbLaterality().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbComorbLateralityValueSet(value);
			}
		});
		this.form.ctnCoMorbidityControls().lnkComorReturn().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkComorReturnClick();
			}
		});
		this.form.ctnCoMorbidityControls().setccComorbClinicalTermValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcComorbClinicalTermValueChanged();
			}
		});
		this.form.ctnCoMorbidityControls().GroupSelectionComor().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupSelectionComorValueChanged();
			}
		});
		this.form.ctnComplicationsControls().lnkComplicationReturn().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkComplicationReturnClick();
			}
		});
		this.form.ctnComplicationsControls().setccCompClinicalTermValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcCompClinicalTermValueChanged();
			}
		});
		this.form.ctnComplicationsControls().cmbCompLaterality().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCompLateralityValueSet(value);
			}
		});
		this.form.ctnComplicationsControls().GroupSelectionComp().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupSelectionCompValueChanged();
			}
		});
		this.form.getContextMenus().getPastMedicalHistoryNewItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PastMedicalHistory.New, sender);
			}
		});
		this.form.getContextMenus().getPastMedicalHistoryEditItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PastMedicalHistory.Edit, sender);
			}
		});
		this.form.getContextMenus().getPastMedicalHistoryViewItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PastMedicalHistory.View, sender);
			}
		});
		this.form.getContextMenus().getPastMedicalHistoryLinkingItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PastMedicalHistory.Linking, sender);
			}
		});
		this.form.getContextMenus().getPastMedicalHistorySupersedeItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PastMedicalHistory.Supersede, sender);
			}
		});
		this.form.getContextMenus().getPastMedicalHistoryRIEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PastMedicalHistory.RIE, sender);
			}
		});
		this.form.getContextMenus().getPastMedicalHistoryViewAllCDIItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PastMedicalHistory.ViewAllCDI, sender);
			}
		});
		this.form.getContextMenus().getPastMedicalHistoryViewAllUnlinkedCDIItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PastMedicalHistory.ViewAllUnlinkedCDI, sender);
			}
		});
		this.form.getContextMenus().getPastMedicalHistoryViewAssociationsItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PastMedicalHistory.ViewAssociations, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcComplicationMenuNEW_COMPLICATIONItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcComplicationMenu.NEW_COMPLICATION, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcComplicationMenuEDIT_COMPLICATIONItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcComplicationMenu.EDIT_COMPLICATION, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcComplicationMenuVIEW_COMPLICATIOnItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcComplicationMenu.VIEW_COMPLICATIOn, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcComplicationMenuRIEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcComplicationMenu.RIE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcCoMorbidityMenuNEW_COMORBIDITYItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcCoMorbidityMenu.NEW_COMORBIDITY, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcCoMorbidityMenuEDIT_COMORBIDITYItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcCoMorbidityMenu.EDIT_COMORBIDITY, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcCoMorbidityMenuVIEW_COMORBIDITYItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcCoMorbidityMenu.VIEW_COMORBIDITY, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcCoMorbidityMenuRIEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcCoMorbidityMenu.RIE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcDiagnosisMenu.NEW_DIAGNOSIS, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcDiagnosisMenu.EDIT_DIAGNOSIS, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcDiagnosisMenu.VIEW_DIAGNOSIS, sender);
			}
		});
		this.form.getContextMenus().Clinical.getEDischargeDiagnosisEtcDiagnosisMenuRIEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcDiagnosisMenu.RIE, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbDiagLateralityLookup();
		bindcmbComorbLateralityLookup();
		bindcmbCompLateralityLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbDiagLateralityLookup();
		bindcmbComorbLateralityLookup();
		bindcmbCompLateralityLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbDiagLateralityLookupValue();
		defaultcmbComorbLateralityLookupValue();
		defaultcmbCompLateralityLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIComponentEngine engine;
	protected GenForm form;
}
