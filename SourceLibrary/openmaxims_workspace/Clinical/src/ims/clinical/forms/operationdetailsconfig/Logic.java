//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.operationdetailsconfig;

import ims.clinicaladmin.vo.SurgicalOperationDetailsConfigVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		clearControls();
		open();

	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Clinical.HCPsWithRecordsForProcedure) && result.equals(DialogResult.OK))
		{
			if (form.getGlobalContext().ClinicalAdmin.getSurgicalOpDetailsConfig() != null)
			{
				populateTextBoxes(form.getGlobalContext().ClinicalAdmin.getSurgicalOpDetailsConfig());

				form.getLocalContext().setCurentSelectedSUrgicalOperationDetailsConfig(null);
				form.setMode(FormMode.EDIT);

			}
		}
	}

	protected void onQmbHCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			populateHCPcombo(value);
		}
		catch (DomainInterfaceException e)
		{
			throw new PresentationLogicException(e);
		}

	}

	protected void onQmbHCPValueChanged() throws PresentationLogicException
	{

		form.cmbProcedure().clear();
		form.qmbProcedure().clear();
		clearTextControls();
		if (form.qmbHCP().getValue() instanceof HcpLiteVo)
		{
			if (ConfigFlag.DTO.EXTENDED_OP_NOTES_TEMPLATE_FIELDS.getValue())
			{
				populateProcedureQcombo(domain.listProcedures(form.qmbHCP().getValue(),null));
			}
			else
			{
				populateProcedurecombo(domain.listProcedures(form.qmbHCP().getValue(),null));
			}
		}

		
		updateCOntrolStatus();
	}

	private void populateHCPcombo(String nameFilter) throws DomainInterfaceException
	{
		HcpLiteVoCollection listHCP = domain.listHCP(nameFilter);
		form.qmbHCP().clear();
		if (listHCP != null && listHCP.size() > 0)
		{
			for (HcpLiteVo item : listHCP)
			{
				form.qmbHCP().newRow(item, item.getIHcpName());
			}
			if (listHCP.size() == 1)
			{
				form.qmbHCP().setValue(listHCP.get(0));
				try
				{
					onQmbHCPValueChanged();
				}
				catch (PresentationLogicException e)
				{
					e.printStackTrace();
				}
			}
			else
			{
				form.qmbHCP().showOpened();
			}

			// form.qmbHCP().showOpened();
		}
		else
		{
			clearControls();
		}

	}

	private void populateProcedurecombo(ProcedureLiteVoCollection listProcedure)
	{
		form.cmbProcedure().clear();
		if (listProcedure != null)
		{
			for (ProcedureLiteVo item : listProcedure)
			{
				form.cmbProcedure().newRow(item, item.getProcedureName());
			}

			if (listProcedure.size() == 1)
			{
				form.cmbProcedure().setValue(listProcedure.get(0));
				procedureSelected();
			}
			else if (listProcedure.size() > 1)
				form.cmbProcedure().showOpened();
		}
		else
		{
			clearTextControls();
		}

	}
	private void populateProcedureQcombo(ProcedureLiteVoCollection listProcedure)
	{
		form.qmbProcedure().clear();
		if (listProcedure != null)
		{
			for (ProcedureLiteVo item : listProcedure)
			{
				form.qmbProcedure().newRow(item, item.getProcedureName());
			}

			if (listProcedure.size() == 1)
			{
				form.qmbProcedure().setValue(listProcedure.get(0));
				procedureSelected();
			}
			else if (listProcedure.size() > 1)
				form.qmbProcedure().showOpened();
		}
		else
		{
			clearTextControls();
		}

	}

	private void open()
	{

		form.setMode(FormMode.VIEW);

	}

	private void clearControls()
	{
		form.qmbHCP().setValue(null);
		form.qmbProcedure().setValue(null);
		form.cmbProcedure().setValue(null);
		clearTextControls();

	}

	private void clearTextControls()
	{
		form.ctn1().txtProcedure().setValue(null);	//wdev-13658
		form.ctn1().txtIncision().setValue(null);	//wdev-13658
		form.ctn1().txtFidings().setValue(null);	//wdev-13658
		form.ctn1().txtClosure().setValue(null);	//wdev-13658
		form.ctn1().txtPostOP().setValue(null);     //wdev-13658
		form.ctn1().txtDrain().setValue(null);		//wdev-13658
		form.ctn1().txtProsthesis().setValue(null);	//wdev-13658
		form.ctn1().txtActionforGP().setValue(null);//wdev-13658
		form.ctn1().txtGeneralInstructions().setValue(null); //wdev-13658
		form.ctn1().txtNurseEnabledInstructions().setValue(null);//wdev-13658

	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		GetValue();
		open();

	}

	protected void onBtnEditClick() throws PresentationLogicException
	{
		if (!ConfigFlag.DTO.EXTENDED_OP_NOTES_TEMPLATE_FIELDS.getValue())
		{
    		if (form.qmbHCP().getValue() instanceof HcpLiteVo)
    		{
    			form.setMode(FormMode.EDIT);
    
    		}
    		else
    		{
    			engine.showMessage("Select an HCP.");
    		}
		}
		else
		{
			if (form.qmbProcedure().getValue() == null)
			{
				engine.showMessage("Procedure is mandatory");
				return;
			}
			form.setMode(FormMode.EDIT);
		}
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		if (!ConfigFlag.DTO.EXTENDED_OP_NOTES_TEMPLATE_FIELDS.getValue())
		{
    		if (form.qmbHCP().getValue() instanceof HcpLiteVo)
    		{
    			form.getLocalContext().setCurentSelectedSUrgicalOperationDetailsConfig(null);
    			form.setMode(FormMode.EDIT);
    		}
    		else
    		{
    			engine.showMessage("Select an HCP.");
    		}
		}
		else
		{
			if (form.qmbProcedure().getValue() == null)
			{
				engine.showMessage("Procedure is mandatory");
				return;
			}
			form.getLocalContext().setCurentSelectedSUrgicalOperationDetailsConfig(null);
			form.setMode(FormMode.EDIT);
		}
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
		{
			open();
			GetValue();
			updateCOntrolStatus();
		}

	}

	private boolean save()
	{
		SurgicalOperationDetailsConfigVo surgicalOpDetailConfig = form.getLocalContext().getCurentSelectedSUrgicalOperationDetailsConfig();
		if (surgicalOpDetailConfig == null)
			surgicalOpDetailConfig = new SurgicalOperationDetailsConfigVo();

		surgicalOpDetailConfig.setSurgeon(form.qmbHCP().getValue());
		surgicalOpDetailConfig.setProcedureReference(ConfigFlag.DTO.EXTENDED_OP_NOTES_TEMPLATE_FIELDS.getValue()?form.qmbProcedure().getValue():form.cmbProcedure().getValue());
		surgicalOpDetailConfig.setIncision(form.ctn1().txtIncision().getValue()); 	//wdev-13658
		surgicalOpDetailConfig.setFindings(form.ctn1().txtFidings().getValue());	//wdev-13658
		surgicalOpDetailConfig.setProcedure(form.ctn1().txtProcedure().getValue()); //wdev-13658
		surgicalOpDetailConfig.setClosure(form.ctn1().txtClosure().getValue());     //wdev-13658
		surgicalOpDetailConfig.setPostOpInstructions(form.ctn1().txtPostOP().getValue()); //wdev-13658
		surgicalOpDetailConfig.setProsthesis(form.ctn1().txtProsthesis().getValue()); //wdev-13658
		surgicalOpDetailConfig.setDrain(form.ctn1().txtDrain().getValue());			  //wdev-13658
		surgicalOpDetailConfig.setActionsforGP(form.ctn1().txtActionforGP().getValue()); //wdev-13658
		surgicalOpDetailConfig.setNurseEnabledInstructions(form.ctn1().txtNurseEnabledInstructions().getValue());//wdev-13658
		surgicalOpDetailConfig.setHospitalPlan(form.ctn1().txtGeneralInstructions().getValue()); //wdev-13658
		
		String[] str = null;
		str = surgicalOpDetailConfig.validate(str);
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return false;
		}
		try
		{
			surgicalOpDetailConfig = domain.saveSurgicalOperationDetailConfig(surgicalOpDetailConfig);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();//WDEV-12142
			GetValue();//WDEV-12142
			updateCOntrolStatus();//WDEV-12142
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("The recored already exist !!!");
			return false;
		}
		form.getLocalContext().setCurentSelectedSUrgicalOperationDetailsConfig(surgicalOpDetailConfig);
		return true;
	}

	protected void onBtnSearchClick() throws PresentationLogicException
	{
		if (!(form.qmbHCP().getValue() instanceof HcpLiteVo || ConfigFlag.DTO.EXTENDED_OP_NOTES_TEMPLATE_FIELDS.getValue()))
		{
			engine.showMessage("Select an HCP.");
			return;
		}		
		
		SurgicalOperationDetailsConfigVo surVo = new SurgicalOperationDetailsConfigVo();
		surVo.setProcedureReference(ConfigFlag.DTO.EXTENDED_OP_NOTES_TEMPLATE_FIELDS.getValue()?form.qmbProcedure().getValue():form.cmbProcedure().getValue());
		form.getGlobalContext().ClinicalAdmin.setSurgicalOpDetailsConfig(surVo);
		engine.open(form.getForms().Clinical.HCPsWithRecordsForProcedure);

	}

	protected void onCmbProcedureValueChanged() throws PresentationLogicException
	{
		procedureSelected();

	}

	private void procedureSelected()
	{
		GetValue();
		updateCOntrolStatus();
	}

	private void updateCOntrolStatus()
	{
		if (form.getMode() == FormMode.EDIT)
		{
			form.cmbProcedure().setEnabled(false);
			form.qmbHCP().setEnabled(false);

		}
		else
		{
			form.cmbProcedure().setEnabled(true);
			form.qmbHCP().setEnabled(true);
			boolean extended = ConfigFlag.DTO.EXTENDED_OP_NOTES_TEMPLATE_FIELDS.getValue();
			boolean first = (form.qmbHCP().getValue() instanceof HcpLiteVo 
					&& form.qmbHCP().getValue().getIsActiveIsNotNull() 
					&& form.qmbHCP().getValue().getIsActive() 
					&& form.cmbProcedure().getValue() != null 
					&& !extended);

			boolean second = extended && form.qmbProcedure().getValue() != null ;

			form.btnNew().setVisible((first || second)&& !form.getLocalContext().getCurentSelectedSUrgicalOperationDetailsConfigIsNotNull());

			form.btnEdit().setVisible((first || second) && form.getLocalContext().getCurentSelectedSUrgicalOperationDetailsConfigIsNotNull());

			form.btnSearch().setEnabled((first || second)&&!form.getLocalContext().getCurentSelectedSUrgicalOperationDetailsConfigIsNotNull()&& (form.qmbHCP().getValue()!=null||extended));

		}

		if (ims.configuration.gen.ConfigFlag.DTO.EXTENDED_OP_NOTES_TEMPLATE_FIELDS.getValue())
		{
			boolean editMode = FormMode.EDIT.equals(form.getMode());
			form.ctn1().txtPostOP().setEnabled(editMode);  //wdev-13658
			form.qmbProcedure().setEnabled(!editMode);
		}
	}

	private void GetValue()
	{
		SurgicalOperationDetailsConfigVo tempVo = null;
		if (ConfigFlag.DTO.EXTENDED_OP_NOTES_TEMPLATE_FIELDS.getValue())
		{
			clearTextControls();
			if (form.qmbProcedure().getValue() == null)
			{
				
				return;
			}
			tempVo = domain.getSUrgicalOperationDetailsConfig(form.qmbHCP().getValue(), form.qmbProcedure().getValue());
		}
		else
		{
			if (form.qmbHCP().getValue() != null)
			{
				if (form.cmbProcedure().getValue() != null)
					tempVo = domain.getSUrgicalOperationDetailsConfig(form.qmbHCP().getValue(), form.cmbProcedure().getValue());
			}
			else
			{
				engine.showMessage("Select an HCP !!!");
				return;
			}
		}
		if (tempVo == null)
		{
			clearTextControls();
		}
		else
		{

			clearTextControls();
			form.ctn1().txtProcedure().setValue(tempVo.getProcedure());  //wdev-13658
			form.ctn1().txtIncision().setValue(tempVo.getIncision());	 //wdev-13658
			form.ctn1().txtFidings().setValue(tempVo.getFindings());	 //wdev-13658
			form.ctn1().txtClosure().setValue(tempVo.getClosure());      //wdev-13658
			form.ctn1().txtPostOP().setValue(tempVo.getPostOpInstructions());//wdev-13658
			form.ctn1().txtProsthesis().setValue(tempVo.getProsthesis());//wdev-13658
			form.ctn1().txtDrain().setValue(tempVo.getDrain());			  //wdev-13658
			form.ctn1().txtActionforGP().setValue(tempVo.getActionsforGP()); //wdev-13658
			form.ctn1().txtNurseEnabledInstructions().setValue(tempVo.getNurseEnabledInstructions());//wdev-13658
			form.ctn1().txtGeneralInstructions().setValue(tempVo.getHospitalPlan());//wdev-13658
		}
		form.getLocalContext().setCurentSelectedSUrgicalOperationDetailsConfig(tempVo);

	}

	private void populateTextBoxes(SurgicalOperationDetailsConfigVo sutVo)
	{
		if (sutVo != null)
		{
			form.ctn1().txtProcedure().setValue(sutVo.getProcedure());	//wdev-13658
			form.ctn1().txtIncision().setValue(sutVo.getIncision());    //wdev-13658
			form.ctn1().txtFidings().setValue(sutVo.getFindings());		//wdev-13658
			form.ctn1().txtClosure().setValue(sutVo.getClosure());		//wdev-13658
			form.ctn1().txtPostOP().setValue(sutVo.getPostOpInstructions());//wdev-13658
			form.ctn1().txtProsthesis().setValue(sutVo.getProsthesis());	//wdev-13658
			form.ctn1().txtDrain().setValue(sutVo.getDrain());				//wdev-13658
			form.ctn1().txtActionforGP().setValue(sutVo.getActionsforGP()); //wdev-13658
			form.ctn1().txtNurseEnabledInstructions().setValue(sutVo.getNurseEnabledInstructions());//wdev-13658
			form.ctn1().txtGeneralInstructions().setValue(sutVo.getHospitalPlan());//wdev-13658
		}
	}

	protected void onFormModeChanged()
	{
		updateCOntrolStatus();
	}

	private void initialize()
	{
		boolean extended = ims.configuration.gen.ConfigFlag.DTO.EXTENDED_OP_NOTES_TEMPLATE_FIELDS.getValue();
		form.ctn1().lblPostop1().setVisible(extended);		//wdev-13658
		form.ctn1().lblPostop2().setVisible(extended);		//wdev-13658
		form.ctn1().txtPostOP().setVisible(extended);		//wdev-13658
		form.qmbHCP().setRequired(!extended);
		form.cmbProcedure().setVisible(!extended);
		form.qmbProcedure().setVisible(extended);
	}

	@Override
	protected void onQmbProcedureValueChanged() throws PresentationLogicException
	{
		procedureSelected();
	}
	

	@Override
	protected void onQmbProcedureTextSubmited(String value) throws PresentationLogicException
	{
		ProcedureLiteVoCollection listAllProcedures;
		if (form.qmbHCP().getValue() == null)
		{
			listAllProcedures = domain.listAllProcedures(value);
		}
		else
		{
			listAllProcedures = domain.listProcedures(form.qmbHCP().getValue(),value);
		}
		populateProcedureQcombo(listAllProcedures);

	}

}
