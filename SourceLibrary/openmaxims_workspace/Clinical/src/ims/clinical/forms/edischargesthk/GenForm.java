//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.edischargesthk;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageSummaryContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 564, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSummaryForm = loader.loadComponent(123208, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccSummaryControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(0), new Integer(824), new Integer(564), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccSummaryForm, instance1 } );
				ims.framework.Control m_ccSummaryControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccSummaryForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccSummaryControl);
				Menu[] menus1 = m_ccSummaryForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargesummarysthkcomponent.IComponent ccSummary()
			{
				return (ims.clinical.forms.edischargesummarysthkcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSummaryValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSummaryVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSummaryVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSummaryEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSummaryEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageDiagnosisContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 564, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccDiagnosisForm = loader.loadComponent(123156, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 1008, skipContextValidation);
				//ims.framework.Control m_ccDiagnosisControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), new Integer(0), new Integer(824), new Integer(564), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1008), m_ccDiagnosisForm, instance1 } );
				ims.framework.Control m_ccDiagnosisControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1008), m_ccDiagnosisForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccDiagnosisControl);
				Menu[] menus1 = m_ccDiagnosisForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargediagnosisetccomponent.IComponent ccDiagnosis()
			{
				return (ims.clinical.forms.edischargediagnosisetccomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccDiagnosisValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccDiagnosisVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccDiagnosisVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccDiagnosisEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccDiagnosisEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageClinicalInfoContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 564, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccClinicalInfForm = loader.loadComponent(123210, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccClinicalInfControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(0), new Integer(0), new Integer(824), new Integer(564), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccClinicalInfForm, instance1 } );
				ims.framework.Control m_ccClinicalInfControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccClinicalInfForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccClinicalInfControl);
				Menu[] menus1 = m_ccClinicalInfForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargeclinicalinfosthkcomponent.IComponent ccClinicalInf()
			{
				return (ims.clinical.forms.edischargeclinicalinfosthkcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccClinicalInfValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccClinicalInfVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccClinicalInfVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccClinicalInfEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccClinicalInfEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageOpsProcsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 566, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccOpsProcsForm = loader.loadComponent(102301, appForm, startControlID * 10 + 4000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 2009, skipContextValidation);
				//ims.framework.Control m_ccOpsProcsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(0), new Integer(0), new Integer(824), new Integer(566), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2009), m_ccOpsProcsForm, instance1 } );
				ims.framework.Control m_ccOpsProcsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2009), m_ccOpsProcsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccOpsProcsControl);
				Menu[] menus1 = m_ccOpsProcsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargeopsprocscomponent.IComponent ccOpsProcs()
			{
				return (ims.clinical.forms.edischargeopsprocscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccOpsProcsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccOpsProcsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccOpsProcsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccOpsProcsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccOpsProcsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageNeonatalContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 564, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSpecialCBUDForm = loader.loadComponent(123200, appForm, startControlID * 10 + 5000, anchoringHelper5.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccSpecialCBUDControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(0), new Integer(0), new Integer(824), new Integer(564), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccSpecialCBUDForm, instance1 } );
				ims.framework.Control m_ccSpecialCBUDControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccSpecialCBUDForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccSpecialCBUDControl);
				Menu[] menus1 = m_ccSpecialCBUDForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargespecialcarebabyunitdischargecomponent.IComponent ccSpecialCBUD()
			{
				return (ims.clinical.forms.edischargespecialcarebabyunitdischargecomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSpecialCBUDValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSpecialCBUDVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSpecialCBUDVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSpecialCBUDEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSpecialCBUDEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPagePlasticSurgeryContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 564, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccPlasticSBCDForm = loader.loadComponent(123201, appForm, startControlID * 10 + 6000, anchoringHelper6.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccPlasticSBCDControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(0), new Integer(0), new Integer(824), new Integer(564), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccPlasticSBCDForm, instance1 } );
				ims.framework.Control m_ccPlasticSBCDControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccPlasticSBCDForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPlasticSBCDControl);
				Menu[] menus1 = m_ccPlasticSBCDForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargeplasticsurgeryandburnscentredischargecomponent.IComponent ccPlasticSBCD()
			{
				return (ims.clinical.forms.edischargeplasticsurgeryandburnscentredischargecomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPlasticSBCDValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPlasticSBCDVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPlasticSBCDVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPlasticSBCDEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPlasticSBCDEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageFuturePlanContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 564, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccFuturePlanForm = loader.loadComponent(123206, appForm, startControlID * 10 + 7000, anchoringHelper7.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccFuturePlanControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(0), new Integer(0), new Integer(824), new Integer(564), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccFuturePlanForm, instance1 } );
				ims.framework.Control m_ccFuturePlanControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccFuturePlanForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccFuturePlanControl);
				Menu[] menus1 = m_ccFuturePlanForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargefutureplansthkcomponent.IComponent ccFuturePlan()
			{
				return (ims.clinical.forms.edischargefutureplansthkcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccFuturePlanValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccFuturePlanVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccFuturePlanVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccFuturePlanEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccFuturePlanEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageTTAContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 564, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccTTAForm = loader.loadComponent(123198, appForm, startControlID * 10 + 8000, anchoringHelper8.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccTTAControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(0), new Integer(0), new Integer(824), new Integer(564), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccTTAForm, instance1 } );
				ims.framework.Control m_ccTTAControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccTTAForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccTTAControl);
				Menu[] menus1 = m_ccTTAForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargemedssthkcomponent.IComponent ccTTA()
			{
				return (ims.clinical.forms.edischargemedssthkcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccTTAValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccTTAVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccTTAVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccTTAEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccTTAEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageMedicationContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 564, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccMedicationForm = loader.loadComponent(123207, appForm, startControlID * 10 + 9000, anchoringHelper9.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccMedicationControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(0), new Integer(0), new Integer(824), new Integer(564), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccMedicationForm, instance1 } );
				ims.framework.Control m_ccMedicationControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1017),  new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccMedicationForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccMedicationControl);
				Menu[] menus1 = m_ccMedicationForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargemedicationonadmissioncomponent.IComponent ccMedication()
			{
				return (ims.clinical.forms.edischargemedicationonadmissioncomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccMedicationValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccMedicationVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccMedicationVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccMedicationEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccMedicationEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPagePharmacyApprovalContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 564, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccPharmacyApprovalForm = loader.loadComponent(123199, appForm, startControlID * 10 + 10000, anchoringHelper10.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccPharmacyApprovalControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(0), new Integer(0), new Integer(824), new Integer(564), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccPharmacyApprovalForm, instance1 } );
				ims.framework.Control m_ccPharmacyApprovalControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019),  new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccPharmacyApprovalForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPharmacyApprovalControl);
				Menu[] menus1 = m_ccPharmacyApprovalForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargepharmacyapprovalcomponent.IComponent ccPharmacyApproval()
			{
				return (ims.clinical.forms.edischargepharmacyapprovalcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPharmacyApprovalValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPharmacyApprovalVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPharmacyApprovalVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPharmacyApprovalEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPharmacyApprovalEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageReadyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 564, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccReadyForm = loader.loadComponent(123211, appForm, startControlID * 10 + 11000, anchoringHelper11.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccReadyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(0), new Integer(0), new Integer(824), new Integer(564), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccReadyForm, instance1 } );
				ims.framework.Control m_ccReadyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1021),  new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccReadyForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccReadyControl);
				Menu[] menus1 = m_ccReadyForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargepatientreadytoleavesthkcomponent.IComponent ccReady()
			{
				return (ims.clinical.forms.edischargepatientreadytoleavesthkcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccReadyValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccReadyVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccReadyVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccReadyEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccReadyEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageSupplementaryContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 468, 440, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ims.framework.FormUiLogic m_ccAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 12000, anchoringHelper12.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
				//ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(8), new Integer(468), new Integer(440), new Integer(56), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 3), m_ccAuthoringForm, instance1 } );
				ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1023),  new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 3), m_ccAuthoringForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccAuthoringControl);
				Menu[] menus1 = m_ccAuthoringForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Button Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 744, 532, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 664, 532, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 532, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 568, 500, 224, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Supplementary Notes Completed", Boolean.FALSE, null}));
		
				// Rich Text Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 452, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.TRUE, Boolean.FALSE, new Integer(0)} ));
			}

			public ims.core.forms.authoringinfo.IComponent ccAuthoring()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccAuthoringVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccAuthoringVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccAuthoringEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccAuthoringEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Button btnCancelSupp()
			{
				return (Button)super.getControl(1);
			}
			public Button btnSaveSupp()
			{
				return (Button)super.getControl(2);
			}
			public Button btnEditSupp()
			{
				return (Button)super.getControl(3);
			}
			public CheckBox chkCompleted()
			{
				return (CheckBox)super.getControl(4);
			}
			public RichTextControl richTextSupplementary()
			{
				return (RichTextControl)super.getControl(5);
			}
		}
		public static class tabPagePreviewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 566, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccPreviewForm = loader.loadComponent(123212, appForm, startControlID * 10 + 13000, anchoringHelper18.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccPreviewControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(0), new Integer(0), new Integer(824), new Integer(566), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccPreviewForm, instance1 } );
				ims.framework.Control m_ccPreviewControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1030),  new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccPreviewForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPreviewControl);
				Menu[] menus1 = m_ccPreviewForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.edischargepreviewsthkcomponent.IComponent ccPreview()
			{
				return (ims.clinical.forms.edischargepreviewsthkcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPreviewValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPreviewVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPreviewVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPreviewEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPreviewEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageSummary = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Summary", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageSummaryContainer m_tabPageSummaryContainer = (tabPageSummaryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageSummaryContainer.class, m_tabPageSummary, factory);
			super.addContainer(m_tabPageSummary, m_tabPageSummaryContainer);
			ims.framework.utils.SizeInfo m_tabPageSummaryDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPageSummaryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
			m_tabPageSummaryContainer.setContext(form, appForm, m_tabPageSummary, loader, form_images_local, startControlID, m_tabPageSummaryDesignSize, m_tabPageSummaryRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageDiagnosis = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Diag.", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageDiagnosisContainer m_tabPageDiagnosisContainer = (tabPageDiagnosisContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageDiagnosisContainer.class, m_tabPageDiagnosis, factory);
			super.addContainer(m_tabPageDiagnosis, m_tabPageDiagnosisContainer);
			ims.framework.utils.SizeInfo m_tabPageDiagnosisDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPageDiagnosisRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
			m_tabPageDiagnosisContainer.setContext(form, appForm, m_tabPageDiagnosis, loader, form_images_local, startControlID, m_tabPageDiagnosisDesignSize, m_tabPageDiagnosisRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageClinicalInfo = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clinical Info.", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageClinicalInfoContainer m_tabPageClinicalInfoContainer = (tabPageClinicalInfoContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageClinicalInfoContainer.class, m_tabPageClinicalInfo, factory);
			super.addContainer(m_tabPageClinicalInfo, m_tabPageClinicalInfoContainer);
			ims.framework.utils.SizeInfo m_tabPageClinicalInfoDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPageClinicalInfoRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
			m_tabPageClinicalInfoContainer.setContext(form, appForm, m_tabPageClinicalInfo, loader, form_images_local, startControlID, m_tabPageClinicalInfoDesignSize, m_tabPageClinicalInfoRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageOpsProcs = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Procs", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageOpsProcsContainer m_tabPageOpsProcsContainer = (tabPageOpsProcsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageOpsProcsContainer.class, m_tabPageOpsProcs, factory);
			super.addContainer(m_tabPageOpsProcs, m_tabPageOpsProcsContainer);
			ims.framework.utils.SizeInfo m_tabPageOpsProcsDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPageOpsProcsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
			m_tabPageOpsProcsContainer.setContext(form, appForm, m_tabPageOpsProcs, loader, form_images_local, startControlID, m_tabPageOpsProcsDesignSize, m_tabPageOpsProcsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageNeonatal = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Neonatal", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageNeonatalContainer m_tabPageNeonatalContainer = (tabPageNeonatalContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageNeonatalContainer.class, m_tabPageNeonatal, factory);
			super.addContainer(m_tabPageNeonatal, m_tabPageNeonatalContainer);
			ims.framework.utils.SizeInfo m_tabPageNeonatalDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPageNeonatalRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper23.getWidth(), anchoringHelper23.getHeight());
			m_tabPageNeonatalContainer.setContext(form, appForm, m_tabPageNeonatal, loader, form_images_local, startControlID, m_tabPageNeonatalDesignSize, m_tabPageNeonatalRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPagePlasticSurgery = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Plastics", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPagePlasticSurgeryContainer m_tabPagePlasticSurgeryContainer = (tabPagePlasticSurgeryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPagePlasticSurgeryContainer.class, m_tabPagePlasticSurgery, factory);
			super.addContainer(m_tabPagePlasticSurgery, m_tabPagePlasticSurgeryContainer);
			ims.framework.utils.SizeInfo m_tabPagePlasticSurgeryDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPagePlasticSurgeryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper24.getWidth(), anchoringHelper24.getHeight());
			m_tabPagePlasticSurgeryContainer.setContext(form, appForm, m_tabPagePlasticSurgery, loader, form_images_local, startControlID, m_tabPagePlasticSurgeryDesignSize, m_tabPagePlasticSurgeryRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageFuturePlan = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Plan", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageFuturePlanContainer m_tabPageFuturePlanContainer = (tabPageFuturePlanContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageFuturePlanContainer.class, m_tabPageFuturePlan, factory);
			super.addContainer(m_tabPageFuturePlan, m_tabPageFuturePlanContainer);
			ims.framework.utils.SizeInfo m_tabPageFuturePlanDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPageFuturePlanRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper25.getWidth(), anchoringHelper25.getHeight());
			m_tabPageFuturePlanContainer.setContext(form, appForm, m_tabPageFuturePlan, loader, form_images_local, startControlID, m_tabPageFuturePlanDesignSize, m_tabPageFuturePlanRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageTTA = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"TTA", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageTTAContainer m_tabPageTTAContainer = (tabPageTTAContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTTAContainer.class, m_tabPageTTA, factory);
			super.addContainer(m_tabPageTTA, m_tabPageTTAContainer);
			ims.framework.utils.SizeInfo m_tabPageTTADesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPageTTARuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper26.getWidth(), anchoringHelper26.getHeight());
			m_tabPageTTAContainer.setContext(form, appForm, m_tabPageTTA, loader, form_images_local, startControlID, m_tabPageTTADesignSize, m_tabPageTTARuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageMedication = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Med.", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageMedicationContainer m_tabPageMedicationContainer = (tabPageMedicationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageMedicationContainer.class, m_tabPageMedication, factory);
			super.addContainer(m_tabPageMedication, m_tabPageMedicationContainer);
			ims.framework.utils.SizeInfo m_tabPageMedicationDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPageMedicationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper27.getWidth(), anchoringHelper27.getHeight());
			m_tabPageMedicationContainer.setContext(form, appForm, m_tabPageMedication, loader, form_images_local, startControlID, m_tabPageMedicationDesignSize, m_tabPageMedicationRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPagePharmacyApproval = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pharm.", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPagePharmacyApprovalContainer m_tabPagePharmacyApprovalContainer = (tabPagePharmacyApprovalContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPagePharmacyApprovalContainer.class, m_tabPagePharmacyApproval, factory);
			super.addContainer(m_tabPagePharmacyApproval, m_tabPagePharmacyApprovalContainer);
			ims.framework.utils.SizeInfo m_tabPagePharmacyApprovalDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPagePharmacyApprovalRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper28.getWidth(), anchoringHelper28.getHeight());
			m_tabPagePharmacyApprovalContainer.setContext(form, appForm, m_tabPagePharmacyApproval, loader, form_images_local, startControlID, m_tabPagePharmacyApprovalDesignSize, m_tabPagePharmacyApprovalRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageReady = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Ready To Leave", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageReadyContainer m_tabPageReadyContainer = (tabPageReadyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageReadyContainer.class, m_tabPageReady, factory);
			super.addContainer(m_tabPageReady, m_tabPageReadyContainer);
			ims.framework.utils.SizeInfo m_tabPageReadyDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPageReadyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper29.getWidth(), anchoringHelper29.getHeight());
			m_tabPageReadyContainer.setContext(form, appForm, m_tabPageReady, loader, form_images_local, startControlID, m_tabPageReadyDesignSize, m_tabPageReadyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageSupplementary = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Supp", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageSupplementaryContainer m_tabPageSupplementaryContainer = (tabPageSupplementaryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageSupplementaryContainer.class, m_tabPageSupplementary, factory);
			super.addContainer(m_tabPageSupplementary, m_tabPageSupplementaryContainer);
			ims.framework.utils.SizeInfo m_tabPageSupplementaryDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPageSupplementaryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper30.getWidth(), anchoringHelper30.getHeight());
			m_tabPageSupplementaryContainer.setContext(form, appForm, m_tabPageSupplementary, loader, form_images_local, startControlID, m_tabPageSupplementaryDesignSize, m_tabPageSupplementaryRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPagePreview = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Preview", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPagePreviewContainer m_tabPagePreviewContainer = (tabPagePreviewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPagePreviewContainer.class, m_tabPagePreview, factory);
			super.addContainer(m_tabPagePreview, m_tabPagePreviewContainer);
			ims.framework.utils.SizeInfo m_tabPagePreviewDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabPagePreviewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper31.getWidth(), anchoringHelper31.getHeight());
			m_tabPagePreviewContainer.setContext(form, appForm, m_tabPagePreview, loader, form_images_local, startControlID, m_tabPagePreviewDesignSize, m_tabPagePreviewRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
		}
		public void settabPageSummaryEnabled(boolean value)
		{
			tabPageSummary().setEnabled(value);
		}
		public void settabPageDiagnosisEnabled(boolean value)
		{
			tabPageDiagnosis().setEnabled(value);
		}
		public void settabPageClinicalInfoEnabled(boolean value)
		{
			tabPageClinicalInfo().setEnabled(value);
		}
		public void settabPageOpsProcsEnabled(boolean value)
		{
			tabPageOpsProcs().setEnabled(value);
		}
		public void settabPageNeonatalEnabled(boolean value)
		{
			tabPageNeonatal().setEnabled(value);
		}
		public void settabPagePlasticSurgeryEnabled(boolean value)
		{
			tabPagePlasticSurgery().setEnabled(value);
		}
		public void settabPageFuturePlanEnabled(boolean value)
		{
			tabPageFuturePlan().setEnabled(value);
		}
		public void settabPageTTAEnabled(boolean value)
		{
			tabPageTTA().setEnabled(value);
		}
		public void settabPageMedicationEnabled(boolean value)
		{
			tabPageMedication().setEnabled(value);
		}
		public void settabPagePharmacyApprovalEnabled(boolean value)
		{
			tabPagePharmacyApproval().setEnabled(value);
		}
		public void settabPageReadyEnabled(boolean value)
		{
			tabPageReady().setEnabled(value);
		}
		public void settabPageSupplementaryEnabled(boolean value)
		{
			tabPageSupplementary().setEnabled(value);
		}
		public void settabPagePreviewEnabled(boolean value)
		{
			tabPagePreview().setEnabled(value);
		}
		public void showtabPageSummary()
		{
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageSummary().setVisible(true);
		}
		public void showtabPageDiagnosis()
		{
			tabPageSummary().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageDiagnosis().setVisible(true);
		}
		public void showtabPageClinicalInfo()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageClinicalInfo().setVisible(true);
		}
		public void showtabPageOpsProcs()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageOpsProcs().setVisible(true);
		}
		public void showtabPageNeonatal()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageNeonatal().setVisible(true);
		}
		public void showtabPagePlasticSurgery()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPagePlasticSurgery().setVisible(true);
		}
		public void showtabPageFuturePlan()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageFuturePlan().setVisible(true);
		}
		public void showtabPageTTA()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageTTA().setVisible(true);
		}
		public void showtabPageMedication()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageMedication().setVisible(true);
		}
		public void showtabPagePharmacyApproval()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPagePharmacyApproval().setVisible(true);
		}
		public void showtabPageReady()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageReady().setVisible(true);
		}
		public void showtabPageSupplementary()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageSupplementary().setVisible(true);
		}
		public void showtabPagePreview()
		{
			tabPageSummary().setVisible(false);
			tabPageDiagnosis().setVisible(false);
			tabPageClinicalInfo().setVisible(false);
			tabPageOpsProcs().setVisible(false);
			tabPageNeonatal().setVisible(false);
			tabPagePlasticSurgery().setVisible(false);
			tabPageFuturePlan().setVisible(false);
			tabPageTTA().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePharmacyApproval().setVisible(false);
			tabPageReady().setVisible(false);
			tabPageSupplementary().setVisible(false);
			tabPagePreview().setVisible(true);
		}

		public tabPageSummaryContainer tabPageSummary()
		{
			return (tabPageSummaryContainer)super.layers.get(0);
		}
		public tabPageDiagnosisContainer tabPageDiagnosis()
		{
			return (tabPageDiagnosisContainer)super.layers.get(1);
		}
		public tabPageClinicalInfoContainer tabPageClinicalInfo()
		{
			return (tabPageClinicalInfoContainer)super.layers.get(2);
		}
		public tabPageOpsProcsContainer tabPageOpsProcs()
		{
			return (tabPageOpsProcsContainer)super.layers.get(3);
		}
		public tabPageNeonatalContainer tabPageNeonatal()
		{
			return (tabPageNeonatalContainer)super.layers.get(4);
		}
		public tabPagePlasticSurgeryContainer tabPagePlasticSurgery()
		{
			return (tabPagePlasticSurgeryContainer)super.layers.get(5);
		}
		public tabPageFuturePlanContainer tabPageFuturePlan()
		{
			return (tabPageFuturePlanContainer)super.layers.get(6);
		}
		public tabPageTTAContainer tabPageTTA()
		{
			return (tabPageTTAContainer)super.layers.get(7);
		}
		public tabPageMedicationContainer tabPageMedication()
		{
			return (tabPageMedicationContainer)super.layers.get(8);
		}
		public tabPagePharmacyApprovalContainer tabPagePharmacyApproval()
		{
			return (tabPagePharmacyApprovalContainer)super.layers.get(9);
		}
		public tabPageReadyContainer tabPageReady()
		{
			return (tabPageReadyContainer)super.layers.get(10);
		}
		public tabPageSupplementaryContainer tabPageSupplementary()
		{
			return (tabPageSupplementaryContainer)super.layers.get(11);
		}
		public tabPagePreviewContainer tabPagePreview()
		{
			return (tabPagePreviewContainer)super.layers.get(12);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 176, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start eDischarge", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Link Controls
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 731, 8, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Button btnStart()
	{
		return (Button)super.getControl(13);
	}
	public Link lnkReturn()
	{
		return (Link)super.getControl(14);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				EDischargeSTHKList = new LocalFormName(123216);
				PharmacyApprovalWorklist = new LocalFormName(123203);
			}
			public final FormName EDischargeSTHKList;
			public final FormName PharmacyApprovalWorklist;
		}

		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_isReadOnly = new ims.framework.ContextVariable("isReadOnly", prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__isReadOnly_" + componentIdentifier + "");
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_DischargeDetailsRecord = new ims.framework.ContextVariable("DischargeDetailsRecord", prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier + "");
			cxl_SelectedSummaryInstance = new ims.framework.ContextVariable("SelectedSummaryInstance", prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedSummaryInstance_" + componentIdentifier + "");
		}
		
		public boolean getisReadOnlyIsNotNull()
		{
			return !cxl_isReadOnly.getValueIsNull(context);
		}
		public Boolean getisReadOnly()
		{
			return (Boolean)cxl_isReadOnly.getValue(context);
		}
		public void setisReadOnly(Boolean value)
		{
			cxl_isReadOnly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isReadOnly = null;
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.clinical.vo.DischargeSupplementaryNotesVo getSelectedRecord()
		{
			return (ims.clinical.vo.DischargeSupplementaryNotesVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.clinical.vo.DischargeSupplementaryNotesVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getDischargeDetailsRecordIsNotNull()
		{
			return !cxl_DischargeDetailsRecord.getValueIsNull(context);
		}
		public ims.clinical.vo.DischargeDetailsVo getDischargeDetailsRecord()
		{
			return (ims.clinical.vo.DischargeDetailsVo)cxl_DischargeDetailsRecord.getValue(context);
		}
		public void setDischargeDetailsRecord(ims.clinical.vo.DischargeDetailsVo value)
		{
			cxl_DischargeDetailsRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DischargeDetailsRecord = null;
		public boolean getSelectedSummaryInstanceIsNotNull()
		{
			return !cxl_SelectedSummaryInstance.getValueIsNull(context);
		}
		public ims.clinical.vo.EDischargeSTHKSummaryVo getSelectedSummaryInstance()
		{
			return (ims.clinical.vo.EDischargeSTHKSummaryVo)cxl_SelectedSummaryInstance.getValue(context);
		}
		public void setSelectedSummaryInstance(ims.clinical.vo.EDischargeSTHKSummaryVo value)
		{
			cxl_SelectedSummaryInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSummaryInstance = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[98];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1099100009-ID", "ID_DischargeSupplementaryNotes");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1099100009-CARECONTEXT", "CareContext");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1099100009-SUPPLEMENTARYNOTE", "SupplementaryNote");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1099100009-COMPLETEDBY", "CompletedBy");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1099100009-COMPLETEDON", "CompletedOn");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-ID", "ID_DischargeDetails");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-CARECONTEXT", "CareContext");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-DATEOFDISCHARGE", "DateOfDischarge");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-DISCHARGEMETHOD", "DischargeMethod");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-DISCHARGEDESTINATION", "DischargeDestination");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-DISCHARGELETTERSTATUS", "DischargeLetterStatus");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-HASNOCOMPLICATIONS", "HasNoComplications");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-HASNOCOMORBIDITIES", "HasNoComorbidities");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-DISCHARGINGSPECIALTY", "DischargingSpecialty");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-DISCHARGESUPPLEMENTARYLETTERSTATUS", "DischargeSupplementaryLetterStatus");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-HASNODIAGNOSIS", "HasNoDiagnosis");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-METHODOFDISCHARGE", "MethodOfDischarge");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__DischargeDetailsRecord_" + componentIdentifier, "BO-1099100001-ISDIAGNOSISCOMPLETE", "IsDiagnosisComplete");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedSummaryInstance_" + componentIdentifier, "BO-1099100018-ID", "ID_Summary");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedSummaryInstance_" + componentIdentifier, "BO-1099100018-CARECONTEXT", "CareContext");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedSummaryInstance_" + componentIdentifier, "BO-1099100018-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedSummaryInstance_" + componentIdentifier, "BO-1099100018-TTASTATUS", "TTAStatus");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedSummaryInstance_" + componentIdentifier, "BO-1099100018-HASHADANYPROCEDURESPERFORMED", "HasHadAnyProceduresPerformed");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedSummaryInstance_" + componentIdentifier, "BO-1099100018-ADDITONALCLINICALINFO", "AdditonalClinicalInfo");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedSummaryInstance_" + componentIdentifier, "BO-1099100018-DISCHARGELETTERSTATUS", "DischargeLetterStatus");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedSummaryInstance_" + componentIdentifier, "BO-1099100018-DISCHARGESUPPLEMENTARYLETTERSTATUS", "DischargeSupplementaryLetterStatus");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSTHK.__internal_x_context__SelectedSummaryInstance_" + componentIdentifier, "BO-1099100018-DISCHARGEDETAILS", "DischargeDetails");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
