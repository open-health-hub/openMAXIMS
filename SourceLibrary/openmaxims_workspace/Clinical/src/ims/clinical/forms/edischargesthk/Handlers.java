//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.edischargesthk;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkReturnClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnStartClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrDetailsTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onCcSummaryValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcDiagnosisValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcClinicalInfValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcOpsProcsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcSpecialCBUDValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcPlasticSBCDValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcFuturePlanValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcTTAValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcMedicationValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcPharmacyApprovalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcReadyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelSuppClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveSuppClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditSuppClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcPreviewValueChanged() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormOpen(args);
			}
		});
		this.form.lnkReturn().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkReturnClick();
			}
		});
		this.form.btnStart().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnStartClick();
			}
		});
		this.form.lyrDetails().tabPageSummary().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPageSummaryActivated();
			}
		});
		this.form.lyrDetails().tabPageDiagnosis().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPageDiagnosisActivated();
			}
		});
		this.form.lyrDetails().tabPageClinicalInfo().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPageClinicalInfoActivated();
			}
		});
		this.form.lyrDetails().tabPageOpsProcs().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPageOpsProcsActivated();
			}
		});
		this.form.lyrDetails().tabPageNeonatal().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPageNeonatalActivated();
			}
		});
		this.form.lyrDetails().tabPagePlasticSurgery().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPagePlasticSurgeryActivated();
			}
		});
		this.form.lyrDetails().tabPageFuturePlan().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPageFuturePlanActivated();
			}
		});
		this.form.lyrDetails().tabPageTTA().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPageTTAActivated();
			}
		});
		this.form.lyrDetails().tabPageMedication().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPageMedicationActivated();
			}
		});
		this.form.lyrDetails().tabPagePharmacyApproval().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPagePharmacyApprovalActivated();
			}
		});
		this.form.lyrDetails().tabPageReady().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPageReadyActivated();
			}
		});
		this.form.lyrDetails().tabPageSupplementary().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPageSupplementaryActivated();
			}
		});
		this.form.lyrDetails().tabPagePreview().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPagePreviewActivated();
			}
		});
		this.form.lyrDetails().tabPageSummary().setccSummaryValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcSummaryValueChanged();
			}
		});
		this.form.lyrDetails().tabPageDiagnosis().setccDiagnosisValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcDiagnosisValueChanged();
			}
		});
		this.form.lyrDetails().tabPageClinicalInfo().setccClinicalInfValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcClinicalInfValueChanged();
			}
		});
		this.form.lyrDetails().tabPageOpsProcs().setccOpsProcsValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcOpsProcsValueChanged();
			}
		});
		this.form.lyrDetails().tabPageNeonatal().setccSpecialCBUDValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcSpecialCBUDValueChanged();
			}
		});
		this.form.lyrDetails().tabPagePlasticSurgery().setccPlasticSBCDValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcPlasticSBCDValueChanged();
			}
		});
		this.form.lyrDetails().tabPageFuturePlan().setccFuturePlanValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcFuturePlanValueChanged();
			}
		});
		this.form.lyrDetails().tabPageTTA().setccTTAValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcTTAValueChanged();
			}
		});
		this.form.lyrDetails().tabPageMedication().setccMedicationValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcMedicationValueChanged();
			}
		});
		this.form.lyrDetails().tabPagePharmacyApproval().setccPharmacyApprovalValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcPharmacyApprovalValueChanged();
			}
		});
		this.form.lyrDetails().tabPageReady().setccReadyValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcReadyValueChanged();
			}
		});
		this.form.lyrDetails().tabPageSupplementary().btnCancelSupp().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelSuppClick();
			}
		});
		this.form.lyrDetails().tabPageSupplementary().btnSaveSupp().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveSuppClick();
			}
		});
		this.form.lyrDetails().tabPageSupplementary().btnEditSupp().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditSuppClick();
			}
		});
		this.form.lyrDetails().tabPagePreview().setccPreviewValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcPreviewValueChanged();
			}
		});
	}
	private void onlyrDetailstabPageSummaryActivated()
	{
		this.form.lyrDetails().showtabPageSummary();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPageSummary());
	}
	private void onlyrDetailstabPageDiagnosisActivated()
	{
		this.form.lyrDetails().showtabPageDiagnosis();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPageDiagnosis());
	}
	private void onlyrDetailstabPageClinicalInfoActivated()
	{
		this.form.lyrDetails().showtabPageClinicalInfo();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPageClinicalInfo());
	}
	private void onlyrDetailstabPageOpsProcsActivated()
	{
		this.form.lyrDetails().showtabPageOpsProcs();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPageOpsProcs());
	}
	private void onlyrDetailstabPageNeonatalActivated()
	{
		this.form.lyrDetails().showtabPageNeonatal();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPageNeonatal());
	}
	private void onlyrDetailstabPagePlasticSurgeryActivated()
	{
		this.form.lyrDetails().showtabPagePlasticSurgery();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPagePlasticSurgery());
	}
	private void onlyrDetailstabPageFuturePlanActivated()
	{
		this.form.lyrDetails().showtabPageFuturePlan();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPageFuturePlan());
	}
	private void onlyrDetailstabPageTTAActivated()
	{
		this.form.lyrDetails().showtabPageTTA();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPageTTA());
	}
	private void onlyrDetailstabPageMedicationActivated()
	{
		this.form.lyrDetails().showtabPageMedication();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPageMedication());
	}
	private void onlyrDetailstabPagePharmacyApprovalActivated()
	{
		this.form.lyrDetails().showtabPagePharmacyApproval();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPagePharmacyApproval());
	}
	private void onlyrDetailstabPageReadyActivated()
	{
		this.form.lyrDetails().showtabPageReady();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPageReady());
	}
	private void onlyrDetailstabPageSupplementaryActivated()
	{
		this.form.lyrDetails().showtabPageSupplementary();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPageSupplementary());
	}
	private void onlyrDetailstabPagePreviewActivated()
	{
		this.form.lyrDetails().showtabPagePreview();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPagePreview());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
