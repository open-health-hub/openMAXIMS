//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4535.14223)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.plannedperformedproceduredialog;

import java.util.ArrayList;import java.util.Comparator;
import java.util.List;

import ims.clinical.forms.patientproceduresdialog.GenForm.grpFilterEnumeration;
import ims.clinical.forms.plannedperformedproceduredialog.GenForm.GroupStausEnumeration;
import ims.clinical.forms.plannedperformedproceduredialog.GenForm.cmbSurgeonComboBox;
import ims.clinical.forms.plannedperformedproceduredialog.GenForm.grpFilterSpecEnumeration;
import ims.clinical.forms.surgicalauditproceduredetails.Logic.MedicComparator;
import ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo;
import ims.clinical.vo.SurgicalAuditOperationDetailRefVo;
import ims.clinical.vo.SurgicalAuditProcedureDetailsVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.PersonName;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.enums.MosType;

import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.MedicGrade;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.Specialty;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;

import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.vo.interfaces.IClinicalCodingValue;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		clearAll();
		initialize();
		open();
		
		/*
		if( Boolean.TRUE.equals(form.getGlobalContext().Clinical.getSurgicalAuditAddEditActualPlannedProcedure()) && form.getGlobalContext().Clinical.getSurgicalAuditActualPlannedProcedure() == null )
		{
			form.cmbProcedure().setEnabled(true);
			form.txtDescription().setValue(null);
			populateProcdureCombo();
		}
		else if( Boolean.FALSE.equals(form.getGlobalContext().Clinical.getSurgicalAuditAddEditActualPlannedProcedure()) && form.getGlobalContext().Clinical.getSurgicalAuditActualPlannedProcedureIsNotNull() )
		{
			form.cmbProcedure().setEnabled(false);
			PatientProcedureForSurgicalAuditPreOpChecksVo tempVo = form.getGlobalContext().Clinical.getSurgicalAuditActualPlannedProcedure();
			
			form.cmbProcedure().newRow(tempVo.getProcedure(), tempVo.getProcedureDescription());
			form.txtDescription().setValue(tempVo.getProcedureDescription());
			form.cmbProcedure().setValue(tempVo.getProcedure());
			if(tempVo.getConsultantIsNotNull())
			{
				form.ccConsultantName().setValue(domain.getMedicVo(tempVo.getConsultant()));
			}
			if( tempVo.getPeformedByIsNotNull())
			{
				form.ccSurgeon().setValue(domain.getMedicVo(tempVo.getPeformedBy()));
			}
			
			if(	tempVo.getProcedureStatusIsNotNull() && tempVo.getProcedureStatus().equals(PatientProcedureStatus.CANCELLED))
				form.GroupStaus().setValue(GroupStausEnumeration.rdoStatusCancelled);
			else if( tempVo.getProcedureStatusIsNotNull() && tempVo.getProcedureStatus().equals(PatientProcedureStatus.PERFORMED))
				form.GroupStaus().setValue(GroupStausEnumeration.rdoStatusPerformed);
			
			
		}
		*/
	}
	
	//WDEV-15687
	private void open()
	{
		form.ccProcedure().clear();	//wdev-15747
		populateScreenFromData(form.getGlobalContext().Clinical.getSurgicalAuditActualPlannedProcedure());
	}

	//WDEV-15687
	private void populateScreenFromData(PatientProcedureForSurgicalAuditPreOpChecksVo patientProcedure)
	{
		if(patientProcedure == null)
			return;
		form.ccProcedure().setValue(patientProcedure);
		form.ccProcedure().setParentEditing(true);
		
		if(patientProcedure.getConsultantIsNotNull())
		{
			form.ccConsultantName().setValue(domain.getMedicVo(patientProcedure.getConsultant()));
		}
		if( patientProcedure.getPeformedByIsNotNull())
		{
			//WDEV-15687
			//form.ccSurgeon().setValue(domain.getMedicVo(patientProcedure.getPeformedBy()));
			MedicLiteVo surgeon = domain.getMedicLiteVo(patientProcedure.getPeformedBy());
			if (form.cmbSurgeon().getValues().contains(surgeon))
				form.cmbSurgeon().setValue(domain.getMedicLiteVo(patientProcedure.getPeformedBy()));
			else
				{
				form.cmbSurgeon().newRow(surgeon, surgeon.getName().toString());
				form.cmbSurgeon().setValue(surgeon);
				}
		}
		
		/*if(	patientProcedure.getProcedureStatusIsNotNull() && patientProcedure.getProcedureStatus().equals(PatientProcedureStatus.CANCELLED))
			form.GroupStaus().setValue(GroupStausEnumeration.rdoStatusCancelled);
		else if( patientProcedure.getProcedureStatusIsNotNull() && patientProcedure.getProcedureStatus().equals(PatientProcedureStatus.PERFORMED))
			form.GroupStaus().setValue(GroupStausEnumeration.rdoStatusPerformed);
			*/
		//check if "Set Status to Performed" option was selected  
		if( Boolean.FALSE.equals(form.getGlobalContext().Clinical.getSurgicalAuditAddEditActualPlannedProcedure()) )  //wdev-15739
		{
			form.GroupStaus().setValue(GroupStausEnumeration.rdoStatusPerformed);
			enableDisablePerformedCancelledRadioButtons(false);
			form.ccProcedure().setEnabled(false);
			radioButtonGroupStausValueChanged();
		}
	}

	//WDEV-15687
	private void initialize()
	{
		form.grpFilterSpec().setEnabled(grpFilterSpecEnumeration.rdoAll,form.getGlobalContext().Clinical.getSurgicalAuditActualPlannedProcedure()==null);
		form.grpFilterSpec().setEnabled(grpFilterSpecEnumeration.rdoSpecialty,form.getGlobalContext().Clinical.getSurgicalAuditActualPlannedProcedure()==null);
		
		form.ccProcedure().setCodingItemType(CodingItemType.PROCEDURE);
		form.ccProcedure().setSpecialty(getSpecialty());
		form.ccProcedure().setIsRequired(true);
		form.ccProcedure().setParentEditing(true);
		
		form.grpFilterSpec().setValue(grpFilterSpecEnumeration.rdoSpecialty);
		form.ccProcedure().setHotlist(new Boolean(true));
		
		form.ccProcedure().setEnabled(true);
		
		//form.ccSurgeon().initialize(MosType.MEDIC);
		form.ccConsultantName().initialize(null,MedicGrade.CONS);
		populateSurgeonCombo();
		
		//default consultant to the admitting consultant from Care Context
		HcpLiteVo careContextHcp = form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCP();

		if (careContextHcp!=null && careContextHcp.getHcpType().equals(HcpDisType.MEDICAL)) //WDEV-15676
		{
			MedicLiteVo tempMedic = domain.getMedicLiteVo(careContextHcp);
			form.ccConsultantName().setValue(tempMedic);
		}
		
		//form.ccSurgeon().isRequired(true);
		form.ccConsultantName().isRequired(true);
		form.txtdummyStatus().setRequired(true);		//wdev-15739
	}
	
	//WDEV-15687
	private void populateSurgeonCombo()
	{
		SurgicalAuditProcedureDetailsVo currentSurgicalAuditProcDet = form.getGlobalContext().Clinical.getCurrentSurgicalAuditProcedureDetail();
		if (currentSurgicalAuditProcDet==null )
			return;
		if (currentSurgicalAuditProcDet.getOpPerformedBy()==null)
			return;
		MedicLiteVoCollection collSurgeon = currentSurgicalAuditProcDet.getOpPerformedBy();
		collSurgeon.sort(new MedicComparator(SortOrder.ASCENDING));
		for (int i=0;i<collSurgeon.size();i++)
		{
			form.cmbSurgeon().newRow(collSurgeon.get(i), collSurgeon.get(i).getName().toString());
		}
		
	}

	//WDEV-15687
	private Specialty getSpecialty()
	{
		if ((form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()) && (form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty();
		}
		return null;
	}
	//WDEV-15687
	/*
	private void populateProcdureCombo()
	{
		ProcedureLiteVoCollection tempColl = null;
		
		EpisodeofCareShortVo epShort = form.getGlobalContext().Core.getEpisodeofCareShort();
		tempColl = domain.getProcedures(epShort.getSpecialty());
		if( tempColl != null)
		{
			for(int i = 0; i < tempColl.size();i++)
			{
				form.cmbProcedure().newRow(tempColl.get(i), tempColl.get(i).getProcedureName());
			}
		}
	}
	*/
	private void clearAll()
	{
		form.ccProcedure().clear();//WDEV-15687
		form.cmbSurgeon().clear();//WDEV-15687
		form.GroupStaus().setValue(null);
		form.ccConsultantName().clear();
		//form.ccSurgeon().clear();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors = validateUIRules();
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return;
		}
		PatientProcedureForSurgicalAuditPreOpChecksVo tempVo = form.getGlobalContext().Clinical.getSurgicalAuditActualPlannedProcedure();
		if( tempVo == null)
		{
			tempVo = new PatientProcedureForSurgicalAuditPreOpChecksVo();
		
			tempVo.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			tempVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());		
			tempVo.setInfoSource(SourceofInformation.CLINICALCONTACT);
			
			//WDEV-15687
			IClinicalCodingValue procDetails = form.ccProcedure().getValue();
			if (procDetails != null)
			{
				if (procDetails.getIClinicalCodingValue() instanceof ProcedureLiteVo)
				{
					tempVo.setProcedure((ProcedureLiteVo) procDetails.getIClinicalCodingValue());
					tempVo.setProcedureDescription(procDetails.getIClinicalCodingValueDescription());
				}
				else
				{
					throw new CodingRuntimeException("ProcedureLiteVo expected from component");
				}
			}
			else 
			{
				tempVo.setProcedureDescription(null);
			}		

			tempVo.setProcedureStatus(PatientProcedureStatus.PLANNED);
					
		}
		else
		{
			//wdev-15687
			IClinicalCodingValue procDetails = form.ccProcedure().getValue();
			if (procDetails != null)
			{
				if (procDetails.getIClinicalCodingValue() instanceof ProcedureLiteVo)
				{
					tempVo.setProcedureDescription(procDetails.getIClinicalCodingValueDescription());
				}
			}
			//-----------end wdev-15687

		}
			
			
		
		MedicLiteVo consultant = (MedicLiteVo) form.ccConsultantName().getValue();
		HcpLiteVo tempHcp = null;
		if( consultant != null && consultant.getMosIsNotNull())
			tempHcp = domain.getHcpLiteVo(consultant.getMos());
		tempVo.setConsultant( tempHcp );
		
		tempHcp = null;
		//WDEV-15687
		//MedicVo medvo = (MedicVo) form.ccSurgeon().getValue();
		MedicLiteVo medvo = form.cmbSurgeon().getValue();
		if( medvo != null && medvo.getMosIsNotNull())
			tempHcp = domain.getHcpLiteVo(medvo.getMos());
		tempVo.setPeformedBy(tempHcp);
		
		if( form.GroupStaus().getValue() != null && form.GroupStaus().getValue().equals(GroupStausEnumeration.rdoStatusCancelled))
			tempVo.setProcedureStatus(PatientProcedureStatus.CANCELLED);
		else if( form.GroupStaus().getValue() != null && form.GroupStaus().getValue().equals(GroupStausEnumeration.rdoStatusPerformed))
			tempVo.setProcedureStatus(PatientProcedureStatus.PERFORMED);
		
		form.getGlobalContext().Clinical.setSurgicalAuditActualPlannedProcedure(tempVo);
		engine.close(DialogResult.OK);
	}
	
	private String[] validateUIRules() //WDEV-15687
	{
		List<String> uiErrors = new ArrayList<String>();

		if (form.ccProcedure().getValue() ==null)
		{
			uiErrors.add("Clinical Term is mandatory.");
		}
		if (form.ccProcedure().getDescription()==null)
		{
			uiErrors.add("ProcedureDescription is mandatory.");
		}
		if( !GroupStausEnumeration.rdoStatusCancelled.equals(form.GroupStaus().getValue()) && !GroupStausEnumeration.rdoStatusPerformed.equals(form.GroupStaus().getValue()))
			uiErrors.add("Status is mandatory.");
		
		if( form.GroupStaus().getValue() == null || form.GroupStaus().getValue().equals(GroupStausEnumeration.rdoStatusPerformed)) //wdev-15739
		{
			if( form.ccConsultantName().getValue() == null)
				uiErrors.add("Consultant Name is mandatory.");
		
			if (form.cmbSurgeon().getValue()==null)
				uiErrors.add("Surgeon is mandatory.");
		}
		
		
		String[] result = new String[uiErrors.size()];
		uiErrors.toArray(result);
		return result;
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	//WDEV-15687
	protected void onRadioButtongrpFilterSpecValueChanged() throws PresentationLogicException
	{
		form.ccProcedure().setHotlist(form.grpFilterSpec().getValue().equals(grpFilterSpecEnumeration.rdoAll) ? new Boolean(false) : new Boolean(true));
	}
	
	//WDEV-15687
	public class MedicComparator implements Comparator
	{
		private int direction = 1;
		
		public MedicComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public MedicComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			PersonName pdate1 = null;
			PersonName pdate2 = null;
			if(ob1 instanceof MedicLiteVo )
			{
				MedicLiteVo ps1 = (MedicLiteVo)ob1;
				pdate1 = ps1.getMosIsNotNull() && ps1.getMos().getNameIsNotNull() ? ps1.getMos().getName():null;
			}
			if(ob2 instanceof MedicLiteVo)
			{
				MedicLiteVo ps2 = (MedicLiteVo)ob2;
				pdate2 = ps2.getMosIsNotNull() && ps2.getMos().getNameIsNotNull() ? ps2.getMos().getName():null;
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

	//wdev-15739
	protected void onRadioButtonGroupStausValueChanged() throws PresentationLogicException 
	{
		radioButtonGroupStausValueChanged();
		
	}
	private void radioButtonGroupStausValueChanged()
	{
		if( form.GroupStaus().getValue() != null && form.GroupStaus().getValue().equals(GroupStausEnumeration.rdoStatusPerformed))
		{
			form.ccConsultantName().setEnabled(true);
			form.cmbSurgeon().setEnabled(true);
		}
		else if( form.GroupStaus().getValue() != null && form.GroupStaus().getValue().equals(GroupStausEnumeration.rdoStatusCancelled) )
		{
			form.ccConsultantName().setEnabled(false);
			form.cmbSurgeon().setEnabled(false);
			form.ccConsultantName().setValue(null);
			form.cmbSurgeon().setValue(null);
		}
	}
	//wdev-15739
	private void enableDisablePerformedCancelledRadioButtons(Boolean endis)
	{
		form.GroupStaus().setEnabled(endis);
		form.txtdummyStatus().setRequired(endis);
	}
}
