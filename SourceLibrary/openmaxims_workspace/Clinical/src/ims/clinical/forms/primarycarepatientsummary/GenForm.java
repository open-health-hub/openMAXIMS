//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.primarycarepatientsummary;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabProblemsEntityContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdProblemsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdProblemsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolDateOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolDate(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolDate()
				{
					return (String)super.row.get(0);
				}
				public void setcolDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolOriginalTermReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolOriginalTermReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolOriginalTermOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolOriginalTerm(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getcolOriginalTerm()
				{
					return (String)super.row.get(1);
				}
				public void setcolOriginalTerm(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolOriginalTermTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolLastReviewedReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolLastReviewedReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolLastReviewedOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForcolLastReviewed(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getcolLastReviewed()
				{
					return (String)super.row.get(2);
				}
				public void setcolLastReviewed(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolLastReviewedTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolDisplayNameReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolDisplayNameReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolDisplayNameOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForcolDisplayName(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getcolDisplayName()
				{
					return (String)super.row.get(3);
				}
				public void setcolDisplayName(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolDisplayNameTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolActiveReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolActiveOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForcolActive(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.framework.utils.Image getcolActive()
				{
					return (ims.framework.utils.Image)super.row.get(4);
				}
				public void setcolActive(ims.framework.utils.Image value)
				{
					super.row.set(4, value);
				}
				public void setCellcolActiveTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolSignificanceReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolSignificanceReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolSignificanceOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForcolSignificance(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.framework.utils.Image getcolSignificance()
				{
					return (ims.framework.utils.Image)super.row.get(5);
				}
				public void setcolSignificance(ims.framework.utils.Image value)
				{
					super.row.set(5, value);
				}
				public void setCellcolSignificanceTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.clinical.vo.EMISObservationVo getValue()
				{
					return (ims.clinical.vo.EMISObservationVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.EMISObservationVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdProblemsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdProblemsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdProblemsRow get(int index)
				{
					return new grdProblemsRow(super.collection.get(index));
				}
				public grdProblemsRow newRow()
				{
					return new grdProblemsRow(super.collection.newRow());
				}
				public grdProblemsRow newRow(boolean autoSelect)
				{
					return new grdProblemsRow(super.collection.newRow(autoSelect));
				}
				public grdProblemsRow newRowAt(int index)
				{
					return new grdProblemsRow(super.collection.newRowAt(index));
				}
				public grdProblemsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdProblemsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdProblemsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.clinical.vo.EMISObservationVoCollection getValues()
				{
					ims.clinical.vo.EMISObservationVoCollection listOfValues = new ims.clinical.vo.EMISObservationVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.EMISObservationVo getValue()
				{
					return (ims.clinical.vo.EMISObservationVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.EMISObservationVo value)
				{
					super.grid.setValue(value);
				}
				public grdProblemsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdProblemsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdProblemsRowCollection getRows()
				{
					return new grdProblemsRowCollection(super.grid.getRows());
				}
				public grdProblemsRow getRowByValue(ims.clinical.vo.EMISObservationVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdProblemsRow(row);
				}
				public void setcolDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolOriginalTermHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolOriginalTermHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolLastReviewedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolLastReviewedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolDisplayNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolDisplayNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setcolSignificanceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolSignificanceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 776, 472, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdProblemsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdProblemsTemp);
				grdProblemsGrid grdProblems = (grdProblemsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProblemsGrid.class, m_grdProblemsTemp);
				grdProblems.addStringColumn("Date / Time", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProblems.addStringColumn("Original Term", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProblems.addStringColumn("Last Reviewed Date / Time", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProblems.addStringColumn("Display Name", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProblems.addImageColumn("Active", 0, 0, 100, true, 2);
				grdProblems.addImageColumn("Significance", 0, 0, -1, true, 2);
				super.addGrid(grdProblems);
			}

			public grdProblemsGrid grdProblems()
			{
				return (grdProblemsGrid)super.getGrid(0);
			}
		}
		public static class tabMedicationEntityContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdMedicationRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdMedicationRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDrugRecordReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDrugRecordReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDrugRecordOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDrugRecord(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDrugRecord()
				{
					return (String)super.row.get(0);
				}
				public void setColDrugRecord(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDrugRecordTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColLatestIssueDateReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColLatestIssueDateReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColLatestIssueDateOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColLatestIssueDate(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColLatestIssueDate()
				{
					return (String)super.row.get(1);
				}
				public void setColLatestIssueDate(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColLatestIssueDateTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPrescriptionTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPrescriptionTypeReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPrescriptionTypeOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColPrescriptionType(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColPrescriptionType()
				{
					return (String)super.row.get(2);
				}
				public void setColPrescriptionType(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColPrescriptionTypeTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColDrugNameReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColDrugNameReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColDrugNameOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColDrugName(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColDrugName()
				{
					return (String)super.row.get(3);
				}
				public void setColDrugName(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColDrugNameTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColOriginalTermReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColOriginalTermReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColOriginalTermOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColOriginalTerm(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColOriginalTerm()
				{
					return (String)super.row.get(4);
				}
				public void setColOriginalTerm(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColOriginalTermTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDosageReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDosageReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDosageOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColDosage(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColDosage()
				{
					return (String)super.row.get(5);
				}
				public void setColDosage(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDosageTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColQuantityReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColQuantityReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColQuantityOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColQuantity(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getColQuantity()
				{
					return (String)super.row.get(6);
				}
				public void setColQuantity(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColQuantityTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.clinical.vo.EMISMedicationVo getValue()
				{
					return (ims.clinical.vo.EMISMedicationVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.EMISMedicationVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdMedicationRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdMedicationRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdMedicationRow get(int index)
				{
					return new grdMedicationRow(super.collection.get(index));
				}
				public grdMedicationRow newRow()
				{
					return new grdMedicationRow(super.collection.newRow());
				}
				public grdMedicationRow newRow(boolean autoSelect)
				{
					return new grdMedicationRow(super.collection.newRow(autoSelect));
				}
				public grdMedicationRow newRowAt(int index)
				{
					return new grdMedicationRow(super.collection.newRowAt(index));
				}
				public grdMedicationRow newRowAt(int index, boolean autoSelect)
				{
					return new grdMedicationRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdMedicationGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.EMISMedicationVoCollection getValues()
				{
					ims.clinical.vo.EMISMedicationVoCollection listOfValues = new ims.clinical.vo.EMISMedicationVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.EMISMedicationVo getValue()
				{
					return (ims.clinical.vo.EMISMedicationVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.EMISMedicationVo value)
				{
					super.grid.setValue(value);
				}
				public grdMedicationRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdMedicationRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdMedicationRowCollection getRows()
				{
					return new grdMedicationRowCollection(super.grid.getRows());
				}
				public grdMedicationRow getRowByValue(ims.clinical.vo.EMISMedicationVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdMedicationRow(row);
				}
				public void setColDrugRecordHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDrugRecordHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColLatestIssueDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColLatestIssueDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPrescriptionTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPrescriptionTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColDrugNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColDrugNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColOriginalTermHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColOriginalTermHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDosageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDosageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColQuantityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColQuantityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 15, 776, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdMedicationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdMedicationTemp);
				grdMedicationGrid grdMedication = (grdMedicationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMedicationGrid.class, m_grdMedicationTemp);
				grdMedication.addStringColumn("Drug Record", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMedication.addStringColumn("Latest Issue Date", 0, 0, 100, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMedication.addStringColumn("Prescription Type", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMedication.addStringColumn("Drug Name", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMedication.addStringColumn("Original Term", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMedication.addStringColumn("Dosage", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMedication.addStringColumn("Quantity", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdMedication);
			}

			public grdMedicationGrid grdMedication()
			{
				return (grdMedicationGrid)super.getGrid(0);
			}
		}
		public static class tabAllergiesEntityContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdAllergiesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAllergiesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColObservationReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColObservationReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColObservationOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColObservation(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColObservation()
				{
					return (String)super.row.get(0);
				}
				public void setColObservation(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColObservationTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColEffectiveDateReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColEffectiveDateReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColEffectiveDateOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColEffectiveDate(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColEffectiveDate()
				{
					return (String)super.row.get(1);
				}
				public void setColEffectiveDate(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColEffectiveDateTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColOriginalTermReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColOriginalTermReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColOriginalTermOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColOriginalTerm(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColOriginalTerm()
				{
					return (String)super.row.get(2);
				}
				public void setColOriginalTerm(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColOriginalTermTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColConfidentialityPolicyReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColConfidentialityPolicyReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColConfidentialityPolicyOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColConfidentialityPolicy(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColConfidentialityPolicy()
				{
					return (String)super.row.get(3);
				}
				public void setColConfidentialityPolicy(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColConfidentialityPolicyTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColDisplayNameReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColDisplayNameReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColDisplayNameOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColDisplayName(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColDisplayName()
				{
					return (String)super.row.get(4);
				}
				public void setColDisplayName(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColDisplayNameTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.clinical.vo.EMISAllergiesVo getValue()
				{
					return (ims.clinical.vo.EMISAllergiesVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.EMISAllergiesVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAllergiesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAllergiesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAllergiesRow get(int index)
				{
					return new grdAllergiesRow(super.collection.get(index));
				}
				public grdAllergiesRow newRow()
				{
					return new grdAllergiesRow(super.collection.newRow());
				}
				public grdAllergiesRow newRow(boolean autoSelect)
				{
					return new grdAllergiesRow(super.collection.newRow(autoSelect));
				}
				public grdAllergiesRow newRowAt(int index)
				{
					return new grdAllergiesRow(super.collection.newRowAt(index));
				}
				public grdAllergiesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAllergiesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAllergiesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.EMISAllergiesVoCollection getValues()
				{
					ims.clinical.vo.EMISAllergiesVoCollection listOfValues = new ims.clinical.vo.EMISAllergiesVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.EMISAllergiesVo getValue()
				{
					return (ims.clinical.vo.EMISAllergiesVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.EMISAllergiesVo value)
				{
					super.grid.setValue(value);
				}
				public grdAllergiesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAllergiesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAllergiesRowCollection getRows()
				{
					return new grdAllergiesRowCollection(super.grid.getRows());
				}
				public grdAllergiesRow getRowByValue(ims.clinical.vo.EMISAllergiesVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAllergiesRow(row);
				}
				public void setColObservationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColObservationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColEffectiveDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColEffectiveDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColOriginalTermHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColOriginalTermHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColConfidentialityPolicyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColConfidentialityPolicyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColDisplayNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColDisplayNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 776, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdAllergiesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAllergiesTemp);
				grdAllergiesGrid grdAllergies = (grdAllergiesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAllergiesGrid.class, m_grdAllergiesTemp);
				grdAllergies.addStringColumn("Observation", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAllergies.addStringColumn("Effective Date", 0, 0, 100, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAllergies.addStringColumn("Original Term", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAllergies.addStringColumn("Confidentiality Policy", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAllergies.addStringColumn("DisplayName", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdAllergies);
			}

			public grdAllergiesGrid grdAllergies()
			{
				return (grdAllergiesGrid)super.getGrid(0);
			}
		}
		public static class tabAlertsEntityContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdAlertsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAlertsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColAlertReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColAlertReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColAlertOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColAlert(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColAlert()
				{
					return (String)super.row.get(0);
				}
				public void setColAlert(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColAlertTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColEffectiveDateReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColEffectiveDateReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColEffectiveDateOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColEffectiveDate(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColEffectiveDate()
				{
					return (String)super.row.get(1);
				}
				public void setColEffectiveDate(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColEffectiveDateTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColAlertTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColAlertTypeReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColAlertTypeOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColAlertType(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColAlertType()
				{
					return (String)super.row.get(2);
				}
				public void setColAlertType(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColAlertTypeTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColAlertTextReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColAlertTextReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColAlertTextOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColAlertText(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColAlertText()
				{
					return (String)super.row.get(3);
				}
				public void setColAlertText(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColAlertTextTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColConfidentialityPolicyReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColConfidentialityPolicyReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void setColConfidentialityPolicyEmpty(boolean value)
				{
					super.row.setIsEmpty(4, value);
				}
				public boolean isColConfidentialityPolicyEmpty()
				{
					return super.row.isEmpty(4);
				}
				public void showColConfidentialityPolicyOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColConfidentialityPolicy(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColConfidentialityPolicy()
				{
					return (String)super.row.get(4);
				}
				public void setColConfidentialityPolicy(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColConfidentialityPolicyTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.clinical.vo.EMISAlertsVo getValue()
				{
					return (ims.clinical.vo.EMISAlertsVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.EMISAlertsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAlertsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAlertsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAlertsRow get(int index)
				{
					return new grdAlertsRow(super.collection.get(index));
				}
				public grdAlertsRow newRow()
				{
					return new grdAlertsRow(super.collection.newRow());
				}
				public grdAlertsRow newRow(boolean autoSelect)
				{
					return new grdAlertsRow(super.collection.newRow(autoSelect));
				}
				public grdAlertsRow newRowAt(int index)
				{
					return new grdAlertsRow(super.collection.newRowAt(index));
				}
				public grdAlertsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAlertsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAlertsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.EMISAlertsVoCollection getValues()
				{
					ims.clinical.vo.EMISAlertsVoCollection listOfValues = new ims.clinical.vo.EMISAlertsVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.EMISAlertsVo getValue()
				{
					return (ims.clinical.vo.EMISAlertsVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.EMISAlertsVo value)
				{
					super.grid.setValue(value);
				}
				public grdAlertsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAlertsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAlertsRowCollection getRows()
				{
					return new grdAlertsRowCollection(super.grid.getRows());
				}
				public grdAlertsRow getRowByValue(ims.clinical.vo.EMISAlertsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAlertsRow(row);
				}
				public void setColAlertHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColAlertHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColEffectiveDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColEffectiveDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColAlertTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColAlertTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColAlertTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColAlertTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColConfidentialityPolicyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColConfidentialityPolicyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 16, 776, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdAlertsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.contextMenuSelectItems, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAlertsTemp);
				grdAlertsGrid grdAlerts = (grdAlertsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAlertsGrid.class, m_grdAlertsTemp);
				grdAlerts.addStringColumn("Alert", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAlerts.addStringColumn(" Effective Date", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAlerts.addStringColumn(" Alert Type", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAlerts.addStringColumn(" Alert Text", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAlerts.addStringColumn("Confidentiality Policy", 0, 1, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdAlerts);
			}

			public grdAlertsGrid grdAlerts()
			{
				return (grdAlertsGrid)super.getGrid(0);
			}
		}
		public static class tabDiariesEntitiesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdDiariesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDiariesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDiaryReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDiaryReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDiaryOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDiary(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDiary()
				{
					return (String)super.row.get(0);
				}
				public void setColDiary(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDiaryTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColEffectiveDateReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColEffectiveDateReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColEffectiveDateOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColEffectiveDate(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColEffectiveDate()
				{
					return (String)super.row.get(1);
				}
				public void setColEffectiveDate(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColEffectiveDateTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColOriginalTermReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColOriginalTermReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColOriginalTermOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColOriginalTerm(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColOriginalTerm()
				{
					return (String)super.row.get(2);
				}
				public void setColOriginalTerm(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColOriginalTermTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColConfidentialityPolicyReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColConfidentialityPolicyReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColConfidentialityPolicyOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColConfidentialityPolicy(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColConfidentialityPolicy()
				{
					return (String)super.row.get(3);
				}
				public void setColConfidentialityPolicy(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColConfidentialityPolicyTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.clinical.vo.EMISDiariesVo getValue()
				{
					return (ims.clinical.vo.EMISDiariesVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.EMISDiariesVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDiariesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDiariesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDiariesRow get(int index)
				{
					return new grdDiariesRow(super.collection.get(index));
				}
				public grdDiariesRow newRow()
				{
					return new grdDiariesRow(super.collection.newRow());
				}
				public grdDiariesRow newRow(boolean autoSelect)
				{
					return new grdDiariesRow(super.collection.newRow(autoSelect));
				}
				public grdDiariesRow newRowAt(int index)
				{
					return new grdDiariesRow(super.collection.newRowAt(index));
				}
				public grdDiariesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDiariesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDiariesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.EMISDiariesVoCollection getValues()
				{
					ims.clinical.vo.EMISDiariesVoCollection listOfValues = new ims.clinical.vo.EMISDiariesVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.EMISDiariesVo getValue()
				{
					return (ims.clinical.vo.EMISDiariesVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.EMISDiariesVo value)
				{
					super.grid.setValue(value);
				}
				public grdDiariesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDiariesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDiariesRowCollection getRows()
				{
					return new grdDiariesRowCollection(super.grid.getRows());
				}
				public grdDiariesRow getRowByValue(ims.clinical.vo.EMISDiariesVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDiariesRow(row);
				}
				public void setColDiaryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDiaryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColEffectiveDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColEffectiveDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColOriginalTermHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColOriginalTermHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColConfidentialityPolicyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColConfidentialityPolicyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 15, 776, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdDiariesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDiariesTemp);
				grdDiariesGrid grdDiaries = (grdDiariesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiariesGrid.class, m_grdDiariesTemp);
				grdDiaries.addStringColumn("Diary", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiaries.addStringColumn("Effective Date", 0, 0, 100, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiaries.addStringColumn("Original Term", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiaries.addStringColumn("Confidentiality Policy ", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdDiaries);
			}

			public grdDiariesGrid grdDiaries()
			{
				return (grdDiariesGrid)super.getGrid(0);
			}
		}
		public static class tabLastConsultationsEntitiesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdLastConsultationsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdLastConsultationsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColConsultationReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColConsultationReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColConsultationOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColConsultation(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColConsultation()
				{
					return (String)super.row.get(0);
				}
				public void setColConsultation(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColConsultationTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColEffectiveDateReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColEffectiveDateReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColEffectiveDateOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColEffectiveDate(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColEffectiveDate()
				{
					return (String)super.row.get(1);
				}
				public void setColEffectiveDate(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColEffectiveDateTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColAuthorisingHCPReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColAuthorisingHCPReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColAuthorisingHCPOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColAuthorisingHCP(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColAuthorisingHCP()
				{
					return (String)super.row.get(2);
				}
				public void setColAuthorisingHCP(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColAuthorisingHCPTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColLocationTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColLocationTypeReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColLocationTypeOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColLocationType(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColLocationType()
				{
					return (String)super.row.get(3);
				}
				public void setColLocationType(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColLocationTypeTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColConfidentialityPolicyReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColConfidentialityPolicyReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColConfidentialityPolicyOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColConfidentialityPolicy(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColConfidentialityPolicy()
				{
					return (String)super.row.get(4);
				}
				public void setColConfidentialityPolicy(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColConfidentialityPolicyTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColConsultationTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColConsultationTypeReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColConsultationTypeOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColConsultationType(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColConsultationType()
				{
					return (String)super.row.get(5);
				}
				public void setColConsultationType(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColConsultationTypeTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.clinical.vo.EMISLastConsultationsVo getValue()
				{
					return (ims.clinical.vo.EMISLastConsultationsVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.EMISLastConsultationsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdLastConsultationsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdLastConsultationsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdLastConsultationsRow get(int index)
				{
					return new grdLastConsultationsRow(super.collection.get(index));
				}
				public grdLastConsultationsRow newRow()
				{
					return new grdLastConsultationsRow(super.collection.newRow());
				}
				public grdLastConsultationsRow newRow(boolean autoSelect)
				{
					return new grdLastConsultationsRow(super.collection.newRow(autoSelect));
				}
				public grdLastConsultationsRow newRowAt(int index)
				{
					return new grdLastConsultationsRow(super.collection.newRowAt(index));
				}
				public grdLastConsultationsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdLastConsultationsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdLastConsultationsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.EMISLastConsultationsVoCollection getValues()
				{
					ims.clinical.vo.EMISLastConsultationsVoCollection listOfValues = new ims.clinical.vo.EMISLastConsultationsVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.EMISLastConsultationsVo getValue()
				{
					return (ims.clinical.vo.EMISLastConsultationsVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.EMISLastConsultationsVo value)
				{
					super.grid.setValue(value);
				}
				public grdLastConsultationsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdLastConsultationsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdLastConsultationsRowCollection getRows()
				{
					return new grdLastConsultationsRowCollection(super.grid.getRows());
				}
				public grdLastConsultationsRow getRowByValue(ims.clinical.vo.EMISLastConsultationsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdLastConsultationsRow(row);
				}
				public void setColConsultationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColConsultationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColEffectiveDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColEffectiveDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColAuthorisingHCPHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColAuthorisingHCPHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColLocationTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColLocationTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColConfidentialityPolicyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColConfidentialityPolicyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColConsultationTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColConsultationTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 15, 776, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdLastConsultationsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdLastConsultationsTemp);
				grdLastConsultationsGrid grdLastConsultations = (grdLastConsultationsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdLastConsultationsGrid.class, m_grdLastConsultationsTemp);
				grdLastConsultations.addStringColumn("Consultation", 0, 0, 130, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdLastConsultations.addStringColumn("EffectiveDate", 0, 0, 100, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdLastConsultations.addStringColumn("AuthorisingHCP", 0, 0, 130, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdLastConsultations.addStringColumn("Location Type", 0, 0, 130, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdLastConsultations.addStringColumn("Confidentiality Policy", 0, 0, 130, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdLastConsultations.addStringColumn("Consultation Type", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdLastConsultations);
			}

			public grdLastConsultationsGrid grdLastConsultations()
			{
				return (grdLastConsultationsGrid)super.getGrid(0);
			}
		}
		public static class tabHealthStatusEntitiesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdHealthStatusRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdHealthStatusRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColObservationReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColObservationReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColObservationOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColObservation(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColObservation()
				{
					return (String)super.row.get(0);
				}
				public void setColObservation(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColObservationTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColEffectiveDateReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColEffectiveDateReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColEffectiveDateOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColEffectiveDate(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColEffectiveDate()
				{
					return (String)super.row.get(1);
				}
				public void setColEffectiveDate(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColEffectiveDateTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColOriginalTermReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColOriginalTermReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColOriginalTermOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColOriginalTerm(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColOriginalTerm()
				{
					return (String)super.row.get(2);
				}
				public void setColOriginalTerm(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColOriginalTermTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColConfidentialityPolicyReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColConfidentialityPolicyReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColConfidentialityPolicyOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColConfidentialityPolicy(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColConfidentialityPolicy()
				{
					return (String)super.row.get(3);
				}
				public void setColConfidentialityPolicy(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColConfidentialityPolicyTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAbnormalReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAbnormalReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAbnormalOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColAbnormal(String value)
				{
					super.row.setTooltip(4, value);
				}
				public boolean getColAbnormal()
				{
					return ((Boolean)super.row.get(4)).booleanValue();
				}
				public void setColAbnormal(boolean value)
				{
					super.row.set(4, new Boolean(value));
				}
				public void setCellColAbnormalTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColNumericOperatorReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColNumericOperatorReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColNumericOperatorOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColNumericOperator(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColNumericOperator()
				{
					return (String)super.row.get(5);
				}
				public void setColNumericOperator(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColNumericOperatorTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColNumericValueReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColNumericValueReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColNumericValueOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColNumericValue(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getColNumericValue()
				{
					return (String)super.row.get(6);
				}
				public void setColNumericValue(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColNumericValueTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setColNumericUnitsReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isColNumericUnitsReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showColNumericUnitsOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForColNumericUnits(String value)
				{
					super.row.setTooltip(7, value);
				}
				public String getColNumericUnits()
				{
					return (String)super.row.get(7);
				}
				public void setColNumericUnits(String value)
				{
					super.row.set(7, value);
				}
				public void setCellColNumericUnitsTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setColHasChildrenReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean isColHasChildrenReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showColHasChildrenOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForColHasChildren(String value)
				{
					super.row.setTooltip(8, value);
				}
				public boolean getColHasChildren()
				{
					return ((Boolean)super.row.get(8)).booleanValue();
				}
				public void setColHasChildren(boolean value)
				{
					super.row.set(8, new Boolean(value));
				}
				public void setCellColHasChildrenTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public void setColDisplayNameReadOnly(boolean value)
				{
					super.row.setReadOnly(9, value);
				}
				public boolean isColDisplayNameReadOnly()
				{
					return super.row.isReadOnly(9);
				}
				public void showColDisplayNameOpened()
				{
					super.row.showOpened(9);
				}
				public void setTooltipForColDisplayName(String value)
				{
					super.row.setTooltip(9, value);
				}
				public String getColDisplayName()
				{
					return (String)super.row.get(9);
				}
				public void setColDisplayName(String value)
				{
					super.row.set(9, value);
				}
				public void setCellColDisplayNameTooltip(String value)
				{
					super.row.setTooltip(9, value);
				}
				public void setColCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(10, value);
				}
				public boolean isColCodeReadOnly()
				{
					return super.row.isReadOnly(10);
				}
				public void showColCodeOpened()
				{
					super.row.showOpened(10);
				}
				public void setTooltipForColCode(String value)
				{
					super.row.setTooltip(10, value);
				}
				public String getColCode()
				{
					return (String)super.row.get(10);
				}
				public void setColCode(String value)
				{
					super.row.set(10, value);
				}
				public void setCellColCodeTooltip(String value)
				{
					super.row.setTooltip(10, value);
				}
				public void setColObservationTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(11, value);
				}
				public boolean isColObservationTypeReadOnly()
				{
					return super.row.isReadOnly(11);
				}
				public void showColObservationTypeOpened()
				{
					super.row.showOpened(11);
				}
				public void setTooltipForColObservationType(String value)
				{
					super.row.setTooltip(11, value);
				}
				public String getColObservationType()
				{
					return (String)super.row.get(11);
				}
				public void setColObservationType(String value)
				{
					super.row.set(11, value);
				}
				public void setCellColObservationTypeTooltip(String value)
				{
					super.row.setTooltip(11, value);
				}
				public ims.clinical.vo.EMISHealthStatusVo getValue()
				{
					return (ims.clinical.vo.EMISHealthStatusVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.EMISHealthStatusVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdHealthStatusRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdHealthStatusRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdHealthStatusRow get(int index)
				{
					return new grdHealthStatusRow(super.collection.get(index));
				}
				public grdHealthStatusRow newRow()
				{
					return new grdHealthStatusRow(super.collection.newRow());
				}
				public grdHealthStatusRow newRow(boolean autoSelect)
				{
					return new grdHealthStatusRow(super.collection.newRow(autoSelect));
				}
				public grdHealthStatusRow newRowAt(int index)
				{
					return new grdHealthStatusRow(super.collection.newRowAt(index));
				}
				public grdHealthStatusRow newRowAt(int index, boolean autoSelect)
				{
					return new grdHealthStatusRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdHealthStatusGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.clinical.vo.EMISHealthStatusVoCollection getValues()
				{
					ims.clinical.vo.EMISHealthStatusVoCollection listOfValues = new ims.clinical.vo.EMISHealthStatusVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.EMISHealthStatusVo getValue()
				{
					return (ims.clinical.vo.EMISHealthStatusVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.EMISHealthStatusVo value)
				{
					super.grid.setValue(value);
				}
				public grdHealthStatusRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdHealthStatusRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdHealthStatusRowCollection getRows()
				{
					return new grdHealthStatusRowCollection(super.grid.getRows());
				}
				public grdHealthStatusRow getRowByValue(ims.clinical.vo.EMISHealthStatusVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdHealthStatusRow(row);
				}
				public void setColObservationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColObservationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColEffectiveDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColEffectiveDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColOriginalTermHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColOriginalTermHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColConfidentialityPolicyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColConfidentialityPolicyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAbnormalHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAbnormalHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColNumericOperatorHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColNumericOperatorHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColNumericValueHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColNumericValueHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setColNumericUnitsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getColNumericUnitsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setColHasChildrenHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getColHasChildrenHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
				public void setColDisplayNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(9, value);
				}
				public String getColDisplayNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(9);
				}
				public void setColCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(10, value);
				}
				public String getColCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(10);
				}
				public void setColObservationTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(11, value);
				}
				public String getColObservationTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(11);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 776, 504, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdHealthStatusTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdHealthStatusTemp);
				grdHealthStatusGrid grdHealthStatus = (grdHealthStatusGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHealthStatusGrid.class, m_grdHealthStatusTemp);
				grdHealthStatus.addStringColumn("Observation", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHealthStatus.addStringColumn("Effective Date", 0, 0, 100, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHealthStatus.addStringColumn("Original Term", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHealthStatus.addStringColumn("Confidentiality Policy", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHealthStatus.addBoolColumn("Abnormal", 0, 0, 100, true, false, 0, true);
				grdHealthStatus.addStringColumn("Numeric Operator ", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHealthStatus.addStringColumn("Numeric Value", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHealthStatus.addStringColumn("Numeric Units", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHealthStatus.addBoolColumn("Has Children", 0, 0, 50, true, false, 0, true);
				grdHealthStatus.addStringColumn("Display Name", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHealthStatus.addStringColumn("Code", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHealthStatus.addStringColumn("ObservationType", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdHealthStatus);
			}

			public grdHealthStatusGrid grdHealthStatus()
			{
				return (grdHealthStatusGrid)super.getGrid(0);
			}
		}
		public static class tabQuteEntitiesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdHospitalVisitsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdHospitalVisitsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColStartDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColStartDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColStartDateOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColStartDate(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColStartDate()
				{
					return (String)super.row.get(0);
				}
				public void setColStartDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColStartDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColRecordTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColRecordTypeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColRecordTypeOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColRecordType(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColRecordType()
				{
					return (String)super.row.get(1);
				}
				public void setColRecordType(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColRecordTypeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColSpecialityNameReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColSpecialityNameReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColSpecialityNameOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColSpecialityName(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColSpecialityName()
				{
					return (String)super.row.get(2);
				}
				public void setColSpecialityName(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColSpecialityNameTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColDescriptionReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColDescriptionReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColDescriptionOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColDescription(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColDescription()
				{
					return (String)super.row.get(3);
				}
				public void setColDescription(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColDescriptionTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.clinical.vo.EMISAcuteVo getValue()
				{
					return (ims.clinical.vo.EMISAcuteVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.EMISAcuteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdHospitalVisitsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdHospitalVisitsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdHospitalVisitsRow get(int index)
				{
					return new grdHospitalVisitsRow(super.collection.get(index));
				}
				public grdHospitalVisitsRow newRow()
				{
					return new grdHospitalVisitsRow(super.collection.newRow());
				}
				public grdHospitalVisitsRow newRow(boolean autoSelect)
				{
					return new grdHospitalVisitsRow(super.collection.newRow(autoSelect));
				}
				public grdHospitalVisitsRow newRowAt(int index)
				{
					return new grdHospitalVisitsRow(super.collection.newRowAt(index));
				}
				public grdHospitalVisitsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdHospitalVisitsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdHospitalVisitsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.EMISAcuteVoCollection getValues()
				{
					ims.clinical.vo.EMISAcuteVoCollection listOfValues = new ims.clinical.vo.EMISAcuteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.EMISAcuteVo getValue()
				{
					return (ims.clinical.vo.EMISAcuteVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.EMISAcuteVo value)
				{
					super.grid.setValue(value);
				}
				public grdHospitalVisitsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdHospitalVisitsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdHospitalVisitsRowCollection getRows()
				{
					return new grdHospitalVisitsRowCollection(super.grid.getRows());
				}
				public grdHospitalVisitsRow getRowByValue(ims.clinical.vo.EMISAcuteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdHospitalVisitsRow(row);
				}
				public void setColStartDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColStartDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColRecordTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColRecordTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColSpecialityNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColSpecialityNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColDescriptionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColDescriptionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 776, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdHospitalVisitsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdHospitalVisitsTemp);
				grdHospitalVisitsGrid grdHospitalVisits = (grdHospitalVisitsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHospitalVisitsGrid.class, m_grdHospitalVisitsTemp);
				grdHospitalVisits.addStringColumn("Start Date", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHospitalVisits.addStringColumn("Record Type", 0, 0, 200, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHospitalVisits.addStringColumn("Speciality Name", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHospitalVisits.addStringColumn("Description", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdHospitalVisits);
			}

			public grdHospitalVisitsGrid grdHospitalVisits()
			{
				return (grdHospitalVisitsGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabProblemsEntity = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Problems", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabProblemsEntityContainer m_tabProblemsEntityContainer = (tabProblemsEntityContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabProblemsEntityContainer.class, m_tabProblemsEntity, factory);
			super.addContainer(m_tabProblemsEntity, m_tabProblemsEntityContainer);
			ims.framework.utils.SizeInfo m_tabProblemsEntityDesignSize = new ims.framework.utils.SizeInfo(816, 552);
			ims.framework.utils.SizeInfo m_tabProblemsEntityRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper9.getWidth(), anchoringHelper9.getHeight());
			m_tabProblemsEntityContainer.setContext(form, appForm, m_tabProblemsEntity, loader, form_images_local, contextMenus, startControlID, m_tabProblemsEntityDesignSize, m_tabProblemsEntityRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabMedicationEntity = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Medication ", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabMedicationEntityContainer m_tabMedicationEntityContainer = (tabMedicationEntityContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMedicationEntityContainer.class, m_tabMedicationEntity, factory);
			super.addContainer(m_tabMedicationEntity, m_tabMedicationEntityContainer);
			ims.framework.utils.SizeInfo m_tabMedicationEntityDesignSize = new ims.framework.utils.SizeInfo(816, 552);
			ims.framework.utils.SizeInfo m_tabMedicationEntityRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper10.getWidth(), anchoringHelper10.getHeight());
			m_tabMedicationEntityContainer.setContext(form, appForm, m_tabMedicationEntity, loader, form_images_local, contextMenus, startControlID, m_tabMedicationEntityDesignSize, m_tabMedicationEntityRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAllergiesEntity = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Allergies ", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAllergiesEntityContainer m_tabAllergiesEntityContainer = (tabAllergiesEntityContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAllergiesEntityContainer.class, m_tabAllergiesEntity, factory);
			super.addContainer(m_tabAllergiesEntity, m_tabAllergiesEntityContainer);
			ims.framework.utils.SizeInfo m_tabAllergiesEntityDesignSize = new ims.framework.utils.SizeInfo(816, 552);
			ims.framework.utils.SizeInfo m_tabAllergiesEntityRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper11.getWidth(), anchoringHelper11.getHeight());
			m_tabAllergiesEntityContainer.setContext(form, appForm, m_tabAllergiesEntity, loader, form_images_local, contextMenus, startControlID, m_tabAllergiesEntityDesignSize, m_tabAllergiesEntityRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAlertsEntity = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Alerts", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAlertsEntityContainer m_tabAlertsEntityContainer = (tabAlertsEntityContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAlertsEntityContainer.class, m_tabAlertsEntity, factory);
			super.addContainer(m_tabAlertsEntity, m_tabAlertsEntityContainer);
			ims.framework.utils.SizeInfo m_tabAlertsEntityDesignSize = new ims.framework.utils.SizeInfo(816, 552);
			ims.framework.utils.SizeInfo m_tabAlertsEntityRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
			m_tabAlertsEntityContainer.setContext(form, appForm, m_tabAlertsEntity, loader, form_images_local, contextMenus, startControlID, m_tabAlertsEntityDesignSize, m_tabAlertsEntityRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDiariesEntities = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Diaries", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDiariesEntitiesContainer m_tabDiariesEntitiesContainer = (tabDiariesEntitiesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDiariesEntitiesContainer.class, m_tabDiariesEntities, factory);
			super.addContainer(m_tabDiariesEntities, m_tabDiariesEntitiesContainer);
			ims.framework.utils.SizeInfo m_tabDiariesEntitiesDesignSize = new ims.framework.utils.SizeInfo(816, 552);
			ims.framework.utils.SizeInfo m_tabDiariesEntitiesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
			m_tabDiariesEntitiesContainer.setContext(form, appForm, m_tabDiariesEntities, loader, form_images_local, contextMenus, startControlID, m_tabDiariesEntitiesDesignSize, m_tabDiariesEntitiesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabLastConsultationsEntities = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Last Consultations", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabLastConsultationsEntitiesContainer m_tabLastConsultationsEntitiesContainer = (tabLastConsultationsEntitiesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabLastConsultationsEntitiesContainer.class, m_tabLastConsultationsEntities, factory);
			super.addContainer(m_tabLastConsultationsEntities, m_tabLastConsultationsEntitiesContainer);
			ims.framework.utils.SizeInfo m_tabLastConsultationsEntitiesDesignSize = new ims.framework.utils.SizeInfo(816, 552);
			ims.framework.utils.SizeInfo m_tabLastConsultationsEntitiesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
			m_tabLastConsultationsEntitiesContainer.setContext(form, appForm, m_tabLastConsultationsEntities, loader, form_images_local, contextMenus, startControlID, m_tabLastConsultationsEntitiesDesignSize, m_tabLastConsultationsEntitiesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabHealthStatusEntities = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Health Status", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabHealthStatusEntitiesContainer m_tabHealthStatusEntitiesContainer = (tabHealthStatusEntitiesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHealthStatusEntitiesContainer.class, m_tabHealthStatusEntities, factory);
			super.addContainer(m_tabHealthStatusEntities, m_tabHealthStatusEntitiesContainer);
			ims.framework.utils.SizeInfo m_tabHealthStatusEntitiesDesignSize = new ims.framework.utils.SizeInfo(816, 552);
			ims.framework.utils.SizeInfo m_tabHealthStatusEntitiesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
			m_tabHealthStatusEntitiesContainer.setContext(form, appForm, m_tabHealthStatusEntities, loader, form_images_local, contextMenus, startControlID, m_tabHealthStatusEntitiesDesignSize, m_tabHealthStatusEntitiesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabQuteEntities = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Hospital Visits", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabQuteEntitiesContainer m_tabQuteEntitiesContainer = (tabQuteEntitiesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabQuteEntitiesContainer.class, m_tabQuteEntities, factory);
			super.addContainer(m_tabQuteEntities, m_tabQuteEntitiesContainer);
			ims.framework.utils.SizeInfo m_tabQuteEntitiesDesignSize = new ims.framework.utils.SizeInfo(816, 552);
			ims.framework.utils.SizeInfo m_tabQuteEntitiesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
			m_tabQuteEntitiesContainer.setContext(form, appForm, m_tabQuteEntities, loader, form_images_local, contextMenus, startControlID, m_tabQuteEntitiesDesignSize, m_tabQuteEntitiesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabProblemsEntity().setVisible(false);
			tabMedicationEntity().setVisible(false);
			tabAllergiesEntity().setVisible(false);
			tabAlertsEntity().setVisible(false);
			tabDiariesEntities().setVisible(false);
			tabLastConsultationsEntities().setVisible(false);
			tabHealthStatusEntities().setVisible(false);
			tabQuteEntities().setVisible(false);
		}
		public void settabProblemsEntityEnabled(boolean value)
		{
			tabProblemsEntity().setEnabled(value);
		}
		public void settabMedicationEntityEnabled(boolean value)
		{
			tabMedicationEntity().setEnabled(value);
		}
		public void settabAllergiesEntityEnabled(boolean value)
		{
			tabAllergiesEntity().setEnabled(value);
		}
		public void settabAlertsEntityEnabled(boolean value)
		{
			tabAlertsEntity().setEnabled(value);
		}
		public void settabDiariesEntitiesEnabled(boolean value)
		{
			tabDiariesEntities().setEnabled(value);
		}
		public void settabLastConsultationsEntitiesEnabled(boolean value)
		{
			tabLastConsultationsEntities().setEnabled(value);
		}
		public void settabHealthStatusEntitiesEnabled(boolean value)
		{
			tabHealthStatusEntities().setEnabled(value);
		}
		public void settabQuteEntitiesEnabled(boolean value)
		{
			tabQuteEntities().setEnabled(value);
		}
		public void showtabProblemsEntity()
		{
			tabMedicationEntity().setVisible(false);
			tabAllergiesEntity().setVisible(false);
			tabAlertsEntity().setVisible(false);
			tabDiariesEntities().setVisible(false);
			tabLastConsultationsEntities().setVisible(false);
			tabHealthStatusEntities().setVisible(false);
			tabQuteEntities().setVisible(false);
			tabProblemsEntity().setVisible(true);
		}
		public void showtabMedicationEntity()
		{
			tabProblemsEntity().setVisible(false);
			tabAllergiesEntity().setVisible(false);
			tabAlertsEntity().setVisible(false);
			tabDiariesEntities().setVisible(false);
			tabLastConsultationsEntities().setVisible(false);
			tabHealthStatusEntities().setVisible(false);
			tabQuteEntities().setVisible(false);
			tabMedicationEntity().setVisible(true);
		}
		public void showtabAllergiesEntity()
		{
			tabProblemsEntity().setVisible(false);
			tabMedicationEntity().setVisible(false);
			tabAlertsEntity().setVisible(false);
			tabDiariesEntities().setVisible(false);
			tabLastConsultationsEntities().setVisible(false);
			tabHealthStatusEntities().setVisible(false);
			tabQuteEntities().setVisible(false);
			tabAllergiesEntity().setVisible(true);
		}
		public void showtabAlertsEntity()
		{
			tabProblemsEntity().setVisible(false);
			tabMedicationEntity().setVisible(false);
			tabAllergiesEntity().setVisible(false);
			tabDiariesEntities().setVisible(false);
			tabLastConsultationsEntities().setVisible(false);
			tabHealthStatusEntities().setVisible(false);
			tabQuteEntities().setVisible(false);
			tabAlertsEntity().setVisible(true);
		}
		public void showtabDiariesEntities()
		{
			tabProblemsEntity().setVisible(false);
			tabMedicationEntity().setVisible(false);
			tabAllergiesEntity().setVisible(false);
			tabAlertsEntity().setVisible(false);
			tabLastConsultationsEntities().setVisible(false);
			tabHealthStatusEntities().setVisible(false);
			tabQuteEntities().setVisible(false);
			tabDiariesEntities().setVisible(true);
		}
		public void showtabLastConsultationsEntities()
		{
			tabProblemsEntity().setVisible(false);
			tabMedicationEntity().setVisible(false);
			tabAllergiesEntity().setVisible(false);
			tabAlertsEntity().setVisible(false);
			tabDiariesEntities().setVisible(false);
			tabHealthStatusEntities().setVisible(false);
			tabQuteEntities().setVisible(false);
			tabLastConsultationsEntities().setVisible(true);
		}
		public void showtabHealthStatusEntities()
		{
			tabProblemsEntity().setVisible(false);
			tabMedicationEntity().setVisible(false);
			tabAllergiesEntity().setVisible(false);
			tabAlertsEntity().setVisible(false);
			tabDiariesEntities().setVisible(false);
			tabLastConsultationsEntities().setVisible(false);
			tabQuteEntities().setVisible(false);
			tabHealthStatusEntities().setVisible(true);
		}
		public void showtabQuteEntities()
		{
			tabProblemsEntity().setVisible(false);
			tabMedicationEntity().setVisible(false);
			tabAllergiesEntity().setVisible(false);
			tabAlertsEntity().setVisible(false);
			tabDiariesEntities().setVisible(false);
			tabLastConsultationsEntities().setVisible(false);
			tabHealthStatusEntities().setVisible(false);
			tabQuteEntities().setVisible(true);
		}

		public tabProblemsEntityContainer tabProblemsEntity()
		{
			return (tabProblemsEntityContainer)super.layers.get(0);
		}
		public tabMedicationEntityContainer tabMedicationEntity()
		{
			return (tabMedicationEntityContainer)super.layers.get(1);
		}
		public tabAllergiesEntityContainer tabAllergiesEntity()
		{
			return (tabAllergiesEntityContainer)super.layers.get(2);
		}
		public tabAlertsEntityContainer tabAlertsEntity()
		{
			return (tabAlertsEntityContainer)super.layers.get(3);
		}
		public tabDiariesEntitiesContainer tabDiariesEntities()
		{
			return (tabDiariesEntitiesContainer)super.layers.get(4);
		}
		public tabLastConsultationsEntitiesContainer tabLastConsultationsEntities()
		{
			return (tabLastConsultationsEntitiesContainer)super.layers.get(5);
		}
		public tabHealthStatusEntitiesContainer tabHealthStatusEntities()
		{
			return (tabHealthStatusEntitiesContainer)super.layers.get(6);
		}
		public tabQuteEntitiesContainer tabQuteEntities()
		{
			return (tabQuteEntitiesContainer)super.layers.get(7);
		}
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuSelectItems = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuSelectItemsSELECTItem = factory.createMenuItem(startControlID.intValue() + 1, "Site Selection", true, false, new Integer(103108), true, false);
		contextMenus.contextMenuSelectItems.add(contextMenus.contextMenuSelectItemsSELECTItem);
		contextMenus.contextMenuSelectItemsLINKItem = factory.createMenuItem(startControlID.intValue() + 2, "Link Add Ons", true, false, new Integer(101128), true, false);
		contextMenus.contextMenuSelectItems.add(contextMenus.contextMenuSelectItemsLINKItem);
		form.registerMenu(contextMenus.contextMenuSelectItems);


		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 240, 24, 30, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "lbl1", new Integer(0), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 24, 24, 168, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current GP Practice :", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 200, 22, 8, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, " ", new Integer(0), null, new Integer(0)}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Label lbl1()
	{
		return (Label)super.getControl(8);
	}
	public Label lblCurrentGPPractice()
	{
		return (Label)super.getControl(10);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				CriticalError = new ImageHelper(102250, "Images/Core/CriticalError.gif", new Integer(16), new Integer(16));
				GreenSquare = new ImageHelper(102124, "Images/Core/circle_green.png", new Integer(16), new Integer(16));
				YellowSquare = new ImageHelper(102123, "Images/Core/circle_yellow.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image CriticalError;
			public final ims.framework.utils.Image GreenSquare;
			public final ims.framework.utils.Image YellowSquare;
		}
		public final CoreImages Core;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class SelectItems implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int SELECT = 1;
			public static final int LINK = 2;
		}
		public void disableAllSelectItemsMenuItems()
		{
			this.contextMenuSelectItemsSELECTItem.setEnabled(false);
			this.contextMenuSelectItemsLINKItem.setEnabled(false);
		}
		public void hideAllSelectItemsMenuItems()
		{
			this.contextMenuSelectItemsSELECTItem.setVisible(false);
			this.contextMenuSelectItemsLINKItem.setVisible(false);
		}
		private Menu contextMenuSelectItems;
		public MenuItem getSelectItemsSELECTItem()
		{
			return this.contextMenuSelectItemsSELECTItem;
		}
		private MenuItem contextMenuSelectItemsSELECTItem;
		public MenuItem getSelectItemsLINKItem()
		{
			return this.contextMenuSelectItemsLINKItem;
		}
		private MenuItem contextMenuSelectItemsLINKItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
