//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 3952.27656)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.edischargesthklist;

import java.util.Comparator;

import ims.clinical.vo.EDischargeSearchCriteriaVo;
import ims.clinical.vo.EdischargeListSTHKManualAssemblyVo;
import ims.clinical.vo.EdischargeListSTHKManualAssemblyVoCollection;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.YesNo;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.vo.interfaces.IMos;

public class Logic extends BaseLogic
{
	/**
	 *  WDEV-13138
	 * @author George Josan
	 *	Custom comparator used to sort after date
	 */
	private static class DischargeComparator implements Comparator<EdischargeListSTHKManualAssemblyVo>
	{
		private int sortOrder = 1;
		
		// Constructor
		public DischargeComparator(SortOrder sortOrder)
		{
			if (SortOrder.DESCENDING.equals(sortOrder))
				this.sortOrder = -1;
			else
				this.sortOrder = 1;
		}
		
		public int compare(EdischargeListSTHKManualAssemblyVo o1, EdischargeListSTHKManualAssemblyVo o2)
		{
			if (o1.getDischargeDateIsNotNull() && o2.getDischargeDateIsNotNull())
				return o1.getDischargeDate().compareTo(o2.getDischargeDate()) * sortOrder;
			
			if (o1.getDischargeDateIsNotNull() && !o2.getDischargeDateIsNotNull())
				return sortOrder;
			
			if (o2.getDischargeDateIsNotNull() && !o1.getDischargeDateIsNotNull())
				return -1 * sortOrder;
			
			return 0;
		}

	}


	private static final long serialVersionUID = 1L;	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		open();
		
		if (form.getGlobalContext().getEDischargeSearchCriteriaIsNotNull())
			refreshSearchCriteria();
	}
	
	
	private void refreshSearchCriteria() 
	{
		EDischargeSearchCriteriaVo voCriteria = form.getGlobalContext().getEDischargeSearchCriteria();
		
		form.cmbWard().setValue(domain.getWard(voCriteria.getWard()));
		form.cmbStatus().setValue(voCriteria.getStatus());
		form.cmbSpecialty().setValue(voCriteria.getSpecialty());
		form.dteFrom().setValue(voCriteria.getFromDate());
		form.dteTo().setValue(voCriteria.getToDate());
		form.chkDetailsComplete().setValue(voCriteria.getClinicaDetailsCompleteIsNotNull() && voCriteria.getClinicaDetailsComplete().equals(YesNo.YES) ? true :false);
				
		form.ccResponsibleHCP().setValue((IMos)voCriteria.getResponsibleHCP());

		form.cmbTTA().setValue(voCriteria.getTTAStatus());
		form.chkNoEmail().setValue(voCriteria.getNonCornish());
		
		initializeDynamicGrid();
		
		search();
	}
	
	private void initialize()
	{
		clearAll();
		clearSelectedPatient();
		initializeComponents();		
		populateWards();	
	}
	
	private void populateWards() 
	{
		ILocation currentLocation = domain.getCurrentLocation();
		
		if (currentLocation == null)
			return;
		
		//start WDEV-13928
		if(currentLocation instanceof LocationLiteVo)
		{
			LocationLiteVo currentLocationWard = (LocationLiteVo) currentLocation;
			if(LocationType.WARD.equals(currentLocationWard.getType()))
			{
				LocationLiteVoCollection wards = domain.listActiveWardsAtTheSameLevelWithWard(currentLocationWard);
				for (int i = 0; i < wards.size(); i++) 
				{
					form.cmbWard().newRow(wards.get(i), wards.get(i).getName());
				}

				form.cmbWard().setValue(currentLocationWard);
			}
		}
		//end WDEV-13928
		
		LocationLiteVoCollection wards = domain.listActiveWardsForHospitalLite((LocationRefVo) currentLocation);
		for (int i = 0; i < wards.size(); i++) 
		{
			form.cmbWard().newRow(wards.get(i), wards.get(i).getName());
		}
	}
	private void initializeComponents() 
	{
		form.ccResponsibleHCP().initialize(MosType.HCP);
	}
	
	private boolean getUIErrors()
	{
		if (

				form.ccResponsibleHCP().getValue() == null &&
				form.cmbWard().getValue() == null &&
					form.cmbStatus().getValue() == null &&
						form.cmbSpecialty().getValue() == null &&
							form.dteFrom().getValue() == null &&
								form.dteTo().getValue() == null
									&& form.cmbTTA().getValue() == null
									&& ! form.chkNoEmail().getValue())
		{
			engine.showMessage("Please select some search criteria");
			return true;
		}
		
		if (form.dteFrom().getValue() == null &&
				form.dteTo().getValue() != null)
		{
			engine.showMessage("From Date cannot be null");			
			return true;
		}
		if (form.dteFrom().getValue() != null &&
				form.dteTo().getValue() == null)
		{
			engine.showMessage("To Date cannot be null");			
			return true;
		}		
		if (form.dteFrom().getValue() != null &&
				form.dteTo().getValue() != null &&
					form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
		{
			engine.showMessage("From Date cannot be greater than To Date");			
			return true;
		}
			
		return false;		
	}
	
	private void open() 
	{	
		initializeDynamicGrid();
	}
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void setFooter(int size, long milisecondsDB, long milisecondsDisplay )
	{
		String suffix = size>1?"s":"";
		String footer = "(" + size + ") patient" + suffix + " records";
		String milisName = "";
		if(ims.configuration.gen.ConfigFlag.GEN.RELEASE_MODE.getValue() == false)
		{
			if(milisecondsDB == 0)
			{
				milisName = "";
			}
			else if(milisecondsDB < 1000)
			{
				milisName = " - returned in " + milisecondsDB + " milisecond" + suffix;
			}
			else
			{
				milisName = " - returned in " + new Float(milisecondsDB)/1000 + " second" + suffix;
			}
			if(milisecondsDisplay == 0)
			{
				milisName += "";
			}
			else if(milisecondsDisplay < 1000)
			{
				milisName += " - displayed in " + milisecondsDisplay + " milisecond" + suffix;
			}
			else
			{
				milisName += " - displayed in " + new Float(milisecondsDisplay)/1000 + " second" + suffix;
			}
		}
		
		form.dyngrdDischargeDetails().setFooterValue(footer + milisName);
	}
	
	private String createHtmlSpace(int nrOfSpaces)
	{
		String spaces = "";
		for (int i = 1; i < nrOfSpaces; i++) 
		{
			spaces += "&nbsp;";
		}
		
		return spaces;
	}
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		if (getUIErrors())
		{
			clearResults();
			return;
		}
		initializeDynamicGrid();
		search();
	}
	
	private void search() 
	{
		clearResults();
				
		EDischargeSearchCriteriaVo voCriteria = new EDischargeSearchCriteriaVo();
		
		voCriteria.setResponsibleHCP((HcpRefVo)form.ccResponsibleHCP().getValue());
		voCriteria.setWard(form.cmbWard().getValue());
		voCriteria.setStatus(form.cmbStatus().getValue());
		voCriteria.setSpecialty(form.cmbSpecialty().getValue());
		voCriteria.setFromDate(form.dteFrom().getValue());
		voCriteria.setToDate(form.dteTo().getValue());
		voCriteria.setClinicaDetailsComplete(form.chkDetailsComplete().getValue() ? YesNo.YES : null);
		voCriteria.setTTAStatus(form.cmbTTA().getValue());
		voCriteria.setNonCornish(form.chkNoEmail().getValue());
		
		form.getGlobalContext().setEDischargeSearchCriteria(voCriteria);
		
		long startTimeDB = System.currentTimeMillis();		
		EdischargeListSTHKManualAssemblyVoCollection summaryDetails = domain.searchByCriteria(voCriteria);		
		long endTimeDB = System.currentTimeMillis();		
		long startTimeDisplay = System.currentTimeMillis();
		
		if (summaryDetails != null)
			populateGrid(summaryDetails, null);

		long endTimeDisplay = System.currentTimeMillis();
		
		setFooter(form.dyngrdDischargeDetails().getRows().size(), endTimeDB-startTimeDB, endTimeDisplay-startTimeDisplay);

		if (summaryDetails == null
			|| (summaryDetails != null
				&& summaryDetails.size() == 0))
			engine.showMessage("No eDischarges found.");
	}

	private void populateGrid(EdischargeListSTHKManualAssemblyVoCollection summaryDetails, EdischargeListSTHKManualAssemblyVo voToFind) 
	{
		form.dyngrdDischargeDetails().getRows().clear();
		for (int i = 0; i < summaryDetails.size(); i++) 
		{				
			DynamicGridRow row = form.dyngrdDischargeDetails().getRows().newRow();
			row.setIdentifier(summaryDetails.get(i).getCareContextRefVo());
			row.setValue(summaryDetails.get(i));
			
			DynamicGridCell consultantCell = row.getCells().newCell(getCol("CONSULTANT"), DynamicCellType.HTMLVIEW);
				
			consultantCell.setValue(summaryDetails.get(i).getResponsibleHCPName());
			consultantCell.setTooltip(summaryDetails.get(i).getResponsibleHCPName());

			DynamicGridCell wardCell = row.getCells().newCell(getCol("WARD"), DynamicCellType.HTMLVIEW);	
			wardCell.setValue(summaryDetails.get(i).getWardIsNotNull() ? summaryDetails.get(i).getWard() : "");								
				
			DynamicGridCell dischargeDateCell = row.getCells().newCell(getCol("DISCHARGE_DATE"), DynamicCellType.HTMLVIEW);	
			dischargeDateCell.setValue(summaryDetails.get(i).getDischargeDateIsNotNull() ? (summaryDetails.get(i).getDischargeDate().toString() ) : "");				
			dischargeDateCell.setTooltip(summaryDetails.get(i).getDischargeDateIsNotNull() ? (summaryDetails.get(i).getDischargeDate().toString() ) : "");				
				
			DynamicGridCell patientNameCell = row.getCells().newCell(getCol("PATIENT_NAME"), DynamicCellType.HTMLVIEW);	
			patientNameCell.setValue(summaryDetails.get(i).getPatientName());						
			patientNameCell.setTooltip(summaryDetails.get(i).getPatientName());
			//row.setIdentifier(patientSTHK);
			row.setValue(summaryDetails.get(i));
							
			DynamicGridCell hospitalNoCell = row.getCells().newCell(getCol("HOSPITAL_NO"), DynamicCellType.HTMLVIEW);	
			hospitalNoCell.setValue(summaryDetails.get(i).getPatientHospnumIsNotNull() ? summaryDetails.get(i).getPatientHospnum() : "" );						
			hospitalNoCell.setTooltip(summaryDetails.get(i).getPatientHospnumIsNotNull() ? summaryDetails.get(i).getPatientHospnum() : "" );
				
			DynamicGridCell letterStatusCell = row.getCells().newCell(getCol("LETTER_STATUS"), DynamicCellType.HTMLVIEW);	
			letterStatusCell.setValue(summaryDetails.get(i).getLetterStatusIsNotNull() ? summaryDetails.get(i).getLetterStatus() : "");// ? 		
			letterStatusCell.setTooltip(summaryDetails.get(i).getLetterStatusIsNotNull() ? summaryDetails.get(i).getLetterStatus() : "");// ? 		
			
				//						(summaryDetails.get(i).getDischargeLetterStatus().getImage() != null ?
				//						("<img src='" +summaryDetails.get(i).getDischargeLetterStatus().getImage().getImagePath()+ "'> ")  : "") + 
				//						summaryDetails.get(i).getDischargeLetterStatus().getIItemText() : "");
			//	letterStatusCell.setTextColor(summaryDetails.get(i).getDischargeLetterStatusIsNotNull() ? 						 
			//			summaryDetails.get(i).getDischargeLetterStatus().getTextColor() : Color.Black);
			
			
			//	letterStatusCell.setTooltip(summaryDetails.get(i).getDischargeLetterStatusIsNotNull() ? 						 
			//							(summaryDetails.get(i).getDischargeLetterStatus().getImage() != null ?
			//							("<img src='" +summaryDetails.get(i).getDischargeLetterStatus().getImage().getImagePath()+ "'> ")  : "") + 
			//							summaryDetails.get(i).getDischargeLetterStatus().getIItemText() : "");
			if (voToFind != null 
				&& voToFind.equals(summaryDetails.get(i)))
				form.dyngrdDischargeDetails().setSelectedRow(row);
		}
	}


	private DynamicGridColumn getCol(String identifier) 
	{
		return form.dyngrdDischargeDetails().getColumns().getByIdentifier(identifier);
	}
	
	private void initializeDynamicGrid()
	{
		form.dyngrdDischargeDetails().clear();
		form.dyngrdDischargeDetails().setSelectable(true);
		form.dyngrdDischargeDetails().setReadOnly(true);
		form.dyngrdDischargeDetails().setFooterMaxHeight(18);
		
		DynamicGridColumn consultantColumn = null;
		consultantColumn = form.dyngrdDischargeDetails().getColumns().newColumn("Responsible HCP", true);				
		consultantColumn.setIdentifier("CONSULTANT");
		consultantColumn.setWidth(170);
		consultantColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn wardColumn = form.dyngrdDischargeDetails().getColumns().newColumn("Ward", true);
		wardColumn.setIdentifier("WARD");
		wardColumn.setWidth(140);			
		wardColumn.setSortMode(SortMode.AUTOMATIC);
		
		DynamicGridColumn dischargeDateColumn = form.dyngrdDischargeDetails().getColumns().newColumn("Discharge Date", true);
		dischargeDateColumn.setIdentifier("DISCHARGE_DATE");
		dischargeDateColumn.setWidth(105);	
		dischargeDateColumn.setSortMode(SortMode.MANUAL);
		
		DynamicGridColumn methodColumn = form.dyngrdDischargeDetails().getColumns().newColumn("Patient Name", true);
		methodColumn.setIdentifier("PATIENT_NAME");
		methodColumn.setWidth(170);			
		methodColumn.setSortMode(SortMode.AUTOMATIC);
		
		DynamicGridColumn destinationColumn = form.dyngrdDischargeDetails().getColumns().newColumn("Hospital No", true);
		destinationColumn.setIdentifier("HOSPITAL_NO");
		destinationColumn.setWidth(100);		
		destinationColumn.setSortMode(SortMode.AUTOMATIC);
			
		DynamicGridColumn letterStatusColumn = form.dyngrdDischargeDetails().getColumns().newColumn("Letter Status", true);
		letterStatusColumn.setIdentifier("LETTER_STATUS");
		letterStatusColumn.setWidth(100);		
		letterStatusColumn.setSortMode(SortMode.AUTOMATIC);
	}
	
	private void clearControls()
	{
		form.ccResponsibleHCP().clear();
		form.cmbWard().setValue(null);
		form.cmbStatus().setValue(null);
		form.cmbSpecialty().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.cmbTTA().setValue(null);
		form.chkNoEmail().setValue(null);
		form.chkDetailsComplete().setValue(null);//WDEV-11793
	}
	
	private void clearResults()
	{
		form.dyngrdDischargeDetails().getRows().clear();
		form.getContextMenus().Clinical.getEDischargeListViewItem().setVisible(false);
	}
	
	private void clearAll()
	{
		clearControls();
		clearResults();
		form.getContextMenus().Clinical.getEDischargeListViewItem().setVisible(false);
		form.dyngrdDischargeDetails().setFooterValue("(0) patients records");
	}
	@Override
	protected void onDyngrdDischargeDetailsRowSelectionChanged(DynamicGridRow row) 
	{		
		if (row != null &&
				row.getIdentifier() != null &&
					row.getIdentifier() instanceof CareContextRefVo &&
						row.getValue() != null &&
							row.getValue() instanceof EdischargeListSTHKManualAssemblyVo)
		{
			form.getGlobalContext().Core.setPatientShort(domain.getPatientByCareContext((CareContextRefVo)row.getIdentifier()));
			
			CareContextRefVo careContextRefVo = ((EdischargeListSTHKManualAssemblyVo) row.getValue()).getCareContextRefVoIsNotNull() ? ((EdischargeListSTHKManualAssemblyVo) row.getValue()).getCareContextRefVo() : null;
			if (careContextRefVo != null)
			{
				CareContextShortVo careContextShortVo = domain.getCareContextShort(careContextRefVo);
				if (careContextShortVo != null)
				{
					form.getGlobalContext().Core.setCurrentCareContext(careContextShortVo);
					form.getContextMenus().Clinical.getEDischargeListViewItem().setVisible(true);
				}				
			}			
		}
		else
		{
			clearSelectedPatient();
		}
		
		
	}
	private void clearSelectedPatient()
	{
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getContextMenus().Clinical.getEDischargeListViewItem().setVisible(false);
	}
	private void viewDischargeDetails() 
	{
		engine.open(form.getForms().Clinical.EDischargeSTHK);		
	}


	@Override
	protected void onCmbTTAValueChanged() throws PresentationLogicException {
		// TODO Auto-generated method stub
		
	}


	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeList.View:
				viewDischargeDetails();
				break;
			default:
				break;
		}	
		
	}


	@Override
	protected void onDyngrdDischargeDetailsColumnHeaderClicked(DynamicGridColumn column)
	{
		
		if (column.equals(getCol("DISCHARGE_DATE")))
		{
			if(form.getLocalContext().getSortOrderDateOfDischarge() == null)
				form.getLocalContext().setSortOrderDateOfDischarge(SortOrder.ASCENDING);
			
			EdischargeListSTHKManualAssemblyVoCollection voColl = new EdischargeListSTHKManualAssemblyVoCollection();
			
			for (int i = 0 ; i < form.dyngrdDischargeDetails().getRows().size() ; i++)
				voColl.add(((EdischargeListSTHKManualAssemblyVo) form.dyngrdDischargeDetails().getRows().get(i).getValue()));	
			
			if(form.getLocalContext().getSortOrderDateOfDischarge().equals(SortOrder.ASCENDING))
			{
				form.getLocalContext().setSortOrderDateOfDischarge(SortOrder.DESCENDING);
				voColl.sort(new DischargeComparator(SortOrder.DESCENDING));					// WDEV-13138 - Sort using custom comparator
			}
			else if(form.getLocalContext().getSortOrderDateOfDischarge().equals(SortOrder.DESCENDING))
			{
				form.getLocalContext().setSortOrderDateOfDischarge(SortOrder.ASCENDING);
				voColl.sort(new DischargeComparator(SortOrder.ASCENDING));					// WDEV-13138 - Sort using custom comparator
			}
				
			Object selected = form.dyngrdDischargeDetails().getValue();
			form.dyngrdDischargeDetails().getRows().clear();
			
			populateGrid(voColl, form.dyngrdDischargeDetails().getSelectedRow() != null ? (EdischargeListSTHKManualAssemblyVo)form.dyngrdDischargeDetails().getSelectedRow().getValue() : null);
			
			form.dyngrdDischargeDetails().setValue(selected);
			}
	}
}
