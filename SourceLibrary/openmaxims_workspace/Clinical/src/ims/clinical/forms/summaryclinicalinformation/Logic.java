//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4535.14223)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.summaryclinicalinformation;

import java.util.ArrayList;

import ims.clinical.vo.SummaryClinicalInformationDisplayVo;
import ims.clinical.vo.SummaryClinicalInformationDisplayVoCollection;
import ims.clinical.vo.SummaryClinicalInformationVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	//-----------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers region
	//-----------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onRecbrSummaryClinicalInformationValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Update the selected record context
		form.getLocalContext().setSelectedSummaryClinicalInformation(domain.getSummaryClinicalInformation(form.recbrSummaryClinicalInformation().getValue()));
		
		// Present new record to screen
		populateInstanceControlsFromData(form.getLocalContext().getSelectedSummaryClinicalInformation());
		
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	
	//-----------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//-----------------------------------------------------------------------------------------------------------------------------------
	
	
	public void initialize() throws FormOpenException
	{
		// Set is required to authoring component
		form.ccAuthoring().setIsRequiredPropertyToControls(Boolean.TRUE);
		
		// Clear selected record context
		form.getLocalContext().setSelectedSummaryClinicalInformation(null);
	}
	
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear screen
		clear();
		
		// Populate record browser with list records from database
		populateRecordBrowser(domain.listSummaryClinicalInformation(form.getGlobalContext().Core.getPatientShort()));
		
		// Get record browser current record from database into local context
		form.getLocalContext().setSelectedSummaryClinicalInformation(domain.getSummaryClinicalInformation(form.recbrSummaryClinicalInformation().getValue()));
		
		// Present selected record to screen
		populateInstanceControlsFromData(form.getLocalContext().getSelectedSummaryClinicalInformation());
		
		// Set form to VIEW mode
		form.setMode(FormMode.VIEW);
	}
	
	public void clear()
	{
		// Clear record browser
		form.recbrSummaryClinicalInformation().clear();
		
		// Clear instance controls
		clearInstanceControls();
	}
	
	public void clearInstanceControls()
	{
		// Clear authoring information custom control
		form.ccAuthoring().setValue(null);
		
		// Clear 'Last updated' date time control
		form.dtimLastUpdated().setValue(null);

		// Clear 'Summary Clinical Information' text control
		form.txtSummaryClinicalInformation().setValue(null);
	}
	
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear selected record local context
		form.getLocalContext().setSelectedSummaryClinicalInformation(null);
		
		// Clear instance controls
		clearInstanceControls();
		
		// Set default values
		form.ccAuthoring().initializeComponent();
		
		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}

	public void updateInstance()
	{
		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			// Populate data from screen
			form.getLocalContext().setSelectedSummaryClinicalInformation(populateDataFromControlInstances(form.getLocalContext().getSelectedSummaryClinicalInformation()));

			// Validate data
			String[] errors = form.getLocalContext().getSelectedSummaryClinicalInformation().validate(); //WDEV-16879 removed validateUIRules()
			// Display errors if any
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt save
			form.getLocalContext().setSelectedSummaryClinicalInformation(domain.saveSummaryClinicalInformation(form.getLocalContext().getSelectedSummaryClinicalInformation()));
			// Save successful
			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			e.printStackTrace();
			return false;
		}
	}
	
	public String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		String authoringError = form.ccAuthoring().getErrors();
		
		if (authoringError != null && !("".equals(authoringError)))
			errors.add(authoringError);
		
		return errors.toArray(new String[errors.size()]);
	}
	
	public void updateControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNew().setVisible(true);
			form.btnNew().setEnabled(domain.getHcpLiteUser() != null || domain.getMosUser() != null);
			
			form.btnEdit().setVisible(form.recbrSummaryClinicalInformation().getValue() != null);
			form.btnEdit().setEnabled(isTheSameHCP(form.getLocalContext().getSelectedSummaryClinicalInformation()) || isTheSameMoS(form.getLocalContext().getSelectedSummaryClinicalInformation()));
		}
		
		form.ccAuthoring().setEnabledAuthoringHCP(FormMode.EDIT.equals(form.getMode()));
		form.ccAuthoring().setEnabledDateTime(FormMode.EDIT.equals(form.getMode()));

		boolean isUpdated = hasBeenUpdated(form.getLocalContext().getSelectedSummaryClinicalInformation());
		
		form.dtimLastUpdated().setEnabled(false);
		form.dtimLastUpdated().setVisible(isUpdated);
		form.lblLastUpdated().setVisible(isUpdated);
	}


	//-----------------------------------------------------------------------------------------------------------------------------------
	//	Data exchange functions
	//-----------------------------------------------------------------------------------------------------------------------------------

	private void populateRecordBrowser(SummaryClinicalInformationDisplayVoCollection summaries)
	{
		// Clear record browser
		form.recbrSummaryClinicalInformation().clear();
		
		// Check records collection
		if (summaries == null)
		{
			form.getLocalContext().setSelectedSummaryClinicalInformation(null);
			return;
		}
		
		// Iterate records collection and add each of them to record browser
		for (SummaryClinicalInformationDisplayVo summary : summaries)
		{
			form.recbrSummaryClinicalInformation().newRow(summary, getDisplayString(summary));
		}
		
		// If there was a selected record attempt to reselect it, else select the first record
		if (form.getLocalContext().getSelectedSummaryClinicalInformation() != null)
		{
			form.recbrSummaryClinicalInformation().setValue(form.getLocalContext().getSelectedSummaryClinicalInformation());
		}
		// If no selection was performed then attempt to select first record 
		if (form.recbrSummaryClinicalInformation().getValue() == null && summaries.size() > 0)
		{
			form.recbrSummaryClinicalInformation().setValue(summaries.get(0));
		}
	}

	private void populateInstanceControlsFromData(SummaryClinicalInformationVo summary)
	{
		// Clear instance controls
		clearInstanceControls();
		
		// Check record to populate
		if (summary == null)
			return;
		
		// Populate data to instance controls
		form.ccAuthoring().setValue(summary.getAuthoringInformation());
		form.dtimLastUpdated().setValue(summary.getSystemInformation().getLastupdateDateTime());
		form.txtSummaryClinicalInformation().setValue(summary.getSummaryClinicalInfo());
	}

	private SummaryClinicalInformationVo populateDataFromControlInstances(SummaryClinicalInformationVo summary)
	{
		// If a new record is being created - then set default value
		if (summary == null)
		{
			summary = new SummaryClinicalInformationVo();
			
			RecordingUserInformationVo recordingUser = new RecordingUserInformationVo();
			recordingUser.setRecordingUser((MemberOfStaffLiteVo) domain.getMosUser());
			recordingUser.setRecordingDateTime(new DateTime());
			summary.setRecordingUser(recordingUser);
			
			summary.setPatient(form.getGlobalContext().Core.getPatientShort());
		}
		
		// Populate data from screen
		summary.setAuthoringInformation(form.ccAuthoring().getValue());
		summary.setSummaryClinicalInfo(form.txtSummaryClinicalInformation().getValue());

		// Return record
		return summary;
	}

	private String getDisplayString(SummaryClinicalInformationDisplayVo summary)
	{
		if (summary == null)
			throw new CodingRuntimeException("Can not build display string for null record value.");
		
		StringBuilder displayString = new StringBuilder();

		displayString.append("Authoring HCP: ");
		if (summary.getAuthoringInformation() != null && summary.getAuthoringInformation().getAuthoringHcp() != null)
			displayString.append(summary.getAuthoringInformation().getAuthoringHcp().toString());
		else
			displayString.append(" -");
		
		displayString.append(" Authoring Date Time: ");
		if (summary.getAuthoringInformation() != null && summary.getAuthoringInformation().getAuthoringDateTime() != null)
			displayString.append(summary.getAuthoringInformation().getAuthoringDateTime().toString());
		else
			displayString.append(" -");
		
		return displayString.toString();
	}

	private boolean isTheSameMoS(SummaryClinicalInformationVo summary)
	{
		if (summary == null)
			return false;
		
		MemberOfStaffLiteVo mosLite = (MemberOfStaffLiteVo) domain.getMosUser();
		
		if (mosLite == null)
			return false;
		
		return mosLite.equals(summary.getRecordingUser().getRecordingUser());
	}

	private boolean isTheSameHCP(SummaryClinicalInformationVo summary)
	{
		if (summary == null)
			return false;
		
		HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();
		
		if (hcpUser == null)
			return false;
		
		return hcpUser.equals(summary.getAuthoringInformation().getAuthoringHcp());
	}

	private boolean hasBeenUpdated(SummaryClinicalInformationVo summary)
	{
		if (summary == null)
			return false;
		
		if (summary.getSystemInformation().getLastupdateDateTime() != null)
			return true;

		return false;
	}

}
