//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 3952.27656)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.edischargestartdialog;

import ims.clinical.forms.edischargestartdialog.GenForm.GroupPatProcEnumeration;
import ims.clinical.vo.EDischargeStartVo;
import ims.core.vo.lookups.YesNo;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		Boolean enableOpsProcs = false;
		Boolean enableAdditional = false;
		//take in 2 booleans which will decide what is editable here
		if(args != null)
		{
			if(args.length == 2)
			{
				if(args[0] != null)
					enableOpsProcs = (Boolean) args[0];
				if(args[1] != null)
					enableAdditional = (Boolean) args[1];
			}
		}
		
		form.cmbAdditionalClinicalInfo().setEnabled(enableAdditional);
		form.GroupPatProc().setEnabled(enableOpsProcs);
		
		if(form.getGlobalContext().Clinical.getEDischargeStartIsNotNull())
		{
			EDischargeStartVo voStart = form.getGlobalContext().Clinical.getEDischargeStart();
			
			form.cmbAdditionalClinicalInfo().setValue(voStart.getAdditonalClinicalInfo());
			
			YesNo val = voStart.getHasHadAnyProceduresPerformed();
			form.GroupPatProc().setValue( val != null && val.equals(YesNo.YES) ? GroupPatProcEnumeration.rdoYes :  (val != null && val.equals(YesNo.NO) ? GroupPatProcEnumeration.rdoNo :  GroupPatProcEnumeration.None) );
		}
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getGlobalContext().Clinical.getEDischargeStart() == null)
			form.getGlobalContext().Clinical.setEDischargeStart(new EDischargeStartVo());
		
		form.getGlobalContext().Clinical.getEDischargeStart().setAdditonalClinicalInfo(form.cmbAdditionalClinicalInfo().getValue());
		form.getGlobalContext().Clinical.getEDischargeStart().setHasHadAnyProceduresPerformed(  form.GroupPatProc().getValue().equals(GenForm.GroupPatProcEnumeration.rdoYes) ? YesNo.YES : (form.GroupPatProc().getValue().equals(GenForm.GroupPatProcEnumeration.rdoNo) ? YesNo.NO : null));
		
		
		engine.close(DialogResult.OK);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		engine.close(DialogResult.CANCEL);
	}
}
