//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.hospitalatnightpatientdetail;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbMEWSComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.MEWS value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.MEWS value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.MEWS value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.MEWS value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.MEWS value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.MEWS getValue()
		{
			return (ims.clinical.vo.lookups.MEWS)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.MEWS value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdClinicalTaskRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdClinicalTaskRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColClinicalTaskReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColClinicalTaskReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColClinicalTaskOpened()
		{
			super.row.showOpened(0);
		}
		public String getColClinicalTask()
		{
			return (String)super.row.get(0);
		}
		public void setColClinicalTask(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColClinicalTaskTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.clinical.vo.lookups.HospitalAtNightClinicalTask getValue()
		{
			return (ims.clinical.vo.lookups.HospitalAtNightClinicalTask)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.HospitalAtNightClinicalTask value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdClinicalTaskRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdClinicalTaskRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdClinicalTaskRow get(int index)
		{
			return new grdClinicalTaskRow(super.collection.get(index));
		}
		public grdClinicalTaskRow newRow()
		{
			return new grdClinicalTaskRow(super.collection.newRow());
		}
		public grdClinicalTaskRow newRow(boolean autoSelect)
		{
			return new grdClinicalTaskRow(super.collection.newRow(autoSelect));
		}
		public grdClinicalTaskRow newRowAt(int index)
		{
			return new grdClinicalTaskRow(super.collection.newRowAt(index));
		}
		public grdClinicalTaskRow newRowAt(int index, boolean autoSelect)
		{
			return new grdClinicalTaskRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdClinicalTaskGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.clinical.vo.lookups.HospitalAtNightClinicalTask[] getValues()
		{
			ims.clinical.vo.lookups.HospitalAtNightClinicalTask[] listOfValues = new ims.clinical.vo.lookups.HospitalAtNightClinicalTask[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.clinical.vo.lookups.HospitalAtNightClinicalTask getValue()
		{
			return (ims.clinical.vo.lookups.HospitalAtNightClinicalTask)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.HospitalAtNightClinicalTask value)
		{
			super.grid.setValue(value);
		}
		public grdClinicalTaskRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdClinicalTaskRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdClinicalTaskRowCollection getRows()
		{
			return new grdClinicalTaskRowCollection(super.grid.getRows());
		}
		public grdClinicalTaskRow getRowByValue(ims.clinical.vo.lookups.HospitalAtNightClinicalTask value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdClinicalTaskRow(row);
		}
		public void setColClinicalTaskHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColClinicalTaskHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdUpdatedNotesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdUpdatedNotesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDateTimeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDateTimeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColDateTime(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColDateTime()
		{
			return (String)super.row.get(0);
		}
		public void setColDateTime(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColDateTimeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColHCPReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColHCPReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColHCPOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColHCP(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColHCP()
		{
			return (String)super.row.get(1);
		}
		public void setColHCP(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColHCPTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColNoteReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColNoteReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColNoteOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColNote(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColNote()
		{
			return (String)super.row.get(2);
		}
		public void setColNote(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColNoteTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.clinical.vo.HospitalAtNightNotesVo getValue()
		{
			return (ims.clinical.vo.HospitalAtNightNotesVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.HospitalAtNightNotesVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdUpdatedNotesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdUpdatedNotesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdUpdatedNotesRow get(int index)
		{
			return new grdUpdatedNotesRow(super.collection.get(index));
		}
		public grdUpdatedNotesRow newRow()
		{
			return new grdUpdatedNotesRow(super.collection.newRow());
		}
		public grdUpdatedNotesRow newRow(boolean autoSelect)
		{
			return new grdUpdatedNotesRow(super.collection.newRow(autoSelect));
		}
		public grdUpdatedNotesRow newRowAt(int index)
		{
			return new grdUpdatedNotesRow(super.collection.newRowAt(index));
		}
		public grdUpdatedNotesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdUpdatedNotesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdUpdatedNotesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.clinical.vo.HospitalAtNightNotesVoCollection getValues()
		{
			ims.clinical.vo.HospitalAtNightNotesVoCollection listOfValues = new ims.clinical.vo.HospitalAtNightNotesVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.HospitalAtNightNotesVo getValue()
		{
			return (ims.clinical.vo.HospitalAtNightNotesVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.HospitalAtNightNotesVo value)
		{
			super.grid.setValue(value);
		}
		public grdUpdatedNotesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdUpdatedNotesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdUpdatedNotesRowCollection getRows()
		{
			return new grdUpdatedNotesRowCollection(super.grid.getRows());
		}
		public grdUpdatedNotesRow getRowByValue(ims.clinical.vo.HospitalAtNightNotesVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdUpdatedNotesRow(row);
		}
		public void setColDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColHCPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColHCPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColNoteHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColNoteHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdTypeRequestRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTypeRequestRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColTypeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColTypeOpened()
		{
			super.row.showOpened(0);
		}
		public String getColType()
		{
			return (String)super.row.get(0);
		}
		public void setColType(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColTypeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColSelectOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.clinical.vo.lookups.HospitalAtNightRequestType getValue()
		{
			return (ims.clinical.vo.lookups.HospitalAtNightRequestType)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.HospitalAtNightRequestType value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdTypeRequestRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTypeRequestRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTypeRequestRow get(int index)
		{
			return new grdTypeRequestRow(super.collection.get(index));
		}
		public grdTypeRequestRow newRow()
		{
			return new grdTypeRequestRow(super.collection.newRow());
		}
		public grdTypeRequestRow newRow(boolean autoSelect)
		{
			return new grdTypeRequestRow(super.collection.newRow(autoSelect));
		}
		public grdTypeRequestRow newRowAt(int index)
		{
			return new grdTypeRequestRow(super.collection.newRowAt(index));
		}
		public grdTypeRequestRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTypeRequestRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTypeRequestGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.clinical.vo.lookups.HospitalAtNightRequestType[] getValues()
		{
			ims.clinical.vo.lookups.HospitalAtNightRequestType[] listOfValues = new ims.clinical.vo.lookups.HospitalAtNightRequestType[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.clinical.vo.lookups.HospitalAtNightRequestType getValue()
		{
			return (ims.clinical.vo.lookups.HospitalAtNightRequestType)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.HospitalAtNightRequestType value)
		{
			super.grid.setValue(value);
		}
		public grdTypeRequestRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTypeRequestRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTypeRequestRowCollection getRows()
		{
			return new grdTypeRequestRowCollection(super.grid.getRows());
		}
		public grdTypeRequestRow getRowByValue(ims.clinical.vo.lookups.HospitalAtNightRequestType value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTypeRequestRow(row);
		}
		public void setColTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(800, 600);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuHospitalAtNightClinicalTaskMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuHospitalAtNightClinicalTaskMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 1, "Edit", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4270001)))
			contextMenus.Clinical.contextMenuHospitalAtNightClinicalTaskMenu.add(contextMenus.Clinical.contextMenuHospitalAtNightClinicalTaskMenuEDITItem);
		form.registerMenu(contextMenus.Clinical.contextMenuHospitalAtNightClinicalTaskMenu);
		contextMenus.Clinical.contextMenuHospitalAtNightUpdateNotes = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Clinical.contextMenuHospitalAtNightUpdateNotesNEWItem = factory.createMenuItem(startControlID.intValue() + 2, "New", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3980001)))
			contextMenus.Clinical.contextMenuHospitalAtNightUpdateNotes.add(contextMenus.Clinical.contextMenuHospitalAtNightUpdateNotesNEWItem);
		contextMenus.Clinical.contextMenuHospitalAtNightUpdateNotesEDITItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3980002)))
			contextMenus.Clinical.contextMenuHospitalAtNightUpdateNotes.add(contextMenus.Clinical.contextMenuHospitalAtNightUpdateNotesEDITItem);
		form.registerMenu(contextMenus.Clinical.contextMenuHospitalAtNightUpdateNotes);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 392, 768, 168, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Notes", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 152, 328, 312, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_ccRequestingHCPForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 8, skipContextValidation);
		//ims.framework.Control m_ccRequestingHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(152), new Integer(328), new Integer(312), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 8), m_ccRequestingHCPForm, instance1 } );
		ims.framework.Control m_ccRequestingHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 8), m_ccRequestingHCPForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccRequestingHCPControl);
		Menu[] menus1 = m_ccRequestingHCPForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 15, 354, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requesting Date/Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 330, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requesting HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 26, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Situation:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 74, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assessment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 50, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Background:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 98, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recommendation:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 160, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Type of Request:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 122, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "MEWS:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 709, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 95, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Active", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 568, 136, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Remove From List", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 630, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 709, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 152, 24, 632, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(150), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 152, 72, 632, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 152, 48, 632, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 152, 96, 632, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 152, 352, 296, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 152, 120, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbMEWSTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbMEWSTemp);
		cmbMEWSComboBox cmbMEWS = (cmbMEWSComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMEWSComboBox.class, m_cmbMEWSTemp);
		super.addComboBox(cmbMEWS);

		// Grid Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 464, 160, 320, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdClinicalTaskTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuHospitalAtNightClinicalTaskMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdClinicalTaskTemp);
		grdClinicalTaskGrid grdClinicalTask = (grdClinicalTaskGrid)GridFlyweightFactory.getInstance().createGridBridge(grdClinicalTaskGrid.class, m_grdClinicalTaskTemp);
		grdClinicalTask.addStringColumn("Clinical Task", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdClinicalTask);
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 24, 424, 744, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdUpdatedNotesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuHospitalAtNightUpdateNotes, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdUpdatedNotesTemp);
		grdUpdatedNotesGrid grdUpdatedNotes = (grdUpdatedNotesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdUpdatedNotesGrid.class, m_grdUpdatedNotesTemp);
		grdUpdatedNotes.addStringColumn("Date Time", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdUpdatedNotes.addStringColumn("Authoring HCP", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdUpdatedNotes.addStringColumn("Note", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdUpdatedNotes);
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 152, 160, 296, 152, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		Grid m_grdTypeRequestTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdTypeRequestTemp);
		grdTypeRequestGrid grdTypeRequest = (grdTypeRequestGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTypeRequestGrid.class, m_grdTypeRequestTemp);
		grdTypeRequest.addStringColumn("Type", 0, 0, 220, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTypeRequest.setColTypeHeaderTooltip("Type");
		grdTypeRequest.addBoolColumn("Select", 0, 0, -1, false, true, 0, true);
		grdTypeRequest.setColSelectHeaderTooltip("Select");
		super.addGrid(grdTypeRequest);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.core.forms.mosquery.IComponent ccRequestingHCP()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccRequestingHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccRequestingHCPVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccRequestingHCPVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccRequestingHCPEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccRequestingHCPEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public Button btnClose()
	{
		return (Button)super.getControl(10);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(11);
	}
	public Button btnActive()
	{
		return (Button)super.getControl(12);
	}
	public Button btnRemoveFromList()
	{
		return (Button)super.getControl(13);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(14);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(15);
	}
	public TextBox txtSituation()
	{
		return (TextBox)super.getControl(16);
	}
	public TextBox txtAssessment()
	{
		return (TextBox)super.getControl(17);
	}
	public TextBox txtBackground()
	{
		return (TextBox)super.getControl(18);
	}
	public TextBox txtRecommendation()
	{
		return (TextBox)super.getControl(19);
	}
	public DateTimeControl dtimRequestingDate()
	{
		return (DateTimeControl)super.getControl(20);
	}
	public cmbMEWSComboBox cmbMEWS()
	{
		return (cmbMEWSComboBox)super.getComboBox(0);
	}
	public grdClinicalTaskGrid grdClinicalTask()
	{
		return (grdClinicalTaskGrid)super.getGrid(0);
	}
	public grdUpdatedNotesGrid grdUpdatedNotes()
	{
		return (grdUpdatedNotesGrid)super.getGrid(1);
	}
	public grdTypeRequestGrid grdTypeRequest()
	{
		return (grdTypeRequestGrid)super.getGrid(2);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				ClinicalTask = new LocalFormName(123225);
				Notes = new LocalFormName(123226);
			}
			public final FormName ClinicalTask;
			public final FormName Notes;
		}

		public ClinicalForms Clinical;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedInstance = new ims.framework.ContextVariable("SelectedInstance", prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier + "");
			cxl_InpatientCareContext = new ims.framework.ContextVariable("InpatientCareContext", prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__InpatientCareContext_" + componentIdentifier + "");
			cxl_ErrorMessage = new ims.framework.ContextVariable("ErrorMessage", prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__ErrorMessage_" + componentIdentifier + "");
			cxl_DialogMode = new ims.framework.ContextVariable("DialogMode", prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__DialogMode_" + componentIdentifier + "");
			cxl_HospitalAtNightConfig = new ims.framework.ContextVariable("HospitalAtNightConfig", prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__HospitalAtNightConfig_" + componentIdentifier + "");
			cxl_LoggedHCP = new ims.framework.ContextVariable("LoggedHCP", prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__LoggedHCP_" + componentIdentifier + "");
		}
		
		public boolean getSelectedInstanceIsNotNull()
		{
			return !cxl_SelectedInstance.getValueIsNull(context);
		}
		public ims.clinical.vo.HospitalAtNightPatientDetailVo getSelectedInstance()
		{
			return (ims.clinical.vo.HospitalAtNightPatientDetailVo)cxl_SelectedInstance.getValue(context);
		}
		public void setSelectedInstance(ims.clinical.vo.HospitalAtNightPatientDetailVo value)
		{
			cxl_SelectedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInstance = null;
		public boolean getInpatientCareContextIsNotNull()
		{
			return !cxl_InpatientCareContext.getValueIsNull(context);
		}
		public ims.clinical.vo.InpatientEpisodeWithCareContextVo getInpatientCareContext()
		{
			return (ims.clinical.vo.InpatientEpisodeWithCareContextVo)cxl_InpatientCareContext.getValue(context);
		}
		public void setInpatientCareContext(ims.clinical.vo.InpatientEpisodeWithCareContextVo value)
		{
			cxl_InpatientCareContext.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InpatientCareContext = null;
		public boolean getErrorMessageIsNotNull()
		{
			return !cxl_ErrorMessage.getValueIsNull(context);
		}
		public Integer getErrorMessage()
		{
			return (Integer)cxl_ErrorMessage.getValue(context);
		}
		public void setErrorMessage(Integer value)
		{
			cxl_ErrorMessage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ErrorMessage = null;
		public boolean getDialogModeIsNotNull()
		{
			return !cxl_DialogMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getDialogMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_DialogMode.getValue(context);
		}
		public void setDialogMode(ims.framework.enumerations.FormMode value)
		{
			cxl_DialogMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DialogMode = null;
		public boolean getHospitalAtNightConfigIsNotNull()
		{
			return !cxl_HospitalAtNightConfig.getValueIsNull(context);
		}
		public ims.clinical.vo.HospitalAtNightCutOverPointsConfigVo getHospitalAtNightConfig()
		{
			return (ims.clinical.vo.HospitalAtNightCutOverPointsConfigVo)cxl_HospitalAtNightConfig.getValue(context);
		}
		public void setHospitalAtNightConfig(ims.clinical.vo.HospitalAtNightCutOverPointsConfigVo value)
		{
			cxl_HospitalAtNightConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HospitalAtNightConfig = null;
		public boolean getLoggedHCPIsNotNull()
		{
			return !cxl_LoggedHCP.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getLoggedHCP()
		{
			return (ims.core.vo.HcpLiteVo)cxl_LoggedHCP.getValue(context);
		}
		public void setLoggedHCP(ims.core.vo.HcpLiteVo value)
		{
			cxl_LoggedHCP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoggedHCP = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class HospitalAtNightClinicalTaskMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 1;
			}
			public void disableAllHospitalAtNightClinicalTaskMenuMenuItems()
			{
				this.contextMenuHospitalAtNightClinicalTaskMenuEDITItem.setEnabled(false);
			}
			public void hideAllHospitalAtNightClinicalTaskMenuMenuItems()
			{
				this.contextMenuHospitalAtNightClinicalTaskMenuEDITItem.setVisible(false);
			}
			private Menu contextMenuHospitalAtNightClinicalTaskMenu;
			public ReadOnlyMenuItem getHospitalAtNightClinicalTaskMenuEDITItem()
			{
				return this.contextMenuHospitalAtNightClinicalTaskMenuEDITItem;
			}
			private MenuItem contextMenuHospitalAtNightClinicalTaskMenuEDITItem;
			public final class HospitalAtNightUpdateNotes implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW = 2;
				public static final int EDIT = 3;
			}
			public void disableAllHospitalAtNightUpdateNotesMenuItems()
			{
				this.contextMenuHospitalAtNightUpdateNotesNEWItem.setEnabled(false);
				this.contextMenuHospitalAtNightUpdateNotesEDITItem.setEnabled(false);
			}
			public void hideAllHospitalAtNightUpdateNotesMenuItems()
			{
				this.contextMenuHospitalAtNightUpdateNotesNEWItem.setVisible(false);
				this.contextMenuHospitalAtNightUpdateNotesEDITItem.setVisible(false);
			}
			private Menu contextMenuHospitalAtNightUpdateNotes;
			public ReadOnlyMenuItem getHospitalAtNightUpdateNotesNEWItem()
			{
				return this.contextMenuHospitalAtNightUpdateNotesNEWItem;
			}
			private MenuItem contextMenuHospitalAtNightUpdateNotesNEWItem;
			public ReadOnlyMenuItem getHospitalAtNightUpdateNotesEDITItem()
			{
				return this.contextMenuHospitalAtNightUpdateNotesEDITItem;
			}
			private MenuItem contextMenuHospitalAtNightUpdateNotesEDITItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[95];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.HospitalAtNightNotes", "BO-1072100097-ID", "ID_HospitalAtNightNotes");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.HospitalAtNightNotes", "BO-1072100097-NOTE", "Note");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.HospitalAtNightPatientDetails", "BO-1072100096-ID", "ID_HospitalAtNightPatientDetail");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-ID", "ID_HospitalAtNightPatientDetail");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-CARECONTEXT", "CareContext");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-PATIENT", "Patient");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-SITUATION", "Situation");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-BACKGROUND", "Background");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-ASSESSMENT", "Assessment");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-RECOMMENDATION", "Recommendation");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-MEWS", "MEWS");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-TYPEOFREQUEST", "TypeOfRequest");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-REQUESTINGDATETIME", "RequestingDateTime");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-WARDWHENPLACEDONLIST", "WardWhenPlacedOnList");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-HOSPITALATNIGHTLISTANDDATES", "HospitalAtNightListAndDates");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__HospitalAtNightConfig_" + componentIdentifier, "BO-1073100034-ID", "ID_HospitalAtNightCutOverPointsConfig");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__HospitalAtNightConfig_" + componentIdentifier, "BO-1073100034-STARTTIME", "StartTime");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__HospitalAtNightConfig_" + componentIdentifier, "BO-1073100034-ENDTIME", "EndTime");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__HospitalAtNightConfig_" + componentIdentifier, "BO-1073100034-HOSPITAL", "Hospital");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightPatientDetail.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
