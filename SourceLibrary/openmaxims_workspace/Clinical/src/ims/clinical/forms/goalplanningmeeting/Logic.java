//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.51 build 2461.19791)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.goalplanningmeeting;

import java.util.ArrayList;

import ims.clinical.vo.GoalPlanningMeetingAttendeeVo;
import ims.clinical.vo.GoalPlanningMeetingAttendeeVoCollection;
import ims.clinical.vo.GoalPlanningShortVo;
import ims.clinical.vo.GoalPlanningShortVoCollection;
import ims.clinical.vo.GoalPlanningVo;
import ims.clinical.vo.lookups.AttendanceStatus;
import ims.clinical.vo.lookups.AttendanceStatusCollection;
import ims.clinical.vo.lookups.GoalPlanningCancellationReasonCollection;
import ims.clinical.vo.lookups.GoalPlanningOutcome;
import ims.clinical.vo.lookups.GoalPlanningOutcomeCollection;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.ClinicalTeamMemberVoCollection;
import ims.core.vo.Hcp;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		LoadCombos();
		form.btnUpdate().setVisible(false);
		form.ctnDetails().setCollapsed(true);
		open();
	}
	private void open() 
	{
		initialiseInviteesGrid();
		setScreenToView();
		GoalPlanningShortVoCollection collGoalPlanningShortVo = domain.listGoalPlanningShortVo(form.getGlobalContext().Core.getCurrentCareContext());
		populateGrid(collGoalPlanningShortVo);
		form.getLocalContext().setGoalPlanningVo(null);
	}
	private void populateGrid(GoalPlanningShortVoCollection collGoalPlanningVo) 
	{
		if (collGoalPlanningVo != null)
		{
			form.grdSummary().getRows().clear();
			GenForm.grdSummaryRow tempRow;
 			for (int i=0; i<collGoalPlanningVo.size(); i++)
			{
 				GoalPlanningShortVo voGoalPlanning = collGoalPlanningVo.get(i);
				tempRow = form.grdSummary().getRows().newRow();
				tempRow.setValue(voGoalPlanning);
				if(voGoalPlanning.getGoalPlanningDateIsNotNull())
					tempRow.setColDateCC(voGoalPlanning.getGoalPlanningDate().toString());
				if(voGoalPlanning.getGoalPlanningOutcomeIsNotNull())
					tempRow.setColOutcome(voGoalPlanning.getGoalPlanningOutcome().getText());
				if(voGoalPlanning.getCommentsIsNotNull()){
					tempRow.setColComments(voGoalPlanning.getComments());
					tempRow.setTooltipForColComments(voGoalPlanning.getComments());
				}
			}
		}
	}
	private void setScreenToView() 
	{
		form.setMode(FormMode.VIEW);
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().hideAllGoalPlanningMeetingInviteesMenuItems();
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
		form.getContextMenus().getGenericGridAddItem().setText("New");
		form.btnUpdate().setVisible(true);
		form.btnUpdate().setEnabled(false);
		
		clearDetails();
	}

	private void clearDetails() 
	{
		form.ctnDetails().customControlAuthor().setValue(null);
		form.ctnDetails().dyngrdInvitees().getRows().clear();
		form.ctnDetails().dteDateGP().setValue(null);
		form.ctnDetails().pdtPredDiscDte().setValue(null);
		form.ctnDetails().cmbOutcome().setValue(null);
		form.ctnDetails().cmbCancReason().setValue(null);
		form.ctnDetails().pdtPredNextGPDte().setValue(null);
		form.ctnDetails().intDischDelayValue().setValue(null);
		form.ctnDetails().cmbDischDelayUnit().setValue(null);
		form.ctnDetails().chkDischargeGP().setValue(false);
		form.ctnDetails().txtComments().setValue(null);
		form.ctnDetails().txtMinutes().setValue(null);
		form.ctnDetails().txtMinutes().setTooltip("");
		form.getLocalContext().setMinutesFileName("");
		form.ctnDetails().lblMinutes().setValue("Minutes:");
	}
	private void LoadCombos() 
	{
		form.ctnDetails().cmbOutcome().clear();
		GoalPlanningOutcomeCollection outcomeLookupCollection = ims.clinical.vo.lookups.LookupHelper.getGoalPlanningOutcome(domain.getLookupService());
		for(int x = 0; x < outcomeLookupCollection.size(); x++)
		{
			if(outcomeLookupCollection.get(x).getParent()==null)
				form.ctnDetails().cmbOutcome().newRow(outcomeLookupCollection.get(x), outcomeLookupCollection.get(x).getText(), outcomeLookupCollection.get(x).getImage(), outcomeLookupCollection.get(x).getTextColor());
		}
		form.ctnDetails().cmbCancReason().clear();
		GoalPlanningCancellationReasonCollection cancelLookupCollection = ims.clinical.vo.lookups.LookupHelper.getGoalPlanningCancellationReason(domain.getLookupService());
		for(int x = 0; x < cancelLookupCollection.size(); x++)
			form.ctnDetails().cmbCancReason().newRow(cancelLookupCollection.get(x), cancelLookupCollection.get(x).getText(), cancelLookupCollection.get(x).getImage(), cancelLookupCollection.get(x).getTextColor());
	}
	protected void onCmbOutcomeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.ctnDetails().cmbOutcome().getValue()!= null && form.ctnDetails().cmbOutcome().getValue().equals(GoalPlanningOutcome.CANCELLED))	
			form.ctnDetails().cmbCancReason().setEnabled(true);
		else
		{
			form.ctnDetails().cmbCancReason().setValue(null);
			form.ctnDetails().cmbCancReason().setEnabled(false);
		}
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().customControlAuthor().setEnabledAuthoringHCP(Boolean.FALSE);
		form.ctnDetails().customControlAuthor().setEnabledDateTime(Boolean.FALSE);

		setScreenToEdit(false);		
		form.ctnDetails().setcustomControlAuthorEnabled(false);
		onIntDischDelayValueValueChanged();
		form.ctnDetails().setCollapsed(false);
		form.ctnDetails().lblMinutes().setValue("Minutes:");
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearDetails();
		form.grdSummary().setValue(null); 
		setScreenToEdit(true);	
		form.ctnDetails().setcustomControlAuthorEnabled(true);
		setAuthoringInfo();
		form.ctnDetails().setCollapsed(false);
		form.ctnDetails().lblMinutes().setValue("Minutes:");
	}
	private void setAuthoringInfo() 
	{
		form.ctnDetails().customControlAuthor().initializeComponent();
		form.ctnDetails().customControlAuthor().setEnabledAuthoringHCP(Boolean.TRUE);
		form.ctnDetails().customControlAuthor().setEnabledDateTime(Boolean.TRUE);
	}
	protected void onGrdSummarySelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		GoalPlanningVo voGoalPlanning = domain.getGoalPlanningVo(form.grdSummary().getRows().get(form.grdSummary().getSelectedRowIndex()).getValue());
		if(voGoalPlanning == null)
			return;
		
		clearDetails();
		populateScreen(voGoalPlanning);
		
		form.getLocalContext().setGoalPlanningVo(voGoalPlanning);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
		form.btnUpdate().setEnabled(true);
		form.ctnDetails().setCollapsed(false);
	}
	private void populateScreen(GoalPlanningVo voGoalPlanning) 
	{
		if(voGoalPlanning.getAuthoringInformationIsNotNull())
			form.ctnDetails().customControlAuthor().setValue(voGoalPlanning.getAuthoringInformation()); 
		else
			form.ctnDetails().customControlAuthor().setValue(null);			
		
		if(voGoalPlanning.getGoalPlanningDateIsNotNull())
			form.ctnDetails().dteDateGP().setValue(voGoalPlanning.getGoalPlanningDate());
		if(voGoalPlanning.getPredicatedDischargeDateIsNotNull())
			form.ctnDetails().pdtPredDiscDte().setValue(voGoalPlanning.getPredicatedDischargeDate());
		if(voGoalPlanning.getGoalPlanningOutcomeIsNotNull())
			form.ctnDetails().cmbOutcome().setValue(voGoalPlanning.getGoalPlanningOutcome());
		if(voGoalPlanning.getPrimeCancelReasonIsNotNull())
			form.ctnDetails().cmbCancReason().setValue(voGoalPlanning.getPrimeCancelReason());
		if(voGoalPlanning.getPredictedNextGoalPlanningIsNotNull())	
			form.ctnDetails().pdtPredNextGPDte().setValue(voGoalPlanning.getPredictedNextGoalPlanning());
		if(voGoalPlanning.getDischargeDelayValueIsNotNull())	
			form.ctnDetails().intDischDelayValue().setValue(voGoalPlanning.getDischargeDelayValue());
		
		if(voGoalPlanning.getDischargeDelayUnitIsNotNull())	
			form.ctnDetails().cmbDischDelayUnit().setValue(voGoalPlanning.getDischargeDelayUnit());

		if(voGoalPlanning.getIsGoalPlanningConf() == Boolean.TRUE)	
			form.ctnDetails().chkDischargeGP().setValue(true);
		else
			form.ctnDetails().chkDischargeGP().setValue(false);
		
		if(voGoalPlanning.getCommentsIsNotNull())	
			form.ctnDetails().txtComments().setValue(voGoalPlanning.getComments());
			
		form.ctnDetails().txtMinutes().setValue(voGoalPlanning.getMinutes());
		form.ctnDetails().txtMinutes().setTooltip(voGoalPlanning.getMinutes());
		form.ctnDetails().lblMinutes().setValue("Minutes:");
		form.getLocalContext().setMinutesFileName(voGoalPlanning.getMinutes());
		
		form.ctnDetails().dyngrdInvitees().getRows().clear();
		GoalPlanningMeetingAttendeeVoCollection collAttendeeVo = voGoalPlanning.getInvitees();
		if(collAttendeeVo != null)
		{
			//GenForm.ctnDetailsContainer.grdInviteesRow rowInvitee;
			for(int x = 0; x < collAttendeeVo.size(); x++)
			{
				if(collAttendeeVo.get(x) != null)
				{
					DynamicGridRow row = form.ctnDetails().dyngrdInvitees().getRows().newRow();

					if(collAttendeeVo.get(x).getHcpIsNotNull())
					{
						DynamicGridCell cellInvitee = row.getCells().newCell(getColByIdentifier(INVITEE_COLUMN), DynamicCellType.QUERYCOMBOBOX);
						cellInvitee.getItems().newItem(collAttendeeVo.get(x).getHcp());
						cellInvitee.setTypedText(collAttendeeVo.get(x).getHcp().toString());
						cellInvitee.setValue(collAttendeeVo.get(x).getHcp());
						cellInvitee.setReadOnly(true);
						cellInvitee.setIdentifier(HcpLiteVo.class);
					}
					if(collAttendeeVo.get(x).getFamilyMemberIsNotNull())
					{
						DynamicGridCell cellInvitee = row.getCells().newCell(getColByIdentifier(INVITEE_COLUMN), DynamicCellType.STRING);
						cellInvitee.getItems().newItem(collAttendeeVo.get(x).getFamilyMember());
						cellInvitee.setTypedText(collAttendeeVo.get(x).getFamilyMember());
						cellInvitee.setValue(collAttendeeVo.get(x).getFamilyMember());
						cellInvitee.setReadOnly(true);
						cellInvitee.setIdentifier(DynamicCellType.STRING);
					}
					if(collAttendeeVo.get(x).getStatusIsNotNull())
					{
						DynamicGridCell cellStatus = row.getCells().newCell(getColByIdentifier(STATUS_COLUMN), DynamicCellType.ENUMERATION);
						cellStatus.setReadOnly(false);
						cellStatus.setWidth(100);
						cellStatus.setTooltip("Please select a status");

						AttendanceStatusCollection collAttendStatus = ims.clinical.vo.lookups.LookupHelper.getAttendanceStatus(domain.getLookupService());
						boolean bNonActiveItem = true;
						for(int k = 0 ; k < collAttendStatus.size() ; k++){ 
							cellStatus.getItems().newItem(collAttendStatus.get(k));
							if(collAttendeeVo.get(x).getStatus().equals(collAttendStatus.get(k)))
								bNonActiveItem = false;
						}

						if(bNonActiveItem)
							cellStatus.getItems().newItem(collAttendeeVo.get(x).getStatus());
						cellStatus.setTypedText(collAttendeeVo.get(x).getStatus().toString());
						cellStatus.setValue(collAttendeeVo.get(x).getStatus());
					}
					if(collAttendeeVo.get(x).getNoteIsNotNull())
					{
						DynamicGridCell cellNote = row.getCells().newCell(getColByIdentifier(NOTE_COLUMN), DynamicCellType.STRING);
						cellNote.setTypedText(collAttendeeVo.get(x).getNote());
						cellNote.setTooltip(collAttendeeVo.get(x).getNote());
						cellNote.setValue(collAttendeeVo.get(x).getNote());
						cellNote.setStringMaxLength(255);
						cellNote.setReadOnly(false);
					}
					else
					{
						DynamicGridCell cellNote = row.getCells().newCell(getColByIdentifier(NOTE_COLUMN), DynamicCellType.STRING);
						cellNote.setTypedText("  ");
						cellNote.setValue(new String());
						cellNote.setStringMaxLength(255);
						cellNote.setReadOnly(false);
					}
					row.setValue(collAttendeeVo.get(x));
				}
			}
		}
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		GoalPlanningVo voGoalPlanning = form.getLocalContext().getGoalPlanningVo();
		if (voGoalPlanning == null)
		{
			voGoalPlanning = new GoalPlanningVo();
			form.getLocalContext().setGoalPlanningVo(voGoalPlanning);
		}
			
		if(populateGoalPlanningVo())
			return;
		voGoalPlanning = form.getLocalContext().getGoalPlanningVo();
		
		if(voGoalPlanning == null)
			return;
		
		ArrayList<String> screenErrors = new ArrayList<String>();
		if (voGoalPlanning.getDischargeDelayValueIsNotNull() && voGoalPlanning.getDischargeDelayUnit()==null)
			screenErrors.add("If 'Discharge Delayed By' number is entered, the type for this value is mandatory.");
		
		String[] arrErrors = voGoalPlanning.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(screenErrors, arrErrors);
		if (arrScreenAndVoErrors.length == 0)
		{
//			save and update local context
			try 
			{
				form.getLocalContext().setGoalPlanningVo(domain.saveGoalPlanningMeeting(voGoalPlanning));
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			} 
			catch (UniqueKeyViolationException e) 
			{
				engine.showMessage("A conference with the same criteria already exists.   " + e.getMessage());
			}
		}
		else{
			engine.showErrors("Validation Errors", arrScreenAndVoErrors);
			return;
		}
		
		form.ctnDetails().setCollapsed(true);
		open(); 		
	}
	private String[] addScreenErrorsToVOErrors(ArrayList screenErrors, String[] arrErrors)
	{
		String[] arrAllErrors = null;

		if (arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);

			int i = 0;
			for (int p = screenErrors.size(); p < arrAllErrors.length; p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}
		else
		{
			arrAllErrors = new String[screenErrors.size()];

			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);
		}

		return arrAllErrors;
	}
	private boolean populateGoalPlanningVo() 
	{
		GoalPlanningVo voGoalPlanning = form.getLocalContext().getGoalPlanningVo();
		if(populateMeetingAttendeeData())
			return true;

		populateDataFromTheScreen();
		voGoalPlanning = form.getLocalContext().getGoalPlanningVo();
		
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			voGoalPlanning.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
		voGoalPlanning.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		form.getLocalContext().setGoalPlanningVo(voGoalPlanning);
		return false;
	}

	private boolean populateMeetingAttendeeData() 
	{
		GoalPlanningVo voGoalPlanning = form.getLocalContext().getGoalPlanningVo();

		GoalPlanningMeetingAttendeeVoCollection collMeetingAttendeeVo = new GoalPlanningMeetingAttendeeVoCollection();
		
		DynamicGridRowCollection rows = form.ctnDetails().dyngrdInvitees().getRows();
		for(int i=0; i< rows.size(); i++)
		{
			GoalPlanningMeetingAttendeeVo voGoalPlanningMeetingAttendee = new GoalPlanningMeetingAttendeeVo();
			DynamicGridRow row = rows.get(i);

			if(row.getCells().get(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(INVITEE_COLUMN)).getValue() == null)
			{
				
				engine.showMessage("There is a entry missing in the invitees list please complete the entry to allow the record to be saved");
				
				
				return true;
				
			}
			
			
			if (row.getCells().get(
					form.ctnDetails().dyngrdInvitees().getColumns()
							.getByIdentifier(INVITEE_COLUMN)).getIdentifier()
					.equals(HcpLiteVo.class))
			{
				if (row.getCells().get(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(INVITEE_COLUMN)).getValue() != null)
					voGoalPlanningMeetingAttendee.setHcp((HcpLiteVo) row.getCells().get(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(INVITEE_COLUMN)).getValue());
			}
			else if(row.getCells().get(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(INVITEE_COLUMN)).getIdentifier().equals(DynamicCellType.STRING)) 
			{
				if (row.getCells().get(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(INVITEE_COLUMN)).getValue() != null)
					voGoalPlanningMeetingAttendee.setFamilyMember((String) row.getCells().get(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(INVITEE_COLUMN)).getValue());
			}
			if (row.getCells().get(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(STATUS_COLUMN)).getValue() != null)
				voGoalPlanningMeetingAttendee.setStatus((AttendanceStatus) row.getCells().get(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(STATUS_COLUMN)).getValue());
			else
			{
				engine.showMessage("Status data has not been provided. Please provide a status for an Invitee before proceeding.");
				return true;
			}
			if (row.getCells().get(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(NOTE_COLUMN)).getValue() != null)
				voGoalPlanningMeetingAttendee.setNote((String) row.getCells().get(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(NOTE_COLUMN)).getValue());

			collMeetingAttendeeVo.add(voGoalPlanningMeetingAttendee);
		}
		voGoalPlanning.setInvitees(collMeetingAttendeeVo);

		form.getLocalContext().setGoalPlanningVo(voGoalPlanning);
		return false;
	}
	private void populateDataFromTheScreen() 
	{
		GoalPlanningVo voGoalPlanning = form.getLocalContext().getGoalPlanningVo();

		AuthoringInformationVo  voAuthInfo = form.getLocalContext().getGoalPlanningVo().getAuthoringInformation();
		if(voAuthInfo == null)
			voAuthInfo = new AuthoringInformationVo();
		
		voAuthInfo.setAuthoringDateTime(form.ctnDetails().customControlAuthor().getValue().getAuthoringDateTime());
		voAuthInfo.setAuthoringHcp(form.ctnDetails().customControlAuthor().getValue().getAuthoringHcp());
		
		voGoalPlanning.setAuthoringInformation(voAuthInfo);
		
		//WDEV-10606 avoid crash for old dates
		Date date = new Date();
		date.setDay(01);
		date.setMonth(01);
		date.setYear(1900);
		if(form.ctnDetails().dteDateGP().getValue() != null && form.ctnDetails().dteDateGP().getValue().isLessOrEqualThan(date))
			form.ctnDetails().dteDateGP().setValue(date);
		voGoalPlanning.setGoalPlanningDate(form.ctnDetails().dteDateGP().getValue());
		voGoalPlanning.setPredicatedDischargeDate(form.ctnDetails().pdtPredDiscDte().getValue());
		voGoalPlanning.setGoalPlanningOutcome(form.ctnDetails().cmbOutcome().getValue());
		voGoalPlanning.setPrimeCancelReason(form.ctnDetails().cmbCancReason().getValue());
		voGoalPlanning.setPredictedNextGoalPlanning(form.ctnDetails().pdtPredNextGPDte().getValue());
		voGoalPlanning.setDischargeDelayValue(form.ctnDetails().intDischDelayValue().getValue());
		voGoalPlanning.setDischargeDelayUnit(form.ctnDetails().cmbDischDelayUnit().getValue());
		if(voGoalPlanning.getDischargeDelayValue()==null)
			voGoalPlanning.setDischargeDelayUnit(null);
		if(form.ctnDetails().chkDischargeGP().getValue() == false)
			voGoalPlanning.setIsGoalPlanningConf(Boolean.FALSE);
		else
			voGoalPlanning.setIsGoalPlanningConf(Boolean.TRUE);

		voGoalPlanning.setMinutes(form.ctnDetails().txtMinutes().getValue());
		voGoalPlanning.setComments(form.ctnDetails().txtComments().getValue());
				
		form.getLocalContext().setGoalPlanningVo(voGoalPlanning);
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearDetails();
		form.ctnDetails().setCollapsed(true);
		open();
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		if (sender.equals(form.grdSummary()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add:
					onBtnNewClick();
					break;				
				case GenForm.ContextMenus.GenericGrid.Update:
					setScreenToEdit(false);
					break;
			}
		}		
		else if (sender.equals(form.ctnDetails().dyngrdInvitees()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GoalPlanningMeetingInvitees.ADDMEMBEROFCLINICALTEAM:
					engine.open(form.getForms().Clinical.TeamMemberSelection);
					break;		
				case GenForm.ContextMenus.GoalPlanningMeetingInvitees.ADDHCP:
					addQueryComboRowTodyngrdInvitees(HcpLiteVo.class);
					form.ctnDetails().dyngrdInvitees().setValue(null);
					form.getContextMenus().getGoalPlanningMeetingInviteesREMOVEItem().setVisible(false);
					break;	
				case GenForm.ContextMenus.GoalPlanningMeetingInvitees.ADDFAMILYMEMBER:
					addOtherRowTodyngrdReportTo();
					form.ctnDetails().dyngrdInvitees().setValue(null);
					form.getContextMenus().getGoalPlanningMeetingInviteesREMOVEItem().setVisible(false);
					break;		
				case GenForm.ContextMenus.GoalPlanningMeetingInvitees.REMOVE:
					form.ctnDetails().dyngrdInvitees().getRows().remove(form.ctnDetails().dyngrdInvitees().getSelectedRow());
					break;	
			}
		}
	}
	
	private void addOtherRowTodyngrdReportTo()
	{
		DynamicGridRow row = form.ctnDetails().dyngrdInvitees().getRows().newRow();
		DynamicGridCell cellInvitee = row.getCells().newCell(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(INVITEE_COLUMN), DynamicCellType.STRING);
		cellInvitee.setWidth(100);
		cellInvitee.setTooltip("Please enter a Family Member Name");
		cellInvitee.setReadOnly(false);
		cellInvitee.setIdentifier(DynamicCellType.STRING);
		cellInvitee.setStringMaxLength(55);
		
		//Show a Label cell
		DynamicGridCell cellStatus = row.getCells().newCell(getColByIdentifier(STATUS_COLUMN), DynamicCellType.ENUMERATION);
		cellStatus.setReadOnly(false);
		cellStatus.setWidth(100);
		cellStatus.setTooltip("Please select a status");
		cellInvitee.setIdentifier(DynamicCellType.ENUMERATION);

		AttendanceStatusCollection collAttendStatus = ims.clinical.vo.lookups.LookupHelper.getAttendanceStatus(domain.getLookupService());
		for(int k = 0 ; k < collAttendStatus.size() ; k++) 
			cellStatus.getItems().newItem(collAttendStatus.get(k));
		
		DynamicGridCell cellNote = row.getCells().newCell(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(NOTE_COLUMN), DynamicCellType.STRING);
		cellNote.setWidth(-1);
		cellNote.setTooltip("Please enter a Note here");
		cellNote.setReadOnly(false);
		cellNote.setStringMaxLength(255);
		cellInvitee.setIdentifier(DynamicCellType.STRING);
		
		row.setValue(DynamicCellType.STRING);
		row.setIdentifier(DynamicCellType.STRING);
	}

	private DynamicGridColumn getColByIdentifier(Object indentifier)
	{
		return form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(indentifier);
	}
	
	private void addQueryComboRowTodyngrdInvitees(Class classType)
	{
		DynamicGridRow row = form.ctnDetails().dyngrdInvitees().getRows().newRow();
		DynamicGridCell cellReportTo = row.getCells().newCell(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(INVITEE_COLUMN), DynamicCellType.QUERYCOMBOBOX);
		cellReportTo.setWidth(100);
		cellReportTo.setAutoPostBack(true);
		cellReportTo.setReadOnly(false);
		cellReportTo.setIdentifier(classType);
		if (classType.equals(HcpLiteVo.class))
			cellReportTo.setTooltip("Please search for a Member Of Staff");
		else
			cellReportTo.setTooltip("Please search for a GP");

		//Show a Label cell
		DynamicGridCell cellStatus = row.getCells().newCell(getColByIdentifier(STATUS_COLUMN), DynamicCellType.ENUMERATION);
		cellStatus.setReadOnly(false);
		cellStatus.setWidth(100);
		cellStatus.setTooltip("Please select a status");

		AttendanceStatusCollection collAttendStatus = ims.clinical.vo.lookups.LookupHelper.getAttendanceStatus(domain.getLookupService());
		for(int k = 0 ; k < collAttendStatus.size() ; k++) 
			cellStatus.getItems().newItem(collAttendStatus.get(k));

		DynamicGridCell cellNote = row.getCells().newCell(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(NOTE_COLUMN), DynamicCellType.STRING);
		cellNote.setWidth(-1);
		cellNote.setStringMaxLength(255);
		cellNote.setReadOnly(false);
		cellNote.setTooltip("Please add a note");
	}
	
	private void setScreenToEdit(boolean bEnabled) 
	{
		form.setMode(FormMode.EDIT);
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().getGoalPlanningMeetingInviteesADDFAMILYMEMBERItem().setVisible(true);
		form.getContextMenus().getGoalPlanningMeetingInviteesADDHCPItem().setVisible(true);
		enableClinTeamMemberMenu();
		if(bEnabled)
			form.getLocalContext().setGoalPlanningVo(null);
		else{
			if(form.ctnDetails().cmbOutcome().getValue()!=null && form.ctnDetails().cmbOutcome().getValue().equals(GoalPlanningOutcome.CANCELLED))	
				form.ctnDetails().cmbCancReason().setEnabled(true);
			
			if(form.getLocalContext().getGoalPlanningVo().getMinutesIsNotNull())
			{
				StringBuffer path = new StringBuffer();
				path.append("Minutes: ");
				path.append(form.getLocalContext().getGoalPlanningVo().getMinutes());
				form.ctnDetails().lblMinutes().setValue(path.toString());
				form.ctnDetails().lblMinutes().setTooltip(path.toString());
			}
		}
	}
	private void enableClinTeamMemberMenu() 
	{
		Hcp hcpUser = (Hcp)domain.getHcpUser();
		if(hcpUser == null)
			form.getContextMenus().getGoalPlanningMeetingInviteesADDMEMBEROFCLINICALTEAMItem().setVisible(false);
		else if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() //wdev-4473
				&& form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull() 
				&& form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCPIsNotNull()
				&& hcpUser.getID_Hcp().equals(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP().getIHcpId()))
			form.getContextMenus().getGoalPlanningMeetingInviteesADDMEMBEROFCLINICALTEAMItem().setVisible(true);
		else
			form.getContextMenus().getGoalPlanningMeetingInviteesADDMEMBEROFCLINICALTEAMItem().setVisible(false);
	}
	protected void onGrdInviteesSelectionChanged() throws PresentationLogicException 
	{
		if(form.getMode() == FormMode.EDIT)
			form.getContextMenus().getGoalPlanningMeetingInviteesREMOVEItem().setVisible(true);
		else
			form.getContextMenus().getGoalPlanningMeetingInviteesREMOVEItem().setVisible(false);
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Clinical.TeamMemberSelection) && (result.equals(DialogResult.OK) ||result.equals(DialogResult.YES) ))
		{
			ClinicalTeamMemberVoCollection voClinicalTeamMemberColl = form.getGlobalContext().Clinical.getTeamMemberSelection(); 
			if(voClinicalTeamMemberColl == null || voClinicalTeamMemberColl.size() == 0)
				return;
			
			for(int x = 0; x < voClinicalTeamMemberColl.size(); x++)
			{
				if(voClinicalTeamMemberColl.get(x) != null)
				{
					DynamicGridRow row = form.ctnDetails().dyngrdInvitees().getRows().newRow();

					row.setValue(voClinicalTeamMemberColl.get(x).getHCP());
					
					if(voClinicalTeamMemberColl.get(x).getHCPIsNotNull())
					{
						DynamicGridCell cellInvitee = row.getCells().newCell(getColByIdentifier(INVITEE_COLUMN), DynamicCellType.QUERYCOMBOBOX);
						cellInvitee.setWidth(100);
						cellInvitee.getItems().newItem(voClinicalTeamMemberColl.get(x).getHCP());
						cellInvitee.setTypedText(voClinicalTeamMemberColl.get(x).getHCP().toString());
						cellInvitee.setValue(voClinicalTeamMemberColl.get(x).getHCP());
						cellInvitee.setReadOnly(true);
						cellInvitee.setIdentifier(HcpLiteVo.class);
					}
					
					//Show a Label cell
					DynamicGridCell cellStatus = row.getCells().newCell(getColByIdentifier(STATUS_COLUMN), DynamicCellType.ENUMERATION);
					cellStatus.setReadOnly(false);
					cellStatus.setWidth(100);
					cellStatus.setTooltip("Please select a status");
					
					AttendanceStatusCollection collAttendStatus = ims.clinical.vo.lookups.LookupHelper.getAttendanceStatus(domain.getLookupService());
					for(int k = 0 ; k < collAttendStatus.size() ; k++) 
						cellStatus.getItems().newItem(collAttendStatus.get(k));

					DynamicGridCell cellNote = row.getCells().newCell(form.ctnDetails().dyngrdInvitees().getColumns().getByIdentifier(NOTE_COLUMN), DynamicCellType.STRING);
					cellNote.setWidth(-1);
					cellNote.setStringMaxLength(255);
					cellNote.setReadOnly(false);
					cellNote.setTooltip("Please add a note");
					
					row.setValue(voClinicalTeamMemberColl.get(x).getHCP());
				}
			}
			form.ctnDetails().dyngrdInvitees().setValue(null);
			form.getContextMenus().getGoalPlanningMeetingInviteesREMOVEItem().setVisible(false);
		}
	}
	private void initialiseInviteesGrid()
	{
		form.ctnDetails().dyngrdInvitees().getColumns().clear();

		DynamicGridColumn col1 = form.ctnDetails().dyngrdInvitees().getColumns().newColumn(" Invitees ", INVITEE_COLUMN);
		col1.setWidth(120);

		DynamicGridColumn col2 = form.ctnDetails().dyngrdInvitees().getColumns().newColumn(" Status ", STATUS_COLUMN);
		col2.setWidth(120);

		DynamicGridColumn col3 = form.ctnDetails().dyngrdInvitees().getColumns().newColumn(" Note ", NOTE_COLUMN);
		col3.setWidth(-1);
	}
	
	
	protected void onDyngrdInviteesCellTextSubmited(DynamicGridCell cell) 
	{
		cell.getItems().clear();
		if (cell.getTypedText() == null || cell.getTypedText().equals(""))
		{
			engine.showMessage("Please enter at least one character to search on.");
			return;
		}

		if (cell.getIdentifier() != null && cell.getIdentifier().equals(HcpLiteVo.class))
		{
			HcpLiteVoCollection collHcps = domain.listHcpLiteVoByName(cell.getTypedText());
			//MemberOfStaffShortVoCollection voCollMos = domain.listMos(cell.getTypedText());
			if (collHcps != null && collHcps.size() > 0)
			{
				for (int i = 0; i < collHcps.size(); i++)
				{
					cell.getItems().newItem(collHcps.get(i));
				}
				if (collHcps.size() == 1)
				{
					cell.setValue(collHcps.get(0));
					onDyngrdInviteesCellValueChanged(cell);
				}
				else if (collHcps.size() > 1)
					cell.showOpened();
			}
			else
				engine.showMessage("No matching records found");
		}
	}
	protected void onDyngrdInviteesCellValueChanged(DynamicGridCell cell) 
	{
		if (cell.getIdentifier() != null)
		{
			DynamicGridRow row = cell.getRow();

			if (cell.getIdentifier().equals(HcpLiteVo.class))
			{
				row.setValue(((HcpLiteVo) cell.getValue()));
			}
		}
	}
	protected void onDyngrdInviteesRowSelectionChanged(DynamicGridRow row) 
	{
		form.getContextMenus().getGoalPlanningMeetingInviteesREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.ctnDetails().dyngrdInvitees().getSelectedRow() != null);
	}
	
	private static final Integer	INVITEE_COLUMN			= new Integer(0);

	private static final Integer	STATUS_COLUMN			= new Integer(1);

	private static final Integer	NOTE_COLUMN				= new Integer(2);

	protected void onBtnViewClick() throws PresentationLogicException
	{
		engine.openUrl(form.ctnDetails().txtMinutes().getValue());
		
	}
	@Override
	protected void onIntDischDelayValueValueChanged() throws PresentationLogicException {
		if(form.getMode().equals(FormMode.EDIT)){
			if(form.ctnDetails().intDischDelayValue().getValue()==null)
				form.ctnDetails().cmbDischDelayUnit().setValue(null);
		}
	}
}
