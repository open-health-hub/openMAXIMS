//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3922.16454)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.edischargemedssthkcomponent;

import ims.clinical.forms.edischargemedssthkcomponent.GenForm.Group1Enumeration;
import ims.clinical.forms.edischargemedssthkcomponent.GenForm.grdOrderDischMedicationRow;
import ims.clinical.vo.EDischargeSTHKSummaryVo;
import ims.clinical.vo.TTAMedicationAndPharmacyVo;
import ims.clinical.vo.TTAMedicationDetailVo;
import ims.clinical.vo.TTAMedicationDetailVoCollection;
import ims.clinical.vo.TTAStatusVo;
import ims.clinical.vo.TTAStatusVoCollection;
import ims.clinical.vo.enums.EDischargeComponentStatus;
import ims.clinical.vo.enums.EDischargeLastEvent;
import ims.clinical.vo.enums.EDischargeMedsContextMenu;
import ims.clinical.vo.lookups.DoseFormIndicator;
import ims.clinical.vo.lookups.TTAStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.MedicationDoseUnit;
import ims.core.vo.lookups.MedicationFrequency;
import ims.core.vo.lookups.MedicationRoute;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{	
		
	}
			
	private void updateButtonsStatus(TTAMedicationAndPharmacyVo currentRecord)
	{
		form.btnNew().setVisible(currentRecord != null ? false : true);
		form.btnNew().setEnabled(form.getLocalContext().getIsHcpIsNotNull() && form.getLocalContext().getIsHcp());//WDEV-13536
		
		form.btnEdit().setVisible(currentRecord != null ? true : false);
		form.btnEdit().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getIsHcp()));		// WDEV-13536
		
		updateSubmitTTAButtonStatus(currentRecord);
		updateStatusHistoryStatus(currentRecord);
	}
	
	private void updateStatusHistoryStatus(TTAMedicationAndPharmacyVo currentRecord) 
	{	
		form.btnStatusHistory().setEnabled(currentRecord != null && currentRecord.getTTAStatusHistoryIsNotNull() && currentRecord.getTTAStatusHistory().size() > 0);
	}

	private void updateSubmitTTAButtonStatus(TTAMedicationAndPharmacyVo currentRecord)
	{
		form.btnSubmitTTA().setEnabled(currentRecord != null && currentRecord.getTTAMedicationsIsNotNull() && currentRecord.getTTAMedications().size() > 0 && form.getLocalContext().getIsHcpIsNotNull() && form.getLocalContext().getIsHcp());//WDEV-13536
	}
	
	private void updateContextMenuStatus()
	{
		boolean isEditMode = form.getMode().equals(FormMode.EDIT ) ? true : false;
		boolean isTTARequired = Group1Enumeration.rdoTTARequiredYes.equals(form.Group1().getValue());
		form.getContextMenus().Clinical.getEDischargeMedsSthkMenuNewItem().setVisible(isEditMode && isTTARequired);
		form.getContextMenus().Clinical.getEDischargeMedsSthkMenuEditItem().setVisible(isEditMode && isTTARequired && form.grdOrderDischMedication().getSelectedRow() != null ? true : false);
		form.getContextMenus().Clinical.getEDischargeMedsSthkMenuRemoveItem().setVisible(isEditMode && isTTARequired && form.grdOrderDischMedication().getSelectedRow() != null ? true : false);
		form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewItem().setVisible(form.grdOrderDischMedication().getSelectedRow() != null ? true : false);
		form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewPreviousItem().setVisible(isEditMode && isTTARequired);//WDEV-11849
	}
	
	private void setViewMode()
	{
		form.setMode(FormMode.VIEW);
	}
	
	private void setEditMode()
	{
		form.setMode(FormMode.EDIT);
	}
	
	private void open()
	{
		setViewMode();
		clearScreen();
		
		TTAMedicationAndPharmacyVo currentRecord = domain.getTTAMedicationAndPharmacy(form.getGlobalContext().Core.getCurrentCareContext());
		form.getLocalContext().setEditedRecord(currentRecord);
		populateScreenFromData(currentRecord);
				
		updateButtonsStatus(currentRecord);
		updateContextMenuStatus();
		
		manageStatus(currentRecord);
		updateStatus(currentRecord!=null&&currentRecord.getCurrentTTAStatus()!=null?currentRecord.getCurrentTTAStatus().getStatus():null);
	}
	
	private void manageStatus(TTAMedicationAndPharmacyVo currentRecord) 
	{
		if (currentRecord != null)
		{
			if (currentRecord.getCurrentTTAStatusIsNotNull())
			{
				 //TTAStatus = Draft : users can edit TTA tab
				 if (currentRecord.getCurrentTTAStatus().getStatus().equals(TTAStatus.DRAFT))
				 {
					 if (currentRecord.getTTAStatusHistoryIsNotNull())
					 {
						 boolean found = false;
						 
						 for (int i = 0; i < currentRecord.getTTAStatusHistory().size(); i++) 
						 {
							if (currentRecord.getTTAStatusHistory().get(i).getStatusIsNotNull() && (currentRecord.getTTAStatusHistory().get(i).getStatus().equals(TTAStatus.DRAFT) || currentRecord.getTTAStatusHistory().get(i).getStatus().equals(TTAStatus.NOT_REQUIRED)))
							{
								continue;
							}
							else
							{
								found = true;
								form.getLocalContext().setPharmacyStatusToBeSet(EDischargeComponentStatus.READONLY);
								form.fireCustomControlValueChanged();
								break;
							}
						 }
						 if (!found)
						 {
							 form.getLocalContext().setPharmacyStatusToBeSet(EDischargeComponentStatus.HIDDEN);
						 }
					 }						 						 
					 else
						 form.getLocalContext().setPharmacyStatusToBeSet(EDischargeComponentStatus.HIDDEN);				 
				 }
				 //TTAStatus = Rejected : users can edit TTA tab
				 else if (currentRecord.getCurrentTTAStatus().getStatus().equals(TTAStatus.REJECTED))
				 {					 
					form.btnEdit().setVisible(true);				
					form.btnEdit().setEnabled(form.getLocalContext().getIsHcpIsNotNull() && form.getLocalContext().getIsHcp());//wdev-13536
					form.btnSubmitTTA().setEnabled(currentRecord != null && currentRecord.getTTAMedicationsIsNotNull() && currentRecord.getTTAMedications().size() > 0 && form.getLocalContext().getIsHcpIsNotNull() && form.getLocalContext().getIsHcp());//WDEV-12730, wdev-13536
					
					form.getLocalContext().setPharmacyStatusToBeSet(EDischargeComponentStatus.READONLY);
				 }				 
				 else if (currentRecord.getCurrentTTAStatus().getStatus().equals(TTAStatus.NOT_REQUIRED))
				 {					 
					form.btnEdit().setVisible(true);				
					form.btnEdit().setEnabled(form.getLocalContext().getIsHcpIsNotNull() && form.getLocalContext().getIsHcp());//wdev-13536
					form.btnSubmitTTA().setEnabled(false);
					form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewPreviousItem().setVisible(false);//WDEV-11849
					form.getContextMenus().Clinical.getEDischargeMedsSthkMenuNewItem().setVisible(false);
					form.getContextMenus().Clinical.getEDischargeMedsSthkMenuEditItem().setVisible(false);
					form.getContextMenus().Clinical.getEDischargeMedsSthkMenuRemoveItem().setVisible(false);
					form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewItem().setVisible(form.grdOrderDischMedication().getSelectedRow() != null ? true : false);		
					
					form.getLocalContext().setPharmacyStatusToBeSet(EDischargeComponentStatus.HIDDEN);
				 }
				 else
				 {
					form.btnEdit().setVisible(false);
					form.btnSubmitTTA().setEnabled(false);
						
					form.getLocalContext().setPharmacyStatusToBeSet(EDischargeComponentStatus.EDITABLE);
				 }
			}
			else
			{
				form.getLocalContext().setPharmacyStatusToBeSet(EDischargeComponentStatus.HIDDEN);
			}
		}
		else
		{
			form.getLocalContext().setPharmacyStatusToBeSet(EDischargeComponentStatus.HIDDEN);
		}
		
		form.fireCustomControlValueChanged();
	}
	
	private String[] validateUI(TTAMedicationAndPharmacyVo currentRecord)
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.Group1().getValue().equals(Group1Enumeration.None))
		{
			errors.add("TTA Required is mandatory!"); 
		}
		else
		{
			if(currentRecord != null &&	currentRecord.getCurrentTTAStatusIsNotNull())
			{
				TTAStatusVo tta = currentRecord.getCurrentTTAStatus();
				if (!tta.getStatus().equals(TTAStatus.NOT_REQUIRED))
				{
					if (form.ccOrderingClinician().getValue() == null)
					{
						errors.add("Ordering Clinician is mandatory");
					}
					if (form.dtimOrderingDateTime().getValue() == null)
					{
						errors.add("Ordering DateTime is mandatory");
					}
					else
					{
						if (form.dtimOrderingDateTime().getValue().isGreaterThan(new DateTime()))
						{
							errors.add("Ordering DateTime can not be in the future");
						}
					}
					if (form.txtClinicianBleepNo().getValue() == null)
					{
						errors.add("Clinician Bleep No. is mandatory");
					}
					//WDEV-11849 - Start
					for (int i = 0 ; currentRecord.getTTAMedicationsIsNotNull() && i < currentRecord.getTTAMedications().size(); i++)
					{
						TTAMedicationDetailVo detail = currentRecord.getTTAMedications().get(i);
						if (detail != null)
						{
							Float 				dose 		  = detail.getDoseValue();
							MedicationDoseUnit 	doseUnit 	  = detail.getDoseUnit();
							String 				unitText 	  = detail.getUnitText();
							DoseFormIndicator 	formm 		  = detail.getForm();
							MedicationRoute 	route		  = detail.getRoute();
							//WDEV-11894Integer 			frequency 	  = detail.getFrequencyValue();
							MedicationFrequency frequencyUnit = detail.getFrequencyUnit();
							//WDEV-11894Integer 			duration 	  = detail.getDurationValue();
							//WDEV-11894MedicationDuration 	durationUnit  = detail.getDurationUnit();
							
							String clinicianComments = detail.getClinicalCommentsForPharmacy();
							
							if ((dose == null || (doseUnit == null && unitText==null) || formm == null || route == null ||  frequencyUnit == null ) && clinicianComments == null)//WDEV-11894
							{
								errors.add("Medication: "+(i+1)+" If Dose, Form, Route or Frequency are empty, Additional Prescribing Instructions field become mandatory");//WDEV-11894
							}
						}
					}
					//WDEV-11849 - End
				}
			}
		}
		
		if (errors.size() > 0) 
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid TTA Medication Record", searchErrors);
			return searchErrors;
		}
		
		return null;
	}
	
	private void populateScreenFromData(TTAMedicationAndPharmacyVo currentRecord) 
	{	
		if (currentRecord == null)
			return;
		
		if(currentRecord.getCurrentTTAStatusIsNotNull())
		{
			TTAStatusVo tta = currentRecord.getCurrentTTAStatus();
			if (tta.getStatus().equals(TTAStatus.NOT_REQUIRED))
				form.Group1().setValue(Group1Enumeration.rdoTTAREquiredNo);
			else
				form.Group1().setValue(Group1Enumeration.rdoTTARequiredYes);
		}
		
		form.decBodyW().setValue(currentRecord.getBodyWeightKg());
		
		
		form.ccOrderingClinician().setValue(currentRecord.getOrderingClinician());
		
		
		form.dtimOrderingDateTime().setValue(currentRecord.getOrderingDateTime());
		
		
		form.txtClinicianBleepNo().setValue(currentRecord.getClinicianBleepNo());
		form.txtClinicialCOmmentsToPharmacy().setValue(currentRecord.getClinicalCommentsToPharmacy());
		
		//TTA Status
		if (currentRecord.getCurrentTTAStatusIsNotNull())
		{
			TTAStatusVo currentStatus = currentRecord.getCurrentTTAStatus();
			form.txtTTAStatus().setValue(currentStatus.getStatus().toString());
			
			if(currentRecord.getCurrentTTAStatus().getStatus().equals(TTAStatus.REJECTED)) {
				form.txtRejectionReason().setValue(currentStatus.getReasonForRejection());
			}
		}
		
		if (currentRecord.getTTAMedicationsIsNotNull() && currentRecord.getTTAMedications().size() > 0)
		{
			currentRecord.getTTAMedications().sort(SortOrder.DESCENDING);
			for (int i = 0; i < currentRecord.getTTAMedications().size(); i++) 
			{
				addGrdOrderDischMedicationRow(currentRecord.getTTAMedications().get(i));
			}
		}
	}
	
	private TTAMedicationAndPharmacyVo populateDataFromScreen(TTAMedicationAndPharmacyVo record)
	{
		if (record == null)
			record = new TTAMedicationAndPharmacyVo();
		else
			record = (TTAMedicationAndPharmacyVo) record.clone();
		
		record.setBodyWeightKg(form.decBodyW().getValue());
		record.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		record.setClinicalCommentsToPharmacy(form.txtClinicialCOmmentsToPharmacy().getValue());
		record.setClinicianBleepNo(form.txtClinicianBleepNo().getValue());
		record.setDateSubmittedToPharmacy(new Date());
			
		IMos iHcp = form.ccOrderingClinician().getValue();
		if (iHcp != null)
		{
			HcpLiteVo hcp = domain.getHcp((HcpRefVo) iHcp);
			record.setOrderingClinician(hcp);
		}
		
		record.setOrderingDateTime(form.dtimOrderingDateTime().getValue());
		record.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		TTAMedicationDetailVoCollection medColl = record.getTTAMedications();
		if (medColl == null) {
			medColl = new TTAMedicationDetailVoCollection();
		}
		else {
			medColl.clear();
		}
		
		for (int i = 0; i < form.grdOrderDischMedication().getRows().size(); i++) 
		{
			TTAMedicationDetailVo medication = (TTAMedicationDetailVo) form.grdOrderDischMedication().getRows().get(i).getValue();
			
			//strat WDEV-14407
			if (medication.getMedicationIsNotNull())
			{
				Integer idMedication = medication.getMedication().getID_Medication();
				
				if (idMedication != null && idMedication.intValue() < 0)
				{
					medication.setMedication(null);
				}
			}
			// end
			
			medColl.add(medication);
		}
	
		record.setTTAMedications(medColl);						
		record.setTTAStatusHistory(setTTAStatusHistory(record));		
		record.setCurrentTTAStatus(form.getLocalContext().getCurrentStatus());
		
		return record;
	}	
	
	private TTAStatusVoCollection setTTAStatusHistory (TTAMedicationAndPharmacyVo record) 
	{
		TTAStatusVoCollection statusHistory = record.getTTAStatusHistory();
		if(statusHistory == null) {
			statusHistory = new TTAStatusVoCollection();
		}
							
		if (form.getLocalContext().getCurrentStatusIsNotNull())
		{
			if (Boolean.FALSE.equals(statusHistory.contains(form.getLocalContext().getCurrentStatus())))
				statusHistory.add(form.getLocalContext().getCurrentStatus());									
		}	
		
		return statusHistory;
	}

	private void clearScreen() 
	{	
		form.Group1().setValue(Group1Enumeration.None);
		form.decBodyW().setValue(null);
		form.ccOrderingClinician().setValue(null);
		form.dtimOrderingDateTime().setValue(null);
		form.txtClinicianBleepNo().setValue(null);
		form.txtTTAStatus().setValue(null);
		form.txtRejectionReason().setValue(null);
		form.txtClinicialCOmmentsToPharmacy().setValue(null);
		form.grdOrderDischMedication().getRows().clear();
	}	
	
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		setEditMode();
		if (form.getLocalContext().getEditedRecordIsNotNull() && form.getLocalContext().getEditedRecord().getCurrentTTAStatusIsNotNull() && form.getLocalContext().getEditedRecord().getCurrentTTAStatus().getStatus().equals(TTAStatus.NOT_REQUIRED))
		{
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewPreviousItem().setVisible(false);//WDEV-11849
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuNewItem().setVisible(false);
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuEditItem().setVisible(false);
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuRemoveItem().setVisible(false);
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewItem().setVisible(form.grdOrderDischMedication().getSelectedRow() != null ? true : false);		
			
			return;			
		}
		
		//WDEV-12538 form.txtRejectionReason().setValue(null);
		updateStatus(TTAStatus.DRAFT);
		updateContextMenuStatus();
		enableControls(true);
	}
	
	private void enableControls(boolean enable) 
	{	
		form.decBodyW().setEnabled(enable);
		form.txtClinicialCOmmentsToPharmacy().setEnabled(enable);		
		form.setccOrderingClinicianEnabled(enable);
		form.ccOrderingClinician().isRequired(enable);		
		form.dtimOrderingDateTime().setEnabled(enable);
		form.txtClinicianBleepNo().setEnabled(enable);				
	}
	
	private void clearControls()
	{
		form.Group1().setValue(Group1Enumeration.None);
		form.decBodyW().setValue(null);
		form.ccOrderingClinician().setValue(null);
		form.dtimOrderingDateTime().setValue(null);
		form.txtClinicianBleepNo().setValue(null);		
		form.txtClinicialCOmmentsToPharmacy().setValue(null);
		form.grdOrderDischMedication().getRows().clear();
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		// WDEV-12730
		open();
	}
	
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{		
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeMedsSthkMenu.New:
			{
				form.getGlobalContext().Clinical.setEDischargeMeds(null);
				engine.open(form.getForms().Clinical.EDischargeMedsSthkDialog, new Object[]{EDischargeMedsContextMenu.NEW, new Boolean(false), FormMode.EDIT});
			}
			break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeMedsSthkMenu.Edit:
			{
				form.getGlobalContext().Clinical.setEDischargeMeds(form.getLocalContext().getEditedMedicalRecord());
				engine.open(form.getForms().Clinical.EDischargeMedsSthkDialog, new Object[]{EDischargeMedsContextMenu.EDIT, new Boolean(false), FormMode.EDIT});
			}
			break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeMedsSthkMenu.Remove:
			{				
				TTAMedicationAndPharmacyVo 	currentRecord = form.getLocalContext().getEditedRecord();
				if(currentRecord != null && currentRecord.getTTAMedicationsIsNotNull())
				{
					TTAMedicationDetailVoCollection medColl = currentRecord.getTTAMedications();
					medColl.remove(form.grdOrderDischMedication().getSelectedRow().getValue());
					currentRecord.setTTAMedications(medColl);
					form.getLocalContext().setEditedRecord(currentRecord);
				}
				
				form.grdOrderDischMedication().getRows().remove(form.grdOrderDischMedication().getSelectedRowIndex());
				updateContextMenuStatus();
			}
			break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeMedsSthkMenu.View:
			{
				form.getGlobalContext().Clinical.setEDischargeMeds(form.getLocalContext().getEditedMedicalRecord());
				engine.open(form.getForms().Clinical.EDischargeMedsSthkDialog, new Object[]{EDischargeMedsContextMenu.EDIT, new Boolean(false), FormMode.VIEW});
			}
			break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeMedsSthkMenu.ViewPrevious://WDEV-11849
			{
				engine.open(form.getForms().Clinical.TTAHistoryDialog,new Object[]{form.getLocalContext().getEditedRecord()});//WDEV-11849
			}
			break;
		}
	}
	
	@Override
	protected void onBtnStatusHistoryClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.EDischargeTTAStatusHistoryDialog, new Object[]{form.getLocalContext().getEditedRecordIsNotNull() ? form.getLocalContext().getEditedRecord().getTTAStatusHistory() : null});
	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{	
		if (formName.equals(form.getForms().Clinical.EDischargeMedsSthkDialog))
		{	
			if (result.equals(DialogResult.OK))
			{				
				TTAMedicationDetailVo record = form.getGlobalContext().Clinical.getEDischargeMeds();
				if (record == null) {
					return;
				}
					
							
					
				TTAMedicationAndPharmacyVo 	currentRecord = form.getLocalContext().getEditedRecord();
				if(currentRecord == null)
					currentRecord = new TTAMedicationAndPharmacyVo();
				
				TTAMedicationDetailVoCollection medColl	= currentRecord.getTTAMedications();
					
				if (medColl == null) {										
					medColl = new TTAMedicationDetailVoCollection();
				}
					
				if (medColl.contains(record)) {
					medColl.set(medColl.indexOf(record), record);
				}
				else {
					medColl.add(record);
				}
								
				medColl.sort(SortOrder.DESCENDING);
				form.grdOrderDischMedication().getRows().clear();
				for (int i = 0; i < medColl.size(); i++) 
				{
					addGrdOrderDischMedicationRow(medColl.get(i));							
				}
				form.grdOrderDischMedication().setValue(record);
				form.getLocalContext().setEditedMedicalRecord(record);	
				currentRecord.setTTAMedications(medColl);
				form.getLocalContext().setEditedRecord(currentRecord);
			}
		}
		else if (formName.equals(form.getForms().Clinical.TTAHistoryDialog))//WDEV-11849-Start
		{
			if (result.equals(DialogResult.OK))
			{
				TTAMedicationDetailVoCollection meds = form.getGlobalContext().Clinical.getTTAMedications();
				if (meds == null || meds.size() == 0)
					return;
				
				TTAMedicationAndPharmacyVo 	currentRecord = form.getLocalContext().getEditedRecord();
				if(currentRecord == null)
				{
					currentRecord = new TTAMedicationAndPharmacyVo();
					form.getLocalContext().setEditedRecord(currentRecord);
				}
				TTAMedicationDetailVoCollection medColl	= currentRecord.getTTAMedications();
				if (medColl == null) {										
					medColl = new TTAMedicationDetailVoCollection();
					currentRecord.setTTAMedications(medColl);
				}
				for (int i = 0 ; i < meds.size() ; i++)
				{
					medColl.add(meds.get(i));
				}
				medColl.sort(SortOrder.DESCENDING);
				form.grdOrderDischMedication().getRows().clear();
				for (int i = 0; i < medColl.size(); i++) 
				{
					addGrdOrderDischMedicationRow(medColl.get(i));							
				}
				
			}
		}//WDEV-11849-End
		updateContextMenuStatus();
			
	}
	private void addGrdOrderDischMedicationRow(TTAMedicationDetailVo record) 
	{	
		
		grdOrderDischMedicationRow newRow = form.grdOrderDischMedication().getRows().newRow();
		newRow.setColMedications(record.getOtherMedicationTextIsNotNull() ? record.getOtherMedicationText() : null); //WDEV-14407
		//newRow.setColMedications(record.getMedicationIsNotNull() ? record.getMedication().getMedicationName() : null);
		newRow.setTooltip(record.getOtherMedicationTextIsNotNull() ? record.getOtherMedicationText() : null);
		
		if (record.getMedicationIsNotNull() && record.getMedication().getIsControlledDrugIsNotNull() && record.getMedication().getIsControlledDrug())
			newRow.setBackColor(ConfigFlag.UI.CONTROLLED_DRUG_COLOR.getValue());			
		
		String dose = record.getDoseValueIsNotNull()  && (record.getDoseUnitIsNotNull()||record.getUnitTextIsNotNull() ) ? 
				formatDose(record.getDoseValue().toString()) + (record.getDoseUnitIsNotNull()?" "+record.getDoseUnit().getText():"")+(record.getUnitTextIsNotNull()?" "+record.getUnitText():"") : null;	//WDEV-11894	
		newRow.setColDose(dose);
		
		String route = record.getRouteIsNotNull() ? record.getRoute().getText() : null;		
		newRow.setColRoute(route);
		
		String frequency = record.getFrequencyUnitIsNotNull()  ?  record.getFrequencyUnit().getText() : null;//WDEV-11894		
		newRow.setColFrequency(frequency);
		
		String formm = record.getFormIsNotNull() ? record.getForm().getText() : null;		
		newRow.setColForm(formm);
		
		String commDate = record.getCommencedDateIsNotNull() ? record.getCommencedDate().toString() : null;		
		newRow.setColCommDate(commDate);
		
		newRow.setValue(record);
	}
	
	//WDEV-13052 if only zeros after decimal point display integer
	private String formatDose(String dose) {
		
		boolean bDecimal = false;
				
		for(int j=dose.length()-1; j>0; j--){
			Character c = dose.charAt(j);
			if(Character.getNumericValue(c)!=0 && Character.isDigit(c))
				bDecimal = true;
			if(!Character.isDigit(c))
				break;				
		}
		
		if(!bDecimal){
			Integer i;
			Float fDose = new Float(dose);
			i=fDose.intValue();				
			dose = i.toString();	
		}
		return dose;
	}

	@Override
	protected void onGrdOrderDischMedicationSelectionChanged() throws PresentationLogicException 
	{	
		form.getLocalContext().setEditedMedicalRecord(form.grdOrderDischMedication().getSelectedRow().getValue());
		if (Boolean.FALSE.equals(form.Group1().getValue().equals(Group1Enumeration.rdoTTAREquiredNo)))
		{
			updateContextMenuStatus();
		}
		else
		{
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewPreviousItem().setVisible(false);//WDEV-11849
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuNewItem().setVisible(false);
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuEditItem().setVisible(false);
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuRemoveItem().setVisible(false);
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewItem().setVisible(true);
			
		}
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException 
	{					
		setEditMode();
		clearScreen();
		
		//updateStatus(TTAStatus.DRAFT);				
		updateContextMenuStatus();
		onRadioButtonGroup1ValueChanged();				
	}

	private void updateStatus(TTAStatus status)
	{
		if(status == null)
		{
			form.getLocalContext().setCurrentStatus(null);
			form.txtTTAStatus().setValue(null);
			return;
		}
				
		TTAStatusVo newStatus = null;
		if (form.getLocalContext().getEditedRecordIsNotNull() && form.getLocalContext().getEditedRecord().getCurrentTTAStatusIsNotNull() && form.getLocalContext().getEditedRecord().getCurrentTTAStatus().getStatus().equals(status))
		{
			form.getLocalContext().setCurrentStatus(form.getLocalContext().getEditedRecord().getCurrentTTAStatus());
			form.txtTTAStatus().setValue(status.getText());
			return;
		}
			
		newStatus = new TTAStatusVo();
		MemberOfStaffShortVo user = (MemberOfStaffShortVo) domain.getMosUser();
		if (user != null)
		{
			
			newStatus.setAuthoringUser(user);
			newStatus.setStatusDateTime(new DateTime());
		}	
		newStatus.setStatus(status);				
		form.txtTTAStatus().setValue(status.getText());
		
		form.getLocalContext().setCurrentStatus(newStatus);
	}
	
	
	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if(save())		
			open();				
	}

	private boolean save() 
	{
		TTAMedicationAndPharmacyVo record = populateDataFromScreen(form.getLocalContext().getEditedRecord());
		if (record == null)
			return false;
		
		String[] errors = record.validate(validateUI(record));
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			record = domain.save(record, form.getLocalContext().getSummary());
			form.getLocalContext().setEditedRecord(record);
		}		
		catch (DomainInterfaceException e) 
		{			
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e) 
		{			
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		
		}
		catch (UniqueKeyViolationException e) 
		{			
			engine.showMessage("A medication with the same name already exists. Please select it instead of creating a new one");//WDEV-12034
			return false;
		}
		
		form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);		
		form.fireCustomControlValueChanged();
		
		return true;
	}

	public void initialize() 
	{
		form.ccOrderingClinician().initialize(MosType.HCP);	
		
		Object hcp = domain.getHcpLiteUser();//WDEV-13536
		form.getLocalContext().setIsHcp(hcp instanceof HcpLiteVo);//WDEV-13536
		
		open();		
	}

	public EDischargeComponentStatus getPharmacyStatusToBeSet() 
	{
		//If no record return HIDDEN status for Pharmacy tab
		return form.getLocalContext().getPharmacyStatusToBeSet();
	}

	public void setStatus(EDischargeComponentStatus status) 
	{
		if (status.equals(EDischargeComponentStatus.EDITABLE))
		{
			form.btnEdit().setVisible(true);
		}
		else if (status.equals(EDischargeComponentStatus.READONLY))
		{
			form.btnEdit().setVisible(false);
		}
		
		form.btnEdit().setEnabled(form.getLocalContext().getIsHcpIsNotNull() && form.getLocalContext().getIsHcp());//wdev-13536
	}

	public EDischargeLastEvent getLastEvent()
	{
		return form.getLocalContext().getLastEvent();
	}

	public void clearLastEvent()
	{
		form.getLocalContext().setLastEvent(null);
	}

	@Override
	protected void onRadioButtonGroup1ValueChanged() throws PresentationLogicException 
	{
		if (form.Group1().getValue() != Group1Enumeration.None)
		{
			if (form.Group1().getValue().equals(Group1Enumeration.rdoTTARequiredYes))
			{
				enableControls(true);								
				form.setccOrderingClinicianEnabled(true);		
				form.ccOrderingClinician().isRequired(true);

				// WDEV-12689 - Default OrderingClinician and OrderingDateTime controls when changing to YES
				// if no values were saved, otherwise populate them with saved values
				if (form.getLocalContext().getEditedRecordIsNotNull())
				{
					// If the record was previously saved
					// Populate the controls with saved values or default to standard values is none were saved
					form.dtimOrderingDateTime().setValue(form.getLocalContext().getEditedRecord().getOrderingDateTimeIsNotNull() ? form.getLocalContext().getEditedRecord().getOrderingDateTime() : new DateTime());
					
					form.ccOrderingClinician().setValue(form.getLocalContext().getEditedRecord().getOrderingClinicianIsNotNull() ? form.getLocalContext().getEditedRecord().getOrderingClinician() :
																(domain.getHcpLiteUser() instanceof IMos ? (IMos) domain.getHcpLiteUser() : null));
				}
				else
				{
					// If the record was not previously saved
					// Then default the controls to currently logged in user and current date time
					form.dtimOrderingDateTime().setValue(new DateTime());
					form.ccOrderingClinician().setValue(domain.getHcpLiteUser() instanceof IMos ? (IMos) domain.getHcpLiteUser() : null);
				}
				updateStatus(TTAStatus.DRAFT);				
				
				updateContextMenuStatus();
			}
			else if (form.Group1().getValue().equals(Group1Enumeration.rdoTTAREquiredNo))
			{
				// WDEV-12689
				clearControlsFromUnsavedData();
				form.Group1().setValue(Group1Enumeration.rdoTTAREquiredNo);
				form.txtClinicialCOmmentsToPharmacy().setValue(form.getLocalContext().getEditedRecordIsNotNull()?form.getLocalContext().getEditedRecord().getClinicalCommentsToPharmacy():null);//WDEV-11999
				
				enableControls(false);
				updateStatus(TTAStatus.NOT_REQUIRED);
				form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewPreviousItem().setVisible(false);//WDEV-11849
				form.getContextMenus().Clinical.getEDischargeMedsSthkMenuNewItem().setVisible(false);
				form.getContextMenus().Clinical.getEDischargeMedsSthkMenuEditItem().setVisible(false);
				form.getContextMenus().Clinical.getEDischargeMedsSthkMenuRemoveItem().setVisible(false);
				form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewItem().setVisible(form.grdOrderDischMedication().getSelectedRow() != null ? true : false);
			}
			
			return;
		}
		else
		{
			clearControls();
			enableControls(false);
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewPreviousItem().setVisible(false);//WDEV-11849
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuNewItem().setVisible(false);
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuEditItem().setVisible(false);
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuRemoveItem().setVisible(false);
			form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewItem().setVisible(false);		
		}
	}

	/**
	 * WDEV-12689
	 * Clear controls data and populate it with saved data
	 */
	private void clearControlsFromUnsavedData()
	{
		// Populate controls with saved values
		form.decBodyW().setValue(form.getLocalContext().getEditedRecordIsNotNull() ? form.getLocalContext().getEditedRecord().getBodyWeightKg() : null);
		form.ccOrderingClinician().setValue(form.getLocalContext().getEditedRecordIsNotNull() ? form.getLocalContext().getEditedRecord().getOrderingClinician() : null);
		form.dtimOrderingDateTime().setValue(form.getLocalContext().getEditedRecordIsNotNull() ? form.getLocalContext().getEditedRecord().getOrderingDateTime() : null);
		form.txtClinicianBleepNo().setValue(form.getLocalContext().getEditedRecordIsNotNull() ? form.getLocalContext().getEditedRecord().getClinicianBleepNo() : null);
		form.txtClinicialCOmmentsToPharmacy().setValue(form.getLocalContext().getEditedRecordIsNotNull() ? form.getLocalContext().getEditedRecord().getClinicalCommentsToPharmacy() : null);
		
		// Clear TTA medication records
		form.grdOrderDischMedication().getRows().clear();
		
		// Add saved TTA medication records to medication grid
		if (form.getLocalContext().getEditedRecordIsNotNull() && form.getLocalContext().getEditedRecord().getTTAMedicationsIsNotNull())
		{
			for (int i = form.getLocalContext().getEditedRecord().getTTAMedications().size() - 1; i >= 0; i--)
			{
				TTAMedicationDetailVo medication = form.getLocalContext().getEditedRecord().getTTAMedications().get(i);

				if (medication.getID_TTAMedicationDetailIsNotNull())
					addGrdOrderDischMedicationRow(medication);
				else
					form.getLocalContext().getEditedRecord().getTTAMedications().remove(medication);
			}
		}
	}

	@Override
	protected void onFormModeChanged() 
	{

	}

	@Override
	protected void onBtnSubmitTTAClick() throws PresentationLogicException 
	{
		engine.showMessage("Please complete a green CD TTO sheet for any controlled drugs to enable a legal supply to be made by Pharmacy");
		
		if (form.getLocalContext().getEditedRecordIsNotNull())
		{
			if(form.getLocalContext().getEditedRecord().getTTAStatusHistoryIsNotNull())
			{
				boolean foundSubmittedStatus = false;
				for (int i = 0; i < form.getLocalContext().getEditedRecord().getTTAStatusHistory().size(); i++) 
				{
					if (form.getLocalContext().getEditedRecord().getTTAStatusHistory().get(i).getStatus().equals(TTAStatus.SUBMITTED))
					{
						foundSubmittedStatus = true;
						break;
					}					
				}
			
				if (foundSubmittedStatus)
					updateStatus(TTAStatus.RESUBMITTED);
				else
					updateStatus(TTAStatus.SUBMITTED);
			}
			else
			{
				updateStatus(TTAStatus.SUBMITTED);
			}
			
			if (save())
			{
				open();
				form.getLocalContext().setPharmacyStatusToBeSet(EDischargeComponentStatus.EDITABLE);
			}	
		}
	}

	public EDischargeComponentStatus getStatus() 
	{
		return null;
	}

	public void setReadOnly() 
	{		
		form.btnNew().setEnabled(false);
		form.btnEdit().setEnabled(false);
		form.btnSubmitTTA().setEnabled(false);
	}

	public void initialize(EDischargeSTHKSummaryVo summary) 
	{
		initialize();
		form.getLocalContext().setSummary(summary);		
	}
}
