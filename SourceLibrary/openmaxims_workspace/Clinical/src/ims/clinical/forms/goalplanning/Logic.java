//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.39 build 2153.19769)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.
// Entire code re-written by Josan George on 01.02.2010
// Copyright (C) 2010-2020 IMS MAXIMS plc. All rights reserved. 

package ims.clinical.forms.goalplanning;

import ims.clinical.forms.goalplanning.GenForm.grdTargetRow;
import ims.clinical.vo.PatientGoalRefVo;
import ims.clinical.vo.PatientGoalTargetRefVo;
import ims.clinical.vo.PatientGoalTargetVo;
import ims.clinical.vo.PatientGoalTargetVoCollection;
import ims.clinical.vo.PatientGoalVo;
import ims.clinical.vo.PatientGoalVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------
	// Events region
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------
	/**
	 * Form Open event handler
	 */
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	/**
	 * Form Mode Change event handler
	 */
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	/**
	 * On Grid Selection Changed event handler
	 */
	protected void onGrdTargetSelectionChanged() throws PresentationLogicException
	{
		// Get the latest information from domain
		if (form.grdTarget().getValue() instanceof PatientGoalRefVo)
		{
			form.getLocalContext().setSelectedRowValue(domain.getPatientGoal((PatientGoalRefVo) form.grdTarget().getValue()));
			form.getLocalContext().setSelectedPatientGoalVo((PatientGoalVo) form.getLocalContext().getSelectedRowValue());
			populateInstanceControls((PatientGoalVo) form.getLocalContext().getSelectedRowValue(), null);
		}
		else if (form.grdTarget().getValue() instanceof PatientGoalTargetRefVo)
		{
			if (!(form.grdTarget().getSelectedRow().getParentRow().getValue() instanceof PatientGoalRefVo))
				throw new CodingRuntimeException("Major logical error - A PatientGoalTarget must be child of a PatientGoal");

			form.getLocalContext().setSelectedRowValue(domain.getPatientGoalTarget((PatientGoalTargetRefVo) form.grdTarget().getValue()));
			populateInstanceControls(domain.getPatientGoal((PatientGoalRefVo) form.grdTarget().getSelectedRow().getParentRow().getValue()), (PatientGoalTargetVo) form.getLocalContext().getSelectedRowValue());
		}

		// Update controls state
		updateControlsState();
	}

	/**
	 * On Button NEW Click event handler
	 */
	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}

	/**
	 * On Button EDIT Click event handler
	 */
	protected void onBtnEditClick() throws PresentationLogicException
	{
		updateInstance();
	}

	/**
	 * On Button CANCEL Click event handler
	 */
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	/**
	 * On Button SAVE Click event handler
	 */
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	/**
	 * On Query combo-box AUTHORING HCP Text submited event handler
	 */
	protected void onQmbAuthoringHCPTextSubmited(String value) throws PresentationLogicException
	{
		try
		{
			populateHcpQueryCombo(domain.listHCP(value));
		}
		catch (DomainInterfaceException exception)
		{
			engine.showMessage(exception.getMessage());
		}
	}

	/**
	 * On Button ADD Click event handler
	 */
	protected void onBtnTargetAddClick() throws PresentationLogicException
	{
		// Add new target to PatientGoal
		if (addNewTargetToSelectedGoal())
		{
			// Clear instance controls
			clearInstanceTargetControls();
		}
	}

	/**
	 * On Button CLEAR Click event handler
	 */
	protected void onBtnTargetClearClick() throws PresentationLogicException
	{
		clearInstanceTargetControls();
	}

	/**
	 * On CONTEXT MENU Click event handler
	 */
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
				break;

			case GenForm.ContextMenus.GenericGrid.Update:
				updateInstance();
				break;
		}
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------------
	// Major Logic functions
	// -----------------------------------------------------------------------------------------------------------------------------------------------------------
	/**
	 * Function used to do form initialization for context menus
	 */
	public void initialize() throws FormOpenException
	{
		// Initialize context menu options (hide all options)
		form.getContextMenus().hideAllGenericGridMenuItems();
	}

	/**
	 * Function used to populate grid, instance controls based on selection, set
	 * form in VIEW mode
	 */
	public void open() throws PresentationLogicException
	{
		// Clear the screen
		clear();

		// Populate grid
		populateGrid(domain.listPatientGoals(form.getGlobalContext().Core.getCurrentCareContext()));

		// Reselect value in grid
		form.grdTarget().setValue(form.getLocalContext().getSelectedRowValue());
		// Reread from grid (just in case the local context in no longer in grid
		// - KEEP THIS LINE)
		form.getLocalContext().setSelectedRowValue(form.grdTarget().getValue());

		// Populate instance controls
		// (we need to populate according to our selection)
		if (form.getLocalContext().getSelectedRowValue() instanceof PatientGoalRefVo)
		{
			populateInstanceControls(domain.getPatientGoal((PatientGoalRefVo) form.getLocalContext().getSelectedRowValue()), null);
		}
		else if (form.getLocalContext().getSelectedRowValue() instanceof PatientGoalTargetRefVo)
		{
			if (form.grdTarget().getSelectedRow() == null || form.grdTarget().getSelectedRow().getParentRow() == null || !(form.grdTarget().getSelectedRow().getParentRow().getValue() instanceof PatientGoalRefVo))
			{
				throw new CodingRuntimeException("Major logical error - A PatientGoalTarget must be child of a PatientGoal");
			}

			populateInstanceControls(domain.getPatientGoal((PatientGoalRefVo) form.grdTarget().getSelectedRow().getParentRow().getValue()), domain.getPatientGoalTarget((PatientGoalTargetRefVo) form.getLocalContext().getSelectedRowValue()));
		}
		else
			form.getLocalContext().setSelectedPatientGoalVo(null);

		// Set form mode to View
		form.setMode(FormMode.VIEW);
	}

	/**
	 * Function used to create a new PatientGoal instance
	 */
	public void newInstance() throws PresentationLogicException
	{
		// Clear grid selection
		form.grdTarget().setValue(null);

		// Clear local context
		form.getLocalContext().setSelectedRowValue(null);

		// Clear instance controls
		clearInstanceControls();

		// Populate HCP field with currently logged in HCP (if logged user is
		// HCP)
		if (domain.getHcpUser() instanceof Hcp)
		{
			form.ctnGoals().lyrGoals().Goal().qmbAuthoringHCP().newRow((Hcp) domain.getHcpUser(), ((Hcp) domain.getHcpUser()).toString());
			form.ctnGoals().lyrGoals().Goal().qmbAuthoringHCP().setValue((Hcp) domain.getHcpUser());
		}

		// Set form in EDIT mode
		form.setMode(FormMode.EDIT);
	}

	/**
	 * Function used to edit a PatientGoal or a PatientGoalTarget instance
	 */
	public void updateInstance()
	{
		if (form.getLocalContext().getSelectedRowValue() instanceof PatientGoalRefVo)
		{
			// Get PatientGoal object data from domain
			form.getLocalContext().setSelectedRowValue(domain.getPatientGoal((PatientGoalRefVo) form.getLocalContext().getSelectedRowValue()));

			// Populate instance controls with fresh data
			populateInstanceControls((PatientGoalVo) form.getLocalContext().getSelectedRowValue(), null);

		}
		else if (form.getLocalContext().getSelectedRowValue() instanceof PatientGoalTargetRefVo)
		{
			// Check for a valid value in parent row
			if (form.grdTarget().getSelectedRow() == null || form.grdTarget().getSelectedRow().getParentRow() == null || !(form.grdTarget().getSelectedRow().getParentRow().getValue() instanceof PatientGoalRefVo))
				throw new CodingRuntimeException("Major Logical Error - PatientGoalTarget rows must have a PatientGoal target");

			// Get parent PatientGoal object data from domain
			PatientGoalVo patientGoal = domain.getPatientGoal((PatientGoalRefVo) form.grdTarget().getSelectedRow().getParentRow().getValue());

			// Get PatientGoalTarget object data from domain
			form.getLocalContext().setSelectedRowValue(domain.getPatientGoalTarget((PatientGoalTargetRefVo) form.getLocalContext().getSelectedRowValue()));

			// Populate instance controls with fresh data
			populateInstanceControls(patientGoal, (PatientGoalTargetVo) form.getLocalContext().getSelectedRowValue());
		}

		// Set form in EDIT mode
		form.setMode(FormMode.EDIT);
	}

	/**
	 * Function used to temporarily add a target to a goal
	 */
	private boolean addNewTargetToSelectedGoal()
	{
		// Not only the local context containing the selected object needs to be
		// a PatientGoal,
		// but also in the grid on the form a row must be selected, and that row
		// value must be of type PatientGoal

		// Check for a selected PatientGoal
		if (!(form.getLocalContext().getSelectedRowValue() instanceof PatientGoalVo))
			throw new CodingRuntimeException("Major Logical Error - Can only add a PatientGoalTarget to a PatientGoal");

		// Check for a selected row
		if (form.grdTarget().getSelectedRow() != null && !(form.grdTarget().getSelectedRow().getValue() instanceof PatientGoalRefVo))
			throw new CodingRuntimeException("Major Logical Error - Can only add a PatientGoalTarget to a selected Patient Goal");

		// Get a PatientGoalTargetVo from screen data
		PatientGoalTargetVo patientGoalTarget = populatePatientGoalTargetFromScreen();

		// Validate PatientGoalTarget VO obtained from screen data
		String[] errors = patientGoalTarget.validate();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		// Add a child row to currently selected row with PatientGoalTarget
		// value
		grdTargetRow newRow = form.grdTarget().getSelectedRow().getRows().newRow();
		setPatientGoalTargetRow(newRow, patientGoalTarget);

		// Set background color for new row
		newRow.setBackColor(Color.Bisque);

		// Get PatientGoalVo from local context
		PatientGoalVo patientGoal = (PatientGoalVo) form.getLocalContext().getSelectedRowValue();

		// Check PatientGoal target collection - create a new collection if need
		// to
		if (!patientGoal.getTargetIsNotNull())
		{
			patientGoal.setTarget(new PatientGoalTargetVoCollection());
		}

		// Add target to selected PatientGoal
		patientGoal.getTarget().add(patientGoalTarget);

		return true;
	}

	/**
	 * Function used to save either a PatientGoal or a PatientGoalTarget
	 * instance
	 */
	public boolean save() throws PresentationLogicException
	{
		try
		{
			// Determine if we save or if we edit a goal or a target
			if (!form.getLocalContext().getSelectedRowValueIsNotNull())
			{
				// Case 1 - we are creating a new PatientGoal

				// Populate PatientGoal from screen
				PatientGoalVo patientGoal = populatePatientGoalFromScreen();

				// Check for null on VO
				if (patientGoal == null)
					throw new CodingRuntimeException("Major Logical Error - Can not save a null PatientGoal vo");

				// Validate PatientGoal VO
				String[] errors = patientGoal.validate();

				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return false;
				}

				// Attempt domain save
				form.getLocalContext().setSelectedRowValue(domain.savePatientGoal(patientGoal));
			}
			else if (form.getLocalContext().getSelectedRowValue() instanceof PatientGoalRefVo)
			{
				// Case we are editing a PatientGoal

				// Populate PatientGoal from screen
				PatientGoalVo patientGoal = populatePatientGoalFromScreen((PatientGoalVo) ((PatientGoalVo) form.getLocalContext().getSelectedRowValue()).clone());

				// Check for null on VO
				if (patientGoal == null)
					throw new CodingRuntimeException("Major Logical Error - Can not save a null PatientGoal vo.");

				// Validate PatientGoal VO
				String[] errors = patientGoal.validate();

				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return false;
				}

				// Attempt domain save
				form.getLocalContext().setSelectedRowValue(domain.savePatientGoal(patientGoal));
			}
			else if (form.getLocalContext().getSelectedRowValue() instanceof PatientGoalTargetRefVo)
			{
				// Case we are editing a PatientGoalTarget

				// Populate PatientGoalTarget from screen
				PatientGoalTargetVo patientGoalTarget = populatePatientGoalTargetFromScreen((PatientGoalTargetVo) ((PatientGoalTargetVo) form.getLocalContext().getSelectedRowValue()).clone());

				// Check for null on VO
				if (patientGoalTarget == null)
					throw new CodingRuntimeException("Major Logical Error - Can not save a null PatientGoalTarget vo.");

				// Validate PatientGoalTarget VO
				String[] errors = patientGoalTarget.validate();

				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return false;
				}

				// Attempt domain save
				form.getLocalContext().setSelectedRowValue(domain.savePatientGoalTarget(patientGoalTarget));
			}

			return true;
		}
		catch (StaleObjectException exception)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (ForeignKeyViolationException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------------
	// Grid populate
	// -----------------------------------------------------------------------------------------------------------------------------------------------------------
	/**
	 * 
	 * @param patientGoalsCollection
	 */
	private void populateGrid(PatientGoalVoCollection patientGoalsCollection)
	{
		// Clear grid
		form.grdTarget().getRows().clear();

		// If the PatientGoal collection is null terminate function
		if (patientGoalsCollection == null)
			return;

		// Add each PatientGoal to the grid
		for (int i = 0; i < patientGoalsCollection.size(); i++)
		{
			PatientGoalVo patientGoal = patientGoalsCollection.get(i);

			// Skip null records
			if (patientGoal == null)
				continue;

			setPatientGoalRow(form.grdTarget().getRows().newRow(), patientGoal);
		}
	}

	/**
	 * Function used to set up a GridRow with a PatientGoal value
	 * 
	 * @param row -
	 *            the provided row to set up with PatientGoal; the row can not
	 *            be null
	 * @param patientGoal -
	 *            PatientGoal to be set up on row
	 */
	private void setPatientGoalRow(grdTargetRow row, PatientGoalVo patientGoal)
	{
		// Do a check on parameters
		if (patientGoal == null)
			return;

		// If a null row is provided, then it's a major logical error
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Null row provided to set up a PatientGoal");

		// Build the display text to display for the PatientGoal
		StringBuffer displayText = new StringBuffer();

		if (patientGoal.getAreaOfNeedIsNotNull())
			displayText.append(patientGoal.getAreaOfNeed().getText());

		if (patientGoal.getGoalTypeIsNotNull())
			displayText.append(", ").append(patientGoal.getGoalType().getText());

		if (patientGoal.getCreatedDateTimeIsNotNull())
			displayText.append(", ").append(patientGoal.getCreatedDateTime());

		if (patientGoal.getGoalTextIsNotNull())
			displayText.append(", ").append(patientGoal.getGoalText());

		row.setcolTarget(displayText.toString());

		// Set up the tool tip for the row
		if (patientGoal.getGoalTextIsNotNull())
			row.setTooltip("<b>Goal:</b> " + patientGoal.getGoalText());

		// Set the row value
		row.setValue(patientGoal);

		// Set up PatientGoal row background color
		row.setBackColor(Color.LightYellow);

		// Set up PatientGoal targets (or color the row in LightYellow if it has
		// no targets)
		if (patientGoal.getTargetIsNotNull())
		{
			for (int i = 0; i < patientGoal.getTarget().size(); i++)
			{
				PatientGoalTargetVo patientGoalTarget = patientGoal.getTarget().get(i);

				// Skip null entries in collection
				if (patientGoalTarget == null)
					continue;

				setPatientGoalTargetRow(row.getRows().newRow(), patientGoalTarget);
			}

			// Expand the row
			row.setExpanded(true);
		}
	}

	/**
	 * Function used to set up a row with a PatientGoalTarget value
	 * 
	 * @param row -
	 *            the provided row to set up with PatientGoalTarget; the row can
	 *            not be null
	 * @param patientGoalTarget -
	 *            PatientGoalTarget to be set up on row
	 */
	private void setPatientGoalTargetRow(grdTargetRow row, PatientGoalTargetVo patientGoalTarget)
	{
		// Do a check on parameters
		if (patientGoalTarget == null)
			return;

		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Null row provided to set up a PatientGoalTarget");

		// Set row columns
		row.setcolTarget(patientGoalTarget.getTarget());
		row.setcolTargetDate(patientGoalTarget.getTargetDate());
		row.setcolAchievedDate(patientGoalTarget.getDateAchieved());

		row.setcolLOA(patientGoalTarget.getLOAIsNotNull() ? patientGoalTarget.getLOA().getText() : null);

		row.setcolReason(patientGoalTarget.getReasonForNonA());
		row.setTooltipForcolReason(patientGoalTarget.getReasonForNonA());

		// Set row value
		row.setValue(patientGoalTarget);
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------------
	// Presentation functions region
	// -----------------------------------------------------------------------------------------------------------------------------------------------------------
	/**
	 * Function used to update the controls state
	 */
	public void updateControlsState()
	{
		// Set state of the container
		form.ctnGoals().setCollapsed(FormMode.VIEW.equals(form.getMode()) && !form.getLocalContext().getSelectedRowValueIsNotNull());

		// Enable & select appropriate tabs
		form.ctnGoals().lyrGoals().Goal().setHeaderEnabled(true);
		form.ctnGoals().lyrGoals().Target().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()) || form.getLocalContext().getSelectedRowValueIsNotNull());

		if (form.getLocalContext().getSelectedRowValue() instanceof PatientGoalTargetRefVo)
		{
			form.ctnGoals().lyrGoals().showTarget();
		}
		else
		{
			form.ctnGoals().lyrGoals().showGoal();
		}

		// Set the state of 'Edit' button
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(form.getLocalContext().getSelectedRowValueIsNotNull());
		}
		else if (FormMode.EDIT.equals(form.getMode()))
		{
			boolean editPatientGoal = form.getLocalContext().getSelectedRowValue() instanceof PatientGoalRefVo;
			boolean editPatientGoalTarget = form.getLocalContext().getSelectedRowValue() instanceof PatientGoalTargetRefVo;

			// Goal tab controls
			form.ctnGoals().lyrGoals().Goal().cmbAreaOfNeed().setEnabled(!editPatientGoalTarget);
			form.ctnGoals().lyrGoals().Goal().cmbGoalType().setEnabled(!editPatientGoalTarget);
			form.ctnGoals().lyrGoals().Goal().txtGoal().setEnabled(!editPatientGoalTarget);
			form.ctnGoals().lyrGoals().Goal().dtimCreated().setEnabled(!editPatientGoalTarget);
			form.ctnGoals().lyrGoals().Goal().qmbAuthoringHCP().setEnabled(!editPatientGoalTarget);
			form.ctnGoals().lyrGoals().Goal().dteAchieved().setEnabled(!editPatientGoalTarget);

			// Target tab controls
			form.ctnGoals().lyrGoals().Target().txtTarget().setEnabled(editPatientGoal || editPatientGoalTarget);
			form.ctnGoals().lyrGoals().Target().cmbLOA().setEnabled(editPatientGoal || editPatientGoalTarget);
			form.ctnGoals().lyrGoals().Target().txtReasonNonA().setEnabled(editPatientGoal || editPatientGoalTarget);
			form.ctnGoals().lyrGoals().Target().dteTargetDate().setEnabled(editPatientGoal || editPatientGoalTarget);
			form.ctnGoals().lyrGoals().Target().dteAchievedDate().setEnabled(editPatientGoal || editPatientGoalTarget);

			// Target tab buttons
			form.ctnGoals().lyrGoals().Target().btnAdd().setVisible(editPatientGoal);
			form.ctnGoals().lyrGoals().Target().btnClear().setVisible(editPatientGoal);
		}

		// Call function to update context menu
		updateContextMenuState();
	}

	/**
	 * Function used to update the context menu options visibility
	 */
	private void updateContextMenuState()
	{
		form.getContextMenus().getGenericGridAddItem().setVisible(FormMode.VIEW.equals(form.getMode()));

		// Determine the text on update option in context menu
		if (form.getLocalContext().getSelectedRowValue() instanceof PatientGoalRefVo)
		{
			form.getContextMenus().getGenericGridUpdateItem().setText("Edit");
		}
		else if (form.getLocalContext().getSelectedRowValue() instanceof PatientGoalTargetRefVo)
		{
			form.getContextMenus().getGenericGridUpdateItem().setText("Edit Target");
		}

		form.getContextMenus().getGenericGridUpdateItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getSelectedRowValueIsNotNull());
	}

	/**
	 * Function used to clear the screen (both grid and instance controls)
	 */
	public void clear()
	{
		// Clear grid
		form.grdTarget().getRows().clear();

		// Clear instance controls
		clearInstanceControls();
	}

	/**
	 * Function used to clear only the Instance controls
	 */
	public void clearInstanceControls()
	{
		// Clear goal tab
		clearInstanceGoalControls();

		// Clear target tab
		clearInstanceTargetControls();
	}

	/**
	 * Function used to clear only the Instance Goal controls
	 */
	private void clearInstanceGoalControls()
	{
		form.ctnGoals().lyrGoals().Goal().cmbAreaOfNeed().setValue(null);
		form.ctnGoals().lyrGoals().Goal().cmbGoalType().setValue(null);
		form.ctnGoals().lyrGoals().Goal().txtGoal().setValue(null);
		form.ctnGoals().lyrGoals().Goal().dtimCreated().setValue(null);
		form.ctnGoals().lyrGoals().Goal().qmbAuthoringHCP().clear();
		form.ctnGoals().lyrGoals().Goal().dteAchieved().setValue(null);
	}

	/**
	 * Function used to clear only the Instance Target controls
	 */
	private void clearInstanceTargetControls()
	{
		form.ctnGoals().lyrGoals().Target().txtTarget().setValue(null);
		form.ctnGoals().lyrGoals().Target().cmbLOA().setValue(null);
		form.ctnGoals().lyrGoals().Target().txtReasonNonA().setValue(null);
		form.ctnGoals().lyrGoals().Target().dteTargetDate().setValue(null);
		form.ctnGoals().lyrGoals().Target().dteAchievedDate().setValue(null);
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange functions region
	// -----------------------------------------------------------------------------------------------------------------------------------------------------------
	/**
	 * Function used to populate the Instance controls It has two parameters
	 * 
	 * @param patientGoal -
	 *            Represents PatientGoal; this parameter should never be null
	 *            (pass it even when a PatientGoalTarget is selected)
	 * @param patientGoalTarget -
	 *            Represents PatientGoalTarget; this parameter should be null
	 *            when a PatientGoal row is selected in grid
	 */
	private void populateInstanceControls(PatientGoalVo patientGoal, PatientGoalTargetVo patientGoalTarget)
	{
		// Clear instance controls
		clearInstanceControls();

		// If patient goal is not null populate contents
		// (Should never occur)
		if (patientGoal != null)
		{
			form.ctnGoals().lyrGoals().Goal().cmbAreaOfNeed().setValue(patientGoal.getAreaOfNeed());
			form.ctnGoals().lyrGoals().Goal().cmbGoalType().setValue(patientGoal.getGoalType());
			form.ctnGoals().lyrGoals().Goal().txtGoal().setValue(patientGoal.getGoalText());
			form.ctnGoals().lyrGoals().Goal().dtimCreated().setValue(patientGoal.getCreatedDateTime());

			// For authoring HCP check if there is one present first
			if (patientGoal.getAuthoringHCPIsNotNull())
			{
				form.ctnGoals().lyrGoals().Goal().qmbAuthoringHCP().newRow(patientGoal.getAuthoringHCP(), patientGoal.getAuthoringHCP().toString());
				form.ctnGoals().lyrGoals().Goal().qmbAuthoringHCP().setValue(patientGoal.getAuthoringHCP());
			}

			form.ctnGoals().lyrGoals().Goal().dteAchieved().setValue(patientGoal.getDateAchieved());
			
			form.getLocalContext().setSelectedPatientGoalVo(patientGoal);
		}

		// If patient goal target is not null populate contents
		if (patientGoalTarget != null)
		{
			form.ctnGoals().lyrGoals().Target().txtTarget().setValue(patientGoalTarget.getTarget());
			form.ctnGoals().lyrGoals().Target().cmbLOA().setValue(patientGoalTarget.getLOA());
			form.ctnGoals().lyrGoals().Target().txtReasonNonA().setValue(patientGoalTarget.getReasonForNonA());
			form.ctnGoals().lyrGoals().Target().dteTargetDate().setValue(patientGoalTarget.getTargetDate());
			form.ctnGoals().lyrGoals().Target().dteAchievedDate().setValue(patientGoalTarget.getDateAchieved());
		}
	}

	/**
	 * Function used to create a new PatientGoal from screen data; it calls
	 * populatePatientGoalFromScreen(null)
	 * 
	 * @return a new PatientGoal object populated with data from screen and the
	 *         current CareContext
	 */
	private PatientGoalVo populatePatientGoalFromScreen()
	{
		return populatePatientGoalFromScreen(null);
	}

	/**
	 * Function used to update a PatientGoal with data from screen.
	 * 
	 * @param patientGoal -
	 *            Represent the PatientGoal; if this parameter is null a new
	 *            PatientGoal will be created
	 * @return PatientGoal object, updated with data from screen
	 */
	private PatientGoalVo populatePatientGoalFromScreen(PatientGoalVo patientGoal)
	{
		// Parameter check
		if (patientGoal == null)
		{
			patientGoal = new PatientGoalVo();
		}

		// Set mandatory values that are not on screen (from global context)
		patientGoal.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		// Get data from screen
		patientGoal.setAreaOfNeed(form.ctnGoals().lyrGoals().Goal().cmbAreaOfNeed().getValue());
		patientGoal.setGoalType(form.ctnGoals().lyrGoals().Goal().cmbGoalType().getValue());
		patientGoal.setGoalText(form.ctnGoals().lyrGoals().Goal().txtGoal().getValue());
		patientGoal.setCreatedDateTime(form.ctnGoals().lyrGoals().Goal().dtimCreated().getValue());
		patientGoal.setAuthoringHCP(form.ctnGoals().lyrGoals().Goal().qmbAuthoringHCP().getValue());
		patientGoal.setDateAchieved(form.ctnGoals().lyrGoals().Goal().dteAchieved().getValue());

		// Check target collection
		if (!patientGoal.getTargetIsNotNull())
		{
			patientGoal.setTarget(new PatientGoalTargetVoCollection());
		}

		return patientGoal;
	}

	/**
	 * Function used to create a new PatientGoalTarget from screen data; it
	 * calls populatePatientGoalTargetFromScreen(null)
	 * 
	 * @return a new PatientGoalTarget object populated with data from screen
	 */
	private PatientGoalTargetVo populatePatientGoalTargetFromScreen()
	{
		return populatePatientGoalTargetFromScreen(null);
	}

	/**
	 * Function used to update a PatientGoalTarget with data from screen
	 * 
	 * @param patientGoalTarget -
	 *            Represent the PatientGoalTarget; if this parameter is null a
	 *            new PatientGoalTarget will be created
	 * @return PatientGoalTarget object, updated with data from screen
	 */
	private PatientGoalTargetVo populatePatientGoalTargetFromScreen(PatientGoalTargetVo patientGoalTarget)
	{
		// Parameters check
		if (patientGoalTarget == null)
		{
			patientGoalTarget = new PatientGoalTargetVo();
		}

		// Get data from screen
		patientGoalTarget.setTarget(form.ctnGoals().lyrGoals().Target().txtTarget().getValue());
		patientGoalTarget.setLOA(form.ctnGoals().lyrGoals().Target().cmbLOA().getValue());
		patientGoalTarget.setReasonForNonA(form.ctnGoals().lyrGoals().Target().txtReasonNonA().getValue());
		patientGoalTarget.setTargetDate(form.ctnGoals().lyrGoals().Target().dteTargetDate().getValue());
		patientGoalTarget.setDateAchieved(form.ctnGoals().lyrGoals().Target().dteAchievedDate().getValue());

		return patientGoalTarget;
	}

	/**
	 * Function used to list HCPs in the query combo-box
	 * 
	 * @param listHCP -
	 *            Represents the list of the HCP to be populated; if it is null
	 *            the query will only be cleared
	 */
	private void populateHcpQueryCombo(HcpCollection listHCP)
	{
		// Clear the query combo box
		form.ctnGoals().lyrGoals().Goal().qmbAuthoringHCP().clear();

		// If the HCP list is empty terminate function
		if (listHCP == null || listHCP.size() == 0)
			return;

		// Populate query combo box with HCP values
		for (int i = 0; i < listHCP.size(); i++)
		{
			// Skip null records from collection
			Hcp hcp = listHCP.get(i);

			if (hcp == null)
				continue;

			// Add a row for each HCP
			form.ctnGoals().lyrGoals().Goal().qmbAuthoringHCP().newRow(hcp, hcp.toString());
		}

		if (listHCP.size() == 1)
		{
			form.ctnGoals().lyrGoals().Goal().qmbAuthoringHCP().setValue(listHCP.get(0));
		}
		else if (listHCP.size() > 0)
		{
			form.ctnGoals().lyrGoals().Goal().qmbAuthoringHCP().showOpened();
		}
	}
}
