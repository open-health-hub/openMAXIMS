//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4680.16533)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.hcgcc;


import ims.clinical.forms.hcgcc.GenForm.grdHCgRow;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.HCGTestItemVo;
import ims.emergency.vo.HCGTestItemVoCollection;
import ims.emergency.vo.HCGTestsVo;
import ims.emergency.vo.enums.EdAssessment_CustomControlsEvents;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlState();
	}
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName!=null && formName.equals(form.getForms().Clinical.HCGDialog) && result != null && result.equals(DialogResult.OK))
		{
			if (form.getGlobalContext().Clinical.getSelectedHCGTestItem().equals(form.grdHCg().getValue()) && form.grdHCg().getValue() != null)
			{
				saveItem();
			}
			else
			{
				save();
			}
			//WDEV-17337
			form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.SAVE);
			form.fireCustomControlValueChanged();
			
		}
		else if (formName!=null && formName.equals(form.getForms().Core.RieConfirmationDialog) && result != null && result.equals(DialogResult.OK ))
		{
			rieHCGItem();
			//WDEV-17337
			form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.RIE);
			form.fireCustomControlValueChanged();
		}
		
		//WDEV-17337
		if (result.equals(DialogResult.CANCEL ) || result.equals(DialogResult.NO ) )
		{
			form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.CANCEL);
			form.fireCustomControlValueChanged();
		}
		
		open();
	}
	
	private void rieHCGItem()
	{
		if (form.getGlobalContext().Clinical.getSelectedHCGTestItem() == null)
			return;
		
		String comment = form.getGlobalContext().Core.getRieMessage();
		
		boolean isStale = false;
		if(domain.isStale(form.getGlobalContext().Clinical.getSelectedHCGTestItem()))
		{
			isStale = true;
		}
		
		
		if(isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		try
		{
			domain.markAsRie(form.getGlobalContext().Clinical.getSelectedHCGTestItem(), engine.getFormName(), null,  null, form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext(), comment);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
		}
	}
	private boolean save()
	{
		HCGTestsVo hcgToSave = populateDataFromScreen(form.getLocalContext().getcurrentHCG(),form.getGlobalContext().Clinical.getSelectedHCGTestItem());
		
		//check if there is already a HCGTest saved for the current CareContext. If exist add HCGItem to that HCGTest
		HCGTestsVo tempHCG = domain.getHCGbyCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if (hcgToSave.getID_HCGTests()==null && tempHCG!=null)
		{
			hcgToSave=populateDataFromScreen(tempHCG,form.getGlobalContext().Clinical.getSelectedHCGTestItem());
			//engine.showMessage("A HCG for the current Attendance already exist. The screen will be refreshed. ");
			//return false;
		}
		
		String[] errors = hcgToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setcurrentHCG(domain.save(hcgToSave));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		return true;
	}
	
	private boolean saveItem()
	{
		try
		{
			form.getGlobalContext().Clinical.setSelectedHCGTestItem(domain.saveItem(form.getGlobalContext().Clinical.getSelectedHCGTestItem()));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		return true;
	}
	
	
	private void addRowToHCGGrid(HCGTestItemVo HCGTestItem)
	{
		if (HCGTestItem==null)
			return;
		
		grdHCgRow row = form.grdHCg().getRows().newRow();
		
		row.setcolRecordingDate((HCGTestItem.getRecordingInformationIsNotNull() && HCGTestItem.getRecordingInformation().getRecordingDateTimeIsNotNull())?HCGTestItem.getRecordingInformation().getRecordingDateTime().toString():null);
		row.setTooltipForcolRecordingDate((HCGTestItem.getRecordingInformationIsNotNull() && HCGTestItem.getRecordingInformation().getRecordingDateTimeIsNotNull())?HCGTestItem.getRecordingInformation().getRecordingDateTime().toString():null);
		
		row.setcolRecordingHCP(HCGTestItem.getRecordingInformationIsNotNull() && HCGTestItem.getRecordingInformation().getRecordingUserIsNotNull()?HCGTestItem.getRecordingInformation().getRecordingUser().toString():null);
		row.setTooltipForcolRecordingHCP(HCGTestItem.getRecordingInformationIsNotNull() && HCGTestItem.getRecordingInformation().getRecordingUserIsNotNull()?HCGTestItem.getRecordingInformation().getRecordingUser().toString():null);
		
		row.setcolLotNumber(HCGTestItem.getLotNumberIsNotNull()?HCGTestItem.getLotNumber():null);
		row.setTooltipForcolLotNumber(HCGTestItem.getLotNumberIsNotNull()?HCGTestItem.getLotNumber():null);
		
		row.setcolUrineHCG(HCGTestItem.getUrineHCGIsNotNull()?HCGTestItem.getUrineHCG().toString():null);
		row.setTooltipForcolUrineHCG(HCGTestItem.getUrineHCGIsNotNull()?HCGTestItem.getUrineHCG().toString():null);
		
		row.setcolSerumHCG(HCGTestItem.getSerumHCGIsNotNull()?HCGTestItem.getSerumHCG().toString():null);
		row.setTooltipForcolSerumHCG(HCGTestItem.getSerumHCGIsNotNull()?HCGTestItem.getSerumHCG().toString():null);
		
		row.setValue(HCGTestItem);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{ 
		switch(menuItemID)
		{
    		case GenForm.ContextMenus.ClinicalNamespace.HCGMenu.NEW:
    			if (!isMosUser())
    			{
    				engine.showMessage("Logged in User is not a Member of Staff!");
    				return;
    			}
    			
    			form.grdHCg().setValue(null);
    			form.getGlobalContext().Clinical.setSelectedHCGTestItem(null);
    			engine.open(form.getForms().Clinical.HCGDialog,new Object[]{FormMode.EDIT});
    		break;
    		case GenForm.ContextMenus.ClinicalNamespace.HCGMenu.EDIT:		
    			if (!isMosUser())
    			{
    				engine.showMessage("Logged in User is not a Member of Staff!");
    				return;
    			}
    			
    			form.getGlobalContext().Clinical.setSelectedHCGTestItem(domain.getHCGItem(form.grdHCg().getValue()));
    			engine.open(form.getForms().Clinical.HCGDialog,new Object[]{FormMode.EDIT});
    		break;
    		case GenForm.ContextMenus.ClinicalNamespace.HCGMenu.VIEW:
    			form.getGlobalContext().Clinical.setSelectedHCGTestItem(domain.getHCGItem(form.grdHCg().getValue()));
    			engine.open(form.getForms().Clinical.HCGDialog,new Object[]{FormMode.VIEW});			
    		break;
    		case GenForm.ContextMenus.ClinicalNamespace.HCGMenu.RIE:
    			if (!isMosUser())
    			{
    				engine.showMessage("Logged in User is not a Member of Staff!");
    				return;
    			}
    			engine.open(form.getForms().Core.RieConfirmationDialog);
    		break;
		
		}
		updateControlState();
	}
	
	private boolean isMosUser()
	{
		if (domain.getMosUser()!=null)
		{
			return true;
		}
		
		return false;
	}
	public void initialize()
	{
		form.getGlobalContext().Clinical.setSelectedHCGTestItem(null);
		form.getLocalContext().setcurrentHCG(null);
		open();
		
	}
	
	private void open()
	{
		form.getLocalContext().setcurrentHCG(domain.getHCGbyCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		populateScreenFromData(form.getLocalContext().getcurrentHCG());
		form.setMode(FormMode.VIEW);
	}
	
	private void populateScreenFromData(HCGTestsVo voHCG)
	{
		form.grdHCg().getRows().clear();
		
		if (voHCG==null)
			return;
		
		HCGTestItemVoCollection collHCGTestItems = voHCG.getHCGTests();
		for (int i=0;i<collHCGTestItems.size();i++ )
		{
			addRowToHCGGrid(collHCGTestItems.get(i));
		}
		
		form.grdHCg().setValue(form.getGlobalContext().Clinical.getSelectedHCGTestItem());
	}
	
	private HCGTestsVo populateDataFromScreen(HCGTestsVo voHCGTests, HCGTestItemVo voHCGTestItem)
	{
		if (voHCGTests==null)
			voHCGTests=new HCGTestsVo();
		else
			{
			voHCGTests=(HCGTestsVo)voHCGTests.clone();
			voHCGTests=domain.getHCG(voHCGTests);
			}
		
		if (voHCGTests.getCareContext()==null)
			voHCGTests.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		//voHCGTests.setHCGTests(populateHCGTestItemsCollFromGrid());
		
		HCGTestItemVoCollection hcgItemColl = voHCGTests.getHCGTests();
		if (hcgItemColl == null)
			hcgItemColl = new HCGTestItemVoCollection();
		
		hcgItemColl.add(voHCGTestItem);
		voHCGTests.setHCGTests(hcgItemColl);
		
		return voHCGTests;
	}
	
	private void updateControlState()
	{
		form.getContextMenus().Clinical.getHCGMenuNEWItem().setVisible(Boolean.TRUE.equals(form.getLocalContext().getisEnabled()));
		form.getContextMenus().Clinical.getHCGMenuEDITItem().setVisible(Boolean.TRUE.equals(form.getLocalContext().getisEnabled()) && form.grdHCg().getValue() instanceof HCGTestItemVo);
		form.getContextMenus().Clinical.getHCGMenuVIEWItem().setVisible(Boolean.TRUE.equals(form.getLocalContext().getisEnabled()) && form.grdHCg().getValue() instanceof HCGTestItemVo);		
		form.getContextMenus().Clinical.getHCGMenuRIEItem().setVisible(Boolean.TRUE.equals(form.getLocalContext().getisEnabled()) && form.grdHCg().getValue() instanceof HCGTestItemVo);
	
	}
	
	public void setEnabled(Boolean argument)
	{
		form.getLocalContext().setisEnabled(argument);
		updateControlState();
	}
	@Override
	protected void onGrdHCgSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setSelectedHCGTestItem(form.grdHCg().getValue());
		updateControlState();
	}
	
	//WDEV-17337
	public EdAssessment_CustomControlsEvents getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}
	
	//WDEV-17337
	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}
}
