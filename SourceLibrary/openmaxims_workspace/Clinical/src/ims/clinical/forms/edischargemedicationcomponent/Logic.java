//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3314.22227)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.edischargemedicationcomponent;

import ims.clinical.forms.edischargemedicationcomponent.GenForm.grdJACRow;
import ims.clinical.forms.edischargemedicationcomponent.GenForm.grdMedicationRow;
import ims.clinical.helper.JACExecutionHelper;
import ims.clinical.vo.AdmissionMedicationChangesVo;
import ims.clinical.vo.AdmissionMedicationChangesVoCollection;
import ims.clinical.vo.DischargeMedicationDetailsVo;
import ims.clinical.vo.TTAMedicationVo;
import ims.clinical.vo.TTAMedicationVoCollection;
import ims.clinical.vo.lookups.TTORequired;
import ims.clinicaladmin.vo.lookups.EDischargeHINT;
import ims.core.vo.FieldHelpVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
	}
	
	private void initializeComponent() 
	{
		setTooltips();
		form.getLocalContext().setisReadonly(false);

		form.getLocalContext().setbInitialised(null);
	}

	private void setTooltips() 
	{ 
		EDischargeHINT lkpHint = new EDischargeHINT();
		
		lkpHint.setId(-1722); //TTO Required
		FieldHelpVo voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbTTOHINT().setTooltip(voHint.getHelpText());
		
		lkpHint.setId(-1723); //Meds On Discharge
		voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbMedsOnDisch().setTooltip(voHint.getHelpText());
		
		lkpHint.setId(-1724); //Meds Recommendations
		voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbMedRecommends().setTooltip(voHint.getHelpText());
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		open();

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		btnSaveClick();
	}

	private void btnSaveClick() throws PresentationLogicException
	{
		if (form.cmbRequired().getValue() == null)
		{
			engine.showMessage("TTO : Required is a mandatory field");
			form.cmbRequired().setFocus();
			return; 
		}

		if (save())
			open();
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}
	
	public void clearInstanceControls()
	{
		form.cmbRequired().setValue(null);
		form.grdJAC().getRows().clear();
		form.txtMedicationRecommendations().setValue(null);
	}

	public boolean save() throws PresentationLogicException 
	{
		DischargeMedicationDetailsVo voMeds = populateDataFromScreen();
		String[] str = voMeds.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return false;
		}

		try 
		{
			voMeds = domain.saveMedication(voMeds);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			open();
			form.setMode(FormMode.VIEW);			
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage("The data has been changed by medication message or another user. The screen will be refreshed.");
			
			form.setMode(FormMode.VIEW);
			open();
			
			form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
			form.fireCustomControlValueChanged();
			
			return false;
		} 
		form.getLocalContext().setSelectedRecord(voMeds);
		form.setMode(FormMode.VIEW);

		return true;
	}

	private DischargeMedicationDetailsVo populateDataFromScreen() 
	{
		DischargeMedicationDetailsVo voMeds = null;
		if (form.getLocalContext().getSelectedRecordIsNotNull())
			voMeds = form.getLocalContext().getSelectedRecord();
		else
			voMeds = new DischargeMedicationDetailsVo();

		if (voMeds.getCareContext() == null)
			voMeds.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voMeds.setTTARequired(form.cmbRequired().getValue());

		voMeds.setMedicationRecommendations(form.txtMedicationRecommendations().getValue());
	
		return voMeds;
	}

	public void open()
	{
		DischargeMedicationDetailsVo voMeds = domain.getMedication(form.getGlobalContext().Core.getCurrentCareContext());
		form.getLocalContext().setSelectedRecord(voMeds);
		
		populateScreenFromData(voMeds);
		
		manageReadOnly();
		//WDEV-8369
		updateControlStateLblRefreshDateTime();
	}


	private void populateScreenFromData(DischargeMedicationDetailsVo voMeds)
	{
		clearInstanceControls();
		//WDEV-8183
		form.grdMedication().getRows().clear();
		//Should clear even if the new value is null
		
		form.grdJAC().getRows().clear();
		if (voMeds == null)
			return;
		
		form.cmbRequired().setValue(voMeds.getTTARequired());
		//-----------------------------------------------------
		if (form.getMode().equals(FormMode.EDIT))
			form.btnOrderTTO().setVisible(TTORequired.REQUIRED.equals(form.cmbRequired().getValue())?true:false);
		//--------------------------------------------------------
		 if (voMeds.getTTAsIsNotNull() )
		 {
			 	//	WDEV-9537
			 	TTAMedicationVoCollection ttas = voMeds.getTTAs();
			 	ttas.sort(new TTANameCaseInsensitiveComparator<TTAMedicationVo>() );
			 	
			 	for ( int i = 0 ; i < ttas.size() ; i++)
			 	{
			 		TTAMedicationVo voTTA = ttas.get(i);
			
        			grdJACRow row = form.grdJAC().getRows().newRow();
        			row.setColMedication(voTTA.getMedication());
        			//------------------
        			row.setTooltipForColMedication(voTTA.getMedication());
        			//------------------
        			row.setColDose(voTTA.getDoseAmount().toString() + " " + (voTTA.getDoseUnitIsNotNull() ? voTTA.getDoseUnit().toString() : ""));
        			//------------
        			row.setTooltipForColDose(voTTA.getDoseAmount().toString() + " " + (voTTA.getDoseUnitIsNotNull() ? voTTA.getDoseUnit().toString() : ""));
        			//-------------
        			row.setColRoute(voTTA.getRouteIsNotNull() ? voTTA.getRoute().toString() : null);
        			row.setTooltipForColRoute(voTTA.getRouteIsNotNull() ? voTTA.getRoute().toString() : "");
        			row.setColUFreq(voTTA.getFrequency());
        			row.setTooltipForColUFreq(voTTA.getFrequency());
        			row.setColDays(voTTA.getDaysSupply().toString());
        			//------
        			row.setTooltipForColDays(voTTA.getDaysSupply().toString());
        			//----------
        			row.setColGpCont(voTTA.getGpToContinueIsNotNull() ? voTTA.getGpToContinue().toString() : null);
        			//---------------
        			row.setTooltipForColGpCont(voTTA.getGpToContinueIsNotNull() ? voTTA.getGpToContinue().toString() : "");
        			//---------
        			row.setValue(voTTA);
        		
        			
        			form.lblRefreshDateTime().setValue(voTTA.getSysInfoIsNotNull() ? voTTA.getSysInfo().getCreationDateTime().toString() : "");
			 	}
		 }
		//form.grdJAC().sort(0);
		if (voMeds.getAdmissionMedicationChangesIsNotNull())
		{
			//	WDEV-9537
    		AdmissionMedicationChangesVoCollection admissionMedicationChanges = voMeds.getAdmissionMedicationChanges();
    		admissionMedicationChanges.sort(new TTANameCaseInsensitiveComparator<AdmissionMedicationChangesVo>());
    		
    		for ( int i = 0 ;i < admissionMedicationChanges.size() ; i++)
    		{
    			AdmissionMedicationChangesVo voChanges = admissionMedicationChanges.get(i);
    			
    			grdMedicationRow rowMeds = form.grdMedication().getRows().newRow();
    			rowMeds.setcolAdm(voChanges.getMedication());
    			rowMeds.setcolChange(voChanges.getMedicationChanges());
    			rowMeds.setValue(voChanges);
    		}
		//form.grdMedication().sort(0);
		}
		form.txtMedicationRecommendations().setValue(voMeds.getMedicationRecommendations());
	}

	public void initialise() 
	{
		if (form.getLocalContext().getbInitialised() == null)
		{
			initializeComponent();
			open();
			form.getLocalContext().setbInitialised(Boolean.TRUE);
		}
	}

	private void manageReadOnly() 
	{
		if (form.getMode().equals(FormMode.VIEW) )
			form.btnEdit().setVisible(true);

		if (form.getLocalContext().getisReadonlyIsNotNull()
			&& form.getLocalContext().getisReadonly()
			&& form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(false);
	}

	@Override
	protected void onBtnOrderTTOClick() throws PresentationLogicException 
	{
		btnSaveClick();

		JACExecutionHelper JAC = new JACExecutionHelper(engine, form.getGlobalContext().Core.getPatientShort());
		JAC.executeJAC();
	}

	public void setReadOnly() 
	{
		form.getLocalContext().setisReadonly(/*form.getGlobalContext().Clinical.geteDischargeCompleted()*/form.getGlobalContext().Clinical.geteDischargeClinicalComplete());
		
		manageReadOnly();
	}

	//WDEV-8369
	@Override
	protected void onCmbRequiredValueChanged()
			throws PresentationLogicException {
		updateControlStateLblRefreshDateTime();
		
	}
	private void updateControlStateLblRefreshDateTime(){
		form.lblRefreshDateTime().setVisible(TTORequired.NOT_REQUIRED.equals(form.cmbRequired().getValue())?false:true);
		//--------
		if (form.getMode().equals(FormMode.EDIT))
			form.btnOrderTTO().setVisible(TTORequired.REQUIRED.equals(form.cmbRequired().getValue())?true:false);
		//----------
	}
	class TTANameCaseInsensitiveComparator<T> implements Comparator<T>
	{

		public int compare(T o1, T o2)
		{
			return getMedicationName(o1).compareToIgnoreCase(getMedicationName(o2));
		}
		
		private String getMedicationName(T med)
		{
	
			if (med instanceof TTAMedicationVo)
			{	
				TTAMedicationVo ttamed = (TTAMedicationVo) med;
				return ttamed.getMedicationIsNotNull()?ttamed.getMedication():"";
			}
			if (med instanceof AdmissionMedicationChangesVo)
			{
				AdmissionMedicationChangesVo amc = (AdmissionMedicationChangesVo) med;
				return amc.getMedicationIsNotNull()?amc.getMedication():"";
			}
			return "";
		}
	}
}
