//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.vteriskassessment;

import ims.clinical.forms.vteriskassessment.GenForm.ctn1Container.GroupProphylaxisEnumeration;
import ims.clinical.forms.vteriskassessment.GenForm.ctn1Container.GroupRiskEnumeration;
import ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo;
import ims.clinical.vo.VTERiskAssessmentShortVo;
import ims.clinical.vo.VTERiskAssessmentShortVoCollection;
import ims.clinical.vo.VTERiskAssessmentVo;
import ims.clinical.vo.lookups.ProphylaxisOffered;
import ims.clinical.vo.lookups.VTEAsessmentStatus;
import ims.clinical.vo.lookups.VTERiskGroup;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.DischargedEpisodeForVTERiskAssessmentWorklistVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.VTERiskAssessmentWorklistVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		initialize();
		open();
		if(args != null && args.length > 0 && args[0].equals(FormMode.EDIT)) //check if the dialog is opened in edit mode  for a new record or in view mode for view a record or for edit a record 
		{
			newClickInst();
		}
		
	}
	private void open()
	{
		
		VTERiskAssessmentShortVoCollection temVoColl = new VTERiskAssessmentShortVoCollection();
		if(isDialog())
		{
			form.getLocalContext().setReadOnlyForm(Boolean.FALSE);
			if(	form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVoIsNotNull())
			{
				if(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo().getPasEvent() != null)//WDEV-15414 
				{
					temVoColl = domain.listVTERiskAssessByPasId(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo().getPasEvent());
					
					//WDEV-15414 
					if(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo() instanceof VTERiskAssessmentWorklistVo)
					{
						InpatientEpisodeForVTERiskAsessmentVo tempVo = domain.getInpatientEpisodes(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo().getPasEvent());
						form.getLocalContext().setInpatientEpisode(tempVo);
						form.getLocalContext().setDischargeEpisode(null);
					}
					//WDEV-15414 
					else if(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo() instanceof DischargedEpisodeForVTERiskAssessmentWorklistVo)
					{
						DischargedEpisodeForVTERiskAssessmentWorklistVo dis = domain.getDischargeEpisode(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo().getPasEvent());
						form.getLocalContext().setInpatientEpisode(null);
						form.getLocalContext().setDischargeEpisode(dis);
					}
				}
			}
			else	
			{
				temVoColl = domain.listVTERiskAssessments(form.getGlobalContext().Core.getPatientShort()); //wdev-14858
				form.getLocalContext().setInpatientEpisode(null);
				if( form.getGlobalContext().Core.getDischargeEpisodeBedInfoIsNotNull())
					form.getLocalContext().setDischargeEpisode(domain.getDischargedEpisodeForVTERiskAssessmentWorklistVo(form.getGlobalContext().Core.getDischargeEpisodeBedInfo())); //wdev-15414
				else
					form.getLocalContext().setDischargeEpisode(null);//WDEV-15414 
				form.getLocalContext().setReadOnlyForm(Boolean.FALSE);				
			}
		}
		else
		{
			temVoColl = domain.listVTERiskAssessments(form.getGlobalContext().Core.getPatientShort());
			getEpisode();//WDEV-15414 
		
		}
		fillRecordBrowser(temVoColl);
		VTERiskAssessmentShortVo voVTERiskAss = getVTEAssess(form.getLocalContext().getCurrentRecord(),temVoColl);
		if(form.getLocalContext().getCurrentRecordIsNotNull() && voVTERiskAss != null)
		{
			form.recbrVTEAssessment().setValue(voVTERiskAss);
		}
		else
			form.getLocalContext().setCurrentRecord(domain.getVTERiskAssessment(form.recbrVTEAssessment().getValue()));
		
		//wdev-14858
		if(	isDialog() && form.getGlobalContext().Core.getEditVTERiskAssessmentFromInpatientEpisodeIsNotNull() && form.getGlobalContext().Core.getEditVTERiskAssessmentFromInpatientEpisode().equals(Boolean.TRUE)) 
		{
			if(	form.getGlobalContext().Core.getVTERiskAssessmentShortVoIsNotNull())
			{
				form.recbrVTEAssessment().setValue(form.getGlobalContext().Core.getVTERiskAssessmentShortVo());
			}
			else
			{
				if( form.getLocalContext().getInpatientEpisodeIsNotNull() )
				{
					VTERiskAssessmentShortVo tempVoVTE = domain.getVTERiskAssessmentShortVo(form.getLocalContext().getInpatientEpisode());
					if(	tempVoVTE != null)
					{
						form.recbrVTEAssessment().setValue(tempVoVTE);
					}
				}
				//WDEV-15414 
				else if(form.getLocalContext().getDischargeEpisodeIsNotNull())
				{
					VTERiskAssessmentShortVo tempVoVTEByDischarge = domain.getVTERiskAssessmentShortByDischargeEpisode(form.getLocalContext().getDischargeEpisode());
					if(	tempVoVTEByDischarge != null)
					{
						form.recbrVTEAssessment().setValue(tempVoVTEByDischarge);
					}
				}
			}
			form.getLocalContext().setCurrentRecord(domain.getVTERiskAssessment(form.recbrVTEAssessment().getValue()));
			populateScreenFromData(form.getLocalContext().getCurrentRecord());
			if(	form.getLocalContext().getCurrentRecord() == null )
			{
				form.getLocalContext().setCurrentRecord(new VTERiskAssessmentVo());
				form.ccAuthoringInfo().initializeComponent();
			}
			form.getGlobalContext().Core.setEditVTERiskAssessmentFromInpatientEpisode(null);
			form.setMode(FormMode.EDIT);
			return;
		}
			
		populateScreenFromData(form.getLocalContext().getCurrentRecord());
		form.setMode(FormMode.VIEW);
		
	}
	private void getEpisode()//WDEV-15414 
	{
		if( form.getGlobalContext().Core.getCurrentCareContext() == null)
			form.getLocalContext().setReadOnlyForm(Boolean.TRUE);				//the form is redonly
		else
		{
			if(form.getGlobalContext().Core.getCurrentCareContext().getPasEventIsNotNull())
			{
				InpatientEpisodeForVTERiskAsessmentVo tempVo = domain.getInpatientEpisodes(form.getGlobalContext().Core.getCurrentCareContext().getPasEvent());
				if(tempVo != null)
				{
					form.getLocalContext().setInpatientEpisode(tempVo);
					form.getLocalContext().setDischargeEpisode(null);//WDEV-15414 
				}
				else//WDEV-15414 
				{
					DischargedEpisodeForVTERiskAssessmentWorklistVo dis = domain.getDischargeEpisode(form.getGlobalContext().Core.getCurrentCareContext().getPasEvent());
					
					if(dis != null)
					{
						form.getLocalContext().setInpatientEpisode(null);
						form.getLocalContext().setDischargeEpisode(dis);
					}
					else
					{
						form.getLocalContext().setReadOnlyForm(Boolean.TRUE);				//the form is redonly
					}
				}
					
			}
			else
			{
				form.getLocalContext().setReadOnlyForm(Boolean.TRUE);				//the form is redonly
			}		
		}
	}
	private VTERiskAssessmentShortVo getVTEAssess(VTERiskAssessmentVo voVTERiskAss , VTERiskAssessmentShortVoCollection temVoColl)
	{
		if(temVoColl == null)
			return null;
		
		
		for(int i = 0; i < temVoColl.size();i++)
		{
			if(temVoColl.get(i) != null && voVTERiskAss != null)
			{
				if(voVTERiskAss.getID_VTERiskAssessmentIsNotNull() && temVoColl.get(i).getID_VTERiskAssessmentIsNotNull() && voVTERiskAss.getID_VTERiskAssessment().equals( temVoColl.get(i).getID_VTERiskAssessment()))
					return temVoColl.get(i);
			}
		}
		return null;
	}
	private void populateScreenFromData(VTERiskAssessmentVo voVTERiskAss) 
	{
		clearScreen();
		if(voVTERiskAss == null)
			return;
		
		form.ctn1().chkActiveCancer().setValue((voVTERiskAss.getActiveCancer() == null || YesNo.NO.equals(voVTERiskAss.getActiveCancer())) ? Boolean.FALSE:Boolean.TRUE );
		form.ctn1().chkAgeOverSixty().setValue((voVTERiskAss.getAgeOverSixty() == null || YesNo.NO.equals(voVTERiskAss.getAgeOverSixty())) ? Boolean.FALSE:Boolean.TRUE );
		form.ctn1().chkDehydration().setValue((voVTERiskAss.getDehydration() == null || YesNo.NO.equals(voVTERiskAss.getDehydration())) ? Boolean.FALSE:Boolean.TRUE );
		form.ctn1().chkKnownThrombophilias().setValue((voVTERiskAss.getKnownThrombophilias() == null || YesNo.NO.equals(voVTERiskAss.getKnownThrombophilias())) ? Boolean.FALSE:Boolean.TRUE );
		form.ctn1().chkAcquiredBleeding().setValue((voVTERiskAss.getAcquiredBleeding() == null || YesNo.NO.equals(voVTERiskAss.getAcquiredBleeding())) ? Boolean.FALSE:Boolean.TRUE );
		form.ctn1().chkActiveBleeding().setValue((voVTERiskAss.getActiveBleeding() == null || YesNo.NO.equals(voVTERiskAss.getActiveBleeding())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkAcuteStroke().setValue((voVTERiskAss.getAcuteStroke() == null || YesNo.NO.equals(voVTERiskAss.getAcuteStroke())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkAcuteSurgicalAdmission().setValue((voVTERiskAss.getAcuteSurgicalAdmission() == null || YesNo.NO.equals(voVTERiskAss.getAcuteSurgicalAdmission())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkAnaestheticAndSurgery().setValue((voVTERiskAss.getAnaestheticAndSurgery() == null || YesNo.NO.equals(voVTERiskAss.getAnaestheticAndSurgery())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkConcurrentAnticoagulants().setValue((voVTERiskAss.getConcurrentAnticoagulants() == null || YesNo.NO.equals(voVTERiskAss.getConcurrentAnticoagulants())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkCriticalCareAdmission().setValue((voVTERiskAss.getCriticalCareAdmission() == null || YesNo.NO.equals(voVTERiskAss.getCriticalCareAdmission())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkHipFracture().setValue((voVTERiskAss.getHipFracture() == null || YesNo.NO.equals(voVTERiskAss.getHipFracture())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkHipKneeReplacement().setValue((voVTERiskAss.getHipKneeReplacement() == null || YesNo.NO.equals(voVTERiskAss.getHipKneeReplacement())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkHistoryOfVTE().setValue((voVTERiskAss.getHistoryOfVTE() == null || YesNo.NO.equals(voVTERiskAss.getHistoryOfVTE())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkLumbarPuncturePrevious4hrs().setValue((voVTERiskAss.getLumbarPuncturePrevious4hrs() == null || YesNo.NO.equals(voVTERiskAss.getLumbarPuncturePrevious4hrs())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkLumbarPunctureWithinNext12hrs().setValue((voVTERiskAss.getLumbarPunctureWithinNext12hrs() == null || YesNo.NO.equals(voVTERiskAss.getLumbarPunctureWithinNext12hrs())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkNeuroSpinalEyeSurgery().setValue((voVTERiskAss.getNeuroSpinalEyeSurgery() == null || YesNo.NO.equals(voVTERiskAss.getNeuroSpinalEyeSurgery())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkSurgeryIn().setValue((voVTERiskAss.getSurgeryLowerLimbPelvis60mins() == null || YesNo.NO.equals(voVTERiskAss.getSurgeryLowerLimbPelvis60mins())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkObesity().setValue((voVTERiskAss.getObesity() == null || YesNo.NO.equals(voVTERiskAss.getObesity())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkOtherProcedureWithHighBleedingRisk().setValue((voVTERiskAss.getOtherProcedureWithHighBleedingRisk() == null || YesNo.NO.equals(voVTERiskAss.getOtherProcedureWithHighBleedingRisk())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkPregnancy().setValue((voVTERiskAss.getPregnancy() == null || YesNo.NO.equals(voVTERiskAss.getPregnancy())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkReducedMobility().setValue((voVTERiskAss.getReducedMobility() == null || YesNo.NO.equals(voVTERiskAss.getReducedMobility())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkSignificantMorbidities().setValue((voVTERiskAss.getSignificantMorbidities() == null || YesNo.NO.equals(voVTERiskAss.getSignificantMorbidities())) ? Boolean.FALSE:Boolean.TRUE);
		//form.ctn1().chkSurgeryIn().setValue((voVTERiskAss.getSignificantMorbidities() == null || YesNo.NO.equals(voVTERiskAss.getSignificantMorbidities())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkSurgerySignificantMobilityReduction().setValue((voVTERiskAss.getSurgerySignificantMobilityReduction() == null || YesNo.NO.equals(voVTERiskAss.getSurgerySignificantMobilityReduction())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkThrombocytopenia().setValue((voVTERiskAss.getThrombocytopenia() == null || YesNo.NO.equals(voVTERiskAss.getThrombocytopenia())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkUncontrolledHypertension().setValue((voVTERiskAss.getUncontrolledHypertension() == null || YesNo.NO.equals(voVTERiskAss.getUncontrolledHypertension())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkUntreatedBleedingDisorder().setValue((voVTERiskAss.getUntreatedBleedingDisorder() == null || YesNo.NO.equals(voVTERiskAss.getUntreatedBleedingDisorder())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkUseOfHRT().setValue((voVTERiskAss.getUseOfHRT() == null || YesNo.NO.equals(voVTERiskAss.getUseOfHRT())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkUseOfOstogren().setValue((voVTERiskAss.getUseOfOstogren() == null || YesNo.NO.equals(voVTERiskAss.getUseOfOstogren())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkVaricoseVeins().setValue((voVTERiskAss.getVaricoseVeins() == null || YesNo.NO.equals(voVTERiskAss.getVaricoseVeins())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkNotExpectedReducedMobility().setValue((voVTERiskAss.getNotExpectedReducedMobility() == null || YesNo.NO.equals(voVTERiskAss.getNotExpectedReducedMobility())) ? Boolean.FALSE:Boolean.TRUE);
		if( voVTERiskAss.getRiskGroup() != null )
		{
			if(voVTERiskAss.getRiskGroup().equals(VTERiskGroup.HIGH_RISK_LOW_BLEEDING))
				form.ctn1().GroupRisk().setValue(GroupRiskEnumeration.rdoHighRiskWithLowBleeding);
			else if(voVTERiskAss.getRiskGroup().equals(VTERiskGroup.HIGH_RISK_SIGNIFICANT_BLEEDING))
				form.ctn1().GroupRisk().setValue(GroupRiskEnumeration.rdoHighRiskWithSignificantBleeding);
			else
				form.ctn1().GroupRisk().setValue(GroupRiskEnumeration.rdoNoSIgnificantIncrease);
		}
		else
			form.ctn1().GroupRisk().setValue(null);
		
		
		form.ctn1().GroupProphylaxis().setValue(voVTERiskAss.getProphylaxisOfferedIsNotNull() ? (voVTERiskAss.getProphylaxisOffered().equals(ProphylaxisOffered.ANTIEMBOLISM_STOCKINGS_OR_MECHNICAL_DEVICE)? GroupProphylaxisEnumeration.rdoAntiembolismDevice : GroupProphylaxisEnumeration.rdoEnoxaparin) : null);
		
		form.ccAuthoringInfo().setValue(voVTERiskAss.getAuthoringInformation());
		
		if(voVTERiskAss.getCompletedBy() != null )
		{
			form.ccCompletedHCP().setValue(voVTERiskAss.getCompletedBy().getRecordingUser());
			form.dtimCompleted().setValue(voVTERiskAss.getCompletedBy().getRecordingDateTime());
		}
		
		
		if( voVTERiskAss.getCompletedByIsNotNull() && voVTERiskAss.getCompletedBy().getRecordingDateTimeIsNotNull() && voVTERiskAss.getCompletedBy().getRecordingUserIsNotNull())
		{
			form.chkComplete().setValue(true);
			enabledisableControls(false);
			if( form.getMode().equals(FormMode.VIEW))		//wdev-16034
				form.btnNew().setEnabled(true);
			
		}
		else
		{
			form.chkComplete().setValue(false);
			enabledisableControls(true);
			
		}
		if(!isDialog() && Boolean.TRUE.equals(form.getLocalContext().getReadOnlyForm()))
		{
			enabledisableControls(false);
		}
		
		
	}
	private void clearScreen()
	{
		clearDetailsControls();
		form.chkComplete().setValue(null);
		form.ccAuthoringInfo().setValue(null);
		
		form.ccCompletedHCP().clear();
		form.dtimCompleted().setValue(null);
		form.ctn1().chkNotExpectedReducedMobility().setValue(null);
	}
	private void clearDetailsControls()
	{
		form.ctn1().chkActiveCancer().setValue(null);
		form.ctn1().chkAgeOverSixty().setValue(null);
		form.ctn1().chkDehydration().setValue(null);
		form.ctn1().chkKnownThrombophilias().setValue(null);
		form.ctn1().chkAcquiredBleeding().setValue(null);
		form.ctn1().chkActiveBleeding().setValue(null);
		form.ctn1().chkAcuteStroke().setValue(null);
		form.ctn1().chkAcuteSurgicalAdmission().setValue(null);
		form.ctn1().chkAnaestheticAndSurgery().setValue(null);
		form.ctn1().chkConcurrentAnticoagulants().setValue(null);
		form.ctn1().chkCriticalCareAdmission().setValue(null);
		form.ctn1().chkHipFracture().setValue(null);
		form.ctn1().chkHipKneeReplacement().setValue(null);
		form.ctn1().chkHistoryOfVTE().setValue(null);
		form.ctn1().chkLumbarPuncturePrevious4hrs().setValue(null);
		form.ctn1().chkLumbarPunctureWithinNext12hrs().setValue(null);
		form.ctn1().chkNeuroSpinalEyeSurgery().setValue(null);
		form.ctn1().chkSurgeryIn().setValue(null);
		form.ctn1().chkObesity().setValue(null);
		form.ctn1().chkOtherProcedureWithHighBleedingRisk().setValue(null);
		form.ctn1().chkPregnancy().setValue(null);
		form.ctn1().chkReducedMobility().setValue(null);
		form.ctn1().chkSignificantMorbidities().setValue(null);
		form.ctn1().chkSurgeryIn().setValue(null);
		form.ctn1().chkSurgerySignificantMobilityReduction().setValue(null);
		form.ctn1().chkThrombocytopenia().setValue(null);
		form.ctn1().chkUncontrolledHypertension().setValue(null);
		form.ctn1().chkUntreatedBleedingDisorder().setValue(null);
		form.ctn1().chkUseOfHRT().setValue(null);
		form.ctn1().chkUseOfOstogren().setValue(null);
		form.ctn1().chkVaricoseVeins().setValue(null);
		form.ctn1().GroupRisk().setValue(null);
		form.ctn1().GroupProphylaxis().setValue(null);
	}
	private void fillRecordBrowser(VTERiskAssessmentShortVoCollection collVTERisk)
	{
		form.recbrVTEAssessment().clear();
		if(collVTERisk == null)
			return;
				
		for(int i=0; i<collVTERisk.size(); i++)
		{
			VTERiskAssessmentShortVo voVTERiskAssShort =  collVTERisk.get(i); 
			if(voVTERiskAssShort != null)
			{
				String strDateTime = (voVTERiskAssShort.getRecordingInformationIsNotNull() && voVTERiskAssShort.getRecordingInformation().getRecordingDateTimeIsNotNull() ) ? voVTERiskAssShort.getRecordingInformation().getRecordingDateTime().toString():"";
				String strUserName = (voVTERiskAssShort.getRecordingInformationIsNotNull()  &&  voVTERiskAssShort.getRecordingInformation().getRecordingUserIsNotNull()) ? " - " + voVTERiskAssShort.getRecordingInformation().getRecordingUser().toString():"";
				
				if( form.getLocalContext().getInpatientEpisode() != null && form.getLocalContext().getInpatientEpisode().getVTERiskAssessmentIsNotNull() && voVTERiskAssShort.equals(form.getLocalContext().getInpatientEpisode().getVTERiskAssessment()))
				{					
					form.recbrVTEAssessment().newRow(voVTERiskAssShort,  strDateTime + strUserName ,Color.Green);
				}
				//WDEV-15414 
				else if(form.getLocalContext().getDischargeEpisode() != null && form.getLocalContext().getDischargeEpisode().getVTERiskAssessmentIsNotNull() && voVTERiskAssShort.equals(form.getLocalContext().getDischargeEpisode().getVTERiskAssessment()))
				{
					form.recbrVTEAssessment().newRow(voVTERiskAssShort,  strDateTime + strUserName ,Color.Green);
				}
				else
				{					 
					form.recbrVTEAssessment().newRow(voVTERiskAssShort,   strDateTime + strUserName );
				}
			}
			
		}
		
	}
	private boolean isDialog()
	{
		return engine.isDialog();
	}
	private void initialize()
	{
		form.ccAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);
		
		form.getLocalContext().setReadOnlyForm(Boolean.FALSE);
		form.getLocalContext().setCurrentRecord(null);
		form.ccCompletedHCP().initialize(MosType.HCP);
		form.ccCompletedHCP().isRequired(true);
		form.ccCompletedHCP().setVisible(Boolean.FALSE);
		form.dtimCompleted().setVisible(Boolean.FALSE);
		
		form.getLocalContext().setInpatientEpisode(null);
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		form.getLocalContext().setCurrentRecord(null);
		open();
		updateControlsState();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	private boolean save()
	{
		//wdev-16758
		String[] errors1 = validateUIRules();
		if (errors1 != null && errors1.length != 0)
		{
			engine.showErrors(errors1);
			return false;
		}
		//-------------
		
		VTERiskAssessmentVo voVTERiskAss = form.getLocalContext().getCurrentRecord();
		voVTERiskAss = populateDataFromScreen(voVTERiskAss);
		String[] errors = voVTERiskAss.validate(validateUIRules());
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}
		if(	voVTERiskAss.getID_VTERiskAssessment() == null && VTEAsessmentStatus.INPROGRESS.equals(voVTERiskAss.getVTEAssessmentStatus()))
		{
			if(form.getLocalContext().getInpatientEpisode() != null && form.getLocalContext().getInpatientEpisode().getPasEventIsNotNull())
			{
				VTERiskAssessmentVo voVTERiskAssTemp = domain.getInProgressVTERiskAsessment(form.getLocalContext().getInpatientEpisode().getPasEvent());
				if(voVTERiskAssTemp != null)
				{
					engine.showMessage("A VTE Risk Assessment record with status In Progress already exists");
					return false;
				}
			}
			//WDEV-15414 
			else if(form.getLocalContext().getDischargeEpisode() != null && form.getLocalContext().getDischargeEpisode().getPasEventIsNotNull())
			{
				VTERiskAssessmentVo voVTERiskAssTemp = domain.getInProgressVTERiskAssessmentFromDischargeEpisode(form.getLocalContext().getDischargeEpisode().getPasEvent());
				if(voVTERiskAssTemp != null)
				{
					engine.showMessage("A VTE Risk Assessment record with status In Progress already exists");
					return false;
				}
			}
		}
		try 
		{
			voVTERiskAss = domain.saveVTERiskAssess(voVTERiskAss, form.getLocalContext().getInpatientEpisode(), form.getLocalContext().getDischargeEpisode());//WDEV-15414 
			form.getLocalContext().setCurrentRecord(voVTERiskAss);
		} 	
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCurrentRecord(null);
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		//wdev-14858
		
		if( form.getGlobalContext().Core.getVTERiskAssessmentShortVoIsNotNull() && form.getGlobalContext().Core.getVTERiskAssessmentShortVo().getID_VTERiskAssessment() == null)
		{
			form.getGlobalContext().Core.setVTERiskAssessmentShortVo(domain.getVTERiskAssessmentShortVo(voVTERiskAss));	
		}
		
		if(	! isDialog() && form.getGlobalContext().Core.getCreateVTERiskAssessmentOnDischargeIsNotNull() && form.getGlobalContext().Core.getCreateVTERiskAssessmentOnDischarge().equals(Boolean.TRUE) && Boolean.TRUE.equals(form.chkComplete().getValue())) //WDEV-16200 added "! isDialog()"
			form.getGlobalContext().Core.setCreateVTERiskAssessmentOnDischarge(Boolean.FALSE);
		//-----------
		return true;

	}
	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		//wdev-16758
		if( form.ccAuthoringInfo() == null || form.ccAuthoringInfo().getValue() == null || form.ccAuthoringInfo().getValue().getAuthoringDateTime() == null || form.ccAuthoringInfo().getValue().getAuthoringHcp() == null)
		{
			uiErrors.add(" Authoring HCP and Authoring Date/Time are mandatory.");
		}
		
		//-------------
		if(form.chkComplete().getValue() == true)
		{
			if(form.ccCompletedHCP().getValue() == null)
				uiErrors.add("Completing HCP is mandatory.");
			else if(form.dtimCompleted().getValue() == null)
				uiErrors.add("Completed Date/Time is mandatory.");
						
		}
		if(form.ccAuthoringInfo() != null && form.ccAuthoringInfo().getValue() != null && form.ccAuthoringInfo().getValue().getAuthoringDateTime() != null && form.chkComplete().getValue() == true && form.ccCompletedHCP().getValue() != null && form.dtimCompleted().getValue() != null )
		{
			//WDEV-16719
			if ((form.ccAuthoringInfo().getValue().getAuthoringDateTime().getDate().isGreaterThan(form.dtimCompleted().getValue().getDate()) || (form.ccAuthoringInfo().getValue().getAuthoringDateTime().getDate().equals(form.dtimCompleted().getValue().getDate()) && form.ccAuthoringInfo().getValue().getAuthoringDateTime().getTime().isGreaterThan(form.dtimCompleted().getValue().getTime()))))
			{
				uiErrors.add("Completed Date/Time cannot be before Authoring Date/Time.");
			}
		}

		
		String[] result = new String[uiErrors.size()];
		uiErrors.toArray(result);
		return result;
	}
	private VTERiskAssessmentVo populateDataFromScreen(VTERiskAssessmentVo voVTERiskAss)
	{
		if(voVTERiskAss == null)
			voVTERiskAss = new VTERiskAssessmentVo();
		if( form.ctn1().chkNotExpectedReducedMobility().getValue())
			voVTERiskAss.setNotExpectedReducedMobility(YesNo.YES);
		else
			voVTERiskAss.setNotExpectedReducedMobility(YesNo.NO);
		
		if( form.ctn1().chkActiveCancer().getValue())
			voVTERiskAss.setActiveCancer(YesNo.YES);
		else
			voVTERiskAss.setActiveCancer(YesNo.NO);
		
		if( form.ctn1().chkAgeOverSixty().getValue())
			voVTERiskAss.setAgeOverSixty(YesNo.YES);
		else
			voVTERiskAss.setAgeOverSixty(YesNo.NO);
		
		if( form.ctn1().chkDehydration().getValue())
			voVTERiskAss.setDehydration(YesNo.YES);
		else
			voVTERiskAss.setDehydration(YesNo.NO);
		
		if( form.ctn1().chkKnownThrombophilias().getValue())
			voVTERiskAss.setKnownThrombophilias(YesNo.YES);
		else
			voVTERiskAss.setKnownThrombophilias(YesNo.NO);
		
		if( form.ctn1().chkAcquiredBleeding().getValue())
			voVTERiskAss.setAcquiredBleeding(YesNo.YES);
		else
			voVTERiskAss.setAcquiredBleeding(YesNo.NO);
		
		if( form.ctn1().chkActiveBleeding().getValue())
			voVTERiskAss.setActiveBleeding(YesNo.YES);
		else
			voVTERiskAss.setActiveBleeding(YesNo.NO);
		
		if( form.ctn1().chkAcuteStroke().getValue())
			voVTERiskAss.setAcuteStroke(YesNo.YES);
		else
			voVTERiskAss.setAcuteStroke(YesNo.NO);
		
		if( form.ctn1().chkAcuteSurgicalAdmission().getValue())
			voVTERiskAss.setAcuteSurgicalAdmission(YesNo.YES);
		else
			voVTERiskAss.setAcuteSurgicalAdmission(YesNo.NO);
		
				
		voVTERiskAss.setAnaestheticAndSurgery(form.ctn1().chkAnaestheticAndSurgery().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setConcurrentAnticoagulants(form.ctn1().chkConcurrentAnticoagulants().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setCriticalCareAdmission(form.ctn1().chkCriticalCareAdmission().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setHipFracture(form.ctn1().chkHipFracture().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setHipKneeReplacement(form.ctn1().chkHipKneeReplacement().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setHistoryOfVTE(form.ctn1().chkHistoryOfVTE().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setLumbarPuncturePrevious4hrs(form.ctn1().chkLumbarPuncturePrevious4hrs().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setLumbarPunctureWithinNext12hrs(form.ctn1().chkLumbarPunctureWithinNext12hrs().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setNeuroSpinalEyeSurgery(form.ctn1().chkNeuroSpinalEyeSurgery().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setSurgeryLowerLimbPelvis60mins(form.ctn1().chkSurgeryIn().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setObesity(form.ctn1().chkObesity().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setOtherProcedureWithHighBleedingRisk(form.ctn1().chkOtherProcedureWithHighBleedingRisk().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setPregnancy(form.ctn1().chkPregnancy().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setReducedMobility(form.ctn1().chkReducedMobility().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setSignificantMorbidities(form.ctn1().chkSignificantMorbidities().getValue() == true ? YesNo.YES:YesNo.NO);
		
		voVTERiskAss.setSurgerySignificantMobilityReduction(form.ctn1().chkSurgerySignificantMobilityReduction().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setThrombocytopenia(form.ctn1().chkThrombocytopenia().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setUncontrolledHypertension(form.ctn1().chkUncontrolledHypertension().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setUntreatedBleedingDisorder(form.ctn1().chkUntreatedBleedingDisorder().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setUseOfHRT(form.ctn1().chkUseOfHRT().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setUseOfOstogren(form.ctn1().chkUseOfOstogren().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setVaricoseVeins(form.ctn1().chkVaricoseVeins().getValue() == true ? YesNo.YES:YesNo.NO);
		
		if(form.ctn1().GroupRisk().getValue() != null && form.ctn1().GroupRisk().getValue().equals(GroupRiskEnumeration.rdoHighRiskWithLowBleeding) )
			voVTERiskAss.setRiskGroup(VTERiskGroup.HIGH_RISK_LOW_BLEEDING);
		else if(form.ctn1().GroupRisk().getValue() != null && form.ctn1().GroupRisk().getValue().equals(GroupRiskEnumeration.rdoHighRiskWithSignificantBleeding))
			voVTERiskAss.setRiskGroup(VTERiskGroup.HIGH_RISK_SIGNIFICANT_BLEEDING);
		else if ( form.ctn1().GroupRisk().getValue() != null && form.ctn1().GroupRisk().getValue().equals(GroupRiskEnumeration.rdoNoSIgnificantIncrease) )
			voVTERiskAss.setRiskGroup(VTERiskGroup.NO_SIGNIFICANT_INCREASE);
		else
			voVTERiskAss.setRiskGroup(null);
		
		if( form.ctn1().GroupProphylaxis().getValue() != null && form.ctn1().GroupProphylaxis().getValue().equals(GroupProphylaxisEnumeration.rdoAntiembolismDevice) )
			voVTERiskAss.setProphylaxisOffered(ProphylaxisOffered.ANTIEMBOLISM_STOCKINGS_OR_MECHNICAL_DEVICE);
		else if(form.ctn1().GroupProphylaxis().getValue() != null && form.ctn1().GroupProphylaxis().getValue().equals(GroupProphylaxisEnumeration.rdoEnoxaparin))
			voVTERiskAss.setProphylaxisOffered(ProphylaxisOffered.ENOXAPARIN);
		else
			voVTERiskAss.setProphylaxisOffered(null);
		
		if(voVTERiskAss.getID_VTERiskAssessment() == null)  //new record
		{
			RecordingUserInformationVo recUserInf = new RecordingUserInformationVo();
			MemberOfStaffShortVo tempVo = null;
			
			if(domain.getMosUser() instanceof MemberOfStaffShortVo)
			{
				tempVo = (MemberOfStaffShortVo) domain.getMosUser();
				recUserInf.setRecordingUser(tempVo);
			}
			recUserInf.setRecordingDateTime(new DateTime());
			voVTERiskAss.setRecordingInformation(recUserInf);
		}
		AuthoringInformationVo authoringInfo  = form.ccAuthoringInfo().getValue();
		voVTERiskAss.setAuthoringInformation(authoringInfo);
		
		voVTERiskAss.setPatient(form.getGlobalContext().Core.getPatientShort());
		if( voVTERiskAss.getCareContext() == null)
		{
			if(isDialog())
			{
				if( form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVoIsNotNull() && form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo().getPasEvent() != null)//WDEV-15414 
				{
					voVTERiskAss.setCareContext(domain.getCareContextByPasEventId(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo().getPasEvent()));
				}
				if(	form.getGlobalContext().Core.getCreateVTERiskAssessmentOnDischargeIsNotNull() && form.getGlobalContext().Core.getCreateVTERiskAssessmentOnDischarge().equals(Boolean.TRUE)) //wdev-14858
				{
					voVTERiskAss.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				}
			}
			else
			{
				voVTERiskAss.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			}
		}
		
		
		
		
		if( form.chkComplete().getValue() == true)
		{
			voVTERiskAss.setVTEAssessmentStatus(VTEAsessmentStatus.COMPLETED);
			RecordingUserInformationVo recUserInf = new RecordingUserInformationVo();
			
			IMos completingHCP = form.ccCompletedHCP().getValue();
			
			if (completingHCP instanceof HcpLiteVo)
				recUserInf.setRecordingUser(((HcpLiteVo)form.ccCompletedHCP().getValue()).getMos());
			else if (completingHCP instanceof MemberOfStaffLiteVo)
				recUserInf.setRecordingUser((MemberOfStaffLiteVo) completingHCP);
			else if (completingHCP == null)
				recUserInf.setRecordingUser(null);
				
			recUserInf.setRecordingDateTime(form.dtimCompleted().getValue());
			voVTERiskAss.setCompletedBy(recUserInf);
		}
		else
			voVTERiskAss.setVTEAssessmentStatus(VTEAsessmentStatus.INPROGRESS);
		
		
		return voVTERiskAss;
	}
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newClickInst();
	}
	private void newClickInst()
	{
		clearScreen();
		form.getLocalContext().setCurrentRecord(new VTERiskAssessmentVo());
		form.ccAuthoringInfo().initializeComponent();
		form.setMode(FormMode.EDIT);
	}
	protected void onChkCompleteValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.chkComplete().getValue())
		{
			Object hcp = domain.getHcpLiteUser();
			if(hcp instanceof HcpLiteVo)
			{
				form.ccCompletedHCP().setValue(((HcpLiteVo) hcp).getMos());
			}
			
			form.dtimCompleted().setValue(new DateTime());
		}
		else
		{
			form.ccCompletedHCP().setValue(null);
			form.dtimCompleted().setValue(null);
		}
		
		CompleteValueChanged();
	}
	
	protected void onChkNotExpectedReducedMobilityValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.ctn1().chkNotExpectedReducedMobility().getValue() == false)
			enableDisableDetailsComntrols(true);
		else
		{
			enableDisableDetailsComntrols(false);
			clearDetailsControls();
		}
	}
	private void CompleteValueChanged()
	{
		if(form.chkComplete().getValue())
		{
			form.ccCompletedHCP().setVisible(Boolean.TRUE);
			form.dtimCompleted().setVisible(Boolean.TRUE);
			form.ccCompletedHCP().setEnabled(Boolean.TRUE);
			form.dtimCompleted().setEnabled(Boolean.TRUE);
			form.lbl74().setVisible(Boolean.TRUE);
			form.lbl75().setVisible(Boolean.TRUE);
		}
		else
		{
			form.ccCompletedHCP().setVisible(Boolean.FALSE);
			form.dtimCompleted().setVisible(Boolean.FALSE);
			form.lbl74().setVisible(Boolean.FALSE);
			form.lbl75().setVisible(Boolean.FALSE);
		}
		
	}
	private void updateControlsState()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.btnClose().setVisible(false);
			form.btnRIE().setVisible(false);
			if(form.chkComplete().getValue() == true)
			{
				form.chkComplete().setEnabled(false);
				form.ctn1().chkNotExpectedReducedMobility().setEnabled(true);
				enableDisableDetailsComntrols(true);
				
				form.ccCompletedHCP().setEnabled(Boolean.TRUE);
				form.dtimCompleted().setEnabled(Boolean.TRUE);
				form.lbl74().setVisible(Boolean.TRUE);
				form.lbl75().setVisible(Boolean.TRUE);
				form.ccAuthoringInfo().setEnabledAuthoringHCP(Boolean.TRUE);
				form.ccAuthoringInfo().setEnabledDateTime(Boolean.TRUE);				
			}
			else
			{
				
				form.ccCompletedHCP().setVisible(Boolean.FALSE);
				form.dtimCompleted().setVisible(Boolean.FALSE);
				form.lbl74().setVisible(Boolean.FALSE);
				form.lbl75().setVisible(Boolean.FALSE);
				form.ccAuthoringInfo().setEnabledAuthoringHCP(Boolean.TRUE);
				form.ccAuthoringInfo().setEnabledDateTime(Boolean.TRUE);
				
				form.chkComplete().setEnabled(true);
				form.ctn1().chkNotExpectedReducedMobility().setEnabled(true);
				if(form.ctn1().chkNotExpectedReducedMobility().getValue() == false)
					enableDisableDetailsComntrols(true);
				else
					enableDisableDetailsComntrols(false);
			}
		}
		else
		{
			
			form.btnClose().setVisible(isDialog());
								
			form.btnRIE().setVisible(!engine.isRIEMode());
			if(Boolean.TRUE.equals(form.getLocalContext().getReadOnlyForm()))
			{
				showNewEditButtons();
				CompleteValueChanged();
				enabledisableControls(false);
				
				
			}
			else
			{
				
				showNewEditButtons();
				enabledisableControls(false);
				if( form.getMode().equals(FormMode.VIEW))		//wdev-16034
					form.btnNew().setEnabled(true);
				
				form.btnClose().setEnabled(true);
				form.btnRIE().setEnabled(form.getLocalContext().getCurrentRecordIsNotNull());
								
				if(form.chkComplete().getValue())
				{
					form.ccCompletedHCP().setVisible(Boolean.TRUE);
					form.dtimCompleted().setVisible(Boolean.TRUE);
					form.ccCompletedHCP().setEnabled(Boolean.FALSE);
					form.dtimCompleted().setEnabled(Boolean.FALSE);
					form.lbl74().setVisible(Boolean.TRUE);
					form.lbl75().setVisible(Boolean.TRUE);
					if( form.getMode().equals(FormMode.VIEW))		//wdev-16034
						form.btnEdit().setEnabled(false);
				}
				else
				{
					form.ccCompletedHCP().setVisible(Boolean.FALSE);
					form.dtimCompleted().setVisible(Boolean.FALSE);
					form.lbl74().setVisible(Boolean.FALSE);
					form.lbl75().setVisible(Boolean.FALSE);
					if( form.getMode().equals(FormMode.VIEW))		//wdev-16034
						form.btnEdit().setEnabled(form.getLocalContext().getCurrentRecordIsNotNull());
				}
				form.ccAuthoringInfo().setEnabledAuthoringHCP(Boolean.FALSE);
				form.ccAuthoringInfo().setEnabledDateTime(Boolean.FALSE);
			}
			
		}
	}
	private void enabledisableNewEditButtons(Boolean enbl)
	{
		if( form.getMode().equals(FormMode.VIEW))		//wdev-16034
		{
			form.btnNew().setEnabled(enbl);
			form.btnEdit().setEnabled(enbl);
		}
	}
	private void showNewEditButtons()
	{
		form.btnNew().setVisible(true);
		form.btnEdit().setVisible(true);
	}
	private void enableDisableDetailsComntrols(Boolean param)
	{
		
		form.ctn1().chkActiveCancer().setEnabled(param);
		form.ctn1().chkAgeOverSixty().setEnabled(param);
		form.ctn1().chkDehydration().setEnabled(param);
		form.ctn1().chkKnownThrombophilias().setEnabled(param);
		form.ctn1().chkAcquiredBleeding().setEnabled(param);
		form.ctn1().chkActiveBleeding().setEnabled(param);
		form.ctn1().chkAcuteStroke().setEnabled(param);
		form.ctn1().chkAcuteSurgicalAdmission().setEnabled(param);
		form.ctn1().chkAnaestheticAndSurgery().setEnabled(param);
		form.ctn1().chkConcurrentAnticoagulants().setEnabled(param);
		form.ctn1().chkCriticalCareAdmission().setEnabled(param);
		form.ctn1().chkHipFracture().setEnabled(param);
		form.ctn1().chkHipKneeReplacement().setEnabled(param);
		form.ctn1().chkHistoryOfVTE().setEnabled(param);
		form.ctn1().chkLumbarPuncturePrevious4hrs().setEnabled(param);
		form.ctn1().chkLumbarPunctureWithinNext12hrs().setEnabled(param);
		form.ctn1().chkNeuroSpinalEyeSurgery().setEnabled(param);
		
		form.ctn1().chkSurgeryIn().setEnabled(param);
		
		form.ctn1().chkObesity().setEnabled(param);
		form.ctn1().chkOtherProcedureWithHighBleedingRisk().setEnabled(param);
		form.ctn1().chkPregnancy().setEnabled(param);
		form.ctn1().chkReducedMobility().setEnabled(param);
		form.ctn1().chkSignificantMorbidities().setEnabled(param);
		form.ctn1().chkSurgeryIn().setEnabled(param);
		form.ctn1().chkSurgerySignificantMobilityReduction().setEnabled(param);
		form.ctn1().chkThrombocytopenia().setEnabled(param);
		form.ctn1().chkUncontrolledHypertension().setEnabled(param);
		form.ctn1().chkUntreatedBleedingDisorder().setEnabled(param);
		form.ctn1().chkUseOfHRT().setEnabled(param);
		form.ctn1().chkUseOfOstogren().setEnabled(param);
		form.ctn1().chkVaricoseVeins().setEnabled(param);
		form.ctn1().GroupRisk().setEnabled(param);
		form.ctn1().GroupProphylaxis().setEnabled(param);
		
	}
	private void enabledisableControls(Boolean param)
	{
		
		form.ccCompletedHCP().setEnabled(param);
		form.dtimCompleted().setEnabled(param);
		form.ccAuthoringInfo().setEnabledAuthoringHCP(param);
		form.ccAuthoringInfo().setEnabledDateTime(param);
		if( form.getMode().equals(FormMode.EDIT))	//wdev-16034
			form.chkComplete().setEnabled(param);
		form.ctn1().chkNotExpectedReducedMobility().setEnabled(param);
		form.btnClose().setEnabled(param);
		form.btnRIE().setEnabled(param);
		enabledisableNewEditButtons(param);
		enableDisableDetailsComntrols(param);
	}
	

	
	protected void onFormModeChanged() 
	{
		updateControlsState();
		
	}
	
	protected void onRecbrVTEAssessmentValueChanged() throws PresentationLogicException 
	{
		form.getLocalContext().setCurrentRecord(domain.getVTERiskAssessment(form.recbrVTEAssessment().getValue()));
		populateScreenFromData(form.getLocalContext().getCurrentRecord());
		updateControlsState();
		
	}
	
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.OK);
		
	}
	
	protected void onBtnRIEClick() throws PresentationLogicException 
	{
		if(form.getLocalContext().getCurrentRecord() == null)
			return;
				
		engine.open(form.getForms().Core.RieConfirmationDialog);
		
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result)	throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			doRIE();
		}
		
		
	}
	private void doRIE()
	{
		if(form.getLocalContext().getCurrentRecordIsNotNull())
		{
			try
			{
				if(isDialog())
				{
					domain.markAsRie(form.getLocalContext().getCurrentRecord(), form.getForms().Clinical.VTERiskAssessmentDialog,  
						form.getGlobalContext().Core.getPatientShort().getID_Patient(), null,
						form.getGlobalContext().Core.getCurrentCareContextIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext():null,
						form.getGlobalContext().Core.getRieMessage());
				}
				else
				{
					domain.markAsRie(form.getLocalContext().getCurrentRecord(), form.getForms().Clinical.VTERiskAssessment,  
							form.getGlobalContext().Core.getPatientShort().getID_Patient(), null,
							form.getGlobalContext().Core.getCurrentCareContextIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext():null,
							form.getGlobalContext().Core.getRieMessage());
				}
			}
			catch (StaleObjectException e)
			{
				engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
			catch (UnqViolationUncheckedException e)
			{
				engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
			InpatientEpisodeForVTERiskAsessmentVo tempVo = form.getLocalContext().getInpatientEpisode();
			
			if(tempVo != null  && tempVo.getVTEAssessmentStatus() != null && form.getLocalContext().getCurrentRecord().equals(tempVo.getVTERiskAssessment()))// 	WDEV-16026
			{
				tempVo.setVTEAssessmentStatus(VTEAsessmentStatus.REQUIRED);
				tempVo.setVTERiskAssessment(null);
				try 
				{
					domain.saveInpatientEpisode(tempVo);
				} 
				catch (StaleObjectException e) 
				{
					engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
				} 
				catch (UniqueKeyViolationException e) 
				{
					engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
				}
			}
			//WDEV-15414 
			else if(form.getLocalContext().getDischargeEpisode() != null && form.getLocalContext().getDischargeEpisode().getVTEAssessmentStatus() != null && form.getLocalContext().getCurrentRecord().equals(form.getLocalContext().getDischargeEpisode().getVTERiskAssessment()))// 	WDEV-16026
			{
				form.getLocalContext().getDischargeEpisode().setVTEAssessmentStatus(VTEAsessmentStatus.REQUIRED);
				form.getLocalContext().getDischargeEpisode().setVTERiskAssessment(null);
				
				String[] errors = form.getLocalContext().getDischargeEpisode().validate();
				
				if(errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					open();
					return;
				}
				
				try 
				{
					domain.saveDischargeEpisode(form.getLocalContext().getDischargeEpisode());
				} 
				catch (StaleObjectException e) 
				{
					e.printStackTrace();
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				} 
				catch (UniqueKeyViolationException e) 
				{
					e.printStackTrace();
					engine.showMessage(e.getMessage());
				}
			}
			
			form.getLocalContext().setCurrentRecord(null);
		}
		
		open();		
	}
	
	protected void onRIEDialogClosed(DialogResult result) throws PresentationLogicException 
	{
		if(DialogResult.OK.equals(result))	//wdev-14955
		{
			if(form.getLocalContext().getCurrentRecordIsNotNull())
			{
				InpatientEpisodeForVTERiskAsessmentVo tempVo = form.getLocalContext().getInpatientEpisode();
				
				if(tempVo != null  && form.getLocalContext().getCurrentRecord().equals(tempVo.getVTERiskAssessment()))
				{
					tempVo.setVTEAssessmentStatus(VTEAsessmentStatus.REQUIRED);
					tempVo.setVTERiskAssessment(null);
					try 
					{
						domain.saveInpatientEpisode(tempVo);
					} 
					catch (StaleObjectException e) 
					{
						engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
					} 
					catch (UniqueKeyViolationException e) 
					{
						engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
					}
					form.getLocalContext().setCurrentRecord(null);
				}
				//WDEV-15414 
				else if(form.getLocalContext().getDischargeEpisode() != null  && form.getLocalContext().getCurrentRecord().equals(form.getLocalContext().getDischargeEpisode().getVTERiskAssessment()))
				{
					form.getLocalContext().getDischargeEpisode().setVTEAssessmentStatus(VTEAsessmentStatus.REQUIRED);
					form.getLocalContext().getDischargeEpisode().setVTERiskAssessment(null);
					
					String[] errors = form.getLocalContext().getDischargeEpisode().validate();
					
					if(errors != null && errors.length > 0)
					{
						engine.showErrors(errors);
						open();
						return;
					}
					
					try 
					{
						domain.saveDischargeEpisode(form.getLocalContext().getDischargeEpisode());
					} 
					catch (StaleObjectException e) 
					{
						e.printStackTrace();
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					} 
					catch (UniqueKeyViolationException e) 
					{
						e.printStackTrace();
						engine.showMessage(e.getMessage());
					}
				}
				
			}
		}
		
	}	
}
