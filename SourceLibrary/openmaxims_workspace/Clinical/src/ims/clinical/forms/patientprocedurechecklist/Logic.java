//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.53 build 2641.19803)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.patientprocedurechecklist;

import java.util.ArrayList;
import ims.clinical.forms.patientprocedurechecklist.GenForm.grdChecklistRow;
import ims.clinical.vo.PatientAbsentProcedureVo;
import ims.clinical.vo.PatientAbsentProcedureVoCollection;
import ims.clinical.vo.PatientProcedureChecklistVo;
import ims.clinical.vo.ProcedureListVo;
import ims.clinical.vo.ProcedureListVoCollection;
import ims.clinical.vo.lookups.PresentAbsentUnknown;
import ims.core.vo.PatientProcedureShortListVo;
import ims.core.vo.PatientProcedureShortListVoCollection;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.PatientProcedureVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ProcedureVo;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws PresentationLogicException 
	{
		open();
	}

	private void open() 
	{
		resetContextVariables();		
		clearControls();
		PatientProcedureChecklistVo patientProcedureChecklistVo = domain.getPatientProcedureChecklistVo(form.getGlobalContext().Core.getCurrentClinicalContact());
		populateInstanceControls(patientProcedureChecklistVo);
		
		form.setMode(FormMode.VIEW);
		
		if(engine.getFormName().equals(form.getForms().Clinical.PatientProcedureChecklistDialog))
			form.btnClose().setVisible(true);
		else
			form.btnClose().setVisible(false);
	}
	
	private void populateInstanceControls(PatientProcedureChecklistVo patientProcedureChecklistVo) 
	{
		if (patientProcedureChecklistVo == null) return;
		
		form.getLocalContext().setPatientProcedureChecklistVo(patientProcedureChecklistVo);
		
		if (patientProcedureChecklistVo.getAuthoringInformationIsNotNull())
			form.customControlAuthoringInfo().setValue(patientProcedureChecklistVo.getAuthoringInformation());
	
		if (patientProcedureChecklistVo.getPresentProceduresIsNotNull())
			populatePresentProceduresControls(patientProcedureChecklistVo.getPresentProcedures());
		
		if (patientProcedureChecklistVo.getOtherProceduresIsNotNull())
			populateOtherProceduresControls(patientProcedureChecklistVo.getOtherProcedures());	
	}

	private void populatePresentProceduresControls(PatientProcedureVoCollection presentProcedures) 
	{
		for (int i=0; i < presentProcedures.size(); i++){
			
			PatientProcedureVo voPatientProcedure = presentProcedures.get(i);
			grdChecklistRow row = form.grdChecklist().getRows().newRow();
			
			if(voPatientProcedure.getProcedureIsNotNull())
			{
				row.setColProcedure(voPatientProcedure.getProcedure().getProcedureName());
			}
			row.setColPresentAbsent(PresentAbsentUnknown.PRESENT);
			if(voPatientProcedure.getInfoSourceIsNotNull())
				row.setColSource(voPatientProcedure.getInfoSource());
			
			if(voPatientProcedure.getProcDateIsNotNull())
				row.setColProcedureDate(voPatientProcedure.getProcDate());
			
			if(voPatientProcedure.getProcedureDescriptionIsNotNull())
				row.setColDescription(voPatientProcedure.getProcedureDescription());
			
			row.setValue(voPatientProcedure);
			
			setGridUIForPresent(row); 
		}
	}
	
	private void populateOtherProceduresControls(PatientAbsentProcedureVoCollection otherProcedures) 
	{
		for (int i=0; i < otherProcedures.size(); i++)
		{
			PatientAbsentProcedureVo voPatientAbsentProcedure = otherProcedures.get(i);
			grdChecklistRow row = form.grdChecklist().getRows().newRow();
			
			if (voPatientAbsentProcedure.getProcedureIsNotNull())
				row.setColProcedure(voPatientAbsentProcedure.getProcedure().getProcedureName());
			
			if(voPatientAbsentProcedure.getSelectedIsNotNull())
				row.setColPresentAbsent(voPatientAbsentProcedure.getSelected());
			
			if(voPatientAbsentProcedure.getSourceofInformationIsNotNull())
				row.setColSource(voPatientAbsentProcedure.getSourceofInformation());
			
			row.setValue(voPatientAbsentProcedure);
			
			setGridUIForAbsent(row); 
		}		
	}

	private void clearControls() 
	{
		form.grdChecklist().getRows().clear();
		form.customControlAuthoringInfo().setValue(null);
	}

	private void resetContextVariables() 
	{
		form.getLocalContext().setPatientProcedureChecklistVo(null);
	}

	private void listProcedures(Specialty lkpSpecialty)
	{				
		form.grdChecklist().getRows().clear();
		
		ProcedureListVoCollection rcColl;
		try 
		{
			rcColl = domain.listProceduresBySpecialty(lkpSpecialty);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}		
		if (rcColl == null || rcColl.size() == 0)
		{
			engine.showMessage("No matching Procedures found");
			return;
		}
		
		populatePatientProcedures(rcColl, domain.listProcedureShortListVoByPatient(form.getGlobalContext().Core.getPatientShort()));
	}		
	
	private void populatePatientProcedures(ProcedureListVoCollection voColl, PatientProcedureShortListVoCollection collPatientProcedureShort) 
	{
		form.getLocalContext().setPatientProcedureShortListVoCollection(collPatientProcedureShort);
		
		for (int i=0; i < voColl.size(); i++)
		{
			populatePatientProceduresControls(voColl.get(i), collPatientProcedureShort);
		}
	}

	private void populatePatientProceduresControls(ProcedureListVo voProcedureList, PatientProcedureShortListVoCollection collPatientProcedureShort)
	{
		
		if(collPatientProcedureShort!=null)
		{
			for (int i=0; i < collPatientProcedureShort.size(); i++)
			{
				if(collPatientProcedureShort.get(i).getProcedureIsNotNull())
				{
					if(collPatientProcedureShort.get(i).getProcedure().equals(voProcedureList.getProcedure()) &&
							collPatientProcedureShort.get(i).getProcedureStatus().equals(PatientProcedureStatus.PERFORMED))
					{
						grdChecklistRow row = form.grdChecklist().getRows().newRow();
						
						PatientProcedureShortListVo voPatientProcedureShortList = collPatientProcedureShort.get(i);
						
						if (voPatientProcedureShortList.getProcedureIsNotNull())
						{
							row.setColProcedure(voPatientProcedureShortList.getProcedure().getProcedureName());
							row.setTooltipForColProcedure(voPatientProcedureShortList.getProcedure().getProcedureName());
						}
			
						row.setColPresentAbsent(PresentAbsentUnknown.PRESENT);
						
						if(voPatientProcedureShortList.getInfoSourceIsNotNull())
							row.setColSource(voPatientProcedureShortList.getInfoSource());
						
						if(voPatientProcedureShortList.getProcDateIsNotNull())
							row.setColProcedureDate(voPatientProcedureShortList.getProcDate());
						
						if(voPatientProcedureShortList.getProcedureDescriptionIsNotNull())
							row.setColDescription(voPatientProcedureShortList.getProcedureDescription());
						
						row.setValue(voProcedureList.getProcedure());
						
						setGridUIForPresent(row); 
						
						return;
					}
				}
			}
		}
		
		grdChecklistRow row = form.grdChecklist().getRows().newRow();
			
		if (voProcedureList.getProcedureIsNotNull())
		{
			row.setColProcedure(voProcedureList.getProcedure().getProcedureName());
			row.setTooltipForColProcedure(voProcedureList.getProcedure().getProcedureName());
		}
		
		row.setValue(voProcedureList.getProcedure());
		
		setGridUIForAbsent(row); 
	}

	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if (save() == false)
			return;
		open();
	}

	private boolean save() 
	{
		form.getLocalContext().setPatientProcedureShortListVoCollection(domain.listProcedureShortListVoByPatient(form.getGlobalContext().Core.getPatientShort()));
		PatientProcedureChecklistVo voPatProcChecklist = populateInstanceData(form.getLocalContext().getPatientProcedureChecklistVo());

		ArrayList<String> screenErrors = new ArrayList<String>();
		if(form.customControlAuthoringInfo().getValue().getAuthoringHcp() == null)
		{
			screenErrors.add("Authoring HCP is mandatory.");				
		}
		if(form.customControlAuthoringInfo().getValue().getAuthoringDateTime() == null)
		{
			screenErrors.add("Authoring HCP is mandatory.");				
		}
		String[] arrErrors =  voPatProcChecklist.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(screenErrors, arrErrors);
		
		if(arrScreenAndVoErrors.length != 0)
		{
			engine.showErrors(arrScreenAndVoErrors);
			return false;
		}
		
		try
		{
			voPatProcChecklist = domain.savePatienProcedureChecklist(voPatProcChecklist);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		catch (DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		form.getLocalContext().setPatientProcedureChecklistVo(voPatProcChecklist);
		form.getLocalContext().setUnlinkedRecord(null);

		return true;
	}
	
	private String[] addScreenErrorsToVOErrors(ArrayList screenErrors, String[] arrErrors)
	{
		String[] arrAllErrors = null;
		
		if(arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);
			
			int i=0;	
			for(int p=screenErrors.size();p<arrAllErrors.length;p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}	
		else
		{
			arrAllErrors = new String[screenErrors.size()];		
			
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);	
		}	
		
		return arrAllErrors;
	}

	private PatientProcedureChecklistVo populateInstanceData(PatientProcedureChecklistVo voPatProcChecklist) {
		
		if(voPatProcChecklist==null)
			voPatProcChecklist = new PatientProcedureChecklistVo();
		
		if (voPatProcChecklist.getClinicalContact()==null)
			voPatProcChecklist.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		voPatProcChecklist.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		
		voPatProcChecklist.setPresentProcedures(populatePresentProceduresData(voPatProcChecklist.getPresentProcedures()));
		voPatProcChecklist.setOtherProcedures(populateAbsentProceduresData(voPatProcChecklist.getOtherProcedures()));
		
		return voPatProcChecklist;
	}

	private PatientAbsentProcedureVoCollection populateAbsentProceduresData(PatientAbsentProcedureVoCollection otherProcedures) 
	{
		otherProcedures = new PatientAbsentProcedureVoCollection();
		
		for (int i=0 ; i < form.grdChecklist().getRows().size(); i++)
		{
			if (form.grdChecklist().getRows().get(i).getColPresentAbsent() != null && !form.grdChecklist().getRows().get(i).getColPresentAbsent().equals(PresentAbsentUnknown.PRESENT))
				otherProcedures.add(populateAbsentProceduresData(form.grdChecklist().getRows().get(i)));
		}
		
		return otherProcedures;
	}

	private PatientAbsentProcedureVo populateAbsentProceduresData(grdChecklistRow row) 
	{
		PatientAbsentProcedureVo voPatientAbsentProcedure = new PatientAbsentProcedureVo();
		ProcedureLiteVo voProcedureVo = null;
		
		if (row.getValue() != null)
		{
			if (row.getValue() instanceof PatientAbsentProcedureVo)
			{
				voProcedureVo =((PatientAbsentProcedureVo) row.getValue()).getProcedure();
			}
			else if (row.getValue() instanceof PatientProcedureVo)
			{
				voProcedureVo =((PatientProcedureVo) row.getValue()).getProcedure();
			}
			else if (row.getValue() instanceof ProcedureLiteVo)
			{
				voProcedureVo =((ProcedureLiteVo) row.getValue());
			}
		}
		
		voPatientAbsentProcedure.setProcedure(voProcedureVo);
		voPatientAbsentProcedure.setSelected(row.getColPresentAbsent());
		voPatientAbsentProcedure.setSourceofInformation(row.getColSource());
		
		row.setValue(voPatientAbsentProcedure);
		
		return voPatientAbsentProcedure;	
	}

	private PatientProcedureVoCollection populatePresentProceduresData(PatientProcedureVoCollection presentProcedures) 
	{
		presentProcedures = new PatientProcedureVoCollection();
		
		for (int i=0 ; i < form.grdChecklist().getRows().size(); i++)
		{
			if (form.grdChecklist().getRows().get(i).getColPresentAbsent() != null && form.grdChecklist().getRows().get(i).getColPresentAbsent().equals(PresentAbsentUnknown .PRESENT))
				presentProcedures.add(populatePresentPatientProblemData(form.grdChecklist().getRows().get(i)));
		}
		
		return presentProcedures;
	}

	private PatientProcedureVo populatePresentPatientProblemData(grdChecklistRow row) 
	{
		PatientProcedureVo voPresentPatientProcedure = null;
		
		if (row.getValue() instanceof PatientProcedureVo)
		{
			if (row.getValue().equals(form.getLocalContext().getUnlinkedRecord()))
			{	
				voPresentPatientProcedure = new PatientProcedureVo();
				
				voPresentPatientProcedure.setProcedure(((PatientProcedureVo)row.getValue()).getProcedure());
			}
			else
			{
				voPresentPatientProcedure = (PatientProcedureVo)row.getValue();
			}
		}
		else if (row.getValue() instanceof PatientAbsentProcedureVo)
		{
			voPresentPatientProcedure = searchExistingProcedures(row);
		}
		else
		{
			voPresentPatientProcedure = searchExistingProcedures(row);
			voPresentPatientProcedure.setProcedure((ProcedureLiteVo) row.getValue());
		}
			
		voPresentPatientProcedure.setInfoSource(row.getColSource());
		voPresentPatientProcedure.setProcDate(row.getColProcedureDate());
		voPresentPatientProcedure.setProcedureDescription(row.getColDescription());
		voPresentPatientProcedure.setProcedureStatus(PatientProcedureStatus.PERFORMED);
		voPresentPatientProcedure.setAuthoringInformation(form.customControlAuthoringInfo().getValue());

		// Set CareContext, EpisodeOfCare and ClinicalContact - this might not be the best place to set these values 
		voPresentPatientProcedure.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		voPresentPatientProcedure.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voPresentPatientProcedure.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
		row.setValue(voPresentPatientProcedure);
		
		return voPresentPatientProcedure;
	}

	private PatientProcedureVo searchExistingProcedures(grdChecklistRow row) 
	{
		PatientProcedureShortListVoCollection collPatientProcedureShortListVo = form.getLocalContext().getPatientProcedureShortListVoCollection();
		
		if(collPatientProcedureShortListVo!=null)
			for(int i=0; i<collPatientProcedureShortListVo.size(); i++)
			{
				//if was linked
				if(collPatientProcedureShortListVo.get(i).getProcedureIsNotNull() && 
						collPatientProcedureShortListVo.get(i).getProcedure().getProcedureName().equals(row.getColProcedure()) &&
								collPatientProcedureShortListVo.get(i).getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
				{
					return new PatientProcedureVo();
				}
				else
				{
					PatientProcedureVo procedureVo = domain.getProcedure(collPatientProcedureShortListVo.get(i));
					
					if(collPatientProcedureShortListVo.get(i).getProcedureIsNotNull() &&
							(!(collPatientProcedureShortListVo.get(i).getProcedureIsNotNull() && 
							collPatientProcedureShortListVo.get(i).getProcedure().getProcedureName().equals(row.getColProcedure()) &&
								row.getColProcedure().equals((procedureVo.getProcedure().getProcedureName())))))
					{
						return procedureVo;
					}
					else if (collPatientProcedureShortListVo.get(i).getProcedureIsNotNull() &&
							((collPatientProcedureShortListVo.get(i).getProcedureIsNotNull() && 
							collPatientProcedureShortListVo.get(i).getProcedure().getProcedureName().equals(row.getColProcedure()) &&
								row.getColProcedure().equals((procedureVo.getProcedure().getProcedureName()))) &&
									!collPatientProcedureShortListVo.get(i).getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())))
					{
						return procedureVo;	
					}
				}	
			}
		
		return new PatientProcedureVo();			
	}
	
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		updateControlsState();
		addProceduresNotInstantiated();
	}
	
	private void addProceduresNotInstantiated() {
		Specialty lkpSpecialty = form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty(); 
		if (lkpSpecialty == null)
			return;
			
		ProcedureListVoCollection collProcedureListVo = null;
		try 
		{
			collProcedureListVo = domain.listProceduresBySpecialty(lkpSpecialty);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}		
		if (collProcedureListVo == null || collProcedureListVo.size() == 0)
		{
			engine.showMessage("No matching Procedures found");
			return;
		}

		
		for (int i=0; i < collProcedureListVo.size(); i++)
		{
			grdChecklistRow row = findProcedureRow(collProcedureListVo.get(i));
			if(row==null)
			{
				row = form.grdChecklist().getRows().newRow();
				row.setColProcedure(collProcedureListVo.get(i).getProcedure().getProcedureName());
				row.setValue(collProcedureListVo.get(i).getProcedure());
				
				setGridUIForAbsent(row);
			}
		}		
	}

	private grdChecklistRow findProcedureRow(ProcedureListVo vo) 
	{
		GenForm.grdChecklistRow row = null;
		for (int i=0; i < form.grdChecklist().getRows().size(); i++)
		{
			if (form.grdChecklist().getRows().get(i).getColProcedure() != null && 
					form.grdChecklist().getRows().get(i).getColProcedure().equals(vo.getProcedure().getProcedureName()))
			{
				row = form.grdChecklist().getRows().get(i);
				break;
			}
		}
		
		return row;
	}

	protected void onBtnNewClick() throws PresentationLogicException {
		
		form.customControlAuthoringInfo().initializeComponent();
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);
		
		Specialty lkpSpecialty = form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty(); 
		if (lkpSpecialty == null){
			engine.showMessage("No Procedures exists for current specialty");
			return;
		}
		form.setMode(FormMode.EDIT);
		listProcedures(lkpSpecialty);		
		
		form.setcustomControlAuthoringInfoEnabled(true);
	}

	protected void onBtnCancelClick() throws PresentationLogicException {
		open();		
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
		if (form.getMode().equals(FormMode.VIEW))
			disableAllContextMenus();	
	}

	@Override
	protected void ongrdChecklistGridColPresentAbsentColumnAnswerBoxValueChanged(grdChecklistRow row) throws PresentationLogicException 
	{
		if (row.getColPresentAbsent() !=null)
		{
			if (row.getColPresentAbsent().equals(PresentAbsentUnknown.ABSENT))
			{
					row.setColSource(null);
					row.setColDescription(null);
					
					setGridUIForAbsent(row);
					
			}				
			else if (row.getColPresentAbsent().equals(PresentAbsentUnknown.PRESENT))
			{
				if (row.getValue() instanceof PatientAbsentProcedureVo){
					PatientAbsentProcedureVo voPatientAbsentProcedure = (PatientAbsentProcedureVo)row.getValue();
				
					if(voPatientAbsentProcedure.getSourceofInformationIsNotNull())
						row.setColSource(voPatientAbsentProcedure.getSourceofInformation());
					row.setColDescription(row.getColProcedure());
				}
				else if (row.getValue() instanceof PatientProcedureVo){
					PatientProcedureVo voPatientProcedure = (PatientProcedureVo)row.getValue();
				
					if(voPatientProcedure.getInfoSourceIsNotNull())
						row.setColSource(voPatientProcedure.getInfoSource());
					row.setColDescription(row.getColProcedure());
				}
				else
				{
					row.setColDescription(row.getColProcedure());
				}
				
				setGridUIForPresent(row); 
			}
		}
	}
	
	private void setGridUIForPresent(grdChecklistRow row) 
	{
		row.setColSourceReadOnly(false);
		row.setColProcedureDateReadOnly(false);
		row.setColDescriptionReadOnly(false);
		
	}

	private void setGridUIForAbsent(grdChecklistRow row)
	{
		row.setColSourceReadOnly(true);
		row.setColProcedureDateReadOnly(true);
		row.setColDescriptionReadOnly(true);
		
		row.setColSource(null);
		row.setColProcedureDate(null);
		row.setColDescription("");
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.OK);	
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PresentingProblems.AddCCIfromTaxonomy :
				addProcedureToPresProblemCheckListConfig();
				break;
			case GenForm.ContextMenus.PresentingProblems.AddCCIfromLocalSearch :
				addProcedureToPresProblemProblemSearch();
				break;
			case GenForm.ContextMenus.PresentingProblems.Unlink :
				unlinkProcedure();;
				break;
			default :
				break;
		}
	}

	private void unlinkProcedure()
	{
		grdChecklistRow row = form.grdChecklist().getSelectedRow();
		setGridUIForNone(row);
		//put unlinked record in localcontext
		form.getLocalContext().setUnlinkedRecord(form.grdChecklist().getSelectedRow().getValue());
		//row.setColPresentAbsentReadOnly(true);
		row.setColPresentAbsent(null);
	}

	private void addProcedureToPresProblemProblemSearch()
	{
		form.getGlobalContext().Clinical.setSelectedProcedures(null);
		form.getGlobalContext().Clinical.setPMHConfigSearchType("P");
		engine.open(form.getForms().Core.DiagnosisProcedureProblemSearch, "Procedures");	
	}

	private void addProcedureToPresProblemCheckListConfig()
	{
		form.getGlobalContext().Core.setTaxonomyMap(null);		
		engine.open(form.getForms().Core.TaxonomySearch);
	}

	@Override
	protected void onGrdChecklistSelectionChanged() throws PresentationLogicException
	{
		grdChecklistRow row = form.grdChecklist().getSelectedRow();
		
		if (row != null &&	
			form.getMode().equals(FormMode.EDIT) && 
				row.getColPresentAbsent() !=null)
		{
			if (row.getColPresentAbsent().equals(PresentAbsentUnknown.PRESENT))
				enableUnlinkContextMenu(true);
		}
		else
			enableUnlinkContextMenu(false);
		
		updateControlsState();
		
	}
	
	private void enableUnlinkContextMenu(boolean isEnable)
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().getPresentingProblemsUnlinkItem().setEnabled(isEnable);
			form.getContextMenus().getPresentingProblemsUnlinkItem().setVisible(isEnable);
		}
	}

	private void updateControlsState() 
	{
		for (int i=0; i < form.grdChecklist().getRows().size(); i++)
		{			
			if (form.grdChecklist().getRows().get(i).getColPresentAbsent() == null)
				setGridUIForNone(form.grdChecklist().getRows().get(i));
			else if (form.grdChecklist().getRows().get(i).getColPresentAbsent().equals(PresentAbsentUnknown.ABSENT))
				setGridUIForAbsent(form.grdChecklist().getRows().get(i));				
			else
				setGridUIForPresent(form.grdChecklist().getRows().get(i));
		}
		
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnNew().setVisible(form.getLocalContext().getPatientProcedureChecklistVo() == null);
			form.btnUpdate().setVisible(form.getLocalContext().getPatientProcedureChecklistVo() != null);
		}
		
		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setVisible(form.getMode().equals(FormMode.EDIT));
	}
	
	private void setGridUIForNone(grdChecklistRow row) 
	{
		row.setColProcedureDateReadOnly(false);
		row.setColSourceReadOnly(true);
		row.setColProcedureDateReadOnly(true);
		row.setColDescriptionReadOnly(true);
		
		row.setColSource(null);
		row.setColProcedureDate(null);
		row.setColDescription("");
	}
	
	private void disableAllContextMenus()
	{
		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsUnlinkItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsUnlinkItem().setVisible(form.getMode().equals(FormMode.EDIT));
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (result == DialogResult.CANCEL) 
		return; 
	
		if ( (formName.equals(form.getForms().Core.TaxonomySearch)) && (result.equals(DialogResult.OK)) )
		{
			doAddFromTaxonomy();
		}
	
		else if ( (formName.equals(form.getForms().Core.DiagnosisProcedureProblemSearch)) && (result.equals(DialogResult.OK)) )
		{
			doAddFromLocalSearch();
		}	
	}
	
	private void doAddFromLocalSearch()
	{
		ProcedureLiteVoCollection procList = form.getGlobalContext().Clinical.getSelectedProcedures();

		for (int i=0; i < procList.size(); i++)
		{
			boolean bFound = false;
			for (int j=0; j < form.grdChecklist().getRows().size(); j++)
			{
				if (form.grdChecklist().getRows().get(j).getColProcedure()!=null &&
						form.grdChecklist().getRows().get(j).getColProcedure().equals(procList.get(i).getProcedureName()))
				{
					bFound = true;
					engine.showMessage("Procedure record called \"" + procList.get(i).getProcedureName() + "\" is already in list.");
					break;
				}
			}
			
			if(!bFound)
			{
				grdChecklistRow row = form.grdChecklist().getRows().newRow();
				row.setColProcedure(procList.get(i).getProcedureName());
				row.setColPresentAbsent(PresentAbsentUnknown.PRESENT);
				row.setColDescription(procList.get(i).getProcedureName());
				
				PatientProcedureVo voPatientProcedure = new PatientProcedureVo();
				voPatientProcedure.setProcedure(procList.get(i));
				voPatientProcedure.setProcedureDescription(procList.get(i).getProcedureName());
				row.setValue(voPatientProcedure);
			}
		}
	}

	private void doAddFromTaxonomy()
	{
		if(form.getGlobalContext().Core.getTaxonomyMapIsNotNull())
		{
			TaxonomyMap voTaxonomyMap = form.getGlobalContext().Core.getTaxonomyMap();
			
			boolean bFound = false;
			for (int j=0; j < form.grdChecklist().getRows().size(); j++)
			{
				if (form.grdChecklist().getRows().get(j).getColProcedure()!=null &&
						form.grdChecklist().getRows().get(j).getColProcedure().equals(voTaxonomyMap.getDescription()))
				{
					bFound = true;
					engine.showMessage("Procedure record called \"" + voTaxonomyMap.getDescription() + "\" is already in list.");
					break;
				}
			}
			
			if(!bFound)
			{
				ProcedureVo voProcedure = new ProcedureVo();
				TaxonomyMapCollection voCollTaxonomyMapCollection = new TaxonomyMapCollection();
				voCollTaxonomyMapCollection.add(voTaxonomyMap);
				
				voProcedure.setProcedureName(voTaxonomyMap.getDescription());
				voProcedure.setIsActive(Boolean.TRUE);
				voProcedure.setTaxonomyMap(voCollTaxonomyMapCollection);
										
				String[] arrErrors = voProcedure.validate();
				if(arrErrors != null)
				{
					engine.showErrors("Validation Errors", arrErrors);
					return;
				}
				
				try
				{
					voProcedure = domain.saveProcedure(voProcedure);
				} 
				catch (StaleObjectException e)
				{
					engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					return;
				}
				catch (UniqueKeyViolationException e)
				{
					engine.showMessage(e.getMessage());
					return;
				} 
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return;
				} 
				
				grdChecklistRow row = form.grdChecklist().getRows().newRow();
				row.setColProcedure(voProcedure.getProcedureName());
				
				PatientProcedureVo voPatiend = new PatientProcedureVo();
				
				voPatiend.setProcedure(voProcedure);
				row.setColPresentAbsent(PresentAbsentUnknown.PRESENT);
				row.setColDescription(voProcedure.getProcedureName());
				row.setValue(voPatiend);
			}
		}
	}
}
