//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3338.27167)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.edischargeclinicalinfocomponent;

import ims.clinical.forms.edischargeclinicalinfocomponent.GenForm.grdInvestigationsRow;
import ims.clinicaladmin.vo.lookups.EDischargeHINT;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.DischargeClinicalInformationVo;
import ims.core.vo.FieldHelpVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.vo.OrderInvestigationBookingVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		open();
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);			
		open();

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		form.setMode(FormMode.VIEW);	
	}
	
	public boolean save() throws PresentationLogicException 
	{
		DischargeClinicalInformationVo voClinInfo = populateDataFromScreen();
		String[] str = voClinInfo.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return false;
		}

		try 
		{
			voClinInfo = domain.saveClinicalInfo(voClinInfo);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			open();
			form.setMode(FormMode.VIEW);			
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

			form.setMode(FormMode.VIEW);
			open();
			
			// Temporary fix for WDEV-8612 (this code really belongs in the open() function)
			form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
			form.fireCustomControlValueChanged();

			return false;
		} 
		
		form.setMode(FormMode.VIEW);			
		form.getLocalContext().setSelectedRecord(voClinInfo);
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();

		return true;
	}

	private DischargeClinicalInformationVo populateDataFromScreen() 
	{
		DischargeClinicalInformationVo voClinInfo = null;
		if (form.getLocalContext().getSelectedRecordIsNotNull())
			voClinInfo = form.getLocalContext().getSelectedRecord();
		else
			voClinInfo = new DischargeClinicalInformationVo();

		if (voClinInfo.getCareContext() == null)
			voClinInfo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voClinInfo.setAdditionalComments(form.txtAdditionalComments().getValue());
		voClinInfo.setInvestigationComments(form.txtInvestigationsComments().getValue());
		voClinInfo.setPresentingComplaints(form.txtPresentingComplaints().getValue());
		voClinInfo.setRelevantTreatments(form.txtRelevantTreatmentsETC().getValue());
		voClinInfo.setSummaryOfAdmission(form.txtSummaryofAdmission().getValue());
		
		OrderInvestigationBookingVoCollection voColl = new OrderInvestigationBookingVoCollection();
		for (int i = 0 ; i < form.grdInvestigations().getRows().size() ; i++)
		{
			if (form.grdInvestigations().getRows().get(i).getColInclude())
				voColl.add(form.grdInvestigations().getRows().get(i).getValue());
		}
		voClinInfo.setResults(voColl);
		
		return voClinInfo;
	}

	public void open()
	{
		DischargeClinicalInformationVo voClinInfo = domain.getClinicalInfo(form.getGlobalContext().Core.getCurrentCareContext());

		form.getLocalContext().setSelectedRecord(voClinInfo);
		populateScreenFromData(voClinInfo);
		
		if (form.getMode().equals(FormMode.EDIT ))
			listAllResultsForTimePeriod();
		
		manageReadOnly();
	}

	private void listAllResultsForTimePeriod() 
	{
		OrderInvestigationBookingVoCollection voColl = domain.listInvestigationResults(form.getGlobalContext().Core.getPatientShort(), ConfigFlag.UI.EDISCHARGE_RESULTS_NUM_DAYS.getValue());
		for(int i = 0 ; voColl != null && i < voColl.size() ; i++)
		{
			boolean bFound = false;
			for(int j = 0 ; j < form.grdInvestigations().getRows().size() ; j++)
			{
				if (voColl.get(i).equals(form.grdInvestigations().getRows().get(j).getValue()))
				{
					bFound = true;
					break;
				}
			}
			
			if ( ! bFound 
				&&voColl.get(i).getInvestigationIsNotNull()
				&& voColl.get(i).getInvestigation().getInvestigationIndexIsNotNull()
				&& voColl.get(i).getInvestigation().getInvestigationIndex().getNameIsNotNull())
			{
				grdInvestigationsRow row = form.grdInvestigations().getRows().newRow();
				row.setColInvestigation(voColl.get(i).getInvestigation().getInvestigationIndex().getName());
				row.setValue(voColl.get(i));
			}
		}
		
	}
	private void populateScreenFromData(DischargeClinicalInformationVo voClinInfo)
	{
		clearInstanceControls();
		
		if (voClinInfo == null)
			return;
		
		form.txtAdditionalComments().setValue(voClinInfo.getAdditionalComments());
		form.txtInvestigationsComments().setValue(voClinInfo.getInvestigationComments());
		form.txtPresentingComplaints().setValue(voClinInfo.getPresentingComplaints());
		form.txtRelevantTreatmentsETC().setValue(voClinInfo.getRelevantTreatments());
		form.txtSummaryofAdmission().setValue(voClinInfo.getSummaryOfAdmission());
		
		for(int i = 0 ; voClinInfo.getResultsIsNotNull() && i < voClinInfo.getResults().size() ; i++)
		{
			grdInvestigationsRow row = form.grdInvestigations().getRows().newRow();
			row.setColInvestigation(voClinInfo.getResults().get(i).getInvestigationIsNotNull() && voClinInfo.getResults().get(i).getInvestigation().getInvestigationIndexIsNotNull() ? voClinInfo.getResults().get(i).getInvestigation().getInvestigationIndex().getName() : "");
			row.setColInclude(Boolean.TRUE);
			row.setValue(voClinInfo.getResults().get(i));
		}
	}
	
	public void initializeComponent()
	{
		setTooltips();
		form.getLocalContext().setbInitialised(null);
		form.getLocalContext().setisReadonly(false);
	}
	
	private void setTooltips() 
	{
		EDischargeHINT lkpHint = new EDischargeHINT();
		
		lkpHint.setId(-1709); // Investigations
		FieldHelpVo voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbInvestigationCommentsHINT().setTooltip(voHint.getHelpText());
		
		lkpHint.setId(-1710); //Additional
		voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbAdditionalCommnetsHINT().setTooltip(voHint.getHelpText());
		
	}

	public void clearInstanceControls()
	{
		form.txtPresentingComplaints().setValue(null);
		form.txtSummaryofAdmission().setValue(null);
		form.grdInvestigations().getRows().clear();
		form.grdInvestigations().setValue(null);
		
		form.txtInvestigationsComments().setValue(null);
		form.txtRelevantTreatmentsETC().setValue(null);
		form.txtAdditionalComments().setValue(null);
	}
	public void initialise() 
	{
		if (form.getLocalContext().getbInitialised() == null)
		{
			initializeComponent();
			open();
			form.getLocalContext().setbInitialised(Boolean.TRUE);
		}
	}

	public void setReadOnly() 
	{
		form.getLocalContext().setisReadonly(/*form.getGlobalContext().Clinical.geteDischargeCompleted()*/form.getGlobalContext().Clinical.geteDischargeClinicalComplete());
		manageReadOnly();
	}

	private void manageReadOnly() 
	{
		if (form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(true);

		if (form.getLocalContext().getisReadonlyIsNotNull()
			&& form.getLocalContext().getisReadonly()
			&& form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(false);
	}

}
