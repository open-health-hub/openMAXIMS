//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.domain.base.impl;

import ims.domain.impl.DomainImpl;

public abstract class BaseNotificationsImpl extends DomainImpl implements ims.core.domain.Notifications, ims.domain.impl.Transactional
{
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unused")
	public void validatemarkNotificationAsSeen(Integer notificationId)
	{
		if(notificationId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'notificationId' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validateregisterMobileDeviceToPushNotifications(String uniqueDeviceId, String deviceTokenId, String deviceName, String deviceModel, String systemName, String systemVersion, Boolean enablePushNotifications)
	{
		if(uniqueDeviceId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'uniqueDeviceId' of type 'String' cannot be null.");
		if(deviceTokenId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'deviceTokenId' of type 'String' cannot be null.");
		if(enablePushNotifications == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'enablePushNotifications' of type 'Boolean' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientById(Integer patientId)
	{
		if(patientId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientId' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesearchPatients(String searchString)
	{
	}

	@SuppressWarnings("unused")
	public void validategetOrderById(Integer orderId)
	{
	}

	@SuppressWarnings("unused")
	public void validatemarkOrderAsSeen(Integer orderId)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatientImage(Integer patientId, Boolean smallImage)
	{
		if(patientId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientId' of type 'Integer' cannot be null.");
		if(smallImage == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'smallImage' of type 'Boolean' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientOrders(Integer patientId, Integer lastNumberOfDays)
	{
		if(patientId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientId' of type 'Integer' cannot be null.");
		if(lastNumberOfDays == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'lastNumberOfDays' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientAllergies(Integer patientId)
	{
		if(patientId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientId' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientAlerts(Integer patientId)
	{
		if(patientId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientId' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientVitalSigns(Integer patientId, Integer lastNumberOfDays)
	{
		if(patientId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientId' of type 'Integer' cannot be null.");
		if(lastNumberOfDays == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'lastNumberOfDays' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetCurrentInpatientCareContext(Integer patientId)
	{
		if(patientId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientId' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validaterecordVitalSigns(Integer patientId, ims.core.vo.VitalSignsWebServiceVo vitalSigns)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatientDiagnosisForCurrentEpisodeOfCare(Integer patientId)
	{
		if(patientId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientId' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientProceduresForCurrentEpisodeOfCare(Integer patientId)
	{
		if(patientId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientId' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientDiagnosis(Integer diagnosisId)
	{
		if(diagnosisId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'diagnosisId' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientProcedure(Integer procedureId)
	{
		if(procedureId == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'procedureId' of type 'Integer' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetGPSCoordinatesForPostCode(String postCode)
	{
		if(postCode == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'postCode' of type 'String' cannot be null.");
	}
}
