//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.45 build 2421.18554)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.clinical.configuration.domain.objects.SECS;
import ims.core.domain.base.impl.BaseSECSConfigImpl;
import ims.clinical.vo.SECSConfigurationVo;
import ims.clinical.vo.SECSConfigurationVoCollection;
import ims.clinical.vo.SECSVo;
import ims.clinical.vo.SECSVoCollection;
import ims.clinical.vo.domain.SECSConfigurationVoAssembler;
import ims.clinical.vo.domain.SECSVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.generalmedical.vo.NeuroMotorFindingsVoCollection;
import ims.generalmedical.vo.domain.NeuroMotorFindingsVoAssembler;
import ims.generalmedical.vo.domain.SystemReviewVoAssembler;

public class SECSConfigImpl extends BaseSECSConfigImpl
{
	private static final long serialVersionUID = 1L;

	/**
	 * There will only be one secs record
	 */
	public SECSVo getSecs()				//wdev-13392
	{
		List secs = getDomainFactory().find("from SECS as s1_1 order by s1_1.systemInformation.creationDateTime desc ");
		SECSVoCollection secsVoColl = SECSVoAssembler.createSECSVoCollectionFromSECS(secs);	//wdev-13392
		if(secsVoColl != null && secsVoColl.size() > 0)
			return secsVoColl.get(0);
		return null;
	}

	public SECSVo saveSECS(SECSVo voSecs) throws StaleObjectException,UniqueKeyViolationException
	{
		if(voSecs == null)
			throw new CodingRuntimeException("voSecs parameter is null in method saveSECS");
		if(!voSecs.isValidated())
			throw new CodingRuntimeException("voSecs has not been validated");
		
		
		DomainFactory factory = getDomainFactory();
		//wdev-13392
		if(voSecs.getID_SECS() == null)
		{
			
			SECSVoCollection list = getSecsConfiguration();
			if(list != null && list.size() > 0)
			{
				throw new UniqueKeyViolationException("A SECS Configuration already exists.");
				
			}
		
		}
		//---------------
		
		SECS doSecs = SECSVoAssembler.extractSECS(factory, voSecs);
		factory.save(doSecs);
		
		return SECSVoAssembler.create(doSecs);
	}
	//wdev-13392
	private SECSVoCollection getSecsConfiguration()
	{
		
		DomainFactory factory = getDomainFactory();
		String hql; 
					
		
		hql = " from SECS ";
  			
		SECSVoCollection collSystemReview = SECSVoAssembler.createSECSVoCollectionFromSECS(factory.find(hql));
		
		return collSystemReview;
	

	}
	//---------

	//wdev-13392
	public SECSVoCollection getSecsColection() 
	{
		List secs = getDomainFactory().find("from SECS as s1_1 order by s1_1.systemInformation.creationDateTime desc ");
		SECSVoCollection secsVoColl = SECSVoAssembler.createSECSVoCollectionFromSECS(secs);
		return secsVoColl;
	}
}
