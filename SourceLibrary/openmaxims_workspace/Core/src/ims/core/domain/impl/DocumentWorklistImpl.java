//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.80 build 3947.28740)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.ClinicAdmin;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.ClinicAdminImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.configuration.domain.objects.AppSite;
import ims.core.documents.domain.objects.PatientDocument;
import ims.core.documents.vo.PatientDocumentRefVo;
import ims.core.domain.base.impl.BaseDocumentWorklistImpl;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.Gp;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.AppSiteVo;
import ims.core.vo.DocumentWorklistSearchCriteriaVo;
import ims.core.vo.GpLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.AppSiteVoAssembler;
import ims.core.vo.domain.GpLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffLiteVoAssembler;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.core.vo.domain.PatientDocumentforDocumentWorklistVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.PatIdType;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.List;

public class DocumentWorklistImpl extends BaseDocumentWorklistImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.PatientDocumentforDocumentWorklistVoCollection listPatientDocuments(ims.core.vo.DocumentWorklistSearchCriteriaVo searchCriteria)
	{
		if (new DocumentWorklistSearchCriteriaVo().equals(searchCriteria))
			throw new DomainRuntimeException("At least one search criteria must be provided");
		
		StringBuilder hqlJoins = new StringBuilder("select pd from PatientDocument as pd left join pd.currentDocumentStatus as ds left join ds.correspondenceStatus as cs ");
		StringBuilder hqlConditions = new StringBuilder(" where ( ");
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		String and = "";
		if (searchCriteria.getResponsibleIsNotNull())
		{
			hqlJoins.append(" left join pd.responsibleHCP as responsible ");
			hqlConditions.append(and);
			hqlConditions.append("responsible.id = :responsibleId");
			paramNames.add("responsibleId");
			paramValues.add(searchCriteria.getResponsible().getID_Hcp());
			and = " and ";
		}
		if (searchCriteria.getAuthorIsNotNull())
		{
			hqlJoins.append(" left join pd.authoringHCP as auth ");
			hqlConditions.append(and);
			hqlConditions.append("auth.id = :authorId");
			paramNames.add("authorId");
			paramValues.add(searchCriteria.getAuthor().getID_Hcp());
			and = " and ";
		}
		if (searchCriteria.getClinicIsNotNull())
		{
			hqlJoins.append("left join pd.clinic as clin");
			hqlConditions.append(and);
			hqlConditions.append("clin.id = :clinicId");
			paramNames.add("clinicId");
			paramValues.add(searchCriteria.getClinic().getID_Clinic());
			and = " and ";
		}
		
		if (searchCriteria.getDateFromIsNotNull())
		{
			hqlConditions.append(and);
			hqlConditions.append("pd.documentDate >= :dateFrom");
			paramNames.add("dateFrom");
			paramValues.add(searchCriteria.getDateFrom().getDate());
			and = " and ";
		}
		
		if (searchCriteria.getDateToIsNotNull())
		{
			hqlConditions.append(and);
			hqlConditions.append("pd.documentDate < :dateTo");
			paramNames.add("dateTo");
			paramValues.add(((Date)searchCriteria.getDateTo().clone()).addDay(1).getDate());
			and = " and ";
		}
		if (searchCriteria.getDocumentTypeIsNotNull())
		{
			hqlJoins.append(" left join pd.category as cat ");
			hqlConditions.append(and);
			hqlConditions.append("cat.id = :docTypeId");
			paramNames.add("docTypeId");
			paramValues.add(searchCriteria.getDocumentType().getID());
			and = " and ";
		}
		
		//WDEV-11810 - Start
		if (searchCriteria.getPatientIdIsNotNull() || searchCriteria.getPatientIsNotNull())
		{
			hqlJoins.append(" left join pd.patient as pat ");
			if (searchCriteria.getPatientIdIsNotNull() )
				hqlJoins.append(" left join pat.identifiers as patId left join patId.type as type ");
		}
		//WDEV-11810 - End
		
		/*WDEV-11810if (searchCriteria.getHospNoIsNotNull())
		{
			//WDEV-11810 hqlJoins.append(" left join pd.patient as pat left join pat.identifiers as patId left join patId.type as type ");
			hqlConditions.append(and);
			hqlConditions.append("type.id = :hospNoType");
			paramNames.add("hospNoType");
			paramValues.add(PatIdType.NHSN.getID());
			and = " and ";
			hqlConditions.append(and);
			hqlConditions.append("patId.value  = :hospNo");
			paramNames.add("hospNo");
			paramValues.add(searchCriteria.getHospNo());
		}*/
		
		//WDEV-11810 - Start
		if (searchCriteria.getPatientIdIsNotNull())
		{
			hqlConditions.append(and);
			hqlConditions.append("type.id = :patTypeId");
			paramNames.add("patTypeId");
			paramValues.add(searchCriteria.getPatientId().getType().getID());
			and = " and ";
			hqlConditions.append(and);
			hqlConditions.append("patId.value  = :patId");
			paramNames.add("patId");
			if (searchCriteria.getPatientId().getType().equals(PatIdType.NHSN))
			{
				
				paramValues.add(searchCriteria.getPatientId().getValue().replace(" ", ""));
			}
			else
			{
				paramValues.add(searchCriteria.getPatientId().getValue());
			}
			
		}
		if (searchCriteria.getPatientIsNotNull())
		{
			hqlConditions.append(and);
			hqlConditions.append("pat.id = :patient");
			paramNames.add("patient");
			paramValues.add(searchCriteria.getPatient().getID_Patient());
			and = " and ";
		}
		//WDEV-11810 - End
		
		if (searchCriteria.getSpecialtyIsNotNull())
		{
			hqlJoins.append(" left join pd.specialty as spec ");
			hqlConditions.append(and);
			hqlConditions.append("spec.id = :specId");
			paramNames.add("specId");
			paramValues.add(searchCriteria.getSpecialty().getID());
			and = " and ";
		}
		
		if (searchCriteria.getTypistIsNotNull())
		{
			hqlJoins.append(" left join pd.recordingUser as recU ");
			hqlConditions.append(and);
			hqlConditions.append("recU.id = :typistId");
			paramNames.add("typistId");
			paramValues.add(searchCriteria.getTypist().getIMosId());
			and = " and ";
		}
		
		if (searchCriteria.getDocumentStatusIsNotNull())
		{
			
			hqlConditions.append(and);
			hqlConditions.append("cs.id = :docStat");
			paramNames.add("docStat");
			paramValues.add(searchCriteria.getDocumentStatus().getID());
			and = " and ";
		}
		else
		{
			hqlConditions.append(and);
			hqlConditions.append("cs.id in ("+DocumentStatus.DRAFT.getID()+","+DocumentStatus.FOR_REVIEW.getID()+","+DocumentStatus.FOR_UPDATE.getID()+","+DocumentStatus.READY_TO_SEND.getID()+","+DocumentStatus.COMPLETED.getID()+")");
			and = " and ";
		}
		
		if (searchCriteria.getExcludeCompletedIsNotNull() && searchCriteria.getExcludeCompleted())
		{
			hqlConditions.append(and);
			hqlConditions.append("cs.id <>"+DocumentStatus.COMPLETED.getID());
			
		}
		
		if (searchCriteria.getDocumentType() == null)//WDEV-13634
		{
			hqlJoins.append(" left join pd.category as cat ");
		}
		hqlConditions.append(" and cat.id not in (" + DocumentCategory.HISTORICAL.getID() + "," + DocumentCategory.ASSESSMENT.getID() + "," + DocumentCategory.RACPCSUMMARY.getID() + ")");//WDEV-13634
		
		hqlConditions.append(" ) and (pd.isRIE is null or pd.isRIE = 0) order by pd.documentDate desc");//	WDEV-15417
		List<?> dos = getDomainFactory().find(hqlJoins.append(hqlConditions.toString()).toString(),paramNames,paramValues);
		if (dos == null || dos.size() == 0)
			return null;
		
		return PatientDocumentforDocumentWorklistVoAssembler.createPatientDocumentforDocumentWorklistVoCollectionFromPatientDocument(dos);
	}

	public ims.core.vo.ClinicLiteVoCollection listClinicsforLocation(ILocation location, String strClinicName)
	{
		ClinicAdmin clinicAdmin = (ClinicAdmin)getDomainImpl(ClinicAdminImpl.class);
		return clinicAdmin.listClinicsForLocationByClinicName( new LocationRefVo(location.getID(),0),strClinicName, true);	//WDEV-12511
	}

	public ILocation[] listActiveHospitalsLite()
	{
		OrganisationAndLocation orgLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		LocationLiteVoCollection hosps = orgLoc.listActiveHospitalsLite();
		return (hosps == null || hosps.size() == 0) ? null : hosps.toILocationArray();
	}

	public PatientDocumentVo getPatientDocument(PatientDocumentRefVo documentID) throws StaleObjectException
	{
		if (documentID == null || !documentID.getID_PatientDocumentIsNotNull())
			throw new DomainRuntimeException("Invalid patient document reference provided");
		
		DomainObject domO = getDomainFactory().getDomainObject(PatientDocument.class, documentID.getID_PatientDocument());
		if (domO == null)
			throw new StaleObjectException(domO);
		
		if(Boolean.TRUE.equals(domO.getIsRIE()))//	WDEV-15417
			throw new StaleObjectException(domO);
		
		return PatientDocumentVoAssembler.create((PatientDocument) domO);
	}

	public void deletePatientDocument(PatientDocumentVo patDoc) throws ForeignKeyViolationException, StaleObjectException
	{
		
		PatientDocument patDO = PatientDocumentVoAssembler.extractPatientDocument(getDomainFactory(), patDoc);
		if (patDO == null )
			throw new StaleObjectException(patDO);
		
		long count  = getDomainFactory().countWithHQL("select count(patDoc.id) " +
				"from PatientDocument as patDoc where " +
				"(patDoc.id = :patDocId and patDoc.version=:patVersion)"
				,new String[]{"patDocId","patVersion"},
				new Object[]{patDoc.getID_PatientDocument(),patDoc.getVersion_PatientDocument()});
		
		if (count == 0)
			throw new StaleObjectException(patDO);
		
		//getDomainFactory().delete(patDO);
		patDO.setIsRIE(true);//WDEV-15417
		getDomainFactory().save(patDO);//WDEV-15417
	}

	public PatientDocumentVo savePatientDocument(PatientDocumentVo document) throws StaleObjectException
	{
		if(document == null)
			throw new CodingRuntimeException("Can not save a null PatientDocumentVo.");
		
		if(!document.isValidated())
			throw new CodingRuntimeException("PatientDocumentVo not validated");
		
		DomainFactory factory = getDomainFactory();
		PatientDocument doc = PatientDocumentVoAssembler.extractPatientDocument(factory, document);
		if (doc == null)
			throw new StaleObjectException(doc);
		factory.save(doc);	
		
		return PatientDocumentVoAssembler.create(doc);
	}

	public Boolean isStaleObjectException(PatientDocumentVo patientDocument)
	{
		if(patientDocument == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		
		List<?> patDoc = factory.find("select d.id from PatientDocument as d where d.id = :docId and d.version > :docVersion", new String[] {"docId", "docVersion"}, new Object[] {patientDocument.getID_PatientDocument(), patientDocument.getVersion_PatientDocument()});
		
		if(patDoc != null && patDoc.size() > 0)
			return true;
		
		return false;
	}

	public GpLiteVo getPatientGp(PatientRefVo patient)
	{
		if(patient == null || !patient.getID_PatientIsNotNull())
			throw new CodingRuntimeException("Can not get Patient Gp on null Patient.");
		
		DomainFactory factory = getDomainFactory();
		
		List<?> gpList = factory.find("select gp from Patient as p left join p.gp as gp where (p.id = :patientid and gp.isRIE is null)", new String[] {"patientid"}, new Object[] {patient.getID_Patient()});
		
		if(gpList == null || gpList.size() == 0)
			return null;
		
		return GpLiteVoAssembler.create((Gp) gpList.get(0));
	}

	public PatientShort getPatientShort(PatientRefVo patRef)
	{
		if (!patRef.getID_PatientIsNotNull())
		{
			throw new DomainRuntimeException("Patient is invalid" );
		}
		return PatientShortAssembler.create((Patient) getDomainFactory().getDomainObject(Patient.class,patRef.getID_Patient()));
		
	}

	//WDEV-12205
	public MemberOfStaffLiteVo getLockedUser(MemberOfStaffRefVo mos) 
	{
		if(mos == null || mos.getID_MemberOfStaff() == null)
			throw new CodingRuntimeException("Can not get Member of Staf on null Id.");
		
		return MemberOfStaffLiteVoAssembler.create((MemberOfStaff) getDomainFactory().getDomainObject(MemberOfStaff.class, mos.getID_MemberOfStaff()));
	}

	//wdev-16298
	public AppSiteVo getSite() throws DomainInterfaceException 
	{
		
		DomainFactory factory = getDomainFactory();	
		
		List list = factory.find("from AppSite");

		if(list.size() > 1)
		{
			throw new ims.domain.exceptions.DomainInterfaceException("There is more than 1 record in core_appsite table !");
		}
		
		if(list.size() == 1)
			return AppSiteVoAssembler.create((AppSite) list.get(0));
		
		return null;
	}
}
