//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 3952.27656)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.documents.domain.objects.PatientDocument;
import ims.core.documents.vo.PatientDocumentRefVo;
import ims.core.domain.base.impl.BasePatientDocumentsImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.Gp;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.GpLiteVo;
import ims.core.vo.PatientDocumentSearchListVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.domain.EpisodeofCareShortVoAssembler;
import ims.core.vo.domain.GpLiteVoAssembler;
import ims.core.vo.domain.PatientDocumentSearchListVoAssembler;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.Specialty;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.List;

public class PatientDocumentsImpl extends BasePatientDocumentsImpl
{
	private static final long serialVersionUID = 1L;

	public ims.core.vo.EpisodeofCareShortVoCollection listEpisodesOfCare(ims.core.patient.vo.PatientRefVo patientId)
	{
		if (patientId == null || !patientId.getID_PatientIsNotNull())
		{
			throw new CodingRuntimeException("Supplied patient is null or doesn't have an id.");
		}
		
		String hql = "select e1_1 from EpisodeOfCare as e1_1 left join e1_1.careSpell as c1_1 left join c1_1.patient as p1_1 where (p1_1.id = :Patient_id) order by e1_1.startDate desc ";
		
		List<?> list = getDomainFactory().find(hql, "Patient_id", patientId.getID_Patient());
		if (list == null || list.size() == 0)
			return null;
		
		return EpisodeofCareShortVoAssembler.createEpisodeofCareShortVoCollectionFromEpisodeOfCare(list);
	}

	public PatientDocumentVo getPatientDocument(PatientDocumentRefVo documentID) 
	{
		if(documentID == null || !documentID.getID_PatientDocumentIsNotNull())
		{
			throw new CodingRuntimeException("Cannot get PatientDocument on null PatientDocumentId.");
		}
		
		return PatientDocumentVoAssembler.create((PatientDocument) getDomainFactory().getDomainObject(PatientDocument.class, documentID.getID_PatientDocument()));
	}

	public GpLiteVo getPatientGp(PatientRefVo patient) 
	{
		if(patient == null || !patient.getID_PatientIsNotNull())
			throw new CodingRuntimeException("Can not get Patient Gp on null Patient.");
		
		DomainFactory factory = getDomainFactory();
		
		List<?> gpList = factory.find("select gp from Patient as p left join p.gp as gp where p.id = :patientid", new String[] {"patientid"}, new Object[] {patient.getID_Patient()});
		
		if(gpList == null || gpList.size() == 0)
			return null;
		
		return GpLiteVoAssembler.create((Gp) gpList.get(0));
	}

	public PatientDocumentSearchListVoCollection listPatientDocuments(PatientRefVo patientRef, EpisodeOfCareRefVo eoc, Specialty speciality, HcpRefVo authoringHcp, Date documentDateFrom, Date documentDateTo, DocumentCategory documentType, HcpRefVo responsibleHcp,Boolean useGenerated) 
	{
		if (patientRef == null || !patientRef.getID_PatientIsNotNull())
		{
			throw new CodingRuntimeException("Supplied patient is null or doesn't have and id.");
		}
		
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		StringBuilder sbJoins = new StringBuilder("select distinct p1_1 from PatientDocument as p1_1 ");
		StringBuilder sbQuery = new StringBuilder(" where ( p1_1.patient.id = :Patient_id ");	//WDEV-12352 , 	WDEV-12723
				
				
		paramNames.add("Patient_id");
		paramValues.add(patientRef.getID_Patient());
		

		if (eoc != null )
		{
			sbQuery.append(" and p1_1.episodeofCare.id = :EpisodeOfCare_id ");
			paramNames.add("EpisodeOfCare_id");
			paramValues.add(eoc.getID_EpisodeOfCare());
		}
		
		if ( speciality != null )
		{
			sbJoins.append(" left join p1_1.specialty as l1_1");
			sbQuery.append("and l1_1.id = :Speciality_id ");
			paramNames.add("Speciality_id");
			paramValues.add(speciality.getID());
		}
		
		if (authoringHcp  != null )
		{
			sbQuery.append("and p1_1.authoringHCP.id = :authoring_id ");
			paramNames.add("authoring_id");
			paramValues.add(authoringHcp.getID_Hcp());
			
		}
		final String dateColum = useGenerated!=null&&useGenerated?"recordingDateTime":"documentDate";
		if (documentDateFrom  != null )
		{
			sbQuery.append("and p1_1.").append(dateColum).append(" >= :dateFrom ");
			paramNames.add("dateFrom");
			paramValues.add(documentDateFrom.getDate());
			
		}
		
		if (documentDateTo != null)
		{
			sbQuery.append("and p1_1.").append(dateColum).append(" < :dateTo ");
			paramNames.add("dateTo");
			paramValues.add(((Date) documentDateTo.clone()).addDay(1).getDate());
		}
		
		if (documentType != null)
		{
			sbJoins.append(" left join p1_1.category as l2_1");
			sbQuery.append("and l2_1.id = :DocumentType_id ");
			paramNames.add("DocumentType_id");
			paramValues.add(documentType.getID());
		}
		
		if(responsibleHcp != null)
		{
			sbQuery.append("and p1_1.responsibleHCP.id = :responsible_id ");
			paramNames.add("responsible_id");
			paramValues.add(responsibleHcp.getID_Hcp());
		}
		
		//begin WDEV-13645
		sbQuery.append("and p1_1.status.id != :docstatus");
		paramNames.add("docstatus");
		paramValues.add(new Integer(PreActiveActiveInactiveStatus.INACTIVE.getID()));
		//end WDEV-13645
		
		sbQuery.append(" ) and (p1_1.isRIE is null or p1_1.isRIE = 0) order by p1_1.recordingDateTime desc ");//WDEV-15417
		
		sbJoins.append(sbQuery.toString());
		
		sbQuery = null;
		
		List<?> domainObjects = getDomainFactory().find(sbJoins.toString(), paramNames, paramValues);
		
		sbJoins = null;
		
		if(domainObjects == null || domainObjects.size() == 0)
			return null;
		
		return PatientDocumentSearchListVoAssembler.createPatientDocumentSearchListVoCollectionFromPatientDocument(domainObjects);
	}
}
