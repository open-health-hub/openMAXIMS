//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.53 build 2566.22702)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.GPAdmin;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.MosAdmin;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.GPAdminImpl;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.MosAdminImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.domain.base.impl.BaseReportRunnerDialogImpl;
import ims.core.vo.GpShortVoCollection;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocSiteLiteVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.OrgShortVo;
import ims.core.vo.OrgShortVoCollection;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.DomainInterfaceException;

import java.util.ArrayList;
import java.util.List;

public class ReportRunnerDialogImpl extends BaseReportRunnerDialogImpl
{
	private static final long	serialVersionUID	= 1L;

	
	/**
	 * WDEV-12753
	 * Function used to search for seeds with custom search activated
	 * @throws DomainInterfaceException 
	 */
	public ArrayList<Object[]> listCustomSearchSeed(String name, String seedField, String[] displayFields, String[] searchFields, String text) throws DomainInterfaceException
	{
		if (name == null || name.trim().length() == 0)
			return null;
		
		if (seedField == null || seedField.trim().length() == 0)
			return null;
		
		if (displayFields == null || displayFields.length == 0 || searchFields == null || searchFields.length == 0)
			return null;
		
		String[] splitTextValues = text.split(",");
		
		if (splitTextValues.length != searchFields.length)
			throw new DomainInterfaceException("Searching doesn't match the number of parameters");
		
		StringBuilder query = new StringBuilder();
		query.append("SELECT ").append(name.toLowerCase()).append("1_1").append(".").append(seedField);
		
		String separator = ", ";
		
		for (int i = 0; i < displayFields.length; i++)
		{
			query.append(separator);
			query.append(name.toLowerCase()).append("1_1").append(".").append(displayFields[i]);
			
			separator = ", ";
		}
		
		query.append(" FROM ").append(name).append(" AS ").append(name.toLowerCase()).append("1_1").append(" WHERE ");
		
		separator = " ";
		
		for (int i = 0; i < searchFields.length; i++)
		{
			query.append(separator);
			query.append("UPPER(").append(searchFields[i]).append(")").append(" LIKE '").append(splitTextValues[i].trim().toUpperCase()).append("%").append("'");
			
			separator = " AND ";
		}
		
		@SuppressWarnings("rawtypes")
		List resultList = getDomainFactory().find(query.toString());
		
		if (resultList == null || resultList.size() == 0)
			return null;
		
		// Build report seed collection for return manually
		ArrayList<Object[]> reportSeedCollection = new ArrayList<Object[]>();

		for (int i = 0; i < resultList.size(); i++)
		{
			if ((resultList.get(i) instanceof Object[]) && ((Object[])resultList.get(i)).length > 0)
			{
				Object[] elements = (Object[]) resultList.get(i);
				
				Object[] reportSeed = new Object[2];
				
				reportSeed[0] = elements[0];
				
				StringBuilder displayString = new StringBuilder();
				separator = "";
				for (int displayFieldIndex = 1; displayFieldIndex < elements.length; displayFieldIndex++)
				{
					displayString.append(separator);
					displayString.append(elements[displayFieldIndex]);
					
					separator = ", ";
				}
				
				reportSeed[1] = displayString.toString();
				
				reportSeedCollection.add(reportSeed);
			}
		}
		
		return reportSeedCollection;
	}

	public GpShortVoCollection listGPsBySurname(String surname)
	{
		GPAdmin gpAdmin = (GPAdmin) getDomainImpl(GPAdminImpl.class);
		return gpAdmin.listGPsBySurname(surname);
	}

	public HcpLiteVoCollection listHcpLiteByNameAndDisciplineType(String hcpName, HcpDisType hcpDisciplineType)
	{
		HcpAdmin hcpAdmin = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHcpLiteByNameAndDisciplineType(hcpName, hcpDisciplineType);
	}

	public OrgShortVoCollection listOrganisationsShort(OrgShortVo filter)
	{
		OrganisationAndLocation organisationAndLocation = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return organisationAndLocation.listOrganisationsShort(filter);
	}

	public LocSiteLiteVoCollection listLocSite(String locationName)
	{
		OrganisationAndLocation organisationAndLocation = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return organisationAndLocation.listLocSite(locationName);
	}

	public LocationLiteVoCollection listLocationByName(String locationName)
	{
		OrganisationAndLocation organisationAndLocation = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return organisationAndLocation.listLocationByName(locationName);
	}

	public MemberOfStaffShortVoCollection listMembersOfStaff(MemberOfStaffShortVo filter)
	{
		MosAdmin mosAdmin = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		return mosAdmin.listMembersOfStaff(filter);
	}

	public Integer getLokupType(String lookupType)
	{
		String hql = "select look.id from Lookup as look where look.name = :LKTYPE";
		
		List<?> result = getDomainFactory().find(hql, "LKTYPE", lookupType);

		if (result != null && result.size() > 0 && result.get(0) instanceof Integer)
			return (Integer) result.get(0);
		
		return null;
	}
}
