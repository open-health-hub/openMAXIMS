//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Callum Wells using IMS Development Environment (version 1.20 build 40813.1300)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.vitals.domain.objects.Urinalysis;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.UrinalysisCollection;
import ims.core.vo.domain.UrinalysisAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.framework.enumerations.SortOrder;

public class UrinalysisImpl extends DomainImpl implements ims.core.domain.Urinalysis, ims.domain.impl.Transactional
{
	/**
	* lists Urinanalysis records
	*/
	public UrinalysisCollection listUrinanalysis(ims.core.vo.Urinalysis voUrinalysis)throws DomainInterfaceException
	{	
		UrinalysisCollection voCollUrinanalysis = new UrinalysisCollection();
		if(voCollUrinanalysis == null)
			return voCollUrinanalysis;
		
		DomainFactory factory = getDomainFactory();	
		StringBuffer hql = new StringBuffer("");
		String query = "from Urinalysis t";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = "";
		
		if (voUrinalysis.getCareContextIsNotNull())
		{
			hql.append(andStr + " t.careContext.id = :cc");
			markers.add("cc");
			values.add(voUrinalysis.getCareContext().getID_CareContext());
			andStr = " and";
			
			if(voUrinalysis.getIsActiveIsNotNull()) //the active ones
			{
				hql.append(andStr + " t.isActive = :active");
				markers.add("active");
				values.add(voUrinalysis.getIsActive());
				andStr = " and";
			}
		}

		if(andStr.equals(" and"))
			query += " where";
		
		query += hql.toString();
		List urs = factory.find(query, markers, values);							
		return UrinalysisAssembler.createUrinalysisCollectionFromUrinalysis(urs).sort(SortOrder.DESCENDING);
	
	}
	
	public ims.core.vo.Urinalysis saveUrinanalysis(ims.core.vo.Urinalysis voUrinanalysis) throws StaleObjectException
	{
		if (!voUrinanalysis.isValidated())
		{
			throw new DomainRuntimeException("Urinanalysis has not been validated");
		}
		
		DomainFactory factory = getDomainFactory();
		Urinalysis doUrinalysis = UrinalysisAssembler.extractUrinalysis(factory, voUrinanalysis);
		
		//java.util.Set formsCSet = doNursingEpisDetails.getUrinalysis();
		//formsCSet.add(doUrinalysis);
	
		voUrinanalysis.setID_Urinalysis(doUrinalysis.getId());
		
		factory.save(doUrinalysis);
		return UrinalysisAssembler.create(doUrinalysis);
	}		
	
	public HcpCollection listHcps(HcpFilter hcpFilter) {
		HcpAdmin hcpAdmin = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(hcpFilter);
	}
}
