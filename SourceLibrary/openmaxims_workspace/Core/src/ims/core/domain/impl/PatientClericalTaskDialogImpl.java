//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.domain.base.impl.BasePatientClericalTaskDialogImpl;
import ims.core.vo.PatientClericalTaskVo;
import ims.core.vo.PatientClericalTaskVoCollection;
import ims.core.vo.domain.PatientClericalTaskVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.orderingresults.domain.objects.PatientClericalTask;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.orderingresults.vo.PatientClericalTaskRefVo;

import java.util.List;

public class PatientClericalTaskDialogImpl extends BasePatientClericalTaskDialogImpl
{
	private static final long serialVersionUID = 1L;

	public ims.core.vo.PatientClericalTaskVo savePatientClericalTask(ims.core.vo.PatientClericalTaskVo patientClericalTask) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if (patientClericalTask == null)

			throw new CodingRuntimeException("Cannot save patientClericalTask if null . ");
		
		if (!patientClericalTask.isValidated())
			throw new CodingRuntimeException("PatientClericalTaskVo not Validated");

		try
		{
			DomainFactory factory = getDomainFactory();
			PatientClericalTask clericalTask = PatientClericalTaskVoAssembler.extractPatientClericalTask(factory, patientClericalTask);
			
			factory.save(clericalTask);
			return PatientClericalTaskVoAssembler.create(clericalTask);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException("A PatientClericalTask for this investigation already exist!", e);
		}
	}
	
	public PatientClericalTaskVo getPatientClericalTask(PatientClericalTaskRefVo patientClericalTaskId) 
	{
		if (patientClericalTaskId == null || patientClericalTaskId.getID_PatientClericalTask() == null)
		{
			throw new CodingRuntimeException("Cannot get PatientClericalTaskRefVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		PatientClericalTask domainPatientClericalTask = (PatientClericalTask) factory.getDomainObject(PatientClericalTask.class, patientClericalTaskId.getID_PatientClericalTask());
	
		return PatientClericalTaskVoAssembler.create(domainPatientClericalTask);
		
	}

	public Boolean isStale(PatientClericalTaskVo localContext) 
	{
		if (localContext == null || localContext.getID_PatientClericalTask()== null)
		{
			throw new CodingRuntimeException("Cannot get PatientClericalTaskVo on null Id ");
		}
				
		DomainFactory factory = getDomainFactory();
		PatientClericalTask domainPatientClericaltask = (PatientClericalTask) factory.getDomainObject(PatientClericalTask.class, localContext.getID_PatientClericalTask());
		
		if(domainPatientClericaltask==null)
		{
			return true;
		}
		
		if (domainPatientClericaltask.getVersion() > localContext.getVersion_PatientClericalTask())
		{
			return true;
		}
		
		return false;
	}

	public PatientClericalTaskVoCollection getPatientClericalTasksByResultSelected(OrderInvestigationRefVo resultSelectedId) //WDEV-14080
	{
		if(resultSelectedId == null || resultSelectedId.getID_OrderInvestigation() == null)
			throw new CodingRuntimeException("Can not get ResultSelected value on null Id.");
		
		StringBuffer hql = new StringBuffer();
		hql.append("select patClericalTask from PatientClericalTask as patClericalTask left join patClericalTask.investigation as orderInvestigation ");
		hql.append("where orderInvestigation.id = :orderId ");
		hql.append("order by patClericalTask.requestedDateTime desc");
		
		DomainFactory factory = getDomainFactory();
		List<?> list = factory.find(hql.toString(), new String[] {"orderId"}, new Object[] {resultSelectedId.getID_OrderInvestigation()});
		
		return PatientClericalTaskVoAssembler.createPatientClericalTaskVoCollectionFromPatientClericalTask(list); //WDEV-14080
		
	}

}
