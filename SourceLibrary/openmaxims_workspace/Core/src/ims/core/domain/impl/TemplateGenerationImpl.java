//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import ims.core.domain.base.impl.BaseTemplateGenerationImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.InpatientEpisodeLiteVoCollection;
import ims.core.vo.domain.InpatientEpisodeLiteVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.lookups.LookupMapping;
import ims.vo.LookupInstVo;
import ims.vo.LookupMappingVo;
import ims.vo.LookupMappingVoCollection;

public class TemplateGenerationImpl extends BaseTemplateGenerationImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.LocationLiteVoCollection getWard(String str)
	{
		DomainFactory factory = getDomainFactory();
		
		List locations;

		String hql = " from Location loc ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		
		condStr.append(andStr + " loc.type = :locType");
		markers.add("locType");
		values.add(getDomLookup(LocationType.WARD));
		andStr = " and ";
				
		if (str != null)
		{
			condStr.append(andStr + " loc.upperName like :name");
			markers.add("name");
			values.add(str.toUpperCase() + "%");
			andStr = " and ";
		}
		
		
		if (andStr.equals(" and "))
		{
			hql += " where ";
		}

		hql += condStr.toString();
		locations = factory.find(hql, markers, values);
		
		if(locations != null && locations.size() > 0)
		{
			return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(locations).sort();
		}
		else
			return null;
	}

	public InpatientEpisodeLiteVo getInpatientEpisodes(PatientRefVo patientId) 
	{
		DomainFactory factory = getDomainFactory();
		String hql;
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		hql = " from InpatientEpisode ip "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		if (patientId != null)
		{
			condStr.append(andStr + " ip.pasEvent.patient.id = :patient");
			markers.add("patient");
			values.add(patientId.getID_Patient());
			andStr = " and ";
		}
		

		if (andStr.equals(" and "))
		{
			hql += " where ";
		}
		
		hql += condStr.toString();
		List ips = factory.find(hql, markers, values);
		
		if(ips != null && ips.size() > 0)
		{
			InpatientEpisodeLiteVoCollection tempColl = InpatientEpisodeLiteVoAssembler.createInpatientEpisodeLiteVoCollectionFromInpatientEpisode(ips);
			if(tempColl != null && tempColl.size() > 0)
				return tempColl.get(0);
			else
				return null;
		}
		else
			return null;
	}

	public LookupInstVo getMappings(LookupInstVo instance) 
	{
		DomainFactory factory = getDomainFactory();
		ims.domain.lookups.LookupInstance doInst = factory.getLookupInstance(instance.getId());
		Set mappings = doInst.getMappings();
		LookupMappingVoCollection mapColl = new LookupMappingVoCollection();
		Iterator iter = mappings.iterator();
		LookupMapping doMapping;
		while (iter.hasNext())
		{
			doMapping = (LookupMapping) iter.next();
			mapColl.add(new LookupMappingVo(doMapping.getExtSystem(), doMapping.getExtCode()));
		}
		mapColl.sort();
		instance.setMappings(mapColl);
		return instance;
	}
}
