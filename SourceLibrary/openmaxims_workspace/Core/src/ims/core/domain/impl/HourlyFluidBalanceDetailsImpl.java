//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.45 build 2426.28575)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.domain.FluidBalanceConfirm;
import ims.core.domain.base.impl.BaseFluidBalanceDetailsImpl;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vitals.domain.objects.DailyFluidBalance;
import ims.core.vo.DailyFluidBalanceVo;
import ims.core.vo.DailyFluidBalanceVoCollection;
import ims.core.vo.FluidBalanceInstanceVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.domain.DailyFluidBalanceVoAssembler;
import ims.core.vo.domain.FluidBalanceInstanceVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;

public class HourlyFluidBalanceDetailsImpl extends BaseFluidBalanceDetailsImpl implements FluidBalanceConfirm
{

	private static final long serialVersionUID = 1L;

	public DailyFluidBalanceVo saveDailyFluidBalance(DailyFluidBalanceVo dfbVo) throws DomainInterfaceException, StaleObjectException 
	{
		if (!dfbVo.isValidated())
			throw new DomainRuntimeException("FluidBalance details have not been validated!");
		
		DomainFactory factory = getDomainFactory();
		DailyFluidBalance domBalance = DailyFluidBalanceVoAssembler.extractDailyFluidBalance(factory, dfbVo);

		factory.save(domBalance);
			
		return (DailyFluidBalanceVoAssembler.create(domBalance));
	}

	public HcpLiteVo getHcpLiteById(HcpRefVo refId) 
	{
		if(refId == null)
			throw new CodingRuntimeException("null refId passed to getHcpById() !");

		DomainFactory factory = getDomainFactory();
		
		ims.core.resource.people.domain.objects.Hcp boHcp = (ims.core.resource.people.domain.objects.Hcp)factory.getDomainObject(ims.core.resource.people.domain.objects.Hcp.class, refId.getID_Hcp());
		
		return HcpLiteVoAssembler.create(boHcp);
	}

	public FluidBalanceInstanceVoCollection getFluidBalanceInstancesForContextAndDate(CareContextRefVo contextVo, DateTime datetimeStartShift, DateTime datetimeEndShift)
	{
		DomainFactory factory = getDomainFactory();
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		final String andStr = " and ";
		 
		String query = "select distinct dfb.fluidBalanceInstances from DailyFluidBalance as dfb left join dfb.fluidBalanceInstances as fbi where dfb.isRIE is null";
		
		StringBuffer hql = new StringBuffer(""); 

		if (contextVo != null)
		{
			hql.append(andStr + " dfb.careContext.id = :cc");
			markers.add("cc");
			values.add(contextVo.getID_CareContext());
			
		}
		if (datetimeStartShift != null)
		{
			hql.append(andStr + " dfb.shiftDetails.startDateTime >= :sdate ");
			markers.add("sdate");
			values.add(datetimeStartShift.getJavaDate());
			
		}
		if (datetimeEndShift != null)
		{
			hql.append(andStr + " ( dfb.shiftDetails.endDateTime <= :edate ) ");
			markers.add("edate");
			values.add(datetimeEndShift.getJavaDate());
			
		}
		
		
		query += hql.toString();
		List<?> fluidList = factory.find(query, markers, values);
		return FluidBalanceInstanceVoAssembler.createFluidBalanceInstanceVoCollectionFromFluidBalanceInstance(fluidList).sort(SortOrder.DESCENDING);
	}

	public DailyFluidBalanceVo getDailyFluidBalanceDetailsByContextDateAndTimePeriod(CareContextRefVo contextRefVo, ims.framework.utils.DateTime datetimeStartShift, ims.framework.utils.DateTime datetimeEndShift) 
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from DailyFluidBalance dfb";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = " ";

/*		
		from DailyFluidBalance as d1_1 left join d1_1.clinicalContact as c1_1 left
		join d1_1.fluidBalanceInstances as f1_1 left join d1_1.shiftDetails as
		s1_1 left join d1_1.careContext as c2_1

		where

		(d1_1.clinicalContact = 1 and c2_1.id = 2 and f1_1.fluidBalanceDate = '06
		Sep 2006 00:00:00' and s1_1.startDateTime >= '06 Sep 2006 00:00:00' and
		s1_1.endDateTime <= '06 Sep 2006 00:00:00')

		 and d1_1.isRIE is null
*/		 
		if (contextRefVo != null)
		{
			hql.append(andStr + " dfb.careContext.id = :cc");
			markers.add("cc");
			values.add(contextRefVo.getID_CareContext());
			andStr = " and ";
		}
		if (datetimeStartShift != null)
		{
			hql.append(andStr + " dfb.shiftDetails.startDateTime >= :sdate");
			markers.add("sdate");
			values.add(datetimeStartShift.getJavaDate());
			andStr = " and ";
		}
		if (datetimeEndShift != null)
		{
			hql.append(andStr + " dfb.shiftDetails.endDateTime <= :edate");
			markers.add("edate");
			values.add(datetimeEndShift.getJavaDate());
			andStr = " and ";
		}
		
		if (andStr.equals(" and "))
			query += " where ";
		
		query += hql.toString();
		List<?> fluidList = factory.find(query, markers, values);
		DailyFluidBalanceVoCollection voDailyFluidBalanceColl = DailyFluidBalanceVoAssembler.createDailyFluidBalanceVoCollectionFromDailyFluidBalance(fluidList).sort(SortOrder.DESCENDING);
		if (voDailyFluidBalanceColl.size() > 0)
			return voDailyFluidBalanceColl.get(0);
		else
			return null;
	}


}
