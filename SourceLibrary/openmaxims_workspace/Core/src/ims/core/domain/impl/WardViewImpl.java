//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3341.28572)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.pas.domain.objects.AdmissionDetail;
import ims.core.admin.pas.domain.objects.BedSpaceState;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.admin.pas.vo.PendingTransfersRefVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.domain.objects.PatientAlert;
import ims.core.clinical.domain.objects.PatientAllergy;
import ims.core.domain.Alerts;
import ims.core.domain.BayLayoutConfig;
import ims.core.domain.BedAdmissionComponent;
import ims.core.domain.BedInfoDialog;
import ims.core.layout.domain.objects.FloorBedSpaceLayout;
import ims.core.layout.vo.BedSpaceRefVo;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.AdmissionDetailLiteVo;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateLiteVoCollection;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.FloorBedSpaceLayoutVo;
import ims.core.vo.FloorBedSpaceLayoutVoCollection;
import ims.core.vo.InpatientEpisodeLiteVoCollection;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientElectiveListForWardViewVoCollection;
import ims.core.vo.PendingElectiveAdmissionAdmitVoCollection;
import ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection;
import ims.core.vo.PendingTransfersLiteVoCollection;
import ims.core.vo.WardBayConfigVo;
import ims.core.vo.domain.AdmissionDetailLiteVoAssembler;
import ims.core.vo.domain.BedSpaceStateLiteVoAssembler;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.FloorBedSpaceLayoutLiteVoAssembler;
import ims.core.vo.domain.FloorBedSpaceLayoutVoAssembler;
import ims.core.vo.domain.InpatientEpisodeLiteVoAssembler;
import ims.core.vo.domain.LocMostVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.PatientElectiveListForWardViewVoAssembler;
import ims.core.vo.domain.PendingElectiveAdmissionAdmitVoAssembler;
import ims.core.vo.domain.PendingTransfersLiteVoAssembler;
import ims.core.vo.lookups.ElectiveAdmissionStatus;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.TransferStatus;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.dto.DTODomainImplementation;
import ims.dto.Result;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class WardViewImpl extends DTODomainImplementation implements ims.core.domain.WardView, ims.domain.impl.Transactional
{

	private static final long serialVersionUID = 1L;

	/**
	* Lists all floor layouts
	*/
	public ims.core.vo.FloorBedSpaceLayoutLiteVoCollection list()
	{
		DomainFactory factory = getDomainFactory();
		String hql = " from FloorBedLayout fbl where fbl.status.id = " + PreActiveActiveInactiveStatus.ACTIVE.getID();
		return FloorBedSpaceLayoutLiteVoAssembler.createFloorBedSpaceLayoutLiteVoCollectionFromFloorBedSpaceLayout(factory.find(hql)).sort();
	}

	public ims.core.vo.FloorBedSpaceLayoutVo get(ims.core.layout.vo.FloorBedSpaceLayoutRefVo id)
	{
		if(id == null)
			throw new DomainRuntimeException("Invalid Floor Bed Layout");
		
		return FloorBedSpaceLayoutVoAssembler.create((FloorBedSpaceLayout)getDomainFactory().getDomainObject(id));
	}
	
	public ims.core.vo.LocationLiteVoCollection listWardsForCurrentLocation(ILocation location)
	{
		if(location == null)
			return null;
		
		OrganisationAndLocation implLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		LocationRefVo voRef = new LocationRefVo();
		voRef.setID_Location(location.getID());
		return implLoc.listActiveWardsForHospitalLite(voRef).sort();
	}
	
	public ims.core.vo.LocationLiteVoCollection listBaysForCurrentWard(ILocation location)
	{
		if(location == null )
			throw new DomainRuntimeException("Invalid ILocation");
		
		String hql = "from Location loc where loc.type = " + LocationType.BAY.getId() + " and loc.isActive = 1 and loc.parentLocation.id = " + location.getID();		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(getDomainFactory().find(hql));
	}
	
	public FloorBedSpaceLayoutVo listLayoutForCurrentBay(ILocation location)
	{
 		if(location == null )
			throw new DomainRuntimeException("Invalid ILocation");
		
		String hql = "select layout from BayConfig as bc left join bc.bay as bay left join bc.floorBedSpaceLayout as layout where layout.status.id = " + PreActiveActiveInactiveStatus.ACTIVE.getID() +  " and  bay.id = " + location.getID();
		List layout = getDomainFactory().find(hql);
		
		FloorBedSpaceLayoutVoCollection voColl = FloorBedSpaceLayoutVoAssembler.createFloorBedSpaceLayoutVoCollectionFromFloorBedSpaceLayout(layout);
		
		if (voColl != null &&
				voColl.size() > 0)
			return voColl.get(voColl.size()-1);		
		
		return null;
	}

	public BedSpaceStateLiteVo getBedSpaceState(BedSpaceRefVo bed) 
	{
		if(bed == null )
			throw new DomainRuntimeException("Invalid BedRefVo");
		
		String hql = "select bs from BedSpaceState as bs left join bs.bedSpace as bed where bed.id = " + bed.getID_BedSpace();
		List bedState = getDomainFactory().find(hql);
		
		//WDEV-11039
		boolean hasAlerts = false;
		if(bedState != null && bedState.size() > 0)
		{	
			BedSpaceState doBed = (BedSpaceState)bedState.get(0);
			if(doBed.getInpatientEpisode() != null && doBed.getInpatientEpisode().getPasEvent() != null && doBed.getInpatientEpisode().getPasEvent().getPatient() != null && doBed.getInpatientEpisode().getPasEvent().getPatient().getPatientAlerts() != null)
				if(doBed.getInpatientEpisode().getPasEvent().getPatient().getPatientAlerts().size() > 0 && isOneActive(doBed.getInpatientEpisode().getPasEvent().getPatient().getPatientAlerts(), true))
					hasAlerts = true;
		}
		
		BedSpaceStateLiteVoCollection voColl = BedSpaceStateLiteVoAssembler.createBedSpaceStateLiteVoCollectionFromBedSpaceState(bedState);
		
		if (voColl != null && voColl.size() > 0)
		{
			if(voColl.get(0).getInpatientEpisodeIsNotNull() && voColl.get(0).getInpatientEpisode().getPasEventIsNotNull() && voColl.get(0).getInpatientEpisode().getPasEvent().getPatientIsNotNull())
				voColl.get(0).getInpatientEpisode().getPasEvent().getPatient().setHasAlerts(hasAlerts);
			
			return voColl.get(0);		
		}
		return null;
	}

	private boolean isOneActive(Set setAlertsOrAllergies, boolean isAlert)
	{
		if(isAlert)
		{
			Iterator it = setAlertsOrAllergies.iterator();
			while(it.hasNext())
			{
				PatientAlert doAlert = (PatientAlert) it.next();
				if(doAlert.isIsCurrentlyActiveAlert() != null && doAlert.isIsCurrentlyActiveAlert() && (doAlert.getIsRIE() == null || !doAlert.getIsRIE()))
					return true;
			}
		}
		else if(!isAlert) //allergy
		{
			Iterator it = setAlertsOrAllergies.iterator();
			while(it.hasNext())
			{
				PatientAllergy doAllergy = (PatientAllergy) it.next();
				if(doAllergy.isIsCurrentlyActiveAllergy() != null && doAllergy.isIsCurrentlyActiveAllergy() && (doAllergy.getIsRIE() == null || !doAllergy.getIsRIE()))
					return true;
			}
		}
		
		return false;
	}

	public InpatientEpisodeLiteVoCollection listInpatientEpisodeByWard(LocationRefVo ward)
	{
		if(ward == null || ward.getID_Location() == null)
			throw new CodingRuntimeException("ward is null or id not provide in method listInpatientEpisodeByWard");
		
		String hql = "from InpatientEpisode inpat join fetch inpat.bed as bed where (inpat.pasEvent.location.id = :idWard and bed is not null) order by bed.bay asc, inpat.pasEvent.patient.name.upperSurname asc,inpat.pasEvent.patient.name.upperForename asc";
		List inpatEpis = getDomainFactory().find(hql, new String[]{"idWard"}, new Object[]{ward.getID_Location()});
		return InpatientEpisodeLiteVoAssembler.createInpatientEpisodeLiteVoCollectionFromInpatientEpisode(inpatEpis);
	}

	public PendingEmergencyAdmissionAdmitVoCollection listEmergencyAdmission(LocationRefVo location)
	{
		BedAdmissionComponent impl = (BedAdmissionComponent) getDomainImpl(BedAdmissionComponentImpl.class);
		return impl.listEmergencyAdmission(location);
	}

	public PendingElectiveAdmissionAdmitVoCollection listPendingElectiveAdmission(LocationRefVo voLocation)
	{
		if(voLocation == null)
			throw new CodingRuntimeException("voLocation is null in method listPendingElectiveAdmission");
		
		DomainFactory factory = getDomainFactory();
		List pendingElectives = factory.find("from PendingElectiveAdmission pea where (pea.tCIDate = :today or pea.tCIDate = :yesterday) and pea.allocatedWard.id = :idWard and pea.electiveAdmissionStatus = :status", new String[]{"today","yesterday", "idWard","status"}, new Object[]{new Date().getDate(), new Date().addDay(-1).getDate(),voLocation.getID_Location(), getDomLookup(ElectiveAdmissionStatus.TCI)});
		return PendingElectiveAdmissionAdmitVoAssembler.createPendingElectiveAdmissionAdmitVoCollectionFromPendingElectiveAdmission(pendingElectives);
	}

	public PendingTransfersLiteVoCollection listPendingTransfersInByWard(LocationRefVo destWard)
	{
		if(destWard == null || destWard.getID_Location() == null)
			throw new CodingRuntimeException("destWard is null or id not provided in method listPendingTransfersInByWard");
		
		String hql = "from PendingTransfers pend where pend.destinationWard.id = :idWard and pend.currentStatus = :status";
		List pendingTrans = getDomainFactory().find(hql, new String[]{"idWard","status"}, new Object[]{destWard.getID_Location(), getDomLookup(TransferStatus.PENDING)});
		return PendingTransfersLiteVoAssembler.createPendingTransfersLiteVoCollectionFromPendingTransfers(pendingTrans);
	}

	public PendingTransfersLiteVoCollection listPendingTransfersOutByWard(LocationRefVo currentLocation)
	{
		if(currentLocation == null || currentLocation.getID_Location() == null)
			throw new CodingRuntimeException("currentLocation is null or id not provided in method listPendingTransfersOutByWard");
		
		String hql = "from PendingTransfers pend where pend.inpatientEpisode.pasEvent.location.id = :idWard and pend.currentStatus = :status order by pend.inpatientEpisode.pasEvent.patient.name.upperSurname asc, pend.inpatientEpisode.pasEvent.patient.name.upperForename asc";
		List pendingTrans = getDomainFactory().find(hql, new String[]{"idWard","status"}, new Object[]{currentLocation.getID_Location(), getDomLookup(TransferStatus.PENDING)});
		return PendingTransfersLiteVoAssembler.createPendingTransfersLiteVoCollectionFromPendingTransfers(pendingTrans);
	}

	public LocationLiteVoCollection listActiveHospitalsLite()
	{
		BedInfoDialog impl = (BedInfoDialog) getDomainImpl(BedInfoDialogImpl.class);
		return impl.listActiveHospitalsLite();
	}

	public WardBayConfigVo getWardBayConfigByWard(LocationRefVo ward)
	{
		BayLayoutConfig impl = (BayLayoutConfig) getDomainImpl(BayLayoutConfigImpl.class);
		return impl.getWardBayConfigByWard(ward);
	}

	public InpatientEpisodeLiteVoCollection listWaitingAreaPatientsByWard(LocationRefVo ward)
	{
		if(ward == null || ward.getID_Location() == null)
			throw new CodingRuntimeException("ward is null or id not provided in method listWaitingAreaPatientsByWard");
		
		String hql = "from InpatientEpisode inpat left join fetch inpat.bed as bedspace where inpat.pasEvent.location.id = :idWard and bedspace is null and (inpat.isOnHomeLeave is null or inpat.isOnHomeLeave = :bFalse) order by inpat.pasEvent.patient.name.upperSurname ";
		List inpatEpis = getDomainFactory().find(hql, new String[]{"idWard", "bFalse"}, new Object[]{ward.getID_Location(), Boolean.FALSE});
		return InpatientEpisodeLiteVoAssembler.createInpatientEpisodeLiteVoCollectionFromInpatientEpisode(inpatEpis);
	}

	public LocMostVo getLocation(LocationRefVo voLocRef)
	{
		DomainFactory factory = getDomainFactory();
		return LocMostVoAssembler.create((Location) factory.getDomainObject(Location.class, voLocRef.getID_Location()));
	}

	public int countInfants(PatientRefVo patient)
	{
		if (patient == null || patient.getID_Patient() == null)
			throw new CodingRuntimeException("patient is null or id not provided in method countInfants");
		
		String hql = "select count (inpatEpis.id) from InpatientEpisode as inpatEpis left join inpatEpis.pasEvent as pE where (pE.patient.id in (select pat.id from Patient as pat where (pat.clientParent.id = " + patient.getID_Patient() + ")))";
		List lstCount = getDomainFactory().find(hql);
		if(lstCount != null && lstCount.size() == 1)
			return ((Long)lstCount.get(0)).intValue();
		
		return 0;
	}

	public void cancelTransfer(PendingTransfersRefVo voTransfer, LocationRefVo voCancellingfromWard) throws StaleObjectException, ForeignKeyViolationException
	{
		BedInfoDialog impl = (BedInfoDialog) getDomainImpl(BedInfoDialogImpl.class);
		impl.cancelTransfer(voTransfer,voCancellingfromWard);
	}

	public AdmissionDetailLiteVo getMothersAdmission(PatientRefVo patient)
	{
		if (patient == null || patient.getID_Patient() == null)
			throw new CodingRuntimeException("patient is null or id not provided in method getMothersAdmission");
		
		//get the patient to read ClientParent value
		Patient doPatient = (Patient) getDomainFactory().getDomainObject(patient); 		
		
		if(doPatient != null && doPatient.getClientParent() != null)
		{
			List admissions = getDomainFactory().find("from AdmissionDetail adm left join fetch adm.pasEvent as pe left join fetch pe.patient as pat where pat.id = " + doPatient.getClientParent().getId());
			if(admissions != null && admissions.size() > 0)
				return AdmissionDetailLiteVoAssembler.create((AdmissionDetail) admissions.get(0));
		}
		
		return null;
	}

	public CareContextShortVo getCareContextForPasEvent(PASEventRefVo pasEvent)
	{
		if (pasEvent == null || pasEvent.getID_PASEvent() == null)
			throw new CodingRuntimeException("pasEvent is null or id not provided in method getCareContextForPasEvent");
		
		List ccList = getDomainFactory().find(" from CareContext cc where cc.pasEvent.id = " + pasEvent.getID_PASEvent());
		if(ccList != null && ccList.size() == 1)
			return  CareContextShortVoAssembler.create((CareContext) ccList.get(0));
		
		return null;
	}

	public String[] getSystemReportAndTemplate(Integer imsId)
	{
		String[] result = null;
		
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.imsId= :imsid) order by t1_1.name", new String[] {"imsid"}, new Object[] {imsId});
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
			
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
		
		return result;
	}

	
	//wdev-13343
	public ims.dto.client.Patient getPatient(String pid, String identifier) throws DomainInterfaceException
	{
		ims.dto.client.Patient patient = (ims.dto.client.Patient)getDTOInstance(ims.dto.client.Patient.class);
		patient.Filter.clear();
		if (pid != null && pid.equals("-549"))
			patient.Filter.Nhsn = identifier;
		else
			patient.Filter.Hospnum = identifier;
		
		Result result = patient.get();
		
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return patient;
		
	}

	//wdev-13343
	public ims.dto.client.Patient getCCODTOPatient(String pkey)	throws DomainInterfaceException 
	{
		if(pkey == null)
			throw new DomainRuntimeException("Cannot get Patient for null pkey");
		
		ims.dto.client.Patient patient = (ims.dto.client.Patient)getDTOInstance(ims.dto.client.Patient.class);
		patient.Filter.clear();
		patient.Filter.Pkey = pkey;
		
		Result result = patient.get();
		if (result != null)
		{
			if(result.getId() == -2)
				throw new DomainInterfaceException("Error Getting Patient Details for pkey = " + pkey);

			throw new DomainInterfaceException(result.getMessage());
		}

		if (patient.DataCollection.count()!= 1)
			throw new DomainInterfaceException("Failed to get patient record.");
		
		return patient;
	}

	public InpatientEpisodeLiteVoCollection listHomeLeaveByWard(LocationRefVo ward) 
	{
		BedAdmissionComponent impl = (BedAdmissionComponent) getDomainImpl(BedAdmissionComponentImpl.class);
		return impl.listHomeLeavesByWard(ward);
	}

	//WDEV-14476
	public String getPIDDiagnosisInfo(CareContextRefVo careContextRefVo, EpisodeOfCareRefVo episodeRefVo)
	{
		Alerts impl = (Alerts) getDomainImpl(AlertsImpl.class);
		return impl.getPIDDiagnosisInfo(careContextRefVo, episodeRefVo);
	}

	//WDEV-15908
	public LocationLiteVo getCurrentHospital(ILocation location) 
	{
		if(location == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		Location currentHospital = getHospital((Location) factory.getDomainObject(Location.class, location.getID()));
		
		if(currentHospital instanceof LocSite)
			return LocationLiteVoAssembler.create((Location) currentHospital);
		
		return null;
	}
	
	//WDEV-15908
	private Location getHospital(Location doLocation)
	{
		if(doLocation == null)
			return null;
		
		if(doLocation instanceof Location && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
			return doLocation;
	
		while(doLocation.getParentLocation() != null) 
		{
			doLocation = doLocation.getParentLocation();
			if(doLocation instanceof Location && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
				return doLocation;
		}
		
		return null;
	}

	//wdev-18936
	public PatientElectiveListForWardViewVoCollection listPatientElectiveListForWardViewVo(LocationRefVo ward, Date tcidate)
	{
		StringBuilder query = new StringBuilder();
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		query.append("SELECT pel FROM PatientElectiveList AS pel ");
		query.append("LEFT JOIN pel.electiveListStatus AS els LEFT JOIN els.electiveListStatus AS elStatus ");
		query.append("LEFT JOIN pel.tCIDetails AS tci LEFT JOIN tci.tCIWard AS ward ");
		query.append("LEFT JOIN pel.patient AS patient ");
		
		query.append("WHERE ward.id = :WARD AND elStatus.id = :TCI_GIVEN AND tci.isActive = 1 AND tci.currentOutcome is null ");
		paramNames.add("WARD");
		paramValues.add(ward.getID_Location());
		paramNames.add("TCI_GIVEN");
		paramValues.add(WaitingListStatus.TCI_GIVEN.getId());
		if( tcidate != null)	//wdev-19115
		{
			query.append(" AND tci.tCIDate = :CURRENT_DATE");
			paramNames.add("CURRENT_DATE");
			paramValues.add(tcidate.getDate());
		}
		
				
		query.append(" ORDER BY patient.name.surname, patient.name.forename");

		return PatientElectiveListForWardViewVoAssembler.createPatientElectiveListForWardViewVoCollectionFromPatientElectiveList(getDomainFactory().find(query.toString(), paramNames, paramValues));
		
	}

	
}
