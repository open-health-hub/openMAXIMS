//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.53 build 2543.28531)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.vo.ReportListVoCollection;
import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportsCategoryListVo;
import ims.admin.vo.ReportsCategoryListVoCollection;
import ims.admin.vo.ReportsCategoryLiteVo;
import ims.admin.vo.ReportsCategoryLiteVoCollection;
import ims.admin.vo.domain.ReportListVoAssembler;
import ims.admin.vo.domain.ReportTemplateVoAssembler;
import ims.admin.vo.domain.ReportsCategoryListVoAssembler;
import ims.admin.vo.domain.ReportsCategoryLiteVoAssembler;
import ims.core.admin.domain.objects.ReportsCategory;
import ims.core.admin.domain.objects.TemplateBo;
import ims.core.admin.vo.ReportsCategoryRefVo;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.domain.base.impl.BaseReportRunnerImpl;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class ReportRunnerImpl extends BaseReportRunnerImpl
{
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unchecked")
	public ReportListVoCollection listReports()
	{
		StringBuffer hql = new StringBuffer();
		hql.append("from ReportBo as r1_1 left join r1_1.templates as t1_1");
		hql.append(" where");
		hql.append(" (r1_1.isActive =" +  Boolean.TRUE + " and t1_1.isActive =" +  Boolean.TRUE+" )");
		//hql.append(" and r1_1.isRIE is null");
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find(hql.toString());
		return ReportListVoAssembler.createReportListVoCollectionFromReportBo(list).sort();
	}

	@SuppressWarnings("unchecked")
	public ReportsCategoryListVoCollection listCategories()
	{
		StringBuffer hql = new StringBuffer();
		hql.append("from ReportsCategory as r1_1");
		hql.append(" where r1_1.isRIE is null");
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find(hql.toString());
		return ReportsCategoryListVoAssembler.createReportsCategoryListVoCollectionFromReportsCategory(list).sort();
	}

	public ReportTemplateVo getTemplate(TemplateBoRefVo templateBoRefVo)
	{
		if (templateBoRefVo == null)
			throw new CodingRuntimeException("Cannot get ReportTemplateVo for null TemplateBoRefVo");

		DomainFactory factory = getDomainFactory();

		TemplateBo boTemplate = (TemplateBo) factory.getDomainObject(TemplateBo.class, templateBoRefVo.getID_TemplateBo());
		return ReportTemplateVoAssembler.create(boTemplate);
	}
	
	@SuppressWarnings("unchecked")
	public ims.admin.vo.ReportListVoCollection searchReports(String reportName, String templateName, ReportsCategoryRefVo categoryRef)
	{
		StringBuffer hql = new StringBuffer();
		StringBuffer cond = new StringBuffer();
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		hql.append("select rep from ReportsCategory as cat right join cat.reports as rep left join rep.templates as tpl ");
		
		cond.append(andStr + "rep.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		cond.append(andStr + "UPPER(rep.reportName) like UPPER(:reportName)");
		markers.add("reportName");
		values.add(reportName);
		andStr = " and ";
		
		cond.append(andStr + "tpl.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		cond.append(andStr + "UPPER(tpl.name) like UPPER(:templateName)");
		markers.add("templateName");
		values.add(templateName);
		andStr = " and ";
		
		if(categoryRef != null && categoryRef.getID_ReportsCategoryIsNotNull())
		{
			cond.append(andStr + "cat.id = :catId");
			markers.add("catId");
			values.add(categoryRef.getID_ReportsCategory());
			andStr = " and ";
		}
		
		if (andStr.equals(" and "))
		{
			hql.append(" where ");
		}
		
		hql.append(cond.toString());
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find(hql.toString(), markers, values);
		return ReportListVoAssembler.createReportListVoCollectionFromReportBo(list).sort();
	}

	/**
	* list the categories
	*/
	@SuppressWarnings("unchecked")
	public ims.admin.vo.ReportsCategoryListVoCollection searchCategories(String reportName, String templateName, ReportsCategoryRefVo categoryRef)
	{
		StringBuffer hql = new StringBuffer();
		StringBuffer cond = new StringBuffer();
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		hql.append("select distinct cat from ReportsCategory as cat left join cat.reports as rep left join rep.templates as tpl ");
		
		cond.append(andStr + "rep.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		cond.append(andStr + "UPPER(rep.reportName) like UPPER(:reportName)");
		markers.add("reportName");
		values.add(reportName);
		andStr = " and ";
		
		cond.append(andStr + "tpl.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		cond.append(andStr + "UPPER(tpl.name) like UPPER(:templateName)");
		markers.add("templateName");
		values.add(templateName);
		andStr = " and ";
		
		if(categoryRef != null && categoryRef.getID_ReportsCategoryIsNotNull())
		{
			cond.append(andStr + "cat.id = :catId");
			markers.add("catId");
			values.add(categoryRef.getID_ReportsCategory());
			andStr = " and ";
		}
		
		if (andStr.equals(" and "))
		{
			hql.append(" where ");
		}
		
		hql.append(cond.toString());
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find(hql.toString(), markers, values);

		return ReportsCategoryListVoAssembler.createReportsCategoryListVoCollectionFromReportsCategory(list).sort();
	}

	@SuppressWarnings({"unchecked", "rawtypes"})
	public ReportsCategoryLiteVoCollection searchCategoryByName(String categoryName)
	{
		StringBuffer hql = new StringBuffer();
		StringBuffer cond = new StringBuffer();
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		hql.append("from ReportsCategory as cat ");
		
		cond.append(andStr + "UPPER(cat.name) like UPPER(:categoryName)");
		markers.add("categoryName");
		values.add(categoryName);
		andStr = " and ";
		
		if (andStr.equals(" and "))
		{
			hql.append(" where ");
		}
		
		hql.append(cond.toString());
		hql.append(" order by cat.name");
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find(hql.toString(), markers, values);

		return ReportsCategoryLiteVoAssembler.createReportsCategoryLiteVoCollectionFromReportsCategory(list);
	}

	public ReportsCategoryListVo getRootCategory(ReportsCategoryRefVo categoryRefId) throws DomainInterfaceException
	{
		if(categoryRefId == null || categoryRefId.getID_ReportsCategory() == null)
			throw new CodingRuntimeException("categoryRefId parameter cannot be null !");
		
		ReportsCategory catBo = null;
		DomainFactory factory = getDomainFactory();
		
		while(1 > 0)
		{
			if(catBo != null && catBo.getParentCategory() == null)
				return ReportsCategoryListVoAssembler.create(catBo);

			//unlikely to have this situation, i.e. parent = itself
			if(catBo != null && catBo.getParentCategory() != null && catBo.getParentCategory().getId() != null && catBo.getParentCategory().getId().intValue() == catBo.getId().intValue())
				return ReportsCategoryListVoAssembler.create(catBo);
			
			catBo = (ReportsCategory) factory.getDomainObject(ReportsCategory.class, catBo == null ? categoryRefId.getID_ReportsCategory() : catBo.getParentCategory().getId());
			
			if(catBo == null)
				return null;
		}
	}
	
}
