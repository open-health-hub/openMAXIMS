//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.39 build 2153.19769)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.VaccineLiteVo;
import ims.core.vo.VaccineLiteVoCollection;
import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.clinicaladmin.domain.CCIAdmin;
import ims.clinicaladmin.domain.impl.CCIAdminImpl;
import ims.clinicaladmin.vo.enums.CciType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.impl.DomainImpl;
import ims.vo.interfaces.IGenericItem;

public class DiagnosisProceduresSearchImpl extends DomainImpl implements ims.core.domain.DiagnosisProcedureProblemSearch, ims.domain.impl.Transactional
{
	private static final long serialVersionUID = 1L;

	//these functions are to create value object collections from interface arrays. 
	//if the form is changed to use interfaces, these functions can be dropped. 
	
	public ProcedureLiteVoCollection listProcedures(String filter) throws DomainInterfaceException
	{
		ProcedureLiteVoCollection coll = new ProcedureLiteVoCollection();
		IGenericItem[] items = listIGenericItems(filter, CciType.PROCEDURE, true);
		if (items != null)
		{
			for ( int i = 0; i < items.length; i++)
			{
				coll.add((ProcedureLiteVo)items[i]);
			}
			
			return coll;
		}
		return null;
	}

	public DiagLiteVoCollection listDiagnosis(String filter) throws DomainInterfaceException
	{
		DiagLiteVoCollection coll = new DiagLiteVoCollection();
		IGenericItem[] items = listIGenericItems(filter, CciType.DIAGNOSIS, true);
		if (items != null)
		{
			for ( int i = 0; i < items.length; i++)
			{
				coll.add((DiagLiteVo)items[i]);
			}
			
			return coll;
		}
		return null;
	}
	
	public ClinicalProblemShortVoCollection listProblems(String filter) throws DomainInterfaceException
	{
		ClinicalProblemShortVoCollection coll = new ClinicalProblemShortVoCollection();
		IGenericItem[] items = listIGenericItems(filter, CciType.PROBLEM, true);
		if (items != null)
		{
			for ( int i = 0; i < items.length; i++)
			{
				coll.add((ClinicalProblemShortVo)items[i]);
			}
			
			return coll;
		}
		return null;
	}
	
	private IGenericItem[] listIGenericItems(String filter, CciType cciType, boolean activeOnly)
	{
		CCIAdmin impl = (CCIAdmin)getDomainImpl(CCIAdminImpl.class);
		return impl.listIGenericItems(filter, cciType, activeOnly);
	}

	public VaccineLiteVoCollection listVaccine(String filter) throws DomainInterfaceException 
	{
		VaccineLiteVoCollection coll = new VaccineLiteVoCollection();
		IGenericItem[] items = listIGenericItems(filter, CciType.VACCINE, true);
		
		if (items != null)
		{
			for ( int i = 0; i < items.length; i++)
			{
				coll.add((VaccineLiteVo)items[i]);
			}
			
			return coll;
		}
		return null;
	}
}
