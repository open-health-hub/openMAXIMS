//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.51 build 2460.39233)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.clinical.domain.objects.ClinicalCorrespondence;
import ims.clinical.vo.ClinicalCorrespondenceLiteVoCollection;
import ims.clinical.vo.domain.ClinicalCorrespondenceLiteVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.domain.base.impl.BaseCorrespondenceListImpl;
import ims.core.patient.domain.objects.Patient;
import ims.core.vo.CorrespondenceSearchCriteriaVo;
import ims.core.vo.domain.PatientShortAssembler;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

public class CorrespondenceListImpl extends BaseCorrespondenceListImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listClinicalCorrespondence
	*/
	public ClinicalCorrespondenceLiteVoCollection listClinicalCorrespondence(CorrespondenceSearchCriteriaVo searchCriteria)
	{
		if(searchCriteria == null)
			throw new CodingRuntimeException("null type passed to listClinicalCorrespondence() !");
		
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer(" ");
		String query = "from ClinicalCorrespondence as cc ";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = " ";

		if (searchCriteria.getAuthoringHCPIsNotNull())
		{
			hql.append(andStr + " cc.authoringInformation.authoringHcp.id = :ahcp");
			markers.add("ahcp");
			values.add(searchCriteria.getAuthoringHCP().getID_Hcp());
			andStr = " and ";
		}

		if (searchCriteria.getResponsibleHCPIsNotNull())
		{
			hql.append(andStr + " cc.careContext.episodeOfCare.responsibleHCP.id = :rhcp");
			markers.add("rhcp");
			values.add(searchCriteria.getResponsibleHCP().getID_Hcp());
			andStr = " and ";
		}

		if (searchCriteria.getDateFromIsNotNull())
		{
			hql.append(andStr + " cc.authoringInformation.authoringDateTime >= :sdate");
			markers.add("sdate");
			values.add(new DateTime(searchCriteria.getDateFrom(), new Time("00:00:00")).getJavaDate());
			andStr = " and ";
		}
		if (searchCriteria.getDateToIsNotNull())
		{
			hql.append(andStr + " cc.authoringInformation.authoringDateTime <= :edate");
			markers.add("edate");
			values.add(new DateTime(searchCriteria.getDateTo(), new Time("23:59:59")).getJavaDate());
			andStr = " and ";
		}

		if (searchCriteria.getCorrespondanceStatusIsNotNull())
		{
			hql.append(andStr + " cc.currentStatus.correspondenceStatus.id = :cstat");
			markers.add("cstat");
			values.add(new Integer(searchCriteria.getCorrespondanceStatus().getId()));
			andStr = " and ";
		}
		if (searchCriteria.getCorrespondanceTypeIsNotNull())
		{
			hql.append(andStr + " cc.type.id = :ctype");
			markers.add("ctype");
			values.add(new Integer(searchCriteria.getCorrespondanceType().getId()));
			andStr = " and ";
		}
		if (andStr.equals(" and "))
			query += " where ";
		
		query += hql.toString();
		List<?> list = factory.find(query, markers, values);

		if(list.size() == 0)
			return null;
		
		ClinicalCorrespondenceLiteVoCollection voColl = new ClinicalCorrespondenceLiteVoCollection();
		
		for (int i = 0 ; i < list.size() ; i++)
		{
			ClinicalCorrespondence boClinicalCorrespondence = (ClinicalCorrespondence)list.get(i);
		//	if(boClinicalCorrespondence.getOPDNotes() == null)
		//	{
		//		OutpatientNotesOutcome boOPDNotes = OutpatientNotesOutcome.getOutpatientNotesOutcomeFromCareContext(factory, boClinicalCorrespondence.getCareContext().getId());
		//		boClinicalCorrespondence.setOPDNotes(boOPDNotes);
		//	}
			voColl.add(ClinicalCorrespondenceLiteVoAssembler.create(boClinicalCorrespondence));
		}
		
		return voColl;
	}

	/**
	* listHCP
	*/
	public ims.core.vo.HcpLiteVoCollection listHCP(String name)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName(name);
	}

	public ims.core.vo.PatientShort getPatientForCareContextId(CareContextRefVo careContextRefVo) 
	{
		List<?> list = getDomainFactory().find("select cc.episodeOfCare.careSpell.patient from CareContext as cc where cc.id = :ID", 
				new String[] {"ID"}, new Object[] {careContextRefVo.getID_CareContext()}, 1);
		
		if(list == null || list.size() == 0)
			return null;
		
		return PatientShortAssembler.create((Patient) list.get(0));
	}


}
