//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.70 build 3467.22451)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.clinical.domain.objects.MDTPatientCustomList;
import ims.core.configuration.domain.objects.CustomList;
import ims.core.configuration.vo.CustomListRefVo;
import ims.core.domain.Demographics;
import ims.core.domain.PatientSearch;
import ims.core.domain.base.impl.BaseCustomListMaintenanceImpl;
import ims.core.vo.CustomListVo;
import ims.core.vo.CustomListVoCollection;
import ims.core.vo.MDTPatientCustomListVo;
import ims.core.vo.MDTPatientCustomListVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientShortCollection;
import ims.core.vo.domain.CustomListVoAssembler;
import ims.core.vo.domain.MDTPatientCustomListVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class CustomListMaintenanceImpl extends BaseCustomListMaintenanceImpl
{

	private static final long serialVersionUID = 1L;

	public PatientShortCollection searchPatients(PatientFilter filter) throws DomainInterfaceException {
		if(filter == null)
			throw new CodingRuntimeException("parameter filter is null in method searchPatients");
		
		PatientSearch impl = (PatientSearch) getDomainImpl(PatientSearchImpl.class);
		return impl.searchPatients(filter);
	}

	public MDTPatientCustomListVo saveCustomList(CustomListVo customListVo, MDTPatientCustomListVo patientCustomListVo) throws StaleObjectException {
		if (!patientCustomListVo.isValidated())
		{
			throw new DomainRuntimeException("CustomList has not been validated");
		}
		
		DomainFactory factory = getDomainFactory();
		CustomList doCustomList = CustomListVoAssembler.extractCustomList(factory, customListVo);
		factory.save(doCustomList);
		
		MDTPatientCustomList doPatientCustomList = MDTPatientCustomListVoAssembler.extractMDTPatientCustomList(factory, patientCustomListVo);
		doPatientCustomList.setCustomListType(doCustomList);
		factory.save(doPatientCustomList);
	
		return MDTPatientCustomListVoAssembler.create(doPatientCustomList);
	}

	public CustomListVoCollection listCustomListTypes(CustomListVo filter) {
		
		if(filter == null)
			throw new CodingRuntimeException("null type passed to listCustomListTypes() !");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer(" ");
		String query = "from CustomList as cl ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if (filter.getListTypeIsNotNull())
		{
			hql.append(andStr + " cl.listType.id = :ListType");
			markers.add("ListType");
			values.add(filter.getListType().getID());
			andStr = " and ";
		}

		if (filter.getListNameIsNotNull())
		{
			hql.append(andStr + " cl.listName = :ListName");
			markers.add("ListName");
			values.add(filter.getListName());
			andStr = " and ";
		}

		if (filter.getSpecialtyIsNotNull())
		{
			hql.append(andStr + " cl.specialty.id = :Specialty");
			markers.add("Specialty");
			values.add(filter.getSpecialty().getID());
			andStr = " and ";
		}

		if (filter.getDateIsNotNull())
		{
			hql.append(andStr + " cl.date = :Date");
			markers.add("Date");
			values.add(filter.getDate().getDate());
			andStr = " and ";
		}

		if (filter.getListOwnerIsNotNull())
		{
			hql.append(andStr + " cl.listOwner.id = :ListOwner");
			markers.add("ListOwner");
			values.add(filter.getListOwner().getID_MemberOfStaff());
			andStr = " and ";
		}

		if (filter.getIsActiveIsNotNull())
		{
			hql.append(andStr + " cl.isActive = :IsActive");
			markers.add("IsActive");
			values.add(filter.getIsActive());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			query += " where ";
		
		query += hql.toString();
		List list = factory.find(query, markers, values);

		if(list.size() == 0)
			return null;
		
		return CustomListVoAssembler.createCustomListVoCollectionFromCustomList(list).sort();
	}

	public MDTPatientCustomListVo getCustomList(CustomListRefVo reVoCustomList) {
		if(reVoCustomList == null)
			throw new CodingRuntimeException("null type passed to listCustomListTypes() !");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer(" ");
		String query = "from MDTPatientCustomList as pcl ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if (reVoCustomList.getID_CustomListIsNotNull())
		{
			hql.append(andStr + " pcl.customListType.id = :CustomListTypeId");
			markers.add("CustomListTypeId");
			values.add(reVoCustomList.getID_CustomList());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			query += " where ";
		
		query += hql.toString();
		List list = factory.find(query, markers, values);

		if(list.size() == 0)
			return null;
		
		MDTPatientCustomListVoCollection coll = MDTPatientCustomListVoAssembler.createMDTPatientCustomListVoCollectionFromMDTPatientCustomList(list);
		
		return coll.get(0);
	}

	public PatientShort getPatient(PatientShort patient)throws DomainInterfaceException, StaleObjectException 
	{
		Demographics impl = (Demographics) getDomainImpl(DemographicsImpl.class);
		
		try
		{
			return impl.getPatient(patient);
		}
		catch (DomainRuntimeException e) //WDEV-11223
		{
			throw new DomainInterfaceException(e.getMessage());
		}
	}
}
