//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.admin.vo.AppUserVo;
import ims.admin.vo.LoggedInUserInfoWebServiceVo;
import ims.admin.vo.MobileDeviceVo;
import ims.admin.vo.MobileDeviceVoCollection;
import ims.admin.vo.UserNotificationDetailsVo;
import ims.admin.vo.domain.AppUserVoAssembler;
import ims.admin.vo.domain.LoggedInUserInfoWebServiceVoAssembler;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.domain.objects.Notifications;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.domain.objects.PatientDiagnosis;
import ims.core.clinical.domain.objects.PatientProcedure;
import ims.core.configuration.domain.objects.AppUser;
import ims.core.domain.base.impl.BaseNotificationsImpl;
import ims.core.helper.AddressManagmentProvider;
import ims.core.patient.domain.objects.Patient;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vitals.domain.objects.VitalSigns;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.GeoCoOrdVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientAlertCollection;
import ims.core.vo.PatientAllergyCollection;
import ims.core.vo.PatientDiagnosisWebServiceListVoCollection;
import ims.core.vo.PatientDiagnosisWebServiceVo;
import ims.core.vo.PatientGroupWebServiceVo;
import ims.core.vo.PatientGroupWebServiceVoCollection;
import ims.core.vo.PatientProcedureWebServiceListVoCollection;
import ims.core.vo.PatientProcedureWebServiceVo;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientShortCollection;
import ims.core.vo.VitalSignsWebServiceVo;
import ims.core.vo.VitalSignsWebServiceVoCollection;
import ims.core.vo.domain.NotificationVoAssembler;
import ims.core.vo.domain.PatientAlertAssembler;
import ims.core.vo.domain.PatientAllergyAssembler;
import ims.core.vo.domain.PatientDiagnosisWebServiceListVoAssembler;
import ims.core.vo.domain.PatientDiagnosisWebServiceVoAssembler;
import ims.core.vo.domain.PatientProcedureWebServiceListVoAssembler;
import ims.core.vo.domain.PatientProcedureWebServiceVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.domain.VitalSignsWebServiceVoAssembler;
import ims.core.vo.lookups.ContextType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.IAppUser;
import ims.framework.utils.DateTime;
import ims.ocrr.orderingresults.domain.objects.OcsOrderSession;
import ims.ocrr.vo.OcsOrderWebServiceListVoCollection;
import ims.ocrr.vo.OcsOrderWebServiceVo;
import ims.ocrr.vo.domain.OcsOrderWebServiceListVoAssembler;
import ims.ocrr.vo.domain.OcsOrderWebServiceVoAssembler;

import java.util.ArrayList;
import java.util.List;
     
public class NotificationsImpl extends BaseNotificationsImpl
{    
	private static final long serialVersionUID = 1L;

	public ims.core.vo.NotificationVoCollection getNotifications()
	{
		if(this.getLoggedInUser() == null)
			throw new CodingRuntimeException("Unable to get the logged user.");
		
		DomainFactory factory = getDomainFactory();
		
		String hql = "from Notifications n where n.user.id = :userIden and n.seen = 0 order by n.priority asc, n.dateTime desc";
		
		return NotificationVoAssembler.createNotificationVoCollectionFromNotifications(factory.find(hql, new String[] {"userIden"}, new Object[] { this.getLoggedInUser().getUserId() }));
	}

	public void markNotificationAsSeen(Integer notificationId)
	{
		if(notificationId == null)
			throw new CodingRuntimeException("Invalid notification");
		DomainFactory factory = getDomainFactory();
		Notifications notification = (Notifications)factory.getDomainObject(Notifications.class, notificationId);
		if(notification == null)
			throw new DomainRuntimeException("Notification not found");
		notification.setSeen(true);
		notification.setSeenAt(new DateTime().getJavaDate());
		try 
		{
			factory.save(notification);
		} 
		catch (StaleObjectException e) 
		{
			throw new DomainRuntimeException("Unable to mark notification as seen, " + e.getMessage());
		}
	}

	public PatientShort getPatientById(Integer patientId) 
	{
		DomainFactory factory = getDomainFactory();
		Patient doPatient = (Patient)factory.getDomainObject(Patient.class, patientId);
		
		if(doPatient == null)
			throw new DomainRuntimeException("Patient not found");
		
		PatientShort patient = PatientShortAssembler.create(doPatient);
		patient.setHasAlerts(hasPatientAlerts(patientId));
		patient.setHasAllergies(hasPatientAllergies(patientId));
		patient.calculateAge();
		
		return patient;
	}

	private Boolean hasPatientAllergies(Integer patientId) 
	{
		if(patientId == null)
			throw new CodingRuntimeException("Invalid patient Id.");
		
		DomainFactory factory = getDomainFactory();

		String hql = "select count (allergy.id) from PatientAllergy as allergy where ( allergy.isRIE = false or allergy.isRIE is null ) and allergy.patient.id = :idPatient and allergy.isCurrentlyActiveAllergy = true";;
		
		Object[] count = factory.find(hql, new String[] {"idPatient"}, new Object[] {patientId}).toArray();
		
		int numberOfAlerts = 0;
		
		if(count != null && count.length > 0)
		{
			numberOfAlerts = ((Long) count[0]).intValue();
		}
		
		return numberOfAlerts > 0 ? true : false;
	}

	private Boolean hasPatientAlerts(Integer patientId) 
	{
		if(patientId == null)
			throw new CodingRuntimeException("Invalid patient Id.");
		
		DomainFactory factory = getDomainFactory();

		String hql = "select count (alert.id) from PatientAlert as alert where ( alert.isRIE = false or alert.isRIE is null ) and alert.patient.id = :idPatient and alert.isCurrentlyActiveAlert = true";;
		
		Object[] count = factory.find(hql, new String[] {"idPatient"}, new Object[] {patientId}).toArray();
		
		int numberOfAlerts = 0;
		
		if(count != null && count.length > 0)
		{
			numberOfAlerts = ((Long) count[0]).intValue();
		}
		
		return numberOfAlerts > 0 ? true : false;
	}

	public void registerMobileDeviceToPushNotifications(String uniqueDeviceId, String deviceTokenId, String deviceName, String deviceModel, String systemName, String systemVersion, Boolean enablePushNotifications) 
	{
		IAppUser loggedInUser = this.getLoggedInUser();		
		if(loggedInUser == null)
			throw new CodingRuntimeException("Unable to get the logged user.");
		
		DomainFactory factory = getDomainFactory();
		AppUser doUser = (AppUser)factory.getDomainObject(AppUser.class, loggedInUser.getUserId());
		
		AppUserVo user = AppUserVoAssembler.create(doUser);
		
		UserNotificationDetailsVo notificationDetails = user.getNotificationDetails();
		if(notificationDetails == null)
		{
			notificationDetails = new UserNotificationDetailsVo();
		}
		
		MobileDeviceVoCollection mobileDevices = notificationDetails.getMobileDevices();
		if(mobileDevices == null)
		{
			mobileDevices = new MobileDeviceVoCollection();
		}
		
		MobileDeviceVo selectMobileDevice = null;
		int index = -1;
		for(int x = 0; x < mobileDevices.size(); x++)
		{
			MobileDeviceVo mobileDevice = mobileDevices.get(x);
			String existingDeviceUniqueId = mobileDevice.getUniqueId();
			String existingDeviceTokenId = mobileDevice.getTokenId();
			
			if(existingDeviceUniqueId != null && existingDeviceTokenId != null)
			{
				if(existingDeviceUniqueId.equals(uniqueDeviceId) && existingDeviceTokenId.equals(deviceTokenId))
				{
					index = x;
					selectMobileDevice = mobileDevice;
					break;
				}
			}
		}
		
		if(index == -1)
		{
			selectMobileDevice = new MobileDeviceVo();
		}
		
		selectMobileDevice.setUniqueId(uniqueDeviceId);
		selectMobileDevice.setTokenId(deviceTokenId);
		selectMobileDevice.setName(deviceName);
		selectMobileDevice.setModel(deviceModel);
		selectMobileDevice.setActive(enablePushNotifications);
		selectMobileDevice.setSystemName(systemName);
		selectMobileDevice.setSystemVersion(systemVersion);
		
		if(index == -1)
		{
			mobileDevices.add(selectMobileDevice);
		}
		else
		{
			mobileDevices.set(index, selectMobileDevice);
		}		
		
		notificationDetails.setMobileDevices(mobileDevices);
		user.setNotificationDetails(notificationDetails);
		
		String[] errors = user.validate();
		if(errors != null && errors.length > 0)
		{
			if(enablePushNotifications)
				throw new DomainRuntimeException("Unable to register a mobile device for push notifications");
			else
				throw new DomainRuntimeException("Unable to unregister a mobile device from push notifications");
		}
		
		try 
		{
			factory.save(AppUserVoAssembler.extractAppUser(factory, user));
		} 
		catch (StaleObjectException e) 
		{
			throw new DomainRuntimeException(e);
		}
	}

	@SuppressWarnings("unchecked")
	public PatientShortCollection searchPatients(String searchString) 
	{
		if(searchString == null || searchString.length() == 0)
			throw new CodingRuntimeException("Cannot search on null string.");
		
		DomainFactory factory = getDomainFactory();
		
		String query = " from Patient p left join p.identifiers as ids where p.isActive = :isActive and (p.isRIE is null or p.isRIE = :isRecordInError) ";
		StringBuffer hql = new StringBuffer();
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		String identifiers = searchString.trim().replaceAll(" ", "");
		String[] splitNames = getTokens(searchString);
		
		if(splitNames.length == 1)
		{
			hql.append("p.name.upperSurname like :NAME or p.name.upperForename like :NAME");// or upper(p.name.middleName) like :NAME");
			markers.add("NAME");
			values.add(splitNames[0]);
		}
		else
		{
			for (int i = 0; i < splitNames.length; i++)
			{	
				hql.append("(p.name.upperSurname like :NAME" + i + " and (");
				markers.add("NAME" + i);
				values.add(splitNames[i]);
				
				boolean isFirst = true;
				
				for (int j = 0; j < splitNames.length; j++)
				{
					if(j != i)
					{
						if(j > 0 && !isFirst)
							hql.append(" or ");
						
						hql.append(" p.name.upperForename like :NAME" + i + j);// + " or upper(p.name.middleName) like :NAME" + i + j);
						markers.add("NAME" + i + j);
						values.add(splitNames[j]);
						
						isFirst = false;
					}
					
					if(j == (splitNames.length - 1))
						hql.append("))");
				}
				
				if (i < (splitNames.length - 1))
				{
					hql.append(" or ");
				}
			}
		}
		
		if(identifiers.length() > 0)
		{
			if(markers.size() > 0)
				hql.append(" or ");
			
			hql.append(" ids.value = :idValue");
			markers.add("idValue");
			values.add(identifiers);
		}
		
		if (markers.size() > 0)
		{
			query += " and (" + hql + ")";
		}
		
		markers.add("isActive");
		values.add(Boolean.TRUE);
		markers.add("isRecordInError");
		values.add(Boolean.FALSE);
		
		query += " order by p.name.surname asc, p.name.forename asc";
		
		List<Object> patient = factory.find(query, markers, values);
		
		PatientShortCollection coll = PatientShortAssembler.createPatientShortCollectionFromPatient(patient);
		
		for(int i=0; i<coll.size(); i++)
		{
			PatientShort ps = coll.get(i);
			
			if(ps.getAge() == null)
			{
				ps.calculateAge();
			}
		}
		
		return coll;
	}
	
	private String[] getTokens(String s) 
	{
		if(s == null || s.length() == 0)
			return null;
		
		ArrayList<String> tokensList = new ArrayList<String>();
		String[] splitNames = s.trim().split(" ");
		
		for (int i = 0; i < splitNames.length; i++)
		{
			String token = formatStringForSearch(splitNames[i]);
			
			if(token != null && token.length() > 0)
			{
				tokensList.add(token);
			}
		}
		
		String[] tokensArray = new String[tokensList.size()];
		tokensList.toArray(tokensArray);
		
		return tokensArray;
	}

	private String formatStringForSearch(String stringToFormat) 
	{
		if(stringToFormat == null || stringToFormat.trim().length() == 0)
			return null;
		
		stringToFormat = stringToFormat.toUpperCase().trim();
		stringToFormat = stringToFormat.replaceAll("[^a-zA-Z%]", "");
		
		if(stringToFormat.length() > 0)
		{
			stringToFormat += '%';
		}
		
		return stringToFormat;
	}

	public OcsOrderWebServiceVo getOrderById(Integer orderId) 
	{
		DomainFactory factory = getDomainFactory();
		OcsOrderSession doOrder = (OcsOrderSession)factory.getDomainObject(OcsOrderSession.class, orderId);
		if(doOrder == null)
			throw new DomainRuntimeException("Order not found");
		return OcsOrderWebServiceVoAssembler.create(doOrder);
	}

	public void markOrderAsSeen(Integer orderId) 
	{
	}

	public byte[] getPatientImage(Integer patientId, Boolean smallImage) 
	{
		DomainFactory factory = getDomainFactory();
		Patient doPatient = (Patient)factory.getDomainObject(Patient.class, patientId);
		if(doPatient == null)
			throw new DomainRuntimeException("Patient not found");
		
		if(doPatient.getPhoto() == null || doPatient.getPhoto().getImageData() == null)
			return null;
		
		return ims.framework.utils.Base64.decode(doPatient.getPhoto().getImageData());		
	}

	@SuppressWarnings("unchecked")
	public PatientAlertCollection getPatientAlerts(Integer patientId) 
	{
		if(patientId == null)
			throw new CodingRuntimeException("Invalid patient Id.");
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find("from PatientAlert patAlert where patAlert.patient.id = :patient and patAlert.isCurrentlyActiveAlert = true", new String[] {"patient"},new Object[] {patientId});
		
		return PatientAlertAssembler.createPatientAlertCollectionFromPatientAlert(list).sort();
	}

	@SuppressWarnings("unchecked")
	public PatientAllergyCollection getPatientAllergies(Integer patientId) 
	{
		if(patientId == null)
			throw new CodingRuntimeException("Invalid patient Id.");
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find("from PatientAllergy patAlrg where patAlrg.patient.id = :patient and patAlrg.isCurrentlyActiveAllergy = 1", new String[] {"patient"},new Object[] {patientId});
		
		return PatientAllergyAssembler.createPatientAllergyCollectionFromPatientAllergy(list).sort();
	}

	@SuppressWarnings("unchecked")
	public OcsOrderWebServiceListVoCollection getPatientOrders(Integer patientId, Integer lastNumberOfDays) 
	{
		if(patientId == null)
			throw new CodingRuntimeException("Invalid patient Id.");
		
		if(lastNumberOfDays == null || (lastNumberOfDays != null && lastNumberOfDays < 0))
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "from OcsOrder ocsOrd where ocsOrd.patient.id = :patient and ocsOrd.systemInformation.creationDateTime >= :lastDate order by ocsOrd.systemInformation.creationDateTime desc";
		
		List listOrder = factory.find(query, new String[] {"patient", "lastDate"}, new Object[] {patientId, (new DateTime()).addDays(-lastNumberOfDays).getJavaDate()});
		
		return OcsOrderWebServiceListVoAssembler.createOcsOrderWebServiceListVoCollectionFromOcsOrderSession(listOrder);
	}

	public LoggedInUserInfoWebServiceVo getLoggedInUserInfo() 
	{
		if(this.getLoggedInUser() == null)
			throw new CodingRuntimeException("Unable to get the logged user.");
		
		DomainFactory factory = getDomainFactory();
		return LoggedInUserInfoWebServiceVoAssembler.create((AppUser)factory.getDomainObject(AppUser.class, this.getLoggedInUser().getUserId()));
	}

	@SuppressWarnings("unchecked")
	public VitalSignsWebServiceVoCollection getPatientVitalSigns(Integer patientId, Integer lastNumberOfDays) 
	{
		if(patientId == null)
			throw new CodingRuntimeException("Invalid patient Id.");
		
		if(lastNumberOfDays == null || (lastNumberOfDays != null && lastNumberOfDays < 0))
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select vs from VitalSigns as vs left join vs.careContext as cc left join cc.episodeOfCare as ec left join ec.careSpell as cs left join cs.patient as p where p.id = :patient and vs.vitalsTakenDateTime >= :lastDate order by vs.vitalsTakenDateTime";
			
		List listOrder = factory.find(query, new String[] {"patient", "lastDate"}, new Object[] {patientId, (new DateTime()).addDays(-lastNumberOfDays).getJavaDate()});
		
		return VitalSignsWebServiceVoAssembler.createVitalSignsWebServiceVoCollectionFromVitalSigns(listOrder);
	}
	
	public Integer getCurrentInpatientCareContext(Integer patientId) 
	{
		CareContextRefVo careContext = getInpatientCareContext(patientId);
		return careContext != null ? careContext.getID_CareContext() : null;
	}

	public void recordVitalSigns(Integer patientId, VitalSignsWebServiceVo vitalSigns) 
	{
		if(patientId == null)
			throw new CodingRuntimeException("Invalid patient Id.");
		
		if(vitalSigns == null)
			throw new CodingRuntimeException("No vital signs to save.");
		
		CareContextRefVo careContext = getInpatientCareContext(patientId);
		
		if(careContext == null)
			throw new DomainRuntimeException("This patient doesn't have a care context of type Inpatient.");
		
		DomainFactory factory = getDomainFactory();
		
		vitalSigns.setCareContext(careContext);
		vitalSigns.setVitalsTakenDateTime(new DateTime());
		vitalSigns.setAuthoringInformation(getAuthoringInfo());
		
		String[] errors = vitalSigns.validate();
		if(errors != null && errors.length > 0)
		{
			String conCatString = "";
			for(int i=0; i<errors.length; i++)
			{
				conCatString += errors[i] + ";";
			}
			
			throw new DomainRuntimeException("This Vital Sign has validation errors. " + conCatString);
		}
		
		VitalSigns doVitals = VitalSignsWebServiceVoAssembler.extractVitalSigns(factory, vitalSigns);
		
		try 
		{
			factory.save(doVitals);
		} 
		catch (StaleObjectException e) 
		{
			throw new DomainRuntimeException("Unable to save. Record changed by another user.");
		}	
	}
	
	private AuthoringInformationVo getAuthoringInfo() 
	{
		Object hcp = this.getHcpLiteUser();
		
		if(hcp == null )
			throw new DomainRuntimeException("Logged in user is not an HCP.");
		
		AuthoringInformationVo auth = new AuthoringInformationVo();
		
		auth.setAuthoringHcp((HcpLiteVo) hcp);
		auth.setAuthoringDateTime(new DateTime());
		
		return auth;
	}

	@SuppressWarnings("unchecked")
	private CareContextRefVo getInpatientCareContext(Integer patientId) 
	{
		if(patientId == null)
			throw new CodingRuntimeException("Invalid patient Id.");
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select inpCareContext from CareSpell as cs left join cs.episodes as ep left join ep.careContexts as inpCareContext left join cs.patient as p where p.id = :patId and inpCareContext.endDateTime is null and inpCareContext.context.id = :inpatient order by inpCareContext.startDateTime desc";
		
		List listInpatientCareContext = factory.find(query, new String[] {"patId", "inpatient"}, new Object[] {patientId, ContextType.INPATIENT.getID()});
		
		if(listInpatientCareContext != null)
		{
			for(int i=0; i<listInpatientCareContext.size(); i++)
			{
				if(listInpatientCareContext.get(i) != null)
				{
					CareContext obj = (CareContext)listInpatientCareContext.get(i);
					return new CareContextRefVo(obj.getId(), obj.getVersion());
				}
			}
		}
			
		return null;
	}

	@SuppressWarnings("unchecked")
	public PatientDiagnosisWebServiceListVoCollection getPatientDiagnosisForCurrentEpisodeOfCare(Integer patientId) 
	{
		if(patientId == null)
			throw new CodingRuntimeException("Invalid patient Id.");
		
		EpisodeOfCareRefVo currentEpisodeOfCare = getCurrentEpisodeOfCare(patientId);
		
		if(currentEpisodeOfCare == null || !currentEpisodeOfCare.getID_EpisodeOfCareIsNotNull())
			return new PatientDiagnosisWebServiceListVoCollection();
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select pd from PatientDiagnosis as pd left join pd.careContext as cc left join cc.episodeOfCare as eps where eps.id = :epsId order by pd.id desc";
		List patDiagList = factory.find(query, new String[] {"epsId"}, new Object[] {currentEpisodeOfCare.getID_EpisodeOfCare()});
		
		return PatientDiagnosisWebServiceListVoAssembler.createPatientDiagnosisWebServiceListVoCollectionFromPatientDiagnosis(patDiagList);
	}
	
	@SuppressWarnings("unchecked")
	public PatientProcedureWebServiceListVoCollection getPatientProceduresForCurrentEpisodeOfCare(Integer patientId) 
	{
		if(patientId == null)
			throw new CodingRuntimeException("Invalid patient Id.");
		
		EpisodeOfCareRefVo currentEpisodeOfCare = getCurrentEpisodeOfCare(patientId);
		
		if(currentEpisodeOfCare == null || !currentEpisodeOfCare.getID_EpisodeOfCareIsNotNull())
			return new PatientProcedureWebServiceListVoCollection();
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select pp from PatientProcedure as pp left join pp.careContext as cc left join cc.episodeOfCare as eps where eps.id = :epsId order by pp.id desc";
		List patProcList = factory.find(query, new String[] {"epsId"}, new Object[] {currentEpisodeOfCare.getID_EpisodeOfCare()});
		
		return PatientProcedureWebServiceListVoAssembler.createPatientProcedureWebServiceListVoCollectionFromPatientProcedure(patProcList);
	}
	
	@SuppressWarnings("unchecked")
	private EpisodeOfCareRefVo getCurrentEpisodeOfCare(Integer patientId)
	{
		if(patientId == null)
			throw new CodingRuntimeException("Invalid patient Id.");
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select eps from CareSpell as cs left join cs.episodes as eps left join cs.patient as p where p.id = :patid and eps.endDate is null order by eps.startDate desc";
		List list = factory.find(query, new String[] {"patid"}, new Object[] {patientId});
		
		if(list != null)
		{
			for(int i=0; i<list.size(); i++)
			{
				if(list.get(i) != null)
				{
					EpisodeOfCare obj = (EpisodeOfCare)list.get(i);
					return new EpisodeOfCareRefVo(obj.getId(), obj.getVersion());
				}
			}
		}
			
		return null;
	}

	public PatientDiagnosisWebServiceVo getPatientDiagnosis(Integer diagnosisId) 
	{
		if(diagnosisId == null)
			throw new CodingRuntimeException("Unable to get PatientDiagnosis for null id.");
		
		PatientDiagnosis patDiag = (PatientDiagnosis) getDomainFactory().getDomainObject(PatientDiagnosis.class, diagnosisId);
		
		return PatientDiagnosisWebServiceVoAssembler.create(patDiag);
	}

	public PatientProcedureWebServiceVo getPatientProcedure(Integer procedureId) 
	{
		if(procedureId == null)
			throw new CodingRuntimeException("Unable to get PatientProcedure for null id.");
		
		PatientProcedure patProcedure = (PatientProcedure) getDomainFactory().getDomainObject(PatientProcedure.class, procedureId);
		
		return PatientProcedureWebServiceVoAssembler.create(patProcedure);
	}

	public PatientGroupWebServiceVoCollection getMyPatients() 
	{
		Object mosUser = getMosUser();
		PatientGroupWebServiceVoCollection result = new PatientGroupWebServiceVoCollection();
		if (!(mosUser instanceof MemberOfStaffRefVo))
			return result;
		String hql = "select pcl.id,cl.listName from PatientCustomList as pcl left join pcl.customList as cl where" +
				" (cl.isActive = 1 and cl.listOwner.id = :MemberOfStaff_id) order by cl.listName asc";
		List<?> domObjs = getDomainFactory().find(hql,new String[]{"MemberOfStaff_id"},new Object[]{((MemberOfStaffRefVo)mosUser).getID_MemberOfStaff()});
		if (domObjs == null || domObjs.size() == 0)
			return result;
		
		String hql2 = "select pat from PatientCustomList as pcl left join pcl.listEntry as le left join le.patient as pat where " +
				"(pat.isActive = 1 and pat.isRIE is null and pcl.id = :lid and pcl.isRIE is null) ";
		Object[] elem;
		PatientGroupWebServiceVo record;
		for (int i = 0 ; i < domObjs.size() ; i++)
		{
			if (!(domObjs.get(i) instanceof Object[]))
				continue;
			
			elem = (Object[]) domObjs.get(i);
			
			if (!(elem[0] instanceof Integer && elem[1] instanceof String))
				continue;
			
			Integer lid = (Integer) elem[0];
			String name = (String) elem[1];
			
			List<?> patients = getDomainFactory().find(hql2,"lid",lid);
			
			if (patients == null || patients.size() == 0)
				continue;
			
			record = new PatientGroupWebServiceVo();
			record.setName(name);
			record.setPatients(PatientShortAssembler.createPatientShortCollectionFromPatient(patients));
			
			result.add(record);
		}
		
		return result;
	}

	public GeoCoOrdVo getGPSCoordinatesForPostCode(String postCode) 
	{		
		AddressManagmentProvider amf = new AddressManagmentProvider();		
		return amf.getGPSCoordinatesForPostCode(postCode);
	}
}
