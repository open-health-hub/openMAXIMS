//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ander Telleria using IMS Development Environment (version 1.66 build 3261.22124)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.configuration.gen.ConfigFlag;
import ims.core.domain.base.impl.BaseRecentDischargesImpl;
import ims.core.vo.DischargedEpisodeVoCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.RecentDischargesFilterVo;
import ims.core.vo.domain.DischargedEpisodeVoAssembler;
import ims.core.vo.lookups.PatIdType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.io.Serializable;
import java.util.ArrayList;

public class RecentDischargesImpl extends BaseRecentDischargesImpl
{

	private static final long serialVersionUID = 1L;

	public DischargedEpisodeVoCollection listRecentDischarges(RecentDischargesFilterVo dischargeData) 
	{
		if (dischargeData == null)
			throw new CodingRuntimeException("Invalid dischargeData");


		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		StringBuffer sb = new StringBuffer();
		String andStr = "";

		String hql = "select de from DischargedEpisode as de"; 

		String strSearchSurname = "";
		String strSearchForename = "";

		if (dischargeData.getHospNumIsNotNull())
		{
			hql += " join de.pasEvent.patient.identifiers as ids ";
			
			String idVal = dischargeData.getHospNum().trim();			
			if (dischargeData.getIDType().equals(PatIdType.NHSN))
				idVal = dischargeData.getHospNum().replace(" ", "");//wdev-7305
			
			if(!ConfigFlag.DOM.CASE_SENSITIVE_PATID.getValue())
				idVal = idVal.toUpperCase();

			if (dischargeData.getIDType().equals(PatIdType.NHSN))
			{
				sb.append(andStr + " ids.value like :idnum ");
				idVal += "%";
			}
			else
				sb.append(andStr + " ids.value = :idnum");

			markers.add("idnum");
			andStr = " and ";
			sb.append(andStr + " ids.type = :idtype");
			markers.add("idtype");

			values.add(idVal);
			values.add(getDomLookup(dischargeData.getIDType()));
		}
		else
		{
			if(dischargeData.getForenameIsNotNull())
			{
				sb.append(andStr + " de.pasEvent.patient.name.upperForename like :patFore");
				markers.add("patFore");
				andStr = " and ";
				
				strSearchForename = dischargeData.getForename().toUpperCase().trim();
				strSearchForename = strSearchForename.replaceAll("[^a-zA-Z]", "");
					
				if(strSearchForename.length() >= 40)
				{
					strSearchForename = strSearchForename.substring(0,40);
					strSearchForename += '%';
				}
				else
				{
					strSearchForename += '%';
				}
				values.add(strSearchForename);
	
			}
	
			if(dischargeData.getSurnameIsNotNull())
			{
				sb.append(andStr + " de.pasEvent.patient.name.upperSurname like :patSur");
				markers.add("patSur");
				andStr = " and ";
	
				strSearchSurname = dischargeData.getSurname().toUpperCase().trim();
				strSearchSurname = strSearchSurname.replaceAll("[^a-zA-Z]", "");
					
				if(strSearchSurname.length() >= 40)
				{
					strSearchSurname = strSearchSurname.substring(0,40);
					strSearchSurname += '%';
				}
				else
				{
					strSearchSurname += '%';
				}
				values.add(strSearchSurname);
			}
		}//WDEV-13065
			
		if (dischargeData.getConsultantIsNotNull())
		{
			sb.append(andStr + " de.pasEvent.consultant.id = :cons");
			markers.add("cons");
			values.add(dischargeData.getConsultant().getID_Hcp());
			andStr = " and ";
		}
		
		if (dischargeData.getDischDestinationIsNotNull())
		{
			sb.append(andStr + " de.dischargeDestination = :dest");
			markers.add("dest");
			values.add(getDomLookup(dischargeData.getDischDestination()));
			andStr = " and ";
		}
		
		if (dischargeData.getFromDateIsNotNull() && dischargeData.getToDateIsNotNull())
		{
			sb.append(andStr + " de.dischargeDateTime between :fromdate and :todate");
			markers.add("fromdate");
			values.add(new DateTime(dischargeData.getFromDate(), new Time("00:00:00")).getJavaDate() );
			markers.add("todate");
			values.add(new DateTime(dischargeData.getToDate(), new Time("23:59:59")).getJavaDate() );
			andStr = " and ";

		}
		else if (dischargeData.getFromDateIsNotNull() && dischargeData.getToDate() == null)
		{
			sb.append(andStr + " de.dischargeDateTime >= :fromdate");
			markers.add("fromdate");
			values.add(new DateTime(dischargeData.getFromDate(), new Time("00:00:00")).getJavaDate() );
			andStr = " and ";
			
		}
		else if (dischargeData.getFromDate() == null && dischargeData.getToDateIsNotNull())
		{
			sb.append(andStr + " de.dischargeDateTime <= :todate");
			markers.add("todate");
			values.add(new DateTime(dischargeData.getToDate(), new Time("23:59:59")).getJavaDate() );
			andStr = " and ";
		}
		else
		{
			//last 24hrs
			sb.append(andStr + " de.dischargeDateTime between :fromdate and :todate");
			markers.add("fromdate");
			values.add(new DateTime(new Date().addDay(-1), new Time()).getJavaDate());
			markers.add("todate");
			values.add(new DateTime(new Date(), new Time()).getJavaDate());
			andStr = " and ";
		}
		
		hql += " where ";
		hql += sb.toString();
		return DischargedEpisodeVoAssembler.createDischargedEpisodeVoCollectionFromDischargedEpisode(getDomainFactory().find(hql.toString(), markers, values));
	}

	public HcpLiteVo getHCP(Integer idHCP) 
	{
		HcpAdmin implHcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		HcpFilter voFilter = new HcpFilter();
		voFilter.setID_Hcp(idHCP);
		return implHcpAdmin.getHcpLite(voFilter);
	}

	public HcpLiteVoCollection listHCPs(HcpFilter filter) 
	{
		HcpAdmin implHcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return implHcpAdmin.listHcpLite(filter);
	}

}
