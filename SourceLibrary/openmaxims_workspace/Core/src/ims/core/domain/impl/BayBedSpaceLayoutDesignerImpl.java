//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3341.28572)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import javax.swing.SpringLayout.Constraints;

import ims.core.admin.pas.domain.objects.BedSpaceState;
import ims.core.domain.BayFloorPlanDesigner;
import ims.core.domain.FloorLayoutList;
import ims.core.domain.WardView;
import ims.core.domain.base.impl.BaseBayBedSpaceLayoutDesignerImpl;
import ims.core.layout.domain.objects.FloorBedSpaceLayout;
import ims.core.layout.vo.BedSpaceRefVo;
import ims.core.layout.vo.FloorLayoutRefVo;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateLiteVoCollection;
import ims.core.vo.BedSpaceVoCollection;
import ims.core.vo.FloorLayoutLiteVoCollection;
import ims.core.vo.FloorLayoutVo;
import ims.core.vo.domain.BedSpaceStateLiteVoAssembler;
import ims.core.vo.domain.BedSpaceVoAssembler;
import ims.core.vo.domain.FloorBedSpaceLayoutVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainException;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;

public class BayBedSpaceLayoutDesignerImpl extends BaseBayBedSpaceLayoutDesignerImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.FloorBedSpaceLayoutVo get(ims.core.layout.vo.FloorBedSpaceLayoutRefVo id)
	{
		if(id == null)
			throw new DomainRuntimeException("Invalid Floor Bed Space Layout");
		
		return FloorBedSpaceLayoutVoAssembler.create((FloorBedSpaceLayout)getDomainFactory().getDomainObject(id));
	}

	public ims.core.vo.FloorBedSpaceLayoutVo save(ims.core.vo.FloorBedSpaceLayoutVo value, BedSpaceStateLiteVoCollection bedSpaceStateColl) throws ims.domain.exceptions.StaleObjectException, DomainInterfaceException
	{
		if(value == null)
			throw new DomainRuntimeException("Invalid Floor Bed Space Layout");
		if(!value.isValidated())
			throw new DomainRuntimeException("Floor Bed Space Layout was not validated");
		
		DomainFactory domainFactory = getDomainFactory();
		
		if (bedSpaceStateColl != null)
		{
			BedSpaceVoCollection coll = new BedSpaceVoCollection();
			for (int i = 0; i < bedSpaceStateColl.size(); i++) 
			{				
				BedSpaceState dom = BedSpaceStateLiteVoAssembler.extractBedSpaceState(domainFactory, bedSpaceStateColl.get(i));
				domainFactory.save(dom);
				coll.add(BedSpaceVoAssembler.create(dom.getBedSpace()));
			}	
			value.setBedSpaces(coll);
		}		
		
		FloorBedSpaceLayout domainObject = FloorBedSpaceLayoutVoAssembler.extractFloorBedSpaceLayout(domainFactory, value);
		try
		{
			domainFactory.save(domainObject);
		}
		catch (UnqViolationUncheckedException e) 
		{
			throw new DomainInterfaceException("'Name' must be unique, '" + domainObject.getName() + "' is already in use");
		}
		catch (Exception e)
		{
			if(e.getMessage() != null && e.getMessage().startsWith("could not delete"))
				throw new DomainInterfaceException("Deleting Beds is not possible, You can however :\n\n a)Move the BedSpace on this screen\n b)Close the Bed on the WardView\n c)Create a new BayBedSpaceLayout and remove this one from the ward");
		}
		
		return FloorBedSpaceLayoutVoAssembler.create(domainObject);
	}

	public FloorLayoutLiteVoCollection listFloorLayouts(PreActiveActiveInactiveStatus status)			 
	{
		FloorLayoutList impl = (FloorLayoutList)getDomainImpl(FloorLayoutListImpl.class); 
		return impl.list(status);		
	}

	public FloorLayoutVo getLayout(FloorLayoutRefVo id) 
	{
		BayFloorPlanDesigner impl = (BayFloorPlanDesigner)getDomainImpl(BayFloorPlanDesignerImpl.class);
		return impl.get(id);
	}

	public BedSpaceStateLiteVo getBedSpaceStateByBedSpace(BedSpaceRefVo bedSpace) 
	{
		WardView impl = (WardView)getDomainImpl(WardViewImpl.class);
		return impl.getBedSpaceState(bedSpace);
	}
}
