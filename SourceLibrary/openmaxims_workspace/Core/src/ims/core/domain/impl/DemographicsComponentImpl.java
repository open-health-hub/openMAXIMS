//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ander Telleria using IMS Development Environment (version 1.65 build 3180.29032)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.configuration.InitConfig;
import ims.core.domain.DemographicsComponent;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.DeathDetailsVo;
import ims.core.vo.GP;
import ims.core.vo.GpLiteToPracticeLiteVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.OrganisationVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientLiteVo;
import ims.core.vo.PatientShort;

import ims.core.vo.lookups.TaxonomyType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;

import ims.dto.DTODomainImplementation;

public class DemographicsComponentImpl extends DTODomainImplementation implements DemographicsComponent,ims.domain.impl.Transactional
{

	private static final long serialVersionUID = 1L;

	public boolean dtoOnly()
	{
		return InitConfig.getConfigType().equals("DTO");
	}

	public Class getLookupServiceClass()
	{
		return ims.domain.lookups.impl.LookupServiceImpl.class;
	}
	/**
	* Get's a specific Patient
	 * @throws UniqueKeyViolationException 
	*/
	public ims.core.vo.Patient getPatient(PatientShort patient) throws StaleObjectException, UniqueKeyViolationException
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.getPatient(patient);
	}

	public Patient getPatient(PatientRefVo patRef)
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.getPatient(patRef);
	}
	
	protected Patient getLocalPatient(PatientShort patient) throws UniqueKeyViolationException
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.getLocalPatient(patient);
	}

	public Boolean hasAlerts(Integer patientID)
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.hasAlerts(patientID);
	}

	public Boolean hasAllergy(Integer patientID)
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.hasAllergy(patientID);
	}
	
	public GP getPatientGp(GpShortVo gp)
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.getPatientGp(gp);
	}
	
	public Boolean deletePatient(Patient patient) throws StaleObjectException
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.deletePatient(patient);
	}

	public PatientShort getPatientShort(PatientRefVo patRefVo)
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.getPatientShort(patRefVo);
	}
	
	public OrganisationVo getOrganisationByTaxonomyType(String extId,TaxonomyType taxonomyType) 
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.getOrganisationByTaxonomyType(extId, taxonomyType);
	}
	
	public PatientLiteVo getPatientLite(PatientShort patVo) throws UniqueKeyViolationException
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.getPatientLite(patVo);
	}

	public DeathDetailsVo saveDeathDetails(DeathDetailsVo deathDetails) throws StaleObjectException 
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.saveDeathDetails(deathDetails);
	}
	

	public ims.core.vo.Patient getMergedPatient(PatientShort patient) throws UniqueKeyViolationException 
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.getMergedPatient(patient);
	}

	public DeathDetailsVo getDeathDetails(PatientShort value)
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.getDeathDetails(value);
	}

	public GpLiteToPracticeLiteVo synchronizeGPPracticeDetails(String strGPCode) throws StaleObjectException, UniqueKeyViolationException
	{
		return null;
	}

	public Patient savePatient(Patient patient)	throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException, IndexOutOfBoundsException
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
			
		return impl.savePatient(patient, false);
	}

	public Patient saveDemographics(Patient patient, DeathDetailsVo deathDetails) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		ims.core.domain.Demographics impl = (ims.core.domain.Demographics) getDomainImpl(DemographicsImpl.class);
		
		return impl.saveDemographics(patient, deathDetails);
	}
}
