//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.21 build 41008.1030)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.nokdetails;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.NextOfKin;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.AddressType;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.PersonRelationship;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws FormOpenException
	{
		if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
		{
			if(!ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
				form.ccAddressSearch().setPhoneVisible(false);
		}
		
		if (form.getGlobalContext().Core.getNOKDetailsIsNotNull())
		{
			NextOfKin nok = (NextOfKin) form.getGlobalContext().Core.getNOKDetails().clone();
			populateScreenFromData( nok.getAddress());
				
			if (nok.getName() != null)
			{
				form.cmbTitle().setValue(nok.getName().getTitle());
				form.txtNOKSName().setValue(nok.getName().getSurname());
				form.txtNOKMiddlename().setValue(nok.getName().getMiddleName());
				form.txtNOKForename().setValue(nok.getName().getForename());
			}
			
			if(nok.getCommChannelsIsNotNull())
			{
				if(nok.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE) != null)
					form.txtPhoneWork().setValue(nok.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE).getCommValue());
				
				//WDEV-8427 - interface uses commchannel but screen uses phone field in NOK
				if(ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
				{
					if(nok.getCommChannels().getCommunicationChannel(ChannelType.HOME_PHONE) != null)
					{			
						if(nok.getAddressIsNotNull())
							nok.getAddress().setPhone(nok.getCommChannels().getCommunicationChannel(ChannelType.HOME_PHONE).getCommValue());
						
						if(nok.getAddress() == null)
						{
							nok.setAddress(new PersonAddress());
							nok.getAddress().setPhone(nok.getCommChannels().getCommunicationChannel(ChannelType.HOME_PHONE).getCommValue());
						}

						form.ccAddressSearch().setValue(nok.getAddress());
					}
				}
			}
			
			if (nok.getRelationship() == null)
			{
				if (form.getGlobalContext().Core.getNOKDetails().getTempFieldIsNotNull())
				{
					PersonRelationship lkupPersonRelationship = new PersonRelationship();
					form.cmbRelationship().newRow(lkupPersonRelationship, form.getGlobalContext().Core.getNOKDetails().getTempField());
					form.cmbRelationship().setValue(lkupPersonRelationship);
				}
			}
			else if (nok.getRelationshipIsNotNull())
				form.cmbRelationship().setValue(form.getGlobalContext().Core.getNOKDetails().getRelationship());
		}

		// Unless using local patient registration, this form should go to view
		// mode only
		if ((!ims.configuration.gen.ConfigFlag.DOM.LOCAL_PATIENT_REGISTRATION.getValue()) || form.getGlobalContext().Core.getParentFormMode().equals(FormMode.VIEW))
		{
			form.setMode(FormMode.VIEW);
			form.ccAddressSearch().setMode(FormMode.VIEW);
			form.ccAddressSearch().setComponentEnabled(false);
		}
		else
		{
			form.ccAddressSearch().setMode(FormMode.EDIT);
			form.ccAddressSearch().setComponentEnabled(true);
		}
		
		updateControlsState();//WDEV-17185
	}

	//WDEV-17185
	private void updateControlsState() 
	{
		form.txtNOKSName().setRequired(isAddressRecorded());
	}

	private void populateScreenFromData(PersonAddress address)
	{
		if (address != null)
		{
			form.ccAddressSearch().setValue(address);
		}
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void onBtnOKClick() throws PresentationLogicException
	{
		NextOfKin nok = null; 
		
	    if(form.txtNOKSName().getValue()==null && isAddressRecorded())//WDEV-17185
	    {
	    	form.getLocalContext().setErrorMessage(engine.showMessage("NOK surname is mandatory.", "", MessageButtons.OK, MessageIcon.INFORMATION));
	    	updateControlsState();//WDEV-17185
			return;
	    }
	    			    		    		   
		if (form.getGlobalContext().Core.getNOKDetailsIsNotNull())
		{
			nok = (NextOfKin) form.getGlobalContext().Core.getNOKDetails().clone();
		}
		else
		{
			nok = new NextOfKin();
		}

		nok.setAddress(form.ccAddressSearch().getValue());

		if (nok.getAddressIsNotNull())
		{
			nok.getAddress().setAddressType(AddressType.NOKHOME);
			
			// If the address is present also update the Home Phone in communication channels
			if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue() && nok.getCommChannelsIsNotNull())
			{
				nok.addCommunicationChannel(ChannelType.HOME_PHONE, nok.getAddress().getPhone());
			}
		}
		
		if (form.txtPhoneWork().getValue() != null && !form.txtPhoneWork().getValue().equals(""))
		{
			nok.addCommunicationChannel(ChannelType.WORK_PHONE, form.txtPhoneWork().getValue());
		}
		else
		{
			nok.addCommunicationChannel(ChannelType.WORK_PHONE, null);
		}

		PersonName name = nok.getName();
		if (name == null)
			name = new PersonName();
		
		name.setSurname(form.txtNOKSName().getValue());
		name.setMiddleName(form.txtNOKMiddlename().getValue());
		name.setForename(form.txtNOKForename().getValue());
		name.setTitle(form.cmbTitle().getValue());
		name.setUppers();
		nok.setName(name);

		nok.setRelationship(form.cmbRelationship().getValue());
		
		if(fieldsCleared())
			nok = null;

		form.getGlobalContext().Core.setNOKDetails(nok);
		engine.close(DialogResult.OK);
	}

	//WDEV-17185
	private boolean isAddressRecorded() 
	{
		PersonAddress address = form.ccAddressSearch().getValue();
		
		if((address!=null && (address.getLine1IsNotNull() || address.getLine2IsNotNull()
				|| address.getLine3IsNotNull() || address.getLine4IsNotNull() || address.getPhoneIsNotNull() || address.getPostCodeIsNotNull() || address.getPCTIsNotNull()))
				|| form.txtPhoneWork().getValue()!=null)
			return true;
		
		return false;
	}

	private boolean fieldsCleared() 
	{
	
		PersonAddress address = form.ccAddressSearch().getValue();
		
		if(form.txtNOKSName().getValue()!= null || form.txtNOKMiddlename().getValue() != null || form.txtNOKForename().getValue() != null || form.cmbTitle().getValue()!=null || (address!=null && (address.getLine1IsNotNull() || address.getLine2IsNotNull()
				|| address.getLine3IsNotNull() || address.getLine4IsNotNull() || address.getPhoneIsNotNull() || address.getPhoneIsNotNull()))
				|| form.txtPhoneWork().getValue()!=null || form.cmbRelationship().getValue()!=null)
			return false;
		
		return true;
	}

	@Override
	protected void onCloseBtn() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	

	private void clearAddressControls()
	{
		form.ccAddressSearch().setValue(null);
		form.ccAddressSearch().clearscreen();
	}

	@Override
	protected void onBtnCopyClick() throws PresentationLogicException
	{
		doCopy();
		updateControlsState();//WDEV-17185
	}

	private void doCopy()
	{
		clearAddressControls();
		if (form.getGlobalContext().Core.getNOKPersonAddressIsNotNull())
		{
			PersonAddress personAddress = (PersonAddress) form.getGlobalContext().Core.getNOKPersonAddress().clone();
			
			//start WDEV-14370
			if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
			{
				personAddress.setPhone(form.getGlobalContext().Core.getCommChannels().getCommunicationChannel(ChannelType.HOME_PHONE) !=null ? form.getGlobalContext().Core.getCommChannels().getCommunicationChannel(ChannelType.HOME_PHONE).getCommValue() : null);
			}
			//end
			
			form.ccAddressSearch().setComponentEnabled(false);//WDEV-17432
			
			populateScreenFromData(personAddress);
			displayPhoneNumbers();
			
			form.ccAddressSearch().setComponentEnabled(true);//WDEV-17432
		}
	}

	private void displayPhoneNumbers()
	{
		form.txtPhoneWork().setValue(form.getGlobalContext().Core.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE) !=null ? form.getGlobalContext().Core.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE).getCommValue() : null);
		
	}

	@Override
	protected void onBtnClearFieldsClick() throws PresentationLogicException 
	{
		form.cmbTitle().setValue(null);
		form.txtNOKSName().setValue(null);
		form.txtNOKMiddlename().setValue(null);
		form.txtNOKForename().setValue(null);
		clearAddressControls();		
		form.txtPhoneWork().setValue(null);
		form.cmbRelationship().setValue(null);
		
		updateControlsState();//WDEV-17185
	}
}
