//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.questionlist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrSearchLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageTextClassContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class GroupFilterRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 544, 10, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Questions and Information", startTabIndex.intValue() + 4);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 544, 74, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Information Only", startTabIndex.intValue() + 3);
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 544, 42, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Questions Only", -1);
				}
				public void setText(GroupFilterEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupFilterEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupFilterEnumeration.None;
						case 0: return GroupFilterEnumeration.rdoQuestionAndInfo;
						case 1: return GroupFilterEnumeration.rdoInformationOnly;
						case 2: return GroupFilterEnumeration.rdoQuestionOnly;
					}
					return null;
				}
				public void setValue(GroupFilterEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupFilterEnumeration.None.id);
				}
				public boolean isEnabled(GroupFilterEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupFilterEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupFilterEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupFilterEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupFilterEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupFilterEnumeration None = new GroupFilterEnumeration(-1);
				public static GroupFilterEnumeration rdoQuestionAndInfo = new GroupFilterEnumeration(0);
				public static GroupFilterEnumeration rdoInformationOnly = new GroupFilterEnumeration(1);
				public static GroupFilterEnumeration rdoQuestionOnly = new GroupFilterEnumeration(2);
				private GroupFilterEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupFilterEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 293, 42, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 293, 10, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Text:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Classification:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 337, 8, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 337, 40, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbStatusTemp);
				cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
				super.addComboBox(cmbStatus);
		
				// Tree Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 89, 8, 192, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuTreeMenu, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 768, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 736, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupFilter);
				GroupFilterRadioButton GroupFilter = (GroupFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupFilterRadioButton.class, tmpGroupFilter);
				GroupFilter.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupFilter);
			}

			public TextBox txtTextAndClass()
			{
				return (TextBox)super.getControl(3);
			}
			public cmbStatusComboBox cmbStatus()
			{
				return (cmbStatusComboBox)super.getComboBox(0);
			}
			public TreeView treTextAndClass()
			{
				return (TreeView)super.getControl(5);
			}
			public ImageButton imbClearTextAndClass()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbSearchTextAndClass()
			{
				return (ImageButton)super.getControl(7);
			}
			public GroupFilterRadioButton GroupFilter()
			{
				return (GroupFilterRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabPageClassificationContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Classification:", new Integer(1), null, new Integer(0)}));
		
				// Tree Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 88, 8, 192, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 320, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 288, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public TreeView treClassification()
			{
				return (TreeView)super.getControl(1);
			}
			public ImageButton imbClearClassification()
			{
				return (ImageButton)super.getControl(2);
			}
			public ImageButton imbSearchClassification()
			{
				return (ImageButton)super.getControl(3);
			}
		}
		public static class tabPageTextContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Text:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 64, 16, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 304, 11, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 272, 11, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public TextBox txtText()
			{
				return (TextBox)super.getControl(1);
			}
			public ImageButton imbClearText()
			{
				return (ImageButton)super.getControl(2);
			}
			public ImageButton imbSearchText()
			{
				return (ImageButton)super.getControl(3);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 816, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabPageTextClass = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Search by Text and Classification", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageTextClassContainer m_tabPageTextClassContainer = (tabPageTextClassContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTextClassContainer.class, m_tabPageTextClass, factory);
			super.addContainer(m_tabPageTextClass, m_tabPageTextClassContainer);
			ims.framework.utils.SizeInfo m_tabPageTextClassDesignSize = new ims.framework.utils.SizeInfo(816, 144);
			ims.framework.utils.SizeInfo m_tabPageTextClassRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
			m_tabPageTextClassContainer.setContext(form, appForm, m_tabPageTextClass, loader, form_images_local, contextMenus, startControlID, m_tabPageTextClassDesignSize, m_tabPageTextClassRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 816, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabPageClassification = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Search By Classification", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageClassificationContainer m_tabPageClassificationContainer = (tabPageClassificationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageClassificationContainer.class, m_tabPageClassification, factory);
			super.addContainer(m_tabPageClassification, m_tabPageClassificationContainer);
			ims.framework.utils.SizeInfo m_tabPageClassificationDesignSize = new ims.framework.utils.SizeInfo(816, 144);
			ims.framework.utils.SizeInfo m_tabPageClassificationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
			m_tabPageClassificationContainer.setContext(form, appForm, m_tabPageClassification, loader, form_images_local, contextMenus, startControlID, m_tabPageClassificationDesignSize, m_tabPageClassificationRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 816, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabPageText = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Question Text Search", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageTextContainer m_tabPageTextContainer = (tabPageTextContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTextContainer.class, m_tabPageText, factory);
			super.addContainer(m_tabPageText, m_tabPageTextContainer);
			ims.framework.utils.SizeInfo m_tabPageTextDesignSize = new ims.framework.utils.SizeInfo(816, 144);
			ims.framework.utils.SizeInfo m_tabPageTextRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
			m_tabPageTextContainer.setContext(form, appForm, m_tabPageText, loader, form_images_local, contextMenus, startControlID, m_tabPageTextDesignSize, m_tabPageTextRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageTextClass().setVisible(false);
			tabPageClassification().setVisible(false);
			tabPageText().setVisible(false);
		}
		public void settabPageTextClassEnabled(boolean value)
		{
			tabPageTextClass().setEnabled(value);
		}
		public void settabPageClassificationEnabled(boolean value)
		{
			tabPageClassification().setEnabled(value);
		}
		public void settabPageTextEnabled(boolean value)
		{
			tabPageText().setEnabled(value);
		}
		public void showtabPageTextClass()
		{
			tabPageClassification().setVisible(false);
			tabPageText().setVisible(false);
			tabPageTextClass().setVisible(true);
		}
		public void showtabPageClassification()
		{
			tabPageTextClass().setVisible(false);
			tabPageText().setVisible(false);
			tabPageClassification().setVisible(true);
		}
		public void showtabPageText()
		{
			tabPageTextClass().setVisible(false);
			tabPageClassification().setVisible(false);
			tabPageText().setVisible(true);
		}

		public tabPageTextClassContainer tabPageTextClass()
		{
			return (tabPageTextClassContainer)super.layers.get(0);
		}
		public tabPageClassificationContainer tabPageClassification()
		{
			return (tabPageClassificationContainer)super.layers.get(1);
		}
		public tabPageTextContainer tabPageText()
		{
			return (tabPageTextContainer)super.layers.get(2);
		}
	}
	public static class lyrTreesLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageSearchContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdQuestionsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdQuestionsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setIsParentRow(boolean value)
				{
					super.setIsParentRow(value);
				}
				public boolean isParentRow()
				{
					return super.isParentRow();
				}
				public void setExpanded(boolean value)
				{
					super.setExpanded(value);
				}
				public boolean isExpanded()
				{
					return super.isExpanded();
				}
				public void setcolQuestionTextReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolQuestionTextReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolQuestionTextOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolQuestionText(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolQuestionText()
				{
					return (String)super.row.get(0);
				}
				public void setcolQuestionText(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolQuestionTextTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolQuestionShortTextReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolQuestionShortTextReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolQuestionShortTextOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolQuestionShortText(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getcolQuestionShortText()
				{
					return (String)super.row.get(1);
				}
				public void setcolQuestionShortText(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolQuestionShortTextTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public java.lang.Object getValue()
				{
					return super.row.getValue();
				}
				public void setValue(java.lang.Object value)
				{
					super.row.setValue(value);
				}
				public grdQuestionsRow getParentRow()
				{
					return super.row.getParent() == null ? null : new grdQuestionsRow(super.row.getParent());
				}
				public grdQuestionsRowCollection getRows()
				{
					if(this.collection == null)
						this.collection = new grdQuestionsRowCollection(super.row.getRows());
					return this.collection;
				}
				private grdQuestionsRowCollection collection;
			}
			public static class grdQuestionsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdQuestionsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdQuestionsRow get(int index)
				{
					return new grdQuestionsRow(super.collection.get(index));
				}
				public grdQuestionsRow newRow()
				{
					return new grdQuestionsRow(super.collection.newRow());
				}
				public grdQuestionsRow newRow(boolean autoSelect)
				{
					return new grdQuestionsRow(super.collection.newRow(autoSelect));
				}
				public grdQuestionsRow newRowAt(int index)
				{
					return new grdQuestionsRow(super.collection.newRowAt(index));
				}
				public grdQuestionsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdQuestionsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdQuestionsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow[] getAllRows()
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow row = getRows().get(x);
						rows.add(row);
						GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow[] result = new GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow)rows.get(x);
					}
					return result;
				}
				public GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow[] getAllRows(GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow parentRow)
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow row = parentRow.getRows().get(x);
						rows.add(row);
						GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow[] result = new GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow)rows.get(x);
					}
					return result;
				}
				public void expandAll()
				{
					expandCollapseAll(true);
				}
				public void collapseAll()
				{
					expandCollapseAll(false);
				}
				private void expandCollapseAll(boolean expand)
				{
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow row = getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void expandCollapseRow(GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow parentRow, boolean expand)
				{
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow row = parentRow.getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
				}
				public void setcolQuestionShortTextCaption(String value)
				{
					this.grid.setColumnCaption(1, value);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public java.lang.Object[] getValues()
				{
					java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public java.lang.Object getValue()
				{
					return super.grid.getValue();
				}
				public void setValue(java.lang.Object value)
				{
					super.grid.setValue(value);
				}
				public grdQuestionsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdQuestionsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdQuestionsRowCollection getRows()
				{
					return new grdQuestionsRowCollection(super.grid.getRows());
				}
				public grdQuestionsRow getRowByValue(java.lang.Object value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdQuestionsRow(row);
				}
				public void setcolQuestionTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolQuestionTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolQuestionShortTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolQuestionShortTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 776, 408, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdQuestionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdQuestionsTemp);
				grdQuestionsGrid grdQuestions = (grdQuestionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdQuestionsGrid.class, m_grdQuestionsTemp);
				grdQuestions.addTreeColumn("Text", 0, 425, false, true);
				grdQuestions.addStringColumn("Short Text", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdQuestions);
		
				// Horizontal Line Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 424, 776, 8, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,new Integer(0)}));
			}

			public grdQuestionsGrid grdQuestions()
			{
				return (grdQuestionsGrid)super.getGrid(0);
			}
		}
		public static class tabPageSelectContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSelectedQuestionsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSelectedQuestionsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setIsParentRow(boolean value)
				{
					super.setIsParentRow(value);
				}
				public boolean isParentRow()
				{
					return super.isParentRow();
				}
				public void setExpanded(boolean value)
				{
					super.setExpanded(value);
				}
				public boolean isExpanded()
				{
					return super.isExpanded();
				}
				public void setcolQuestionTextReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolQuestionTextReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolQuestionTextOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolQuestionText(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolQuestionText()
				{
					return (String)super.row.get(0);
				}
				public void setcolQuestionText(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolQuestionTextTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolSelectOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolSelect(String value)
				{
					super.row.setTooltip(1, value);
				}
				public boolean getcolSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setcolSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellcolSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.QuestionInformationShortVo getValue()
				{
					return (ims.core.vo.QuestionInformationShortVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.QuestionInformationShortVo value)
				{
					super.row.setValue(value);
				}
				public grdSelectedQuestionsRow getParentRow()
				{
					return super.row.getParent() == null ? null : new grdSelectedQuestionsRow(super.row.getParent());
				}
				public grdSelectedQuestionsRowCollection getRows()
				{
					if(this.collection == null)
						this.collection = new grdSelectedQuestionsRowCollection(super.row.getRows());
					return this.collection;
				}
				private grdSelectedQuestionsRowCollection collection;
			}
			public static class grdSelectedQuestionsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSelectedQuestionsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSelectedQuestionsRow get(int index)
				{
					return new grdSelectedQuestionsRow(super.collection.get(index));
				}
				public grdSelectedQuestionsRow newRow()
				{
					return new grdSelectedQuestionsRow(super.collection.newRow());
				}
				public grdSelectedQuestionsRow newRow(boolean autoSelect)
				{
					return new grdSelectedQuestionsRow(super.collection.newRow(autoSelect));
				}
				public grdSelectedQuestionsRow newRowAt(int index)
				{
					return new grdSelectedQuestionsRow(super.collection.newRowAt(index));
				}
				public grdSelectedQuestionsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSelectedQuestionsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSelectedQuestionsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow[] getAllRows()
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow row = getRows().get(x);
						rows.add(row);
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow[] result = new GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow)rows.get(x);
					}
					return result;
				}
				public GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow[] getAllRows(GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow parentRow)
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow row = parentRow.getRows().get(x);
						rows.add(row);
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow[] result = new GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow)rows.get(x);
					}
					return result;
				}
				public void expandAll()
				{
					expandCollapseAll(true);
				}
				public void collapseAll()
				{
					expandCollapseAll(false);
				}
				private void expandCollapseAll(boolean expand)
				{
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow row = getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void expandCollapseRow(GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow parentRow, boolean expand)
				{
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow row = parentRow.getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.QuestionInformationShortVoCollection getValues()
				{
					ims.core.vo.QuestionInformationShortVoCollection listOfValues = new ims.core.vo.QuestionInformationShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.QuestionInformationShortVo getValue()
				{
					return (ims.core.vo.QuestionInformationShortVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.QuestionInformationShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdSelectedQuestionsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSelectedQuestionsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSelectedQuestionsRowCollection getRows()
				{
					return new grdSelectedQuestionsRowCollection(super.grid.getRows());
				}
				public grdSelectedQuestionsRow getRowByValue(ims.core.vo.QuestionInformationShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSelectedQuestionsRow(row);
				}
				public void setcolQuestionTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolQuestionTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdListedQuestionsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdListedQuestionsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setIsParentRow(boolean value)
				{
					super.setIsParentRow(value);
				}
				public boolean isParentRow()
				{
					return super.isParentRow();
				}
				public void setExpanded(boolean value)
				{
					super.setExpanded(value);
				}
				public boolean isExpanded()
				{
					return super.isExpanded();
				}
				public void setcolQuestionTextReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolQuestionTextReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolQuestionTextOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolQuestionText(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolQuestionText()
				{
					return (String)super.row.get(0);
				}
				public void setcolQuestionText(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolQuestionTextTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolSelectOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolSelect(String value)
				{
					super.row.setTooltip(1, value);
				}
				public boolean getcolSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setcolSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellcolSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public java.lang.Object getValue()
				{
					return super.row.getValue();
				}
				public void setValue(java.lang.Object value)
				{
					super.row.setValue(value);
				}
				public grdListedQuestionsRow getParentRow()
				{
					return super.row.getParent() == null ? null : new grdListedQuestionsRow(super.row.getParent());
				}
				public grdListedQuestionsRowCollection getRows()
				{
					if(this.collection == null)
						this.collection = new grdListedQuestionsRowCollection(super.row.getRows());
					return this.collection;
				}
				private grdListedQuestionsRowCollection collection;
			}
			public static class grdListedQuestionsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdListedQuestionsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdListedQuestionsRow get(int index)
				{
					return new grdListedQuestionsRow(super.collection.get(index));
				}
				public grdListedQuestionsRow newRow()
				{
					return new grdListedQuestionsRow(super.collection.newRow());
				}
				public grdListedQuestionsRow newRow(boolean autoSelect)
				{
					return new grdListedQuestionsRow(super.collection.newRow(autoSelect));
				}
				public grdListedQuestionsRow newRowAt(int index)
				{
					return new grdListedQuestionsRow(super.collection.newRowAt(index));
				}
				public grdListedQuestionsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdListedQuestionsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdListedQuestionsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow[] getAllRows()
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow row = getRows().get(x);
						rows.add(row);
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow[] result = new GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow)rows.get(x);
					}
					return result;
				}
				public GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow[] getAllRows(GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow parentRow)
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow row = parentRow.getRows().get(x);
						rows.add(row);
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow[] result = new GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow)rows.get(x);
					}
					return result;
				}
				public void expandAll()
				{
					expandCollapseAll(true);
				}
				public void collapseAll()
				{
					expandCollapseAll(false);
				}
				private void expandCollapseAll(boolean expand)
				{
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow row = getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void expandCollapseRow(GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow parentRow, boolean expand)
				{
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow row = parentRow.getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public java.lang.Object[] getValues()
				{
					java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public java.lang.Object getValue()
				{
					return super.grid.getValue();
				}
				public void setValue(java.lang.Object value)
				{
					super.grid.setValue(value);
				}
				public grdListedQuestionsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdListedQuestionsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdListedQuestionsRowCollection getRows()
				{
					return new grdListedQuestionsRowCollection(super.grid.getRows());
				}
				public grdListedQuestionsRow getRowByValue(java.lang.Object value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdListedQuestionsRow(row);
				}
				public void setcolQuestionTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolQuestionTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Available", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 416, 8, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Selected", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 712, 416, 80, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 624, 416, 80, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "OK", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 416, 32, 376, 368, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSelectedQuestionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.EDITABLE, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSelectedQuestionsTemp);
				grdSelectedQuestionsGrid grdSelectedQuestions = (grdSelectedQuestionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSelectedQuestionsGrid.class, m_grdSelectedQuestionsTemp);
				grdSelectedQuestions.addTreeColumn("Text", 0, 275, false, true);
				grdSelectedQuestions.addBoolColumn("Select", 1, 0, -1, false, false, 0, true);
				super.addGrid(grdSelectedQuestions);
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 368, 368, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Grid m_grdListedQuestionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.EDITABLE, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdListedQuestionsTemp);
				grdListedQuestionsGrid grdListedQuestions = (grdListedQuestionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdListedQuestionsGrid.class, m_grdListedQuestionsTemp);
				grdListedQuestions.addTreeColumn("Text", 0, 275, false, true);
				grdListedQuestions.addBoolColumn("Select", 1, 0, -1, false, false, 0, true);
				super.addGrid(grdListedQuestions);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 380, 136, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Admin.CloseEnabled24, form_images_local.Admin.CloseDisabled24, "Remove Selected Questions/Information", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 380, 104, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Admin.RightArrowEnabled24, form_images_local.Admin.RightArrowDisabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public Button btnCancel()
			{
				return (Button)super.getControl(2);
			}
			public Button btnSelect()
			{
				return (Button)super.getControl(3);
			}
			public grdSelectedQuestionsGrid grdSelectedQuestions()
			{
				return (grdSelectedQuestionsGrid)super.getGrid(0);
			}
			public grdListedQuestionsGrid grdListedQuestions()
			{
				return (grdListedQuestionsGrid)super.getGrid(1);
			}
			public ImageButton btnRemoveSelected()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton btnMoveSelected()
			{
				return (ImageButton)super.getControl(7);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 152, 816, 472, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageSearch = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL," ", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageSearchContainer m_tabPageSearchContainer = (tabPageSearchContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageSearchContainer.class, m_tabPageSearch, factory);
			super.addContainer(m_tabPageSearch, m_tabPageSearchContainer);
			ims.framework.utils.SizeInfo m_tabPageSearchDesignSize = new ims.framework.utils.SizeInfo(816, 472);
			ims.framework.utils.SizeInfo m_tabPageSearchRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper33.getWidth(), anchoringHelper33.getHeight());
			m_tabPageSearchContainer.setContext(form, appForm, m_tabPageSearch, loader, form_images_local, contextMenus, startControlID, m_tabPageSearchDesignSize, m_tabPageSearchRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 16, 152, 816, 472, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageSelect = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL," ", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageSelectContainer m_tabPageSelectContainer = (tabPageSelectContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageSelectContainer.class, m_tabPageSelect, factory);
			super.addContainer(m_tabPageSelect, m_tabPageSelectContainer);
			ims.framework.utils.SizeInfo m_tabPageSelectDesignSize = new ims.framework.utils.SizeInfo(816, 472);
			ims.framework.utils.SizeInfo m_tabPageSelectRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper34.getWidth(), anchoringHelper34.getHeight());
			m_tabPageSelectContainer.setContext(form, appForm, m_tabPageSelect, loader, form_images_local, contextMenus, startControlID, m_tabPageSelectDesignSize, m_tabPageSelectRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageSearch().setVisible(false);
			tabPageSelect().setVisible(false);
		}
		public void showtabPageSearch()
		{
			tabPageSelect().setVisible(false);
			tabPageSearch().setVisible(true);
		}
		public void showtabPageSelect()
		{
			tabPageSearch().setVisible(false);
			tabPageSelect().setVisible(true);
		}

		public tabPageSearchContainer tabPageSearch()
		{
			return (tabPageSearchContainer)super.layers.get(0);
		}
		public tabPageSelectContainer tabPageSelect()
		{
			return (tabPageSelectContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuTreeMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuTreeMenuExpandAllItem = factory.createMenuItem(startControlID.intValue() + 1, "ExpandAll", true, false, new Integer(102261), true, false);
		contextMenus.contextMenuTreeMenu.add(contextMenus.contextMenuTreeMenuExpandAllItem);
		contextMenus.contextMenuTreeMenuCollapseAllItem = factory.createMenuItem(startControlID.intValue() + 2, "Collapse All ", true, false, new Integer(102260), true, false);
		contextMenus.contextMenuTreeMenu.add(contextMenus.contextMenuTreeMenuCollapseAllItem);
		form.registerMenu(contextMenus.contextMenuTreeMenu);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 3, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 5, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 6, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 7, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 8, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 9, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 10, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Layer Clasess
		lyrSearchLayer m_lyrSearchLayer = (lyrSearchLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSearchLayer.class, this, factory);
		super.addLayer(m_lyrSearchLayer);
		m_lyrSearchLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		lyrTreesLayer m_lyrTreesLayer = (lyrTreesLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTreesLayer.class, this, factory);
		super.addLayer(m_lyrTreesLayer);
		m_lyrTreesLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrSearchLayer lyrSearch()
	{
		return (lyrSearchLayer)super.getLayer(0);
	}
	public lyrTreesLayer lyrTrees()
	{
		return (lyrTreesLayer)super.getLayer(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
			Core = new CoreForms();
			OCRR = new OCRRForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				ProviderSystemAdmin = new LocalFormName(116101);
			}
			public final FormName ProviderSystemAdmin;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				QuestionListSelect = new LocalFormName(116107);
				QuestionAnswer = new LocalFormName(102168);
			}
			public final FormName QuestionListSelect;
			public final FormName QuestionAnswer;
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				TestEdit = new LocalFormName(116104);
			}
			public final FormName TestEdit;
		}

		public AdminForms Admin;
		public CoreForms Core;
		public OCRRForms OCRR;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				Delete2 = new ImageHelper(102151, "Images/Core/delete_black.png", new Integer(16), new Integer(16));
				PrintPreview = new ImageHelper(102221, "Images/Core/PrintPreview.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image Delete2;
			public final ims.framework.utils.Image PrintPreview;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Information = new ImageHelper(116101, "Images/OCRR/Information.gif", new Integer(16), new Integer(16));
				Question = new ImageHelper(116100, "Images/OCRR/Question.gif", new Integer(16), new Integer(16));
				QuestionCategory = new ImageHelper(116102, "Images/OCRR/QCategory.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Information;
			public final ims.framework.utils.Image Question;
			public final ims.framework.utils.Image QuestionCategory;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				RightArrowDisabled24 = new ImageHelper(103363, "Images/Admin/arrow_right_disabled_24.png", new Integer(24), new Integer(24));
				RightArrowEnabled24 = new ImageHelper(103362, "Images/Admin/arrow_right_enabled_24.png", new Integer(24), new Integer(24));
				CloseDisabled24 = new ImageHelper(103375, "Images/Admin/close_a_disabled_24.png", new Integer(24), new Integer(24));
				CloseEnabled24 = new ImageHelper(103374, "Images/Admin/close_a_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image RightArrowDisabled24;
			public final ims.framework.utils.Image RightArrowEnabled24;
			public final ims.framework.utils.Image CloseDisabled24;
			public final ims.framework.utils.Image CloseEnabled24;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_MoveRecords = new ims.framework.ContextVariable("MoveRecords", prefix + "_lv_Core.QuestionList.__internal_x_context__MoveRecords_" + componentIdentifier + "");
			cxl_IsTextAndClassificationSearch = new ims.framework.ContextVariable("IsTextAndClassificationSearch", prefix + "_lv_Core.QuestionList.__internal_x_context__IsTextAndClassificationSearch_" + componentIdentifier + "");
		}
		
		public boolean getMoveRecordsIsNotNull()
		{
			return !cxl_MoveRecords.getValueIsNull(context);
		}
		public Boolean getMoveRecords()
		{
			return (Boolean)cxl_MoveRecords.getValue(context);
		}
		public void setMoveRecords(Boolean value)
		{
			cxl_MoveRecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MoveRecords = null;
		public boolean getIsTextAndClassificationSearchIsNotNull()
		{
			return !cxl_IsTextAndClassificationSearch.getValueIsNull(context);
		}
		public Boolean getIsTextAndClassificationSearch()
		{
			return (Boolean)cxl_IsTextAndClassificationSearch.getValue(context);
		}
		public void setIsTextAndClassificationSearch(Boolean value)
		{
			cxl_IsTextAndClassificationSearch.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsTextAndClassificationSearch = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class TreeMenu implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ExpandAll = 1;
			public static final int CollapseAll = 2;
		}
		public void disableAllTreeMenuMenuItems()
		{
			this.contextMenuTreeMenuExpandAllItem.setEnabled(false);
			this.contextMenuTreeMenuCollapseAllItem.setEnabled(false);
		}
		public void hideAllTreeMenuMenuItems()
		{
			this.contextMenuTreeMenuExpandAllItem.setVisible(false);
			this.contextMenuTreeMenuCollapseAllItem.setVisible(false);
		}
		private Menu contextMenuTreeMenu;
		public MenuItem getTreeMenuExpandAllItem()
		{
			return this.contextMenuTreeMenuExpandAllItem;
		}
		private MenuItem contextMenuTreeMenuExpandAllItem;
		public MenuItem getTreeMenuCollapseAllItem()
		{
			return this.contextMenuTreeMenuCollapseAllItem;
		}
		private MenuItem contextMenuTreeMenuCollapseAllItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 3;
			public static final int Update = 4;
			public static final int Remove = 5;
			public static final int View = 6;
			public static final int MoveUp = 7;
			public static final int MoveDown = 8;
			public static final int Replace = 9;
			public static final int Confirm = 10;
			public static final int EDIT_VIEW_ICP_ACTIONS = 11;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[81];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedQuestion", "BO-1058100000-ID", "ID_QuestionInformation");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedQuestion", "BO-1058100000-TEXT", "Text");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedQuestion", "BO-1058100000-SHORTTEXT", "ShortText");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedQuestion", "BO-1058100000-ISQUESTION", "IsQuestion");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedQuestion", "BO-1058100000-GENDERSPECIFIC", "GenderSpecific");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedQuestion", "BO-1058100000-AGERANGEMIN", "AgeRangeMin");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedQuestion", "BO-1058100000-AGERANGEMAX", "AgeRangeMax");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedQuestion", "BO-1058100000-STATUS", "Status");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedQuestion", "BO-1058100000-LEGENDTEXT", "LegendText");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedQuestion", "BO-1058100000-QUESTIONTYPE", "QuestionType");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
