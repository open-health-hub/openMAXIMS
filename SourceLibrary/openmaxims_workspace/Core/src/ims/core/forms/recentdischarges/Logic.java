//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ander Telleria using IMS Development Environment (version 1.66 build 3261.22124)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.recentdischarges;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.recentdischarges.GenForm.grdDischargesRow;
import ims.core.vo.DischargedEpisodeVo;
import ims.core.vo.DischargedEpisodeVoCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonName;
import ims.core.vo.RecentDischargesFilterVo;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PatIdType;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int COL_ACTUAL_DISCHARGE_DATETIME = 7;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		clearControls();
		form.cmbIDType().setValue(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
	}

	private void refreshSearchCriteria() 
	{
		RecentDischargesFilterVo voFilter = form.getGlobalContext().STHK.getRecentDischargesListFilter();
		
		if (voFilter != null)
		{
			form.txtIDNum().setValue(voFilter.getHospNum());
			form.cmbIDType().setValue(voFilter.getIDType());
			form.txtSurname().setValue(voFilter.getSurname());
			form.txtForeName().setValue(voFilter.getForename());
			form.dteFrom().setValue(voFilter.getFromDate());
			form.dteTo().setValue(voFilter.getToDate());
			form.cmbDischargeDestination().setValue(voFilter.getDischDestination());
			
			for(int i = 0 ; voFilter.getConsultantIsNotNull() && i < form.qmbHCP().getValues().size() ; i++)
			{
				HcpLiteVo voHCP = (HcpLiteVo)form.qmbHCP().getValues().get(i);
				if (voHCP.getID_Hcp().equals(voFilter.getConsultant().getID_Hcp()))
					form.qmbHCP().setValue((HcpLiteVo)form.qmbHCP().getValues().get(i));
			}
			if ( form.qmbHCP().getValue() == null && voFilter.getConsultantIsNotNull())
			{
				HcpLiteVo voHCP = domain.getHCP(voFilter.getConsultant().getID_Hcp());
				form.qmbHCP().newRow(voHCP, voHCP.getMos().getName().toString());
				form.qmbHCP().setValue(voHCP);
			}
			
			search();
		}
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearControls();
		//wdev-11790
		form.dteTo().setValue(null);
		form.dteFrom().setValue(null);
		//--------------
		
		form.lblTotal().setValue("Total : 0");

//		//Clear the selected patient information in the Engine
		form.getGlobalContext().Core.setSelectingPatientForm(null);
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setPatientToBeDisplayed(null);
		engine.setPatientInfo("Please enter Patient ID or Surname and/or Forename");
		
		form.getGlobalContext().STHK.setRecentDischargesListFilter(null);
	}

	private void clearControls() 
	{
		form.cmbDischargeDestination().setValue(null);
		form.qmbHCP().setValue(null);
		form.txtIDNum().setValue(null);
		form.txtForeName().setValue(null);
		form.txtSurname().setValue(null);
		form.grdDischarges().getRows().clear();
	}
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}
	
	private String[] validateSearchUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>();
		boolean isFromNotNull = form.dteFrom().getValue() != null;
		boolean isToNotNull = form.dteTo().getValue() != null;
		if (isFromNotNull && isToNotNull && form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				errors.add("Discharges From date should not be after the Discharges To date.");
			
			}
		if (isFromNotNull && form.dteFrom().getValue().isGreaterThan(new Date()))
			{
				errors.add("Discharges From date should not be in the future.");
			}
		if (isToNotNull && form.dteTo().getValue().isGreaterThan(new Date()))
			{
				errors.add("Discharges To date should not be in the future.");
			
			}
		if (errors.size() == 0)
			return null;
		String[] result = new String[errors.size()];
		errors.toArray(result);
		return result;
	}
	private void search() 
	{
		String[] errors = validateSearchUIRules();
		if (errors!=null && errors.length>0)
		{
			engine.showErrors(errors);
			return;
		}

		form.grdDischarges().getRows().clear();
		form.lblTotal().setValue("Total : 0"); // WDEV-18099
		
		RecentDischargesFilterVo voFilter = new RecentDischargesFilterVo();

		if (form.txtIDNum().getValue() != null
			&& form.cmbIDType().getValue() == null)
		{
			engine.showErrors(new String[]{"Please enter both an Identifier type as well as its value."});
			return;
		}

		voFilter.setHospNum(form.txtIDNum().getValue());
		voFilter.setIDType(form.cmbIDType().getValue());
		
		//WDEV-13065 -- if (form.txtIDNum().getValue() == null)
		
		voFilter.setDischDestination(form.cmbDischargeDestination().getValue());
		voFilter.setForename(form.txtForeName().getValue());
		voFilter.setSurname(form.txtSurname().getValue());
		voFilter.setConsultant(form.qmbHCP().getValue());
		voFilter.setFromDate(form.dteFrom().getValue());
		voFilter.setToDate(form.dteTo().getValue());
		
		if (voFilter.countFieldsWithValue() == 1 
			&& voFilter.getIDTypeIsNotNull()) 
		{
			engine.showMessage("Please enter some valid search criteria.", "Invalid search criteria", MessageButtons.OK, MessageIcon.ERROR);
			return;
		}


		form.getGlobalContext().STHK.setRecentDischargesListFilter(voFilter);

		DischargedEpisodeVoCollection voColl;
		
		if ((voFilter.countFieldsWithValue() == 1 && voFilter.getIDType() == null) || voFilter.countFieldsWithValue() > 1)
		{
			voColl = domain.listRecentDischarges(voFilter);
		}
		else
		{
			engine.showMessage("Please enter some search criteria.", "Invalid search criteria", MessageButtons.OK, MessageIcon.ERROR);
			return;
		}
		
		if (voColl == null || voColl.size() == 0)
		{
			engine.showMessage("No Recent Discharge records match your search criteria.", "No data found", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}
		if (voColl != null)
			form.lblTotal().setValue("Total : " + String.valueOf(voColl.size()));
			
		
		if (voColl!=null)
			populateGrid(voColl);
	}

	private void populateGrid(DischargedEpisodeVoCollection disEpis) 
	{
		for (int i=0;i<disEpis.size();i++)
		{
			DischargedEpisodeVo epis = disEpis.get(i);
			form.grdDischarges().setValue(epis);
			grdDischargesRow aRow = form.grdDischarges().getRows().newRow();
			if (epis.getPasEventIsNotNull())
			{
				aRow.setValue(epis);
				
				if (epis.getPasEvent().getConsultantIsNotNull())
					if (epis.getPasEvent().getConsultant().getMosIsNotNull())
						if (epis.getPasEvent().getConsultant().getMos().getNameIsNotNull())
							aRow.setColConsultant(epis.getPasEvent().getConsultant().getMos().getName().toString());
				if (epis.getPasEvent().getPatientIsNotNull())
				{
					epis.getPasEvent().getPatient().calculateAge();

					if (epis.getPasEvent().getPatient().getIdentifiersIsNotNull())
						for (int j=0;j<epis.getPasEvent().getPatient().getIdentifiers().size();j++)
							if (epis.getPasEvent().getPatient().getIdentifiers().get(j).getType().equals(PatIdType.HOSPNUM))
								aRow.setColHOSNUM(epis.getPasEvent().getPatient().getIdentifiers().get(j).getValue());
					if (epis.getPasEvent().getPatient().getSexIsNotNull())
						aRow.setColPatSex(epis.getPasEvent().getPatient().getSex().getText());
					if (epis.getPasEvent().getPatient().getNameIsNotNull())
						if (epis.getPasEvent().getPatient().getName().getSurnameIsNotNull())
							aRow.setColSurname(epis.getPasEvent().getPatient().getName().getSurname());
						if (epis.getPasEvent().getPatient().getName().getForenameIsNotNull())
							aRow.setColForename(epis.getPasEvent().getPatient().getName().getForename());
						
					if (epis.getPasEvent().getLocationIsNotNull())
						aRow.setColWard(epis.getPasEvent().getLocation().getName());
				
					if(epis.getPasEvent().getPatient().getAssociatedPatientIsNotNull())
						aRow.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
						
					if (epis.getPasEvent().getPatient().getDodIsNotNull())
						aRow.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());			
				}
				if (epis.getDischargeDateTimeIsNotNull())
					aRow.setColDateTime(epis.getDischargeDateTime().toString());
				if (epis.getDischargeDestinationIsNotNull())
					aRow.setColDestination(epis.getDischargeDestination().getText());
			}
		}
	}
	@Override
	protected void onQmbHCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		if (value != null)
		{
			HcpFilter voHCPFilter = new HcpFilter();
			PersonName name = new PersonName();
			name.setSurname(value);
			voHCPFilter.setQueryName(name);
			voHCPFilter.setHcpType(HcpDisType.MEDICAL);
			
			HcpLiteVoCollection voColl = domain.listHCPs(voHCPFilter);

			voColl.sort();
			form.qmbHCP().clear();
			for (int i = 0; i < voColl.size(); i++)
			{
				form.qmbHCP().newRow(voColl.get(i), voColl.get(i).getIHcpName());
			}
			if (voColl.size() == 1)
				form.qmbHCP().setValue(voColl.get(0));
			else if (voColl.size() > 1)
				form.qmbHCP().showOpened();
		}
	}

	@Override
	protected void onGrdDischargesSelectionChanged() throws PresentationLogicException 
	{
		if (form.grdDischarges().getValue() == null)
			return;
			
		PatientShort ps = null;
		if (form.grdDischarges().getValue().getPasEventIsNotNull()
			&& form.grdDischarges().getValue().getPasEvent().getPatientIsNotNull())
			ps = (PatientShort)form.grdDischarges().getValue().getPasEvent().getPatient();

		if (ps != null)
		{
			form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());
			form.getGlobalContext().Core.setPatientShort(ps);
		}
	}

	public void refresh() 
	{
		if (form.getGlobalContext().STHK.getRecentDischargesListFilterIsNotNull())
			refreshSearchCriteria();
	}

	@Override
	protected void onGrdDischargesGridHeaderClicked(int column) throws PresentationLogicException 
	{
		// WDEV-13136
		// Updated the index for column
		if (column == COL_ACTUAL_DISCHARGE_DATETIME)
		{
			if(form.getLocalContext().getSortOrder() == null)
			{
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
			}
			
			DischargedEpisodeVoCollection voColl = form.grdDischarges().getValues();	
			voColl.sort(DischargedEpisodeVo.getDateTimeComparator(form.getLocalContext().getSortOrder()));
			
			if(form.getLocalContext().getSortOrder().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrder(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrder().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
				
			form.grdDischarges().getRows().clear();
			populateGrid(voColl);
		}
		
	}

}
