//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.inpatientlist;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Correspondence = new CorrespondenceContext(context);
		Core = new CoreContext(context);
		STHK = new STHKContext(context);
	}
	public final class CorrespondenceContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CorrespondenceContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCorrespondenceDetailsIsNotNull()
		{
			return !cx_CorrespondenceCorrespondenceDetails.getValueIsNull(context);
		}
		public ims.correspondence.vo.CorrespondenceDetailsRefVo getCorrespondenceDetails()
		{
			return (ims.correspondence.vo.CorrespondenceDetailsRefVo)cx_CorrespondenceCorrespondenceDetails.getValue(context);
		}
		public void setCorrespondenceDetails(ims.correspondence.vo.CorrespondenceDetailsRefVo value)
		{
			cx_CorrespondenceCorrespondenceDetails.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorrespondenceCorrespondenceDetails = new ims.framework.ContextVariable("Correspondence.CorrespondenceDetails", "_cvp_Correspondence.CorrespondenceDetails");
		public boolean getPatientListSearchCriteriaIsNotNull()
		{
			return !cx_CorrespondencePatientListSearchCriteria.getValueIsNull(context);
		}
		public ims.core.vo.PatientListsFilterVo getPatientListSearchCriteria()
		{
			return (ims.core.vo.PatientListsFilterVo)cx_CorrespondencePatientListSearchCriteria.getValue(context);
		}
		public void setPatientListSearchCriteria(ims.core.vo.PatientListsFilterVo value)
		{
			cx_CorrespondencePatientListSearchCriteria.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorrespondencePatientListSearchCriteria = new ims.framework.ContextVariable("Correspondence.PatientListSearchCriteria", "_cvp_Correspondence.PatientListSearchCriteria");
		public boolean getDocDetailIdReportSeedIsNotNull()
		{
			return !cx_CorrespondenceDocDetailIdReportSeed.getValueIsNull(context);
		}
		public Integer getDocDetailIdReportSeed()
		{
			return (Integer)cx_CorrespondenceDocDetailIdReportSeed.getValue(context);
		}
		public void setDocDetailIdReportSeed(Integer value)
		{
			cx_CorrespondenceDocDetailIdReportSeed.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorrespondenceDocDetailIdReportSeed = new ims.framework.ContextVariable("Correspondence.DocDetailIdReportSeed", "_cv_Correspondence.DocDetailIdReportSeed");
		public boolean getGenerateFormModeIsNotNull()
		{
			return !cx_CorrespondenceGenerateFormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getGenerateFormMode()
		{
			return (ims.framework.enumerations.FormMode)cx_CorrespondenceGenerateFormMode.getValue(context);
		}
		public void setGenerateFormMode(ims.framework.enumerations.FormMode value)
		{
			cx_CorrespondenceGenerateFormMode.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorrespondenceGenerateFormMode = new ims.framework.ContextVariable("Correspondence.GenerateFormMode", "_cv_Correspondence.GenerateFormMode");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");
		public boolean getPatientFilterIsNotNull()
		{
			return !cx_CorePatientFilter.getValueIsNull(context);
		}
		public ims.core.vo.PatientFilter getPatientFilter()
		{
			return (ims.core.vo.PatientFilter)cx_CorePatientFilter.getValue(context);
		}
		public void setPatientFilter(ims.core.vo.PatientFilter value)
		{
			cx_CorePatientFilter.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientFilter = new ims.framework.ContextVariable("Core.PatientFilter", "_cvp_Core.PatientFilter");
		public boolean getPasEventIsNotNull()
		{
			return !cx_CorePasEvent.getValueIsNull(context);
		}
		public ims.core.admin.pas.vo.PASEventRefVo getPasEvent()
		{
			return (ims.core.admin.pas.vo.PASEventRefVo)cx_CorePasEvent.getValue(context);
		}
		public void setPasEvent(ims.core.admin.pas.vo.PASEventRefVo value)
		{
			cx_CorePasEvent.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePasEvent = new ims.framework.ContextVariable("Core.PasEvent", "_cvp_Core.PasEvent");
		public boolean getRCHTInpatientDischargeIsNotNull()
		{
			return !cx_CoreRCHTInpatientDischarge.getValueIsNull(context);
		}
		public ims.core.vo.RCHTInpatientDischargeVo getRCHTInpatientDischarge()
		{
			return (ims.core.vo.RCHTInpatientDischargeVo)cx_CoreRCHTInpatientDischarge.getValue(context);
		}
		public void setRCHTInpatientDischarge(ims.core.vo.RCHTInpatientDischargeVo value)
		{
			cx_CoreRCHTInpatientDischarge.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreRCHTInpatientDischarge = new ims.framework.ContextVariable("Core.RCHTInpatientDischarge", "_cv_Core.RCHTInpatientDischarge");
		public boolean getPatientToBeDisplayedIsNotNull()
		{
			return !cx_CorePatientToBeDisplayed.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientToBeDisplayed()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientToBeDisplayed.getValue(context);
		}
		public void setPatientToBeDisplayed(ims.core.vo.PatientShort value)
		{
			cx_CorePatientToBeDisplayed.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientToBeDisplayed = new ims.framework.ContextVariable("Core.PatientToBeDisplayed", "_cv_Core.PatientToBeDisplayed");
		public boolean getSelectingPatientFormIsNotNull()
		{
			return !cx_CoreSelectingPatientForm.getValueIsNull(context);
		}
		public ims.framework.FormName getSelectingPatientForm()
		{
			return (ims.framework.FormName)cx_CoreSelectingPatientForm.getValue(context);
		}
		public void setSelectingPatientForm(ims.framework.FormName value)
		{
			cx_CoreSelectingPatientForm.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreSelectingPatientForm = new ims.framework.ContextVariable("Core.SelectingPatientForm", "_cvp_Core.SelectingPatientForm");
		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}
		public void setCurrentCareContext(ims.core.vo.CareContextShortVo value)
		{
			cx_CoreCurrentCareContext.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");

		private ims.framework.Context context;
	}
	public final class STHKContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private STHKContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCurrentInpatientListFilterIsNotNull()
		{
			return !cx_STHKCurrentInpatientListFilter.getValueIsNull(context);
		}
		public ims.core.vo.CurrentInpatientListFilterVo getCurrentInpatientListFilter()
		{
			return (ims.core.vo.CurrentInpatientListFilterVo)cx_STHKCurrentInpatientListFilter.getValue(context);
		}
		public void setCurrentInpatientListFilter(ims.core.vo.CurrentInpatientListFilterVo value)
		{
			cx_STHKCurrentInpatientListFilter.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_STHKCurrentInpatientListFilter = new ims.framework.ContextVariable("STHK.CurrentInpatientListFilter", "_cvp_STHK.CurrentInpatientListFilter");

		private ims.framework.Context context;
	}

	public CorrespondenceContext Correspondence;
	public CoreContext Core;
	public STHKContext STHK;
}
