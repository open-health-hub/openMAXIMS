//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4738.16294)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.adtadmissiondetailscomponent;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AdmissionDetailVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextStatusHistoryVo;
import ims.core.vo.CareContextStatusHistoryVoCollection;
import ims.core.vo.CareContextVo;
import ims.core.vo.CareContextVoCollection;
import ims.core.vo.CareSpellShortVo;
import ims.core.vo.CareSpellVo;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.EpisodeofCareVo;
import ims.core.vo.EpisodeofCareVoCollection;
import ims.core.vo.ExtendedAdmissionDetailVo;
import ims.core.vo.ExternalResourceVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicWithMappingsLiteVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonAddress;
import ims.core.vo.enums.ADTAdmissionDetailEvent;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.ExternalResourceType;
import ims.core.vo.lookups.MedicGrade;
import ims.core.vo.lookups.PasEventType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.EDIT);
		form.fireCustomControlValueChanged();
		newInstance();
	}

	private void newInstance()
	{
		if (form.getLocalContext().getPatientIsNotNull() && form.getLocalContext().getPatient().getDodIsNotNull())
		{
			engine.showMessage("Deceased patient cannot be admitted" );
			return;
		}
		
		form.getLocalContext().setCurrentAdmissionDetail(null);
		form.getLocalContext().setCareContext(null);
		form.getGlobalContext().Core.setCurrentCareContext(null);
		clearInstanceControls();

		form.setMode(FormMode.EDIT);

	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// form.getLocalContext().setCareContext(null);
		form.getLocalContext().setEpisodeOfCare(null);
		form.getLocalContext().setCareSpell(null);

		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.CANCEL);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getCurrentAdmissionDetail() == null && form.dtimAdmissionDateTime().getValue()!=null)
		{
			form.getLocalContext().setlistEpisodesOfCare(domain.listEpisodesOfCare(form.getGlobalContext().Core.getPatientShort(), form.dtimAdmissionDateTime().getValue().getDate()));

			if (form.getLocalContext().getlistEpisodesOfCare() == null || (form.getLocalContext().getlistEpisodesOfCareIsNotNull() && form.getLocalContext().getlistEpisodesOfCare().size() == 0))
			{
				// create careSpell, episodeOfCare, careContext
				form.getLocalContext().setCareSpell(createCareSpell());
			}
			else if (form.getLocalContext().getlistEpisodesOfCareIsNotNull() && form.getLocalContext().getlistEpisodesOfCare().size() > 0)
			{
				// if exists episodes of care that meet the conditions, the most episode of care will be used for admission
				form.getLocalContext().setEpisodeOfCare(domain.getEpisodeOfCare(form.getLocalContext().getlistEpisodesOfCare().get(0)));
				form.getLocalContext().setCareContext(createOrUpdateCareContext(form.getLocalContext().getEpisodeOfCare(), null));
			}
		}
		else if (form.getLocalContext().getCurrentAdmissionDetail() != null && form.getLocalContext().getCareContextIsNotNull()) // on Edit Admission  Details
		{
			form.getLocalContext().setCareContext(createOrUpdateCareContext(null, form.getLocalContext().getCareContext()));
		}

		String[] errors = getUIErrors();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}

		if (save())
		{
			form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.SAVE);
			form.fireCustomControlValueChanged();
		}
	}

	private boolean save()
	{
		if (form.getLocalContext().getCurrentAdmissionDetail() != null && form.getLocalContext().getCurrentAdmissionDetail().getPasEvent() != null)
			form.getLocalContext().setCurrentInpatientEpisode(domain.getInpatientEpisode(form.getLocalContext().getCurrentAdmissionDetail().getPasEvent()));

		InpatientEpisodeVo inpatientEpisodeToSave = populateDataFromScreen(form.getLocalContext().getCurrentInpatientEpisode(), form.getLocalContext().getCurrentAdmissionDetail());;
		form.getLocalContext().setPatient(domain.getPatient(form.getLocalContext().getPatient()));
		
		//if (inpatientEpisodeToSave.getID_InpatientEpisode()==null && domain.getAdmissionDetail(form.getGlobalContext().Core.getPatientShort())!=null && !domain.isPatientDischarged(domain.getAdmissionDetail(form.getGlobalContext().Core.getPatientShort())))
		if (inpatientEpisodeToSave.getID_InpatientEpisode()==null && domain.getAdmissionDetail(form.getGlobalContext().Core.getPatientShort())!=null && domain.getPatient(form.getGlobalContext().Core.getPatientShort()).getWardIsNotNull())
		{
			engine.showMessage("Patient is already an inpatient!");
			return true;
		}

		//if admission was cancelled from one session and from another session admission is edited
		if (form.getLocalContext().getCurrentAdmissionDetail() != null && form.getLocalContext().getPatient().getWard()==null)
		{
			form.getGlobalContext().Core.setCurrentCareContext(null);
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		
		if (inpatientEpisodeToSave.getID_InpatientEpisode()==null && form.getLocalContext().getPatientIsNotNull() && form.getLocalContext().getPatient().getDodIsNotNull())
		{
			engine.showMessage("Deceased patient cannot be admitted" );
			return false;
		}

		if (form.getLocalContext().getCareSpell() != null)
		{
			String[] errorsCareSpell = form.getLocalContext().getCareSpell().validate();
			if (errorsCareSpell != null && errorsCareSpell.length > 0)
			{
				engine.showErrors(errorsCareSpell);
				return false;
			}
		}

		if (form.getLocalContext().getCareContextIsNotNull())
		{
			String[] errorsCareContext = form.getLocalContext().getCareContext().validate();
			if (errorsCareContext != null && errorsCareContext.length > 0)
			{
				engine.showErrors(errorsCareContext);
				return false;
			}
		}

		String[] errors1 = inpatientEpisodeToSave.validate(getUIErrors());
		if (errors1 != null && errors1.length > 0)
		{
			engine.showErrors(errors1);
			return false;
		}

		try
		{
			CareContextShortVo voCC=null;
			if (inpatientEpisodeToSave.getID_InpatientEpisode()==null )//
			{
				voCC = domain.admitPatient(form.getGlobalContext().Core.getPatientShort(), inpatientEpisodeToSave, form.getLocalContext().getCareContext(), form.getLocalContext().getEpisodeOfCare(), form.getLocalContext().getCareSpell());
			}
			else
			{
				voCC = domain.updateAdmissionDetails(inpatientEpisodeToSave, form.getLocalContext().getCareContext());
			}
			
			if (voCC != null)
				form.getGlobalContext().Core.setCurrentCareContext(voCC);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		return true;
	}

	private CareSpellVo createCareSpell()
	{
		CareSpellVo careSpell = new CareSpellVo();
		careSpell.setPatient(form.getGlobalContext().Core.getPatientShort());
		careSpell.setStartDate(form.dtimAdmissionDateTime().getValue()!=null ? form.dtimAdmissionDateTime().getValue().getDate():null);

		EpisodeofCareVoCollection voCollEpisodeOfCare = new EpisodeofCareVoCollection();
		voCollEpisodeOfCare.add(createEpisodeOfCare(careSpell));
		careSpell.setEpisodes(voCollEpisodeOfCare);

		return careSpell;
	}

	private EpisodeofCareVo createEpisodeOfCare(CareSpellVo careSpell)
	{
		EpisodeofCareVo episodeOfCare = new EpisodeofCareVo();

		episodeOfCare.setCareSpell(careSpell);
		episodeOfCare.setStartDate(form.dtimAdmissionDateTime().getValue()!=null ? form.dtimAdmissionDateTime().getValue().getDate():null);

		HcpLiteVo tempRespHcp = null;
		
		if (form.ccAdmittingConsultant().getValue()!=null)
			tempRespHcp=(HcpLiteVo) domain.getHcp(form.ccAdmittingConsultant().getValue().getIMosHcpId());
		
		episodeOfCare.setResponsibleHCP(tempRespHcp);

		if (form.ccAdmittingConsultant().getValue() != null && domain.getSpecialtyForConsultant(form.ccAdmittingConsultant().getValue().getIMosId())!=null)
		{
			episodeOfCare.setSpecialty(form.ccAdmittingConsultant().getValue() != null ? domain.getSpecialtyForConsultant(form.ccAdmittingConsultant().getValue().getIMosId()) : null);
		}
		else
		{
			episodeOfCare.setSpecialty(form.cmbSpecialty().getValue());
		}

		CareContextVoCollection voCollCareContext = new CareContextVoCollection();
		voCollCareContext.add(createOrUpdateCareContext(episodeOfCare, null));
		episodeOfCare.setCareContexts(voCollCareContext);

		// form.getLocalContext().setEpisodeOfCare(episodeOfCare);

		return episodeOfCare;

	}

	private CareContextVo createOrUpdateCareContext(EpisodeofCareVo episodeOfCare, CareContextVo careContext)
	{
		if (careContext == null)
			careContext = new CareContextVo();
		else
			careContext = (CareContextVo) careContext.clone();

		if (episodeOfCare != null)
			careContext.setEpisodeOfCare(episodeOfCare);

		careContext.setStartDateTime(form.dtimAdmissionDateTime().getValue());
		careContext.setContext(ContextType.INPATIENT);

		// populateStatus
		CareContextStatusHistoryVo careContextStatus = new CareContextStatusHistoryVo();

		careContextStatus.setStatus(CareContextStatus.OPEN);
		careContextStatus.setStatusDateTime(new DateTime());
		careContext.setCurrentStatus(careContextStatus);

		CareContextStatusHistoryVoCollection careContextStatusHistory = new CareContextStatusHistoryVoCollection();
		careContextStatusHistory.add(careContextStatus);
		careContext.setStatusHistory(careContextStatusHistory);

		// form.getLocalContext().setCareContext(careContext);

		return careContext;
	}

	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		EpisodeofCareVo episodeOfCare=null;
		
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getLocalContext().getEpisodeOfCare()==null)
		{
			episodeOfCare = domain.getEpisodeOfCare(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare());
		}
		
		if (form.dtimAdmissionDateTime().getValue() != null)
		{
			if (form.dtimAdmissionDateTime().getValue().isGreaterThan(new DateTime()))
			{
				errors.add("Admission Date/Time cannot be set in the future!");
			}

			if ((form.getLocalContext().getEpisodeOfCareIsNotNull() && form.dtimAdmissionDateTime().getValue().getDate().isLessThan(form.getLocalContext().getEpisodeOfCare().getStartDate()))
				|| (episodeOfCare!=null && form.dtimAdmissionDateTime().getValue().getDate().isLessThan(episodeOfCare.getStartDate())) )
			{
				errors.add("Admission Date/Time cannot be less than 'Start Date' from Episode Of Care!");
			}

			if (form.getLocalContext().getEpisodeOfCareIsNotNull() && form.getLocalContext().getEpisodeOfCare().getCareSpellIsNotNull())
			{
				CareSpellShortVo voCareSpell = domain.getCareSpell(form.getLocalContext().getEpisodeOfCare().getCareSpell());

				if (voCareSpell.getStartDateIsNotNull() && form.dtimAdmissionDateTime().getValue().getDate().isLessThan(voCareSpell.getStartDate()))
				{
					errors.add("Admission Date/Time cannot be less than 'Start Date' from Care Spell!");
				}
			}
			else if (episodeOfCare!=null && episodeOfCare.getCareSpellIsNotNull())
			{
				CareSpellShortVo voCareSpell = domain.getCareSpell(episodeOfCare.getCareSpell());

				if (voCareSpell.getStartDateIsNotNull() && form.dtimAdmissionDateTime().getValue().getDate().isLessThan(voCareSpell.getStartDate()))
				{
					errors.add("Admission Date/Time cannot be less than 'Start Date' from Care Spell!");
				}
			}
		}
		else
		{
			errors.add("Admission Date/Time is mandatory!");
		}

		if (form.cmbAdmissionType().getValue() == null)
		{
			errors.add("Admission Type is mandatory!");
		}

		if (form.ccAdmittingConsultant().getValue() == null)
		{
			errors.add("Admitting Consultant is mandatory!");
		}

		if (form.cmbSpecialty().getValue() == null)
		{
			errors.add("Specialty is mandatory!");
		}

		if (form.cmbReferredFrom().getValue() == null)
		{
			errors.add("Referred From is mandatory!");
		}

		if (form.txtReferrerNameOrganisation().getValue()==null)
		{
			errors.add("Referrer Details are mandatory!");
		}
		
		if (form.cmbAdmissionWard().getValue() == null)
		{
			errors.add("Admission Ward is mandatory!");
		}

		if (form.cmbAdmittedFrom().getValue() == null)
		{
			errors.add("Admitted From is mandatory!");
		}
		
		if (form.txtAdmittedFromName().getValue()==null && !ExternalResourceType.ERT_HOMEADDRESS.equals(form.cmbAdmittedFrom().getValue()))
		{
			errors.add("Admitted From Details are mandatory !");
		}
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}

	private InpatientEpisodeVo populateDataFromScreen(InpatientEpisodeVo voInpatientEpis, AdmissionDetailVo voAdmissionDetail)
	{
		if (voInpatientEpis == null)
			voInpatientEpis = new InpatientEpisodeVo();
		else
			voInpatientEpis = (InpatientEpisodeVo) voInpatientEpis.clone();

		PasEventVo voPasEvent = voInpatientEpis.getPasEvent();
		if (voPasEvent == null)
			voPasEvent = new PasEventVo();

		if (form.ccAdmittingConsultant().getValue() != null)
		{
			HcpLiteVo tempHcp = domain.getHcp(form.ccAdmittingConsultant().getValue().getIMosHcpId());

			MedicWithMappingsLiteVo medLite = new MedicWithMappingsLiteVo(tempHcp.getID_Hcp(), tempHcp.getVersion_Hcp());
			voPasEvent.setConsultant(medLite);

		}

		voPasEvent.setEventDateTime(form.dtimAdmissionDateTime().getValue());
		voPasEvent.setEventType(PasEventType.INPATIENT);
		voPasEvent.setLocation(form.cmbAdmissionWard().getValue());
		voPasEvent.setPatient(form.getGlobalContext().Core.getPatientShort());
		voPasEvent.setSpecialty(form.cmbSpecialty().getValue());
		voPasEvent.setPasEventId(createPasEventID());

		voInpatientEpis.setAdmissionDateTime(form.dtimAdmissionDateTime().getValue());
		voInpatientEpis.setAdmissionType(form.cmbAdmissionType().getValue());
		voInpatientEpis.setPasEvent(voPasEvent);
		voInpatientEpis.setBedNo(form.intBedNumber().getValue() != null ? form.intBedNumber().getValue().toString() : null);

		voInpatientEpis.setExtendedDetails(populateExtendedDetails(voAdmissionDetail != null && voAdmissionDetail.getExtendedDetailsIsNotNull() ? voAdmissionDetail.getExtendedDetails() : null));

		return voInpatientEpis;
	}

	private String createPasEventID()
	{
		 DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmssmmm");
		 Date date = new Date();
		 return form.getGlobalContext().Core.getPatientShort().getID_Patient().toString()+dateFormat.format(date);
	}

	private ExtendedAdmissionDetailVo populateExtendedDetails(ExtendedAdmissionDetailVo extendedDetails)
	{
		if (extendedDetails == null)
			extendedDetails = new ExtendedAdmissionDetailVo();
		else 
			extendedDetails=(ExtendedAdmissionDetailVo) extendedDetails.clone();

		extendedDetails.setReferredFromType(form.cmbReferredFrom().getValue());
		extendedDetails.setReferrerDetails(form.getLocalContext().getSelectedExternalResourceForReferredFrom());
		
		extendedDetails.setAdmittedFromType(form.cmbAdmittedFrom().getValue());
		if (ExternalResourceType.ERT_HOMEADDRESS.equals(form.cmbAdmittedFrom().getValue()))
		{
			extendedDetails.setAdmittedFrom(null);
		}
		else if (ExternalResourceType.ERT_OTHER.equals(form.cmbAdmittedFrom().getValue()))
		{
			if (extendedDetails.getAdmittedFromIsNotNull() && extendedDetails.getAdmittedFrom().getExternalResourceTypeIsNotNull() && ExternalResourceType.ERT_OTHER.equals(extendedDetails.getAdmittedFrom().getExternalResourceType()))
			{
				extendedDetails.setAdmittedFrom(populateAdmittedDetailsFromScreen(extendedDetails.getAdmittedFrom()));
			}
			else
			{
				extendedDetails.setAdmittedFrom(populateAdmittedDetailsFromScreen(null));
			}
		}
		else
		{
			extendedDetails.setAdmittedFrom(form.getLocalContext().getSelectedExternalResourceForAdmittedFrom());
		}

		extendedDetails.setBedNumber(form.intBedNumber().getValue());

		return extendedDetails;
	}

	private ExternalResourceVo populateAdmittedDetailsFromScreen(ExternalResourceVo admDetails)
	{
		if (admDetails == null)
			admDetails = new ExternalResourceVo();
		else
			admDetails = (ExternalResourceVo) admDetails.clone();

		admDetails.setExternalResourceType(form.cmbAdmittedFrom().getValue());
		admDetails.setResourcename(form.txtAdmittedFromName().getValue());
		PersonAddress admResourceAdr = admDetails.getResourceAddress();
		if (admResourceAdr == null)
			admResourceAdr = new PersonAddress();

		admResourceAdr.setLine1(form.txtAdrAdmittedFromLine1().getValue());
		admResourceAdr.setLine2(form.txtAdrAdmittedFromLine2().getValue());
		admResourceAdr.setLine3(form.txtAdrAdmittedFromLine3().getValue());
		admResourceAdr.setCounty(form.cmbAdmittedCounty().getValue());
		admResourceAdr.setPhone(form.txtTelephoneNr().getValue());

		admDetails.setResourceAddress(admResourceAdr);
			
		if (admDetails.getResourceStatus()==null)
		{
			admDetails.setResourceStatus(PreActiveActiveInactiveStatus.ACTIVE);
		}
		
		/*
		if (form.getLocalContext().getSelectedExternalResourceForAdmittedFrom() != null)
			admDetails.setResourceStatus(form.getLocalContext().getSelectedExternalResourceForAdmittedFrom().getResourceStatus());
		else if (ExternalResourceType.ERT_HOMEADDRESS.equals(form.cmbAdmittedFrom().getValue()) || ExternalResourceType.ERT_OTHER.equals(form.cmbAdmittedFrom().getValue()))
		{
			admDetails.setResourceStatus(PreActiveActiveInactiveStatus.ACTIVE);
		}
		*/
		return admDetails;
	}

	@Override
	protected void onCmbAdmittedFromValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		clearAdmittedFromAdr();
		updateControlsState();
		
		if (ExternalResourceType.ERT_HOMEADDRESS.equals(form.cmbAdmittedFrom().getValue()))
		{
			if (form.getGlobalContext().Core.getPatientShort() != null)
				populateAdmittedDetailsWithPatientAddress(form.getGlobalContext().Core.getPatientShort().getAddress());
		}

	}

	private void populateAdmittedDetailsWithPatientAddress(PersonAddress address)
	{
		if (address == null)
			return;

		form.txtAdmittedFromName().setValue("Home Address");
		form.txtAdrAdmittedFromLine1().setValue(address.getLine1());
		form.txtAdrAdmittedFromLine2().setValue(address.getLine2());
		form.txtAdrAdmittedFromLine3().setValue(address.getLine3());
		form.cmbAdmittedCounty().setValue(address.getCounty());
		form.txtTelephoneNr().setValue(address.getPhone());

	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	public void initialize(PatientShort patient, EpisodeofCareShortVo episodeOfCare, CareContextShortVo careContext, AdmissionDetailVo admissionDetail)
	{
		form.getLocalContext().setPatient(patient);

		if (careContext != null)
			form.getLocalContext().setCareContext(domain.getCareContext(careContext));

		form.getLocalContext().setCurrentAdmissionDetail(admissionDetail);
		
		form.ccAdmittingConsultant().initialize(null, MedicGrade.CONS);
		form.ccAdmittingConsultant().isRequired(true);

		removeItemsFromReferredAdmittedComboBoxes();
		populateWardsCombo();
		open();
		updateControlsState();

	}

	private void removeItemsFromReferredAdmittedComboBoxes()
	{
		// remove items from RefferedFrom comboBox (This comboBox should Contain
		// only HCP, Hospital, Local Placement Forum
		form.cmbReferredFrom().removeRow(ExternalResourceType.ERT_NURSINGHOME);
		form.cmbReferredFrom().removeRow(ExternalResourceType.ERT_HOMEADDRESS);
		form.cmbReferredFrom().removeRow(ExternalResourceType.ERT_OTHER);

		// remove items from RefferedFrom comboBox (This comboBox should Contain
		// only Home Address, Hospital, Nursing Home, Other
		form.cmbAdmittedFrom().removeRow(ExternalResourceType.ERT_HCP);
		form.cmbAdmittedFrom().removeRow(ExternalResourceType.ERT_LOCALPLACEMENTFORUM);
	}

	private void populateWardsCombo()
	{
		form.cmbAdmissionWard().clear();
		LocationLiteVoCollection collWards = domain.listWards();
		for (int i = 0; collWards != null && i < collWards.size(); i++)
		{
			form.cmbAdmissionWard().newRow(collWards.get(i), collWards.get(i).getName());
		}
	}

	private void open()
	{
		populateScreenFromData(form.getLocalContext().getCurrentAdmissionDetail());
		form.setMode(FormMode.VIEW);
	}

	private void populateScreenFromData(AdmissionDetailVo admissionDetail)
	{
		clearInstanceControls();

		if (admissionDetail == null)
			return;

		form.dtimAdmissionDateTime().setValue(admissionDetail.getAdmissionDateTime());
		if (form.getLocalContext().getCurrentAdmissionDetailIsNotNull() && form.getLocalContext().getCurrentAdmissionDetail().getPasEventIsNotNull())
		{
			form.cmbAdmissionWard().setValue(domain.getAdmissionWard(form.getLocalContext().getCurrentAdmissionDetail().getPasEvent()));

			if (!domain.isPatientDischarged(form.getLocalContext().getCurrentAdmissionDetail()))
				form.cmbAdmissionType().setValue(domain.getAdmissionTypeFromInpatientEpisode(form.getLocalContext().getCurrentAdmissionDetail().getPasEvent()));
			else
				form.cmbAdmissionType().setValue(domain.getAdmissionTypeFromDischargedEpisode(form.getLocalContext().getCurrentAdmissionDetail().getPasEvent()));
		}

		form.ccAdmittingConsultant().setValue(admissionDetail.getConsultant());
		form.cmbSpecialty().setValue(admissionDetail.getSpecialty());

		form.intBedNumber().setValue(admissionDetail.getExtendedDetails() != null ? admissionDetail.getExtendedDetails().getBedNumber() : null);

		populateReferrerDetailsFromData(admissionDetail);

		if (admissionDetail.getExtendedDetails()!=null && ExternalResourceType.ERT_HOMEADDRESS.equals(admissionDetail.getExtendedDetails().getAdmittedFromType()))
		{
			form.cmbAdmittedFrom().setValue(admissionDetail.getExtendedDetails().getAdmittedFromType());
			populateAdmittedDetailsWithPatientAddress(form.getGlobalContext().Core.getPatientShort().getAddress());
		}
		else
		{
			populateAdmittedFromDetailsFromData(admissionDetail);
		}
	}

	private void populateAdmittedFromDetailsFromData(AdmissionDetailVo admissionDetail)
	{
		if (admissionDetail.getExtendedDetails() == null)
			return;

		form.cmbAdmittedFrom().setValue(admissionDetail.getExtendedDetails().getAdmittedFromType());

		if (admissionDetail.getExtendedDetails().getAdmittedFromIsNotNull())
		{
			ExternalResourceVo admFromDet = admissionDetail.getExtendedDetails().getAdmittedFrom();

			form.txtAdmittedFromName().setValue(admFromDet.getResourcename());
			if (admFromDet.getResourceAddressIsNotNull())
			{
				form.txtAdrAdmittedFromLine1().setValue(admFromDet.getResourceAddress().getLine1());
				form.txtAdrAdmittedFromLine2().setValue(admFromDet.getResourceAddress().getLine2());
				form.txtAdrAdmittedFromLine3().setValue(admFromDet.getResourceAddress().getLine3());
				form.cmbAdmittedCounty().setValue(admFromDet.getResourceAddress().getCounty());
				form.txtTelephoneNr().setValue(admFromDet.getResourceAddress().getPhone());
			}

			form.getLocalContext().setSelectedExternalResourceForAdmittedFrom(admFromDet);
		}

	}

	private void populateReferrerDetailsFromData(AdmissionDetailVo admissionDetail)
	{
		if (admissionDetail.getExtendedDetails() == null)
			return;

		form.cmbReferredFrom().setValue(admissionDetail.getExtendedDetails().getReferredFromType());

		if (admissionDetail.getExtendedDetails().getReferrerDetailsIsNotNull())
		{
			ExternalResourceVo referrerDet = admissionDetail.getExtendedDetails().getReferrerDetails();

			form.txtReferrerNameOrganisation().setValue(referrerDet.getResourcename());
			if (referrerDet.getResourceAddressIsNotNull())
			{
				form.txtReferrerAdr1().setValue(referrerDet.getResourceAddress().getLine1());
				form.txtReferrerAdr2().setValue(referrerDet.getResourceAddress().getLine2());
				form.txtReferrerAdr3().setValue(referrerDet.getResourceAddress().getLine3());
				form.cmbReferrerCounty().setValue(referrerDet.getResourceAddress().getCounty());
				form.txtReferrerContactNr().setValue(referrerDet.getResourceAddress().getPhone());
			}
			
			form.getLocalContext().setSelectedExternalResourceForReferredFrom(referrerDet);
		}
	}

	private void clearInstanceControls()
	{
		form.dtimAdmissionDateTime().setValue(null);
		form.cmbAdmissionType().setValue(null);
		form.ccAdmittingConsultant().setValue(null);
		form.cmbSpecialty().setValue(null);
		form.cmbReferredFrom().setValue(null);

		form.txtReferrerNameOrganisation().setValue(null);
		clearReferredFromAdr();

		form.cmbAdmissionWard().setValue(null);
		form.intBedNumber().setValue(null);
		form.cmbAdmittedFrom().setValue(null);
		form.txtAdmittedFromName().setValue(null);

		clearAdmittedFromAdr();

	}

	private void clearAdmittedFromAdr()
	{
		form.txtAdmittedFromName().setValue(null);
		form.txtAdrAdmittedFromLine1().setValue(null);
		form.txtAdrAdmittedFromLine2().setValue(null);
		form.txtAdrAdmittedFromLine3().setValue(null);
		form.cmbAdmittedCounty().setValue(null);
		form.txtTelephoneNr().setValue(null);
	}

	private void updateControlsState()
	{
		form.ccAdmittingConsultant().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getCurrentAdmissionDetail() == null);
		form.cmbAdmissionWard().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getCurrentAdmissionDetail() == null);

		form.txtAdmittedFromName().setEnabled(FormMode.EDIT.equals(form.getMode()));

		form.imbReferredFromSearch().setVisible(FormMode.EDIT.equals(form.getMode()) && (ExternalResourceType.ERT_HCP.equals(form.cmbReferredFrom().getValue()) || ExternalResourceType.ERT_HOSPITAL.equals(form.cmbReferredFrom().getValue()) || ExternalResourceType.ERT_LOCALPLACEMENTFORUM.equals(form.cmbReferredFrom().getValue())));
		form.imbReferredFromSearch().setEnabled(FormMode.EDIT.equals(form.getMode()));

		form.imbAdmittedFromSearch().setVisible(FormMode.EDIT.equals(form.getMode()) && (ExternalResourceType.ERT_NURSINGHOME.equals(form.cmbAdmittedFrom().getValue()) || ExternalResourceType.ERT_HOSPITAL.equals(form.cmbAdmittedFrom().getValue())));
		form.imbAdmittedFromSearch().setEnabled(FormMode.EDIT.equals(form.getMode()));

		// form.btnNew().setVisible(FormMode.VIEW.equals(form.getMode()) &&
		// (form.getLocalContext().getCurrentAdmissionDetail()==null ||
		// (form.getLocalContext().getCurrentAdmissionDetail()!=null &&
		// domain.isPatientDischarged(form.getLocalContext().getCurrentAdmissionDetail()))));
		form.btnNew().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getCurrentAdmissionDetail() == null && form.getLocalContext().getPatient().getWard() == null );
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getCurrentAdmissionDetailIsNotNull() && !domain.isPatientDischarged(form.getLocalContext().getCurrentAdmissionDetail()));
		
		updateReferreDetailsState(false);
		updateAdmittedDetailsState(FormMode.EDIT.equals(form.getMode()) && form.cmbAdmittedFrom().getValue() != null && (ExternalResourceType.ERT_OTHER.equals(form.cmbAdmittedFrom().getValue())));

		if (form.imbReferredFromSearch().isVisible())
		{
			form.imbReferredFromSearch().setTooltip("Search for External Resource of type '"+form.cmbReferredFrom().getValue().getText()+"'");
		}
		
		if (form.imbAdmittedFromSearch().isVisible())
		{
			form.imbAdmittedFromSearch().setTooltip("Search for External Resource of type '"+form.cmbAdmittedFrom().getValue().getText()+"'");
		}
	}

	private void updateAdmittedDetailsState(boolean bEnabled)
	{
		form.txtAdmittedFromName().setEnabled(bEnabled);
		form.txtAdrAdmittedFromLine1().setEnabled(bEnabled);
		form.txtAdrAdmittedFromLine2().setEnabled(bEnabled);
		form.txtAdrAdmittedFromLine3().setEnabled(bEnabled);
		form.cmbAdmittedCounty().setEnabled(bEnabled);
		form.txtTelephoneNr().setEnabled(bEnabled);
	}

	private void updateReferreDetailsState(boolean bEnabled)
	{
		form.txtReferrerNameOrganisation().setEnabled(bEnabled);
		form.txtReferrerAdr1().setEnabled(bEnabled);
		form.txtReferrerAdr2().setEnabled(bEnabled);
		form.txtReferrerAdr3().setEnabled(bEnabled);
		form.cmbReferrerCounty().setEnabled(bEnabled);
		form.txtReferrerContactNr().setEnabled(bEnabled);
	}

	public ADTAdmissionDetailEvent getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}

	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}

	public AdmissionDetailVo getValue()
	{
		return form.getLocalContext().getCurrentAdmissionDetail();
	}

	@Override
	protected void onCmbReferredFromValueChanged() throws PresentationLogicException
	{
		clearReferredFromAdr();
		//WDEV-16689
		if (form.getLocalContext().getCurrentAdmissionDetail() == null && ExternalResourceType.ERT_HOSPITAL.equals(form.cmbAdmittedFrom().getValue()) && form.getGlobalContext().Core.getExternalResourceSelected().getID_ExternalResource().equals(form.getLocalContext().getSelectedExternalResourceForReferredFrom().getID_ExternalResource()))
		{	
		form.cmbAdmittedFrom().setValue(null);
		clearAdmittedFromAdr();
		}
		updateControlsState();
	}

	private void clearReferredFromAdr()
	{
		form.txtReferrerNameOrganisation().setValue(null);
		form.txtReferrerAdr1().setValue(null);
		form.txtReferrerAdr2().setValue(null);
		form.txtReferrerAdr3().setValue(null);
		form.cmbReferrerCounty().setValue(null);
		form.txtReferrerContactNr().setValue(null);
	}

	@Override
	protected void onImbAdmittedFromSearchClick() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.ADMITTED_FROM_SEARCH);
		engine.open(form.getForms().Core.ExternalResourceSearch, new Object[] { (ExternalResourceType) form.cmbAdmittedFrom().getValue() });
	}

	@Override
	protected void onImbReferredFromSearchClick() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.REFERRED_FROM_SEARCH);
		engine.open(form.getForms().Core.ExternalResourceSearch, new Object[] { (ExternalResourceType) form.cmbReferredFrom().getValue() });
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.ExternalResourceSearch) && DialogResult.OK.equals(result))
		{
			if (ADTAdmissionDetailEvent.REFERRED_FROM_SEARCH.equals(form.getLocalContext().getSelectedEvent()))
			{
				form.getLocalContext().setSelectedExternalResourceForReferredFrom(form.getGlobalContext().Core.getExternalResourceSelected());
				populateReferrerDetails(form.getLocalContext().getSelectedExternalResourceForReferredFrom());
				if (ExternalResourceType.ERT_HOSPITAL.equals(form.cmbReferredFrom().getValue()))
				{
					form.cmbAdmittedFrom().setValue(ExternalResourceType.ERT_HOSPITAL);
					populateAdmittedFromDetails(form.getLocalContext().getSelectedExternalResourceForReferredFrom());
					updateControlsState();
					form.getLocalContext().setSelectedExternalResourceForAdmittedFrom(form.getGlobalContext().Core.getExternalResourceSelected());

				}
			}
			else if (ADTAdmissionDetailEvent.ADMITTED_FROM_SEARCH.equals(form.getLocalContext().getSelectedEvent()))
			{
				form.getLocalContext().setSelectedExternalResourceForAdmittedFrom(form.getGlobalContext().Core.getExternalResourceSelected());
				populateAdmittedFromDetails(form.getLocalContext().getSelectedExternalResourceForAdmittedFrom());
			}
		}
	}

	private void populateAdmittedFromDetails(ExternalResourceVo selectedExtResForAdmittedFrom)
	{
		if (selectedExtResForAdmittedFrom == null)
			return;

		if (selectedExtResForAdmittedFrom.getExternalResourceTypeIsNotNull())
		{
			form.txtAdmittedFromName().setValue(selectedExtResForAdmittedFrom.getResourcename() != null ? selectedExtResForAdmittedFrom.getResourcename() : null);
			if (selectedExtResForAdmittedFrom.getResourceAddressIsNotNull())
			{
				PersonAddress resAddress = selectedExtResForAdmittedFrom.getResourceAddress();

				form.txtAdrAdmittedFromLine1().setValue(resAddress.getLine1());
				form.txtAdrAdmittedFromLine2().setValue(resAddress.getLine2());
				form.txtAdrAdmittedFromLine3().setValue(resAddress.getLine3());
				form.cmbAdmittedCounty().setValue(resAddress.getCounty() != null ? resAddress.getCounty() : null);

				form.txtTelephoneNr().setValue(resAddress.getPhone());
			}

		}
	}

	private void populateReferrerDetails(ExternalResourceVo selectedExtResForReferredFrom)
	{
		if (selectedExtResForReferredFrom == null)
			return;

		if (selectedExtResForReferredFrom.getExternalResourceTypeIsNotNull())
		{
			form.txtReferrerNameOrganisation().setValue(selectedExtResForReferredFrom.getResourcename() != null ? selectedExtResForReferredFrom.getResourcename() : null);
			if (selectedExtResForReferredFrom.getResourceAddressIsNotNull())
			{
				PersonAddress resAddress = selectedExtResForReferredFrom.getResourceAddress();

				form.txtReferrerAdr1().setValue(resAddress.getLine1());
				form.txtReferrerAdr2().setValue(resAddress.getLine2());
				form.txtReferrerAdr3().setValue(resAddress.getLine3());
				form.cmbReferrerCounty().setValue(resAddress.getCounty() != null ? resAddress.getCounty() : null);

				form.txtReferrerContactNr().setValue(resAddress.getPhone());
			}

		}

	}

	@Override
	protected void onCcAdmittingConsultantValueChanged() throws PresentationLogicException
	{
		form.cmbSpecialty().setValue(form.ccAdmittingConsultant().getValue() != null ? domain.getSpecialtyForConsultant(form.ccAdmittingConsultant().getValue().getIMosId()) : null);
	}

}
