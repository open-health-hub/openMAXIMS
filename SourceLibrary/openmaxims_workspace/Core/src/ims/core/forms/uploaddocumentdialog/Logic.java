//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.65 build 3160.29066)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.uploaddocumentdialog;

import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.CatsReferralStatusVoCollection;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.EnvironmentConfig;
import ims.core.helper.ConversionHelper;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.PatientDocumentSaveVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.enums.UploadDocumentAction;
import ims.core.vo.enums.UploadDocumentStoreLevel;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.CustomEvent;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.cn.events.ExternalMessageCustomEvent;
import ims.framework.cn.events.ScannedImageCustomEvent;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ISystemLogWriter;
import ims.framework.utils.Base64;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;

import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfImportedPage;

public class Logic extends BaseLogic
{	
	private static final Logger		LOG				 	= Logger.getLogger(Logic.class);			
	private boolean 				hasGPLetter 		= false;
	ISystemLogWriter 				logWriter;
	String[] 						allowType 			= {"doc", "docx","rtf","txt","jpg","png","bmp","gif","tif", "tiff", "html", "pdf"};	
	private String 					path 				= EnvironmentConfig.getBaseUri();
	private String 					appURL 				= ConfigFlag.GEN.APPLICATION_URL.getValue();			
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
		deleteTempFiles(form.getLocalContext().getUploadedFiles(), form.getLocalContext().getImportedImages(), null,  null);	//WDEV-12686
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		String[] errors = getUIErrors();				
		if (errors != null && errors.length > 0) {			
			return;
		}
		
		form.htmPreview().setHTML("");									
		engine.showMessage("Please confirm if this document is to be associated with patient " + form.getGlobalContext().Core.getPatientShort().getName(), "Confirmation", MessageButtons.CONFIRMCANCEL, MessageIcon.QUESTION);
	}
	
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{		
		PatientDocumentVo patDoc = null;
		if (args != null && args.length > 0){
			if (args[0] instanceof UploadDocumentStoreLevel) {
				form.getLocalContext().setUploadDocumentStoreLevel((UploadDocumentStoreLevel) args[0]);
				if (args.length>1 && args[1] instanceof PatientDocumentVo)
				{
					patDoc = (PatientDocumentVo) args[1];
				}
			}
			else
			{
				if (args[0] instanceof PatientDocumentVo)
				{
					patDoc = (PatientDocumentVo) args[0];
				}
			}
		}
				
		clearLocalContexts();		

		if (form.getGlobalContext().Core.getUploadDocumentActionIsNotNull())
		{			
			if (form.getGlobalContext().Core.getUploadDocumentAction().equals(UploadDocumentAction.SCAN))
			{				
				form.getLocalContext().setScannedPageNo(0);
				showTabScan();				
				initializeUploadComponent(AuthoringLabelType.SCANNED);				
				form.cmbType().setValue(DocumentCreationType.SCANNED);				
				initialiseScanApplet();				
			}			
			else if (form.getGlobalContext().Core.getUploadDocumentAction().equals(UploadDocumentAction.IMPORT))
			{
				form.getLocalContext().setImportPageNo(0);
				showTabImport();				
				initializeUploadComponent(AuthoringLabelType.IMPORTED);				
				form.cmbType().setValue(DocumentCreationType.IMPORTED);													
			}
			else if (form.getGlobalContext().Core.getUploadDocumentAction().equals(UploadDocumentAction.PREVIEW))
			{
				if (patDoc==null)
				{
					throw new PresentationLogicException("Form opened in preview mode but no patient document provided");	
				}
				preparePreviewMode();
				populateScreenFromData(patDoc);
				
			}
			
			if (form.getLocalContext().getUploadDocumentStoreLevelIsNotNull() &&
					form.getLocalContext().getUploadDocumentStoreLevel().equals(UploadDocumentStoreLevel.REFERRAL))
			{
				if (form.getGlobalContext().RefMan.getUploadDocumentsDialogDocumentTypeIsNotNull()) {
					form.cmbSource().setValue(form.getGlobalContext().RefMan.getUploadDocumentsDialogDocumentType());
				}
				else {
					form.cmbSource().setValue(DocumentCategory.GPLETTER);
				}
			}
			//WDEV-16361
			else if (form.getLocalContext().getUploadDocumentStoreLevelIsNotNull() &&
					form.getLocalContext().getUploadDocumentStoreLevel().equals(UploadDocumentStoreLevel.PATIENT))
			{
				form.cmbSource().setValue(DocumentCategory.RESULTREPORT);
			}
		}				
	}

	private void populateScreenFromData(PatientDocumentVo patDoc)
	{
		if (patDoc == null)
			return;
		form.txtName().setValue(patDoc.getName());
		form.cmbType().setValue(patDoc.getCreationType());
		form.cmbSource().setValue(patDoc.getCategory());
		form.htmPreview().setHTML("<IFRAME id=\"PostFrame\" name=\"PostFrame\" width=\"100%\" height=\"100%\" frameborder=0 src='" + (getFileServerURL() + patDoc.getServerDocument().getFileName()).replace("/", "\\") +  "'></IFRAME>");
	}
	private void preparePreviewMode()
	{
		form.setMode(FormMode.VIEW);
		form.ccUpload().setVisible(false);
		form.htmApplet().setVisible(false);
		form.lblPages().setVisible(false);
		form.txtName().setEnabled(false);
		form.cmbSource().setEnabled(false);
		
		form.btnSave().setVisible(false);
		form.btnCancel().setText("Close");
	}

	private String getFileServerURL()
	{ 
		return ConfigFlag.GEN.FILE_SERVER_URL.getValue();
	}	
	
	private void showTabImport() 
	{
		form.htmApplet().setVisible(false);
		form.ccUpload().setVisible(true);
		form.ccUpload().initialize();
		form.lblPages().setValue("");
	}

	private void initializeUploadComponent(AuthoringLabelType type) 
	{
		form.ccImported().initializeComponent();
		form.ccImported().setLabels(type);
		form.ccImported().setEnabledAuthoringHCP(false);
		form.ccImported().setEnabledDateTime(false);		
	}

	private void showTabScan() 
	{
		
		form.htmApplet().setVisible(true);
		form.ccUpload().setVisible(false);
		form.lblPages().setValue("");
		
	}	

	private void initialiseScanApplet()
	{
		String html="";
		html += "<object name='Scan'";
		html += "   codebase='applet/'";
		html += "	code='Scan.class'";
		html += "	id='scanningApplet'";
		html += "	width='140' height='32'";
		html += "	archive='scan.jar'";
		html += "	mayscript='mayscript'>";				
		html += "		<param name='uploadPath'"; 
		html += "			value='uploads/'>";
		html += "		<param name='debug'"; 
		html += "			value='true'>";
		html += "		<param name='isDialog'"; 
		html += "			value='true'>";
		html += "</object>";
		
		form.htmApplet().setHTML(html);
	}
	
	private void clearLocalContexts() 
	{
		form.getLocalContext().setFileName(null);
		form.getLocalContext().setScannedFile(null);
		form.getLocalContext().setImportedFile(null);
		form.getLocalContext().setAbsolutePath(null);
		form.getLocalContext().setImportedImages(null);
		form.getLocalContext().setUploadedFiles(null);
		form.getLocalContext().setImportPageNo(0);
		form.getLocalContext().setScannedPageNo(0);
	}
		
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if (result.equals(DialogResult.CONFIRM))
		{						
			int year  = new DateTime().getDate().getYear();
			int month = new DateTime().getDate().getMonth();
			int day   = new DateTime().getDate().getDay();							
			String fileName = generateName() + ".pdf";
			String finalPDF = null;
					
			if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
			{
				finalPDF = (EnvironmentConfig.getFileUploadMountpoint() +  ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "/" + generateName() + ".pdf").replace("/", "\\");
			}
			else
			{			
				finalPDF = (path + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "/" + generateName() + ".pdf").replace("/", "\\");
			}
			
			List<String> imagesColl = form.getLocalContext().getImportedImages();							
			if (imagesColl == null) {
				return;
			}
			try
			{
				OutputStream output = new FileOutputStream(finalPDF);												
				List<InputStream> images = new ArrayList<InputStream>();						
				for (Iterator iterator = imagesColl.iterator(); iterator.hasNext();) 
				{
					String file = (String) iterator.next();
					if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
					{
						images.add(new FileInputStream(EnvironmentConfig.getFileUploadMountpoint() + file));
					}
					else
					{
						images.add(new FileInputStream(path + file));
					}
					
				}				
				
				new MergePDF().concatPDFs(images, output, true, form.getGlobalContext().Core.getUploadDocumentAction().equals(UploadDocumentAction.SCAN) ? true: false);
				
				byte[] buffer = readFile(finalPDF);
				if (buffer == null)
					return;
				output.close();												
			
				if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
				{
					engine.uploadFile(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue(), buffer, fileName, EnvironmentConfig.getFileUploadMountpoint() +  ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue());
				}
				else
				{
					engine.uploadFile(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue(), buffer, fileName,  ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue());
				}
				
				
				form.getLocalContext().setFileName(year + "\\" + month + "\\" + day + "\\" + fileName);
					
				if (save())
				{							
					deleteTempFiles(form.getLocalContext().getUploadedFiles(), form.getLocalContext().getImportedImages(), form.getLocalContext().getImportedFiles(),  finalPDF);							
				}
			}
			catch (Exception e)
			{
				catchErrors(e.toString(), SystemLogLevel.ERROR);
				return;
			}																
		}
		if (result.equals(DialogResult.CANCEL))
		{
			String file = appURL != null  ? (appURL.trim().length() > 0 ? appURL + form.getLocalContext().getImportedFile() : engine.getRequestUrl() + form.getLocalContext().getImportedFile() ) : engine.getRequestUrl()  + form.getLocalContext().getImportedFile();			
			form.htmPreview().setHTML("<IFRAME id=\"PostFrame\" name=\"PostFrame\" width=\"100%\" height=\"100%\" frameborder=0 src='" + file +  "'></IFRAME>");
		}
	}

	private void catchErrors(String error, SystemLogLevel level) 
	{
		if (level.equals(SystemLogLevel.ERROR)) {
			engine.showMessage(error);
		}
		
		engine.createSystemLogEntry(SystemLogType.FILE_UPLOADING, level, error);
	}
	
	private void deleteTempFiles(List<String> uploadedFilesColl, List<String> imagesColl, List<String> importedFiles, String finalPDF)
	{		
		if (importedFiles != null && importedFiles.size() > 0)
		{
			for (Iterator iterator = importedFiles.iterator(); iterator.hasNext();) 
			{
				String file = ((String) iterator.next()).replace("/", "\\");
				engine.deleteFile(file);										
			}
		}
		
		if (uploadedFilesColl != null && uploadedFilesColl.size() > 0)
		{
			for (Iterator iterator = uploadedFilesColl.iterator(); iterator.hasNext();) 
			{
				String file = ((String) iterator.next()).replace("/", "\\");
				File f = new File(file);
				f.delete();							
			}
		}
		
		if (imagesColl != null && imagesColl.size() > 0)
		{
			for (Iterator iterator = imagesColl.iterator(); iterator.hasNext();) 
			{	
				String file = null;
				if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
				{
					file = (EnvironmentConfig.getFileUploadMountpoint() + (String) iterator.next()).replace("/", "\\");;
				}
				else
				{
					file = (path + (String) iterator.next()).replace("/", "\\");;
				}
										 
				File f = new File(file);
				f.delete();											
			}
		}
		
		if (finalPDF != null && finalPDF.length() > 0)
		{
			finalPDF.replace("/", "\\");
			File pdf = new File(finalPDF);
			pdf.delete();						
		}
	}
	
	private byte[] readFile(String finalPDF) throws FileNotFoundException, IOException 
	{
		File pdf = new File(finalPDF);
		long size = pdf.length();
		
		if (size == 0) {
			engine.createSystemLogEntry(SystemLogType.FILE_UPLOADING, SystemLogLevel.ERROR, "Size of final PDF " + finalPDF+ " is zero!");
			return null;
		}
		
		FileInputStream fileInputStream = new FileInputStream(pdf);								
		int bytesAvailable = fileInputStream.available();
		int maxBufferSize = (int) size;
		int bufferSize = Math.min(bytesAvailable, maxBufferSize);
		byte[] buffer = new byte[bufferSize];
		int bytesRead = fileInputStream.read(buffer, 0, bufferSize);
		while (bytesRead > 0)
		{					
		    bytesAvailable = fileInputStream.available();
		    bufferSize = Math.min(bytesAvailable, maxBufferSize);
		    bytesRead = fileInputStream.read(buffer, 0, bufferSize);
		}
		fileInputStream.close();		
		return buffer;
	}		

	public static class StatisticsInputStream extends InputStream 
	{
	    private InputStream source;
	    private long bytesRead;
	 
	    public StatisticsInputStream (InputStream source) 
	    {
	        this.source = source;
	    }
	 
	    public int read() throws IOException 
	    {
	        int value = source.read();
	        bytesRead++;
	        return value;
	    }	 
	    
	    public long getBytesRead() 
	    {
	        return bytesRead;
	    }
	}
	
	public class MergePDF 
	{					
		
		public void concatPDFs(List<InputStream> streamOfJpgFiles, OutputStream outputStream, boolean paginate, boolean isJPG) 
		{
		    Document document = new Document();
		    try 
		    {		    
		      List<InputStream> 	jpgs		 = streamOfJpgFiles;	
		      Iterator<InputStream> iteratorPDFs = null;		      
		      List<InputStream>		pdfs 		 = new ArrayList<InputStream>();		      
		      List<PdfReader> 		readers 	 = new ArrayList<PdfReader>();
		      int totalPages = 0;
		      
		      Iterator<InputStream> iteratorJPGs = jpgs.iterator();		      		      
		      if (isJPG) 
		      {		    	  
		    	  while (iteratorJPGs.hasNext()) 
		    	  {				        		    				
		    		InputStream jpg = iteratorJPGs.next();				        				       
				    
		    		int bytesAvailable 	= jpg.available();
					int maxBufferSize 	= bytesAvailable *100;
					int bufferSize 		= Math.min(bytesAvailable, maxBufferSize);
					byte[] buffer 		= new byte[bufferSize];
					
					int bytesRead = jpg.read(buffer, 0, bufferSize);
					while (bytesRead > 0)
					{					
					    bytesAvailable = jpg.available();
					    bufferSize = Math.min(bytesAvailable, maxBufferSize);
					    bytesRead = jpg.read(buffer, 0, bufferSize);
					}
					
					jpg.close();
					
					ByteArrayOutputStream outStream = new ByteArrayOutputStream();						
					
					ConversionHelper helper = new ConversionHelper();
					helper.convert(buffer, "jpg", outStream);	
						
					pdfs.add(new ByteArrayInputStream(outStream.toByteArray()));
		    	  }		    	
		      }
		      else
		      {
		    	  pdfs = streamOfJpgFiles;		          
		      }
		      
	    	  iteratorPDFs = pdfs.iterator();

		      // Create Readers for the pdfs.
		      while (iteratorPDFs.hasNext()) 
		      {
		        InputStream pdf 		= iteratorPDFs.next();
		        PdfReader 	pdfReader 	= new PdfReader(pdf);
		        pdf.close();
		        readers.add(pdfReader);
		        totalPages += pdfReader.getNumberOfPages();
		      }
		      // Create a writer for the outputstream
		      PdfWriter writer = PdfWriter.getInstance(document, outputStream);

		      document.open();
		      BaseFont bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
		      PdfContentByte cb = writer.getDirectContent(); // Holds the PDF

		      PdfImportedPage page;
		      int currentPageNumber		 = 0;
		      int pageOfCurrentReaderPDF = 0;
		      Iterator<PdfReader> iteratorPDFReader = readers.iterator();

		      // Loop through the PDF files and add to the output.
		      while (iteratorPDFReader.hasNext()) 
		      {
		        PdfReader pdfReader = iteratorPDFReader.next();
		        // Create a new page in the target for each source page.
		        while (pageOfCurrentReaderPDF < pdfReader.getNumberOfPages()) 
		        {
		          document.newPage();
		          
		          pageOfCurrentReaderPDF++;
		          currentPageNumber++;
		          
		          page = writer.getImportedPage(pdfReader, pageOfCurrentReaderPDF);
		          cb.addTemplate(page, 0, 0);

		          // Code for pagination.
		          if (paginate) 
		          {
		            cb.beginText();
		            cb.setFontAndSize(bf, 9);
		            cb.showTextAligned(PdfContentByte.ALIGN_CENTER, "" + currentPageNumber + " of " + totalPages, 520, 5, 0);
		            cb.endText();
		          }
		        }
		        
		        pageOfCurrentReaderPDF = 0;
		      }
		      
		      document.close();		       
		    }
		    catch (Exception e) 
		    {
		    	LOG.error(e.toString());
		    }
		    finally 
		    {		    	
		      if (document.isOpen()) {
		        document.close();		
		      }
		    }
		}			
	}	
	
	private boolean save() 
	{			
		PatientDocumentVo vo = populatePatientDocumentVo(populateServetDocumentVo());	
					
		String[] str = vo.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return false;
		}
				
		if (form.getLocalContext().getUploadDocumentStoreLevelIsNotNull())
		{
			if (form.getLocalContext().getUploadDocumentStoreLevel().equals(UploadDocumentStoreLevel.REFERRAL))
			{
				if (!saveDocAtReferralLevel(vo))
					return false;
			}
			else if (form.getLocalContext().getUploadDocumentStoreLevel().equals(UploadDocumentStoreLevel.CARECONTEXT)
					||form.getLocalContext().getUploadDocumentStoreLevel().equals(UploadDocumentStoreLevel.EPISODEOFCARE)
					||form.getLocalContext().getUploadDocumentStoreLevel().equals(UploadDocumentStoreLevel.PATIENT))
			{
				try 
				{
					PatientDocumentSaveVo voSave = domain.savePatientDocument(vo, null, null);
					form.getGlobalContext().Core.setPatientDocument(voSave.getPatientDocumentVo());			
				} 
				catch (StaleObjectException e) 
				{			
					catchErrors(e.toString(), SystemLogLevel.ERROR);
					return false;
				}
			}
					
			engine.close(DialogResult.OK);		
			return true;
		}
		
		return false;
	}

	private boolean saveDocAtReferralLevel(PatientDocumentVo vo)
	{
		hasGPLetter = false;
		CatsReferralWizardVo catReferral = null;
		if (form.getGlobalContext().RefMan.getCatsReferralIsNotNull())
		{
			catReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		}

		if (catReferral == null)
			return false;


		if (catReferral.getHasReferralLetter() == null ||
			(catReferral.getHasReferralLetter() != null &&
					catReferral.getHasReferralLetter() == false))
		{
			if (form.cmbSource().getValue() != null)
			{
				if (form.cmbSource().getValue().equals(DocumentCategory.GPLETTER))
				{
					hasGPLetter = true;
					catReferral.setHasReferralLetter(Boolean.TRUE);//wdev-10222

					if(catReferral.getCurrentStatusIsNotNull() 
						&& catReferral.getCurrentStatus().getReferralStatusIsNotNull() 
						&& catReferral.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.REFERRAL_RECEIVED))
						setCatsReferralStatus(catReferral);	
				}
			}		
		}
		
		if (catReferral.getHasDocumentsIsNotNull())
		{
			if (catReferral.getHasDocuments().equals(Boolean.FALSE))
			{
				if (form.cmbSource().getValue() != null)
				{
					if (!form.cmbSource().getValue().equals(DocumentCategory.GPLETTER))
					{
						catReferral.setHasDocuments(Boolean.TRUE);
					}
				}
			}
		}
		else
		{
			if (form.cmbSource().getValue() != null)
			{
				if (!form.cmbSource().getValue().equals(DocumentCategory.GPLETTER))
				{
					catReferral.setHasDocuments(Boolean.TRUE);
				}
			}		
		}

		try 
		{					
			PatientDocumentSaveVo voSave = domain.savePatientDocument(vo, catReferral, form.getGlobalContext().RefMan.getCatsReferralIsNotNull() ? form.getGlobalContext().RefMan.getCatsReferral() : null  );
			form.getGlobalContext().Core.setPatientDocument(voSave.getPatientDocumentVo());
			form.getGlobalContext().RefMan.setCatsReferralWizard(voSave.getCatsReferralWizardVo());
		
			if (!hasGPLetter)
			{
				form.getGlobalContext().RefMan.setCatsReferralHasGpLetter(Boolean.FALSE);
			}
			else
				form.getGlobalContext().RefMan.setCatsReferralHasGpLetter(Boolean.TRUE);
		
		} 
		catch (StaleObjectException e) 
		{			
			catchErrors(e.toString(), SystemLogLevel.ERROR);
			return false;
		}
		return true;
	}

	private void setCatsReferralStatus(CatsReferralWizardVo catReferral) 
	{
		CatsReferralStatusVoCollection voStatusColl = catReferral.getStatusHistory();
				
		if (voStatusColl == null)
			voStatusColl = new CatsReferralStatusVoCollection();
		
		CatsReferralStatusVo currentStatus = new CatsReferralStatusVo();			 		
		currentStatus.setReferralStatus(ReferralApptStatus.AWAITING_TRIAGE);		
		currentStatus.setAuthoringUser((MemberOfStaffRefVo)domain.getMosUser(engine.getLoggedInUser().getUsername()));
		currentStatus.setStatusDateTime(new DateTime());
		
		catReferral.setCurrentStatus(currentStatus);
		voStatusColl.add(currentStatus);
	}

	private String[] getUIErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
		String e = "";
		if (form.txtName().getValue() == null) 
		{
			errors.add("Document Name is mandatory");
		}
		if (form.cmbSource().getValue() == null) 
		{
			errors.add("Document Type is mandatory");
		}
		if (form.cmbType().getValue() == null) 
		{
			errors.add("Document Source is mandatory");
		}
		if (form.getGlobalContext().Core.getUploadDocumentAction().equals(UploadDocumentAction.IMPORT) &&
				!form.getLocalContext().getImportedFileIsNotNull())
		{
			errors.add("Select a file for upload");
		}
		if (form.getGlobalContext().Core.getUploadDocumentAction().equals(UploadDocumentAction.SCAN) &&
				!form.getLocalContext().getScannedFileIsNotNull())
		{
			errors.add("Please scan a document");
		}
		
		if (errors.size() > 0) 
		{
			String[] err = new String[errors.size()];
			errors.toArray(err);
			for (int i = 0; i < errors.size(); i++) {
				e += errors.get(i) + "\n";
			}			
			engine.showMessage(e);
			return err;
		}
		
		return null;		
	}

	private PatientDocumentVo populatePatientDocumentVo(ServerDocumentVo serverDocumentVo)
	{
		PatientDocumentVo vo = new PatientDocumentVo();
		vo.setPatient(form.getGlobalContext().Core.getPatientShort());
		vo.setEpisodeofCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		vo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		vo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		vo.setReferral(null);
		vo.setName(form.txtName().getValue());
		vo.setServerDocument(serverDocumentVo);
		vo.setCreationType(form.cmbType().getValue());
		vo.setCategory(form.cmbSource().getValue());
		vo.setDocumentDate(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime().getDate() : (form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull() ? form.getGlobalContext().Core.getEpisodeofCareShort().getStartDate() : new Date()));//	WDEV-13638, WDEV-12356
		vo.setRecordingUser((MemberOfStaffRefVo)domain.getMosUser(engine.getLoggedInUser().getUsername()));
		vo.setRecordingDateTime(new DateTime());
		vo.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
		
		vo.setResponsibleHCP(form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull() ? form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCP() : null);//WDEV-13338
		vo.setSpecialty(form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull() ? form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty() : null);//WDEV-13338
		return vo;
	}

	private ServerDocumentVo populateServetDocumentVo() 
	{
		ServerDocumentVo vo = new ServerDocumentVo();
		String filePath = form.getLocalContext().getFileName().substring(0, form.getLocalContext().getFileName().length()-3) + "pdf";				
		vo.setFileName(filePath);
		vo.setFileType(FileType.PDF);		
		return vo;		
	}	

	@SuppressWarnings("unchecked")
	@Override
	protected void onCustomEvent(CustomEvent event)	throws PresentationLogicException 
	{		
		if (event instanceof ScannedImageCustomEvent)
		{
			form.getLocalContext().setScannedFile(null);
			String image = ((ScannedImageCustomEvent)event).getImage();
			String fileName = ((ScannedImageCustomEvent)event).getFileName();
			byte[] decBytes = Base64.decode(image);

			if (decBytes == null ||
					(decBytes != null && decBytes.length == 0)) 
			{
				catchErrors("Base64 image size is zero", SystemLogLevel.ERROR);
				return;
			}	
			
			try 
			{
				String file = null;
				
				if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
				{
					file = engine.uploadFile(ConfigFlag.GEN.UPLOAD_URL.getValue(), decBytes, fileName, EnvironmentConfig.getFileUploadMountpoint() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue());
				}
				else
				{
					file = engine.uploadFile(ConfigFlag.GEN.UPLOAD_URL.getValue(), decBytes, fileName, ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue());
				}				 
				
				form.getLocalContext().setScannedFile(file);
								
				String jpgFile = null;
				//Is file is not saved in /upload relative to app url, EnvironmentConfig.getFileUploadMountpoint() need to be added as Alias in Apache
				if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
				{
					jpgFile = ConfigFlag.GEN.CUSTOM_UPLOADS_URL.getValue()  + fileName;
				}
				else
				{
					jpgFile = appURL != null  ? (appURL.trim().length() > 0 ? appURL + file : engine.getRequestUrl() + file ) : engine.getRequestUrl()  + file;
				}
								
				//form.htmPreview().setHTML("<img src='"+  jpgFile +"' width='800' height='600'>");
				
				List<String> imagesColl = form.getLocalContext().getImportedImages();
				
				if (imagesColl == null)
					imagesColl = new ArrayList<String>();
				
				imagesColl.add(file);
				
				form.getLocalContext().setImportedImages(imagesColl);
				form.getLocalContext().setScannedPageNo(form.getLocalContext().getScannedPageNo()+1);
				form.lblPages().setValue("- Page " + (form.getLocalContext().getScannedPageNo()) + " -");
				
				List<String> previewImagesColl = form.getLocalContext().getPreviewImages();
				
				if (previewImagesColl == null)
					previewImagesColl = new ArrayList<String>();
				
				previewImagesColl.add(jpgFile);
				
				form.getLocalContext().setPreviewImages(previewImagesColl);
				previewImages(form.getLocalContext().getPreviewImages());
			}
			catch (Exception e) 
			{			
				catchErrors(e.toString(), SystemLogLevel.ERROR);
				return; 
			}						
		}
		//WDEV-12382- Start
		else if (event instanceof ExternalMessageCustomEvent)
		{
			ExternalMessageCustomEvent message =(ExternalMessageCustomEvent)event;
			engine.showMessage(message.getText(),message.getTitle());
		}//WDEV-12382 - End
	}
	
	private void previewImages(List<?> imagesList) 
	{
		if(imagesList == null || imagesList.size() == 0)
			return;
		
		StringBuffer sb = new StringBuffer();
		sb.append("<table>");
		
		for(int i=0; i<imagesList.size(); i++)
		{
			String jpgFile = (String) imagesList.get(i);
			
			sb.append("<tr><td><img src='"+  jpgFile +"' width='800' height='600'></td></tr>");
		}
		
		sb.append("</table>");
		
		form.htmPreview().setHTML(sb.toString());
	}

	private String getBaseName(String fullFileName)
	{
		int ind = fullFileName.lastIndexOf("/");
		if (ind == -1)
		{
			ind = fullFileName.lastIndexOf("\\");			
		}
		if (ind == -1)
			return fullFileName;
		
		if (ind + 1 == fullFileName.length())
			return "";
		
		return fullFileName.substring(ind + 1);
	}

	@SuppressWarnings("unchecked")
	protected void onCcUploadValueChanged() throws PresentationLogicException 
	{			
		if (form.ccUpload().getValue() != null)
		{												
			form.getLocalContext().setImportedFile(form.ccUpload().getValue());								
			form.getLocalContext().setAbsolutePath(form.ccUpload().getValue());
			String file = "";
				
			if (form.getLocalContext().getImportedFileIsNotNull())
			{
				try
				{
					String uploadFileName = null;
					
					if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
					{
						uploadFileName = EnvironmentConfig.getFileUploadMountpoint() +  ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + getBaseName(form.getLocalContext().getImportedFile());
					}
					else
					{
						uploadFileName = EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + getBaseName(form.getLocalContext().getImportedFile());
					}
										
					
					int fileTypesIndex = form.getLocalContext().getImportedFile().lastIndexOf(".");
					String fileType = form.getLocalContext().getImportedFile().substring(fileTypesIndex+1);
						
					boolean allow = false;
					for (int i = 0; i < allowType.length; i++) 
					{
						if (fileType.toLowerCase().equals(allowType[i]))
						{
							allow = true;
							break;
						}
					}
												
					if (allow)
					{	
						List<String> uploadedFilesColl = form.getLocalContext().getUploadedFiles();
							
						if (uploadedFilesColl == null)
								uploadedFilesColl = new ArrayList<String>();
						{
							uploadedFilesColl.add(uploadFileName);
						}
							
						form.getLocalContext().setUploadedFiles(uploadedFilesColl);
							
						List<String> importedFilesColl = form.getLocalContext().getImportedFiles();
							
						if (importedFilesColl == null)
							importedFilesColl = new ArrayList<String>();
						{
							importedFilesColl.add(form.getLocalContext().getImportedFile());
						}
							
						form.getLocalContext().setImportedFiles(importedFilesColl);
														
						if (!fileType.toLowerCase().equals("pdf"))
						{
							byte[] buffer = readFile(uploadFileName);
							if (buffer == null ||
									(buffer != null &&
											buffer.length == 0)) {
								catchErrors(uploadFileName + " size is zero", SystemLogLevel.ERROR);
								return;
							}
																								
							ByteArrayOutputStream outStream = new ByteArrayOutputStream();							
							try 
							{
								ConversionHelper helper = new ConversionHelper();
								helper.convert(buffer, fileType, outStream);								
							}
							catch (IOException e) 
							{			
								catchErrors(e.toString(), SystemLogLevel.ERROR);
								return; 
							}
							catch (RuntimeException err) 
							{			
								engine.showMessage("File conversion error: file cannot be converted!");
								return;
							}
							catch (Exception e) 
							{
								catchErrors(e.toString(), SystemLogLevel.ERROR);
								return; 
							}
							finally {
								outStream.close();
							}
			
							if (outStream.size() == 0) {
								catchErrors("Converted pdf size is zero", SystemLogLevel.ERROR);
								return;
							}
							try 
							{	
								if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
								{
									file = engine.uploadFile(ConfigFlag.GEN.UPLOAD_URL.getValue(), outStream.toByteArray(), generateName() + ".pdf", EnvironmentConfig.getFileUploadMountpoint() +  ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "\\");
								}
								else
								{
									file = engine.uploadFile(ConfigFlag.GEN.UPLOAD_URL.getValue(), outStream.toByteArray(), generateName() + ".pdf", ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "\\");
								}
								
							}
							catch (Exception e)
							{
								catchErrors(e.toString(), SystemLogLevel.ERROR);
								return; 
							}
							finally {							
								outStream.close();
							}
						}
						
						if (file == null)
						{
							engine.showMessage("A problem was encountered while attempting to upload file.");
							return;
						}

						List<String> imagesColl = form.getLocalContext().getImportedImages();
							
						if (imagesColl == null)
								imagesColl = new ArrayList<String>();
						{
							if (fileType.toLowerCase().equals("pdf"))
							{
								if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
								{
									file = ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() +  "\\" + getBaseName(form.getLocalContext().getImportedFile());
								}
								else
								{
									file = "\\" + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "\\" + getBaseName(form.getLocalContext().getImportedFile());
								}
								
							}
								
							imagesColl.add(file);
						}							
						
						form.getLocalContext().setImportedImages(imagesColl);
						}
					else
					{
						engine.showMessage("File upload error: file type it's not allow for uploading");
						return;					
					}
				}
				catch (IOException e)
				{
					catchErrors(e.toString(), SystemLogLevel.ERROR);
					return;
				}									
			}			
			
			//****** WDEV-11829 ****************** 
			if (file != null && file.length() > 0)
			{
				file = file.replace("//", "/");
			}		
			//************************************
			
			String previewFile = null;
			
			if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
			{
				previewFile = ConfigFlag.GEN.CUSTOM_UPLOADS_URL.getValue() +  getBaseName(file);
			}
			else
			{
				previewFile = appURL != null  ? (appURL.trim().length() > 0 ? appURL + file : engine.getRequestUrl() + file ) : engine.getRequestUrl()  + file;
			}
			
			
			form.htmPreview().setHTML("<IFRAME id=\"PostFrame\" name=\"PostFrame\" width=\"100%\" height=\"100%\" frameborder=0 src='" + previewFile +  "'></IFRAME>");
			form.getLocalContext().setImportedFile(file);
			form.getLocalContext().setScannedPageNo(form.getLocalContext().getScannedPageNo() +1);
			form.lblPages().setValue("- Page " + (form.getLocalContext().getScannedPageNo()) + " -");
		}				
		else
		{
			form.htmPreview().setHTML("No image");
		}		
	}	
	
	private String generateName()
	  {	
		  String str = "";
		  
		  try
		  {
			  //Get Random Segment
		      SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(prng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
			  
			  //Get CurrentTimeMillis() segment
		      str += Long.toHexString(System.currentTimeMillis());
		      while (str.length () < 12)
	          {
	              str = '0' + str;
	          }

			  //Get Random Segment
		      SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(secondPrng.nextInt());
		      while (str.length () < 8)
	          {	
	              str = '0' + str;
	          }

		      //Get IdentityHash() segment
		      str += Long.toHexString(System.identityHashCode((Object) this));
		      while (str.length() < 8)
		      {
		          str = '0' + str; 
		      }	  
		      //Get Third Random Segment
		      byte bytes[] = new byte[16]; 
		      SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
		      thirdPrng.nextBytes(bytes);
		      str += Integer.toHexString(thirdPrng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
		  }
		  catch(java.security.NoSuchAlgorithmException ex)
		  {
		      ex.getMessage();
		  }
		  
		  return str;
	  }			
}
