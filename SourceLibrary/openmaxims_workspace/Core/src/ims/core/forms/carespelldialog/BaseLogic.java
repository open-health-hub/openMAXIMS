//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.carespelldialog;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.core.domain.CareSpellDialog.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.core.domain.CareSpellDialog domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbConContactTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbConContactType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ContactType existingInstance = (ims.core.vo.lookups.ContactType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbConContactTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ContactType)
		{
			ims.core.vo.lookups.ContactType instance = (ims.core.vo.lookups.ContactType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbConContactTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ContactType existingInstance = (ims.core.vo.lookups.ContactType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbConContactType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbConContactTypeLookup()
	{
		this.form.cmbConContactType().clear();
		ims.core.vo.lookups.ContactTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getContactType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbConContactType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbConContactTypeLookupValue(int id)
	{
		ims.core.vo.lookups.ContactType instance = ims.core.vo.lookups.LookupHelper.getContactTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbConContactType().setValue(instance);
	}
	protected final void defaultcmbConContactTypeLookupValue()
	{
		this.form.cmbConContactType().setValue((ims.core.vo.lookups.ContactType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ContactType.class, engine.getFormName().getID(), ims.core.vo.lookups.ContactType.TYPE_ID));
	}
	protected final void oncmbConSpecialtyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbConSpecialty().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbConSpecialtyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Specialty)
		{
			ims.core.vo.lookups.Specialty instance = (ims.core.vo.lookups.Specialty)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbConSpecialtyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbConSpecialty().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbConSpecialtyLookup()
	{
		this.form.cmbConSpecialty().clear();
		ims.core.vo.lookups.SpecialtyCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSpecialty(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbConSpecialty().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbConSpecialtyLookupValue(int id)
	{
		ims.core.vo.lookups.Specialty instance = ims.core.vo.lookups.LookupHelper.getSpecialtyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbConSpecialty().setValue(instance);
	}
	protected final void defaultcmbConSpecialtyLookupValue()
	{
		this.form.cmbConSpecialty().setValue((ims.core.vo.lookups.Specialty)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Specialty.class, engine.getFormName().getID(), ims.core.vo.lookups.Specialty.TYPE_ID));
	}
	protected final void oncmbCtxLocationTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbCtxLocationType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ContactLocation existingInstance = (ims.core.vo.lookups.ContactLocation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCtxLocationTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ContactLocation)
		{
			ims.core.vo.lookups.ContactLocation instance = (ims.core.vo.lookups.ContactLocation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCtxLocationTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ContactLocation existingInstance = (ims.core.vo.lookups.ContactLocation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbCtxLocationType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCtxLocationTypeLookup()
	{
		this.form.cmbCtxLocationType().clear();
		ims.core.vo.lookups.ContactLocationCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getContactLocation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbCtxLocationType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCtxLocationTypeLookupValue(int id)
	{
		ims.core.vo.lookups.ContactLocation instance = ims.core.vo.lookups.LookupHelper.getContactLocationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbCtxLocationType().setValue(instance);
	}
	protected final void defaultcmbCtxLocationTypeLookupValue()
	{
		this.form.cmbCtxLocationType().setValue((ims.core.vo.lookups.ContactLocation)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ContactLocation.class, engine.getFormName().getID(), ims.core.vo.lookups.ContactLocation.TYPE_ID));
	}
	protected final void oncmbEcRelationshipValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbEcRelationship().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.CareSpelltoEpisodeRelationship existingInstance = (ims.core.vo.lookups.CareSpelltoEpisodeRelationship)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbEcRelationshipLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.CareSpelltoEpisodeRelationship)
		{
			ims.core.vo.lookups.CareSpelltoEpisodeRelationship instance = (ims.core.vo.lookups.CareSpelltoEpisodeRelationship)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbEcRelationshipLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.CareSpelltoEpisodeRelationship existingInstance = (ims.core.vo.lookups.CareSpelltoEpisodeRelationship)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbEcRelationship().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbEcRelationshipLookup()
	{
		this.form.cmbEcRelationship().clear();
		ims.core.vo.lookups.CareSpelltoEpisodeRelationshipCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getCareSpelltoEpisodeRelationship(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbEcRelationship().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbEcRelationshipLookupValue(int id)
	{
		ims.core.vo.lookups.CareSpelltoEpisodeRelationship instance = ims.core.vo.lookups.LookupHelper.getCareSpelltoEpisodeRelationshipInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbEcRelationship().setValue(instance);
	}
	protected final void defaultcmbEcRelationshipLookupValue()
	{
		this.form.cmbEcRelationship().setValue((ims.core.vo.lookups.CareSpelltoEpisodeRelationship)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.CareSpelltoEpisodeRelationship.class, engine.getFormName().getID(), ims.core.vo.lookups.CareSpelltoEpisodeRelationship.TYPE_ID));
	}
	protected final void oncmbEcSpecialtyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbEcSpecialty().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbEcSpecialtyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Specialty)
		{
			ims.core.vo.lookups.Specialty instance = (ims.core.vo.lookups.Specialty)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbEcSpecialtyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbEcSpecialty().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbEcSpecialtyLookup()
	{
		this.form.cmbEcSpecialty().clear();
		ims.core.vo.lookups.SpecialtyCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSpecialty(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbEcSpecialty().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbEcSpecialtyLookupValue(int id)
	{
		ims.core.vo.lookups.Specialty instance = ims.core.vo.lookups.LookupHelper.getSpecialtyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbEcSpecialty().setValue(instance);
	}
	protected final void defaultcmbEcSpecialtyLookupValue()
	{
		this.form.cmbEcSpecialty().setValue((ims.core.vo.lookups.Specialty)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Specialty.class, engine.getFormName().getID(), ims.core.vo.lookups.Specialty.TYPE_ID));
	}
	protected final void oncmbCtxContextTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbCtxContextType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ContextType existingInstance = (ims.core.vo.lookups.ContextType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCtxContextTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ContextType)
		{
			ims.core.vo.lookups.ContextType instance = (ims.core.vo.lookups.ContextType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCtxContextTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ContextType existingInstance = (ims.core.vo.lookups.ContextType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbCtxContextType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCtxContextTypeLookup()
	{
		this.form.cmbCtxContextType().clear();
		ims.core.vo.lookups.ContextTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getContextType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbCtxContextType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCtxContextTypeLookupValue(int id)
	{
		ims.core.vo.lookups.ContextType instance = ims.core.vo.lookups.LookupHelper.getContextTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbCtxContextType().setValue(instance);
	}
	protected final void defaultcmbCtxContextTypeLookupValue()
	{
		this.form.cmbCtxContextType().setValue((ims.core.vo.lookups.ContextType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ContextType.class, engine.getFormName().getID(), ims.core.vo.lookups.ContextType.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.core.domain.CareSpellDialog domain;
}
