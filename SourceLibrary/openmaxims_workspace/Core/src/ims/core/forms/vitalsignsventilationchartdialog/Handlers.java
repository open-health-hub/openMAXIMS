//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.vitalsignsventilationchartdialog;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindansProbeChangeLookup();
	abstract protected void defaultansProbeChangeLookupValue();
	abstract protected void bindcmbCuffLookup();
	abstract protected void defaultcmbCuffLookupValue();
	abstract protected void bindcmbPainScaleLookup();
	abstract protected void defaultcmbPainScaleLookupValue();
	abstract protected void bindcmbModeLookup();
	abstract protected void defaultcmbModeLookupValue();
	abstract protected void bindcmbPyhsioLookup();
	abstract protected void defaultcmbPyhsioLookupValue();
	abstract protected void bindcmbPositionLookup();
	abstract protected void defaultcmbPositionLookupValue();
	abstract protected void bindcmbSuctionLookup();
	abstract protected void defaultcmbSuctionLookupValue();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkonFiO2ValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onansProbeChangeValueSet(Object value);
	abstract protected void oncmbCuffValueSet(Object value);
	abstract protected void oncmbPainScaleValueSet(Object value);
	abstract protected void oncmbModeValueSet(Object value);
	abstract protected void oncmbPyhsioValueSet(Object value);
	abstract protected void oncmbPositionValueSet(Object value);
	abstract protected void oncmbSuctionValueSet(Object value);
	abstract protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.chkonFiO2().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkonFiO2ValueChanged();
			}
		});
		this.form.ansProbeChange().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansProbeChangeValueSet(value);
			}
		});
		this.form.cmbCuff().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCuffValueSet(value);
			}
		});
		this.form.cmbPainScale().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPainScaleValueSet(value);
			}
		});
		this.form.cmbMode().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbModeValueSet(value);
			}
		});
		this.form.cmbPyhsio().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPyhsioValueSet(value);
			}
		});
		this.form.cmbPosition().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPositionValueSet(value);
			}
		});
		this.form.cmbSuction().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSuctionValueSet(value);
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBSaveClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindansProbeChangeLookup();
		bindcmbCuffLookup();
		bindcmbPainScaleLookup();
		bindcmbModeLookup();
		bindcmbPyhsioLookup();
		bindcmbPositionLookup();
		bindcmbSuctionLookup();
	}
	protected void rebindAllLookups()
	{
		bindansProbeChangeLookup();
		bindcmbCuffLookup();
		bindcmbPainScaleLookup();
		bindcmbModeLookup();
		bindcmbPyhsioLookup();
		bindcmbPositionLookup();
		bindcmbSuctionLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultansProbeChangeLookupValue();
		defaultcmbCuffLookupValue();
		defaultcmbPainScaleLookupValue();
		defaultcmbModeLookupValue();
		defaultcmbPyhsioLookupValue();
		defaultcmbPositionLookupValue();
		defaultcmbSuctionLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
