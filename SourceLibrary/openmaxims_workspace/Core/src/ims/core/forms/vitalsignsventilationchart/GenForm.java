//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.vitalsignsventilationchart;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbAllRecordsComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ShiftDetailsVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ShiftDetailsVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ShiftDetailsVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ShiftDetailsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ShiftDetailsVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ShiftDetailsVo getValue()
		{
			return (ims.core.vo.ShiftDetailsVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ShiftDetailsVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbRecordToUpdateComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.VitalSignsVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.VitalSignsVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.VitalSignsVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.VitalSignsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.VitalSignsVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.VitalSignsVo getValue()
		{
			return (ims.core.vo.VitalSignsVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.VitalSignsVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdVentilationRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdVentilationRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColVentilationChartReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColVentilationChartReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColVentilationChartOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColVentilationChart(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColVentilationChart()
		{
			return (String)super.row.get(0);
		}
		public void setColVentilationChart(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColVentilationChartTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setCol08ReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isCol08ReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showCol08Opened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForCol08(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getCol08()
		{
			return (String)super.row.get(1);
		}
		public void setCol08(String value)
		{
			super.row.set(1, value);
		}
		public void setCellCol08Tooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setCol09ReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isCol09ReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showCol09Opened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForCol09(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getCol09()
		{
			return (String)super.row.get(2);
		}
		public void setCol09(String value)
		{
			super.row.set(2, value);
		}
		public void setCellCol09Tooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setCol10ReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isCol10ReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showCol10Opened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForCol10(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getCol10()
		{
			return (String)super.row.get(3);
		}
		public void setCol10(String value)
		{
			super.row.set(3, value);
		}
		public void setCellCol10Tooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setCol11ReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isCol11ReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showCol11Opened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForCol11(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getCol11()
		{
			return (String)super.row.get(4);
		}
		public void setCol11(String value)
		{
			super.row.set(4, value);
		}
		public void setCellCol11Tooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setCol12ReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isCol12ReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showCol12Opened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForCol12(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getCol12()
		{
			return (String)super.row.get(5);
		}
		public void setCol12(String value)
		{
			super.row.set(5, value);
		}
		public void setCellCol12Tooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setCol13ReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isCol13ReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showCol13Opened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForCol13(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getCol13()
		{
			return (String)super.row.get(6);
		}
		public void setCol13(String value)
		{
			super.row.set(6, value);
		}
		public void setCellCol13Tooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setCol14ReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isCol14ReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showCol14Opened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForCol14(String value)
		{
			super.row.setTooltip(7, value);
		}
		public String getCol14()
		{
			return (String)super.row.get(7);
		}
		public void setCol14(String value)
		{
			super.row.set(7, value);
		}
		public void setCellCol14Tooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setCol15ReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean isCol15ReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showCol15Opened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForCol15(String value)
		{
			super.row.setTooltip(8, value);
		}
		public String getCol15()
		{
			return (String)super.row.get(8);
		}
		public void setCol15(String value)
		{
			super.row.set(8, value);
		}
		public void setCellCol15Tooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setCol16ReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean isCol16ReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showCol16Opened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForCol16(String value)
		{
			super.row.setTooltip(9, value);
		}
		public String getCol16()
		{
			return (String)super.row.get(9);
		}
		public void setCol16(String value)
		{
			super.row.set(9, value);
		}
		public void setCellCol16Tooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setCol17ReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean isCol17ReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showCol17Opened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForCol17(String value)
		{
			super.row.setTooltip(10, value);
		}
		public String getCol17()
		{
			return (String)super.row.get(10);
		}
		public void setCol17(String value)
		{
			super.row.set(10, value);
		}
		public void setCellCol17Tooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public void setCol18ReadOnly(boolean value)
		{
			super.row.setReadOnly(11, value);
		}
		public boolean isCol18ReadOnly()
		{
			return super.row.isReadOnly(11);
		}
		public void showCol18Opened()
		{
			super.row.showOpened(11);
		}
		public void setTooltipForCol18(String value)
		{
			super.row.setTooltip(11, value);
		}
		public String getCol18()
		{
			return (String)super.row.get(11);
		}
		public void setCol18(String value)
		{
			super.row.set(11, value);
		}
		public void setCellCol18Tooltip(String value)
		{
			super.row.setTooltip(11, value);
		}
		public void setCol19ReadOnly(boolean value)
		{
			super.row.setReadOnly(12, value);
		}
		public boolean isCol19ReadOnly()
		{
			return super.row.isReadOnly(12);
		}
		public void showCol19Opened()
		{
			super.row.showOpened(12);
		}
		public void setTooltipForCol19(String value)
		{
			super.row.setTooltip(12, value);
		}
		public String getCol19()
		{
			return (String)super.row.get(12);
		}
		public void setCol19(String value)
		{
			super.row.set(12, value);
		}
		public void setCellCol19Tooltip(String value)
		{
			super.row.setTooltip(12, value);
		}
		public void setCol20ReadOnly(boolean value)
		{
			super.row.setReadOnly(13, value);
		}
		public boolean isCol20ReadOnly()
		{
			return super.row.isReadOnly(13);
		}
		public void showCol20Opened()
		{
			super.row.showOpened(13);
		}
		public void setTooltipForCol20(String value)
		{
			super.row.setTooltip(13, value);
		}
		public String getCol20()
		{
			return (String)super.row.get(13);
		}
		public void setCol20(String value)
		{
			super.row.set(13, value);
		}
		public void setCellCol20Tooltip(String value)
		{
			super.row.setTooltip(13, value);
		}
		public void setCol21ReadOnly(boolean value)
		{
			super.row.setReadOnly(14, value);
		}
		public boolean isCol21ReadOnly()
		{
			return super.row.isReadOnly(14);
		}
		public void showCol21Opened()
		{
			super.row.showOpened(14);
		}
		public void setTooltipForCol21(String value)
		{
			super.row.setTooltip(14, value);
		}
		public String getCol21()
		{
			return (String)super.row.get(14);
		}
		public void setCol21(String value)
		{
			super.row.set(14, value);
		}
		public void setCellCol21Tooltip(String value)
		{
			super.row.setTooltip(14, value);
		}
		public void setCol22ReadOnly(boolean value)
		{
			super.row.setReadOnly(15, value);
		}
		public boolean isCol22ReadOnly()
		{
			return super.row.isReadOnly(15);
		}
		public void showCol22Opened()
		{
			super.row.showOpened(15);
		}
		public void setTooltipForCol22(String value)
		{
			super.row.setTooltip(15, value);
		}
		public String getCol22()
		{
			return (String)super.row.get(15);
		}
		public void setCol22(String value)
		{
			super.row.set(15, value);
		}
		public void setCellCol22Tooltip(String value)
		{
			super.row.setTooltip(15, value);
		}
		public void setCol23ReadOnly(boolean value)
		{
			super.row.setReadOnly(16, value);
		}
		public boolean isCol23ReadOnly()
		{
			return super.row.isReadOnly(16);
		}
		public void showCol23Opened()
		{
			super.row.showOpened(16);
		}
		public void setTooltipForCol23(String value)
		{
			super.row.setTooltip(16, value);
		}
		public String getCol23()
		{
			return (String)super.row.get(16);
		}
		public void setCol23(String value)
		{
			super.row.set(16, value);
		}
		public void setCellCol23Tooltip(String value)
		{
			super.row.setTooltip(16, value);
		}
		public void setCol24ReadOnly(boolean value)
		{
			super.row.setReadOnly(17, value);
		}
		public boolean isCol24ReadOnly()
		{
			return super.row.isReadOnly(17);
		}
		public void showCol24Opened()
		{
			super.row.showOpened(17);
		}
		public void setTooltipForCol24(String value)
		{
			super.row.setTooltip(17, value);
		}
		public String getCol24()
		{
			return (String)super.row.get(17);
		}
		public void setCol24(String value)
		{
			super.row.set(17, value);
		}
		public void setCellCol24Tooltip(String value)
		{
			super.row.setTooltip(17, value);
		}
		public void setCol01ReadOnly(boolean value)
		{
			super.row.setReadOnly(18, value);
		}
		public boolean isCol01ReadOnly()
		{
			return super.row.isReadOnly(18);
		}
		public void showCol01Opened()
		{
			super.row.showOpened(18);
		}
		public void setTooltipForCol01(String value)
		{
			super.row.setTooltip(18, value);
		}
		public String getCol01()
		{
			return (String)super.row.get(18);
		}
		public void setCol01(String value)
		{
			super.row.set(18, value);
		}
		public void setCellCol01Tooltip(String value)
		{
			super.row.setTooltip(18, value);
		}
		public void setCol02ReadOnly(boolean value)
		{
			super.row.setReadOnly(19, value);
		}
		public boolean isCol02ReadOnly()
		{
			return super.row.isReadOnly(19);
		}
		public void showCol02Opened()
		{
			super.row.showOpened(19);
		}
		public void setTooltipForCol02(String value)
		{
			super.row.setTooltip(19, value);
		}
		public String getCol02()
		{
			return (String)super.row.get(19);
		}
		public void setCol02(String value)
		{
			super.row.set(19, value);
		}
		public void setCellCol02Tooltip(String value)
		{
			super.row.setTooltip(19, value);
		}
		public void setCol03ReadOnly(boolean value)
		{
			super.row.setReadOnly(20, value);
		}
		public boolean isCol03ReadOnly()
		{
			return super.row.isReadOnly(20);
		}
		public void showCol03Opened()
		{
			super.row.showOpened(20);
		}
		public void setTooltipForCol03(String value)
		{
			super.row.setTooltip(20, value);
		}
		public String getCol03()
		{
			return (String)super.row.get(20);
		}
		public void setCol03(String value)
		{
			super.row.set(20, value);
		}
		public void setCellCol03Tooltip(String value)
		{
			super.row.setTooltip(20, value);
		}
		public void setCol04ReadOnly(boolean value)
		{
			super.row.setReadOnly(21, value);
		}
		public boolean isCol04ReadOnly()
		{
			return super.row.isReadOnly(21);
		}
		public void showCol04Opened()
		{
			super.row.showOpened(21);
		}
		public void setTooltipForCol04(String value)
		{
			super.row.setTooltip(21, value);
		}
		public String getCol04()
		{
			return (String)super.row.get(21);
		}
		public void setCol04(String value)
		{
			super.row.set(21, value);
		}
		public void setCellCol04Tooltip(String value)
		{
			super.row.setTooltip(21, value);
		}
		public void setCol05ReadOnly(boolean value)
		{
			super.row.setReadOnly(22, value);
		}
		public boolean isCol05ReadOnly()
		{
			return super.row.isReadOnly(22);
		}
		public void showCol05Opened()
		{
			super.row.showOpened(22);
		}
		public void setTooltipForCol05(String value)
		{
			super.row.setTooltip(22, value);
		}
		public String getCol05()
		{
			return (String)super.row.get(22);
		}
		public void setCol05(String value)
		{
			super.row.set(22, value);
		}
		public void setCellCol05Tooltip(String value)
		{
			super.row.setTooltip(22, value);
		}
		public void setCol06ReadOnly(boolean value)
		{
			super.row.setReadOnly(23, value);
		}
		public boolean isCol06ReadOnly()
		{
			return super.row.isReadOnly(23);
		}
		public void showCol06Opened()
		{
			super.row.showOpened(23);
		}
		public void setTooltipForCol06(String value)
		{
			super.row.setTooltip(23, value);
		}
		public String getCol06()
		{
			return (String)super.row.get(23);
		}
		public void setCol06(String value)
		{
			super.row.set(23, value);
		}
		public void setCellCol06Tooltip(String value)
		{
			super.row.setTooltip(23, value);
		}
		public void setCol07ReadOnly(boolean value)
		{
			super.row.setReadOnly(24, value);
		}
		public boolean isCol07ReadOnly()
		{
			return super.row.isReadOnly(24);
		}
		public void showCol07Opened()
		{
			super.row.showOpened(24);
		}
		public void setTooltipForCol07(String value)
		{
			super.row.setTooltip(24, value);
		}
		public String getCol07()
		{
			return (String)super.row.get(24);
		}
		public void setCol07(String value)
		{
			super.row.set(24, value);
		}
		public void setCellCol07Tooltip(String value)
		{
			super.row.setTooltip(24, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
		public grdVentilationRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdVentilationRow(super.row.getParent());
		}
		public grdVentilationRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdVentilationRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdVentilationRowCollection collection;
	}
	public static class grdVentilationRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdVentilationRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdVentilationRow get(int index)
		{
			return new grdVentilationRow(super.collection.get(index));
		}
		public grdVentilationRow newRow()
		{
			return new grdVentilationRow(super.collection.newRow());
		}
		public grdVentilationRow newRow(boolean autoSelect)
		{
			return new grdVentilationRow(super.collection.newRow(autoSelect));
		}
		public grdVentilationRow newRowAt(int index)
		{
			return new grdVentilationRow(super.collection.newRowAt(index));
		}
		public grdVentilationRow newRowAt(int index, boolean autoSelect)
		{
			return new grdVentilationRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdVentilationGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdVentilationRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdVentilationRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdVentilationRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdVentilationRow[] result = new GenForm.grdVentilationRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdVentilationRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdVentilationRow[] getAllRows(GenForm.grdVentilationRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdVentilationRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdVentilationRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdVentilationRow[] result = new GenForm.grdVentilationRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdVentilationRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdVentilationRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdVentilationRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdVentilationRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdVentilationRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdVentilationRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdVentilationRowCollection getRows()
		{
			return new grdVentilationRowCollection(super.grid.getRows());
		}
		public grdVentilationRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdVentilationRow(row);
		}
		public void setColVentilationChartHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColVentilationChartHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setCol08HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getCol08HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setCol09HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getCol09HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setCol10HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getCol10HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setCol11HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getCol11HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setCol12HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getCol12HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setCol13HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getCol13HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setCol14HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getCol14HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setCol15HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getCol15HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setCol16HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getCol16HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setCol17HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getCol17HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
		public void setCol18HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(11, value);
		}
		public String getCol18HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(11);
		}
		public void setCol19HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(12, value);
		}
		public String getCol19HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(12);
		}
		public void setCol20HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(13, value);
		}
		public String getCol20HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(13);
		}
		public void setCol21HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(14, value);
		}
		public String getCol21HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(14);
		}
		public void setCol22HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(15, value);
		}
		public String getCol22HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(15);
		}
		public void setCol23HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(16, value);
		}
		public String getCol23HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(16);
		}
		public void setCol24HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(17, value);
		}
		public String getCol24HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(17);
		}
		public void setCol01HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(18, value);
		}
		public String getCol01HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(18);
		}
		public void setCol02HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(19, value);
		}
		public String getCol02HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(19);
		}
		public void setCol03HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(20, value);
		}
		public String getCol03HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(20);
		}
		public void setCol04HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(21, value);
		}
		public String getCol04HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(21);
		}
		public void setCol05HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(22, value);
		}
		public String getCol05HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(22);
		}
		public void setCol06HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(23, value);
		}
		public String getCol06HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(23);
		}
		public void setCol07HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(24, value);
		}
		public String getCol07HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(24);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedVitalSignsVo();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 184, 595, 141, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Select record to update:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "All Records:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, "Updates the current selected record", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 88, 32, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbAllRecordsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAllRecordsTemp);
		cmbAllRecordsComboBox cmbAllRecords = (cmbAllRecordsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAllRecordsComboBox.class, m_cmbAllRecordsTemp);
		super.addComboBox(cmbAllRecords);
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 328, 593, 72, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbRecordToUpdateTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbRecordToUpdateTemp);
		cmbRecordToUpdateComboBox cmbRecordToUpdate = (cmbRecordToUpdateComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRecordToUpdateComboBox.class, m_cmbRecordToUpdateTemp);
		super.addComboBox(cmbRecordToUpdate);

		// Grid Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 520, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdVentilationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdVentilationTemp);
		grdVentilationGrid grdVentilation = (grdVentilationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdVentilationGrid.class, m_grdVentilationTemp);
		grdVentilation.addTreeColumn("HDU Ventilation Chart", 0, 150, false, true);
		grdVentilation.addStringColumn("08.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("09.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("10.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("11.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("12.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("13.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("14.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("15.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("16.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("17.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("18.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("19.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("20.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("21.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("22.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("23.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("24.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("01.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("02.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("03.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("04.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("05.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("06.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdVentilation.addStringColumn("07.00", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdVentilation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(3);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(4);
	}
	public cmbAllRecordsComboBox cmbAllRecords()
	{
		return (cmbAllRecordsComboBox)super.getComboBox(0);
	}
	public cmbRecordToUpdateComboBox cmbRecordToUpdate()
	{
		return (cmbRecordToUpdateComboBox)super.getComboBox(1);
	}
	public grdVentilationGrid grdVentilation()
	{
		return (grdVentilationGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				VitalSignsVentilationChartDialog = new LocalFormName(102146);
			}
			public final FormName VitalSignsVentilationChartDialog;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image NewDisabled;
			public final ims.framework.utils.Image New;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_recordTimes = new ims.framework.ContextVariable("recordTimes", prefix + "_lv_Core.VitalSignsVentilationChart.__internal_x_context__recordTimes_" + componentIdentifier + "");
			cxl_SelectedVitalSignsVo = new ims.framework.ContextVariable("SelectedVitalSignsVo", prefix + "_lv_Core.VitalSignsVentilationChart.__internal_x_context__SelectedVitalSignsVo_" + componentIdentifier + "");
		}
		
		public boolean getrecordTimesIsNotNull()
		{
			return !cxl_recordTimes.getValueIsNull(context);
		}
		public ims.framework.utils.Time getrecordTimes()
		{
			return (ims.framework.utils.Time)cxl_recordTimes.getValue(context);
		}
		public void setrecordTimes(ims.framework.utils.Time value)
		{
			cxl_recordTimes.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_recordTimes = null;
		public boolean getSelectedVitalSignsVoIsNotNull()
		{
			return !cxl_SelectedVitalSignsVo.getValueIsNull(context);
		}
		public ims.core.vo.VitalSignsVo getSelectedVitalSignsVo()
		{
			return (ims.core.vo.VitalSignsVo)cxl_SelectedVitalSignsVo.getValue(context);
		}
		public void setSelectedVitalSignsVo(ims.core.vo.VitalSignsVo value)
		{
			cxl_SelectedVitalSignsVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedVitalSignsVo = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[88];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.VSVentilationChartRecord", "BO-1022100004-ID", "ID_VitalSigns");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.VSVentilationChartRecord", "BO-1022100004-VITALSTAKENDATETIME", "VitalsTakenDateTime");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.VSVentilationChartRecord", "BO-1022100004-ISVENTILATIONCHARTRECORD", "IsVentilationChartRecord");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.VitalSign", "BO-1022100004-ID", "ID_VitalSigns");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.VitalSign", "BO-1022100004-CARECONTEXT", "CareContext");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.VitalSign", "BO-1022100004-ISVENTILATIONCHARTRECORD", "IsVentilationChartRecord");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.VitalSign", "BO-1022100004-VITALSTAKENDATETIME", "VitalsTakenDateTime");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.VitalSign", "BO-1022100004-PATIENTCONSCIOUS", "PatientConscious");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.VitalSign", "BO-1022100004-URINE2MLKGKHR", "Urine2mlkgkhr");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.VitalSign", "BO-1022100004-PATIENTCAUSINGCONCERN", "PatientCausingConcern");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsVentilationChart.__internal_x_context__SelectedVitalSignsVo_" + componentIdentifier, "BO-1022100004-ID", "ID_VitalSigns");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsVentilationChart.__internal_x_context__SelectedVitalSignsVo_" + componentIdentifier, "BO-1022100004-CARECONTEXT", "CareContext");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsVentilationChart.__internal_x_context__SelectedVitalSignsVo_" + componentIdentifier, "BO-1022100004-ISVENTILATIONCHARTRECORD", "IsVentilationChartRecord");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsVentilationChart.__internal_x_context__SelectedVitalSignsVo_" + componentIdentifier, "BO-1022100004-VITALSTAKENDATETIME", "VitalsTakenDateTime");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsVentilationChart.__internal_x_context__SelectedVitalSignsVo_" + componentIdentifier, "BO-1022100004-PATIENTCONSCIOUS", "PatientConscious");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsVentilationChart.__internal_x_context__SelectedVitalSignsVo_" + componentIdentifier, "BO-1022100004-URINE2MLKGKHR", "Urine2mlkgkhr");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsVentilationChart.__internal_x_context__SelectedVitalSignsVo_" + componentIdentifier, "BO-1022100004-PATIENTCAUSINGCONCERN", "PatientCausingConcern");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
