//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 3952.27656)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientdocuments;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.patientdocuments.GenForm.GroupDateEnumeration;
import ims.core.forms.patientdocuments.GenForm.grdDetailsRow;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.DocumentAndPatientWrapperVo;
import ims.core.vo.DocumentAndPatientWrapperVoCollection;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.EpisodeofCareShortVoCollection;
import ims.core.vo.PatientDocumentSearchFilterVo;
import ims.core.vo.PatientDocumentSearchListVo;
import ims.core.vo.PatientDocumentSearchListVoCollection;
import ims.core.vo.PatientForDocumentWorklistVo;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.DocumentStatus;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String NEW_DOCUMENT = "NEW_DOCUMENT_FROM_PATIENT_DOCUMENTS";
	private static final int GENERATED_DATE_COLUMN = 1;
	private static final int AUTHORING_HCP_COLUMN = 3;//WDEV-13534
	private static final String AUTHORING_HCP = "Authoring HCP"; //WDEV-13337
	private static final String SOURCE = "Source";
	
	private static final String COMPLETED = "Completed"; //PDF's created within Maxims, ie edischarges, correspondence, UDA's - WDEV-13414
	private static final String IMPORTED = "Imported"; //any scanned or imported documents - WDEV-13414
	private static final String HISTORICAL = "Historical"; //all documents migrated from clinical care - WDEV-13414
	private static final String DRAFT = "Draft"; //rtf documents generated within maxims correspondence that are in a draft status - WDEV-13414

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlState();	
	}
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
		updateControlState();
	}
	
	@Override
	protected void onGrdDetailsSelectionChanged()
	{
		updateLocalContext();
		updateControlState();
	}

	private void updateLocalContext()
	{
		form.getLocalContext().setSelectedDocument(null);
		if(form.grdDetails().getValue() instanceof PatientDocumentSearchListVo)
		{
			form.getLocalContext().setSelectedDocument(domain.getPatientDocument(form.grdDetails().getValue()));
		}
	}
	
	private void initialize() throws PresentationLogicException
	{
		// WDEV-13492
		// If the patient is different from the one kept in the search criteria then clear search criteria
		if (form.getGlobalContext().Core.getPatientDocumentSearchFilterIsNotNull())
		{
			if (!form.getGlobalContext().Core.getPatientShort().getID_Patient().equals(form.getGlobalContext().Core.getPatientDocumentSearchFilter().getPatient().getID_Patient()))
				form.getGlobalContext().Core.setPatientDocumentSearchFilter(null);
		}
		
		initMosComponents();
		
		if(ConfigFlag.UI.PATIENT_DOCUMENTS_DISPLAY_EPISODEOFCARE_IN_SEARCH_CRITERIA.getValue())//WDEV-13623
		{
			bindEpisodeCombo();
		}
		
		form.grdDetails().setAuthorCaption(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue());//WDEV-13337
		
		form.grdDetails().setDocSourceCaption(ConfigFlag.UI.PATIENT_DOCUMENT_DISPLAY_STATUS_COLUMN.getValue());//WDEV-13414
	}
	
	private void initMosComponents()
	{
		form.ccMos().initialize(MosType.HCP);
		form.ccResponsibleHcp().initialize(MosType.HCP);
	}
	
	private void bindEpisodeCombo() throws PresentationLogicException
	{
		form.cmbEpisodes().clear();
		
		EpisodeofCareShortVoCollection listEpisodesOfCare = domain.listEpisodesOfCare(form.getGlobalContext().Core.getPatientShort());
		
		for (int i = 0 ; listEpisodesOfCare != null && i < listEpisodesOfCare.size() ; i++)
		{
			EpisodeofCareShortVo eoc = listEpisodesOfCare.get(i);
			
			if (eoc != null)
			{
				form.cmbEpisodes().newRow(eoc, getTextForEOC(eoc));
			}
		}
	}
	
	private String getTextForEOC(EpisodeofCareShortVo eoc)
	{
		if (eoc == null)
			return "";
		
		StringBuilder result = new StringBuilder();
		
		result.append(eoc.createDisplayString());
		
		if (eoc.getSpecialtyIsNotNull())
		{
			result.append(" - " + eoc.getSpecialty().getText());
		}
		if (eoc.getResponsibleHCPIsNotNull())
		{
			result.append(" - " + eoc.getResponsibleHCP().getIHcpName());
		}
		
		return result.toString();
	}
	
	private void open()
	{
		form.setMode(FormMode.VIEW);
		clearSearchScreen();
		
		if (form.getGlobalContext().Core.getPatientDocumentSearchFilterIsNotNull())
		{
			populateSearchFilterScreenFromData(form.getGlobalContext().Core.getPatientDocumentSearchFilter());
			
		}
		
		if (validateSearchCriteria(false))
		{
			populatePatientDocumentsGrid(listPatientDocumentsAndDisplayNoResultError());
		}
		
		updateControlState();
	}
	
	private void updateControlState() 
	{
		//WDEV-12643
		
		boolean isDocumentFinal = form.getLocalContext().getSelectedDocumentIsNotNull() 
									&& !(form.getLocalContext().getSelectedDocument().getCurrentDocumentStatusIsNotNull() 
										&& (DocumentStatus.DRAFT.equals(form.getLocalContext().getSelectedDocument().getCurrentDocumentStatus().getCorrespondenceStatus()) 
										|| DocumentStatus.FOR_REVIEW.equals(form.getLocalContext().getSelectedDocument().getCurrentDocumentStatus().getCorrespondenceStatus()) 
										|| DocumentStatus.FOR_UPDATE.equals(form.getLocalContext().getSelectedDocument().getCurrentDocumentStatus().getCorrespondenceStatus())));
		
		form.getContextMenus().Core.getPatientDocumentsMenuNEW_DOCUMENTItem().setVisible(true);
		form.getContextMenus().Core.getPatientDocumentsMenuVIEWItem().setVisible(isDocumentFinal);	//	WDEV-12723
		form.getContextMenus().Core.getPatientDocumentsMenuPRINTItem().setVisible(isDocumentFinal);	//	WDEV-12723
		
		form.cmbEpisodes().setVisible(ConfigFlag.UI.PATIENT_DOCUMENTS_DISPLAY_EPISODEOFCARE_IN_SEARCH_CRITERIA.getValue());	//WDEV-12724
		form.lblEC().setVisible(ConfigFlag.UI.PATIENT_DOCUMENTS_DISPLAY_EPISODEOFCARE_IN_SEARCH_CRITERIA.getValue()); //WDEV-12724
	}

	private void populateSearchFilterScreenFromData(PatientDocumentSearchFilterVo searchFilter)
	{
		clearSearchScreen();
		
		if (searchFilter == null)
			return;
		
		if (searchFilter.getEpisodeOfCareIsNotNull())
		{
			form.cmbEpisodes().setValue(searchFilter.getEpisodeOfCare());
		}
		
		form.cmbSpecialty().setValue(searchFilter.getSpeciality());
		form.ccMos().setValue(searchFilter.getAuthoringHCP());
		form.dteFrom().setValue(searchFilter.getDateFrom());
		form.dteTo().setValue(searchFilter.getDateTo());
		form.cmbDocType().setValue(searchFilter.getCategory());
		form.ccResponsibleHcp().setValue(searchFilter.getResponsibleHcp());
		
		if(searchFilter.getUseGeneratedInsteadOfEventIsNotNull() && searchFilter.getUseGeneratedInsteadOfEvent().booleanValue())
		{
			form.GroupDate().setValue(GroupDateEnumeration.rdoGenerated);
		}
	}
	
	private void clearSearchScreen()
	{
		form.cmbEpisodes().setValue(null);
		form.cmbSpecialty().setValue(null);
		form.ccMos().clear();
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.cmbDocType().setValue(null);
		form.ccResponsibleHcp().setValue(null);
		form.GroupDate().setValue(GroupDateEnumeration.rdoEvent);
	}
	
	private boolean validateSearchCriteria(boolean showErrors)
	{
		ArrayList<String> uiErrors = new ArrayList<String>();
		
		Date dateFrom = form.dteFrom().getValue();
		Date dateTo = form.dteTo().getValue();
		
		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			uiErrors.add("Date from can not be greater than date to");
		}
		
		if (uiErrors.size() > 0)
		{
			if (showErrors)
				engine.showErrors(uiErrors.toArray(new String[uiErrors.size()]));
			return false;
		}
		
		return true;
	}
	
	private PatientDocumentSearchListVoCollection listPatientDocumentsAndDisplayNoResultError()
	{
		PatientDocumentSearchListVoCollection patDocs = domain.listPatientDocuments(
					form.getGlobalContext().Core.getPatientShort(),form.cmbEpisodes().getValue(), 
					form.cmbSpecialty().getValue(),  form.ccMos().getValue() instanceof HcpRefVo ? (HcpRefVo) form.ccMos().getValue() : null, 
					form.dteFrom().getValue(), form.dteTo().getValue(), 
					form.cmbDocType().getValue(), form.ccResponsibleHcp().getValue() instanceof HcpRefVo ? (HcpRefVo) form.ccResponsibleHcp().getValue() : null,GroupDateEnumeration.rdoGenerated.equals(form.GroupDate().getValue())?true:null);
	
		if (patDocs == null || patDocs.size() == 0)
		{
			engine.showMessage("No documents matching your search criteria were found !", "No results",MessageButtons.OK, MessageIcon.INFORMATION);
			return null;
		}
		
		return patDocs;
	}
	
	private void populatePatientDocumentsGrid(PatientDocumentSearchListVoCollection listPatientDocuments)
	{
		form.grdDetails().getRows().clear();
		
		if(listPatientDocuments == null)
			return;
		
		for (int i = 0 ; i < listPatientDocuments.size() ; i++)
		{
			newPatDocRow(listPatientDocuments.get(i));	
		}
	}
	
	private void newPatDocRow(PatientDocumentSearchListVo patientDocument)
	{
		if (patientDocument == null)
			return;
		
		grdDetailsRow newRow = form.grdDetails().getRows().newRow();
		newRow.setValue(patientDocument);
		newRow.setDate(patientDocument.getDocumentDate());
		newRow.setSpecialty(patientDocument.getSpecialtyIsNotNull() ? patientDocument.getSpecialty().getText() : null);
		newRow.setAuthor(AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) ? patientDocument.getAuthoringHCP() : patientDocument.getResponsibleHCP());//WDEV-13337
		newRow.setGeneratedDate(patientDocument.getRecordingDateTimeIsNotNull()?patientDocument.getRecordingDateTime().toString():null);
		newRow.setDocType(patientDocument.getCategoryIsNotNull() ? patientDocument.getCategory().getText() : null);
		newRow.setDocSource(SOURCE.equals(ConfigFlag.UI.PATIENT_DOCUMENT_DISPLAY_STATUS_COLUMN.getValue()) ? (patientDocument.getCreationTypeIsNotNull() ? patientDocument.getCreationType().getIItemText() : null) : getStatus(patientDocument));//WDEV-13414
		
		//WDEV-12723
		if(patientDocument.getCurrentDocumentStatusIsNotNull() 
			&& (DocumentStatus.DRAFT.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus()) 
				|| DocumentStatus.FOR_REVIEW.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus()) 
				|| DocumentStatus.FOR_UPDATE.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus())))
		{
			newRow.setTextColor(Color.Gray);
		}
	}

	//WDEV-13414
	private String getStatus(PatientDocumentSearchListVo patientDocument) 
	{
		if(patientDocument == null)
			return null;
		
		if(DocumentCreationType.IMPORTED.equals(patientDocument.getCreationType()) || DocumentCreationType.SCANNED.equals(patientDocument.getCreationType()))
			return IMPORTED;
		
		if(DocumentCategory.HISTORICAL.equals(patientDocument.getCategory()))
			return HISTORICAL;
		
		if(patientDocument.getCurrentDocumentStatusIsNotNull())
		{
			if(DocumentStatus.DRAFT.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus())
				|| DocumentStatus.FOR_REVIEW.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus())
				||DocumentStatus.FOR_UPDATE.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus()))
			{
				return DRAFT;
			}
		}
			
		return COMPLETED;
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			//WDEV-12643
			case GenForm.ContextMenus.CoreNamespace.PatientDocumentsMenu.NEW_DOCUMENT:
				newDocument();
			break;
			
			case GenForm.ContextMenus.CoreNamespace.PatientDocumentsMenu.VIEW:
				viewDocument();
			break;
			
			case GenForm.ContextMenus.CoreNamespace.PatientDocumentsMenu.PRINT:
				printDocument();
			break;
		}
	}

	//WDEV-12643
	private void newDocument() 
	{
		engine.open(form.getForms().Core.DocumentWorklist, new Object[] {NEW_DOCUMENT});
	}

	private void printDocument() 
	{
		DocumentAndPatientWrapperVoCollection documents = new DocumentAndPatientWrapperVoCollection();
		
		DocumentAndPatientWrapperVo record = new DocumentAndPatientWrapperVo();
		record.setDocument(form.getLocalContext().getSelectedDocument());
		
		PatientForDocumentWorklistVo patient = new PatientForDocumentWorklistVo(form.getGlobalContext().Core.getPatientShort().getID_Patient(), form.getGlobalContext().Core.getPatientShort().getVersion_Patient());
		patient.setName(form.getGlobalContext().Core.getPatientShort().getName());
		patient.setIdentifiers(form.getGlobalContext().Core.getPatientShort().getIdentifiers());
		record.setPatient(patient);
		
		documents.add(record);

		engine.open(form.getForms().Core.MultiPrintDialog, new Object[] {documents});
	}

	private void viewDocument() 
	{
		if(form.getLocalContext().getSelectedDocumentIsNotNull())
		{
			ServerDocumentVo document = form.getLocalContext().getSelectedDocument().getServerDocument();
			if(document != null)
			{
				String fullPath = getFullPath(document);
				engine.open(form.getForms().Core.PatientDocumentView, new Object[] {fullPath.replace("/", "\\")});
				
			}
		}
	}
	
	private String getFullPath(ServerDocumentVo document)
	{
		return getMaximsDocumentStorePath() + document.getFileName();	//WDEV-13366
	}
	
	//WDEV-13366
	private String getMaximsDocumentStorePath()
	{
		String storePath = ConfigFlag.GEN.FILE_SERVER_URL.getValue();
		
		if(!storePath.endsWith("/"))
			storePath = storePath + "/";
				
		return storePath;
	}
	
	private void clearScreen()
	{
		form.getGlobalContext().Core.setPatientDocumentSearchFilter(null);
		form.grdDetails().getRows().clear();
		form.getLocalContext().setSelectedDocument(null);
		clearSearchScreen();
	}
	
	private void search() 
	{
		form.grdDetails().getRows().clear();//	WDEV-13636
		
		if (validateSearchCriteria(true))
		{
			saveSearchFilter();
			populatePatientDocumentsGrid(listPatientDocumentsAndDisplayNoResultError());
			updateLocalContext();
		}
	}
	
	private void saveSearchFilter()
	{
		form.getGlobalContext().Core.setPatientDocumentSearchFilter(populateSearchFilterDataFromScreen());
	}
	
	private PatientDocumentSearchFilterVo populateSearchFilterDataFromScreen()
	{
		PatientDocumentSearchFilterVo searchFilter = new PatientDocumentSearchFilterVo();
		searchFilter.setPatient(form.getGlobalContext().Core.getPatientShort());				// WDEV-13492
		searchFilter.setEpisodeOfCare(form.cmbEpisodes().getValue());
		searchFilter.setSpeciality(form.cmbSpecialty().getValue());
		searchFilter.setAuthoringHCP(form.ccMos().getValue());
		searchFilter.setDateFrom(form.dteFrom().getValue());
		searchFilter.setDateTo(form.dteTo().getValue());
		searchFilter.setCategory(form.cmbDocType().getValue());
		searchFilter.setResponsibleHcp(form.ccResponsibleHcp().getValue());
		searchFilter.setUseGeneratedInsteadOfEvent(GroupDateEnumeration.rdoGenerated.equals(form.GroupDate().getValue())?true:null);
		
		return searchFilter;
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(form.getForms().Core.MultiPrintDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if(form.getGlobalContext().Core.getPatientDocumentsErrorsIsNotNull() && form.getGlobalContext().Core.getPatientDocumentsErrors().size() > 0)
			{
				form.getGlobalContext().Core.setPatientDocumentsErrors(null);
				engine.showErrors(new String[] {"The document could not be printed."});
			}
		}
	}

	@Override
	protected void onGrdDetailsGridHeaderClicked(int column) throws PresentationLogicException
	{
		PatientDocumentSearchListVo back = form.grdDetails().getValue();
		PatientDocumentSearchListVoCollection values = form.grdDetails().getValues();
		
		form.grdDetails().getRows().clear();
		switch (column)
		{
			case GENERATED_DATE_COLUMN:
				form.getLocalContext().setGeneratedDateSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getGeneratedDateSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new PatientDocGeneratedDateComparator(form.getLocalContext().getGeneratedDateSortOrder()));
			break;

			//WDEV-13534
			case AUTHORING_HCP_COLUMN:
				form.getLocalContext().setAuthoringSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getAuthoringSortOrder()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new PatientDocAuthoringComparator(form.getLocalContext().getAuthoringSortOrder()));
			break;
			
			default:
			break;
		}
		
		populatePatientDocumentsGrid(values);
		form.grdDetails().setValue(back);
	}
	
	class PatientDocGeneratedDateComparator implements Comparator<PatientDocumentSearchListVo>
	{
		private int order =1;
		public PatientDocGeneratedDateComparator()
		{
			order = 1;
		}
		public PatientDocGeneratedDateComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}
		public int compare(PatientDocumentSearchListVo o1, PatientDocumentSearchListVo o2)
		{
			if (o1 != null && o1.getRecordingDateTimeIsNotNull() && o2!=null && o2.getRecordingDateTimeIsNotNull())
			{
				return order*o1.getRecordingDateTime().compareTo(o2.getRecordingDateTime());
			}
			if (o1 == null || !o1.getRecordingDateTimeIsNotNull())
				return -1*order;
			if (o2 == null || !o2.getRecordingDateTimeIsNotNull())
				return order;
			
			return 0;
		}	
	}
	
	//WDEV-13534
	class PatientDocAuthoringComparator implements Comparator<PatientDocumentSearchListVo>
	{
		private int order = 1;
		public PatientDocAuthoringComparator()
		{
			order = 1;
		}
		public PatientDocAuthoringComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		public int compare(PatientDocumentSearchListVo o1, PatientDocumentSearchListVo o2)
		{
			if (AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()))
			{
				if(o1 != null && o1.getAuthoringHCPIsNotNull() && o2 != null && o2.getAuthoringHCPIsNotNull())
					return order*o1.getAuthoringHCP().compareTo(o2.getAuthoringHCP());
			}
			else if(!AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()))
			{
				if(o1 != null && o1.getResponsibleHCPIsNotNull() && o2 != null && o2.getResponsibleHCPIsNotNull())
					return order*o1.getResponsibleHCP().compareTo(o2.getResponsibleHCP());
			}
			
			if (o1 == null || (AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o1.getAuthoringHCPIsNotNull()) || (!AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o1.getResponsibleHCPIsNotNull()))
				return -1 * order;
			
			if (o2 == null || (AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o2.getAuthoringHCPIsNotNull()) || (!AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o2.getResponsibleHCPIsNotNull()))
				return order;
			
			return 0;
		}	
	}
}
