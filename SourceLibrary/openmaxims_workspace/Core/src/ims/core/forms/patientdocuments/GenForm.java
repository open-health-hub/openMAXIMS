//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.patientdocuments;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbDocTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.DocumentCategory value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.DocumentCategory getValue()
		{
			return (ims.core.vo.lookups.DocumentCategory)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.DocumentCategory value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbEpisodesComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.EpisodeofCareShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.EpisodeofCareShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.EpisodeofCareShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.EpisodeofCareShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.EpisodeofCareShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.EpisodeofCareShortVo getValue()
		{
			return (ims.core.vo.EpisodeofCareShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.EpisodeofCareShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showDateOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Date getDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setGeneratedDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isGeneratedDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showGeneratedDateOpened()
		{
			super.row.showOpened(1);
		}
		public String getGeneratedDate()
		{
			return (String)super.row.get(1);
		}
		public void setGeneratedDate(String value)
		{
			super.row.set(1, value);
		}
		public void setCellGeneratedDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setSpecialtyReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isSpecialtyReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showSpecialtyOpened()
		{
			super.row.showOpened(2);
		}
		public String getSpecialty()
		{
			return (String)super.row.get(2);
		}
		public void setSpecialty(String value)
		{
			super.row.set(2, value);
		}
		public void setCellSpecialtyTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setAuthorReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isAuthorReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showAuthorOpened()
		{
			super.row.showOpened(3);
		}
		public ims.core.vo.HcpLiteVo getAuthor()
		{
			return (ims.core.vo.HcpLiteVo)super.row.get(3);
		}
		public void setAuthor(ims.core.vo.HcpLiteVo value)
		{
			super.row.set(3, value);
		}
		public void setCellAuthorTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setDocTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isDocTypeReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showDocTypeOpened()
		{
			super.row.showOpened(4);
		}
		public String getDocType()
		{
			return (String)super.row.get(4);
		}
		public void setDocType(String value)
		{
			super.row.set(4, value);
		}
		public void setCellDocTypeTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setDocSourceReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isDocSourceReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showDocSourceOpened()
		{
			super.row.showOpened(5);
		}
		public String getDocSource()
		{
			return (String)super.row.get(5);
		}
		public void setDocSource(String value)
		{
			super.row.set(5, value);
		}
		public void setCellDocSourceTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.core.vo.PatientDocumentSearchListVo getValue()
		{
			return (ims.core.vo.PatientDocumentSearchListVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientDocumentSearchListVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDetailsRow get(int index)
		{
			return new grdDetailsRow(super.collection.get(index));
		}
		public grdDetailsRow newRow()
		{
			return new grdDetailsRow(super.collection.newRow());
		}
		public grdDetailsRow newRow(boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRow(autoSelect));
		}
		public grdDetailsRow newRowAt(int index)
		{
			return new grdDetailsRow(super.collection.newRowAt(index));
		}
		public grdDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public void setAuthorCaption(String value)
		{
			this.grid.setColumnCaption(3, value);
		}
		public void setDocSourceCaption(String value)
		{
			this.grid.setColumnCaption(5, value);
		}
		public ims.core.vo.PatientDocumentSearchListVoCollection getValues()
		{
			ims.core.vo.PatientDocumentSearchListVoCollection listOfValues = new ims.core.vo.PatientDocumentSearchListVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientDocumentSearchListVo getValue()
		{
			return (ims.core.vo.PatientDocumentSearchListVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientDocumentSearchListVo value)
		{
			super.grid.setValue(value);
		}
		public grdDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDetailsRowCollection getRows()
		{
			return new grdDetailsRowCollection(super.grid.getRows());
		}
		public grdDetailsRow getRowByValue(ims.core.vo.PatientDocumentSearchListVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDetailsRow(row);
		}
		public void setDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setGeneratedDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getGeneratedDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setSpecialtyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getSpecialtyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setAuthorHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getAuthorHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setDocTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getDocTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setDocSourceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getDocSourceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}

	public static class GroupDateRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 640, 90, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Generated Date", startTabIndex.intValue() + 2010);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 640, 66, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Event Date", startTabIndex.intValue() + 2009);
		}
		public void setText(GroupDateEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupDateEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupDateEnumeration.None;
				case 0: return GroupDateEnumeration.rdoGenerated;
				case 1: return GroupDateEnumeration.rdoEvent;
			}
			return null;
		}
		public void setValue(GroupDateEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupDateEnumeration.None.id);
		}
		public boolean isEnabled(GroupDateEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupDateEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupDateEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupDateEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupDateEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupDateEnumeration None = new GroupDateEnumeration(-1);
		public static GroupDateEnumeration rdoGenerated = new GroupDateEnumeration(0);
		public static GroupDateEnumeration rdoEvent = new GroupDateEnumeration(1);
		private GroupDateEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupDateEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientDocumentSearchFilterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientDocumentSearchFilterVo' of the global context variable 'Core.PatientDocumentSearchFilter' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(115);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Core.contextMenuPatientDocumentsMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Core.contextMenuPatientDocumentsMenuVIEWItem = factory.createMenuItem(startControlID.intValue() + 1, "View Document", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3690001)))
			contextMenus.Core.contextMenuPatientDocumentsMenu.add(contextMenus.Core.contextMenuPatientDocumentsMenuVIEWItem);
		contextMenus.Core.contextMenuPatientDocumentsMenuPRINTItem = factory.createMenuItem(startControlID.intValue() + 2, "Print Document", true, false, new Integer(102556), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3690002)))
			contextMenus.Core.contextMenuPatientDocumentsMenu.add(contextMenus.Core.contextMenuPatientDocumentsMenuPRINTItem);
		contextMenus.Core.contextMenuPatientDocumentsMenuNEW_DOCUMENTItem = factory.createMenuItem(startControlID.intValue() + 3, "New Document", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3690003)))
			contextMenus.Core.contextMenuPatientDocumentsMenu.add(contextMenus.Core.contextMenuPatientDocumentsMenuNEW_DOCUMENTItem);
		form.registerMenu(contextMenus.Core.contextMenuPatientDocumentsMenu);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 106, 40, 326, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccResponsibleHcpForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 1003, skipContextValidation);
		//ims.framework.Control m_ccResponsibleHcpControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(106), new Integer(40), new Integer(326), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1003), m_ccResponsibleHcpForm, instance1 } );
		ims.framework.Control m_ccResponsibleHcpControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1003), m_ccResponsibleHcpForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccResponsibleHcpControl);
		Menu[] menus1 = m_ccResponsibleHcpForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 106, 16, 326, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccMosForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper4.getSize(), instance2, startTabIndex.intValue() + 2, skipContextValidation);
		//ims.framework.Control m_ccMosControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(106), new Integer(16), new Integer(326), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2), m_ccMosForm, instance2 } );
		ims.framework.Control m_ccMosControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2), m_ccMosForm, instance2, Boolean.FALSE } );
		super.addControl(m_ccMosControl);
		Menu[] menus2 = m_ccMosForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 425, 42, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Document Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 425, 18, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Specialty:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 425, 66, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 66, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Episode of Care:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 425, 90, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date To:", new Integer(1), null, new Integer(0)}));

		// Date Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 536, 64, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 2007), ControlState.ENABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 536, 88, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2008), ControlState.ENABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 536, 16, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 2005), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSpecialtyTemp);
		cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
		super.addComboBox(cmbSpecialty);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 536, 40, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbDocTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 2006), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDocTypeTemp);
		cmbDocTypeComboBox cmbDocType = (cmbDocTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDocTypeComboBox.class, m_cmbDocTypeTemp);
		super.addComboBox(cmbDocType);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 106, 64, 310, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbEpisodesTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2004), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbEpisodesTemp);
		cmbEpisodesComboBox cmbEpisodes = (cmbEpisodesComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEpisodesComboBox.class, m_cmbEpisodesTemp);
		super.addComboBox(cmbEpisodes);

		// Grid Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 832, 496, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2016), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuPatientDocumentsMenu, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdDetailsTemp);
		grdDetailsGrid grdDetails = (grdDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDetailsGrid.class, m_grdDetailsTemp);
		grdDetails.addDateColumn("Event Date", 0, 0, 90, true, true, null, false, 1, true);
		grdDetails.addStringColumn("Generated Date", 0, 0, 120, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Specialty", 0, 0, 160, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Authoring Hcp", 0, 0, 220, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Document Type", 0, 0, 160, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Source", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDetails);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 808, 16, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 2014), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 776, 16, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 2012), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupDate = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE});
		super.addControl(tmpGroupDate);
		GroupDateRadioButton GroupDate = (GroupDateRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupDateRadioButton.class, tmpGroupDate);
		GroupDate.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupDate);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccResponsibleHcp()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccResponsibleHcpValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccResponsibleHcpVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccResponsibleHcpVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccResponsibleHcpEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccResponsibleHcpEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent ccMos()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccMosValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccMosVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccMosVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccMosEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccMosEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public Label lblEC()
	{
		return (Label)super.getControl(7);
	}
	public DateControl dteFrom()
	{
		return (DateControl)super.getControl(9);
	}
	public DateControl dteTo()
	{
		return (DateControl)super.getControl(10);
	}
	public cmbSpecialtyComboBox cmbSpecialty()
	{
		return (cmbSpecialtyComboBox)super.getComboBox(0);
	}
	public cmbDocTypeComboBox cmbDocType()
	{
		return (cmbDocTypeComboBox)super.getComboBox(1);
	}
	public cmbEpisodesComboBox cmbEpisodes()
	{
		return (cmbEpisodesComboBox)super.getComboBox(2);
	}
	public grdDetailsGrid grdDetails()
	{
		return (grdDetailsGrid)super.getGrid(0);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(15);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(16);
	}
	public GroupDateRadioButton GroupDate()
	{
		return (GroupDateRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				PatientDocumentView = new LocalFormName(102335);
				MultiPrintDialog = new LocalFormName(102141);
				DocumentWorklist = new LocalFormName(102280);
			}
			public final FormName PatientDocumentView;
			public final FormName MultiPrintDialog;
			public final FormName DocumentWorklist;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedDocument = new ims.framework.ContextVariable("SelectedDocument", prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier + "");
			cxl_GeneratedDateSortOrder = new ims.framework.ContextVariable("GeneratedDateSortOrder", prefix + "_lv_Core.PatientDocuments.__internal_x_context__GeneratedDateSortOrder_" + componentIdentifier + "");
			cxl_AuthoringSortOrder = new ims.framework.ContextVariable("AuthoringSortOrder", prefix + "_lv_Core.PatientDocuments.__internal_x_context__AuthoringSortOrder_" + componentIdentifier + "");
		}
		
		public boolean getSelectedDocumentIsNotNull()
		{
			return !cxl_SelectedDocument.getValueIsNull(context);
		}
		public ims.core.vo.PatientDocumentVo getSelectedDocument()
		{
			return (ims.core.vo.PatientDocumentVo)cxl_SelectedDocument.getValue(context);
		}
		public void setSelectedDocument(ims.core.vo.PatientDocumentVo value)
		{
			cxl_SelectedDocument.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedDocument = null;
		public boolean getGeneratedDateSortOrderIsNotNull()
		{
			return !cxl_GeneratedDateSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getGeneratedDateSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_GeneratedDateSortOrder.getValue(context);
		}
		public void setGeneratedDateSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_GeneratedDateSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GeneratedDateSortOrder = null;
		public boolean getAuthoringSortOrderIsNotNull()
		{
			return !cxl_AuthoringSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getAuthoringSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_AuthoringSortOrder.getValue(context);
		}
		public void setAuthoringSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_AuthoringSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AuthoringSortOrder = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CoreNamespace Core = new CoreNamespace();
		public final class CoreNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class PatientDocumentsMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int VIEW = 1;
				public static final int PRINT = 2;
				public static final int NEW_DOCUMENT = 3;
			}
			public void disableAllPatientDocumentsMenuMenuItems()
			{
				this.contextMenuPatientDocumentsMenuVIEWItem.setEnabled(false);
				this.contextMenuPatientDocumentsMenuPRINTItem.setEnabled(false);
				this.contextMenuPatientDocumentsMenuNEW_DOCUMENTItem.setEnabled(false);
			}
			public void hideAllPatientDocumentsMenuMenuItems()
			{
				this.contextMenuPatientDocumentsMenuVIEWItem.setVisible(false);
				this.contextMenuPatientDocumentsMenuPRINTItem.setVisible(false);
				this.contextMenuPatientDocumentsMenuNEW_DOCUMENTItem.setVisible(false);
			}
			private Menu contextMenuPatientDocumentsMenu;
			public ReadOnlyMenuItem getPatientDocumentsMenuVIEWItem()
			{
				return this.contextMenuPatientDocumentsMenuVIEWItem;
			}
			private MenuItem contextMenuPatientDocumentsMenuVIEWItem;
			public ReadOnlyMenuItem getPatientDocumentsMenuPRINTItem()
			{
				return this.contextMenuPatientDocumentsMenuPRINTItem;
			}
			private MenuItem contextMenuPatientDocumentsMenuPRINTItem;
			public ReadOnlyMenuItem getPatientDocumentsMenuNEW_DOCUMENTItem()
			{
				return this.contextMenuPatientDocumentsMenuNEW_DOCUMENTItem;
			}
			private MenuItem contextMenuPatientDocumentsMenuNEW_DOCUMENTItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[127];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-ID", "ID_PatientDocument");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-PATIENT", "Patient");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-EPISODEOFCARE", "EpisodeofCare");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CLINICALCONTACT", "ClinicalContact");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-REFERRAL", "Referral");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-NAME", "Name");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CREATIONTYPE", "CreationType");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CATEGORY", "Category");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-STATUS", "Status");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-RECORDINGUSER", "RecordingUser");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-RECORDINGDATETIME", "RecordingDateTime");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-AUTHORINGHCP", "AuthoringHCP");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-SPECIALTY", "Specialty");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CORRESPONDENCESTATUS", "CorrespondenceStatus");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-DOCUMENTDATE", "DocumentDate");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CLINIC", "Clinic");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-ISLOCKEDFOREDITING", "IsLockedForEditing");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-LOCKEDBYUSER", "LockedByUser");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-LOCKEDONDATETIME", "LockedOnDateTime");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-NOOFCOPIES", "NoOfCopies");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-HISTORICALFILENAME", "HistoricalFileName");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-HISTORICDOCID", "HistoricDocId");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-WASPRINTED", "WasPrinted");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-EMAILSTATUS", "EmailStatus");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-COPYPATIENTONCORRESPONDENCE", "CopyPatientOnCorrespondence");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-ID", "ID_PatientDocument");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-PATIENT", "Patient");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-EPISODEOFCARE", "EpisodeofCare");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CARECONTEXT", "CareContext");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CLINICALCONTACT", "ClinicalContact");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-REFERRAL", "Referral");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-NAME", "Name");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CREATIONTYPE", "CreationType");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CATEGORY", "Category");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-STATUS", "Status");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-RECORDINGUSER", "RecordingUser");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-RECORDINGDATETIME", "RecordingDateTime");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-AUTHORINGHCP", "AuthoringHCP");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-SPECIALTY", "Specialty");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CORRESPONDENCESTATUS", "CorrespondenceStatus");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-DOCUMENTDATE", "DocumentDate");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CLINIC", "Clinic");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-ISLOCKEDFOREDITING", "IsLockedForEditing");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-LOCKEDBYUSER", "LockedByUser");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-LOCKEDONDATETIME", "LockedOnDateTime");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-NOOFCOPIES", "NoOfCopies");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-HISTORICALFILENAME", "HistoricalFileName");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-HISTORICDOCID", "HistoricDocId");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-WASPRINTED", "WasPrinted");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-EMAILSTATUS", "EmailStatus");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientDocuments.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-COPYPATIENTONCORRESPONDENCE", "CopyPatientOnCorrespondence");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
