//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.39 build 2173.29356)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.questionselectnew;

import java.util.ArrayList;

import ims.admin.vo.lookups.GenderSpecific;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.questionselectnew.GenForm.lyrTabsLayer.tabListQuestionsContainer.grdListQuestionsRow;
import ims.core.forms.questionselectnew.GenForm.lyrTabsLayer.tabSearchQuestionContainer.GroupFilterEnumeration;
import ims.core.forms.questionselectnew.GenForm.lyrTabsLayer.tabSearchQuestionContainer.GroupTextEnumeration;
import ims.core.forms.questionselectnew.GenForm.lyrTabsLayer.tabSearchQuestionContainer.grdAvailableRow;
import ims.core.forms.questionselectnew.GenForm.lyrTabsLayer.tabSearchQuestionContainer.grdSelectedRow;
import ims.core.vo.AnswerOptionVo;
import ims.core.vo.AnswerOptionVoCollection;
import ims.core.vo.AssessmentQuestionVo;
import ims.core.vo.AssessmentQuestionVoCollection;
import ims.core.vo.KeywordVoCollection;
import ims.core.vo.QuestionAnswerTypeVo;
import ims.core.vo.QuestionAnswerTypeVoCollection;
import ims.core.vo.QuestionInformationShortVo;
import ims.core.vo.QuestionInformationShortVoCollection;
import ims.core.vo.QuestionInformationVo;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.core.vo.lookups.QuestionAnswerType;
import ims.core.vo.lookups.QuestionClassification;
import ims.core.vo.lookups.QuestionClassificationCollection;
import ims.core.vo.lookups.QuestionType;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.TreeNode;
import ims.framework.controls.TreeNodeCollection;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.IntRange;
import ims.utils.textile.Textile;
import ims.vo.LookupInstVo;
public class Logic extends BaseLogic
{
	private static final String	VIEW_QUESTION	= "View Question";
	private static final String	EDIT_QUESTION	= "Edit Question";
	private static final String	ADD_QUESTION	= "Add Question";
	private static final String	CLONE_QUESTION	= "Clone Question";
	private final static String	CR				= "\n";
	private final static String	COLANSWERTYPE	= "0";	// the value represent
														// also the 1 sindex
	private final static String	COLSCORANSWER	= "1";	// the value represent
														// also the column index
	
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{		
		open();
	}
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.QuestionAnswerType) && result.equals(DialogResult.OK))
		{
			QuestionAnswerTypeVo voAnswType = form.getGlobalContext().Core.getQuestionAnswerType();
			if (voAnswType != null)
			{
				DynamicGridRow row = null;
				if(voAnswType.getID_QuestionAnswerTypeIsNotNull())
					row = getDynamicRowByValue(voAnswType);
				else if (form.getLocalContext().getIsNewAnwerTypeIsNotNull())
					if (form.getLocalContext().getIsNewAnwerType())
						row = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().newRow();
					else 
						row = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getSelectedRow();
						
				createDynamicGridRow(voAnswType, row);				
				setDefaultDynamicGridCheckBox(voAnswType, true);
				enableContextMenu();
			}
		}		
		else if( formName.equals(form.getForms().Core.YesNoDialog) && result.equals(DialogResult.YES))
		{
			save(false);
		}
	}

	protected void onlyrTabsTabChanged(LayerBridge tab)
	{
		enableContextMenu();
	}

	protected void onRadioButtonGroupFilterValueChanged() throws PresentationLogicException
	{
		enableCmbClassification();
	}

	protected void onImbClearListClick() throws PresentationLogicException
	{
		enableTabNewQuestion(false);
		clearSearchListCriteria();
		enableContextMenu();
	}

	protected void onImbListClick() throws PresentationLogicException
	{
		search();
	}

	protected void onGrdAvailableSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		enableContextMenu();
	}
	
	protected void onGrdListQuestionsSelectionChanged() throws PresentationLogicException
	{
		enableContextMenu();
		
	}

	protected void onGrdKeywordsSelectionChanged() throws PresentationLogicException
	{
		enableContextMenu();
	}

	protected void onChkIsQuestionValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().chkIsQuestion().getValue() == false)
		{
			form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().clear();
		}
		enableContextMenu();
	}

	protected void onGrdTaxonomySelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		enableContextMenu();
	}

	protected void onGrdAnswerTypeSelectionChanged()
	{
		enableContextMenu();
	}

	protected void onDyngrdAnswerTypesRowSelectionChanged(DynamicGridRow row)
	{
		enableContextMenu();
	}

	protected void onDyngrdAnswerTypesCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getType().equals(DynamicCellType.BOOL))
		{
			Object cellVal = cell.getValue();
			if (cellVal instanceof Boolean)
			{
				if (((Boolean) cellVal).booleanValue())
				{
					// Clear the checkboxes except the selected one
					for (int i = 0; i < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().size(); i++)
					{
						DynamicGridRow row = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().get(i);
						for (int j = 0; j < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().size(); j++)
						{
							DynamicGridCell cellParent = row.getCells().get(form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().get(j));
							if (cellParent != null && cellParent.getType() == DynamicCellType.BOOL && cellParent.equals(cell) == false)
							{
								cellParent.setValue(new Boolean(false));
							}
						}
					}
				}
			}
		}
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.lyrTabs().tabNewQuestion().setCaption(EDIT_QUESTION);
		form.setMode(FormMode.EDIT);
	}

	protected void onImbPreviewUrlClick() throws PresentationLogicException
	{
		engine.openUrl(form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().txtURL().getValue());		
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		save();
	}

	private void open() throws FormOpenException
	{
		form.lyrTabs().tabSearchQuestion().GroupText().setValue(GroupTextEnumeration.rdoShortText);
		clearContext();
		setContextMenu();
		enableContextMenu();
		loadClassificationTree();
		loadCombos();
		initializeTaxonomyComponent();
		initialiseScreen();
	}

	private void initializeTaxonomyComponent() 
	{
		form.lyrTabs().tabNewQuestion().lyrDetails().tabTaxonomy().customTaxonomy().initialize();
	}
	
	private void save()
	{
		save(true);
	}
	private void save(boolean checkActiveAnswerType)
	{
		if(isDialog())
		{
			if (isScoringAssessmentQuestion())
			{
				if (doSaveAssessmentQuestion())
					closeDialog(DialogResult.OK);
			}
			else
			{
				if(checkActiveAnswerType && isAtLeastOneActive() == false)
					return;
				
				if(isPrimaryQuestion())
				{
					if(isUserAssessmentQuestion())
					{
						if (doSave() == false)
							return;
						
						if(isAssessmentEditMode())
						{
							closeDialog(DialogResult.OK);
							//switchToSearchTab();
						}
						else
						{
							setSavedQuestion();
							switchToSearchTab();								
						}
					}
					else if(isCategoryQuestion() || isServiceQuestions())
					{
						if (doSave() == false)
							return;
		 				//WDEV-3332
						if(isQuestionPreactive() == false)
							setSavedQuestion();
						
						switchToSearchTab();								
					}
					else if(isGraphicAssessmentQuestion() && isPrimaryQuestion())
					{
						//WDEV-2308
						if (doSave() == false)
							return;
						if(isNewQuestion())
						{
							setSavedQuestion();
							switchToSearchTab();
						}
						else
						{
							closeDialog(DialogResult.OK);
						}
					}
					else
					{
						if (doSave() == false)
							return;
						if(isInvestigationQuestion())
						{
							//Don't add the saved Question to the available Questions grid if not active
							if(isSavedQuestionActive())
								setSavedQuestion();
						}
						else
							setSavedQuestion();
						switchToSearchTab();
					}
				}
				else
				{
					if (doSave() == false)
						return;
		
					if (isDialogOpenedAsViewOrEdit())
					{
						setSelectedQuestions();
						closeDialog(DialogResult.OK);
					}
					else
					{
						setSavedQuestion();
						switchToSearchTab();
					}
				}
			}
		}
		else
		{
			if(doSave() == false)
				return;
			//refreshListQuestion();		
			//switchToListTab();
			//enableTabNewQuestion(false);
			setIsNewQuestion(false);
			refreshDetails();
			form.lyrTabs().tabNewQuestion().setCaption(VIEW_QUESTION);
			form.setMode(FormMode.VIEW);
		}
	}

	private boolean isQuestionPreactive()
	{
		QuestionInformationVo voQInfo = form.getLocalContext().getVoQuestionInformation();
		return voQInfo != null &&voQInfo.getStatusIsNotNull() && voQInfo.getStatus().equals(PreActiveActiveInactiveStatus.PREACTIVE);
	}

	/**
	 * 
	 */
	private void refreshDetails()
	{
		clearQuestionControls();
		
		if (!form.getLocalContext().getVoQuestionInformationIsNotNull() || !form.getLocalContext().getVoQuestionInformation().getID_QuestionInformationIsNotNull())
		{
			populateControlsFromData(null);
		}
		else
		{
			populateControlsFromData(domain.getQuestion(form.getLocalContext().getVoQuestionInformation().getID_QuestionInformation()));
		}
	}

	private void refreshListQuestion()
	{
		QuestionInformationVo voQInfo = form.getLocalContext().getVoQuestionInformation();
		if(isNewQuestion())
			setAvailableQuestion(form.lyrTabs().tabListQuestions().grdListQuestions().getRows().newRow(true), voQInfo);
		else
			setAvailableQuestion(form.lyrTabs().tabListQuestions().grdListQuestions().getSelectedRow(), voQInfo);
	}

	private void switchToListTab()
	{
		enableTabListQuestion(true);
		form.lyrTabs().tabNewQuestion().setCaption(EDIT_QUESTION);
		showTabListQuestions();
	}

	private void setSelectedQuestions()
	{
		QuestionInformationVo voQInfo = form.getLocalContext().getVoQuestionInformation();
		QuestionInformationShortVoCollection voColl = new QuestionInformationShortVoCollection();
		voColl.add(voQInfo);
		form.getGlobalContext().Admin.setSelectedQuestions(voColl);
	}


	private void switchToSearchTab()
	{
		setIsNewQuestion(null);
		enableTabNewQuestion(false);
		enableTabSearchQuestion(true);
		showTabSearchQuestion();
	}

	private boolean isAtLeastOneActive()
	{
		QuestionInformationVo voQInfo = form.getLocalContext().getVoQuestionInformation();
		PreActiveActiveInactiveStatus currentStatus  = form.lyrTabs().tabNewQuestion().cmbStatus().getValue();
		PreActiveActiveInactiveStatus previousStatus = voQInfo != null?voQInfo.getStatus():null;
		if(isPreviousStatusNotActive(currentStatus, previousStatus))
		{
			//Check at least one Answer Type
			QuestionAnswerTypeVoCollection voColl = getAnswerTypes(null, true);
			int answersCount  = voColl != null?voColl.size():0;
			boolean oneActive = answersCount == 0?true:false;
			
			for(int i=0; voColl != null && i<voColl.size(); i++)
			{
				if(voColl.get(i).getActiveStatus().booleanValue() == true)
				{
					oneActive = true;
					break;
				}
			}
			
			if(oneActive == false)
			{
				form.getGlobalContext().Core.setYesNoDialogMessage("Warning: at least one Answer Type should be active. Do you want to continue?");
				engine.open(form.getForms().Core.YesNoDialog);
				return false;
			}
		}
		return true;
	}

	/**
	 * @param currentStatus
	 * @param previousStatus
	 * @return
	 */
	private boolean isPreviousStatusNotActive(PreActiveActiveInactiveStatus currentStatus, PreActiveActiveInactiveStatus previousStatus)
	{
		return currentStatus != null && currentStatus.equals(PreActiveActiveInactiveStatus.ACTIVE) && (previousStatus == null  || !previousStatus.equals(PreActiveActiveInactiveStatus.ACTIVE));
	}
	
	// Set/add the row data to the available Questions
	private void setSavedQuestion()
	{
		//Add the Question
		QuestionInformationVo voQInfo = form.getLocalContext().getVoQuestionInformation();
		//WDEV-1229 - don't add the inactive question to the grid
		if(voQInfo != null)
		{
			boolean isNotInactive = voQInfo.getStatusIsNotNull() && !voQInfo.getStatus().equals(PreActiveActiveInactiveStatus.INACTIVE);
 			if(isNewQuestion() && isNotInactive)
			{
				//Set the selected Question
				grdSelectedRow row = getCurrentRow(voQInfo);
				setSelectedQuestion(row, voQInfo);
				
				//Clear selection on the Available grid
				form.lyrTabs().tabSearchQuestion().grdAvailable().setValue(null);
			}
			else
			{
				//WDEV-1553 - Refresh available record regardless of status
				grdAvailableRow rowAvailable = form.lyrTabs().tabSearchQuestion().grdAvailable().getRowByValue(voQInfo);
				setAvailableQuestion(rowAvailable, voQInfo);
				//Refresh selected Question
				grdSelectedRow selectedRow   = form.lyrTabs().tabSearchQuestion().grdSelected().getRowByValue(voQInfo);
				if(isNotInactive)
				{
					setSelectedQuestion(selectedRow, voQInfo);
				}
				else
				{
					engine.showMessage("Question '" + voQInfo.getShortText() + "' was inactivated and will be removed from the Available for Selection grid");
					removeQuestionSelectedRow(voQInfo);
					removeAvailableForCollectionRow(voQInfo);
				}
				form.lyrTabs().tabSearchQuestion().grdSelected().setValue(null);
			}
		}
		
		enableContextMenu();
	}

	private void removeQuestionSelectedRow(QuestionInformationVo voQInfo)
	{
		if(voQInfo == null)
			return;
		
		for (int i = 0; i < form.lyrTabs().tabSearchQuestion().grdSelected().getRows().size(); i++)
		{
			if(voQInfo.equals(form.lyrTabs().tabSearchQuestion().grdSelected().getRows().get(i).getValue()))
			{
				form.lyrTabs().tabSearchQuestion().grdSelected().getRows().remove(i);
				break;
			}
		}
	}
	
	private void removeAvailableForCollectionRow(QuestionInformationVo voQInfo)
	{
		if(voQInfo == null)
			return;
		
		for (int i = 0; i < form.lyrTabs().tabSearchQuestion().grdAvailable().getRows().size(); i++)
		{
			if(voQInfo.equals(form.lyrTabs().tabSearchQuestion().grdAvailable().getRows().get(i).getValue()))
			{
				form.lyrTabs().tabSearchQuestion().grdAvailable().getRows().remove(i);
				break;
			}
		} 
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		onBtnCancel();
	}

	private void onBtnCancel()
	{
		if(isDialog())
		{
			if (isDialogOpenedAsViewOrEdit())
			{
				closeDialog(DialogResult.CANCEL);
			}
			else
			{
				if (isScoringAssessmentQuestion())
				{
					closeDialog(DialogResult.CANCEL);
				}
				else
				{
					if(isPrimaryQuestion())
					{
						if(isUserAssessmentQuestion())
						{
							if(isAssessmentEditMode())
							{
								closeDialog(DialogResult.CANCEL);
							}
							else
							{
								switchToSearchTab();								
							}
						}
						else
						{
							if(isCategoryQuestion() || isServiceQuestions())
							{
								switchToSearchTab();	
							}
							else if(isGraphicAssessmentQuestion() && isNewQuestion())	//WDEV-12396
							{
								switchToSearchTab();
							}
							else
							{
								closeDialog(DialogResult.CANCEL);
							}
						}
					}
					else
					{
						enableTabNewQuestion(false);
						enableTabSearchQuestion(true);
						showTabSearchQuestion();
					}
				}
			}
		}
		else
		{
			if(isNewQuestion())
			{
				onLnkReturnToList(false);
			}
			else
			{
				refreshDetails();
				form.lyrTabs().tabNewQuestion().setCaption(VIEW_QUESTION);
				form.setMode(FormMode.VIEW);
			}
		}
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			// Question
			case GenForm.ContextMenus.FindingMenu.Add :
				addQuestion(sender);
			break;

			case GenForm.ContextMenus.FindingMenu.Edit :
				editQuestion(isDialog()?form.lyrTabs().tabSearchQuestion().grdAvailable().getValue():form.lyrTabs().tabListQuestions().grdListQuestions().getValue());
			break;
			
			case GenForm.ContextMenus.FindingMenu.Remove:
				viewQuestion(form.lyrTabs().tabListQuestions().grdListQuestions().getValue());
			break;
			
			case GenForm.ContextMenus.FindingMenu.Clone:
				cloneQuestion(form.lyrTabs().tabListQuestions().grdListQuestions().getValue());
			break;

			// Keywords
			case GenForm.ContextMenus.AddContact.NewContact :
				addKeyword();
			break;

			case GenForm.ContextMenus.AddContact.ViewContact :
				removeKeyword();
			break;

			// Answer Type
			case GenForm.ContextMenus.GenericGrid.Add :
				addAnswerType();
			break;

			case GenForm.ContextMenus.GenericGrid.Update :
				updateAnswerType();
			break;

			case GenForm.ContextMenus.GenericGrid.MoveUp :
				moveUpAnswerType();
			break;

			case GenForm.ContextMenus.GenericGrid.MoveDown :
				moveDownAnswerType();
			break;

			case GenForm.ContextMenus.GenericGrid.Remove :
				deactivateAnswerType();
			break;

			// Classification Tree
			case GenForm.ContextMenus.TreeMenu.ExpandAll :
				expandAllClassification();
			break;
			case GenForm.ContextMenus.TreeMenu.CollapseAll :
				collapseAllClassification();
			break;
		}
	}


	private void cloneQuestion(QuestionInformationShortVo voQInfoShort) 
	{
		clearQuestionControls();
		initialiseNewQuestion();
		enableTabNewQuestion(true);
		enableTabListQuestion(false);
		showClassificationTree(true);	
		form.getGlobalContext().Core.setQuestionType(QuestionType.PRIMARY);
		form.lyrTabs().tabNewQuestion().setCaption(ADD_QUESTION);
				
		QuestionInformationVo voQInfo = null;
		if (voQInfoShort != null && voQInfoShort.getID_QuestionInformationIsNotNull())
		{
			voQInfo = domain.getQuestion(voQInfoShort.getID_QuestionInformation());
			voQInfo.clearIDAndVersion();
			//WDEV-17026 
			if (voQInfo.getTaxonomyMap() == null)
			{	
			voQInfo.setTaxonomyMap(new TaxonomyMapCollection());
			}
			voQInfo.setKeywords(new KeywordVoCollection());
			if (voQInfo.getKeywords() == null)
			{	
			voQInfo.setTaxonomyMap(new TaxonomyMapCollection());
			}
			if(voQInfo.getAnswerTypes() != null)
			{
				QuestionAnswerTypeVoCollection answers = new QuestionAnswerTypeVoCollection();
				for(int x = 0; x < voQInfo.getAnswerTypes().size(); x++)
				{
					QuestionAnswerTypeVo answer = voQInfo.getAnswerTypes().get(x);
					answer.clearIDAndVersion();
					
					if(answer.getOptions() != null)
					{
						AnswerOptionVoCollection options = new AnswerOptionVoCollection();
						for(int y = 0; y < answer.getOptions().size(); y++)
						{
							AnswerOptionVo option = answer.getOptions().get(y);
							if(option != null)
							{
								option.clearIDAndVersion();
								options.add(option);
							}
						}						
						answer.setOptions(options);
					}
					
					answers.add(answer);					
				}
				voQInfo.setAnswerTypes(answers);
			}
				
			voQInfo.setID_QuestionInformation(-1);
			voQInfo.setStatus(PreActiveActiveInactiveStatus.PREACTIVE);
			form.getLocalContext().setVoQuestionInformation(voQInfo);
			populateControlsFromData(voQInfo);
			this.form.lyrTabs().tabNewQuestion().cmbStatus().setValue(PreActiveActiveInactiveStatus.PREACTIVE);
		}
		
		enableContextMenu();
	}
	private void loadCombos()
	{
		loadClassification();
		loadStatusCombo();
	}

	private void loadStatusCombo()
	{
		// Status
		PreActiveActiveInactiveStatus prevStatus = form.lyrTabs().tabNewQuestion().cmbStatus().getValue();
		
		form.lyrTabs().tabNewQuestion().cmbStatus().clear();
		PreActiveActiveInactiveStatusCollection statusColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		for (int i = 0; statusColl != null && i < statusColl.size(); i++)
		{
			PreActiveActiveInactiveStatus status = statusColl.get(i);
			if (isNewQuestion() || isNewScoringAssessmentQuestion())
			{
				// When we have a new Question - Remove Inactive entry (cannot
				// create a new Inactive Record)
				if (status.equals(PreActiveActiveInactiveStatus.INACTIVE))
					continue;
			}
			else
			{
				// When record is active don't allow to Preactivate it
				if (isRecordActive() && status.equals(PreActiveActiveInactiveStatus.PREACTIVE))
					continue;
			}

			form.lyrTabs().tabNewQuestion().cmbStatus().newRow(status, status.toString(), status.getImage(), status.getColor());
		}
		
		form.lyrTabs().tabNewQuestion().cmbStatus().setValue(prevStatus);
	}

	private boolean isNewScoringAssessmentQuestion()
	{
		return isUserAssessmentQuestion() && getDialogMode() == 'A';
	}

	/**
	 * 
	 */
	private void loadClassification()
	{
		//Classification
		if(isDialog())
			form.lyrTabs().tabSearchQuestion().cmbClassification().clear();
		else
			form.lyrTabs().tabListQuestions().cmbClassificationList().clear();
		
		QuestionClassificationCollection classificationColl = LookupHelper.getQuestionClassification(domain.getLookupService());
		for(int i=0; classificationColl != null && i<classificationColl.size(); i++)
		{
			if(classificationColl.get(i).getParent() != null)
			{
				if(isDialog())
					form.lyrTabs().tabSearchQuestion().cmbClassification().newRow(classificationColl.get(i), classificationColl.get(i).toString());
				else
					form.lyrTabs().tabListQuestions().cmbClassificationList().newRow(classificationColl.get(i), classificationColl.get(i).toString());
			}
		}
	}

	
	private void collapseAllClassification()
	{
		collapseNodes(form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().getNodes());
	}

	private void collapseNodes(TreeNodeCollection nodes)
	{
		for (int i = 0; nodes != null && i < nodes.size(); i++)
		{
			TreeNode node = nodes.get(i);
			if (node.isExpanded())
				node.setExpanded(false);
			if (node.getNodes() != null && node.getNodes().size() > 0)
				collapseNodes(node.getNodes());
		}
	}

	private void expandAllClassification()
	{
		expandNodes(form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().getNodes());
	}

	private void expandNodes(TreeNodeCollection nodes)
	{
		for (int i = 0; nodes != null && i < nodes.size(); i++)
		{
			TreeNode node = nodes.get(i);
			if (node.isExpanded() == false)
				node.setExpanded(true);
			if (node.getNodes() != null && node.getNodes().size() > 0)
				expandNodes(node.getNodes());
		}
	}

	private void updateAnswerType()
	{
		Object objQAT = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getValue();
		form.getGlobalContext().Core.setQuestionAnswerType(objQAT instanceof QuestionAnswerTypeVo ? (QuestionAnswerTypeVo) objQAT : null);
		form.getLocalContext().setIsNewAnwerType(new Boolean(false));
		engine.open(form.getForms().Core.QuestionAnswerType);
	}

	private void addAnswerType()
	{
		QuestionAnswerTypeVo voQAnswer = new QuestionAnswerTypeVo();
		voQAnswer.setActiveStatus(new Boolean(true));
		form.getGlobalContext().Core.setQuestionAnswerType(voQAnswer);
		form.getLocalContext().setIsNewAnwerType(new Boolean(true));
		engine.open(form.getForms().Core.QuestionAnswerType);
	}

	private void deactivateAnswerType()
	{
		QuestionAnswerTypeVo voQAnsType = null;
		Object objValue = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getValue();
		if (objValue instanceof QuestionAnswerTypeVo)
			voQAnsType = (QuestionAnswerTypeVo) objValue;

		// Add it to the Inactive only if was saved
		if (voQAnsType != null && voQAnsType.getID_QuestionAnswerTypeIsNotNull())
		{
			voQAnsType.setActiveStatus(new Boolean(false));
			addLookupToInactiveList(voQAnsType);
		}

		form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().remove(form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getSelectedRow());

		enableContextMenu();
	}

	private void moveDownAnswerType()
	{
		if (form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getSelectedRow() != null)
			form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getSelectedRow().moveDown();
		enableContextMenu();
	}

	private void moveUpAnswerType()
	{
		if (form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getSelectedRow() != null)
			form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getSelectedRow().moveUp();
		enableContextMenu();
	}

	private void addLookupToInactiveList(QuestionAnswerTypeVo voQAnsType)
	{
		QuestionAnswerTypeVoCollection voColl = form.getLocalContext().getInactiveAnswerTypesIsNotNull() ? form.getLocalContext().getInactiveAnswerTypes() : new QuestionAnswerTypeVoCollection();
		voColl.add(voQAnsType);
		form.getLocalContext().setInactiveAnswerTypes(voColl);
	}

	protected void onImbClearClick() throws PresentationLogicException
	{
		clearSearchCriteria();
		enableContextMenu();
	}

	protected void onImbSearchClick() throws PresentationLogicException
	{
		search(true);
	}

	private void search()
	{
		search(false);
	}
	
	private void search(boolean excludeInactive)
	{
		
		if (form.lyrTabs().tabSearchQuestion().GroupText().getValue().equals(GroupTextEnumeration.rdoText))
			form.getLocalContext().setIsShortText(false);
		else
			form.getLocalContext().setIsShortText(true);
		
		if(isDialog())
			clearGridAvailable();
		else
		{
			enableTabNewQuestion(false);
			clearGridListQuestions();
		}

		setSearchBtnClickedOnce(true);

		String text = "";
		if(isDialog())
			text = form.lyrTabs().tabSearchQuestion().txtSearchText().getValue();
		else
			text = form.lyrTabs().tabListQuestions().txtTextList().getValue();
		
		QuestionClassification classification = null;
		QuestionClassificationCollection classColl = null;
		//WDEV-3332
		PreActiveActiveInactiveStatus status = isInvestigationQuestion() || isServiceQuestions() || isCategoryQuestion() ?PreActiveActiveInactiveStatus.ACTIVE:null;
		Boolean isQuestion = null;
		QuestionType questionType = null;
		if(isDialog())
		{
			GroupFilterEnumeration classType = form.lyrTabs().tabSearchQuestion().GroupFilter().getValue();
			if (classType.equals(GroupFilterEnumeration.rdoFindingsOnly))
			{
				questionType = QuestionType.FINDING;
			}
			else if (classType.equals(GroupFilterEnumeration.rdoAllClassification))
			{
				questionType = QuestionType.PRIMARY;
				classification = form.lyrTabs().tabSearchQuestion().cmbClassification().getValue();
				if (classification != null)
				{
					classColl = new QuestionClassificationCollection();
					classColl.add(classification);
				}
			}
		}
		else
		{
			questionType = QuestionType.PRIMARY;
			classification = form.lyrTabs().tabListQuestions().cmbClassificationList().getValue();
			if (classification != null)
			{
				classColl = new QuestionClassificationCollection();
				classColl.add(classification);
			}
		}

		QuestionInformationShortVoCollection voColl = null;
		if(excludeInactive)
		{
			//WDEV-3332  
			if(isInvestigationQuestion() || isCategoryQuestion() || isServiceQuestions())
				voColl = domain.listQuestion(classification, questionType, text, status, isQuestion, form.getLocalContext().getIsShortText());
			else
				voColl = domain.listQuestionExcludeInactive(classification, questionType, text, isQuestion,form.getLocalContext().getIsShortText());
		}
		else
			voColl = domain.listQuestion(classification, questionType, text, status, isQuestion,form.getLocalContext().getIsShortText());
		
		if (voColl == null || voColl.size() == 0)
			engine.showMessage("No questions found for the Search Criteria Provided");

		displayQuestions(voColl);

		enableContextMenu();
	}

	/**
	 * 
	 */
	private void clearGridListQuestions()
	{
		form.lyrTabs().tabListQuestions().grdListQuestions().getRows().clear();
	}

	// Flags the search to be clicked at least once
	private void setSearchBtnClickedOnce(boolean value)
	{
		form.getLocalContext().setIsSearchPerformed(new Boolean(value));
	}

	private void clearGridAvailable()
	{
		form.lyrTabs().tabSearchQuestion().grdAvailable().getRows().clear();
	}

	protected void onBtnClearClick()
	{
		form.lyrTabs().tabSearchQuestion().GroupFilter().setValue(GroupFilterEnumeration.rdoFindingsOnly);
		form.lyrTabs().tabSearchQuestion().txtSearchText().setValue("");
		form.lyrTabs().tabSearchQuestion().cmbClassification().setValue(null);
		clearGridAvailable();
		form.lyrTabs().tabSearchQuestion().grdSelected().getRows().clear();
	}

	protected void onBtnSelectAllClick() throws PresentationLogicException
	{
		selectSearchQuestions(true);
	}

	private void selectSearchQuestions(boolean select)
	{
		for (int i = 0; i < form.lyrTabs().tabSearchQuestion().grdAvailable().getRows().size(); i++)
		{
			form.lyrTabs().tabSearchQuestion().grdAvailable().getRows().get(i).setcolSelect(select);
		}
	}

	protected void onBtnClearAllClick() throws PresentationLogicException
	{
		selectSearchQuestions(false);
	}

	protected void onBtnAddToListClick() throws PresentationLogicException
	{
		QuestionInformationShortVoCollection voColl = new QuestionInformationShortVoCollection();
		boolean deleted = true;
		while (deleted)
		{
			deleted = false;
			for (int i = 0; i < form.lyrTabs().tabSearchQuestion().grdAvailable().getRows().size(); i++)
			{
				if (form.lyrTabs().tabSearchQuestion().grdAvailable().getRows().get(i).getcolSelect())
				{
					voColl.add(form.lyrTabs().tabSearchQuestion().grdAvailable().getRows().get(i).getValue());
					form.lyrTabs().tabSearchQuestion().grdAvailable().getRows().remove(i);
					deleted = true;
					break;
				}
			}
		}

		addSelectedQuestions(voColl);
		
		enableContextMenu();	//WDEV-12365
	}

	protected void onBtnOkClick() throws PresentationLogicException
	{
		QuestionInformationShortVoCollection voColl = getSelectedQuestions();
		
		if(isUserAssessmentQuestion())
		{
			AssessmentQuestionVoCollection voAssmntColl = new AssessmentQuestionVoCollection();
			for(int i=0; voColl != null && i<voColl.size(); i++)
			{
				AssessmentQuestionVo voAssmntQ = new AssessmentQuestionVo();
				voAssmntQ.setQuestion(domain.getQuestion(voColl.get(i).getID_QuestionInformation()));
				voAssmntQ.setLegendText(voAssmntQ.getQuestion().getLegendText());
				voAssmntColl.add(voAssmntQ);
			}
			form.getGlobalContext().Core.setSelectedAssessmentQuestions(voAssmntColl);
			closeDialog(DialogResult.OK);
		}
		else
		{
			form.getGlobalContext().Admin.setSelectedQuestions(voColl);
			closeDialog(DialogResult.OK);			
		}
	}

	private QuestionInformationShortVoCollection getSelectedQuestions()
	{
		QuestionInformationShortVoCollection voColl = new QuestionInformationShortVoCollection();
		for(int i=0; i<form.lyrTabs().tabSearchQuestion().grdSelected().getRows().size(); i++)
		{
			if(form.lyrTabs().tabSearchQuestion().grdSelected().getRows().get(i).getcolSelect())
				voColl.add(form.lyrTabs().tabSearchQuestion().grdSelected().getRows().get(i).getValue());
		}
		return voColl;
	}

	protected void onBtnCancelSearchClick() throws PresentationLogicException
	{
		closeDialog(DialogResult.CANCEL);
	}

	// ------------------ Private methods -----------------------------------
	private void displayQuestions(QuestionInformationShortVoCollection voColl)
	{
		if (voColl != null)
		{
			QuestionInformationShortVo voQInfoShort;
			for (int i = 0; i < voColl.size(); i++)
			{
				voQInfoShort = voColl.get(i);
				if(isDialog())
				{
					grdAvailableRow row = form.lyrTabs().tabSearchQuestion().grdAvailable().getRows().newRow();
					setAvailableQuestion(row, voQInfoShort);
				}
				else
				{
					grdListQuestionsRow row = form.lyrTabs().tabListQuestions().grdListQuestions().getRows().newRow();
					setAvailableQuestion(row, voQInfoShort);
				}
			}
		}
	}

	private void setAvailableQuestion(grdListQuestionsRow row, QuestionInformationShortVo voQInfoShort)
	{
		if(row == null || voQInfoShort == null)
			return;
		row.setcolQuestionText(voQInfoShort.getShortText());
		row.setcolStatus(voQInfoShort.getStatusIsNotNull()?voQInfoShort.getStatus().toString():"");
		row.setTooltip(voQInfoShort.getTooltip());
		row.setValue(voQInfoShort);
	}

	private void setAvailableQuestion(grdAvailableRow row, QuestionInformationShortVo voQInfoShort)
	{
		if(row == null || voQInfoShort == null)
			return;
		if (form.getLocalContext().getIsShortTextIsNotNull())
			if (form.getLocalContext().getIsShortText())
				row.setcolQuestionText(voQInfoShort.getShortText());
			else
				row.setcolQuestionText(voQInfoShort.getText());
		row.setcolStatus(voQInfoShort.getStatusIsNotNull()?voQInfoShort.getStatus().toString():"");
		row.setTooltip(voQInfoShort.getTooltip());
		row.setValue(voQInfoShort);
	}

	private void addSelectedQuestions(QuestionInformationShortVoCollection voColl)
	{
		QuestionInformationShortVo voQIshort;
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			voQIshort = voColl.get(i);
			grdSelectedRow row = form.lyrTabs().tabSearchQuestion().grdSelected().getRowByValue(voQIshort);
			if (row == null)
				row = form.lyrTabs().tabSearchQuestion().grdSelected().getRows().newRow();

			setSelectedQuestion(row, voQIshort);
		}
	}

	private void setSelectedQuestion(grdSelectedRow row, QuestionInformationShortVo voQIshort)
	{
		if(row == null || voQIshort == null)
			return;
		
		if (form.getLocalContext().getIsShortTextIsNotNull())
			row.setcolQuestionText(voQIshort.getShortText());
//			if (form.getLocalContext().getIsShortText())
//				row.setcolQuestionText(voQIshort.getShortText());
//			else
//				row.setcolQuestionText(voQIshort.getText());
		row.setcolStatus(voQIshort.getStatusIsNotNull()?voQIshort.getStatus().toString():"");
		row.setTooltip(voQIshort.getTooltip());
		row.setcolSelect(true);
		row.setValue(voQIshort);
	}

	private void addQuestion(ims.framework.Control sender)
	{
		if(sender.equals(form.lyrTabs().tabListQuestions().grdListQuestions()))
		{
			//Add Primary Questions
			clearQuestionControls();
			initialiseNewQuestion();
			enableTabNewQuestion(true);
			enableTabListQuestion(false);
			showClassificationTree(true);	
			form.getGlobalContext().Core.setQuestionType(QuestionType.PRIMARY);
			form.lyrTabs().tabNewQuestion().setCaption(ADD_QUESTION);
		}
		else
		{
			clearQuestionControls();
			initialiseNewQuestion();
	
			enableTabNewQuestion(true);
			enableTabSearchQuestion(false);
		}
	}

	private void initialiseNewQuestion()
	{
		form.getLocalContext().setVoQuestionInformation(new QuestionInformationVo());
		setIsNewQuestion(new Boolean(true));
		showTabNewQuestion();
		form.lyrTabs().tabNewQuestion().txtShortText().setValue(form.lyrTabs().tabSearchQuestion().txtSearchText().getValue());
		form.lyrTabs().tabNewQuestion().txtShortText().setFocus();
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().chkIsQuestion().setValue(true);
		form.lyrTabs().tabNewQuestion().cmbStatus().setValue(PreActiveActiveInactiveStatus.PREACTIVE);
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().cmbGenre().setValue(GenderSpecific.NOTAPPLICABLE);
		form.lyrTabs().tabNewQuestion().lyrDetails().tabLegend().richTextLegend().setValue("");
		form.setMode(FormMode.EDIT);
	}

	private void setIsNewQuestion(Boolean isNewQuestion)
	{
		form.getLocalContext().setIsNewQuestion(isNewQuestion);
	}

	private void editQuestion(AssessmentQuestionVo assessmentQuestionVo)
	{
		if (assessmentQuestionVo == null)
			return;

		QuestionInformationVo voQInfo = assessmentQuestionVo.getQuestion();
		form.getLocalContext().setVoQuestionInformation(voQInfo);

		clearQuestionControls();
		populateControlsFromData(voQInfo);
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().txtURL().setValue(assessmentQuestionVo.getURL());
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().txtProtocol().setValue(assessmentQuestionVo.getProtocol());
		form.lyrTabs().tabNewQuestion().lyrDetails().tabLegend().richTextLegend().setValue(assessmentQuestionVo.getLegendText());

		form.setMode(FormMode.EDIT);
		setIsNewQuestion(new Boolean(false));
		enableTabNewQuestion(true);
		enableTabSearchQuestion(false);
		
		showTabNewQuestion();
	}

	private void editQuestion(QuestionInformationShortVo voQInfoShort)
	{
		QuestionInformationVo voQInfo = null;
		if (voQInfoShort != null && voQInfoShort.getID_QuestionInformationIsNotNull())
		{
			voQInfo = domain.getQuestion(voQInfoShort.getID_QuestionInformation());
			form.getLocalContext().setVoQuestionInformation(voQInfo);
		}

		clearQuestionControls();
		populateControlsFromData(voQInfo);

		setIsNewQuestion(new Boolean(false));
		enableTabNewQuestion(true);
		boolean isPrimaryQuestion = voQInfo != null && voQInfo .getQuestionTypeIsNotNull() && voQInfo .getQuestionType().equals(QuestionType.PRIMARY)?true:false;
		if(isDialog())
			enableTabSearchQuestion(false);
		else
		{
			enableTabListQuestion(false);
			showClassificationTree(isPrimaryQuestion);
		}
		
		showTabNewQuestion();
		form.setMode(FormMode.EDIT);
	}
	
	private void viewQuestion(QuestionInformationShortVo voQInfoShort)
	{
		QuestionInformationVo voQInfo = null;
		if (voQInfoShort != null && voQInfoShort.getID_QuestionInformationIsNotNull())
		{
			voQInfo = domain.getQuestion(voQInfoShort.getID_QuestionInformation());
			form.getLocalContext().setVoQuestionInformation(voQInfo);
		}

		clearQuestionControls();
		populateControlsFromData(voQInfo);

		setIsNewQuestion(new Boolean(false));
		enableTabNewQuestion(true);
		boolean isPrimaryQuestion = voQInfo != null && voQInfo .getQuestionTypeIsNotNull() && voQInfo .getQuestionType().equals(QuestionType.PRIMARY)?true:false;
		if(isDialog())
			enableTabSearchQuestion(false);
		else
		{
			enableTabListQuestion(false);
			showClassificationTree(isPrimaryQuestion);
		}
		
		showTabNewQuestion();
		form.setMode(FormMode.VIEW);
		
		if(isPrimaryQuestion)
			form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().setEnabled(false);
		
		form.lyrTabs().tabNewQuestion().setCaption(VIEW_QUESTION);
	}
	

	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		onLnkReturnToList();
	}

	private void onLnkReturnToList()
	{
		onLnkReturnToList(true);
	}
	
	private void onLnkReturnToList(boolean refreshListQuestions)
	{
		switchToListTab();
		enableTabNewQuestion(false);
		if(refreshListQuestions)
			refreshListQuestion();
		form.lyrTabs().tabNewQuestion().setCaption(EDIT_QUESTION);
		form.setMode(FormMode.VIEW);
	}

	private void enableTabNewQuestion(boolean value)
	{
		form.lyrTabs().tabNewQuestion().setHeaderEnabled(value);
	}

	private void enableTabSearchQuestion(boolean value)
	{
		form.lyrTabs().tabSearchQuestion().setHeaderEnabled(value);
	}
	
	private void enableTabListQuestion(boolean value)
	{
		form.lyrTabs().tabListQuestions().setHeaderEnabled(value);
	}

	private void initialiseScreen() throws ims.framework.exceptions.FormOpenException
	{
		if(isDialog())
		{
			if(form.getGlobalContext().Core.getQuestionType() == null)
				throw new ims.framework.exceptions.FormOpenException("The mandatory global context variable 'Core.QuestionType' is null");
			
			form.getGlobalContext().Core.setSelectedAssessmentQuestions(null);
			enableClassificationTree();
			setPreviousForm(engine.getPreviousNonDialogFormName());

			form.lyrTabs().tabListQuestions().setHeaderVisible(false);
			
			if (isDialogOpenedAsViewOrEdit())
			{
				QuestionInformationShortVo voQInfoShort = form.getGlobalContext().Core.getSelectedQuestion();
				editQuestion(voQInfoShort);
				FormMode mode = form.getGlobalContext().Core.getQuestionFormMode();
				if(mode != null)
				{
					form.lyrTabs().tabNewQuestion().setCaption(mode.equals(FormMode.EDIT)?EDIT_QUESTION:ADD_QUESTION);
					form.setMode(mode);
					
					if(isNonScoringAssessmentQuestion())
					{
						if(mode.equals(FormMode.EDIT))
							engine.setCaption("Non Scoring Assessment - Edit Question");
						else
							engine.setCaption("Non Scoring Assessment - Search Questions");
					}
				}
			}
			else
			{
				if(isScoringAssessmentQuestion()) 
				{
					displayFindingTab();
				}
				else if(isNonScoringAssessmentQuestion())
				{
					displayFindingTab();
				}
				else if(isCategoryQuestion() || isServiceQuestions())
				{
					String title = "Search Questions";
					if(isCategoryQuestion())
						title = "Category Questions - " + title;
					if(isServiceQuestions())
						title = "Service Questions - " + title;
					engine.setCaption(title);
					//WDEV-1161 - If this dialogue is activated from the category question form, can the second layer be called 'New Question' rather than 'Category Question' 
					form.lyrTabs().tabNewQuestion().setCaption("New Question");
					form.lyrTabs().tabSearchQuestion().setCaption("Search Questions");
										
					form.lyrTabs().tabSearchQuestion().txtSearchText().setFocus();
					setSearchBtnClickedOnce(false);
					enableClassificationTree();
					enableCmbClassification();
					enableTabNewQuestion(false);
					enableTabSearchQuestion(true);
					showTabSearchQuestion();
					form.lyrTabs().tabSearchQuestion().GroupFilter().setValue(GroupFilterEnumeration.rdoAllClassification);
					form.lyrTabs().tabSearchQuestion().GroupFilter().setVisible(false);
					enableCmbClassification();					
				}
				else if(isInvestigationQuestion())
				{
					form.lyrTabs().tabSearchQuestion().txtSearchText().setFocus();
					setSearchBtnClickedOnce(false);
					enableClassificationTree();
					enableCmbClassification();
					enableTabNewQuestion(false);
					enableTabSearchQuestion(true);
					showTabSearchQuestion();
					form.lyrTabs().tabSearchQuestion().GroupFilter().setValue(GroupFilterEnumeration.rdoAllClassification);
					form.lyrTabs().tabSearchQuestion().GroupFilter().setEnabled(GroupFilterEnumeration.rdoFindingsOnly, false);
					form.lyrTabs().tabSearchQuestion().GroupFilter().setVisible(false);
					enableCmbClassification();	
				}
				else
				{
					displaySearchTab();
				}
			}
		}
		else
		{
			form.lyrTabs().tabSearchQuestion().setHeaderVisible(false);
			enableTabNewQuestion(false);
			form.lyrTabs().tabNewQuestion().setCaption(EDIT_QUESTION);
			form.lyrTabs().tabListQuestions().txtTextList().setFocus();
		}		
	}

	private void enableClassificationTree()
	{
		showClassificationTree(isPrimaryQuestion());
	}
	private void showClassificationTree(boolean value)
	{
		form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().setVisible(value);		
	}

	private void displayFindingTab()
	{
		char userAssessMode = getDialogMode();
		if (userAssessMode == 'A')
		{
			if(isPrimaryQuestion())
			{
				engine.setCaption("Non Scoring Assessment - Search Questions");
				form.lyrTabs().tabNewQuestion().setCaption("New Question");
				form.lyrTabs().tabSearchQuestion().setCaption("Search Questions");
				showTabSearchQuestion();
				form.lyrTabs().tabSearchQuestion().txtSearchText().setFocus();
				setSearchBtnClickedOnce(false);
				enableClassificationTree();
				enableCmbClassification();
				enableTabNewQuestion(false);
				enableTabSearchQuestion(true);
				
				form.lyrTabs().tabSearchQuestion().GroupFilter().setValue(GroupFilterEnumeration.rdoAllClassification);
				form.lyrTabs().tabSearchQuestion().GroupFilter().setEnabled(GroupFilterEnumeration.rdoFindingsOnly, false);
				enableCmbClassification();
			}
			else
			{
				engine.setCaption("Scoring Assessment - Add New Question");
				form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().chkIsQuestion().setValue(true);
				form.lyrTabs().tabNewQuestion().txtShortText().setFocus();
				form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().cmbGenre().setValue(GenderSpecific.NOTAPPLICABLE);
				form.lyrTabs().tabNewQuestion().cmbStatus().setValue(PreActiveActiveInactiveStatus.PREACTIVE);
				form.lyrTabs().tabNewQuestion().setCaption("Scoring Assessment");
				showTabNewQuestion();
				form.lyrTabs().tabSearchQuestion().setHeaderVisible(false);
				form.setMode(FormMode.EDIT);
			}
		}
		else
		{
			AssessmentQuestionVo assessmentQuestionVo = form.getGlobalContext().Core.getSelectedAssessmentQuestion();
			if (userAssessMode == 'E')
			{
				if(isPrimaryQuestion())
					engine.setCaption("Non Scoring Assessment - Edit Question");
				else
					engine.setCaption("Scoring Assessment - Edit Question");
				editQuestion(assessmentQuestionVo);
				form.setMode(FormMode.EDIT);
			}
			if (userAssessMode == 'V')
			{
				engine.setCaption("Scoring Assessment - View Question");
				editQuestion(assessmentQuestionVo);
				form.setMode(FormMode.VIEW);
				form.lyrTabs().tabNewQuestion().btnSave().setEnabled(false);
				form.lyrTabs().tabNewQuestion().btnCancel().setEnabled(true);
			}
	
			form.lyrTabs().tabNewQuestion().setCaption("Scoring Assessment");
			showTabNewQuestion();
			form.lyrTabs().tabSearchQuestion().setHeaderVisible(false);
			form.lyrTabs().tabSearchQuestion().txtSearchText().setFocus();
		}
	}

	private void displaySearchTab()
	{
		showTabSearchQuestion();
		form.lyrTabs().tabSearchQuestion().txtSearchText().setFocus();
		form.lyrTabs().tabSearchQuestion().GroupFilter().setValue(GroupFilterEnumeration.rdoFindingsOnly);
		setSearchBtnClickedOnce(false);
		enableClassificationTree();
		enableCmbClassification();
		enableTabNewQuestion(false);
	}

	private void setContextMenu()
	{
		form.getContextMenus().getAddContactNewContactItem().setText("Add Keyword");
		form.getContextMenus().getAddContactViewContactItem().setText("Remove Keyword");
		form.getContextMenus().getAddContactNewContactItem().setIcon(form.getImages().Core.Add);
		form.getContextMenus().getAddContactViewContactItem().setIcon(form.getImages().Core.Delete);

		form.getContextMenus().getFindingMenuAddItem().setIcon(form.getImages().Core.Add);
		form.getContextMenus().getFindingMenuEditItem().setIcon(form.getImages().Core.Edit);

		form.getContextMenus().getFindingMenuAddItem().setText(ADD_QUESTION);
		form.getContextMenus().getFindingMenuEditItem().setText(EDIT_QUESTION);
		form.getContextMenus().getFindingMenuRemoveItem().setText(VIEW_QUESTION);
		form.getContextMenus().getFindingMenuRemoveItem().setIcon(form.getImages().Core.View);
		form.getContextMenus().getFindingMenuCloneItem().setText(CLONE_QUESTION);
		//WDEV-1031 1.2 - Context Menu - Renamed from 'Add' to 'Add Answer Type' and 'Edit' to 'Edit Answer Type'
		form.getContextMenus().getGenericGridAddItem().setText("Add Answer Type");
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Answer Type");
		form.getContextMenus().getGenericGridRemoveItem().setText("Remove Answer Type");
	}

	private void enableContextMenu()
	{
		boolean editMode = form.getMode().equals(FormMode.EDIT);
		
		boolean findingSelected = form.lyrTabs().tabSearchQuestion().grdAvailable().getValue() != null;
		boolean findingListSelected = form.lyrTabs().tabListQuestions().grdListQuestions().getValue() != null;
		form.getContextMenus().getFindingMenuAddItem().setVisible(isSearchBtnClickedOnce());
		form.getContextMenus().getFindingMenuEditItem().setVisible(findingSelected || findingListSelected);
		form.getContextMenus().getFindingMenuRemoveItem().setVisible(findingListSelected);
		form.getContextMenus().getFindingMenuCloneItem().setVisible(findingListSelected);

		boolean keywordSelected = form.lyrTabs().tabNewQuestion().lyrDetails().tabKeywords().grdKeywords().getSelectedRowIndex() >= 0;
		form.getContextMenus().getAddContactNewContactItem().setVisible(editMode && !isStatusInactive());
		form.getContextMenus().getAddContactViewContactItem().setVisible(editMode && keywordSelected && !isStatusInactive());

		Object dynGridVal = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getValue();
		boolean canMoveUp = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getSelectedRow() != null && form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getSelectedRow().canMoveUp() ? true : false;
		boolean canMoveDown = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getSelectedRow() != null && form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getSelectedRow().canMoveDown() ? true : false;
		boolean answTypeEditable = editMode && !isStatusActiveOrInactive(); 
		form.getContextMenus().getGenericGridAddItem().setVisible(answTypeEditable && form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().chkIsQuestion().getValue());
		form.getContextMenus().getGenericGridRemoveItem().setVisible(answTypeEditable && dynGridVal != null);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(answTypeEditable && dynGridVal != null);
		form.getContextMenus().getGenericGridMoveUpItem().setVisible(answTypeEditable && canMoveUp);
		form.getContextMenus().getGenericGridMoveDownItem().setVisible(answTypeEditable && canMoveDown);
		boolean classificationAdded = form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().getNodes().size() > 0;
		form.getContextMenus().getTreeMenuCollapseAllItem().setEnabled(classificationAdded);
		form.getContextMenus().getTreeMenuExpandAllItem().setEnabled(classificationAdded);
	}

	private void addKeyword()
	{
		form.lyrTabs().tabNewQuestion().lyrDetails().tabKeywords().grdKeywords().getRows().newRow(true);
		enableContextMenu();
	}

	private void removeKeyword()
	{
		form.lyrTabs().tabNewQuestion().lyrDetails().tabKeywords().grdKeywords().removeSelectedRow();
		enableContextMenu();
	}

	private boolean doSave()
	{
		QuestionInformationVo voQInfo = (QuestionInformationVo) form.getLocalContext().getVoQuestionInformation().clone();
		
		voQInfo = populateDataFromScreen(voQInfo);
		
		String[] errors = voQInfo.validate(getUIErrors());
		if (voQInfo.getIsQuestion())
		{
			if (voQInfo.getAnswerTypes().size()==0)
			{
				if (errors!=null)
				{	
					int length=errors.length;
					errors[length-1]="At least one active answer type is mandatory";
				}
				else
				{
					errors=new String[1];
					errors[0]="At least one active answer type is mandatory";
				}
			}
		}
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			voQInfo = domain.saveQuestion(voQInfo);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		catch (UniqueKeyViolationException exp)
		{
			engine.showMessage(exp.getMessage());
			return false;
		}
		
		addSavedQuestionAsEdited(voQInfo);
		
		form.getLocalContext().setVoQuestionInformation(voQInfo);
		return true;
	}

	@SuppressWarnings("unchecked")
	private String[] getUIErrors()
	{
		java.util.ArrayList errors = new java.util.ArrayList();
		boolean isActive=false;
		//Check the Answer Type not to have only separator text for active questions
		PreActiveActiveInactiveStatus currentStatus = form.lyrTabs().tabNewQuestion().cmbStatus().getValue();
		for (int i = 0; i < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().size(); i++)
		{
			Object objVal = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().get(i).getValue();
			if (objVal instanceof QuestionAnswerTypeVo)
			{	
				QuestionAnswerTypeVo voQAnswerType = (QuestionAnswerTypeVo) objVal;
				if (voQAnswerType.getActiveStatus())
					isActive=true;
			}
			
		}
		
		boolean isQuestion =  form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().chkIsQuestion().getValue();		
		if (!isActive && isQuestion)
			errors.add("At least one answer type must be Active");
		
		if(currentStatus != null && currentStatus.equals(PreActiveActiveInactiveStatus.ACTIVE))
		{
			QuestionAnswerTypeVoCollection voColl = getAnswerTypes(null, true);
			boolean hasSeparator = hasSeparator(voColl);
			boolean hasOther	 = hasOtherThanSeparatorType(voColl);  
			if(hasSeparator && !hasOther)
				errors.add(QuestionAnswerType.SEPARATOR + " must be used in conjunction with another active Answer Type.");
			
			//WDEV-1471
			for (int i = 0; i < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().size(); i++)
			{
				Object objVal = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().get(i).getValue();
				if (objVal instanceof QuestionAnswerTypeVo)
				{	
					QuestionAnswerTypeVo voQAnswerType = (QuestionAnswerTypeVo) objVal;
					QuestionAnswerType voAnswerType    = voQAnswerType.getAnswerType();
					if(voAnswerType != null && 
					  (voAnswerType.equals(QuestionAnswerType.MULTISELECT) || voAnswerType.equals(QuestionAnswerType.PICKLIST)))// || (!voQAnswerType.getActiveStatus()))) wdev-10725
					{
						if(voQAnswerType.getOptions() == null || voQAnswerType.getOptions().size() == 0)
						{
							errors.add("Please add at least one Answer Option to the '" + voAnswerType + "' Answer Type"); 
						}
					}
				}
			}
			//Workaround - set status to preactive to avoid isActive() returning true
			if(errors.size() > 0)
			{	
				QuestionInformationVo voQInfo = form.getLocalContext().getVoQuestionInformation();
				if(voQInfo.getStatusIsNotNull() && voQInfo.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
				{
					voQInfo.setStatus(PreActiveActiveInactiveStatus.PREACTIVE);
					form.getLocalContext().setVoQuestionInformation(voQInfo);
				}
			}
			
		}
		

		int keyRowSize = form.lyrTabs().tabNewQuestion().lyrDetails().tabKeywords().grdKeywords().getRows().size();
		for (int i = 0; i < keyRowSize; i++)
		{
			String keyword = form.lyrTabs().tabNewQuestion().lyrDetails().tabKeywords().grdKeywords().getRows().get(i).getcolName();
			if(keyword == null || keyword.length() == 0)
			{
				form.lyrTabs().tabNewQuestion().lyrDetails().tabKeywords().grdKeywords().setFocus();
				break;
			}
		}
		
		if(errors.size() > 0)
		{
			String[] error = new String[errors.size()];
			errors.toArray(error);
			return error;
		}
		
		return null;
	}

	private boolean hasSeparator(QuestionAnswerTypeVoCollection voColl)
	{
		for (int i = 0; i < voColl.size(); i++)
		{
			if(voColl.get(i).getAnswerTypeIsNotNull() && voColl.get(i).getAnswerType().equals(QuestionAnswerType.SEPARATOR))
				return true;
		}
		return false;
	}
	
	private boolean hasOtherThanSeparatorType(QuestionAnswerTypeVoCollection voColl)
	{
		for (int i = 0; i < voColl.size(); i++)
		{
			if(voColl.get(i).getAnswerTypeIsNotNull() && !voColl.get(i).getAnswerType().equals(QuestionAnswerType.SEPARATOR) && voColl.get(i).getActiveStatusIsNotNull() && voColl.get(i).getActiveStatus())
				return true;
		}
		return false;
	}

	private boolean doSaveAssessmentQuestion()
	{
		//wdev-16108
		String[] errors = validateUIRules();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		//------------
		
		QuestionInformationVo voQInfo = form.getLocalContext().getVoQuestionInformation();

		if (voQInfo == null)
			voQInfo = new QuestionInformationVo();

		populateDataFromScreen(voQInfo);

		errors = voQInfo.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		form.getLocalContext().setVoQuestionInformation(voQInfo);

		AssessmentQuestionVo assessmentQuestionVo = form.getGlobalContext().Core.getSelectedAssessmentQuestion();

		if (assessmentQuestionVo == null)
			assessmentQuestionVo = new AssessmentQuestionVo();

		assessmentQuestionVo.setQuestion(voQInfo);
		assessmentQuestionVo.setURL(form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().txtURL().getValue());
		assessmentQuestionVo.setProtocol(form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().txtProtocol().getValue());
		assessmentQuestionVo.setLegendText(form.lyrTabs().tabNewQuestion().lyrDetails().tabLegend().richTextLegend().getValue());
		
		assessmentQuestionVo.setScoringAnswerType(null);
		for (int i = 0; i < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().size(); i++)
		{
			
			DynamicGridRow row = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().get(i);

			if (row.getValue() != null && row.getValue() instanceof QuestionAnswerTypeVo)
			{
				if (isSingleOrMultiSelect(((QuestionAnswerTypeVo) row.getValue()).getAnswerType()))
				{
					DynamicGridColumn colScorAnswer = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().getByIdentifier(COLSCORANSWER);

					if (row.getCells().get(colScorAnswer).getValue() != null && row.getCells().get(colScorAnswer).getValue().equals(Boolean.TRUE))
					{
						assessmentQuestionVo.setScoringAnswerType((QuestionAnswerTypeVo) row.getValue());
						break;
					}
				}
			}
		}

		form.getGlobalContext().Core.setSelectedAssessmentQuestion(assessmentQuestionVo);

		return true;
	}
	//wdev-16108
	public String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>(); 
		if( form.lyrTabs().tabNewQuestion().txtShortText().getValue() == null)
		{
			errors.add("Short Text is mandatory.");
		}
		if( form.lyrTabs().tabNewQuestion().txtText().getValue() == null)
		{
			errors.add("Text is mandatory.");
			
		}
		if( form.lyrTabs().tabNewQuestion().cmbStatus().getValue() == null)
		{
			errors.add("Status is mandatory.");
		}
		if( form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().cmbGenre().getValue() == null)
		{
			errors.add("Gender is mandatory.");
		}
	
		
		if(errors.size() == 0)
			return null;
		
		String[] result = new String[errors.size()];
		for(int x = 0; x < errors.size(); x++)
		{
			result[x] = (String)errors.get(x);
		}		
		return result;
	}
	protected QuestionInformationVo populateDataFromScreen(QuestionInformationVo voQInfo)
	{
		// Populate the controls that cannot be binded
		IntRange ageRange = form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().irbAgeRange().getValue();
		voQInfo.setAgeRangeMax(ageRange != null ? ageRange.getMax() : null);
		voQInfo.setAgeRangeMin(ageRange != null ? ageRange.getMin() : null);
		if(voQInfo.getID_QuestionInformation() == null)
			voQInfo.setQuestionType(form.getGlobalContext().Core.getQuestionType());

		voQInfo.setClassification(getClassification());
		//voQInfo.setKeywords(getKewords());
		
		boolean isClone = voQInfo.getID_QuestionInformationIsNotNull() && voQInfo.getID_QuestionInformation() == -1;
		
		voQInfo.setAnswerTypes(getAnswerTypes(isClone ? null : voQInfo.getAnswerTypes(), isClone));
		voQInfo.setTaxonomyMap(form.lyrTabs().tabNewQuestion().lyrDetails().tabTaxonomy().customTaxonomy().getValue());
		super.populateDataFromScreen(voQInfo);
		voQInfo.setLegendText(form.lyrTabs().tabNewQuestion().lyrDetails().tabLegend().richTextLegend().getValue());
		
		if(isClone)
		{
			voQInfo.setID_QuestionInformation(null);
		}
		
		return voQInfo;		
	}

	protected void onFormModeChanged()
	{
		loadStatusCombo();
		
		if (form.getMode().equals(FormMode.VIEW))
		{			
			form.lyrTabs().tabNewQuestion().lyrDetails().tabTaxonomy().customTaxonomy().setComponentMode(FormMode.VIEW);			
			if(isDialog())
			{
				if (isDialogOpenedAsView())
				{
					enableUpdateButton(true);
					form.lyrTabs().tabNewQuestion().btnSave().setVisible(false);
					form.lyrTabs().tabNewQuestion().btnCancel().setVisible(true);
					form.lyrTabs().tabNewQuestion().btnCancel().setText("OK");
				}
	
				if (isScoringAssessmentQuestion())
				{
					enableUpdateButton(false);
				}
				else
				{
					enableUpdateButton(true);
				}
				enableReturnToLink(false);
			}
			else
			{											
				enableReturnToLink(form.lyrTabs().tabNewQuestion().isHeaderEnabled());
				enableUpdateButton(true);
				if(form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().isVisible())
					form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().setEnabled(false);
				form.lyrTabs().tabNewQuestion().btnSave().setVisible(false);
				form.lyrTabs().tabNewQuestion().btnCancel().setVisible(false);
			}
		}

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.lyrTabs().tabNewQuestion().lyrDetails().tabTaxonomy().customTaxonomy().setComponentMode(FormMode.EDIT);
			//WDEV-1246 
			form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().chkIsQuestion().setEnabled(isDialog() == false || isInvestigationQuestion() || isCategoryQuestion() || isServiceQuestions()?isNewQuestion():false);
			
			form.lyrTabs().tabNewQuestion().btnCancel().setText("Cancel");
			
			if(isStatusActive())
			{
				removeStatusLookup(PreActiveActiveInactiveStatus.PREACTIVE);
				enableQualifyingControls(false);
				enableNonQualifyingControls(true);
			}
			else if(isStatusInactive())
			{
				PreActiveActiveInactiveStatusCollection statusColl = new PreActiveActiveInactiveStatusCollection();
				statusColl.add(PreActiveActiveInactiveStatus.PREACTIVE);
				statusColl.add(PreActiveActiveInactiveStatus.ACTIVE);
				removeStatusLookup(statusColl);
				enableQualifyingControls(false);
				enableNonQualifyingControls(false);
			}
			else
			{
				enableQualifyingControls(true);
				enableNonQualifyingControls(true);
			}
		}
		enableDPPSpecificControls();
		enableContextMenu();
		setDefaultButton();
	}
	// --------------------- Private Methods ---------------------
	private void populateControlsFromData(QuestionInformationVo voQuestionInformation)
	{
		if(voQuestionInformation != null)
		{
			form.getLocalContext().setInactiveAnswerTypes(null);
			IntRange ageRange = new IntRange(voQuestionInformation.getAgeRangeMin(), voQuestionInformation.getAgeRangeMax());
			form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().irbAgeRange().setValue(ageRange);
			populateClassification(voQuestionInformation);
			//populateKeywords(voQuestionInformation);
			populateAnswerTypes(voQuestionInformation);
			super.populateScreenFromData(voQuestionInformation);
			form.lyrTabs().tabNewQuestion().lyrDetails().tabTaxonomy().customTaxonomy().setValue(voQuestionInformation.getTaxonomyMap());
			form.lyrTabs().tabNewQuestion().lyrDetails().tabLegend().richTextLegend().setValue(voQuestionInformation.getLegendText());
		}
	}

	private void populateClassification(QuestionInformationVo voQInfo)
	{
		if (voQInfo != null && voQInfo.getClassificationIsNotNull())
		{
			QuestionClassification qClassInfo;
			TreeNode node;
			for (int j = 0; j < voQInfo.getClassification().size(); j++)
			{
				qClassInfo = voQInfo.getClassification().get(j);
				for (int i = 0; i < form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().getNodes().size(); i++)
				{
					node = form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().getNodes().get(i);
					if (qClassInfo.equals(node.getValue()))
						node.setChecked(true);

					if (node.getNodes() != null && node.getNodes().size() > 0)
						setClassificationValue(qClassInfo, node);
				}
			}
		}
	}

	private void setClassificationValue(QuestionClassification voQInfo, TreeNode parentNode)
	{
		TreeNode childNode;
		for (int i = 0; parentNode != null && i < parentNode.getNodes().size(); i++)
		{
			childNode = parentNode.getNodes().get(i);
			if (voQInfo.equals(childNode.getValue()))
				childNode.setChecked(true);
			if (childNode.getNodes() != null && childNode.getNodes().size() > 0)
				setClassificationValue(voQInfo, childNode);
		}
	}

	private void populateAnswerTypes(QuestionInformationVo voQInfo)
	{
		form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().clear();
		for (int i = 0; voQInfo.getAnswerTypesIsNotNull() && i < voQInfo.getAnswerTypes().size(); i++)
		{
			// Add the active only
			if (voQInfo.getAnswerTypes().get(i).getActiveStatusIsNotNull() && voQInfo.getAnswerTypes().get(i).getActiveStatus().booleanValue())
			{
				createDynamicGridRow(voQInfo.getAnswerTypes().get(i));
			}
		}

		if (isScoringAssessmentQuestion() && form.getGlobalContext().Core.getSelectedAssessmentQuestionIsNotNull() && form.getGlobalContext().Core.getSelectedAssessmentQuestion().getScoringAnswerTypeIsNotNull())
			setDefaultDynamicGridCheckBox(form.getGlobalContext().Core.getSelectedAssessmentQuestion().getScoringAnswerType());
	}

	private QuestionClassificationCollection getClassification()
	{
		QuestionClassificationCollection coll = new QuestionClassificationCollection();
		TreeNode parentNode, childNode;
		for (int i = 0; i < form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().getNodes().size(); i++)
		{
			parentNode = form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().getNodes().get(i);
			if (parentNode.isChecked())
				coll.add((QuestionClassification) parentNode.getValue());
			for (int j = 0; parentNode != null && j < parentNode.getNodes().size(); j++)
			{
				childNode = parentNode.getNodes().get(j);
				if (childNode.isChecked())
					coll.add((QuestionClassification) childNode.getValue());
			}
		}
		return coll;
	}

	private QuestionAnswerTypeVoCollection getAnswerTypes(QuestionAnswerTypeVoCollection collection, boolean active)
	{
		// Get the active ones - from the grid
		//WDEV-3332 
		QuestionAnswerTypeVoCollection voColl = new QuestionAnswerTypeVoCollection();//collection != null ? collection : new QuestionAnswerTypeVoCollection();
		for (int i = 0; i < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().size(); i++)
		{
			QuestionAnswerTypeVo voQAnswerType = null;
			Object objVal = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().get(i).getValue();
			if (objVal instanceof QuestionAnswerTypeVo)
				voQAnswerType = (QuestionAnswerTypeVo) objVal;

			if (voQAnswerType != null)
				voColl.add(voQAnswerType);
		}

		if(active == false)
		{
			// Add the inactive ones
			QuestionAnswerTypeVoCollection voInactiveColl = form.getLocalContext().getInactiveAnswerTypes();
			QuestionAnswerTypeVo voQAnswType;
			for (int i = 0; voInactiveColl != null && i < voInactiveColl.size(); i++)
			{
				voQAnswType = voInactiveColl.get(i);
				voColl.add(voQAnswType);
			}
		}
		
		return voColl;
	}
	
	private void loadClassificationTree()
	{
		form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().clear();
		/*if (isPrimaryQuestion() == false)
			return;*/
		QuestionClassificationCollection classColl = LookupHelper.getQuestionClassification(domain.getLookupService());
		// Load top parents
		LookupInstVo[] roots = classColl.getRoots();
		for (int i = 0; roots != null && i < roots.length; i++)
		{
			TreeNode node = form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().getNodes().add(roots[i], roots[i].toString());
			node.setExpanded(true);
			node.setCheckBoxVisible(false);
			loadChildren(node, roots[i]);
		}
	}

	@SuppressWarnings("unchecked")
	private void loadChildren(TreeNode parentNode, LookupInstVo parent)
	{
		java.util.ArrayList list = parent.getChildInstances();
		QuestionClassification child = null;
		TreeNode childNode;
		for (int i = 0; list != null && i < list.size(); i++)
		{
			child = (QuestionClassification) list.get(i);
			childNode = parentNode.getNodes().add(child, child.toString());
			childNode.setCheckBoxVisible(true);
			loadChildren(childNode, child);
		}
	}

	private grdSelectedRow getCurrentRow(QuestionInformationVo voQInfoShort)
	{
		grdSelectedRow row = form.lyrTabs().tabSearchQuestion().grdSelected().getRowByValue(voQInfoShort);
		if (row == null)
			row = form.lyrTabs().tabSearchQuestion().grdSelected().getRows().newRow(true);

		return row;
	}

	private void enableCmbClassification()
	{
		boolean isClassSelected = form.lyrTabs().tabSearchQuestion().GroupFilter().getValue().equals(GroupFilterEnumeration.rdoAllClassification);
		form.lyrTabs().tabSearchQuestion().cmbClassification().setEnabled(isClassSelected);
		if (isClassSelected == false)
			form.lyrTabs().tabSearchQuestion().cmbClassification().setValue(null);
	}
	
	private void closeDialog(DialogResult result)
	{
		engine.close(result);
	}

	private void clearQuestionControls()
	{
		clearClassification();
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().irbAgeRange().setValue(new IntRange());
		form.lyrTabs().tabNewQuestion().lyrDetails().tabKeywords().grdKeywords().getRows().clear();
		form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().clear();
		form.lyrTabs().tabNewQuestion().lyrDetails().tabTaxonomy().customTaxonomy().clear();
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().txtURL().setValue(null);
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().txtProtocol().setValue(null);
		form.lyrTabs().tabNewQuestion().lyrDetails().tabLegend().richTextLegend().setValue("");
		super.clearScreen();
	}
	
	private void clearSearchCriteria()
	{
		clearGridAvailable();
		form.lyrTabs().tabSearchQuestion().txtSearchText().setValue("");
		form.lyrTabs().tabSearchQuestion().cmbClassification().setValue(null);
	}

	private void clearSearchListCriteria()
	{
		clearGridListQuestions();
		form.lyrTabs().tabListQuestions().txtTextList().setValue("");
		form.lyrTabs().tabListQuestions().cmbClassificationList().setValue(null);
	}

	private void clearClassification()
	{
		for (int i = 0; i < form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().getNodes().size(); i++)
		{
			for (int j = 0; j < form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().getNodes().get(i).getNodes().size(); j++)
				form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().getNodes().get(i).getNodes().get(j).setChecked(false);
		}
	}

	private String getParentTooltip(QuestionAnswerTypeVo voQAT)
	{
		if (voQAT != null)
		{
			StringBuffer sb = new StringBuffer();
			sb.append("*Active: *");
			sb.append(voQAT.getActiveStatusIsNotNull() && voQAT.getActiveStatus().booleanValue() ? "Active" : "Inactive");
			sb.append(CR);

			if(voQAT.getAnswerWidthIsNotNull())
			{
				sb.append("*Custom Width: *");
				sb.append(voQAT.getAnswerWidth());
				sb.append(CR);
			}
			
			if(voQAT.getMaxMultiselectAllowedIsNotNull())
			{
				sb.append("*Max. Multiselect: *");
				sb.append(voQAT.getMaxMultiselectAllowed());
				sb.append(CR);
			}
			
			if (voQAT.getSeparatorTextIsNotNull())
			{
				sb.append("*Separator Text: *");
				sb.append(voQAT.getSeparatorText());
				sb.append(CR);
			}

			if (voQAT.getIsMandatoryIsNotNull())
			{
				sb.append("*Mandatory: *");
				sb.append(voQAT.getIsMandatory().booleanValue() ? "True" : "False");
				sb.append(CR);
				if (voQAT.getMandatoryValMessageIsNotNull())
				{
					sb.append("*Mandatory Message: *");
					sb.append(voQAT.getMandatoryValMessage());
					sb.append(CR);
				}
			}

			return new Textile().process(sb.toString());
		}
		return "";
	}

	private String getChildTooltip(AnswerOptionVo voAnswerOption)
	{
		if (voAnswerOption != null)
		{
			StringBuffer sb = new StringBuffer();
			if (voAnswerOption.getOptionDescriptionIsNotNull())
			{
				sb.append("*Description: *");
				sb.append(voAnswerOption.getOptionDescription());
				sb.append(CR);
			}
			if (isScoringAssessmentQuestion() && voAnswerOption.getScoreIsNotNull())
			{
				sb.append("*Score: *");
				sb.append(voAnswerOption.getScore());
				sb.append(CR);
			}
			return new Textile().process(sb.toString());
		}

		return "";
	}

	private void createDynamicGridRow(QuestionAnswerTypeVo voAnswType)
	{
		createDynamicGridRow(voAnswType, null);
	}

	private void createDynamicGridRow(QuestionAnswerTypeVo voQAT, DynamicGridRow row)
	{
		DynamicGridColumn colAnswerType = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().getByIdentifier(COLANSWERTYPE);
		if (colAnswerType == null)
		{
			colAnswerType = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().newColumn("Answer Type", COLANSWERTYPE);
			colAnswerType.setWidth(650);
		}

		DynamicGridColumn colScorAnswer = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().getByIdentifier(COLSCORANSWER);
		if (colScorAnswer == null)
		{
			colScorAnswer = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().newColumn("Scoring Answer", COLSCORANSWER);
			colScorAnswer.setWidth(isScoringAssessmentQuestion() ? -1 : 0);
			colScorAnswer.setAlignment(Alignment.CENTER);
		}

		if (voQAT != null)
		{
			DynamicGridRow parentRow = row != null ? row : form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().newRow();
			if (voQAT.getAnswerTypeIsNotNull())
			{
				parentRow.setExpandedImage(voQAT.getAnswerType().getImage());
				parentRow.setCollapsedImage(voQAT.getAnswerType().getImage());
			}
			parentRow.setSelectable(true);
			parentRow.setValue(voQAT);
			parentRow.setExpanded(true);
			parentRow.getRows().clear();

			DynamicGridCell parentCell = parentRow.getCells().get(getDynamicColumn(COLANSWERTYPE));
			if (parentCell == null)
				parentCell = parentRow.getCells().newCell(colAnswerType, DynamicCellType.STRING);
			parentCell.setValue(voQAT.getAnswerTypeIsNotNull() ? voQAT.getAnswerType().toString() : "");
			parentCell.setTooltip(getParentTooltip(voQAT));
			parentCell.setReadOnly(true);

			// Checkbox
			if (isScoringAssessmentQuestion() && isSingleOrMultiSelect(voQAT.getAnswerType()))
			{
				DynamicGridCell boolCell = parentRow.getCells().newCell(colScorAnswer, DynamicCellType.BOOL);
				boolCell.setReadOnly(form.getMode().equals(FormMode.VIEW));
				boolCell.setAutoPostBack(true);
			}
			// Children
			for (int i = 0; voQAT.getOptionsIsNotNull() && i < voQAT.getOptions().size(); i++)
			{
				DynamicGridRow childRow = parentRow.getRows().newRow();
				childRow.setSelectable(false);

				DynamicGridCell childCell = childRow.getCells().newCell(colAnswerType, DynamicCellType.STRING);
				childCell.setValue(voQAT.getOptions().get(i).toString());
				childCell.setTooltip(getChildTooltip(voQAT.getOptions().get(i)));
				childCell.setReadOnly(true);
			}
		}
	}

	private DynamicGridColumn getDynamicColumn(String colAnswer)
	{
		if (colAnswer != null)
		{
			int colIndex = Integer.valueOf(colAnswer).intValue();
			if (colIndex < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().size())
				return form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().get(colIndex);
		}
		return null;
	}

	private void setDefaultDynamicGridCheckBox(QuestionAnswerTypeVo voAnswType)
	{
		setDefaultDynamicGridCheckBox(voAnswType, false);
	}

	// Set the Default checkbox where is the only single or multiselect row
	private void setDefaultDynamicGridCheckBox(QuestionAnswerTypeVo voAnswType, boolean selectFirst)
	{
		if (selectFirst && countDynRowBoolean() > 1)
			return;

		if (isScoringAssessmentQuestion() && isSingleOrMultiSelect(voAnswType.getAnswerType()))
		{
			for (int i = 0; i < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().size(); i++)
			{
				DynamicGridRow row = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().get(i);
				for (int j = 0; j < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().size(); j++)
				{
					DynamicGridCell cell = row.getCells().get(form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().get(j));
					if (cell != null && cell.getType() == DynamicCellType.BOOL)
					{
						cell.setValue(new Boolean(true));
						return;
					}
				}
			}
		}
	}

	// Count the Rows that have a boolean cell
	private int countDynRowBoolean()
	{
		int rowCount = 0;
		for (int i = 0; i < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().get(i);
			for (int j = 0; j < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().size(); j++)
			{
				DynamicGridCell cell = row.getCells().get(form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getColumns().get(j));
				if (cell != null && cell.getType() == DynamicCellType.BOOL)
				{
					rowCount++;
				}
			}
		}
		return rowCount;
	}

	private DynamicGridRow getDynamicRowByValue(QuestionAnswerTypeVo voAnswType)
	{
		for (int i = 0; i < form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().size(); i++)
		{
			if (voAnswType.equals(form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().get(i).getValue()))
				return form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().getRows().get(i);
		}
		return null;
	}

	private boolean isDialogOpenedAsView()
	{
		if (form.getGlobalContext().Core.getQuestionFormModeIsNotNull())
			return form.getGlobalContext().Core.getQuestionFormMode().equals(FormMode.VIEW);

		return false;
	}

	// Opened in VIEW or EDIT mode
	private boolean isDialogOpenedAsViewOrEdit()
	{
		return form.getGlobalContext().Core.getQuestionFormModeIsNotNull();
	}

	private boolean isNewQuestion()
	{
		return form.getLocalContext().getIsNewQuestionIsNotNull() && form.getLocalContext().getIsNewQuestion().booleanValue();
	}

	private boolean isRecordActive()
	{
		QuestionInformationVo voQInfo = form.getLocalContext().getVoQuestionInformation();
		return voQInfo != null && voQInfo.getStatusIsNotNull() && voQInfo.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE);
	}

	private boolean isScoringAssessmentQuestion()
	{
		QuestionType questionType = form.getGlobalContext().Core.getQuestionType();
		if (questionType != null)
			return isUserAssessmentQuestion() && questionType.equals(QuestionType.SCORINGASSESSEMNTQUESTION);
		return false;
	}
	
	private boolean isNonScoringAssessmentQuestion()
	{
		QuestionType questionType = form.getGlobalContext().Core.getQuestionType();
		if (questionType != null)
			return isUserAssessmentQuestion() && questionType.equals(QuestionType.PRIMARY);
		return false;
	}

	private boolean isPrimaryQuestion()
	{
		QuestionType questionType = form.getGlobalContext().Core.getQuestionType();
		if (questionType != null)
		{
			QuestionType parentQType = questionType.getParent() != null ? questionType.getParent() : questionType;
			if (parentQType.equals(QuestionType.PRIMARY))
				return true;
		}
		return false;
	}

	private boolean isSearchBtnClickedOnce()
	{
		Boolean searchClicked = form.getLocalContext().getIsSearchPerformed();
		return searchClicked != null && searchClicked.booleanValue();
	}

	private boolean isSingleOrMultiSelect(QuestionAnswerType answerType)
	{
		return answerType != null && (answerType.equals(QuestionAnswerType.PICKLIST) || answerType.equals(QuestionAnswerType.MULTISELECT));
	}
	private void setPreviousForm(FormName formName)
	{
		form.getLocalContext().setParentForm(formName);		
	}
	private boolean isUserAssessmentQuestion()
	{
		return form.getLocalContext().getParentFormIsNotNull() && form.getLocalContext().getParentForm().equals(form.getForms().Assessment.UserAssessmentNew);
	}
	private boolean isCategoryQuestion()
	{
		return form.getLocalContext().getParentFormIsNotNull() && form.getLocalContext().getParentForm().equals(form.getForms().OCRR.CategoryQuestions);
	}
	private boolean isServiceQuestions()
	{
		return form.getLocalContext().getParentFormIsNotNull() && form.getLocalContext().getParentForm().equals(form.getForms().OCRR.ServiceQuestions);
	}
	private boolean isGraphicAssessmentQuestion()
	{
		return form.getLocalContext().getParentFormIsNotNull() && form.getLocalContext().getParentForm().equals(form.getForms().Assessment.GraphicAssessmentNew);
	}
	private boolean isInvestigationQuestion()
	{
		FormName formName = form.getLocalContext().getParentForm(); 
		if(formName != null)
		{
			return (formName.equals(form.getForms().OCRR.TestEdit) || formName.equals(form.getForms().OCRR.ProfileEdit));
		}
		
		return false;
	}
	private boolean isStatusActive()
	{
		QuestionInformationVo voQInfo = form.getLocalContext().getVoQuestionInformation();
		if(voQInfo != null)
		{
			PreActiveActiveInactiveStatus status = voQInfo.getStatus();
			return status != null && status.equals(PreActiveActiveInactiveStatus.ACTIVE);
		}
		return false;
	}
	
	private boolean isStatusInactive()
	{
		QuestionInformationVo voQInfo = form.getLocalContext().getVoQuestionInformation();
		if(voQInfo != null)
		{
			PreActiveActiveInactiveStatus status = voQInfo.getStatus();
			return status != null && status.equals(PreActiveActiveInactiveStatus.INACTIVE);
		}
		
		return false;
	}
	private boolean isStatusActiveOrInactive()
	{
		return isStatusActive() || isStatusInactive();
	}

	//Remove lookup - e.g. the Preactive Lookup as an Active/Inactive status cannot be set to Preactive
	private void removeStatusLookup(PreActiveActiveInactiveStatus statusRemoved)
	{
		PreActiveActiveInactiveStatus status = form.lyrTabs().tabNewQuestion().cmbStatus().getValue();
		form.lyrTabs().tabNewQuestion().cmbStatus().clear();
		PreActiveActiveInactiveStatusCollection  lookupColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		for(int i=0; lookupColl  != null && i<lookupColl.size(); i++)
		{
			if(!lookupColl.get(i).equals(statusRemoved))
				form.lyrTabs().tabNewQuestion().cmbStatus().newRow(lookupColl.get(i), lookupColl.get(i).toString(), lookupColl.get(i).getImage(), lookupColl.get(i).getColor());
		}
		form.lyrTabs().tabNewQuestion().cmbStatus().setValue(status);
	}
	
	private void removeStatusLookup(PreActiveActiveInactiveStatusCollection statusColl)
	{
		PreActiveActiveInactiveStatus status = form.lyrTabs().tabNewQuestion().cmbStatus().getValue();
		form.lyrTabs().tabNewQuestion().cmbStatus().clear();
		PreActiveActiveInactiveStatusCollection  lookupColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		for(int i=0; lookupColl  != null && statusColl != null && i<lookupColl.size(); i++)
		{
			if(statusColl.indexOf(lookupColl.get(i)) < 0)
				form.lyrTabs().tabNewQuestion().cmbStatus().newRow(lookupColl.get(i), lookupColl.get(i).toString(), lookupColl.get(i).getImage(), lookupColl.get(i).getColor());
		}
		form.lyrTabs().tabNewQuestion().cmbStatus().setValue(status);
	}
	
	private void enableQualifyingControls(boolean value)
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.lyrTabs().tabNewQuestion().txtShortText().setEnabled(value);
			form.lyrTabs().tabNewQuestion().txtText().setEnabled(value);
			form.lyrTabs().tabNewQuestion().dyngrdAnswerTypes().setReadOnly(!value);
			form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().cmbGenre().setEnabled(value);
		}
	}
	
	private void enableNonQualifyingControls(boolean value)
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().irbAgeRange().setEnabled(value);
			form.lyrTabs().tabNewQuestion().lyrDetails().tabKeywords().grdKeywords().setReadOnly(!value);
			//form.lyrTabs().tabNewQuestion().lyrDetails().tabTaxonomy().customTaxonomy().setReadOnly(!value);
			form.lyrTabs().tabNewQuestion().lyrDetails().tabClasification().treClassification().setEnabled(value);
		}
	}
	
	private char getDialogMode()
	{
		String mode = form.getGlobalContext().Core.getUserAssessmentAction();

		if (mode != null)
			return mode.charAt(0);
		
		//Default - not Use
		return '0';
	}
	
	private boolean isAssessmentEditMode()
	{
		return getDialogMode() == 'E';
	}
	private boolean isDialog()
	{
		return engine.isDialog();
	}
	private boolean isSavedQuestionActive()
	{
		QuestionInformationVo voQInfo = form.getLocalContext().getVoQuestionInformation();
		return voQInfo != null && voQInfo.getStatusIsNotNull() && voQInfo.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE);
	}
	private void addSavedQuestionAsEdited(QuestionInformationVo voQInfo)
	{
		if(isDialog())
		{
			ims.core.vo.QuestionInformationVoCollection voColl = form.getGlobalContext().Core.getEditedQuestions();
			if(voColl == null)
				voColl = new ims.core.vo.QuestionInformationVoCollection();
			if(voColl.indexOf(voQInfo) < 0)
				voColl.add(voQInfo);
			
			form.getGlobalContext().Core.setEditedQuestions(voColl);
		}
	}
	private void clearContext()
	{
		form.getGlobalContext().Core.setEditedQuestions(null);
	}
	private void enableReturnToLink(boolean value)
	{
		if(form.getMode().equals(FormMode.VIEW))
			form.lnkReturnToList().setVisible(value);
	}
	
	private void enableUpdateButton(boolean value)
	{
		if(form.getMode().equals(FormMode.VIEW))
			form.lyrTabs().tabNewQuestion().btnUpdate().setVisible(value);
	}
	
	private void enableDPPSpecificControls()
	{
		if(isDpp())
		{
			setVisibleDppSpecificControls(true);
			if(form.getMode().equals(FormMode.EDIT))
			{
				setEnableDppSpecificControls(true);
			}
			else
			{	
				setEnableDppSpecificControls(false);	
			}
		}
		else
		{
			setVisibleDppSpecificControls(false);
		}
	}

	private void setVisibleDppSpecificControls(boolean value)
	{
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().lblUrl().setVisible(value);
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().txtURL().setVisible(value);
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().lblProtocol().setVisible(value);
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().txtProtocol().setVisible(value);
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().imbPreviewUrl().setVisible(value);
	}
	
	private void setEnableDppSpecificControls(boolean value)
	{
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().txtURL().setEnabled(value);
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().txtProtocol().setEnabled(value);
		form.lyrTabs().tabNewQuestion().lyrDetails().tabGeneral().imbPreviewUrl().setEnabled(value);
	}
	private boolean isDpp()
	{
		UserDefinedAssessmentType udfAssType = form.getGlobalContext().Core.getUserDefinedAssessmentType();
		return udfAssType != null && udfAssType.equals(UserDefinedAssessmentType.DPP);
	}
	
	private void setDefaultButton()
	{
		if(form.lyrTabs().tabListQuestions().isVisible())
		{
			form.lyrTabs().tabListQuestions().imbList().setAsDefaultButton();
		}
		else if(form.lyrTabs().tabSearchQuestion().isVisible())
		{
			form.lyrTabs().tabSearchQuestion().imbSearch().setAsDefaultButton();
		}
		else if(form.lyrTabs().tabNewQuestion().isVisible())
		{
			if(form.getMode().equals(FormMode.EDIT))
				form.lyrTabs().tabNewQuestion().btnSave().setAsDefaultButton();
			else
				form.lyrTabs().tabNewQuestion().btnUpdate().setAsDefaultButton();
		}
	}

	private void showTabListQuestions()
	{
		form.lyrTabs().showtabListQuestions();
		setDefaultButton();
	}
	
	private void showTabNewQuestion()
	{
		form.lyrTabs().showtabNewQuestion();
		form.lyrTabs().tabNewQuestion().lyrDetails().showtabGeneral();
		setDefaultButton();
	}
	
	private void showTabSearchQuestion()
	{
		form.lyrTabs().showtabSearchQuestion();
		setDefaultButton();
	}
	// ------------------ End Private Methods ------------------------------
}
