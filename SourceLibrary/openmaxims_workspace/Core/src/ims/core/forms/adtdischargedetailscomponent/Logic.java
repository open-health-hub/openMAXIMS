//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4758.16736)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.adtdischargedetailscomponent;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.adtdischargedetailscomponent.GenForm.grdWardTransferHistoryRow;
import ims.core.forms.patientsearch.Logic.DobComparator;
import ims.core.vo.AdmissionDetailVo;
import ims.core.vo.DischargedEpisodeVo;
import ims.core.vo.ExtendedDischargeDetailVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.PatientShort;
import ims.core.vo.TransferHistoryVo;
import ims.core.vo.enums.ADTAdmissionDetailEvent;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onBtnUndoDischargeClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//wdev-16428
		PatientShort tempVo = domain.getPatientShort(form.getLocalContext().getPatientShort());
		if( tempVo != null && tempVo.getWardIsNotNull() )
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return;
		}
		
		String patientName = form.getLocalContext().getPatientShortIsNotNull() && form.getLocalContext().getPatientShort().getNameIsNotNull() ? form.getLocalContext().getPatientShort().getName().toString():"";
		//String wardName = form.getLocalContext().getDischargedEpisodeIsNotNull() && form.getLocalContext().getDischargedEpisode().getPasEventIsNotNull() && form.getLocalContext().getDischargedEpisode().getPasEvent().getLocationIsNotNull() && form.getLocalContext().getDischargedEpisode().getPasEvent().getLocation().getNameIsNotNull() ? form.getLocalContext().getDischargedEpisode().getPasEvent().getLocation().getName():"" ; 
		String wardName = form.getLocalContext().getCareContextShortVoIsNotNull() && form.getLocalContext().getCareContextShortVo().getPasEventIsNotNull() && form.getLocalContext().getCareContextShortVo().getPasEvent().getLocationIsNotNull() && form.getLocalContext().getCareContextShortVo().getPasEvent().getLocation().getNameIsNotNull() ? form.getLocalContext().getCareContextShortVo().getPasEvent().getLocation().getName():"" ;
		form.getLocalContext().setConfimUndoDischargeMsgBoxId(engine.showMessage( "Confirm " + patientName + " is to be re-instated into " + wardName,"Please Confirm", MessageButtons.YESNO, MessageIcon.QUESTION));
	
		
	}
	//wdev-16428
	private boolean undoDischarge()
	{
		DischargedEpisodeVo record = form.getLocalContext().getDischargedEpisode();
		
		DischargedEpisodeVo tempVo = domain.getDischargeEpisodeById(record);
		if( tempVo == null || (record != null && tempVo != null && tempVo.getVersion_DischargedEpisode() != record.getVersion_DischargedEpisode()))
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		PatientShort tempvo = form.getLocalContext().getPatientShort();
		String[] errors  = record.validate(tempvo.validate());
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try 
		{
			domain.restoreCareContextAndDischarge(form.getLocalContext().getCareContext(), form.getLocalContext().getPatientShort(),form.getLocalContext().getDischargedEpisode());
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}
	
	/*protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		editInstance();
		form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.EDIT);
		form.fireCustomControlValueChanged();
		
	}*/
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.EDIT);
		form.fireCustomControlValueChanged();
		newInstance();
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( form.getLocalContext().getIsOpenedFromInpatientListFormIsNotNull() && form.getLocalContext().getIsOpenedFromInpatientListForm().equals(Boolean.TRUE))
			form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.CANCELANDCLOSE);
		else
			form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.CANCEL);
		
		
		form.fireCustomControlValueChanged();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( save())
		{
			if( form.getLocalContext().getIsOpenedFromInpatientListFormIsNotNull() && form.getLocalContext().getIsOpenedFromInpatientListForm().equals(Boolean.TRUE))
				form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.SAVEANDCLOSE);
			else
				form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.SAVE);
			form.fireCustomControlValueChanged();
		}
		
	}
	//wdev-16427
	private boolean save()
	{
		String[] errors = validateUIRules();
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}
		DischargedEpisodeVo record = populateDataFromScreen(form.getLocalContext().getDischargedEpisode());
		
		if(record != null && record.getID_DischargedEpisodeIsNotNull() )
		{
    		DischargedEpisodeVo temprecord = domain.getDischargeEpisodeById(record);
    		
    		if( temprecord == null )
    		{
    			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
    			return true;
    		}
		}
		errors  = record.validate();
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.saveRecord(record, form.getLocalContext().getPatientShort(), form.getLocalContext().getCareContext());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		
		
		return true;
	}
	//wdev-16427
	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();

		
		if( form.dtimDischargeDateTime().getValue() == null )
		{
			uiErrors.add("Discharge Date/Time is mandatory !");//WDEV-16843
		}
		else
		{
			if( form.dtimDischargeDateTime().getValue().isGreaterThan(new DateTime()))
			{
				uiErrors.add("Discharge Date/Time cannot be set it in the future");
			}
			else if(form.getLocalContext().getAdmissionDetailIsNotNull() && form.getLocalContext().getAdmissionDetail().getTransferHistoryIsNotNull()  && form.getLocalContext().getAdmissionDetail().getTransferHistory().size() > 0 ) //wdev-16770
			{
				
				DateTime dtimD = getTheLastWardTransferDateTime(form.getLocalContext().getAdmissionDetail());
				if( dtimD != null)
				{
				
    				Date dtD = dtimD.getDate();
    				Time tD = dtimD.getTime();
    				
    				Date dtD1 = form.dtimDischargeDateTime().getValue().getDate();
    				Time tD1 = form.dtimDischargeDateTime().getValue().getTime();
    				if( dtD1.isLessThan(dtD))
    					uiErrors.add("Discharge Date/Time must be later than or equal to the last Ward transfer Date/Time");
    				else if(dtD1.equals(dtD))
    				{
    					if( tD1.isLessThan(tD))
    						uiErrors.add("Discharge Date/Time must be later than or equal to the last Ward transfer Date/Time");
    				}
				}
			}
			else if(form.getLocalContext().getAdmissionDetailIsNotNull() && form.dtimDischargeDateTime().getValue().isLessThan(form.getLocalContext().getAdmissionDetail().getAdmissionDateTime()))
			{
				uiErrors.add("Discharge Date/Time must be later than or equal to the Admission Date/Time");
			}
		}
		
		
		if( form.cmbDischargeReason().getValue() == null)
		{
			uiErrors.add("Discharge Reason is mandatory.");
		}
		
		String[] result = new String[uiErrors.size()];
		uiErrors.toArray(result);
		return result;
	}
	//wdev-16427
	public void initialize(ims.core.vo.PatientShort patient, ims.core.vo.EpisodeofCareShortVo episodeofcare, ims.core.vo.CareContextShortVo careContext, ims.core.vo.AdmissionDetailVo admission, Boolean isOpenedFromInpatientListForm)
	{
		form.getLocalContext().setConfimUndoDischargeMsgBoxId(null);
		
		form.getLocalContext().setIsOpenedFromInpatientListForm(isOpenedFromInpatientListForm);
		form.getLocalContext().setAdmissionDetail(admission);
		form.getLocalContext().setCareContextShortVo(careContext);
		if( careContext != null)
		{
			form.getLocalContext().setCareContext(domain.getCareContextById(careContext));
			
		}
		form.getLocalContext().setPatientShort(patient);
		
		if( form.getLocalContext().getCareContextIsNotNull() && form.getLocalContext().getCareContext().getPasEventIsNotNull() )
		{
			AdmissionDetailVo lastAdmission = domain.getLastAdmissionForPatient(patient);
			AdmissionDetailVo careContextAdmission = domain.getAdmissionForSelectedCareContext(form.getLocalContext().getCareContext());
			if( lastAdmission != null && careContextAdmission != null && lastAdmission.getID_AdmissionDetail().equals(careContextAdmission.getID_AdmissionDetail()))
				form.getLocalContext().setShowUndoDischargeButton(true);
			else
				form.getLocalContext().setShowUndoDischargeButton(false);
		}
		else
			form.getLocalContext().setShowUndoDischargeButton(false);
		
		open();
		
		updateControlsState();
		
	}
	private DischargedEpisodeVo populateDataFromScreen(DischargedEpisodeVo record)
	{
		if( record == null )
			record = new DischargedEpisodeVo();
		record.setDischargeDateTime(form.dtimDischargeDateTime().getValue());
		if( !record.getExtendedDetailsIsNotNull())
		{
			ExtendedDischargeDetailVo tempVo = new ExtendedDischargeDetailVo();
			record.setExtendedDetails(tempVo);
		}
		record.getExtendedDetails().setDischargeReason(form.cmbDischargeReason().getValue());
		record.getExtendedDetails().setCauseOfDeath(form.txtCauseOfDeath().getValue());
		record.setAdmissionDetail(form.getLocalContext().getAdmissionDetail());
		
		if( form.getLocalContext().getCareContextShortVoIsNotNull() )
		{
			record.setPasEvent(domain.getPasEventVo(form.getLocalContext().getCareContextShortVo().getPasEvent()));		//wdev-16770
		}
		
		return record;
		
	}
	private void open()
	{
		clearControls();
		if( form.getLocalContext().getAdmissionDetailIsNotNull() )
		{
			form.getLocalContext().setDischargedEpisode(domain.getDischargeEpisodeByAdmissionDetail(form.getLocalContext().getAdmissionDetail()));
			populateScreenFromData(form.getLocalContext().getDischargedEpisode(),form.getLocalContext().getAdmissionDetail());
		}
		
		form.setMode(FormMode.VIEW);
	}
	
	private void populateScreenFromData( DischargedEpisodeVo adtDiscEp, ims.core.vo.AdmissionDetailVo admission)
	{
		if( adtDiscEp != null )
		{
			form.dtimDischargeDateTime().setValue(adtDiscEp.getDischargeDateTime());
			form.cmbDischargeReason().setValue(adtDiscEp.getExtendedDetailsIsNotNull() ? adtDiscEp.getExtendedDetails().getDischargeReason():null);
			form.txtCauseOfDeath().setValue(adtDiscEp.getExtendedDetailsIsNotNull() ? adtDiscEp.getExtendedDetails().getCauseOfDeath():"");
		}
		
		if( admission != null && admission.getTransferHistoryIsNotNull() && admission.getTransferHistory().size() > 0)
		{
			for( int i = 0; i < admission.getTransferHistory().size(); i++ )
			{
			
				TransferHistoryVo tempVo = admission.getTransferHistory().get(i);
				grdWardTransferHistoryRow rowW = form.grdWardTransferHistory().getRows().newRow();
				rowW.setColumnWard(tempVo.getTransferringFromWardIsNotNull() ? tempVo.getTransferringFromWard().getName():"");
				rowW.setColumnDateOfTransfer(tempVo.getAcceptTransferDateTimeIsNotNull() ? tempVo.getAcceptTransferDateTime().toString():"");
				rowW.setValue(tempVo);
				
			}
		}
		
	}
	private void clearControls()
	{
		form.dtimDischargeDateTime().setValue(null);
		form.cmbDischargeReason().setValue(null);
		form.txtCauseOfDeath().setValue(null);
		form.grdWardTransferHistory().getRows().clear();
	}
	
	
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}

	
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}
	//wdev-16427
	private void updateControlsState()
	{
		if( form.getMode().equals(FormMode.VIEW))
		{
			form.btnNew().setVisible(!form.getLocalContext().getDischargedEpisodeIsNotNull() && form.getLocalContext().getAdmissionDetailIsNotNull() && engine.hasRight(AppRight.MAXIMS_ADT_CAN_DISCHARGE));	
			//form.btnEdit().setVisible(form.getLocalContext().getDischargedEpisodeIsNotNull() && engine.hasRight(AppRight.MAXIMS_ADT_CAN_DISCHARGE));
			PatientShort tempVo = domain.getPatientShort(form.getLocalContext().getPatientShort());
			form.btnUndoDischarge().setVisible(form.getLocalContext().getShowUndoDischargeButton() && form.getLocalContext().getDischargedEpisodeIsNotNull()&& tempVo != null && !tempVo.getWardIsNotNull() && engine.hasRight(AppRight.CAN_UNDO_DISCHARGE) && Boolean.TRUE.equals(ConfigFlag.UI.MAXIMS_ADT_NO_INTERFACE.getValue())); //wdev-16428
		}
	}
	private void editInstance()
	{
		form.setMode(FormMode.EDIT);
	}
	private void newInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	
	public ADTAdmissionDetailEvent getSelectedEvent()
	{
		
		return form.getLocalContext().getSelectedEvent();
	}

	
	public void resetSelectedEvent()
	{
		
		form.getLocalContext().setSelectedEvent(null);
	}

	//wdev-16428
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if( form.getLocalContext().getConfimUndoDischargeMsgBoxIdIsNotNull() && form.getLocalContext().getConfimUndoDischargeMsgBoxId().intValue()==messageBoxId)
		{
			if( result.equals(DialogResult.YES))
			{
        		if( undoDischarge())
        		{
        			form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.UNDODISCHARGE);
        			form.fireCustomControlValueChanged();
        		}
			}
			else
			{
				form.getLocalContext().setSelectedEvent(ADTAdmissionDetailEvent.CANCEL);
    			form.fireCustomControlValueChanged();
			}
		}
		
	}
	//wdev-16770
	private DateTime getTheLastWardTransferDateTime(ims.core.vo.AdmissionDetailVo admission)
	{
		if( admission != null && admission.getTransferHistoryIsNotNull() && admission.getTransferHistory().size() > 0)
		{
			admission.getTransferHistory().sort(new DateTimeWardComparator(SortOrder.DESCENDING));
			return admission.getTransferHistory().get(0).getAcceptTransferDateTime();
		}
		return null;
	}
	//wdev-16770
	public class DateTimeWardComparator implements Comparator
	{
		private int direction = 1;
		
		public DateTimeWardComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DateTimeWardComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime pdate1 = null;
			DateTime pdate2 = null;
			if(ob1 instanceof TransferHistoryVo )
			{
				TransferHistoryVo ps1 = (TransferHistoryVo)ob1;
				pdate1 = ps1.getAcceptTransferDateTime();
			}
			if(ob2 instanceof TransferHistoryVo)
			{
				TransferHistoryVo ps2 = (TransferHistoryVo)ob2;
				pdate2 = ps2.getAcceptTransferDateTime();
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

	
}
