//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.20 build 40806.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.vitalsignsgcs;

import ims.core.vo.VSGlasgowComaScale;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.graphing.GraphingGlasgowComaScale;
import ims.framework.utils.graphing.GraphingPoint;
import ims.framework.utils.graphing.GraphingPointType;

public class Logic extends BaseLogic 
{
	protected void onFormOpen() throws FormOpenException
	{
		//WDEV-14429
		if(isVitalSignsGCSForTriage())
		{
			form.setMode(FormMode.VIEW);
		}
		
		form.grpShowBy().setValue(GenForm.grpShowByEnumeration.rdoByDay); 
		form.btnUpdate().setEnabled(false);
		//form.btnPrint().setEnabled(false);
		
		fillCombos();
		
		//graphing options
		form.chkEye().setValue(form.grhGCS().graphingOptions().glasgowComaScale.getDisplayEye());
		form.chkVerbal().setValue(form.grhGCS().graphingOptions().glasgowComaScale.getDisplayVerbal());
		form.chkMotor().setValue(form.grhGCS().graphingOptions().glasgowComaScale.getDisplayMotor());
		form.chkTotal().setValue(form.grhGCS().graphingOptions().glasgowComaScale.getDisplayTotal());
				
		if(form.getGlobalContext().Core.getVitalSign() != null  && form.getGlobalContext().Core.getVitalSign().getGlasgowComaScale() != null)
		{
			form.dteShowByDate().setValue(form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime() != null ? form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime().getDate() : null);//WDEV-13117
			form.getLocalContext().setvitalSign(form.getGlobalContext().Core.getVitalSign());
			displayRecord(form.getGlobalContext().Core.getVitalSign());
			form.btnUpdate().setEnabled(true);
			//form.btnPrint().setEnabled(true);
			listGlasgowComaScale();	
		}
		else
		{
			try {
				onRadioButtongrpShowByValueChanged();
			} catch (PresentationLogicException e) {
				throw new DomainRuntimeException();
			}
		}
		
		updatePrevNextButtons();
		dateIntervalStatus();//WDEV-13117
	}

	private void listGlasgowComaScale()
	{
		VitalSignsVoCollection voCollVitals = null;
		String subTitle = "";
		
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			voCollVitals = domain.listGCS(form.dteShowByDate().getValue(),form.getGlobalContext().Core.getCurrentCareContext());
			subTitle = "Glasgow Coma Scale for " + form.dteShowByDate().getValue().toString(DateFormat.STANDARD);
		}
		else
		{
			voCollVitals = domain.listGCS(form.dteFrom().getValue(),form.dteTo().getValue(),form.getGlobalContext().Core.getCurrentCareContext());
			subTitle = "Glasgow Coma Scale between " + form.dteFrom().getValue().toString(DateFormat.STANDARD) + " - " +  form.dteTo().getValue().toString(DateFormat.STANDARD);
		}
		 
		form.lblGcs().setValue(subTitle);
		form.grhGCS().clearAllPoints();
		
		form.grhGCS().showYAxisValues();
		
		form.grhGCS().setPrintHeaderInfo(subTitle + "\r\n" + form.getGlobalContext().Core.getPatientShort().getPatientInfo());
		
		VitalSignsVo voVitalSign;
		GraphingGlasgowComaScale point;
		if(voCollVitals != null)
		{
			voCollVitals.sort(SortOrder.ASCENDING);
			
			int nIndex = voCollVitals.size() - 1;
			
			for(int i=0;i<voCollVitals.size();i++)
			{
				voVitalSign = voCollVitals.get(i);
				point = new GraphingGlasgowComaScale(voVitalSign.getVitalsTakenDateTime(),  voVitalSign.getGlasgowComaScale().getVerbalResponse(),voVitalSign.getGlasgowComaScale().getMotorResponse(),voVitalSign.getGlasgowComaScale().getEyeOpening(),voVitalSign.getGlasgowComaScale().getTotalGlasgowComaScale(),  voVitalSign);
				form.grhGCS().addPoint(point);
				
				if(form.getGlobalContext().Core.getVitalSignIsNotNull() && //WDEV-12943
						form.getGlobalContext().Core.getVitalSign().getID_VitalSignsIsNotNull() &&//WDEV-12943
						voVitalSign.getID_VitalSigns().intValue() == form.getGlobalContext().Core.getVitalSign().getID_VitalSigns().intValue())
					nIndex = i;
			}
			
			form.getLocalContext().setComas(voCollVitals);
			form.getLocalContext().setCurrentIndex(new Integer(nIndex));
			displayCurrentComas();
		}
		else
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			form.getLocalContext().setComas(null);
			form.btnUpdate().setEnabled(false);
			//form.btnPrint().setEnabled(false);
		}
	}

	protected void onBtnPrintClick() throws PresentationLogicException 
	{
		
	}

	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		VitalSignsVo voVitalSign = form.getLocalContext().getvitalSign();
	
		VSGlasgowComaScale voGcs = new VSGlasgowComaScale();
	
		voGcs.setEyeOpening(form.cmbEye().getValue());
		voGcs.setMotorResponse(form.cmbMotor().getValue());
		voGcs.setVerbalResponse(form.cmbVerbal().getValue());
		voGcs.setTotalGlasgowComaScale(form.intGCS().getValue());
		
		voVitalSign.setGlasgowComaScale(voGcs);
	
		String[] arrErrors = voVitalSign.validate();
		if(arrErrors == null)
		{
			try {
				domain.modifyGCS(voVitalSign);
			} catch (StaleObjectException e) {
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				refresh();
				return;
			}
		}
		else
		{
			engine.showErrors("Validation Errors", arrErrors);
			return;	
		}

		form.setMode(FormMode.VIEW);
		
		listGlasgowComaScale();
		
		form.getLocalContext().setvitalSign(voVitalSign);
		displayRecord(form.getLocalContext().getvitalSign());
		
		dateIntervalStatus();
	}

	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		form.btnUpdate().setEnabled(false);
		//form.btnPrint().setEnabled(false);
		form.dteShowByDate().setEnabled(false);
		form.dteFrom().setEnabled(false);
		form.dteTo().setEnabled(false);
		
		form.btnPrev().setEnabled(false);
		form.btnNext().setEnabled(false);
	}

	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		displayRecord(form.getLocalContext().getvitalSign());
		form.setMode(FormMode.VIEW);
		
		dateIntervalStatus();
		updatePrevNextButtons();
	}

	private void dateIntervalStatus()
	{
		form.dteShowByDate().setEnabled(GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		
		form.dteFrom().setEnabled(!GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		form.dteTo().setEnabled(!GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
	}

	private void clearFields() 
	{
		form.cmbMotor().setValue(null);
		form.cmbEye().setValue(null);
		form.cmbVerbal().setValue(null);
		form.intGCS().setValue(null);
		form.dteTaken().setValue(null);
		form.timTaken().setValue(null);
		form.txtHCP().setValue("");
	}

	protected void onBtnViewClick() throws PresentationLogicException
	{
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			if(form.dteShowByDate().getValue() == null)
			{
				engine.showMessage("Please enter a date to show by");
				return;
			}
		}
		else
		{
			if(form.dteFrom().getValue() == null || form.dteTo().getValue() == null)
			{
				engine.showMessage("Please enter a date range (From and To) to show by");
				return;				
			}
			if(form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				engine.showMessage("The date From entered cannot be greater than the date To entered");
				return;
			}
		}
			
		clearFields();
		listGlasgowComaScale();	
	}

	protected void onRadioButtongrpShowByValueChanged() throws PresentationLogicException 
	{
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			form.dteShowByDate().setEnabled(true);
			form.dteShowByDate().setValue(new Date());
			form.dteFrom().setEnabled(false);
			form.dteTo().setEnabled(false);
			form.dteFrom().setValue(null);
			form.dteTo().setValue(null);
		}
		else
		{
			form.dteShowByDate().setEnabled(false);
			form.dteShowByDate().setValue(null);
			form.dteFrom().setEnabled(true);
			form.dteTo().setEnabled(true);
			form.dteFrom().setValue(new Date());
			form.dteTo().setValue(new Date());
		}
		
		onBtnViewClick();
	}
	
	private void displayRecord(VitalSignsVo voVitalSign)
	{
		clearFields();
		form.getLocalContext().setvitalSign(voVitalSign);
		form.cmbEye().setValue(voVitalSign.getGlasgowComaScale().getEyeOpening());
		form.cmbMotor().setValue(voVitalSign.getGlasgowComaScale().getMotorResponse());
		form.cmbVerbal().setValue(voVitalSign.getGlasgowComaScale().getVerbalResponse());
		form.intGCS().setValue(voVitalSign.getGlasgowComaScale().getTotalGlasgowComaScale());
		form.dteTaken().setValue(voVitalSign.getVitalsTakenDateTime().getDate());
		form.timTaken().setValue(voVitalSign.getVitalsTakenDateTime().getTime());
		form.txtHCP().setValue(voVitalSign.getAuthoringInformation().getAuthoringHcp().toString());
		
		form.btnUpdate().setEnabled(true);
		//form.btnPrint().setEnabled(true);
	}

	private void refresh()
	{
		clearFields();
		listGlasgowComaScale();
		form.setMode(FormMode.VIEW);
	}

	protected void onChkMotorValueChanged() throws PresentationLogicException 
	{
		form.grhGCS().graphingOptions().glasgowComaScale.setDisplayMotor(form.chkMotor().getValue());
	}

	protected void onGrhGCSPointClicked(GraphingPoint point) 
	{
		if(point.getType() == GraphingPointType.GLASGOWCOMASCALE)
		{ 			
			GraphingGlasgowComaScale pointGCS = (GraphingGlasgowComaScale)point;
			form.getLocalContext().setvitalSign((VitalSignsVo)pointGCS.getTag());
			displayRecord((VitalSignsVo)pointGCS.getTag());
			form.btnUpdate().setEnabled(true);
			//form.btnPrint().setEnabled(true);
			
			//update the Prev/Next buttons
			VitalSignsVoCollection voTemperatures = form.getLocalContext().getComas();
			for(int i = 0; i < voTemperatures.size(); i++)
			{
				if(form.getLocalContext().getvitalSign().getID_VitalSigns().intValue() == voTemperatures.get(i).getID_VitalSigns().intValue())
				{
					form.getLocalContext().setCurrentIndex(new Integer(i));
					updatePrevNextButtons();
					break;
				}
			}
		}			
	}

	protected void onChkEyeValueChanged() throws PresentationLogicException 
	{
		form.grhGCS().graphingOptions().glasgowComaScale.setDisplayEye(form.chkEye().getValue());
	}

	protected void onChkVerbalValueChanged() throws PresentationLogicException 
	{
		form.grhGCS().graphingOptions().glasgowComaScale.setDisplayVerbal(form.chkVerbal().getValue());		
	}
	
	protected void onChkTotalValueChanged() throws PresentationLogicException 
	{
		form.grhGCS().graphingOptions().glasgowComaScale.setDisplayTotal(form.chkTotal().getValue());	
	}

	protected void onCmbEyeValueChanged() throws PresentationLogicException 
	{
		if(form.cmbEye().getValue() == null)
			return;

		if(form.cmbMotor().getValue() == null)
			return;
	
		if(form.cmbVerbal().getValue() == null)
			return;
 	
		form.intGCS().setValue(new Integer(form.cmbEye().getValue().intValue() + form.cmbMotor().getValue().intValue() + form.cmbVerbal().getValue().intValue()));			
	}
	
	private void fillCombos()
	{
		for(int i=1;i<6;i++)
			form.cmbVerbal().newRow(new Integer(i),String.valueOf(i));
			
		for(int i=1;i<5;i++)
			form.cmbEye().newRow(new Integer(i),String.valueOf(i));
		
		for(int i=1;i<7;i++)
			form.cmbMotor().newRow(new Integer(i),String.valueOf(i));		
	}
	
	
	protected void onBtnNextClick() throws PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() + 1));
		displayCurrentComas();
	}
	protected void onBtnPrevClick() throws PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() - 1));
		displayCurrentComas();
	}

	private void displayCurrentComas()
	{
		VitalSignsVoCollection voCollGcs = form.getLocalContext().getComas();
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		
		if(voCollGcs == null || nIndex == null || nIndex.intValue() == -1 || nIndex.intValue() >= voCollGcs.size())
			return;

		form.getLocalContext().setvitalSign(voCollGcs.get(nIndex.intValue()));
		displayRecord(voCollGcs.get(nIndex.intValue()));
		
		updatePrevNextButtons();
	}

	private void updatePrevNextButtons()
	{
		VitalSignsVoCollection voMetrics = form.getLocalContext().getComas();
		Integer nIndex = form.getLocalContext().getCurrentIndex();

		form.btnNext().setEnabled(true);
		form.btnPrev().setEnabled(true);
		
		if(voMetrics == null || nIndex == null)
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			return;
		}
		
		if(nIndex.intValue() <= 0)
			form.btnPrev().setEnabled(false);

		if(nIndex.intValue() >= voMetrics.size() - 1)
			form.btnNext().setEnabled(false);
	}

	protected void onCmbVerbalValueChanged() throws PresentationLogicException 
	{
		onCmbEyeValueChanged();
	}

	protected void onCmbMotorValueChanged() throws PresentationLogicException 
	{
		onCmbEyeValueChanged();
	}
	
	protected void onLnkReturnClick() throws PresentationLogicException 
	{
		//WDEV-14429
		if(isVitalSignsGCSForTriage())
		{
			engine.close(DialogResult.OK);
			return;
		}
		
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.VitalSignsBaselineAndAll.getID()))
			engine.open(form.getForms().Core.VitalSignsBaselineAndAll);
		else
			engine.open(form.getForms().Core.VitalSignsAll);
	}

	//WDEV-14429
	private boolean isVitalSignsGCSForTriage()
	{
		if(engine.getFormName().equals(form.getForms().Core.VitalSignsGCSForTriage))
			return true;
		
		return false;
	}
}
