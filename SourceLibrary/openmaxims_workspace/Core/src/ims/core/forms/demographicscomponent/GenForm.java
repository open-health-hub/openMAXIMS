//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.demographicscomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrAdditionalDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabMedicalCardIrishContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 10, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Health Act Cat:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 42, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "MC Number:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 112, 40, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 1042), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 112, 8, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 1041), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			}

			public Label lbl29()
			{
				return (Label)super.getControl(0);
			}
			public Label lbl30()
			{
				return (Label)super.getControl(1);
			}
			public TextBox txtMCNumber()
			{
				return (TextBox)super.getControl(2);
			}
			public TextBox txtHealthActCat()
			{
				return (TextBox)super.getControl(3);
			}
		}
		public static class tabPLanguageContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPreferedLanguageComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PreferredCommunicationLanguage value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PreferredCommunicationLanguage value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PreferredCommunicationLanguage value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PreferredCommunicationLanguage value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PreferredCommunicationLanguage value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PreferredCommunicationLanguage getValue()
				{
					return (ims.core.vo.lookups.PreferredCommunicationLanguage)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PreferredCommunicationLanguage value)
				{
					super.control.setValue(value);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Preferred Language:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 136, 16, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPreferedLanguageTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPreferedLanguageTemp);
				cmbPreferedLanguageComboBox cmbPreferedLanguage = (cmbPreferedLanguageComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPreferedLanguageComboBox.class, m_cmbPreferedLanguageTemp);
				super.addComboBox(cmbPreferedLanguage);
			}

			public cmbPreferedLanguageComboBox cmbPreferedLanguage()
			{
				return (cmbPreferedLanguageComboBox)super.getComboBox(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 448, 464, 392, 160, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
			Container m_tabMedicalCardIrish = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Medical Card", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabMedicalCardIrishContainer m_tabMedicalCardIrishContainer = (tabMedicalCardIrishContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMedicalCardIrishContainer.class, m_tabMedicalCardIrish, factory);
			super.addContainer(m_tabMedicalCardIrish, m_tabMedicalCardIrishContainer);
			ims.framework.utils.SizeInfo m_tabMedicalCardIrishDesignSize = new ims.framework.utils.SizeInfo(392, 160);
			ims.framework.utils.SizeInfo m_tabMedicalCardIrishRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper7.getWidth(), anchoringHelper7.getHeight());
			m_tabMedicalCardIrishContainer.setContext(form, appForm, m_tabMedicalCardIrish, loader, form_images_local, contextMenus, startControlID, m_tabMedicalCardIrishDesignSize, m_tabMedicalCardIrishRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 448, 464, 392, 160, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
			Container m_tabPLanguage = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Preferred Language", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPLanguageContainer m_tabPLanguageContainer = (tabPLanguageContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPLanguageContainer.class, m_tabPLanguage, factory);
			super.addContainer(m_tabPLanguage, m_tabPLanguageContainer);
			ims.framework.utils.SizeInfo m_tabPLanguageDesignSize = new ims.framework.utils.SizeInfo(392, 160);
			ims.framework.utils.SizeInfo m_tabPLanguageRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper8.getWidth(), anchoringHelper8.getHeight());
			m_tabPLanguageContainer.setContext(form, appForm, m_tabPLanguage, loader, form_images_local, contextMenus, startControlID, m_tabPLanguageDesignSize, m_tabPLanguageRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabMedicalCardIrish().setVisible(false);
			tabPLanguage().setVisible(false);
		}
		public void showtabMedicalCardIrish()
		{
			tabPLanguage().setVisible(false);
			tabMedicalCardIrish().setVisible(true);
		}
		public void showtabPLanguage()
		{
			tabMedicalCardIrish().setVisible(false);
			tabPLanguage().setVisible(true);
		}

		public tabMedicalCardIrishContainer tabMedicalCardIrish()
		{
			return (tabMedicalCardIrishContainer)super.layers.get(0);
		}
		public tabPLanguageContainer tabPLanguage()
		{
			return (tabPLanguageContainer)super.layers.get(1);
		}
	}
	public static class cmbTitleComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PersonTitle value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PersonTitle value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PersonTitle getValue()
		{
			return (ims.core.vo.lookups.PersonTitle)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PersonTitle value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbOccupationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Occupation value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Occupation value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Occupation value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Occupation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Occupation value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Occupation getValue()
		{
			return (ims.core.vo.lookups.Occupation)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Occupation value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbEthnicComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.EthnicOrigin value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.EthnicOrigin value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.EthnicOrigin value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.EthnicOrigin value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.EthnicOrigin value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.EthnicOrigin getValue()
		{
			return (ims.core.vo.lookups.EthnicOrigin)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.EthnicOrigin value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbReligionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Religion value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Religion value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Religion value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Religion value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Religion value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Religion getValue()
		{
			return (ims.core.vo.lookups.Religion)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Religion value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbMaritalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.MaritalStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.MaritalStatus getValue()
		{
			return (ims.core.vo.lookups.MaritalStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.MaritalStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSexComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Sex value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Sex value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Sex value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Sex value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Sex value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Sex getValue()
		{
			return (ims.core.vo.lookups.Sex)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Sex value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdCommChannelsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdCommChannelsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolTypeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolTypeOpened()
		{
			super.row.showOpened(0);
		}
		public ims.core.vo.lookups.ChannelType getcolType()
		{
			return (ims.core.vo.lookups.ChannelType)super.row.get(0);
		}
		public void setcolType(ims.core.vo.lookups.ChannelType value)
		{
			super.row.set(0, value, true);
		}
		public void setCellcolTypeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolContactValueReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolContactValueReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolContactValueOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolContactValue()
		{
			return (String)super.row.get(1);
		}
		public void setcolContactValue(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolContactValueTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.CommChannelVo getValue()
		{
			return (ims.core.vo.CommChannelVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.CommChannelVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdCommChannelsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdCommChannelsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdCommChannelsRow get(int index)
		{
			return new grdCommChannelsRow(super.collection.get(index));
		}
		public grdCommChannelsRow newRow()
		{
			return new grdCommChannelsRow(super.collection.newRow());
		}
		public grdCommChannelsRow newRow(boolean autoSelect)
		{
			return new grdCommChannelsRow(super.collection.newRow(autoSelect));
		}
		public grdCommChannelsRow newRowAt(int index)
		{
			return new grdCommChannelsRow(super.collection.newRowAt(index));
		}
		public grdCommChannelsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdCommChannelsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdCommChannelsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.CommChannelVoCollection getValues()
		{
			ims.core.vo.CommChannelVoCollection listOfValues = new ims.core.vo.CommChannelVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.CommChannelVo getValue()
		{
			return (ims.core.vo.CommChannelVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.CommChannelVo value)
		{
			super.grid.setValue(value);
		}
		public grdCommChannelsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdCommChannelsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdCommChannelsRowCollection getRows()
		{
			return new grdCommChannelsRowCollection(super.grid.getRows());
		}
		public grdCommChannelsRow getRowByValue(ims.core.vo.CommChannelVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdCommChannelsRow(row);
		}
		public void setcolTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox colTypeComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setcolContactValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolContactValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdIdentifiersRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdIdentifiersRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolIdTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolIdTypeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolIdTypeOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getcolIdType()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellcolIdTypeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolIdValueReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolIdValueReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolIdValueOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolIdValue()
		{
			return (String)super.row.get(1);
		}
		public void setcolIdValue(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolIdValueTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.PatientId getValue()
		{
			return (ims.core.vo.PatientId)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientId value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdIdentifiersRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdIdentifiersRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdIdentifiersRow get(int index)
		{
			return new grdIdentifiersRow(super.collection.get(index));
		}
		public grdIdentifiersRow newRow()
		{
			return new grdIdentifiersRow(super.collection.newRow());
		}
		public grdIdentifiersRow newRow(boolean autoSelect)
		{
			return new grdIdentifiersRow(super.collection.newRow(autoSelect));
		}
		public grdIdentifiersRow newRowAt(int index)
		{
			return new grdIdentifiersRow(super.collection.newRowAt(index));
		}
		public grdIdentifiersRow newRowAt(int index, boolean autoSelect)
		{
			return new grdIdentifiersRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdIdentifiersGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.PatientId[] getValues()
		{
			ims.core.vo.PatientId[] listOfValues = new ims.core.vo.PatientId[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.PatientId getValue()
		{
			return (ims.core.vo.PatientId)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientId value)
		{
			super.grid.setValue(value);
		}
		public grdIdentifiersRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdIdentifiersRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdIdentifiersRowCollection getRows()
		{
			return new grdIdentifiersRowCollection(super.grid.getRows());
		}
		public grdIdentifiersRow getRowByValue(ims.core.vo.PatientId value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdIdentifiersRow(row);
		}
		public void setcolIdTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolIdTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolIdValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolIdValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientFilter.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientFilter' of the global context variable 'Core.PatientFilter' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.Core.contextMenuIdentifierGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Core.contextMenuIdentifierGridAddItem = factory.createMenuItem(startControlID.intValue() + 10, "New", true, false, new Integer(102179), true, false);
		contextMenus.Core.contextMenuIdentifierGrid.add(contextMenus.Core.contextMenuIdentifierGridAddItem);
		contextMenus.Core.contextMenuIdentifierGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 11, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Core.contextMenuIdentifierGrid.add(contextMenus.Core.contextMenuIdentifierGridRemoveItem);
		form.registerMenu(contextMenus.Core.contextMenuIdentifierGrid);


		// Panel Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 464, 432, 160, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Contact Details", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 448, 336, 392, 120, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Patient Identifiers", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 448, 256, 392, 72, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Registered GP", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 448, 192, 392, 56, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Next Of Kin", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 192, 432, 264, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Patient Details", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 416, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccAddressSearchForm = loader.loadComponent(102278, appForm, startControlID * 10 + 1000, anchoringHelper15.getSize(), instance1, startTabIndex.intValue() + 21, skipContextValidation);
		//ims.framework.Control m_ccAddressSearchControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(8), new Integer(200), new Integer(416), new Integer(224), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 21), m_ccAddressSearchForm, instance1 } );
		ims.framework.Control m_ccAddressSearchControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015),  new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 21), m_ccAddressSearchForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccAddressSearchControl);
		Menu[] menus1 = m_ccAddressSearchForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Layer Clasess
		lyrAdditionalDetailsLayer m_lyrAdditionalDetailsLayer = (lyrAdditionalDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrAdditionalDetailsLayer.class, this, factory);
		super.addLayer(m_lyrAdditionalDetailsLayer);
		m_lyrAdditionalDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 464, 304, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Surgery:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 464, 280, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 464, 216, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 24, 432, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 24, 34, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 408, 34, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date of Death", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 24, 84, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Middlename:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 240, 159, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Age:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 408, 84, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Occupation:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 24, 59, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forename:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 408, 134, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Ethnic Origin:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 24, 109, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 24, 134, 29, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Sex:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 24, 159, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DOB:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 408, 59, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Marital Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 408, 109, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Religion:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 632, 30, 192, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Mark Patient as Deceased", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 552, 302, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1037), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 552, 278, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1034), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 552, 214, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1030), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 104, 432, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 272, 157, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 104, 82, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 104, 57, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 104, 107, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 504, 26, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));

		// PartialDateBox Controls
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 104, 157, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 104, 32, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbTitleTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTitleTemp);
		cmbTitleComboBox cmbTitle = (cmbTitleComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTitleComboBox.class, m_cmbTitleTemp);
		super.addComboBox(cmbTitle);
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 504, 82, 320, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbOccupationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbOccupationTemp);
		cmbOccupationComboBox cmbOccupation = (cmbOccupationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOccupationComboBox.class, m_cmbOccupationTemp);
		super.addComboBox(cmbOccupation);
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 504, 132, 320, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbEthnicTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbEthnicTemp);
		cmbEthnicComboBox cmbEthnic = (cmbEthnicComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEthnicComboBox.class, m_cmbEthnicTemp);
		super.addComboBox(cmbEthnic);
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 504, 107, 320, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbReligionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbReligionTemp);
		cmbReligionComboBox cmbReligion = (cmbReligionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReligionComboBox.class, m_cmbReligionTemp);
		super.addComboBox(cmbReligion);
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 504, 57, 320, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbMaritalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbMaritalTemp);
		cmbMaritalComboBox cmbMarital = (cmbMaritalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMaritalComboBox.class, m_cmbMaritalTemp);
		super.addComboBox(cmbMarital);
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 104, 132, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSexTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSexTemp);
		cmbSexComboBox cmbSex = (cmbSexComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSexComboBox.class, m_cmbSexTemp);
		super.addComboBox(cmbSex);

		// Grid Controls
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 488, 416, 117, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdCommChannelsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdCommChannelsTemp);
		grdCommChannelsGrid grdCommChannels = (grdCommChannelsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCommChannelsGrid.class, m_grdCommChannelsTemp);
		grdCommChannels.addComboBoxColumn("Contact Type", 0, 0, 150, false, true, false, false, true, -1);
		grdCommChannels.addStringColumn("Contact Value", 0, 0, -1, false, false, 0, 50, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdCommChannels);
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 464, 360, 360, 88, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		Grid m_grdIdentifiersTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 1039), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuIdentifierGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdIdentifiersTemp);
		grdIdentifiersGrid grdIdentifiers = (grdIdentifiersGrid)GridFlyweightFactory.getInstance().createGridBridge(grdIdentifiersGrid.class, m_grdIdentifiersTemp);
		grdIdentifiers.addMutableComboBoxColumn("Identifier", 0, 0, 150, false, true, false, false, false, true, -1);
		grdIdentifiers.addStringColumn("Identifier Value", 0, 0, -1, false, false, 0, 50, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdIdentifiers);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 800, 274, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 1038), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.GPEnabled24, this.getImages().Core.GPDisabled24, "GP Details", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 800, 210, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 1032), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.NOKEnabled24, this.getImages().Core.NOKDisabled24, "NOK Details", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 384, 425, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.ZoomInfoEnabled24, this.getImages().Core.ZoomInfoDisabled24, "Other Addresses", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 240, 28, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.ZoomInfoEnabled24, this.getImages().Core.ZoomInfoDisabled24, "Other Names", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.addresssearch.IComponent ccAddressSearch()
	{
		return (ims.core.forms.addresssearch.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(6)).getLogic();
	}
	public void setccAddressSearchValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(6)).setValueChangedEvent(delegate);
	}
	public void setccAddressSearchVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(6)).setVisible(value);
	}
	public boolean isccAddressSearchVisible()
	{
		return ((ims.framework.Control)super.getControl(6)).isVisible();
	}
	public void setccAddressSearchEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(6)).setEnabled(value);
	}
	public boolean isccAddressSearchEnabled()
	{
		return ((ims.framework.Control)super.getControl(6)).isEnabled();
	}
	public lyrAdditionalDetailsLayer lyrAdditionalDetails()
	{
		return (lyrAdditionalDetailsLayer)super.getLayer(0);
	}
	public Label lbl6()
	{
		return (Label)super.getControl(12);
	}
	public Label lblDod()
	{
		return (Label)super.getControl(14);
	}
	public Label lblOccupation()
	{
		return (Label)super.getControl(17);
	}
	public Label lblEthnicOrigin()
	{
		return (Label)super.getControl(19);
	}
	public Button btnDeceased()
	{
		return (Button)super.getControl(25);
	}
	public TextBox txtGPPractice()
	{
		return (TextBox)super.getControl(26);
	}
	public TextBox txtGPName()
	{
		return (TextBox)super.getControl(27);
	}
	public TextBox txtNOK()
	{
		return (TextBox)super.getControl(28);
	}
	public TextBox txtOtherAddress()
	{
		return (TextBox)super.getControl(29);
	}
	public TextBox txtAge()
	{
		return (TextBox)super.getControl(30);
	}
	public TextBox txtMiddleName()
	{
		return (TextBox)super.getControl(31);
	}
	public TextBox txtForename()
	{
		return (TextBox)super.getControl(32);
	}
	public TextBox txtSurname()
	{
		return (TextBox)super.getControl(33);
	}
	public DateControl dteDod()
	{
		return (DateControl)super.getControl(34);
	}
	public PartialDateBox pdtDOB()
	{
		return (PartialDateBox)super.getControl(35);
	}
	public cmbTitleComboBox cmbTitle()
	{
		return (cmbTitleComboBox)super.getComboBox(0);
	}
	public cmbOccupationComboBox cmbOccupation()
	{
		return (cmbOccupationComboBox)super.getComboBox(1);
	}
	public cmbEthnicComboBox cmbEthnic()
	{
		return (cmbEthnicComboBox)super.getComboBox(2);
	}
	public cmbReligionComboBox cmbReligion()
	{
		return (cmbReligionComboBox)super.getComboBox(3);
	}
	public cmbMaritalComboBox cmbMarital()
	{
		return (cmbMaritalComboBox)super.getComboBox(4);
	}
	public cmbSexComboBox cmbSex()
	{
		return (cmbSexComboBox)super.getComboBox(5);
	}
	public grdCommChannelsGrid grdCommChannels()
	{
		return (grdCommChannelsGrid)super.getGrid(0);
	}
	public grdIdentifiersGrid grdIdentifiers()
	{
		return (grdIdentifiersGrid)super.getGrid(1);
	}
	public ImageButton imbGP()
	{
		return (ImageButton)super.getControl(44);
	}
	public ImageButton imbNOK()
	{
		return (ImageButton)super.getControl(45);
	}
	public ImageButton imbAddress()
	{
		return (ImageButton)super.getControl(46);
	}
	public ImageButton imbOtherNames()
	{
		return (ImageButton)super.getControl(47);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Clinical = new ClinicalForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				NOKDetails = new LocalFormName(102126);
				GPDetails = new LocalFormName(102127);
				AliasNames = new LocalFormName(102128);
				PatientSearch = new LocalFormName(102100);
				GPSelection = new LocalFormName(102137);
				OtherAddresses = new LocalFormName(102178);
				AddressSelection = new LocalFormName(102270);
				YesNoDialog = new LocalFormName(102107);
				DateOfDeathDialog = new LocalFormName(102307);
			}
			public final FormName NOKDetails;
			public final FormName GPDetails;
			public final FormName AliasNames;
			public final FormName PatientSearch;
			public final FormName GPSelection;
			public final FormName OtherAddresses;
			public final FormName AddressSelection;
			public final FormName YesNoDialog;
			public final FormName DateOfDeathDialog;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				DeathDetails = new LocalFormName(123135);
			}
			public final FormName DeathDetails;
		}

		public CoreForms Core;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ZoomInEnabled16 = new ImageHelper(102158, "Images/Core/zoom.png", new Integer(16), new Integer(16));
				ZoomInDisabled16 = new ImageHelper(102159, "Images/Core/zoom_disabled.png", new Integer(16), new Integer(16));
				FindDisabled16 = new ImageHelper(102165, "Images/Core/FindDisabled16.gif", new Integer(16), new Integer(16));
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
				ClearDisabled16 = new ImageHelper(102167, "Images/Core/ClearDisabled16.gif", new Integer(16), new Integer(16));
				ClearEnabled16 = new ImageHelper(102168, "Images/Core/Clear.gif", new Integer(16), new Integer(16));
				ZoomInfoDisabled24 = new ImageHelper(102514, "Images/Core/zoom_info_disabled_24.png", new Integer(24), new Integer(24));
				ZoomInfoEnabled24 = new ImageHelper(102513, "Images/Core/zoom_info_enabled_24.png", new Integer(24), new Integer(24));
				NOKDisabled24 = new ImageHelper(102508, "Images/Core/parent_coordinator_disabled_24.png", new Integer(24), new Integer(24));
				NOKEnabled24 = new ImageHelper(102507, "Images/Core/parent_coordinator_enabled_24.png", new Integer(24), new Integer(24));
				GPDisabled24 = new ImageHelper(102510, "Images/Core/gp_disabled_24.png", new Integer(24), new Integer(24));
				GPEnabled24 = new ImageHelper(102509, "Images/Core/gp_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ZoomInEnabled16;
			public final ims.framework.utils.Image ZoomInDisabled16;
			public final ims.framework.utils.Image FindDisabled16;
			public final ims.framework.utils.Image FindEnabled16;
			public final ims.framework.utils.Image ClearDisabled16;
			public final ims.framework.utils.Image ClearEnabled16;
			public final ims.framework.utils.Image ZoomInfoDisabled24;
			public final ims.framework.utils.Image ZoomInfoEnabled24;
			public final ims.framework.utils.Image NOKDisabled24;
			public final ims.framework.utils.Image NOKEnabled24;
			public final ims.framework.utils.Image GPDisabled24;
			public final ims.framework.utils.Image GPEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Patient = new ims.framework.ContextVariable("Patient", prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier + "");
			cxl_DeathDetails = new ims.framework.ContextVariable("DeathDetails", prefix + "_lv_Core.DemographicsComponent.__internal_x_context__DeathDetails_" + componentIdentifier + "");
			cxl_bCommChannelsEdited = new ims.framework.ContextVariable("bCommChannelsEdited", prefix + "_lv_Core.DemographicsComponent.__internal_x_context__bCommChannelsEdited_" + componentIdentifier + "");
			cxl_bIdentifiersEdited = new ims.framework.ContextVariable("bIdentifiersEdited", prefix + "_lv_Core.DemographicsComponent.__internal_x_context__bIdentifiersEdited_" + componentIdentifier + "");
			cxl_savedPatient = new ims.framework.ContextVariable("savedPatient", prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier + "");
			cxl_bEventFired = new ims.framework.ContextVariable("bEventFired", prefix + "_lv_Core.DemographicsComponent.__internal_x_context__bEventFired_" + componentIdentifier + "");
			cxl_bUpdatePDS = new ims.framework.ContextVariable("bUpdatePDS", prefix + "_lv_Core.DemographicsComponent.__internal_x_context__bUpdatePDS_" + componentIdentifier + "");
		}
		
		public boolean getPatientIsNotNull()
		{
			return !cxl_Patient.getValueIsNull(context);
		}
		public ims.core.vo.Patient getPatient()
		{
			return (ims.core.vo.Patient)cxl_Patient.getValue(context);
		}
		public void setPatient(ims.core.vo.Patient value)
		{
			cxl_Patient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Patient = null;
		public boolean getDeathDetailsIsNotNull()
		{
			return !cxl_DeathDetails.getValueIsNull(context);
		}
		public ims.core.vo.DeathDetailsVo getDeathDetails()
		{
			return (ims.core.vo.DeathDetailsVo)cxl_DeathDetails.getValue(context);
		}
		public void setDeathDetails(ims.core.vo.DeathDetailsVo value)
		{
			cxl_DeathDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DeathDetails = null;
		public boolean getbCommChannelsEditedIsNotNull()
		{
			return !cxl_bCommChannelsEdited.getValueIsNull(context);
		}
		public Boolean getbCommChannelsEdited()
		{
			return (Boolean)cxl_bCommChannelsEdited.getValue(context);
		}
		public void setbCommChannelsEdited(Boolean value)
		{
			cxl_bCommChannelsEdited.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bCommChannelsEdited = null;
		public boolean getbIdentifiersEditedIsNotNull()
		{
			return !cxl_bIdentifiersEdited.getValueIsNull(context);
		}
		public Boolean getbIdentifiersEdited()
		{
			return (Boolean)cxl_bIdentifiersEdited.getValue(context);
		}
		public void setbIdentifiersEdited(Boolean value)
		{
			cxl_bIdentifiersEdited.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bIdentifiersEdited = null;
		public boolean getsavedPatientIsNotNull()
		{
			return !cxl_savedPatient.getValueIsNull(context);
		}
		public ims.core.vo.Patient getsavedPatient()
		{
			return (ims.core.vo.Patient)cxl_savedPatient.getValue(context);
		}
		public void setsavedPatient(ims.core.vo.Patient value)
		{
			cxl_savedPatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_savedPatient = null;
		public boolean getbEventFiredIsNotNull()
		{
			return !cxl_bEventFired.getValueIsNull(context);
		}
		public Boolean getbEventFired()
		{
			return (Boolean)cxl_bEventFired.getValue(context);
		}
		public void setbEventFired(Boolean value)
		{
			cxl_bEventFired.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bEventFired = null;
		public boolean getbUpdatePDSIsNotNull()
		{
			return !cxl_bUpdatePDS.getValueIsNull(context);
		}
		public Boolean getbUpdatePDS()
		{
			return (Boolean)cxl_bUpdatePDS.getValue(context);
		}
		public void setbUpdatePDS(Boolean value)
		{
			cxl_bUpdatePDS.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bUpdatePDS = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CoreNamespace Core = new CoreNamespace();
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class CoreNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class IdentifierGrid implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 10;
				public static final int Remove = 11;
			}
			public void disableAllIdentifierGridMenuItems()
			{
				this.contextMenuIdentifierGridAddItem.setEnabled(false);
				this.contextMenuIdentifierGridRemoveItem.setEnabled(false);
			}
			public void hideAllIdentifierGridMenuItems()
			{
				this.contextMenuIdentifierGridAddItem.setVisible(false);
				this.contextMenuIdentifierGridRemoveItem.setVisible(false);
			}
			private Menu contextMenuIdentifierGrid;
			public MenuItem getIdentifierGridAddItem()
			{
				return this.contextMenuIdentifierGridAddItem;
			}
			private MenuItem contextMenuIdentifierGridAddItem;
			public MenuItem getIdentifierGridRemoveItem()
			{
				return this.contextMenuIdentifierGridRemoveItem;
			}
			private MenuItem contextMenuIdentifierGridRemoveItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[187];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-ID", "ID_DeathDetails");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-DEATHPLACEOFDEATH", "DeathPlaceofDeath");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-DEATHCAUSEESTABLISHED", "DeathCauseEstablished");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-CANCERRELATEDDEATH", "CancerRelatedDeath");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-DEATHCODEDISCREPENCY", "DeathCodeDiscrepency");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-REFERREDTOCORRONER", "ReferredToCorroner");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-POSTMORTEM", "PostMortem");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-ID", "ID_Gp");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-STATUS", "Status");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-ID", "ID_Location");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-NAME", "Name");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-ISACTIVE", "IsActive");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-TYPE", "Type");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100002-ALLSECUREACCOMMODATION", "AllSecureAccommodation");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.NOKDetails", "BO-1001100002-ID", "ID_Relative");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.NOKDetails", "BO-1001100002-RELATIONSHIP", "Relationship");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.NOKDetails", "BO-1001100001-TEMPFIELD", "TempField");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ID", "ID_Patient");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SEX", "Sex");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOB", "Dob");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOD", "Dod");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-RELIGION", "Religion");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISACTIVE", "IsActive");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SCN", "SCN");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-ID", "ID_Address");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-LINE1", "Line1");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-LINE2", "Line2");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-LINE3", "Line3");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-LINE4", "Line4");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-LINE5", "Line5");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-POSTCODE", "PostCode");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-PHONE", "Phone");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-COUNTY", "County");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-FAX", "Fax");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-UPDATEDATE", "UpdateDate");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-NOTIFICATIONDATE", "NotificationDate");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-ADDRESSTYPE", "AddressType");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-PCT", "PCT");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_Core.PersonAddress", "BO-1002100000-OTHERPHONE", "Otherphone");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientsGP", "BO-1006100001-ID", "ID_Gp");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientsGP", "BO-1006100001-STATUS", "Status");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-ID", "ID_Address");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-LINE1", "Line1");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-LINE2", "Line2");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-LINE3", "Line3");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-LINE4", "Line4");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-LINE5", "Line5");
			fields[129] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-POSTCODE", "PostCode");
			fields[130] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-PHONE", "Phone");
			fields[131] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-COUNTY", "County");
			fields[132] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-FAX", "Fax");
			fields[133] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-UPDATEDATE", "UpdateDate");
			fields[134] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-NOTIFICATIONDATE", "NotificationDate");
			fields[135] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-ADDRESSTYPE", "AddressType");
			fields[136] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-PCT", "PCT");
			fields[137] = new ims.framework.ReportField(this.context, "_cv_Core.NOKPersonAddress", "BO-1002100000-OTHERPHONE", "Otherphone");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-OCCUPATION", "Occupation");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-LANGUAGE", "Language");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-CLIENTPARENT", "ClientParent");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-HOMEFOLDERLOCATION", "HomeFolderLocation");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-PREFCOMMLANGUAGE", "PrefCommLanguage");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-COPYPATIENTONCORRESPONDENCE", "CopyPatientOnCorrespondence");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-COPYPATIENTONCORRESPONDENCEDATE", "CopyPatientOnCorrespondenceDate");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__DeathDetails_" + componentIdentifier, "BO-1003100060-ID", "ID_DeathDetails");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__DeathDetails_" + componentIdentifier, "BO-1003100060-DEATHPLACEOFDEATH", "DeathPlaceofDeath");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__DeathDetails_" + componentIdentifier, "BO-1003100060-DEATHCAUSEESTABLISHED", "DeathCauseEstablished");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__DeathDetails_" + componentIdentifier, "BO-1003100060-CANCERRELATEDDEATH", "CancerRelatedDeath");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__DeathDetails_" + componentIdentifier, "BO-1003100060-DEATHCODEDISCREPENCY", "DeathCodeDiscrepency");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__DeathDetails_" + componentIdentifier, "BO-1003100060-REFERREDTOCORRONER", "ReferredToCorroner");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__DeathDetails_" + componentIdentifier, "BO-1003100060-POSTMORTEM", "PostMortem");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-OCCUPATION", "Occupation");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-LANGUAGE", "Language");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-CLIENTPARENT", "ClientParent");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-HOMEFOLDERLOCATION", "HomeFolderLocation");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-PREFCOMMLANGUAGE", "PrefCommLanguage");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-COPYPATIENTONCORRESPONDENCE", "CopyPatientOnCorrespondence");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-COPYPATIENTONCORRESPONDENCEDATE", "CopyPatientOnCorrespondenceDate");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DemographicsComponent.__internal_x_context__savedPatient_" + componentIdentifier, "BO-1001100000-MRNSTATUS", "MRNStatus");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
