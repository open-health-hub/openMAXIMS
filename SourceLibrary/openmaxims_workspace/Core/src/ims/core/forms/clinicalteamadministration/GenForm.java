//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.clinicalteamadministration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class lyrDetailsLayer extends Layer
		{
			private static final long serialVersionUID = 1L;
			public static class tabDetailsTeamContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbTeamTypeComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.ClinicalTeamType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.ClinicalTeamType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.ClinicalTeamType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.ClinicalTeamType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.ClinicalTeamType value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.ClinicalTeamType getValue()
					{
						return (ims.core.vo.lookups.ClinicalTeamType)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.ClinicalTeamType value)
					{
						super.control.setValue(value);
					}
				}
				public static class qmbTeamLeadComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.HcpLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.HcpLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.HcpLiteVo getValue()
					{
						return (ims.core.vo.HcpLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.HcpLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Lead Hcp:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 52, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Team Type:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 120, 16, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 120, 52, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbTeamTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbTeamTypeTemp);
					cmbTeamTypeComboBox cmbTeamType = (cmbTeamTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTeamTypeComboBox.class, m_cmbTeamTypeTemp);
					super.addComboBox(cmbTeamType);
			
					// Query ComboBox Controls
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 120, 88, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_qmbTeamLeadTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbTeamLeadTemp);
					qmbTeamLeadComboBox qmbTeamLead = (qmbTeamLeadComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbTeamLeadComboBox.class, m_qmbTeamLeadTemp);
					super.addComboBox(qmbTeamLead);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.FALSE, null}));
				}
	
				public TextBox txtTeamName()
				{
					return (TextBox)super.getControl(3);
				}
				public cmbTeamTypeComboBox cmbTeamType()
				{
					return (cmbTeamTypeComboBox)super.getComboBox(0);
				}
				public qmbTeamLeadComboBox qmbTeamLead()
				{
					return (qmbTeamLeadComboBox)super.getComboBox(1);
				}
				public CheckBox chkTeamIsActive()
				{
					return (CheckBox)super.getControl(6);
				}
			}
			public static class tabMemberDisplayContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 52, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start Date:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Member Name:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "End Date:", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 120, 16, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// Date Controls
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 120, 88, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 52, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1026), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.FALSE, null}));
				}
	
				public TextBox txtDisplayMemberName()
				{
					return (TextBox)super.getControl(3);
				}
				public DateControl dteDisplayEnd()
				{
					return (DateControl)super.getControl(4);
				}
				public DateControl dteDisplayStart()
				{
					return (DateControl)super.getControl(5);
				}
				public CheckBox chkDisplayIsActive()
				{
					return (CheckBox)super.getControl(6);
				}
			}
			public static class tabDetailsMembersContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class grdTeamMembersRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdTeamMembersRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolHcpReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolHcpReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolHcpOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolHcp()
					{
						return (String)super.row.get(0);
					}
					public void setcolHcp(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolHcpTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public ims.core.vo.HcpLiteVo getValue()
					{
						return (ims.core.vo.HcpLiteVo)super.row.getValue();
					}
					public void setValue(ims.core.vo.HcpLiteVo value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdTeamMembersRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdTeamMembersRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdTeamMembersRow get(int index)
					{
						return new grdTeamMembersRow(super.collection.get(index));
					}
					public grdTeamMembersRow newRow()
					{
						return new grdTeamMembersRow(super.collection.newRow());
					}
					public grdTeamMembersRow newRow(boolean autoSelect)
					{
						return new grdTeamMembersRow(super.collection.newRow(autoSelect));
					}
					public grdTeamMembersRow newRowAt(int index)
					{
						return new grdTeamMembersRow(super.collection.newRowAt(index));
					}
					public grdTeamMembersRow newRowAt(int index, boolean autoSelect)
					{
						return new grdTeamMembersRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdTeamMembersGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					public ims.core.vo.HcpLiteVoCollection getValues()
					{
						ims.core.vo.HcpLiteVoCollection listOfValues = new ims.core.vo.HcpLiteVoCollection();
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues.add(this.getRows().get(x).getValue());
						}
						return listOfValues;
					}
					public ims.core.vo.HcpLiteVo getValue()
					{
						return (ims.core.vo.HcpLiteVo)super.grid.getValue();
					}
					public void setValue(ims.core.vo.HcpLiteVo value)
					{
						super.grid.setValue(value);
					}
					public grdTeamMembersRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdTeamMembersRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdTeamMembersRowCollection getRows()
					{
						return new grdTeamMembersRowCollection(super.grid.getRows());
					}
					public grdTeamMembersRow getRowByValue(ims.core.vo.HcpLiteVo value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdTeamMembersRow(row);
					}
					public void setcolHcpHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolHcpHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Custom Controls
					ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 328, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ims.framework.FormUiLogic m_customControlSearchHCPsForm = loader.loadComponent(103173, appForm, startControlID * 10 + 1000, anchoringHelper15.getSize(), instance1, startTabIndex.intValue() + 12, skipContextValidation);
					//ims.framework.Control m_customControlSearchHCPsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(8), new Integer(8), new Integer(328), new Integer(128), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 12), m_customControlSearchHCPsForm, instance1 } );
					ims.framework.Control m_customControlSearchHCPsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015),  new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 12), m_customControlSearchHCPsForm, instance1, Boolean.FALSE } );
					super.addControl(m_customControlSearchHCPsControl);
					Menu[] menus1 = m_customControlSearchHCPsForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus1.length; x++)
					{
						form.registerMenu(menus1[x]);
					}
			
					// Label Controls
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 496, 48, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "End Date:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 496, 16, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, "Start Date:", new Integer(1), null, new Integer(0)}));
			
					// Button Controls
					RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 704, 152, 64, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 634, 152, 64, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Add/Apply", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			
					// Date Controls
					RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 568, 48, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 568, 16, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 496, 80, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Active", Boolean.TRUE, null}));
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 344, 16, 128, 160, ims.framework.enumerations.ControlAnchoring.ALL);
					Grid m_grdTeamMembersTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdTeamMembersTemp);
					grdTeamMembersGrid grdTeamMembers = (grdTeamMembersGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTeamMembersGrid.class, m_grdTeamMembersTemp);
					grdTeamMembers.addStringColumn("HCP", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					super.addGrid(grdTeamMembers);
				}
	
				public ims.admin.forms.mossearch.IComponent customControlSearchHCPs()
				{
					return (ims.admin.forms.mossearch.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
				}
				public void setcustomControlSearchHCPsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
				}
				public void setcustomControlSearchHCPsVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setVisible(value);
				}
				public boolean iscustomControlSearchHCPsVisible()
				{
					return ((ims.framework.Control)super.getControl(0)).isVisible();
				}
				public void setcustomControlSearchHCPsEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setEnabled(value);
				}
				public boolean iscustomControlSearchHCPsEnabled()
				{
					return ((ims.framework.Control)super.getControl(0)).isEnabled();
				}
				public Button btnCancelDetails()
				{
					return (Button)super.getControl(3);
				}
				public Button btnOK()
				{
					return (Button)super.getControl(4);
				}
				public DateControl dteEnd()
				{
					return (DateControl)super.getControl(5);
				}
				public DateControl dteStart()
				{
					return (DateControl)super.getControl(6);
				}
				public CheckBox chkActive()
				{
					return (CheckBox)super.getControl(7);
				}
				public grdTeamMembersGrid grdTeamMembers()
				{
					return (grdTeamMembersGrid)super.getGrid(0);
				}
			}
			public static class tabNoDetailSelectedContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 208, 72, 330, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No details to display - Please select an item from the grid", new Integer(1), null, new Integer(0)}));
				}
	
			}
	
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 15, 784, 209, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabDetailsTeam = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Team Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabDetailsTeamContainer m_tabDetailsTeamContainer = (tabDetailsTeamContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsTeamContainer.class, m_tabDetailsTeam, factory);
				super.addContainer(m_tabDetailsTeam, m_tabDetailsTeamContainer);
				ims.framework.utils.SizeInfo m_tabDetailsTeamDesignSize = new ims.framework.utils.SizeInfo(784, 209);
				ims.framework.utils.SizeInfo m_tabDetailsTeamRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper25.getWidth(), anchoringHelper25.getHeight());
				m_tabDetailsTeamContainer.setContext(form, appForm, m_tabDetailsTeam, loader, form_images_local, contextMenus, startControlID, m_tabDetailsTeamDesignSize, m_tabDetailsTeamRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 15, 784, 209, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabMemberDisplay = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Member Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabMemberDisplayContainer m_tabMemberDisplayContainer = (tabMemberDisplayContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMemberDisplayContainer.class, m_tabMemberDisplay, factory);
				super.addContainer(m_tabMemberDisplay, m_tabMemberDisplayContainer);
				ims.framework.utils.SizeInfo m_tabMemberDisplayDesignSize = new ims.framework.utils.SizeInfo(784, 209);
				ims.framework.utils.SizeInfo m_tabMemberDisplayRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper26.getWidth(), anchoringHelper26.getHeight());
				m_tabMemberDisplayContainer.setContext(form, appForm, m_tabMemberDisplay, loader, form_images_local, contextMenus, startControlID, m_tabMemberDisplayDesignSize, m_tabMemberDisplayRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 16, 15, 784, 209, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabDetailsMembers = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Member Administration", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabDetailsMembersContainer m_tabDetailsMembersContainer = (tabDetailsMembersContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsMembersContainer.class, m_tabDetailsMembers, factory);
				super.addContainer(m_tabDetailsMembers, m_tabDetailsMembersContainer);
				ims.framework.utils.SizeInfo m_tabDetailsMembersDesignSize = new ims.framework.utils.SizeInfo(784, 209);
				ims.framework.utils.SizeInfo m_tabDetailsMembersRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper27.getWidth(), anchoringHelper27.getHeight());
				m_tabDetailsMembersContainer.setContext(form, appForm, m_tabDetailsMembers, loader, form_images_local, contextMenus, startControlID, m_tabDetailsMembersDesignSize, m_tabDetailsMembersRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 15, 784, 209, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabNoDetailSelected = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"No Detail Selected", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabNoDetailSelectedContainer m_tabNoDetailSelectedContainer = (tabNoDetailSelectedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNoDetailSelectedContainer.class, m_tabNoDetailSelected, factory);
				super.addContainer(m_tabNoDetailSelected, m_tabNoDetailSelectedContainer);
				ims.framework.utils.SizeInfo m_tabNoDetailSelectedDesignSize = new ims.framework.utils.SizeInfo(784, 209);
				ims.framework.utils.SizeInfo m_tabNoDetailSelectedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper28.getWidth(), anchoringHelper28.getHeight());
				m_tabNoDetailSelectedContainer.setContext(form, appForm, m_tabNoDetailSelected, loader, form_images_local, contextMenus, startControlID, m_tabNoDetailSelectedDesignSize, m_tabNoDetailSelectedRuntimeSize, startTabIndex, skipContextValidation);
			}
			public void hide()
			{
				tabDetailsTeam().setVisible(false);
				tabMemberDisplay().setVisible(false);
				tabDetailsMembers().setVisible(false);
				tabNoDetailSelected().setVisible(false);
			}
			public void settabDetailsTeamEnabled(boolean value)
			{
				tabDetailsTeam().setEnabled(value);
			}
			public void settabMemberDisplayEnabled(boolean value)
			{
				tabMemberDisplay().setEnabled(value);
			}
			public void settabDetailsMembersEnabled(boolean value)
			{
				tabDetailsMembers().setEnabled(value);
			}
			public void settabNoDetailSelectedEnabled(boolean value)
			{
				tabNoDetailSelected().setEnabled(value);
			}
			public void showtabDetailsTeam()
			{
				tabMemberDisplay().setVisible(false);
				tabDetailsMembers().setVisible(false);
				tabNoDetailSelected().setVisible(false);
				tabDetailsTeam().setVisible(true);
			}
			public void showtabMemberDisplay()
			{
				tabDetailsTeam().setVisible(false);
				tabDetailsMembers().setVisible(false);
				tabNoDetailSelected().setVisible(false);
				tabMemberDisplay().setVisible(true);
			}
			public void showtabDetailsMembers()
			{
				tabDetailsTeam().setVisible(false);
				tabMemberDisplay().setVisible(false);
				tabNoDetailSelected().setVisible(false);
				tabDetailsMembers().setVisible(true);
			}
			public void showtabNoDetailSelected()
			{
				tabDetailsTeam().setVisible(false);
				tabMemberDisplay().setVisible(false);
				tabDetailsMembers().setVisible(false);
				tabNoDetailSelected().setVisible(true);
			}
	
			public tabDetailsTeamContainer tabDetailsTeam()
			{
				return (tabDetailsTeamContainer)super.layers.get(0);
			}
			public tabMemberDisplayContainer tabMemberDisplay()
			{
				return (tabMemberDisplayContainer)super.layers.get(1);
			}
			public tabDetailsMembersContainer tabDetailsMembers()
			{
				return (tabDetailsMembersContainer)super.layers.get(2);
			}
			public tabNoDetailSelectedContainer tabNoDetailSelected()
			{
				return (tabNoDetailSelectedContainer)super.layers.get(3);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Layer Clasess
			lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
			super.addLayer(m_lyrDetailsLayer);
			m_lyrDetailsLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public lyrDetailsLayer lyrDetails()
		{
			return (lyrDetailsLayer)super.getLayer(0);
		}
	}
	public static class cmbSearchTeamTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.ClinicalTeamType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.ClinicalTeamType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.ClinicalTeamType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.ClinicalTeamType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.ClinicalTeamType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.ClinicalTeamType getValue()
		{
			return (ims.core.vo.lookups.ClinicalTeamType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.ClinicalTeamType value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdHierarchyRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdHierarchyRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setcolTeamReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolTeamReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolTeamOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolTeam()
		{
			return (String)super.row.get(0);
		}
		public void setcolTeam(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolTeamTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolHcpReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolHcpReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolHcpOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolHcp()
		{
			return (String)super.row.get(1);
		}
		public void setcolHcp(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolHcpTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolStartDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolStartDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolStartDateOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolStartDate()
		{
			return (String)super.row.get(2);
		}
		public void setcolStartDate(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolStartDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolEndDateReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolEndDateReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolEndDateOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolEndDate()
		{
			return (String)super.row.get(3);
		}
		public void setcolEndDate(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolEndDateTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
		public grdHierarchyRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdHierarchyRow(super.row.getParent());
		}
		public grdHierarchyRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdHierarchyRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdHierarchyRowCollection collection;
	}
	public static class grdHierarchyRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdHierarchyRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdHierarchyRow get(int index)
		{
			return new grdHierarchyRow(super.collection.get(index));
		}
		public grdHierarchyRow newRow()
		{
			return new grdHierarchyRow(super.collection.newRow());
		}
		public grdHierarchyRow newRow(boolean autoSelect)
		{
			return new grdHierarchyRow(super.collection.newRow(autoSelect));
		}
		public grdHierarchyRow newRowAt(int index)
		{
			return new grdHierarchyRow(super.collection.newRowAt(index));
		}
		public grdHierarchyRow newRowAt(int index, boolean autoSelect)
		{
			return new grdHierarchyRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdHierarchyGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdHierarchyRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdHierarchyRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdHierarchyRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdHierarchyRow[] result = new GenForm.grdHierarchyRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdHierarchyRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdHierarchyRow[] getAllRows(GenForm.grdHierarchyRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdHierarchyRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdHierarchyRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdHierarchyRow[] result = new GenForm.grdHierarchyRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdHierarchyRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdHierarchyRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdHierarchyRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdHierarchyRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdHierarchyRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdHierarchyRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdHierarchyRowCollection getRows()
		{
			return new grdHierarchyRowCollection(super.grid.getRows());
		}
		public grdHierarchyRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdHierarchyRow(row);
		}
		public void setcolTeamHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolTeamHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolHcpHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolHcpHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolStartDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolStartDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolEndDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolEndDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(50);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuClinicalTeam = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuClinicalTeamNEW_TEAMItem = factory.createMenuItem(startControlID.intValue() + 1, "New Clinical Team", true, false, new Integer(102149), true, false);
		contextMenus.contextMenuClinicalTeam.add(contextMenus.contextMenuClinicalTeamNEW_TEAMItem);
		contextMenus.contextMenuClinicalTeamUPDATE_TEAMItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Team Details", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuClinicalTeam.add(contextMenus.contextMenuClinicalTeamUPDATE_TEAMItem);
		contextMenus.contextMenuClinicalTeamNEW_MEMBERSItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Members to team", true, false, new Integer(103141), true, true);
		contextMenus.contextMenuClinicalTeam.add(contextMenus.contextMenuClinicalTeamNEW_MEMBERSItem);
		contextMenus.contextMenuClinicalTeamREMOVE_MEMBERItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove Member From Team", true, false, new Integer(103131), true, false);
		contextMenus.contextMenuClinicalTeam.add(contextMenus.contextMenuClinicalTeamREMOVE_MEMBERItem);
		contextMenus.contextMenuClinicalTeamUPDATE_MEMBERItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit Membership Details", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuClinicalTeam.add(contextMenus.contextMenuClinicalTeamUPDATE_MEMBERItem);
		form.registerMenu(contextMenus.contextMenuClinicalTeam);


		// Container Clasess
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 320, 816, 264, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 264);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper29.getWidth(), anchoringHelper29.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Label Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 384, 16, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Team Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Team Type:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 756, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1031), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 672, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 472, 16, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 104, 16, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSearchTeamTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSearchTeamTypeTemp);
		cmbSearchTeamTypeComboBox cmbSearchTeamType = (cmbSearchTeamTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSearchTeamTypeComboBox.class, m_cmbSearchTeamTypeTemp);
		super.addComboBox(cmbSearchTeamType);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 632, 16, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"ActiveTeams", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 248, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdHierarchyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuClinicalTeam, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdHierarchyTemp);
		grdHierarchyGrid grdHierarchy = (grdHierarchyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHierarchyGrid.class, m_grdHierarchyTemp);
		grdHierarchy.addTreeColumn("Team", 0, 220, false, true);
		grdHierarchy.addStringColumn("HCP", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdHierarchy.addStringColumn("StartDate", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdHierarchy.addStringColumn("EndDate", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdHierarchy);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 768, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for Clinical Teams matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 800, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public TextBox txtSearchTeamName()
	{
		return (TextBox)super.getControl(6);
	}
	public cmbSearchTeamTypeComboBox cmbSearchTeamType()
	{
		return (cmbSearchTeamTypeComboBox)super.getComboBox(0);
	}
	public CheckBox chkSearchActiveTeams()
	{
		return (CheckBox)super.getControl(8);
	}
	public grdHierarchyGrid grdHierarchy()
	{
		return (grdHierarchyGrid)super.getGrid(0);
	}
	public ImageButton imbSearchTeam()
	{
		return (ImageButton)super.getControl(10);
	}
	public ImageButton imbClearTeam()
	{
		return (ImageButton)super.getControl(11);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				ClinicalTeam = new ImageHelper(103150, "Images/Admin/Users-3.gif", new Integer(16), new Integer(16));
				NCHAD = new ImageHelper(103134, "Images/Admin/ublack.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClinicalTeam;
			public final ims.framework.utils.Image NCHAD;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedParentInstance = new ims.framework.ContextVariable("SelectedParentInstance", prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__SelectedParentInstance_" + componentIdentifier + "");
			cxl_SelectedChildInstance = new ims.framework.ContextVariable("SelectedChildInstance", prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__SelectedChildInstance_" + componentIdentifier + "");
			cxl_UpdatedChild = new ims.framework.ContextVariable("UpdatedChild", prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__UpdatedChild_" + componentIdentifier + "");
			cxl_UpdatingParent = new ims.framework.ContextVariable("UpdatingParent", prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__UpdatingParent_" + componentIdentifier + "");
			cxl_TeamSearchCriteria = new ims.framework.ContextVariable("TeamSearchCriteria", prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__TeamSearchCriteria_" + componentIdentifier + "");
			cxl_UpdatedParent = new ims.framework.ContextVariable("UpdatedParent", prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__UpdatedParent_" + componentIdentifier + "");
		}
		
		public boolean getSelectedParentInstanceIsNotNull()
		{
			return !cxl_SelectedParentInstance.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalTeamVo getSelectedParentInstance()
		{
			return (ims.core.vo.ClinicalTeamVo)cxl_SelectedParentInstance.getValue(context);
		}
		public void setSelectedParentInstance(ims.core.vo.ClinicalTeamVo value)
		{
			cxl_SelectedParentInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedParentInstance = null;
		public boolean getSelectedChildInstanceIsNotNull()
		{
			return !cxl_SelectedChildInstance.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalTeamMemberVo getSelectedChildInstance()
		{
			return (ims.core.vo.ClinicalTeamMemberVo)cxl_SelectedChildInstance.getValue(context);
		}
		public void setSelectedChildInstance(ims.core.vo.ClinicalTeamMemberVo value)
		{
			cxl_SelectedChildInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedChildInstance = null;
		public boolean getUpdatedChildIsNotNull()
		{
			return !cxl_UpdatedChild.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalTeamMemberVo getUpdatedChild()
		{
			return (ims.core.vo.ClinicalTeamMemberVo)cxl_UpdatedChild.getValue(context);
		}
		public void setUpdatedChild(ims.core.vo.ClinicalTeamMemberVo value)
		{
			cxl_UpdatedChild.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedChild = null;
		public boolean getUpdatingParentIsNotNull()
		{
			return !cxl_UpdatingParent.getValueIsNull(context);
		}
		public Boolean getUpdatingParent()
		{
			return (Boolean)cxl_UpdatingParent.getValue(context);
		}
		public void setUpdatingParent(Boolean value)
		{
			cxl_UpdatingParent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatingParent = null;
		public boolean getTeamSearchCriteriaIsNotNull()
		{
			return !cxl_TeamSearchCriteria.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalTeamSearchCriteriaVo getTeamSearchCriteria()
		{
			return (ims.core.vo.ClinicalTeamSearchCriteriaVo)cxl_TeamSearchCriteria.getValue(context);
		}
		public void setTeamSearchCriteria(ims.core.vo.ClinicalTeamSearchCriteriaVo value)
		{
			cxl_TeamSearchCriteria.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TeamSearchCriteria = null;
		public boolean getUpdatedParentIsNotNull()
		{
			return !cxl_UpdatedParent.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalTeamVo getUpdatedParent()
		{
			return (ims.core.vo.ClinicalTeamVo)cxl_UpdatedParent.getValue(context);
		}
		public void setUpdatedParent(ims.core.vo.ClinicalTeamVo value)
		{
			cxl_UpdatedParent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedParent = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class ClinicalTeam implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int NEW_TEAM = 1;
			public static final int UPDATE_TEAM = 2;
			public static final int NEW_MEMBERS = 3;
			public static final int REMOVE_MEMBER = 4;
			public static final int UPDATE_MEMBER = 5;
		}
		public void disableAllClinicalTeamMenuItems()
		{
			this.contextMenuClinicalTeamNEW_TEAMItem.setEnabled(false);
			this.contextMenuClinicalTeamUPDATE_TEAMItem.setEnabled(false);
			this.contextMenuClinicalTeamNEW_MEMBERSItem.setEnabled(false);
			this.contextMenuClinicalTeamREMOVE_MEMBERItem.setEnabled(false);
			this.contextMenuClinicalTeamUPDATE_MEMBERItem.setEnabled(false);
		}
		public void hideAllClinicalTeamMenuItems()
		{
			this.contextMenuClinicalTeamNEW_TEAMItem.setVisible(false);
			this.contextMenuClinicalTeamUPDATE_TEAMItem.setVisible(false);
			this.contextMenuClinicalTeamNEW_MEMBERSItem.setVisible(false);
			this.contextMenuClinicalTeamREMOVE_MEMBERItem.setVisible(false);
			this.contextMenuClinicalTeamUPDATE_MEMBERItem.setVisible(false);
		}
		private Menu contextMenuClinicalTeam;
		public MenuItem getClinicalTeamNEW_TEAMItem()
		{
			return this.contextMenuClinicalTeamNEW_TEAMItem;
		}
		private MenuItem contextMenuClinicalTeamNEW_TEAMItem;
		public MenuItem getClinicalTeamUPDATE_TEAMItem()
		{
			return this.contextMenuClinicalTeamUPDATE_TEAMItem;
		}
		private MenuItem contextMenuClinicalTeamUPDATE_TEAMItem;
		public MenuItem getClinicalTeamNEW_MEMBERSItem()
		{
			return this.contextMenuClinicalTeamNEW_MEMBERSItem;
		}
		private MenuItem contextMenuClinicalTeamNEW_MEMBERSItem;
		public MenuItem getClinicalTeamREMOVE_MEMBERItem()
		{
			return this.contextMenuClinicalTeamREMOVE_MEMBERItem;
		}
		private MenuItem contextMenuClinicalTeamREMOVE_MEMBERItem;
		public MenuItem getClinicalTeamUPDATE_MEMBERItem()
		{
			return this.contextMenuClinicalTeamUPDATE_MEMBERItem;
		}
		private MenuItem contextMenuClinicalTeamUPDATE_MEMBERItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[87];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1006100003-ID", "ID_ClinicalTeam");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1006100003-TEAMNAME", "TeamName");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1006100003-TEAMTYPE", "TeamType");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1006100003-ISACTIVE", "IsActive");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1006100010-ID", "ID_ClinicalTeamMember");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1006100010-STARTDATE", "StartDate");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1006100010-ENDDATE", "EndDate");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1006100010-ISACTIVE", "IsActive");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1006100010-ID", "ID_ClinicalTeamMember");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1006100010-STARTDATE", "StartDate");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1006100010-ENDDATE", "EndDate");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1006100010-ISACTIVE", "IsActive");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__UpdatedParent_" + componentIdentifier, "BO-1006100003-ID", "ID_ClinicalTeam");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__UpdatedParent_" + componentIdentifier, "BO-1006100003-TEAMNAME", "TeamName");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__UpdatedParent_" + componentIdentifier, "BO-1006100003-TEAMTYPE", "TeamType");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.ClinicalTeamAdministration.__internal_x_context__UpdatedParent_" + componentIdentifier, "BO-1006100003-ISACTIVE", "IsActive");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
