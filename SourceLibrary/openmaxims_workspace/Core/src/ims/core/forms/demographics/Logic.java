//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.17 build 40517.1100)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.demographics;

import ims.admin.helper.NHSNumberCalculator;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.demographics.GenForm.grdIdentifiersRow;
import ims.core.forms.demographics.GenForm.lyrAdditionalDetailsLayer.tabCopyContainer.Group1Enumeration;
import ims.core.vo.CaseNoteFolderVo;
import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.GpShortVo;
import ims.core.vo.InsuranceVo;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.LocSiteVo;
import ims.core.vo.NextOfKin;
import ims.core.vo.OrganisationVo;
import ims.core.vo.OrganisationWithSitesVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientDetailsComponentVo;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonAddressCollection;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.AddressType;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PatIdTypeCollection;
import ims.core.vo.lookups.RegistrationSourceOfInfo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.ConfigurationException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ISelectedPatient;
import ims.framework.interfaces.IUploadDownloadUrlProvider;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.utils.textile.Textile;

public class Logic extends BaseLogic
{
	private static final int NONE = 0;				//wdev-13521
	private static final int BUTTON_OTHERNAMES = 1; //wdev-13521
	private static final int BUTTON_ALIAS = 2;		//wdev-13521
	private static final int BUTTON_DECEASED = 3;	//wdev-13521
	
	protected void onFormOpen(Object[] args) throws FormOpenException
	{
		//WDEV-15957
		//hide all tabs first
		form.lyrAdditionalDetails().tabCaseNote().setHeaderVisible(false);
		form.lyrAdditionalDetails().tabMedicalCardIrish().setHeaderVisible(false);
		form.lyrAdditionalDetails().tabOIT().setHeaderVisible(false);
		form.lyrAdditionalDetails().tabPreferredLanguage().setHeaderVisible(false);
		
		form.lyrAdditionalDetails().tabCopy().setHeaderVisible(true);
		form.lyrAdditionalDetails().tabCopy().setVisible(true);
		
		//form.getLocalContext().setAliasNotFoundInPas(Boolean.FALSE);	//wdev-15845
		//wdev-13521
		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)
		{
			form.lyrPatientDetails().tabPage1().setHeaderVisible(true);
			form.lyrPatientDetails().tabPage1().setVisible(true);
			form.lyrPatientDetails().tabPage2().setHeaderVisible(false);
			form.lyrPatientDetails().tabPage2().setVisible(false);
		}
		else
		{
			form.lyrPatientDetails().tabPage1().setHeaderVisible(false);
			form.lyrPatientDetails().tabPage1().setVisible(false);
			form.lyrPatientDetails().tabPage2().setHeaderVisible(true);
			form.lyrPatientDetails().tabPage2().setVisible(true);
		}
		
		//WDEV-17792
		Boolean showTab = false;
		
		//----------wdev-8696
		//initialise();
		//-------------------
		if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
		{
			form.lyrAdditionalDetails().hide();
			
			if (ConfigFlag.UI.OIT_DOWNLOAD_URL.getValue() != "" && ConfigFlag.UI.OIT_UPLOAD_URL.getValue() != "")
			{
				//OIT upload/retrieve interface with patient context
				form.lyrAdditionalDetails().tabOIT().setHeaderVisible(true); //WDEV-15957
				
				if (!showTab)
				{	
					form.lyrAdditionalDetails().showtabOIT();
					showTab = true;
				}
			}
			if (ConfigFlag.UI.SHOW_CASENOTEFOLDER_ON_DEMOGRAPHICS.getValue())
			{
				form.lyrAdditionalDetails().tabCaseNote().setHeaderVisible(true);
				
				if (!showTab)
				{
					form.lyrAdditionalDetails().showtabCaseNote();
					showTab = true;
				}
			}
			
			form.ccAddressSearch().setPhoneVisible(false);
		}
		else if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
		{
			form.lyrAdditionalDetails().tabMedicalCardIrish().setHeaderVisible(true);
			
			if (!showTab)
			{
				form.lyrAdditionalDetails().showtabMedicalCardIrish();
				showTab = true;
			}
		}
		
		if (Boolean.TRUE.equals(ConfigFlag.UI.SHOW_PREFERRED_LANGUAGE_ON_DEMOGRAPHICS.getValue()))
		{
			form.lyrAdditionalDetails().tabPreferredLanguage().setHeaderVisible(true);
			
			if (!showTab)
			{
				form.lyrAdditionalDetails().showtabPreferredLanguage();
				showTab = true;
			}
		}
		
		
		
		form.getGlobalContext().Core.setNOKDetails(null);
		form.getGlobalContext().Core.setGPDetails(null);
		form.getGlobalContext().Core.setDeathDetails(null);
		form.getGlobalContext().Core.setPersonAddress(null);

		if (args != null && args.length == 1 && args[0] instanceof ISelectedPatient)
		{
			form.getGlobalContext().Core.setPatientShort(null);
			PatientShort ps = new ims.core.vo.PatientShort(((ISelectedPatient) args[0]).getISelectedPatientID(), 0);
			PatientId psId = new PatientId();
			PatientIdCollection psColl = new PatientIdCollection();
			ims.core.vo.lookups.PatIdType type = ims.core.vo.lookups.PatIdType.getNegativeInstance(((ISelectedPatient) args[0]).getISelectedPatientInterfaceIDType());
			if (type != null)
			{
				psId.setType(type);
				psId.setValue(((ISelectedPatient) args[0]).getISelectedPatientInterfaceID());
				if (psId.getValueIsNotNull())
				{
					psColl.add(psId);
					ps.setIdentifiers(psColl);
				}
			}

			form.getGlobalContext().Core.setPatientToBeDisplayed(ps);
		}

		form.getLocalContext().setbIdentifiersEdited(false);
		form.getLocalContext().setbCommChannelsEdited(false);
		form.getLocalContext().setsavedPatient(null);
		//------------
		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-14127
		{
			if(ConfigFlag.UI.SHOW_OTHER_NAMES_BUTTON.getValue() == false)				//wdev-14127
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setimbOtherNamesVisible(false);
			
		}
		else
		{
			if(ConfigFlag.UI.SHOW_OTHER_NAMES_BUTTON.getValue() == false)				//wdev-14127
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setimbOtherNamesVisible(false);
			
		}
		//------------

		displayDemographics();

		if (form.getMode().equals(FormMode.EDIT))
		{

			if (engine.isDialog())
			{// Added for WDEV-8005
				form.btnUpdate().setVisible(false);
			}
		}
		
		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)   //wdev-13521
			form.lyrPatientDetails().tabPage1().ccPatientImage().setValue(form.getGlobalContext().Core.getPatientShort());
		
		
		form.getLocalContext().setbSaveAliasChange(null);
		
		//WDEV-13424 
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.txtGPName().setRequired(true);
			form.ccAddressSearch().setRequireAdress(true);
		}
		
		clearOutpatientAttendanceForOrder();//WDEV-17561 - clear OutpatientAttendanceForOrder GC if is not for the patient from PatientShort GC
	}

	private void clearOutpatientAttendanceForOrder() 
	{
		if(form.getGlobalContext().Core.getOutpatientAttendanceForOrder() == null
				|| form.getGlobalContext().Core.getOutpatientAttendanceForOrder().getPasEvent() == null)
			return;
		
		if(form.getGlobalContext().Core.getPatientShort() == null)
			return;
		
		if(!form.getGlobalContext().Core.getPatientShort().equals(form.getGlobalContext().Core.getOutpatientAttendanceForOrder().getPasEvent().getPatient()))
		{
			form.getGlobalContext().Core.setOutpatientAttendanceForOrder(null);
		}
	}

	private void displayDemographics() throws FormOpenException
	{
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();

		//WDEV-8525
		Date dteDod = null;
		if(patient != null)
			dteDod = patient.getDod();
		
		if (patient != null && (patient.getID_PatientIsNotNull() || (ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("DTO") && patient.getInterfaceId() != null)))
		{
			displayPatient(patient);
			form.getGlobalContext().Core.setDeathDetails(domain.getDeathDetails(patient));

		}
		else if (form.getGlobalContext().Core.getPatientToBeDisplayedIsNotNull())
		{
			patient = form.getGlobalContext().Core.getPatientToBeDisplayed();
			if (patient != null && (patient.getID_PatientIsNotNull() || (ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("DTO") && patient.getInterfaceId() != null)))
			{
				displayPatient(patient);
				patient = form.getGlobalContext().Core.getPatientShort(); // A domain get was done in previous method invoked ... wdev-14742
				if(patient != null)
						dteDod = patient.getDod();
			}
			else
			{
				PatientFilter voPatFilter = form.getGlobalContext().Core.getPatientFilter();
				
				if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setPatientDetailsFromPatientFilter(voPatFilter);  //wdev-13521
				else
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setPatientDetailsFromPatientFilter(voPatFilter);           //wdev-13521 
				
								
				form.setMode(FormMode.EDIT);
				form.btnUpdate().setEnabled(false);

			}
		}
		else
		{
			throw new CodingRuntimeException("Demographics not supplied with PatientFilter GC or PatientShort GC");
		}	

		if (dteDod != null)
		{
			if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodVisible(true);
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodEnabled(false);
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDodVisible(true);
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDod2Visible(true);
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodValue(dteDod);
			}
			else
			{
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodVisible(true);
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodEnabled(false);
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDodVisible(true);
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDod2Visible(true);
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodValue(dteDod);
			}
			
			
		}
		else
		{
			if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodVisible(false);
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDodVisible(false);
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDod2Visible(false);
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodValue(null);
			}
			else
			{
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodVisible(false);
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDodVisible(false);
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDod2Visible(false);
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodValue(null);
			}
			
			
			form.getLocalContext().setDeathDetails(null);
			form.getGlobalContext().Core.setDeathDetails(null);
		}
		
		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
		{
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedText("Mark as Deceased");
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(false);
		}
		else
		{
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedText("Mark as Deceased");
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(false);
		}
		

		if(form.getMode().equals(FormMode.EDIT))
		{
			if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED) && dteDod == null)
			{
				if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				{
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(true);
				}
				else
				{
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(true);
				}
				
			}
			else
			{
				if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				{
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(false);
				}
				else
				{
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(false);
				}
				
			}
			
			if(engine.isDialog())
				form.btnUpdate().setVisible(false);
		}
		if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED) && dteDod != null)
		{
			if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedText("Death Details");
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(true);
			}
			else
			{
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedText("Death Details");
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(true);
			}
			
		}
	}

	private void displayPatient(PatientShort patient) throws FormOpenException
	{
		Patient voPatient;
		try
		{
			voPatient = domain.getPatient(patient);
			engine.addPatientSelectionToHistory(voPatient);
			//WDEV-13009 
			if(engine.getParentDialogFormName()!= null && engine.getParentDialogFormName().equals(form.getForms().Core.BedInfoDialog))
				form.getLocalContext().setsavedPatient((Patient) voPatient.clone());
		}
		catch (StaleObjectException e)
		{
			// Try a second time. Only then fail.
			try
			{
				voPatient = domain.getPatient(patient);
			}
			catch (StaleObjectException e1)
			{
				throw new FormOpenException("Failed to retrieve Patient due to StaleObjectException");
			}
		}
		if (voPatient == null)
			throw new FormOpenException("Data has been changed, Please perform another Patient Search");

		
		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
		{			
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedText("Mark as Deceased");
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(false);
		}
		else
		{
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedText("Mark as Deceased");
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(false);
		}


		form.getLocalContext().setPatient(voPatient);
		form.getGlobalContext().Core.setPatientShort(voPatient);
		populateScreenFromData(voPatient);

		if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED)
			&& voPatient != null
			&& voPatient.getDodIsNotNull())
		{
			
			if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{			
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedText("Death Details");
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(true);
			}
			else
			{
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedText("Death Details");
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(true);
			}
			
		}

		if (ConfigFlag.UI.SHOW_CASENOTEFOLDER_ON_DEMOGRAPHICS.getValue())
			displayCaseNoteFolder(patient.getPatId(PatIdType.HOSPNUM));

		form.btnUpdate().setVisible(ConfigFlag.DOM.LOCAL_PATIENT_REGISTRATION.getValue());
		//---------------- wdev-8696
		//DisplayImagePatient(voPatient,false);
		//----------------
	}

	protected void populateScreenFromData(Patient pat)
	{
		clearScreen();
		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
		{			
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().clear();
			
		}
		else
		{
			form.lyrPatientDetails().tabPage2().ccPatientDetails().clear();
			
		}

		if (pat == null)
			throw new DomainRuntimeException("No Patient Supplied");				
		
		//-----
		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
		{			
			if( Boolean.FALSE.equals(form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().populateScreenFromData(pat)))
			{
				//form.getLocalContext().setAliasNotFoundInPas(Boolean.TRUE);	//wdev-15845
				//wdev-15845
				if( Boolean.TRUE.equals(form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().getDemographicDetailsCannotBeEdited()))
				{
					form.btnUpdate().setEnabled(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setDemographicDetailsCannotBeEdited(null);
				}
				return;
			}
			
		}
		else
		{
			if(Boolean.FALSE.equals(form.lyrPatientDetails().tabPage2().ccPatientDetails().populateScreenFromData(pat)))
			{
				//form.getLocalContext().setAliasNotFoundInPas(Boolean.TRUE);	//wdev-15845
				//wdev-15845
				if( Boolean.TRUE.equals(form.lyrPatientDetails().tabPage2().ccPatientDetails().getDemographicDetailsCannotBeEdited()))
				{
					form.btnUpdate().setEnabled(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setDemographicDetailsCannotBeEdited(null);
				}
				return;
			}
			
		}
		//------
		
		if (pat.getAddressIsNotNull())
		{
			form.ccAddressSearch().setValue(pat.getAddress());
		}

		// display other addresses
		displayOtherAdressesAndTooltip(pat.getAddresses());
		
		if (ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("DTO"))
			pat.setAddresses(getDTOHistoricAddresses(pat.getHospnum().getIdValue(), pat.getAddresses()));

		//WDEV-14617
		if (ConfigFlag.UI.DEMOGRAPHICS_ALLOW_CREATION_OF_HISTORICAL_ADDRESS.getValue())
		{
			showHistoricAddressesButton(pat.getAddresses());//WDEV-13009
		}

		String szTelephone = "";

		CommChannelVoCollection voCommChannelColl = pat.getCommChannels();

		GenForm.grdCommChannelsRow rowCommChannel;

		if (voCommChannelColl != null)
		{
			for (int i = 0; i < voCommChannelColl.size(); i++)
			{
				CommChannelVo voCommChannel = voCommChannelColl.get(i);

				if (voCommChannel.getChannelTypeIsNotNull())
				{
					rowCommChannel = form.grdCommChannels().getRows().newRow();
					rowCommChannel.setcolType(voCommChannel.getChannelType());
					rowCommChannel.setcolContactValue(voCommChannel.getCommValue());
					rowCommChannel.setValue(voCommChannel);
				}
			}

		}
		if (pat.getCommChannelsIsNotNull() && pat.getWorkPhoneNumber() != null)
		{
			szTelephone += "Work Telephone: ";
			szTelephone += pat.getWorkPhoneNumber().getCommValue();
		}

		form.getGlobalContext().Core.setNOKDetails(pat.getNok());
		form.imbNOK().setTooltip(getNokTooltip(pat));

		if (pat.getInsuranceIsNotNull())
		{
			form.lyrAdditionalDetails().tabMedicalCardIrish().txtMCNumber().setValue(pat.getInsurance().getMedicalCardNo());
			if (pat.getInsurance().getHealthActCategoryIsNotNull())
				form.lyrAdditionalDetails().tabMedicalCardIrish().txtHealthActCat().setValue(pat.getInsurance().getHealthActCategory().getText());
		}

		PatientIdCollection identifers = pat.getIdentifiers();

		GenForm.grdIdentifiersRow row;

		if (identifers != null)
		{
			for (int i = 0; i < identifers.size(); i++)
			{
				ims.core.vo.PatientId id = identifers.get(i);
				//WDEV-13611 check that PatientId type is active
				if(typeIsActive(id.getType()))
				{
					row = form.grdIdentifiers().getRows().newRow();
					
					bindColType(id.getType(), row);
					
					row.getcolIdType().setValue(id.getType());
					row.setcolIdValue(id.getValue());
					row.setValue(id);
					if ((!id.getVerifiedIsNotNull() || (id.getVerifiedIsNotNull() && !id.getVerified())) && id.getType().equals(PatIdType.NHSN))
					{
						row.setBackColor(Color.Orange);
						row.setReadOnly(true);
					}
					if (id.getTypeIsNotNull() && id.getType().equals(PatIdType.NHSN) && !ConfigFlag.GEN.ALLOW_UPDATES_TO_NHS_NO.getValue())
						row.setReadOnly(true);
				}
				//WDEV-13611 store PKey with inactivated PatIdType for saving
				else if(id.getType().equals(PatIdType.PKEY))
					form.getLocalContext().setPKeyWhenTypeIsInactive(id);
			}
		}

		//wdev-12978
		form.lyrAdditionalDetails().tabCaseNote().cmbHomeFolder().setValue(pat.getHomeFolderLocation());
		form.lyrAdditionalDetails().tabPreferredLanguage().cmbPreferedLanguage().setValue(pat.getPrefCommLanguage());
		
		refreshGpDetails(pat.getGp(),pat.getPractice(), pat.getGpSurgery(), !ConfigFlag.DOM.GP_USE_SURGERIES.getValue());

		setRemoveMenuVisibility();
		
		//WDEV-15957
		form.lyrAdditionalDetails().tabCopy().dteEffectiveFromDate().setValue(pat.getCopyPatientOnCorrespondenceDate());
		if(pat.getCopyPatientOnCorrespondenceIsNotNull())
		{
			if(Boolean.TRUE.equals(pat.getCopyPatientOnCorrespondence()))
			{
				form.lyrAdditionalDetails().tabCopy().Group1().setValue(Group1Enumeration.rdoYes);
				form.lyrAdditionalDetails().tabCopy().dteEffectiveFromDate().setRequired(true);
			}
			else
			{
				form.lyrAdditionalDetails().tabCopy().Group1().setValue(Group1Enumeration.rdoNo);				
			}
		}
	}

	//WDEV-13611 check that PatientId type is active
	private boolean typeIsActive(PatIdType type) {
		PatIdTypeCollection collTypes = LookupHelper.getPatIdType(domain.getLookupService());

		for (int i = 0; i < collTypes.size(); i++)
		{
			if(collTypes.get(i).equals(type))
				return true;
		}
		return false;
	}

	private PersonAddressCollection getDTOHistoricAddresses(String hospnum, PersonAddressCollection addresses)
	{
		PersonAddressCollection collNonHistoricalAddresses = new PersonAddressCollection();
		PersonAddressCollection collAddresses = new PersonAddressCollection();
		try
		{
			collAddresses = domain.getDTOHistoricAddresses(hospnum);
		}
		catch (DomainInterfaceException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//Non Historical
		for (int i = 0 ; i < addresses.size() ; i++)
		{
			if(addresses.get(i).getAddressType()==null || !addresses.get(i).getAddressType().equals(AddressType.HISTORICAL))
				collNonHistoricalAddresses.add(addresses.get(i));
		}
		
		//add Non Historical
		for (int i = 0 ; i < collNonHistoricalAddresses.size() ; i++)
			collAddresses.add(collNonHistoricalAddresses.get(i));
		
		form.getGlobalContext().Core.setOtherAddresses(collAddresses);
		return collAddresses;
	}

	//WDEV-13009 show button if Historical address exists
	private void showHistoricAddressesButton(PersonAddressCollection addresses) 
	{
		
		form.ccAddressSearch().setHistoricAddressBtnVisible(false);	
		
		if(addresses!=null)
			for (int i = 0 ; i < addresses.size() ; i++)
			{
				if(addresses.get(i).getAddressTypeIsNotNull() && addresses.get(i).getAddressType().equals(AddressType.HISTORICAL))
				{
					form.ccAddressSearch().setHistoricAddressBtnVisible(true);		
					return;
				}
			}		
	}

	private void displayOtherAdressesAndTooltip(PersonAddressCollection voCollAddresses)
	{
		// update GC
		form.getGlobalContext().Core.setOtherAddresses(voCollAddresses);

		PersonAddressCollection voTempColl = (PersonAddressCollection)voCollAddresses.clone();
		//dont display Historic addresses in other address control
		for (int i = 0 ; i < voTempColl.size() ; i++)
		{
			if(voTempColl.get(i).getAddressTypeIsNotNull() && voTempColl.get(i).getAddressType().equals(AddressType.HISTORICAL))
				voTempColl.remove(i);		
		}		

		if (voTempColl == null || voTempColl == null || voTempColl.size() == 0)
		{
			if (form.getMode().equals(FormMode.VIEW))
				form.imbAddress().setVisible(false);
			else
			{
				form.imbAddress().setVisible(true);
				//WDEV-14367
				form.txtOtherAddress().setValue(null);
				form.getGlobalContext().Core.setOtherAddresses(null);
				//form.getGlobalContext().Core.setOtherAddresses(new PersonAddressCollection());
			}

			return;
		}

		voTempColl.sort();

		String l_address = voTempColl.toDisplayString();

		// display address
		form.txtOtherAddress().setValue(l_address);

		// set tooltip
		String l_addressHeader = Textile.setBold("OTHER ADDRESSES ");
		l_addressHeader += "\r\n";
		l_addressHeader += l_address;
		l_addressHeader = new Textile().process(l_addressHeader);
		form.imbAddress().setTooltip(l_addressHeader);
		form.txtOtherAddress().setTooltip(l_addressHeader);
	}

	private void refreshGpDetails(GpShortVo gp, OrganisationWithSitesVo gpPractice, LocSiteShortVo gpSurgery, boolean usePractice)
	{
		if (usePractice) //WDEV-16051
		{
			form.getGlobalContext().Core.setGPDetails(gp);

			if (gp != null)
			{
				form.txtGPName().setValue(gp.getName().toString());

				// Because some of the patients may not have the field Practice saved yet in the BO, we will display the first practice - as it used to work
				if (gpPractice == null && gp.getPracticesIsNotNull() && gp.getPractices().size() > 0 && gp.getPractices().get(0) != null && gp.getPractices().get(0).getPracticeIsNotNull())
				{
					gpPractice = gp.getPractices().get(0).getPractice();
				}

				form.getGlobalContext().Core.setGPPracticeWithComm(gpPractice);
				form.txtGPPractice().setValue(gpPractice.getName());
			}
			else
			// wdev-12889
			{
				if (gpSurgery != null)
				{
					LocSiteVo tempVo = domain.getLocationSite(gpSurgery);
					if (tempVo != null)
					{
						OrganisationVo orgVo = tempVo.getParentOrganisation();
						if (orgVo != null)
							form.txtGPPractice().setValue(orgVo.getName());

					}
				}
			}

			form.imbGP().setTooltip(getGpTooltip(gp, gpPractice, gpSurgery, usePractice));
		}
		else
		{
			form.getGlobalContext().Core.setGPDetails(gp);
			form.getGlobalContext().Core.setGPSurgery(gpSurgery);
			
			form.imbGP().setTooltip(getGpTooltip(gp, gpPractice, gpSurgery, false));
			if (gpSurgery != null)
				form.txtGPPractice().setValue(gpSurgery.getName());
			if (gp != null)
				form.txtGPName().setValue(gp.getName().toString());
		}
	}

	private String getGpTooltip(GpShortVo gp, OrganisationWithSitesVo gpPractice, LocSiteShortVo gpSurgery, boolean usePractice)
	{
		if (gp == null)
		{
			if (form.getMode().equals(FormMode.EDIT))
				form.imbGP().setVisible(true);
			else
			{
				form.imbGP().setVisible(false);
			}
			return "No GP Details";
		}

		StringBuffer sbGPDetails = new StringBuffer();
		if (gp.getNameIsNotNull())
		{
			sbGPDetails.append(Textile.setBold("GP DETAILS") + "\r" + Textile.setBold("GP Name: ") + gp.getName().toString());
			form.txtGPName().setValue(gp.getName().toString());
		}

		if (!usePractice)
		{
			LocShortVo surgery = gpSurgery;
			if (surgery != null)
			{
				if (surgery.getAddressIsNotNull())
				{
					//WDEV-15527
					sbGPDetails.append("\n" + Textile.setBold("Surgery Address: "));
					//WDEV-15527
					if (surgery.getAddress().getLine1IsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getLine1());
					if (surgery.getAddress().getLine2IsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getLine2());
					if (surgery.getAddress().getLine3IsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getLine3());
					if (surgery.getAddress().getLine4IsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getLine4());
					if (surgery.getAddress().getLine5IsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getLine5());
					if (surgery.getAddress().getPostCodeIsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getPostCode());
					if (surgery.getAddress().getCountyIsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getCounty());
				}

				// WDEV-13614
				if (gp.getCommChannelsIsNotNull())
				{
					CommChannelVo gpWorkPhone = gp.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);
					CommChannelVo gpFax = gp.getCommChannels().getCommunicationChannel(ChannelType.FAX);

					// WORK PHONE
					if (gpWorkPhone != null && gpWorkPhone.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Phone: ") + gpWorkPhone.toString());
					}
					else if (gpSurgery.getCommChannelsIsNotNull())
					{
						CommChannelVo surgeryWork = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);

						if (surgeryWork != null && surgeryWork.getCommValueIsNotNull())
						{
							sbGPDetails.append("\n" + Textile.setBold("Surgery Phone: ") + surgeryWork.toString());
						}
					}

					// FAX NUMBER
					if (gpFax != null && gpFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Fax: ") + gpFax);
					}
					else if (gpSurgery.getCommChannelsIsNotNull())
					{
						CommChannelVo surgeryFax = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.FAX);

						if (surgeryFax != null && surgeryFax.getCommValueIsNotNull())
						{
							sbGPDetails.append("\n" + Textile.setBold("Surgery Fax: ") + surgeryFax);
						}
					}

				}
				else if (gpSurgery.getCommChannelsIsNotNull())
				{
					CommChannelVo surgeryFax = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.FAX);
					CommChannelVo surgeryWork = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);

					if (surgeryWork != null && surgeryWork.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Surgery Phone: ") + surgeryWork.toString());
					}

					if (surgeryFax != null && surgeryFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Surgery Fax: ") + surgeryFax);
					}

				}
			}
		}
		else
		{
			if (gp.getPracticesIsNotNull() && gpPractice != null)
			{
				if (gpPractice.getAddressIsNotNull())
				{
					//WDEV-15527
					sbGPDetails.append("\n" + Textile.setBold("Practice Address: "));
					//WDEV-15527
					if (gpPractice.getAddress().getLine1IsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine1());
					if (gpPractice.getAddress().getLine2IsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine2());
					if (gpPractice.getAddress().getLine3IsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine3());
					if (gpPractice.getAddress().getLine4IsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine4());
					if (gpPractice.getAddress().getLine5IsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine5());
					if (gpPractice.getAddress().getPostCodeIsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getPostCode());
					if (gpPractice.getAddress().getCountyIsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getCounty());
				}

				// WDEV-13614 //WDEV-16051
				if (gpPractice.getCommChannelsIsNotNull())
				{
					// WORK PHONE
					CommChannelVo gpWorkPhone = gp.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);
					CommChannelVo practiceWorkPhone = gpPractice.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);

					if (gpWorkPhone != null && gpWorkPhone.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Phone: ") + gpWorkPhone.toString());
					}
					else if (practiceWorkPhone != null && practiceWorkPhone.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Practice Phone: ") + practiceWorkPhone.toString());
					}

					// FAX NUMBER
					CommChannelVo gpFax = gp.getCommChannels().getCommunicationChannel(ChannelType.FAX);
					CommChannelVo practiceFax = gpPractice.getCommChannels().getCommunicationChannel(ChannelType.FAX);

					if (gpFax != null && gpFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Fax: ") + gpFax.getCommValue());
					}
					else if (practiceFax != null && practiceFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Practice Fax: ") + practiceFax.getCommValue());
					}
				}
			}
		}

		return new Textile().process(sbGPDetails.toString());
	}

	private String getNokTooltip(Patient pat)
	{
		if (pat == null || pat.getNok() == null)
		{
			if (form.getMode().equals(FormMode.EDIT))
				form.imbNOK().setVisible(true);
			else
				form.imbNOK().setVisible(false);
			return "No NOK Details";
		}

		StringBuffer sbNOKDetails = new StringBuffer();
		if (pat.getNok().getNameIsNotNull())
		{
			form.txtNOK().setValue(pat.getNok().getName().toString());
			sbNOKDetails.append(Textile.setBold("NOK DETAILS") + "\r" + Textile.setBold("NOK Name: ") + pat.getNok().getName().toString());
		}
		if (pat.getNok().getAddressIsNotNull())
		{
			sbNOKDetails.append("\n" + Textile.setBold("Address:"));
			if (pat.getNok().getAddress().getLine1IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine1());
			if (pat.getNok().getAddress().getLine2IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine2());
			if (pat.getNok().getAddress().getLine3IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine3());
			if (pat.getNok().getAddress().getLine4IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine4());
			if (pat.getNok().getAddress().getLine5IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine5());

			if (ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
			{
				if (pat.getNok().getAddress().getPostCodeIsNotNull())
					sbNOKDetails.append("\n" + Textile.setBold("Post Code:  ") + pat.getNok().getAddress().getPostCode());
			}
			else if (ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
			{
				if (pat.getNok().getAddress().getCountyIsNotNull())
					sbNOKDetails.append("\n" + Textile.setBold("County:  ") + pat.getNok().getAddress().getCounty());
			}

			if (pat.getNok().getAddress().getPhoneIsNotNull())
				sbNOKDetails.append("\n" + Textile.setBold("Phone (Home): ") + pat.getNok().getAddress().getPhone());
			
		}
		
		//WDEV-15956
		if (pat.getNok().getCommChannelsIsNotNull())
		{
			if (pat.getNok().getWorkPhoneNumber() != null)
				sbNOKDetails.append("\n" + Textile.setBold("Phone (Work): ") + pat.getNok().getWorkPhoneNumber().getCommValue());

			if (pat.getNok().getMobile() != null)
				sbNOKDetails.append("\n" + Textile.setBold("Mobile:  ") + pat.getNok().getMobile().getCommValue());
		}
		
		if (pat.getNok().getRelationshipIsNotNull())
			sbNOKDetails.append("\n" + Textile.setBold("Relationship: ") + pat.getNok().getRelationship().getText());

		return new Textile().process(sbNOKDetails.toString());
	}

	protected void onImbNOKClick() throws PresentationLogicException
	{

		if (form.ccAddressSearch().getValue() != null)
			form.getGlobalContext().Core.setNOKPersonAddress(form.ccAddressSearch().getValue());

		form.getGlobalContext().Core.setCommChannels(listCommChannels());
		
		engine.open(form.getForms().Core.NOKDetails);
	}

	protected void onImbGPClick() throws PresentationLogicException
	{
		// depending on form mode, open a dialog to view the gp and surgery, or
		// select one.
		if (form.getMode().equals(FormMode.VIEW))
			engine.open(form.getForms().Core.GPDetails);
		else if (form.getMode().equals(FormMode.EDIT))
			engine.open(form.getForms().Core.GPSelection);
	}

	/*protected void onImbOtherNamesClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.AliasNames);
	}*/

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		//form.getLocalContext().setAliasNotFoundInPas(Boolean.FALSE);	//wdev-15845
		//wdev-13000
		form.getLocalContext().setbSaveAliasChange(null);
		form.getGlobalContext().Core.setAliasName(null);
		form.getLocalContext().setbRemovePatientAppointments(null);	
		form.getGlobalContext().Core.setDeathDetails(null);
		form.getLocalContext().setDeathDetails(null);
		form.getLocalContext().setbUpdatePDS(null); //wdev-15181

		// Pas interface may have updated the patient since screen was loaded
		if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
			displayPatient(form.getGlobalContext().Core.getPatientShort());

		form.btnUpdate().setEnabled(false);
		form.imbAddress().setVisible(true);
		form.imbNOK().setVisible(true);
		form.imbGP().setVisible(true);
		
		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
		{
			if(ConfigFlag.UI.SHOW_OTHER_NAMES_BUTTON.getValue() == false)				//wdev-14127
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setimbOtherNamesVisible(false);
			else
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setimbOtherNamesVisible(true);
		}
		else
		{
			if(ConfigFlag.UI.SHOW_OTHER_NAMES_BUTTON.getValue() == false)				//wdev-14127
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setimbOtherNamesVisible(false);
			else
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setimbOtherNamesVisible(true);
		}
		

		form.setMode(FormMode.EDIT);

		if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED))
		{
			if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{			
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedText("Mark as Deceased");
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(!form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
			}
			else
			{
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedText("Mark as Deceased");
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(!form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
			}

			
		}

		if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED)
			&& form.getGlobalContext().Core.getPatientShort().getDodIsNotNull())
		{
			if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{			
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedText("Death Details");
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(true);
			}
			else
			{
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedText("Death Details");
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(true);
			}
			
		}

		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
		{
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodVisible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodEnabled(false);
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDodVisible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDod2Visible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
			
		}
		else
		{
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodVisible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodEnabled(false);
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDodVisible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDod2Visible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
		}
		
		
		form.getLocalContext().setbCommChannelsEdited(false);
		form.getLocalContext().setbIdentifiersEdited(false);
		form.getLocalContext().setsavedPatient((Patient) form.getLocalContext().getPatient().clone());
		form.grdCommChannels().setValue(null);
		form.grdIdentifiers().setValue(null);	
		
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		// WDEV-7940
		if (engine.isDialog())
		{
			engine.close(DialogResult.CANCEL);
			//form.getLocalContext().setAliasNotFoundInPas(Boolean.FALSE);	//wdev-15845
			return;
		}

		cancelSave();
		//form.getLocalContext().setAliasNotFoundInPas(Boolean.FALSE);		//wdev-15845
	}

	private void cancelSave() throws FormOpenException
	{
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		
		if (patient != null && patient.getID_PatientIsNotNull())
		{
			// Existing patient so just refresh and return to demographics
			// screen
			form.setMode(FormMode.VIEW);		//wdev-14249
			displayPatient(patient);
			//form.setMode(FormMode.VIEW);
			form.btnUpdate().setEnabled(true);
			//Take the value stored in the db 
			patient = form.getGlobalContext().Core.getPatientShort();
			Boolean dteDodIsVisible = null;
			if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{
				dteDodIsVisible = form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().dteDodIsVisible();
			}
			else
			{
				dteDodIsVisible = form.lyrPatientDetails().tabPage2().ccPatientDetails().dteDodIsVisible();
			}
			
			if (patient.getDod() == null && dteDodIsVisible) //wdev-13521
			{
				if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				{
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodVisible(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDodVisible(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDod2Visible(false);
				}
				else
				{
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodVisible(false);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDodVisible(false);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDod2Visible(false);
				}
				
			}
			setRemoveMenuVisibility();
			if( ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				form.lyrPatientDetails().tabPage1().ccPatientImage().setValue(form.getGlobalContext().Core.getPatientShort());  //wdev-13521
		}
		else
		{
			// Go back to Patient Search
			engine.open(form.getForms().Core.PatientSearch);
			form.getGlobalContext().Core.setPatientShort(null);
			form.getGlobalContext().Core.setPatientToBeDisplayed(null);
		}
	}

	protected Patient populateDataFromScreen(Patient pat)
	{
		if (!validatePatient(pat.getID_Patient() == null))
			return null;

		// Get result address from custome control
		pat.setAddress(form.ccAddressSearch().getValue());
		if (pat.getAddressIsNotNull())
		{
			pat.getAddress().setAddressType(AddressType.PERMANENT);
		}

		// get other sddresses from GC
		
		//WDEV-14367 
		pat.setAddresses(form.getGlobalContext().Core.getOtherAddresses());

		PersonName name = pat.getName();
		if (name == null)
			name = new PersonName();

		PatientDetailsComponentVo tempVo = null;
		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
		{
			tempVo = form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().getPatientDetails();
		}
		else
		{
			tempVo = form.lyrPatientDetails().tabPage2().ccPatientDetails().getPatientDetails();
		}
		
		name.setTitle(tempVo != null ? tempVo.getTitle():null);  		//wdev-13521
		name.setForename(tempVo != null ? tempVo.getForename():null);	//wdev-13521	
		name.setMiddleName(tempVo != null ? tempVo.getMiddleName():null);	//wdev-13521
		name.setSurname(tempVo != null ? tempVo.getSurname():null);		//wdev-13521
		name.setUppers();
		//wdev-11952
		if(tempVo != null && tempVo.getForename()== null)				//wdev-13521
			name.setUpperForename(null);
		if(tempVo != null && tempVo.getSurname() == null)			    //wdev-13521
			name.setUpperSurname(null);
		//----------
		pat.setName(name);

		pat.setSex(tempVo != null ? tempVo.getSex():null);				//wdev-13521
		pat.setDob(tempVo != null ? tempVo.getDob():null);				//wdev-13521
		pat.setDod(tempVo != null ? tempVo.getDod():null);				//wdev-13521
		pat.setMaritalStatus(tempVo != null ?tempVo.getMaritalStatus():null); //wdev-13521
		pat.setOccupation(tempVo != null ? tempVo.getOccupation():null);//wdev-13521  
		pat.setReligion(tempVo != null ? tempVo.getReligion():null);	//wdev-13521
		pat.setEthnicOrigin(tempVo != null ? tempVo.getEthnicOrigin():null); //wdev-13521

		pat.setCommChannels(listCommChannels());

		PatientIdCollection coll = new PatientIdCollection();
		GenForm.grdIdentifiersRow row;
		for (int i = 0; i < form.grdIdentifiers().getRows().size(); i++)
		{
			row = form.grdIdentifiers().getRows().get(i);
			PatientId id = row.getValue();
			boolean exist = false;
			// WDEV-2496
			if (row.getcolIdType().getValue() != null && (row.getcolIdValue() != null && row.getcolIdValue().trim().length() != 0))
			{
				id.setType((PatIdType) row.getcolIdType().getValue());
				if (id.getType().equals(PatIdType.NHSN)) // wdev-7305
					id.setValue(row.getcolIdValue().replace(" ", ""));
				else
					id.setValue(row.getcolIdValue());

				if (id.getType().equals(PatIdType.NHSN) && id.getVerified() == null)//wdev-15109
					id.setVerified(Boolean.FALSE);
				
				for (int j = 0; j < coll.size(); j++)
				{
					if (coll.get(j).getType().equals(row.getcolIdType()) && coll.get(j).getValue().equals(row.getcolIdValue()))
					{
						exist = true;
						break;
					}
				}

				if (!exist)
				{
					if (id.getType().equals(PatIdType.NHSN))
					{
						id.setVerified(Boolean.FALSE);
						// WDEV-5928 - BW Modified
						// If this identifier is in the saved patient, it may be
						// verified, so leave it if it is
						Patient savedPatient = form.getLocalContext().getsavedPatient();
						if (savedPatient != null)
						{
							PatientId nhsnId = savedPatient.getPatientIdentifier(PatIdType.NHSN);
							if (nhsnId != null && nhsnId.getValue().equals(id.getValue()) && nhsnId.getVerifiedIsNotNull() && nhsnId.getVerified().booleanValue() == true)
							{
								id.setVerified(Boolean.TRUE);
							}
						}

					}
					coll.add(id);
				}
			}
			
			//WDEV-13611 include PatId type if inactive and not displayed on grid
			if(form.getLocalContext().getPKeyWhenTypeIsInactiveIsNotNull())
				coll.add(form.getLocalContext().getPKeyWhenTypeIsInactive());
		}

		pat.setIdentifiers(coll);
		if (!ConfigFlag.DOM.CASE_SENSITIVE_PATID.getValue())
		{
			pat.upperCaseIdentifierValues();
		}

		//wdev-12978
		pat.setHomeFolderLocation(form.lyrAdditionalDetails().tabCaseNote().cmbHomeFolder().getValue());
		pat.setPrefCommLanguage(form.lyrAdditionalDetails().tabPreferredLanguage().cmbPreferedLanguage().getValue());

		InsuranceVo voInsurance = pat.getInsurance();
		if (voInsurance == null)
			voInsurance = new InsuranceVo();

		//WDEV-15957
		if(Group1Enumeration.rdoYes.equals(form.lyrAdditionalDetails().tabCopy().Group1().getValue()))
			pat.setCopyPatientOnCorrespondence(Boolean.TRUE);
		else if(Group1Enumeration.rdoNo.equals(form.lyrAdditionalDetails().tabCopy().Group1().getValue()))
			pat.setCopyPatientOnCorrespondence(Boolean.FALSE);
		else
			pat.setCopyPatientOnCorrespondence(null);
		
		if(pat.getCopyPatientOnCorrespondenceIsNotNull())
			pat.setCopyPatientOnCorrespondenceDate(form.lyrAdditionalDetails().tabCopy().dteEffectiveFromDate().getValue());
		else
			pat.setCopyPatientOnCorrespondenceDate(null);
		
		return pat;
	}

	private CommChannelVoCollection listCommChannels()
	{
		CommChannelVoCollection voCommChannelColl = new CommChannelVoCollection();
		GenForm.grdCommChannelsRow rowComm;

		for (int i = 0; i < form.grdCommChannels().getRows().size(); i++)
		{
			rowComm = form.grdCommChannels().getRows().get(i);
			CommChannelVo voCommChannel = rowComm.getValue();
			boolean existCommChannels = false;
			// WDEV-2496
			if (rowComm.getcolType() != null && (rowComm.getcolContactValue() != null && rowComm.getcolContactValue().trim().length() != 0))
			{
				voCommChannel.setChannelType(rowComm.getcolType());
				voCommChannel.setCommValue(rowComm.getcolContactValue());

				for (int k = 0; k < voCommChannelColl.size(); k++)
				{
					if (voCommChannelColl.get(k).getChannelType().equals(rowComm.getcolType()) && voCommChannelColl.get(k).getCommValue().equals(rowComm.getcolContactValue()))
					{
						existCommChannels = true;
						break;
					}
				}

				if (!existCommChannels)
					voCommChannelColl.add(voCommChannel);
			}
		}
		return voCommChannelColl;

	}

	private boolean validatePatient(boolean isNewPatient)
	{
		// validate Patient
		PatientDetailsComponentVo tempVo=null;
		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true) //wdev-13521
		{
			tempVo = form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().getPatientDetails();
		}
		else
		{
			tempVo = form.lyrPatientDetails().tabPage2().ccPatientDetails().getPatientDetails();
		}
		
		if (tempVo.getSurname() == null || tempVo.getSurname().equals(""))    //wdev-13521
		{
			engine.showMessage("Please enter a Surname");
			return false;
		}
		if (ConfigFlag.DOM.FORENAME1_IS_MANDATORY.getValue() && (tempVo.getForename() == null || tempVo.getForename().equals("")))//WDEV-12962 //wdev-13521
		{
			engine.showMessage("Please enter a Forename");
			return false;
		}
		
		//WDEV-12972
		if(ConfigFlag.DOM.GENDER_IS_MANDATORY_FOR_REGISTRATION.getValue() && tempVo.getSex() == null)  //wdev-13251
		{
			engine.showMessage("Sex is mandatory.");
			return false;
		}

		if (tempVo.getDob() != null)   //wdev-13521
		{
			if (tempVo.getDob().isGreaterThan(new Date()))
			{
				engine.showMessage("DOB cannot be in the future");
				return false;
			}
		}
		if (tempVo.getDod() != null)					//wdev-13521
		{
			if (tempVo.getDod().isGreaterThan(new Date()))
			{
				engine.showMessage("DOD cannot be in the future");
				return false;
			}
		}
		if (tempVo.getDob() != null && tempVo.getDod() != null)	//wdev-13521
		{
			if (tempVo.getDod().isLessThan(tempVo.getDob()))
			{
				engine.showMessage("DOB cannot be after DOD");
				return false;
			}
		}

		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			//WDEV-13424 
			PersonAddress personAddress = form.ccAddressSearch().getValue();
			if(personAddress==null || personAddress.getLine1()==null || personAddress.getLine1()==""){
				engine.showMessage("Please enter the first line of the Address.");
				return false;
			}
		}

		for (int i = 0; i < form.grdCommChannels().getRows().size(); i++)
		{
			// WDEV-2496
			if (((form.grdCommChannels().getRows().get(i).getcolType() != null) && (form.grdCommChannels().getRows().get(i).getcolContactValue() != null && form.grdCommChannels().getRows().get(i).getcolContactValue().trim().length() == 0)) || (form.grdCommChannels().getRows().get(i).getcolType() != null && form.grdCommChannels().getRows().get(i).getcolContactValue() == null) || (form.grdCommChannels().getRows().get(i).getcolType() == null && (form.grdCommChannels().getRows().get(i).getcolContactValue() != null && form.grdCommChannels().getRows().get(i).getcolContactValue().trim().length() != 0)))
			{
				engine.showMessage("Please enter a valid Contact type and value");
				return false;
			}
		}

		// WDEV-6964
		if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue() == false&&ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue()==false)
		{
			// WDEV-2496
			if (form.grdIdentifiers().getRows().size() == 0 || (form.grdIdentifiers().getRows().size() == 1 && form.grdIdentifiers().getRows().get(0).getcolIdType() == null || (form.grdIdentifiers().getRows().get(0).getcolIdValue() == null || (form.grdIdentifiers().getRows().get(0).getcolIdValue().trim().length() == 0))))
			{
				engine.showMessage("An identifier type of " + ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue() + " is mandatory");
				return false;
			}
		}
		else
		{
			if (!isNewPatient)
			{
				if (form.grdIdentifiers().getRows().size() == 0 || (form.grdIdentifiers().getRows().size() == 1 && form.grdIdentifiers().getRows().get(0).getcolIdType() == null || (form.grdIdentifiers().getRows().get(0).getcolIdValue() == null || (form.grdIdentifiers().getRows().get(0).getcolIdValue().trim().length() == 0))))
				{
					if(ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue()==false)
					{
						engine.showMessage("An identifier type of " + ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue() + " is mandatory");
						return false;
					}
				}
			}
		}

		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			//WDEV-13424 
			if(form.txtGPName().getValue()==null || form.txtGPName().getValue()==""){
				engine.showMessage("Please enter the Registered GP Name.");
				return false;
			}
		}

		boolean displayIdSet = false;
		GenForm.grdIdentifiersRow row;
		for (int i = 0; i < form.grdIdentifiers().getRows().size(); i++)
		{
			row = form.grdIdentifiers().getRows().get(i);
			// WDEV-2496
			if (((row.getcolIdType().getValue() != null) && (row.getcolIdValue() != null && row.getcolIdValue().trim().length() == 0)) || (row.getcolIdType().getValue() != null && row.getcolIdValue() == null) || (row.getcolIdType().getValue() == null && (row.getcolIdValue() != null && row.getcolIdValue().trim().length() != 0)))
			{
				engine.showMessage("Please enter a valid identifier type and value");
				return false;
			}

			//wdev-6138
			if (row.getcolIdType() != null
				&&row.getcolIdType().getValue() != null
				&& row.getcolIdValue() != null
				&& row.getcolIdValue().trim().length() > 50) 
			{
				engine.showMessage("An entered Identifier is too long. Please reenter with a size less then 50 in length.");
				return false;
			}

			// check if this is the display patid type
			if (row.getcolIdType() != null && row.getcolIdType().getValue() != null && row.getcolIdValue() != null && row.getcolIdType().getValue().equals(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue())))
				displayIdSet = true;

			if (row.getcolIdType() != null && row.getcolIdType().getValue() != null && row.getcolIdType().getValue().equals(PatIdType.NHSN))
			{
				String nospacesString = row.getcolIdValue().replace(" ", "");// wdev-7305

				if (NHSNumberCalculator.ValidNHSNumber(nospacesString) != "")
				{
					engine.showMessage(NHSNumberCalculator.ValidNHSNumber(nospacesString));
					return false;
				}

				if (!NHSNumberCalculator.calcNHSNumber9N(nospacesString.substring(0, 9)).contains(nospacesString.toString()))
				{
					engine.showMessage("The NHS number provided is invalid");
					return false;
				}
				else
					row.setcolIdValue(NHSNumberCalculator.calcNHSNumber9N(nospacesString.substring(0, 9)));
			}

		}

		if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue() == false&&ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue()==false)
		{
			// Ensure that the display name identifier has been added
			if (!displayIdSet)
			{
				engine.showMessage("An identifier type of " + ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue() + " is mandatory");
				return false;
			}
		}
		else
		{
			if (!isNewPatient)
			{
				// Ensure that the display name identifier has been added
				if (!displayIdSet&&ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue()==false)
				{
					engine.showMessage("An identifier type of " + ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue() + " is mandatory");
					return false;
				}
			}
		}
		//wdev-13000
		if (ConfigFlag.DOM.USE_ALIAS_SURNAME_FUNCTIONALITY.getValue())
		{
			if (form.getLocalContext().getbSaveAliasChangeIsNotNull()
				&& form.getLocalContext().getbSaveAliasChange()
				&& form.getGlobalContext().Core.getAliasNameIsNotNull()
				&& form.getGlobalContext().Core.getAliasName().equals(tempVo.getSurname()))  //wdev-13521
			{
				engine.showMessage("Patients alias must be different from surname");
				return false;
			}

			boolean bAliasAndSurnameChanged = false;
			boolean bSurnameChanged = false;
			//if the surname and alias have changed, then you need to ask if old Surname should overwrite the Alias
			if(form.getGlobalContext().Core.getAliasNameIsNotNull()
				&& form.getLocalContext().getPatientIsNotNull()
				&& form.getLocalContext().getPatient().getNameIsNotNull()
				&& form.getLocalContext().getPatient().getName().getSurnameIsNotNull()
				&& form.getLocalContext().getPatient().getName().getSurname() != tempVo.getSurname()) //wdev-13521 
				bAliasAndSurnameChanged = true;

			//if the surname has changed, then you need to ask if old Surname should overwrite the Alias
			if(form.getGlobalContext().Core.getAliasName() == null
				&& form.getLocalContext().getPatientIsNotNull()
				&& form.getLocalContext().getPatient().getNameIsNotNull()
				&& form.getLocalContext().getPatient().getName().getSurnameIsNotNull()
				&& form.getLocalContext().getPatient().getName().getSurname() != tempVo.getSurname())  //wdev-13521
				bSurnameChanged = true;

			if ( (bAliasAndSurnameChanged
				|| bSurnameChanged)
				&& form.getLocalContext().getbSaveAliasChange() == null) 
			{
				form.getLocalContext().setAliasChangedMessageID(engine.showMessage("You have changed the patient's surname. Do you wish to add the previous surname to the Alias list?", "Alias Change", MessageButtons.YESNO, MessageIcon.QUESTION));
				return false;
			}
		}
		
		if (ConfigFlag.GEN.CANCEL_APPOINTMENTS_WHEN_DOD_ENTERED.getValue()
			&& form.getLocalContext().getbRemovePatientAppointments() == null	
			&& tempVo.getDod() != null
			&& form.getGlobalContext().Core.getDeathDetailsIsNotNull()
			&& form.getGlobalContext().Core.getDeathDetails().getPatient().getDodIsNotNull()
			&& form.getGlobalContext().Core.getDeathDetails().getID_DeathDetails() == null)     //wdev-13521
		{
			form.getLocalContext().setRemoveAppointmentsMessageID(engine.showMessage("Do you want to cancel all this patients appointments?", "Cancel Appointments", MessageButtons.YESNO, MessageIcon.QUESTION));
			return false;
		}

		return true;
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		//WDEV-14397
		if (validateData())
		{
			performSave();
		}
		//WDEV-14397		
	}

	private void performSave()
	{
		boolean newPatient = false;
		boolean addressChanged = false;
	
		Patient patient = form.getLocalContext().getPatient();
		
//WDEV-14397		
//moved to validateData which will be called before all performSave() calls.
//		if (patient == null)
//			patient = new Patient();
//WDEV-14397
		
		//TODO review, this is called in populateDataFromScreen, so why is it needed here? If needed, we can move to validateData. 
		if (!validatePatient(patient.getID_Patient() == null))
			return;

		//WDEV-13009
		PersonAddress previousAddress = null;
		form.getLocalContext().setPreviousPersonAddress(null);
		if (form.getLocalContext().getsavedPatientIsNotNull() && form.getLocalContext().getsavedPatient().getAddressIsNotNull())
		{
			previousAddress = (PersonAddress) form.getLocalContext().getsavedPatient().getAddress().clone();
			form.getLocalContext().setPreviousPersonAddress(previousAddress);
		}
	
		if (patient.getID_Patient() == null)
			newPatient = true;
		else
			addressChanged = hasAddressChanged(previousAddress);
		

		patient = populateDataFromScreen(patient);
				
		if (patient == null)
			return;

		if (form.getGlobalContext().Core.getNOKDetails() != null)
		{
			NextOfKin nok = form.getGlobalContext().Core.getNOKDetails();
			patient.setNok(nok);				
		}				

		if (form.getLocalContext().getbUpdatePDS() == null //wdev-15181
			&& patient.getSourceOfInformationIsNotNull() 
			&& patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS) 
			&& form.getLocalContext().getsavedPatientIsNotNull() 
			&& checkForEditedData(form.getLocalContext().getsavedPatient(), patient))
		{
			form.getLocalContext().setPDSStatusMessageID(engine.showMessage("The PDS status of this patient record is about to be changed because of changes to the patient's demographics. Are you sure you want to save?", "PDS Status", MessageButtons.YESNO, MessageIcon.QUESTION));
			return;
		}

		if (save(patient, newPatient, null, null,true))
		{
			//WDEV-13009 
			if(addressChanged && ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_ALLOW_CREATION_OF_HISTORICAL_ADDRESS.getValue())//WDEV-14617
			{
				form.getGlobalContext().Core.setYesNoDialogMessage("You have changed the patient's address. Do you wish to add the previous address as a historical address?");									
				engine.open(form.getForms().Core.YesNoDialog);
				form.getLocalContext().setPreviousPersonAddress(previousAddress);
				form.getGlobalContext().Core.setPersonAddress(previousAddress);
			}	
			//wdev-15845
			//if(Boolean.TRUE.equals(form.getLocalContext().getAliasNotFoundInPas()))
			//{
			//	form.getLocalContext().setAliasNotFoundInPas(Boolean.FALSE);
			//	engine.showMessage("Unable to save the demographic details to PAS. All details will be saved on MAXIMS only");
			//}
			//------------- end wdev-15845
			//wdev-15754
			if( ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue() == true && PatIdType.NHSN.equals(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue())) && newPatient == true )
			{
				engine.showMessage("NHS Number cannot be generated");
			}
			
			//---- end  wdev-15754
			
			return;
		}					
		else if ( ! form.getMode().equals(FormMode.VIEW)) // form.setmode() below is legacy, I think due to possible warning messages in save() method
													      // however if there is a SOE erro .....we dont want the form in EDIT mode.		
			form.setMode(FormMode.EDIT);
	}

	private boolean hasAddressChanged(PersonAddress previousAddress)
	{
		
		PersonAddress newAddress = form.ccAddressSearch().getValue();
		
		if(previousAddress==null || isEmptyAddress(previousAddress))
			return false;
		else if(newAddress==null)
			return true;
		
		if(previousAddress.getLine1()==null && newAddress.getLine1()==null)
			;
		else if((previousAddress.getLine1()!=null && newAddress.getLine1()==null) || (previousAddress.getLine1()==null && newAddress.getLine1()!=null))
			return true;
		else if(!previousAddress.getLine1().equals(newAddress.getLine1()))
				return true;
		
		if(previousAddress.getLine2()==null && newAddress.getLine2()==null)
			;
		else if((previousAddress.getLine2()!=null && newAddress.getLine2()==null) || (previousAddress.getLine2()==null && newAddress.getLine2()!=null))
			return true;
		else if(!previousAddress.getLine2().equals(newAddress.getLine2()))
				return true;
		
		if(previousAddress.getLine3()==null && newAddress.getLine3()==null)
			;
		else if((previousAddress.getLine3()!=null && newAddress.getLine3()==null) || (previousAddress.getLine3()==null && newAddress.getLine3()!=null))
			return true;
		else if(!previousAddress.getLine3().equals(newAddress.getLine3()))
				return true;
		
		if(previousAddress.getLine4()==null && newAddress.getLine4()==null)
			;
		else if((previousAddress.getLine4()!=null && newAddress.getLine4()==null) || (previousAddress.getLine4()==null && newAddress.getLine4()!=null))
			return true;
		else if(!previousAddress.getLine4().equals(newAddress.getLine4()))
				return true;
		
		if(previousAddress.getPostCode()==null && newAddress.getPostCode()==null)
			;
		else if((previousAddress.getPostCode()!=null && newAddress.getPostCode()==null) || (previousAddress.getPostCode()==null && newAddress.getPostCode()!=null))
			return true;
		else if(!previousAddress.getPostCode().equals(newAddress.getPostCode()))
				return true;
	
		
		return false;
	}

	/**
	 * WDEV-13432
	 * Function used to test an address if it is empty.
	 * A null address is also considered empty
	 */
	private boolean isEmptyAddress(PersonAddress previousAddress)
	{
		// Test address for null value
		if (previousAddress == null)
			return true;
		
		// Test relevant fields if are not empty
		
		if (previousAddress.getLine1IsNotNull() && previousAddress.getLine1().trim().length() != 0)
			return false;
		
		if (previousAddress.getLine2IsNotNull() && previousAddress.getLine2().trim().length() != 0)
			return false;
		
		if (previousAddress.getLine3IsNotNull() && previousAddress.getLine3().trim().length() != 0)
			return false;
		
		if (previousAddress.getLine4IsNotNull() && previousAddress.getLine4().trim().length() != 0)
			return false;
		
		if (previousAddress.getLine5IsNotNull() && previousAddress.getLine5().trim().length() != 0)
			return false;
		
		if (previousAddress.getPostCodeIsNotNull() && previousAddress.getPostCode().trim().length() != 0)
			return false;
		
		if (previousAddress.getPhoneIsNotNull() && previousAddress.getPhone().trim().length() != 0)
			return false;
		
		if (previousAddress.getCountyIsNotNull())
			return false;
		
		return true;
	}

	public boolean validateData()
	{
		Patient patient = form.getLocalContext().getPatient();
		
		//WDEV-15690
		if (patient == null)
		{
			patient = new Patient();
			form.getLocalContext().setPatient(patient);
		}
		//WDEV-15690
		
		//WDEV-14397
		if (ConfigFlag.UI.CAPSCAN_ENABLED.getValue() && ConfigFlag.UI.DISPLAY_PCT_CODE.getValue())
		{
			return validatePct();
		}

		//WDEV-15957
		if(Group1Enumeration.rdoYes.equals(form.lyrAdditionalDetails().tabCopy().Group1().getValue()) && form.lyrAdditionalDetails().tabCopy().dteEffectiveFromDate().getValue() == null)
		{
			engine.showMessage("The Effective From date field can not be null !");
			return false;
		}
		
		return true;			
		
	}
	
	
	private boolean validatePct() 
	{
		//WDEV-14397
		
		Patient patient = form.getLocalContext().getPatient();
		
		//get data
		patient.setAddress(form.ccAddressSearch().getValue());
		
		// check valid address if CAPSCAN enabled
		if (ConfigFlag.UI.CAPSCAN_ENABLED.getValue())
		{
			if (ConfigFlag.UI.DISPLAY_PCT_CODE.getValue())
			{
				//verify it
				if (patient.getAddressIsNotNull() && patient.getAddress().getPostCodeIsNotNull())			//wdev-15845
				{
					String l_postCode = patient.getAddress().getPostCode();					
					//WDEV-14397
					String l_pctCode = form.ccAddressSearch().getValue().getPCT();
					
					//WDEV-17212 - TCCO4597
					if (l_pctCode != null && (l_pctCode.toUpperCase().equals("X98")))
					{
						l_pctCode = l_pctCode.toUpperCase();
						form.ccAddressSearch().getValue().setPCT(l_pctCode); 
					}
					
					if (l_pctCode != null && (!l_pctCode.equals("X98")))
					{					
						String l_correctPct = form.ccAddressSearch().verifyPCT(l_postCode);
						if  ((null == l_correctPct) || (l_pctCode.equals("")))
						{					 
							if (ConfigFlag.UI.PCT_CODE_VALIDAT_OVERRIDE.getValue())
							{
								
								form.getLocalContext().setPCTMessageId(DialogResult.OK);
								engine.showMessage("Warning: CCG code: " + form.ccAddressSearch().getValue().getPctCode() 
										+ " does not match with the postcode: " + form.ccAddressSearch().getValue().getPostCode() + "\n\n"
										+ "The save will continue, but you can update to either remove the CCG value for automatic correction or specify X98 to bypass verification.",
										"CCG", MessageButtons.OK, MessageIcon.WARNING);
								return false;
							}
							else
							{
								form.getLocalContext().setPCTMessageId(DialogResult.CANCEL);
								engine.showMessage("Error: Cannot match CCG code: " + form.ccAddressSearch().getValue().getPctCode() 
										+ " with the postcode: " + form.ccAddressSearch().getValue().getPostCode() 
										+ ". \nPlease enter a valid postcode,remove CCG value to allow automatic correction or specify X98 to bypass verification.", 
										"CCG", MessageButtons.OK, MessageIcon.ERROR);
								return false;								
							}
						}
						else
						{
							//call get value again to get current pct as set by component.							
							if (patient != null)
								patient.setAddress(form.ccAddressSearch().getValue());
						}					
					}
					else if (null==l_pctCode)
					{
						// In this case where the PCT is not known, then no checks can be performed.
						//try to auto correct the pct code
//						String l_correctPct = form.ccAddressSearch().verifyPCT(l_postCode);
//						if (null==l_correctPct || l_correctPct.equals(""))
//						{
//							if (ConfigFlag.UI.PCT_CODE_VALIDAT_OVERRIDE.getValue())
//							{
//								form.getLocalContext().setPCTMessageId(DialogResult.OK);
//								engine.showMessage("Warning: Cannot match PCT code with the postcode: " + form.ccAddressSearch().getValue().getPostCode() + "\n\n"
//										+ "The save will continue, but you can update to either remove the PCT value for automatic correction or specify X98 to bypass verification.",
//										"PCT", MessageButtons.OK, MessageIcon.WARNING);
//								return false;
//							}
//							else
//							{
//								form.getLocalContext().setPCTMessageId(DialogResult.CANCEL);
//								engine.showMessage("Error: Cannot match PCT code: " + form.ccAddressSearch().getValue().getPctCode() 
//										+ " with the postcode: " + form.ccAddressSearch().getValue().getPostCode() 
//										+ ". \nPlease enter a valid postcode,remove PCT value to allow automatic correction or specify X98 to bypass verification.", 
//										"PCT", MessageButtons.OK, MessageIcon.ERROR);
//								return false;								
//							}
//						}
//						else if ((patient != null) && patient.getAddressesIsNotNull())
//							patient.getAddress().setPCT(l_correctPct);
					}
				}
			}
		}

		return true;
	}

	private boolean save(Patient patient, boolean newPatient, PersonAddress previousAddress, PersonAddress historicAddress,boolean bPCTcheck)
	{		
		if (ConfigFlag.UI.DISPLAY_PCT_CODE.getValue() && (form.ccAddressSearch().getValue() != null) //WDEV-14741
			&& form.ccAddressSearch().getValue().getPCTIsNotNull())
			patient.setHARCCode(form.ccAddressSearch().getValue().getPCT());//wdev-13498
		//WDEV-16975
		else
			patient.setHARCCode("");
		//WDEV-16975
		
		if (patient == null)
		{
			patient = form.getLocalContext().getPatient();
			if (patient == null)
			{
				patient = new Patient();
				newPatient = true;
			}

			patient = populateDataFromScreen(patient);			

			if (patient == null)
				return false;
		}
		
		if (form.getGlobalContext().Core.getPatientImageIsNotNull())
		{
			patient.setPhoto(form.getGlobalContext().Core.getPatientImage());
		}
		
		
		//----------------wdev-8696
		//patient.setPhoto(form.getGlobalContext().Core.getPatientImage());
		//----------------
		// WDEV-6964
		if (newPatient)
		{
			if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue() == true)
			{
				if (patient.getIdentifiersIsNotNull())
				{
					if (patient.getHospnum() != null)
					{
						engine.showMessage("Entry of 'Hospital No.' for new patient is not permitted, Value is generated by PAS, please remove");
						return false;
					}
					if (patient.getPkey() != null)
					{
						engine.showMessage("Entry of 'Patient key' for new patient is not permitted, Value is generated by PAS, please remove");
						return false;
					}
				}
			}
			if(ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue()==true)
			{
				if(patient.getIdentifiersIsNotNull())
				{
					if(patient.getPatientNumber()!=null)
					{
						engine.showMessage("Entry of 'Patient Number' for new patient is not allowed, Value is generated by MAXIMS, please remove");
						return false;
					}
				}
			}
		}

		boolean bSave = newPatient;

		if (patient.getSourceOfInformation() == null)
		{
			patient.setSourceOfInformation(RegistrationSourceOfInfo.MAXIMS);
			bSave = true;
		}

		if (newPatient)
			patient.setSourceOfInformation(RegistrationSourceOfInfo.MAXIMS);
		else if (patient.getSourceOfInformationIsNotNull() && patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS) && ((form.getLocalContext().getsavedPatient().getEthnicOrigin() == null && patient.getEthnicOriginIsNotNull()) || (form.getLocalContext().getsavedPatient().getEthnicOriginIsNotNull() && patient.getEthnicOrigin() == null) || (form.getLocalContext().getsavedPatient().getEthnicOriginIsNotNull() && patient.getEthnicOriginIsNotNull() && !form.getLocalContext().getsavedPatient().getEthnicOrigin().toString().equals(patient.getEthnicOrigin().toString()))) && !checkForEditedData(form.getLocalContext().getsavedPatient(), patient))////	WDEV-15197
		{
			bSave = true;
		}
		else if (patient.getSourceOfInformationIsNotNull() && !patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS) && form.getLocalContext().getPatientIsNotNull())
		{
			bSave = true;
		}
		else if (patient.getSourceOfInformationIsNotNull())
		{

			// WDEV-5928 - BW Modified
			Patient savedPatient = form.getLocalContext().getsavedPatient();
			if (savedPatient.getEthnicOriginIsNotNull() && patient.getEthnicOriginIsNotNull() && !savedPatient.getEthnicOrigin().equals(patient.getEthnicOrigin()) || (savedPatient.getEthnicOriginIsNotNull() && patient.getEthnicOrigin() == null) || (savedPatient.getEthnicOrigin() == null && patient.getEthnicOriginIsNotNull()))
				bSave = true;

			if ((savedPatient.getAddressesIsNotNull() && !patient.getAddressesIsNotNull()) || (!savedPatient.getAddressesIsNotNull() && patient.getAddressesIsNotNull()) || (savedPatient.getAddressesIsNotNull() && patient.getAddressesIsNotNull() && !savedPatient.getAddresses().toDisplayString().equals(patient.getAddresses().toDisplayString())))
				bSave = true;

			// WDEV-5928 - BW Modified
			boolean dataModified = checkForEditedData(form.getLocalContext().getsavedPatient(), patient);

			if (patient.getSourceOfInformationIsNotNull() && patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS) && form.getLocalContext().getsavedPatientIsNotNull() && dataModified)
			{
				patient.setSourceOfInformation(RegistrationSourceOfInfo.MAXIMS);
				for (int i = 0; patient.getIdentifiersIsNotNull() && i < patient.getIdentifiers().size(); i++)
				{
					if (patient.getIdentifiers().get(i).getTypeIsNotNull() && patient.getIdentifiers().get(i).getType().equals(PatIdType.NHSN))
					{
						patient.getIdentifiers().get(i).setVerified(false);
					}
				}
				bSave = true;
			}
		}

		if (bSave)
		{
			//WDEV-13009
			if(previousAddress!=null)
			{
				PersonAddressCollection collAdresses = patient.getAddresses();
				if (collAdresses == null)
					collAdresses = new PersonAddressCollection();
				
				collAdresses.add((PersonAddress) previousAddress.clone());
				patient.setAddresses(collAdresses);
				
			}
				
			//wdev-13000 - Maintains one Other name only.
			patient.setSaveAlias(form.getGlobalContext().Core.getAliasNameIsNotNull() ? form.getGlobalContext().Core.getAliasName() : null); 

			//wdev-12963
			if (form.getLocalContext().getbRemovePatientAppointmentsIsNotNull()
				&& form.getLocalContext().getbRemovePatientAppointments())
				patient.setCancelSD_APPTS(true);
			else
				patient.setCancelSD_APPTS(null);

			if (form.getLocalContext().getDeathDetailsIsNotNull())
			{				
				String[] patErrors = patient.validate();
				if (patErrors != null)
				{
					engine.showErrors(patErrors);
					return false;
				}

				String[] errors = form.getLocalContext().getDeathDetails().validate();
				if (errors != null)
				{
					engine.showErrors(errors);
					return false;
				}								
				
				try
				{

					patient = domain.saveDemographics(patient, form.getLocalContext().getDeathDetails());

				}
				catch (StaleObjectException e)
				{
					engine.showMessage("Data has been modified by another user - screen will be refreshed");
					form.setMode(FormMode.VIEW);
					try
					{
						cancelSave();
					}
					catch (FormOpenException e1) 
					{
						engine.showMessage(e.getMessage());
					}
					
					return false;
				}
				catch (UniqueKeyViolationException e)
				{
					if (form.getLocalContext().getbUpdatePDSIsNotNull()
						&& form.getLocalContext().getbUpdatePDS())
						patient.setSourceOfInformation(RegistrationSourceOfInfo.PDS);//reset the source in patient so the checkForEditedData logic above will kick in again and the verified will be reset again. wdev-15187

					engine.showMessage(e.getMessage());
					return false;
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return false;
				}
				catch (IndexOutOfBoundsException e)
				{
					engine.showMessage("An error has occured while saving - it is most likely in the list of Patient Identifiers saved.");
					return false;
				}

				form.getLocalContext().setDeathDetails(null);
			}
			else
			{
				if(ConfigFlag.UI.DEMOGRAPHICS_ALLOW_CREATION_OF_HISTORICAL_ADDRESS.getValue())//WDEV-14617
				{
					if (historicAddress != null)
					{
						try 
						{
							if( ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue() == true) //wdev-15450
								domain.insertDTOHistoricAddress(historicAddress, patient.getHospnum() != null ? patient.getHospnum().getIdValue():null);
							form.getLocalContext().setPreviousPersonAddress(null);
						} 
						catch (DomainInterfaceException e) 
						{
							engine.showMessage(e.getMessage());
							return false;
						}
						patient.getAddresses().add(historicAddress);
					}
				}
				else
				{
					if (previousAddress != null)
					{
						try 
						{
							if (ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("DTO"))
								domain.insertDTOHistoricAddress(previousAddress, patient.getHospnum().getIdValue());
							form.getLocalContext().setPreviousPersonAddress(null);
						} 
						catch (DomainInterfaceException e) 
						{
							engine.showMessage(e.getMessage());
							return false;
						}
					}
				}
				try
				{
					String[] errors = patient.validate();
					if (errors != null)
					{
						engine.showErrors(errors);
						return false;
					}
					patient = domain.savePatient(patient, false);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage("Data has been modified by another user - screen will be refreshed");
					form.setMode(FormMode.VIEW);
					try
					{
						cancelSave();
					}
					catch (FormOpenException e1)
					{
						engine.showMessage(e1.getMessage());
					}
					return false;
				}
				catch (UniqueKeyViolationException e)
				{
					if (form.getLocalContext().getbUpdatePDSIsNotNull()
						&& form.getLocalContext().getbUpdatePDS())
						patient.setSourceOfInformation(RegistrationSourceOfInfo.PDS);//reset the source in patient so the checkForEditedData logic above will kick in again and the verified will be reset again. wdev-15187
					
					engine.showMessage(e.getMessage());
					return false;
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return false;
				}
				catch (IndexOutOfBoundsException e)
				{
					engine.showMessage("An error has occured while saving - it is most likely in the list of Patient Identifiers saved.");
					return false;
				}
				
			}
		}

		//wdev-13000
		patient.setSaveAlias(null);
		
		form.getGlobalContext().Core.setPatientShort(patient);
		if (newPatient)
		{
			engine.clearPatientContextInformation();
			form.getGlobalContext().RefMan.clearCatsReferral();
		}

		form.getLocalContext().setPatient(patient);
		form.getGlobalContext().Core.setPatientShort(patient);
		form.getGlobalContext().Core.getPatientShort().calculateAge();//wdev-14840 : Age is nulled in the save. Need to reset it.
		form.setMode(FormMode.VIEW);

		// WDEV-7940
		if (engine.isDialog() && form.getLocalContext().getPreviousPersonAddress()==null)
		{
			engine.close(DialogResult.OK);
			return true;
		}
		
		populateScreenFromData(patient);
		
		if (ConfigFlag.UI.SHOW_CASENOTEFOLDER_ON_DEMOGRAPHICS.getValue())
			displayCaseNoteFolder(patient.getPatId(PatIdType.HOSPNUM));
		
		form.btnUpdate().setEnabled(true);
		return true;
	}
	private void displayCaseNoteFolder(PatientId id)
	{
		//WDEV-13844 
		if (id == null) 
		{
			return;
		}
		//end 
		
		form.lyrAdditionalDetails().tabCaseNote().btnFolderComment().setVisible(false);

		CaseNoteFolderVo voCN = null;
		try 
		{
			voCN = domain.getCaseNoteFolderLocation(id.getValue());
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}

		if (voCN != null)
		{
			form.lyrAdditionalDetails().tabCaseNote().txtCaseNoteLocation().setValue(voCN.getLocation());
			form.lyrAdditionalDetails().tabCaseNote().txtCaseNoteComment().setValue(voCN.getComments());
			if (voCN.getCommentsIsNotNull())
				form.lyrAdditionalDetails().tabCaseNote().btnFolderComment().setVisible(true);
		}
	}

	protected void onGrdIdentifiersSelectionChanged() throws PresentationLogicException
	{
		setRemoveMenuVisibility();
	}

	private void setRemoveMenuVisibility()
	{
		boolean bVisible = form.grdIdentifiers().getSelectedRowIndex() != -1 && form.getMode().equals(FormMode.EDIT);

		form.getContextMenus().getGenericGridRemoveItem().setVisible(bVisible);

		if (form.getLocalContext().getPatientIsNotNull() && form.getLocalContext().getPatient().getSourceOfInformationIsNotNull() && form.getLocalContext().getPatient().getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS) && form.grdIdentifiers().getSelectedRow() != null && form.grdIdentifiers().getSelectedRow().getValue() != null && PatIdType.NHSN.equals(form.grdIdentifiers().getSelectedRow().getValue().getType()))// 	WDEV-15197
			form.getContextMenus().getGenericGridRemoveItem().setVisible(false);

		if (form.grdIdentifiers().getSelectedRow() != null && form.grdIdentifiers().getSelectedRow().getValue().getTypeIsNotNull() && form.grdIdentifiers().getSelectedRow().getValue().getType().equals(PatIdType.NHSN) && !ConfigFlag.GEN.ALLOW_UPDATES_TO_NHS_NO.getValue())
			form.getContextMenus().getGenericGridRemoveItem().setVisible(false);

	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if (sender.equals(form.grdIdentifiers()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add :
					GenForm.grdIdentifiersRow row = form.grdIdentifiers().getRows().newRow(true);	//wdev-13454
					bindColType(null, row);
					row.setValue(new PatientId());
					form.getLocalContext().setbIdentifiersEdited(true);
					form.grdIdentifiers().resetScrollPosition();	//wdev-13454
					setRemoveMenuVisibility();//WDEV-15223
				break;
				case GenForm.ContextMenus.GenericGrid.Remove :
					removeIdentifier();
					setRemoveMenuVisibility();
					form.getLocalContext().setbIdentifiersEdited(true);
				break;
			}
		}
		if (sender.equals(form.grdCommChannels()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.CoreNamespace.IdentifierGrid.Add :
					GenForm.grdCommChannelsRow rowComm = form.grdCommChannels().getRows().newRow();
					rowComm.setValue(new CommChannelVo());
					form.getLocalContext().setbCommChannelsEdited(true);
				break;
				case GenForm.ContextMenus.CoreNamespace.IdentifierGrid.Remove :
					removeCommChannel();
					setRemoveCommunicationMenuVisibility();
					form.getLocalContext().setbCommChannelsEdited(true);
				break;
			}
		}
	}

	private void bindColType(PatIdType selectedPatIdType, grdIdentifiersRow row)
	{
		row.getcolIdType().clear();
		PatIdTypeCollection collTypes = LookupHelper.getPatIdType(domain.getLookupService());
				
		for (int i = 0; i<collTypes.size(); i++)
		{
			if(selectedPatIdType == null) //new
			{
				if(ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
				{
					if(collTypes.get(i).equals(PatIdType.HOSPNUM) || collTypes.get(i).equals(PatIdType.PKEY))
						continue;					
				}
				if(collTypes.get(i).equals(PatIdType.PATNUM))					
					continue;
				
				row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
			}
			else
			// not new
			{
				if(ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
				{
					//if we are displaying a previously saved hospnum or pkey
					if(selectedPatIdType.equals(PatIdType.HOSPNUM) || selectedPatIdType.equals(PatIdType.PKEY) || selectedPatIdType.equals(PatIdType.PATNUM))
						row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					else
					{
						//we are displaying a previous saved any other patidtype - dont add the pkey and hospnum or patnum
						if(!collTypes.get(i).equals(PatIdType.HOSPNUM) && !collTypes.get(i).equals(PatIdType.PKEY)  && !collTypes.get(i).equals(PatIdType.PATNUM))
							row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					}		
				}
				else
				{
					//if we are displaying a previously saved patientnumber
					if(selectedPatIdType.equals(PatIdType.PATNUM))
						row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					else
					{
						//we are displaying a previous saved any other patidtype - dont add the patientnumber
						if(!collTypes.get(i).equals(PatIdType.PATNUM))
							row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					}	
				}
			}
		}
	}

	private void removeCommChannel()
	{
		int index = form.grdCommChannels().getSelectedRowIndex();
		if (index < 0)
		{
			engine.showMessage("Please select a Contact Type to remove");
			return;
		}
		form.grdCommChannels().getRows().remove(index);

	}

	private void removeIdentifier()
	{
		int index = form.grdIdentifiers().getSelectedRowIndex();
		if (index < 0)
		{
			engine.showMessage("Please select an identifier to remove");
			return;
		}
		form.grdIdentifiers().getRows().remove(index);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.YesNoDialog) && result.equals(DialogResult.YES))
		{
			if (form.getLocalContext().getPreviousPersonAddressIsNotNull())
			{
				engine.open(form.getForms().Core.AddressHistoryDlg, new Object[] { form.getLocalContext().getPreviousPersonAddress() });
				return;
			}
			
			save(null, Boolean.FALSE, null, null,false);
		}		
		else if (formName.equals(form.getForms().Core.YesNoDialog) && engine.isDialog())
		{
			if (form.getLocalContext().getPreviousPersonAddressIsNotNull())
			{
				engine.close(DialogResult.OK);
				return;
			}
		}			
				
		//WDEV-13009 
		if (formName.equals(form.getForms().Core.AddressHistoryDlg) && result.equals(DialogResult.OK))
		{
			Patient p = null;
			try
			{
				p = domain.getPatient(form.getGlobalContext().Core.getPatientShort());
				form.getLocalContext().setPatient(p);
			}
			catch (StaleObjectException e)
			{
				throw new FormOpenException("Failed to retrieve Patient due to StaleObjectException");
			}
			save(p, Boolean.FALSE, null, form.getGlobalContext().Core.getPersonAddress(),true);
		}
		else if (formName.equals(form.getForms().Core.AddressHistoryDlg) && engine.isDialog())
		{
			engine.close(DialogResult.OK);
			return;
		}			
		
		if (formName.equals(form.getForms().Core.DateOfDeathDialog) && result.equals(DialogResult.OK))
		{
			//WDEV-9025
			PatientShort patient = form.getGlobalContext().Core.getPatientShort();

			Date dteDod = null;
			if(patient != null)
				dteDod = patient.getDod();
			
			if (dteDod != null)
			{
				if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				{
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodVisible(true);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodEnabled(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDodVisible(true);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDod2Visible(true);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodValue(dteDod);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(false);
				
				}
				else
				{
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodVisible(true);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodEnabled(false);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDodVisible(true);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDod2Visible(true);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodValue(dteDod);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(false);
				}
				
				
			}
			else
			{
				if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				{
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodVisible(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDodVisible(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDod2Visible(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodValue(null);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedText("Mark as Deceased");
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(true);
				
				}
				else
				{
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodVisible(false);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDodVisible(false);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDod2Visible(false);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodValue(null);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedText("Mark as Deceased");
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(true);
				}				
				
				
			}
		}
		else if (formName.equals(form.getForms().Core.YesNoDialog) && (result.equals(DialogResult.NO) || result.equals(DialogResult.CANCEL)))
		{
			cancelSave();
		}
		if (formName.equals(form.getForms().Core.OtherAddresses) && result.equals(DialogResult.OK))
		{
			PersonAddressCollection voCollAddresses = form.getGlobalContext().Core.getOtherAddresses();
			// update local context
			// setOtherAddress(voCollAddresses.toRefVoCollection());

			if (voCollAddresses == null)
				return;
			else
			{
				displayOtherAdressesAndTooltip(voCollAddresses);
			}

		}
		else if (formName.equals(form.getForms().Core.GPDetails) && result.equals(DialogResult.OK))
		{
			/*
			 * - dialog no longer affext gp details - only views. GpShortVo gp =
			 * form.getGlobalContext().Core.getGPDetails(); if (gp == null)
			 * form.txtGPName().setValue(null); else
			 * form.txtGPName().setValue(gp.getName().toShortForm());
			 * 
			 * Patient patient = form.getLocalContext().getPatient(); if
			 * (patient == null) patient = new Patient();
			 * patient.setGp(form.getGlobalContext().Core.getGPDetails());
			 * //form.imbGP().setTooltip(getGpTooltip(patient));
			 * form.getLocalContext().setPatient(patient);
			 */
		}
		else if (formName.equals(form.getForms().Core.NOKDetails) && result.equals(DialogResult.OK))
		{
			NextOfKin nok = form.getGlobalContext().Core.getNOKDetails();
			if (nok == null)
				form.txtNOK().setValue(null);
			else if (nok.getNameIsNotNull()) //WDEV-14004
				form.txtNOK().setValue(nok.getName().toShortForm());
			Patient patient = form.getLocalContext().getPatient();
			if (patient == null)
				patient = new Patient();
			patient.setNok(nok);
			form.imbNOK().setTooltip(getNokTooltip(patient));
			form.getLocalContext().setPatient(patient);
		}
		else if (formName.equals(form.getForms().Core.GPSelection) && result.equals(DialogResult.OK))
		{
			Patient patient = form.getLocalContext().getPatient();
			if (patient == null)
				patient = new Patient();

			if (form.getGlobalContext().Core.getGPPracticeIsNotNull())
			{
				OrganisationWithSitesVo gpPractice = domain.getGPPractice(form.getGlobalContext().Core.getGPPractice());
				patient.setPractice(gpPractice);
				form.getGlobalContext().Core.setGPPracticeWithComm(gpPractice);
			}
			
			refreshGpDetails(form.getGlobalContext().Core.getGPDetails(), form.getGlobalContext().Core.getGPPracticeWithComm(), form.getGlobalContext().Core.getGPSurgery(), !ConfigFlag.DOM.GP_USE_SURGERIES.getValue());

			patient.setGp(form.getGlobalContext().Core.getGPDetails());
			if (form.getGlobalContext().Core.getGPSurgeryIsNotNull() && form.getGlobalContext().Core.getGPSurgery().getID_LocationIsNotNull())
				patient.setGpSurgery(form.getGlobalContext().Core.getGPSurgery());
			else
				patient.setGpSurgery(null);

			form.getLocalContext().setPatient(patient);
		}
		else if (formName.equals(form.getForms().Clinical.DeathDetails) && result.equals(DialogResult.OK))
		{
			form.getLocalContext().setDeathDetails(form.getGlobalContext().Core.getDeathDetails());

			Date dteDod = null;
			if(form.getGlobalContext().Core.getDeathDetails() != null)
				dteDod = form.getGlobalContext().Core.getDeathDetails().getPatient().getDod();
			
			if (dteDod != null)
			{
				if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				{
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodVisible(true);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodEnabled(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDodVisible(true);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDod2Visible(true);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodValue(dteDod);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedText("Death details");
				
				}
				else
				{
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodVisible(true);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodEnabled(false);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDodVisible(true);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDod2Visible(true);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodValue(dteDod);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedText("Death details");
				}
				
				
			}
			else
			{
				if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				{
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodVisible(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDodVisible(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDod2Visible(false);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodValue(null);
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedText("Mark as Deceased");
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(true);
				
				}
				else
				{
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodVisible(false);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDodVisible(false);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDod2Visible(false);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodValue(null);
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedText("Mark as Deceased");
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(true);
				}
				
				
			}
		}
		
		//------------------------------------------------------------------------- wdev- 8696
		if (formName.equals(form.getForms().Core.PatientImageSelection) && result.equals(DialogResult.CANCEL))
		{
			if( ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				form.lyrPatientDetails().tabPage1().ccPatientImage().setDBImage(form.getGlobalContext().Core.getPatientImage());									
		}
		//----------------------------------------------------------------------------------------

		if (formName.equals(form.getForms().Core.AliasDialog) && result.equals(DialogResult.OK))
		{
			if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setimbAliasEnabledImage(form.getImages().Core.AddFile16);
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setimbAliasDisabledImage(form.getImages().Core.AddFile16);
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setimbAliasTooltip("<b>ALIAS :</b>   " + form.getGlobalContext().Core.getAliasName());
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setimbAliasVisible(ConfigFlag.DOM.USE_ALIAS_SURNAME_FUNCTIONALITY.getValue());
				
			}
			else
			{
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setimbAliasEnabledImage(form.getImages().Core.AddFile16);
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setimbAliasDisabledImage(form.getImages().Core.AddFile16);
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setimbAliasTooltip("<b>ALIAS :</b>   " + form.getGlobalContext().Core.getAliasName());
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setimbAliasVisible(ConfigFlag.DOM.USE_ALIAS_SURNAME_FUNCTIONALITY.getValue());
				
			}
			
		}
	}

	protected void onFormModeChanged()
	{
		
		if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
		{
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setcmbOccupationEnabled(form.getMode().equals(FormMode.EDIT));
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setcmbEthnicEnabled(form.getMode().equals(FormMode.EDIT));
			//wdev-13000
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setimbAliasEnabled(form.getMode().equals(FormMode.EDIT));
			form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setMode(form.getMode());
			
		}
		else
		{
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setcmbOccupationEnabled(form.getMode().equals(FormMode.EDIT));
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setcmbEthnicEnabled(form.getMode().equals(FormMode.EDIT));
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setMode(form.getMode());
			//wdev-13000
			form.lyrPatientDetails().tabPage2().ccPatientDetails().setimbAliasEnabled(form.getMode().equals(FormMode.EDIT));
			
		}
		
		
		
		//form.imbAddress().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.ccAddressSearch().setComponentEnabled(form.getMode().equals(FormMode.EDIT));
		
		//WDEV-14466
		if (engine.isDialog() && form.getMode().equals(FormMode.VIEW))
		{
			form.btnClose().setVisible(true);
		}
		else 
		{
			form.btnClose().setVisible(false);
		}
		

		//wdev-13000
		//form.imbAlias().setEnabled(form.getMode().equals(FormMode.EDIT));
		
		form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().Core.getIdentifierGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getGlobalContext().Core.setParentFormMode(form.getMode());
		
		// WDEV-6964 dont allow editing or selection of HospNum and Pkey
		if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				for (int i = 0; i < form.grdIdentifiers().getRows().size(); i++)
				{
					grdIdentifiersRow row = form.grdIdentifiers().getRows().get(i);
					if (row.getcolIdType().getValue() != null)
					{
						if (row.getcolIdType().getValue().equals(PatIdType.HOSPNUM) || row.getcolIdType().getValue().equals(PatIdType.PKEY))
						{
							row.setReadOnly(true);
							row.setSelectable(false);
						}
					}
				}
			}
		}
		if (ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue())
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				for (int i = 0; i < form.grdIdentifiers().getRows().size(); i++)
				{
					grdIdentifiersRow row = form.grdIdentifiers().getRows().get(i);
					if (row.getcolIdType().getValue() != null)
					{
						if (row.getcolIdType().getValue().equals(PatIdType.PATNUM) )
						{
							row.setReadOnly(true);
							row.setSelectable(false);
						}
					}
				}
			}
		}

		
		//http://jira/browse/WDEV-9672
		if(form.getMode().equals(FormMode.VIEW))
		{
			if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{
				//wdev-12966
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setdteDodVisible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDodVisible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
				form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setlblDod2Visible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
				if( engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED))
					form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setbtnDeceasedVisible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
			
			}
			else
			{
				//wdev-12966
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setdteDodVisible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDodVisible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
				form.lyrPatientDetails().tabPage2().ccPatientDetails().setlblDod2Visible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
				if( engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED))
					form.lyrPatientDetails().tabPage2().ccPatientDetails().setbtnDeceasedVisible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
			}
			
					
			
			form.getGlobalContext().Core.setDeathDetails(null);
			form.getLocalContext().setDeathDetails(null);

			form.getContextMenus().Core.getIdentifierGridRemoveItem().setVisible(false);
			if(form.getGlobalContext().Core.getGPDetails() == null)
				form.imbGP().setVisible(false);				
		}
		else
		{
			if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{
				form.btnEditPhoto().setVisible(true);
			}
			else
			{
				form.btnEditPhoto().setVisible(false);
			}
		}
		
		//form.ccPatientImage().setMode(form.getMode());
		/*if(form.getMode().equals(FormMode.VIEW))
		{
			form.ccPatientImage().setValue(form.getGlobalContext().Core.getPatientShort());
		}*/
		
	}

	protected void clearScreen()
	{
		
		form.txtNOK().setValue(null);
		form.txtGPName().setValue(null);
		form.txtGPPractice().setValue(null);
		form.grdIdentifiers().getRows().clear();
		form.grdCommChannels().getRows().clear();
		form.lyrAdditionalDetails().tabMedicalCardIrish().txtHealthActCat().setValue(null);
		form.lyrAdditionalDetails().tabMedicalCardIrish().txtMCNumber().setValue(null);
		form.lyrAdditionalDetails().tabCaseNote().txtCaseNoteLocation().setValue(null);
		form.lyrAdditionalDetails().tabCaseNote().txtCaseNoteComment().setValue(null);
		form.ccAddressSearch().clearscreen();
		form.txtOtherAddress().setValue(null);
		
		//wdev-12978
		form.lyrAdditionalDetails().tabCaseNote().cmbHomeFolder().setValue(null);
		form.lyrAdditionalDetails().tabCaseNote().txtCaseNoteLocation().setValue(null);
		form.lyrAdditionalDetails().tabCaseNote().txtCaseNoteComment().setValue(null);
		form.lyrAdditionalDetails().tabPreferredLanguage().cmbPreferedLanguage().setValue(null);
		
		form.getLocalContext().setPreviousPersonAddress(null);
		form.getLocalContext().setPKeyWhenTypeIsInactive(null);//13611
	}

	protected void onGrdCommChannelsSelectionChanged() throws PresentationLogicException
	{
		setRemoveCommunicationMenuVisibility();
	}

	private void setRemoveCommunicationMenuVisibility()
	{
		boolean bVisible = form.grdCommChannels().getSelectedRowIndex() != -1 && form.getMode().equals(FormMode.EDIT);
		
		form.getContextMenus().Core.getIdentifierGridRemoveItem().setVisible(bVisible);

	}

	@Override
	protected void onImbAddressClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setParentFormMode(form.getMode());
		if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
			engine.open(form.getForms().Core.OtherAddresses, "Temporary Address");
		else
			engine.open(form.getForms().Core.OtherAddresses);
	}

	private boolean checkForEditedData(Patient savedPatient, Patient patient)
	{
		if (savedPatient == null || patient == null)// 	WDEV-15197
			return false;
		
		// wdev-6157
		if ((savedPatient.getAddress() == null && patient.getAddressIsNotNull() && !patient.getAddress().toDisplayString().equals("")) || (savedPatient.getAddressIsNotNull() && !savedPatient.getAddress().toDisplayString().equals("") && patient.getAddress() == null) || (savedPatient.getAddressIsNotNull() && patient.getAddressIsNotNull() && !savedPatient.getAddress().toDisplayString().equals(patient.getAddress().toDisplayString())))
			return true;

		// WDEV-5928 - BW Modified
		if ((savedPatient.getAddress() == null && patient.getAddressIsNotNull()) || (savedPatient.getAddressIsNotNull() && patient.getAddress() == null))
			return true;

		if (savedPatient.getAddressIsNotNull() && patient.getAddressIsNotNull() && (savedPatient.getAddress().getPhone() == null && patient.getAddress().getPhoneIsNotNull() || (savedPatient.getAddress().getPhoneIsNotNull() && patient.getAddress().getPhone() == null) || (savedPatient.getAddress().getPhoneIsNotNull() && patient.getAddress().getPhoneIsNotNull() && !savedPatient.getAddress().getPhone().equals(patient.getAddress().getPhone()))))
			return true;

		if (savedPatient.getName() == null && patient.getName() != null)
			return true;

		if ((savedPatient.getName().getTitle() == null && patient.getName().getTitleIsNotNull()) || (savedPatient.getName().getTitleIsNotNull() && patient.getName().getTitle() == null) || (savedPatient.getName().getTitleIsNotNull() && patient.getName().getTitleIsNotNull() && !savedPatient.getName().getTitle().equals(patient.getName().getTitle())))
			return true;

		if ((savedPatient.getName().getForename() == null && patient.getName().getForenameIsNotNull()) || (savedPatient.getName().getForenameIsNotNull() && patient.getName().getForename() == null) || (savedPatient.getName().getForenameIsNotNull() && patient.getName().getForenameIsNotNull() && !savedPatient.getName().getForename().equals(patient.getName().getForename())))
			return true;

		if ((savedPatient.getName().getMiddleName() == null && patient.getName().getMiddleNameIsNotNull()) || (savedPatient.getName().getMiddleNameIsNotNull() && patient.getName().getMiddleName() == null) || (savedPatient.getName().getMiddleNameIsNotNull() && patient.getName().getMiddleNameIsNotNull() && !savedPatient.getName().getMiddleName().equals(patient.getName().getMiddleName())))
			return true;

		if ((savedPatient.getName().getSurname() == null && patient.getName().getSurnameIsNotNull()) || (savedPatient.getName().getSurnameIsNotNull() && patient.getName().getSurname() == null) || (savedPatient.getName().getSurnameIsNotNull() && patient.getName().getSurnameIsNotNull() && !savedPatient.getName().getSurname().equals(patient.getName().getSurname())))
			return true;

		if ((savedPatient.getSex() == null && patient.getSexIsNotNull()) || (savedPatient.getSexIsNotNull() && patient.getSex() == null) || (savedPatient.getSexIsNotNull() && patient.getSexIsNotNull() && !savedPatient.getSex().toString().equals(patient.getSex().toString())))
			return true;

		if ((savedPatient.getDob() == null && patient.getDobIsNotNull()) || (savedPatient.getDobIsNotNull() && patient.getDob() == null) || (savedPatient.getDobIsNotNull() && patient.getDobIsNotNull() && !savedPatient.getDob().toString().equals(patient.getDob().toString())))
			return true;

		if ((savedPatient.getDod() == null && patient.getDodIsNotNull()) || (savedPatient.getDodIsNotNull() && patient.getDod() == null) || (savedPatient.getDodIsNotNull() && patient.getDodIsNotNull() && !savedPatient.getDod().toString().equals(patient.getDod().toString())))
			return true;

		if ((savedPatient.getMaritalStatus() == null && patient.getMaritalStatusIsNotNull()) || (savedPatient.getMaritalStatusIsNotNull() && patient.getMaritalStatus() == null) || (savedPatient.getMaritalStatusIsNotNull() && patient.getMaritalStatusIsNotNull() && !savedPatient.getMaritalStatus().toString().equals(patient.getMaritalStatus().toString())))
			return true;

		if ((savedPatient.getOccupation() == null && patient.getOccupationIsNotNull()) || (savedPatient.getOccupationIsNotNull() && patient.getOccupation() == null) || (savedPatient.getOccupationIsNotNull() && patient.getOccupationIsNotNull() && !savedPatient.getOccupation().toString().equals(patient.getOccupation().toString())))
			return true;

		if ((savedPatient.getReligion() == null && patient.getReligionIsNotNull()) || (savedPatient.getReligionIsNotNull() && patient.getReligion() == null) || (savedPatient.getReligionIsNotNull() && patient.getReligionIsNotNull() && !savedPatient.getReligion().toString().equals(patient.getReligion().toString())))
			return true;

		if ((savedPatient.getNok() == null && patient.getNokIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNok() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getName() == null && patient.getNok().getNameIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getNameIsNotNull() && patient.getNok().getName() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getNameIsNotNull() && patient.getNok().getNameIsNotNull() && !savedPatient.getNok().getName().toString().equals(patient.getNok().getName().toString())))
			return true;

		if ((savedPatient.getNok() == null && patient.getNokIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNok() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddress() == null && patient.getNok().getAddressIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddress() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull() && !savedPatient.getNok().getAddress().toDisplayString().equals(patient.getNok().getAddress().toDisplayString())) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull() && savedPatient.getNok().getAddress().getPhone() == null && patient.getNok().getAddress().getPhoneIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull() && savedPatient.getNok().getAddress().getPhoneIsNotNull() && patient.getNok().getAddress().getPhone() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull() && savedPatient.getNok().getAddress().getPhoneIsNotNull() && patient.getNok().getAddress().getPhoneIsNotNull() && !savedPatient.getNok().getAddress().getPhone().equals(patient.getNok().getAddress().getPhone())))
			return true;

		if ((savedPatient.getNok() == null && patient.getNokIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNok() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getRelationship() == null && patient.getNok().getRelationshipIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getRelationshipIsNotNull() && patient.getNok().getRelationship() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getRelationshipIsNotNull() && patient.getNok().getRelationshipIsNotNull() && !savedPatient.getNok().getRelationship().equals(patient.getNok().getRelationship())))
			return true;

		if ((savedPatient.getNok() == null && patient.getNokIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNok() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getCommChannels() == null && patient.getNok().getCommChannelsIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getCommChannelsIsNotNull() && patient.getNok().getCommChannels() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getCommChannelsIsNotNull() && patient.getNok().getCommChannelsIsNotNull() && savedPatient.getNok().getCommChannels().size() > 0 && patient.getNok().getCommChannels().size() > 0 && !savedPatient.getNok().getCommChannels().get(0).getCommValue().equals(patient.getNok().getCommChannels().get(0).getCommValue())))
			return true;

		if ((savedPatient.getGp() == null && patient.getGpIsNotNull()) || (savedPatient.getGpIsNotNull() && patient.getGp() == null) || (savedPatient.getGpIsNotNull() && patient.getGpIsNotNull() && !savedPatient.getGp().toString().equals(patient.getGp().toString())))
			return true;

		if ((savedPatient.getGpSurgery() == null && patient.getGpSurgeryIsNotNull()) || (savedPatient.getGpSurgeryIsNotNull() && patient.getGpSurgery() == null) || (savedPatient.getGpSurgeryIsNotNull() && patient.getGpSurgeryIsNotNull() && !savedPatient.getGpSurgery().toString().equals(patient.getGpSurgery().toString())))
			return true;

		if (form.getLocalContext().getbIdentifiersEdited())
			return true;

		// Check values of identifiers
		// WDEV-5928 - BW Modified
		if ((patient.getIdentifiersIsNotNull() && savedPatient.getIdentifiersIsNotNull() && patient.getIdentifiers().size() != savedPatient.getIdentifiers().size()) || (patient.getIdentifiersIsNotNull() && !savedPatient.getIdentifiersIsNotNull()) || (!patient.getIdentifiersIsNotNull() && savedPatient.getIdentifiersIsNotNull()))
			return true;

		for (int i = 0; savedPatient.getIdentifiersIsNotNull() && i < savedPatient.getIdentifiers().size(); i++)
		{
			PatientId voSavedIdent = savedPatient.getIdentifiers().get(i);
			// WDEV-5928 - BW Modified
			boolean found = false;
			for (int j = 0; patient.getIdentifiersIsNotNull() && j < patient.getIdentifiers().size(); j++)
			{
				PatientId voIdent = patient.getIdentifiers().get(j);
				if (voSavedIdent.getTypeIsNotNull() && voIdent.getTypeIsNotNull() && voSavedIdent.getType().equals(voIdent.getType()))
				{
					//found = true;//	WDEV-15202
					if (voSavedIdent.getValueIsNotNull() && voIdent.getValueIsNotNull() && voSavedIdent.getValue().equals(voIdent.getValue()))
					{
						//return true;//	WDEV-15202
						found = true;//	WDEV-15202
						break;//	WDEV-15202
					}
				}
			}
			if (!found)
				return true;
		}

		if (form.getLocalContext().getbCommChannelsEdited())
			return true;

		// Check values of Commchannels
		// WDEV-5928 - BW Modified
		if ((patient.getCommChannelsIsNotNull() && savedPatient.getCommChannelsIsNotNull() && patient.getCommChannels().size() != savedPatient.getCommChannels().size()) || (patient.getCommChannelsIsNotNull() && !savedPatient.getCommChannelsIsNotNull()) || (!patient.getCommChannelsIsNotNull() && savedPatient.getCommChannelsIsNotNull()))
			return true;

		for (int i = 0; savedPatient.getCommChannelsIsNotNull() && i < savedPatient.getCommChannels().size(); i++)
		{
			CommChannelVo voSavedComm = savedPatient.getCommChannels().get(i);
			// WDEV-5928 - BW Modified
			boolean found = false;
			for (int j = 0; patient.getCommChannelsIsNotNull() && j < patient.getCommChannels().size(); j++)
			{
				CommChannelVo voComm = patient.getCommChannels().get(j);

				if (voSavedComm.getChannelTypeIsNotNull() && voComm.getChannelTypeIsNotNull() && voSavedComm.getChannelType().equals(voComm.getChannelType()))
				{
					found = true;
					if (voSavedComm.getCommValueIsNotNull() && voComm.getCommValueIsNotNull() && !voSavedComm.getCommValue().equals(voComm.getCommValue()))
						return true;
				}
			}
			if (!found)
				return true;
		}

		if ((savedPatient.getInsurance() == null && patient.getInsuranceIsNotNull()) || (savedPatient.getInsuranceIsNotNull() && patient.getInsurance() == null) || (savedPatient.getInsuranceIsNotNull() && patient.getInsuranceIsNotNull() && !savedPatient.getInsurance().toString().equals(patient.getInsurance().toString())))
			return true;

		return false;
	}

	
	/*protected void onBtnDeceasedClick() throws PresentationLogicException
	{
		if (form.getGlobalContext().Core.getPatientShort() == null)
		{
			form.getGlobalContext().Core.setPatientShort(new PatientShort());
		}

		engine.open(form.getForms().Clinical.DeathDetails);
	}*/

	protected void onBtnOITRetrieveClick() throws PresentationLogicException 
	{
		
		IUploadDownloadUrlProvider l_oit = engine.getUploadDownloadUrlProvider();
		if (l_oit != null)
		{			
			try
			{
				if(form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getHospnum() != null)
					l_oit.download(engine, "?user_key_1=" + form.getGlobalContext().Core.getPatientShort().getHospnum().getIdValue());
				else
					engine.showMessage("Patient hospital number not assigned to identifier list.");
					
			}
			catch (ConfigurationException e)
			{
				throw new PresentationLogicException(e.getMessage());
			}
		}
	}

	protected void onBtnOITUploadClick() throws PresentationLogicException 
	{
		IUploadDownloadUrlProvider l_oit = engine.getUploadDownloadUrlProvider();
		if (l_oit != null)
		{			
			try
			{
				if (form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getHospnum() != null)
				{
					if (ConfigFlag.UI.OIT_USERKEY6.getValue() == "")
					{
						engine.showMessage("Please setup OIT_USERKEY6 flag");
						return;
					}
					l_oit.upload(engine, "?user_key_1=" + form.getGlobalContext().Core.getPatientShort().getHospnum().getIdValue() + "&user_key_6=" + ConfigFlag.UI.OIT_USERKEY6.getValue());
				}
				else
					engine.showMessage("Patient hospital number not assigned to identifier list.");
			}
			catch (ConfigurationException e)
			{
				throw new PresentationLogicException(e.getMessage());
			}
		}		
	}

	@Override
	protected void onImbClearGPClick() throws PresentationLogicException
	{	
		//http://jira/browse/WDEV-9672
		form.getGlobalContext().Core.setGPSurgery(null);
		form.getGlobalContext().Core.setGPDetails(null);
		
		if(form.getLocalContext().getPatientIsNotNull())
		{
			form.getLocalContext().getPatient().setGp(null);
			form.getLocalContext().getPatient().setGpSurgery(null); 
		}

		form.txtGPName().setValue(null);
		form.txtGPPractice().setValue(null);
		form.imbGP().setTooltip(null);		
	}

	@Override
	protected void onCcPatientImageValueChanged() throws PresentationLogicException 
	{	
		if (form.getGlobalContext().Core.getPatientImage() != null)
		{
			if( ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				form.lyrPatientDetails().tabPage1().ccPatientImage().setDBImage(form.getGlobalContext().Core.getPatientImage());
		}
	}

	@Override
	protected void onBtnEditPhotoClick() throws PresentationLogicException 
	{	
		if( ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			form.lyrPatientDetails().tabPage1().ccPatientImage().setMode(FormMode.EDIT);
	}

	@Override
	protected void onFormClosing(CancelArgs args) throws PresentationLogicException 
	{
		if( ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			form.lyrPatientDetails().tabPage1().ccPatientImage().clear();
	}

	@Override
	protected void onBtnFolderCommentClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Core.setCommentDialogString(form.lyrAdditionalDetails().tabCaseNote().txtCaseNoteComment().getValue());
		form.getGlobalContext().Core.setCommentDialogReadOnly(Boolean.TRUE);
		form.getGlobalContext().Core.setCommentDialogTitle("Case Note Folder Comment");

		engine.open(form.getForms().Core.CommentDialog);
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if (form.getLocalContext().getPDSStatusMessageIDIsNotNull()
			&& messageBoxId == form.getLocalContext().getPDSStatusMessageID())
		{
			//wdev-15181
			if(result.equals(DialogResult.YES))
			{
				form.getLocalContext().setbUpdatePDS(Boolean.TRUE);//wdev-15181
				//WDEV-14397
				if (validateData())
				{
					performSave();
				}
			}
			else
				cancelSave();
			
			return;
		}

		if (form.getLocalContext().getRemoveAppointmentsMessageIDIsNotNull()
			&& messageBoxId == form.getLocalContext().getRemoveAppointmentsMessageID())
		{
			form.getLocalContext().setbRemovePatientAppointments(result.equals(DialogResult.YES) ? Boolean.TRUE : Boolean.FALSE);

			//WDEV-14397
			if (validateData())
			{
				performSave();
			}
			return;
		}
			
		if (form.getLocalContext().getAliasChangedMessageIDIsNotNull()
			&&messageBoxId == form.getLocalContext().getAliasChangedMessageID())
		{	
			if (result.equals(DialogResult.YES))
			{
				form.getLocalContext().setbSaveAliasChange(true);
				form.getGlobalContext().Core.setAliasName(form.getLocalContext().getPatientIsNotNull() && form.getLocalContext().getPatient().getNameIsNotNull() ? form.getLocalContext().getPatient().getName().getSurname() : null);			
			}
			else if (result.equals(DialogResult.NO))
				form.getLocalContext().setbSaveAliasChange(false);

			//WDEV-14397
			if (validateData())
			{
				performSave();
			}
			return;
		}
		
		//WDEV-14397
		// This is to continue the save in the case where just a warning is issued.
		if (form.getLocalContext().getPCTMessageIdIsNotNull())
		{
			//WDEV-14397			
			if (form.getLocalContext().getPCTMessageId().equals(DialogResult.OK))
				performSave();
			return;
		}
		
		
	}

	
	/*protected void onImbAliasClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.AliasDialog);
	}*/

	
	//wdev-13521
	protected void onCcPatientDetailsValueChanged()	throws PresentationLogicException 
	{
		checkTheEvent(form.lyrPatientDetails().tabPage2().ccPatientDetails().getButtonAction());
		form.lyrPatientDetails().tabPage2().ccPatientDetails().setButtonAction(NONE);
		
	}

	//wdev-13521
	protected void onCcPatientDetailsWithImageValueChanged()throws PresentationLogicException 
	{
		checkTheEvent(form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().getButtonAction());
		form.lyrPatientDetails().tabPage1().ccPatientDetailsWithImage().setButtonAction(NONE);
		
	}
	//wdev-13521
	private void checkTheEvent(Integer action)
	{
			
		switch (action)
		{
			
			case BUTTON_OTHERNAMES:
				engine.open(form.getForms().Core.AliasNames);
			break;
			
			case BUTTON_ALIAS:
				engine.open(form.getForms().Core.AliasDialog);
			break;
			
			case BUTTON_DECEASED:
				
				if (form.getGlobalContext().Core.getPatientShort() == null)
				{
					form.getGlobalContext().Core.setPatientShort(new PatientShort());
				}

				engine.open(form.getForms().Clinical.DeathDetails);
				
			break;
		}
	}

	@Override
	//WDEV-14466
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		if (engine.isDialog())
		{
			Patient patient;
			try
			{
				patient = domain.getPatient(form.getGlobalContext().Core.getPatientShort());
				form.getLocalContext().setPatient(patient);
			}
			catch (StaleObjectException e)
			{
				throw new FormOpenException("Failed to retrieve Patient due to StaleObjectException");
			}
	
			engine.close(DialogResult.CANCEL);
			save(patient, Boolean.FALSE, null, null,true);
			return;
		}
	}

	protected void onRadioButtonGroup1ValueChanged() throws PresentationLogicException 
	{
		//WDEV-15957
		if(Group1Enumeration.rdoYes.equals(form.lyrAdditionalDetails().tabCopy().Group1().getValue()) && form.lyrAdditionalDetails().tabCopy().dteEffectiveFromDate().getValue() == null)
		{
			form.lyrAdditionalDetails().tabCopy().dteEffectiveFromDate().setValue(new Date());
			form.lyrAdditionalDetails().tabCopy().dteEffectiveFromDate().setRequired(true);
		}
		else
		{
			form.lyrAdditionalDetails().tabCopy().dteEffectiveFromDate().setValue(null);
			form.lyrAdditionalDetails().tabCopy().dteEffectiveFromDate().setRequired(false);
		}
	}
}
