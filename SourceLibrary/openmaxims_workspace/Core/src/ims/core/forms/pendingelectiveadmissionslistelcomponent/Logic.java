//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.pendingelectiveadmissionslistelcomponent;

import ims.RefMan.vo.PatientElectiveListForPendingAdmissionVo;
import ims.RefMan.vo.PatientElectiveListForPendingAdmissionVoCollection;
import ims.RefMan.vo.PatientElectiveTCIBedManagerCommentVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientAlertLiteVo;
import ims.core.vo.PatientShortListVo;
import ims.core.vo.PendingElectiveAdmissionListFilterVo;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.AlertType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.cn.data.TreeNode;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.vo.LookupInstVo;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	public static final Integer COLSURNAME = new Integer(0);
	public static final Integer COLFORENAME = new Integer(1);
	public static final Integer COLHOSPNUM = new Integer(-1);
	public static final Integer COLAGE = new Integer(-2);
	public static final Integer COLSEX = new Integer(-3);
	public static final Integer COLALERTS = new Integer(-4);
	public static final Integer COLCONSULANT = new Integer(-5);
	public static final Integer COLWARD = new Integer(-6);
	public static final Integer COLSPECIALTY = new Integer(-7);
	public static final Integer COLPROCEDURE = new Integer(-8);
	public static final Integer COLTCIDATE = new Integer(-9);
	public static final Integer COLMANAGE = new Integer(-10);
	public static final Integer COLCOMMENT = new Integer(-11);

	private static class AgeComparator implements Comparator<PatientElectiveListForPendingAdmissionVo>
	{
		private int direction;

		public AgeComparator(SortOrder sortOrderAge)
		{
			if (SortOrder.ASCENDING.equals(sortOrderAge))
				direction = 1;
			else
				direction = -1;
		}

		/**
		 * Function used to compare two records after age
		 */
		public int compare(PatientElectiveListForPendingAdmissionVo o1, PatientElectiveListForPendingAdmissionVo o2)
		{
			if (o1.getPatient().getAge() != null && o2.getPatient().getAge() != null)
			{
				return o1.getPatient().getAge().compareTo(o2.getPatient().getAge()) * direction;
			}
			
			if (o1.getPatient().getAge() != null && o2.getPatient().getAge() == null)
			{
				return direction;
			}
			
			if (o2.getPatient().getAge() != null && o1.getPatient().getAge() == null)
			{
				return -1 * direction;
			}

			return 0;
		}
	}
	
	
	private static class AlertComparator implements Comparator<PatientElectiveListForPendingAdmissionVo>
	{
		private int direction;

		public AlertComparator(SortOrder sortOrderAlert)
		{
			if (SortOrder.ASCENDING.equals(sortOrderAlert))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(PatientElectiveListForPendingAdmissionVo o1, PatientElectiveListForPendingAdmissionVo o2)
		{
			
			Integer val1 = Boolean.TRUE.equals(o1.getPatinetHasActiveAlerts()) ? 1 : 0;
			Integer val2 = Boolean.TRUE.equals(o2.getPatinetHasActiveAlerts()) ? 1 : 0;

			if (val1 != 0 && val2 != 0)
			{
				return val1.compareTo(val2) * direction;
			}

			if (val1 != 0 && val2 == 0)
			{
				return direction;
			}

			if (val2 != 0 && val1 == 0)
			{
				return -1 * direction;
			}

			return 0;
		}
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}

	private void initialize()
	{
		loadHospitals();

		if (form.cmbHospital().getValue() == null && engine.getCurrentLocation() != null)
		{
			// Try and load the logged in location as a ward
			LocMostVo voLoc = domain.getLocation((LocationRefVo) engine.getCurrentLocation());

			if (voLoc != null && LocationType.WARD.equals(voLoc.getType()))
			{
				form.cmbHospital().setValue(voLoc.getParentLocation());
				form.qmbWard().newRow(voLoc, voLoc.getName());
				form.qmbWard().setValue(voLoc);
			}
		}

		loadAlerts();

		form.cmbIDType().setValue(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
		initializeDynamicGrid();
		updateControlsState();

	}

	private void initializeDynamicGrid()
	{
		form.dyngrdPatients().clear();
		form.dyngrdPatients().setSelectable(true);

		DynamicGridColumn surnameColumn = form.dyngrdPatients().getColumns().newColumn("Surname", COLSURNAME);
		surnameColumn.setSortMode(SortMode.AUTOMATIC);
		surnameColumn.setWidth(64);

		DynamicGridColumn forenameColumn = form.dyngrdPatients().getColumns().newColumn("Forename", COLFORENAME);
		forenameColumn.setSortMode(SortMode.AUTOMATIC);
		forenameColumn.setWidth(64);

		DynamicGridColumn hospnumColumn = form.dyngrdPatients().getColumns().newColumn("Hosp. No.", COLHOSPNUM);
		hospnumColumn.setSortMode(SortMode.AUTOMATIC);
		hospnumColumn.setWidth(62);

		DynamicGridColumn ageColumn = form.dyngrdPatients().getColumns().newColumn("Age", COLAGE);
		ageColumn.setSortMode(SortMode.MANUAL);
		ageColumn.setWidth(35);

		DynamicGridColumn sexColumn = form.dyngrdPatients().getColumns().newColumn("Sex", COLSEX);
		sexColumn.setSortMode(SortMode.AUTOMATIC);
		sexColumn.setWidth(45);

		DynamicGridColumn alertColumn = form.dyngrdPatients().getColumns().newColumn("Alert", COLALERTS);
		alertColumn.setSortMode(SortMode.MANUAL);
		alertColumn.setWidth(40);

		DynamicGridColumn consColumn = form.dyngrdPatients().getColumns().newColumn("Consultant", COLCONSULANT);
		consColumn.setSortMode(SortMode.AUTOMATIC);
		consColumn.setWidth(72);

		DynamicGridColumn wardColumn = form.dyngrdPatients().getColumns().newColumn("Ward", COLWARD);
		wardColumn.setSortMode(SortMode.AUTOMATIC);
		wardColumn.setWidth(62);

		DynamicGridColumn specColumn = form.dyngrdPatients().getColumns().newColumn("Specialty", COLSPECIALTY);
		specColumn.setSortMode(SortMode.AUTOMATIC);
		specColumn.setWidth(66);

		DynamicGridColumn procColumn = form.dyngrdPatients().getColumns().newColumn("Procedure", COLPROCEDURE);
		procColumn.setSortMode(SortMode.AUTOMATIC);
		procColumn.setWidth(66);

		DynamicGridColumn tciDateColumn = form.dyngrdPatients().getColumns().newColumn("TCI Date", COLTCIDATE);
		tciDateColumn.setSortMode(SortMode.AUTOMATIC);
		tciDateColumn.setWidth(65);

		DynamicGridColumn manageColumn = form.dyngrdPatients().getColumns().newColumn("Management", COLMANAGE);
		manageColumn.setSortMode(SortMode.AUTOMATIC);
		manageColumn.setWidth(84);

		DynamicGridColumn commentsColumn = form.dyngrdPatients().getColumns().newColumn("Comments", COLCOMMENT);

		commentsColumn.setWidth(-1);

		form.lblTotal().setValue("Total : 0");
	}

	private void loadAlerts()
	{
		form.cmbAlert().clear();

		TreeNode[] coll = LookupHelper.getAlertType(domain.getLookupService()).getRootNodes();

		if (coll != null)
		{
			for (int i = 0; i < coll.length; i++)
			{
				AlertType item = (AlertType) coll[i];
				ArrayList<LookupInstVo> coll1 = item.getChildInstances();

				AlertType type = null;
				for (int j = 0; j < coll1.size(); j++)
				{
					type = (AlertType) coll1.get(j);
					if (type.isActive())
						form.cmbAlert().newRow((AlertType) coll1.get(j), coll1.get(j).toString());
				}
			}
		}
	}

	private void loadHospitals()
	{
		LocationLiteVoCollection voColl = domain.listActiveHospitalsLite();

		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			form.cmbHospital().newRow(voColl.get(i), voColl.get(i).getName());

			if (engine.getCurrentLocation() != null && voColl.get(i).getID_Location().equals(engine.getCurrentLocation().getID()))
				form.cmbHospital().setValue(voColl.get(i));
		}

	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.CommentDialog) && result.equals(DialogResult.OK))
		{
			PatientElectiveListForPendingAdmissionVo voPE = ((PatientElectiveListForPendingAdmissionVo)form.dyngrdPatients().getSelectedRow().getValue());
			voPE.getTCIDetails().setBedManagerComment(form.getGlobalContext().Core.getCommentDialogString());
			
			PatientElectiveTCIBedManagerCommentVo tciDetailsToSave = voPE.getTCIDetails();
			
			String [] errors = tciDetailsToSave.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}
			
			try 
			{
				domain.saveTCIDetails(tciDetailsToSave);
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
			
			doSearch();
		}
		
		updateControlsState(); 
	}

	@Override
	protected void onDyngrdPatientsCellButtonClicked(ims.framework.controls.DynamicGridCell cell)
	{
		addEditComment(cell);
	}

	private void addEditComment(DynamicGridCell cell)
	{
		if (cell != null)
			form.dyngrdPatients().setSelectedRow(cell.getRow());

		if (form.dyngrdPatients().getSelectedRow() != null && form.dyngrdPatients().getSelectedRow().getValue() != null)
		{
			PatientElectiveListForPendingAdmissionVo voPending = domain.getCurrentPendingRecord((PatientElectiveListForPendingAdmissionVo)form.dyngrdPatients().getSelectedRow().getValue());
			form.getGlobalContext().Core.setCommentDialogString(voPending.getTCIDetails() != null ? voPending.getTCIDetails().getBedManagerComment() : "");
			form.dyngrdPatients().getSelectedRow().setValue(voPending);
			
			engine.open(form.getForms().Core.CommentDialog);
		}
	}

	@Override
	protected void onDyngrdPatientsRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		PatientShortListVo patient = ((PatientElectiveListForPendingAdmissionVo)row.getValue()).getPatient();
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(patient));
		updateControlsState();
	}

	@Override
	protected void onDyngrdPatientsColumnHeaderClicked(ims.framework.controls.DynamicGridColumn column)
	{
		sortColumn((Integer) column.getIdentifier());
		updateControlsState();
	}

	private void sortColumn(Integer columnIdentifer)
	{
		// Get records from grid
		PatientElectiveListForPendingAdmissionVoCollection gridValues = populateRecordsFromGrid();
		
		// Toggle sort order for column
		sortOrderToggle(columnIdentifer);
		
		// Determine column, sort records
		if (COLAGE.equals(columnIdentifer))
		{
			gridValues.sort(new AgeComparator(form.getLocalContext().getSortOrderAge()));
		}
		else if (COLALERTS.equals(columnIdentifer))
		{
			gridValues.sort(new AlertComparator(form.getLocalContext().getSortOrderAlerts()));
		}
		
		// Get selected record
		Object selectedValue = form.dyngrdPatients().getValue();
		
		populateDinamicGrid(gridValues);
		
		// Reselect value
		form.dyngrdPatients().setValue(selectedValue);
	}

	private void sortOrderToggle(Integer columnIdentifer)
	{
		// Age column
		if (COLAGE.equals(columnIdentifer))
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAge()))
				form.getLocalContext().setSortOrderAge(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderAge(SortOrder.ASCENDING);
		}
		else
		{
			form.getLocalContext().setSortOrderAge(null);
		}
		
		
		// Alert column 
		if (COLALERTS.equals(columnIdentifer))
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAlerts()))
				form.getLocalContext().setSortOrderAlerts(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderAlerts(SortOrder.ASCENDING);
			
		}
		else
		{
			form.getLocalContext().setSortOrderAlerts(null);
		}
	}

	private PatientElectiveListForPendingAdmissionVoCollection populateRecordsFromGrid()
	{
		// Create collection to return
		PatientElectiveListForPendingAdmissionVoCollection gridValues = new PatientElectiveListForPendingAdmissionVoCollection();
		
		// Add each record from grid to collection
		for (int i = 0; i < form.dyngrdPatients().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdPatients().getRows().get(i);
			
			if (row.getValue() instanceof PatientElectiveListForPendingAdmissionVo)
				gridValues.add((PatientElectiveListForPendingAdmissionVo) row.getValue());
		}
		
		// Return collection grid
		return gridValues;
	}

	@Override
	protected void onDteTCIValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbWard().clear();
	}

	@Override
	protected void onQmbWardTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbHospital().getValue() == null)
		{
			engine.showMessage("Please select a Hospital to find a Ward for.");
			return;
		}

		if (value != null)
		{
			LocationLiteVoCollection voColl = domain.listWards(form.cmbHospital().getValue().getID_Location(), value);

			voColl.sort();
			form.qmbWard().clear();
			for (int i = 0; i < voColl.size(); i++)
				form.qmbWard().newRow(voColl.get(i), voColl.get(i).getName());

			if (voColl.size() == 1)
				form.qmbWard().setValue(voColl.get(0));
			else if (voColl.size() > 1)
				form.qmbWard().showOpened();
		}
	}

	@Override
	protected void onQmbConsTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		if (value != null)
		{
			HcpFilter voHCPFilter = new HcpFilter();
			PersonName name = new PersonName();
			name.setSurname(value);
			voHCPFilter.setQueryName(name);
			voHCPFilter.setHcpType(HcpDisType.MEDICAL);

			HcpLiteVoCollection voColl = domain.listHCPs(voHCPFilter);

			voColl.sort();
			form.qmbCons().clear();

			for (int i = 0; i < voColl.size(); i++)
			{
				form.qmbCons().newRow(voColl.get(i), voColl.get(i).getIHcpName());
			}

			if (voColl.size() == 1)
				form.qmbCons().setValue(voColl.get(0));
			else if (voColl.size() > 1)
				form.qmbCons().showOpened();
		}
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
	}

	private void clearScreen()
	{
		form.cmbHospital().setValue(null);
		form.cmbAlert().setValue(null);
		form.dteTCI().setValue(null);
		form.chkTCIOnly().setValue(false);
		form.qmbCons().setValue(null);
		form.qmbWard().setValue(null);
		form.txtForename().setValue(null);
		form.txtSurname().setValue(null);
		form.txtIDNum().setValue(null);
		form.cmbSpecialty().setValue(null);

		form.dyngrdPatients().getRows().clear();
		form.lblTotal().setValue("Total : 0");
		form.getGlobalContext().STHK.setPendingElectiveAdmissionListFilter(null);
	
		form.getGlobalContext().Core.setPatientShort(null);
		engine.setPatientInfo("Please enter Patient ID or Surname and/or Forename");
		
		updateControlsState();
	}

	private void updateControlsState()
	{
		boolean showAddEditComment = form.dyngrdPatients().getSelectedRow() != null &&  form.dyngrdPatients().getSelectedRow().getValue() != null && ((PatientElectiveListForPendingAdmissionVo)form.dyngrdPatients().getSelectedRow().getValue()).getTCIDetails() != null;
		
		form.chkTCIOnly().setVisible(form.dteTCI().getValue() != null);
		form.getContextMenus().Core.hideAllAddEditCommentForPendingElectiveListMenuItems();
		
		form.getContextMenus().Core.getAddEditCommentForPendingElectiveListADD_EDIT_COMMENTItem().setVisible(showAddEditComment);
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch();
	}

	private void doSearch()
	{

		if (form.txtIDNum().getValue() != null && form.cmbIDType().getValue() == null)
		{
			engine.showErrors(new String[] { "Please enter both an Identifier type as well as its value." });
			updateControlsState();
			return;
		}

		//populate the search filter
		PendingElectiveAdmissionListFilterVo voFilter = new PendingElectiveAdmissionListFilterVo();
		
		voFilter.setHospNum(form.txtIDNum().getValue());
		voFilter.setIDType(form.cmbIDType().getValue());
		voFilter.setSurname(form.txtSurname().getValue());
		voFilter.setForename(form.txtForename().getValue());
		voFilter.setHospital(form.cmbHospital().getValue());
		voFilter.setWard(form.qmbWard().getValue());
		voFilter.setTCI(form.dteTCI().getValue());
		voFilter.setConsultant(form.qmbCons().getValue());
		voFilter.setAlert(form.cmbAlert().getValue());
		voFilter.setSpecialty(form.cmbSpecialty().getValue());
		voFilter.setTCIDateOnly(form.chkTCIOnly().getValue());

		form.getGlobalContext().STHK.setPendingElectiveAdmissionListFilter(voFilter);
		
		PatientElectiveListForPendingAdmissionVoCollection electiveListsColl;
		
		if (voFilter.countFieldsWithValue() == 2 && (voFilter.getTCIDateOnlyIsNotNull() && voFilter.getIDTypeIsNotNull()) )
		{
			engine.showMessage("Please enter some valid search criteria.", "Invalid search cirteria", MessageButtons.OK, MessageIcon.ERROR);
			updateControlsState();
			return;
		}

		if (voFilter.countFieldsWithValue() > 1)
		{
			electiveListsColl = domain.getElectiveLists(voFilter);
		}
		else
		{
			engine.showErrors(new String[]{"Please enter some search criteria."});
			updateControlsState();
			return;
		}
		
		if (electiveListsColl == null || electiveListsColl.size() == 0)
		{
			engine.showMessage("No matching records found");
			form.dyngrdPatients().getRows().clear();
			updateControlsState();
			return;
		}
		
		if (electiveListsColl != null)
		{
			form.lblTotal().setValue("Total : " + String.valueOf(electiveListsColl.size()));
		}
			
		populateDinamicGrid(electiveListsColl);
		updateControlsState();
	}

	private void populateDinamicGrid(PatientElectiveListForPendingAdmissionVoCollection electiveListsColl)
	{
		form.dyngrdPatients().getRows().clear();
		form.lblTotal().setValue("Total : 0");
		
		for (int i = 0 ; electiveListsColl != null && i < electiveListsColl.size() ; i++)
		{
			addNewDynamicGridRow(electiveListsColl.get(i));
		}
	}

	private void addNewDynamicGridRow(PatientElectiveListForPendingAdmissionVo voPendingElective)
	{
		DynamicGridRow newRow = form.dyngrdPatients().getRows().newRow();
		voPendingElective.setPatinetHasActiveAlerts(false);
		
		if (voPendingElective.getPatient() != null)
			voPendingElective.getPatient().calculateAge();
		
		if (voPendingElective.getPatientIsNotNull() && voPendingElective.getPatient().getNameIsNotNull())
		{
			DynamicGridCell surname = newRow.getCells().newCell(getColumn(COLSURNAME), DynamicCellType.STRING);
			surname.setValue(voPendingElective.getPatient().getName().getSurname());
			surname.setTooltip(voPendingElective.getPatient().getName().getSurname());
			surname.setReadOnly(true);
			
			DynamicGridCell forename = newRow.getCells().newCell(getColumn(COLFORENAME), DynamicCellType.STRING);
			forename.setValue(voPendingElective.getPatient().getName().getForename());
			forename.setTooltip(voPendingElective.getPatient().getName().getForename());
			forename.setReadOnly(true);	
		}	
		
		if (voPendingElective.getPatientIsNotNull() && voPendingElective.getPatient().getIdentifiersIsNotNull()
			&& voPendingElective.getPatient().getIdentifiers().size() > 0 && voPendingElective.getPatient().getPatId(PatIdType.HOSPNUM) != null)
		{
			DynamicGridCell hospnumCell = newRow.getCells().newCell(getColumn(COLHOSPNUM), DynamicCellType.STRING);
			hospnumCell.setValue(voPendingElective.getPatient().getPatId(PatIdType.HOSPNUM).getValueIsNotNull() ? voPendingElective.getPatient().getPatId(PatIdType.HOSPNUM).getValue().toString(): "");
			hospnumCell.setTooltip(voPendingElective.getPatient().getPatId(PatIdType.HOSPNUM).getValueIsNotNull() ? voPendingElective.getPatient().getPatId(PatIdType.HOSPNUM).getValue().toString(): "");
			hospnumCell.setReadOnly(true);
		}	
		
		if (voPendingElective.getPatientIsNotNull() && voPendingElective.getPatient().getAgeIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLAGE), DynamicCellType.INT);
			patientCell.setValue(voPendingElective.getPatient().getAge());
			patientCell.setReadOnly(true);
		}	

		if (voPendingElective.getPatientIsNotNull()	&& voPendingElective.getPatient().getSexIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLSEX), DynamicCellType. STRING);
			patientCell.setValue(voPendingElective.getPatient().getSex().toString());
			patientCell.setTooltip(voPendingElective.getPatient().getSex().toString());
			patientCell.setReadOnly(true);
		}	
		
		if (voPendingElective.getPatientIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLALERTS), DynamicCellType.IMAGE); 
			
			if(voPendingElective.getPatient().getPatientAlertsIsNotNull() && voPendingElective.getPatient().getPatientAlerts().size() > 0 )
			{
				boolean hasActiveAlerts = false;
				for(int i = 0; i < voPendingElective.getPatient().getPatientAlerts().size();i++)
				{
					PatientAlertLiteVo patAlertLiteVo = voPendingElective.getPatient().getPatientAlerts().get(i);
					
					if(patAlertLiteVo != null && patAlertLiteVo.getIsCurrentlyActiveAlert().equals(Boolean.TRUE))
					{
						hasActiveAlerts = true;
						break;
					}
				}
				
				if (hasActiveAlerts)
				{
					patientCell.setValue(form.getImages().Core.Alert16);
					voPendingElective.setPatinetHasActiveAlerts(true);
				}
			}
			
			patientCell.setReadOnly(true);
		}	
		
		if (voPendingElective.getConsultantIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLCONSULANT), DynamicCellType.STRING);
			patientCell.setValue(voPendingElective.getConsultant().getName().toString());
			patientCell.setTooltip(voPendingElective.getConsultant().getName().toString());
			patientCell.setReadOnly(true);
		}	

		if (voPendingElective.getWardIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLWARD), DynamicCellType.STRING);
			patientCell.setValue(voPendingElective.getWard().getName().toString());
			patientCell.setTooltip(voPendingElective.getWard().getName().toString());
			patientCell.setReadOnly(true);
		}	
		
		if (voPendingElective.getElectiveListIsNotNull() && voPendingElective.getElectiveList().getService() != null && voPendingElective.getElectiveList().getService().getSpecialty() != null)
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLSPECIALTY), DynamicCellType.STRING);
			patientCell.setValue(voPendingElective.getElectiveList().getService().getSpecialty().getText());
			patientCell.setTooltip(voPendingElective.getElectiveList().getService().getSpecialty().getText());
			patientCell.setReadOnly(true);
		}	

		if (voPendingElective.getPrimaryProcedureIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLPROCEDURE), DynamicCellType.STRING);
			patientCell.setValue(voPendingElective.getPrimaryProcedure().getProcedureName().toString());
			patientCell.setTooltip(voPendingElective.getPrimaryProcedure().getProcedureName().toString());
			patientCell.setReadOnly(true);
		}	

		if (voPendingElective.getTCIDetailsIsNotNull() && voPendingElective.getTCIDetails().getTCIDateIsNotNull() )
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLTCIDATE), DynamicCellType.DATE);
			patientCell.setValue(voPendingElective.getTCIDetails().getTCIDate());
			patientCell.setReadOnly(true);
		}	
		
		
		if (voPendingElective.getIntendedManagementIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLMANAGE), DynamicCellType.LABEL);
			patientCell.setValue(voPendingElective.getIntendedManagement().getText());
			patientCell.setTooltip(voPendingElective.getIntendedManagement().getText());
			patientCell.setReadOnly(true);
		}	
		
		if (voPendingElective.getTCIDetailsIsNotNull() && voPendingElective.getTCIDetails().getBedManagerCommentIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLCOMMENT), DynamicCellType.IMAGEBUTTON);
			patientCell.setReadOnly(false);
			patientCell.setAutoPostBack(true);
			patientCell.setValue(form.getImages().Core.Memo);
			patientCell.setTooltip(voPendingElective.getTCIDetails().getBedManagerComment());
		}	
		
		if(voPendingElective.getPatient().getAssociatedPatientIsNotNull())
			newRow.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
			
		if (voPendingElective.getPatient().getDodIsNotNull())
			newRow.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());			

		newRow.setValue(voPendingElective);
		
	}

	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdPatients().getColumns().getByIdentifier(identifier);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.AddEditCommentForPendingElectiveList.ADD_EDIT_COMMENT:
				addEditComment(null);
			break;
		}
	}

	public void refresh()
	{
		if (form.getGlobalContext().STHK.getPendingElectiveAdmissionListFilter() != null);
		{
			refreshSearchCriteria();
		}
	}

	private void refreshSearchCriteria()
	{
		
		PendingElectiveAdmissionListFilterVo voFilter = form.getGlobalContext().STHK.getPendingElectiveAdmissionListFilter();
		
		if (voFilter != null)
		{
			form.cmbHospital().setValue(null);
			form.qmbWard().setValue(null);
			
			form.txtIDNum().setValue(voFilter.getHospNum());
			form.cmbIDType().setValue(voFilter.getIDType());
			form.txtSurname().setValue(voFilter.getSurname());
			form.txtForename().setValue(voFilter.getForename());
			
			for(int i = 0 ; voFilter.getHospitalIsNotNull() && i < form.cmbHospital().getValues().size() ; i++)
			{
				LocationLiteVo voHosp = (LocationLiteVo)form.cmbHospital().getValues().get(i);
				if (voHosp.getID_Location().equals(voFilter.getHospital().getID_Location()))
					form.cmbHospital().setValue((LocationLiteVo)form.cmbHospital().getValues().get(i));
			}
			
			if ( form.cmbHospital().getValue() == null && voFilter.getHospitalIsNotNull())
			{
				LocationLiteVo voHosp = domain.getHospital(voFilter.getHospital());
				form.cmbHospital().newRow(voHosp, voHosp.getName().toString());
				form.cmbHospital().setValue(voHosp);
			}
			
			if ( form.qmbCons().getValue() == null && voFilter.getConsultantIsNotNull())
			{
				HcpLiteVo voHCP = domain.getHCP(voFilter.getConsultant().getID_Hcp());
				form.qmbCons().newRow(voHCP, voHCP.getMos().getName().toString());
				form.qmbCons().setValue(voHCP);
			}
			
			if ( form.qmbWard().getValue() == null && voFilter.getWardIsNotNull())
			{
				LocationLiteVo voWard = domain.getWard(voFilter.getWard());
				form.qmbWard().newRow(voWard, voWard.getName());
				form.qmbWard().setValue(voWard);
			}
			
			form.dteTCI().setValue(voFilter.getTCI());
			form.cmbAlert().setValue(voFilter.getAlert());
			form.cmbSpecialty().setValue(voFilter.getSpecialty());
			form.chkTCIOnly().setValue(voFilter.getTCIDateOnly());

			doSearch();
		}
	}
}
