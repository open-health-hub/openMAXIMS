//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.fluidbalancedetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbTimeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.DailyTimePeriods value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.DailyTimePeriods value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.DailyTimePeriods value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.DailyTimePeriods value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.DailyTimePeriods value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.DailyTimePeriods getValue()
		{
			return (ims.core.vo.lookups.DailyTimePeriods)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.DailyTimePeriods value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdOutputRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdOutputRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColTypeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColTypeOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getColType()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellColTypeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColValueReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColValueReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColValueOpened()
		{
			super.row.showOpened(1);
		}
		public Integer getColValue()
		{
			return (Integer)super.row.get(1);
		}
		public void setColValue(Integer value)
		{
			super.row.set(1, value);
		}
		public void setCellColValueTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.FluidBalanceDetailsVo getValue()
		{
			return (ims.core.vo.FluidBalanceDetailsVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.FluidBalanceDetailsVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdOutputRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdOutputRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdOutputRow get(int index)
		{
			return new grdOutputRow(super.collection.get(index));
		}
		public grdOutputRow newRow()
		{
			return new grdOutputRow(super.collection.newRow());
		}
		public grdOutputRow newRow(boolean autoSelect)
		{
			return new grdOutputRow(super.collection.newRow(autoSelect));
		}
		public grdOutputRow newRowAt(int index)
		{
			return new grdOutputRow(super.collection.newRowAt(index));
		}
		public grdOutputRow newRowAt(int index, boolean autoSelect)
		{
			return new grdOutputRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdOutputGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.core.vo.FluidBalanceDetailsVoCollection getValues()
		{
			ims.core.vo.FluidBalanceDetailsVoCollection listOfValues = new ims.core.vo.FluidBalanceDetailsVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.FluidBalanceDetailsVo getValue()
		{
			return (ims.core.vo.FluidBalanceDetailsVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.FluidBalanceDetailsVo value)
		{
			super.grid.setValue(value);
		}
		public grdOutputRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdOutputRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdOutputRowCollection getRows()
		{
			return new grdOutputRowCollection(super.grid.getRows());
		}
		public grdOutputRow getRowByValue(ims.core.vo.FluidBalanceDetailsVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdOutputRow(row);
		}
		public void setColTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdIntakeRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdIntakeRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColTypeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColTypeOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getColType()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellColTypeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColValueReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColValueReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColValueOpened()
		{
			super.row.showOpened(1);
		}
		public Integer getColValue()
		{
			return (Integer)super.row.get(1);
		}
		public void setColValue(Integer value)
		{
			super.row.set(1, value);
		}
		public void setCellColValueTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.FluidBalanceDetailsVo getValue()
		{
			return (ims.core.vo.FluidBalanceDetailsVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.FluidBalanceDetailsVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdIntakeRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdIntakeRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdIntakeRow get(int index)
		{
			return new grdIntakeRow(super.collection.get(index));
		}
		public grdIntakeRow newRow()
		{
			return new grdIntakeRow(super.collection.newRow());
		}
		public grdIntakeRow newRow(boolean autoSelect)
		{
			return new grdIntakeRow(super.collection.newRow(autoSelect));
		}
		public grdIntakeRow newRowAt(int index)
		{
			return new grdIntakeRow(super.collection.newRowAt(index));
		}
		public grdIntakeRow newRowAt(int index, boolean autoSelect)
		{
			return new grdIntakeRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdIntakeGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.core.vo.FluidBalanceDetailsVoCollection getValues()
		{
			ims.core.vo.FluidBalanceDetailsVoCollection listOfValues = new ims.core.vo.FluidBalanceDetailsVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.FluidBalanceDetailsVo getValue()
		{
			return (ims.core.vo.FluidBalanceDetailsVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.FluidBalanceDetailsVo value)
		{
			super.grid.setValue(value);
		}
		public grdIntakeRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdIntakeRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdIntakeRowCollection getRows()
		{
			return new grdIntakeRowCollection(super.grid.getRows());
		}
		public grdIntakeRow getRowByValue(ims.core.vo.FluidBalanceDetailsVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdIntakeRow(row);
		}
		public void setColTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(632, 480);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 24, 376, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_customControlAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(16), new Integer(24), new Integer(376), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_customControlAuthoringForm, instance1 } );
		ims.framework.Control m_customControlAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_customControlAuthoringForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringControl);
		Menu[] menus1 = m_customControlAuthoringForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 336, 96, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 96, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 176, 336, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mls", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 504, 336, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mls", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 368, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 336, 336, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Irrigation - Out:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 24, 336, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Irrigation - In:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 336, 128, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Fluid Output:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 24, 128, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Fluid Intake:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 456, 448, 72, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 536, 448, 72, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 24, 392, 584, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 160, 96, 136, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1002), ControlState.ENABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 424, 96, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbTimeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1003), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbTimeTemp);
		cmbTimeComboBox cmbTime = (cmbTimeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTimeComboBox.class, m_cmbTimeTemp);
		super.addComboBox(cmbTime);

		// Grid Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 336, 152, 272, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdOutputTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(50), "Total :", Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdOutputTemp);
		grdOutputGrid grdOutput = (grdOutputGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOutputGrid.class, m_grdOutputTemp);
		grdOutput.addMutableComboBoxColumn("Type", 0, 0, 200, true, true, false, false, false, true, -1);
		grdOutput.addIntColumn("mls", 0, 0, -1, false, true, null, false, 0, true);
		super.addGrid(grdOutput);
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 24, 152, 272, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdIntakeTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(50), "Total :", Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdIntakeTemp);
		grdIntakeGrid grdIntake = (grdIntakeGrid)GridFlyweightFactory.getInstance().createGridBridge(grdIntakeGrid.class, m_grdIntakeTemp);
		grdIntake.addMutableComboBoxColumn("Type", 0, 0, 200, true, true, false, false, false, true, -1);
		grdIntake.addIntColumn("mls", 0, 0, -1, false, true, null, false, 0, true);
		super.addGrid(grdIntake);

		// IntBox Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 440, 336, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 112, 336, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.core.forms.authoringinfo.IComponent customControlAuthoring()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomControlAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomControlAuthoringVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomControlAuthoringEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Button btnSave()
	{
		return (Button)super.getControl(10);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(11);
	}
	public TextBox txtComments()
	{
		return (TextBox)super.getControl(12);
	}
	public DateControl dteFluidBalance()
	{
		return (DateControl)super.getControl(13);
	}
	public cmbTimeComboBox cmbTime()
	{
		return (cmbTimeComboBox)super.getComboBox(0);
	}
	public grdOutputGrid grdOutput()
	{
		return (grdOutputGrid)super.getGrid(0);
	}
	public grdIntakeGrid grdIntake()
	{
		return (grdIntakeGrid)super.getGrid(1);
	}
	public IntBox intIrrigOut()
	{
		return (IntBox)super.getControl(17);
	}
	public IntBox intIrrigIn()
	{
		return (IntBox)super.getControl(18);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				OkDialog = new LocalFormName(102122);
			}
			public final FormName OkDialog;
		}

		public CoreForms Core;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_FluidBalanceType = new ims.framework.ContextVariable("FluidBalanceType", prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__FluidBalanceType_" + componentIdentifier + "");
			cxl_CurrentDailyFluidBalanceVo = new ims.framework.ContextVariable("CurrentDailyFluidBalanceVo", prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentDailyFluidBalanceVo_" + componentIdentifier + "");
			cxl_DailyTimePeriods = new ims.framework.ContextVariable("DailyTimePeriods", prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__DailyTimePeriods_" + componentIdentifier + "");
			cxl_CurrentFluidBalanceInstanceVo = new ims.framework.ContextVariable("CurrentFluidBalanceInstanceVo", prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier + "");
			cxl_SavedDailyPatternConfig = new ims.framework.ContextVariable("SavedDailyPatternConfig", prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__SavedDailyPatternConfig_" + componentIdentifier + "");
			cxl_CurrentSignatoryShiftDetailsVo = new ims.framework.ContextVariable("CurrentSignatoryShiftDetailsVo", prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentSignatoryShiftDetailsVo_" + componentIdentifier + "");
		}
		
		public boolean getFluidBalanceTypeIsNotNull()
		{
			return !cxl_FluidBalanceType.getValueIsNull(context);
		}
		public ims.core.vo.lookups.FluidBalanceTypeCollection getFluidBalanceType()
		{
			return (ims.core.vo.lookups.FluidBalanceTypeCollection)cxl_FluidBalanceType.getValue(context);
		}
		public void setFluidBalanceType(ims.core.vo.lookups.FluidBalanceTypeCollection value)
		{
			cxl_FluidBalanceType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FluidBalanceType = null;
		public boolean getCurrentDailyFluidBalanceVoIsNotNull()
		{
			return !cxl_CurrentDailyFluidBalanceVo.getValueIsNull(context);
		}
		public ims.core.vo.DailyFluidBalanceVo getCurrentDailyFluidBalanceVo()
		{
			return (ims.core.vo.DailyFluidBalanceVo)cxl_CurrentDailyFluidBalanceVo.getValue(context);
		}
		public void setCurrentDailyFluidBalanceVo(ims.core.vo.DailyFluidBalanceVo value)
		{
			cxl_CurrentDailyFluidBalanceVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentDailyFluidBalanceVo = null;
		public boolean getDailyTimePeriodsIsNotNull()
		{
			return !cxl_DailyTimePeriods.getValueIsNull(context);
		}
		public ims.core.vo.lookups.DailyTimePeriodsCollection getDailyTimePeriods()
		{
			return (ims.core.vo.lookups.DailyTimePeriodsCollection)cxl_DailyTimePeriods.getValue(context);
		}
		public void setDailyTimePeriods(ims.core.vo.lookups.DailyTimePeriodsCollection value)
		{
			cxl_DailyTimePeriods.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DailyTimePeriods = null;
		public boolean getCurrentFluidBalanceInstanceVoIsNotNull()
		{
			return !cxl_CurrentFluidBalanceInstanceVo.getValueIsNull(context);
		}
		public ims.core.vo.FluidBalanceInstanceVo getCurrentFluidBalanceInstanceVo()
		{
			return (ims.core.vo.FluidBalanceInstanceVo)cxl_CurrentFluidBalanceInstanceVo.getValue(context);
		}
		public void setCurrentFluidBalanceInstanceVo(ims.core.vo.FluidBalanceInstanceVo value)
		{
			cxl_CurrentFluidBalanceInstanceVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentFluidBalanceInstanceVo = null;
		public boolean getSavedDailyPatternConfigIsNotNull()
		{
			return !cxl_SavedDailyPatternConfig.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.DailyPatternConfigVo getSavedDailyPatternConfig()
		{
			return (ims.clinicaladmin.vo.DailyPatternConfigVo)cxl_SavedDailyPatternConfig.getValue(context);
		}
		public void setSavedDailyPatternConfig(ims.clinicaladmin.vo.DailyPatternConfigVo value)
		{
			cxl_SavedDailyPatternConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SavedDailyPatternConfig = null;
		public boolean getCurrentSignatoryShiftDetailsVoIsNotNull()
		{
			return !cxl_CurrentSignatoryShiftDetailsVo.getValueIsNull(context);
		}
		public ims.core.vo.SignatoryShiftDetailsVo getCurrentSignatoryShiftDetailsVo()
		{
			return (ims.core.vo.SignatoryShiftDetailsVo)cxl_CurrentSignatoryShiftDetailsVo.getValue(context);
		}
		public void setCurrentSignatoryShiftDetailsVo(ims.core.vo.SignatoryShiftDetailsVo value)
		{
			cxl_CurrentSignatoryShiftDetailsVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentSignatoryShiftDetailsVo = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[119];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceVo", "BO-1022100015-ID", "ID_DailyFluidBalance");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceVo", "BO-1022100015-CARECONTEXT", "CareContext");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-ID", "ID_FluidBalanceInstance");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-TOTALINPUT", "TotalIntake");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-TOTALOUTPUT", "TotalOutput");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-BALANCE", "Balance");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-FLUIDBALANCEDATE", "FluidBalanceDate");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-STARTTIME", "StartTime");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-COMMENTS", "Comments");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-CONFIRMINGDATETIME", "ConfirmingDateTime");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-ISCONFIRMED", "IsConfirmed");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-IRRIGATIONIN", "IrrigationIn");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-IRRIGATIONOUT", "IrrigationOut");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-TIMEPERIOD", "TimePeriod");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-SIGNATORYSHIFT", "SignatoryShift");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyFluidBalanceInstanceVo", "BO-1022100016-ENDTIME", "EndTime");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyPatternConfigVo", "BO-1028100023-ID", "ID_DailyPattern");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyPatternConfigVo", "BO-1028100023-DAILYPATTERNTYPE", "DailyPatternType");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyPatternConfigVo", "BO-1028100023-ISACTIVE", "IsActive");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyPatternConfigVo", "BO-1028100023-STARTTIME", "StartTime");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentDailyPatternConfigVo", "BO-1028100023-USESIGNATORYPERIODS", "UseSignatoryPeriods");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentDailyFluidBalanceVo_" + componentIdentifier, "BO-1022100015-ID", "ID_DailyFluidBalance");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentDailyFluidBalanceVo_" + componentIdentifier, "BO-1022100015-CARECONTEXT", "CareContext");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-ID", "ID_FluidBalanceInstance");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-TOTALINPUT", "TotalIntake");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-TOTALOUTPUT", "TotalOutput");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-BALANCE", "Balance");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-FLUIDBALANCEDATE", "FluidBalanceDate");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-STARTTIME", "StartTime");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-COMMENTS", "Comments");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-CONFIRMINGDATETIME", "ConfirmingDateTime");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-ISCONFIRMED", "IsConfirmed");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-IRRIGATIONIN", "IrrigationIn");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-IRRIGATIONOUT", "IrrigationOut");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-TIMEPERIOD", "TimePeriod");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-SIGNATORYSHIFT", "SignatoryShift");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentFluidBalanceInstanceVo_" + componentIdentifier, "BO-1022100016-ENDTIME", "EndTime");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__SavedDailyPatternConfig_" + componentIdentifier, "BO-1028100023-ID", "ID_DailyPattern");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__SavedDailyPatternConfig_" + componentIdentifier, "BO-1028100023-DAILYPATTERNTYPE", "DailyPatternType");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__SavedDailyPatternConfig_" + componentIdentifier, "BO-1028100023-ISACTIVE", "IsActive");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__SavedDailyPatternConfig_" + componentIdentifier, "BO-1028100023-STARTTIME", "StartTime");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__SavedDailyPatternConfig_" + componentIdentifier, "BO-1028100023-USESIGNATORYPERIODS", "UseSignatoryPeriods");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentSignatoryShiftDetailsVo_" + componentIdentifier, "BO-1022100020-ID", "ID_SignatoryShiftDetails");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentSignatoryShiftDetailsVo_" + componentIdentifier, "BO-1022100020-DATETIMESIGNED", "DateTimeSigned");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentSignatoryShiftDetailsVo_" + componentIdentifier, "BO-1022100020-STARTTIME", "StartTime");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentSignatoryShiftDetailsVo_" + componentIdentifier, "BO-1022100020-ENDTIME", "EndTime");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentSignatoryShiftDetailsVo_" + componentIdentifier, "BO-1022100020-SHIFTSTARTDATETIME", "ShiftStartDateTime");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.FluidBalanceDetails.__internal_x_context__CurrentSignatoryShiftDetailsVo_" + componentIdentifier, "BO-1022100020-SHIFTENDDATETIME", "ShiftEndDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
