//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.52 build 2508.29436)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.patienthomesituation;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.PatientHomeSituationVo;
import ims.core.vo.SocialHistoryVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		PatientHomeSituationVo voHomeSituation = domain.getHomeSituationByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if(voHomeSituation != null)
			populateScreenFromData(voHomeSituation);
		
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		if(form.getLocalContext().getSelectedRecordIsNotNull() && form.getLocalContext().getSelectedRecord().getID_PatientHomeSituationIsNotNull())
		{
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(!form.getMode().equals(FormMode.EDIT));
		}
		else
		{
			form.btnNew().setVisible(true);
			form.btnUpdate().setVisible(false);
		}
			
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(false);
		}
			
		form.setcustomControlAuthoringInfoEnabled(form.getMode().equals(FormMode.EDIT));
	}
	//WDEV-2217 
	private boolean getUiErrors() 
	{
		if (this.form.cmbFitToCare().getValue() != null)
			return true;
		else if (this.form.cmbTakeHome().getValue() != null)
			return true;
		else if (this.form.cmbLives().getValue() != null)
			return true;
		else if (this.form.txtSpareKeys().getValue() != null)
			return true;
		else if (this.form.txtHouseKeys().getValue() != null)
			return true;
		else if (this.form.cmbShowerLocation().getValue() != null)
			return true;
		else if (this.form.cmbToiletLocation().getValue() != null)
			return true;
		else if (this.form.cmbBathroomLocation().getValue() != null)
			return true;
		else if (this.form.txtShower().getValue() != null)
			return true;
		else if (this.form.txtToilet().getValue() != null)
			return true;
		else if (this.form.txtBathroom().getValue() != null)
			return true;
		else if (this.form.txtPhoneNumber().getValue() != null)
			return true;
		else if (this.form.txtAddress().getValue() != null)
			return true;
		else if (this.form.txtStairsLift().getValue() != null)
			return true;
		else if (this.form.cmbLift().getValue() != null)
			return true;
		else if (this.form.txtName().getValue() != null)
			return true;
		else if (this.form.cmbSupervisedBy().getValue() != null)
			return true;
		else if (this.form.cmbSide().getValue() != null)
			return true;
		else if (this.form.cmbRails().getValue() != null)
			return true;
		else if (this.form.cmbStairs().getValue() != null)
			return true;	
		else if (this.form.cmbFloor().getValue() != null)
			return true;
		else if (this.form.cmbOwnership().getValue() != null)
			return true;
		else if (this.form.txtOther().getValue() != null)
			return true;
		else if (this.form.cmbTypeAccom().getValue() != null)
			return true;
		else if (this.form.txtLivesWith().getValue() != null)
			return true;
		else
			engine.showMessage("Cannot save empty record");
		
		return false;
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}

	private boolean save()
	{
		PatientHomeSituationVo voHomeSituation = form.getLocalContext().getSelectedRecord();
		populateDataFromScreen(voHomeSituation);
		
		if(voHomeSituation.countFieldsWithValue() == 0)
		{
			//TODO this code will be removed upon completion of WDEV-2153
			if(voHomeSituation.getAuthoringInformationIsNotNull() && voHomeSituation.getAuthoringInformation().getAuthoringDateTime() == null && voHomeSituation.getAuthoringInformation().getAuthoringHcp() == null)
			{
				engine.showErrors(new String[]{"There has been no data provided. Please provide at least one value before saving."});
				return false;
			}				
		}
		
		String[] uIErrors = voHomeSituation.validate();
		//WDEV-2217 
		if(uIErrors != null || !getUiErrors())
		{
			engine.showErrors(uIErrors);
			return false;
		}
	
		try
		{
			voHomeSituation = domain.saveHomeSituation(voHomeSituation);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		return true;
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		clearScreen();
		form.customControlAuthoringInfo().setValue(null);
		open();
	}
	
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		updateControlsState();
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		clearScreen();
		
		updateControlsState();
		form.getLocalContext().setSelectedRecord(new PatientHomeSituationVo());
		form.customControlAuthoringInfo().initializeComponent();
		
		displaySocialHistory();
	}

	private void displaySocialHistory()
	{
		SocialHistoryVo voSocialHistory = domain.getSocialHistoryByPatient(form.getGlobalContext().Core.getPatientShort());
		if(voSocialHistory != null)
		{
			form.cmbLives().setValue(voSocialHistory.getLivesWith());
			form.cmbFitToCare().setValue(voSocialHistory.getFitToCareForPatient());
			form.cmbTakeHome().setValue(voSocialHistory.getFitToTakeHome());
		}
	}

	protected PatientHomeSituationVo populateDataFromScreen(PatientHomeSituationVo value)
	{
		value.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		value.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		value.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());		
		return super.populateDataFromScreen(value);
	}

	protected void populateScreenFromData(PatientHomeSituationVo value)
	{
		form.getLocalContext().setSelectedRecord(value);
		super.populateScreenFromData(value);
		form.customControlAuthoringInfo().setValue(value.getAuthoringInformation());
	}
}
