//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.52 build 2508.25910)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.vitalsignspainladder;

import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.VSPainLadderVo;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DateTime;
import ims.framework.utils.graphing.GraphicLineStyle;
import ims.framework.utils.graphing.GraphingCustomOneValue;
import ims.framework.utils.graphing.GraphingGroup;
import ims.framework.utils.graphing.GraphingPointType;
import ims.nursing.vo.lookups.PainSeverity;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		updatePrevNextButtons();
		dateIntervalStatus();//WDEV-13117
	}
	
	private void initialize()
	{
		//WDEV-14429
		if(isVitalSignsPainLadderForTriage())
		{
			form.setMode(FormMode.VIEW);
		}
		
		form.grpShowBy().setValue(GenForm.grpShowByEnumeration.rdoDay); 
		form.btnUpdate().setEnabled(false);
		
		//WDEV-7526
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.BaselineObservations.getID()))
		{
			form.lnkReturn().setTooltip("Return to Baseline Observations");
		}
		else
		{
			form.lnkReturn().setTooltip("Return to Vital Signs");
		}
		//ends here 
		
		VitalSignsVo vitalSignGlobalContext = form.getGlobalContext().Core.getVitalSign();
		
		if(vitalSignGlobalContext != null  && vitalSignGlobalContext.getPain() != null)
		{
			form.dteDay().setValue(vitalSignGlobalContext.getVitalsTakenDateTime() != null ? vitalSignGlobalContext.getVitalsTakenDateTime().getDate() : null);//WDEV-13117
			form.getLocalContext().setVitalSign(vitalSignGlobalContext);
			displayRecord(vitalSignGlobalContext);
			form.btnUpdate().setEnabled(true);
			listPain();
		}
		else
		{
			try 
			{
				onRadioButtongrpShowByValueChanged();
			}
			catch (PresentationLogicException e) 
			{
				throw new DomainRuntimeException();
			}
		}
	}
	private void updatePrevNextButtons()
	{
		VitalSignsVoCollection voPain = form.getLocalContext().getPains();
		Integer nIndex = form.getLocalContext().getCurrentIndex();

		form.btnNext().setEnabled(true);
		form.btnPrev().setEnabled(true);
		
		if(voPain == null || nIndex == null)
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			
			return;
		}
		
		if(nIndex.intValue() <= 0)
		{
			form.btnPrev().setEnabled(false);
		}

		if(nIndex.intValue() >= voPain.size() - 1)
		{
			form.btnNext().setEnabled(false);
		}
		
	}

	private int getAndRetursValue(PainSeverity value)
	{
		if (value == null)
			return -1;
		
		if (value.equals(PainSeverity.NO_PAIN_AT_ALL))
			return 0;
		else if (value.equals(PainSeverity.NORMAL_ACTIVITIES))
			return 1;
		else if (value.equals(PainSeverity.MILD_STINGING))
			return 2;
		else if (value.equals(PainSeverity.FEW_PROBLEMS))
			return 3;
		else if (value.equals(PainSeverity.NOT_BAD))
			return 4;
		else if (value.equals(PainSeverity.QUITE_BAD))
			return 5;
		else if (value.equals(PainSeverity.CAUSES_DIFICULTIES))
			return 6;
		else if (value.equals(PainSeverity.VERY_BAD))
			return 7;
		else if (value.equals(PainSeverity.DISABLING))
			return 9;
		else if (value.equals(PainSeverity.EXCRUITIATING))
			return 9;
		else if (value.equals(PainSeverity.NO_CONTROL))
			return 10;
		else
			return -1;
	}
	
	private String getAndRetursTips(PainSeverity value)
	{
		if (value == null)
			return "";
		
		if (value.equals(PainSeverity.NO_PAIN_AT_ALL))
			return "No pain at all";
		else if (value.equals(PainSeverity.NORMAL_ACTIVITIES))
			return "Normal activities";
		else if (value.equals(PainSeverity.MILD_STINGING))
			return "Mild stinging";
		else if (value.equals(PainSeverity.FEW_PROBLEMS))
			return "Few problems, Do most things";
		else if (value.equals(PainSeverity.NOT_BAD))
			return "Moderate";
		else if (value.equals(PainSeverity.QUITE_BAD))
			return "Quite bad, Moderate";
		else if (value.equals(PainSeverity.CAUSES_DIFICULTIES))
			return "Causes difficulties, stops some things";
		else if (value.equals(PainSeverity.VERY_BAD))
			return "Very bad, Severe";
		else if (value.equals(PainSeverity.DISABLING))
			return "Disabling, Stops normal activities";
		else if (value.equals(PainSeverity.EXCRUITIATING))
			return "Excruciating, Worst ever";
		else if (value.equals(PainSeverity.NO_CONTROL))
			return "No control";
		else
			return "";
	}
	
	
	private void listPain()
	{
		VitalSignsVoCollection voCollVitals = null;
		String subTitle ="", tips="";
			
		CareContextShortVo currentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoDay))
		{
			voCollVitals = domain.listPain(form.dteDay().getValue(),currentCareContext);
			subTitle = "Pain Score for " + form.dteDay().getValue().toString(DateFormat.STANDARD);
		}
		else
		{
			voCollVitals = domain.listPain(form.dteFrom().getValue(),form.dteTo().getValue(),currentCareContext);
			subTitle = "Pain Score between " + form.dteFrom().getValue().toString(DateFormat.STANDARD) + " - " +  form.dteTo().getValue().toString(DateFormat.STANDARD);
		}
		
		if(voCollVitals != null)
		{
			form.grhPain().clear();
			
			form.grhPain().setTitle("");
			//form.grhPain().setSubTitle(subTitle);
			form.lblPainLadder().setValue(subTitle);
			
			form.grhPain().showYAxisValues();
			
			GraphingGroup group = new GraphingGroup("Pain Score", Color.Blue, GraphicLineStyle.SOLID, form.getImages().Core.RedCircle);
			int nIndex = voCollVitals.size() - 1;
			
			for(int x = 0; x < voCollVitals.size(); x++)
			{
				VitalSignsVo record = voCollVitals.get(x);
				
				if (record.getPainIsNotNull())
				{
					PainSeverity pain = record.getPain().getPain();
			
					if (getAndRetursValue(pain) != -1)
					{
						tips = "<b>Pain Score </b>" + "<br><br>"+"<b>Date and Time:</b> "+record.getVitalsTakenDateTime()+"<br><b>"+getAndRetursTips(pain)+"<br>"+"Score = </b>"+getAndRetursValue(pain);
						GraphingCustomOneValue point = new GraphingCustomOneValue(group, record.getVitalsTakenDateTime(), new Float (getAndRetursValue(pain)), record, tips);
						form.grhPain().addPoint(point);
						form.grhPain().addLabelY(getAndRetursValue(pain), pain.getText());
						
						if(form.getGlobalContext().Core.getVitalSignIsNotNull() && //WDEV-12943
								form.getGlobalContext().Core.getVitalSign().getID_VitalSignsIsNotNull() &&//WDEV-12943
								record.getID_VitalSigns().intValue() == form.getGlobalContext().Core.getVitalSign().getID_VitalSigns().intValue())
							nIndex = x;
					}
				}
			}	
		
			form.getLocalContext().setPains(voCollVitals);
			form.getLocalContext().setCurrentIndex(new Integer(nIndex));
			displayCurrentPain();
		}
		else
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			form.getLocalContext().setPains(null);
			form.btnUpdate().setEnabled(false);
		}
	}
	
	
	private void displayCurrentPain()
	{
		VitalSignsVoCollection voPain = form.getLocalContext().getPains();
		Integer nIndex = form.getLocalContext().getCurrentIndex();
			
		if(voPain == null || nIndex == null || nIndex.intValue() == -1 || nIndex.intValue() >= voPain.size())
			return;

		form.getLocalContext().setVitalSign(voPain.get(nIndex.intValue()));
		displayRecord(voPain.get(nIndex.intValue()));
			
		updatePrevNextButtons();
	}

	private void displayRecord(VitalSignsVo voVitalSign)
	{
		clearFields();		
		
		if (voVitalSign.getPainIsNotNull())
		{
			form.cmbPain().setValue(voVitalSign.getPain().getPain());	
			setCustomAuthoring(voVitalSign);

			form.btnUpdate().setEnabled(true);			
		}
		else
			form.btnUpdate().setEnabled(false);	
	}

	private void setCustomAuthoring(VitalSignsVo voVitalSign)
	{
		DateTime voDateTime = new DateTime();
		voDateTime.setDateTime(voVitalSign.getVitalsTakenDateTime().getDate(), voVitalSign.getVitalsTakenDateTime().getTime());

		AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
		voAuthoring.setAuthoringDateTime(voDateTime);
		voAuthoring.setAuthoringHcp(voVitalSign.getAuthoringInformation().getAuthoringHcp() != null ? voVitalSign.getAuthoringInformation().getAuthoringHcp() : null);
		form.customAuthoring().setValue(voAuthoring);
	}
	
	protected void onFormModeChanged()
	{
		// TODO Add your code here.
	}
	protected void onLnkReturnClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-14429
		if(isVitalSignsPainLadderForTriage())
		{
			engine.close(DialogResult.OK);
			return;
		}
		
		//WDEV-7526
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.BaselineObservations.getID()))
		{
			engine.open(form.getForms().Core.BaselineObservations);
			
		}
		//ends here
		
		else if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.VitalSignsBaselineAndAll.getID()))
			engine.open(form.getForms().Core.VitalSignsBaselineAndAll);
		else
			engine.open(form.getForms().Core.VitalSignsAll);
	}
	protected void onGrhPainPointClicked(ims.framework.utils.graphing.GraphingPoint point)
	{
		if(point.getType() == GraphingPointType.CUSTOM_ONE_VALUE)
		{ 			
			GraphingCustomOneValue pointTemp = (GraphingCustomOneValue)point;
			form.getLocalContext().setVitalSign((VitalSignsVo)pointTemp.getTag());
			displayRecord((VitalSignsVo)pointTemp.getTag());
			form.btnUpdate().setEnabled(true);
			
			//update the Prev/Next buttons
			VitalSignsVoCollection voPain = form.getLocalContext().getPains();
			for(int i = 0; i < voPain.size(); i++)
			{
				if(form.getLocalContext().getVitalSign().getID_VitalSigns().intValue() == voPain.get(i).getID_VitalSigns().intValue())
				{
					form.getLocalContext().setCurrentIndex(new Integer(i));
					updatePrevNextButtons();
					break;
				}
			}
		}
	}
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		displayRecord(form.getLocalContext().getVitalSign());
		form.setMode(FormMode.VIEW);
		
		dateIntervalStatus();
		updatePrevNextButtons();
	}
	private void dateIntervalStatus()
	{
		form.dteDay().setEnabled(GenForm.grpShowByEnumeration.rdoDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		
		form.dteFrom().setEnabled(!GenForm.grpShowByEnumeration.rdoDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		form.dteTo().setEnabled(!GenForm.grpShowByEnumeration.rdoDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		save();
	}
	
	private void save()
	{
		VitalSignsVo voVitalSign = form.getLocalContext().getVitalSign();
		
		VSPainLadderVo voPain = new VSPainLadderVo();
		//------------------------------------
		if(form.cmbPain().getValue() == null )
		{
			engine.showMessage("Pain Score is mandatory.");
			return;	
		}
		//------------------------------------
		voPain.setPain(form.cmbPain().getValue());
		
		voVitalSign.setPain(voPain);
		
		String[] arrErrors = voVitalSign.validate();
		if(arrErrors == null)
		{
			try 
			{
				domain.modifyPain(voVitalSign);
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				refresh();
				return;
			}
		}
		else
		{
			engine.showErrors("Validation Errors", arrErrors);
			return;	
		}
		
		form.getGlobalContext().Core.setVitalSign(voVitalSign);

		form.setMode(FormMode.VIEW);
		
		listPain();
		dateIntervalStatus();
	}
	private void refresh()
	{
		clearFields();
		listPain();
		form.setMode(FormMode.VIEW);
		
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);	
		form.btnUpdate().setEnabled(false);	
		form.dteDay().setEnabled(false);
		form.dteFrom().setEnabled(false);
		form.dteTo().setEnabled(false);
		form.btnNext().setEnabled(false);
		form.btnPrev().setEnabled(false);
		form.customAuthoring().setEnabledAuthoringHCP(false); 	//wdev-15462
		form.customAuthoring().setEnabledDateTime(false);		//wdev-14562
	}
	protected void onBtnNextClick() throws ims.framework.exceptions.PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() + 1));
		displayCurrentPain();
	}
	protected void onBtnPrevClick() throws ims.framework.exceptions.PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() - 1));
		displayCurrentPain();
	}
	protected void onBtnViewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoDay))
		{
			if(form.dteDay().getValue() == null)
			{
				engine.showMessage("Please enter a date to show by");
				return;
			}
		}
		else
		{
			if(form.dteFrom().getValue() == null || form.dteTo().getValue() == null)
			{
				engine.showMessage("Please enter a date range (From and To) to show by");
				return;				
			}
			if(form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				engine.showMessage("The date From entered cannot be greater than the date To entered");
				return;
			}
		}

		clearFields();
		listPain();	
	}
	
	private void clearFields()
	{
		form.cmbPain().setValue(null);
		form.customAuthoring().setValue(null);
	}
	 
	protected void onRadioButtongrpShowByValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoDay))
		{
			form.dteDay().setEnabled(true);
			form.dteDay().setValue(new Date());
			form.dteFrom().setEnabled(false);
			form.dteTo().setEnabled(false);
			form.dteFrom().setValue(null);
			form.dteTo().setValue(null);
		}
		else
		{
			form.dteDay().setEnabled(false);
			form.dteDay().setValue(null);
			form.dteFrom().setEnabled(true);
			form.dteTo().setEnabled(true);
			form.dteFrom().setValue(new Date());
			form.dteTo().setValue(new Date());
		}
		
		onBtnViewClick();
	}
	
	//WDEV-14429
	private boolean isVitalSignsPainLadderForTriage()
	{
		if(engine.getFormName().equals(form.getForms().Core.VitalSignsPainLadderForTriage))
			return true;
		
		return false;
	}
}
