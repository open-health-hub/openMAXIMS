//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3729.19612)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientimagedisplay;

import java.io.File;
import ims.core.vo.AppDBImageVo;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		form.fireCustomControlValueChanged();		
	}
	
	public void clear()
	{
		if (form.getGlobalContext().Core.getPatientPhotoTempFilesIsNotNull() &&
				form.getGlobalContext().Core.getPatientPhotoTempFiles().size() > 0)			
		{
			for (String filePath : form.getGlobalContext().Core.getPatientPhotoTempFiles()) {
				
				File file = new File(filePath);
				boolean deleteFile = file.delete();				
				if (deleteFile) {
					engine.createSystemLogEntry(SystemLogType.FILE_UPLOADING, SystemLogLevel.INFORMATION, "File " + filePath + " was deleted!");
				}
				else {
					engine.createSystemLogEntry(SystemLogType.FILE_UPLOADING, SystemLogLevel.INFORMATION, "File " + filePath + " cannot be deleted!");
				}
			}
		}
	}
	
	@Override
	protected void onCcDBImageDisplayValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ccDBImageDisplay().setDBImage(form.getGlobalContext().Core.getPatientImage());		
		form.setMode(FormMode.VIEW);
	}
	public void setValue(ims.core.patient.vo.PatientRefVo patientRefVo)
	{
		form.ccDBImageDisplay().setValue(patientRefVo);
	}

	public ims.core.vo.Patient getValue()
	{
		return form.getLocalContext().getNewPatient();
	}
	
	@Override
	protected void onFormModeChanged() 
	{					
		if (form.getMode().equals(FormMode.EDIT))
		{
			engine.open(form.getForms().Core.PatientImageSelection, new Object[]{form.ccDBImageDisplay().getValue()});
		}
	}
	public void setDBImage(AppDBImageVo image) 
	{	
		form.ccDBImageDisplay().setDBImage(form.getGlobalContext().Core.getPatientImage());
	}	
}
