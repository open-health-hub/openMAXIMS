//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4050.19540)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.forms.inpatienttransferdialog;

import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.icp.vo.InpatientEpisodeWithICPInfoVo;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args == null || args.length == 0 || !(args[0] instanceof InpatientEpisodeWithICPInfoVo))
			throw new CodingRuntimeException("Transfer Dialog cannot be launched without being passed an Inpatient Episode");

		InpatientEpisodeWithICPInfoVo ipVO = (InpatientEpisodeWithICPInfoVo)args[0];
		form.getLocalContext().setInpatEpis(domain.getInpatientEpisode(ipVO.getPasEvent().getPatient()));
		//wdev-11913
		if(form.getLocalContext().getInpatEpis() != null 
			&& form.getLocalContext().getInpatEpis().getPasEvent() != null 
			&& form.getLocalContext().getInpatEpis().getPasEvent().getPatient() != null)
			form.getLocalContext().setInpatEpisLastUpdated(domain.getInpatientEpisode(form.getLocalContext().getInpatEpis().getPasEvent().getPatient()));
		else
			form.getLocalContext().setInpatEpisLastUpdated(null);
		//----------
		initialise();		
	}
	
	private void initialise()
	{
		InpatientEpisodeVo epis = form.getLocalContext().getInpatEpis();
		
		form.txtWard().setValue(epis.getPasEvent().getLocation().getName());

		LocationLiteVo parentHosp = domain.getParentHospital(epis.getPasEvent().getLocation());
		if (parentHosp != null)
			form.txtHosp().setValue(parentHosp.getName());
		
		fillHospitalCombo();		
		form.cmbHosp().setValue(parentHosp);
		fillWardCombo();
		form.cmbWard().setValue(epis.getPasEvent().getLocation());
		form.dtimAdmission().setValue(epis.getAdmissionDateTime());
		
		form.dtimTransfer().setValue(new DateTime());
	}
	
	private void fillHospitalCombo()
	{
		form.cmbHosp().clear();
		form.cmbWard().clear();
		LocationLiteVoCollection coll = domain.listHospitals();
		for (int i = 0; i < coll.size(); i++)
		{
			form.cmbHosp().newRow(coll.get(i), coll.get(i).getName());
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] msgs = validateInputs();
		if (msgs != null && msgs.length > 0)
		{
			engine.showErrors(msgs);
			return;			
		}
		//wdev-11913
		if(form.getLocalContext().getInpatEpisLastUpdatedIsNotNull())
		{
			InpatientEpisodeVo epis = domain.getInpatientEpisode(form.getLocalContext().getInpatEpisLastUpdated().getPasEvent().getPatient());
			if(epis == null
				|| (epis != null && epis.getVersion_InpatientEpisode() != form.getLocalContext().getInpatEpisLastUpdated().getVersion_InpatientEpisode()))
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				engine.close(DialogResult.OK);
				return;
			}
		}
		//----------
		PatientRefVo pat = form.getLocalContext().getInpatEpis().getPasEvent().getPatient();
		LocationRefVo toWard = form.cmbWard().getValue();
		try
		{
			LocationRefVo fromWard =  form.getLocalContext().getInpatEpisIsNotNull() && form.getLocalContext().getInpatEpis().getPasEventIsNotNull() ? form.getLocalContext().getInpatEpis().getPasEvent().getLocation() : null;
			domain.transferInpatient(pat, toWard, null, fromWard, form.dtimTransfer().getValue());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		engine.close(DialogResult.OK);
	}
	
	private String[] validateInputs()
	{
		ArrayList<String> errs = new ArrayList<String>();
		if (form.cmbHosp().getValue() == null)
			errs.add("(To)Hospital is mandatory");
		
		if (form.cmbWard().getValue() == null)
			errs.add("(To)Ward is mandatory");

		InpatientEpisodeVo epis = form.getLocalContext().getInpatEpis();
		if (form.cmbWard().getValue() != null
			&& epis.getPasEvent().getLocationIsNotNull()
			&& form.cmbWard().getValue().equals(epis.getPasEvent().getLocation()) )
			errs.add("(To)Ward is the same value as (From)Ward");
		
		if (form.dtimTransfer().getValue() == null || (form.dtimTransfer().getValue().getDate() == null || form.dtimTransfer().getValue().getTime() == null))
			errs.add("Transfer Date Time is mandatory");
		
		if (form.dtimTransfer().getValue() != null 
			&& form.dtimTransfer().getValue().isLessThan(epis.getAdmissionDateTime()))
			errs.add("Transfer Date Time cannot be less than the Admission Date Time.");

		if (form.dtimTransfer().getValue() != null 
			&& form.dtimTransfer().getValue().isGreaterThan(new DateTime()))
			errs.add("Transfer Date Time cannot be in the future.");

		if (epis.getWardStaysIsNotNull() 
			&& epis.getWardStays().size() > 0
			&& form.dtimTransfer().getValue() != null)
		{
			epis.getWardStays().sort(SortOrder.DESCENDING);
			if (form.dtimTransfer().getValue().isLessThan(epis.getWardStays().get(0).getTransferDateTime()) )
				errs.add("Transfer Date Time cannot be less than the last Ward Stay Date Time.");
		}

		return errs.toArray(new String[errs.size()]);
	}


	@Override
	protected void onCmbHospValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbHosp().getValue() == null)
		{
			form.cmbWard().clear();
			return;
		}
		fillWardCombo();
	}
	
	private void fillWardCombo()
	{
		if (form.cmbHosp().getValue() == null)
			return;
		
		form.cmbWard().clear();
		LocationLiteVoCollection coll = domain.listWardsForHospital(form.cmbHosp().getValue());
		for (int i = 0; i < coll.size(); i++)
		{
			form.cmbWard().newRow(coll.get(i), coll.get(i).getName());
		}
	}
}
