//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2420.16410)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.charttypedetails;

import java.util.ArrayList;
import java.util.List;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ChartTypeDatasetVo;
import ims.core.vo.ChartTypeDatasetVoCollection;
import ims.core.vo.ChartTypeVo;
import ims.core.vo.DataSetTypeVo;
import ims.core.vo.DataSetTypeVoCollection;
import ims.core.vo.lookups.LineColourPointIcon;
import ims.core.vo.lookups.LineType;
import ims.core.vo.lookups.LineTypeStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final Integer COL_DATASET_TYPE = new Integer(0);
	private static final Integer COL_ANSWERBOX = new Integer(1);
	private static final Integer COL_LINETYPE = new Integer(2);
	private static final Integer COL_COLOR_ICON = new Integer(3);

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		createDynamicGridColumns();
		loadColors();
		
		if(form.getGlobalContext().Core.getChartTypeRecordIsNotNull())
		{
			//edit
			form.pnlTitle().setValue("Edit Chart Type");
			
			ChartTypeVo chartType = domain.getChartType(form.getGlobalContext().Core.getChartTypeRecord());
			populateScreenFromDataLocal(chartType);
			
			form.getLocalContext().setCurrentRecord(chartType);
		}
		else
		{
			//new
			form.pnlTitle().setValue("Add Chart Type");
			form.chkActive().setValue(true);
		}
		
		form.setMode(FormMode.EDIT);
		
		updateContextMenu();
	}
	private void updateContextMenu()
	{
		form.getContextMenus().hideAllChartTypeDetailsMenuItems();
		
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().getChartTypeDetailsADDItem().setVisible(true);
			
			if(form.dyngrdLinkedDataSets().getValue() instanceof DataSetTypeVo)
				form.getContextMenus().getChartTypeDetailsREMOVEItem().setVisible(true);
			
			form.getContextMenus().getChartTypeDetailsMOVE_UPItem().setVisible(form.dyngrdLinkedDataSets().getValue() instanceof DataSetTypeVo && form.dyngrdLinkedDataSets().getSelectedRow()!= null && form.dyngrdLinkedDataSets().getSelectedRow().canMoveUp());	//WDEV-12548
			form.getContextMenus().getChartTypeDetailsMOVE_DOWNItem().setVisible(form.dyngrdLinkedDataSets().getValue() instanceof DataSetTypeVo && form.dyngrdLinkedDataSets().getSelectedRow()!= null && form.dyngrdLinkedDataSets().getSelectedRow().canMoveDown());	//WDEV-12548
		}
	}
	private void populateScreenFromDataLocal(ChartTypeVo chartType)
	{
		populateScreenFromData(chartType);	
		
		form.cmbNormalColour().setValue(chartType.getNormalBandColour());
		
		for (int i = 0; i < chartType.getDatasetTypes().size(); i++)
		{
			ChartTypeDatasetVo item = chartType.getDatasetTypes().get(i);
			
			DynamicGridRow row = form.dyngrdLinkedDataSets().getRows().newRow();

			row.setValue(item.getDatasetType());

			if(item.getLineType() == null)
			{
				createVariableCells(row, true);
			}
			else
			{
				createVariableCells(row, false);
			}

			DynamicGridCell cell = row.getCells().newCell(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_DATASET_TYPE), DynamicCellType.STRING);
			cell.setValue(item.getDatasetType().getName());
			// WDEV-16684 
			cell.setReadOnly(Boolean.TRUE);
			
			
			cell = row.getCells().newCell(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_ANSWERBOX), DynamicCellType.ANSWER);
			cell.getItems().newItem(LineTypeStatus.DEFAULT, LineTypeStatus.DEFAULT.getImage());
			cell.getItems().newItem(LineTypeStatus.CUSTOM, LineTypeStatus.CUSTOM.getImage());
			cell.setValue(item.getLineTypeIsNotNull() ? LineTypeStatus.CUSTOM : LineTypeStatus.DEFAULT);
			cell.setAutoPostBack(true);
			
			if(item.getLineType() == null)
			{
				DynamicGridCell dynamicGridCell = row.getCells().get(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_LINETYPE));
				dynamicGridCell.setValue(item.getDatasetType().getDefaultLineType());
				dynamicGridCell.setReadOnly(true);
				dynamicGridCell = row.getCells().get(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_COLOR_ICON));
				dynamicGridCell.setValue(item.getDatasetType().getDefLineColPtIcon());
				dynamicGridCell.setReadOnly(true);
			}
			else
			{
				DynamicGridCell dynamicGridCell = row.getCells().get(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_LINETYPE));
				dynamicGridCell.setValue(item.getLineType());
				dynamicGridCell.setReadOnly(false);
				dynamicGridCell = row.getCells().get(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_COLOR_ICON));
				dynamicGridCell.setValue(item.getLineColourPointIcon());
				dynamicGridCell.setReadOnly(false);
			}
		}
		
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(doSave())
		{
			//engine.open(form.getForms().Core.ChartTypeList);
			form.setMode(FormMode.VIEW);
			updateContextMenu();
		}
	}
	private boolean doSave()
	{
		if(checkDatasets() == false)
			return false;
		
		ChartTypeVo record = populateDataFromScreenLocal();
		
		String[] arrErrors = record.validate(validateUIRules());
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			ChartTypeVo saveChartType = domain.saveChartType(record);
			form.getGlobalContext().Core.setChartTypeRecord(saveChartType);
			form.getLocalContext().setCurrentRecord(saveChartType);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			record = domain.getChartType(record);
			
			populateScreenFromDataLocal(record);
			form.getLocalContext().setCurrentRecord(record);
			
			return false;
		}		
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("A record with the same details already exists, Please change");
			return false;
		}
		return true;
	}
	public String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		// WDEV-12655 - Limit the Below Band to a minimum 7% of total space available
		if (form.intBelowBand().getValue() != null && form.intBelowBand().getValue() < 7)
		{
			// WDEV-16684
			uiErrors.add("Below Band cannot be less than 7%.");
		}
		
		// WDEV-12655 - Limit the Above Band to a minimum 7% of total space available
		if (form.intAboveBand().getValue() != null && form.intAboveBand().getValue() < 7)
		{	// WDEV-16684
			uiErrors.add("Above Band cannot be less than 7%.");
		}
		
		// WDEV-12655 - Limit the Above Band + Below Band to a maximum 90% of total space available
		if(form.intBelowBand().getValue() != null && form.intAboveBand().getValue() != null)
		{
			if(form.intBelowBand().getValue() + form.intAboveBand().getValue() > 90)
			{
				uiErrors.add("The sum of Below Band and Above Band should not be greater than 90");					
			}
		}
		String[] result = new String[uiErrors.size()];
		uiErrors.toArray(result);
		return result;
	}
	
	private boolean checkDatasets()
	{
		if(form.dyngrdLinkedDataSets().getRows().size() == 0)
		{
			engine.showMessage("Please add at least a dataset !");
			return false;
		}

		for (int i = 0; i < form.dyngrdLinkedDataSets().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdLinkedDataSets().getRows().get(i);
			
			if(row.getCells().get(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_ANSWERBOX)).getValue().equals(LineTypeStatus.CUSTOM))
			{
				if(row.getCells().get(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_LINETYPE)).getValue() == null)
				{
					engine.showMessage("Please set a line type for dataset " + ((DataSetTypeVo)row.getValue()).getName() + " !");
					return false;
				}
				if(row.getCells().get(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_COLOR_ICON)).getValue() == null)
				{
					engine.showMessage("Please set a Colour / Icon for dataset " + ((DataSetTypeVo)row.getValue()).getName() + " !");
					return false;
				}
			}
		}
		
		return true;
	}
	private ChartTypeVo populateDataFromScreenLocal()
	{
		ChartTypeVo record = populateDataFromScreen(form.getLocalContext().getCurrentRecord());

		record.setNormalBandColour(form.cmbNormalColour().getValue());
		
		if(record.getDatasetTypes() == null)
			record.setDatasetTypes(new ChartTypeDatasetVoCollection());
		else
			record.getDatasetTypes().clear();
		
		int order = 1;	//WDEV-12548
		
		for (int i = 0; i < form.dyngrdLinkedDataSets().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdLinkedDataSets().getRows().get(i);
			
			ChartTypeDatasetVo item = new ChartTypeDatasetVo();
			item.setDatasetType((DataSetTypeVo)row.getValue());
			
			if(row.getCells().get(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_ANSWERBOX)).getValue().equals(LineTypeStatus.CUSTOM))
			{
				item.setLineType((LineType) row.getCells().get(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_LINETYPE)).getValue());
				item.setLineColourPointIcon((LineColourPointIcon) row.getCells().get(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_COLOR_ICON)).getValue());
			}
			
			item.setSortOrder(Integer.valueOf(order++)); //WDEV-12548
			
			record.getDatasetTypes().add(item);
		}
		
		return record;
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getGlobalContext().Core.getChartTypeRecordIsNotNull())
		{
			form.dyngrdLinkedDataSets().getRows().clear();
			populateScreenFromDataLocal(form.getLocalContext().getCurrentRecord());
			form.setMode(FormMode.VIEW);
			updateContextMenu();
		}
		else
		{
			engine.open(form.getForms().Core.ChartTypeList);
		}
	}
	
	private void loadColors()
	{
		Color[] ca = Color.getColors();

		for (int i = 0; i < ca.length; i++)
		{
			form.cmbNormalColour().newRow(ca[i], ca[i].getName(), ca[i].getImage());
		}
	}
	
	private void createDynamicGridColumns()
	{
		DynamicGridColumn col = form.dyngrdLinkedDataSets().getColumns().newColumn("Dataset type", COL_DATASET_TYPE);
		col.setWidth(300);
		col = form.dyngrdLinkedDataSets().getColumns().newColumn("  ", COL_ANSWERBOX);
		col.setWidth(25);
		col = form.dyngrdLinkedDataSets().getColumns().newColumn("Line type", COL_LINETYPE);
		col.setWidth(200);
		col = form.dyngrdLinkedDataSets().getColumns().newColumn("Colour / Icon", COL_COLOR_ICON);
		col.setWidth(-1);
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ChartTypeDetails.ADD :
				addDatasetType();
				break;
			case GenForm.ContextMenus.ChartTypeDetails.REMOVE :
				removeDatasetType();
				break;
			
			//WDEV-12548 - starts here
			case GenForm.ContextMenus.ChartTypeDetails.MOVE_UP:
				moveUp();
			break;
			
			case GenForm.ContextMenus.ChartTypeDetails.MOVE_DOWN:
				moveDown();
			break;
			//WDEV-12548 - ends here
			
			default :
				break;
		}
		
		updateContextMenu();	//WDEV-12548
	}
	
	//WDEV-12548
	private void moveDown() 
	{
		if(form.dyngrdLinkedDataSets().getSelectedRow() != null && form.dyngrdLinkedDataSets().getSelectedRow().canMoveDown())
		{
			form.dyngrdLinkedDataSets().getSelectedRow().moveDown();
		}
	}
	
	//WDEV-12548
	private void moveUp() 
	{
		if(form.dyngrdLinkedDataSets().getSelectedRow() != null && form.dyngrdLinkedDataSets().getSelectedRow().canMoveUp())
		{
			form.dyngrdLinkedDataSets().getSelectedRow().moveUp();
		}
	}
	
	private void removeDatasetType()
	{
		form.dyngrdLinkedDataSets().getRows().remove(form.dyngrdLinkedDataSets().getSelectedRow());
		updateContextMenu();
	}
	private void addDatasetType()
	{
		form.getGlobalContext().Core.setDataSetTypeItems(null);
		engine.open(form.getForms().Core.DataTypeSearch);
	}
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.DataTypeSearch) && result.equals(DialogResult.OK))
		{
			addDataSetTypesToGrid(form.getGlobalContext().Core.getDataSetTypeItems());
			
		}
		//wdev-13827
		updateContextMenu();
		//
		
	}
	private void addDataSetTypesToGrid(DataSetTypeVoCollection dataSetTypeItems)
	{
		for (int i = 0; i < dataSetTypeItems.size(); i++)
		{
			DataSetTypeVo item = dataSetTypeItems.get(i);
			
			if(recordAlreadySelected(item) == false)
			{
				DynamicGridRow row = form.dyngrdLinkedDataSets().getRows().newRow();

				DynamicGridCell cell = row.getCells().newCell(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_DATASET_TYPE), DynamicCellType.STRING);
				cell.setValue(item.getName());
				// WDEV-16684 
				cell.setReadOnly(Boolean.TRUE);
				
				cell = row.getCells().newCell(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_ANSWERBOX), DynamicCellType.ANSWER);
				cell.getItems().newItem(LineTypeStatus.DEFAULT, LineTypeStatus.DEFAULT.getImage());
				cell.getItems().newItem(LineTypeStatus.CUSTOM, LineTypeStatus.CUSTOM.getImage());
				cell.setValue(LineTypeStatus.DEFAULT);
				cell.setAutoPostBack(true);
				
				row.setValue(item);
				
				createVariableCells(row, true);
			}
		}
		
	}

	private boolean recordAlreadySelected(DataSetTypeVo value)
	{
		for (int i = 0; i < form.dyngrdLinkedDataSets().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdLinkedDataSets().getRows().get(i);
			
			if(row.getValue().equals(value))
			{
				return true;
			}
		}
		return false;
	}
	protected void onDyngrdLinkedDataSetsCellValueChanged(DynamicGridCell cell)
	{
		processCellPostback(cell);
	}
	private void processCellPostback(DynamicGridCell cell)
	{
		if(cell.getColumn().equals(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_ANSWERBOX)))
		{
			if(cell.getValue() == null)
				cell.setValue(LineTypeStatus.DEFAULT);
			
			if(cell.getValue().equals(LineTypeStatus.CUSTOM))
			{
				createVariableCells(cell.getRow(), false);
			}
			else if(cell.getValue().equals(LineTypeStatus.DEFAULT))
			{
				createVariableCells(cell.getRow(), true);
			}
		}
	}
	private void createVariableCells(DynamicGridRow row, boolean bDefault)
	{
		clearVariableCells(row);

		DynamicGridCell cell = row.getCells().newCell(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_LINETYPE), DynamicCellType.ENUMERATION);
		engine.populate(cell, LineType.getNegativeInstancesAsIItemCollection());
		cell.setReadOnly(false);
		if(bDefault)
		{
			cell.setValue(((DataSetTypeVo)row.getValue()).getDefaultLineType());
			cell.setReadOnly(true);
		}
		
		cell = row.getCells().newCell(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(COL_COLOR_ICON), DynamicCellType.ENUMERATION);
		engine.populate(cell, LineColourPointIcon.getNegativeInstancesAsIItemCollection());
		cell.setReadOnly(false);
		if(bDefault)
		{
			cell.setValue(((DataSetTypeVo)row.getValue()).getDefLineColPtIcon());
			cell.setReadOnly(true);
		}
	}
	private void clearVariableCells(DynamicGridRow row)
	{
		removeCellByColumn(row, COL_LINETYPE);
		removeCellByColumn(row, COL_COLOR_ICON);
	}
	private void removeCellByColumn(DynamicGridRow row, Integer colIdentifier)
	{
		DynamicGridCell cell;
		cell = row.getCells().get(form.dyngrdLinkedDataSets().getColumns().getByIdentifier(colIdentifier));
		if(cell != null)
			row.getCells().remove(cell);
	}
	protected void onDyngrdLinkedDataSetsRowSelectionChanged(DynamicGridRow row)
	{
		updateContextMenu();
	}
	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		updateContextMenu();
	}
	protected void onLnkReturnClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.ChartTypeList);
	}
	
}
