//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 3947.28740)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.clinicletterbatchcreate;

import ims.admin.vo.ReportSeedParsedVo;
import ims.admin.vo.ReportSeedParsedVoCollection;
import ims.admin.vo.ReportTemplateVo;
import ims.clinical.vo.PatientSummaryNoteByHCPRefVo;
import ims.clinical.vo.PatientSummaryNoteByHcpShortVo;
import ims.clinical.vo.PatientSummaryNoteByHcpShortVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.forms.clinicletterbatchcreate.GenForm.lyrLetterCreateLayer.tabClinicListContainer.grdPatientRow;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.place.vo.ClinicRefVo;
import ims.core.vo.CareContextMinVo;
import ims.core.vo.ClinicLiteVo;
import ims.core.vo.ClinicLiteVoCollection;
import ims.core.vo.DocumentCategoryConfigShortVo;
import ims.core.vo.DocumentWorklistSearchCriteriaVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicWithMappingsLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.OutPatientListVo;
import ims.core.vo.OutPatientListVoCollection;
import ims.core.vo.PatientDocumentStatusVo;
import ims.core.vo.PatientDocumentStatusVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.TemplateForPatientDocumentVo;
import ims.core.vo.TemplateForPatientDocumentVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.correspondence.vo.PatientDocumentErrorVo;
import ims.correspondence.vo.PatientDocumentErrorVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IMos;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.tree.DefaultElement;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final String	COLUMN_NAME				= "0";
	private static final String	COLUMN_SUMMARY			= "1";
	
	

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		form.setMode(FormMode.VIEW);
		
		updateControlsState();
	}

	private void updateControlsState() 
	{
		form.lyrLetterCreate().tabClinicList().qmbClinic().setEnabled(form.lyrLetterCreate().tabClinicList().cmbLocation().getValue() instanceof ILocation);
		
		boolean showTemplateTab = isPatientsSelected();
		form.lyrLetterCreate().tabTemplate().setHeaderEnabled(showTemplateTab);
		form.lyrLetterCreate().tabClinicList().btnNext().setEnabled(showTemplateTab);
	}

	private boolean isPatientsSelected() 
	{
		if(form.lyrLetterCreate().tabClinicList().grdPatient().getRows().size() == 0)
			return false;
		
		for(int i=0; i<form.lyrLetterCreate().tabClinicList().grdPatient().getRows().size(); i++)
		{
			if(form.lyrLetterCreate().tabClinicList().grdPatient().getRows().get(i).getcolDocCreate())
				return true;
		}
		
		return false;
	}

	private void initialize() throws PresentationLogicException 
	{
		Object mosUser = domain.getMosUser();
		if(mosUser == null)
			throw new PresentationLogicException("User must be a Member of Staff.");
		
		initializeTabClinic();
		initializeTabTemplate();
		
	}
	//wdev-14230
	private void populateSummaryNoteCombo()
	{
		//form.lyrLetterCreate().tabTemplate().cmbSummaryNote().clear();
		PatientSummaryNoteByHcpShortVoCollection tempColl = domain.listSummaryNotes(form.getGlobalContext().Core.getPatientShort());
		if(tempColl != null && tempColl.size() > 0)
		{
			for(int i = 0; i <  tempColl.size();i++)
			{
				// Skip null notes
				if (tempColl.get(i) == null)
					continue;
				
				// Build string to be displayed
				StringBuilder displayText = new StringBuilder();
	
				displayText.append(tempColl.get(i).getAuthoringInformation().getAuthoringHcpIsNotNull() ? tempColl.get(i).getAuthoringInformation().getAuthoringHcp().toString() : "");
				displayText.append(" - " + tempColl.get(i).getAuthoringInformation().getAuthoringDateTime().toString());
	
				if (tempColl.get(i).getSystemInformationIsNotNull() && tempColl.get(i).getSystemInformation().getLastupdateDateTime() != null)
					displayText.append(" - " + tempColl.get(i).getSystemInformation().getLastupdateDateTime().toString());
	
				// Add note to record browser
				//form.lyrLetterCreate().tabTemplate().cmbSummaryNote().newRow(tempColl.get(i), displayText.toString());
			}
		}
		
	}

	private void initializeTabTemplate() 
	{
		createDynamicGridColumns();
		
		form.lyrLetterCreate().tabTemplate().ccAuth().initialize(MosType.HCP);
		form.lyrLetterCreate().tabTemplate().ccAuth().isRequired(true);
		
		form.lyrLetterCreate().tabTemplate().ccResponsible().initializeResponsibleHcp(MosType.HCP, true);// 	WDEV-15836
		form.lyrLetterCreate().tabTemplate().ccResponsible().isRequired(false);
		
		form.lyrLetterCreate().tabTemplate().ccTypist().initialize(MosType.ALL);
		form.lyrLetterCreate().tabTemplate().ccTypist().isRequired(true);
		
		Object hcpUser = domain.getHcpLiteUser();
		if(hcpUser instanceof HcpLiteVo)
		{
			form.lyrLetterCreate().tabTemplate().ccAuth().setValue((IMos) hcpUser);
		}
		
		Object mosUser = domain.getMosUser();
		if(mosUser instanceof MemberOfStaffShortVo)
		{
			form.lyrLetterCreate().tabTemplate().ccTypist().setValue((IMos) mosUser);
		}
		//wdev-14230
		if(ConfigFlag.DOM.CLINIC_LETTER_BATCH_CREATE_SUMMARY_NOTE_MODE.getValue().equals("None")) //wdev-14230
		{
			
			form.lyrLetterCreate().tabTemplate().lblSummaryNote().setVisible(Boolean.FALSE);
			form.lyrLetterCreate().tabTemplate().dyngrdSummaryNotes().setVisible(Boolean.FALSE);
		}
		else if(ConfigFlag.DOM.CLINIC_LETTER_BATCH_CREATE_SUMMARY_NOTE_MODE.getValue().equals("Latest"))
		{
			
			form.lyrLetterCreate().tabTemplate().lblSummaryNote().setVisible(Boolean.FALSE);
			form.lyrLetterCreate().tabTemplate().dyngrdSummaryNotes().setVisible(Boolean.FALSE);
		}
		else if(ConfigFlag.DOM.CLINIC_LETTER_BATCH_CREATE_SUMMARY_NOTE_MODE.getValue().equals("Select"))
		{
			createdDynamicGridSummaryNotes();
			form.lyrLetterCreate().tabTemplate().lblSummaryNote().setVisible(Boolean.TRUE);
			form.lyrLetterCreate().tabTemplate().dyngrdSummaryNotes().setVisible(Boolean.TRUE);
			
		}
		//-----------
		
	}

	private void createDynamicGridColumns() 
	{
		DynamicGridColumn columnName = form.lyrLetterCreate().tabTemplate().dyngrdReports().getColumns().newColumn("Name", COLUMN_NAME);
		columnName.setWidth(-1);
	}
	//wdev-14230
	private void createdDynamicGridSummaryNotes()
	{
		DynamicGridColumn columnName = form.lyrLetterCreate().tabTemplate().dyngrdSummaryNotes().getColumns().newColumn("Patient", COLUMN_NAME);
		columnName.setWidth(300);
		columnName = form.lyrLetterCreate().tabTemplate().dyngrdSummaryNotes().getColumns().newColumn("Summary Note", COLUMN_SUMMARY);
		columnName.setWidth(-1);
	}
	private void populateSummaryNoteDynamicGrid()
	{
		form.lyrLetterCreate().tabTemplate().dyngrdSummaryNotes().getRows().clear();
		for(int i=0; i<form.lyrLetterCreate().tabClinicList().grdPatient().getRows().size(); i++)
		{	
			if(form.lyrLetterCreate().tabClinicList().grdPatient().getRows().get(i).getcolDocCreate())
			{
				OutPatientListVo tempVo = form.lyrLetterCreate().tabClinicList().grdPatient().getRows().get(i).getValue();
				if(tempVo.getPasEventIsNotNull() && tempVo.getPasEvent().getPatientIsNotNull())
				{
					DynamicGridRow patientRow = form.lyrLetterCreate().tabTemplate().dyngrdSummaryNotes().getRows().newRow();
					patientRow.setValue(tempVo);
					DynamicGridCell patientCell = patientRow.getCells().newCell(getColumnSummaryNotes(COLUMN_NAME), DynamicCellType.STRING);
					patientCell.setValue(tempVo.getPasEvent().getPatient().getName().getSurname());
					PatientSummaryNoteByHcpShortVoCollection tempColl = domain.listSummaryNotes(tempVo.getPasEvent().getPatient());
					DynamicGridCell summaryNoteCell = patientRow.getCells().newCell(getColumnSummaryNotes(COLUMN_SUMMARY), DynamicCellType.ENUMERATION);
					for(int j = 0; j < tempColl.size();j++)
					{
						if (tempColl.get(j) == null)
							continue;
						
						// Build string to be displayed
						StringBuilder displayText = new StringBuilder();
			
						displayText.append(tempColl.get(j).getAuthoringInformation().getAuthoringHcpIsNotNull() ? tempColl.get(j).getAuthoringInformation().getAuthoringHcp().toString() : "");
						displayText.append(" - " + tempColl.get(j).getAuthoringInformation().getAuthoringDateTime().toString());
			
						if (tempColl.get(j).getSystemInformationIsNotNull() && tempColl.get(j).getSystemInformation().getLastupdateDateTime() != null)
							displayText.append(" - " + tempColl.get(j).getSystemInformation().getLastupdateDateTime().toString());
						
						
						summaryNoteCell.getItems().newItem(tempColl.get(j), displayText.toString());
					}
					
				}
			}
		}
	}
	private DynamicGridColumn getColumnSummaryNotes(String identifier) 
	{
		return form.lyrLetterCreate().tabTemplate().dyngrdSummaryNotes().getColumns().getByIdentifier(identifier);
	}

	//----------

	private void initializeTabClinic() 
	{
		bindCmbLocation();
	}

	private void bindCmbLocation() 
	{
		form.lyrLetterCreate().tabClinicList().cmbLocation().clear();
		
		ILocation[] locations = domain.listLocations();
		
		if(locations == null || locations.length == 0)
			return;
		
		ILocation currentLocation = domain.getCurrentLocation();	//WDEV-13544
		ILocation currentFoundLocation = null;//	WDEV-13544
		
		for(int i=0; i<locations.length; i++)
		{
			ILocation location = locations[i];
			
			if(location == null)
				continue;
			
			if(currentLocation != null && location.getID() == currentLocation.getID())//	WDEV-13544
			{
				currentFoundLocation = location;
			}
			
			form.lyrLetterCreate().tabClinicList().cmbLocation().newRow(location, location.getName());
		}
		
		form.lyrLetterCreate().tabClinicList().cmbLocation().setValue(currentFoundLocation);//	WDEV-13544
	}

	@Override
	protected void onQmbClinicTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		if(!(form.lyrLetterCreate().tabClinicList().cmbLocation().getValue() instanceof ILocation))
			return;
		
		ClinicLiteVoCollection clinics = domain.listClinicsforLocation(form.lyrLetterCreate().tabClinicList().cmbLocation().getValue().getID(), value);
		
		form.lyrLetterCreate().tabClinicList().qmbClinic().clear();
		
		if(clinics == null || clinics.size() == 0)
			return;
		
		for(int i=0; i<clinics.size(); i++)
		{
			ClinicLiteVo clinic = clinics.get(i);
			
			if(clinic == null)
				continue;
			
			form.lyrLetterCreate().tabClinicList().qmbClinic().newRow(clinic, clinic.getClinicName());
		}
		
		if(clinics.size() > 0)
			form.lyrLetterCreate().tabClinicList().qmbClinic().showOpened();
	}
	
	@Override
	protected void onCmbLocationValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrLetterCreate().tabClinicList().qmbClinic().clear();
		
		updateControlsState();
	}
	
	@Override
	protected void onBtnNextClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrLetterCreate().showtabTemplate();
		
		prePopulateTemplateTab();//	WDEV-13752
	}
	
	//	WDEV-13752
	private void prePopulateTemplateTab() 
	{
		form.lyrLetterCreate().tabTemplate().imbSearchTemplate().setAsDefaultButton();//	WDEV-13750
		
		for(int i=0; i<form.lyrLetterCreate().tabClinicList().grdPatient().getRows().size(); i++)
		{
			OutPatientListVo outpatient = form.lyrLetterCreate().tabClinicList().grdPatient().getRows().get(i).getValue();
			
			if(outpatient == null)
				continue;
			
			if(outpatient.getPasEventIsNotNull() && outpatient.getPasEvent().getConsultantIsNotNull() && outpatient.getPasEvent().getSpecialtyIsNotNull())
			{
				MedicWithMappingsLiteVo medic = outpatient.getPasEvent().getConsultant();
				HcpLiteVo hcp = new HcpLiteVo(medic.getID_Hcp(), medic.getBoVersion());
				hcp.setMos(medic.getMos());
				
				if(form.lyrLetterCreate().tabTemplate().ccResponsible().getValue() == null)
					form.lyrLetterCreate().tabTemplate().ccResponsible().setValue(hcp);
				
				if(form.lyrLetterCreate().tabTemplate().cmbSpecialty().getValue() == null)
					form.lyrLetterCreate().tabTemplate().cmbSpecialty().setValue(outpatient.getPasEvent().getSpecialty());
				
				break;
			}
		}
		
		form.lyrLetterCreate().tabTemplate().dteDocDate().setValue(form.lyrLetterCreate().tabClinicList().dteClinicDate().getValue());
		//wdev-14320
		if( ConfigFlag.DOM.CLINIC_LETTER_BATCH_CREATE_SUMMARY_NOTE_MODE.getValue().equals("Select"))
			populateSummaryNoteDynamicGrid();
	}

	@Override
	protected void onImbClearPatientClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearOutPatientSearch();
		clearSearchTemplate();
		updateControlsState();
	}
	
	private void clearOutPatientSearch() 
	{
		form.lyrLetterCreate().tabClinicList().cmbLocation().setValue(null);
		form.lyrLetterCreate().tabClinicList().qmbClinic().clear();
		form.lyrLetterCreate().tabClinicList().dteClinicDate().setValue(null);
		form.lyrLetterCreate().tabClinicList().grdPatient().getRows().clear();
	}

	@Override
	protected void onImbSearchPatientClick() throws ims.framework.exceptions.PresentationLogicException
	{
		searchOutPatient();
		updateControlsState();
	}
	
	private void searchOutPatient() 
	{
		String[] errors = validateOutPatientSearch();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		populateList(domain.listOutPatients(form.lyrLetterCreate().tabClinicList().qmbClinic().getValue(), form.lyrLetterCreate().tabClinicList().dteClinicDate().getValue()));
	}

	private String[] validateOutPatientSearch() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if (form.lyrLetterCreate().tabClinicList().qmbClinic().isEnabled() == true && form.lyrLetterCreate().tabClinicList().qmbClinic().getValue() == null)
		{
			uiErrors.add("Please enter an O/P Clinic.");
		}
		
		if(form.lyrLetterCreate().tabClinicList().dteClinicDate().getValue() == null)
		{
			uiErrors.add("Please enter a Clinic Date.");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	@Override
	protected void onBtnGenerateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors = validateCreateDocuments();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		int numberOfDocumentsCreated = savePatientsDocuments();	//WDEV-12640
		
		//WDEV-12640
		if(numberOfDocumentsCreated  > 0)
			fillDocumentWorklistSearchCriteria();
		
		engine.close(DialogResult.OK);
	}
	
	private void fillDocumentWorklistSearchCriteria() 
	{
		DocumentWorklistSearchCriteriaVo criteria = new DocumentWorklistSearchCriteriaVo();
		
		criteria.setLocation(form.lyrLetterCreate().tabClinicList().cmbLocation().getValue());
		criteria.setClinic(form.lyrLetterCreate().tabClinicList().qmbClinic().getValue());
		criteria.setAuthor(form.lyrLetterCreate().tabTemplate().ccAuth().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.lyrLetterCreate().tabTemplate().ccAuth().getValue() : null);
		criteria.setResponsible(form.lyrLetterCreate().tabTemplate().ccResponsible().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.lyrLetterCreate().tabTemplate().ccResponsible().getValue() : null);
		criteria.setTypist(form.lyrLetterCreate().tabTemplate().ccTypist().getValue() instanceof MemberOfStaffLiteVo ? (MemberOfStaffLiteVo) form.lyrLetterCreate().tabTemplate().ccTypist().getValue() : null);
		criteria.setSpecialty(form.lyrLetterCreate().tabTemplate().cmbSpecialty().getValue());
		//criteria.setDateFrom(form.lyrLetterCreate().tabTemplate().dteDocDate().getValue() != null ? form.lyrLetterCreate().tabTemplate().dteDocDate().getValue() : form.lyrLetterCreate().tabClinicList().dteClinicDate().getValue());		WDEV-12721
		//criteria.setDateTo(form.lyrLetterCreate().tabTemplate().dteDocDate().getValue() != null ? form.lyrLetterCreate().tabTemplate().dteDocDate().getValue() : form.lyrLetterCreate().tabClinicList().dteClinicDate().getValue());			WDEV-12721
		criteria.setDateFrom(form.getLocalContext().getMinDate());	//WDEV-12721
		criteria.setDateTo(form.getLocalContext().getMaxDate());	//WDEV-12721
		
		form.getGlobalContext().Core.setDocumentWorklistSearchCriteria(criteria);
	}

	private int savePatientsDocuments() 
	{
		PatientDocumentErrorVoCollection errors = new PatientDocumentErrorVoCollection();
		int numberOfDocumentsCreated = 0;	//WDEV-12640
		
		for(int i=0; i<form.lyrLetterCreate().tabClinicList().grdPatient().getRows().size(); i++)
		{
			if(form.lyrLetterCreate().tabClinicList().grdPatient().getRows().get(i).getcolDocCreate())
			{
				if(createAndSavePatientDocument(form.lyrLetterCreate().tabClinicList().grdPatient().getRows().get(i).getValue(), errors))	//WDEV-12640
					numberOfDocumentsCreated++;
			}
		}
		
		if(errors != null && errors.size() > 0)
		{
			engine.open(form.getForms().Core.PatientDocumentErrors, new Object[] {errors});
		}
		
		return numberOfDocumentsCreated;
	}

	private Boolean createAndSavePatientDocument(OutPatientListVo outPatientListVo, PatientDocumentErrorVoCollection errors) //WDEV-12640
	{
		if(outPatientListVo == null || outPatientListVo.getPasEvent() == null || outPatientListVo.getPasEvent().getPatient() == null)
			return false;
		
		PatientShort patient = outPatientListVo.getPasEvent().getPatient();
		CareContextMinVo careContext = domain.getCareContextByPasEvent(outPatientListVo.getPasEvent());
		ClinicRefVo clinic = outPatientListVo.getClinic();
		
		PatientDocumentVo patDoc = savePatientDocuments(patient, careContext, clinic, "DummyFileName", errors);
		if (patDoc == null)
			return false;
		
		String fileName = createReport(patient, careContext,patDoc, errors);
		
		if (fileName  == null)
		{
			domain.deletePatientDocument(patDoc);
			return false;
		}
		
		patDoc.getServerDocument().setFileName(fileName);
		patDoc.validate();
		try
		{
			domain.savePatientDocument(patDoc);
		}
		catch (StaleObjectException e)
		{
			domain.deletePatientDocument(patDoc);
			deleteFile(getWorkAreaPath() + fileName);//WDEV-13366
			e.printStackTrace();
			errors.add(createError(patient, careContext, "Could not be created"));
			return false;
		}
		
		return true;
	}
	
	private boolean deleteFile(String fileToDelete)
	{

		File file = new File(fileToDelete);

		return file.delete();

	}
	
	
	private PatientDocumentVo savePatientDocuments(PatientShort patient, CareContextMinVo careContext, ClinicRefVo clinic, String fileName, PatientDocumentErrorVoCollection errors) 
	{
		if(fileName == null || fileName.length() == 0)
			return null;
		
		PatientDocumentVo vo = populatePatientDocumentVo(patient, careContext, clinic, populateServerDocumentVo(fileName));
		
		if(vo == null)
			return null;
		
		String[] str = vo.validate();
		if (str != null && str.length > 0)
		{
			errors.add(createError(patient, careContext, "Could not be created"));
			return null;
		}
		
		try 
		{
			return domain.savePatientDocument(vo);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			errors.add(createError(patient, careContext, "Could not be created"));
			return null;
		}
	}
	
	private PatientDocumentVo populatePatientDocumentVo(PatientShort patient, CareContextMinVo careContext, ClinicRefVo clinic, ServerDocumentVo serverDocumentVo) 
	{
		if(serverDocumentVo == null)
			return null;
		
		PatientDocumentVo vo = new PatientDocumentVo();
		vo.setPatient(patient);
		
		vo.setEpisodeofCare(careContext != null ? careContext.getEpisodeOfCare() : null);
		vo.setCareContext(careContext);
		
		if(form.lyrLetterCreate().tabTemplate().dyngrdReports().getValue() instanceof TemplateForPatientDocumentVo)
		{
			vo.setName(((TemplateForPatientDocumentVo) form.lyrLetterCreate().tabTemplate().dyngrdReports().getValue()).getName());
			
			DocumentCategoryConfigShortVo dc = domain.getDocCatConfig((TemplateForPatientDocumentVo) form.lyrLetterCreate().tabTemplate().dyngrdReports().getValue());
			vo.setCategory(dc != null ? dc.getCategory() : null);
		}
		
		vo.setServerDocument(serverDocumentVo);
		vo.setCreationType(DocumentCreationType.GENERATED);
		vo.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
		
		MemberOfStaffLiteVo mosUser = form.lyrLetterCreate().tabTemplate().ccTypist().getValue() instanceof MemberOfStaffLiteVo ? (MemberOfStaffLiteVo) form.lyrLetterCreate().tabTemplate().ccTypist().getValue() : null;
		vo.setRecordingUser(mosUser);
		vo.setRecordingDateTime(new DateTime());
		
		HcpRefVo hcpUser = form.lyrLetterCreate().tabTemplate().ccAuth().getValue() instanceof HcpRefVo ? (HcpRefVo) form.lyrLetterCreate().tabTemplate().ccAuth().getValue() : null;
		vo.setAuthoringHCP(hcpUser);
		vo.setAuthoringDateTime(new DateTime());
		
		vo.setSpecialty(form.lyrLetterCreate().tabTemplate().cmbSpecialty().getValue()!=null?form.lyrLetterCreate().tabTemplate().cmbSpecialty().getValue():((careContext != null && careContext.getEpisodeOfCare() != null) ? careContext.getEpisodeOfCare().getSpecialty() : null));
		
		PatientDocumentStatusVo documentStatus = new PatientDocumentStatusVo();
		documentStatus.setCorrespondenceStatus(DocumentStatus.DRAFT);
		documentStatus.setRecordingUser((MemberOfStaffLiteVo)domain.getMosUser());
		documentStatus.setRecordingDateTime(new DateTime());
		
		vo.setCurrentDocumentStatus(documentStatus);
		
		PatientDocumentStatusVoCollection historyStatus = new PatientDocumentStatusVoCollection();
		historyStatus.add(documentStatus);
		vo.setDocumentStatusHistory(historyStatus);
		
		vo.setDocumentDate(form.lyrLetterCreate().tabTemplate().dteDocDate().getValue()!=null?form.lyrLetterCreate().tabTemplate().dteDocDate().getValue():((careContext != null && careContext.getStartDateTime() != null ) ? careContext.getStartDateTime().getDate() : new Date()));
		
		//WDEV-12721
		if(form.getLocalContext().getMinDate() == null || vo.getDocumentDate().isLessThan(form.getLocalContext().getMinDate()))
			form.getLocalContext().setMinDate(vo.getDocumentDate());
		
		//WDEV-12721
		if(form.getLocalContext().getMaxDate() == null || vo.getDocumentDate().isGreaterThan(form.getLocalContext().getMaxDate()))
			form.getLocalContext().setMaxDate(vo.getDocumentDate());
		
		vo.setClinic(clinic);
		
		HcpRefVo responsibleHcp = form.lyrLetterCreate().tabTemplate().ccResponsible().getValue() instanceof HcpRefVo ? (HcpRefVo)form.lyrLetterCreate().tabTemplate().ccResponsible().getValue():(careContext != null && careContext.getResponsibleHCP() != null) ? careContext.getResponsibleHCP() : (careContext != null && careContext.getEpisodeOfCare() != null) ? careContext.getEpisodeOfCare().getResponsibleHCP() : null;
		vo.setResponsibleHCP(responsibleHcp);
		
		return vo;
	}
	
	private ServerDocumentVo populateServerDocumentVo(String fileName) 
	{
		if(fileName == null || fileName.length() == 0)
			return null;
		
		ServerDocumentVo vo = new ServerDocumentVo();	
		vo.setFileName(fileName);
		vo.setFileType(FileType.DOC);
		
		return vo;
	}

	private String createReport(PatientShort patient, CareContextMinVo carecontext,PatientDocumentVo doc, PatientDocumentErrorVoCollection errors)
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		ReportTemplateVo template = domain.getTemplate((TemplateForPatientDocumentVo) form.lyrLetterCreate().tabTemplate().dyngrdReports().getValue());

		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		ReportSeedParsedVoCollection seeds = getSeedsFromReport(template.getReport().getReportXml());

		addSeedsForTemplate(client, seeds, patient, carecontext,doc);
		
		if(!addValueForNonMandatorySeeds(client, seeds))//	WDEV-14299
		{
			errors.add(createError(patient, carecontext, "Could not be created"));
			return null;
		}
		
		String [] errorsSeed = checkForSeeds(seeds, client);
		
		if(errorsSeed != null && errorsSeed.length > 0)
		{
			errors.add(createError(patient, carecontext, "Could not be created"));
			return null;
		}
		
		String fileName;
		try
		{
			fileName = client.buildReportAndUpload(getWorkAreaPath(), template.getReport().getReportXml(), template.getTemplateXml(), urlReportServer, QueryBuilderClient.RTF, "", 1, false);//WDEV-13366
		}
		catch (QueryBuilderClientException e1)
		{
			errors.add(createError(patient, carecontext, "Could not be created"));
			e1.printStackTrace();
			return null;
		}

		return fileName;
	}
	
	//	WDEV-14299
	private boolean addValueForNonMandatorySeeds(QueryBuilderClient client, ReportSeedParsedVoCollection seeds) 
	{
		if(seeds == null || seeds.size() == 0)
			return true;
		
		for(int i=0; i<seeds.size(); i++)
		{
			ReportSeedParsedVo seed = seeds.get(i);
			
			if(seed == null)
				continue;
			
			if(Boolean.TRUE.equals(seed.getCanBeNull()))
			{
				if(nonMandatorySeedNotAddedToReport(seed, client))
				{
					try 
					{
						client.addSeed(new SeedValue(seed.getName(), null, Class.forName(seed.getType())));
					} 
					catch (ClassNotFoundException e) 
					{
						e.printStackTrace();
						engine.showMessage("Error building the report: " + e.getMessage());
						return false;
					}
				}
			}
		}
		
		return true;
	}
	
	//WDEV-14299
	private boolean nonMandatorySeedNotAddedToReport(ReportSeedParsedVo seed, QueryBuilderClient client) 
	{
		if(seed == null)
			return false;
		
		if(client == null)
			return false;
		
		if(client.getSeeds() == null)
			return true;
		
		for(int i=0; i<client.getSeeds().size(); i++)
		{
			if(client.getSeeds().get(i) == null)
				continue;
			
			SeedValue sValue = (SeedValue)client.getSeeds().get(i);
			
			if(seed.getName() != null && seed.getName().equals(sValue.getName()))
				return false;
		}
		
		return true;
	}
	
	private PatientDocumentErrorVo createError(PatientShort patient, CareContextMinVo careContext, String errorValue) 
	{
		PatientDocumentErrorVo error = new PatientDocumentErrorVo();
		
		error.setPatient(patient.getName());
		error.setIdentifiers(patient.getIdentifiers());
		error.setDocumentName(((TemplateForPatientDocumentVo) form.lyrLetterCreate().tabTemplate().dyngrdReports().getValue()).getName());
		error.setDocumentDate((careContext != null && careContext.getStartDateTime() != null ) ? careContext.getStartDateTime().getDate() : new Date());
		
		error.setError(errorValue);
		
		return error;
	}

	private String[] checkForSeeds(ReportSeedParsedVoCollection seeds, QueryBuilderClient client) 
	{
		if(seeds == null || seeds.size() == 0)
			return null;
		
		if(client == null)
			return null;
		
		List<String> uiErrors = new ArrayList<String>();
		
		for(int i=0; i<seeds.size(); i++)
		{
			if(seeds.get(i) == null || !seeds.get(i).getCanBeNullIsNotNull() || Boolean.TRUE.equals(seeds.get(i).getCanBeNull()))
				continue;
			
			if(!checkIfMandatorySeedIsAdded(seeds.get(i).getName(), client.getSeeds()))
			{
				uiErrors.add(seeds.get(i).getName() + " is mandatory for selected template.");
			}
		}
		
		String[] seedsValidate = new String[uiErrors.size()];
		uiErrors.toArray(seedsValidate);
		
		return seedsValidate;
	}
	
	private boolean checkIfMandatorySeedIsAdded(String name, ArrayList seeds) 
	{
		if(name == null || name.length() == 0)
			return true;
		
		if(seeds == null || seeds.size() == 0)
			return false;
		
		for(int i=0; i<seeds.size(); i++)
		{
			if(seeds.get(i) == null)
				continue;
			
			SeedValue sValue = (SeedValue)seeds.get(i);
			
			if(sValue.getName().equals(name))
				return true;
		}
		
		return false;
	}
	
	private void addSeedsForTemplate(QueryBuilderClient client, ReportSeedParsedVoCollection seeds, PatientShort patient, CareContextMinVo careContext,PatientDocumentVo doc) 
	{
		if(seeds == null || seeds.size() == 0)
			return;
		
		String patientSeed = getSeedName(seeds, new PatientRefVo().getBoClassName());
			
		if(patientSeed != null && patient != null)
			client.addSeed(new SeedValue(patientSeed, patient.getID_Patient(), Integer.class));
		
		if(careContext != null && careContext.getEpisodeOfCare() != null)
		{
			String episodeSeed = getSeedName(seeds, new EpisodeOfCareRefVo().getBoClassName());
				
			if(episodeSeed != null)
				client.addSeed(new SeedValue(episodeSeed, careContext.getEpisodeOfCare().getID_EpisodeOfCare(), Integer.class));
			
			String cContextSeed = getSeedName(seeds, new CareContextRefVo().getBoClassName());
				
			if(cContextSeed != null)
				client.addSeed(new SeedValue(cContextSeed, careContext.getID_CareContext(), Integer.class));
		}
		if (doc!=null)
		{
			String docSeed = getSeedName(seeds, doc.getBoClassName());
			if (docSeed != null)
				client.addSeed(new SeedValue(docSeed, doc.getID_PatientDocument(), Integer.class));
		}
		//wdev-14230 
		if(ConfigFlag.DOM.CLINIC_LETTER_BATCH_CREATE_SUMMARY_NOTE_MODE.getValue().equals("Latest")) //wdev-14230  LAST SUMMARY NOTE
		{
			PatientSummaryNoteByHcpShortVo tempVo = domain.getLastSummaryNote(patient);
			String cContactSeed = getSeedName(seeds, new PatientSummaryNoteByHCPRefVo().getBoClassName());
			if(cContactSeed != null)
				client.addSeed(new SeedValue(cContactSeed, tempVo != null ? tempVo.getID_PatientSummaryNoteByHCP():null, Integer.class));
		}
		else if(ConfigFlag.DOM.CLINIC_LETTER_BATCH_CREATE_SUMMARY_NOTE_MODE.getValue().equals("Select"))   //Selected Summary Note
		{
			PatientSummaryNoteByHcpShortVo tempSumVo = null;
			for(int i = 0;i < form.lyrLetterCreate().tabTemplate().dyngrdSummaryNotes().getRows().size();i++ )
			{
				OutPatientListVo tempOutVo = (OutPatientListVo) form.lyrLetterCreate().tabTemplate().dyngrdSummaryNotes().getRows().get(i).getValue();
				if(tempOutVo.getPasEventIsNotNull() && tempOutVo.getPasEvent().getPatientIsNotNull() )
				{
					if(tempOutVo.getPasEvent().getPatient().equals(patient))
					{
						DynamicGridRow row = form.lyrLetterCreate().tabTemplate().dyngrdSummaryNotes().getRows().get(i);
						DynamicGridCell cell = row.getCells().get(getColumnSummaryNotes(COLUMN_SUMMARY));
						if(cell != null && cell.getValue() instanceof PatientSummaryNoteByHcpShortVo )
						{
							tempSumVo = (PatientSummaryNoteByHcpShortVo) cell.getValue();
							break;
						}
						
					}
				}
			}
			String cContactSeed = getSeedName(seeds, new PatientSummaryNoteByHCPRefVo().getBoClassName());
			if(cContactSeed != null)
				client.addSeed(new SeedValue(cContactSeed, tempSumVo != null ? tempSumVo.getID_PatientSummaryNoteByHCP():null, Integer.class));
		}



		/*if(ConfigFlag.UI.CORRESPONDENCE_DISPLAY_PATIENT_SUMMARY_NOTE_COMBO.getValue() == true)
		{
			if(form.lyrLetterCreate().tabTemplate().cmbSummaryNote().getValue() != null)
			{
				String cContactSeed = getSeedName(seeds, new PatientSummaryNoteByHCPRefVo().getBoClassName());
				if(cContactSeed != null)
					client.addSeed(new SeedValue(cContactSeed, form.lyrLetterCreate().tabTemplate().cmbSummaryNote().getValue().getID_PatientSummaryNoteByHCP(), Integer.class));
				
			}
			else
			{
				String cContactSeed = getSeedName(seeds, new PatientSummaryNoteByHCPRefVo().getBoClassName());
				if(cContactSeed != null)
					client.addSeed(new SeedValue(cContactSeed, null, Integer.class));
			}
		}*/
		//-------------------
	}
	
	
	private String getSeedName(ReportSeedParsedVoCollection seeds, String boClassName) 
	{
		if(boClassName == null || boClassName.length() == 0)
			throw new CodingRuntimeException("BoClassName cannot be null.");
		
		if(seeds == null || seeds.size() == 0)
			throw new CodingRuntimeException("Cannot return a seed name from a null list of seeds.");
		
		for(int i=0; i<seeds.size(); i++)
		{
			ReportSeedParsedVo seed = seeds.get(i);
			
			if(seed == null)
				continue;
			
			if(boClassName.equals(seed.getBOName()))
				return seed.getName();
		}
		
		return null;
	}
	
	private ReportSeedParsedVoCollection getSeedsFromReport(String reportXml) 
	{
		if(reportXml == null || reportXml.length() == 0)
			return null;
		
		ReportSeedParsedVoCollection seeds = null;
		
		try 
		{
			seeds = parseSeedsFromXML(reportXml);
		} 
		catch (DocumentException e) 
		{
			engine.showMessage("Error deserializing Seeds: " + e.toString());
			return null;
		}
		
		if(seeds == null || seeds.size() == 0)
			return null;
		
		return seeds;
	}
	
	private ReportSeedParsedVoCollection parseSeedsFromXML(String reportXML) throws DocumentException
	{
		Document document = DocumentHelper.parseText(reportXML);

		ReportSeedParsedVoCollection seeds = new ReportSeedParsedVoCollection();
		List list = document.selectNodes("//Project/Seeds/Seed");
		for (Iterator iter = list.iterator(); iter.hasNext();)
		{
			DefaultElement attribute = (DefaultElement) iter.next();

			ReportSeedParsedVo seed = new ReportSeedParsedVo();
			seed.setName(attribute.valueOf("Name"));
			seed.setType(attribute.valueOf("Type"));
			seed.setBOName(attribute.valueOf("BOName"));
			seed.setBOField(attribute.valueOf("BOField"));
			seed.setCanBeNull(new Boolean(attribute.valueOf("CanBeNull").equalsIgnoreCase("true")));
			seeds.add(seed);
		}

		return seeds;
	}
	
	private String[] validateCreateDocuments() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		Object repTemplate = form.lyrLetterCreate().tabTemplate().dyngrdReports().getValue();
		
		if(repTemplate == null || !(repTemplate instanceof TemplateForPatientDocumentVo))
		{
			return new String[] {"Please select a template!"};
		}
		
		if(form.lyrLetterCreate().tabTemplate().ccAuth().getValue() == null)
		{
			uiErrors.add("Authoring HCP is mandatory.");
		}
		
		if(form.lyrLetterCreate().tabTemplate().ccTypist().getValue() == null)
		{
			uiErrors.add("Typist Name is mandatory.");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}
	
	@Override
	protected void onImbSearchTemplateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		searchTemplate();
	}
	
	private void searchTemplate() 
	{
		String[] errors = validateSearch();//	WDEV-13545
		if(errors != null && errors.length > 0)//	WDEV-13545
		{
			engine.showErrors(errors);
			return;
		}
		
		String templateName = form.lyrLetterCreate().tabTemplate().txtTemplate().getValue();
		String listOfMandatorySeeds = getListOfSelectedSeeds();
	
		populateReports(domain.searchReports(templateName, listOfMandatorySeeds, form.lyrLetterCreate().tabTemplate().cmbDocType().getValue(), form.lyrLetterCreate().tabTemplate().cmbSSpecialty().getValue()));
	}
	
	//	WDEV-13545
	private String[] validateSearch() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if ((form.lyrLetterCreate().tabTemplate().txtTemplate().getValue() == null || form.lyrLetterCreate().tabTemplate().txtTemplate().getValue().length() == 0)
				&& form.lyrLetterCreate().tabTemplate().cmbDocType().getValue() == null && form.lyrLetterCreate().tabTemplate().cmbSSpecialty().getValue() == null)
		{
			uiErrors.add("Please provide at least one search criteria.");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private String getListOfSelectedSeeds() 
	{
		StringBuilder list = new StringBuilder();
		
		list.append("'" + new PatientRefVo().getBoClassName() + "'");
		
		list.append((list.length() > 0 ? ", " : "") + "'" + new EpisodeOfCareRefVo().getBoClassName() + "'");
		
		list.append((list.length() > 0 ? ", " : "") + "'" + new CareContextRefVo().getBoClassName() + "'");
		
		//if(ConfigFlag.UI.CORRESPONDENCE_DISPLAY_PATIENT_SUMMARY_NOTE_COMBO.getValue() == true) //wdev-14230
		if(ConfigFlag.DOM.CLINIC_LETTER_BATCH_CREATE_SUMMARY_NOTE_MODE.getValue().equals("Latest") || ConfigFlag.DOM.CLINIC_LETTER_BATCH_CREATE_SUMMARY_NOTE_MODE.getValue().equals("Select")) //wdev-14230
			list.append((list.length() > 0 ? ", " : "") + "'" + new PatientSummaryNoteByHCPRefVo().getBoClassName() + "'");
		
		return list.toString();
	}

	private void populateReports(TemplateForPatientDocumentVoCollection templateForPatientDocumentVoCollection) 
	{
		form.lyrLetterCreate().tabTemplate().dyngrdReports().getRows().clear();
		
		if (templateForPatientDocumentVoCollection == null || templateForPatientDocumentVoCollection.size() ==0)
		{
			engine.showMessage("No matching templates found.", "No templates", MessageButtons.OK, MessageIcon.INFORMATION);
			return;
		}

		for (int i = 0; i < templateForPatientDocumentVoCollection.size(); i++)
		{
			TemplateForPatientDocumentVo voReportList = templateForPatientDocumentVoCollection.get(i);
			addReport(voReportList);
		}
	}

	private void addReport(TemplateForPatientDocumentVo voReportList) 
	{
		if(voReportList == null)
			return;
		
		DynamicGridRow reportRow = checkIfReportIsAlreadyAdded(voReportList);
		
		if(reportRow == null)
			reportRow = createReportRow(voReportList);

		addTemplates(voReportList, reportRow);
	}
	
	private DynamicGridRow checkIfReportIsAlreadyAdded(TemplateForPatientDocumentVo template) 
	{
		if(template == null)
			return null;
		
		for(int i=0; i<form.lyrLetterCreate().tabTemplate().dyngrdReports().getRows().size(); i++)
		{
			if(form.lyrLetterCreate().tabTemplate().dyngrdReports().getRows().get(i).getValue().equals(template.getReport()))
				return form.lyrLetterCreate().tabTemplate().dyngrdReports().getRows().get(i);
		}
		
		return null;
	}
	
	private DynamicGridColumn getColumn(String identifier) 
	{
		return form.lyrLetterCreate().tabTemplate().dyngrdReports().getColumns().getByIdentifier(identifier);
	}
	
	private void addTemplates(TemplateForPatientDocumentVo template, DynamicGridRow reportRow)
	{
		if(template == null || template.getReport() == null)
			throw new CodingRuntimeException("Cannot add a row with null template or null report.");
		
		if(reportRow == null)
			return;

		DynamicGridRow templateRow = reportRow.getRows().newRow();
		templateRow.setValue(template);
		templateRow.setCollapsedImage(form.getImages().Core.TemplateReport);
		templateRow.setExpandedImage(form.getImages().Core.TemplateReport);
	
		DynamicGridCell cellTemplateName = createCell(templateRow, getColumn(COLUMN_NAME));
		if(cellTemplateName != null)
			cellTemplateName.setValue(template.getName());
	
		if(template.getReport().getImsIdIsNotNull() && template.getReport().getImsId().intValue() > 0)
		{
			templateRow.setTextColor(Color.Blue);
		}
	}
	
	private DynamicGridCell createCell(DynamicGridRow row, DynamicGridColumn column)
	{
		if(row == null || column == null)
			return null;
		
		DynamicGridCell cell = row.getCells().get(column);
		if (cell == null)
		{
			cell = row.getCells().newCell(column, DynamicCellType.STRING);
			cell.setReadOnly(true);
		}

		return cell;
	}

	private DynamicGridRow createReportRow(TemplateForPatientDocumentVo template) 
	{
		if(template == null || template.getReport() == null)
			throw new CodingRuntimeException("Cannot add a row with null template or null report.");
			
		DynamicGridRow reportRow = form.lyrLetterCreate().tabTemplate().dyngrdReports().getRows().newRow();
		
		reportRow.setValue(template.getReport());
		reportRow.setSelectable(false);
		reportRow.setCollapsedImage(form.getImages().Core.ReportDesigner);
		reportRow.setExpandedImage(form.getImages().Core.ReportDesigner);
		reportRow.setExpanded(true);//WDEV-13991

		DynamicGridCell cellName = createCell(reportRow, getColumn(COLUMN_NAME));
		
		if(cellName != null)
			cellName.setValue(template.getReport().getReportName());

		if(template.getReport().getImsIdIsNotNull() && template.getReport().getImsId().intValue() > 0)
		{
			reportRow.setTextColor(Color.Blue);
		}
		
		return reportRow;
	}
	
	@Override
	protected void onImbClearTemplateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchTemplate();
	}
	
	private void clearSearchTemplate() 
	{
		form.lyrLetterCreate().tabTemplate().txtTemplate().setValue(null);
		form.lyrLetterCreate().tabTemplate().dyngrdReports().getRows().clear();
		form.lyrLetterCreate().tabTemplate().cmbDocType().setValue(null);
		form.lyrLetterCreate().tabTemplate().cmbSSpecialty().setValue(null);
	}

	private void populateList(OutPatientListVoCollection voOutPatColl)
	{
		form.lyrLetterCreate().tabClinicList().grdPatient().getRows().clear();
		
		if (voOutPatColl == null || voOutPatColl.size() == 0)
		{
			engine.showMessage("No results found for search criteria", "No records", MessageButtons.OK, MessageIcon.INFORMATION); //wdev-15816
			return;
		}
		for (int i = 0; i < voOutPatColl.size(); i++)
		{
			OutPatientListVo voOutPatient = voOutPatColl.get(i);
			if (voOutPatient != null && voOutPatient.getPasEventIsNotNull() && voOutPatient.getPasEvent().getPatientIsNotNull())
			{
				grdPatientRow row = form.lyrLetterCreate().tabClinicList().grdPatient().getRows().newRow();
				if (voOutPatient.getPasEvent().getPatient().getNameIsNotNull())
				{
					row.setcolForename(voOutPatient.getPasEvent().getPatient().getName().getForename());
					row.setcolSurname(voOutPatient.getPasEvent().getPatient().getName().getSurname());
				}

				ims.core.vo.PatientId voPatId = voOutPatient.getPasEvent().getPatient().getDisplayId();
				if (voPatId != null)
					row.setcolHospnum(voPatId.getValue());

				if (voOutPatient.getPasEvent().getPatient().getDobIsNotNull())
					row.setcolDob(voOutPatient.getPasEvent().getPatient().getDob().toString());

				if (voOutPatient.getClinicIsNotNull())
					row.setcolClinic(voOutPatient.getClinic().getClinicName());

				if (voOutPatient.getPasEvent() != null && voOutPatient.getPasEvent().getSpecialty() != null)
					row.setcolSpecialty(voOutPatient.getPasEvent().getSpecialty().getText());

				if (voOutPatient.getAppointmentDateTimeIsNotNull())
					row.setcolClinicDate(voOutPatient.getAppointmentDateTime().toString());

				if (voOutPatient.getPasEvent().getPatient().getIsDead() != null && voOutPatient.getPasEvent().getPatient().getIsDead().booleanValue())
					row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());

				row.setcolDocCreate(true);
				
				row.setValue(voOutPatient);
			}
		}
	}

	@Override
	protected void onGrdPatientSelectionChanged() throws PresentationLogicException 
	{
		//updateControlsState();
	}

	@Override
	protected void onGrdPatientGridCheckBoxClicked(int column,	grdPatientRow row, boolean isChecked) throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onBtnOutpatientCancelClick()	throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnTemplateCancelClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
	}
	
	//WDEV-13366
	private String getWorkAreaPath()
	{
		String storePath = ConfigFlag.GEN.MAXIMS_DOCUMENT_WORK_AREA.getValue();

		if (!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";

		return storePath;
	}

	//	WDEV-13752
	@Override
	protected void onlyrLetterCreateTabChanged(LayerBridge tab) 
	{
		prePopulateTemplateTab();
	}
}
