//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3520.27738)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.core.forms.assignward;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientElectiveListForWardViewVo;
import ims.core.vo.PendingElectiveAdmissionAdmitVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	private void open()
	{
		if( ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() == true )	//wdev-18936
		{
    		if( form.getGlobalContext().Core.getPatientElectiveListForWardViewVo() == null)
    			throw new CodingRuntimeException("PatientElectiveList Global Context is null");
		}
		else
		{
			if(form.getGlobalContext().Core.getPendingElectiveAdmission() == null)
    			throw new CodingRuntimeException("PendingElectiveAdmission Global Context is null");
		}
	
		loadHospitals();
	}
	
	private void loadHospitals() 
	{
		form.cmbHospital().clear();
		
		LocationLiteVoCollection hospitals = domain.listActiveHospitals();
		if (hospitals!=null)
		{
			for (LocationLiteVo item: hospitals)
			{
				form.cmbHospital().newRow(item, item.getName());
			}
		}
	}
	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		loadWards();
	}
	
	private void loadWards()
	{
		form.cmbward().clear();
		
		if (form.cmbHospital().getValue()!=null)
		{
			LocationLiteVoCollection wards = domain.listWards(form.cmbHospital().getValue());
			if (wards!=null)
			{
				for (LocationLiteVo item : wards) 
				{
					form.cmbward().newRow(item, item.getName());
				}
			}
		}
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() == true )	//wdev-18936
		{
			PatientElectiveListForWardViewVo voPatElectList = form.getGlobalContext().Core.getPatientElectiveListForWardViewVo();
			if( voPatElectList != null  && voPatElectList.getTCIDetailsIsNotNull())
			{
				
				voPatElectList.getTCIDetails().setTCIWard(form.cmbward().getValue());
				String[] arrErrors = voPatElectList.validate();
	    		if(arrErrors != null)
	    		{
	    			engine.showErrors(arrErrors);
	    			return;
	    		}
	    		
	    		try
	    		{
	    			domain.savePatientElectiveListForWardView(voPatElectList);
	    		}
	    		catch (DomainInterfaceException e)
	    		{
	    			engine.showMessage(e.getMessage());
	    			return;
	    		}
	    		catch (StaleObjectException e)
	    		{
	    			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
	    			return;
	    		}
				
			}
		}
		else
		{
    		PendingElectiveAdmissionAdmitVo voAdmission = (PendingElectiveAdmissionAdmitVo) form.getGlobalContext().Core.getPendingElectiveAdmission().clone();
    		voAdmission.setAllocatedWard(form.cmbward().getValue());
    		
    		String[] arrErrors = voAdmission.validate();
    		if(arrErrors != null)
    		{
    			engine.showErrors(arrErrors);
    			return;
    		}
    		
    		try
    		{
    			domain.savePendingElectiveAdmission(voAdmission);
    		}
    		catch (DomainInterfaceException e)
    		{
    			engine.showMessage(e.getMessage());
    			return;
    		}
    		catch (StaleObjectException e)
    		{
    			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
    			return;
    		}
		}
		
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
