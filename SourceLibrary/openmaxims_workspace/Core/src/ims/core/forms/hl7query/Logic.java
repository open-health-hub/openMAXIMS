//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.71 build 3896.19006)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.hl7query;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import ims.core.forms.hl7query.GenForm.grdMessagesRow;
import ims.core.forms.hl7query.GenForm.grpHL7MessagesEnumeration;
import ims.core.vo.PatientId;
import ims.framework.Control;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.hl7.vo.HL7InboundVo;
import ims.hl7.vo.HL7OutboundVo;
import ims.hl7.vo.lookups.MessageType;
import ims.ocrr.vo.ProviderSystemLiteVo;
import ims.ocrr.vo.ProviderSystemLiteVoCollection;
import ims.vo.interfaces.IHL7Query;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int DATE_COL_INDEX = 1;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		updateControlsState();
	}
	
	private void initialize() 
	{
		form.grpHL7Messages().setValue(grpHL7MessagesEnumeration.rdoAll);
		form.ccMessageType().initialize(MessageType.TYPE_ID);
		form.getLocalContext().setSortOrder(SortOrder.DESCENDING);

		bindCmbProviderSystem();
	}
	
	private void bindCmbProviderSystem()
	{
		ProviderSystemLiteVoCollection providerSystems = domain.listProviderSystems();
		if (providerSystems!=null)
		{
			for (ProviderSystemLiteVo providerSystemLiteVo : providerSystems)
			{
				form.cmbProviderSystem().newRow(providerSystemLiteVo, providerSystemLiteVo.getSystemName());
			}
		}
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] searchErrors = validateSearch();
		
		if(searchErrors != null && searchErrors.length > 0)
		{
			engine.showErrors(searchErrors);
			return;
		}
		
		search();
	}
	
	private String[] validateSearch()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.dtimStartDate().getValue() != null && form.dtimEndDate().getValue() != null && form.dtimStartDate().getValue().isGreaterThan(form.dtimEndDate().getValue()))
		{
			uiErrors.add("End Date can not be set before Start Date.");					
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		
		PatientId patId = new PatientId();
		patId.setType(form.cmbPatId().getValue());
		patId.setValue(form.txtOBPatId().getValue());
		String[] patinetIdErrors = patId.validate(validatePatientId());
		
		String[] results = new String[uiResults.length + (patinetIdErrors != null ? patinetIdErrors.length : 0)];
		
		if(uiResults != null)
		{
			for(int i=0; i< uiResults.length; i++)
			{
				results[i] = uiResults[i];
			}
		}
		if(patinetIdErrors != null)
		{
			int next = (uiResults != null && uiResults.length > 0) ? uiResults.length : 0;
			for(int i=0; i<patinetIdErrors.length; i++)
			{
				results[next + i] = patinetIdErrors[i];
			}
		}
		
		return results;
	}

	private String[] validatePatientId()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.cmbPatId().getValue() != null && (form.txtOBPatId().getValue() == null || form.txtOBPatId().getValue().trim().length() == 0))
		{
			uiErrors.add("Please select Patient ID Value.");					
		}
		
		if(form.txtOBPatId().getValue() != null && form.txtOBPatId().getValue().trim().length() > 0 && form.cmbPatId().getValue() == null)
		{
			uiErrors.add("Please select Patient ID Type.");					
		}
		
		String[] results = new String[uiErrors.size()];
		uiErrors.toArray(results);
		
		return results;
	}

	private void search() 
	{
		form.grdMessages().getRows().clear();
		
		PatientId patId = new PatientId();
		patId.setType(form.cmbPatId().getValue());
		patId.setValue(form.txtOBPatId().getValue());
		
		if(grpHL7MessagesEnumeration.rdoInbound.equals(form.grpHL7Messages().getValue()))
		{
			IHL7Query[] inboundList = domain.listInboundMessages(form.dtimStartDate().getValue(), form.dtimEndDate().getValue(), patId, (MessageType) form.ccMessageType().getValue(), form.cmbProviderSystem().getValue(), form.chkFailed().getValue(), form.chkFailedByProvider().getValue());
			populateGrid(inboundList);
		}
		else if(grpHL7MessagesEnumeration.rdoOutbound.equals(form.grpHL7Messages().getValue()))
		{
			IHL7Query[] outboundList = domain.listOutboundMessages(form.dtimStartDate().getValue(), form.dtimEndDate().getValue(), patId, (MessageType) form.ccMessageType().getValue(), form.cmbProviderSystem().getValue(), form.chkFailed().getValue(), form.chkFailedByProvider().getValue());
			populateGrid(outboundList);
		}
		else if(grpHL7MessagesEnumeration.rdoAll.equals(form.grpHL7Messages().getValue()))
		{
			IHL7Query[] inboundList = domain.listInboundMessages(form.dtimStartDate().getValue(), form.dtimEndDate().getValue(), patId, (MessageType) form.ccMessageType().getValue(), form.cmbProviderSystem().getValue(), form.chkFailed().getValue(), form.chkFailedByProvider().getValue());
			IHL7Query[] outboundList = domain.listOutboundMessages(form.dtimStartDate().getValue(), form.dtimEndDate().getValue(), patId, (MessageType) form.ccMessageType().getValue(), form.cmbProviderSystem().getValue(), form.chkFailed().getValue(), form.chkFailedByProvider().getValue());
			
			IHL7Query[] messageList = concatenateMessageList(inboundList, outboundList);
			populateGrid(sortbyDateTime(messageList));
		}

		updateControlsState();
	}
	
	private IHL7Query[] concatenateMessageList(IHL7Query[] inboundList, IHL7Query[] outboundList)
	{
		int numberOfMessages = 0;
		
		if(inboundList != null)
			numberOfMessages += inboundList.length;
		
		if(outboundList != null)
			numberOfMessages += outboundList.length;
		
		if(numberOfMessages == 0)
			return null;
		
		IHL7Query[] messageList = new IHL7Query[numberOfMessages];
		
		if(inboundList != null)
		{
			for(int i=0; i<inboundList.length; i++)
			{
				messageList[i] = inboundList[i];
			}
		}
		
		if(outboundList != null)
		{
			int next = inboundList != null ? inboundList.length : 0;
			
			for(int i=0; i<outboundList.length; i++)
			{
				messageList[next + i] = outboundList[i];
			}
		}
		
		return messageList;
	}

	private IHL7Query[] sortbyDateTime(IHL7Query[] messageList)
	{
		if(messageList == null || messageList.length == 0)
			return null;
		
		ArrayList<IHL7Query> list = new ArrayList<IHL7Query>();
		
		for (int i = 0; i < messageList.length; i++)
		{
			list.add(messageList[i]);
		}	

		Collections.sort(list, new DateTimeComparator(form.getLocalContext().getSortOrder()));
		
		IHL7Query[] messageListSorted = new IHL7Query[list.size()];
		list.toArray(messageListSorted);
		
		return messageListSorted;
	}

	private void populateGrid(IHL7Query[] hl7MessageList)
	{
		form.grdMessages().getRows().clear();
		
		if(hl7MessageList == null || hl7MessageList.length == 0)
			return;
		
		for(int i=0; i<hl7MessageList.length; i++)
		{
			if(hl7MessageList[i] instanceof IHL7Query)
			{
				addMessageRowToGrid(hl7MessageList[i]);
			}
		}
	}

	private void addMessageRowToGrid(IHL7Query ihl7Query)
	{
		if(ihl7Query == null)
			return;
		
		grdMessagesRow newRow = form.grdMessages().getRows().newRow();
		
		newRow.setColDate(ihl7Query.getIMessageDateTime() != null ? ihl7Query.getIMessageDateTime().toString() : null);
		newRow.setColCategory(ihl7Query.getIMessageCategory() != null ? ihl7Query.getIMessageCategory().getIItemText() : null);
		newRow.setColType(ihl7Query.getIMessageType() != null ? ihl7Query.getIMessageType().getIItemText() : null);
		newRow.setColProviderSystem(ihl7Query.getIProviderSystem() != null ? ihl7Query.getIProviderSystem().getSystemName() : null);
		newRow.setColPatient((ihl7Query.getIPatient() != null && ihl7Query.getIPatient().getNameIsNotNull()) ? ihl7Query.getIPatient().getName().toString() : null);
		
		if(ihl7Query.getIFailureMessage() != null)
		{
			newRow.setColImage(ihl7Query instanceof HL7InboundVo ? form.getImages().HL7.InboundFailed16 : form.getImages().HL7.OutboundFailed16);
			newRow.setTooltipForColImage(ihl7Query instanceof HL7InboundVo ? "Failed Inbound Message" : "Failed Outbound Message");
		}
		else
		{
			newRow.setColImage(ihl7Query instanceof HL7InboundVo ? form.getImages().HL7.InboundSuccessful16 : form.getImages().HL7.OutboundSuccessful16);
			newRow.setTooltipForColImage(ihl7Query instanceof HL7InboundVo ? "Successful Inbound Message" : "Successful Outbound Message");
		}
		newRow.setColOutcome(ihl7Query.getIFailureMessage() != null ?  "Rejected" : null);
		newRow.setValue(ihl7Query);
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearch();
		updateControlsState();
	}
	
	private void clearSearch() 
	{
		form.dtimStartDate().setValue(null);
		form.dtimEndDate().setValue(null);
		form.cmbPatId().setValue(null);
		form.txtOBPatId().setValue(null);
		form.ccMessageType().setValue(null);
		form.cmbProviderSystem().setValue(null);
		form.chkFailed().setValue(null);
		form.chkFailedByProvider().setValue(null);
		
		form.grdMessages().getRows().clear();
		
		clearDetails();
	}

	@Override
	protected void onGrdMessagesSelectionChanged() throws PresentationLogicException 
	{
		getSelectedInstance();
		updateControlsState();
	}

	private void updateControlsState() 
	{
		form.ctnDetails().setCollapsed(!(form.grdMessages().getValue() != null));
		
		IHL7Query message = form.grdMessages().getValue();
		form.getContextMenus().Core.getHL7QueryMenuVIEWMESSAGEItem().setVisible((message != null && message.getIFailureMessage() == null));
		form.getContextMenus().Core.getHL7QueryMenuRESENDItem().setVisible(message != null);
		form.chkFailedByProvider().setEnabled(form.chkFailed().getValue());
	}

	private void getSelectedInstance() 
	{
		populateScreenFromData(form.grdMessages().getValue());	
	}

	private void populateScreenFromData(IHL7Query hl7Message)
	{
		clearDetails();
		
		if(hl7Message == null)
			return;
		
		form.ctnDetails().txtMessage().setValue(hl7Message.getIHL7Message());
		form.ctnDetails().dtimSendReceive().setValue(hl7Message.getIMessageDateTime());
		form.ctnDetails().txtCategory().setValue(hl7Message.getIMessageCategory() != null ? hl7Message.getIMessageCategory().getText() : null);
		form.ctnDetails().txtType().setValue(hl7Message.getIMessageType() != null ? hl7Message.getIMessageType().getText() : null);
		form.ctnDetails().txtProviderSystem().setValue(hl7Message.getIProviderSystem() != null ? hl7Message.getIProviderSystem().getSystemName() : null);
		form.ctnDetails().txtPatient().setValue(hl7Message.getIPatient() != null && hl7Message.getIPatient().getNameIsNotNull() ? hl7Message.getIPatient().getName().toString() : null);
		form.ctnDetails().txtFailedReason().setValue(hl7Message.getIFailureMessage());
	}

	private void clearDetails() 
	{
		form.ctnDetails().txtMessage().setValue(null);
		form.ctnDetails().dtimSendReceive().setValue(null);
		form.ctnDetails().txtCategory().setValue(null);
		form.ctnDetails().txtType().setValue(null);
		form.ctnDetails().txtProviderSystem().setValue(null);
		form.ctnDetails().txtPatient().setValue(null);
		form.ctnDetails().txtFailedReason().setValue(null);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.HL7QueryMenu.VIEWMESSAGE:
				viewHL7Message();
			break;
			
			case GenForm.ContextMenus.CoreNamespace.HL7QueryMenu.RESEND:
				resendMessage();
			break;
		}
		
		updateControlsState();
	}

	private void resendMessage()
	{
		if(form.grdMessages().getValue() instanceof HL7InboundVo || form.grdMessages().getValue() instanceof HL7OutboundVo)
		{
			engine.open(form.getForms().Core.CheckProviderSystems, new Object[] {form.grdMessages().getValue()});
		}
	}

	private void viewHL7Message()
	{
		if(form.grdMessages().getValue() instanceof HL7InboundVo)
		{
			engine.open(form.getForms().Admin.HL7MessageViewDialog, new Object[] {((HL7InboundVo) form.grdMessages().getValue()).getHL7Message()}); 
		}
		else if(form.grdMessages().getValue() instanceof HL7OutboundVo)
		{
			engine.open(form.getForms().Admin.HL7MessageViewDialog, new Object[] {((HL7OutboundVo) form.grdMessages().getValue()).getHL7Message()});
		}
	}

	@Override
	protected void onBtnProviderSystemClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CheckProviderSystems);
	}

	@Override
	protected void onChkFailedValueChanged() throws PresentationLogicException
	{
		if(!form.chkFailed().getValue())
			form.chkFailedByProvider().setValue(false);
		
		updateControlsState();
	}

	@Override
	protected void onGrdMessagesGridHeaderClicked(int column) throws PresentationLogicException
	{
		if(column == DATE_COL_INDEX)
		{
			if (form.getLocalContext().getSortOrder() == null || !form.getLocalContext().getSortOrder().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortOrder(SortOrder.DESCENDING);
			
			populateGrid(sortbyDateTime(form.grdMessages().getValues()));
		}
	}
	
	public class DateTimeComparator implements Comparator
	{
		private int direction = 1;
		
		public DateTimeComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DateTimeComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}
		
		public int compare(Object o1, Object o2)
		{
			DateTime startDate1 = null;
			DateTime startDate2 = null;
			
			if(o1 instanceof IHL7Query)
			{
				IHL7Query message1 = ((IHL7Query) o1);
				startDate1 = message1.getIMessageDateTime() != null ? message1.getIMessageDateTime() : null;
			}
			
			if(o2 instanceof IHL7Query)
			{
				IHL7Query message2 = ((IHL7Query) o2);
				startDate2 = message2.getIMessageDateTime() != null ? message2.getIMessageDateTime() : null;
			}
			
			if(startDate1 != null)
				return startDate1.compareTo(startDate2)*direction;
			
			if(startDate2 != null)
				return startDate2.compareTo(startDate1)*direction;
						
			return 0;
		}
	}
}
