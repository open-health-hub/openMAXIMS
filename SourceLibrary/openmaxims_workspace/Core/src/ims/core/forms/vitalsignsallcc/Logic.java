//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.core.forms.vitalsignsallcc;

import ims.clinical.vo.SECSConfigurationVo;
import ims.clinical.vo.SECSConfigurationVoCollection;
import ims.clinical.vo.SECSLookupConfigVo;
import ims.clinical.vo.SECSLookupScoreVo;
import ims.clinical.vo.SECSRangeScoreVo;
import ims.clinical.vo.SECSVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientEWSVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.VSBloodPressure;
import ims.core.vo.VSBloodSugar;
import ims.core.vo.VSGlasgowComaScale;
import ims.core.vo.VSLungFunctionTestVo;
import ims.core.vo.VSMetrics;
import ims.core.vo.VSOxygenSaturation;
import ims.core.vo.VSPainLadderVo;
import ims.core.vo.VSPulse;
import ims.core.vo.VSPupils;
import ims.core.vo.VSRespirations;
import ims.core.vo.VSTemperature;
import ims.core.vo.VSVisualAcuity;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.core.vo.lookups.CBGType;
import ims.core.vo.lookups.ConsciousLevel;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientCausingConcern;
import ims.core.vo.lookups.SECSTypes;
import ims.core.vo.lookups.UrineOutput;
import ims.core.vo.lookups.VSSnellen;
import ims.core.vo.lookups.VSSnellenCollection;
import ims.core.vo.lookups.VSType;
import ims.core.vo.lookups.VSTypeCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.enums.EdAssessment_CustomControlsEvents;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.nursing.vo.lookups.PainSeverity;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private void hideEWSControls() 
	{
		form.lblConscious().setVisible(false);
		form.lblPatCausConc1().setVisible(false);
		form.lblPatCausConc2().setVisible(false);
		form.lblUrineOut().setVisible(false);
		form.cmbConscious().setVisible(false);
		form.cmbPatientConcern().setVisible(false);
		form.cmbUrine().setVisible(false);
		form.lblEWSScore().setVisible(false);
	}

	/**
	 * Patient Causing Concern,Conscious Level and Urine Output
	 */
	private void loadEWSCombos()
	{
		SECSVo voSecs = domain.getSecs();

		if (voSecs == null || voSecs.getConfiguration() == null)
			return;

		form.getLocalContext().setSecsRecord(voSecs);

		SECSConfigurationVoCollection voCollConfig = voSecs.getConfiguration();

		for (int i = 0; i < voCollConfig.size(); i++)
		{
			SECSConfigurationVo voConfig = voCollConfig.get(i);
			if (voConfig.getTypeIsNotNull())
			{
				if (voConfig.getType().equals(SECSTypes.PATIENT_CONCERN))
				{
					SECSLookupConfigVo voLookupConfig = voConfig.getLookupConfig();
					if (voLookupConfig != null && voLookupConfig.getLookupScores() != null)
					{
						for (int p = 0; p < voLookupConfig.getLookupScores().size(); p++)
							form.cmbPatientConcern().newRow(new PatientCausingConcern(voLookupConfig.getLookupScores().get(p).getLookupInstance().getId(), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText(), voLookupConfig.getLookupScores().get(p).getLookupInstance().isActive(), null, null, null), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText());
					}
				}
				else if (voConfig.getType().equals(SECSTypes.CONSCIOUS_LEVEL))
				{
					SECSLookupConfigVo voLookupConfig = voConfig.getLookupConfig();
					if (voLookupConfig != null && voLookupConfig.getLookupScores() != null)
					{
						for (int p = 0; p < voLookupConfig.getLookupScores().size(); p++)
							form.cmbConscious().newRow(new ConsciousLevel(voLookupConfig.getLookupScores().get(p).getLookupInstance().getId(), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText(), voLookupConfig.getLookupScores().get(p).getLookupInstance().isActive(), null, null, null), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText());
					}
				}
				else if (voConfig.getType().equals(SECSTypes.URINE_OUTPUT))
				{
					SECSLookupConfigVo voLookupConfig = voConfig.getLookupConfig();
					if (voLookupConfig != null && voLookupConfig.getLookupScores() != null)
					{
						for (int p = 0; p < voLookupConfig.getLookupScores().size(); p++)
							form.cmbUrine().newRow(new UrineOutput(voLookupConfig.getLookupScores().get(p).getLookupInstance().getId(), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText(), voLookupConfig.getLookupScores().get(p).getLookupInstance().isActive(), null, null, null), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText());
					}
				}
			}
		}
	}

	private void enableBloodSugarControls(boolean bEnable)
	{
		form.lyrVSigns().tabSection2().cmbTimePeriod().setEnabled(bEnable);
		form.lyrVSigns().tabSection2().decValue().setEnabled(bEnable);
		form.lyrVSigns().tabSection2().decPostValue().setEnabled(bEnable);
		form.lyrVSigns().tabSection2().intInterval().setEnabled(bEnable);
	}

	private void selectVitalSign() 
	{
		if (form.recbrAllRecords().getValue() != null)
		{	
			form.getGlobalContext().Core.setVitalSign(form.recbrAllRecords().getValue());
			displayRecord();
		}
		else							
			clearScreen();				//wdev-13022
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		clearScreen();
		
		//WDEV-15996  // Don't allow to create new Vital Signs when "Logged in User is not a Hcp
		if (isLoggedInUser() == false)
		{
			engine.showMessage("Logged in User is not a Hcp");
			return;
		}
		
		
		form.setMode(FormMode.EDIT);
		form.recbrAllRecords().setValue(null);

		form.customControlAuthoringInfo().initializeComponent();
		form.setcustomControlAuthoringInfoEnabled(true);
		
		Object mos = domain.getMosUser();
		if(mos != null){
			form.cmbRecordingHCP().newRow((MemberOfStaffLiteVo)mos, mos.toString());
			form.cmbRecordingHCP().setValue((MemberOfStaffLiteVo)mos);
		}
		form.dtimRecordingDateTime().setValue(new DateTime());

		form.dteTaken().setValue(new Date());
		form.timTaken().setValue(new Time());

		form.dteTaken().setEnabled(true);
		form.timTaken().setEnabled(true);

		form.lyrVSigns().tabSection1().GroupBP().setValue(GenForm.lyrVSignsLayer.tabSection1Container.GroupBPEnumeration.rdoBPSitting);
		onRadioButtonGroupBPValueChanged();

		showBloodGlucoseControls(false, false);
	}

	private void showBloodGlucoseControls(boolean bShow, boolean bCBGM)
	{
		form.lyrVSigns().tabSection2().lblValue().setVisible(bShow);
		form.lyrVSigns().tabSection2().decValue().setVisible(bShow);
		form.lyrVSigns().tabSection2().lblValueUnits().setVisible(bShow);

		if (bCBGM)
		{
			form.lyrVSigns().tabSection2().lblValue().setValue("Pre Value: ");

			form.lyrVSigns().tabSection2().lblValue().setVisible(bShow);
			form.lyrVSigns().tabSection2().lblPostValue().setVisible(bShow);
			form.lyrVSigns().tabSection2().lblPostValueUnits().setVisible(bShow);
			form.lyrVSigns().tabSection2().lblTimeInterval().setVisible(bShow);
			form.lyrVSigns().tabSection2().lblTimeIntervalUnits().setVisible(bShow);
			form.lyrVSigns().tabSection2().lblTimePeriod().setVisible(bShow);

			form.lyrVSigns().tabSection2().cmbTimePeriod().setVisible(bShow);
			form.lyrVSigns().tabSection2().decPostValue().setVisible(bShow);
			form.lyrVSigns().tabSection2().intInterval().setVisible(bShow);
		}
		else
		{
			form.lyrVSigns().tabSection2().lblValue().setValue("Value: ");

			form.lyrVSigns().tabSection2().lblPostValue().setVisible(false);
			form.lyrVSigns().tabSection2().lblPostValueUnits().setVisible(false);
			form.lyrVSigns().tabSection2().lblTimeInterval().setVisible(false);
			form.lyrVSigns().tabSection2().lblTimeIntervalUnits().setVisible(false);
			form.lyrVSigns().tabSection2().lblTimePeriod().setVisible(false);

			form.lyrVSigns().tabSection2().cmbTimePeriod().setVisible(false);
			form.lyrVSigns().tabSection2().decPostValue().setVisible(false);
			form.lyrVSigns().tabSection2().intInterval().setVisible(false);
		}
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		//WDEV-17337
		form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.SAVE);
		form.fireCustomControlValueChanged();
		
		if (form.dteTaken().getValue() != null)
		{
			if (form.dteTaken().getValue().isGreaterThan(new Date()))
			{
				engine.showMessage("'Date/Time taken' can not be in the future.");
				return;
			}
		}
		ArrayList<String> screenErrors = new ArrayList<String>();

		VitalSignsVo voVitalSign = new VitalSignsVo();
		VSTypeCollection recordedSigns = new VSTypeCollection();

		populateEwsDataFromControls(voVitalSign);
		
		if ((form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().getValue() != null) || (form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().getValue() != null) || (form.lyrVSigns().tabSection1().intBPStandingDiastolic().getValue() != null) || (form.lyrVSigns().tabSection1().intBPStandingSystolic().getValue() != null))
		{
			VSBloodPressure voBP = new VSBloodPressure();
			if ((form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().getValue() != null && form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().getValue() == null) || (form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().getValue() == null && form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().getValue() != null))
			{
				if (form.lyrVSigns().tabSection1().GroupBP().getValue().equals(GenForm.lyrVSignsLayer.tabSection1Container.GroupBPEnumeration.rdoBPSitting))
					screenErrors.add("Please enter both Blood Pressure values for Sitting.");
				else
					screenErrors.add("Please enter both Blood Pressure values for Lying.");
			}
			else
			{

				if (form.lyrVSigns().tabSection1().GroupBP().getValue().equals(GenForm.lyrVSignsLayer.tabSection1Container.GroupBPEnumeration.rdoBPSitting))
				{
					voBP.setBPSittingDias(new Float(form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().getValue().intValue()));
					voBP.setBPSittingSys(new Float(form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().getValue().intValue()));
				}
				else
				{
					if (form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().getValue() != null)
						voBP.setBPLyingDias(new Float(form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().getValue().intValue()));
					if (form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().getValue() != null)
						voBP.setBPLyingSys(new Float(form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().getValue().intValue()));
				}
			}

			if ((form.lyrVSigns().tabSection1().intBPStandingDiastolic().getValue() != null && form.lyrVSigns().tabSection1().intBPStandingSystolic().getValue() == null) || (form.lyrVSigns().tabSection1().intBPStandingDiastolic().getValue() == null && form.lyrVSigns().tabSection1().intBPStandingSystolic().getValue() != null))
			{
				screenErrors.add("Please enter both Blood Pressure values for Standing.");
			}
			else
			{
				if (form.lyrVSigns().tabSection1().intBPStandingDiastolic().getValue() != null)
					voBP.setBPStandingDias(new Float(form.lyrVSigns().tabSection1().intBPStandingDiastolic().getValue().intValue()));
				if (form.lyrVSigns().tabSection1().intBPStandingSystolic().getValue() != null)
					voBP.setBPStandingSys(new Float(form.lyrVSigns().tabSection1().intBPStandingSystolic().getValue().intValue()));
			}

			//wdev-12900
			voBP.setComment(form.lyrVSigns().tabSection1().txtComment().getValue());
			//------------
			voVitalSign.setBloodPressure(voBP);
			recordedSigns.add(VSType.BP);
		}
		else if ((form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().getValue() == null) && (form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().getValue() == null) && (form.lyrVSigns().tabSection1().intBPStandingDiastolic().getValue() == null) && (form.lyrVSigns().tabSection1().intBPStandingSystolic().getValue() == null))
			voVitalSign.setBloodPressure(null);

		if ((form.lyrVSigns().tabSection1().intPulseRadial().getValue() != null) || (form.lyrVSigns().tabSection1().intPulseApex().getValue() != null))
		{
			VSPulse voPulse = new VSPulse();
			if (form.lyrVSigns().tabSection1().intPulseRadial().getValue() != null)
			{
				voPulse.setPulseRateRadial(form.lyrVSigns().tabSection1().intPulseRadial().getValue());
			}
			if (form.lyrVSigns().tabSection1().intPulseApex().getValue() != null)
			{
				voPulse.setPulseRateApex(form.lyrVSigns().tabSection1().intPulseApex().getValue());
			}
			voPulse.setIsIrregular(new Boolean(form.lyrVSigns().tabSection1().chkIrregular().getValue()));
			voVitalSign.setPulse(voPulse);
			recordedSigns.add(VSType.PULSE);
		}
		else if ((form.lyrVSigns().tabSection1().intPulseRadial().getValue() == null) && (form.lyrVSigns().tabSection1().intPulseApex().getValue() == null))
			voVitalSign.setPulse(null);

		if ((form.lyrVSigns().tabSection1().intPeakFlowPre().getValue() != null) || (form.lyrVSigns().tabSection1().intPeakFlowPost().getValue() != null) || (form.lyrVSigns().tabSection1().intTimeInterval().getValue() != null))
		{
			// VSPeakFlow vopeakFlow = new VSPeakFlow();
			VSLungFunctionTestVo voLungFunction = new VSLungFunctionTestVo();

			if (form.lyrVSigns().tabSection1().intPeakFlowPre().getValue() != null)
			{
				voLungFunction.setPeakFlowPre(form.lyrVSigns().tabSection1().intPeakFlowPre().getValue());
			}

			if (form.lyrVSigns().tabSection1().intPeakFlowPost().getValue() != null)
			{
				voLungFunction.setPeakFlowPost(form.lyrVSigns().tabSection1().intPeakFlowPost().getValue());
			}

			if (form.lyrVSigns().tabSection1().intTimeInterval().getValue() != null)
			{
				voLungFunction.setTimeInterval(form.lyrVSigns().tabSection1().intTimeInterval().getValue());
			}

			voVitalSign.setLungFunctionTest(voLungFunction);
			recordedSigns.add(VSType.PEAKFLOW);
		}
		else if ((form.lyrVSigns().tabSection1().intPeakFlowPre().getValue() == null) && (form.lyrVSigns().tabSection1().intPeakFlowPost().getValue() == null) && (form.lyrVSigns().tabSection1().intTimeInterval().getValue() == null))
			voVitalSign.setLungFunctionTest(null);

		if (form.getLocalContext().getSeverityIsNotNull())
		{
			VSPainLadderVo voPain = new VSPainLadderVo();
			PainSeverity severity = form.getLocalContext().getSeverity();
			voPain.setPain(severity);
			voVitalSign.setPain(voPain);
			recordedSigns.add(VSType.PAIN);
		}
		else if (form.getLocalContext().getSeverity() == null)
		{
			voVitalSign.setPain(null);
		}

		if (form.lyrVSigns().tabSection1().decTemp().getValue() != null)
		{
			VSTemperature voTemperature = new VSTemperature();
			voTemperature.setTemperature(form.lyrVSigns().tabSection1().decTemp().getValue());
			voVitalSign.setTemperature(voTemperature);
			recordedSigns.add(VSType.TEMP);
		}
		else if (form.lyrVSigns().tabSection1().decTemp().getValue() == null)
			voVitalSign.setTemperature(null);

		if (form.lyrVSigns().tabSection1().intRespirations().getValue() != null)
		{
			VSRespirations voResp = new VSRespirations();
			voResp.setRespRate(form.lyrVSigns().tabSection1().intRespirations().getValue());
			voVitalSign.setRespiratory(voResp);
			recordedSigns.add(VSType.RESPIRATION);
		}
		else if (form.lyrVSigns().tabSection1().intRespirations().getValue() == null)
			voVitalSign.setRespiratory(null);

		if (form.lyrVSigns().tabSection1().intO2Sat().getValue() != null || form.lyrVSigns().tabSection1().intFractionRate().getValue() != null)
		{
			if (form.lyrVSigns().tabSection1().chkonFiO2().getValue())
			{
				if (form.lyrVSigns().tabSection1().intFractionRate().getValue() == null)
					screenErrors.add("Please enter value for Oxygen Saturation % rate.");
			}

			VSOxygenSaturation voOxygen = new VSOxygenSaturation();
			voOxygen.setOxygenSaturationLevel(form.lyrVSigns().tabSection1().intO2Sat().getValue());
			voOxygen.setFractionRate(form.lyrVSigns().tabSection1().intFractionRate().getValue());
			voOxygen.setIsOnFiO2(form.lyrVSigns().tabSection1().chkonFiO2().getValue());
			voVitalSign.setOxygenSaturation(voOxygen);
			recordedSigns.add(VSType.OXYGEN);
		}
		else
			voVitalSign.setOxygenSaturation(null);

		if (!form.lyrVSigns().tabSection2().BloodGlucoseGroup1().getValue().equals(GenForm.lyrVSignsLayer.tabSection2Container.BloodGlucoseGroup1Enumeration.None))
		{
			VSBloodSugar voBloodSugar = new VSBloodSugar();
			if (form.lyrVSigns().tabSection2().BloodGlucoseGroup1().getValue().equals(GenForm.lyrVSignsLayer.tabSection2Container.BloodGlucoseGroup1Enumeration.rdoRandom))
				voBloodSugar.setType(CBGType.RANDOM);
			else
				voBloodSugar.setType(CBGType.CBGM);
			voBloodSugar.setBloodSugarValue(form.lyrVSigns().tabSection2().decValue().getValue());
			voBloodSugar.setTimePeriod(form.lyrVSigns().tabSection2().cmbTimePeriod().getValue());
			voBloodSugar.setPostBloodSugarValue(form.lyrVSigns().tabSection2().decPostValue().getValue());
			voBloodSugar.setTimeInterval(form.lyrVSigns().tabSection2().intInterval().getValue());
			voVitalSign.setBloodSugar(voBloodSugar);
			recordedSigns.add(VSType.BLOODSUGAR);
		}
		else
			voVitalSign.setBloodSugar(null);

		if (form.lyrVSigns().tabSection2().cmbLeftSizePupil().getValue() != null || form.lyrVSigns().tabSection2().cmbRightSizePupil().getValue() != null || form.lyrVSigns().tabSection2().cmbLeftReactionPupil().getValue() != null || form.lyrVSigns().tabSection2().cmbRightReactionPupil().getValue() != null)
		{
			if (form.lyrVSigns().tabSection2().cmbLeftSizePupil().getValue() == null || form.lyrVSigns().tabSection2().cmbRightSizePupil().getValue() == null || form.lyrVSigns().tabSection2().cmbLeftReactionPupil().getValue() == null || form.lyrVSigns().tabSection2().cmbRightReactionPupil().getValue() == null)
			{
				screenErrors.add("Please enter values for pupil size and reaction for both eyes.");
			}
			else
			{
				VSPupils voPupil = new VSPupils();
				voPupil.setPupilLeftReaction(form.lyrVSigns().tabSection2().cmbLeftReactionPupil().getValue());
				voPupil.setPupilRightReaction(form.lyrVSigns().tabSection2().cmbRightReactionPupil().getValue());
				voPupil.setPupilLeftSize(form.lyrVSigns().tabSection2().cmbLeftSizePupil().getValue());
				voPupil.setPupilRightSize(form.lyrVSigns().tabSection2().cmbRightSizePupil().getValue());
				voVitalSign.setPupils(voPupil);
				recordedSigns.add(VSType.PUPILS);
			}
		}
		else if ((form.lyrVSigns().tabSection2().cmbLeftSizePupil().getValue() == null) && (form.lyrVSigns().tabSection2().cmbRightSizePupil().getValue() == null) && (form.lyrVSigns().tabSection2().cmbLeftReactionPupil().getValue() == null) && (form.lyrVSigns().tabSection2().cmbRightReactionPupil().getValue() == null))
			voVitalSign.setPupils(null);

		if (form.lyrVSigns().tabSection2().cmbVisualLeft().getValue() != null || form.lyrVSigns().tabSection2().cmbVisualRight().getValue() != null)
		{
			VSVisualAcuity voVisual = new VSVisualAcuity();

			if (form.lyrVSigns().tabSection2().cmbVisualLeft().getValue() != null)
				voVisual.setLeftValue(String.valueOf(form.lyrVSigns().tabSection2().cmbVisualLeft().getValue().getID()));

			if (form.lyrVSigns().tabSection2().cmbVisualRight().getValue() != null)
				voVisual.setRightValue(String.valueOf(form.lyrVSigns().tabSection2().cmbVisualRight().getValue().getID()));

			voVitalSign.setVisualAcuity(voVisual);
			recordedSigns.add(VSType.VISUALACUITY);
		}
		else if (form.lyrVSigns().tabSection2().cmbVisualLeft().getValue() == null && form.lyrVSigns().tabSection2().cmbVisualRight().getValue() == null)
			voVitalSign.setVisualAcuity(null);

		if (form.lyrVSigns().tabSection2().intGCS().getValue() != null || form.lyrVSigns().tabSection2().cmbVResponse().getValue() != null || form.lyrVSigns().tabSection2().cmbMResponse().getValue() != null || form.lyrVSigns().tabSection2().cmbEyeOpening().getValue() != null)
		{
			if (form.lyrVSigns().tabSection2().cmbVResponse().getValue() == null || form.lyrVSigns().tabSection2().cmbMResponse().getValue() == null || form.lyrVSigns().tabSection2().cmbEyeOpening().getValue() == null)
			{
				screenErrors.add("Please enter all values for Glasgow Coma Scale.");
			}
			else
			{
				VSGlasgowComaScale voGcs = new VSGlasgowComaScale();
				voGcs.setMotorResponse(form.lyrVSigns().tabSection2().cmbMResponse().getValue());
				voGcs.setVerbalResponse(form.lyrVSigns().tabSection2().cmbVResponse().getValue());
				voGcs.setEyeOpening(form.lyrVSigns().tabSection2().cmbEyeOpening().getValue());
				voGcs.setTotalGlasgowComaScale(form.lyrVSigns().tabSection2().intGCS().getValue());

				voVitalSign.setGlasgowComaScale(voGcs);
			}
			
			recordedSigns.add(VSType.GLASGOWCOMASCALE); //WDEV-17263
		}
		else if ((form.lyrVSigns().tabSection2().intGCS().getValue() == null) && (form.lyrVSigns().tabSection2().cmbVResponse().getValue() == null) && (form.lyrVSigns().tabSection2().cmbMResponse().getValue() == null) && (form.lyrVSigns().tabSection2().cmbEyeOpening().getValue() == null))
			voVitalSign.setGlasgowComaScale(null);

		if((form.lyrVSigns().tabSection2().decHeight().getValue() == null) && (form.lyrVSigns().tabSection2().decWeight().getValue() == null))
		{
			voVitalSign.setMetrics(null);
		}
		else
		{
			if ((form.lyrVSigns().tabSection2().decHeight().getValue() != null && form.lyrVSigns().tabSection2().decHeight().getValue() < 1) || (form.lyrVSigns().tabSection2().decWeight().getValue() != null && form.lyrVSigns().tabSection2().decWeight().getValue() < 1))
			{
				screenErrors.add("Height and Weight values can not be less than 1.");
			}
			else
			{
				VSMetrics voMetrics = new VSMetrics();
				voMetrics.setHeightValue(form.lyrVSigns().tabSection2().decHeight().getValue());
				voMetrics.setWeightValue(form.lyrVSigns().tabSection2().decWeight().getValue());
				voMetrics.setBMI(bodyMassIndex(form.lyrVSigns().tabSection2().decHeight().getValue(), form.lyrVSigns().tabSection2().decWeight().getValue()));
				voMetrics.setSurfaceArea(bodySurfaceArea(form.lyrVSigns().tabSection2().decHeight().getValue(), form.lyrVSigns().tabSection2().decWeight().getValue()));
				voMetrics.setHeightEstimatedMeasured(Boolean.TRUE); // default
				// to
				// measured
				voMetrics.setWeightEstimatedMeasured(Boolean.TRUE); // default
				// to
				// measured
				voMetrics.setPatient(form.getGlobalContext().Core.getPatientShort());

				voMetrics.setAuthoringInformation(getAuthoringInfo());//wdev-13657

				voVitalSign.setMetrics(voMetrics);
				recordedSigns.add(VSType.METRICS);
			}
		}

		if (recordedSigns.size() == 0)
			screenErrors.add("No Vital Signs values entered");
		else
			voVitalSign.setRecordedSigns(recordedSigns);

		voVitalSign.setAuthoringInformation(getAuthoringInfo());
		//WDEV-12901 set Recording Information
		if(voVitalSign.getRecordingInformation()==null){
			RecordingUserInformationVo voRecordingUserInformation = new RecordingUserInformationVo();
			voRecordingUserInformation.setRecordingUser(form.cmbRecordingHCP().getValue());
			voRecordingUserInformation.setRecordingDateTime(new DateTime());
			voVitalSign.setRecordingInformation(voRecordingUserInformation);
		}

		Date date1 = form.dteTaken().getValue();
		Time time1 = form.timTaken().getValue();

		DateTime dt1 = null;
		if (date1 != null && time1 != null)
			dt1 = new DateTime(date1, time1);

		voVitalSign.setVitalsTakenDateTime(dt1);

		voVitalSign.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voVitalSign.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		String[] arrErrors = voVitalSign.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(screenErrors, arrErrors);
		if (arrScreenAndVoErrors.length == 0)
		{
			try
			{
				domain.saveVitalSign(voVitalSign);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				refresh();
				return;
			}
		}
		else
		{
			engine.showErrors("Error", arrScreenAndVoErrors);
			return;
		}

		form.setMode(FormMode.VIEW);
		enableBloodSugarControls(false);

		clearScreen();
		form.btnNew().setEnabled(true);
		listVitalSigns();
		//wdev-12905
		enableDisableLinkControls(true);
		updateControlState();
		//----------
		

		if(ConfigFlag.UI.USE_EARLY_WARNING_SYSTEM.getValue())
		{
			if (requiresEscalation(voVitalSign))
			{
				if (form.getLocalContext().getSecsRecordIsNotNull() && form.getLocalContext().getSecsRecord().getEWSProtocolIsNotNull())
				{
					form.getLocalContext().setEWSMessageId(engine.showMessage("EWS score is : " + form.getGlobalContext().Core.getVitalSignsEscalationScore(), "Score", MessageButtons.OK, MessageIcon.INFORMATION));
				}
				else
					engine.open(form.getForms().Nursing.SECS);
			}
		}

	}

	private void populateEwsDataFromControls(VitalSignsVo voVitalSign) 
	{
		if(!ConfigFlag.UI.USE_EARLY_WARNING_SYSTEM.getValue())
			return;
		
		// constructing lookup instances from LookupInstVo
		PatientCausingConcern pccLkup = null;
		if (form.cmbPatientConcern().getValue() != null)
			pccLkup = new PatientCausingConcern(form.cmbPatientConcern().getValue().getId(), form.cmbPatientConcern().getValue().getText(), form.cmbPatientConcern().getValue().isActive(), null, null, null);

		voVitalSign.setPatientCausingConcern(pccLkup);

		ConsciousLevel clLkup = null;
		if (form.cmbConscious().getValue() != null)
			clLkup = new ConsciousLevel(form.cmbConscious().getValue().getId(), form.cmbConscious().getValue().getText(), form.cmbConscious().getValue().isActive(), null, null, null);

		voVitalSign.setPatientConscious(clLkup);

		UrineOutput uLkup = null;
		if (form.cmbUrine().getValue() != null)
			uLkup = new UrineOutput(form.cmbUrine().getValue().getId(), form.cmbUrine().getValue().getText(), form.cmbUrine().getValue().isActive(), null, null, null);

		voVitalSign.setUrine2mlkgkhr(uLkup);
	}

	private AuthoringInformationVo getAuthoringInfo()
	{
		AuthoringInformationVo voAuthInfo = form.customControlAuthoringInfo().getValue();
		if(voAuthInfo == null)
			return null;
		
		if(voAuthInfo.countFieldsWithValue() == 0)
			return null;
		
		return voAuthInfo;
	}

	private boolean requiresEscalation(VitalSignsVo voVitalSign)
	{
		SECSVo voSecs = form.getLocalContext().getSecsRecord();
		//Boolean bOXYTriggered = false;	WDEV-12769
		
		form.getGlobalContext().Core.setVitalSignsEscalationScore("0");

		if (voSecs == null || voSecs.getConfiguration() == null)
			return false;

		SECSConfigurationVoCollection voCollConfig = voSecs.getConfiguration();
		StringBuffer originsOfScore = new StringBuffer();

		if (voVitalSign.getTemperatureIsNotNull() && voVitalSign.getTemperature().getTemperatureIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(-1, SECSTypes.TEMPERATURE, voCollConfig, -1, voVitalSign.getTemperature().getTemperature().floatValue());
			if (!scoreText.equals(""))
			{
				originsOfScore.append("Temperature  ");
				originsOfScore.append(scoreText);
			}
		}
		
		if (voVitalSign.getBloodPressureIsNotNull() && voVitalSign.getBloodPressure().getBPSittingSysIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getBloodPressure().getBPSittingSys().intValue(), SECSTypes.SYSTOLICBP, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Systolic Blood Pressure  ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getBloodPressureIsNotNull() && voVitalSign.getBloodPressure().getBPLyingSysIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getBloodPressure().getBPLyingSys().intValue(), SECSTypes.SYSTOLICBP, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Systolic Blood Pressure  ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getRespiratoryIsNotNull() && voVitalSign.getRespiratory().getRespRateIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getRespiratory().getRespRate().intValue(), SECSTypes.RESPIRATORYRATE, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Respiratory Rate        ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getPulseIsNotNull() && voVitalSign.getPulse().getPulseRateRadialIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getPulse().getPulseRateRadial().intValue(), SECSTypes.PULSE, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Heart Rate                         ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getOxygenSaturationIsNotNull() && voVitalSign.getOxygenSaturation().getOxygenSaturationLevelIsNotNull())//	WDEV-12769
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getOxygenSaturation().getOxygenSaturationLevel(), SECSTypes.OXYGENSATS, voCollConfig, -1, -1);//	WDEV-12769
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Oxygen Saturation             ");//WDEV-12769
				originsOfScore.append(scoreText);
				
				//bOXYTriggered = true;	WDEV-12769
			}
		}

		if (voVitalSign.getPatientCausingConcernIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getPatientCausingConcern().getID(), SECSTypes.PATIENT_CONCERN, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Patient Causing Concern            ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getPatientConsciousIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getPatientConscious().getID(), SECSTypes.CONSCIOUS_LEVEL, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Conscious Level            ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getUrine2mlkgkhrIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getUrine2mlkgkhr().getID(), SECSTypes.URINE_OUTPUT, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Urine output            ");
				originsOfScore.append(scoreText);
			}
		}

		form.getGlobalContext().Core.setVitalSignsEscalationText(originsOfScore.toString());
		if (form.getGlobalContext().Core.getVitalSignsEscalationScoreIsNotNull())
		{
			if (form.getLocalContext().getSecsRecordIsNotNull() && form.getLocalContext().getSecsRecord().getEWSTriggerScoreIsNotNull())
			{
				if (Integer.valueOf(form.getGlobalContext().Core.getVitalSignsEscalationScore()) >= form.getLocalContext().getSecsRecord().getEWSTriggerScore())
				{
					return true;
				}
			}
		}

		/*	WDEV-12769if (bOXYTriggered)
			return true;
			*/
		
		return false;
	}

	/**
	 * takes a value and checks the type against the configuration and
	 * increments score if the value is outside configured values
	 * 
	 * @param value
	 *            (doubles also as id of lookup selected for the lookup config
	 *            items)
	 * @param type
	 * @param voCollConfig
	 * @param fractionRate
	 * @return scoreText
	 */
	private String getEscalationScoreText(int value, SECSTypes type, SECSConfigurationVoCollection voCollConfig, int fractionRate, float tempValue)
	{
		StringBuffer scoreText = new StringBuffer();

		int iScore = 0;

		String score = form.getGlobalContext().Core.getVitalSignsEscalationScore();
		
		if (score != null)
			iScore = Integer.valueOf(score);

		for (int i = 0; i < voCollConfig.size(); i++)
		{
			if (voCollConfig.get(i).getType().equals(type))
			{
				if (isRange(type))
				{
					if (voCollConfig.get(i).getRangeConfigIsNotNull() && voCollConfig.get(i).getRangeConfig().getRangeScoresIsNotNull())
					{
						for (int p = 0; p < voCollConfig.get(i).getRangeConfig().getRangeScores().size(); p++)
						{
							SECSRangeScoreVo voRangeScore = voCollConfig.get(i).getRangeConfig().getRangeScores().get(p);
						
							if(type.equals(SECSTypes.TEMPERATURE))
							{
								//temperature
								if (voRangeScore.getGreaterThanDecValueIsNotNull())
								{
									if(voRangeScore.getLessThanDecValueIsNotNull())
									{
										if (tempValue > voRangeScore.getGreaterThanDecValue().floatValue() && tempValue < voRangeScore.getLessThanDecValue().floatValue())
										{
											iScore += voRangeScore.getScore();
											scoreText.append(" > " + voRangeScore.getGreaterThanDecValue() + " < " + voRangeScore.getLessThanDecValue());
										}
									}
									else if (tempValue > voRangeScore.getGreaterThanDecValue().floatValue())
									{
										iScore += voRangeScore.getScore();
										scoreText.append(" > " + voRangeScore.getGreaterThanDecValue());
									}
								}
								else if (voRangeScore.getLessThanDecValueIsNotNull())
								{
									if(voRangeScore.getGreaterThanDecValueIsNotNull())
									{
										if (tempValue < voRangeScore.getLessThanDecValue().floatValue() && tempValue > voRangeScore.getGreaterThanDecValue().floatValue())
										{
											iScore += voRangeScore.getScore();
											scoreText.append(" < " + voRangeScore.getLessThanDecValue() + " > " + voRangeScore.getGreaterThanDecValue());
										}
									}
									else if (tempValue < voRangeScore.getLessThanDecValue().floatValue())
									{
										iScore += voRangeScore.getScore();
										scoreText.append(" < " + voRangeScore.getLessThanDecValue());
									}
								}
							}
							else if (voRangeScore.getGreaterThanIntValueIsNotNull())
							{
								if(voRangeScore.getLessThanIntValueIsNotNull())
								{
									if (value > voRangeScore.getGreaterThanIntValue().intValue() && value < voRangeScore.getLessThanIntValue().intValue())
									{
										iScore += voRangeScore.getScore();
										scoreText.append(" > " + voRangeScore.getGreaterThanIntValue() + " < " + voRangeScore.getLessThanIntValue());
									}
								}
								else if (value > voRangeScore.getGreaterThanIntValue().intValue())
								{
									iScore += voRangeScore.getScore();
									scoreText.append(" > " + voRangeScore.getGreaterThanIntValue());
								}
							}
							
							else if (voRangeScore.getLessThanIntValueIsNotNull())
							{
								if(voRangeScore.getGreaterThanIntValueIsNotNull())
								{
									if (value < voRangeScore.getLessThanIntValue().intValue() && value > voRangeScore.getGreaterThanIntValue().intValue())
									{
										iScore += voRangeScore.getScore();
										scoreText.append(" < " + voRangeScore.getLessThanIntValue() + " > " + voRangeScore.getGreaterThanIntValue());
									}
								}
								else if (value < voRangeScore.getLessThanIntValue().intValue())
								{
									iScore += voRangeScore.getScore();
									scoreText.append(" < " + voRangeScore.getLessThanIntValue());
								}
							}
						}
					}
				}
				else if (isScore(type))
				{
					if (voCollConfig.get(i).getLookupConfigIsNotNull() && voCollConfig.get(i).getLookupConfig().getLookupScoresIsNotNull())
					{
						for (int p = 0; p < voCollConfig.get(i).getLookupConfig().getLookupScores().size(); p++)
						{
							SECSLookupScoreVo voLookupScore = voCollConfig.get(i).getLookupConfig().getLookupScores().get(p);
							if (value == voLookupScore.getLookupInstance().getID())
							{
								iScore += voLookupScore.getScore();
								scoreText.append(" " + voLookupScore.toString());
							}
						}
					}
				}
				/*	WDEV-12769else
				// Oxygen
				{
					if (voCollConfig.get(i).getOxygenSatsConfigIsNotNull())
					{
						SECSOxygenSatsVo voOxygenConfig = voCollConfig.get(i).getOxygenSatsConfig();
						
						if(fractionRate != -1)
						{
							if(voOxygenConfig.getStartNormalRangeOnOxygenIsNotNull() && voOxygenConfig.getFractionRateIsNotNull())
							{
								if (value < voOxygenConfig.getStartNormalRangeOnOxygen() && fractionRate >= voOxygenConfig.getFractionRate().intValue())
								{
									iScore += 3;
									scoreText.append(" < " + voOxygenConfig.getStartNormalRangeOnOxygen() + " >= " + voOxygenConfig.getFractionRate() + " FiO2");
								}
							}
						}
						else if (voOxygenConfig.getStartNormalRangeIsNotNull())
						{
							if (value < voOxygenConfig.getStartNormalRange())
							{
								iScore += 3;
								scoreText.append(" < " + voOxygenConfig.getStartNormalRange() + " on air");
							}
						}
					}
				}*/
			}
		}

		form.getGlobalContext().Core.setVitalSignsEscalationScore(String.valueOf(iScore));

		return scoreText.toString();
	}

	private boolean isRange(SECSTypes value)
	{
		return value != null && (value.equals(SECSTypes.PULSE) || value.equals(SECSTypes.RESPIRATORYRATE) || value.equals(SECSTypes.SYSTOLICBP) || value.equals(SECSTypes.TEMPERATURE) || value.equals(SECSTypes.OXYGENSATS));//	WDEV-12769
	}

	private boolean isScore(SECSTypes value)
	{
		return value != null && (value.equals(SECSTypes.PATIENT_CONCERN) || value.equals(SECSTypes.URINE_OUTPUT) || value.equals(SECSTypes.CONSCIOUS_LEVEL));
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		//WDEV-17337
		form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.CANCEL);
		form.fireCustomControlValueChanged();
		
		clearScreen();
		form.setMode(FormMode.VIEW);
		enableBloodSugarControls(false);
		form.recbrAllRecords().setValue(null);
		form.btnNew().setEnabled(true);
		listVitalSigns();
		//wdev-12905
		enableDisableLinkControls(true);
		updateControlState();
		//----------
	}

	private void listVitalSigns() throws PresentationLogicException
	{
		form.recbrAllRecords().clear();
		form.getLocalContext().setSelectedVitalSignsVo(null);
		VitalSignsVoCollection voColl = domain.listVitalSigns(form.getGlobalContext().Core.getCurrentCareContext());
		
		if (voColl != null)
		{
			for (int i = 0; i < voColl.size(); i++)
				form.recbrAllRecords().newRow(voColl.get(i), (voColl.get(i).getAuthoringInformationIsNotNull() && voColl.get(i).getAuthoringInformation().getAuthoringDateTime() != null ? voColl.get(i).getAuthoringInformation().getAuthoringDateTime().toString() : "") + " - " + (voColl.get(i).getAuthoringInformationIsNotNull() && voColl.get(i).getAuthoringInformation().getAuthoringHcp() != null ? voColl.get(i).getAuthoringInformation().getAuthoringHcp().toString() : ""));
		
			if (form.recbrAllRecords().getValue() == null && form.recbrAllRecords().getValues() != null && voColl.size() > 0)
			{
				form.recbrAllRecords().setValue((VitalSignsVo) form.recbrAllRecords().getValues().get(0));
			}
		}

		form.lyrVSigns().tabSection1().intBPStandingDiastolic().setEnabled(false);
		form.lyrVSigns().tabSection1().intBPStandingSystolic().setEnabled(false);

		selectVitalSign();
	}

	private void displayRecord()
	{
		ArrayList<VSType> vsTypesList = new ArrayList<VSType>();

		clearScreen();
		form.setMode(FormMode.VIEW);

		VitalSignsVo voVitalSign = form.getGlobalContext().Core.getVitalSign();
		form.getLocalContext().setSelectedVitalSignsVo(voVitalSign);

		if (voVitalSign.getAuthoringInformationIsNotNull())
			form.customControlAuthoringInfo().setValue(voVitalSign.getAuthoringInformation());
		
		if(voVitalSign.getRecordingInformationIsNotNull()){
			MemberOfStaffLiteVo mos = voVitalSign.getRecordingInformation().getRecordingUser();
			if(mos!=null){
				form.cmbRecordingHCP().newRow(mos, mos.toString());
				form.cmbRecordingHCP().setValue(mos);	
			}
			form.dtimRecordingDateTime().setValue(voVitalSign.getRecordingInformation().getRecordingDateTime());
		}

		form.dteTaken().setValue(voVitalSign.getVitalsTakenDateTime() != null ? voVitalSign.getVitalsTakenDateTime().getDate() : null);
		form.timTaken().setValue(voVitalSign.getVitalsTakenDateTime() != null ? voVitalSign.getVitalsTakenDateTime().getTime() : null);

		form.lblEWSScore().setVisible(false);
		if(ConfigFlag.UI.USE_EARLY_WARNING_SYSTEM.getValue())
		{
			form.cmbConscious().setValue(voVitalSign.getPatientConscious());
			form.cmbUrine().setValue(voVitalSign.getUrine2mlkgkhr());
			form.cmbPatientConcern().setValue(voVitalSign.getPatientCausingConcern());
			
			requiresEscalation(voVitalSign);

			form.lblEWSScore().setVisible(true);
			if (form.getGlobalContext().Core.getVitalSignsEscalationScoreIsNotNull())
				form.lblEWSScore().setValue("EWS Score is : " + form.getGlobalContext().Core.getVitalSignsEscalationScore());
		}

		if (voVitalSign.getTemperature() != null)
		{
			form.lyrVSigns().tabSection1().decTemp().setValue(voVitalSign.getTemperature().getTemperature());
			vsTypesList.add(VSType.TEMP);
		}

		if (voVitalSign.getPain() != null && voVitalSign.getPain().getPain() != null)
		{
			form.lyrVSigns().tabSection1().lblScore().setValue("Score = " + voVitalSign.getPain().getPain().getText());
			vsTypesList.add(VSType.PAIN);
		}

		if (voVitalSign.getPulse() != null)
		{
			if (voVitalSign.getPulse().getPulseRateRadial() != null)
				form.lyrVSigns().tabSection1().intPulseRadial().setValue(voVitalSign.getPulse().getPulseRateRadial());
			if (voVitalSign.getPulse().getPulseRateApex() != null)
				form.lyrVSigns().tabSection1().intPulseApex().setValue(voVitalSign.getPulse().getPulseRateApex()); // cm
			if (voVitalSign.getPulse().getIsIrregular() != null)
				form.lyrVSigns().tabSection1().chkIrregular().setValue(voVitalSign.getPulse().getIsIrregular().booleanValue());
			vsTypesList.add(VSType.PULSE);
		}

		if (voVitalSign.getBloodPressure() != null)
		{
			// Siting
			if (voVitalSign.getBloodPressure().getBPSittingSysIsNotNull())
			{
				form.lyrVSigns().tabSection1().GroupBP().setValue(GenForm.lyrVSignsLayer.tabSection1Container.GroupBPEnumeration.rdoBPSitting);
				try
				{
					onRadioButtonGroupBPValueChanged();
				}
				catch (PresentationLogicException e)
				{
					e.printStackTrace();
				}

				form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPSittingDias().intValue()));
				form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPSittingSys().intValue()));
			}
			else
			{

				form.lyrVSigns().tabSection1().GroupBP().setValue(GenForm.lyrVSignsLayer.tabSection1Container.GroupBPEnumeration.rdoBPLyingStanding);
				try
				{
					onRadioButtonGroupBPValueChanged();
				}
				catch (PresentationLogicException e)
				{
					e.printStackTrace();
				}

				// Standing
				if (voVitalSign.getBloodPressure().getBPStandingDias() != null)
					form.lyrVSigns().tabSection1().intBPStandingDiastolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPStandingDias().intValue()));
				if (voVitalSign.getBloodPressure().getBPStandingSys() != null)
					form.lyrVSigns().tabSection1().intBPStandingSystolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPStandingSys().intValue()));

				// Lying
				if (voVitalSign.getBloodPressure().getBPLyingDias() != null)
					form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPLyingDias().intValue()));
				if (voVitalSign.getBloodPressure().getBPLyingSys() != null)
					form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPLyingSys().intValue()));
			}

			form.lyrVSigns().tabSection1().txtComment().setValue(voVitalSign.getBloodPressureIsNotNull( )? voVitalSign.getBloodPressure().getComment():null); //wdev-12900	
			vsTypesList.add(VSType.BP);
		}

		if (voVitalSign.getRespiratory() != null)
		{
			form.lyrVSigns().tabSection1().intRespirations().setValue(voVitalSign.getRespiratory().getRespRate());
			vsTypesList.add(VSType.RESPIRATION);
		}

		if (voVitalSign.getPupils() != null)
		{
			form.lyrVSigns().tabSection2().cmbLeftSizePupil().setValue(voVitalSign.getPupils().getPupilLeftSize());
			form.lyrVSigns().tabSection2().cmbRightSizePupil().setValue(voVitalSign.getPupils().getPupilRightSize());
			form.lyrVSigns().tabSection2().cmbLeftReactionPupil().setValue(voVitalSign.getPupils().getPupilLeftReaction());
			form.lyrVSigns().tabSection2().cmbRightReactionPupil().setValue(voVitalSign.getPupils().getPupilRightReaction());

			vsTypesList.add(VSType.PUPILS);
		}

		if (voVitalSign.getLungFunctionTest() != null)
		{
			form.lyrVSigns().tabSection1().intPeakFlowPre().setValue(voVitalSign.getLungFunctionTest().getPeakFlowPre());
			form.lyrVSigns().tabSection1().intPeakFlowPost().setValue(voVitalSign.getLungFunctionTest().getPeakFlowPost());
			form.lyrVSigns().tabSection1().intTimeInterval().setValue(voVitalSign.getLungFunctionTest().getTimeInterval());
			vsTypesList.add(VSType.PEAKFLOW);
		}

		if (voVitalSign.getGlasgowComaScale() != null)
		{
			form.lyrVSigns().tabSection2().cmbEyeOpening().setValue(voVitalSign.getGlasgowComaScale().getEyeOpening());
			form.lyrVSigns().tabSection2().cmbMResponse().setValue(voVitalSign.getGlasgowComaScale().getMotorResponse());
			form.lyrVSigns().tabSection2().cmbVResponse().setValue(voVitalSign.getGlasgowComaScale().getVerbalResponse());
			form.lyrVSigns().tabSection2().intGCS().setValue(voVitalSign.getGlasgowComaScale().getTotalGlasgowComaScale());

			vsTypesList.add(VSType.GLASGOWCOMASCALE);
		}

		if (voVitalSign.getMetrics() != null)
		{
			form.lyrVSigns().tabSection2().decHeight().setValue(voVitalSign.getMetrics().getHeightValue());
			form.lyrVSigns().tabSection2().decWeight().setValue(voVitalSign.getMetrics().getWeightValue());
			vsTypesList.add(VSType.METRICS);
		}

		if (voVitalSign.getBloodSugar() != null)
		{
			if (voVitalSign.getBloodSugar().getType().equals(CBGType.RANDOM))
				form.lyrVSigns().tabSection2().BloodGlucoseGroup1().setValue(GenForm.lyrVSignsLayer.tabSection2Container.BloodGlucoseGroup1Enumeration.rdoRandom);
			else
				form.lyrVSigns().tabSection2().BloodGlucoseGroup1().setValue(GenForm.lyrVSignsLayer.tabSection2Container.BloodGlucoseGroup1Enumeration.rdoCBGM);
			if (voVitalSign.getBloodSugar().getBloodSugarValueIsNotNull())
				form.lyrVSigns().tabSection2().decValue().setValue(voVitalSign.getBloodSugar().getBloodSugarValue());
			if (voVitalSign.getBloodSugar().getTimePeriodIsNotNull())
				form.lyrVSigns().tabSection2().cmbTimePeriod().setValue(voVitalSign.getBloodSugar().getTimePeriod());
			if (voVitalSign.getBloodSugar().getPostBloodSugarValueIsNotNull())
				form.lyrVSigns().tabSection2().decPostValue().setValue(voVitalSign.getBloodSugar().getPostBloodSugarValue());
			if (voVitalSign.getBloodSugar().getTimeIntervalIsNotNull())
				form.lyrVSigns().tabSection2().intInterval().setValue(voVitalSign.getBloodSugar().getTimeInterval());

			vsTypesList.add(VSType.BLOODSUGAR);

			showBloodGlucoseControls(true, voVitalSign.getBloodSugar().getType().equals(CBGType.CBGM));
		}
		else
			showBloodGlucoseControls(false, false);

		if (voVitalSign.getOxygenSaturation() != null)
		{
			form.lyrVSigns().tabSection1().intO2Sat().setValue(voVitalSign.getOxygenSaturation().getOxygenSaturationLevel());
			form.lyrVSigns().tabSection1().chkonFiO2().setValue(voVitalSign.getOxygenSaturation().getIsOnFiO2());
			form.lyrVSigns().tabSection1().intFractionRate().setValue(voVitalSign.getOxygenSaturation().getFractionRate());
			vsTypesList.add(VSType.OXYGEN);
		}

		if (voVitalSign.getVisualAcuity() != null)
		{
			form.lyrVSigns().tabSection2().cmbVisualLeft().setValue(retrieveCodeFromID(voVitalSign.getVisualAcuity().getLeftValue()));
			form.lyrVSigns().tabSection2().cmbVisualRight().setValue(retrieveCodeFromID(voVitalSign.getVisualAcuity().getRightValue()));

			vsTypesList.add(VSType.VISUALACUITY);
		}

		// Code for enabling/disabling relevant links

		VSType[] typeArray = null;
		if (vsTypesList.size() > 0)
		{
			typeArray = new VSType[vsTypesList.size()];
			if (vsTypesList != null)
			{
				for (int i = 0; i < vsTypesList.size(); i++)
				{
					typeArray[i] = (VSType) vsTypesList.get(i);
				}
			}
		}
	}

	private void clearScreen()
	{
		form.cmbConscious().setValue(null);
		form.cmbPatientConcern().setValue(null);
		form.cmbUrine().setValue(null);
		form.lblEWSScore().setValue("");
		form.lyrVSigns().tabSection1().decTemp().setValue(null);
		form.getLocalContext().setSeverity(null);
		form.lyrVSigns().tabSection1().intPulseRadial().setValue(null);
		form.lyrVSigns().tabSection1().intPulseApex().setValue(null);
		form.lyrVSigns().tabSection1().chkIrregular().setValue(false);
		form.lyrVSigns().tabSection1().intBPStandingDiastolic().setValue(null);
		form.lyrVSigns().tabSection1().intBPStandingSystolic().setValue(null);
		form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().setValue(null);
		form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().setValue(null);
		form.lyrVSigns().tabSection1().intRespirations().setValue(null);
		form.lyrVSigns().tabSection2().cmbLeftSizePupil().setValue(null);
		form.lyrVSigns().tabSection2().cmbRightSizePupil().setValue(null);
		form.lyrVSigns().tabSection2().cmbLeftReactionPupil().setValue(null);
		form.lyrVSigns().tabSection2().cmbRightReactionPupil().setValue(null);
		form.lyrVSigns().tabSection1().intPeakFlowPre().setValue(null);
		form.lyrVSigns().tabSection1().intPeakFlowPost().setValue(null);
		form.lyrVSigns().tabSection1().intTimeInterval().setValue(null);
		form.lyrVSigns().tabSection2().cmbEyeOpening().setValue(null);
		form.lyrVSigns().tabSection2().cmbMResponse().setValue(null);
		form.lyrVSigns().tabSection2().cmbVResponse().setValue(null);
		form.lyrVSigns().tabSection2().intGCS().setValue(null);
		form.lyrVSigns().tabSection2().decHeight().setValue(null);
		form.lyrVSigns().tabSection2().decWeight().setValue(null);
		form.lyrVSigns().tabSection1().intO2Sat().setValue(null);
		form.lyrVSigns().tabSection1().intFractionRate().setValue(null);
		form.lyrVSigns().tabSection1().chkonFiO2().setValue(false);
		form.lyrVSigns().tabSection2().cmbVisualLeft().setValue(null);
		form.lyrVSigns().tabSection2().cmbVisualRight().setValue(null);
		form.customControlAuthoringInfo().setValue(null);
		form.dteTaken().setValue(null);
		form.timTaken().setValue(null);
		form.lyrVSigns().tabSection2().BloodGlucoseGroup1().setValue(null);
		form.lyrVSigns().tabSection2().decValue().setValue(null);
		form.lyrVSigns().tabSection2().cmbTimePeriod().setValue(null);
		form.lyrVSigns().tabSection2().decPostValue().setValue(null);
		form.lyrVSigns().tabSection2().intInterval().setValue(null);
		form.lyrVSigns().tabSection1().lblScore().setValue("Score = ");
		form.lyrVSigns().tabSection1().txtComment().setValue(null);	//wdev-12900
		form.dtimRecordingDateTime().setValue(null);//WDEV-12901 
		form.cmbRecordingHCP().setValue(null);//WDEV-12901
		
	}

	VSSnellen retrieveCodeFromText(String text)
	{
		VSSnellenCollection coll = LookupHelper.getVSSnellen(domain.getLookupService());
		VSSnellen type = null;

		for (int i = 0; i < coll.size(); i++)
		{
			type = coll.get(i);
			if (type.getText().equals(text))
				break;
		}

		return type;
	}

	void loadPupilsCombos()
	{
		for (int i = 1; i < 9; i++)
		{
			form.lyrVSigns().tabSection2().cmbLeftSizePupil().newRow(new Integer(i), String.valueOf(i));
			form.lyrVSigns().tabSection2().cmbRightSizePupil().newRow(new Integer(i), String.valueOf(i));
		}
		for (int i = 1; i < 6; i++)
			form.lyrVSigns().tabSection2().cmbVResponse().newRow(new Integer(i), String.valueOf(i));

		for (int i = 1; i < 5; i++)
			form.lyrVSigns().tabSection2().cmbEyeOpening().newRow(new Integer(i), String.valueOf(i));

		for (int i = 1; i < 7; i++)
			form.lyrVSigns().tabSection2().cmbMResponse().newRow(new Integer(i), String.valueOf(i));
	}

	private void refresh() throws PresentationLogicException
	{
		clearScreen();
		listVitalSigns();
	}

	protected void onLnkTemperatureClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsTemperatureForTriage);
	}

	protected void onLnkPulseClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsPulseForTriage);
	}

	protected void onLnkMetricsClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsMetricsForTriage);
	}

	protected void onLnkPeakFlowClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsPeakFlowForTriage);
	}

	protected void onLnkOxygenSaturationClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsOxygenSaturationForTriage);
	}

	protected void onLnkRespirationsClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsRespirationForTriage);
	}

	protected void onLnkBloodPresureClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsBPForTriage);
	}

	protected void onLnkGCSClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsGCSForTriage);
	}

	protected void onLnkPupilsClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsPupilsForTriage);
	}

	protected void onLnkVisualAcuityClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsVisualAcuityForTriage);
	}

	protected void onLnkBMIClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsBMIForTriage);
	}

	protected void onCmbEyeOpeningValueChanged() throws PresentationLogicException
	{
		form.lyrVSigns().tabSection2().intGCS().setValue(null);//WDEV-15996
		if (form.lyrVSigns().tabSection2().cmbEyeOpening().getValue() == null)
			return;

		if (form.lyrVSigns().tabSection2().cmbMResponse().getValue() == null)
			return;

		if (form.lyrVSigns().tabSection2().cmbVResponse().getValue() == null)
			return;

		form.lyrVSigns().tabSection2().intGCS().setValue(new Integer(form.lyrVSigns().tabSection2().cmbEyeOpening().getValue().intValue() + form.lyrVSigns().tabSection2().cmbMResponse().getValue().intValue() + form.lyrVSigns().tabSection2().cmbVResponse().getValue().intValue()));
	}

	private Float bodySurfaceArea(Float height/* cm */, Float weight/* kg */)
	{
		if (height == null || weight  == null)
			return null;
		
		// we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float) (0.20247 * Math.pow(height.floatValue() / 100.0, 0.725) * Math.pow(weight.floatValue(), 0.425)));
	}

	private Float bodyMassIndex(Float height/* cm */, Float weight/* kg */)
	{
		if (height == null || weight  == null)
			return null;
		
		// we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float) (weight.floatValue() / (height.floatValue() / 100.0 * height.floatValue() / 100.0)));
	}

	protected void onCmbMResponseValueChanged() throws PresentationLogicException
	{
		onCmbEyeOpeningValueChanged();
	}

	protected void onCmbVResponseValueChanged() throws PresentationLogicException
	{
		onCmbEyeOpeningValueChanged();
	}

	private VSSnellen retrieveCodeFromID(String id)
	{
		VSSnellenCollection coll = LookupHelper.getVSSnellen(domain.getLookupService());
		VSSnellen type = null;
		Integer val = null;

		try
		{
			val = Integer.valueOf(id);
		}
		catch (NumberFormatException e)
		{
			return null;
		}

		for (int i = 0; i < coll.size(); i++)
		{
			type = coll.get(i);
			if (type.getID() == val.intValue())
				break;
		}

		return type;
	}

	private String[] addScreenErrorsToVOErrors(ArrayList<?> screenErrors, String[] arrErrors)
	{
		String[] arrAllErrors = null;

		if (arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);

			int i = 0;
			for (int p = screenErrors.size(); p < arrAllErrors.length; p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}
		else
		{
			arrAllErrors = new String[screenErrors.size()];

			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);
		}

		return arrAllErrors;
	}

	private boolean isLoggedInUser()
	{
		MemberOfStaffShortVo memStaffShortVo = (MemberOfStaffShortVo) domain.getMosUser();
		if (memStaffShortVo != null && memStaffShortVo.getHcp() != null)
			return true;

		return false;
	}

	protected void onRadioButtonBloodGlucoseGroup1ValueChanged() throws PresentationLogicException
	{

		form.lyrVSigns().tabSection2().cmbTimePeriod().setValue(null);
		form.lyrVSigns().tabSection2().decValue().setValue(Float.valueOf("0.0"));
		form.lyrVSigns().tabSection2().decValue().setValue(null);
		form.lyrVSigns().tabSection2().decPostValue().setValue(Float.valueOf("0.0"));
		form.lyrVSigns().tabSection2().decPostValue().setValue(null);
		form.lyrVSigns().tabSection2().intInterval().setValue(Integer.valueOf("0"));
		form.lyrVSigns().tabSection2().intInterval().setValue(null);

		if (form.lyrVSigns().tabSection2().BloodGlucoseGroup1().getValue().equals(GenForm.lyrVSignsLayer.tabSection2Container.BloodGlucoseGroup1Enumeration.rdoRandom))
		{
			showBloodGlucoseControls(true, false);

			form.lyrVSigns().tabSection2().cmbTimePeriod().setEnabled(false);
			form.lyrVSigns().tabSection2().decValue().setEnabled(true);
			form.lyrVSigns().tabSection2().decPostValue().setEnabled(false);
			form.lyrVSigns().tabSection2().intInterval().setEnabled(false);

		}
		else
		{
			showBloodGlucoseControls(true, true);

			form.lyrVSigns().tabSection2().cmbTimePeriod().setEnabled(true);
			form.lyrVSigns().tabSection2().decValue().setEnabled(true);
			form.lyrVSigns().tabSection2().decPostValue().setEnabled(true);
			form.lyrVSigns().tabSection2().intInterval().setEnabled(true);
		}
	}

	protected void onLnkCBGMClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsBloodSugarForTriage);

	}

	protected void onLnkPainLadderClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.VitalSignsPainLadderForTriage);

	}

	protected void onRadioButtonGroupBPValueChanged() throws PresentationLogicException
	{

		if (form.lyrVSigns().tabSection1().GroupBP().getValue().equals(GenForm.lyrVSignsLayer.tabSection1Container.GroupBPEnumeration.rdoBPSitting))
		{
			form.lyrVSigns().tabSection1().intBPStandingDiastolic().setVisible(false);
			form.lyrVSigns().tabSection1().intBPStandingSystolic().setVisible(false);
			form.lyrVSigns().tabSection1().lblBPErectSlash().setVisible(false);
			form.lyrVSigns().tabSection1().lblBPSupine().setValue("Sitting");
			form.lyrVSigns().tabSection1().lblBPErect().setVisible(false);

		}
		else
		{
			form.lyrVSigns().tabSection1().intBPStandingDiastolic().setVisible(true);
			form.lyrVSigns().tabSection1().intBPStandingSystolic().setVisible(true);
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.lyrVSigns().tabSection1().intBPStandingDiastolic().setEnabled(true);
				form.lyrVSigns().tabSection1().intBPStandingSystolic().setEnabled(true);
			}
			else
			{
				form.lyrVSigns().tabSection1().intBPStandingDiastolic().setEnabled(false);
				form.lyrVSigns().tabSection1().intBPStandingSystolic().setEnabled(false);
			}
			form.lyrVSigns().tabSection1().lblBPErectSlash().setVisible(true);
			form.lyrVSigns().tabSection1().lblBPSupine().setValue("Lying");
			form.lyrVSigns().tabSection1().lblBPErect().setVisible(true);
		}

		form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().setValue(new Integer(0));
		form.lyrVSigns().tabSection1().intBPSittingLyingDiastolic().setValue(null);
		form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().setValue(new Integer(0));
		form.lyrVSigns().tabSection1().intBPSittingLyingSystolic().setValue(null);
		form.lyrVSigns().tabSection1().intBPStandingDiastolic().setValue(new Integer(0));
		form.lyrVSigns().tabSection1().intBPStandingDiastolic().setValue(null);
		form.lyrVSigns().tabSection1().intBPStandingSystolic().setValue(new Integer(0));
		form.lyrVSigns().tabSection1().intBPStandingSystolic().setValue(null);
	}

	protected void onImb1Click() throws PresentationLogicException
	{
		setSeverity(PainSeverity.NO_PAIN_AT_ALL);
	}

	protected void onImb2Click() throws PresentationLogicException
	{
		setSeverity(PainSeverity.NORMAL_ACTIVITIES);
	}

	protected void onImb3Click() throws PresentationLogicException
	{
		setSeverity(PainSeverity.MILD_STINGING);
	}

	protected void onImb4Click() throws PresentationLogicException
	{
		setSeverity(PainSeverity.FEW_PROBLEMS);
	}

	protected void onImb5Click() throws PresentationLogicException
	{
		setSeverity(PainSeverity.NOT_BAD);
	}

	protected void onImb6Click() throws PresentationLogicException
	{
		setSeverity(PainSeverity.QUITE_BAD);
	}

	protected void onImb7Click() throws PresentationLogicException
	{
		setSeverity(PainSeverity.CAUSES_DIFICULTIES);
	}

	protected void onImb8Click() throws PresentationLogicException
	{
		setSeverity(PainSeverity.VERY_BAD);
	}

	protected void onImb9Click() throws PresentationLogicException
	{
		setSeverity(PainSeverity.DISABLING);
	}

	protected void onImb10Click() throws PresentationLogicException
	{
		setSeverity(PainSeverity.EXCRUITIATING);

	}

	protected void onImb11Click() throws PresentationLogicException
	{
		setSeverity(PainSeverity.NO_CONTROL);
	}

	private void setSeverity(PainSeverity severity)
	{
		form.lyrVSigns().tabSection1().lblScore().setValue("Score = " + severity.toString());
		form.getLocalContext().setSeverity(severity);
	}

	private void setPupilstooltip()
	{
		StringBuffer tooltip = new StringBuffer();
		tooltip.append("<table border='0' width='4%' id='table1' bgcolor='#F5FAFF' cellspacing='6'>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_1.getImagePath() + "' width='9' height='11'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>1</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_2.getImagePath() + "' width='12' height='13'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>2</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_3.getImagePath() + "' width='16' height='18'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>3</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_4.getImagePath() + "' width='19' height='20'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>4</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_5.getImagePath() + "' width='21' height='23'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>5</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_6.getImagePath() + "' width='30' height='28'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>6</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_7.getImagePath() + "' width='31' height='33'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>7</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_8.getImagePath() + "' width='30' height='33'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>8</font></td>");
		tooltip.append("</tr>");
		tooltip.append("</table>");

		form.lyrVSigns().tabSection2().lnkPupils().setTooltip(tooltip.toString());
	}

	protected void onFormModeChanged()
	{
		updateControlState();
	}

	private void updateControlState()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.lyrVSigns().tabSection1().intFractionRate().setEnabled(form.lyrVSigns().tabSection1().chkonFiO2().getValue());
			if (form.lyrVSigns().tabSection1().chkonFiO2().getValue() == false)
				form.lyrVSigns().tabSection1().intFractionRate().setValue(null);
			
			form.customControlAuthoringInfo().setIsRequiredPropertyToControls(true); //wdev-15856
			form.setcustomControlAuthoringInfoEnabled(true);		//wdev-15856
		}
		
		if(ConfigFlag.UI.USE_EARLY_WARNING_SYSTEM.getValue())
		{
			form.cmbConscious().setEnabled(form.getMode().equals(FormMode.EDIT));
			form.cmbPatientConcern().setEnabled(form.getMode().equals(FormMode.EDIT));
			form.cmbUrine().setEnabled(form.getMode().equals(FormMode.EDIT));
		}
		
		//WDEV-12830 - starts here
		boolean showVitalSigns = ConfigFlag.UI.SHOW_VITAL_SIGNS_METRIC_CONTROLS.getValue();
		form.lyrVSigns().tabSection2().decHeight().setVisible(showVitalSigns);
		form.lyrVSigns().tabSection2().decHeight().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrVSigns().tabSection2().decWeight().setVisible(showVitalSigns);
		form.lyrVSigns().tabSection2().decWeight().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrVSigns().tabSection2().lblHeight().setVisible(showVitalSigns);
		form.lyrVSigns().tabSection2().lblWeight().setVisible(showVitalSigns);
		form.lyrVSigns().tabSection2().lblCms().setVisible(showVitalSigns);
		form.lyrVSigns().tabSection2().lblKg().setVisible(showVitalSigns);
		form.lyrVSigns().tabSection2().lnkMetrics().setVisible(showVitalSigns);
		form.lyrVSigns().tabSection2().lnkBMI().setVisible(showVitalSigns);
		form.lyrVSigns().tabSection2().lnkMetrics().setEnabled(!FormMode.EDIT.equals(form.getMode()));
		form.lyrVSigns().tabSection2().lnkBMI().setEnabled(!FormMode.EDIT.equals(form.getMode()));
		//WDEV-12830 - ends here
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNew().setVisible(true);
			form.btnNew().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()));//WDEV-15996
			form.customControlAuthoringInfo().setIsRequiredPropertyToControls(false); //wdev-15856
			form.setcustomControlAuthoringInfoEnabled(false);		//wdev-15856
			
			
			
		}
		
		form.lyrVSigns().tabSection2().lnkVisualAcuity().setEnabled(false);
		form.lyrVSigns().tabSection2().lnkVisualAcuity().setVisible(false);
	}

	protected void onChkonFiO2ValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, DialogResult result) throws PresentationLogicException
	{
		form.getGlobalContext().Assessment.setForceCompletion(false);

		if(formName != null)
		{
			if(formName.equals(form.getForms().Assessment.DynamicAssessmentsDialog))
			{
				if(result != null && result.equals(DialogResult.OK))
					saveEWS();
			}
		}
		
		initialize();
	}

	private void saveEWS()
	{
		PatientEWSVo voPatEws = new PatientEWSVo();
		
		//WDEV-12215
		if(form.getGlobalContext().Core.getPatient_AssessmentFull() != null)
			voPatEws.setPatientAssessment(domain.getPatientAssessmentFull(form.getGlobalContext().Core.getPatient_AssessmentFull()));
		
		voPatEws.setVitalSign(form.getGlobalContext().Core.getVitalSign());
		voPatEws.setSECSScore(form.getGlobalContext().Core.getVitalSignsEscalationScoreIsNotNull() ? new Integer(form.getGlobalContext().Core.getVitalSignsEscalationScore()) : null);
		voPatEws.setScoreDetails(form.getGlobalContext().Core.getVitalSignsEscalationText());
		voPatEws.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		domain.savePatientEws(voPatEws);
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getEWSMessageIdIsNotNull() && form.getLocalContext().getEWSMessageId().equals(messageBoxId))
		{
			form.getGlobalContext().Assessment.setIsDynamicAssessmentOpenedForPreview(false);
			form.getGlobalContext().Assessment.setForceCompletion(true);
		
			engine.open(form.getForms().Assessment.DynamicAssessmentsDialog, new Object[]{form.getLocalContext().getSecsRecord().getEWSProtocol()}, "EWS Assessment", false);
		}
	}
	//wdev-12905
	private void enableDisableLinkControls(Boolean enabledisable)
	{
		form.lyrVSigns().tabSection1().lnkBloodPresure().setEnabled(enabledisable);
		form.lyrVSigns().tabSection2().lnkBMI().setEnabled(enabledisable);
		form.lyrVSigns().tabSection2().lnkCBGM().setEnabled(enabledisable);
		form.lyrVSigns().tabSection2().lnkGCS().setEnabled(enabledisable);
		form.lyrVSigns().tabSection2().lnkMetrics().setEnabled(enabledisable);
		form.lyrVSigns().tabSection1().lnkOxygenSaturation().setEnabled(enabledisable);
		form.lyrVSigns().tabSection1().lnkPainLadder().setEnabled(enabledisable);
		form.lyrVSigns().tabSection1().lnkPeakFlow().setEnabled(enabledisable);
		form.lyrVSigns().tabSection1().lnkPulse().setEnabled(enabledisable);
		form.lyrVSigns().tabSection2().lnkPupils().setEnabled(enabledisable);
		form.lyrVSigns().tabSection1().lnkRespirations().setEnabled(enabledisable);
		form.lyrVSigns().tabSection1().lnkTemperature().setEnabled(enabledisable);
	//	form.lnkVisualAcuity().setVisible(false);
	//	form.lnkVisualAcuity().setEnabled(enabledisable);
	}
	//------------

	public void initialize() 
	{
		StringBuffer tooltip = new StringBuffer();
		tooltip.append("<b>Eyes open</b>");
		tooltip.append("<br>Spontaneously&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4");
		tooltip.append("<br>To speech&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3");
		tooltip.append("<br>To pain&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2");
		tooltip.append("<br>None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1");
		tooltip.append("<br><br><b>Verbal response</b>");
		tooltip.append("<br>Orientated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5");
		tooltip.append("<br>Confused&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4");
		tooltip.append("<br>Inappropriate words&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3");
		tooltip.append("<br>Incomprehensible sound&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2");
		tooltip.append("<br>None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1");
		tooltip.append("<br><br><b>Motor response</b>");
		tooltip.append("<br>Obey commands;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6");
		tooltip.append("<br>Localises pain&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5");
		tooltip.append("<br>Normal flexion (Withdraws)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4");
		tooltip.append("<br>Abnormal flexion (Decorticate)&nbsp; 3");
		tooltip.append("<br>Extension Decerebrate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2");
		tooltip.append("<br>None (Flaccid)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1");
		form.lyrVSigns().tabSection2().lnkGCS().setTooltip(tooltip.toString());

		clearScreen();
		form.getGlobalContext().Core.setVitalSign(null);//WDEV-16413
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(true);
		enableBloodSugarControls(false);
		showBloodGlucoseControls(false, false);
		form.lyrVSigns().tabSection1().intBPStandingDiastolic().setEnabled(false);
		form.lyrVSigns().tabSection1().intBPStandingSystolic().setEnabled(false);

		loadPupilsCombos();
		
		if(ConfigFlag.UI.USE_EARLY_WARNING_SYSTEM.getValue())
			loadEWSCombos();
		else
		{
			hideEWSControls();
		}
		
		try
		{
			listVitalSigns();
		}
		catch (PresentationLogicException e1)
		{

			engine.showMessage(e1.getMessage());
			return;
		}
		//WDEV-15996 - this check was moved on pressing New button
		/*
		// Don't allow to create new Vital Signs when "Logged in User is not a
		// Hcp"
		if (form.getMode().equals(FormMode.VIEW) && isLoggedInUser() == false)
		{
			engine.showMessage("Logged in User is not a Hcp");
		}
		*/
		
		// default to original record selected if flicking back to this screen
		// from any other
		if (form.getGlobalContext().Core.getVitalSign() != null)
		{
			form.recbrAllRecords().setValue(form.getGlobalContext().Core.getVitalSign());
			selectVitalSign();
		}

		setPupilstooltip();
		
		form.setMode(FormMode.VIEW);
	}

	public void setEnabled(Boolean value) 
	{
		form.getLocalContext().setIsEnabled(value);
		updateControlState();
	}

	@Override
	protected void onRecbrAllRecordsValueChanged() throws PresentationLogicException 
	{
		selectVitalSign();
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		// only for automatic binding
	}
	
	//WDEV-17337
	public EdAssessment_CustomControlsEvents getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}
	
	//WDEV-17337
	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}
}
