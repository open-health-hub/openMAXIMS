//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2265.41281)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.jointconfiguration;

import ims.core.vo.MskJointVo;
import ims.core.vo.MskJointVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.spinalinjuries.vo.lookups.MskJointsMovements;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.spinalinjuries.vo.lookups.MskJointsMovementsCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws PresentationLogicException 
	{
		initialize();
		open();				
	}
	
	protected void onFormModeChanged() 
	{
		updateControlsState();		
	}
	
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		updateInstance();
		
	}
	
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		newInstance();		
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		open();		
	}

	protected void onGrdListSelectionChanged() throws PresentationLogicException 
	{
		selectJoint();		
	}
	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.LIP.New:
				newInstance();
				break;
			case GenForm.ContextMenus.LIP.Update:
				updateInstance();
				break;
				
		}
		
	}

	public void initialize()
	{
		form.ctnInstance().setCollapsed(true);
		listMovements();	
	}

	private void listMovements() 
	{
		MskJointsMovementsCollection coll = LookupHelper.getMskJointsMovements(domain.getLookupService());
		GenForm.ctnInstanceContainer.grdJointMovementsRow row;
		for (int i=0; i < coll.size(); i++)
		{
			MskJointsMovements lkpJM = coll.get(i);
			row = form.ctnInstance().grdJointMovements().getRows().newRow();
			row.setValue(lkpJM);
			row.setcolText(lkpJM.getText());	
		}
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		clear();
		
		populateListControl(domain.list(new Boolean(form.chkListActive().getValue())));
		
		// Display and reselect last edited item
		form.grdList().setValue(form.getLocalContext().getSelectedInstance());
		populateInstanceControls(form.grdList().getValue());
		
		form.setMode(FormMode.VIEW);	
	}

	public void clear()
	{
		super.clear();		
		form.grdList().getRows().clear();
		clearInstanceControls();
	}
	public void clearInstanceControls()
	{
		form.ctnInstance().chkJointActive().setValue(false);
		form.ctnInstance().txtJointDescription().setValue(null);
		form.ctnInstance().txtJointName().setValue(null);
		for (int i=0; i < form.ctnInstance().grdJointMovements().getRows().size(); i++)
			form.ctnInstance().grdJointMovements().getRows().get(i).setcolSelected(false);
		
	}
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedInstance(null);
		
		clearInstanceControls();
		form.ctnInstance().chkJointActive().setValue(true);
		form.grdList().setValue(null);
		form.setMode(FormMode.EDIT);
		form.ctnInstance().txtJointName().setFocus();
		form.ctnInstance().txtJointName().setEnabled(true);
	}
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		MskJointVo voJoint = populateInstanceData(form.getLocalContext().getSelectedInstance());
		String[] errors = voJoint.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedInstance(domain.save(voJoint));
		} 
		catch (StaleObjectException e) 
		{			
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			form.ctnInstance().txtJointName().setFocus();
			return false;
		}
		
		return true;
	}
	
	public void updateControlsState()
	{
		form.ctnInstance().setCollapsed(form.grdList().getValue() == null && FormMode.VIEW.equals(form.getMode()));
		form.getContextMenus().getLIPNewItem().setVisible(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().getLIPUpdateItem().setVisible(form.getMode().equals(FormMode.VIEW) &&
															 form.grdList().getValue() != null);
		form.btnUpdate().setEnabled(form.getMode().equals(FormMode.VIEW) &&
				 											 form.grdList().getValue() != null);
	}
	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
		form.ctnInstance().txtJointName().setEnabled(false);
	}
	
	private MskJointVo populateInstanceData(MskJointVo voJoint)
	{
		if (voJoint == null)
			voJoint = new MskJointVo();
			
		voJoint.setIsActive(new Boolean(form.ctnInstance().chkJointActive().getValue()));
		voJoint.setDescription(form.ctnInstance().txtJointDescription().getValue());
		voJoint.setName(form.ctnInstance().txtJointName().getValue());
		voJoint.setMovements(getJointMovements());
		
		return voJoint;		
	}
	
	public void populateInstanceControls(MskJointVo value)
	{
		clearInstanceControls();
		form.getLocalContext().setSelectedInstance(value);

		if(value == null)
			return;

		form.ctnInstance().txtJointDescription().setValue(value.getDescription() == null ? null : value.getDescription());
		form.ctnInstance().txtJointName().setValue(value.getName() == null ? null : value.getName());
		form.ctnInstance().chkJointActive().setValue(value.getIsActive() == null ? false : value.getIsActive().booleanValue());
		
		if (value.getMovements() != null)
		{
			for (int i=0; i < value.getMovements().size();i++)
			{
				for (int j=0; j < form.ctnInstance().grdJointMovements().getRows().size(); j++)
				{
					if (value.getMovements().get(i).getId() == form.ctnInstance().grdJointMovements().getRows().get(j).getValue().getId())
					{							
						form.ctnInstance().grdJointMovements().getRows().get(j).setcolSelected(true);
					}
				}
			}
		}		
	}	
	
	
	
	
			
	private MskJointsMovementsCollection getJointMovements()
	{
		MskJointsMovementsCollection lkpCollMovements = new MskJointsMovementsCollection();
		for (int i=0; i < form.ctnInstance().grdJointMovements().getRows().size();i++)
		{
			if (form.ctnInstance().grdJointMovements().getRows().get(i).getcolSelected() == true)
				lkpCollMovements.add(form.ctnInstance().grdJointMovements().getRows().get(i).getValue());
		}
		
		return lkpCollMovements;
	}

	public void populateListControl(MskJointVoCollection voCollJoints) 
	{
		// Clear list
		form.grdList().getRows().clear();		

		if(voCollJoints != null)
		{
			for(int x = 0; x < voCollJoints.size(); x++)
			{
				if(voCollJoints.get(x) != null)
				{
					GenForm.grdListRow row = form.grdList().getRows().newRow();
					row.setValue(voCollJoints.get(x));
					row.setColJointName(voCollJoints.get(x).getName());
					row.setColJointDescription(voCollJoints.get(x).getDescription());
					row.setColJointActive(voCollJoints.get(x).getIsActive().booleanValue());
				}
			}
		}			
	}


	private void selectJoint() 
	{
		MskJointVo voJoint = domain.get(form.grdList().getValue());
		form.getLocalContext().setSelectedInstance(voJoint);
		populateInstanceControls(voJoint);
		updateControlsState();
	}

	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if (save())
			open();
		
	}

	protected void onChkListActiveValueChanged() throws PresentationLogicException 
	{
		populateListControl(domain.list(new Boolean(form.chkListActive().getValue())));	
		clearInstanceControls();
		updateControlsState();
	}
	
	
}
