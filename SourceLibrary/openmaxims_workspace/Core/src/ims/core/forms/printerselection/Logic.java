//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.29 build 2006.18610)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.printerselection;

import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.PrinterScope;
import ims.framework.interfaces.IPrinter;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		if (engine.getPrinterProvider() == null)
			return;
		
		IPrinter[] printers = engine.getPrinterProvider().getPrintersForLocation(domain.getCurrentLocation());
		if (printers != null)
		{
			GenForm.grdPrintersRow row;
			for(int i=0;i<printers.length;i++)
			{
				row = form.grdPrinters().getRows().newRow();
				row.setPrinter(printers[i].getIPrinterName());
			}
			
			IPrinter defaultPrinter = engine.getPrinterProvider().getPrinterByLocationAndScope(domain.getCurrentLocation(), PrinterScope.DEFAULT);
			if (defaultPrinter != null)
			{
				form.grdPrinters().setValue(defaultPrinter.getIPrinterName());
			}
		}		
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdPrinters().getSelectedRowIndex()>=0)
		{
			String sPrinter = form.grdPrinters().getRows().get(form.grdPrinters().getSelectedRowIndex()).getPrinter();
			form.getGlobalContext().Core.setPrinterSelect(sPrinter);
			engine.close(DialogResult.OK);
		}
		else
			engine.showMessage("Please select a printer or Cancel.");
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
