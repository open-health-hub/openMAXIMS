//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.core.forms.printreportbyimsid;

import ims.configuration.gen.ConfigFlag;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.PrinterScope;
import ims.framework.exceptions.PresentationLogicException;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize(args);
		updateControlsState();
	}
	
	private void updateControlsState() 
	{
		form.btnPrint().setEnabled(form.ccPrinter().getSelectedPrinter() != null);
	}

	private void initialize(Object[] args) 
	{
		form.getLocalContext().setCurrentLocation(domain.getCurrentLocation());
		
		//wdev-14713
		String locname = null;
		if( form.getLocalContext().getCurrentLocation() != null )
		{
			locname = form.getLocalContext().getCurrentLocation().getName();
			if( locname != null && locname.length() > 65)
				locname = locname.substring(0, 64);
		}
		form.lblLocation().setValue(form.getLocalContext().getCurrentLocation() != null ? locname : "No location selected");	//wdev-14713
		form.lblLocation().setTooltip(form.getLocalContext().getCurrentLocation() != null ? form.getLocalContext().getCurrentLocation().getName() : "No location selected"); //wdev-14713
		
		form.ccPrinter().initialize(form.getLocalContext().getCurrentLocation(), PrinterScope.DEFAULT);
		form.chkListAll().setValue(false);
		
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof String)
			{
				form.getLocalContext().setCareContextSeedName((String) args[0]);
			}
			
			if(args[1] instanceof Integer)
			{
				form.getLocalContext().setCareContextSeedValue((Integer) args[1]);
			}
		}
	}
	
	@Override
	protected void onBtnPreviewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		print(true);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		print(false);
	}

	private void print(boolean buildAsURL) 
	{
		if(form.getLocalContext().getCareContextSeedName() == null || form.getLocalContext().getCareContextSeedValue() == null)
			return;
		
		//WDEV-17687
		if (form.ccPrinter().getSelectedPrinter() == null)
		{
			engine.showMessage("Printer is mandatory.");
			return;
		}
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		QueryBuilderClient cl = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
			
		Object[] obj = domain.getSystemReportAndTemplate(form.getGlobalContext().Core.getImsReportId());
			
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}

		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
				return;
		}
			
		cl.addSeed(new SeedValue(form.getLocalContext().getCareContextSeedName(), form.getLocalContext().getCareContextSeedValue(), Integer.class));	

		String url = null;
		
		try
		{
			if(buildAsURL)
			{
				url = cl.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, QueryBuilderClient.PDF, "", 1);
			}
			else
			{
				cl.buildReport((String)obj[0], (String)obj[1], urlReportServer, QueryBuilderClient.PDF, form.ccPrinter().getSelectedPrinter().getIPrinterName(), 1);
			}
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage("Error printing report: " + e.getMessage());
			return;
		}
		
		if(buildAsURL)
			engine.openUrl(url);
		else
			engine.close(DialogResult.OK);
	}

	@Override
	protected void onChkListAllValueChanged() throws PresentationLogicException 
	{
		form.ccPrinter().initialize(form.chkListAll().getValue() ? null : form.getLocalContext().getCurrentLocation(), PrinterScope.DEFAULT);
		updateControlsState();
	}

	@Override
	protected void onCcPrinterValueChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}
}
