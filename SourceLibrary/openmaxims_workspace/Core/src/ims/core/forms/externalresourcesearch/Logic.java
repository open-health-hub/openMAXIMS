//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4758.16736)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.externalresourcesearch;

import ims.core.vo.enums.ExternalResourceSearchEvent;
import ims.core.vo.lookups.ExternalResourceType;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onCcExternalResourceSearchValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
			form.btnOK().setEnabled(ExternalResourceSearchEvent.ROW_SELECTED.equals(form.ccExternalResourceSearch().getSelectedEvent()));
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setExternalResourceSelected(form.ccExternalResourceSearch().getSelectedExternalResource());
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		if (args != null)
		{
			if (args.length == 1 && args[0] != null && args[0] instanceof ExternalResourceType)
			{
				form.ccExternalResourceSearch().initialize((ExternalResourceType) args[0]);
				form.btnOK().setEnabled(false);
			}
		}
	}
}
