//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.supportnetworkservicesdialog;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		COE = new COEContext(context);
		Core = new CoreContext(context);
	}
	public final class COEContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private COEContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getSupportNetworkServiceCollectionIsNotNull()
		{
			return !cx_COESupportNetworkServiceCollection.getValueIsNull(context);
		}
		public ims.core.vo.SupportNetworkServicesVoCollection getSupportNetworkServiceCollection()
		{
			return (ims.core.vo.SupportNetworkServicesVoCollection)cx_COESupportNetworkServiceCollection.getValue(context);
		}
		public void setSupportNetworkServiceCollection(ims.core.vo.SupportNetworkServicesVoCollection value)
		{
			cx_COESupportNetworkServiceCollection.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_COESupportNetworkServiceCollection = new ims.framework.ContextVariable("COE.SupportNetworkServiceCollection", "_cv_COE.SupportNetworkServiceCollection");
		public boolean getSupportNetworkPreviousClinicalContactsIsNotNull()
		{
			return !cx_COESupportNetworkPreviousClinicalContacts.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactShortVoCollection getSupportNetworkPreviousClinicalContacts()
		{
			return (ims.core.vo.ClinicalContactShortVoCollection)cx_COESupportNetworkPreviousClinicalContacts.getValue(context);
		}

		private ims.framework.ContextVariable cx_COESupportNetworkPreviousClinicalContacts = new ims.framework.ContextVariable("COE.SupportNetworkPreviousClinicalContacts", "_cv_COE.SupportNetworkPreviousClinicalContacts");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}
		public void setCurrentCareContext(ims.core.vo.CareContextShortVo value)
		{
			cx_CoreCurrentCareContext.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");
		public boolean getCurrentClinicalContactIsNotNull()
		{
			return !cx_CoreCurrentClinicalContact.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactShortVo getCurrentClinicalContact()
		{
			return (ims.core.vo.ClinicalContactShortVo)cx_CoreCurrentClinicalContact.getValue(context);
		}
		public void setCurrentClinicalContact(ims.core.vo.ClinicalContactShortVo value)
		{
			cx_CoreCurrentClinicalContact.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentClinicalContact = new ims.framework.ContextVariable("Core.CurrentClinicalContact", "_cvp_Core.CurrentClinicalContact");
		public boolean getSupportNetworkPreviousCareContextsIsNotNull()
		{
			return !cx_CoreSupportNetworkPreviousCareContexts.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVoCollection getSupportNetworkPreviousCareContexts()
		{
			return (ims.core.vo.CareContextShortVoCollection)cx_CoreSupportNetworkPreviousCareContexts.getValue(context);
		}
		public void setSupportNetworkPreviousCareContexts(ims.core.vo.CareContextShortVoCollection value)
		{
			cx_CoreSupportNetworkPreviousCareContexts.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreSupportNetworkPreviousCareContexts = new ims.framework.ContextVariable("Core.SupportNetworkPreviousCareContexts", "_cv_Core.SupportNetworkPreviousCareContexts");

		private ims.framework.Context context;
	}

	public COEContext COE;
	public CoreContext Core;
}
