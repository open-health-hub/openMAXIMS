//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.62 build 3112.33410)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.wardview;

import ims.clinical.vo.lookups.VTEAsessmentStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.vo.AdmissionDetailLiteVo;
import ims.core.vo.BayConfigVo;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateStatusLiteVo;
import ims.core.vo.BedSpaceVo;
import ims.core.vo.BedSpaceVoCollection;
import ims.core.vo.FloorBedSpaceLayoutVo;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.InpatientEpisodeLiteVoCollection;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientElectiveListForWardViewVo;
import ims.core.vo.PatientElectiveListForWardViewVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.PendingElectiveAdmissionAdmitVo;
import ims.core.vo.PendingElectiveAdmissionAdmitVoCollection;
import ims.core.vo.PendingEmergencyAdmissionAdmitVo;
import ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection;
import ims.core.vo.PendingTransfersLiteVo;
import ims.core.vo.PendingTransfersLiteVoCollection;
import ims.core.vo.WardBayConfigVo;
import ims.core.vo.WardViewSearchCriteriaVo;
import ims.core.vo.enums.BedInfoAction;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.Bed;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.Timer;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.Position;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Image;

import java.text.ParseException;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	public static final String	COLNAME							= "-1";	
	public static final Integer	CURRENT							= -5;
	public static final Integer	INCOMING_ADMISION				= -6;
	public static final Integer	INCOMING_PENDING_TRANSFERS		= -7;
	public static final Integer	OUTGOING_DISCHARGE				= -8;
	public static final Integer	OUTGOING_PENDING_TRANSFERS		= -9;
	public static final Integer	HOME_LEAVE						= -10;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{		
		initialise();
		loadHospitals();
	
		if (engine.isDialog())
		{
			if (form.getGlobalContext().Core.getCurrentInPatientListWardIsNotNull())
			{
				clearDisplay(false);

				LocMostVo voLoc = domain.getLocation(form.getGlobalContext().Core.getCurrentInPatientListWard());
				
				form.cmbHospital().setValue(voLoc.getParentLocation());
				loadWardsForSelectedHosp();
				
				if (!form.cmbWard().getValues().contains(voLoc))
				{
					form.cmbWard().newRow(voLoc, voLoc.getName());
				}
				form.cmbWard().setValue(voLoc);
				
				wardValueChanged();
			}
			return;
		}
		
		
		if (form.getGlobalContext().Core.getWardViewSearchCriteriaIsNotNull())///WDEV-12925 - Start
		{
			form.cmbHospital().setValue(form.getGlobalContext().Core.getWardViewSearchCriteria().getHospital());
			loadWardsForSelectedHosp();
			form.cmbWard().setValue(form.getGlobalContext().Core.getWardViewSearchCriteria().getWard());
			wardValueChanged();
			form.cmbBay().setValue(form.getGlobalContext().Core.getWardViewSearchCriteria().getBay());
			bayValueChanged();
		
		}///WDEV-12925 - End
		else
		{
    		//WDEV-15908 - starts here
    		ILocation currentLocation = engine.getCurrentLocation();
    		LocationLiteVo currentHospiptal = domain.getCurrentHospital(currentLocation);
    		form.cmbHospital().setValue(currentHospiptal);
    		
    		loadWardsForSelectedHosp();
    		if(currentLocation instanceof LocationLiteVo)
    		{
    			form.cmbWard().setValue((LocationLiteVo) currentLocation);
    			wardValueChanged();
    		}
    		
    		if(form.cmbWard().getValue() == null && form.cmbWard().getValues() != null && form.cmbWard().getValues().size() == 1)
    		{
    			if(form.cmbWard().getValues().get(0) instanceof LocationLiteVo)
    			{
    				form.cmbWard().setValue((LocationLiteVo) form.cmbWard().getValues().get(0));
    				wardValueChanged();
    			}
    		}
    		//WDEV-15908 - ends here
		}
	}

	private void initialise()
	{
		form.getTimers().gettimerSearch().setInterval(ConfigFlag.UI.WARDVIEW_TIMER_INTERVAL.getValue());
		form.lblMainSpecialty().setValue("");
		form.lblMainSpecialty().setTooltip("");
		form.imbRefresh().setEnabled(false);
	}

	private void loadHospitals()
	{
		LocationLiteVoCollection hospColl = domain.listActiveHospitalsLite();
		if(hospColl != null)
		{
			for(int x = 0; x < hospColl.size(); x++)
			{
				if(hospColl.get(x) != null)
					form.cmbHospital().newRow(hospColl.get(x), hospColl.get(x).getName());
			}
		}
	}

	private void addWard(LocationLiteVo ward) 
	{
		if(ward == null)
			return;
		
		form.cmbWard().newRow(ward, ward.getName());
	}

	
	@Override
	protected void onCmbWardValueChanged() throws PresentationLogicException 
	{		
		wardValueChanged();
		populateSearchCriteriaDataFromScreen();///WDEV-12925
	}
	
	private void wardValueChanged()
	{
		clearDisplay(false);
		form.imbRefresh().setEnabled(false);

		form.lblMainSpecialty().setValue("");
		form.lblMainSpecialty().setTooltip("");
		WardBayConfigVo voWardBayConfig = null;
		if(form.cmbWard().getValue() != null)
		{
			voWardBayConfig = domain.getWardBayConfigByWard(form.cmbWard().getValue());
			if(voWardBayConfig != null && voWardBayConfig.getMainSpecialtyIsNotNull())
			{
				form.lblMainSpecialty().setValue(voWardBayConfig.getMainSpecialty().getText());
				form.lblMainSpecialty().setTooltip("Specialties : " + voWardBayConfig.getSpecialtiesTooltip());
			}
			form.getGlobalContext().Core.setHasWaitingArea(voWardBayConfig != null && voWardBayConfig.getIsWaitingAreaIsNotNull() && voWardBayConfig != null && voWardBayConfig.getIsWaitingArea());
		}
		
		loadBaysForSelectedWard(voWardBayConfig);
		form.getGlobalContext().Core.setADTWard(form.cmbWard().getValue());
	}

	private void clearDisplay(boolean bValueSelectionCleared)
	{
		clearData();
		form.dyngrdDisplay().clear();
		form.bedPlanner().clear();
		
		if(!bValueSelectionCleared)
		{
			form.lblMainSpecialty().setValue("");
			form.lblMainSpecialty().setTooltip("");
		}

	}

	private void clearData()
	{
		form.getLocalContext().setOnHomeLeave(null);
		form.getLocalContext().setOnTheWard(null);
		form.getLocalContext().setTransfersOut(null);
		form.getLocalContext().setPendingElective(null);
		form.getLocalContext().setPatientElectiveList(null);		//wdev-18936
		form.getLocalContext().setPendingEmergency(null);
		form.getLocalContext().setTransfersIn(null);
		form.getLocalContext().setWaitingArea(null);
		form.getGlobalContext().Core.setADTTransfersIn(null);
		form.getGlobalContext().Core.setADTTransfersOut(null);	
		form.getGlobalContext().Core.setHasWaitingArea(false);
	}

	protected void updateContextMenuState()
	{
		form.getContextMenus().Core.hideAllWardViewMenuItems();
		if(form.dyngrdDisplay().getSelectedRow() == null)
			return;
		
		form.getContextMenus().Core.getWardViewCANCEL_TRANSFERItem().setVisible(form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof PendingTransfersLiteVo);
		form.getContextMenus().Core.getWardViewTRANSFERItem().setVisible(form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof InpatientEpisodeLiteVo);
		//form.getContextMenus().Core.getWardViewDISCHARGEItem().setVisible(form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof InpatientEpisodeLiteVo);
		form.getContextMenus().Core.getWardViewASSIGNWARDItem().setVisible(form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof PendingElectiveAdmissionAdmitVo);
		form.getContextMenus().Core.getWardViewASSIGNWARDItem().setVisible(form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof PatientElectiveListForWardViewVo);	//wdev-18936
		
		//wdev-13509
		InpatientEpisodeLiteVo voInpat = null;
		if (form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof InpatientEpisodeLiteVo)
			voInpat  = (InpatientEpisodeLiteVo)form.dyngrdDisplay().getSelectedRow().getIdentifier();
		
		if (voInpat != null
			&& voInpat.getIsOnHomeLeaveIsNotNull()
			&& voInpat.getIsOnHomeLeave())
		{
			form.getContextMenus().Core.getWardViewTRANSFERItem().setVisible(true);
			form.getContextMenus().Core.getWardViewDISCHARGEItem().setVisible(true);
		}
	}

	private void loadBaysForSelectedWard(WardBayConfigVo voWardBayConfig) 
	{	
		form.cmbBay().clear();
		
		if (form.cmbWard().getValue() == null)
			return;
		
		
		LocationLiteVoCollection baysColl = domain.listBaysForCurrentWard(form.cmbWard().getValue());
		if(baysColl != null)
		{
			for(int x = 0; x < baysColl.size(); x++)
			{
				if(isfloorBedSpaceLayoutActive(voWardBayConfig, baysColl.get(x)))
					addBays(baysColl.get(x));
			}
			
			if (form.cmbBay().getValues().size() == 1)
			{
				form.cmbBay().setValue((LocationLiteVo) form.cmbBay().getValues().get(0));
				bayValueChanged();
			}
		}
	}

	private boolean isfloorBedSpaceLayoutActive(WardBayConfigVo voWardBayConfig, LocationLiteVo voBay)
	{
		if(voWardBayConfig == null)
			throw new CodingRuntimeException("voWardBayConfig cannot be null in method isfloorBedSpaceLayoutActive");
		if (voBay == null)
			throw new CodingRuntimeException("voBay cannot be null in method isfloorBedSpaceLayoutActive");
		
		if(voWardBayConfig.getBaysIsNotNull())
		{
			for(BayConfigVo voBayConfig : voWardBayConfig.getBays())
			{
				if(voBayConfig.getBay().equals(voBay))
				{
					if(voBayConfig.getFloorBedSpaceLayoutIsNotNull() && voBayConfig.getFloorBedSpaceLayout().getStatusIsNotNull())
						if(voBayConfig.getFloorBedSpaceLayout().getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
							return true;
				}
			}
		}
		
		return false;
	}

	private void addBays(LocationLiteVo bay) 
	{
		if(bay == null)
			return;
		
		form.cmbBay().newRow(bay, bay.getName());
	}

	@Override
	protected void onBedPlannerBedClicked(Bed bed) 
	{
		form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);
		form.getGlobalContext().Core.setBedInfoAction(null);
		form.dyngrdDisplay().setValue(null);
		
		form.getGlobalContext().Core.setPatientShort(null);
		if (bed != null && bed.getIdentifier() != null)
		{
			BedSpaceStateLiteVo bedSpaceState = domain.getBedSpaceState((BedSpaceVo) bed.getIdentifier());
			
			form.getGlobalContext().Core.setSelectedBedSpaceState(bedSpaceState);
			
			if (bedSpaceState != null && bedSpaceState.getInpatientEpisodeIsNotNull() 
					&& bedSpaceState.getInpatientEpisode().getPasEventIsNotNull() 
					&& bedSpaceState.getInpatientEpisode().getPasEvent().getPatientIsNotNull())
			{
				form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());
				form.getGlobalContext().Core.setPatientShort(bedSpaceState.getInpatientEpisode().getPasEvent().getPatient());
			}
		
			if(bedSpaceState.getInpatientEpisode() != null)
				form.getGlobalContext().Core.setCurrentCareContext( domain.getCareContextForPasEvent(bedSpaceState.getInpatientEpisode().getPasEvent()));
		}
		
		resetPIDBarText();//WDEV-14476 
		
		//WDEV-9790
		engine.open(form.getForms().Core.BedInfoDialog, new Object[]{new Boolean(form.isReadOnly())});
	}
	
	private DynamicGridColumn getColumn(String identifier)
	{
		return form.dyngrdDisplay().getColumns().getByIdentifier(identifier);
	}

	private void initializeDynamicGrid() 
	{	
		DynamicGrid dynGrid = form.dyngrdDisplay();
		dynGrid.clear();
		DynamicGridColumn colPatient = null;	
		colPatient = dynGrid.getColumns().newColumn("Patient", COLNAME);
		colPatient.setWidth(250);		
		colPatient.setAlignment(Alignment.CENTER);		
	}
	
	private void populateDynamicGridFromData()
	{		
		initializeDynamicGrid();
		
		DynamicGrid dynGrid = form.dyngrdDisplay();		
		DynamicGridRow dynRow = dynGrid.getRows().newRow();
		DynamicGridRow patientRow =null;
		dynRow.setIdentifier(CURRENT);
		dynRow.setReadOnly(false);
		dynRow.setSelectable(false);
		dynRow.setExpanded(true);
		
		DynamicGridCell cellPatient = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
		cellPatient.getItems().clear();
		cellPatient.setBackColor(Color.Bisque);
		cellPatient.setValue("<h3>ON THE WARD</h3>");
			
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue()!="WST")//WDEV-14410
		{	
		dynRow = cellPatient.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellHomeLeave = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellHomeLeave.setValue("<b><i>Home Leave</i></b>");
		cellHomeLeave.setBackColor(Color.Aqua);

	    InpatientEpisodeLiteVoCollection voCollHL = form.getLocalContext().getOnHomeLeave();
	    if(voCollHL != null)
	    {
			for (int i=0; i < voCollHL.size() ; i++ )
			{
			    InpatientEpisodeLiteVo voHLInpatEpis = voCollHL.get(i);
			    if(voHLInpatEpis.getIsOnHomeLeaveIsNotNull()
			    	&& voHLInpatEpis.getIsOnHomeLeave())
			    {
			    	patientRow = cellHomeLeave.getRow().getRows().newRow();
			    	patientRow.setSelectable(true);
			    	
					DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
					cellPatientRow.setAutoPostBack(true);
					cellPatientRow.setBackColor(Color.White);
					cellPatientRow.setIdentifier(HOME_LEAVE);
					cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voHLInpatEpis.getPatientString());
					String tooltip = voHLInpatEpis.getPatientString();
					if (voHLInpatEpis.getBedIsNotNull() && voHLInpatEpis.getBed().getBayIsNotNull() && voHLInpatEpis.getBed().getBay().getNameIsNotNull())
						tooltip+=" Bay: "+voHLInpatEpis.getBed().getBay().getName();
					if (voHLInpatEpis.getVacatedBedNumberIsNotNull() 
						&& voHLInpatEpis.getVacatedBedNumber().toString() != "")
						tooltip+=" Vacated Bed: "+voHLInpatEpis.getVacatedBedNumber();
					if (voHLInpatEpis.getExpectedDateOfReturnIsNotNull())
						tooltip+=" Expected Return : "+voHLInpatEpis.getExpectedDateOfReturn().toString();
					if (voHLInpatEpis.getExpectedTimeOfReturnIsNotNull())
						tooltip+=" at "+ voHLInpatEpis.getExpectedTimeOfReturn().toString();
					cellPatientRow.setTooltip(tooltip);
					if (voHLInpatEpis.getPasEventIsNotNull())
					{
						patientRow.setValue(voHLInpatEpis.getPasEvent().getPatient());
						patientRow.setIdentifier(voHLInpatEpis);
					}
			    }
			}
	    }
		}
		dynRow = cellPatient.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingOcupied = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingOcupied.setValue("<b><i>Current</i></b>");
		cellOutgoingOcupied.setBackColor(Color.Aqua);
		
	    InpatientEpisodeLiteVoCollection voCollInpatEpis = form.getLocalContext().getOnTheWard();
	    if(voCollInpatEpis != null)
	    {
			for (int i=0; i < voCollInpatEpis.size() ; i++ )
			{
			    InpatientEpisodeLiteVo voInpatEpis = voCollInpatEpis.get(i);
			    if(!voInpatEpis.isDischargeDueWithin24Hrs())
			    {
			    	patientRow = cellOutgoingOcupied.getRow().getRows().newRow();			
			    	//patientRow.setSelectable(false);
					DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
					cellPatientRow.setAutoPostBack(true);
					cellPatientRow.setBackColor(Color.White);
					cellPatientRow.setIdentifier(CURRENT);
					cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voInpatEpis.getPatientString());
					String tooltip = voInpatEpis.getPatientString();
					if (voInpatEpis.getBedIsNotNull() && voInpatEpis.getBed().getBayIsNotNull() && voInpatEpis.getBed().getBay().getNameIsNotNull())
						tooltip+=" Bay: "+voInpatEpis.getBed().getBay().getName();
					cellPatientRow.setTooltip(tooltip);
					if (voInpatEpis.getPasEventIsNotNull())
					{
						patientRow.setValue(voInpatEpis.getPasEvent().getPatient());
						patientRow.setIdentifier(voInpatEpis.getPasEvent());
					}
			    }
			}
	    }

		
		dynRow = cellPatient.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingDischarge = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingDischarge.setValue("<b><i>For Discharge</i></b>");
		cellOutgoingDischarge.setBackColor(Color.Aqua);
		
		dynRow = cellOutgoingDischarge.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingOccupiedDueDischarge24h = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingOccupiedDueDischarge24h.setValue("<b><i>Due discharge within 24h</i></b>");
		
		if(voCollInpatEpis != null)
		{
			for (int i=0; i < voCollInpatEpis.size() ; i++ )
			{
				InpatientEpisodeLiteVo voInpatEpis = voCollInpatEpis.get(i);
				
				if(voInpatEpis.isDischargeDueWithin24Hrs())
			    {
					if(voInpatEpis.getIsConfirmedDischargeIsNotNull() && voInpatEpis.getIsConfirmedDischarge())
						continue;
					
					patientRow = cellOutgoingOccupiedDueDischarge24h.getRow().getRows().newRow();	
					//patientRow.setSelectable(false);
					DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
					cellPatientRow.setAutoPostBack(true);
					cellPatientRow.setBackColor( Color.fromRGB(255, 105, 0));
					cellPatientRow.setIdentifier(CURRENT);
					cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voInpatEpis.getPatientString());
					String tooltip = voInpatEpis.getPatientString();
					if (voInpatEpis.getBedIsNotNull() && voInpatEpis.getBed().getBayIsNotNull() && voInpatEpis.getBed().getBay().getNameIsNotNull())
						tooltip+=" Bay: "+voInpatEpis.getBed().getBay().getName();
					cellPatientRow.setTooltip(tooltip);
					if (voInpatEpis.getPasEventIsNotNull())
					{
						patientRow.setValue(voInpatEpis.getPasEvent().getPatient());
						patientRow.setIdentifier(voInpatEpis.getPasEvent());
					}
			    }
			}
		}
		dynRow = cellOutgoingDischarge.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingConfirmedDischarge24h = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingConfirmedDischarge24h.setValue("<b><i>Confirmed discharge within 24h</i></b>");
		
		if(voCollInpatEpis != null)
		{
			for (int i=0; i < voCollInpatEpis.size() ; i++ )
			{
				InpatientEpisodeLiteVo voInpatEpis = voCollInpatEpis.get(i);
				
				if(voInpatEpis.isDischargeDueWithin24Hrs())
			    {
					if(voInpatEpis.getIsConfirmedDischargeIsNotNull() && voInpatEpis.getIsConfirmedDischarge())
					{
						patientRow = cellOutgoingConfirmedDischarge24h.getRow().getRows().newRow();			
						//patientRow.setSelectable(false);
						DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
						cellPatientRow.setAutoPostBack(true);
						cellPatientRow.setBackColor(Color.Red);
						cellPatientRow.setIdentifier(CURRENT);
						cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voInpatEpis.getPatientString());
						String tooltip = voInpatEpis.getPatientString();
						if (voInpatEpis.getBedIsNotNull() && voInpatEpis.getBed().getBayIsNotNull() && voInpatEpis.getBed().getBay().getNameIsNotNull())
							tooltip+=" Bay: "+voInpatEpis.getBed().getBay().getName();
						cellPatientRow.setTooltip(voInpatEpis.getPatientString());
						if (voInpatEpis.getPasEventIsNotNull())
						{
							patientRow.setValue(voInpatEpis.getPasEvent().getPatient());
							patientRow.setIdentifier(voInpatEpis.getPasEvent());
						}
				    }
			    }
			}
		}

		
		dynRow = cellPatient.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingTransfer = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingTransfer.setValue("<b><i>For Transfer Out</i></b>");
		cellOutgoingTransfer.setBackColor(Color.Aqua);
		
		PendingTransfersLiteVoCollection voCollTransfersOut = form.getLocalContext().getTransfersOut();
		if(voCollTransfersOut != null)
		{
			for (int i=0; i < voCollTransfersOut.size(); i++)
			{
				PendingTransfersLiteVo voTransferOut = voCollTransfersOut.get(i);
				patientRow = cellOutgoingTransfer.getRow().getRows().newRow();		
				//patientRow.setSelectable(false);
				DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
				cellPatientRow.setBackColor(Color.LightBlue);
				cellPatientRow.setAutoPostBack(true);		
				cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voTransferOut.getPatientString());
				String tooltip = voTransferOut.getPatientString();
				if (voTransferOut.getInpatientEpisodeIsNotNull() && voTransferOut.getInpatientEpisode().getBedIsNotNull() && voTransferOut.getInpatientEpisode().getBed().getBayIsNotNull() && voTransferOut.getInpatientEpisode().getBed().getBay().getNameIsNotNull())
					tooltip+=" Bay: "+voTransferOut.getInpatientEpisode().getBed().getBay().getName();
				cellPatientRow.setTooltip(tooltip);
				if (voTransferOut.getInpatientEpisodeIsNotNull() && voTransferOut.getInpatientEpisode().getPasEventIsNotNull())
				{
					patientRow.setValue(voTransferOut.getInpatientEpisode().getPasEvent().getPatient());
					patientRow.setIdentifier(voTransferOut.getInpatientEpisode().getPasEvent());
				}
			}
		}
	
		dynRow = dynGrid.getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellPatient1 = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
		cellPatient1.setBackColor(Color.Bisque);		
		cellPatient1.setValue("<h3>INCOMING</h3>");
				
		dynRow = cellPatient1.getRow().getRows().newRow();;
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellIncomingdmissionEmergency = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellIncomingdmissionEmergency.setValue("<b><i>Emergency Admissions</i></b>");
		
		//from PendingEmergencyAdmission
		PendingEmergencyAdmissionAdmitVoCollection voCollEmergency = form.getLocalContext().getPendingEmergency();
		if(voCollEmergency != null)
		{
			if (voCollEmergency != null)
			{
				for (int i=0; i < voCollEmergency.size(); i++ )
				{
					PendingEmergencyAdmissionAdmitVo voEmergency = voCollEmergency.get(i);
					patientRow = cellIncomingdmissionEmergency.getRow().getRows().newRow();		
					///patientRow.setSelectable(false);
					DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
					cellPatientRow.setAutoPostBack(true);		
					cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voEmergency.getPatientString());	
					cellPatientRow.setTooltip(voEmergency.getPatientString());
					if (voEmergency.getPasEventIsNotNull())
					{
						patientRow.setValue(voEmergency.getPasEvent().getPatient());
						patientRow.setIdentifier(voEmergency.getPasEvent());
					}
				}
			}
		}
		
		
		dynRow = cellPatient1.getRow().getRows().newRow();;
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellIncomingdmissionElective = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellIncomingdmissionElective.setValue("<b><i>Elective Admissions</i></b>");
		
		//wdev-18936
		if( ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() == true)
		{
			//from PatientElectiveList
			PatientElectiveListForWardViewVoCollection voCollPatientElectiveList = form.getLocalContext().getPatientElectiveList();
			if( voCollPatientElectiveList != null )
			{
				for(int k = 0; k < voCollPatientElectiveList.size();k++)
				{
					PatientElectiveListForWardViewVo voParientElectList = voCollPatientElectiveList.get(k);
					patientRow = cellIncomingdmissionElective.getRow().getRows().newRow();	
    				patientRow.setSelectable(true);
    				patientRow.setIdentifier(voParientElectList);
    				DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
    				cellPatientRow.setAutoPostBack(true);		
    				cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voParientElectList.getPatientString());			
    				cellPatientRow.setTooltip(voParientElectList.getPatientString());
    				if (voParientElectList.getReferralIsNotNull() && voParientElectList.getReferral().getCareContextIsNotNull() && voParientElectList.getReferral().getCareContext().getPasEventIsNotNull())
    				{
    					patientRow.setValue(voParientElectList.getReferral().getCareContext().getPasEvent().getPatient());
    					//patientRow.setIdentifier(voPending.getPasEvent());
    				}
				}
			}
		}
		else
		{
    		//from PendingElectiveAdmission
    		PendingElectiveAdmissionAdmitVoCollection voCollPendingElective = form.getLocalContext().getPendingElective();
    		if(voCollPendingElective != null)
    		{
    			for (int i=0; i < voCollPendingElective.size() ; i++ )
    			{
    				PendingElectiveAdmissionAdmitVo voPending = voCollPendingElective.get(i);
    				patientRow = cellIncomingdmissionElective.getRow().getRows().newRow();	
    				patientRow.setSelectable(true);
    				patientRow.setIdentifier(voPending);
    				DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
    				cellPatientRow.setAutoPostBack(true);		
    				cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voPending.getPatientString());			
    				cellPatientRow.setTooltip(voPending.getPatientString());
    				if (voPending.getPasEventIsNotNull())
    				{
    					patientRow.setValue(voPending.getPasEvent().getPatient());
    					//patientRow.setIdentifier(voPending.getPasEvent());
    				}
    			}
    		}
		}
		//----------------------------
		

		
		dynRow = cellPatient1.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellPendingTransfers = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellPendingTransfers.setValue("<b><i>For Transfer In</b></i>");
		
		PendingTransfersLiteVoCollection voCollTransfersIn = form.getLocalContext().getTransfersIn();
		if(voCollTransfersIn != null)
		{
			for (int i=0; i < voCollTransfersIn.size(); i++)
			{
				PendingTransfersLiteVo voTransferIn = voCollTransfersIn.get(i);
				patientRow = cellPendingTransfers.getRow().getRows().newRow();		
				//patientRow.setSelectable(true);
				patientRow.setIdentifier(voTransferIn);
				DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
				cellPatientRow.setAutoPostBack(true);			
				cellPatientRow.setIdentifier(INCOMING_PENDING_TRANSFERS);
				cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voTransferIn.getPatientString());			
				cellPatientRow.setTooltip(voTransferIn.getPatientString());
				if (voTransferIn.getInpatientEpisodeIsNotNull() && voTransferIn.getInpatientEpisode().getPasEventIsNotNull())
				{
					patientRow.setValue(voTransferIn.getInpatientEpisode().getPasEvent().getPatient());
				}
			}
		}	
		
		//Waiting Area
		if(form.getGlobalContext().Core.getHasWaitingAreaIsNotNull() && form.getGlobalContext().Core.getHasWaitingArea())
		{
			DynamicGridRow dynWRow = dynGrid.getRows().newRow();
			dynWRow.setReadOnly(false);
			dynWRow.setSelectable(false);
			dynWRow.setExpanded(true);
			DynamicGridRow wRow = null;
			
			DynamicGridCell cellWPatient = dynWRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
			cellWPatient.getItems().clear();
			cellWPatient.setBackColor(Color.Bisque);
			cellWPatient.setValue("<h3>WAITING AREA</h3>");
			
			if(form.getLocalContext().getWaitingAreaIsNotNull() && form.getLocalContext().getWaitingArea().size() > 0)
			{
				InpatientEpisodeLiteVoCollection voCollWaiting = form.getLocalContext().getWaitingArea();
			    if(voCollWaiting != null)
			    {
					for (int i=0; i < voCollWaiting.size() ; i++ )
					{
					    InpatientEpisodeLiteVo voInpatEpis = voCollWaiting.get(i);
					    wRow = cellWPatient.getRow().getRows().newRow();
					    wRow.setIdentifier(voInpatEpis);
					    //wRow.setSelectable(false);
						DynamicGridCell cellWRow = wRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
						cellWRow.setAutoPostBack(true);
						cellWRow.setBackColor(Color.White);
						cellWRow.setIdentifier(CURRENT);
						
						cellWRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voInpatEpis.getPatientString());
						cellWRow.setTooltip(voInpatEpis.getPatientString());
						if (voInpatEpis.getPasEventIsNotNull())
						{
							wRow.setValue(voInpatEpis.getPasEvent().getPatient());
						}
					}
			    }
			}
		}
	}

	private void loadSelectedLayout()
	{			
		form.bedPlanner().clear();
		
		if (form.cmbBay().getValue() == null)
			return;
		
		BedSpaceVoCollection bedsColl = null;		
		
		FloorBedSpaceLayoutVo layout = domain.listLayoutForCurrentBay(form.cmbBay().getValue());
		if(layout != null && layout.getFloorLayout() != null)
		{
			form.bedPlanner().setPlan(layout.getFloorLayout().getVml());
			
			if(layout.getBedSpaces() != null)
			{
				bedsColl = new BedSpaceVoCollection();
				for(int x = 0; x < layout.getBedSpaces().size(); x++)
				{
					BedSpaceVo bedVo = layout.getBedSpaces().get(x);
					if(bedVo != null)
					{
						Bed bed = null;
						try
						{
							bed = new Bed(bedVo.getID_BedSpace(), Bed.WHITE.getType(), bedVo.getVml(),Position.parse(bedVo.getTextPosition()), Position.parse(bedVo.getImagePosition()));
							bed.setColor(Bed.WHITE);
						}
						catch (ParseException e)
						{
							throw new CodingRuntimeException("Parse exception on Bed Planner");
						}
						
						bed.setIdentifier(bedVo);
						
						//WDEV-8272
						if(bedVo.getBedNumberIsNotNull())
							bed.setNumber(bedVo.getBedNumber());

						BedSpaceStateLiteVo state = domain.getBedSpaceState(bedVo);
									
						BedSpaceStateStatusLiteVo currentStataus = state.getCurrentBedStatus();
						if (currentStataus.getBedStatusIsNotNull())
						{
							if (currentStataus.getBedStatus().equals(BedStatus.AVAILABLE))
							{
								bed.setColor(bed.GREEN);	
							}
							else if (currentStataus.getBedStatus().equals(BedStatus.OCCUPIED))
							{
								if(state != null)
								{
									if(state.getInpatientEpisodeIsNotNull())
									{
										if(state.getInpatientEpisode().getEstDischargeDateIsNotNull())
										{
											if(isInpatientEpisodeonTransefrOutList(state.getInpatientEpisode()))
											{
												bed.setColor(bed.LIGHTBLUE);
											}
											//check if estDischargeDate is within the next 24 hours
											else if(state.getInpatientEpisode().isDischargeDueWithin24Hrs() && (state.getInpatientEpisode().getIsConfirmedDischarge() == null || !state.getInpatientEpisode().getIsConfirmedDischarge()))
											{
												bed.setColor(bed.ORANGE);	
											}										
											else if(state.getInpatientEpisode().isDischargeDueWithin24Hrs() && state.getInpatientEpisode().getIsConfirmedDischargeIsNotNull() && state.getInpatientEpisode().getIsConfirmedDischarge())
											{
												bed.setColor(bed.RED);
											}									
											else
												bed.setColor(bed.WHITE);
												
										}
										else if(isInpatientEpisodeonTransefrOutList(state.getInpatientEpisode()))
										{
											bed.setColor(bed.LIGHTBLUE);
										}
										
										if(state.getInpatientEpisode().getIsMaternityInpatientIsNotNull() && state.getInpatientEpisode().getIsMaternityInpatient())
										{
											Image imgNumInfants = calculateInfants(state.getInpatientEpisode());
											if(imgNumInfants != null)
												bed.addAttachedImage(imgNumInfants, "Number of Infants");
										}
										else
										{
											//check if selected is an infant - if so get the mothers admission details and add image with tooltip of admission details
											AdmissionDetailLiteVo voAdmission = domain.getMothersAdmission(state.getInpatientEpisode().getPasEvent().getPatient());
											if(voAdmission != null)
											{
												bed.addAttachedImage(form.getImages().Core.Maternity, createAdmissionTooltip(voAdmission));
											}
										}
										
										
									}
								}
							}
							else if (currentStataus.getBedStatus().equals(BedStatus.CLOSED))
							{
								bed.setColor(bed.DARKGRAY);	
							}
							else if (currentStataus.getBedStatus().equals(BedStatus.FOR_CLEANING))
							{
								bed.setColor(bed.PINK); 
								
							}
						}
						
						if(state != null)
						{
							if(state.getInpatientEpisodeIsNotNull())
							{
								if(state.getInpatientEpisode().getPasEventIsNotNull())
								{
									if(state.getInpatientEpisode().getPasEvent().getPatientIsNotNull())
									{
										PatientShort voPatShort = state.getInpatientEpisode().getPasEvent().getPatient();
										
										String text = "";
										if(voPatShort.getNameIsNotNull())
											text += voPatShort.getName().toShortForm();
										
										if(state.getInpatientEpisode().getPasEvent().getConsultantIsNotNull())
											text += "<br>" + state.getInpatientEpisode().getPasEvent().getConsultant().getIMosName();
										
										bed.setText(text);
										
										//alerts image
										if(voPatShort.getHasAlertsIsNotNull() && voPatShort.getHasAlerts())
											bed.addAttachedImage(form.getImages().Core.Alert16, "Alert(s) present");
									}
								}
								if( ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() == true) //wdev-15062
								{
									//wdev-14784
									if( state.getInpatientEpisode().getVTEAssessmentStatusIsNotNull() && VTEAsessmentStatus.REQUIRED.equals(state.getInpatientEpisode().getVTEAssessmentStatus()))
									{
										bed.addAttachedImage(form.getImages().OCRR.Requested, "VTE Assessment Status: " + state.getInpatientEpisode().getVTEAssessmentStatus().getIItemText());
									}
									else if( state.getInpatientEpisode().getVTEAssessmentStatusIsNotNull() && VTEAsessmentStatus.INPROGRESS.equals(state.getInpatientEpisode().getVTEAssessmentStatus()))
									{
										bed.addAttachedImage(form.getImages().OCRR.InProgress,"VTE Assessment Status: " + state.getInpatientEpisode().getVTEAssessmentStatus().getIItemText());
									}
								}
								//---------
							}
						}
						
						bed.setNumber(bed.getNumber());
						
						bed.setTooltip(bedVo.getDescription());
						
						//WDEV-17935
						if (state!=null && state.getCurrentBedStatusIsNotNull() && ( currentStataus.getBedStatus().equals(BedStatus.FOR_CLEANING) || currentStataus.getBedStatus().equals(BedStatus.CLOSED) ))
						{
							StringBuffer tooltip=new StringBuffer();
							if (bedVo.getDescription()!=null)
								tooltip.append("<b>Description : </b> "+ bedVo.getDescription()+"<br>");
							
							tooltip.append((state.getCurrentBedStatus().getReasonForClosureIsNotNull() ? "<b>Reason for Closure : </b>"+state.getCurrentBedStatus().getReasonForClosure()+"<br>":"")+(state.getCurrentBedStatus().getEstReopeningDateTimeIsNotNull() ? "<b>Estimated Re-opening Date/Time : </b>" + state.getCurrentBedStatus().getEstReopeningDateTime(): "") );
							bed.setTooltip(tooltip.toString());
						}
						
						if (state != null)	
						{
							if (state.getIsMaternityIsNotNull() && state.getIsMaternity())
								bed.addAttachedImage(form.getImages().Core.Person, "Maternity");
						}
												
						form.bedPlanner().addBed(bed);
						bedsColl.add(bedVo);
					}
				}
			}			
		}
		form.getLocalContext().setBedsCollection(bedsColl);
	}
	
	private String createAdmissionTooltip(AdmissionDetailLiteVo voAdmission)
	{
		if (voAdmission == null)
			throw new CodingRuntimeException("voAdmission cannot be null in method createAdmissionTooltip");
		
		StringBuffer strTooltip = new StringBuffer();
		String patient = voAdmission.getPatientString();
		String admissionDateTime = voAdmission.getAdmissionDateTimeIsNotNull() ?  voAdmission.getAdmissionDateTime().toString(true) : "";
		String ward = voAdmission.getWardIsNotNull() ? voAdmission.getWard().getName() : "[DISCHARGED]";
		String bedNo = voAdmission.getBedIsNotNull() && voAdmission.getBed().getBedNumberIsNotNull() ? voAdmission.getBed().getBedNumber() : "";
		String consultant = voAdmission.getConsultantIsNotNull() ? voAdmission.getConsultant().getIMosName() : "";
		String specialty = voAdmission.getSpecialtyIsNotNull() ? voAdmission.getSpecialty().getText(): "";
		
		strTooltip.append("<html><head></head><body><p><font color='#FF0000'><strong>Mothers Admission Detail</strong></font>" +
				"<table width='240' border='0'><tr><td width='84'><font color='#0033FF'>Patient: </font></td><td>" +
				patient +
				"</td></tr><tr><td><font color='#0033FF'>Adm. Date/Time :</font></td><td>" +
				admissionDateTime +
				"</td></tr><tr><td><font color='#0033FF'>Ward :</font></td><td>" +
				ward +
				"</td></tr><tr><td><font color='#0033FF'>Bed No :</font></td><td>" +
				bedNo +
				"</td></tr><tr><td><font color='#0033FF'>Consultant :</font></td><td>" +
				consultant +
				"</td></tr><tr><td><font color='#0033FF'>Specialty :</font></td><td>" +
				specialty +
				"</td></tr></table></p>" +
				"</body></html>");
		
		return strTooltip.toString();
	}

	private Image calculateInfants(InpatientEpisodeLiteVo inpatientEpisode)
	{
		Image imgNumInfants = null;
		//get number of infants for this patient
		int count = domain.countInfants(inpatientEpisode.getPasEvent().getPatient());
		
		if(count == 1)
			imgNumInfants = form.getImages().Core.Infant1;
		if(count == 2)
			imgNumInfants = form.getImages().Core.Infant2;
		if(count == 3)
			imgNumInfants = form.getImages().Core.Infant3;
		if(count == 4)
			imgNumInfants = form.getImages().Core.Infant4;
		if(count == 5)
			imgNumInfants = form.getImages().Core.Infant5;
		if(count == 6)
			imgNumInfants = form.getImages().Core.Infant6;
		if(count == 7)
			imgNumInfants = form.getImages().Core.Infant7;
		if(count == 8)
			imgNumInfants = form.getImages().Core.Infant8;
		
		return imgNumInfants;
	}

	private boolean isInpatientEpisodeonTransefrOutList(InpatientEpisodeRefVo voInpatEpis)
	{
		if(voInpatEpis == null)
			throw new CodingRuntimeException("voInpatEpis is null in method isInpatientEpisodeonTransefrOutList");
		
		PendingTransfersLiteVoCollection voCollTransfersOut = form.getLocalContext().getTransfersOut();
		if(voCollTransfersOut == null)
			return false;
		
		for(PendingTransfersLiteVo voTransferOut : voCollTransfersOut)
		{
			if(voTransferOut.getInpatientEpisodeIsNotNull() && voTransferOut.getInpatientEpisode().equals(voInpatEpis))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onDyngrdDisplayRowSelectionChanged(DynamicGridRow row) 
	{
		if (row.getValue() instanceof PatientShort)
		{
			form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());
			form.getGlobalContext().Core.setPatientShort((PatientShort) row.getValue());
		}
		
		//WDEV-11449 - setting CareContext for EDischarge
		setCareContextIfApplicable(row);
			
		updateContextMenuState();	
	}

	
	protected void setCareContextIfApplicable(DynamicGridRow row)
	{
		if(row.getIdentifier() instanceof PASEventRefVo)
			form.getGlobalContext().Core.setCurrentCareContext( domain.getCareContextForPasEvent((PASEventRefVo) row.getIdentifier()));	
		else if(row.getIdentifier() instanceof PendingTransfersLiteVo)
		{
			if(((PendingTransfersLiteVo)row.getIdentifier()).getInpatientEpisodeIsNotNull())
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForPasEvent(((PendingTransfersLiteVo)row.getIdentifier()).getInpatientEpisode().getPasEvent()));
		}
		else if(row.getIdentifier() instanceof PendingTransfersLiteVo)
		{
			if(((PendingTransfersLiteVo)row.getIdentifier()).getInpatientEpisodeIsNotNull())
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForPasEvent(((PendingTransfersLiteVo)row.getIdentifier()).getInpatientEpisode().getPasEvent()));
		}
		else if(row.getIdentifier() instanceof InpatientEpisodeLiteVo)
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForPasEvent(((InpatientEpisodeLiteVo)row.getIdentifier()).getPasEvent()));
		}
		else if(row.getIdentifier() instanceof PendingElectiveAdmissionAdmitVo)
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForPasEvent(((PendingElectiveAdmissionAdmitVo)row.getIdentifier()).getPasEvent()));
		}
		else
			form.getGlobalContext().Core.setCurrentCareContext(null);
		
		resetPIDBarText();//WDEV-14476 
		
	}
	
	//WDEV-14476
	private void resetPIDBarText()
	{
		if ( ! form.getGlobalContext().Core.getPatientShortIsNotNull())
			return;
		
		if ( ! form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			return;

		new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare()));
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		//if(result.equals(DialogResult.OK))
		//{
			loadData();
			loadSelectedLayout();
			populateDynamicGridFromData();
			updateContextMenuState();
		//}
		
		//engine.clearPatientContextInformation();
	}

	@Override
	protected void onCmbBayValueChanged() throws PresentationLogicException 
	{
		bayValueChanged();
		populateSearchCriteriaDataFromScreen();///WDEV-12925
	}

	private void bayValueChanged() 
	{
		form.imbRefresh().setEnabled(false);
		if(form.cmbBay().getValue() == null)
		{
			clearDisplay(true);
			updateContextMenuState();
			return;
		}
		
		form.imbRefresh().setEnabled(true);
		loadData();
		loadSelectedLayout();
		populateDynamicGridFromData();
		updateContextMenuState();
	}

	private void loadData()
	{
		form.getLocalContext().setOnHomeLeave(form.cmbWard().getValue() == null ? null : domain.listHomeLeaveByWard(form.cmbWard().getValue()));
		form.getLocalContext().setOnTheWard(form.cmbWard().getValue() == null ? null : domain.listInpatientEpisodeByWard(form.cmbWard().getValue()));
		form.getLocalContext().setTransfersOut(form.cmbWard().getValue() == null ? null : domain.listPendingTransfersOutByWard(form.cmbWard().getValue()));
		form.getLocalContext().setPendingElective(form.cmbWard().getValue() == null ? null : domain.listPendingElectiveAdmission(form.cmbWard().getValue()));
		form.getLocalContext().setPatientElectiveList(form.cmbWard().getValue() == null ? null : domain.listPatientElectiveListForWardViewVo(form.cmbWard().getValue(), new Date()));	//wdev-18936, wdev-19115
		form.getLocalContext().setPendingEmergency(form.cmbWard().getValue() == null ? null : domain.listEmergencyAdmission(form.cmbWard().getValue()));
		form.getLocalContext().setTransfersIn(form.cmbWard().getValue() == null ? null : domain.listPendingTransfersInByWard(form.cmbWard().getValue()));
		form.getLocalContext().setWaitingArea(form.cmbWard().getValue() == null ? null : domain.listWaitingAreaPatientsByWard(form.cmbWard().getValue()));
		form.getGlobalContext().Core.setADTTransfersIn(form.getLocalContext().getTransfersIn());
		form.getGlobalContext().Core.setADTTransfersOut(form.getLocalContext().getTransfersOut());		
	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		clearDisplay(false);
		form.imbRefresh().setEnabled(false);
		form.cmbBay().clear();//WDEV-15908 
		loadWardsForSelectedHosp();
		populateSearchCriteriaDataFromScreen();///WDEV-12925
	}

	private void loadWardsForSelectedHosp()
	{
		form.cmbWard().clear();
		
		if(form.cmbHospital().getValue() != null)
		{
			LocationLiteVoCollection wardsColl = domain.listWardsForCurrentLocation(form.cmbHospital().getValue());
			if(wardsColl != null)
			{
				for(int x = 0; x < wardsColl.size(); x++)
				{
					addWard(wardsColl.get(x));
				}
				
				//WDEV-15908 
				if(wardsColl.size() == 1)
				{
					form.cmbWard().setValue(wardsColl.get(0));
					wardValueChanged();
				}
			}
		}
	}
	
	private void populateSearchCriteriaDataFromScreen()///WDEV-12925
	{
		// If the Ward View was opened as a dialog then do not save the Search Criteria
		if (engine.isDialog())
			return;
		
		if (form.cmbHospital().getValue() == null)
		{
			form.getGlobalContext().Core.setWardViewSearchCriteria(null);
			updateContextMenuState(); //WDEV-14586
			return;
		}
		WardViewSearchCriteriaVo crit = new WardViewSearchCriteriaVo();
		crit.setHospital(form.cmbHospital().getValue());
		crit.setWard(form.cmbWard().getValue());
		crit.setBay(form.cmbBay().getValue());
		form.getGlobalContext().Core.setWardViewSearchCriteria(crit);
		updateContextMenuState(); //WDEV-14586
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.WardView.TRANSFER:
				form.getGlobalContext().Core.setSelectedBedSpaceState(null);
				form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.TRANSFERWAITINGAREAPATIENT); 
				if(form.dyngrdDisplay().getSelectedRow() != null && form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof InpatientEpisodeLiteVo)
				{
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient((InpatientEpisodeLiteVo) form.dyngrdDisplay().getSelectedRow().getIdentifier());
					engine.open(form.getForms().Core.BedInfoDialog);
				}
			break;
			case GenForm.ContextMenus.CoreNamespace.WardView.DISCHARGE:
				form.getGlobalContext().Core.setSelectedBedSpaceState(null);
				form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.DISCHARGEWAITINGAREAPATIENT); 
				if(form.dyngrdDisplay().getSelectedRow() != null && form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof InpatientEpisodeLiteVo)
				{
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient((InpatientEpisodeLiteVo) form.dyngrdDisplay().getSelectedRow().getIdentifier());
					engine.open(form.getForms().Core.BedInfoDialog);
				}
			break;
			case GenForm.ContextMenus.CoreNamespace.WardView.CANCEL_TRANSFER:
				cancelTransfer();
			break;
			case GenForm.ContextMenus.CoreNamespace.WardView.ASSIGNWARD:
				
				if( ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() == true )	//wdev-18936
				{
					form.getGlobalContext().Core.setPatientElectiveListForWardViewVo((PatientElectiveListForWardViewVo) form.dyngrdDisplay().getSelectedRow().getIdentifier());
				}
				else
					form.getGlobalContext().Core.setPendingElectiveAdmission((PendingElectiveAdmissionAdmitVo) form.dyngrdDisplay().getSelectedRow().getIdentifier());
				
				engine.open(form.getForms().Core.AssignWard);
			break;
			default :
			break;
		}
	}

	private void cancelTransfer()
	{
		if(form.dyngrdDisplay().getSelectedRow() == null || form.dyngrdDisplay().getSelectedRow().getIdentifier() == null)
			throw new CodingRuntimeException("No Pending Transfer selected in method cancelTransfer");
		
		PendingTransfersLiteVo voTransfer = (PendingTransfersLiteVo)form.dyngrdDisplay().getSelectedRow().getIdentifier();
		try
		{
			domain.cancelTransfer(voTransfer, form.cmbWard().getValue()); //WDEV-10421
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			bayValueChanged();
			return;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		bayValueChanged();
	}

	@Override
	protected void onImbRefreshClick() throws PresentationLogicException
	{
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbRefresh().setTooltip("Click button to start the automatic refresh of Ward View");	
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			form.imbRefresh().setTooltip("Click button to stop the automatic refresh of Ward View");
			form.getTimers().gettimerSearch().setEnabled(true);
			form.imbRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
			bayValueChanged();
		}
		
		enableSearchCriteria(!form.getTimers().gettimerSearch().isEnabled());
	}

	private void enableSearchCriteria(boolean bEnable)
	{
		form.cmbHospital().setEnabled(bEnable);
		form.cmbWard().setEnabled(bEnable);
		form.cmbBay().setEnabled(bEnable);
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		bayValueChanged();
	}

	@Override
	protected void onBtnPrintReportClick() throws PresentationLogicException
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		
		if(form.cmbWard().getValue()==null)		
		{
			engine.showMessage("Please select a ward !");
			return;
		}
		
		//we need a better way to do this
		Object[] obj = domain.getSystemReportAndTemplate(new Integer(297));
		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
				
		client.addSeed(new SeedValue("Ward",  form.cmbWard().getValue().getID_Location().intValue(), Integer.class));		
		client.addSeed(new SeedValue("Consultant",  null, Integer.class));
		client.addSeed(new SeedValue("Specialty",  null, Integer.class));
		
		
		String resultUrl = "";
		try
		{
			resultUrl = client.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return;
		}
		
		engine.openUrl(resultUrl);
		
	}

		
}
