//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.wardview;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.framework.interfaces.ILocation value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.framework.interfaces.ILocation value)
		{
			return super.control.removeRow(value);
		}
		public ims.framework.interfaces.ILocation getValue()
		{
			return (ims.framework.interfaces.ILocation)super.control.getValue();
		}
		public void setValue(ims.framework.interfaces.ILocation value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbBayComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWardComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.WardViewSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.WardViewSearchCriteriaVo' of the global context variable 'Core.WardViewSearchCriteria' is not supported.");
		if(!context.isValidContextType(FormName.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'FormName' of the global context variable 'Core.SelectingPatientForm' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Timers
		timers = new Timers();
		timers.timerSearch = factory.createTimer(0, 10, false);
		form.addTimer(timers.timerSearch);

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Core.contextMenuWardView = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Core.contextMenuWardViewTRANSFERItem = factory.createMenuItem(startControlID.intValue() + 1, "Transfer", true, false, new Integer(102323), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3070001)))
			contextMenus.Core.contextMenuWardView.add(contextMenus.Core.contextMenuWardViewTRANSFERItem);
		contextMenus.Core.contextMenuWardViewDISCHARGEItem = factory.createMenuItem(startControlID.intValue() + 2, "Discharge", true, false, new Integer(102324), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3070002)))
			contextMenus.Core.contextMenuWardView.add(contextMenus.Core.contextMenuWardViewDISCHARGEItem);
		contextMenus.Core.contextMenuWardViewCANCEL_TRANSFERItem = factory.createMenuItem(startControlID.intValue() + 3, "Cancel Transfer", true, false, new Integer(102148), true, false);
		contextMenus.Core.contextMenuWardView.add(contextMenus.Core.contextMenuWardViewCANCEL_TRANSFERItem);
		contextMenus.Core.contextMenuWardViewASSIGNWARDItem = factory.createMenuItem(startControlID.intValue() + 4, "Assign Ward", true, false, new Integer(103108), true, false);
		contextMenus.Core.contextMenuWardView.add(contextMenus.Core.contextMenuWardViewASSIGNWARDItem);
		form.registerMenu(contextMenus.Core.contextMenuWardView);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 592, 616, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 400, 61, 144, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Main Specialty>", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 304, 64, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Main Specialty :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 304, 34, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 64, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bay :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 34, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital :", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 24, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Print", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 88, 32, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 88, 62, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbBayTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbBayTemp);
		cmbBayComboBox cmbBay = (cmbBayComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbBayComboBox.class, m_cmbBayTemp);
		super.addComboBox(cmbBay);
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 352, 32, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbWardTemp);
		cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
		super.addComboBox(cmbWard);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 608, 8, 232, 616, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, contextMenus.Core.contextMenuWardView, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 554, 27, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.TimerStartEnabled24, this.getImages().Core.TimerStartDisabled24, "Click button to start the automatic refresh of Ward View", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// Bed Planner Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 24, 96, 560, 466, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(BedPlanner.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblMainSpecialty()
	{
		return (Label)super.getControl(1);
	}
	public Button btnPrintReport()
	{
		return (Button)super.getControl(6);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(0);
	}
	public cmbBayComboBox cmbBay()
	{
		return (cmbBayComboBox)super.getComboBox(1);
	}
	public cmbWardComboBox cmbWard()
	{
		return (cmbWardComboBox)super.getComboBox(2);
	}
	public DynamicGrid dyngrdDisplay()
	{
		return (DynamicGrid)super.getControl(10);
	}
	public ImageButton imbRefresh()
	{
		return (ImageButton)super.getControl(11);
	}
	public BedPlanner bedPlanner()
	{
		return (BedPlanner)super.getControl(12);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				BedInfoDialog = new LocalFormName(102263);
				AssignWard = new LocalFormName(102322);
			}
			public final FormName BedInfoDialog;
			public final FormName AssignWard;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
			OCRR = new OCRRImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				CriticalError = new ImageHelper(102250, "Images/Core/CriticalError.gif", new Integer(16), new Integer(16));
				Home = new ImageHelper(102220, "Images/Core/Home-2.gif", new Integer(16), new Integer(16));
				nurse_blue = new ImageHelper(102205, "Images/Core/nurse3.gif", new Integer(17), new Integer(17));
				Person = new ImageHelper(102200, "Images/Core/User-Properties-4.gif", new Integer(16), new Integer(16));
				Users = new ImageHelper(102317, "Images/Core/users.ico", new Integer(16), new Integer(16));
				Infant1 = new ImageHelper(102390, "Images/Core/glass_numbers_1.png", new Integer(25), new Integer(25));
				Infant2 = new ImageHelper(102391, "Images/Core/glass_numbers_2.png", new Integer(25), new Integer(25));
				Infant3 = new ImageHelper(102392, "Images/Core/glass_numbers_3.png", new Integer(25), new Integer(25));
				Infant4 = new ImageHelper(102393, "Images/Core/glass_numbers_4.png", new Integer(25), new Integer(25));
				Infant5 = new ImageHelper(102394, "Images/Core/glass_numbers_5.png", new Integer(25), new Integer(25));
				Infant6 = new ImageHelper(102395, "Images/Core/glass_numbers_6.png", new Integer(25), new Integer(25));
				Infant7 = new ImageHelper(102396, "Images/Core/glass_numbers_7.png", new Integer(25), new Integer(25));
				Infant8 = new ImageHelper(102397, "Images/Core/glass_numbers_8.png", new Integer(25), new Integer(25));
				RefreshEnabled16 = new ImageHelper(102169, "Images/Core/Refresh.gif", new Integer(16), new Integer(16));
				RefreshDisabled16 = new ImageHelper(102166, "Images/Core/RefreshDisabled16.gif", new Integer(16), new Integer(16));
				Maternity = new ImageHelper(102455, "Images/Core/pre_school_24.png", new Integer(23), new Integer(23));
				Information = new ImageHelper(102217, "Images/Core/Information.gif", new Integer(16), new Integer(16));
				TimerStartDisabled24 = new ImageHelper(102310, "Images/Core/sinc_disabled_24x24.png", new Integer(24), new Integer(24));
				TimerStartEnabled24 = new ImageHelper(102308, "Images/Core/sinc_24x24.png", new Integer(24), new Integer(24));
				TimerStopEnabled24 = new ImageHelper(102309, "Images/Core/close_24x24.png", new Integer(24), new Integer(24));
				Alert16 = new ImageHelper(102519, "Images/Core/allergies_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image CriticalError;
			public final ims.framework.utils.Image Home;
			public final ims.framework.utils.Image nurse_blue;
			public final ims.framework.utils.Image Person;
			public final ims.framework.utils.Image Users;
			public final ims.framework.utils.Image Infant1;
			public final ims.framework.utils.Image Infant2;
			public final ims.framework.utils.Image Infant3;
			public final ims.framework.utils.Image Infant4;
			public final ims.framework.utils.Image Infant5;
			public final ims.framework.utils.Image Infant6;
			public final ims.framework.utils.Image Infant7;
			public final ims.framework.utils.Image Infant8;
			public final ims.framework.utils.Image RefreshEnabled16;
			public final ims.framework.utils.Image RefreshDisabled16;
			public final ims.framework.utils.Image Maternity;
			public final ims.framework.utils.Image Information;
			public final ims.framework.utils.Image TimerStartDisabled24;
			public final ims.framework.utils.Image TimerStartEnabled24;
			public final ims.framework.utils.Image TimerStopEnabled24;
			public final ims.framework.utils.Image Alert16;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Gp_Add = new ImageHelper(103139, "Images/Admin/User-Add-4.gif", new Integer(16), new Integer(16));
				HcpRemove = new ImageHelper(103131, "Images/Admin/User-Delete.gif", new Integer(16), new Integer(16));
				RefreshDisabled24 = new ImageHelper(103367, "Images/Admin/refresh_disabled_24.png", new Integer(24), new Integer(24));
				RefreshEnabled24 = new ImageHelper(103366, "Images/Admin/refresh_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Gp_Add;
			public final ims.framework.utils.Image HcpRemove;
			public final ims.framework.utils.Image RefreshDisabled24;
			public final ims.framework.utils.Image RefreshEnabled24;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				InProgress = new ImageHelper(116129, "Images/OCRR/Inprogress.gif", new Integer(16), new Integer(16));
				Requested = new ImageHelper(116117, "Images/OCRR/EMail-Forward.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image InProgress;
			public final ims.framework.utils.Image Requested;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
		public final OCRRImages OCRR;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_BedsCollection = new ims.framework.ContextVariable("BedsCollection", prefix + "_lv_Core.WardView.__internal_x_context__BedsCollection_" + componentIdentifier + "");
			cxl_TransfersIn = new ims.framework.ContextVariable("TransfersIn", prefix + "_lv_Core.WardView.__internal_x_context__TransfersIn_" + componentIdentifier + "");
			cxl_TransfersOut = new ims.framework.ContextVariable("TransfersOut", prefix + "_lv_Core.WardView.__internal_x_context__TransfersOut_" + componentIdentifier + "");
			cxl_OnTheWard = new ims.framework.ContextVariable("OnTheWard", prefix + "_lv_Core.WardView.__internal_x_context__OnTheWard_" + componentIdentifier + "");
			cxl_PendingElective = new ims.framework.ContextVariable("PendingElective", prefix + "_lv_Core.WardView.__internal_x_context__PendingElective_" + componentIdentifier + "");
			cxl_PendingEmergency = new ims.framework.ContextVariable("PendingEmergency", prefix + "_lv_Core.WardView.__internal_x_context__PendingEmergency_" + componentIdentifier + "");
			cxl_WaitingArea = new ims.framework.ContextVariable("WaitingArea", prefix + "_lv_Core.WardView.__internal_x_context__WaitingArea_" + componentIdentifier + "");
			cxl_OnHomeLeave = new ims.framework.ContextVariable("OnHomeLeave", prefix + "_lv_Core.WardView.__internal_x_context__OnHomeLeave_" + componentIdentifier + "");
			cxl_PatientElectiveList = new ims.framework.ContextVariable("PatientElectiveList", prefix + "_lv_Core.WardView.__internal_x_context__PatientElectiveList_" + componentIdentifier + "");
		}
		
		public boolean getBedsCollectionIsNotNull()
		{
			return !cxl_BedsCollection.getValueIsNull(context);
		}
		public ims.core.vo.BedSpaceVoCollection getBedsCollection()
		{
			return (ims.core.vo.BedSpaceVoCollection)cxl_BedsCollection.getValue(context);
		}
		public void setBedsCollection(ims.core.vo.BedSpaceVoCollection value)
		{
			cxl_BedsCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_BedsCollection = null;
		public boolean getTransfersInIsNotNull()
		{
			return !cxl_TransfersIn.getValueIsNull(context);
		}
		public ims.core.vo.PendingTransfersLiteVoCollection getTransfersIn()
		{
			return (ims.core.vo.PendingTransfersLiteVoCollection)cxl_TransfersIn.getValue(context);
		}
		public void setTransfersIn(ims.core.vo.PendingTransfersLiteVoCollection value)
		{
			cxl_TransfersIn.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TransfersIn = null;
		public boolean getTransfersOutIsNotNull()
		{
			return !cxl_TransfersOut.getValueIsNull(context);
		}
		public ims.core.vo.PendingTransfersLiteVoCollection getTransfersOut()
		{
			return (ims.core.vo.PendingTransfersLiteVoCollection)cxl_TransfersOut.getValue(context);
		}
		public void setTransfersOut(ims.core.vo.PendingTransfersLiteVoCollection value)
		{
			cxl_TransfersOut.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TransfersOut = null;
		public boolean getOnTheWardIsNotNull()
		{
			return !cxl_OnTheWard.getValueIsNull(context);
		}
		public ims.core.vo.InpatientEpisodeLiteVoCollection getOnTheWard()
		{
			return (ims.core.vo.InpatientEpisodeLiteVoCollection)cxl_OnTheWard.getValue(context);
		}
		public void setOnTheWard(ims.core.vo.InpatientEpisodeLiteVoCollection value)
		{
			cxl_OnTheWard.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OnTheWard = null;
		public boolean getPendingElectiveIsNotNull()
		{
			return !cxl_PendingElective.getValueIsNull(context);
		}
		public ims.core.vo.PendingElectiveAdmissionAdmitVoCollection getPendingElective()
		{
			return (ims.core.vo.PendingElectiveAdmissionAdmitVoCollection)cxl_PendingElective.getValue(context);
		}
		public void setPendingElective(ims.core.vo.PendingElectiveAdmissionAdmitVoCollection value)
		{
			cxl_PendingElective.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PendingElective = null;
		public boolean getPendingEmergencyIsNotNull()
		{
			return !cxl_PendingEmergency.getValueIsNull(context);
		}
		public ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection getPendingEmergency()
		{
			return (ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection)cxl_PendingEmergency.getValue(context);
		}
		public void setPendingEmergency(ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection value)
		{
			cxl_PendingEmergency.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PendingEmergency = null;
		public boolean getWaitingAreaIsNotNull()
		{
			return !cxl_WaitingArea.getValueIsNull(context);
		}
		public ims.core.vo.InpatientEpisodeLiteVoCollection getWaitingArea()
		{
			return (ims.core.vo.InpatientEpisodeLiteVoCollection)cxl_WaitingArea.getValue(context);
		}
		public void setWaitingArea(ims.core.vo.InpatientEpisodeLiteVoCollection value)
		{
			cxl_WaitingArea.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WaitingArea = null;
		public boolean getOnHomeLeaveIsNotNull()
		{
			return !cxl_OnHomeLeave.getValueIsNull(context);
		}
		public ims.core.vo.InpatientEpisodeLiteVoCollection getOnHomeLeave()
		{
			return (ims.core.vo.InpatientEpisodeLiteVoCollection)cxl_OnHomeLeave.getValue(context);
		}
		public void setOnHomeLeave(ims.core.vo.InpatientEpisodeLiteVoCollection value)
		{
			cxl_OnHomeLeave.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OnHomeLeave = null;
		public boolean getPatientElectiveListIsNotNull()
		{
			return !cxl_PatientElectiveList.getValueIsNull(context);
		}
		public ims.core.vo.PatientElectiveListForWardViewVoCollection getPatientElectiveList()
		{
			return (ims.core.vo.PatientElectiveListForWardViewVoCollection)cxl_PatientElectiveList.getValue(context);
		}
		public void setPatientElectiveList(ims.core.vo.PatientElectiveListForWardViewVoCollection value)
		{
			cxl_PatientElectiveList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveList = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CoreNamespace Core = new CoreNamespace();
		public final class CoreNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class WardView implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int TRANSFER = 1;
				public static final int DISCHARGE = 2;
				public static final int CANCEL_TRANSFER = 3;
				public static final int ASSIGNWARD = 4;
			}
			public void disableAllWardViewMenuItems()
			{
				this.contextMenuWardViewTRANSFERItem.setEnabled(false);
				this.contextMenuWardViewDISCHARGEItem.setEnabled(false);
				this.contextMenuWardViewCANCEL_TRANSFERItem.setEnabled(false);
				this.contextMenuWardViewASSIGNWARDItem.setEnabled(false);
			}
			public void hideAllWardViewMenuItems()
			{
				this.contextMenuWardViewTRANSFERItem.setVisible(false);
				this.contextMenuWardViewDISCHARGEItem.setVisible(false);
				this.contextMenuWardViewCANCEL_TRANSFERItem.setVisible(false);
				this.contextMenuWardViewASSIGNWARDItem.setVisible(false);
			}
			private Menu contextMenuWardView;
			public ReadOnlyMenuItem getWardViewTRANSFERItem()
			{
				return this.contextMenuWardViewTRANSFERItem;
			}
			private MenuItem contextMenuWardViewTRANSFERItem;
			public ReadOnlyMenuItem getWardViewDISCHARGEItem()
			{
				return this.contextMenuWardViewDISCHARGEItem;
			}
			private MenuItem contextMenuWardViewDISCHARGEItem;
			public ReadOnlyMenuItem getWardViewCANCEL_TRANSFERItem()
			{
				return this.contextMenuWardViewCANCEL_TRANSFERItem;
			}
			private MenuItem contextMenuWardViewCANCEL_TRANSFERItem;
			public ReadOnlyMenuItem getWardViewASSIGNWARDItem()
			{
				return this.contextMenuWardViewASSIGNWARDItem;
			}
			private MenuItem contextMenuWardViewASSIGNWARDItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}


	public final class Timers implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private Timer timerSearch;
		public Timer gettimerSearch()
		{
			return timerSearch;
		}
		public void enableAll()
		{
			timerSearch.setEnabled(true);
		}
		public void disableAll()
		{
			timerSearch.setEnabled(false);
		}
	}
	private Timers timers;
	public Timers getTimers()
	{
		return this.timers;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[115];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-ISMATERNITY", "IsMaternity");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-NOOFINFANTS", "NoOfInfants");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-COMMENT", "Comment");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ID", "ID_Location");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-NAME", "Name");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ISACTIVE", "IsActive");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-TYPE", "Type");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ISCONFIRMEDDISCHARGE", "IsConfirmedDischarge");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-CONFIRMEDDISCHARGEDATETIME", "ConfirmedDischargeDateTime");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ISMATERNITYINPATIENT", "IsMaternityInpatient");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-DISCHARGEREADYDATE", "DischargeReadyDate");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ISONHOMELEAVE", "IsOnHomeLeave");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-EXPECTEDDATEOFRETURN", "ExpectedDateOfReturn");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-EXPECTEDTIMEOFRETURN", "ExpectedTimeOfReturn");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-VACATEDBEDNUMBER", "VacatedBedNumber");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-DATEONHOMELEAVE", "DateOnHomeLeave");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-ID", "ID_PendingElectiveAdmission");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-ELECTIVEADMISSIONSTATUS", "ElectiveAdmissionStatus");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-WARDTYPE", "WardType");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-TCITYPE", "TCIType");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-TCIDATE", "TCIDate");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-TCITIME", "TCITime");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-ISMATERNITY", "IsMaternity");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-REASONFORADMISSION", "ReasonForAdmission");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-EXPECTEDSTAY", "ExpectedStay");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-ADMISSIONSOURCE", "AdmissionSource");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-ADMISSIONMETHOD", "AdmissionMethod");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-REFERRINGCONSULTANT", "ReferringConsultant");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Core.PendingElectiveAdmission", "BO-1014100012-PATIENTSTATUS", "PatientStatus");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentInPatientListWard", "BO-1007100007-ID", "ID_Location");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentInPatientListWard", "BO-1007100007-NAME", "Name");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentInPatientListWard", "BO-1007100007-ISACTIVE", "IsActive");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentInPatientListWard", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentInPatientListWard", "BO-1007100007-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Core.CurrentInPatientListWard", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Core.PatientElectiveListForWardViewVo", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Core.PatientElectiveListForWardViewVo", "BO-1014100020-BED", "Bed");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
