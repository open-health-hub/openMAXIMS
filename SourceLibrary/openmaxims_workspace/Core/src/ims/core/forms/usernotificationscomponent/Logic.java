//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.71 build 3581.24216)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.core.forms.usernotificationscomponent;

import ims.core.vo.NotificationVo;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.NotificationPriority;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.INotification;
import ims.framework.interfaces.INotificationsProvider;
import ims.framework.utils.Image;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	public void refreshData()
	{
		clearInstanceControls();
		
		INotificationsProvider notificationsProvider = engine.getNotificationsProvider();
		if(notificationsProvider != null)
		{
			displayNotifications(false);
			
			displaySeen();
		}
		
		updateControlsState();
	}

	private void displayNotifications(boolean includeSeen) 
	{
		INotification[] unseenNotifications = engine.getNotificationsProvider().getNotifications(engine.getLoggedInUser().getUserId(), form.dteFrom().getValue(), form.dteTo().getValue(), form.txtMessage().getValue(), form.txtSource().getValue(), form.cmbPriority().getValue(), includeSeen);
		if(unseenNotifications != null)
		{
			for(int x = 0; x < unseenNotifications.length; x++)
			{
				addNotification(unseenNotifications[x]);
			}
		}
	}
	
	private void displaySeen() 
	{
		if(form.chkSeen().getValue())
		{
			displayNotifications(form.chkSeen().getValue());
		}
	}

	private void addNotification(INotification notification) 
	{
		if(notification == null)
			return;
		
		GenForm.grdNotificationsRow row = form.grdNotifications().getRows().newRow();
		
		//row.setBold(!notification.wasSeen());
		//row.setcolImage(getColImage(notification.getPriority(), notification.wasSeen()));
		
		if(notification.getINotificationDateTime() != null)
		{
			row.setcolDateTime(notification.getINotificationDateTime().toString());
		}		
		if(notification.getINotificationPriority() != null)
		{
			row.setcolPriority(notification.getINotificationPriority().toString());
		}
		if(notification.getINotificationMessage() != null)
		{
			row.setcolMessage(notification.getINotificationMessage());
		}
		if(notification.getINotificationSource() != null)
		{
			row.setcolSource(notification.getINotificationSource());
		}
		
		row.setValue(notification);
	}
	
	private Image getColImage(NotificationPriority notificationPriority, boolean wasSeen) 
	{
		if(notificationPriority == null)
			return null;
		
		if(notificationPriority.equals(NotificationPriority.CRITICAL))
			return wasSeen ? form.getImages().Core.NotificationSeenCritical16 : form.getImages().Core.NotificationUnSeenCritical16;
			
		if(notificationPriority.equals(NotificationPriority.HIGH))
			return wasSeen ? form.getImages().Core.NotificationSeenMajor16 : form.getImages().Core.NotificationUnSeenMajor16;
		
		if(notificationPriority.equals(NotificationPriority.NORMAL))
			return wasSeen ? form.getImages().Core.NotificationSeenNormal16 : form.getImages().Core.NotificationUnSeenNormal16;
			
		if(notificationPriority.equals(NotificationPriority.LOW))
			return wasSeen ? form.getImages().Core.NotificationSeenLow16 : form.getImages().Core.NotificationUnSeenLow16;
				
		return null;
	}

	private void clearInstanceControls() 
	{
		form.grdNotifications().getRows().clear();
		updateControlsState();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.NotificationsMenu.MARKALL:
			{
				engine.getNotificationsProvider().markAllAsSeen(engine.getLoggedInUser().getUserId());
				refreshData();
				break;
			}
		}
	}

	private void updateControlsState() 
	{
		form.ctnDetails().setCollapsed(!(form.grdNotifications().getValue() instanceof INotification));
		
		form.getContextMenus().Core.getNotificationsMenuMARKALLItem().setVisible(engine.getLoggedInUser().getDebugMode() != null && engine.getLoggedInUser().getDebugMode() && form.getMode().equals(FormMode.VIEW));
	}

	@Override
	protected void onGrdNotificationsSelectionChanged() throws PresentationLogicException 
	{
		if(form.grdNotifications().getValue() instanceof NotificationVo)
		{
			populateDetails(form.grdNotifications().getValue());
			
			//engine.getNotificationsProvider().markAsSeen(form.grdNotifications().getValue());
			
			form.grdNotifications().getSelectedRow().setBold(false);
			form.grdNotifications().getSelectedRow().setcolImage(getColImage(((INotification)form.grdNotifications().getValue()).getINotificationPriority(), true));
		}
		
		updateControlsState();
	}

	private void populateDetails(INotification value) 
	{
		form.ctnDetails().txtDate().setValue(value.getINotificationDateTime().toString());
		form.ctnDetails().txtPriority().setValue(value.getINotificationPriority().getText());
		form.ctnDetails().txtSourceD().setValue(value.getINotificationSource());
		form.ctnDetails().txtMessageD().setValue(value.getINotificationMessage());
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException 
	{
		clearSearch();
		updateControlsState();
	}

	private void clearSearch() 
	{
		form.txtMessage().setValue(null);
		form.txtSource().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.cmbPriority().setValue(null);
		form.chkSeen().setValue(null);
		form.grdNotifications().getRows().clear();
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException 
	{
		search();
		updateControlsState();
	}

	private void search() 
	{
		refreshData();
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		fillPriority();
		updateControlsState();
	}

	private void fillPriority() 
	{
		for(int i=1; i<=NotificationPriority.getAll().size(); i++)
		{
			form.cmbPriority().newRow(NotificationPriority.parse(i), NotificationPriority.parse(i).getText());
		}
	}
}
