//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.53 build 2628.18363)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.chartinggroupselection;

import ims.framework.enumerations.DialogResult;
import ims.vo.interfaces.IChartValueGroup;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		populate();
	}	
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(buildSelection())
			engine.close(DialogResult.OK);
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	void initialize()
	{
		form.chklistGroups().setMaxCheckedItems(form.getGlobalContext().Core.getChartMaxGroupSelection().intValue());
		
		if(form.getGlobalContext().Core.getChartAvailableDatasets().length > form.getGlobalContext().Core.getChartMaxGroupSelection().intValue())
		{
			form.lblInfo().setValue("A maximum of " + form.getGlobalContext().Core.getChartMaxGroupSelection() + " items can be selected.");
			form.lblInfo().setVisible(true);
		}
		else
		{
			form.lblInfo().setVisible(false);
		}
	}
	void populate()
	{
		for(int x = 0; x < form.getGlobalContext().Core.getChartAvailableDatasets().length; x++)
		{
			addDataset(form.getGlobalContext().Core.getChartAvailableDatasets()[x]);
		}
	}
	void addDataset(IChartValueGroup group) 
	{
		form.chklistGroups().newRow(group, group.getIChartValueGroupName(), group.getIChartValueGroupImage(), shouldBeSelected(group));
	}
	boolean shouldBeSelected(IChartValueGroup group)
	{
		for(int x = 0; x < form.getGlobalContext().Core.getChartDatasetSelection().length; x++)
		{
			if(group.equals(form.getGlobalContext().Core.getChartDatasetSelection()[x]))
				return true;
		}
		
		return false;
	}
	boolean buildSelection()
	{
		if(form.chklistGroups().getValues() == null || form.chklistGroups().getValues().length == 0)
		{
			engine.showMessage("Please select at least one item");
			return false;
		}
		
		form.getGlobalContext().Core.setChartDatasetSelection(form.chklistGroups().getValues());
		return true;
	}
}
