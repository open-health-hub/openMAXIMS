//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.51 build 2460.39233)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.correspondencelist;

import ims.clinical.vo.ClinicalCorrespondenceLiteVo;
import ims.clinical.vo.ClinicalCorrespondenceLiteVoCollection;
import ims.clinical.vo.lookups.ClinicalCorrespondenceType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CorrespondenceSearchCriteriaVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.PatIdType;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int		AUTH_DATE_ID			= 1;
	private static final int		AUTH_HCP_ID				= 2;
	private static final int		PAT_NAME_ID				= 3;
	private static final int		PAT_NUM_ID				= 4;
	private static final int		STATUS_ID				= 5;
	private static final int		RESP_HCP_ID				= 6;
	private static final int		NOTE_ID					= 7;

	private static final Integer	COL_AUTH_DATE		= new Integer(AUTH_DATE_ID);
	private static final Integer	COL_AUTH_HCP		= new Integer(AUTH_HCP_ID);
	private static final Integer	COL_PAT_NAME		= new Integer(PAT_NAME_ID);
	private static final Integer	COL_PAT_NUM			= new Integer(PAT_NUM_ID);
	private static final Integer	COL_STATUS			= new Integer(STATUS_ID);
	private static final Integer	COL_RESP_HCP		= new Integer(RESP_HCP_ID);
	private static final Integer	COL_NOTE			= new Integer(NOTE_ID);

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void initialize() 
	{
		formatGrid();
		preSetSavedSearchCriteria();
		setValueQmbResponsible();
		setValueQmbAuthoring();
		setValueDateTime();
		clearGlobalContextVariables();
	}

	private void clearGlobalContextVariables() 
	{
		form.getGlobalContext().Clinical.setReturnToFormMode(null);
		form.getGlobalContext().Clinical.setReturnToFormName(null);
	}

	private void preSetSavedSearchCriteria() 
	{
		if (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.DocumentGeneration))
		{
			if (form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteriaIsNotNull())
			{
				if (form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getAuthoringHCP() != null)
				{
					form.qmbAuthoringHCP().newRow(form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getAuthoringHCP(), form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getAuthoringHCP().getName().toShortForm() );
					form.qmbAuthoringHCP().setValue(form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getAuthoringHCP());
				}
				if (form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getResponsibleHCP() != null)
				{
					form.qmbResponsibleHCP().newRow(form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getResponsibleHCP(), form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getResponsibleHCP().getName().toShortForm() );
					form.qmbResponsibleHCP().setValue(form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getResponsibleHCP());
				}
				form.dteFrom().setValue(form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getDateFrom());
				form.dteTo().setValue(form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getDateTo());
				form.cmbCorrespondanceType().setValue(form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getCorrespondanceType());
				form.cmbStatus().setValue(form.getGlobalContext().Clinical.getCurrentCorrespondanceSearchCriteria().getCorrespondanceStatus());
				
				searchCorrespondance();
			}
		}
	}

	private void formatGrid() 
	{
		form.dyngrdCorrespondence().clear();
		
		form.dyngrdCorrespondence().setSelectable(true);
		
		DynamicGridColumn column = form.dyngrdCorrespondence().getColumns().newColumn("Authoring Date/Time");
		column.setIdentifier(COL_AUTH_DATE);
		column.setWidth(130);
		column.setDynamicWidthSupported(true);

		column = form.dyngrdCorrespondence().getColumns().newColumn("Authoring HCP");
		column.setIdentifier(COL_AUTH_HCP);
		column.setWidth(140);
		column.setDynamicWidthSupported(true);

		column = form.dyngrdCorrespondence().getColumns().newColumn("Patient Name");
		column.setIdentifier(COL_PAT_NAME);
		column.setWidth(140);
		column.setDynamicWidthSupported(true);

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		column = form.dyngrdCorrespondence().getColumns().newColumn(dispIdType != null ? dispIdType.getText() : "Number");
		column.setIdentifier(COL_PAT_NUM);
		column.setWidth(70);
		column.setDynamicWidthSupported(true);

		if (form.cmbStatus().getValue() == null)
		{
			column = form.dyngrdCorrespondence().getColumns().newColumn("Status");
			column.setIdentifier(COL_STATUS);
			column.setWidth(100);
			column.setDynamicWidthSupported(true);
		}

		column = form.dyngrdCorrespondence().getColumns().newColumn("Responsible HCP");
		column.setIdentifier(COL_RESP_HCP);
		column.setWidth(140);
		column.setDynamicWidthSupported(true);

		column = form.dyngrdCorrespondence().getColumns().newColumn("Clinical Note");
		column.setIdentifier(COL_NOTE);
		column.setWidth(-1);
	}

	private void open()
	{
		displayCorrespondance(domain.listClinicalCorrespondence(createSearchCriteria()));
		enableContextMenu();
	}

	private CorrespondenceSearchCriteriaVo createSearchCriteria() 
	{
		CorrespondenceSearchCriteriaVo searchVo = new CorrespondenceSearchCriteriaVo();
		searchVo.setAuthoringHCP(form.qmbAuthoringHCP().getValue());
		searchVo.setCorrespondanceStatus(form.cmbStatus().getValue());
		searchVo.setCorrespondanceType(form.cmbCorrespondanceType().getValue());
		searchVo.setDateFrom(form.dteFrom().getValue());
		searchVo.setDateTo(form.dteTo().getValue());
		searchVo.setResponsibleHCP(form.qmbResponsibleHCP().getValue());
		return searchVo;
	}

	protected void onImbResetClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		clearPatientRelatedContexts();
		enableContextMenu();
	}
	
	private void clearPatientRelatedContexts() 
	{
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setCurrentClinicalContact(null);
	}

	private void clearScreen() 
	{
		form.qmbAuthoringHCP().setValue(null);
		form.qmbResponsibleHCP().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.cmbCorrespondanceType().setValue(null);
		form.cmbStatus().setValue(null);
		
		form.dyngrdCorrespondence().clear();
		formatGrid();
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		searchCorrespondance();
		if(form.dyngrdCorrespondence().getRows().size() < 1)
			engine.showMessage("No records found");
		
			
		
	}
	
	private void searchCorrespondance() 
	{
		open();
	}

	protected void onDyngrdCorrespondenceRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		enableContextMenu();
		
		if (form.dyngrdCorrespondence().getSelectedRow().getValue() != null)
		{
			ClinicalCorrespondenceLiteVo voCCLite = (ClinicalCorrespondenceLiteVo) form.dyngrdCorrespondence().getSelectedRow().getValue();
			
			form.getGlobalContext().Core.setPatientShort(domain.getPatientForCareContextId(voCCLite.getCareContext()));
			
			form.getGlobalContext().Clinical.setCurrentCorrespondanceSearchCriteria(createSearchCriteria());
			
			form.getGlobalContext().Clinical.setReturnToFormName(form.getForms().Core.CorrespondenceList);
			
			form.getGlobalContext().Core.setCurrentClinicalContact(voCCLite.getClinicalContact());
		}

	}

	private void enableContextMenu()
	{		
		form.getContextMenus().getGenericGridViewItem().setVisible(form.dyngrdCorrespondence().getSelectedRow() != null);
		form.getContextMenus().getGenericGridViewItem().setEnabled(form.dyngrdCorrespondence().getSelectedRow() != null);
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.View :
				viewInstance();
			break;
		}
		
		enableContextMenu();
	}

	private void viewInstance() 
	{
		if (form.dyngrdCorrespondence().getSelectedRow().getValue() != null)
		{
			engine.open(form.getForms().Clinical.DocumentGenerationDlg);
		}
	}

	protected void onQmbResponsibleHCPTextSubmited(String value) throws PresentationLogicException 
	{
		form.qmbResponsibleHCP().clear();
		
		HcpLiteVoCollection coll = domain.listHCP(value);
		for (int i = 0; i < coll.size(); i++)
		{
			HcpLiteVo med = coll.get(i);
			form.qmbResponsibleHCP().newRow(med, med.toString());			
		}
		if (coll.size() == 1)
		{
			form.qmbResponsibleHCP().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.qmbResponsibleHCP().showOpened();		
		}				
		
	}

	private void setValueQmbResponsible()
	{
		HcpLiteVo mosLiteVo = (HcpLiteVo) domain.getHcpLiteUser();
		if (mosLiteVo != null)
		{
			form.qmbResponsibleHCP().newRow(mosLiteVo, mosLiteVo.getName().toString());
			form.qmbResponsibleHCP().setValue(mosLiteVo);
		}
	}
	
	private void setValueQmbAuthoring()
	{
		HcpLiteVo mosLiteVo = (HcpLiteVo) domain.getHcpLiteUser();
		if (mosLiteVo != null)
		{
			form.qmbAuthoringHCP().newRow(mosLiteVo, mosLiteVo.getName().toString());
			form.qmbAuthoringHCP().setValue(mosLiteVo);
		}
	}
	
	private void setValueDateTime()
	{
		Date date = new Date();
		form.dteTo().setValue(date);
		form.dteFrom().setValue(new Date().addDay(-1));
	}
	
	protected void onQmbAuthoringHCPTextSubmited(String value) throws PresentationLogicException 
	{
		form.qmbAuthoringHCP().clear();
		
		HcpLiteVoCollection coll = domain.listHCP(value);
		for (int i = 0; i < coll.size(); i++)
		{
			HcpLiteVo med = coll.get(i);
			form.qmbAuthoringHCP().newRow(med, med.toString());			
		}
		if (coll.size() == 1)
		{
			form.qmbAuthoringHCP().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.qmbAuthoringHCP().showOpened();		
		}				
		
	}
	
	private DynamicGridColumn getColByIdentifier(Object indentifier)
	{
		return form.dyngrdCorrespondence().getColumns().getByIdentifier(indentifier);
	}

	private void displayCorrespondance(ClinicalCorrespondenceLiteVoCollection collection)
	{
		formatGrid();
		
		form.dyngrdCorrespondence().getRows().clear();
		
		for (int i = 0; collection != null && i < collection.size(); i++)
		{
			ClinicalCorrespondenceLiteVo voCCLite = collection.get(i);
			
			DynamicGridRow row = form.dyngrdCorrespondence().getRows().newRow();

			DynamicGridCell cellAuthorDate = row.getCells().newCell(getColByIdentifier(COL_AUTH_DATE), DynamicCellType.LABEL);
			cellAuthorDate.setValue(voCCLite.getAuthoringInformation().getAuthoringDateTimeIsNotNull() ? voCCLite.getAuthoringInformation().getAuthoringDateTime().toString() : "");
			cellAuthorDate.setIdentifier(COL_AUTH_DATE);
			cellAuthorDate.setWidth(130);

			DynamicGridCell cellAuthorHCP = row.getCells().newCell(getColByIdentifier(COL_AUTH_HCP), DynamicCellType.LABEL);
			cellAuthorHCP.setValue(voCCLite.getAuthoringInformation().getAuthoringHcpIsNotNull() ? voCCLite.getAuthoringInformation().getAuthoringHcp().toString() : "");
			cellAuthorHCP.setIdentifier(COL_AUTH_HCP);
			cellAuthorHCP.setWidth(140);

			DynamicGridCell cellPatName = row.getCells().newCell(getColByIdentifier(COL_PAT_NAME), DynamicCellType.LABEL);

			PatientShort patient = null;
			if(voCCLite.getCareContextIsNotNull() && voCCLite.getCareContext().getEpisodeOfCareIsNotNull() && voCCLite.getCareContext().getEpisodeOfCare().getCareSpellIsNotNull())
				patient = voCCLite.getCareContext().getEpisodeOfCare().getCareSpell().getPatient();
			cellPatName.setValue(patient != null? patient.getName().toShortForm() : "");
			cellPatName.setIdentifier(COL_PAT_NAME);
			cellPatName.setWidth(140);

			DynamicGridCell cellPatNumber = row.getCells().newCell(getColByIdentifier(COL_PAT_NUM), DynamicCellType.LABEL);
			cellPatNumber.setValue(patient != null && patient.getDisplayId() != null? patient.getDisplayId().getValue() : "");
			cellPatNumber.setIdentifier(COL_PAT_NUM);
			cellPatNumber.setWidth(70);

			if (form.cmbStatus().getValue() == null)
			{
				DynamicGridCell cellStatus = row.getCells().newCell(getColByIdentifier(COL_STATUS), DynamicCellType.LABEL);
				cellStatus.setValue(voCCLite.getCurrentStatusIsNotNull() ? voCCLite.getCurrentStatus().getCorrespondenceStatus().toString() : "");
				cellStatus.setIdentifier(COL_STATUS);
				cellStatus.setWidth(100);
			}

			DynamicGridCell cellRespHCP = row.getCells().newCell(getColByIdentifier(COL_RESP_HCP), DynamicCellType.LABEL);
			cellRespHCP.setValue(voCCLite.getCareContext().getEpisodeOfCare().getResponsibleHCPIsNotNull() ? voCCLite.getCareContext().getEpisodeOfCare().getResponsibleHCP().toString() : "");
			cellRespHCP.setIdentifier(COL_RESP_HCP);
			cellRespHCP.setWidth(140);

			DynamicGridCell cellNote = row.getCells().newCell(getColByIdentifier(COL_NOTE), DynamicCellType.HTMLVIEW);

			if (voCCLite.getTypeIsNotNull() && voCCLite.getType().equals(ClinicalCorrespondenceType.MEDICALINPATIENTDISCHARGE) )
			{
				if (voCCLite.getInpatientDischargeSummaryIsNotNull())
					cellNote.setValue(voCCLite.getInpatientDischargeSummary().getClinicalNoteIsNotNull() ? voCCLite.getInpatientDischargeSummary().getClinicalNote().getClinicalNote().toString() : "");
			}
			else if (voCCLite.getTypeIsNotNull() && voCCLite.getType().equals(ClinicalCorrespondenceType.MEDICALOUTPATIENTLETTER) )
			{
				if (voCCLite.getOPDNotesIsNotNull())
					cellNote.setValue(voCCLite.getOPDNotes().getClinicalNoteIsNotNull() ? voCCLite.getOPDNotes().getClinicalNote().getClinicalNote().getClinicalNote().toString() : "");
			}
			
			cellNote.setIdentifier(COL_NOTE);
			cellNote.setWidth(-1);

			row.setValue(voCCLite);
		}
	}

	protected void onDteToValueChanged() throws PresentationLogicException
	{
		if (form.dteFrom().getValue() != null)
		{
			if (form.dteTo().getValue() != null && form.dteTo().getValue().isLessThan(form.dteFrom().getValue()))
			{
				engine.showMessage("The To date cannot be before the From date.");
				form.dteTo().setValue(null);
				form.dteTo().setFocus();
			}
		}
		
	}

	protected void onDteFromValueChanged() throws PresentationLogicException 
	{
		if (form.dteTo().getValue() != null)
		{
			if (form.dteFrom().getValue() != null && form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				engine.showMessage("The From date cannot be after the To date.");
				form.dteFrom().setValue(null);
				form.dteFrom().setFocus();
			}
		}
	}

}
