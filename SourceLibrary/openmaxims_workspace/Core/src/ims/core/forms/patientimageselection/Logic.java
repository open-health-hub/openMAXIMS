//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3607.22976)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientimageselection;

import java.awt.AlphaComposite;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.RenderingHints;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.imageio.ImageIO;

import sun.awt.image.BufferedImageGraphicsConfig;
import eu.medsea.mimeutil.MimeUtil;
import ims.admin.vo.AppImageVo;
import ims.admin.vo.lookups.ImageType;
import ims.admin.vo.lookups.ImageTypeCollection;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.EnvironmentConfig;
import ims.core.vo.AppDBImageVo;
import ims.core.vo.PatientImageVo;
import ims.framework.LayerBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Base64;
import ims.utils.Base64Coder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	boolean debug = true;	
	private static final int width = 162;
	private static final int height = 173;
	private static final int UPLOAD = -1;
	private static final int CAPTURE = -2;
	
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		if (args != null)
		{
			if (args[0] != null && args[0] instanceof AppImageVo)
			{
				form.lyrPatientImage().tabUpload().imgImageUpload().setValue((AppImageVo)args[0]);
			}
			else
			{
				form.lyrPatientImage().tabUpload().imgImageUpload().setValue(form.getImages().Core.NoPatientImage);
			}
		}
		
		initialise();
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);		
	}
	
	private String encodeToBase64(byte[] content) 
	{	
		if (debug) {
			System.out.println("Starting Base64 encryption");
	    }
		String encImage = String.valueOf(Base64Coder.encode(content));
		if (debug) {
			System.out.println("Done");
	    }		
		if (debug) {
			System.out.println("Base64 encode : " + encImage);
			System.out.println("Base64 encode length : " + encImage.length());
	    }
		
		return encImage;
	}
			
	private ImageType getImageType(String type)
	{
		
		ImageTypeCollection typeCollection = ims.admin.vo.lookups.LookupHelper.getImageType(this.domain.getLookupService());
		for(int x = 0; x < typeCollection.size(); x++)
		{
			if (type != null && typeCollection.get(x).getText().toLowerCase().equals(type.toLowerCase()))//wdev-15203
				return typeCollection.get(x);
		}
	
		return null;	
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		String imageFilename = form.getLocalContext().getSelectedFile();
		if (imageFilename == null || imageFilename.equals(""))
		{
			engine.showMessage("Image cannot be saved with no file name specified");
			return;
		}	
		try {
			
			String 					uploadFileName 	= getBaseName(imageFilename);
			ByteArrayOutputStream 	baos 			= new ByteArrayOutputStream();   	  		
   	  	  	   	  		
   	  		// Resize original image,
   	  		BufferedImage originalImage = ImageIO.read(new File(EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "/" + uploadFileName));	   	  				 
			double imageW,  imageH;
			imageW = originalImage.getWidth();
		    imageH = originalImage.getHeight();
			
		    double scale = 0;
		    if (width < imageW) {	    
		    	scale = Math.min(width/imageW, height/imageH);
		    }
		    else {
		    	scale = Math.min(imageW/width, imageH/height);
		    }
		    
		    int drawW = (int) (imageW * scale);
	        int drawH = (int) (imageH * scale);			   	  		
   	  		
   	  		//BufferedImage resizeImageJpg 	= resizeImage(originalImage);
	   	  	baos = new ByteArrayOutputStream();
			ImageIO.write(resizeTrick(originalImage, drawW, drawH), "png", baos);
	   	  	//ImageIO.write(resizeImageJpg, getFileType(), baos); 
	   	  	byte[] content = baos.toByteArray();
	   	  	String encodedResizeImage = encodeToBase64(content);
	   	  			
   	  		PatientImageVo patientImage = null;
   	  		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
   	  		{
   	  			int patientID = form.getGlobalContext().Core.getPatientShort().getID_Patient();
   	  			patientImage = domain.getPatientImage(patientID);
   	  		}
   	  		else
   	  		{	
   	  			patientImage = new PatientImageVo();
   	  		}
   	  		
   	  		AppDBImageVo dbImageVo = patientImage.getDBPhoto();
   	  		if (dbImageVo == null)
   	  			dbImageVo = new AppDBImageVo();
   	   			
   	  		dbImageVo.setImageData(encodedResizeImage);
   	  		dbImageVo.setImageType(getImageType(getFileType()));
   	  		patientImage.setDBPhoto(dbImageVo);
   	  		
   	  		form.getGlobalContext().Core.setPatientImage(dbImageVo);
   	   		engine.close(DialogResult.OK);
		} 
		catch (IOException err) 
		{		
			engine.showMessage(err.getMessage());
			return;
		}
	}
	
	private String getFileType() 
	{	
		return form.getLocalContext().getSelectedFileTypeIsNotNull() ? form.getLocalContext().getSelectedFileType() : "jpg";
	}

	protected void onfileupldPatientImageFileUploaded(String fileName)
	{			
		form.getLocalContext().setSelectedFile(fileName);
		String uploadFileName = getBaseName(fileName);

		MimeUtil.registerMimeDetector("eu.medsea.mimeutil.detector.MagicMimeMimeDetector");
		String filePath = EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + uploadFileName;
        File file = new File (filePath);
        String fileType = MimeUtil.getExtension(file);
        form.getLocalContext().setSelectedFileType(fileType);
        System.out.println(fileType);        
        
        ArrayList<String> patientPhotoTempFiles = form.getGlobalContext().Core.getPatientPhotoTempFilesIsNotNull() ? form.getGlobalContext().Core.getPatientPhotoTempFiles() :  new ArrayList<String>();
		patientPhotoTempFiles.add(filePath);
        
        //Allowed types
        boolean found = false;
        ImageTypeCollection typeCollection = ims.admin.vo.lookups.LookupHelper.getImageType(this.domain.getLookupService());
		for(int x = 0; x < typeCollection.size(); x++)
		{
			if (fileType != null && typeCollection.get(x).getText().toLowerCase().equals(fileType.toLowerCase())) {//wdev-15203
				found = true;
				break;
			}
		}

		if (!found)
        {
       	 	engine.showMessage("Sorry, your uploaded file type is not allowed! (Only jpg, png, gif)");
        	return;
        }     
        
        boolean allowSize = false;
        long size = file.length()/1024; //KB
        if (size < 200 )
        {
        	allowSize = true;
        }
        
        if (!allowSize)
        {
       	 	engine.showMessage("Sorry, your uploaded file size is too big! (Max size 200KB)");
        	return;
        }        
                
        BufferedImage originalImage;		
        try 
		{
			originalImage = ImageIO.read(new File(EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + uploadFileName));
			String resizeFilePath = EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "resized_" + uploadFileName;
			
			double imageW,  imageH;
			imageW = originalImage.getWidth();
		    imageH = originalImage.getHeight();
			
		    double scale = 0;
		    if (width < imageW) {	    
		    	scale = Math.min(width/imageW, height/imageH);
		    }
		    else {
		    	scale = Math.min(imageW/width, imageH/height);
		    }
		    
		    int drawW = (int) (imageW * scale);
	        int drawH = (int) (imageH * scale);
			
			ImageIO.write(resizeTrick(originalImage, drawW, drawH), "png", (new File(resizeFilePath)));
			
			patientPhotoTempFiles.add(resizeFilePath.replace("\\", "/"));
			form.getGlobalContext().Core.setPatientPhotoTempFiles(patientPhotoTempFiles);
			
			AppImageVo vo = new AppImageVo();
			
			if (ConfigFlag.GEN.APPLICATION_URL.getValue() == "")
			{
				vo.setImagePath(EnvironmentConfig.getAplicationURL() + (ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "resized_" + uploadFileName).replace("\\", "/"));
			}
			else
			{
				vo.setImagePath(ConfigFlag.GEN.APPLICATION_URL.getValue() + (ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "resized_" + uploadFileName).replace("\\", "/"));
			}
								
			form.lyrPatientImage().tabUpload().imgImageUpload().setValue(vo);			
			form.btnSave().setEnabled(true);
		}
		catch (IOException err) 
		{		
			engine.showMessage(err.getMessage());
		}					    	  			
	}	
	
	protected void onfileupldPatientImageFileSelected(String fileName) 
	{
		form.getLocalContext().setSelectedFile(fileName);		
		
	}
	private String getBaseName(String fullFileName)
	{
		int ind = fullFileName.lastIndexOf("/");
		if (ind == -1)
		{
			ind = fullFileName.lastIndexOf("\\");			
		}
		if (ind == -1)
			return fullFileName;
		
		if (ind + 1 == fullFileName.length())
			return "";
		
		return fullFileName.substring(ind + 1);
	}
	private void initialise()
	{
		form.getLocalContext().setCurrentImage(new AppImageVo());							
		form.lyrPatientImage().tabUpload().setHeaderEnabled(true);
		form.lyrPatientImage().tabScan().setHeaderEnabled(true);
		form.btnSave().setEnabled(false);
	}
	
	private static BufferedImage resize(BufferedImage image, int width, int height) 
	{
		int type = image.getType() == 0? BufferedImage.TYPE_INT_ARGB : image.getType();
		BufferedImage resizedImage = new BufferedImage(width, height, type);
		Graphics2D g = resizedImage.createGraphics();
		g.setComposite(AlphaComposite.Src);
		g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
		g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g.drawImage(image, 0, 0, width, height, null);
		g.dispose();
	
		return resizedImage;
	}

	private static BufferedImage resizeTrick(BufferedImage image, int width, int height) 
	{
		image = createCompatibleImage(image);
		image = resize(image, width, height);
		//image = blurImage(image);
		return image;//resize(image, width, height);
	}

	public static BufferedImage blurImage(BufferedImage image) 
	{
		float ninth = 1.0f/9.0f;
		float[] blurKernel = {
				ninth, ninth, ninth,
				ninth, ninth, ninth,
				ninth, ninth, ninth
		};

		Map<RenderingHints.Key, Object> map = new HashMap<RenderingHints.Key, Object>();
		map.put(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
		map.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
		map.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
		RenderingHints hints = new RenderingHints(map);
		BufferedImageOp op = new ConvolveOp(new Kernel(3, 3, blurKernel), ConvolveOp.EDGE_NO_OP, hints);
		
		return op.filter(image, null);
	}

	private static BufferedImage createCompatibleImage(BufferedImage image) 
	{
		GraphicsConfiguration gc = BufferedImageGraphicsConfig.getConfig(image);
		int w = image.getWidth();
		int h = image.getHeight();
		BufferedImage result = gc.createCompatibleImage(w, h, Transparency.TRANSLUCENT);
		Graphics2D g2 = result.createGraphics();
		g2.drawRenderedImage(image, null);
		g2.dispose();
	
		return result;
	}
	
	//Resize, scale and enhance image quality
	private static BufferedImage resizeImage(BufferedImage originalImage)
	{		
		int type = originalImage.getType() == 0? BufferedImage.TYPE_INT_ARGB : originalImage.getType();
 		
		double imageW,  imageH;
		imageW = originalImage.getWidth();
	    imageH = originalImage.getHeight();
		
	    double scale = 0;
	    if (width < imageW) {	    
	    	scale = Math.min(width/imageW, height/imageH);
	    }
	    else {
	    	scale = Math.min(imageW/width, imageH/height);
	    }
	    
	    int drawW = (int) (imageW * scale);
        int drawH = (int) (imageH * scale);
	   
        //return getScaledInstance(originalImage, drawW, drawH, RenderingHints.VALUE_INTERPOLATION_BILINEAR, true);		 
        return resizeImageWithHint(originalImage, drawW, drawH, type);
	}		
	
	private static BufferedImage resizeImageWithHint(BufferedImage originalImage, int IMG_WIDTH, int IMG_HEIGHT,int type)
	{
		 
			BufferedImage resizedImage = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, type);
			Graphics2D g = resizedImage.createGraphics();
			g.drawImage(originalImage, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
			g.dispose();	
			g.setComposite(AlphaComposite.Src);
		 
			g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
			RenderingHints.VALUE_INTERPOLATION_BILINEAR);
			g.setRenderingHint(RenderingHints.KEY_RENDERING,
			RenderingHints.VALUE_RENDER_QUALITY);
			g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
			RenderingHints.VALUE_ANTIALIAS_ON);
		 
			return resizedImage;
	}	
			
	@Override
	protected void onlyrPatientImageTabChanged(LayerBridge tab) 
	{	
		if (form.lyrPatientImage().tabUpload().isVisible())
		{
			form.getLocalContext().setSelectedTab(UPLOAD);
		}
		else if (form.lyrPatientImage().tabScan().isVisible())
		{
			form.getLocalContext().setSelectedTab(CAPTURE);
		}
	}

	@Override
	protected void onCamera1ValueChanged() throws PresentationLogicException 
	{
		if (form.lyrPatientImage().tabScan().camera1().getImageString() != null)
		{
			String sessionID = engine.getSessionId();
			String encodedImage = form.lyrPatientImage().tabScan().camera1().getImageString();			 
			
			byte[] decBytes = Base64.decode(encodedImage);
			if (decBytes == null || decBytes.length == 0){				
				return;
			}	
			
			//Get CurrentTimeMillis() segment
		    String str = Long.toHexString(System.currentTimeMillis());
		    while (str.length () < 12)
	        {
	            str = '0' + str;
	        }
			
			String imagePath = EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "_" +sessionID + ".jpg" ;
			ArrayList<String> patientPhotoTempFiles = form.getGlobalContext().Core.getPatientPhotoTempFilesIsNotNull() ? form.getGlobalContext().Core.getPatientPhotoTempFiles() :  new ArrayList<String>();
			patientPhotoTempFiles.add(imagePath);
			form.getGlobalContext().Core.setPatientPhotoTempFiles(patientPhotoTempFiles);
			
			try
			{		
				FileOutputStream fos = new FileOutputStream(imagePath);				
				fos.write(decBytes);
				fos.close();	
				
				BufferedImage originalImage;		
	        	originalImage = ImageIO.read(new File(EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "_" +sessionID + ".jpg"));
				BufferedImage resizeImageJpg = resizeImage(originalImage);   	  	    	  	   	  	
		   	  	String resizeFilePath = EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "resized_" + str + "_" +sessionID + ".jpg";
				ImageIO.write(resizeImageJpg, getFileType(), (new File(resizeFilePath))); 	        	   	  	
				patientPhotoTempFiles.add(resizeFilePath.replace("\\", "/"));
				form.getGlobalContext().Core.setPatientPhotoTempFiles(patientPhotoTempFiles);
				
				AppImageVo vo = new AppImageVo();
				vo.setImagePath(EnvironmentConfig.getAplicationURL() + (ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "resized_" + str + "_" +sessionID + ".jpg").replace("\\", "/"));					
				form.lyrPatientImage().tabUpload().imgImageUpload().setValue(vo);
				form.getLocalContext().setSelectedFile(EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "resized_" + str + "_" +sessionID + ".jpg");
				
				form.btnSave().setEnabled(true);
										
			}		
			catch(FileNotFoundException exception) 
			{			
				engine.showMessage("FileNotFoundException : " + exception.getMessage());
			}		
			catch(IOException exception) 
			{						
				engine.showMessage("IOException : " + exception.getMessage());
			}
		}
		else
		{
			form.btnSave().setEnabled(false);	
		}
	}	
}
