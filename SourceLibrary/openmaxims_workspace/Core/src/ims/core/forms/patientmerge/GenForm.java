//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.patientmerge;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbFromIdTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PatIdType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PatIdType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PatIdType getValue()
		{
			return (ims.core.vo.lookups.PatIdType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PatIdType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbFromSexComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Sex value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Sex value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Sex value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Sex value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Sex value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Sex getValue()
		{
			return (ims.core.vo.lookups.Sex)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Sex value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbToIdTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PatIdType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PatIdType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PatIdType getValue()
		{
			return (ims.core.vo.lookups.PatIdType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PatIdType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbToSexComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Sex value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Sex value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Sex value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Sex value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Sex value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Sex getValue()
		{
			return (ims.core.vo.lookups.Sex)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Sex value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdFromPatDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdFromPatDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolFromPpsReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolFromPpsReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolFromPpsOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolFromPps()
		{
			return (String)super.row.get(0);
		}
		public void setcolFromPps(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolFromPpsTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolHospReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolHospReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolHospOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolHosp()
		{
			return (String)super.row.get(1);
		}
		public void setcolHosp(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolHospTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolFromNameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolFromNameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolFromNameOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolFromName()
		{
			return (String)super.row.get(2);
		}
		public void setcolFromName(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolFromNameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolFromSexReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolFromSexReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolFromSexOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolFromSex()
		{
			return (String)super.row.get(3);
		}
		public void setcolFromSex(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolFromSexTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolFromDOBReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolFromDOBReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolFromDOBOpened()
		{
			super.row.showOpened(4);
		}
		public String getcolFromDOB()
		{
			return (String)super.row.get(4);
		}
		public void setcolFromDOB(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolFromDOBTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.PatientShort getValue()
		{
			return (ims.core.vo.PatientShort)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientShort value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdFromPatDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdFromPatDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdFromPatDetailsRow get(int index)
		{
			return new grdFromPatDetailsRow(super.collection.get(index));
		}
		public grdFromPatDetailsRow newRow()
		{
			return new grdFromPatDetailsRow(super.collection.newRow());
		}
		public grdFromPatDetailsRow newRow(boolean autoSelect)
		{
			return new grdFromPatDetailsRow(super.collection.newRow(autoSelect));
		}
		public grdFromPatDetailsRow newRowAt(int index)
		{
			return new grdFromPatDetailsRow(super.collection.newRowAt(index));
		}
		public grdFromPatDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdFromPatDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdFromPatDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public void setcolHospCaption(String value)
		{
			this.grid.setColumnCaption(1, value);
		}
		public ims.core.vo.PatientShortCollection getValues()
		{
			ims.core.vo.PatientShortCollection listOfValues = new ims.core.vo.PatientShortCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientShort getValue()
		{
			return (ims.core.vo.PatientShort)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientShort value)
		{
			super.grid.setValue(value);
		}
		public grdFromPatDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdFromPatDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdFromPatDetailsRowCollection getRows()
		{
			return new grdFromPatDetailsRowCollection(super.grid.getRows());
		}
		public grdFromPatDetailsRow getRowByValue(ims.core.vo.PatientShort value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdFromPatDetailsRow(row);
		}
		public void setcolFromPpsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolFromPpsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolHospHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolHospHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolFromNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolFromNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolFromSexHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolFromSexHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolFromDOBHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolFromDOBHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	public static class grdToPatDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdToPatDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolPpsNoReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolPpsNoReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolPpsNoOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolPpsNo()
		{
			return (String)super.row.get(0);
		}
		public void setcolPpsNo(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolPpsNoTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolHospReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolHospReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolHospOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolHosp()
		{
			return (String)super.row.get(1);
		}
		public void setcolHosp(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolHospTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolPatientNameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolPatientNameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolPatientNameOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolPatientName()
		{
			return (String)super.row.get(2);
		}
		public void setcolPatientName(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolPatientNameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolSexReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolSexReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolSexOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolSex()
		{
			return (String)super.row.get(3);
		}
		public void setcolSex(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolSexTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolDOBReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolDOBReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolDOBOpened()
		{
			super.row.showOpened(4);
		}
		public String getcolDOB()
		{
			return (String)super.row.get(4);
		}
		public void setcolDOB(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolDOBTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.PatientShort getValue()
		{
			return (ims.core.vo.PatientShort)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientShort value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdToPatDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdToPatDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdToPatDetailsRow get(int index)
		{
			return new grdToPatDetailsRow(super.collection.get(index));
		}
		public grdToPatDetailsRow newRow()
		{
			return new grdToPatDetailsRow(super.collection.newRow());
		}
		public grdToPatDetailsRow newRow(boolean autoSelect)
		{
			return new grdToPatDetailsRow(super.collection.newRow(autoSelect));
		}
		public grdToPatDetailsRow newRowAt(int index)
		{
			return new grdToPatDetailsRow(super.collection.newRowAt(index));
		}
		public grdToPatDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdToPatDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdToPatDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public void setcolHospCaption(String value)
		{
			this.grid.setColumnCaption(1, value);
		}
		public ims.core.vo.PatientShortCollection getValues()
		{
			ims.core.vo.PatientShortCollection listOfValues = new ims.core.vo.PatientShortCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientShort getValue()
		{
			return (ims.core.vo.PatientShort)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientShort value)
		{
			super.grid.setValue(value);
		}
		public grdToPatDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdToPatDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdToPatDetailsRowCollection getRows()
		{
			return new grdToPatDetailsRowCollection(super.grid.getRows());
		}
		public grdToPatDetailsRow getRowByValue(ims.core.vo.PatientShort value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdToPatDetailsRow(row);
		}
		public void setcolPpsNoHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolPpsNoHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolHospHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolHospHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolPatientNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolPatientNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolSexHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolSexHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolDOBHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolDOBHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 280, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Merge Records From Patient...", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 304, 832, 280, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Merge Records To Patient...", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 48, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 256, 48, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 76, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 100, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forename:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 24, 126, 29, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Sex:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 256, 126, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DOB:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 24, 336, 53, 17, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "ID Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 256, 336, 22, 17, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "ID:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 362, 59, 17, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "Surname:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 24, 388, 65, 17, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "Forename:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 24, 414, 29, 17, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "Sex:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 256, 414, 33, 17, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "DOB:", new Integer(1), null, new Integer(0)}));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 288, 48, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 96, 74, 632, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 96, 100, 632, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 288, 336, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 96, 362, 632, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 96, 388, 632, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// PartialDateBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 288, 126, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 288, 414, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 96, 48, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbFromIdTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbFromIdTypeTemp);
		cmbFromIdTypeComboBox cmbFromIdType = (cmbFromIdTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFromIdTypeComboBox.class, m_cmbFromIdTypeTemp);
		super.addComboBox(cmbFromIdType);
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 96, 126, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbFromSexTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbFromSexTemp);
		cmbFromSexComboBox cmbFromSex = (cmbFromSexComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFromSexComboBox.class, m_cmbFromSexTemp);
		super.addComboBox(cmbFromSex);
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 96, 336, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbToIdTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbToIdTypeTemp);
		cmbToIdTypeComboBox cmbToIdType = (cmbToIdTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbToIdTypeComboBox.class, m_cmbToIdTypeTemp);
		super.addComboBox(cmbToIdType);
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 96, 414, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbToSexTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbToSexTemp);
		cmbToSexComboBox cmbToSex = (cmbToSexComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbToSexComboBox.class, m_cmbToSexTemp);
		super.addComboBox(cmbToSex);

		// Grid Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 24, 160, 800, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdFromPatDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdFromPatDetailsTemp);
		grdFromPatDetailsGrid grdFromPatDetails = (grdFromPatDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFromPatDetailsGrid.class, m_grdFromPatDetailsTemp);
		grdFromPatDetails.addStringColumn("PPS No.", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdFromPatDetails.addStringColumn("Hosp", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdFromPatDetails.addStringColumn("Name", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdFromPatDetails.addStringColumn("Sex", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdFromPatDetails.addStringColumn("DOB", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdFromPatDetails);
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 24, 448, 800, 115, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdToPatDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdToPatDetailsTemp);
		grdToPatDetailsGrid grdToPatDetails = (grdToPatDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdToPatDetailsGrid.class, m_grdToPatDetailsTemp);
		grdToPatDetails.addStringColumn("PPS No.", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdToPatDetails.addStringColumn("Hosp", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdToPatDetails.addStringColumn("Name", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdToPatDetails.addStringColumn("Sex", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdToPatDetails.addStringColumn("DOB", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdToPatDetails);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 792, 44, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 752, 44, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 792, 332, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 752, 332, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 160, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, this.getImages().Core.Right, this.getImages().Core.RightDisabled, "Merge Patient", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public TextBox txtFromId()
	{
		return (TextBox)super.getControl(14);
	}
	public TextBox txtFromSurname()
	{
		return (TextBox)super.getControl(15);
	}
	public TextBox txtFromForename()
	{
		return (TextBox)super.getControl(16);
	}
	public TextBox txtToId()
	{
		return (TextBox)super.getControl(17);
	}
	public TextBox txtToSurname()
	{
		return (TextBox)super.getControl(18);
	}
	public TextBox txtToForename()
	{
		return (TextBox)super.getControl(19);
	}
	public PartialDateBox pdtFromDOB()
	{
		return (PartialDateBox)super.getControl(20);
	}
	public PartialDateBox pdtToDOB()
	{
		return (PartialDateBox)super.getControl(21);
	}
	public cmbFromIdTypeComboBox cmbFromIdType()
	{
		return (cmbFromIdTypeComboBox)super.getComboBox(0);
	}
	public cmbFromSexComboBox cmbFromSex()
	{
		return (cmbFromSexComboBox)super.getComboBox(1);
	}
	public cmbToIdTypeComboBox cmbToIdType()
	{
		return (cmbToIdTypeComboBox)super.getComboBox(2);
	}
	public cmbToSexComboBox cmbToSex()
	{
		return (cmbToSexComboBox)super.getComboBox(3);
	}
	public grdFromPatDetailsGrid grdFromPatDetails()
	{
		return (grdFromPatDetailsGrid)super.getGrid(0);
	}
	public grdToPatDetailsGrid grdToPatDetails()
	{
		return (grdToPatDetailsGrid)super.getGrid(1);
	}
	public ImageButton imbFromClear()
	{
		return (ImageButton)super.getControl(28);
	}
	public ImageButton imbFromSearch()
	{
		return (ImageButton)super.getControl(29);
	}
	public ImageButton imbToClear()
	{
		return (ImageButton)super.getControl(30);
	}
	public ImageButton imbToSearch()
	{
		return (ImageButton)super.getControl(31);
	}
	public ImageButton imbMerge()
	{
		return (ImageButton)super.getControl(32);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				PatientMergeDemographics = new LocalFormName(102421);
			}
			public final FormName PatientMergeDemographics;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			NTPF = new NTPFImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				RedFlag = new ImageHelper(102138, "Images/Core/flag_red.png", new Integer(21), new Integer(21));
				Left = new ImageHelper(102110, "Images/Core/left.gif", new Integer(16), new Integer(16));
				LeftDisabled = new ImageHelper(102111, "Images/Core/left_disabled.gif", new Integer(16), new Integer(16));
				Right = new ImageHelper(102112, "Images/Core/right.gif", new Integer(16), new Integer(16));
				RightDisabled = new ImageHelper(102113, "Images/Core/right_disabled.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image RedFlag;
			public final ims.framework.utils.Image Left;
			public final ims.framework.utils.Image LeftDisabled;
			public final ims.framework.utils.Image Right;
			public final ims.framework.utils.Image RightDisabled;
		}
		public final class NTPFImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NTPFImages()
			{
				Pencil = new ImageHelper(110110, "Images/NTPF/pencil2.gif", new Integer(16), new Integer(16));
				OpenCase = new ImageHelper(110109, "Images/NTPF/openfold.gif", new Integer(16), new Integer(16));
				Locall = new ImageHelper(110108, "Images/NTPF/Dial.gif", new Integer(16), new Integer(16));
				Discharge = new ImageHelper(110111, "Images/NTPF/Home.gif", new Integer(16), new Integer(16));
				Invoice = new ImageHelper(110112, "Images/NTPF/Money.gif", new Integer(16), new Integer(16));
				LocallWaitingList = new ImageHelper(110114, "Images/NTPF/db-Next.gif", new Integer(16), new Integer(16));
				ClosedCase = new ImageHelper(110113, "Images/NTPF/fold.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Pencil;
			public final ims.framework.utils.Image OpenCase;
			public final ims.framework.utils.Image Locall;
			public final ims.framework.utils.Image Discharge;
			public final ims.framework.utils.Image Invoice;
			public final ims.framework.utils.Image LocallWaitingList;
			public final ims.framework.utils.Image ClosedCase;
		}
		public final CoreImages Core;
		public final NTPFImages NTPF;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_MergeRequest = new ims.framework.ContextVariable("MergeRequest", prefix + "_lv_Core.PatientMerge.__internal_x_context__MergeRequest_" + componentIdentifier + "");
			cxl_PatientFrom = new ims.framework.ContextVariable("PatientFrom", prefix + "_lv_Core.PatientMerge.__internal_x_context__PatientFrom_" + componentIdentifier + "");
			cxl_PatientTo = new ims.framework.ContextVariable("PatientTo", prefix + "_lv_Core.PatientMerge.__internal_x_context__PatientTo_" + componentIdentifier + "");
			cxl_MergedPatients = new ims.framework.ContextVariable("MergedPatients", prefix + "_lv_Core.PatientMerge.__internal_x_context__MergedPatients_" + componentIdentifier + "");
			cxl_PatientType = new ims.framework.ContextVariable("PatientType", prefix + "_lv_Core.PatientMerge.__internal_x_context__PatientType_" + componentIdentifier + "");
		}
		
		public boolean getMergeRequestIsNotNull()
		{
			return !cxl_MergeRequest.getValueIsNull(context);
		}
		public ims.core.vo.MergeRequestVo getMergeRequest()
		{
			return (ims.core.vo.MergeRequestVo)cxl_MergeRequest.getValue(context);
		}
		public void setMergeRequest(ims.core.vo.MergeRequestVo value)
		{
			cxl_MergeRequest.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MergeRequest = null;
		public boolean getPatientFromIsNotNull()
		{
			return !cxl_PatientFrom.getValueIsNull(context);
		}
		public ims.core.patient.vo.PatientRefVo getPatientFrom()
		{
			return (ims.core.patient.vo.PatientRefVo)cxl_PatientFrom.getValue(context);
		}
		public void setPatientFrom(ims.core.patient.vo.PatientRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'PatientFrom' RefVo context variable.");
			if(value == null)
				cxl_PatientFrom.setValue(context, null);
			else
				cxl_PatientFrom.setValue(context, new ims.core.patient.vo.PatientRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_PatientFrom = null;
		public boolean getPatientToIsNotNull()
		{
			return !cxl_PatientTo.getValueIsNull(context);
		}
		public ims.core.patient.vo.PatientRefVo getPatientTo()
		{
			return (ims.core.patient.vo.PatientRefVo)cxl_PatientTo.getValue(context);
		}
		public void setPatientTo(ims.core.patient.vo.PatientRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'PatientTo' RefVo context variable.");
			if(value == null)
				cxl_PatientTo.setValue(context, null);
			else
				cxl_PatientTo.setValue(context, new ims.core.patient.vo.PatientRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_PatientTo = null;
		public boolean getMergedPatientsIsNotNull()
		{
			return !cxl_MergedPatients.getValueIsNull(context);
		}
		public java.util.Vector getMergedPatients()
		{
			return (java.util.Vector)cxl_MergedPatients.getValue(context);
		}
		public void setMergedPatients(java.util.Vector value)
		{
			cxl_MergedPatients.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MergedPatients = null;
		public boolean getPatientTypeIsNotNull()
		{
			return !cxl_PatientType.getValueIsNull(context);
		}
		public String getPatientType()
		{
			return (String)cxl_PatientType.getValue(context);
		}
		public void setPatientType(String value)
		{
			cxl_PatientType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientType = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[81];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.PatientSource", "BO-1001100000-ID", "ID_Patient");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDestination", "BO-1001100000-ID", "ID_Patient");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientMerge.__internal_x_context__MergeRequest_" + componentIdentifier, "BO-1001100007-ID", "ID_MergeRequest");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientMerge.__internal_x_context__MergeRequest_" + componentIdentifier, "BO-1001100007-SOURCEPATID", "SourcePatId");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientMerge.__internal_x_context__MergeRequest_" + componentIdentifier, "BO-1001100007-DESTINATIONPATID", "DestinationPatId");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientMerge.__internal_x_context__MergeRequest_" + componentIdentifier, "BO-1001100007-STATUS", "Status");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientMerge.__internal_x_context__MergeRequest_" + componentIdentifier, "BO-1001100007-COMMENT", "Comment");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientMerge.__internal_x_context__MergeRequest_" + componentIdentifier, "BO-1001100007-MERGEIDENTIFIERS", "MergeIdentifiers");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientMerge.__internal_x_context__PatientFrom_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.PatientMerge.__internal_x_context__PatientTo_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
