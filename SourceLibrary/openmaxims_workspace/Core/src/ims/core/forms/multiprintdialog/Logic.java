//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.71 build 3937.18160)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.multiprintdialog;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.DocumentAndPatientWrapperVo;
import ims.core.vo.DocumentAndPatientWrapperVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.lookups.FileType;
import ims.correspondence.vo.PatientDocumentErrorVo;
import ims.correspondence.vo.PatientDocumentErrorVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.PrinterScope;
import ims.framework.exceptions.PresentationLogicException;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize(args);
		updateControlsState();
	}

	private void updateControlsState() 
	{
		form.imbError().setVisible(form.getGlobalContext().Core.getPatientDocumentsErrorsIsNotNull() && form.getGlobalContext().Core.getPatientDocumentsErrors().size() > 0);
	}

	private void initialize(Object[] args)
	{
		form.ccPrinter().initialize(domain.getCurrentLocation(), PrinterScope.DEFAULT,true);

		if (args != null && args.length > 0)
		{
			if(args[0] instanceof DocumentAndPatientWrapperVoCollection)
			{
				DocumentAndPatientWrapperVoCollection documents = (DocumentAndPatientWrapperVoCollection) args[0];

				populateGrid(documents);
			}
		}
	}

	private void populateGrid(DocumentAndPatientWrapperVoCollection documents)
	{
		if (documents == null)
			return;

		for (int i = 0; i < documents.size(); i++)
		{
			newDocumentRow(documents.get(i));
		}
	}

	private void newDocumentRow(DocumentAndPatientWrapperVo documentAndPatientWrapperVo)
	{
		if (documentAndPatientWrapperVo == null)
			return;

		GenForm.grdDocsRow row = form.grdDocs().getRows().newRow();

		row.setValue(documentAndPatientWrapperVo);
		row.setColPatient((documentAndPatientWrapperVo.getPatientIsNotNull() && documentAndPatientWrapperVo.getPatient().getName() != null) ? documentAndPatientWrapperVo.getPatient().getName().toString() : null);
		row.setColDName(documentAndPatientWrapperVo.getDocument() != null ? documentAndPatientWrapperVo.getDocument().getName() : null);
		row.setColDate((documentAndPatientWrapperVo.getDocument() != null && documentAndPatientWrapperVo.getDocument().getRecordingDateTime() != null) ? documentAndPatientWrapperVo.getDocument().getRecordingDateTime().toString() : null);
		row.setColumnCopyNo((documentAndPatientWrapperVo.getDocument() != null && documentAndPatientWrapperVo.getDocument().getNoOfCopies() != null ) ? documentAndPatientWrapperVo.getDocument().getNoOfCopies() : 1);
	}

	@Override
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		printDocuments();
	}

	private String[] validateUIRules()
	{
		ArrayList<String> loE = new ArrayList<String>();

		if (form.ccPrinter().getSelectedPrinter() == null)
			loE.add("Please select a printer.");
		
		for (int i = 0; i < form.grdDocs().getRows().size(); i++)
		{
			if (form.grdDocs().getRows().get(i).getColumnCopyNo() == null)
			{
				loE.add("Number of copies is mandatory");
			}
			
			//WDEV - 11714 - starts here
			if (form.grdDocs().getRows().get(i).getColumnCopyNo() != null && form.grdDocs().getRows().get(i).getColumnCopyNo() <=0)
			{
				loE.add("Number of Copies must be greater than zero.");
			}
			//WDEV-11714 - ends here
		}
		
		if (loE.size() == 0)
			return null;
		
		String[] result = new String[loE.size()];
		loE.toArray(result);
		
		return result;
	}

	private void printDocuments()
	{
		String[] errors = validateUIRules();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		QueryBuilderClient cl = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		//WDEV-11714
		DocumentAndPatientWrapperVoCollection documentsToBeUpdated = new DocumentAndPatientWrapperVoCollection();
		
		for (int i = 0; i < form.grdDocs().getRows().size(); i++)
		{
			DocumentAndPatientWrapperVo wrapperDocument = form.grdDocs().getRows().get(i).getValue();
			PatientDocumentVo value = wrapperDocument.getDocument();
			
			//WDEV-11714 - starts here
			if(value.getNoOfCopies() == null || (!value.getNoOfCopies().equals(form.grdDocs().getRows().get(i).getColumnCopyNo())))
			{
				value.setNoOfCopies(form.grdDocs().getRows().get(i).getColumnCopyNo());
				value.validate();
				
				//documentsToBeUpdated.add(wrapperDocument);	WDEV-14174
			}
			//WDEV-11714 - ends here
			
			if (!(FileType.PDF.equals(value.getServerDocument().getFileType())))
				continue;
			
			String fileName = value.getServerDocument().getFileName();

			try
			{
				cl.printReport(readFile(getFilePath(fileName)), urlReportServer, form.ccPrinter().getSelectedPrinter().getIPrinterName(), form.grdDocs().getRows().get(i).getColumnCopyNo());//WDEV-13366
				
				//	WDEV-14174
				if(value.getWasPrinted() == null || Boolean.FALSE.equals(value.getWasPrinted()))
				{
					value.setWasPrinted(true);//	WDEV-14174
				}
			}
			catch (QueryBuilderClientException e)
			{
				e.printStackTrace();
				
				if(form.getGlobalContext().Core.getPatientDocumentsErrors() == null)
					form.getGlobalContext().Core.setPatientDocumentsErrors(new PatientDocumentErrorVoCollection());
				
				//	WDEV-14174
				if(value.getWasPrinted() == null)
				{
					value.setWasPrinted(false);//	WDEV-14174
				}
				
				form.getGlobalContext().Core.getPatientDocumentsErrors().add(createError(form.grdDocs().getRows().get(i).getValue(), "Could not be printed"));
			}
			
			documentsToBeUpdated.add(wrapperDocument);//	WDEV-14174
		}
		
		//WDEV-11714 - starts here
		PatientDocumentErrorVoCollection errorsFromsaveDocuments = domain.savePatientDocuments(documentsToBeUpdated);
		
		if(errorsFromsaveDocuments != null && errorsFromsaveDocuments.size() > 0)
		{
			if (form.getGlobalContext().Core.getPatientDocumentsErrors() == null)
				form.getGlobalContext().Core.setPatientDocumentsErrors(new PatientDocumentErrorVoCollection());
			
			for(int i=0; i<errorsFromsaveDocuments.size(); i++)
			{
				form.getGlobalContext().Core.getPatientDocumentsErrors().add(errorsFromsaveDocuments.get(i));
			}
		}
		//WDEV-11714 - ends here
		
		engine.close(DialogResult.OK);
	}

	private String getFilePath(String fileName)
	{
		return getPDFStorePath() + fileName;//WDEV-13366
	}	
	
	private PatientDocumentErrorVo createError(DocumentAndPatientWrapperVo patientDocument, String errorValue) 
	{
		PatientDocumentErrorVo error = new PatientDocumentErrorVo();
		
		error.setPatient(patientDocument.getPatient().getName());
		error.setIdentifiers(patientDocument.getPatient().getIdentifiers());
		error.setDocumentName(patientDocument.getDocument().getName());
		error.setDocumentDate(patientDocument.getDocument().getDocumentDate());
		
		error.setError(errorValue);
		
		return error;
	}

	private String getPDFStorePath()//WDEV-13366
	{
		String storePath = ConfigFlag.GEN.PDF_STORE_PATH.getValue();//WDEV-13366
		
		if(!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";
				
		return storePath;
	}

	private byte[] readFile(String filePath)
	{
		File pdf = new File(filePath);
		long size = pdf.length();

		if (size == 0)
		{
			return null;
		}

		FileInputStream fileInputStream = null;
		byte[] buffer = null;

		try
		{
			fileInputStream = new FileInputStream(pdf);
			int bytesAvailable = fileInputStream.available();
			int maxBufferSize = (int) size;
			int bufferSize = Math.min(bytesAvailable, maxBufferSize);
			buffer = new byte[bufferSize];
			int bytesRead = fileInputStream.read(buffer, 0, bufferSize);
			while (bytesRead > 0)
			{
				bytesAvailable = fileInputStream.available();
				bufferSize = Math.min(bytesAvailable, maxBufferSize);
				bytesRead = fileInputStream.read(buffer, 0, bufferSize);
			}

		}
		catch (IOException e)
		{
			buffer = null;
			e.printStackTrace();
		}
		finally
		{
			try
			{
				fileInputStream.close();
			}
			catch (IOException e)
			{

			}
		}

		return buffer;
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onImbErrorClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Core.PatientDocumentErrors, new Object[] {form.getGlobalContext().Core.getPatientDocumentsErrors()});
	}
}
