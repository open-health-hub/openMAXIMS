//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.core.forms.templategeneration;

import java.util.ArrayList;

import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.TaxonomySeedVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.TaxonomyType;
import ims.framework.exceptions.PresentationLogicException;
import ims.vo.LookupInstVo;
import ims.vo.LookupMappingVoCollection;



public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		intialize();
	}
	
	protected void onCcResponsibleHCPValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setResponsibleHCP((HcpLiteVo) form.ccResponsibleHCP().getValue());
	}
	
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors = getUiErrors();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		engine.open(form.getForms().Core.PrintReport);
	}
	private String[] getUiErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
		if(form.ccResponsibleHCP().getValue() == null)
		{
			errors.add(" Responsible HCP is mandatory");
		}
				
		if (form.qmbWard().getValue() == null)
		{
			errors.add(" Ward is mandatory");
		}
		
		if(form.cmbDocumentCategory().getValue() == null)
		{
			errors.add(" Document Category is mandatory");
		}
		else
		{
			if(form.getLocalContext().getDocumentCategoryMapping() == null)
			{
				errors.add("A mapping of type 'Electronic Document and Records Management System ' should be linked against selected Document Category ! ");
			}
		}
		
		
		
		if (errors.size() > 0) 
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			return searchErrors;
		}
		return null;
	}
	protected void onCmbDocumentCategoryValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setDocumentCategoryMapping(null);
		if(form.cmbDocumentCategory().getValue() != null )
		{
			LookupInstVo inst = LookupHelper.getDocumentCategoryInstance(this.domain.getLookupService(),form.cmbDocumentCategory().getValue().getID());
			LookupInstVo instMap = domain.getMappings(inst);
			LookupMappingVoCollection tempColl = instMap.getMappings().sort();
			
			for(int i = 0; tempColl != null && i < tempColl.size();i++)
			{
				if(tempColl.get(i) != null && TaxonomyType.EDRM.getText().equals(tempColl.get(i).getExtSystem()))
				{
					TaxonomySeedVo taxSeedVo = new TaxonomySeedVo();
					taxSeedVo.setID_TaxonomySeed(form.cmbDocumentCategory().getValue().getID());
					taxSeedVo.setExtCode(tempColl.get(i).getExtCode());
					taxSeedVo.setExtSystem(tempColl.get(i).getExtSystem());
					form.getLocalContext().setDocumentCategoryMapping(taxSeedVo);
					break;
				}
			}
		}
		
	}
	
	protected void onQmbWardValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedWard(form.qmbWard().getValue());
	}
	private void intialize()
	{
		form.getLocalContext().setResponsibleHCP(null);
		form.getLocalContext().setSelectedWard(null);
		form.getLocalContext().setDocumentCategoryMapping(null);
		form.ccResponsibleHCP().initialize(MosType.HCP);
		form.ccResponsibleHCP().isRequired(Boolean.TRUE);
		if(form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull())
		{
			if(form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCPIsNotNull())
			{
				form.ccResponsibleHCP().setValue(form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCP());
				form.getLocalContext().setResponsibleHCP(form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCP());
			}
		
			
		}
		else
		{
			if(domain.getHcpLiteUser() instanceof HcpLiteVo)
			{
				HcpLiteVo temp = (HcpLiteVo)domain.getHcpLiteUser();
				if(temp != null)
				{
					form.ccResponsibleHCP().setValue(temp);
					form.getLocalContext().setResponsibleHCP(temp);
				}
			}
				
			
		}
		if(domain.getInpatientEpisodes(form.getGlobalContext().Core.getPatientShort()) != null) //check if the patient is inpatient
		{
			if(form.getGlobalContext().Core.getPatientShort().getWard() != null)
			{
				form.qmbWard().newRow(form.getGlobalContext().Core.getPatientShort().getWard(), form.getGlobalContext().Core.getPatientShort().getWard().getName());
				form.qmbWard().setValue(form.getGlobalContext().Core.getPatientShort().getWard());
				form.getLocalContext().setSelectedWard(form.getGlobalContext().Core.getPatientShort().getWard());
			}
		}
	}

	
	protected void onQmbWardTextSubmited(String value)throws PresentationLogicException 
	{
		form.qmbWard().clear();
		LocationLiteVoCollection locliteVoColl = domain.getWard(value);
		populateWardCombo(locliteVoColl);
		
	}
	private void populateWardCombo(LocationLiteVoCollection locliteVoColl)
	{
		if(locliteVoColl != null && locliteVoColl.size() > 0)
		{
			for(int i = 0; i < locliteVoColl.size();i++)
			{
				if(locliteVoColl.get(i) != null)
					form.qmbWard().newRow(locliteVoColl.get(i), locliteVoColl.get(i).getName());
			}
			if(locliteVoColl.size() > 1)
				form.qmbWard().showOpened();
			else if(locliteVoColl.size() == 1)
			{
				form.qmbWard().setValue(locliteVoColl.get(0));
			}
		}
	}
}
