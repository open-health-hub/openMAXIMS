//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3040.26452)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.carecontextselectdialog;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.carecontextselectdialog.GenForm.grdListRow;
import ims.core.vo.CareContextVo;
import ims.core.vo.CareContextVoCollection;
import ims.core.vo.CareSpellVo;
import ims.core.vo.CareSpellVoCollection;
import ims.core.vo.EpisodeofCareVo;
import ims.core.vo.EpisodeofCareVoCollection;
import ims.core.vo.LocSiteLiteMappingsVo;
import ims.core.vo.LocSiteLiteMappingsVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PasEventVo;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	private static final String	INDENT				= "";

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		engine.setCaption("Please select an appointment or admission");
		open();
		selectGridIfOnlyOneCareContext();
		
		//wdev-11840
		updateControlsState();
	}

	/**
	 * 	WDEV-12843
	 *	Modified from wdev-11840
	 *	The ward should be hidden if the selected CareContext is
	 */
	private void updateControlsState() 
	{
		/*form.lblWard().setVisible(form.grdList().getValue() instanceof CareContextVo && !ContextType.OUTPATIENT.equals(((CareContextVo)form.grdList().getValue()).getContext())
																					 && ((CareContextVo) form.grdList().getValue()).getPasEventIsNotNull());
		form.cmbWard().setVisible(form.grdList().getValue() instanceof CareContextVo && !ContextType.OUTPATIENT.equals(((CareContextVo)form.grdList().getValue()).getContext())
																					 && ((CareContextVo) form.grdList().getValue()).getPasEventIsNotNull());*/
//		No longer needed
//		form.cmbWard().setEnabled(form.grdList().getValue() instanceof CareContextVo && ((CareContextVo) form.grdList().getValue()).getPasEventIsNotNull());
		//wdev-13446
		form.lblWard().setVisible(false);
		form.cmbWard().setVisible(false);
		//------------
	}

	private void selectGridIfOnlyOneCareContext()
	{
		int ccCount = 0;
		CareContextVo voCareContext = null;
		for (int i = 0; i < form.grdList().getAllRows().length; i++)
		{
			grdListRow row = form.grdList().getAllRows()[i];
			if (row.getValue() instanceof CareContextVo)
			{
				voCareContext = (CareContextVo) row.getValue();
				if (!getPasEpisodeId(voCareContext).equals(""))
					ccCount++;
			}
		}

		if (ccCount == 1&&!careContextIsCancelled(voCareContext))
		{
			form.grdList().setValue(voCareContext);
			if(ConfigFlag.GEN.USE_ORDERING_HOSPITAL_LOCATION.getValue())
			{
				if(voCareContext.getOrderingHospitalIsNotNull())
				{
					form.cmbOrderingHosp().setValue(voCareContext.getOrderingHospital());
//					form.cmbOrderingHosp().setEnabled(false);
				}
				
			}
			
			//WDEV-11840
			bindWardCombo((CareContextVo) form.grdList().getValue());

			form.btnOk().setEnabled(true);
		}
	}

	//wdev-11840
	private void bindWardCombo(CareContextVo careContext) 
	{
		if(careContext == null || careContext.getPasEvent() == null || careContext.getPasEvent().getLocation() == null)
			return;
		
		LocationLiteVoCollection wards = domain.listWardsForCurrentHospital(careContext.getPasEvent().getLocation());
		
		if(wards == null || wards.size() == 0)
			return;
		
		form.cmbWard().clear();
		
		for(int i=0; i<wards.size(); i++)
		{
			if(wards.get(i) == null)
				continue;
			
			form.cmbWard().newRow(wards.get(i), wards.get(i).getIItemText());
		}
		
		form.cmbWard().setValue(careContext.getPasEvent().getLocation());
	}

	private void open()
	{
		listCareSpells();
		if(ConfigFlag.GEN.USE_ORDERING_HOSPITAL_LOCATION.getValue())
		{
			form.cmbOrderingHosp().setVisible(true);
			form.lblorderingHosp().setVisible(true);
			listOrderingHospitals();
		}
		else
		{
			form.cmbOrderingHosp().setVisible(false);
			form.lblorderingHosp().setVisible(false);
		}
	}
	
	private void listOrderingHospitals()
	{
		LocSiteLiteMappingsVoCollection orderingHospitals = domain.listLocSites();
		PatientShort ps = form.getGlobalContext().Core.getPatientShort();
		if (ps==null)
			return;
		PatientIdCollection ids= ps.getIdentifiers();
		if (ids==null)
			return;
		for (LocSiteLiteMappingsVo locationLiteMappingsVo : orderingHospitals)
		{
			for (PatientId patientId : ids)
			{
				if (patientId.getType().equals(PatIdType.PASID)&&patientId.getValue().startsWith(locationLiteMappingsVo.getPathMapping()))
				{
					form.cmbOrderingHosp().newRow(locationLiteMappingsVo.getProviderHospital(), locationLiteMappingsVo.getProviderHospital().getName());
					continue;
				}
			}
		}
	}

	private void listCareSpells()
	{
		form.btnOk().setEnabled(false);
		form.grdList().setValue(null);
		form.getGlobalContext().Core.CareContextSelectDialog.setChosenCareContext(null);

		CareSpellVoCollection inpatientCareSpell = patientIsCurrentInpatient();

		if (inpatientCareSpell.size() > 0)
		{

			CareSpellVoCollection voCollCareSpells = domain.listCareSpellsByPatient(form.getGlobalContext().Core.getPatientShort(), calculateDate());

			if (voCollCareSpells == null)
			{
				voCollCareSpells = new CareSpellVoCollection();

			}

			if (inpatientCareSpell != null && inpatientCareSpell.size() > 0)
			{
				for (int i = 0; i < inpatientCareSpell.size(); i++)
				{

					voCollCareSpells.add(inpatientCareSpell.get(i));

				}

				populateGrid(voCollCareSpells);

			}
			else
			{
				populateGrid(inpatientCareSpell);

			}

		}
		else
		{
			CareSpellVoCollection voCollCareSpells = domain.listCareSpellsByPatient(form.getGlobalContext().Core.getPatientShort(), calculateDate());
			populateGrid(voCollCareSpells);

		}

	}

	private CareSpellVoCollection patientIsCurrentInpatient()
	{
		CareSpellVoCollection inpatientCare = new CareSpellVoCollection();
		CareSpellVoCollection inpatientCareList = new CareSpellVoCollection();
//		CareSpellVo inpatCare = new CareSpellVo();
		CareSpellVoCollection careList = domain.listCareSpellsByPatient(form.getGlobalContext().Core.getPatientShort(), null);

		if (careList != null)
		{
			for (int index = 0; index < careList.size(); index++)
			{
				EpisodeofCareVoCollection episodeList = careList.get(index).getEpisodes();
				for (int i = 0; i < episodeList.size(); i++)
				{
					CareContextVoCollection careContextList = episodeList.get(i).getCareContexts();
					for (int j = 0; j < careContextList.size(); j++)
					{

						if (careContextList.get(j).getContext().equals(ContextType.INPATIENT) == true /*&& careContextList.get(j).getEndDateTime() == null*/)
						{
							inpatientCareList.add(careList.get(index));
						}
					}
				}
			}
		}
		if (inpatientCareList.size() > 0)
		{
			inpatientCare.add(inpatientCareList.get(0));
			return inpatientCare;

		}

		return inpatientCareList;

	}

	private Date calculateDate()
	{
		if (form.chkRetrieveAll().getValue() == false)
		{
			int days = ConfigFlag.UI.CARE_CONTEXT_SELECT_NO_OF_DAYS.getValue();
			return new Date().addDay(-days);
		}

		return null;
	}

	private void populateGrid(CareSpellVoCollection voCollCareSpells)
	{
		form.grdList().getRows().clear();
		if (voCollCareSpells != null)
		{
//			int size = voCollCareSpells.size();
			CareSpellVoCollection careSpells = voCollCareSpells.sort();
			CareSpellVoCollection nuCareSpells = new CareSpellVoCollection();

			nuCareSpells = dischargedRemoved(careSpells);

			if (nuCareSpells != null)
			{
				populateCareSpellRows(nuCareSpells);
			}
		}
	}

	private CareSpellVoCollection dischargedRemoved(CareSpellVoCollection careSpells)
	{

		CareSpellVoCollection careSpellColl = new CareSpellVoCollection();
		EpisodeofCareVoCollection episodeOfCareColl = null;
		CareContextVoCollection careContextColl = null;
		CareSpellVo nuCareSpell = null;
		EpisodeofCareVo episode = null;
		CareSpellVo careSpell = null;
		for (int i = 0; i < careSpells.size(); i++)
		{
			careSpell = careSpells.get(i);
			EpisodeofCareVoCollection episodes = careSpell.getEpisodes();
			episodeOfCareColl = new EpisodeofCareVoCollection();
			for (int j = 0; j < episodes.size(); j++)
			{
				episode = new EpisodeofCareVo();
				episode = episodes.get(j);
				if (episode.getEndDate() != null || episode.getCareContexts() == null)
				{
					continue;
				}
				CareContextVoCollection contexts = episode.getCareContexts();
				careContextColl = new CareContextVoCollection();
				for (int k = 0; k < contexts.size(); k++)
				{
/*					if (contexts.get(k).getEndDateTime() == null)
					{*/
						careContextColl.add(contexts.get(k));
				/*	} */
				}
				episode.setCareContexts(null);
				if (careContextColl != null && careContextColl.size() > 0)
				{
					EpisodeofCareVo nuEpisode = episode;
					nuEpisode.setCareContexts(careContextColl);

					episodeOfCareColl.add(nuEpisode);
					nuEpisode = null;
				}
			}
			if (checkForContexts(episodeOfCareColl))
			{
				nuCareSpell = careSpell;

				if (episodeOfCareColl != null)
				{
					nuCareSpell.setEpisodes(null);
					nuCareSpell.setEpisodes(episodeOfCareColl);
					careSpellColl.add(nuCareSpell);
					nuCareSpell = null;
				}
			}
		}

		return careSpellColl;

	}

	private boolean checkForContexts(EpisodeofCareVoCollection episodeOfCareColl)
	{
		int count = 0;
		for (int i = 0; i < episodeOfCareColl.size(); i++)
		{
			if (episodeOfCareColl.get(i).getCareContexts().size() > 0)
				count++;

		}
		if (count > 0)
			return true;

		return false;
	}

	private void populateCareSpellRows(CareSpellVoCollection voCollCareSpells)
	{
		grdListRow careSpellRow;
		for (int i = 0; i < voCollCareSpells.size(); i++)
		{

			if (isOutsideRange(voCollCareSpells.get(i).getStartDate()) && !(careSpellContainsInpatient(voCollCareSpells.get(i))))
				continue;

			careSpellRow = form.grdList().getRows().newRow();
			CareSpellVo careSpellVo = voCollCareSpells.get(i);

			careSpellRow.setcolStartDateEndDate(careSpellVo.createDisplayString());
			careSpellRow.setTooltip(careSpellVo.createDisplayString());
			careSpellRow.setCollapsedImage(form.getImages().Core.CareSpell);
			careSpellRow.setExpandedImage(form.getImages().Core.CareSpell);
			careSpellRow.setBackColor(Color.Bisque);
			careSpellRow.setBold(true);
			careSpellRow.setValue(careSpellVo);

			if (careSpellVo.getEndDateIsNotNull())
				form.getLocalContext().setParentEnded(Boolean.TRUE);
			if (careSpellVo.getEpisodesIsNotNull())
			{
				boolean bCollapseAll = populateEpisodeOfCareRows(careSpellVo.getEpisodes().sort(), careSpellRow);
				careSpellRow.setExpanded(!bCollapseAll);
				careSpellRow.setSelectable(false);
			}
		}
	}

	private boolean careSpellContainsInpatient(CareSpellVo careSpellVo)
	{
		int count = 0;

		for (int i = 0; i < careSpellVo.getEpisodes().size(); i++)
		{
			for (int j = 0; j < careSpellVo.getEpisodes().get(i).getCareContexts().size(); j++)
			{
				if(careSpellVo.getEpisodes().get(i).getCareContexts().get(j).getContext().equals(ContextType.INPATIENT))
				count++;
			}
		}
		if (count > 0)
			return true;

		return false;
	}

	private boolean populateEpisodeOfCareRows(EpisodeofCareVoCollection voCollEpisodeOfCare, grdListRow careSpellRow)
	{
		int endedCount = 0;
		if (voCollEpisodeOfCare != null && careSpellRow != null)
		{
			grdListRow episodeOfCareRow;
			for (int i = 0; i < voCollEpisodeOfCare.size(); i++)
			{
				if (isOutsideRange(voCollEpisodeOfCare.get(i).getStartDate()) && !(episodeContainsInpatient(voCollEpisodeOfCare.get(i))))
					continue;

				episodeOfCareRow = careSpellRow.getRows().newRow();

				episodeOfCareRow.setcolStartDateEndDate(voCollEpisodeOfCare.get(i).createDisplayString());
				episodeOfCareRow.setcolSpeciality(voCollEpisodeOfCare.get(i).getSpecialtyIsNotNull() ? INDENT + voCollEpisodeOfCare.get(i).getSpecialty().getText() : null);
				if (voCollEpisodeOfCare.get(i).getResponsibleHCPIsNotNull())
					episodeOfCareRow.setcolRMO(voCollEpisodeOfCare.get(i).getResponsibleHCP().getMosIsNotNull() ? INDENT + voCollEpisodeOfCare.get(i).getResponsibleHCP().getMos().toString() : null);
				episodeOfCareRow.setCollapsedImage(form.getImages().Core.EpisodeOfCare);
				episodeOfCareRow.setExpandedImage(form.getImages().Core.EpisodeOfCare);
				episodeOfCareRow.setValue(voCollEpisodeOfCare.get(i));
				episodeOfCareRow.setSelectable(false);
				populateCareContextRows(voCollEpisodeOfCare.get(i).getCareContexts().sort(), episodeOfCareRow);

				if (voCollEpisodeOfCare.get(i).getEndDate() == null)
					episodeOfCareRow.setExpanded(true);
				else
					endedCount++;
			}

			return (endedCount == voCollEpisodeOfCare.size());
		}

		return false;
	}

	private boolean episodeContainsInpatient(EpisodeofCareVo episodeofCareVo)
	{
		int count = 0;
		for (int j = 0; j < episodeofCareVo.getCareContexts().size(); j++)
		{
			if(episodeofCareVo.getCareContexts().get(j).getContext().equals(ContextType.INPATIENT))
			count++;
		}
		if (count > 0)
			return true;
		return false;
	}

	private boolean isOutsideRange(Date startDate)
	{
		if (startDate == null)
			throw new CodingRuntimeException("CareContext StartDateTime is null in method isCareContextOutsideRange");

		Date filterdate = calculateDate();
		if (filterdate != null)
			return startDate.isLessThan(filterdate);

		return false;
	}

	private void populateCareContextRows(CareContextVoCollection voCollCareContexts, grdListRow episodeOfCareRow)
	{
		if (voCollCareContexts != null && episodeOfCareRow != null)
		{
			voCollCareContexts.sort();
			grdListRow careContextRow;
			for (int i = 0; i < voCollCareContexts.size(); i++)
			{
				if (isCareContextOutsideRange(voCollCareContexts.get(i).getStartDateTime()) && !(voCollCareContexts.get(i).getContext().equals(ContextType.INPATIENT)))
					continue;

				careContextRow = episodeOfCareRow.getRows().newRow();

				String text = voCollCareContexts.get(i).createDisplayString() + " " + getPasEpisodeId(voCollCareContexts.get(i));
				careContextRow.setcolStartDateEndDate(text);
				careContextRow.setTooltip(text);
				
				String ward = (voCollCareContexts.get(i) != null && voCollCareContexts.get(i).getPasEventIsNotNull() && voCollCareContexts.get(i).getPasEvent().getLocationIsNotNull()) ? voCollCareContexts.get(i).getPasEvent().getLocation().getName() : null;
				
				careContextRow.setcolSpeciality(voCollCareContexts.get(i).getContextIsNotNull() ? INDENT + INDENT + voCollCareContexts.get(i).getContext().getText() + (ward != null ? " - " + ward : "") : null);
				careContextRow.setCollapsedImage(form.getImages().Core.CareContext);
				careContextRow.setExpandedImage(form.getImages().Core.CareContext);
				careContextRow.setValue(voCollCareContexts.get(i));
				careContextRow.setBold(true);
				
				//WDEV-10166
				if(voCollCareContexts.get(i).getResponsibleHCPIsNotNull())
					careContextRow.setcolRMO(voCollCareContexts.get(i).getResponsibleHCP().getIHcpName());
				
				// populateClinicalContacts(voCollCareContexts.get(i).getClinicalContacts().sort(), careContextRow);

/*				if (voCollCareContexts.get(i).getEndDateTime() == null) */
					careContextRow.setExpanded(true);

				if (getPasEpisodeId(voCollCareContexts.get(i)).equals("") || isParentEnded((EpisodeofCareVo) episodeOfCareRow.getValue()))
					careContextRow.setSelectable(false);
				
				//WDEV-10166
				if(careContextIsCancelled(voCollCareContexts.get(i)))  
					careContextRow.setSelectable(false);
			}
		}
	}

	//WDEV-10166
	private boolean careContextIsCancelled(CareContextVo voCareContext)
	{
		if (voCareContext == null)
			throw new CodingRuntimeException("voCareContext cannot be null in method careContextIsCancelled");
		
		if(voCareContext.getCurrentStatusIsNotNull() && voCareContext.getCurrentStatus().getStatusIsNotNull())
		{
			if(voCareContext.getCurrentStatus().getStatus().equals(CareContextStatus.CANCELLED))
				return true;
		}
		
		return false;
	}

	private boolean isCareContextOutsideRange(DateTime startDateTime)
	{
		if (startDateTime == null)
			throw new CodingRuntimeException("CareContext StartDateTime is null in method isCareContextOutsideRange");

		Date filterdate = calculateDate();
		if (filterdate != null)
			return startDateTime.getDate().isLessThan(filterdate);

		return false;
	}

	private boolean isParentEnded(EpisodeofCareVo epis)
	{
		if (epis == null)
			throw new CodingRuntimeException("epis is null in method isParentEnded");

		return epis.getEndDateIsNotNull();
	}

	private String getPasEpisodeId(CareContextVo careContextVo)
	{
		if (careContextVo != null)
			if (careContextVo.getPasEventIsNotNull())
				return "- PAS Epis.ID: " + careContextVo.getPasEvent().getPasEpisodeId();

		return "";
	}

	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(ConfigFlag.GEN.USE_ORDERING_HOSPITAL_LOCATION.getValue() && form.cmbOrderingHosp().getValue()==null)
		{
			engine.showMessage("A Provider Hospital must be selected");
			return;
		}
		CareContextVo careContextVo = (CareContextVo) form.grdList().getValue();
		
		if (ConfigFlag.GEN.USE_ORDERING_HOSPITAL_LOCATION.getValue()&&careContextVo.getOrderingHospital()!=form.cmbOrderingHosp().getValue())
		{
			careContextVo.setOrderingHospital(form.cmbOrderingHosp().getValue());
//			try
//			{
//				careContextVo=domain.updateCareContextwithOrderingHospital(careContextVo, form.cmbOrderingHosp().getValue());
//			}
//			catch (StaleObjectException e)
//			{
//				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
//				return;
//			}
		}
		
//wdev-13579
/*		// Condition for selected CareContext record to have PAS and NOT be an OUTPATIENT 
		boolean contextIsNotOutpatientAndPas = form.grdList().getValue() instanceof CareContextVo 
			&& !ContextType.OUTPATIENT.equals(((CareContextVo)form.grdList().getValue()).getContext()) 
			&& ((CareContextVo) form.grdList().getValue()).getPasEventIsNotNull();

		if (contextIsNotOutpatientAndPas)
		{
			//WDEV-11840
			Boolean updatedSuccesfull = updatePasEvent(careContextVo);

			if(Boolean.FALSE.equals(updatedSuccesfull))
				return;
		}
		
		//WDEV-11840 - ends here
*/	//wdev-13579
		
		form.getGlobalContext().Core.CareContextSelectDialog.setChosenCareContext(careContextVo);
		engine.close(DialogResult.OK);
	}

	//wdev-11840
	private Boolean updatePasEvent(CareContextVo careContextVo) throws PresentationLogicException 
	{
		if(careContextVo == null || careContextVo.getPasEvent() == null)
			return null;

		if (form.cmbWard().getValue() == null)
		{
			engine.showErrors(new String[] {"Ward is mandatory."});
			return false;
		}
		PasEventVo pasEvent = careContextVo.getPasEvent();
		
		if(form.cmbWard().getValue().equals(pasEvent.getLocation()))
			return null;
	
		pasEvent.setLocation(form.cmbWard().getValue());
		
		String[] errors = pasEvent.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			pasEvent = domain.updatePasEventWithNewWard(pasEvent);
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			onFormOpen(null);
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		careContextVo.setPasEvent(pasEvent);
		
		return true;
	}

	protected void onGridListSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdList().getValue() != null)
		{
			form.btnOk().setEnabled(true);
			if(ConfigFlag.GEN.USE_ORDERING_HOSPITAL_LOCATION.getValue())
			{
				CareContextVo careContextVo = (CareContextVo)form.grdList().getValue();
				if(careContextVo!=null)
				{
					form.cmbOrderingHosp().setValue(careContextVo.getOrderingHospital());
//					form.cmbOrderingHosp().setEnabled(false);
					
					//WDEV-11840
					bindWardCombo(careContextVo);
				}
			}
		}
		
		
		//WDEV-11840
		updateControlsState();
	}

	protected void onChkRetrieveAllValueChanged() throws PresentationLogicException
	{
		listCareSpells();
	}
}
