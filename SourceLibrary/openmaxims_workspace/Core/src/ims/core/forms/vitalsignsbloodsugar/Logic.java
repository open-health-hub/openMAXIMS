//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.20 build 40806.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.vitalsignsbloodsugar;

import ims.core.vo.VSBloodSugar;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.core.vo.lookups.CBGType;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.graphing.GraphingBloodSugar;
import ims.framework.utils.graphing.GraphingPoint;
import ims.framework.utils.graphing.GraphingPointType;

public class Logic extends BaseLogic
{

	protected void onFormOpen() throws FormOpenException 
	{
		//WDEV-14429
		if(isVitalSignsBloodSugarForTriage())
		{
			form.setMode(FormMode.VIEW);
		}
		
		form.grpShowBy().setValue(GenForm.grpShowByEnumeration.rdoDay); 
		form.btnUpdate().setEnabled(false);
		////form.btnPrint().setEnabled(false);
		
		//WDEV-7526
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.BaselineObservations.getID()))
		{
			form.lnkReturn().setTooltip("Return to Baseline Observations");
		}
		else
		{
			form.lnkReturn().setTooltip("Return to Vital Signs");
		}
		//ends here 
		
		if(form.getGlobalContext().Core.getVitalSign() != null  && form.getGlobalContext().Core.getVitalSign().getBloodSugar() != null)
		{
			form.dteShowByDay().setValue(form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime() != null ? form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime().getDate() : null);//WDEV-13117
			form.getLocalContext().setvitalSign(form.getGlobalContext().Core.getVitalSign());
			displayRecord(form.getGlobalContext().Core.getVitalSign());
			form.btnUpdate().setEnabled(true);
			//form.btnPrint().setEnabled(true);
			listBloodSugar();	
		}
		else
		{
			try {
				onRadioButtongrpShowByValueChanged();
			} catch (PresentationLogicException e) {
				throw new DomainRuntimeException();
			}
		}
		
		updatePrevNextButtons();
		enableBloodSugarControls(false);
		dateIntervalStatus();//WDEV-13117
	}

	private void enableBloodSugarControls(boolean bEnable) {
		form.cmbTimePeriod().setEnabled(bEnable);
		form.decBloodSugar().setEnabled(bEnable);
		form.decPostValue().setEnabled(bEnable);
		form.intTimeInterval().setEnabled(bEnable);
	}
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		displayRecord(form.getLocalContext().getvitalSign());
		form.setMode(FormMode.VIEW);
		
		dateIntervalStatus();
		updatePrevNextButtons();
		enableBloodSugarControls(false);
	}

	private void dateIntervalStatus()
	{
		form.dteShowByDay().setEnabled(GenForm.grpShowByEnumeration.rdoDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		
		form.dteFrom().setEnabled(!GenForm.grpShowByEnumeration.rdoDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		form.dteTo().setEnabled(!GenForm.grpShowByEnumeration.rdoDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
	}

	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		VitalSignsVo voVitalSign = form.getLocalContext().getvitalSign();

		VSBloodSugar voBS = new VSBloodSugar();

		if(form.BloodGlucoseGroup().getValue().equals(GenForm.BloodGlucoseGroupEnumeration.rdoRandom))
			voBS.setType(CBGType.RANDOM);
		else
			voBS.setType(CBGType.CBGM);
		voBS.setBloodSugarValue(form.decBloodSugar().getValue());
		voBS.setTimePeriod(form.cmbTimePeriod().getValue());
		voBS.setPostBloodSugarValue(form.decPostValue().getValue());
		voBS.setTimeInterval(form.intTimeInterval().getValue());

		voVitalSign.setBloodSugar(voBS);

		String[] arrErrors = voVitalSign.validate();
		if(arrErrors == null)
		{
			try {
				domain.modifyBloodSugar(voVitalSign);
			} catch (StaleObjectException e) {
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				refresh();
				return;
			}
		}
		else
		{
			engine.showErrors("Validation Errors", arrErrors);
			return;	
		}

		form.setMode(FormMode.VIEW);
		
		listBloodSugar();
		
		form.getLocalContext().setvitalSign(voVitalSign);
		displayRecord(form.getLocalContext().getvitalSign());
		
		dateIntervalStatus();
		enableBloodSugarControls(false);
	}

	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);	
		form.btnUpdate().setEnabled(false);
		//form.btnPrint().setEnabled(false);
		form.dteShowByDay().setEnabled(false);
		form.dteFrom().setEnabled(false);
		form.dteTo().setEnabled(false);
		
		form.btnPrev().setEnabled(false);
		form.btnNext().setEnabled(false);
		
		onRadioButtonBloodGlucoseGroupValueChanged();
	}

	private void clearFields() 
	{
		form.decBloodSugar().setValue(null);
		form.dteTaken().setValue(null);
		form.timTaken().setValue(null);
		form.txtHCP().setValue("");
		form.cmbTimePeriod().setValue(null);
		form.decPostValue().setValue(null);
		form.intTimeInterval().setValue(null);
	}

	protected void onBtnViewClick() throws PresentationLogicException 
	{ 
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoDay))
		{
			if(form.dteShowByDay().getValue() == null)
			{
				engine.showMessage("Please enter a date to show by");
				return;
			}
		}
		else
		{
			if(form.dteFrom().getValue() == null || form.dteTo().getValue() == null)
			{
				engine.showMessage("Please enter a date range (From and To) to show by");
				return;				
			}
			if(form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				engine.showMessage("The date From entered cannot be greater than the date To entered");
				return;
			}
		}

		clearFields();
		listBloodSugar();	
		//form.btnUpdate().setEnabled(false);
		
	}
	private void listBloodSugar() 
	{
		VitalSignsVoCollection voCollVitals = null;
		String subTitle = "";
		
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoDay))
		{
			voCollVitals = domain.listBloodSugar(form.dteShowByDay().getValue(),form.getGlobalContext().Core.getCurrentCareContext()); 
			subTitle = "Blood Sugar/BM for " + form.dteShowByDay().getValue().toString(DateFormat.STANDARD);
		}
		else
		{
			voCollVitals = domain.listBloodSugar(form.dteFrom().getValue(),form.dteTo().getValue(),form.getGlobalContext().Core.getCurrentCareContext());
			subTitle = "Blood Sugar/BM between " + form.dteFrom().getValue().toString(DateFormat.STANDARD) + " - " +  form.dteTo().getValue().toString(DateFormat.STANDARD);
		}
		
		//form.grhBloodSugar().setSubTitle(subTitle);
		form.lblBlood().setValue(subTitle);
		form.grhBloodSugar().clearAllPoints();
		
		form.grhBloodSugar().showYAxisValues();
		
		form.grhBloodSugar().setPrintHeaderInfo(subTitle + "\r\n" + form.getGlobalContext().Core.getPatientShort().getPatientInfo());		

		VitalSignsVo voVitalSign;
		GraphingBloodSugar point;
		if(voCollVitals != null)
		{
			voCollVitals.sort(SortOrder.ASCENDING);
			
			int nIndex = voCollVitals.size() - 1;
			
			for(int i=0;i<voCollVitals.size();i++)
			{
				voVitalSign = voCollVitals.get(i);
				
				Float preValue = null;
				Float value = null;
				Float postValue = null;
				
				if(voVitalSign.getBloodSugar().getType().equals(CBGType.RANDOM))
					value = voVitalSign.getBloodSugar().getBloodSugarValue();
				else
					preValue = voVitalSign.getBloodSugar().getBloodSugarValue();
				if(voVitalSign.getBloodSugar().getPostBloodSugarValueIsNotNull())
					postValue = voVitalSign.getBloodSugar().getPostBloodSugarValue();
				if(voVitalSign.getBloodSugar().getTimePeriodIsNotNull()){
					String timePeriod = "<b>Time Period:</b> ";
					timePeriod = timePeriod+voVitalSign.getBloodSugar().getTimePeriod().getText();
					point = new GraphingBloodSugar(voVitalSign.getVitalsTakenDateTime(), preValue, value, postValue, voVitalSign, timePeriod);
				}
				else
					point = new GraphingBloodSugar(voVitalSign.getVitalsTakenDateTime(), preValue, value, postValue, voVitalSign);
				
				form.grhBloodSugar().addPoint(point);
				
				if(form.getGlobalContext().Core.getVitalSignIsNotNull() && //WDEV-12943
						form.getGlobalContext().Core.getVitalSign().getID_VitalSignsIsNotNull() &&//WDEV-12943
						voVitalSign.getID_VitalSigns().intValue() == form.getGlobalContext().Core.getVitalSign().getID_VitalSigns().intValue())
					nIndex = i;
			}
			
			form.getLocalContext().setBloods(voCollVitals);
			form.getLocalContext().setCurrentIndex(new Integer(nIndex));
			displayCurrentBloodSugar();
		}
		else
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			form.getLocalContext().setBloods(null);
			form.btnUpdate().setEnabled(false);
			//form.btnPrint().setEnabled(false);
		}
	}

	private void displayCurrentBloodSugar()
	{
		VitalSignsVoCollection voMetrics = form.getLocalContext().getBloods();
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		
		if(voMetrics == null || nIndex == null || nIndex.intValue() == -1 || nIndex.intValue() >= voMetrics.size())
			return;

		form.getLocalContext().setvitalSign(voMetrics.get(nIndex.intValue()));
		displayRecord(voMetrics.get(nIndex.intValue()));
		
		updatePrevNextButtons();
	}

	private void updatePrevNextButtons()
	{
		VitalSignsVoCollection voCollBloodSugar = form.getLocalContext().getBloods();
		Integer nIndex = form.getLocalContext().getCurrentIndex();

		form.btnNext().setEnabled(true);
		form.btnPrev().setEnabled(true);
		
		if(voCollBloodSugar == null || nIndex == null)
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			return;
		}
		
		if(nIndex.intValue() <= 0)
			form.btnPrev().setEnabled(false);

		if(nIndex.intValue() >= voCollBloodSugar.size() - 1)
			form.btnNext().setEnabled(false);
	}

	protected void onRadioButtongrpShowByValueChanged() throws PresentationLogicException 
	{
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoDay))
		{
			form.dteShowByDay().setEnabled(true);
			form.dteShowByDay().setValue(new Date());
			form.dteFrom().setEnabled(false);
			form.dteTo().setEnabled(false);
			form.dteFrom().setValue(null);
			form.dteTo().setValue(null);
		}
		else
		{
			form.dteShowByDay().setEnabled(false);
			form.dteShowByDay().setValue(null);
			form.dteFrom().setEnabled(true);
			form.dteTo().setEnabled(true);
			form.dteFrom().setValue(new Date());
			form.dteTo().setValue(new Date());
		}
		
		onBtnViewClick();
		
	}
	
	private void displayRecord(VitalSignsVo voVitalSign)
	{
		clearFields();
		
		form.decBloodSugar().setValue(voVitalSign.getBloodSugar().getBloodSugarValue());
		form.dteTaken().setValue(voVitalSign.getVitalsTakenDateTime().getDate());
		form.timTaken().setValue(voVitalSign.getVitalsTakenDateTime().getTime());
		form.txtHCP().setValue(voVitalSign.getAuthoringInformation().getAuthoringHcp().toString());
		
		if(voVitalSign.getBloodSugar().getType().equals(CBGType.RANDOM))
			form.BloodGlucoseGroup().setValue(GenForm.BloodGlucoseGroupEnumeration.rdoRandom);
		else
			form.BloodGlucoseGroup().setValue(GenForm.BloodGlucoseGroupEnumeration.rdoCBGM);
		
		if(voVitalSign.getBloodSugar().getTimePeriodIsNotNull())
			form.cmbTimePeriod().setValue(voVitalSign.getBloodSugar().getTimePeriod());
		
		if(voVitalSign.getBloodSugar().getPostBloodSugarValueIsNotNull())
			form.decPostValue().setValue(voVitalSign.getBloodSugar().getPostBloodSugarValue());
		
		if(voVitalSign.getBloodSugar().getTimeIntervalIsNotNull())
			form.intTimeInterval().setValue(voVitalSign.getBloodSugar().getTimeInterval());
				
		form.btnUpdate().setEnabled(true);
		showBloodGlucoseControls(voVitalSign.getBloodSugar().getType().equals(CBGType.CBGM));
	}

	private void refresh()
	{
		clearFields();
		listBloodSugar();
		form.setMode(FormMode.VIEW);
	}

	protected void onGrhBloodSugarPointClicked(GraphingPoint point) 
	{
		if(point.getType() == GraphingPointType.BLOODSUGAR)
		{ 			
			GraphingBloodSugar pointBloodSugar = (GraphingBloodSugar)point;
			form.getLocalContext().setvitalSign((VitalSignsVo)pointBloodSugar.getTag());
			displayRecord((VitalSignsVo)pointBloodSugar.getTag());
			form.btnUpdate().setEnabled(true);
			//form.btnPrint().setEnabled(true);
			
			//update the Prev/Next buttons
			VitalSignsVoCollection voTemperatures = form.getLocalContext().getBloods();
			for(int i = 0; i < voTemperatures.size(); i++)
			{
				if(form.getLocalContext().getvitalSign().getID_VitalSigns().intValue() == voTemperatures.get(i).getID_VitalSigns().intValue())
				{
					form.getLocalContext().setCurrentIndex(new Integer(i));
					updatePrevNextButtons();
					break;
				}
			}
		}
		
	}	
	
	
	protected void onBtnNextClick() throws PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() + 1));
		displayCurrentBloodSugar();
	}
	protected void onBtnPrevClick() throws PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() - 1));
		displayCurrentBloodSugar();
	}
	
	protected void onLnkReturnClick() throws PresentationLogicException 
	{
		//WDEV-14429
		if(isVitalSignsBloodSugarForTriage())
		{
			engine.close(DialogResult.OK);
			return;
		}
		
		//WDEV-7526
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.BaselineObservations.getID()))
		{
			engine.open(form.getForms().Core.BaselineObservations);
			
		}
		//ends here
		
		else if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.VitalSignsBaselineAndAll.getID()))
			engine.open(form.getForms().Core.VitalSignsBaselineAndAll);
		else
			engine.open(form.getForms().Core.VitalSignsAll);
	}

	protected void onRadioButtonBloodGlucoseGroupValueChanged() throws PresentationLogicException {
		if(form.BloodGlucoseGroup().getValue().equals(GenForm.BloodGlucoseGroupEnumeration.rdoRandom))
		{
			showBloodGlucoseControls(false);
			
			form.cmbTimePeriod().setEnabled(false);
			form.decBloodSugar().setEnabled(true);
			form.decPostValue().setEnabled(false);
			form.intTimeInterval().setEnabled(false);
			
			form.cmbTimePeriod().setValue(null);
			form.decPostValue().setValue(null);
			form.intTimeInterval().setValue(null);
		}
		else{
			showBloodGlucoseControls(true);
			
			form.cmbTimePeriod().setEnabled(true);
			form.decBloodSugar().setEnabled(true);
			form.decPostValue().setEnabled(true);
			form.intTimeInterval().setEnabled(true);	
		}	
		
	}
	
	private void showBloodGlucoseControls(boolean bCBGM) {
		form.lblValue().setVisible(true);
		form.decBloodSugar().setVisible(true);
		form.labelValueUnits().setVisible(true);
		
		if(bCBGM){
			form.lblValue().setValue("Pre Value (0-44): ");
			
			form.lblPostValue().setVisible(true);
			form.lblPostValueUnits().setVisible(true);
			form.lblTimeInterval().setVisible(true);
			form.lblTimePeriod().setVisible(true);
			
			form.cmbTimePeriod().setVisible(true);
			form.decPostValue().setVisible(true);
			form.intTimeInterval().setVisible(true);	
		}
		else{
			form.lblValue().setValue("Value (0-44): ");
			
			form.lblPostValue().setVisible(false);
			form.lblPostValueUnits().setVisible(false);
			form.lblTimeInterval().setVisible(false);
			form.lblTimePeriod().setVisible(false);
			
			form.cmbTimePeriod().setVisible(false);
			form.decPostValue().setVisible(false);
			form.intTimeInterval().setVisible(false);
		}
	}

	//WDEV-14429
	private boolean isVitalSignsBloodSugarForTriage()
	{
		if(engine.getFormName().equals(form.getForms().Core.VitalSignsBloodSugarForTriage))
			return true;
		
		return false;
	}
}
