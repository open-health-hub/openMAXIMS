//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.62 build 3119.29529)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.bedinfodialog;

import ims.admin.vo.SelectItemVo;
import ims.admin.vo.SelectItemVoCollection;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.PatientElectiveListBedAdmissionVo;
import ims.RefMan.vo.PatientElectiveListBedAdmissionVoCollection;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ElectiveListStatusReason;
import ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo;
import ims.clinical.vo.VTERiskAssessmentShortVo;
import ims.clinical.vo.VTERiskAssessmentShortVoCollection;
import ims.clinical.vo.lookups.VTEAsessmentStatus;
import ims.coe.vo.lookups.DischargeDestination;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.core.forms.bedinfodialog.GenForm.lyrDetailLayer.tabAdmissionDetailContainer.CaseFolderYesNoEnumeration;
import ims.core.forms.bedinfodialog.GenForm.lyrDetailLayer.tabBedMoveContainer.grdPatientsRow;
import ims.core.forms.bedinfodialog.GenForm.lyrDetailLayer.tabDischargeContainer.grp18RunningEnumeration;
import ims.core.forms.bedinfodialog.GenForm.lyrDetailLayer.tabDischargeContainer.grp18StoppedEnumeration;
import ims.core.forms.bedinfodialog.GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration;
import ims.core.forms.bedinfodialog.GenForm.lyrDetailLayer.tabInfantsContainer.grdInfantsRow;
import ims.core.forms.bedinfodialog.GenForm.lyrDetailLayer.tabTransferContainer.lyrTransferLayer.tabInContainer.TICaseFolderYesNoEnumeration;
import ims.core.forms.bedinfodialog.GenForm.lyrDetailLayer.tabTransferContainer.lyrTransferLayer.tabInContainer.grdTransferInRow;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.AdmissionDetailVo;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateStatusLiteVo;
import ims.core.vo.BedSpaceStateStatusVo;
import ims.core.vo.CommChannelVo;
import ims.core.vo.ConsultantStayVo;
import ims.core.vo.ConsultantStayVoCollection;
import ims.core.vo.DischargedEpisodeADTVo;
import ims.core.vo.DischargedEpisodeADTVoCollection;
import ims.core.vo.GpShortVo;
import ims.core.vo.HomeLeaveVo;
import ims.core.vo.InPatientEpisodeADTVo;
import ims.core.vo.InpatConsultantTransferVo;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.InpatientEpisodeLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.NextOfKin;
import ims.core.vo.Patient;
import ims.core.vo.PatientAlertLiteVo;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.PendingTransfersLiteVo;
import ims.core.vo.PendingTransfersLiteVoCollection;
import ims.core.vo.PersonAddress;
import ims.core.vo.WardStayVo;
import ims.core.vo.WardStayVoCollection;
import ims.core.vo.enums.BedInfoAction;
import ims.core.vo.enums.MOSQueryEvent;
import ims.core.vo.enums.MosType;
import ims.core.vo.enums.SelectItemType;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.MethodOfDischarge;
import ims.core.vo.lookups.PASSpecialty;
import ims.core.vo.lookups.PASSpecialtyCollection;
import ims.core.vo.lookups.PasEventType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.core.vo.lookups.TaxonomyType;
import ims.core.vo.lookups.TransferStatus;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.WardType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final String	ACCEPTING_CONSULTANT	= "ACCEPTING_CONSULTANT";
	private static final String	IN_CONSULTANT	= "IN_CONSULTANT";
	private static final String	OUT_CONSULTANT	= "OUT_CONSULTANT";
	private static final String	INFANT_CONSULTANT	= "INFANT_CONSULTANT";
		
	private static final String	ADMIT				= "Admit";
	private static final String	ALLOCATE_BED		= "Allocate Bed";
	private static final String	RETURN_FROM_LEAVE	= "Return From Leave";
	private static final String	PLANNED				= "P";
	private static final String	BOOKED				= "B";
	private static final String	DIAGNOSTIC			= "1";
	private static final String	TREATMENT			= "2";
	
	private static final Object	PATIENTDIED	= "4";
	private static final String	STILLBIRTH	= "5";

	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialise();
		//WDEV-9790 - parameter passed from wardview will indicate its readonly state
		if(args != null && args.length > 0) //WDEV-10421 - null pointer fix
		{
			if(args[0] instanceof Boolean)
			{
				if((Boolean)args[0].equals(true))
				{
					form.getLocalContext().setIsReadOnly(true);
					setDialogAsReadOnly();
				}	
			}			
		}
		
		/*
		//WDEV-10968
		try 
		{
			AppSiteVo site = domain.getSite();
			if(site.getSite().equals(ApplicationSiteName.CCO))
				form.lyrDetail().tabPatient().btnEditPatient().setEnabled(false);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
		}
		*/
	}

	private void setDialogAsReadOnly()
	{	
		form.lyrDetail().tabPatient().btnEditPatient().setEnabled(false);
		form.lyrDetail().tabTransfer().btnCancelTransfer().setEnabled(false);
		form.lyrDetail().tabTransfer().btnTransfer().setEnabled(false);
		form.lyrDetail().tabDischarge().btnDischarge().setEnabled(false);
		form.lyrDetail().tabDischarge().btnVTERiskAssesssment().setEnabled(false); //wdev-14858
		form.lyrDetail().tabAdmission().btnAdmit().setEnabled(false);
		form.lyrDetail().tabHomeLeave().btnHome().setEnabled(false);
		form.lyrDetail().tabCloseBed().btnAssign().setEnabled(false);
		form.lyrDetail().tabCloseBed().btnClose().setEnabled(false);
		form.lyrDetail().tabCloseBed().btnReOpen().setEnabled(false);
		form.lyrDetail().tabEstimatedDischarge().btnClearEstimate().setEnabled(false);
		form.lyrDetail().tabEstimatedDischarge().btnSaveEstDischarge().setEnabled(false);
		form.lyrDetail().tabBedMove().btnInternalTransfer().setEnabled(false);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().btnInfantDischarge().setEnabled(false);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().btnInfantTransfer().setEnabled(false);
	}

	private void initialise()
	{
		initialiseGridColumns();
		
		clearPatientDetails();

		form.lyrDetail().tabPatient().btnEditPatient().setImage(form.getImages().Core.Edit);
		form.lyrDetail().tabTransfer().btnCancelTransfer().setImage(form.getImages().Core.Delete);
		form.lyrDetail().tabTransfer().btnTransfer().setImage(form.getImages().Core.Transfer);
		form.lyrDetail().tabDischarge().btnDischarge().setImage(form.getImages().Core.Discharge);
		form.lyrDetail().tabHomeLeave().btnHome().setImage(form.getImages().Core.HomeLeave);
		form.lyrDetail().tabAdmission().btnAdmit().setImage(form.getImages().Core.ClinicalData);
		form.lyrDetail().tabEstimatedDischarge().btnSaveEstDischarge().setImage(form.getImages().Core.Save);
		form.lyrDetail().tabCloseBed().btnAssign().setImage(form.getImages().Admin.BedReload24);
		form.lyrDetail().tabCloseBed().btnClose().setImage(form.getImages().Admin.BedClose24);
		form.lyrDetail().tabCloseBed().btnReOpen().setImage(form.getImages().Admin.BedOpen24);
		form.lyrDetail().tabBedMove().btnInternalTransfer().setImage(form.getImages().Admin.BedNext24);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().btnInfantTransfer().setImage(form.getImages().Admin.BedNext24);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().btnInfantDischarge().setImage(form.getImages().Core.Discharge);
		form.lyrDetail().tabEstimatedDischarge().btnClearEstimate().setImage(form.getImages().Core.Delete);	
		
		BedStatus status = form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getCurrentBedStatusIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getCurrentBedStatus().getBedStatusIsNotNull() ? form.getGlobalContext().Core.getSelectedBedSpaceState().getCurrentBedStatus().getBedStatus() : null;
		form.getLocalContext().setBedStatus(status);

		// if a bed is selected
		if (status != null)
		{
			if (status.equals(BedStatus.AVAILABLE))
			{
				form.lyrDetail().tabAdmission().ccAdmit().initialise();
				form.lyrDetail().tabAdmission().btnAdmit().setEnabled(false);
			}
			else
			{
				displayPatientDetals();
				loadHospitalsData();
				displayAdmissionDetails();
			}
		}
		// no bed selected
		else
		{
			if(form.getGlobalContext().Core.getSelectedWaitingAreaPatient() == null)
				form.lyrDetail().tabAdmission().ccAdmit().initialise();
			else
			{
				displayPatientDetals();
				loadHospitalsData();
			}
		}
			

		boolean isMaternityInpatient = form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisodeIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getIsMaternityInpatientIsNotNull() ? form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getIsMaternityInpatient() : false;
		if (isMaternityInpatient)
			storeInfants();
		
		//WDEV-13324
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().setVisible(false);
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbCCOOutSpecialty().setVisible(false);
		form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbCCOConsultantSpecialty().setVisible(false);
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dteDischarge().setRequired(true);
			
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().setVisible(true);
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbCCOOutSpecialty().setVisible(true);
			form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbCCOConsultantSpecialty().setVisible(true);

			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().setVisible(false);
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().setVisible(false);
			form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbConsultantSpecialty().setVisible(false);
		}
		//wdev-14858
		form.getGlobalContext().Core.setVTERiskAssessmentShortVo(null);
		form.getLocalContext().setInpatientEpForVTERiskAssessmentVo(null);
		form.getLocalContext().setVTEShouldCreate(null);
		form.getLocalContext().setUserHasRight(null);
		if(	form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
		{
			InpatientEpisodeForVTERiskAsessmentVo tempVo = domain.getInpatEpisodeForVTERiskAssessment(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode());
			if(	tempVo != null && ( VTEAsessmentStatus.REQUIRED.equals(tempVo.getVTEAssessmentStatus()) || VTEAsessmentStatus.INPROGRESS.equals(tempVo.getVTEAssessmentStatus()) ) )	//wdev-14878  //wdev-14858
			{
				form.getLocalContext().setInpatientEpForVTERiskAssessmentVo(tempVo);
				if( engine.hasRight(AppRight.DISCHARGE_ACCESS_TO_VTE_ASSESSMENT) && ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() == true)	//wdev-14892,wdev-15062
					form.getLocalContext().setShowVTERiskAssessmentButton(true);
				else
					form.getLocalContext().setShowVTERiskAssessmentButton(false);
			}
			else
				form.getLocalContext().setShowVTERiskAssessmentButton(false);
			
		}
		else if( form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
		{
			InpatientEpisodeForVTERiskAsessmentVo tempVo = domain.getInpatEpisodeForVTERiskAssessment(form.getGlobalContext().Core.getSelectedWaitingAreaPatient());//WDEV-14963
			if(	tempVo != null && ( VTEAsessmentStatus.REQUIRED.equals(tempVo.getVTEAssessmentStatus()) || VTEAsessmentStatus.INPROGRESS.equals(tempVo.getVTEAssessmentStatus()) ) ) //wdev-14778 //wdev-14858
			{
				form.getLocalContext().setInpatientEpForVTERiskAssessmentVo(tempVo);
				if( engine.hasRight(AppRight.DISCHARGE_ACCESS_TO_VTE_ASSESSMENT) && ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() == true)	//wdev-14892,wdev-15062
					form.getLocalContext().setShowVTERiskAssessmentButton(true);
				else
					form.getLocalContext().setShowVTERiskAssessmentButton(false);
			}
			else
				form.getLocalContext().setShowVTERiskAssessmentButton(false);
		}
		else
		{
			form.getLocalContext().setShowVTERiskAssessmentButton(false);
			
		}
		form.getGlobalContext().Core.setCreateVTERiskAssessmentOnDischarge(null);
		//------------

		updateControlState();
		
		LocationLiteVo currentHospital = domain.getCurrentHospital(engine.getCurrentLocation());//WDEV-18012
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutHospital().setValue(currentHospital);//WDEV-18012
		cmbOutHospitalValueChanged(true);//WDEV-18012
	}
	private void initialiseGridColumns() 
	{
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()); 
		form.lyrDetail().tabBedMove().grdPatients().setColDisplayIdCaption(dispIdType.getText());
		form.lyrDetail().tabInfants().grdInfants().setColDisplayIdCaption(dispIdType.getText());
	}
	
	private void displayAdmissionDetails()
	{
		if(ConfigFlag.UI.ADT_VIEW_ADMISSIONDETAILS_FROM_BED.getValue())
		{
			if(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
			{
				if(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisodeIsNotNull())
				{
					if(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEventIsNotNull())
					{
						AdmissionDetailVo voAdmission = domain.getAdmissionDetailByPasEvent(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent());
						if(voAdmission != null)
						{
							form.lyrDetail().tabAdmissionDetail().cmbWard().newRow(form.getGlobalContext().Core.getADTWard(), form.getGlobalContext().Core.getADTWard().toString());
							form.lyrDetail().tabAdmissionDetail().cmbWard().setValue(form.getGlobalContext().Core.getADTWard());

							if(voAdmission.getPasEventIsNotNull())
							{
								form.lyrDetail().tabAdmissionDetail().ccConsultant().setValue(voAdmission.getPasEvent().getConsultant());
								
								//WDEV-14465
								if (voAdmission.getPasEvent().getPASSpecialtyIsNotNull()&& ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO")) //WDEV-14047  //WDEV-14465
								{
									form.lyrDetail().tabAdmissionDetail().cmbAdmSpecialty().newRow(voAdmission.getPasEvent().getPASSpecialty().getText(), voAdmission.getPasEvent().getPASSpecialty().getText());
									form.lyrDetail().tabAdmissionDetail().cmbAdmSpecialty().setValue(voAdmission.getPasEvent().getPASSpecialty().getText());
								}
								else if (voAdmission.getPasEvent().getSpecialtyIsNotNull())
								{
									form.lyrDetail().tabAdmissionDetail().cmbAdmSpecialty().newRow(voAdmission.getPasEvent().getSpecialty().getText(), voAdmission.getPasEvent().getSpecialty().getText());
									form.lyrDetail().tabAdmissionDetail().cmbAdmSpecialty().setValue(voAdmission.getPasEvent().getSpecialty().getText());
								}
								
								//form.lyrDetail().tabAdmissionDetail().cmbAdmSpecialty().setValue(voAdmission.getPasEvent().getSpecialty());
							}

							form.lyrDetail().tabAdmissionDetail().cmbAdmWardType().setValue(voAdmission.getWardType()); 
							form.lyrDetail().tabAdmissionDetail().cmbMethodOfAdmission().setValue(voAdmission.getMethodOfAdmission()); 
							form.lyrDetail().tabAdmissionDetail().cmbSourceOfAdmission().setValue(voAdmission.getSourceOfAdmission());
							form.lyrDetail().tabAdmissionDetail().dtimAdmission().setValue(voAdmission.getAdmissionDateTime());
							form.lyrDetail().tabAdmissionDetail().dteAdmEstDischarge().setValue(voAdmission.getEstDischargeDate());						
							form.lyrDetail().tabAdmissionDetail().chkChaplain().setValue(voAdmission.getIsChaplainRequired());
							form.lyrDetail().tabAdmissionDetail().txtReasonForAdmission().setValue(voAdmission.getReasonForAdmission());
							form.lyrDetail().tabAdmissionDetail().ccReferringConsultant().setValue(voAdmission.getReferringConsultant());
							form.lyrDetail().tabAdmissionDetail().cmbPatientStatus().setValue(voAdmission.getPatientStatus());
							
							if(voAdmission.getPasEventIsNotNull())
								form.lyrDetail().tabAdmissionDetail().cmbSourceOfReferral().setValue(voAdmission.getPasEvent().getSourceOfReferral());
							
							//WDEV-12957
							//hide extra controls by default for WST
							form.lyrDetail().tabAdmissionDetail().lblCaseComment().setVisible(false);
							form.lyrDetail().tabAdmissionDetail().txtCaseComment().setVisible(false);

							form.lyrDetail().tabAdmissionDetail().lblUpdateCasefolder().setVisible(false);
							form.lyrDetail().tabAdmissionDetail().CaseFolderYesNo().setVisible(false);
							
							if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
							{
								//show extra controls
								form.lyrDetail().tabAdmissionDetail().lblCaseComment().setVisible(true);
								form.lyrDetail().tabAdmissionDetail().txtCaseComment().setVisible(true);

								form.lyrDetail().tabAdmissionDetail().lblUpdateCasefolder().setVisible(true);
								form.lyrDetail().tabAdmissionDetail().CaseFolderYesNo().setVisible(true);
								
								//disable
								form.lyrDetail().tabAdmissionDetail().txtCaseComment().setEnabled(false);							
								form.lyrDetail().tabAdmissionDetail().CaseFolderYesNo().setEnabled(false);
								
								//populate
								form.lyrDetail().tabAdmissionDetail().txtCaseComment().setValue(voAdmission.getCaseFolderComments());							
					
								if(voAdmission.getUpdateCFLIsNotNull())
									form.lyrDetail().tabAdmissionDetail().CaseFolderYesNo().setValue(voAdmission.getUpdateCFL() ? CaseFolderYesNoEnumeration.rdoYes : CaseFolderYesNoEnumeration.rdoNo);
							}
						}
					}
				}
			}
		}
	}

	private void loadHospitalsData()
	{
		LocationLiteVoCollection voCollHospital = domain.listActiveHospitalsLite();
		form.getLocalContext().setHospitals(voCollHospital);
	}

	private void clearPatientDetails()
	{
		form.lblHospitalNoBanner().setValue("");
		form.lblNhsNoBanner().setValue("");
		form.lblPatientNameBanner().setValue("");
		form.lblAddress1Banner().setValue("");
		form.lblAddress2Banner().setValue("");

		form.lyrDetail().tabPatient().lblPatientNameInfo().setValue("");
		form.lyrDetail().tabPatient().lblHospNoInfo().setValue("");
		form.lyrDetail().tabPatient().lblNHSNoInfo().setValue("");
		form.lyrDetail().tabPatient().lblDOBInfo().setValue("");
		form.lyrDetail().tabPatient().lblAgeInfo().setValue("");
		form.lyrDetail().tabPatient().lblGenderInfo().setValue("");
		form.lyrDetail().tabPatient().lblPatientAddress1Info().setValue("");
		form.lyrDetail().tabPatient().lblPatientAddress2Info().setValue("");
		form.lyrDetail().tabPatient().lblPatientAddress3Info().setValue("");
		form.lyrDetail().tabPatient().lblPatientAddress4Info().setValue("");
		form.lyrDetail().tabPatient().lblPatientAddress5Info().setValue("");
		form.lyrDetail().tabPatient().lblPatientPostcodeInfo().setValue("");
		
		form.lyrDetail().tabPatient().lblAlerts().setValue("");

		form.lyrDetail().tabPatient().lblLARInfo().setValue("");

		form.lyrDetail().tabPatient().lblGPNameInfo().setValue("");
		form.lyrDetail().tabPatient().lblGPAddress1Info().setValue("");
		form.lyrDetail().tabPatient().lblGPAddress2Info().setValue("");
		form.lyrDetail().tabPatient().lblGPAddress3Info().setValue("");
		form.lyrDetail().tabPatient().lblGPAddress4Info().setValue("");
		form.lyrDetail().tabPatient().lblGPAddress5Info().setValue("");
		form.lyrDetail().tabPatient().lblGPPostCode().setValue("");
		form.lyrDetail().tabPatient().lblGPPhoneInfo().setValue("");

		form.lyrDetail().tabPatient().lblNOKNameInfo().setValue("");
		form.lyrDetail().tabPatient().lblNOKAddress1Info().setValue("");
		form.lyrDetail().tabPatient().lblNOKAddress2Info().setValue("");
		form.lyrDetail().tabPatient().lblNOKAddress3Info().setValue("");
		form.lyrDetail().tabPatient().lblNOKAddress4Info().setValue("");
		form.lyrDetail().tabPatient().lblNOKAddress5Info().setValue("");
		form.lyrDetail().tabPatient().lblNokPostCode().setValue("");
		form.lyrDetail().tabPatient().lblNOKPhoneInfo().setValue("");
		form.lyrDetail().tabPatient().lblNOKWorkPhone().setValue("");

	}

	private void displayPatientDetals()
	{
		BedSpaceStateLiteVo voBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if (voBedSpaceState != null)
		{
			PatientShort voPatShort = null;
			if (voBedSpaceState.getInpatientEpisodeIsNotNull() && voBedSpaceState.getInpatientEpisode().getPasEventIsNotNull())
			{
				populateEventControlsFromData(voBedSpaceState);
				voPatShort = voBedSpaceState.getInpatientEpisode().getPasEvent().getPatient();
			}

			if (voPatShort != null)
			{
				Patient voPatient = domain.getPatient(voPatShort);
				if (voPatient != null)
				{
					// display all patient details
					populatePatientControlsFromData(voPatient);
				}
			}
		}
		else if(form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
		{
			populateEventControlsFromData(form.getGlobalContext().Core.getSelectedWaitingAreaPatient());
			
			if(form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEventIsNotNull() && form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent().getPatientIsNotNull())
			{
				Patient voPatient = domain.getPatient(form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent().getPatient());
				if (voPatient != null)
				{
					// display all patient details
					populatePatientControlsFromData(voPatient);
				}
			}
		}
	}

	private void populateEventControlsFromData(InpatientEpisodeLiteVo voInpatientEpisode)
	{
		if (voInpatientEpisode.getPasEventIsNotNull())
		{
			form.lblConsultantBanner().setValue(voInpatientEpisode.getPasEvent().getConsultantIsNotNull() ? voInpatientEpisode.getPasEvent().getConsultant().toString() : "");
			
			//WDEV-14465
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				form.lblSpecialtyBanner().setValue(voInpatientEpisode.getPasEvent().getPASSpecialtyIsNotNull() ? voInpatientEpisode.getPasEvent().getPASSpecialty().getText() : "");
			}
			else
				form.lblSpecialtyBanner().setValue(voInpatientEpisode.getPasEvent().getSpecialtyIsNotNull() ? voInpatientEpisode.getPasEvent().getSpecialty().getText() : "");
		}
		form.lblEstDsichargeBanner().setValue(voInpatientEpisode.getEstDischargeDateIsNotNull() ? voInpatientEpisode.getEstDischargeDate().toString() : "");
	}

	private void populateEventControlsFromData(BedSpaceStateLiteVo voBedSpaceState)
	{
		if (voBedSpaceState.getInpatientEpisode() == null)
			return;

		InpatientEpisodeLiteVo voInpatientEpisode = voBedSpaceState.getInpatientEpisode();
		populateEventControlsFromData(voInpatientEpisode);
	}

	private void populatePatientControlsFromData(Patient voPatient)
	{
		form.lblHospitalNoBanner().setValue(voPatient.getHospnum() != null ? voPatient.getHospnum().getValue() : "");
		form.lblNhsNoBanner().setValue(voPatient.getNhsn() != null ? voPatient.getNhsn().getValue() : "");
		
		String strPatName = voPatient.getISelectedPatientName();
		if(strPatName.length() > 25)
		{
			form.lblPatientNameBanner().setValue(strPatName.substring(0,25) + "...");
			form.lblPatientNameBanner().setTooltip(strPatName);
		}
		else
			form.lblPatientNameBanner().setValue(strPatName);
		
		form.lblAddress1Banner().setValue(voPatient.getAddressIsNotNull() ? voPatient.getAddress().getLine1() : "");
		form.lblAddress2Banner().setValue(voPatient.getAddressIsNotNull() ? voPatient.getAddress().getLine2() : "");

		form.lyrDetail().tabPatient().lblPatientNameInfo().setValue(voPatient.getName() != null ? voPatient.getName().toShortForm() : "");
		form.lyrDetail().tabPatient().lblHospNoInfo().setValue(voPatient.getHospnum() != null ? voPatient.getHospnum().getValue() : "");
		form.lyrDetail().tabPatient().lblNHSNoInfo().setValue(voPatient.getNhsn() != null ? voPatient.getNhsn().getValue() : "");
		form.lyrDetail().tabPatient().lblDOBInfo().setValue(voPatient.getDobIsNotNull() ? voPatient.getDob().toString() : "");
		
		//WDEV-8000
		if(voPatient.getDod() == null)
		{
			form.lyrDetail().tabPatient().lblDOD().setVisible(false);
			form.lyrDetail().tabPatient().lblDODlabel().setVisible(false);
		}
		else
		{
			form.lyrDetail().tabPatient().lblDOD().setValue(voPatient.getDod().toString());
			form.lyrDetail().tabPatient().lblDOD().setVisible(true);
			form.lyrDetail().tabPatient().lblDODlabel().setVisible(true);
		}
		
		voPatient.calculateAge();
		form.lyrDetail().tabPatient().lblAgeInfo().setValue(voPatient.getAgeText());
		
		form.lyrDetail().tabPatient().lblGenderInfo().setValue(voPatient.getSexIsNotNull() ? voPatient.getSex().getText() : "");
		form.lyrDetail().tabPatient().lblPatientAddress1Info().setValue(voPatient.getAddressIsNotNull() ? voPatient.getAddress().getLine1() : "");
		form.lyrDetail().tabPatient().lblPatientAddress2Info().setValue(voPatient.getAddressIsNotNull() ? voPatient.getAddress().getLine2() : "");
		form.lyrDetail().tabPatient().lblPatientAddress3Info().setValue(voPatient.getAddressIsNotNull() ? voPatient.getAddress().getLine3() : "");
		form.lyrDetail().tabPatient().lblPatientAddress4Info().setValue(voPatient.getAddressIsNotNull() ? voPatient.getAddress().getLine4() : "");
		form.lyrDetail().tabPatient().lblPatientAddress5Info().setValue(voPatient.getAddressIsNotNull() ? voPatient.getAddress().getLine5() : "");
		form.lyrDetail().tabPatient().lblPatientPostcodeInfo().setValue(voPatient.getAddressIsNotNull() ? voPatient.getAddress().getPostCode() : "");
		
		
		if(voPatient.getPatientAlertsIsNotNull())
		{
			String alertString = "";
			for(PatientAlertLiteVo voAlert : voPatient.getPatientAlerts())
			{
				if(voAlert.getAlertTypeIsNotNull() && voAlert.getIsCurrentlyActiveAlert())	//wdev-11896
					alertString += voAlert.getAlertType().getText() + "\n";
			}
			form.lyrDetail().tabPatient().lblAlerts().setValue(alertString);
		}
		
		
		form.lyrDetail().tabPatient().lblLARInfo().setValue(null);

		if (voPatient.getGpIsNotNull())
		{
			form.lyrDetail().tabPatient().lblGPNameInfo().setValue(voPatient.getGp().toString());
			
			PersonAddress voAddress = null;
			GpShortVo voGp = voPatient.getGp();
			if (voGp.getPracticesIsNotNull())
			{
				if (voGp.getPractices().size() > 0)
				{
					if (voGp.getPractices().get(0).getPracticeIsNotNull())
					{
						if (voGp.getPractices().get(0).getPractice().getAddressIsNotNull())
							voAddress = voGp.getPractices().get(0).getPractice().getAddress();
					}
				}
			}

			if (voAddress != null)
			{
				form.lyrDetail().tabPatient().lblGPAddress1Info().setValue(voAddress.getLine1());
				form.lyrDetail().tabPatient().lblGPAddress2Info().setValue(voAddress.getLine2());
				form.lyrDetail().tabPatient().lblGPAddress3Info().setValue(voAddress.getLine3());
				form.lyrDetail().tabPatient().lblGPAddress4Info().setValue(voAddress.getLine4());
				form.lyrDetail().tabPatient().lblGPAddress5Info().setValue(voAddress.getLine5());
				form.lyrDetail().tabPatient().lblGPPostCode().setValue(voAddress.getPostCode());
				form.lyrDetail().tabPatient().lblGPPhoneInfo().setValue(voAddress.getPhone());
			}
		}

		if (voPatient.getNokIsNotNull())
		{
			NextOfKin voNok = voPatient.getNok();

			if (voNok.getNameIsNotNull())
				form.lyrDetail().tabPatient().lblNOKNameInfo().setValue(voNok.getName().toShortForm());

			if (voNok.getAddressIsNotNull())
			{
				PersonAddress voNokAddress = voNok.getAddress();

				form.lyrDetail().tabPatient().lblNOKAddress1Info().setValue(voNokAddress.getLine1());
				form.lyrDetail().tabPatient().lblNOKAddress2Info().setValue(voNokAddress.getLine2());
				form.lyrDetail().tabPatient().lblNOKAddress3Info().setValue(voNokAddress.getLine3());
				form.lyrDetail().tabPatient().lblNOKAddress4Info().setValue(voNokAddress.getLine4());
				form.lyrDetail().tabPatient().lblNOKAddress5Info().setValue(voNokAddress.getLine5());
				form.lyrDetail().tabPatient().lblNokPostCode().setValue(voNokAddress.getPostCode());
				form.lyrDetail().tabPatient().lblNOKPhoneInfo().setValue(voNokAddress.getPhone());
			}
			
			if(voNok.getCommChannelsIsNotNull())
			{
				CommChannelVo voComm = voNok.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);
				if(voComm != null)
					form.lyrDetail().tabPatient().lblNOKWorkPhone().setValue(voComm.getCommValue());
			}
		}
	}

	private void updateControlState()
	{
		initialiseAdmissionDetailTab();
	
		boolean isMaternityInpatient = form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisodeIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getIsMaternityInpatientIsNotNull() ? form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getIsMaternityInpatient() : false;

		BedStatus status = form.getLocalContext().getBedStatus();
		if (status != null)
		{
			form.lblNoPatient().setVisible(!status.equals(BedStatus.OCCUPIED));
			if (status.equals(BedStatus.AVAILABLE))
			{
				// show Admit,Transfer In,Close,Cleaning
				hidePatientHeaderPanel();

				form.lyrDetail().tabPatient().setVisible(false);
				form.lyrDetail().tabPatient().setHeaderVisible(false);
				form.lyrDetail().tabDischarge().setHeaderVisible(false);
				form.lyrDetail().tabDischarge().setVisible(false);
				form.lyrDetail().tabHomeLeave().setHeaderVisible(false);
				form.lyrDetail().tabHomeLeave().setVisible(false);
				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().setHeaderVisible(false);
				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().setVisible(false);
				form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().setHeaderVisible(false);
				form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().setVisible(false);
				form.lyrDetail().tabEstimatedDischarge().setVisible(false);
				form.lyrDetail().tabEstimatedDischarge().setHeaderVisible(false);

				form.lyrDetail().tabAdmission().setVisible(true);

				form.lyrDetail().tabTransfer().setVisible(true);
				form.lyrDetail().tabTransfer().btnTransfer().setText("Accept \n Transfer");
				form.lyrDetail().tabTransfer().lyrTransfer().tabIn().setVisible(true);

				form.lyrDetail().tabCloseBed().setVisible(true);
				form.lyrDetail().tabCloseBed().btnReOpen().setVisible(false);

				if (!engine.hasRight(AppRight.ALLOW_BEDMAINTENANCE_ADTWARDVIEW))
					form.lyrDetail().tabCloseBed().setHeaderVisible(false);

				form.lyrDetail().showtabAdmission();

				if (!isMaternityInpatient)
				{
					form.lyrDetail().tabInfants().setVisible(false);
					form.lyrDetail().tabInfants().setHeaderVisible(false);
				}
			}
			if (status.equals(BedStatus.OCCUPIED))
			{
				// show Patient,Discharge,Transfer Out,Consultant Transfer
				form.lyrDetail().tabAdmission().setHeaderVisible(false);
				form.lyrDetail().tabAdmission().setVisible(false);
				form.lyrDetail().tabHomeLeave().setHeaderVisible(false);
				form.lyrDetail().tabHomeLeave().setVisible(false);
	
				if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
				{
					form.lyrDetail().tabHomeLeave().setHeaderVisible(true);
					form.lyrDetail().tabHomeLeave().setVisible(true);
				}

				form.lyrDetail().tabTransfer().lyrTransfer().tabIn().setHeaderVisible(false);
				form.lyrDetail().tabTransfer().lyrTransfer().tabIn().setVisible(false);
				form.lyrDetail().tabCloseBed().setHeaderVisible(false);
				form.lyrDetail().tabCloseBed().setVisible(false);
				form.lyrDetail().tabBedMove().setVisible(false);
				form.lyrDetail().tabBedMove().setHeaderVisible(false);
				//WDEV-13247
				if(ConfigFlag.UI.ADT_VIEW_ADMISSIONDETAILS_FROM_BED.getValue())
					form.lyrDetail().tabAdmissionDetail().setHeaderVisible(true);
				
				if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
				{
					form.lyrDetail().tabEstimatedDischarge().lblEstRevisedStay().setVisible(false);
					form.lyrDetail().tabEstimatedDischarge().intEstRevisedStay().setVisible(false);
					form.lyrDetail().tabEstimatedDischarge().lblDischargeReadyDate().setVisible(false);
					form.lyrDetail().tabEstimatedDischarge().dteDischargeReady().setVisible(false);
				}
				else if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
				{
					form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().setEnabled(false);
				}
				
				PendingTransfersLiteVo voTransfer = isInpatientEpisodeonTransferOutList(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisodeIsNotNull() ? form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode() : null);
				form.getLocalContext().setPendingTransferOut(voTransfer);
				//WDEV-7972
				form.lblDestWard().setVisible(voTransfer != null);
				form.lblWardBanner().setVisible(voTransfer != null);
				form.lblWardBanner().setValue(voTransfer != null && voTransfer.getDestinationWardIsNotNull() ? voTransfer.getDestinationWard().getName() : "");

				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().setVisible(true);
				form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().setVisible(true);

				form.lyrDetail().showtabTransfer();
				form.lyrDetail().tabTransfer().lyrTransfer().showtabOut();
				populateTransferOutTabFromData();
				form.lyrDetail().tabTransfer().btnCancelTransfer().setVisible(form.getLocalContext().getPendingTransferOutIsNotNull());
				form.lyrDetail().tabDischarge().cmbReason().setEnabled(form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration.rdoYesTreat) && form.lyrDetail().tabDischarge().btnDischarge().isEnabled());  //wdev-15025

				if (!isMaternityInpatient)
				{
					form.lyrDetail().tabInfants().setVisible(false);
					form.lyrDetail().tabInfants().setHeaderVisible(false);
				}
			}
			if (status.equals(BedStatus.FOR_CLEANING))
			{
				// show Re-open,Close
				hidePatientHeaderPanel();

				form.lyrDetail().tabPatient().setVisible(false);
				form.lyrDetail().tabPatient().setHeaderVisible(false);
				form.lyrDetail().tabAdmission().setHeaderVisible(false);
				form.lyrDetail().tabAdmission().setVisible(false);
				form.lyrDetail().tabTransfer().setHeaderVisible(false);
				form.lyrDetail().tabTransfer().setVisible(false);
				form.lyrDetail().tabDischarge().setHeaderVisible(false);
				form.lyrDetail().tabDischarge().setVisible(false);
				form.lyrDetail().tabEstimatedDischarge().setHeaderVisible(false);
				form.lyrDetail().tabEstimatedDischarge().setVisible(false);
				form.lyrDetail().tabHomeLeave().setHeaderVisible(false);
				form.lyrDetail().tabHomeLeave().setVisible(false);
				form.lyrDetail().tabCloseBed().btnAssign().setVisible(false);
				form.lyrDetail().tabBedMove().setVisible(false);
				form.lyrDetail().tabBedMove().setHeaderVisible(false);

				form.lyrDetail().tabCloseBed().setVisible(true);

				if (!engine.hasRight(AppRight.ALLOW_BEDMAINTENANCE_ADTWARDVIEW))
					form.lyrDetail().tabCloseBed().setHeaderVisible(false);
				else
					populateCloseBedTabFromData();
				
				if (!isMaternityInpatient)
				{
					form.lyrDetail().tabInfants().setVisible(false);
					form.lyrDetail().tabInfants().setHeaderVisible(false);
				}
			}
			if (status.equals(BedStatus.CLOSED))
			{
				// show Re-open,Cleaning
				hidePatientHeaderPanel();

				form.lyrDetail().tabPatient().setVisible(false);
				form.lyrDetail().tabPatient().setHeaderVisible(false);
				form.lyrDetail().tabAdmission().setHeaderVisible(false);
				form.lyrDetail().tabAdmission().setVisible(false);
				form.lyrDetail().tabTransfer().setHeaderVisible(false);
				form.lyrDetail().tabTransfer().setVisible(false);
				form.lyrDetail().tabDischarge().setHeaderVisible(false);
				form.lyrDetail().tabDischarge().setVisible(false);
				form.lyrDetail().tabEstimatedDischarge().setHeaderVisible(false);
				form.lyrDetail().tabEstimatedDischarge().setVisible(false);
				form.lyrDetail().tabHomeLeave().setHeaderVisible(false);
				form.lyrDetail().tabHomeLeave().setVisible(false);
				form.lyrDetail().tabBedMove().setVisible(false);
				form.lyrDetail().tabBedMove().setHeaderVisible(false);

				form.lyrDetail().tabCloseBed().setVisible(true);
				form.lyrDetail().tabCloseBed().btnClose().setVisible(false);

				form.lyrDetail().tabCloseBed().cmbCloseReason().setEnabled(false);
				form.lyrDetail().tabCloseBed().cmbUser().setEnabled(false);
				form.lyrDetail().tabCloseBed().dtimEstReOpen().setEnabled(false);
				form.lyrDetail().tabCloseBed().dtimClose().setEnabled(false);

				if (!engine.hasRight(AppRight.ALLOW_BEDMAINTENANCE_ADTWARDVIEW))
					form.lyrDetail().tabCloseBed().setHeaderVisible(false);
				else
				{
					if (form.getLocalContext().getCloseBedStatus() == null)
					{
						if (form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getCurrentBedStatusIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getCurrentBedStatus().getID_BedSpaceStateStatusIsNotNull())
							form.getLocalContext().setCloseBedStatus(domain.getBedSpaceStateStatus(form.getGlobalContext().Core.getSelectedBedSpaceState().getCurrentBedStatus()));
					}

					populateCloseBedTabFromData();
				}

				if (!isMaternityInpatient)
				{
					form.lyrDetail().tabInfants().setVisible(false);
					form.lyrDetail().tabInfants().setHeaderVisible(false);
				}
			}
		}
		else
		{
			//check GC and if a waiting area patient is selected allow Discharge/Transfer
			if(form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
			{
				// show Patient,Discharge,Transfer Out,Consultant Transfer
				form.lblNoPatient().setVisible(false);
				form.lyrDetail().tabAdmission().setHeaderVisible(false);
				form.lyrDetail().tabAdmission().setVisible(false);
				form.lyrDetail().tabHomeLeave().setHeaderVisible(false);
				form.lyrDetail().tabHomeLeave().setVisible(false);
				form.lyrDetail().tabTransfer().lyrTransfer().tabIn().setHeaderVisible(false);
				form.lyrDetail().tabTransfer().lyrTransfer().tabIn().setVisible(false);
				form.lyrDetail().tabCloseBed().setHeaderVisible(false);
				form.lyrDetail().tabCloseBed().setVisible(false);
				form.lyrDetail().tabBedMove().setVisible(false);
				form.lyrDetail().tabBedMove().setHeaderVisible(false);

				PendingTransfersLiteVo voTransfer = isInpatientEpisodeonTransferOutList(form.getGlobalContext().Core.getSelectedWaitingAreaPatient());
				form.getLocalContext().setPendingTransferOut(voTransfer);

				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().setVisible(true);
				form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().setVisible(true);

				form.lyrDetail().tabTransfer().lyrTransfer().showtabOut();
				populateTransferOutTabFromData();
				form.lyrDetail().tabTransfer().btnCancelTransfer().setVisible(form.getLocalContext().getPendingTransferOutIsNotNull());
				form.lyrDetail().tabDischarge().cmbReason().setEnabled(form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration.rdoYesTreat) && form.lyrDetail().tabDischarge().btnDischarge().isEnabled()); //wdev-15025 
				form.lblWardBanner().setValue(voTransfer != null && voTransfer.getDestinationWardIsNotNull() ? voTransfer.getDestinationWard().getName() : "");
				
				if (!isMaternityInpatient)
				{
					form.lyrDetail().tabInfants().setVisible(false);
					form.lyrDetail().tabInfants().setHeaderVisible(false);
				}
				
				//no bed selected
				form.lyrDetail().tabDischarge().chkAllocateForCleaning().setVisible(false);
				
				if(form.getGlobalContext().Core.getBedInfoActionIsNotNull())
				{
					if(form.getGlobalContext().Core.getBedInfoAction().equals(BedInfoAction.TRANSFERWAITINGAREAPATIENT))
						form.lyrDetail().showtabTransfer();
					else if(form.getGlobalContext().Core.getBedInfoAction().equals(BedInfoAction.DISCHARGEWAITINGAREAPATIENT))
					{
						populateDischargeTabFromData();
						form.lyrDetail().showtabDischarge();
					}
					
					if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO")) //WDEV-16266
					{
						form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().setEnabled(false);
					}
				}
			}
			else
			{
				// WAITING AREA Display
				// show Admit,Transfer In,Close,Cleaning
				hidePatientHeaderPanel();
				
				form.lyrDetail().tabPatient().setVisible(false);
				form.lyrDetail().tabPatient().setHeaderVisible(false);
				form.lyrDetail().tabDischarge().setHeaderVisible(false);
				form.lyrDetail().tabDischarge().setVisible(false);
				form.lyrDetail().tabHomeLeave().setHeaderVisible(false);
				form.lyrDetail().tabHomeLeave().setVisible(false);
				form.lyrDetail().tabTransfer().setVisible(false);
				form.lyrDetail().tabTransfer().setHeaderVisible(false);
				form.lyrDetail().tabEstimatedDischarge().setVisible(false);
				form.lyrDetail().tabEstimatedDischarge().setHeaderVisible(false);
				form.lyrDetail().tabCloseBed().btnReOpen().setVisible(false);
				form.lyrDetail().tabCloseBed().setHeaderVisible(false);
				form.lyrDetail().tabAdmission().setVisible(true);
				form.lyrDetail().showtabAdmission();
				form.lyrDetail().tabInfants().setVisible(false);
				form.lyrDetail().tabInfants().setHeaderVisible(false);
				form.lyrDetail().tabBedMove().setHeaderVisible(false);
				form.lyrDetail().tabBedMove().setVisible(false);
			}
		}
		
		//WDEV-9790 - this overrides all enabling of buttons
		if(form.getLocalContext().getIsReadOnlyIsNotNull() && form.getLocalContext().getIsReadOnly())
			setDialogAsReadOnly();
		

		form.lyrDetail().tabDischarge().btnVTERiskAssesssment().setVisible(Boolean.TRUE.equals(form.getLocalContext().getShowVTERiskAssessmentButton()));  //wdev-14858
		
		//WDEV-17935
		updateDischBedCleaningControlsState();
		
	}

	//WDEV-17935
	private void updateDischBedCleaningControlsState() 
	{
		form.lyrDetail().tabDischarge().lblReasonForClosure().setVisible(form.lyrDetail().tabDischarge().chkAllocateForCleaning().getValue());
		form.lyrDetail().tabDischarge().cmbDischargeReasonForClosure().setVisible(form.lyrDetail().tabDischarge().chkAllocateForCleaning().getValue());
		form.lyrDetail().tabDischarge().lblEstimatedReopening().setVisible(form.lyrDetail().tabDischarge().chkAllocateForCleaning().getValue());
		form.lyrDetail().tabDischarge().dtimDischargeEstimatedReopening().setVisible(form.lyrDetail().tabDischarge().chkAllocateForCleaning().getValue());
	}

	private void initialiseAdmissionDetailTab()
	{
		//WDEV-1299
		form.lyrDetail().tabAdmissionDetail().setHeaderVisible(false);
		form.lyrDetail().tabAdmissionDetail().setVisible(false);
		
		form.lyrDetail().tabAdmissionDetail().setccConsultantEnabled(false);
		form.lyrDetail().tabAdmissionDetail().setccReferringConsultantEnabled(false);
	}

	private void storeInfants()
	{
		InpatientEpisodeLiteVoCollection voCollInpatient = domain.listInfantsForSelectedPatient(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent().getPatient());
		form.getLocalContext().setInfants(voCollInpatient);
	}

	private PendingTransfersLiteVo isInpatientEpisodeonTransferOutList(InpatientEpisodeRefVo voInpatEpis)
	{
		if (voInpatEpis == null)
			return null;

		PendingTransfersLiteVoCollection voCollTransfersOut = form.getGlobalContext().Core.getADTTransfersOut();
		if (voCollTransfersOut == null)
			return null;

		for (PendingTransfersLiteVo voTransferOut : voCollTransfersOut)
		{
			if (voTransferOut.getInpatientEpisodeIsNotNull() && voTransferOut.getInpatientEpisode().equals(voInpatEpis))
				return voTransferOut;
		}

		return null;
	}

	private void hidePatientHeaderPanel()
	{
		form.pnlInpatientDetails().setVisible(false);

		form.lblHosp().setVisible(false);
		form.lblHospitalNoBanner().setVisible(false);
		form.lblNhs().setVisible(false);
		form.lblNhsNoBanner().setVisible(false);
		form.lblPatientNameBanner().setVisible(false);
		form.lblAddress1Banner().setVisible(false);
		form.lblAddress2Banner().setVisible(false);

		form.pnlInpatientDetails().setVisible(false);
		form.lblConsultant().setVisible(false);
		form.lblConsultantBanner().setVisible(false);
		form.lblSpecialty().setVisible(false);
		form.lblSpecialtyBanner().setVisible(false);
		form.lblDischarge().setVisible(false);
		form.lblEstDsichargeBanner().setVisible(false);
		form.lblDestWard().setVisible(false);
		form.lblWardBanner().setVisible(false);
	}

	@Override
	protected void onBtnDischargeClick() throws PresentationLogicException
	{
		InpatientEpisodeLiteVo voInpat = null;
		if(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
		{
			BedSpaceStateLiteVo voBedSpaceState = (BedSpaceStateLiteVo) form.getGlobalContext().Core.getSelectedBedSpaceState().clone();
			voInpat = voBedSpaceState.getInpatientEpisode();
		}
		else if(form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
			voInpat = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();
		else
			throw new CodingRuntimeException("Check GC population");

		PatientElectiveListBedAdmissionVo patientElectiveList = null; 
		
		if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()))
		{
			patientElectiveList = domain.getPatientElectiveListForDischarge(voInpat.getPasEvent());
			
			if (patientElectiveList != null)
			{
				// If there are no other elective list to be cancelled
				TCIOutcomeForPatientElectiveListVo outcome = new TCIOutcomeForPatientElectiveListVo();

				boolean treatmentDeferred = grpTreatmentPostponedEnumeration.rdoYesTreat.equals(form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue());
				
				if (treatmentDeferred && patientElectiveList.getElectiveListReasonIsNotNull() && patientElectiveList.getElectiveListReason().getId() == ElectiveListReason.TREATMENT.getId()) // WDEV-18617
					outcome.setOutcome(AdmissionOfferOutcome.PATIENT_ADMITTED_TREATMENT_DEFERRED_5);
				else
					outcome.setOutcome(AdmissionOfferOutcome.PATIENT_ADMITTED_COMPLETED_1);
				
				
				outcome.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
				outcome.setStatusDateTime(new DateTime());
				outcome.setOutcomeReason(null);
				
				if (patientElectiveList.getTCIDetails() != null)
				{
					patientElectiveList.getTCIDetails().setCurrentOutcome(outcome);
					patientElectiveList.getTCIDetails().getOutcomeHistory().add(outcome);
				}
				
				ElectiveListStatusVo electiveStatus = new ElectiveListStatusVo();
				electiveStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
				electiveStatus.setStatusDateTime(new DateTime());
				
				if (treatmentDeferred)
				{
					electiveStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
					
					if (patientElectiveList.getPathwayClock() != null)
						patientElectiveList.getPathwayClock().setStopDate(null);
				}
				else
				{
					electiveStatus.setElectiveListStatus(WaitingListStatus.REMOVED);
					electiveStatus.setRemovalReason(ElectiveListStatusReason.PATIENT_ADMITTED_ELECTIVELY);
				}
				
				patientElectiveList.setElectiveListStatus(electiveStatus);
				patientElectiveList.getElectiveListStatusHistory().add(electiveStatus);

				form.getLocalContext().setPatientElectiveListDischarge(patientElectiveList);
				
				// Check the Patient Elective List to remove
				/* WDEV-18454
				if (Boolean.TRUE.equals(domain.hasCancelledElectiveListsToRemove(patientElectiveList.getPatient(), patientElectiveList, patientElectiveList.getElectiveList().getService())))
				{
					form.getLocalContext().setMessageBoxDischarge(engine.showMessage("Patient has cancelled Patient Elective records at admission for the same service. Remove these records?", "Warning", MessageButtons.YESNOCANCEL));
					return;
				}*/
			}
			
			//WDEV-18454
			if (voInpat.getPasEvent() != null && PasEventType.EMERGENCY.equals(voInpat.getPasEvent().getEventType()) && Boolean.TRUE.equals(domain.hasElectiveListsToRemove(form.getGlobalContext().Core.getPatientShort(), patientElectiveList, voInpat.getPasEvent().getSpecialty())))
			{
				form.getLocalContext().setInpatientEpisodeSpecialty(voInpat.getPasEvent().getSpecialty());
				form.getLocalContext().setMessageBoxPELCheck(engine.showMessage("This patient has other Elective List / TCI records for this service. Do you want to remove these records?", "Warning", MessageButtons.YESNOCANCEL));
				return;
			}
		}
		
		if (dischargePatient(patientElectiveList, null))
			engine.close(DialogResult.OK);
	}

	private boolean dischargePatient(PatientElectiveListBedAdmissionVo patientElectiveList, PatientElectiveListBedAdmissionVoCollection cancelledPatienElectiveListToRemove)
	{
		if (getUIValidationForDischarge() == false)
			return false;

		DischargedEpisodeADTVo voDischargedEpisode = new DischargedEpisodeADTVo();

		voDischargedEpisode.setDischargeDateTime(getDischargeDateTime());
		voDischargedEpisode.setDischargeDestination(form.lyrDetail().tabDischarge().cmbDischargeDestination().getValue());
		voDischargedEpisode.setMethodOfDischarge(form.lyrDetail().tabDischarge().cmbMethodDischarge().getValue());

		BedSpaceStateLiteVo voBedSpaceState = null;
		InpatientEpisodeLiteVo voInpat = null;
		//if a bed is selected
		if(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
		{
			voBedSpaceState = (BedSpaceStateLiteVo) form.getGlobalContext().Core.getSelectedBedSpaceState().clone();
			voInpat = voBedSpaceState.getInpatientEpisode();
		}
		else if(form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
			voInpat = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();
		else
			throw new CodingRuntimeException("Check GC population");
		
		
		boolean isMaternityInpatient = voInpat.getIsMaternityInpatientIsNotNull() ? voInpat.getIsMaternityInpatient() : false;
	
		voDischargedEpisode.setPasEvent(voInpat.getPasEvent());			
		voDischargedEpisode.setAdmissionDetail(domain.getAdmissionDetailByPasEvent(voDischargedEpisode.getPasEvent()));
		voDischargedEpisode.setConsultantStays(voInpat.getConsultantStays());
		voDischargedEpisode.setWardStays(voInpat.getWardStays());
		
		// This part is an horrible hack - all the code for creating the DischargedEpisode should be in the save method and based
		// on the latest inpatient episode
		// Get latest data for VTE Risk Assessment - because the user might create, save and complete the VTE Risk Assessment
		InpatientEpisodeForVTERiskAsessmentVo inpatientEpisode = domain.getInpatEpisodeForVTERiskAssessment(voInpat);
		
		// Inpatient episode could be null, if the patient was discharged from another session or PAS,
		// but the SOE will be thrown later from the domain & save function that are better suited for handling the SOE
		if (inpatientEpisode != null)
		{
    		voDischargedEpisode.setVTEAssessmentStatus(inpatientEpisode.getVTEAssessmentStatus());
    		voDischargedEpisode.setVTERiskAssessment(inpatientEpisode.getVTERiskAssessment());
		}
		
		//rttStop
		String rttStop = sendRTTMessage();
		if(rttStop != null && rttStop.equals(""))
			voDischargedEpisode.setEighteenWeekClockStopped(null);
		else if(rttStop != null)
		{
			if(rttStop.equals("Y"))
				voDischargedEpisode.setEighteenWeekClockStopped(true);
			else if(rttStop.equals("N"))
				voDischargedEpisode.setEighteenWeekClockStopped(false);
		}
			
		// move to previous
		if (voBedSpaceState != null && voBedSpaceState.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceState.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceState.getCurrentBedStatus().clone());
			voBedSpaceState.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceState.getCurrentBedStatus().setStatusDateTime(new DateTime());
			voBedSpaceState.getCurrentBedStatus().setBedStatus(form.lyrDetail().tabDischarge().chkAllocateForCleaning().getValue() ? BedStatus.FOR_CLEANING : BedStatus.AVAILABLE);
			
			//WDEV-17935
			if (form.lyrDetail().tabDischarge().chkAllocateForCleaning().getValue())
			{
				voBedSpaceState.getCurrentBedStatus().setReasonForClosure(form.lyrDetail().tabDischarge().cmbDischargeReasonForClosure().getValue());
				voBedSpaceState.getCurrentBedStatus().setEstReopeningDateTime(form.lyrDetail().tabDischarge().dtimDischargeEstimatedReopening().getValue());
			}
			
		}

		if(voBedSpaceState != null)
			voBedSpaceState.setInpatientEpisode(null);

		voDischargedEpisode.setWasTreatmentDeferred(form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration.rdoYesTreat));
		voDischargedEpisode.setTreatmentDeferredReason(form.lyrDetail().tabDischarge().cmbReason().getValue());
		voDischargedEpisode.setIsActive(true);
		
		
		//WDEV-12957
		voDischargedEpisode.setDischargeReadyDate(voInpat.getDischargeReadyDate());

		if (!saveDischarge(voDischargedEpisode, voBedSpaceState, form.getLocalContext().getPendingTransferOut(), patientElectiveList, cancelledPatienElectiveListToRemove))
			return false;
		
		//WDEV-15043
		form.getGlobalContext().Core.setPatientShort(domain.getPatient(form.getGlobalContext().Core.getPatientShort()));//bogdan
		resetPIDBarText();

		// if this is a maternity episode check for infants and give the option
		// to discharge those aswell
		if (isMaternityInpatient)
		{
			SelectItemVoCollection voCollInfants = chooseInfantsToDischarge();
			if (voCollInfants != null)
			{
				form.getGlobalContext().Core.setItems(voCollInfants.size() > 0 ? voCollInfants : null);
				engine.open(form.getForms().Core.SelectItems, "Select Infants to Discharge");
				return false;
			}
		}
		/*if( Boolean.TRUE.equals(form.getLocalContext().getVTEShouldCreate()))	//wdev-14858
		{
			form.lyrDetail().tabDischarge().btnDischarge().setEnabled(false);
			return;
		}
		engine.close(DialogResult.OK);*/
		if( form.getLocalContext().getVTEShouldCreate() == null )	//wdev-14892
			return true;
		
		return false;
	}

	private void resetPIDBarText()
	{

		if ( ! form.getGlobalContext().Core.getPatientShortIsNotNull())
			return;
		
		if ( ! form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			return;

		new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare()));
	}
	
	private DateTime getDischargeDateTime()
	{
		if(form.lyrDetail().tabDischarge().dtimDischarge().isVisible())
			return form.lyrDetail().tabDischarge().dtimDischarge().getValue();
		else if(form.lyrDetail().tabDischarge().dtimDod().isVisible())
			return form.lyrDetail().tabDischarge().dtimDod().getValue();
		
		return null;
	}

	private boolean saveDischarge(DischargedEpisodeADTVo voDischargedEpisode, BedSpaceStateLiteVo voBedSpaceState, PendingTransfersLiteVo voTransfer, PatientElectiveListBedAdmissionVo patientElectiveList, PatientElectiveListBedAdmissionVoCollection cancelledPatienElectiveListToRemove)
	{
		String[] arrErrors = voDischargedEpisode.validate();
		if (arrErrors != null)
		{
			if(form.lyrDetail().tabDischarge().dtimDod().isVisible())
			{
				for(int i=0;i<arrErrors.length; i++)
				{
					if(arrErrors[i] == "Discharge Date/Time is mandatory")
					{
						arrErrors[i] = "Date/Time of Death is mandatory";
						break;
					}
				}
			}
				
			engine.showErrors(arrErrors);
			return false;
		}
		//wdev-14858
		
		form.getLocalContext().setVTEShouldCreate(null);
		form.getLocalContext().setUserHasRight(null);	//wdev-14892
		if( ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() == true) //wdev-15062
		{
		
			InpatientEpisodeForVTERiskAsessmentVo tempVo = domain.getInpatEpisodeForVTERiskAssessment(form.getLocalContext().getInpatientEpForVTERiskAssessmentVo());
			if(	tempVo != null && ( VTEAsessmentStatus.REQUIRED.equals(tempVo.getVTEAssessmentStatus()) || VTEAsessmentStatus.INPROGRESS.equals(tempVo.getVTEAssessmentStatus()) ) )  //wdev-14878, wdev-14858
			{
				
				form.getLocalContext().setVTEShouldCreate(true);
				
				if(	engine.hasRight(AppRight.DISCHARGE_ACCESS_TO_VTE_ASSESSMENT) )	//wdev-14892
				{
					form.getLocalContext().setUserHasRight(true);
					if(	tempVo.getVTERiskAssessmentIsNotNull())		//wdev-14858
						form.getGlobalContext().Core.setVTERiskAssessmentShortVo(domain.getVTERiskAssessmentShortVoBYId(tempVo.getVTERiskAssessment()));
				}
				else
					form.getLocalContext().setUserHasRight(false);
			}
		}
		//----------------
		try
		{
			form.getGlobalContext().Core.setDischargeEpisodeBedInfo(domain.saveDischargeElectiveList(voDischargedEpisode, voBedSpaceState, patientElectiveList, cancelledPatienElectiveListToRemove));		//wdev-15414
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

			//WDEV-15990
			form.lyrDetail().tabDischarge().btnDischarge().setEnabled(false);
			form.lyrDetail().tabDischarge().chkAllocateForCleaning().setVisible(false);
			disabletabs();
			enabledisableDiaschargeTabContrls(false);
			
			form.getGlobalContext().Core.setPatientShort(domain.getPatient(form.getGlobalContext().Core.getPatientShort()));
			
			DischargedEpisodeADTVo dischargeEpisodeADT = null;
			
			if (form.getGlobalContext().Core.getSelectedBedSpaceState() != null)
			{
				dischargeEpisodeADT = domain.getDischargedEpisodeADT(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent());
			}
			else if (form.getGlobalContext().Core.getSelectedWaitingAreaPatient() != null)
			{
				dischargeEpisodeADT = domain.getDischargedEpisodeADT(form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent());
			}
			else
				throw new CodingRuntimeException("Logical error - can't discharge from without an inpatient episode");

			if (dischargeEpisodeADT != null)
			{
				updateDischargeDetails(dischargeEpisodeADT);
			}
			
			if (ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() == true)
			{
				form.getGlobalContext().Core.setDischargeEpisodeBedInfo(dischargeEpisodeADT); //WDEV-16200
				updateBtnVteRiskAssessment();
			}
			
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			initialise();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			initialise();
			return false;
		}
		if( ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() == true) //wdev-15062
		{
			//wdev-14858
			if(	Boolean.TRUE.equals(form.getLocalContext().getVTEShouldCreate()))
			{
				if(	Boolean.TRUE.equals(form.getLocalContext().getUserHasRight()))	//wdev-14892
					
					engine.showMessage(" Discharge completed successfully. A VTE Assessment has not been completed for the inpatient episode.  Please select the VTE Risk Assessment button to complete the assessment.","Message",MessageButtons.OK);
				else if(	Boolean.FALSE.equals(form.getLocalContext().getUserHasRight()))
				{
					engine.showMessage(" A VTE Assessment has not been completed for the inpatient episode.","Message",MessageButtons.OK);
					form.getLocalContext().setVTEShouldCreate(false);
					
				}
				
			}
		}
		//----------
		form.lyrDetail().tabDischarge().chkAllocateForCleaning().setVisible(false);
		return true;
	}

	private void updateBtnVteRiskAssessment()
	{
		VTERiskAssessmentShortVoCollection hasVTEs = domain.getVTEByCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		if (hasVTEs != null && hasVTEs.size() > 0)
		{
			for (int i = 0; i < hasVTEs.size(); i++)
			{
				if (form.getLocalContext().getInpatientEpForVTERiskAssessmentVoIsNotNull())
				{
					if (form.getLocalContext().getInpatientEpForVTERiskAssessmentVo().getVTERiskAssessmentIsNotNull())
					{
						if (hasVTEs.get(i).equals(form.getLocalContext().getInpatientEpForVTERiskAssessmentVo().getVTERiskAssessment()))
						{
							form.lyrDetail().tabDischarge().btnVTERiskAssesssment().setVisible(! VTEAsessmentStatus.COMPLETED.equals(hasVTEs.get(i).getVTEAssessmentStatus()));
							form.getLocalContext().setShowVTERiskAssessmentButton(! VTEAsessmentStatus.COMPLETED.equals(hasVTEs.get(i).getVTEAssessmentStatus()));
							break;
						}
					}
					else
					{
						form.lyrDetail().tabDischarge().btnVTERiskAssesssment().setVisible(! VTEAsessmentStatus.COMPLETED.equals(hasVTEs.get(i).getVTEAssessmentStatus()));
						form.getLocalContext().setShowVTERiskAssessmentButton(! VTEAsessmentStatus.COMPLETED.equals(hasVTEs.get(i).getVTEAssessmentStatus()));
						break;
					}
				}
				else
				{
					form.lyrDetail().tabDischarge().btnVTERiskAssesssment().setVisible(false);
					form.getLocalContext().setShowVTERiskAssessmentButton(false);
					break;
				}
			}
		}
	}

	private void updateDischargeDetails(DischargedEpisodeADTVo dischargeEpisodeADT)
	{
		form.lyrDetail().tabDischarge().cmbMethodDischarge().setValue(dischargeEpisodeADT.getMethodOfDischarge());

		updateDischargeDateTimeControls();

		form.lyrDetail().tabDischarge().cmbDischargeDestination().setValue(dischargeEpisodeADT.getDischargeDestination());
		form.lyrDetail().tabDischarge().dtimDischarge().setValue(dischargeEpisodeADT.getDischargeDateTime());
		showHide18WeekClockStopped(false);

		if (Boolean.TRUE.equals(dischargeEpisodeADT.getWasTreatmentDeferred()))
		{
			form.lyrDetail().tabDischarge().grpTreatmentPostponed().setValue(grpTreatmentPostponedEnumeration.rdoYesTreat);
		}
		else if (Boolean.FALSE.equals(dischargeEpisodeADT.getWasTreatmentDeferred()))
		{
			form.lyrDetail().tabDischarge().grpTreatmentPostponed().setValue(grpTreatmentPostponedEnumeration.rdoNoTreat);
			
			if (form.getLocalContext().getRtpStat() != null && form.getLocalContext().getRtpStat().equals(TREATMENT) && form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration.rdoNoTreat))
			{
				showHide18WeekClockStopped(true);
			}
		}

		if (dischargeEpisodeADT.getEighteenWeekClockStopped() == null)
		{
			form.lyrDetail().tabDischarge().grp18Stopped().setValue(grp18StoppedEnumeration.rdoYesStopped);
			form.lyrDetail().tabDischarge().grp18Running().setValue(grp18RunningEnumeration.rdoYesRunning);
		}
		else if (Boolean.TRUE.equals(dischargeEpisodeADT.getEighteenWeekClockStopped()))
		{
			form.lyrDetail().tabDischarge().grp18Running().setValue(grp18RunningEnumeration.rdoNoRunning);
		}
		else if (Boolean.FALSE.equals(dischargeEpisodeADT.getEighteenWeekClockStopped()))
		{
			form.lyrDetail().tabDischarge().grp18Stopped().setValue(grp18StoppedEnumeration.rdoNoStopped);
		}

		form.lyrDetail().tabDischarge().cmbReason().setValue(dischargeEpisodeADT.getTreatmentDeferredReason());
	}

	private void showHide18WeekClockStopped(boolean isVisible)
	{
		form.lyrDetail().tabDischarge().lblStopped().setVisible(isVisible);
		form.lyrDetail().tabDischarge().grp18Stopped().setVisible(isVisible);
		form.lyrDetail().tabDischarge().txt18WeekStop().setVisible(isVisible);
	}

	private SelectItemVoCollection chooseInfantsToDischarge()
	{
		SelectItemVoCollection voCollItems = new SelectItemVoCollection();
		InpatientEpisodeLiteVoCollection voCollInfants = form.getLocalContext().getInfants();
		if (voCollInfants != null)
		{
			// go through collection creating discharge records for each infant
			for (InpatientEpisodeLiteVo voInpat : voCollInfants)
			{
				SelectItemVo voSelectItem = new SelectItemVo();
				voSelectItem.setItem(createInfantDischarge(voInpat));
				voSelectItem.setSelected(Boolean.FALSE);
				voCollItems.add(voSelectItem);
			}
		}

		return voCollItems.size() > 0 ? voCollItems : null;
	}

	private DischargedEpisodeADTVo createInfantDischarge(InpatientEpisodeLiteVo voInpat)
	{
		DischargedEpisodeADTVo voDischargedEpisode = new DischargedEpisodeADTVo();

		voDischargedEpisode.setDischargeDateTime(form.lyrDetail().tabDischarge().dtimDischarge().getValue());
		voDischargedEpisode.setDischargeDestination(form.lyrDetail().tabDischarge().cmbDischargeDestination().getValue());
		voDischargedEpisode.setMethodOfDischarge(form.lyrDetail().tabDischarge().cmbMethodDischarge().getValue());

		BedSpaceStateLiteVo voBedSpaceState = domain.getBedSpaceStateByInpatientEpisode(voInpat);
		if (voBedSpaceState != null && voBedSpaceState.getInpatientEpisodeIsNotNull())
		{
			voDischargedEpisode.setPasEvent(voBedSpaceState.getInpatientEpisode().getPasEvent());
			voDischargedEpisode.setConsultantStays(voBedSpaceState.getInpatientEpisode().getConsultantStays());
			voDischargedEpisode.setWardStays(voBedSpaceState.getInpatientEpisode().getWardStays());
		}
		else
			voDischargedEpisode.setPasEvent(voInpat.getPasEvent());

		// move to previous
		if (voBedSpaceState != null && voBedSpaceState.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceState.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceState.getCurrentBedStatus().clone());
			voBedSpaceState.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceState.getCurrentBedStatus().setStatusDateTime(new DateTime());
			voBedSpaceState.getCurrentBedStatus().setBedStatus(form.lyrDetail().tabDischarge().chkAllocateForCleaning().getValue() ? BedStatus.FOR_CLEANING : BedStatus.AVAILABLE);
		}

		voDischargedEpisode.setIsActive(true);
		voDischargedEpisode.setBedSpaceForInfant(voBedSpaceState);
		return voDischargedEpisode;
	}

	private boolean getUIValidationForDischarge()
	{
		List<String> errors = new ArrayList<String>();

		boolean onHeartsFunctionalityTreatementAndDiagnostic = form.getLocalContext().getRtpStat() != null && (form.getLocalContext().getRtpStat().equals(TREATMENT) || form.getLocalContext().getRtpStat().equals(DIAGNOSTIC));
		
		if ((onHeartsFunctionalityTreatementAndDiagnostic || Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()))
				&& form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration.None))
			errors.add("'Was Treatment Deferred?' is mandatory");
		
		if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) || (form.getLocalContext().getRtpStat() != null && form.getLocalContext().getRtpStat().equals(TREATMENT)))
			if(form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration.rdoYesTreat))
				if(form.lyrDetail().tabDischarge().cmbReason().getValue() == null)
					errors.add("'Reason' is mandatory");
			
		if (form.getLocalContext().getRtpStat() != null && form.getLocalContext().getRtpStat().equals(DIAGNOSTIC))
			if (form.lyrDetail().tabDischarge().grp18Running().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grp18RunningEnumeration.None))
				errors.add("'18 week clock is still running for the patient, is this correct?' is mandatory");

		if (form.getLocalContext().getRtpStat() != null && form.getLocalContext().getRtpStat().equals(TREATMENT))
			if(form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(grpTreatmentPostponedEnumeration.rdoNoTreat))
				if (form.lyrDetail().tabDischarge().grp18Stopped().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grp18StoppedEnumeration.None))
					errors.add("'18 week clock stopped on Admission for the patient, is this correct?' is mandatory");

		if(form.lyrDetail().tabDischarge().dtimDischarge().getValue() != null)
		{
			if(form.lyrDetail().tabDischarge().dtimDischarge().getValue().isGreaterThan(new DateTime()))
				errors.add("'Discharge Date/Time' cannot be in the future");
		}
		
		if(form.lyrDetail().tabDischarge().dtimDod().getValue() != null)
		{
			if(form.lyrDetail().tabDischarge().dtimDod().getValue().isGreaterThan(new DateTime()))
				errors.add("'Date/Time of Death' cannot be in the future");
		}
		
		//WDEV-17935
		if (form.lyrDetail().tabDischarge().chkAllocateForCleaning().getValue())
		{
			if(form.lyrDetail().tabDischarge().cmbDischargeReasonForClosure().getValue() == null)
			{
				errors.add("'Reason for Closure' is mandatory");
			}
			
			if(form.lyrDetail().tabDischarge().dtimDischargeEstimatedReopening().getValue() == null)
			{
				errors.add("'Estimated Re-opening  Date/Time' is mandatory");
			}
		}
		if (errors.size() == 0)
			return true;
		else
			engine.showErrors(errors.toArray(new String[0]));

		return false;
	}

	@Override
	protected void onBtnHomeClick() throws PresentationLogicException
	{
		if (form.getGlobalContext().Core.getSelectedBedSpaceState() == null
				|| form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode() == null)
				throw new CodingRuntimeException("Bed State or InpatientEpisode is null.");

		if (form.lyrDetail().tabHomeLeave().dteHLDate().getValue() == null
			|| form.lyrDetail().tabHomeLeave().timHLTime().getValue() == null)
		{
			engine.showMessage("Please select a Date and Time for Home Leave");
			return;
		}
		
		//WDEV-14585
		if (form.lyrDetail().tabHomeLeave().dteHLDate().getValue() != null && form.lyrDetail().tabHomeLeave().dteHLReturnDate().getValue() != null)
		{
			if (form.lyrDetail().tabHomeLeave().dteHLReturnDate().getValue().isLessThan(form.lyrDetail().tabHomeLeave().dteHLDate().getValue()))
			{
				engine.showMessage("The Expected Date of Return cannot be less than the Date on Home Leave.");
				return;
			}
			else if (form.lyrDetail().tabHomeLeave().dteHLReturnDate().getValue().equals(form.lyrDetail().tabHomeLeave().dteHLDate().getValue()))
			{
				if (form.lyrDetail().tabHomeLeave().timHLTime().getValue() != null && form.lyrDetail().tabHomeLeave().timHLReturnTime().getValue() != null)
				{
					if (form.lyrDetail().tabHomeLeave().timHLReturnTime().getValue().isLessThan(form.lyrDetail().tabHomeLeave().timHLTime().getValue()))
					{
						engine.showMessage("The Expected Date/Time of Return cannot be less than the Date/Time on Home Leave.");
						return;
					}
				}
			}
		}
			
		InPatientEpisodeADTVo voEpisode = domain.getInpatientEpisode(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode());

		if (form.lyrDetail().tabHomeLeave().dteHLDate().getValue() != null
			&& voEpisode.getAdmissionDateTimeIsNotNull()
			&& form.lyrDetail().tabHomeLeave().dteHLDate().getValue().isLessThan(voEpisode.getAdmissionDateTime().getDate()))
		{
			engine.showMessage("The Date on Home Leave cannot be less than Admission Date.");
			return;
		}
			
		
		
		HomeLeaveVo voHL = new HomeLeaveVo();
		voHL.setDateOnHomeLeave(form.lyrDetail().tabHomeLeave().dteHLDate().getValue());
		voHL.setTimeOnHomeLeave(form.lyrDetail().tabHomeLeave().timHLTime().getValue());
		voHL.setExpectedDateOfReturn(form.lyrDetail().tabHomeLeave().dteHLReturnDate().getValue());
		voHL.setExpectedTimeOfReturn(form.lyrDetail().tabHomeLeave().timHLReturnTime().getValue());
		voHL.setVacatedBedNumber(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpaceIsNotNull() ?form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace().getBedNumber() : "");
		
		BedSpaceStateLiteVo voBedSpaceStateLite = voEpisode.getBed();
		if (voBedSpaceStateLite != null)
		{		
			if (voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
			{
				voBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceStateLite.getCurrentBedStatus().clone());
				voBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
				voBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime());
				voBedSpaceStateLite.getCurrentBedStatus().setBedStatus(BedStatus.AVAILABLE);

				voHL.setVacatedBedNumber(voBedSpaceStateLite.getBedSpaceIsNotNull() ? voBedSpaceStateLite.getBedSpace().getBedNumber() : null);
			}
	
			voBedSpaceStateLite.setInpatientEpisode(null);
		}
		voEpisode.setDateOnHomeLeave(form.lyrDetail().tabHomeLeave().dteHLDate().getValue());
		voEpisode.setTimeOnHomeLeave(form.lyrDetail().tabHomeLeave().timHLTime().getValue());
		voEpisode.setExpectedDateOfReturn(form.lyrDetail().tabHomeLeave().dteHLReturnDate().getValue());
		voEpisode.setExpectedTimeOfReturn(form.lyrDetail().tabHomeLeave().timHLReturnTime().getValue());
		voEpisode.setIsOnHomeLeave(Boolean.TRUE);
		voEpisode.getHomeLeaves().add( voHL);
		
		voEpisode.setBed(null);

		String[] arrErrors = voEpisode.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.saveHomeLeave(voBedSpaceStateLite, voEpisode, voHL);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage("Pas Communication Error :" + e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			return;
		}

		engine.close(DialogResult.OK);

	}

	private InPatientEpisodeADTVo populateHomeLeaveInfo(InPatientEpisodeADTVo voEpisode) 
	{
		if (voEpisode == null)
			throw new CodingRuntimeException("voEpisode is null in method populateHomeLeaveInfo");

		return voEpisode;
	}

	@Override
	protected void onBtnTransferClick() throws PresentationLogicException
	{
		// depending on which tab is visible
		if (form.lyrDetail().tabTransfer().lyrTransfer().tabIn().isVisible())
		{
			saveTransferIn();
		}
		else if (form.lyrDetail().tabTransfer().lyrTransfer().tabOut().isVisible())
		{
			PendingTransfersLiteVo voPendingTransfer = form.getLocalContext().getPendingTransferOut();
			if (voPendingTransfer == null)
				voPendingTransfer = new PendingTransfersLiteVo();

			voPendingTransfer.setCurrentStatus(TransferStatus.PENDING);
			voPendingTransfer.setDestinationWard(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutTransfer().getValue());

			BedSpaceStateLiteVo voBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
			if (voBedSpaceState != null && voBedSpaceState.getInpatientEpisodeIsNotNull())
				voPendingTransfer.setInpatientEpisode(domain.geInpatientEpisodeLiteVoById(voBedSpaceState.getInpatientEpisode()));  //wdev-15042
			else if(form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
				voPendingTransfer.setInpatientEpisode(domain.geInpatientEpisodeLiteVoById(form.getGlobalContext().Core.getSelectedWaitingAreaPatient())); //wdev-15042

			voPendingTransfer.setWardType(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().getValue());
			voPendingTransfer.setTransferRequestDateTime(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().dtimOutTransfer().getValue());

			voPendingTransfer.setConsultant(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().ccOutConsultant().getValue());
			voPendingTransfer.setSpecialty(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().getValue());
				
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				voPendingTransfer.setSpecialty(domain.getCCOSpecialtyMappingFromPASSpecialty(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbCCOOutSpecialty().getValue()));
				voPendingTransfer.setPASSpecialty(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbCCOOutSpecialty().getValue());
			}
			if (!saveTransferOut(voPendingTransfer))
				return;

			
			// if this is a maternity episode check for infants and give the
			// option to transfer those aswell
			// WDEV-8740 - Suppress transfer baby dialog
			// SelectItemVoCollection voCollInfants = chooseInfantsToTransfer();
			// if (voCollInfants != null)
			// { 
			//		form.getGlobalContext().Core.setItems(voCollInfants.size() > 0 ? voCollInfants : null);
			//		engine.open(form.getForms().Core.SelectItems, "Select Infants to Transfer");
			//		return;
			// }

			engine.close(DialogResult.OK);

		}
		else if (form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().isVisible())
		{
			saveConsultantTransfer();
		}
	}

	private SelectItemVoCollection chooseInfantsToTransfer()
	{
		SelectItemVoCollection voCollItems = new SelectItemVoCollection();
		boolean isMaternityInpatient = form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisodeIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getIsMaternityInpatientIsNotNull() ? form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getIsMaternityInpatient() : false;
		if (isMaternityInpatient)
		{
			PatientShort voPatient = form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisodeIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEventIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent().getPatientIsNotNull() ? form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent().getPatient() : null;
			if (voPatient != null)
			{
				InpatientEpisodeLiteVoCollection voCollInfants = form.getLocalContext().getInfants();
				if (voCollInfants != null)
				{
					// go through collection creating transfer records for each
					// infant
					for (InpatientEpisodeLiteVo voInpat : voCollInfants)
					{
						SelectItemVo voSelectItem = new SelectItemVo();
						voSelectItem.setItem(createInfantTransfer(voInpat));
						voSelectItem.setSelected(Boolean.FALSE);
						voCollItems.add(voSelectItem);
					}
				}
			}
		}

		return voCollItems.size() > 0 ? voCollItems : null;
	}

	private PendingTransfersLiteVo createInfantTransfer(InpatientEpisodeLiteVo voInpat)
	{
		PendingTransfersLiteVo voPendingTransfer = new PendingTransfersLiteVo();
		if (voPendingTransfer == null)
			voPendingTransfer = new PendingTransfersLiteVo();

		voPendingTransfer.setCurrentStatus(TransferStatus.PENDING);
		voPendingTransfer.setDestinationWard(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutTransfer().getValue());

		voPendingTransfer.setInpatientEpisode(voInpat);

		voPendingTransfer.setWardType(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().getValue());
		voPendingTransfer.setTransferRequestDateTime(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().dtimOutTransfer().getValue());

		voPendingTransfer.setConsultant(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().ccOutConsultant().getValue());
		voPendingTransfer.setSpecialty(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().getValue());

		return voPendingTransfer;
	}

	private void saveConsultantTransfer()
	{
		InpatConsultantTransferVo voEpisode = null;
		if (form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() || form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
		{
			InpatientEpisodeRefVo voInpat = null;
			if(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
				voInpat = form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode();
			else if(form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
				voInpat = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();
			else
				throw new CodingRuntimeException("Check GC population");
			
			voEpisode = domain.getInpatConsultantTransfer(voInpat);
			if (voEpisode != null)
			{
				if (voEpisode.getPasEventIsNotNull())
				{
					voEpisode.getPasEvent().setConsultant(form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().ccConsultantAccepting().getValue());

					if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
					{
						
						voEpisode.getPasEvent().setSpecialty(domain.getCCOSpecialtyMappingFromPASSpecialty(form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbCCOConsultantSpecialty().getValue()));
						voEpisode.getPasEvent().setPASSpecialty(form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbCCOConsultantSpecialty().getValue());
					}
					else
						voEpisode.getPasEvent().setSpecialty(form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbConsultantSpecialty().getValue());
				}
				if (voEpisode.getConsultantStays() == null)
					voEpisode.setConsultantStays(new ConsultantStayVoCollection());

				ConsultantStayVo voConsStay = new ConsultantStayVo();
				voConsStay.setConsultant(form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().ccConsultantAccepting().getValue());
				voConsStay.setTransferDateTime(form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().dtimConsultantTransfer().getValue());
				voEpisode.getConsultantStays().add(voConsStay);
			}
		}

		if (voEpisode != null)
		{
			String[] arrErrors = voEpisode.validate(getUIValidationForConsultantTransfer());
			if (arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return;
			}

			try
			{
				//WDEV-11479
				form.getGlobalContext().Core.setCurrentCareContext(domain.saveInpatConsultantTransfer(voEpisode));
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				initialise();
				return;
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}

			engine.close(DialogResult.OK);
		}
	}

	private String[] getUIValidationForConsultantTransfer()
	{
		List<String> errors = new ArrayList<String>();

		if (form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().ccConsultantAccepting().getValue() == null)
			errors.add("Accepting Consultant is mandatory");
		
		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO")
				&& form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbCCOConsultantSpecialty().getValue() == null)
			errors.add("Specialty is mandatory");
		else if ( ! ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO")
			&& form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbConsultantSpecialty().getValue() == null)
			errors.add("Specialty is mandatory");
		
		//WDEV-15045
		if (form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().dtimConsultantTransfer().getValue() == null)
		{
			errors.add("Date/Time of Transfer is mandatory");
		}

		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	private boolean saveTransferOut(PendingTransfersLiteVo voPendingTransfer)
	{		
		String[] arrErrors = voPendingTransfer.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		try
		{
			domain.saveTransferOut(voPendingTransfer);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			engine.close(DialogResult.OK);
			return false;
		}

		return true;
	}

	private void saveTransferIn()
	{
		if (form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getValue() == null)
		{
			engine.showMessage("Please select a Patient");
			return;
		}

		InPatientEpisodeADTVo voEpisode = domain.getInpatientEpisode(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getValue().getInpatientEpisode());

		// get old bed and set it to avaialable first and then new bed will be
		// set to occupied below
		BedSpaceStateLiteVo voOldBedSpaceStateLite = voEpisode.getBed();
		if (voOldBedSpaceStateLite != null)
		{		
			// move to previous
			if (voOldBedSpaceStateLite.getCurrentBedStatusIsNotNull())
			{
				voOldBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voOldBedSpaceStateLite.getCurrentBedStatus().clone());
				voOldBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
				voOldBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime());
				voOldBedSpaceStateLite.getCurrentBedStatus().setBedStatus(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().chkAllocateSourceBed().getValue() ? BedStatus.FOR_CLEANING : BedStatus.AVAILABLE);
			}
	
			voOldBedSpaceStateLite.setInpatientEpisode(null);
		}
		
		BedSpaceStateLiteVo voNewBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();

		if (voNewBedSpaceState.getCurrentBedStatusIsNotNull())
		{
			voNewBedSpaceState.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voNewBedSpaceState.getCurrentBedStatus().clone());
			voNewBedSpaceState.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voNewBedSpaceState.getCurrentBedStatus().setStatusDateTime(new DateTime());
			voNewBedSpaceState.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
		}

		voNewBedSpaceState.setInpatientEpisode(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getValue().getInpatientEpisode());

		voEpisode.setBed(voNewBedSpaceState);
		voEpisode = populateEpisodeDataFromTransferInTab(voEpisode);

		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			voEpisode.setUpdateCaseFolder(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().TICaseFolderYesNo().getValue().equals(ims.core.forms.bedinfodialog.GenForm.lyrDetailLayer.tabTransferContainer.lyrTransferLayer.tabInContainer.TICaseFolderYesNoEnumeration.rdoTIYes));
			if (form.lyrDetail().tabTransfer().lyrTransfer().tabIn().TICaseFolderYesNo().getValue().equals(ims.core.forms.bedinfodialog.GenForm.lyrDetailLayer.tabTransferContainer.lyrTransferLayer.tabInContainer.TICaseFolderYesNoEnumeration.rdoTIYes))
			{
				voEpisode.setCaseFolderComments(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().txtTICaseComment().getValue());
			}
		}

		HomeLeaveVo voHL = new HomeLeaveVo();

		if(voEpisode.getIsOnHomeLeaveIsNotNull()
			&& voEpisode.getIsOnHomeLeave())
		{
			voHL.setDateReturnedFromHomeLeave(new Date());
			voHL.setTimeReturnedFromHomeLeave(new Time());
		}
		else
			voHL = null;
		
		String[] arrErrors = voEpisode.validate(getUIValidationForTransferIn());
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			//WDEV-11438 - updating the CareContext record with the EDD 
			form.getGlobalContext().Core.setCurrentCareContext(domain.saveTransferIn(voOldBedSpaceStateLite, voEpisode, form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getValue(), voHL));
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage("Pas Communication Error :" + e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.close(DialogResult.OK);
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}

		engine.close(DialogResult.OK);
	}

	private String[] getUIValidationForTransferIn()
	{
		List<String> errors = new ArrayList<String>();

		if (form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dteDischarge().getValue() != null && form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dteDischarge().getValue().isLessThan(new Date()))
			errors.add("Est. Discharge Date cannot be in the past");
		
		//***********************************************************
		
		if(	! ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO")
			&& form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().getValue() == null)
			errors.add("Speciality field is Mandatory");
		
		if(	ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO")
			&& form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().getValue() == null)
			errors.add("Speciality field is Mandatory");
				
		if(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dtimTransfer().getValue() == null)
			errors.add("Transfer Date/Time field is Mandatory");
		
		//WDEV-13130
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			if(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dteDischarge().getValue() == null)
				errors.add("Est. Discharge Date field is Mandatory");
		}
		
		//***********************************************************
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	private InPatientEpisodeADTVo populateEpisodeDataFromTransferInTab(InPatientEpisodeADTVo voEpisode)
	{
		if (voEpisode == null)
			throw new CodingRuntimeException("voEpisode is null in method populateEpisodeDataFromTransferInTab");

		if (voEpisode.getPasEventIsNotNull())
		{
			voEpisode.getPasEvent().setConsultant(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().ccInConsultant().getValue());
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				voEpisode.getPasEvent().setSpecialty(domain.getCCOSpecialtyMappingFromPASSpecialty(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().getValue()));
				voEpisode.getPasEvent().setPASSpecialty(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().getValue());
			}
			else
				voEpisode.getPasEvent().setSpecialty(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().getValue());

			if (form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getValue() != null)
				voEpisode.getPasEvent().setLocation(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getValue().getDestinationWard());
		}

		WardStayVo voWardStay = new WardStayVo();
		voWardStay.setTransferDateTime(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dtimTransfer().getValue());
		voWardStay.setBedSpace(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace());
		if (form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getValue() != null)
			voWardStay.setWard(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getValue().getDestinationWard());
		voWardStay.setWardType(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().getValue());
		if (voEpisode.getWardStays() == null)
			voEpisode.setWardStays(new WardStayVoCollection());

		voEpisode.getWardStays().add(voWardStay);

		voEpisode.setEstDischargeDate(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dteDischarge().getValue());
		voEpisode.setWardType(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().getValue());
		
		return voEpisode;
	}

	@Override
	protected void onBtnAdmitClick() throws PresentationLogicException
	{
		if(form.lyrDetail().tabAdmission().btnAdmit().getText().equals(ALLOCATE_BED))
		{
			if (form.lyrDetail().tabAdmission().ccAdmit().allocateBed())
				engine.close(DialogResult.OK);
		}
		else if(form.lyrDetail().tabAdmission().btnAdmit().getText().equals(RETURN_FROM_LEAVE))
		{
			if (form.lyrDetail().tabAdmission().ccAdmit().returnFromLeave())
				engine.close(DialogResult.OK);
		}
		else if(form.lyrDetail().tabAdmission().btnAdmit().getText().equals(ADMIT))
		{
			if (!form.lyrDetail().tabAdmission().ccAdmit().checkForPatientAlreadyAdmited())
			{
				if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && form.lyrDetail().tabAdmission().ccAdmit().isOnTCITab())
				{
					/* removed in WDEV-18454
					if (Boolean.TRUE.equals(form.lyrDetail().tabAdmission().ccAdmit().hasPatientElectiveListToCancel()))
					{
						form.getLocalContext().setMessageBoxAdmission(engine.showMessage("Patient has other Patient Elective records for the same service. Cancel these records?", "Warning", MessageButtons.YESNOCANCEL));
						return;
					}*/ 
					
					if (form.lyrDetail().tabAdmission().ccAdmit().saveElectiveListAdmission(false))
						engine.close(DialogResult.OK);
					return;
				}
				else if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && form.lyrDetail().tabAdmission().ccAdmit().isOnEmergency())
				{
					/* removed in WDEV-18454
					if (Boolean.TRUE.equals(form.lyrDetail().tabAdmission().ccAdmit().hasPatientElectiveListToCancel()))
					{
						// TODO Open dialog with Patient Elective List records for the same service. Cancel the records
						return;
					}*/
					
					if (form.lyrDetail().tabAdmission().ccAdmit().saveElectiveListEmergencyAdmission())
						engine.close(DialogResult.OK);
					
					return;
				}

				
				if (form.lyrDetail().tabAdmission().ccAdmit().saveAdmission())
					engine.close(DialogResult.OK);
			}
			else
			{
				engine.close(DialogResult.OK);
			}
		}
	}

	@Override
	protected void onlyrDetailTabChanged(LayerBridge tab)
	{
		if (tab.equals(form.lyrDetail().tabTransfer()))
		{
			if (form.lyrDetail().tabTransfer().lyrTransfer().tabIn().isVisible())
			{
				if (!form.lyrDetail().tabTransfer().lyrTransfer().tabIn().isInitialized())
				{
					populateTransferInListFromData();
					form.lyrDetail().tabTransfer().lyrTransfer().tabIn().ccInConsultant().initialize(MosType.MEDIC);
				}
			}	
			else if (form.lyrDetail().tabTransfer().lyrTransfer().tabOut().isVisible())
			{
				populateTransferOutTabFromData();	
				form.lyrDetail().tabTransfer().btnCancelTransfer().setVisible(form.getLocalContext().getPendingTransferOutIsNotNull());
			}
		}
		else if (tab.equals(form.lyrDetail().tabDischarge()))
		{
			if (!form.lyrDetail().tabDischarge().isInitialized())
			{
				populateDischargeTabFromData();
			}
		}
		else if (tab.equals(form.lyrDetail().tabCloseBed()))
		{
			if (!form.lyrDetail().tabCloseBed().isInitialized())
			{
				populateCloseBedTabFromData();
			}
		}
		else if (tab.equals(form.lyrDetail().tabHomeLeave()))
		{
			if (form.lyrDetail().tabHomeLeave().dteHLDate().getValue() == null)
				form.lyrDetail().tabHomeLeave().dteHLDate().setValue(new Date());
		}
		else if (tab.equals(form.lyrDetail().tabEstimatedDischarge()))
		{
			if (!form.lyrDetail().tabEstimatedDischarge().isInitialized())
			{
				populateEstimatedDischargeTabFromData();
			}
		}
		else if (tab.equals(form.lyrDetail().tabBedMove()))
		{
			if (!form.lyrDetail().tabBedMove().isInitialized())
			{
				populateBedMoveTabFromData();
			}
		}
		else if (tab.equals(form.lyrDetail().tabInfants()))
		{
			if (!form.lyrDetail().tabInfants().isInitialized())
			{
				populateInfantsTabFromData();
			}
		}
	}

	private void populateInfantsTabFromData()
	{
		form.lyrDetail().tabInfants().grdInfants().getRows().clear();

		enableInfantControls(false);
		
		
		Object mos = domain.getMosUser();
		
		//Mos Label
		if(mos != null)
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().lblInfantMos().setValue(((MemberOfStaffLiteVo)mos).getIMosName());
		
		if (form.getGlobalContext().Core.getSelectedBedSpaceState() == null || form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode() == null || form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent() == null || form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent().getPatient() == null)
			return;
		
		InpatientEpisodeLiteVoCollection voCollInpatient = domain.listInfantsForSelectedPatient(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent().getPatient());
		form.getLocalContext().setInfants(voCollInpatient);
		if (voCollInpatient != null && voCollInpatient.size() > 0)
		{
			for (InpatientEpisodeLiteVo voInpat : voCollInpatient)
			{
				grdInfantsRow row = form.lyrDetail().tabInfants().grdInfants().getRows().newRow();

				if(voInpat.getPasEventIsNotNull() && voInpat.getPasEvent().getLocationIsNotNull())
					row.setColLocation(voInpat.getPasEvent().getLocation().getName());
				
				PatientShort voPatient = (voInpat.getPasEventIsNotNull() && voInpat.getPasEvent().getPatientIsNotNull()) ? voInpat.getPasEvent().getPatient() : null;
				if (voPatient != null)
				{
					if (voPatient.getNameIsNotNull())
					{
						row.setColForename(voPatient.getName().getForename());
						row.setColSurname(voPatient.getName().getSurname());
					}

					PatientId patId = voPatient.getDisplayId();
					row.setColDisplayId(patId != null ? patId.getValue() : null);
					row.setColSex(voPatient.getSexIsNotNull() ? voPatient.getSex().toString() : null);
					row.setColDOB(voPatient.getDobIsNotNull() ? voPatient.getDob().toString() : null);
				}
				row.setValue(voInpat);
			}
		}
		
		updateInfantDischargeDateTimeControls();
	}

	private void enableInfantControls(boolean bEnable)
	{
		//transfer
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().btnInfantTransfer().setEnabled(bEnable);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantHospital().setEnabled(bEnable);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWard().setEnabled(bEnable);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWardType().setEnabled(bEnable);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().ccInfantConsultant().setEnabled(bEnable);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantSpecialty().setEnabled(bEnable);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().dtimInfantTransferRequest().setEnabled(bEnable);
		
		//discharge
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().btnInfantDischarge().setEnabled(bEnable);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().setEnabled(bEnable);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantDischargeDest().setEnabled(bEnable);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDod().setEnabled(bEnable);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().setEnabled(bEnable);
		
		//WDEV-9790
		if(form.getLocalContext().getIsReadOnlyIsNotNull() && form.getLocalContext().getIsReadOnly())
		{
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().btnInfantTransfer().setEnabled(false);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().btnInfantDischarge().setEnabled(false);
		}
	}

	private void populateBedMoveTabFromData()
	{
		if (form.getGlobalContext().Core.getADTWard() == null)
			throw new CodingRuntimeException("Ward not set in populateBedMoveTabFromData");

		form.lyrDetail().tabBedMove().grdPatients().getRows().clear();

		InpatientEpisodeLiteVoCollection voCollInpatient = domain.listInpatientEpisodeByWard(form.getGlobalContext().Core.getADTWard());
		if (voCollInpatient != null && voCollInpatient.size() > 0)
		{
			for (InpatientEpisodeLiteVo voInpat : voCollInpatient)
			{
				grdPatientsRow row = form.lyrDetail().tabBedMove().grdPatients().getRows().newRow();

				PatientShort voPatient = (voInpat.getPasEventIsNotNull() && voInpat.getPasEvent().getPatientIsNotNull()) ? voInpat.getPasEvent().getPatient() : null;
				if (voPatient != null)
				{
					if (voPatient.getNameIsNotNull())
					{
						row.setColForename(voPatient.getName().getForename());
						row.setColSurname(voPatient.getName().getSurname());
					}

					//WDEV-14525
					if(voPatient.getAge() == null)
						voPatient.calculateAge();
					
					PatientId patId = voPatient.getDisplayId();
					row.setColDisplayId(patId != null ? patId.getValue() : null);
					row.setColSex(voPatient.getSexIsNotNull() ? voPatient.getSex().toString() : null);
					row.setColAge(voPatient.getAgeText());
					row.setColDOB(voPatient.getDobIsNotNull() ? voPatient.getDob().toString() : null);
				}
				row.setValue(voInpat);
			}
		}
		form.lyrDetail().tabBedMove().btnInternalTransfer().setEnabled(false);
	}

	private void populateEstimatedDischargeTabFromData()
	{
		InpatientEpisodeLiteVo voInpatEpis = null;
		BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if (voBedSpaceStateLite != null)
			voInpatEpis = voBedSpaceStateLite.getInpatientEpisode();
		else if(form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
			voInpatEpis = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();
		
		if (voInpatEpis == null)
			throw new CodingRuntimeException("voInpatEpis is null in method populateEstimatedDischargeTabFromData");

		form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().setValue(voInpatEpis.getEstDischargeDate());

		//WDEV-13324
		form.lyrDetail().tabEstimatedDischarge().chkConfirm().setVisible(false);
		if ((voInpatEpis.getEstDischargeDate() != null && voInpatEpis.isDischargeDueWithin24Hrs()) || (voInpatEpis.getIsConfirmedDischargeIsNotNull() && voInpatEpis.getIsConfirmedDischarge()))
			form.lyrDetail().tabEstimatedDischarge().chkConfirm().setVisible(true);
		
		form.lyrDetail().tabEstimatedDischarge().chkConfirm().setValue(voInpatEpis.getIsConfirmedDischarge());
		
		//WDEV-12957
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.lyrDetail().tabEstimatedDischarge().dteDischargeReady().setValue(voInpatEpis.getDischargeReadyDate());
			form.lyrDetail().tabEstimatedDischarge().btnClearEstimate().setVisible(false); //WDEV-13130
		}
		
		//WDEV-14608
		if (form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().getValue() != null)
		{
			Date newRevisedDate = new Date();
			newRevisedDate.addDay(1);

			if (!form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().getValue().isLessOrEqualThan(newRevisedDate))
			{
				form.lyrDetail().tabEstimatedDischarge().chkConfirm().setVisible(false);
			}
		}
	}

	private void populateCloseBedTabFromData()
	{
		BedSpaceStateStatusVo voStatus = form.getLocalContext().getCloseBedStatus();
		clearCloseTab();

		if(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getCurrentBedStatusIsNotNull())
		{
			BedSpaceStateStatusLiteVo voBedSpaceStateStatus = form.getGlobalContext().Core.getSelectedBedSpaceState().getCurrentBedStatus();
			if(voBedSpaceStateStatus.getSysInfoIsNotNull())
			{
				String user = "";
				if(voBedSpaceStateStatus.getSysInfo().getLastupdateUser() != null)
					user = voBedSpaceStateStatus.getSysInfo().getLastupdateUser();
				else if(voBedSpaceStateStatus.getSysInfo().getCreationUser() != null)
					user = voBedSpaceStateStatus.getSysInfo().getCreationUser();
				
				form.lyrDetail().tabCloseBed().cmbLastChangedUser().newRow(user,user);
				form.lyrDetail().tabCloseBed().cmbLastChangedUser().setValue(user);
				
				DateTime dtime = null;
				if(voBedSpaceStateStatus.getSysInfo().getLastupdateDateTime() != null)
					dtime = voBedSpaceStateStatus.getSysInfo().getLastupdateDateTime();
				else if(voBedSpaceStateStatus.getSysInfo().getCreationDateTime() != null)
					dtime = voBedSpaceStateStatus.getSysInfo().getCreationDateTime();
				
				form.lyrDetail().tabCloseBed().dtimLastChanged().setValue(dtime);
			}		
		}
		
		
		if (voStatus != null)
		{
			if (voStatus.getSysInfoIsNotNull() && voStatus.getSysInfo().getCreationUser() != null)
			{
				form.lyrDetail().tabCloseBed().cmbUser().newRow(voStatus.getSysInfo().getCreationUser(), voStatus.getSysInfo().getCreationUser());
				form.lyrDetail().tabCloseBed().cmbUser().setValue(voStatus.getSysInfo().getCreationUser());
			}
			form.lyrDetail().tabCloseBed().cmbCloseReason().setValue(voStatus.getReasonForClosure());
			form.lyrDetail().tabCloseBed().dtimClose().setValue(voStatus.getStatusDateTime());
			form.lyrDetail().tabCloseBed().dtimEstReOpen().setValue(voStatus.getEstReopeningDateTime());
		}
		else
		{
			form.lyrDetail().tabCloseBed().cmbUser().newRow(engine.getLoggedInUser().getUsername(), engine.getLoggedInUser().getUsername());
			form.lyrDetail().tabCloseBed().cmbUser().setValue(engine.getLoggedInUser().getUsername());
			form.lyrDetail().tabCloseBed().dtimClose().setValue(new DateTime());
		}
	}

	private void clearCloseTab()
	{
		form.lyrDetail().tabCloseBed().cmbUser().setValue(null);
		form.lyrDetail().tabCloseBed().cmbCloseReason().setValue(null);
		form.lyrDetail().tabCloseBed().dtimClose().setValue(null);
		form.lyrDetail().tabCloseBed().dtimEstReOpen().setValue(null);
	}

	private void populateDischargeTabFromData()
	{
		//WDEV-10698
		defaultcmbDischargeDestinationLookupValue();
		defaultcmbMethodDischargeLookupValue();
		
		form.lyrDetail().tabDischarge().dtimDischarge().setValue(new DateTime());
		
		updateDischargeDateTimeControls();

		rttControlsInitialise();
	}

	private void updateDischargeDateTimeControls()
	{
		if(form.lyrDetail().tabDischarge().cmbMethodDischarge().getValue() == null)
		{
			form.lyrDetail().tabDischarge().lblDischargeDod().setVisible(false);
			form.lyrDetail().tabDischarge().dtimDod().setVisible(false);
			form.lyrDetail().tabDischarge().dtimDod().setValue(null);
			form.lyrDetail().tabDischarge().lblDischargeDateTime().setVisible(true);
			form.lyrDetail().tabDischarge().dtimDischarge().setVisible(true);
			form.lyrDetail().tabDischarge().dtimDischarge().setValue(new DateTime());
			return;
		}
		
		boolean isDead = false;
		MethodOfDischarge lkpMethodDischarge = form.lyrDetail().tabDischarge().cmbMethodDischarge().getValue();
		String extCode = domain.getLookupService().getRemoteLookup(lkpMethodDischarge.getID(), "PAS");
		if(extCode != null && (extCode.equals(PATIENTDIED) || extCode.equals(STILLBIRTH)))
			isDead = true;
				
		if(isDead)
		{
			form.lyrDetail().tabDischarge().lblDischargeDod().setVisible(true);
			form.lyrDetail().tabDischarge().dtimDod().setVisible(true);
			form.lyrDetail().tabDischarge().dtimDod().setValue(new DateTime());
			form.lyrDetail().tabDischarge().lblDischargeDateTime().setVisible(false);
			form.lyrDetail().tabDischarge().dtimDischarge().setVisible(false);
			form.lyrDetail().tabDischarge().dtimDischarge().setValue(null);
		}
		else
		{
			form.lyrDetail().tabDischarge().lblDischargeDod().setVisible(false);
			form.lyrDetail().tabDischarge().dtimDod().setVisible(false);
			form.lyrDetail().tabDischarge().dtimDod().setValue(null);
			form.lyrDetail().tabDischarge().lblDischargeDateTime().setVisible(true);
			form.lyrDetail().tabDischarge().dtimDischarge().setVisible(true);
			form.lyrDetail().tabDischarge().dtimDischarge().setValue(new DateTime());
		}	
	}

	private void rttControlsInitialise()
	{
		form.getLocalContext().setRtpStat(null);
		form.getLocalContext().setPlBlk(null);

		if (form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisodeIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEventIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent().getPatientIsNotNull())
		{
			//retrieve 2 values from Inpat
			String[] arrDtoVals = domain.getRtpStatAndPlBlk(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent().getPatient().getDisplayId());
			if (arrDtoVals != null)
			{
				form.getLocalContext().setRtpStat(arrDtoVals[0] == "" ? null : arrDtoVals[0]);
				form.getLocalContext().setPlBlk(arrDtoVals[1] == "" ? null : arrDtoVals[1]);
			}
		}
		
		form.lyrDetail().tabDischarge().lblTreatment().setVisible(false);
		form.lyrDetail().tabDischarge().grpTreatmentPostponed().setVisible(false);
		form.lyrDetail().tabDischarge().txtTreatDeferr().setVisible(false);				// WDEV-13666
		form.lyrDetail().tabDischarge().lblReason().setVisible(false);
		form.lyrDetail().tabDischarge().cmbReason().setVisible(false);
		
		if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) || 
				(form.getLocalContext().getRtpStatIsNotNull() && (form.getLocalContext().getRtpStat().equals(TREATMENT) || form.getLocalContext().getRtpStat().equals(DIAGNOSTIC))))
		{
			form.lyrDetail().tabDischarge().lblTreatment().setVisible(true);

			// WDEV-18617
			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode() != null)
			{
				PatientElectiveListBedAdmissionVo patEle = domain.getPatientElectiveListForDischarge(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent());
				
				if (patEle != null && patEle.getElectiveListReasonIsNotNull() && patEle.getElectiveListReason().getId() == ElectiveListReason.DIAGNOSTIC.getId())
				{
					form.lyrDetail().tabDischarge().lblTreatment().setValue("Was the Patient Treated?");
				}
				else
				{
					form.lyrDetail().tabDischarge().lblTreatment().setValue("Was Treatment Deferred?");
				}
			}
			
			form.lyrDetail().tabDischarge().grpTreatmentPostponed().setVisible(true);
			form.lyrDetail().tabDischarge().txtTreatDeferr().setVisible(true);			// WDEV-13666
			form.lyrDetail().tabDischarge().lblReason().setVisible(true);
			form.lyrDetail().tabDischarge().cmbReason().setVisible(true);	
			form.lyrDetail().tabDischarge().cmbReason().setEnabled(false);
		}
		
		form.lyrDetail().tabDischarge().lblRunning().setVisible(false);
		form.lyrDetail().tabDischarge().grp18Running().setVisible(false);
		form.lyrDetail().tabDischarge().txt18WeekRun().setVisible(false);				// WDEV-13666
		form.lyrDetail().tabDischarge().lblStopped().setVisible(false);
		form.lyrDetail().tabDischarge().grp18Stopped().setVisible(false);
		form.lyrDetail().tabDischarge().txt18WeekStop().setVisible(false);				// WDEV-13666

		if (form.getLocalContext().getRtpStat() != null)
		{
			if (form.getLocalContext().getRtpStat().equals(DIAGNOSTIC))
			{
				form.lyrDetail().tabDischarge().lblRunning().setVisible(true);
				form.lyrDetail().tabDischarge().grp18Running().setVisible(true);
				form.lyrDetail().tabDischarge().txt18WeekRun().setVisible(true);			// WDEV-13666
			}
		}
	}

	private void showStoppedHideRunning()
	{
		form.lyrDetail().tabDischarge().lblRunning().setVisible(false);
		form.lyrDetail().tabDischarge().grp18Running().setVisible(false);
		form.lyrDetail().tabDischarge().txt18WeekRun().setVisible(false);			// WDEV-13666
		form.lyrDetail().tabDischarge().lblStopped().setVisible(true);
		form.lyrDetail().tabDischarge().grp18Stopped().setVisible(true);
		form.lyrDetail().tabDischarge().txt18WeekStop().setVisible(true);			// WDEV-13666
	}

	private void populateTransferInListFromData()
	{	
		enableTransferInControls(false);
		
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getRows().clear();

		PendingTransfersLiteVoCollection voCollTransfersIn = form.getGlobalContext().Core.getADTTransfersIn();
		if (voCollTransfersIn == null)
			return;

		for (PendingTransfersLiteVo voTransfer : voCollTransfersIn)
		{
			grdTransferInRow tRow = form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getRows().newRow();
			tRow.setColName(voTransfer.getPatientString());

			if (voTransfer.getInpatientEpisodeIsNotNull() && voTransfer.getInpatientEpisode().getPasEventIsNotNull() && voTransfer.getInpatientEpisode().getPasEvent().getConsultantIsNotNull())
				tRow.setColConsultant(voTransfer.getInpatientEpisode().getPasEvent().getConsultant().getIMosName());

			if (voTransfer.getInpatientEpisodeIsNotNull() && voTransfer.getInpatientEpisode().getPasEventIsNotNull() && voTransfer.getInpatientEpisode().getPasEvent().getSpecialtyIsNotNull())
				tRow.setColSpecialty(voTransfer.getInpatientEpisode().getPasEvent().getSpecialty().getText());

			if (voTransfer.getInpatientEpisodeIsNotNull() && voTransfer.getInpatientEpisode().getPasEventIsNotNull() && voTransfer.getInpatientEpisode().getPasEvent().getLocationIsNotNull())
				tRow.setColWard(voTransfer.getInpatientEpisode().getPasEvent().getLocation().getName());

			if (voTransfer.getTransferRequestDateTimeIsNotNull())
				tRow.setColRequestDate(voTransfer.getTransferRequestDateTime().toString());

			tRow.setValue(voTransfer);
		}

		if (form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getRows().size() == 0)
			form.lyrDetail().tabTransfer().btnCancelTransfer().setVisible(false);
		else
			form.lyrDetail().tabTransfer().btnCancelTransfer().setEnabled(false);
	}

	private void enableTransferInControls(boolean bEnable)
	{
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().ccInConsultant().setEnabled(bEnable);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().setEnabled(bEnable);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dtimTransfer().setEnabled(bEnable);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dteDischarge().setEnabled(bEnable);	
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().chkAllocateSourceBed().setEnabled(bEnable);
		form.lyrDetail().tabTransfer().btnTransfer().setEnabled(bEnable);
		form.lyrDetail().tabTransfer().btnCancelTransfer().setEnabled(bEnable);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().setEnabled(bEnable);// 	WDEV-15701
		
		//WDEV-9790
		if(form.getLocalContext().getIsReadOnlyIsNotNull() && form.getLocalContext().getIsReadOnly())
		{
			form.lyrDetail().tabTransfer().btnTransfer().setEnabled(false);
			form.lyrDetail().tabTransfer().btnCancelTransfer().setEnabled(false);
		}
		
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().setVisible(false);
		
		//WDEV-14972
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().lblTICaseComment().setVisible(false);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().txtTICaseComment().setVisible(false);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().lblTIUpdateCasefolder().setVisible(false);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().TICaseFolderYesNo().setVisible(false);
		
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().lblTICaseComment().setVisible(true);
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().txtTICaseComment().setVisible(true);
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().txtTICaseComment().setEnabled(false);
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().lblTIUpdateCasefolder().setVisible(true);
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().TICaseFolderYesNo().setVisible(true);
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().TICaseFolderYesNo().setEnabled(bEnable);

			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().setVisible(false);
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().setVisible(true);
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().setEnabled(bEnable);
		}
	}


	private void populateTransferInTabFromData()
	{
		clearTransferInTab();

		PendingTransfersLiteVo voTransfer = form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getValue();
		if (voTransfer == null)
			throw new CodingRuntimeException("No Transfer selected in method populateTransferInTabFromData");

		//WDEV-9852 - previously defaulted to Main
		if(voTransfer.getWardTypeIsNotNull())
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().setValue(voTransfer.getWardType());
		else
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().setValue(WardType.MAIN);

		if (voTransfer.getConsultantIsNotNull())
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().ccInConsultant().setValue(voTransfer.getConsultant());
		else if (voTransfer.getInpatientEpisodeIsNotNull() && voTransfer.getInpatientEpisode().getPasEventIsNotNull() && voTransfer.getInpatientEpisode().getPasEvent().getConsultantIsNotNull())
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().ccInConsultant().setValue(voTransfer.getInpatientEpisode().getPasEvent().getConsultant());

		Specialty spec = null;
		if (voTransfer.getSpecialtyIsNotNull())
			spec = voTransfer.getSpecialty();
		else if (voTransfer.getInpatientEpisodeIsNotNull() 
			&& voTransfer.getInpatientEpisode().getPasEventIsNotNull() 
			&& voTransfer.getInpatientEpisode().getPasEvent().getSpecialtyIsNotNull())
			spec = voTransfer.getInpatientEpisode().getPasEvent().getSpecialty();

		PASSpecialty pasSpec = null;
		if (voTransfer.getPASSpecialtyIsNotNull())
			pasSpec = voTransfer.getPASSpecialty();
		else if (voTransfer.getInpatientEpisodeIsNotNull() 
			&& voTransfer.getInpatientEpisode().getPasEventIsNotNull() 
			&& voTransfer.getInpatientEpisode().getPasEvent().getPASSpecialtyIsNotNull())
			pasSpec = voTransfer.getInpatientEpisode().getPasEvent().getPASSpecialty();

		listSpecialtiesForConsultant(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().ccInConsultant().getValue(), IN_CONSULTANT, spec, pasSpec);
		
		
//		//if conspc call did not find specialty (conspc mapping was removed) add it as a value anyway
//		if(spec != null)
//		{
//			if(!form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().getValues().contains(spec))
//				form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().newRow(spec, spec.getText());
//		}
		
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().setValue(spec);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().setValue(pasSpec);
		
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dtimTransfer().setValue(new DateTime());

		if (voTransfer.getInpatientEpisodeIsNotNull() && voTransfer.getInpatientEpisode().getEstDischargeDateIsNotNull())
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dteDischarge().setValue(voTransfer.getInpatientEpisode().getEstDischargeDate());

		form.lyrDetail().tabTransfer().btnCancelTransfer().setEnabled(true);
		
		//WDEV-9790
		if(form.getLocalContext().getIsReadOnlyIsNotNull() && form.getLocalContext().getIsReadOnly())
			form.lyrDetail().tabTransfer().btnCancelTransfer().setEnabled(false);
	}

	private void clearTransferInTab()
	{
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().setValue(null);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().ccInConsultant().setValue(null);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().setValue(null);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dtimTransfer().setValue(null);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().dteDischarge().setValue(null);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().chkAllocateSourceBed().setValue(false);
		
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().txtTICaseComment().setValue(null);
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().TICaseFolderYesNo().setValue(ims.core.forms.bedinfodialog.GenForm.lyrDetailLayer.tabTransferContainer.lyrTransferLayer.tabInContainer.TICaseFolderYesNoEnumeration.None);

			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().setValue(null);
		}

	}

	@Override
	protected void onlyrTransferTabChanged(LayerBridge tab)
	{
		if (tab.equals(form.lyrDetail().tabTransfer().lyrTransfer().tabIn()))
		{
			if (!form.lyrDetail().tabTransfer().lyrTransfer().tabIn().isInitialized())
			{
				populateTransferInListFromData();
				form.lyrDetail().tabTransfer().lyrTransfer().tabIn().ccInConsultant().initialize(MosType.MEDIC);
			}
		}
		else if (tab.equals(form.lyrDetail().tabTransfer().lyrTransfer().tabOut()))
		{
			if (!form.lyrDetail().tabTransfer().lyrTransfer().tabOut().isInitialized())
			{
				populateTransferOutTabFromData();
			}
			form.lyrDetail().tabTransfer().btnCancelTransfer().setVisible(form.getLocalContext().getPendingTransferOutIsNotNull());
		}
		else if (tab.equals(form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant()))
		{
			if (!form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().isInitialized())
			{
				populateConsultantTransferTabFromData();
			}
			form.lyrDetail().tabTransfer().btnCancelTransfer().setVisible(false);
		}
	}

	private void populateConsultantTransferTabFromData()
	{
		form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().lblCurrentCons().setValue("");
		BedSpaceStateLiteVo voBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if(voBedSpaceState != null)
		{
			if(voBedSpaceState.getInpatientEpisodeIsNotNull() && voBedSpaceState.getInpatientEpisode().getPasEventIsNotNull() && voBedSpaceState.getInpatientEpisode().getPasEvent().getConsultantIsNotNull())
				form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().lblCurrentCons().setValue(voBedSpaceState.getInpatientEpisode().getPasEvent().getConsultant().getIMosName());
		}
		else if (form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
		{
			InPatientEpisodeADTVo voEpisode = domain.getInpatientEpisode(form.getGlobalContext().Core.getSelectedWaitingAreaPatient());
			if (voEpisode != null && voEpisode.getPasEventIsNotNull() && voEpisode.getPasEvent().getConsultantIsNotNull()) //WDEV-16004
				form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().lblCurrentCons().setValue(voEpisode.getPasEvent().getConsultant().getIMosName());
		}
		
		form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().ccConsultantAccepting().initialize(MosType.MEDIC);
		form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().ccConsultantAccepting().isRequired(true);
		form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().dtimConsultantTransfer().setValue(new DateTime());
	}

	private void populateTransferOutTabFromData()
	{
		clearTransferOutTab();
		loadTransferOutHospital();

		BedSpaceStateLiteVo voBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();

		// Current Hospital Label
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().htmHospital().setHTML("");	//	WDEV-12777
		
		if (voBedSpaceState != null && voBedSpaceState.getWardIsNotNull())
		{
			LocationLiteVo voHosp = domain.getParentLocation(voBedSpaceState.getWard());
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().htmHospital().setHTML("<b>" + (voHosp != null ? voHosp.getName() : "") + "</b>");	//	WDEV-12777
			// Current Ward Label
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().htmWard().setHTML("<b>" + (voBedSpaceState != null && voBedSpaceState.getWardIsNotNull() ? voBedSpaceState.getWard().getName() : "") + "</b>"); //	WDEV-12777
		}
		else if (form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull()
				&& form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEventIsNotNull()
				&& form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent().getLocationIsNotNull())
		{
			LocationLiteVo voHosp = domain.getParentLocation(form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent().getLocation());
			if (voHosp != null)
				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().htmHospital().setHTML("<b>" + (voHosp != null ? voHosp.getName() : "") + "</b>");	//	WDEV-12777

			// Current Ward Label
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().htmWard().setHTML("<b>" + (form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent().getLocation().getName()) + "</b>"); //	WDEV-12777
		}


		// Consultant
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().ccOutConsultant().initialize(MosType.MEDIC);

		// any existing pendingtransfer - populate screen with
		PendingTransfersLiteVo voTransfer = form.getLocalContext().getPendingTransferOut();
		if (voTransfer != null)
		{
			if (voTransfer.getDestinationWardIsNotNull())
			{
				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutHospital().setValue(domain.getParentLocation(voTransfer.getDestinationWard()));
				cmbOutHospitalValueChanged(true);
				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutTransfer().setValue(voTransfer.getDestinationWard());
			}
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().setValue(voTransfer.getWardType());
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().dtimOutTransfer().setValue(voTransfer.getTransferRequestDateTime());
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().ccOutConsultant().setValue(voTransfer.getConsultant());
			
			listSpecialtiesForConsultant(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().ccOutConsultant().getValue(), OUT_CONSULTANT, voTransfer.getSpecialty(), null);
			
			//if conspc call did not find specialty (conspc mapping was removed) add it as a value anyway
//			if(voTransfer.getSpecialtyIsNotNull())
//			{
//				if(!form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().getValues().contains(voTransfer.getSpecialty()))
//					form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().newRow(voTransfer.getSpecialty(), voTransfer.getSpecialty().getText());
//			}
			
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().setValue(voTransfer.getSpecialty());
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().setValue(voTransfer.getSpecialty());
		}
		else
		{
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().setValue(WardType.MAIN);
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().dtimOutTransfer().setValue(new DateTime());
		}
		
		Object mos = domain.getMosUser();
		if(mos != null)
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().lblLoggedInHcp().setValue(((MemberOfStaffLiteVo)mos).getIMosName());
	}

	private void clearTransferOutTab()
	{
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutHospital().setValue(null);
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutTransfer().setValue(null);
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().setValue(null);
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().dtimOutTransfer().setValue(null);
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().lblLoggedInHcp().setValue(null);
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().ccOutConsultant().clear();
	}

	private void loadTransferOutHospital()
	{
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutHospital().clear();

		LocationLiteVoCollection voCollHosp = form.getLocalContext().getHospitals();
		if (voCollHosp == null || voCollHosp.size() == 0)
			return;

		for (LocationLiteVo voHosp : voCollHosp)
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutHospital().newRow(voHosp, voHosp.getName());
	}

	@Override
	protected void onCmbOutHospitalValueChanged() throws PresentationLogicException
	{
		cmbOutHospitalValueChanged(false);
	}

	private void cmbOutHospitalValueChanged(boolean bUserCalled)
	{
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutTransfer().clear();

		if (form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutHospital().getValue() == null)
			return;

		LocationLiteVoCollection voCollWards = domain.listActiveWardsForHospitalLite(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutHospital().getValue());
		if (voCollWards != null)
		{
			for (LocationLiteVo voWard : voCollWards)
			{
				// exclude current ward
				BedSpaceStateLiteVo voBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
				if (voBedSpaceState != null && voBedSpaceState.getWardIsNotNull())
				{
					if (voWard.equals(voBedSpaceState.getWard()))
						continue;
				}

				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutTransfer().newRow(voWard, voWard.getName());
			}

			if (voCollWards.size() == 1)
				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutTransfer().setValue(voCollWards.get(0));
			else if (voCollWards.size() > 0)
			{
				if (!bUserCalled)
					form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutTransfer().showOpened();
			}

		}
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		BedSpaceStateLiteVo voBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();

		if (voBedSpaceState == null)
			throw new CodingRuntimeException("voBedSpaceState is null in method onBtnCloseClick");

		// move to previous
		if (voBedSpaceState.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceState.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceState.getCurrentBedStatus().clone());
			voBedSpaceState.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceState.getCurrentBedStatus().setStatusDateTime(form.lyrDetail().tabCloseBed().dtimClose().getValue());
			voBedSpaceState.getCurrentBedStatus().setBedStatus(BedStatus.CLOSED);
		}

		String[] arrErrors = voBedSpaceState.validate(getUIValidationForCloseBed());
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.saveCloseBed(voBedSpaceState, form.lyrDetail().tabCloseBed().cmbUser().getValue(), form.lyrDetail().tabCloseBed().cmbCloseReason().getValue(), form.lyrDetail().tabCloseBed().dtimEstReOpen().getValue());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			engine.close(DialogResult.OK);
			return;
		}

		engine.close(DialogResult.OK);
	}

	private String[] getUIValidationForCloseBed()
	{
		List<String> errors = new ArrayList<String>();

		if (form.lyrDetail().tabCloseBed().cmbUser().getValue() == null)
			errors.add("User is mandatory");
		if (form.lyrDetail().tabCloseBed().cmbCloseReason().getValue() == null)
			errors.add("Reason for Closure is mandatory");
		if (form.lyrDetail().tabCloseBed().dtimClose().getValue() == null)
			errors.add("Closure Date/Time is mandatory");
		if (form.lyrDetail().tabCloseBed().dtimEstReOpen().getValue() == null)
			errors.add("Estimated Re-opening Date/Time is mandatory");

		if(form.lyrDetail().tabCloseBed().dtimEstReOpen().getValue() != null)
		{
			if(form.lyrDetail().tabCloseBed().dtimEstReOpen().getValue().isLessThan(new DateTime()))
				errors.add("Estimated Re-opening Date/Time cannot be in the past");
			
			if(form.lyrDetail().tabCloseBed().dtimClose().getValue() != null)
				if(form.lyrDetail().tabCloseBed().dtimEstReOpen().getValue().isLessThan(form.lyrDetail().tabCloseBed().dtimClose().getValue()))
					errors.add("Estimated Re-opening Date/Time cannot be before Closure Date/Time");
		}
		
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	@Override
	protected void onBtnAssignClick() throws PresentationLogicException
	{
		saveReOpenOrAssign(BedStatus.FOR_CLEANING);
	}

	@Override
	protected void onBtnReOpenClick() throws PresentationLogicException
	{
		saveReOpenOrAssign(BedStatus.AVAILABLE);
	}

	private void saveReOpenOrAssign(BedStatus status)
	{
		////WDEV-17935
		if (BedStatus.FOR_CLEANING.equals(status))
		{
			String[] errCleaningBed = getUIValidationForCloseBed();
			if (errCleaningBed != null)
			{
				engine.showErrors(errCleaningBed);
				return;
			}
		}
		
		BedSpaceStateLiteVo voBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();

		if (voBedSpaceState == null)
			throw new CodingRuntimeException("voBedSpaceState is null in method saveReOpenOrAssign");

		// move to previous
		if (voBedSpaceState.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceState.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceState.getCurrentBedStatus().clone());
			voBedSpaceState.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceState.getCurrentBedStatus().setStatusDateTime(new DateTime());
			voBedSpaceState.getCurrentBedStatus().setBedStatus(status);
			
			//WDEV-17935
			if (BedStatus.FOR_CLEANING.equals(status))
			{
				voBedSpaceState.getCurrentBedStatus().setReasonForClosure(form.lyrDetail().tabCloseBed().cmbCloseReason().getValue());
				voBedSpaceState.getCurrentBedStatus().setEstReopeningDateTime(form.lyrDetail().tabCloseBed().dtimEstReOpen().getValue());
			}
		}

		String[] arrErrors = voBedSpaceState.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.saveReOpenOrAssignBed(voBedSpaceState);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			return;
		}

		engine.close(DialogResult.OK);
	}
	
	@Override
	protected void onBtnCancelTransferClick() throws PresentationLogicException
	{
		PendingTransfersLiteVo voTransfer = null;

		// depending on which tab is visible
		if (form.lyrDetail().tabTransfer().lyrTransfer().tabIn().isVisible())
		{
			voTransfer = form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().getValue();
		}
		else if (form.lyrDetail().tabTransfer().lyrTransfer().tabOut().isVisible())
		{
			voTransfer = form.getLocalContext().getPendingTransferOut();
		}

		//WDEV-10421
		LocationRefVo voCancellingfromWard =  form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() ? form.getGlobalContext().Core.getSelectedBedSpaceState().getWard() : null;
		
		if (voTransfer != null)
		{
			try
			{
				domain.cancelTransfer(voTransfer, voCancellingfromWard); //WDEV-10421
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				initialise();
				return;
			}
			catch (ForeignKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				engine.close(DialogResult.OK);
				return;
			}
		}
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onBtnSaveEstDischargeClick() throws PresentationLogicException
	{
		if (saveEstimatedDischarge(true))
			engine.close(DialogResult.OK);
	}

	private boolean saveEstimatedDischarge(boolean validateUi) 
	{
		BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
		
		InpatientEpisodeLiteVo voInpatEpis = null;
		
		if (voBedSpaceStateLite == null)
		{
			if(form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
				voInpatEpis = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();
		}
		else
			voInpatEpis = voBedSpaceStateLite.getInpatientEpisode();
		
		if (voInpatEpis == null)
			throw new CodingRuntimeException("voInpatEpis is null in method populateEstimatedDischargeTabFromData");

		// populate data
		voInpatEpis.setEstDischargeDate(form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().getValue());
		voInpatEpis.setIsConfirmedDischarge(form.lyrDetail().tabEstimatedDischarge().chkConfirm().getValue());
		if (form.lyrDetail().tabEstimatedDischarge().chkConfirm().getValue())
			voInpatEpis.setConfirmedDischargeDateTime(new DateTime());
		else
			voInpatEpis.setConfirmedDischargeDateTime(null);
		
		//WDEV-12957
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			voInpatEpis.setDischargeReadyDate(form.lyrDetail().tabEstimatedDischarge().dteDischargeReady().getValue());
		
		String[] arrErrors;
		if (validateUi)
		{
			arrErrors= voInpatEpis.validate(getUIValidationForEstimatedDischarge());
		}
		else
		{
			arrErrors = voInpatEpis.validate();
		}
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		try
		{
			//WDEV-11438 - updating the CareContext record with the EDD 
			form.getGlobalContext().Core.setCurrentCareContext(domain.saveEstimatedDischarge(voInpatEpis));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			//initialise(); WDEV-16357
			return false;
		}
				
		return true;
	}

	private String[] getUIValidationForEstimatedDischarge()
	{
		List<String> errors = new ArrayList<String>();

		if (form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().getValue() == null)
			errors.add("Estimate Discharge Date is mandatory");
		
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}



	/***
	 * IF RTTSTAT = 2 for TREAT
     * 	If Treatment postponed - RREA only is required to undo stop clock
     * 	If Treatment NOT postponed
     *  	18 week prompt clock stopped on admission is this correct - If answer NO - NEED RTTSTOP=N - clock will be unstopped
	 * IF RTTTEST = 1 for DIAGNOSTIC
     * 	18 week prompt clock is still running is this correct - If answer NO - NEED RTTSTOP=Y - clock will be stopped
	 * 
	 * @return
	 */
	private String sendRTTMessage()
	{
		String rttStop = "";
		if (form.getLocalContext().getRtpStat() == null)
			return rttStop;
		
		boolean wasTreatmentDeferred = form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration.rdoYesTreat);
		
		
		if (form.getLocalContext().getRtpStat().equals(DIAGNOSTIC))
		{
			if (form.lyrDetail().tabDischarge().grp18Running().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grp18RunningEnumeration.rdoNoRunning))
				rttStop = "Y";
		}
		else if (form.getLocalContext().getRtpStat().equals(TREATMENT))
		{
			if(!wasTreatmentDeferred)
			{
				if (form.lyrDetail().tabDischarge().grp18Stopped().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grp18StoppedEnumeration.rdoNoStopped))
					rttStop = "N";
			}
		}

		return rttStop;
	}

	@Override
	protected void onRadioButtongrpTreatmentPostponedValueChanged() throws PresentationLogicException
	{
		if (form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration.rdoNoTreat))
			form.lyrDetail().tabDischarge().cmbReason().setValue(null);

		form.lyrDetail().tabDischarge().cmbReason().setEnabled(form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration.rdoYesTreat));

		if(form.getLocalContext().getRtpStat() != null && form.getLocalContext().getRtpStat().equals(DIAGNOSTIC))
			return;
		
		if (form.getLocalContext().getRtpStat() != null && form.getLocalContext().getRtpStat().equals(TREATMENT) && form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration.rdoNoTreat))
		{
			showStoppedHideRunning();
		}
		else if (form.lyrDetail().tabDischarge().grpTreatmentPostponed().getValue().equals(GenForm.lyrDetailLayer.tabDischargeContainer.grpTreatmentPostponedEnumeration.rdoYesTreat))
		{
			form.lyrDetail().tabDischarge().lblRunning().setVisible(false);
			form.lyrDetail().tabDischarge().grp18Running().setVisible(false);
			form.lyrDetail().tabDischarge().txt18WeekRun().setVisible(false);		// WDEV-13666
			form.lyrDetail().tabDischarge().lblStopped().setVisible(false);
			form.lyrDetail().tabDischarge().grp18Stopped().setVisible(false);
			form.lyrDetail().tabDischarge().txt18WeekStop().setVisible(false);			// WDEV-13666
		}
	}

	@Override
	protected void onBtnInternalTransferClick() throws PresentationLogicException
	{
		if (form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.lyrDetail().tabBedMove().grdPatients().getValue() != null)
		{
			//WDEV-16030
			BedSpaceStateLiteVo domainBedSpaceState = domain.getBedSpaceStateStatusByBedId(form.lyrDetail().tabBedMove().grdPatients().getValue().getBed());

			if (domainBedSpaceState != null && domainBedSpaceState.getCurrentBedStatus() != null && BedStatus.OCCUPIED.equals(domainBedSpaceState.getCurrentBedStatus().getBedStatus()))
			{
				BedSpaceStateLiteVo voBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
				voBedSpaceState.setInpatientEpisode(form.lyrDetail().tabBedMove().grdPatients().getValue());
				
				try
				{
					domain.saveInternalTransfer(form.lyrDetail().tabBedMove().grdPatients().getValue(), voBedSpaceState);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					populateBedMoveTabFromData();
				}
			}
			else
			{
				engine.showMessage("Patient has already been moved to another bed.");
			}

			engine.close(DialogResult.OK);
		}
	}

	@Override
	protected void onGrdPatientsSelectionChanged() throws PresentationLogicException
	{
		form.lyrDetail().tabBedMove().btnInternalTransfer().setEnabled(form.lyrDetail().tabBedMove().grdPatients().getValue() != null);
		
		//WDEV-9790
		if(form.getLocalContext().getIsReadOnlyIsNotNull() && form.getLocalContext().getIsReadOnly())
			form.lyrDetail().tabBedMove().btnInternalTransfer().setEnabled(false);
	}

	@Override
	protected void onCcAdmitValueChanged() throws PresentationLogicException
	{
		if (form.lyrDetail().tabAdmission().ccAdmit().getInWaitingIsVisible())
		{
			form.lyrDetail().tabAdmission().btnAdmit().setImage(form.getImages().Admin.BedNext24);
			form.lyrDetail().tabAdmission().btnAdmit().setText(ALLOCATE_BED);
		}
		else if (form.lyrDetail().tabAdmission().ccAdmit().getIsReturnFromLeaveVisible())
		{
			form.lyrDetail().tabAdmission().btnAdmit().setImage(form.getImages().Admin.BedNext24);
			form.lyrDetail().tabAdmission().btnAdmit().setText(RETURN_FROM_LEAVE);
		}
		else
		{
			form.lyrDetail().tabAdmission().btnAdmit().setImage(form.getImages().Core.ClinicalData);
			form.lyrDetail().tabAdmission().btnAdmit().setText(ADMIT);
		}
		form.lyrDetail().tabAdmission().btnAdmit().setEnabled(form.lyrDetail().tabAdmission().ccAdmit().getIsRecordSelected());
		
		//WDEV-9790
		if(form.getLocalContext().getIsReadOnlyIsNotNull() && form.getLocalContext().getIsReadOnly())
			form.lyrDetail().tabAdmission().btnAdmit().setEnabled(false);
	}

	@Override
	protected void onBtnInfantDischargeClick() throws PresentationLogicException
	{
		DischargedEpisodeADTVo voDischargedEpisode = new DischargedEpisodeADTVo();

		voDischargedEpisode.setDischargeDateTime(getInfantDischargeDateTime());
		voDischargedEpisode.setDischargeDestination(form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantDischargeDest().getValue());
		voDischargedEpisode.setMethodOfDischarge(form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().getValue());

		BedSpaceStateLiteVo voBedSpaceState = null;
		
		//if a bed is selected
		if(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
			voBedSpaceState = (BedSpaceStateLiteVo) form.getGlobalContext().Core.getSelectedBedSpaceState().clone();
		
		if (form.lyrDetail().tabInfants().grdInfants().getValue() != null)
		{
			voDischargedEpisode.setPasEvent(form.lyrDetail().tabInfants().grdInfants().getValue().getPasEvent());
			voDischargedEpisode.setConsultantStays(form.lyrDetail().tabInfants().grdInfants().getValue().getConsultantStays());
			voDischargedEpisode.setWardStays(form.lyrDetail().tabInfants().grdInfants().getValue().getWardStays());
			voBedSpaceState = domain.getBedSpaceStateByInpatientEpisode(form.lyrDetail().tabInfants().grdInfants().getValue());
		}

		// move to previous
		if (voBedSpaceState != null)
		{
			if(voBedSpaceState.getCurrentBedStatusIsNotNull())
			{
				voBedSpaceState.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceState.getCurrentBedStatus().clone());
				voBedSpaceState.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
				voBedSpaceState.getCurrentBedStatus().setStatusDateTime(new DateTime());
				voBedSpaceState.getCurrentBedStatus().setBedStatus(form.lyrDetail().tabDischarge().chkAllocateForCleaning().getValue() ? BedStatus.FOR_CLEANING : BedStatus.AVAILABLE);
			}
			voBedSpaceState.setInpatientEpisode(null);
		}

		voDischargedEpisode.setIsActive(true);

		String[] arrErrors = voDischargedEpisode.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.saveDischarge(voDischargedEpisode, voBedSpaceState);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			initialise();
			return;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			initialise();
			return;
		}

		engine.close(DialogResult.OK);
	}

	private DateTime getInfantDischargeDateTime()
	{
		if(form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().isVisible())
			return form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().getValue();
		else if(form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDod().isVisible())
			return form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDod().getValue();
		
		return null;
	}

	@Override
	protected void onBtnInfantTransferClick() throws PresentationLogicException
	{
		saveInfantTransferOut();
	}

	private void saveInfantTransferOut()
	{
		PendingTransfersLiteVo voPendingTransfer = form.getLocalContext().getPendingInfantTransfer();
		if(voPendingTransfer == null)
			voPendingTransfer = new PendingTransfersLiteVo();

		voPendingTransfer.setCurrentStatus(TransferStatus.PENDING);
		voPendingTransfer.setDestinationWard(form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWard().getValue());

		voPendingTransfer.setInpatientEpisode(form.lyrDetail().tabInfants().grdInfants().getValue());
		voPendingTransfer.setWardType(form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWardType().getValue());
		voPendingTransfer.setTransferRequestDateTime(form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().dtimInfantTransferRequest().getValue());

		voPendingTransfer.setConsultant(form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().ccInfantConsultant().getValue());
		voPendingTransfer.setSpecialty(form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantSpecialty().getValue());

		if (saveTransferOut(voPendingTransfer))
			engine.close(DialogResult.OK);
	}

	@Override
	protected void onGrdInfantsSelectionChanged() throws PresentationLogicException
	{
		populateInfantInstanceControls();
	}

	private void populateInfantInstanceControls()
	{
		enableInfantControls(true);
			
		InpatientEpisodeLiteVo voInpatEpis = form.lyrDetail().tabInfants().grdInfants().getValue();
		
		// Current Hospital Label
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().lblInfantCurrentHosp().setValue("");
		if (voInpatEpis != null && voInpatEpis.getPasEventIsNotNull())
		{
			LocationLiteVo voHosp = domain.getParentLocation(voInpatEpis.getPasEvent().getLocation());
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().lblInfantCurrentHosp().setValue(voHosp != null ? voHosp.getName() : "");
		}

		// Current Ward Label
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().lblInfantCurrentWard().setValue(voInpatEpis.getPasEventIsNotNull() && voInpatEpis.getPasEvent().getLocationIsNotNull() ? voInpatEpis.getPasEvent().getLocation().getName() : "");
		
		//try to get existing PendingTransfer if it exists populate screen 
		form.getLocalContext().setPendingInfantTransfer(domain.getPendingTransferForInpatient(voInpatEpis));
		
		// discharge
		clearInfantDischargeControls();

		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().setValue(MethodOfDischarge.MEDICALLY_APPROVED);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantDischargeDest().setValue(DischargeDestination.HOME);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().setValue(new DateTime());

		// transfer
		clearInfantTransferControls();
		loadInfantTransferHospital();
		
		
		// Consultant
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().ccInfantConsultant().initialize(MosType.MEDIC);

		// any existing pendingtransfer
		PendingTransfersLiteVo voTransfer = form.getLocalContext().getPendingInfantTransfer();
		if (voTransfer != null)
		{
			if (voTransfer.getDestinationWardIsNotNull())
			{
				form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantHospital().setValue(domain.getParentLocation(voTransfer.getDestinationWard()));
				cmbInfantHospitalValueChanged(true);
				form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWard().setValue(voTransfer.getDestinationWard());
			}
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWardType().setValue(voTransfer.getWardType());
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().dtimInfantTransferRequest().setValue(voTransfer.getTransferRequestDateTime());
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().ccInfantConsultant().setValue(voTransfer.getConsultant());
			
			listSpecialtiesForConsultant(form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().ccInfantConsultant().getValue(), INFANT_CONSULTANT, voTransfer.getSpecialty(), null);
			
			//if conspc call did not find specialty (conspc mapping was removed) add it as a value anyway
			if(voTransfer.getSpecialtyIsNotNull())
			{
				if(!form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantSpecialty().getValues().contains(voTransfer.getSpecialty()))
					form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantSpecialty().newRow(voTransfer.getSpecialty(), voTransfer.getSpecialty().getText());
			}
		
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantSpecialty().setValue(voTransfer.getSpecialty());
		}
		else
		{
			//WDEV-8466
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().dtimInfantTransferRequest().setValue(new DateTime());
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWardType().setValue(WardType.MAIN);
		}
	}

	private void cmbInfantHospitalValueChanged(boolean bUserCalled)
	{
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWard().clear();

		if (form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantHospital().getValue() == null)
			return;

		LocationLiteVoCollection voCollWards = domain.listActiveWardsForHospitalLite(form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantHospital().getValue());
		if (voCollWards != null)
		{
			for (LocationLiteVo voWard : voCollWards)
			{
				// exclude current infant ward
				InpatientEpisodeLiteVo voInpatEpis = form.lyrDetail().tabInfants().grdInfants().getValue();
				if (voInpatEpis != null && voInpatEpis.getPasEventIsNotNull() && voInpatEpis.getPasEvent().getLocationIsNotNull())
				{
					if (voWard.equals(voInpatEpis.getPasEvent().getLocation()))
						continue;
				}

				form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWard().newRow(voWard, voWard.getName());
			}

			if (voCollWards.size() == 1)
				form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWard().setValue(voCollWards.get(0));
			else if (voCollWards.size() > 0)
			{
				if (!bUserCalled)
					form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWard().showOpened();
			}

		}
	}

	private void loadInfantTransferHospital()
	{
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantHospital().clear();

		LocationLiteVoCollection voCollHosp = form.getLocalContext().getHospitals();
		if (voCollHosp == null || voCollHosp.size() == 0)
			return;

		for (LocationLiteVo voHosp : voCollHosp)
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantHospital().newRow(voHosp, voHosp.getName());
	}

	private void clearInfantTransferControls()
	{
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantHospital().setValue(null);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWard().setValue(null);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantSpecialty().setValue(null);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().dtimInfantTransferRequest().setValue(null);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().ccInfantConsultant().setValue(null);
	}

	private void clearInfantDischargeControls()
	{
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().setValue(null);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantDischargeDest().setValue(null);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDod().setValue(null);
		form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().setValue(null);
	}

	@Override
	protected void onCmbInfantHospitalValueChanged() throws PresentationLogicException
	{
		cmbInfantHospitalValueChanged(true);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.SelectItems))
		{
			if (result.equals(DialogResult.OK))
			{
				DischargedEpisodeADTVoCollection voCollDischarge = new DischargedEpisodeADTVoCollection();
				PendingTransfersLiteVoCollection voCollTransfer = new PendingTransfersLiteVoCollection();

				SelectItemVoCollection voCollItem = form.getGlobalContext().Core.getItems();
				if (voCollItem == null || voCollItem.size() == 0)
					return;

				for (SelectItemVo voItem : voCollItem)
				{
					if (voItem.getItem().getIGenericItemTypeSelectItemType().equals(SelectItemType.DISCHARGE))
					{
						if (voItem.getSelected())
							voCollDischarge.add((DischargedEpisodeADTVo) voItem.getItem());
					}
					else if (voItem.getItem().getIGenericItemTypeSelectItemType().equals(SelectItemType.PENDINGTRANSFER))
					{
						if (voItem.getSelected())
							voCollTransfer.add((PendingTransfersLiteVo) voItem.getItem());
					}
				}

				// save Discharge
				int successfulInfantDischargeCount = 0;
				if (voCollDischarge.size() > 0)
				{
					for (DischargedEpisodeADTVo voDischarge : voCollDischarge)
					{
						InpatientEpisodeRefVo voInpat = voDischarge.getBedSpaceForInfant() != null && voDischarge.getBedSpaceForInfant().getInpatientEpisodeIsNotNull() ? voDischarge.getBedSpaceForInfant().getInpatientEpisode() : null;
						PendingTransfersLiteVo voTransfer = isInpatientEpisodeonTransferOutList(voInpat);
						
						if(voDischarge.getBedSpaceForInfantIsNotNull())
							voDischarge.getBedSpaceForInfant().setInpatientEpisode(null);
						
						if (saveDischarge(voDischarge, voDischarge.getBedSpaceForInfant(), voTransfer, null, null))
							successfulInfantDischargeCount++;

						if (successfulInfantDischargeCount > 0 && successfulInfantDischargeCount == voCollDischarge.size())
						{
							engine.close(DialogResult.OK);
							return;
						}
					}
				}
				// save Transfer
				int successfulInfantTransferCount = 0;
				if (voCollTransfer.size() > 0)
				{
					for (PendingTransfersLiteVo voTransfer : voCollTransfer)
					{
						//check for an existing pendingtransfer for the infant - if it exists update that one
						PendingTransfersLiteVo voExistingTransfer = domain.getPendingTransferForInpatient(voTransfer.getInpatientEpisode());
						if(voExistingTransfer != null)
						{
							voExistingTransfer.setConsultant(voTransfer.getConsultant());
							voExistingTransfer.setCurrentStatus(voTransfer.getCurrentStatus());
							voExistingTransfer.setDestinationWard(voTransfer.getDestinationWard());
							voExistingTransfer.setWardType(voTransfer.getWardType());
							voExistingTransfer.setTransferRequestDateTime(voTransfer.getTransferRequestDateTime());
							voExistingTransfer.setSpecialty(voTransfer.getSpecialty());
							
							if (saveTransferOut(voExistingTransfer))
								successfulInfantTransferCount++;
						}
						else
						{
							if (saveTransferOut(voTransfer))
								successfulInfantTransferCount++;
						}
					}

					if (successfulInfantTransferCount > 0 && successfulInfantTransferCount == voCollTransfer.size())
					{
						engine.close(DialogResult.OK);
						return;
					}
				}
				engine.close(DialogResult.OK);
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				engine.close(DialogResult.OK);
//				if(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisodeIsNotNull())
//				{
//					form.getLocalContext().setPendingTransferOut(domain.getPendingTransferForInpatient(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode()));
//					populateTransferOutTabFromData();
//				}
			}
		}
		else if(formName.equals(form.getForms().Core.DemographicsDialog))
		{
			if(result.equals(DialogResult.OK))
			{
//				Patient voPatient = domain.getPatient(form.getGlobalContext().Core.getPatientShort());
				if(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisodeIsNotNull() && form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEventIsNotNull())
					form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent().setPatient(form.getGlobalContext().Core.getPatientShort());
				
				//wdev-14988
				if( Boolean.TRUE.equals(form.getLocalContext().getShowVTERiskAssessmentButton() && engine.hasRight(AppRight.DISCHARGE_ACCESS_TO_VTE_ASSESSMENT)))
				{
					form.getLocalContext().setshowVTERiskButtonAFterEditPatientDetails(true);
					form.getLocalContext().setVTERiskAssessmentShortVo(form.getGlobalContext().Core.getVTERiskAssessmentShortVo());
				}
				else
					form.getLocalContext().setshowVTERiskButtonAFterEditPatientDetails(false);
				//--------------
				initialise();
				
				//wdev-14988
				if( Boolean.TRUE.equals(form.getLocalContext().getshowVTERiskButtonAFterEditPatientDetails()))
				{
					form.getLocalContext().setShowVTERiskAssessmentButton(true);
					form.getGlobalContext().Core.setVTERiskAssessmentShortVo(form.getLocalContext().getVTERiskAssessmentShortVo());
					updateControlState();
				}
				//--------------
				//wdev-14998
				if(form.lyrDetail().tabDischarge().btnDischarge().isVisible() && !form.lyrDetail().tabDischarge().btnDischarge().isEnabled())
				{
					form.lyrDetail().showtabPatient();
				}
				//--------------
						
				
//				if (voPatient != null)
//				{
//					// display all (updated) patient details
//					clearPatientDetails();
//					populatePatientControlsFromData(voPatient);
//				}
			}		
		}
		else if (formName.equals(form.getForms().Clinical.VTERiskAssessmentDialog))   //wdev-14858
		{
			if (result.equals(DialogResult.OK))
			{
				
				//if(	form.getGlobalContext().Core.getCreateVTERiskAssessmentOnDischargeIsNotNull() && Boolean.FALSE.equals(form.getGlobalContext().Core.getCreateVTERiskAssessmentOnDischarge()))
				if(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo() instanceof InpatientEpisodeRefVo)// 	WDEV-15414
				{
					InpatientEpisodeForVTERiskAsessmentVo tempInpat = domain.getInpatEpisodeForVTERiskAssessment((InpatientEpisodeRefVo) form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo());// 	WDEV-15414
					if(	tempInpat != null && ( VTEAsessmentStatus.REQUIRED.equals(tempInpat.getVTEAssessmentStatus()) || VTEAsessmentStatus.INPROGRESS.equals(tempInpat.getVTEAssessmentStatus()) ) )	//wdev-14858
					{
						
						if( engine.hasRight(AppRight.DISCHARGE_ACCESS_TO_VTE_ASSESSMENT))	//wdev-14858
						{
							form.getLocalContext().setShowVTERiskAssessmentButton(true);
							updateControlState();
						}
						else
						{
							if( form.lyrDetail().tabDischarge().btnDischarge().isEnabled())
							{
								form.getLocalContext().setShowVTERiskAssessmentButton(false);
								updateControlState();
							}
							else
								engine.close(DialogResult.OK);
						}
						
						
					}
					else
					{
						if( form.lyrDetail().tabDischarge().btnDischarge().isEnabled())
						{
							form.getLocalContext().setShowVTERiskAssessmentButton(false);
							updateControlState();
						}
						else
							engine.close(DialogResult.OK);
					}
				}
				else
				{
					form.getGlobalContext().Core.setVTERiskAssessmentShortVo(domain.getVTERiskAssessmentShortVoBYId(form.getGlobalContext().Core.getVTERiskAssessmentShortVo()));
					if( form.getGlobalContext().Core.getVTERiskAssessmentShortVoIsNotNull())
					{
												
						if(	 form.getGlobalContext().Core.getVTERiskAssessmentShortVo().getVTEAssessmentStatusIsNotNull() && ( VTEAsessmentStatus.REQUIRED.equals(form.getGlobalContext().Core.getVTERiskAssessmentShortVo().getVTEAssessmentStatus()) || VTEAsessmentStatus.INPROGRESS.equals(form.getGlobalContext().Core.getVTERiskAssessmentShortVo().getVTEAssessmentStatus()) ) )	//wdev-14858
						{
							
							if( engine.hasRight(AppRight.DISCHARGE_ACCESS_TO_VTE_ASSESSMENT))	//wdev-14858
							{
								form.getLocalContext().setShowVTERiskAssessmentButton(true);
								updateControlState();
							}
							else
							{
								if( form.lyrDetail().tabDischarge().btnDischarge().isEnabled())
								{
									form.getLocalContext().setShowVTERiskAssessmentButton(false);
									updateControlState();
								}
								else
									engine.close(DialogResult.OK);
							}
							
							
						}
						else
						{
							if( form.lyrDetail().tabDischarge().btnDischarge().isEnabled())
							{
								form.getLocalContext().setShowVTERiskAssessmentButton(false);
								updateControlState();
							}
							else
								engine.close(DialogResult.OK);
						}
					}
					else
					{
						//engine.close(DialogResult.OK);
						form.getLocalContext().setShowVTERiskAssessmentButton(true); //wdev-14944
						updateControlState();
					}
				}
				form.lyrDetail().showtabDischarge();
				if(Boolean.TRUE.equals(form.getLocalContext().getShowVTERiskAssessmentButton()) && !form.lyrDetail().tabDischarge().btnDischarge().isEnabled())  //wdev-14988
				{
					disabletabs();
				}
			}
		}
		//WDEV-18454
		else if (formName.equals(form.getForms().RefMan.PatientElectiveListAndTCIForCancellationDialog))
		{
			PatientElectiveListBedAdmissionVo patientElectiveList = form.getLocalContext().getPatientElectiveListDischarge();
			
			if (DialogResult.OK.equals(result))
			{
				PatientElectiveListBedAdmissionVoCollection patienElectiveListToRemove = form.getGlobalContext().RefMan.getPatientElectiveListsForCancellationDialog();

				for (PatientElectiveListBedAdmissionVo electiveList : patienElectiveListToRemove)
				{
					MemberOfStaffLiteVo mosUser = (MemberOfStaffLiteVo) domain.getMosUser();
					ElectiveListStatusVo electiveStatus = new ElectiveListStatusVo();
					electiveStatus.setAuthoringUser(mosUser);
					electiveStatus.setStatusDateTime(new DateTime());
					electiveStatus.setElectiveListStatus(WaitingListStatus.REMOVED);
					electiveStatus.setRemovalReason(ElectiveListStatusReason.PATIENT_ADMITTED_AS_AN_EMERGENCY_FOR_THE_SAME_CONDITION);

					electiveList.setElectiveListStatus(electiveStatus);
					electiveList.getElectiveListStatusHistory().add(electiveStatus);
				}

				if (dischargePatient(form.getLocalContext().getPatientElectiveListDischarge(), patienElectiveListToRemove))
					engine.close(DialogResult.OK);
			}
			else if (dischargePatient(patientElectiveList, null))
				engine.close(DialogResult.OK);
		}
	}
	
	private void disabletabs()
	{
		form.lyrDetail().tabAdmission().setHeaderEnabled(false);
		form.lyrDetail().tabAdmissionDetail().setEnabled(false);
		form.lyrDetail().tabBedMove().setEnabled(false);
		form.lyrDetail().tabCloseBed().setEnabled(false);
		form.lyrDetail().tabEstimatedDischarge().setHeaderEnabled(false);
		form.lyrDetail().tabHomeLeave().setEnabled(false);	
		form.lyrDetail().tabInfants().setEnabled(false);
		form.lyrDetail().tabTransfer().setHeaderEnabled(false);
		form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().setEnabled(false);
		form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().ccConsultantAccepting().setEnabled(false);
		form.lyrDetail().tabTransfer().lyrTransfer().tabIn().setEnabled(false);
		form.lyrDetail().tabTransfer().lyrTransfer().tabOut().setEnabled(false);
		form.lyrDetail().tabTransfer().btnTransfer().setEnabled(false);
	}

	@Override
	protected void onCcConsultantAcceptingValueChanged() throws PresentationLogicException
	{
		MOSQueryEvent event = form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().ccConsultantAccepting().getEventFired();
		if(event != null)
		{
			if(event.equals(MOSQueryEvent.VALUE_CHANGED))
			{
				listSpecialtiesForConsultant(form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().ccConsultantAccepting().getValue(), ACCEPTING_CONSULTANT, null, null);
			}
		}
	}

	@Override
	protected void onCcInConsultantValueChanged() throws PresentationLogicException
	{
		MOSQueryEvent event = form.lyrDetail().tabTransfer().lyrTransfer().tabIn().ccInConsultant().getEventFired();
		if(event != null)
		{
			if(event.equals(MOSQueryEvent.VALUE_CHANGED))
			{
				listSpecialtiesForConsultant(form.lyrDetail().tabTransfer().lyrTransfer().tabIn().ccInConsultant().getValue(), IN_CONSULTANT, null, null);
			}
		}
	}

	@Override
	protected void onCcInfantConsultantValueChanged() throws PresentationLogicException
	{
		MOSQueryEvent event = form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().ccInfantConsultant().getEventFired();
		if(event != null)
		{
			if(event.equals(MOSQueryEvent.VALUE_CHANGED))
			{
				listSpecialtiesForConsultant(form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().ccInfantConsultant().getValue(), INFANT_CONSULTANT, null, null);
			}
		}
	}

	@Override
	protected void onCcOutConsultantValueChanged() throws PresentationLogicException
	{
		MOSQueryEvent event = form.lyrDetail().tabTransfer().lyrTransfer().tabOut().ccOutConsultant().getEventFired();
		if(event != null)
		{
			if(event.equals(MOSQueryEvent.VALUE_CHANGED))
			{
				listSpecialtiesForConsultant(form.lyrDetail().tabTransfer().lyrTransfer().tabOut().ccOutConsultant().getValue(), OUT_CONSULTANT, null, null);
			}
		}
	}
	
	/**
	 * 
	 * @param mos
	 * @param ccCons - used to determine which cc to work with
	 * @param specialty 
	 * @param pasSpec 
	 */
	private void listSpecialtiesForConsultant(IMos mos, String ccCons, Specialty specialty, PASSpecialty pasSpec)
	{
		if (ccCons == null)
			throw new CodingRuntimeException("ccCons cannot be null in method listSpecialtiesForConsultant");		
		
		if(ccCons.equals(ACCEPTING_CONSULTANT))
			form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbConsultantSpecialty().clear();
		else if(ccCons.equals(IN_CONSULTANT))
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().clear();
		else if(ccCons.equals(OUT_CONSULTANT))
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().clear();
		else if(ccCons.equals(INFANT_CONSULTANT))
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantSpecialty().clear();
		
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			//wdev-13927
			if(ccCons.equals(ACCEPTING_CONSULTANT))
				form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbCCOConsultantSpecialty().clear();
			else if(ccCons.equals(IN_CONSULTANT))
				form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().clear();
			else if(ccCons.equals(OUT_CONSULTANT))
				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbCCOOutSpecialty().clear();
		}

		if(mos != null)
		{
			String pasMapping = domain.getPasMappingFromConsultant(mos) ;
			//WDEV-18573 -  if USE_ELECTIVE_LIST_FUNCTIONALITY is TRUE and there are no rows in the specialty combo, 
			//              then add in all active Specialty lookups to the combo; will only apply to cmbSpecialty
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				loadCCOSpecialties(ccCons, pasMapping, pasSpec);
				loadSpecialties(ccCons, pasMapping, specialty);
			}
			else
				loadSpecialties(ccCons, pasMapping, specialty);
		}
	}

	private void loadCCOSpecialties(String ccCons, String pasMapping, PASSpecialty pasSpec)
	{
		// WDEV-18573
		if (pasMapping == null)
			return;
		
		PASSpecialtyCollection collSpec = null;
		try
		{
			collSpec = domain.listCCOSpecialtiesFromConSpc(pasMapping);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage("PAS Error : " + e.getMessage());
			return;
		}
		//wdev-13927
		if(ccCons.equals(ACCEPTING_CONSULTANT))
			form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbCCOConsultantSpecialty().clear();
		else if(ccCons.equals(IN_CONSULTANT))
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().clear();
		else if(ccCons.equals(OUT_CONSULTANT))
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbCCOOutSpecialty().clear();
		
		for(int i=0;i<collSpec.size();i++)
		{
			PASSpecialty inst = collSpec.get(i);
			
			if(ccCons.equals(ACCEPTING_CONSULTANT))
				form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbCCOConsultantSpecialty().newRow(inst, inst.getText());
			else if(ccCons.equals(IN_CONSULTANT))
				form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().newRow(inst, inst.getText());
			else if(ccCons.equals(OUT_CONSULTANT))
				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbCCOOutSpecialty().newRow(inst, inst.getText());
		}
		if (pasSpec != null)
		{
			if(ccCons.equals(ACCEPTING_CONSULTANT))
			{
				if(!form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbCCOConsultantSpecialty().getValues().contains(pasSpec))
					form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbCCOConsultantSpecialty().newRow(pasSpec, pasSpec.getText());
			}
			else if(ccCons.equals(IN_CONSULTANT))
			{
				if(!form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().getValues().contains(pasSpec))
					form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbCCOInSpecialty().newRow(pasSpec, pasSpec.getText());
			}
			else if(ccCons.equals(OUT_CONSULTANT))
			{
				if(!form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbCCOOutSpecialty().getValues().contains(pasSpec))
					form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbCCOOutSpecialty().newRow(pasSpec, pasSpec.getText());
			}
		}
	}

	private void loadSpecialties(String ccCons, String pasMapping, Specialty specialty)
	{
		SpecialtyCollection collSpec = null;
		//WDEV-18573 -  if USE_ELECTIVE_LIST_FUNCTIONALITY is TRUE and there are no rows in the specialty combo, 
		//              then add in all active Specialty lookups to the combo
		if (pasMapping != null)
		{
    		try
    		{
    			collSpec = domain.listSpecialtiesFromConSpc(pasMapping);
    		}
    		catch (DomainInterfaceException e)
    		{
    			engine.showMessage("PAS Error : " + e.getMessage());
    			return;
    		}
		}
		//WDEV-18573 -  if USE_ELECTIVE_LIST_FUNCTIONALITY is TRUE and there are no rows in the specialty combo, 
		//              then add in all active Specialty lookups to the combo
		else if (pasMapping == null && ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) 
			collSpec = ims.core.vo.lookups.LookupHelper.getSpecialty(domain.getLookupService());
		
		//wdev-13927
		if(ccCons.equals(ACCEPTING_CONSULTANT))
			form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbConsultantSpecialty().clear();
		else if(ccCons.equals(IN_CONSULTANT))
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().clear();
		else if(ccCons.equals(OUT_CONSULTANT))
			form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().clear();
		else if(ccCons.equals(INFANT_CONSULTANT))
			form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantSpecialty().clear();
		
		//WDEV-18573 -  if USE_ELECTIVE_LIST_FUNCTIONALITY is TRUE and there are no rows in the specialty combo, 
		//              then add in all active Specialty lookups to the combo
		if ((collSpec == null || (collSpec != null && collSpec.size() == 0)) && ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
		{
			collSpec = ims.core.vo.lookups.LookupHelper.getSpecialty(domain.getLookupService());
		}
		
		for(int i=0; collSpec != null && i<collSpec.size();i++)
		{
			Specialty inst = collSpec.get(i);
			
			if(ccCons.equals(ACCEPTING_CONSULTANT))
				form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbConsultantSpecialty().newRow(inst, inst.getText());
			else if(ccCons.equals(IN_CONSULTANT))
				form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().newRow(inst, inst.getText());
			else if(ccCons.equals(OUT_CONSULTANT))
				form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().newRow(inst, inst.getText());
			else if(ccCons.equals(INFANT_CONSULTANT))
				form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantSpecialty().newRow(inst, inst.getText());
		}

		if (specialty != null)
		{
			if(ccCons.equals(ACCEPTING_CONSULTANT))
			{
				if(!form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbConsultantSpecialty().getValues().contains(specialty))
					form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbConsultantSpecialty().newRow(specialty, specialty.getText());
			}
			else if(ccCons.equals(IN_CONSULTANT))
			{
				if(!form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().getValues().contains(specialty))
					form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbInSpecialty().newRow(specialty, specialty.getText());
			}
			else if(ccCons.equals(OUT_CONSULTANT))
			{
				if(!form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().getValues().contains(specialty))
					form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutSpecialty().newRow(specialty, specialty.getText());
			}
			else if(ccCons.equals(INFANT_CONSULTANT))
			{
				if(!form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantSpecialty().getValues().contains(specialty))
					form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantSpecialty().newRow(specialty, specialty.getText());
			}
		}

	}

	@Override
	protected void onBtnEditPatientClick() throws PresentationLogicException
	{
		if((form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull() 
			&& form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisodeIsNotNull() 
			&& form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEventIsNotNull() 
			&& form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent().getPatientIsNotNull())
			|| (form.getGlobalContext().Core.getPatientShortIsNotNull()) )
		{
			if (form.getGlobalContext().Core.getPatientShortIsNotNull())
				engine.open(form.getForms().Core.DemographicsDialog);
			else
			{
				form.getGlobalContext().Core.setPatientShort(form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode().getPasEvent().getPatient());
				engine.open(form.getForms().Core.DemographicsDialog);
			}
		}	
	}

	@Override
	protected void onDteEstDischargeValueChanged() throws PresentationLogicException
	{
		form.lyrDetail().tabEstimatedDischarge().chkConfirm().setVisible(false);	
		
		if(form.lyrDetail().tabEstimatedDischarge().chkConfirm().getValue())
		{
			form.lyrDetail().tabEstimatedDischarge().chkConfirm().setVisible(true);
			if(form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().getValue() != null)
			{
				if(!((Date)form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().getValue().clone()).isLessOrEqualThan(new Date().addDay(1)))
				{
					form.lyrDetail().tabEstimatedDischarge().chkConfirm().setValue(false);
					form.lyrDetail().tabEstimatedDischarge().chkConfirm().setVisible(false); //WDEV-14608
				}
			}
		}
		else
		{
			if(form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().getValue() != null)
			{
				if(((Date)form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().getValue().clone()).isLessOrEqualThan(new Date().addDay(1)))
					form.lyrDetail().tabEstimatedDischarge().chkConfirm().setVisible(true);
				else
					form.lyrDetail().tabEstimatedDischarge().chkConfirm().setValue(false);
			}
		}
		
	}

	@Override
	protected void onCmbMethodDischargeValueChanged() throws PresentationLogicException
	{
		updateDischargeDateTimeControls();
	}

	@Override
	protected void onCmbInfantMethodDischargeValueChanged() throws PresentationLogicException
	{
		updateInfantDischargeDateTimeControls();	
	}

	private void updateInfantDischargeDateTimeControls()
	{
		if(form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().getValue() == null)
		{
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().lblInfantDod().setVisible(false);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDod().setVisible(false);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDod().setValue(null);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().lblInfantDischargeDateTime().setVisible(true);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().setVisible(true);
			if(form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().isEnabled())
				form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().setValue(new DateTime());
			return;
		}
		
		boolean isDead = false;
		MethodOfDischarge lkpMethodDischarge = form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().getValue();
		String extCode = domain.getLookupService().getRemoteLookup(lkpMethodDischarge.getID(), TaxonomyType.PAS.getText());
		if(extCode != null && (extCode.equals(PATIENTDIED) || extCode.equals(STILLBIRTH)))
			isDead = true;
				
		if(isDead)
		{
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().lblInfantDod().setVisible(true);
			if(form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().isEnabled())
				form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDod().setVisible(true);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDod().setValue(new DateTime());
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().lblInfantDischargeDateTime().setVisible(false);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().setVisible(false);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().setValue(null);
		}
		else
		{
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().lblInfantDod().setVisible(false);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDod().setVisible(false);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDod().setValue(null);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().lblInfantDischargeDateTime().setVisible(true);
			form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().setVisible(true);
			if(form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().isEnabled())
				form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().dtimInfantDischarge().setValue(new DateTime());
		}	
	}

	@Override
	protected void onBtnClearEstimateClick() throws PresentationLogicException 
	{
		form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().setValue(null);
		form.lyrDetail().tabEstimatedDischarge().chkConfirm().setValue(null);
		if (saveEstimatedDischarge(false))
			engine.close(DialogResult.OK);
	}

	@Override
	protected void onIntEstRevisedStayValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetail().tabEstimatedDischarge().intEstRevisedStay().getValue() != null && form.lyrDetail().tabEstimatedDischarge().intEstRevisedStay().getValue() >= 0)
		{
			Date newRevisedDate = new Date();
			newRevisedDate.addDay(form.lyrDetail().tabEstimatedDischarge().intEstRevisedStay().getValue());
			form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().setValue(newRevisedDate);
		}	
		else
		{	
			Date newRevisedDate = new Date();		//wdev-13348
			newRevisedDate.addDay(0);				//wdev-13348
			form.lyrDetail().tabEstimatedDischarge().dteEstDischarge().setValue(newRevisedDate);	//wdev-13348
		}
		
		//WDEV-13130
		onDteEstDischargeValueChanged();
	}

	@Override
	protected void onRadioButtonTICaseFolderYesNoValueChanged() throws PresentationLogicException 
	{
		TICaseFolderYesNoEnumeration val = form.lyrDetail().tabTransfer().lyrTransfer().tabIn().TICaseFolderYesNo().getValue();
		if(val.equals(TICaseFolderYesNoEnumeration.rdoTIYes))
		{
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().txtTICaseComment().setEnabled(true);
		}
		else if(val.equals(TICaseFolderYesNoEnumeration.rdoTINo))
		{
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().txtTICaseComment().setEnabled(false);
			form.lyrDetail().tabTransfer().lyrTransfer().tabIn().txtTICaseComment().setValue(null);
		}
	}

	@Override
	protected void onGrdTransferInSelEctionChanged() throws PresentationLogicException 
	{
		enableTransferInControls(true);
		populateTransferInTabFromData();
	}

	//wdev-14858
	protected void onBtnVTERiskAssesssmentClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Core.setInpatientEpisodeForVTERiskAssessmentWorklistVo(domain.getVTERiskAssessmentWorklistById(form.getLocalContext().getInpatientEpForVTERiskAssessmentVo()));
		InpatientEpisodeForVTERiskAsessmentVo tempVo = domain.getInpatEpisodeForVTERiskAssessment(form.getLocalContext().getInpatientEpForVTERiskAssessmentVo()); //wdev-14858
				
		form.getGlobalContext().Core.setCreateVTERiskAssessmentOnDischarge(Boolean.TRUE);
		if(	tempVo == null )	
		{
									
			if(	form.getGlobalContext().Core.getVTERiskAssessmentShortVoIsNotNull() && form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVoIsNotNull()) //WDEV-16200
			{
				
				form.getGlobalContext().Core.setEditVTERiskAssessmentFromInpatientEpisode(true);
				engine.open(form.getForms().Clinical.VTERiskAssessmentDialog, new Object[] {FormMode.VIEW});
				
			}
			else
			{
				
				form.getGlobalContext().Core.setEditVTERiskAssessmentFromInpatientEpisode(null);
				form.getGlobalContext().Core.setVTERiskAssessmentShortVo(new VTERiskAssessmentShortVo());
				
				if (form.getGlobalContext().Core.getDischargeEpisodeBedInfoIsNotNull()) //WDEV-16200
				{
					if (form.getGlobalContext().Core.getDischargeEpisodeBedInfo().getPasEventIsNotNull())
					{
						form.getGlobalContext().Core.setDischargeEpisodeBedInfo(domain.getDischargedEpisodeADT(form.getGlobalContext().Core.getDischargeEpisodeBedInfo().getPasEvent()));
					}
					
					if (VTEAsessmentStatus.REQUIRED.equals(form.getGlobalContext().Core.getDischargeEpisodeBedInfo().getVTEAssessmentStatus()))
					{
						engine.open(form.getForms().Clinical.VTERiskAssessmentDialog, new Object[] { FormMode.EDIT });
					}
					else
					{
						engine.open(form.getForms().Clinical.VTERiskAssessmentDialog, new Object[] { FormMode.VIEW });
					}
				}
				else
				{
					engine.open(form.getForms().Clinical.VTERiskAssessmentDialog, new Object[] { FormMode.VIEW });
				}
			}
		}
		else if(tempVo.getVTERiskAssessment() == null)
		{
			form.getGlobalContext().Core.setVTERiskAssessmentShortVo(null);
			form.getGlobalContext().Core.setEditVTERiskAssessmentFromInpatientEpisode(true);
			engine.open(form.getForms().Clinical.VTERiskAssessmentDialog, new Object[] {FormMode.VIEW});
		}
		else if( tempVo != null && tempVo.getVTERiskAssessmentIsNotNull())
		{
			form.getGlobalContext().Core.setVTERiskAssessmentShortVo(null);
			form.getGlobalContext().Core.setEditVTERiskAssessmentFromInpatientEpisode(true);
			engine.open(form.getForms().Clinical.VTERiskAssessmentDialog, new Object[] {FormMode.VIEW});
			
		}
			
		
		
	}

	//wdev-14892
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if (form.getLocalContext().getMessageBoxAdmission() != null && form.getLocalContext().getMessageBoxAdmission().equals(messageBoxId))
		{
			form.getLocalContext().setMessageBoxAdmission(null);
			
			if (DialogResult.YES.equals(result))
			{
				if (form.lyrDetail().tabAdmission().ccAdmit().saveElectiveListAdmission(true))
					engine.close(DialogResult.OK);
			}
			else if (DialogResult.NO.equals(result))
			{
				if (form.lyrDetail().tabAdmission().ccAdmit().saveElectiveListAdmission(false))
					engine.close(DialogResult.OK);
			}
			
			return;
		}
		else if (form.getLocalContext().getMessageBoxDischarge() != null && form.getLocalContext().getMessageBoxDischarge().equals(messageBoxId))
		{
			form.getLocalContext().setMessageBoxDischarge(null);
			PatientElectiveListBedAdmissionVo patientElectiveList = form.getLocalContext().getPatientElectiveListDischarge();
			
			if (DialogResult.YES.equals(result))
			{
				PatientElectiveListBedAdmissionVoCollection cancelledPatienElectiveListToRemove = domain.getCancelledElectiveListsToRemove(patientElectiveList.getPatient(), patientElectiveList, patientElectiveList.getElectiveList().getService());
				
				for (PatientElectiveListBedAdmissionVo electiveList : cancelledPatienElectiveListToRemove)
				{
					ElectiveListStatusVo electiveStatus = new ElectiveListStatusVo();
					electiveStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
					electiveStatus.setStatusDateTime(new DateTime());
					electiveStatus.setElectiveListStatus(WaitingListStatus.REMOVED);
					electiveStatus.setRemovalReason(ElectiveListStatusReason.PATIENT_ADMITTED_AS_AN_EMERGENCY_FOR_THE_SAME_CONDITION);
					
					electiveList.setElectiveListStatus(electiveStatus);
					electiveList.getElectiveListStatusHistory().add(electiveStatus);
				}
				
				if (dischargePatient(patientElectiveList, cancelledPatienElectiveListToRemove))
					engine.close(DialogResult.OK);
			}
			else if (DialogResult.NO.equals(result))
			{
				if (dischargePatient(patientElectiveList, null))
					engine.close(DialogResult.OK);
			}
		}
		else if (form.getLocalContext().getMessageBoxPELCheck() != null && form.getLocalContext().getMessageBoxPELCheck().equals(messageBoxId))
		{
			form.getLocalContext().setMessageBoxPELCheck(null);
			PatientElectiveListBedAdmissionVo patientElectiveList = form.getLocalContext().getPatientElectiveListDischarge();
			
			if (DialogResult.YES.equals(result))
			{
				form.getGlobalContext().RefMan.setPatientElectiveListsForCancellationDialog(domain.getElectiveListsToRemove(form.getGlobalContext().Core.getPatientShort(), patientElectiveList, form.getLocalContext().getInpatientEpisodeSpecialty()));
				engine.open(form.getForms().RefMan.PatientElectiveListAndTCIForCancellationDialog);
				return;
			}
			else if (DialogResult.NO.equals(result))
			{
				if (dischargePatient(patientElectiveList, null))
					engine.close(DialogResult.OK);
			}
		}
		
		if (Boolean.TRUE.equals(form.getLocalContext().getVTEShouldCreate()))	//wdev-14858
		{
			form.lyrDetail().tabDischarge().btnDischarge().setEnabled(false);
			disabletabs();	//wdev-14988
			enabledisableDiaschargeTabContrls(false);
			return;
		}
		engine.close(DialogResult.OK);
		
	}
	//wdev-14996
	private void enabledisableDiaschargeTabContrls(Boolean en)
	{
		form.lyrDetail().tabDischarge().cmbMethodDischarge().setEnabled(en);
		form.lyrDetail().tabDischarge().cmbDischargeDestination().setEnabled(en);
		form.lyrDetail().tabDischarge().dtimDod().setEnabled(en);
		form.lyrDetail().tabDischarge().dtimDischarge().setEnabled(en);
		form.lyrDetail().tabDischarge().grpTreatmentPostponed().setEnabled(en);
		form.lyrDetail().tabDischarge().cmbReason().setEnabled(en);
		form.lyrDetail().tabDischarge().grp18Running().setEnabled(en);
		form.lyrDetail().tabDischarge().chkAllocateForCleaning().setEnabled(en);
		form.lyrDetail().tabDischarge().grp18Stopped().setEnabled(en);
		form.lyrDetail().tabDischarge().txt18WeekRun().setEnabled(en);
		form.lyrDetail().tabDischarge().txt18WeekStop().setEnabled(en);
		form.lyrDetail().tabDischarge().txtTreatDeferr().setEnabled(en);
		
	}
	//---------

	//WDEV-17935
	@Override
	protected void onChkAllocateForCleaningValueChanged() throws PresentationLogicException 
	{
		updateDischBedCleaningControlsState();	
	}

}
