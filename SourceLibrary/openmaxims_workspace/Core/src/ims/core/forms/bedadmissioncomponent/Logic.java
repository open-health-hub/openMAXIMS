//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.66 build 3261.22124)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.bedadmissioncomponent;

import ims.RefMan.vo.CATSReferralStatusRefVoCollection;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.ContractConfigShortVo;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.PatientElectiveListBedAdmissionVo;
import ims.RefMan.vo.PatientElectiveListBedAdmissionVoCollection;
import ims.RefMan.vo.PatientElectiveListBedInfoVo;
import ims.RefMan.vo.PatientElectiveListBedInfoVoCollection;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.TCIStatusChangeReason;
import ims.ccosched.vo.TCIForPatientElectiveListBedInfoDetailsVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.vo.AdmissionDetailRefVoCollection;
import ims.core.forms.bedadmissioncomponent.GenForm.CaseFolderYesNoEnumeration;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabBookedContainer.grdElectiveRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabEmergencyContainer.grdEmergencyRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabHomeLeaveContainer.grdHomeLeaveRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabInWaitingContainer.grdInWaitingRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabPlannedContainer.grdTCIRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabTCIContainer.grdTCI_ElectiveRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabWaitingContainer.grdPatientsRow;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.OrganisationRefVo;
import ims.core.vo.AdmissionDetailVo;
import ims.core.vo.AdmissionDetailVoCollection;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateStatusLiteVo;
import ims.core.vo.CareContextStatusHistoryVo;
import ims.core.vo.CareContextStatusHistoryVoCollection;
import ims.core.vo.CareContextVo;
import ims.core.vo.CareContextVoCollection;
import ims.core.vo.CareSpellStatusHistoryVo;
import ims.core.vo.CareSpellStatusHistoryVoCollection;
import ims.core.vo.CareSpellVo;
import ims.core.vo.CatsReferralEmergencyAdmissionVo;
import ims.core.vo.ConsultantStayVo;
import ims.core.vo.EpisodeOfCareStatusHistoryVo;
import ims.core.vo.EpisodeOfCareStatusHistoryVoCollection;
import ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo;
import ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVoCollection;
import ims.core.vo.EpisodeofCareVo;
import ims.core.vo.EpisodeofCareVoCollection;
import ims.core.vo.GpToPracticesVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HomeLeaveVo;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.InpatientEpisodeLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PasEventAdmitVo;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientShortCollection;
import ims.core.vo.PatientWithGPForCCGVo;
import ims.core.vo.PendingElectiveAdmissionAdmitVo;
import ims.core.vo.PendingElectiveAdmissionAdmitVoCollection;
import ims.core.vo.PendingEmergencyAdmissionAdmitVo;
import ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection;
import ims.core.vo.ReferralDetailsEmergencyAdmissionVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.WardStayVo;
import ims.core.vo.enums.AdmissionType;
import ims.core.vo.enums.MOSQueryEvent;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.CareSpelltoEpisodeRelationship;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.core.vo.lookups.EpisodeOfCareStatus;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.MethodOfAdmission;
import ims.core.vo.lookups.PASSpecialty;
import ims.core.vo.lookups.PASSpecialtyCollection;
import ims.core.vo.lookups.PasEventType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PatientStatus;
import ims.core.vo.lookups.ProblemGroupStatus;
import ims.core.vo.lookups.SourceOfAdmission;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.SourceOfReferralCollection;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.exceptions.DTODomainInterfaceException;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.DateTimeFormat;
import ims.framework.utils.Time;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final int TAB_BOOKED = 1;
	private static final int TAB_AE = 2;
	private static final int TAB_PLANNED = 3;
	private static final int TAB_WAITING_AREA_ADMISSION = 4;
	private static final int TAB_AWAITING_BED_WAITING_AREA = 5;
	private static final int TAB_RETURN_FROM_LEAVE = 6;
	private static final int TAB_TCI = 7;
	
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.ccConsultant().initialize(MosType.MEDIC);
		form.ccConsultant().isRequired(true);
		
		//WDEV-12587
		bindCmbSourceOfReferralLookup();
		form.ccReferringConsultant().initialize(MosType.MEDIC);
		
		enableInstanceControls(false);
		
		//WDEV-10696 - hide A&E Tabs 
		if(!ConfigFlag.UI.DISPLAY_ANE_BEDMANAGEMENT.getValue())
		{
			form.lyrAdmission().tabEmergency().setVisible(false);
			form.lyrAdmission().tabEmergency().setHeaderVisible(false);
		}
		
		//WDEV-12968 Default Id Type to config type 
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		form.lyrAdmission().tabWaiting().cmbIdType().setValue(dispIdType);			
	}
	

	
	public Boolean hasPatientElectiveListToCancel()
	{
		if (form.lyrAdmission().tabTCI().grdTCI_Elective().getValue() == null)
			return false;

		if (!Specialty.EMERGENCY.equals(form.cmbSpecialty().getValue()))
			return false;
		
		PatientElectiveListBedAdmissionVo electiveList = form.getLocalContext().getTCIElectiveAdmission();
		if (electiveList == null)
			return false;
		
		return domain.hasPatientElectiveListToCancel(electiveList.getPatient(), electiveList, electiveList.getElectiveList().getService());
	}


	public Boolean isOnEmergency()
	{
		return form.lyrAdmission().tabWaiting().isVisible();
	}

	public Boolean isOnTCITab()
	{
		return form.lyrAdmission().tabTCI().isVisible();
	}

	private void hideTabs()
	{
		boolean hasHomeLeaves = false;//	WDEV-14563
		
		BedSpaceStateLiteVo voBed = form.getGlobalContext().Core.getSelectedBedSpaceState();//	WDEV-14563
		if(voBed != null)//	WDEV-14563
		{		
			hasHomeLeaves = domain.hasHomeLeavesByWard(voBed.getWard());
		}
		
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue()=="WST" || !hasHomeLeaves)//	WDEV-14563
		{
			form.lyrAdmission().tabHomeLeave().setVisible(false);
			form.lyrAdmission().tabHomeLeave().setHeaderVisible(false);			
		}	
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		
	}
	
	protected void onFormModeChanged()
	{
		
	}
	
	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{		
		clearPlannedTabDetails(true);
	}

	private void clearPlannedTabDetails(boolean clearSearchCriteria) 
	{
		form.getLocalContext().setRecordSelected(false);
		
		form.lyrAdmission().tabPlanned().grdTCI().getRows().clear();
		
		if (clearSearchCriteria)
		{
			form.lyrAdmission().tabPlanned().dteFrom().setValue(null);
			form.lyrAdmission().tabPlanned().dteTo().setValue(null);
			form.lyrAdmission().tabPlanned().chkTodayOnly().setValue(false);
			
			enableDateSearch(true);
		}

		clearScreen();			
		enableInstanceControls(false);
		
		form.fireCustomControlValueChanged();
		
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		search();
	}

	private void search() 
	{
		form.getLocalContext().setRecordSelected(false);//WDEV-16265
		clearScreen();//WDEV-16265
		enableInstanceControls(false);//WDEV-16265
		
		searchPlanned();	
	}

	private void searchPlanned()
	{
		if(validatePlannedSearchCriteria())
		{
			form.lyrAdmission().tabPlanned().grdTCI().getRows().clear();
			
			PendingElectiveAdmissionAdmitVoCollection voCollPlanned = null;
			BedSpaceStateLiteVo voBed = form.getGlobalContext().Core.getSelectedBedSpaceState();
			if(voBed != null)
				voCollPlanned = domain.listPlannedElectiveAdmission(form.lyrAdmission().tabPlanned().dteFrom().getValue(), form.lyrAdmission().tabPlanned().dteTo().getValue(), voBed.getWard());
			else
				throw new CodingRuntimeException("Ward has not been set for bed in configuration");
			
			if(voCollPlanned == null || voCollPlanned.size() == 0)
			{
				engine.showMessage("No records found.");	//wdev-11257
				return;
			}
			
			for (PendingElectiveAdmissionAdmitVo voPlannedAdmission : voCollPlanned)
			{
				grdTCIRow row = form.lyrAdmission().tabPlanned().grdTCI().getRows().newRow();
				
				PatientShort voPatient = (voPlannedAdmission.getPasEventIsNotNull() && voPlannedAdmission.getPasEvent().getPatientIsNotNull()) ? voPlannedAdmission.getPasEvent().getPatient() : null;
				if(voPatient != null)
				{
					if(voPatient.getNameIsNotNull())
					{
						row.setColForename(voPatient.getName().getForename());
						row.setColSurname(voPatient.getName().getSurname());
					}
					
					PatientId patId = voPatient.getDisplayId();
					row.setColDisplayId(patId != null ? patId.getValue() : null);
					row.setColSex(voPatient.getSexIsNotNull() ? voPatient.getSex().toString() : null);
					
					Integer age = voPatient.calculateAge();
					if(age != null)
						row.setColAge(String.valueOf(age));
					
					row.setColDob(voPatient.getDobIsNotNull() ? voPatient.getDob().toString() : null);
					
					if(voPatient.getAssociatedPatientIsNotNull())		//wdev-13105
						row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
					
					if(voPatient.getDodIsNotNull())					//wdev-13105
						row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());
				}
				row.setValue(voPlannedAdmission);
			}
		}
	}

	private boolean validatePlannedSearchCriteria()
	{
		List<String> errors = new ArrayList<String>();
	
		if(form.lyrAdmission().tabPlanned().dteFrom().getValue() == null)
			errors.add("'From' Date is mandatory");
			
		if(form.lyrAdmission().tabPlanned().dteTo().getValue() == null)
			errors.add("'To' Date is mandatory");
		
		if(form.lyrAdmission().tabPlanned().dteFrom().getValue() != null && form.lyrAdmission().tabPlanned().dteTo().getValue() != null)
		{
			if(form.lyrAdmission().tabPlanned().dteFrom().getValue().isGreaterThan(form.lyrAdmission().tabPlanned().dteTo().getValue()))
				errors.add("'To' Date cannot be before 'From' Date");
		}
		
		
		String[] strErrors = errors.toArray(new String[0]);
		if(strErrors != null && strErrors.length > 0)
		{
			engine.showErrors(strErrors);
			return false;
		}
		
		return true;
	}

	@Override
	protected void onImbClearWaitClick() throws PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(false);
		form.getLocalContext().setAdmissionDetail(null);
		
		form.lyrAdmission().tabWaiting().cmbIdType().setValue(null);
		form.lyrAdmission().tabWaiting().txtIdValue().setValue(null);
		form.lyrAdmission().tabWaiting().txtForename().setValue(null);
		form.lyrAdmission().tabWaiting().txtSurname().setValue(null);
		
		form.lyrAdmission().tabWaiting().grdPatients().getRows().clear();
		clearScreen();
		
		enableInstanceControls(false);
		
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onImbSearchWaitClick() throws PresentationLogicException
	{
		searchWaiting();
	}

	private void searchWaiting()
	{
		if(validateWaitingSearchCriteria())
		{
			PatientFilter voPatFilter = new PatientFilter();
			if (form.lyrAdmission().tabWaiting().txtIdValue().getValue() != null && form.lyrAdmission().tabWaiting().txtIdValue().getValue().length() > 0)
			{
				PatientId pid = new PatientId();
				pid.setType(form.lyrAdmission().tabWaiting().cmbIdType().getValue());	
				pid.setValue(form.lyrAdmission().tabWaiting().txtIdValue().getValue());			
				voPatFilter.setPersId(pid);
				//wdev-11258
				form.lyrAdmission().tabWaiting().txtForename().setValue("");
				form.lyrAdmission().tabWaiting().txtSurname().setValue("");
				//------------
			}
			else
			{
				voPatFilter.setForename(form.lyrAdmission().tabWaiting().txtForename().getValue());
				voPatFilter.setSurname(form.lyrAdmission().tabWaiting().txtSurname().getValue());
			}
			
			//WDEV-17167
			voPatFilter.setExcludeQuickRegistrationPatients(Boolean.TRUE);
			
			form.lyrAdmission().tabWaiting().grdPatients().getRows().clear();
			PatientShortCollection voCollPatients = null;
			try
			{
				voCollPatients = domain.searchPatients(voPatFilter);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			
			if(voCollPatients == null || voCollPatients.size() == 0)
			{
				engine.showMessage("No matching records found");
				return;
			}
			for (PatientShort voPatient : voCollPatients)
			{
				grdPatientsRow row = form.lyrAdmission().tabWaiting().grdPatients().getRows().newRow();
	
				if(voPatient.getNameIsNotNull())
				{
					row.setColForename(voPatient.getName().getForename());
					row.setColSurname(voPatient.getName().getSurname());
				}
				
				PatientId patId = voPatient.getDisplayId();
				row.setColDisplayId(patId != null ? patId.getValue() : null);
				row.setColSex(voPatient.getSexIsNotNull() ? voPatient.getSex().toString() : null);
			
				Integer age = voPatient.calculateAge();
				if(age != null)
					row.setColAge(String.valueOf(age));
				
				row.setColDob(voPatient.getDobIsNotNull() ? voPatient.getDob().toString() : null);
				
				//WDEV-8000
				if(voPatient.getAssociatedPatientIsNotNull())
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
					
				if(voPatient.getDodIsNotNull())
					row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());		
						
				row.setValue(voPatient);	
			}	
		}
	}

	private boolean validateWaitingSearchCriteria()
	{
		List<String> errors = new ArrayList<String>();
	
		if (form.lyrAdmission().tabWaiting().txtIdValue().getValue() != null && form.lyrAdmission().tabWaiting().txtIdValue().getValue().length() > 0)
		{
			if (form.lyrAdmission().tabWaiting().cmbIdType().getValue() == null)
			{
				errors.add("Please select an ID Type");
				form.lyrAdmission().tabWaiting().cmbIdType().setFocus();
			}
		}
		else
		{
			if(form.lyrAdmission().tabWaiting().txtSurname().getValue() == null)
				errors.add("Surname is mandatory");
			if(form.lyrAdmission().tabWaiting().txtForename().getValue() == null)
				errors.add("Forename is mandatory");
		}
		
		String[] strErrors = errors.toArray(new String[0]);
		if(strErrors != null && strErrors.length > 0)
		{
			engine.showErrors(strErrors);
			return false;
		}
		
		return true;
	}

	@Override
	protected void onGrdPatientsSelectionChanged() throws PresentationLogicException
	{
		//WDEV-10964  for DTO (specifically CCO) implementation - may need to replicate here as searching off DTO
		if(replicatePatient())
		{
			//WDEV-10998
			form.getLocalContext().setRecordSelected(true);
			enableInstanceControls(true);
			populateScreenFromPatientSelected(form.lyrAdmission().tabWaiting().grdPatients().getValue());
			form.fireCustomControlValueChanged();
		}	
	}

	private boolean replicatePatient() 
	{
		if(form.lyrAdmission().tabWaiting().grdPatients().getValue() != null && form.lyrAdmission().tabWaiting().grdPatients().getValue().getID_Patient() == null)
		{
			try 
			{
				form.lyrAdmission().tabWaiting().grdPatients().getSelectedRow().setValue(domain.getPatient(form.lyrAdmission().tabWaiting().grdPatients().getValue()));
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			return true;
		}
		else 
			return true;
	}

	private void populateScreenFromPatientSelected(PatientShort voPatient)
	{
		clearScreen();
		
		if(voPatient == null)
			return;
		
		if(form.getGlobalContext().Core.getADTWardIsNotNull())
		{
			form.cmbWard().newRow(form.getGlobalContext().Core.getADTWard(), form.getGlobalContext().Core.getADTWard().toString());
			form.cmbWard().setValue(form.getGlobalContext().Core.getADTWard());			
		}
		
		//WDEV-10076
		form.cmbMethod().setValue(null);
		form.dtimAdmit().setValue(new DateTime());
		form.dteEstDischarge().setValue(new Date()); 	
		form.chkChaplain().setValue(false);
		
		form.cmbPatientStatus().setValue(PatientStatus.NHS);

		loadEpisodes();
		
	}

	private void loadEpisodes()
	{
		//WDEV-13001
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
		{
			PatientRefVo voPat = getSelectedPatient();
			if(voPat != null)
			{
				EpisodeOfCareWithPrimaryDiagnosisVoCollection voCollEpisodes = domain.listOpenEpisodesForPatient(getSelectedPatient());
				if(voCollEpisodes != null)
				{
					for(EpisodeOfCareWithPrimaryDiagnosisVo voEpis : voCollEpisodes)
						form.cmbEpisode().newRow(voEpis, voEpis.toString());
					
					// WDEV-16054  If only one episode, set this as the value in the combo
					if (voCollEpisodes.size() == 1)
						form.cmbEpisode().setValue(voCollEpisodes.get(0));
				}
			}
		}
	}

	@Override
	protected void onGrdInWaitingSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		populateScreenFromInWaitingSelected();
		
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
			form.cmbEpisode().setEnabled(true);
		
		form.fireCustomControlValueChanged();
	}

	private void populateScreenFromInWaitingSelected()
	{
		form.getLocalContext().setAdmissionDetail(null);
		clearScreen();
		if(form.lyrAdmission().tabInWaiting().grdInWaiting().getValue() == null)
			return;
		
		InpatientEpisodeLiteVo voInWaiting = form.lyrAdmission().tabInWaiting().grdInWaiting().getValue();
		AdmissionDetailVo voAdmission = domain.getAdmissionDetailByPasEvent(voInWaiting.getPasEvent());
		if(voAdmission == null)
			return;
		
		form.cmbWard().newRow(form.getGlobalContext().Core.getADTWard(), form.getGlobalContext().Core.getADTWard().toString());
		form.cmbWard().setValue(form.getGlobalContext().Core.getADTWard());

		if(voAdmission.getPasEventIsNotNull())
		{
			form.ccConsultant().setValue(voAdmission.getPasEvent().getConsultant());
			listSpecialtiesForConsultant();
			
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				if(voAdmission.getPasEvent().getPASSpecialtyIsNotNull())
				{
					if(!form.cmbCCOSpecialty().getValues().contains(voAdmission.getPasEvent().getPASSpecialty()))
						form.cmbCCOSpecialty().newRow(voAdmission.getPasEvent().getPASSpecialty(), voAdmission.getPasEvent().getPASSpecialty().getText());
				}
					
				form.cmbCCOSpecialty().setValue(voAdmission.getPasEvent().getPASSpecialty());
			}
			//if conspc call did not find specialty (conspc mapping was removed) add it as a value anyway
			if(voAdmission.getPasEvent().getSpecialtyIsNotNull())
			{
				if(!form.cmbSpecialty().getValues().contains(voAdmission.getPasEvent().getSpecialty()))
					form.cmbSpecialty().newRow(voAdmission.getPasEvent().getSpecialty(), voAdmission.getPasEvent().getSpecialty().getText());
			}
				
			form.cmbSpecialty().setValue(voAdmission.getPasEvent().getSpecialty());
		}

		form.cmbWardType().setValue(voAdmission.getWardType()); 
		form.cmbMethod().setValue(voAdmission.getMethodOfAdmission()); 
		form.cmbSource().setValue(voAdmission.getSourceOfAdmission());
		form.dtimAdmit().setValue(voAdmission.getAdmissionDateTime());
		form.dteEstDischarge().setValue(voAdmission.getEstDischargeDate());
													
		form.chkChaplain().setValue(voAdmission.getIsChaplainRequired());
		form.txtReason().setValue(voAdmission.getReasonForAdmission());
		
		form.getLocalContext().setAdmissionDetail(voAdmission);
	}

	
	private PatientElectiveListBedAdmissionVo populateDataFromScreenTCIElectiveAdmission(PatientElectiveListBedAdmissionVo electiveAdmission)
	{
		if (electiveAdmission == null)
			throw new CodingRuntimeException("Invalid PatientElectiveList record!");
		
		HcpLiteVo admissionConsultant = domain.getHcpFromIMos(form.ccConsultant().getValue()); //WDEV-18583 
		// Fill in data into PatientElectiveList record
		electiveAdmission.setWard(form.cmbWard().getValue());
		electiveAdmission.setConsultant(admissionConsultant); // WDEV-18583 
//		electiveAdmission.setPatientStatus(form.cmbPatientStatus().getValue());
		electiveAdmission.setAnticipatedStay(form.intAntStay().getValue());
		
		// Update the status to PatientElectiveList record
		ElectiveListStatusVo admitStatus = new ElectiveListStatusVo(); 
		admitStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
		admitStatus.setStatusDateTime(new DateTime());
		admitStatus.setElectiveListStatus(WaitingListStatus.ADMITTED);

		electiveAdmission.setElectiveListStatus(admitStatus);
		electiveAdmission.getElectiveListStatusHistory().add(admitStatus);

		
		// Fill in data into PatientElectiveList.TCIDetails record
		TCIForPatientElectiveListBedInfoDetailsVo tciDetails = electiveAdmission.getTCIDetails();
		
		// Safety check - but should be unnecessary
		if (tciDetails == null)
		{
			tciDetails = new TCIForPatientElectiveListBedInfoDetailsVo();
			electiveAdmission.setTCIDetails(tciDetails);
		}
		
		tciDetails.setTCIWard(form.cmbWard().getValue());
		// Bed number - to be taken from global context 
		BedSpaceStateLiteVo bedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if (bedSpaceState != null && bedSpaceState.getBedSpace() != null)
			tciDetails.setTCIBed(bedSpaceState.getBedSpace().getBedNumber());
		tciDetails.setTCIConsultant(admissionConsultant); // WDEV-18583 
		
		if (form.dtimAdmit().getValue() != null)
		{
			tciDetails.setTCIDate(form.dtimAdmit().getValue().getDate());
			tciDetails.setTCITime(form.dtimAdmit().getValue().getTime());
		}
		else
		{
			tciDetails.setTCIDate(null);
			tciDetails.setTCITime(null);
		}
		
		// Update the outcome for PatientElectiveList.TCIDetails record
		TCIOutcomeForPatientElectiveListVo outcomeTCI = new TCIOutcomeForPatientElectiveListVo();
		
		if (ElectiveListReason.DIAGNOSTIC.equals(electiveAdmission.getElectiveListReason()))
			outcomeTCI.setOutcome(AdmissionOfferOutcome.PATIENT_ADMITTED);
		else
			outcomeTCI.setOutcome(AdmissionOfferOutcome.PATIENT_ADMITTED_COMMENCED_8);
		
		outcomeTCI.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
		outcomeTCI.setStatusDateTime(new DateTime());
		outcomeTCI.setOutcomeReason(null);
		tciDetails.setCurrentOutcome(outcomeTCI);
		tciDetails.getOutcomeHistory().add(outcomeTCI);
		tciDetails.setIsActive(false);//wdev-18248 RF
		
		// WDEV-18598 - Update the Appointment status
		BookingAppointmentTheatreVo appointment = tciDetails.getAppointment();
		if (appointment != null)
		{
			appointment.setApptStatus(Status_Reason.ADMITTED);
			
			Appointment_StatusVo appointmentStatus = new Appointment_StatusVo();
			appointmentStatus.setStatus(Status_Reason.ADMITTED);
			appointmentStatus.setStatusChangeDateTime(form.dtimAdmit().getValue());
			
			appointment.setCurrentStatusRecord(appointmentStatus);
			
			if (appointment.getApptStatusHistory() == null)
				appointment.setApptStatusHistory(new Appointment_StatusVoCollection());
			appointment.getApptStatusHistory().add(appointmentStatus);
		}

		// Fill in data into PatientElectiveList.TCIDetails.AdmissionDetail record - create a new one if needed
		AdmissionDetailVo admissionDetails = tciDetails.getAdmissionDetail();
		if (admissionDetails == null)
		{
			admissionDetails = new AdmissionDetailVo();

			PasEventAdmitVo pasEvent = electiveAdmission.getReferral().getCareContext().getPasEvent();
			if (pasEvent == null)
			{
				pasEvent = new PasEventAdmitVo();
				electiveAdmission.getReferral().getCareContext().setPasEvent(pasEvent);
			}
			
			if (form.ccConsultant().getValue() != null)
				pasEvent.setConsultant(domain.getMedic(new HcpRefVo(form.ccConsultant().getValue().getIMosHcpId(), 0)));
			else
				pasEvent.setConsultant(null);
			
			pasEvent.setEventDateTime(form.dtimAdmit().getValue());
			pasEvent.setEventType(PasEventType.TCI);
			pasEvent.setLocation(form.cmbWard().getValue());
			PatientShort patientShort = domain.getPatientShort(electiveAdmission.getPatient());
			patientShort.setWard(form.cmbWard().getValue());
			pasEvent.setPatient(patientShort);
			pasEvent.setSpecialty(form.cmbSpecialty().getValue());
			pasEvent.setPasEventId(electiveAdmission.getPatient().getID_Patient().toString() + pasEvent.getEventDateTime().toString(DateTimeFormat.ISO));
			pasEvent.setSourceOfReferral(form.cmbSourceOfReferral().getValue());
			
			admissionDetails.setPasEvent(pasEvent);
			tciDetails.setAdmissionDetail(admissionDetails);
			if (appointment != null)
				appointment.setPASEvent(pasEvent);
		}
		
		if (electiveAdmission.getReferral().getAdmissions() == null)
			electiveAdmission.getReferral().setAdmissions(new AdmissionDetailRefVoCollection());
		electiveAdmission.getReferral().getAdmissions().add(admissionDetails);
		
		
		// WDEV-18304  WDEV-18686 - code moved to impl 
//		if (!ElectiveListReason.DIAGNOSTIC.equals(electiveAdmission.getElectiveListReason()))
//		{
//			if (electiveAdmission.getPathwayClock() != null)
//				electiveAdmission.getPathwayClock().setStopDate(form.dtimAdmit().getValue() != null ? form.dtimAdmit().getValue().getDate() : null);
//		}
		
		admissionDetails.setAdmissionDateTime(form.dtimAdmit().getValue());
		admissionDetails.setWard(form.cmbWard().getValue());
		if (form.getGlobalContext().Core.getSelectedBedSpaceState() != null)
			admissionDetails.setBed(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace());

		if (form.ccConsultant().getValue() != null)
			admissionDetails.setConsultant(domain.getMedic(new HcpRefVo(form.ccConsultant().getValue().getIMosHcpId(), 0)));
		else
			admissionDetails.setConsultant(null);

		admissionDetails.setSpecialty(form.cmbSpecialty().getValue());
		admissionDetails.setWardType(form.cmbWardType().getValue());
		admissionDetails.setMethodOfAdmission(form.cmbMethod().getValue());
		admissionDetails.setSourceOfAdmission(form.cmbSource().getValue());
		admissionDetails.setReasonForAdmission(form.txtReason().getValue());
		admissionDetails.setEstDischargeDate(form.dteEstDischarge().getValue());
		admissionDetails.setIsChaplainRequired(form.chkChaplain().getValue());
		admissionDetails.setReferringConsultant(form.ccReferringConsultant().getValue());
		admissionDetails.setPatientStatus(form.cmbPatientStatus().getValue());
		admissionDetails.setAnticipatedStay(form.intAntStay().getValue());

		return electiveAdmission;
	}


	
	@Override
	protected AdmissionDetailVo populateDataFromScreen(AdmissionDetailVo voAdmDetail) 
	{
		//for Inwaiting tab retrieve admissiondetail from localcontext and use instead of new
		voAdmDetail =  super.populateDataFromScreen(voAdmDetail);	
		voAdmDetail.setConsultant(form.ccConsultant().getValue());
		
		//WDEV-12957
		voAdmDetail.setUpdateCFL(form.CaseFolderYesNo().getValue() != null && form.CaseFolderYesNo().getValue().equals(CaseFolderYesNoEnumeration.rdoYes));
		
		if(form.lyrAdmission().tabBooked().isVisible())
		{
			if(form.lyrAdmission().tabBooked().grdElective().getValue() != null)
				voAdmDetail.setPasEvent(form.lyrAdmission().tabBooked().grdElective().getValue().getPasEvent());
			
			//WDEV-12930
			if(voAdmDetail.getPasEventIsNotNull())
				voAdmDetail.getPasEvent().setSourceOfReferral(form.cmbSourceOfReferral().getValue());
			
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				voAdmDetail.getPasEvent().setPASSpecialty(form.cmbCCOSpecialty().getValue());
				voAdmDetail.getPasEvent().setSpecialty(domain.getCCOSpecialtyMappingFromPASSpecialty(form.cmbCCOSpecialty().getValue()));
				voAdmDetail.setSpecialty(voAdmDetail.getPasEvent().getSpecialty());
			}
			else
				voAdmDetail.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());
			
			voAdmDetail.setPatientStatus(form.cmbPatientStatus().getValue());
			if (form.ccReferringConsultant().getValue() != null)
				voAdmDetail.setReferringConsultant(form.ccReferringConsultant().getValue());
		}
		else if(form.lyrAdmission().tabEmergency().isVisible())
		{
			if(form.lyrAdmission().tabEmergency().grdEmergency().getValue() != null)
				voAdmDetail.setPasEvent(form.lyrAdmission().tabEmergency().grdEmergency().getValue().getPasEvent());

			//WDEV-12930
			if(voAdmDetail.getPasEventIsNotNull())
				voAdmDetail.getPasEvent().setSourceOfReferral(form.cmbSourceOfReferral().getValue());
			
			voAdmDetail.setPatientStatus(form.cmbPatientStatus().getValue());
		}
		else if(form.lyrAdmission().tabPlanned().isVisible())
		{
			if(form.lyrAdmission().tabPlanned().grdTCI().getValue() != null)
				voAdmDetail.setPasEvent(form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEvent());
			
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				voAdmDetail.getPasEvent().setPASSpecialty(form.cmbCCOSpecialty().getValue());
				voAdmDetail.getPasEvent().setSpecialty(domain.getCCOSpecialtyMappingFromPASSpecialty(form.cmbCCOSpecialty().getValue()));
				voAdmDetail.setSpecialty(voAdmDetail.getPasEvent().getSpecialty());
			}
			else
				voAdmDetail.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());

			//WDEV-12930
			if(voAdmDetail.getPasEventIsNotNull())
				voAdmDetail.getPasEvent().setSourceOfReferral(form.cmbSourceOfReferral().getValue());
			
			voAdmDetail.setPatientStatus(form.cmbPatientStatus().getValue());
			if (form.ccReferringConsultant().getValue() != null)
				voAdmDetail.setReferringConsultant(form.ccReferringConsultant().getValue());
			
		}
		else if(form.lyrAdmission().tabWaiting().isVisible())
		{
			if(form.lyrAdmission().tabWaiting().grdPatients().getValue() != null)
			{
				//WDEV-7676  create new PasEvent
				voAdmDetail.setPasEvent(new PasEventAdmitVo());
				voAdmDetail.getPasEvent().setConsultant(form.ccConsultant().getValue());
				voAdmDetail.getPasEvent().setEventDateTime(form.dtimAdmit().getValue());
				voAdmDetail.getPasEvent().setEventType(PasEventType.INPATIENT);
				voAdmDetail.getPasEvent().setLocation(form.cmbWard().getValue());
				voAdmDetail.getPasEvent().setPatient(form.lyrAdmission().tabWaiting().grdPatients().getValue());
				
				if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
				{
					voAdmDetail.getPasEvent().setPASSpecialty(form.cmbCCOSpecialty().getValue());
					voAdmDetail.getPasEvent().setSpecialty(domain.getCCOSpecialtyMappingFromPASSpecialty(form.cmbCCOSpecialty().getValue()));
					voAdmDetail.setSpecialty(voAdmDetail.getPasEvent().getSpecialty());
				}
				else
					voAdmDetail.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());
				
				//patient id will be null if the ConfigFlag - PatientSearchType is set to DTO
				if(voAdmDetail.getPasEvent().getEventDateTimeIsNotNull() && form.lyrAdmission().tabWaiting().grdPatients().getValue().getID_PatientIsNotNull())
					voAdmDetail.getPasEvent().setPasEventId(form.lyrAdmission().tabWaiting().grdPatients().getValue().getID_Patient().toString() + voAdmDetail.getPasEvent().getEventDateTime().toString(DateTimeFormat.ISO));
				
				voAdmDetail.getPasEvent().setSourceOfReferral(form.cmbSourceOfReferral().getValue());

				voAdmDetail.setPatientStatus(form.cmbPatientStatus().getValue());
				
				//WDEV-12587
				if (form.ccReferringConsultant().getValue() != null)
					voAdmDetail.setReferringConsultant(form.ccReferringConsultant().getValue());
			}
		}
		
		return voAdmDetail;
	}
	
	@Override
	protected void onGrdElectiveSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		enableInstanceControls(true);
		populateScreenFromPendingAdmissionData(form.lyrAdmission().tabBooked().grdElective().getValue(), true);
		form.fireCustomControlValueChanged();
	}
	
	private void populateScreenFromElectiveAdmissionData(PatientElectiveListBedAdmissionVo patientElectiveList, boolean isBooked)
	{
		form.getLocalContext().setAdmissionDetail(null);
		clearScreen();
		showExtraUIControls_ElectiveList();
		
		if (patientElectiveList == null)
			return;
		
		if (patientElectiveList.getTCIDetails() != null 
			&& patientElectiveList.getTCIDetails().getTCIWardIsNotNull())
		{
			form.cmbWard().newRow(patientElectiveList.getTCIDetails().getTCIWard(), patientElectiveList.getTCIDetails().getTCIWard().getName());
			form.cmbWard().setValue(patientElectiveList.getTCIDetails().getTCIWard());
		}
		
		form.cmbWardType().setValue(null);
		
		form.ccConsultant().setValue(patientElectiveList.getConsultant());
		
		if (patientElectiveList.getElectiveList() != null && patientElectiveList.getElectiveList().getService() != null && patientElectiveList.getElectiveList().getService().getSpecialty() != null)
		{
			form.cmbSpecialty().newRow(patientElectiveList.getElectiveList().getService().getSpecialty(), patientElectiveList.getElectiveList().getService().getSpecialty().getText());
			form.cmbSpecialty().setValue(patientElectiveList.getElectiveList().getService().getSpecialty());
		}
		
		form.cmbMethod().setValue(MethodOfAdmission.BOOKED);
		form.cmbSource().setValue(null);
//		form.cmbPatientStatus().setValue(patientElectiveList.getPatientStatus());
		
		if (patientElectiveList.getTCIDetails() != null)
		{
			if (patientElectiveList.getTCIDetails().getTCITime() != null)
				form.dtimAdmit().setValue(new DateTime(patientElectiveList.getTCIDetails().getTCIDate(), patientElectiveList.getTCIDetails().getTCITime()));
			else
				form.dtimAdmit().setValue(new DateTime(patientElectiveList.getTCIDetails().getTCIDate(), new Time(0, 0, 0)));

			form.intAntStay().setValue(patientElectiveList.getAnticipatedStay());
			form.dteEstDischarge().setValue(calculateEstimateDischarge(patientElectiveList.getTCIDetails().getTCIDate(), patientElectiveList.getAnticipatedStay()));
			form.txtReason().setValue(patientElectiveList.getTCIDetails().getBedManagerComment());
		}
		
		form.cmbSourceOfReferral().setValue(null);
		form.ccReferringConsultant().setValue(null);
	}

	private Date calculateEstimateDischarge(Date tciDate, Integer anticipatedStay)
	{
		Date estimatedDischarge = new Date(tciDate);
		
		if (anticipatedStay != null)
			estimatedDischarge.addDay(anticipatedStay);

		return estimatedDischarge;
	}

	private void populateScreenFromPendingAdmissionData(PendingElectiveAdmissionAdmitVo voPendingAdmission, boolean isBooked) 
	{
		form.getLocalContext().setAdmissionDetail(null);
		
		clearScreen();
		if(voPendingAdmission == null)
			return;
		
		BedSpaceStateLiteVo voBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if(voBedSpaceState != null)
		{
			if(voBedSpaceState.getWardIsNotNull())
			{
				form.cmbWard().newRow(voBedSpaceState.getWard(), voBedSpaceState.getWard().toString());
				form.cmbWard().setValue(voBedSpaceState.getWard());
			}
			
			if(voBedSpaceState.getBedSpaceIsNotNull())
				form.cmbWardType().setValue(voBedSpaceState.getBedSpace().getWardType());
		}

		if(voPendingAdmission.getPasEventIsNotNull())
		{
			form.ccConsultant().setValue(voPendingAdmission.getPasEvent().getConsultant());
			listSpecialtiesForConsultant();
			
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				if(voPendingAdmission.getPasEvent().getPASSpecialtyIsNotNull())
				{
					if(!form.cmbCCOSpecialty().getValues().contains(voPendingAdmission.getPasEvent().getPASSpecialty()))
						form.cmbCCOSpecialty().newRow(voPendingAdmission.getPasEvent().getPASSpecialty(), voPendingAdmission.getPasEvent().getPASSpecialty().getText());
				}
					
				form.cmbCCOSpecialty().setValue(voPendingAdmission.getPasEvent().getPASSpecialty());
			}

			//if conspc call did not find specialty (conspc mapping was removed) add it as a value anyway
			if(voPendingAdmission.getPasEvent().getSpecialtyIsNotNull())
			{
				if(!form.cmbSpecialty().getValues().contains(voPendingAdmission.getPasEvent().getSpecialty()))
					form.cmbSpecialty().newRow(voPendingAdmission.getPasEvent().getSpecialty(), voPendingAdmission.getPasEvent().getSpecialty().getText());
			}
			
			form.cmbSpecialty().setValue(voPendingAdmission.getPasEvent().getSpecialty());
		
			//wdev-13472
			form.cmbSourceOfReferral().setValue(voPendingAdmission.getPasEvent().getSourceOfReferral());
			showExtraUIControls();
			enableInstanceControls(true);
		}

		if(form.cmbSourceOfReferral().getValue() != null && form.cmbSourceOfReferral().getValue().equals(SourceOfReferral.CONSULTANT))
			form.ccReferringConsultant().setValue(voPendingAdmission.getReferringConsultant());

		//set defaults from spec
		form.cmbMethod().setValue(isBooked ? MethodOfAdmission.BOOKED : MethodOfAdmission.PLANNED); 
		form.cmbSource().setValue(SourceOfAdmission.HOMEADDRESS);
		
		//WDEV-8444 - override defaults with those populated from booked or planned lists
		if(voPendingAdmission.getAdmissionSourceIsNotNull())
			form.cmbSource().setValue(voPendingAdmission.getAdmissionSource());
		if(voPendingAdmission.getAdmissionMethodIsNotNull())
			form.cmbMethod().setValue(voPendingAdmission.getAdmissionMethod());
		
		form.cmbPatientStatus().setValue(voPendingAdmission.getPatientStatus());
		
		form.dtimAdmit().setValue(new DateTime());
		
		//WDEV-8003
		Date estDischargeDate = null;
		if(voPendingAdmission.getExpectedStayIsNotNull())
		{
			if(voPendingAdmission.getTCIDateIsNotNull())
			{
				estDischargeDate = ((Date)voPendingAdmission.getTCIDate().clone()).addDay(voPendingAdmission.getExpectedStay());
			}
		}
		form.dteEstDischarge().setValue(estDischargeDate); 
		form.intAntStay().setValue(voPendingAdmission.getExpectedStay());//wdev-13472 
		form.txtReason().setValue(voPendingAdmission.getReasonForAdmission());
		
		form.chkChaplain().setValue(false);
		
		loadEpisodes();
	}
	
	@Override
	protected void onGrdEmergencySelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		enableInstanceControls(true);
		populateScreenFromEmergencyData(form.lyrAdmission().tabEmergency().grdEmergency().getValue());
		form.fireCustomControlValueChanged();
	}
	
	private void populateScreenFromEmergencyData(PendingEmergencyAdmissionAdmitVo voPendingEmergencyAdmissionAdmit) 
	{
		clearScreen();
		if(voPendingEmergencyAdmissionAdmit == null)
			return;
		
		BedSpaceStateLiteVo voBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if(voBedSpaceState != null)
		{
			if(voBedSpaceState.getWardIsNotNull())
			{
				form.cmbWard().newRow(voBedSpaceState.getWard(), voBedSpaceState.getWard().toString());
				form.cmbWard().setValue(voBedSpaceState.getWard());
			}
			
			if(voBedSpaceState.getBedSpaceIsNotNull())
				form.cmbWardType().setValue(voBedSpaceState.getBedSpace().getWardType());
		}

		if(voPendingEmergencyAdmissionAdmit.getPasEventIsNotNull())
		{
			form.ccConsultant().setValue(voPendingEmergencyAdmissionAdmit.getPasEvent().getConsultant());
			listSpecialtiesForConsultant();
			
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				if(voPendingEmergencyAdmissionAdmit.getPasEvent().getPASSpecialtyIsNotNull())
				{
					if(!form.cmbCCOSpecialty().getValues().contains(voPendingEmergencyAdmissionAdmit.getPasEvent().getPASSpecialty()))
						form.cmbCCOSpecialty().newRow(voPendingEmergencyAdmissionAdmit.getPasEvent().getPASSpecialty(), voPendingEmergencyAdmissionAdmit.getPasEvent().getPASSpecialty().getText());
				}
					
				form.cmbCCOSpecialty().setValue(voPendingEmergencyAdmissionAdmit.getPasEvent().getPASSpecialty());
			}
			//if conspc call did not find specialty (conspc mapping was removed) add it as a value anyway
			if(voPendingEmergencyAdmissionAdmit.getPasEvent().getSpecialtyIsNotNull())
			{
				if(!form.cmbSpecialty().getValues().contains(voPendingEmergencyAdmissionAdmit.getPasEvent().getSpecialty()))
					form.cmbSpecialty().newRow(voPendingEmergencyAdmissionAdmit.getPasEvent().getSpecialty(), voPendingEmergencyAdmissionAdmit.getPasEvent().getSpecialty().getText());
			}
			
			form.cmbSpecialty().setValue(voPendingEmergencyAdmissionAdmit.getPasEvent().getSpecialty());
		}

		//WDEV-10076
		form.cmbMethod().setValue(null);
		form.cmbSource().setValue(SourceOfAdmission.HOMEADDRESS);
		form.dtimAdmit().setValue(new DateTime());

		form.chkChaplain().setValue(false);
		
		loadEpisodes();
	}

	@Override
	protected void onGrdTCISelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		enableInstanceControls(true);
		populateScreenFromPendingAdmissionData(form.lyrAdmission().tabPlanned().grdTCI().getValue(), false);
		form.fireCustomControlValueChanged();
	}
	
	protected void onGrdTCI_ElectiveSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		enableInstanceControls(true);
		form.getLocalContext().setTCIElectiveAdmission(domain.getPatientElectiveAdmission(form.lyrAdmission().tabTCI().grdTCI_Elective().getValue()));
		populateScreenFromElectiveAdmissionData(form.getLocalContext().getTCIElectiveAdmission(), false);
		form.fireCustomControlValueChanged();
	}


	@Override
	protected void clearScreen() 
	{
		form.ccConsultant().clear();
		form.cmbCCOSpecialty().clear();
		form.cmbSpecialty().clear(); //WDEV-16214
		form.cmbSourceOfReferral().setValue(null);
		form.cmbPatientStatus().setValue(null);
		
		//WDEV-12587
		form.ccReferringConsultant().clear();
		
		//WDEV-12957
		form.CaseFolderYesNo().setValue(CaseFolderYesNoEnumeration.None);
		
		//WDEV-12957
		form.ccReferringConsultant().setVisible(false);
		form.lblReferringConsultant().setVisible(false);
		
		//WDEV-13001
		form.cmbEpisode().clear();
		
		//WDEV-13130
		form.intAntStay().setValue(null);
		
		super.clearScreen();
	}
	
	private void initialiseGridColumns() 
	{
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()); 
		form.lyrAdmission().tabBooked().grdElective().setColDisplayIdCaption(dispIdType.getText());
		form.lyrAdmission().tabEmergency().grdEmergency().setColDisplayIdCaption(dispIdType.getText());
		form.lyrAdmission().tabPlanned().grdTCI().setColDisplayIdCaption(dispIdType.getText());
		form.lyrAdmission().tabWaiting().grdPatients().setColDisplayIdCaption(dispIdType.getText());
		form.lyrAdmission().tabInWaiting().grdInWaiting().setColDisplayIdCaption(dispIdType.getText());//wdev-14819
		form.lyrAdmission().tabHomeLeave().grdHomeLeave().setColDisplayIdCaption(dispIdType.getText());
	}
	
	private void populateTCITabFromData(Date fromDate, Date toDate, boolean showNoResultsFoundMessage)
	{
		form.getLocalContext().setRecordSelected(false);
		form.lyrAdmission().tabBooked().grdElective().getRows().clear();
		
		PatientElectiveListBedInfoVoCollection patientElectives = null;
		BedSpaceStateLiteVo bed = form.getGlobalContext().Core.getSelectedBedSpaceState();
		
		if (bed != null)
		{
			patientElectives = domain.listPatientElective(bed.getWard(), fromDate, toDate);
		}
		
		if (patientElectives == null || patientElectives.size() == 0)
		{
			if (showNoResultsFoundMessage)
				engine.showMessage("No results found.");
		}
		
		form.lyrAdmission().tabTCI().grdTCI_Elective().getRows().clear();
		for (PatientElectiveListBedInfoVo patientElective : patientElectives)
		{
			grdTCI_ElectiveRow rowPatientElective = form.lyrAdmission().tabTCI().grdTCI_Elective().getRows().newRow();
			
			
			if (patientElective.getPatient() != null)
			{
				if (patientElective.getPatient().getName() != null)
				{
					rowPatientElective.setColSurname(patientElective.getPatient().getName().getSurname());
					rowPatientElective.setColForename(patientElective.getPatient().getName().getForename());
				}
				
				if (patientElective.getPatient().getNHS() != null)
					rowPatientElective.setColNHS(patientElective.getPatient().getNHS().getValue());
				
				
				rowPatientElective.setColSex(patientElective.getPatient().getSex().getText());
				rowPatientElective.setColDOB(patientElective.getPatient().getDob());
				rowPatientElective.setColAge(patientElective.getPatient().calculateAge());
			}
			
			rowPatientElective.setValue(patientElective);
		}

		form.fireCustomControlValueChanged();
	}


	private void populateBookedTabFromData() 
	{
		form.getLocalContext().setRecordSelected(false);
		form.lyrAdmission().tabBooked().grdElective().getRows().clear();
		
		PendingElectiveAdmissionAdmitVoCollection voCollPendingElectiveAdmission = null;
		BedSpaceStateLiteVo voBed = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if(voBed != null)
		{
			
			voCollPendingElectiveAdmission = domain.listPendingElectiveAdmission( voBed.getWard() );
			if(voCollPendingElectiveAdmission == null || voCollPendingElectiveAdmission.size() == 0)
				return;
		}
		
		if(voCollPendingElectiveAdmission == null)
			return;
		
		for(PendingElectiveAdmissionAdmitVo voPendingElectiveAdmission : voCollPendingElectiveAdmission)
		{
			grdElectiveRow row = form.lyrAdmission().tabBooked().grdElective().getRows().newRow();
			
			PatientShort voPatient = (voPendingElectiveAdmission.getPasEventIsNotNull() && voPendingElectiveAdmission.getPasEvent().getPatientIsNotNull()) ? voPendingElectiveAdmission.getPasEvent().getPatient() : null;
			if(voPatient != null)
			{
				if(voPatient.getNameIsNotNull())
				{
					row.setColForename(voPatient.getName().getForename());
					row.setColSurname(voPatient.getName().getSurname());
				}
				
				PatientId patId = voPatient.getDisplayId();
				row.setColDisplayId(patId != null ? patId.getValue() : null);
				row.setColSex(voPatient.getSexIsNotNull() ? voPatient.getSex().toString() : null);
				
				Integer age = voPatient.calculateAge();
				if(age != null)
					row.setColAge(String.valueOf(age));
				
				row.setColDOB(voPatient.getDobIsNotNull() ? voPatient.getDob().toString() : null);
				
				if(voPatient.getAssociatedPatientIsNotNull())	//wdev-13105
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
				
				if(voPatient.getDodIsNotNull())		//wdev-13105
					row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());		
			}
			row.setValue(voPendingElectiveAdmission);
		}
		
		form.fireCustomControlValueChanged();
	}
	
	@Override
	protected void onlyrAdmissionTabChanged(LayerBridge tab) 
	{
		if (form.lyrAdmission().tabBooked().isVisible())
			form.getLocalContext().setTabSelected(TAB_BOOKED);
		else if (form.lyrAdmission().tabEmergency().isVisible())
			form.getLocalContext().setTabSelected(TAB_AE);
		else if (form.lyrAdmission().tabPlanned().isVisible())
			form.getLocalContext().setTabSelected(TAB_PLANNED);
		else if (form.lyrAdmission().tabWaiting().isVisible())
			form.getLocalContext().setTabSelected(TAB_WAITING_AREA_ADMISSION);
		else if (form.lyrAdmission().tabInWaiting().isVisible())
			form.getLocalContext().setTabSelected(TAB_AWAITING_BED_WAITING_AREA);
		else if (form.lyrAdmission().tabHomeLeave().isVisible())
			form.getLocalContext().setTabSelected(TAB_RETURN_FROM_LEAVE);
		else if (form.lyrAdmission().tabTCI().isVisible())
			form.getLocalContext().setTabSelected(TAB_TCI);
		else
			form.getLocalContext().setTabSelected(null);
		
		hideAllControls(true); // Show all controls 

		//WDEV-13509
		form.lblHLReturnDate().setVisible(false);
		form.dteHLDateReturn().setVisible(false);
		form.lblHLTimeOfReturn().setVisible(false);
		form.timHLTimeOfReturn().setVisible(false);
		form.dteHLDateReturn().setEnabled(false);
		form.timHLTimeOfReturn().setEnabled(false);

		//WDEV-12957
		form.lblAntStay().setVisible(false);
		form.intAntStay().setVisible(false);
		form.lblCaseComment().setVisible(false);
		form.txtCaseComment().setVisible(false);
		form.lblUpdateCasefolder().setVisible(false);
		form.CaseFolderYesNo().setVisible(false);
		
		//moved code
		form.lblReferralSource().setVisible(false);
		form.cmbSourceOfReferral().setVisible(false);
		form.lblPatientStatus().setVisible(false);
		form.cmbPatientStatus().setVisible(false);
		form.lblReferringConsultant().setVisible(false);
		form.ccReferringConsultant().setVisible(false);
		
		form.lblService().setVisible(Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && form.lyrAdmission().tabWaiting().isVisible());
		form.cmbService().setVisible(Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && form.lyrAdmission().tabWaiting().isVisible());

		form.getLocalContext().setIsInWaitingTabVisible(false);
		form.getLocalContext().setIsReturnFromLeaveVisible(false);
		form.getLocalContext().setRecordSelected(false);

		if(tab.equals(form.lyrAdmission().tabHomeLeave()))
		{
			hideAllControls(false);
			form.cmbEpisode().setVisible(false); //	
			form.lblEpisode().setVisible(false); //WDEV-14612
			
			form.lblHLReturnDate().setVisible(true);
			form.dteHLDateReturn().setVisible(true);
			form.lblHLTimeOfReturn().setVisible(true);
			form.timHLTimeOfReturn().setVisible(true);

			if (form.dteHLDateReturn().getValue() != null)
				form.dteHLDateReturn().setValue(new Date());
			
			form.getLocalContext().setIsReturnFromLeaveVisible(true);
			form.getLocalContext().setRecordSelected(form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue() != null ? true : false);

			if(!tab.isInitialized())
				populatehomeLeaveTabFromData();
			else
			{
				if(form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue() != null)
				{
					enableInstanceControls(true);
					form.dteHLDateReturn().setEnabled(true);
					form.timHLTimeOfReturn().setEnabled(true);
					form.fireCustomControlValueChanged();
				}
			}
			return;
		}
				
		//WDEV-12587
		bindCmbSourceOfReferralLookup();
		
		enableInstanceControls(false);
		if(tab.equals(form.lyrAdmission().tabEmergency()))
		{
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
			{
				form.lblReferralSource().setVisible(true);
				form.cmbSourceOfReferral().setVisible(true);
			}

			if(!tab.isInitialized())
				populateEmergencyTabFromData();
			else
			{
				if(form.lyrAdmission().tabEmergency().grdEmergency().getValue() != null)
				{
					form.getLocalContext().setRecordSelected(true);
					enableInstanceControls(true);
					populateScreenFromEmergencyData(form.lyrAdmission().tabEmergency().grdEmergency().getValue());
					form.fireCustomControlValueChanged();
					return;
				}
			}
		}
		else if(tab.equals(form.lyrAdmission().tabBooked()))
		{
			showExtraUIControls();

			if(!tab.isInitialized())
				populateBookedTabFromData();
			else
			{
				if(form.lyrAdmission().tabBooked().grdElective().getValue() != null)
				{
					form.getLocalContext().setRecordSelected(true);
					enableInstanceControls(true);
					populateScreenFromPendingAdmissionData(form.lyrAdmission().tabBooked().grdElective().getValue(), true);
					form.fireCustomControlValueChanged();
					return;
				}
			}
		}	
		else if (tab.equals(form.lyrAdmission().tabTCI()))
		{
			showExtraUIControls_ElectiveList();
			form.lyrAdmission().tabTCI().grdTCI_Elective().setValue(null);
			enableInstanceControls(false);
			return;
		}
		else if(tab.equals(form.lyrAdmission().tabPlanned()))
		{
			showExtraUIControls();
			
			if(!tab.isInitialized())
				populatePlannedTabFromData();
			else
			{
				if(form.lyrAdmission().tabPlanned().grdTCI().getValue() != null)
				{
					form.getLocalContext().setRecordSelected(true);
					enableInstanceControls(true);
					populateScreenFromPendingAdmissionData(form.lyrAdmission().tabPlanned().grdTCI().getValue(), false);
					form.fireCustomControlValueChanged();
					return;
				}
			}
		}
		else if(tab.equals(form.lyrAdmission().tabWaiting()))
		{
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				form.lblAntStay().setVisible(true);
				form.intAntStay().setVisible(true);
				form.lblCaseComment().setVisible(true);
				form.txtCaseComment().setVisible(true);
				form.txtCaseComment().setEnabled(false);
				form.lblUpdateCasefolder().setVisible(true);
				form.CaseFolderYesNo().setVisible(true);
				form.lblPatientStatus().setVisible(true);
				form.cmbPatientStatus().setVisible(true);
				form.lblReferralSource().setVisible(true);
				form.cmbSourceOfReferral().setVisible(true);
			}

			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST")
				&& form.getLocalContext().getIsEmergencyAdmissionTabIsNotNull()
				&& form.getLocalContext().getIsEmergencyAdmissionTab())
			{
				form.lblReferralSource().setVisible(true);
				form.cmbSourceOfReferral().setVisible(true);
			}

			if(form.cmbSourceOfReferral().getValue() != null && form.cmbSourceOfReferral().getValue().equals(SourceOfReferral.CONSULTANT))
			{
				form.lblReferringConsultant().setVisible(true);
				form.ccReferringConsultant().setVisible(true);
			}
			
			if(!tab.isInitialized())
				clearScreen();
			else
			{
				if(form.lyrAdmission().tabWaiting().grdPatients().getValue() != null)
				{
					form.getLocalContext().setRecordSelected(true);
					enableInstanceControls(true);
					populateScreenFromPatientSelected(form.lyrAdmission().tabWaiting().grdPatients().getValue());
					form.fireCustomControlValueChanged();
					return;
				}
			}
		}
		else if(tab.equals(form.lyrAdmission().tabInWaiting()))
		{
			form.cmbEpisode().setVisible(false); 	
			form.lblEpisode().setVisible(false); 
			form.getLocalContext().setIsInWaitingTabVisible(true);
			if(!tab.isInitialized())
				populateInWaitingTabFromData();
			else
			{
				if(form.lyrAdmission().tabInWaiting().grdInWaiting().getValue() != null)
				{
					form.getLocalContext().setRecordSelected(true);
					populateScreenFromInWaitingSelected();

					form.fireCustomControlValueChanged();
					return;
				}
			}
		}
		
		clearScreen();	
	}

	private void populatehomeLeaveTabFromData() 
	{
		form.getLocalContext().setRecordSelected(false);
		
		form.lyrAdmission().tabHomeLeave().grdHomeLeave().getRows().clear();
		
		InpatientEpisodeLiteVoCollection voColl = null;
		BedSpaceStateLiteVo voBed = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if(voBed != null)
		{
			
			voColl = domain.listHomeLeavesByWard( voBed.getWard() );
			if(voColl == null || voColl.size() == 0)
				return;
		}
		
		for(InpatientEpisodeLiteVo voIP : voColl)
		{
			grdHomeLeaveRow row = form.lyrAdmission().tabHomeLeave().grdHomeLeave().getRows().newRow();
			
			PatientShort voPatient = (voIP.getPasEventIsNotNull() && voIP.getPasEvent().getPatientIsNotNull()) ? voIP.getPasEvent().getPatient() : null;
			if(voPatient != null)
			{
				if(voPatient.getNameIsNotNull())
				{
					row.setColForename(voPatient.getName().getForename());
					row.setColSurname(voPatient.getName().getSurname());
				}
				
				PatientId patId = voPatient.getDisplayId();
				row.setColDisplayId(patId != null ? patId.getValue() : null);
				row.setColSex(voPatient.getSexIsNotNull() ? voPatient.getSex().toString() : null);
				
				Integer age = voPatient.calculateAge();
				if(age != null)
					row.setColAge(String.valueOf(age));
				
				row.setColDob(voPatient.getDobIsNotNull() ? voPatient.getDob().toString() : null);
				
				if(voPatient.getAssociatedPatientIsNotNull())					//wdev-13105
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
				
				if(voPatient.getDodIsNotNull())									//wdev-13105
					row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());
			}
			row.setValue(voIP);
		}	
		
		form.fireCustomControlValueChanged();
	}

	private void hideAllControls(boolean bHide)
	{
		form.cmbWard().setVisible(bHide);
		form.ccConsultant().setVisible(bHide);
		form.dtimAdmit().setVisible(bHide);
		form.txtReason().setVisible(bHide);
		form.cmbWardType().setVisible(bHide);
		form.cmbSource().setVisible(bHide);
		form.cmbMethod().setVisible(bHide);
		
		if (ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue() && bHide) //WDEV-14879
		{
			form.lblEpisode().setVisible(true);
			form.cmbEpisode().setVisible(true);
		}
		else
		{
			form.lblEpisode().setVisible(false);
			form.cmbEpisode().setVisible(false);
		}
		form.cmbPatientStatus().setVisible(bHide);
		form.dteEstDischarge().setVisible(bHide);
		form.chkChaplain().setVisible(bHide);
		
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
		{
			form.cmbCCOSpecialty().setVisible(false);
			form.cmbSpecialty().setVisible(bHide);
		}
		else if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.cmbCCOSpecialty().setVisible(bHide);
			form.cmbSpecialty().setVisible(false);
		}
		
		form.lblWard().setVisible(bHide);
		form.lblConsultant().setVisible(bHide);
		form.lblSpecialty().setVisible(bHide);
		form.lblAdmitDateTime().setVisible(bHide);
		form.lblReasonForAdmission().setVisible(bHide);
		form.lblWardType().setVisible(bHide);
		form.lblSourceOfAdmission().setVisible(bHide);
		form.lblMethod().setVisible(bHide);
		form.lblPatientStatus().setVisible(bHide);
		form.lblEstDischDate().setVisible(bHide);
		  
	}

	private void showExtraUIControls()
	{
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.lblAntStay().setVisible(true);
			form.intAntStay().setVisible(true);
			form.lblCaseComment().setVisible(true);
			form.txtCaseComment().setVisible(true);
			form.txtCaseComment().setEnabled(false);
			form.lblUpdateCasefolder().setVisible(true);
			form.CaseFolderYesNo().setVisible(true);
			
			form.lblReferralSource().setVisible(true);
			form.cmbSourceOfReferral().setVisible(true);
			form.lblPatientStatus().setVisible(true);
			form.cmbPatientStatus().setVisible(true);
		}
		
		boolean isLayoutCCO = ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO");
		boolean isLayoutWhinston = ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST");
		boolean consultantSelected = SourceOfReferral.CONSULTANT.equals(form.cmbSourceOfReferral().getValue());

		form.ccReferringConsultant().setVisible(consultantSelected && (isLayoutCCO || (isLayoutWhinston && form.lyrAdmission().tabWaiting().isVisible())));
		form.lblReferringConsultant().setVisible(consultantSelected && (isLayoutCCO || (isLayoutWhinston && form.lyrAdmission().tabWaiting().isVisible())));
		form.ccReferringConsultant().isRequired(consultantSelected && (isLayoutCCO || (isLayoutWhinston && form.lyrAdmission().tabWaiting().isVisible()))); //?
		
		
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO") || ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST")) //WDEV-15999
		{
			if (!(SourceOfReferral.CONSULTANT.equals(form.cmbSourceOfReferral().getValue())))
			{
				form.ccReferringConsultant().clear();
			}
		}
	}
	

	private void showExtraUIControls_ElectiveList()
	{
		form.lblPatientStatus().setVisible(true);
		form.cmbPatientStatus().setVisible(true);
		
		form.lblAntStay().setVisible(true);
		form.intAntStay().setVisible(true);
		
		form.lblReferralSource().setVisible(true);
		form.cmbSourceOfReferral().setVisible(true);
		
		boolean consultantSelected = SourceOfReferral.CONSULTANT.equals(form.cmbSourceOfReferral().getValue());
		boolean tciTabFunctionality = Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && form.lyrAdmission().tabTCI().isVisible();

		form.ccReferringConsultant().setVisible(consultantSelected && tciTabFunctionality);
		form.lblReferringConsultant().setVisible(consultantSelected && tciTabFunctionality);
	}

	
	private void enableInstanceControls(boolean bEnabled)
	{
		form.ccConsultant().setEnabled(bEnabled);
		form.chkChaplain().setEnabled(bEnabled);
		form.cmbMethod().setEnabled(bEnabled);
		form.cmbSource().setEnabled(bEnabled);
		form.cmbSpecialty().setEnabled(bEnabled);
		form.cmbService().setEnabled(bEnabled);
		form.cmbWard().setEnabled(bEnabled);
		form.cmbWardType().setEnabled(bEnabled);
		form.dtimAdmit().setEnabled(bEnabled);
		form.intAntStay().setEnabled(bEnabled);

		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
			form.dteEstDischarge().setEnabled(bEnabled);

		form.txtReason().setEnabled(bEnabled);
		form.cmbSourceOfReferral().setEnabled(bEnabled);
		form.ccReferringConsultant().setEnabled(bEnabled);
		
		form.cmbPatientStatus().setEnabled(bEnabled);
		
		//WDEV-13001
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
			form.cmbEpisode().setEnabled(bEnabled);

		//WDEV-8804
		if(bEnabled)
		{
			if(form.lyrAdmission().tabBooked().isVisible() || form.lyrAdmission().tabPlanned().isVisible())
			{
				form.cmbMethod().setEnabled(false);
				form.cmbSource().setEnabled(false);
			}
		}
		
		//WDEV-12957
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.cmbCCOSpecialty().setEnabled(bEnabled);

			form.intAntStay().setEnabled(bEnabled);
			form.CaseFolderYesNo().setEnabled(bEnabled);
			
			if(bEnabled)
			{
				if(form.CaseFolderYesNo().getValue().equals(CaseFolderYesNoEnumeration.rdoYes))
					form.txtCaseComment().setEnabled(true);
			}
			else
				form.txtCaseComment().setEnabled(false);			
			
			if(form.lyrAdmission().tabBooked().isVisible() || form.lyrAdmission().tabPlanned().isVisible())
			{
				if(bEnabled)
					form.cmbSource().setEnabled(true);
			}
		}
	}

	private void populateInWaitingTabFromData()
	{	
		form.getLocalContext().setRecordSelected(false);

		//load list of waiting area patients for ward
		form.getLocalContext().setAdmissionDetail(null);
		InpatientEpisodeLiteVoCollection voCollPatients = domain.listWaitingAreaPatientsByWard(form.getGlobalContext().Core.getADTWard());
		for (InpatientEpisodeLiteVo voInpatEpis : voCollPatients)
		{
			grdInWaitingRow row = form.lyrAdmission().tabInWaiting().grdInWaiting().getRows().newRow();
			PatientShort voPatient = (voInpatEpis.getPasEventIsNotNull() && voInpatEpis.getPasEvent().getPatientIsNotNull()) ? voInpatEpis.getPasEvent().getPatient() : null;
			if(voPatient != null)
			{
				if(voPatient.getNameIsNotNull())
				{
					row.setColForename(voPatient.getName().getForename());
					row.setColSurname(voPatient.getName().getSurname());
				}
				
				PatientId patId = voPatient.getDisplayId();
				row.setColDisplayId(patId != null ? patId.getValue() : null);
				row.setColSex(voPatient.getSexIsNotNull() ? voPatient.getSex().toString() : null);
				
				Integer age = voPatient.calculateAge();
				if(age != null)
					row.setColAge(String.valueOf(age));

				row.setColDob(voPatient.getDobIsNotNull() ? voPatient.getDob().toString() : null);
				
				if(voPatient.getAssociatedPatientIsNotNull())			//wdev-13105	
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
				
				if(voPatient.getDodIsNotNull())			//wdev-13105
					row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());
				
			}
			row.setValue(voInpatEpis);
		}
		
		form.fireCustomControlValueChanged();
	}

	private void populatePlannedTabFromData()
	{
		form.getLocalContext().setRecordSelected(false);
		
		updatePlannedTabDateSearchCriteria(); //WDEV-18009 
		searchPlanned();
		
		form.fireCustomControlValueChanged();
	}

	private void populateEmergencyTabFromData()
	{
		form.getLocalContext().setRecordSelected(false);
		
		form.lyrAdmission().tabEmergency().grdEmergency().getRows().clear();
		
		PendingEmergencyAdmissionAdmitVoCollection voCollEmergencyAdmission = null;
		BedSpaceStateLiteVo voBed = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if(voBed != null)
		{
			
			voCollEmergencyAdmission = domain.listEmergencyAdmission( voBed.getWard() );
			if(voCollEmergencyAdmission == null || voCollEmergencyAdmission.size() == 0)
				return;
		}
		
		for(PendingEmergencyAdmissionAdmitVo voPendingEmergencyAdmission : voCollEmergencyAdmission)
		{
			grdEmergencyRow row = form.lyrAdmission().tabEmergency().grdEmergency().getRows().newRow();
			
			PatientShort voPatient = (voPendingEmergencyAdmission.getPasEventIsNotNull() && voPendingEmergencyAdmission.getPasEvent().getPatientIsNotNull()) ? voPendingEmergencyAdmission.getPasEvent().getPatient() : null;
			if(voPatient != null)
			{
				if(voPatient.getNameIsNotNull())
				{
					row.setColForename(voPatient.getName().getForename());
					row.setColSurname(voPatient.getName().getSurname());
				}
				
				PatientId patId = voPatient.getDisplayId();
				row.setColDisplayId(patId != null ? patId.getValue() : null);
				row.setColSex(voPatient.getSexIsNotNull() ? voPatient.getSex().toString() : null);
				
				Integer age = voPatient.calculateAge();
				if(age != null)
					row.setColAge(String.valueOf(age));
				
				row.setColDob(voPatient.getDobIsNotNull() ? voPatient.getDob().toString() : null);
				
				if(voPatient.getAssociatedPatientIsNotNull())					//wdev-13105
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
				
				if(voPatient.getDodIsNotNull())									//wdev-13105
					row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());
			}
			row.setValue(voPendingEmergencyAdmission);
		}	
		
		form.fireCustomControlValueChanged();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//component interface methods below here
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public void initialise()
	{			
		clearScreen();
		initialiseGridColumns();
		Boolean hasWaitingArea = form.getGlobalContext().Core.getHasWaitingArea();
		if(hasWaitingArea == null)
			throw new CodingRuntimeException("HasWaiting Area Global Context is null");
			
		form.getLocalContext().setIsInWaitingTabVisible(false);
		form.getLocalContext().setIsReturnFromLeaveVisible(false);	//wdev-13509
		form.getLocalContext().setIsEmergencyAdmissionTab(false);	//WDEV-12587
		
		if(hasWaitingArea && form.getGlobalContext().Core.getSelectedBedSpaceState() == null)
		{
			form.lyrAdmission().tabBooked().setVisible(false);
			form.lyrAdmission().tabBooked().setHeaderVisible(false);
			form.lyrAdmission().tabPlanned().setVisible(false);
			form.lyrAdmission().tabPlanned().setHeaderVisible(false);
			form.lyrAdmission().tabEmergency().setVisible(false);
			form.lyrAdmission().tabEmergency().setHeaderVisible(false);	
			form.lyrAdmission().tabInWaiting().setVisible(false);	
			form.lyrAdmission().tabInWaiting().setHeaderVisible(false);	
			form.lyrAdmission().tabWaiting().setHeaderVisible(true);
			form.lyrAdmission().tabWaiting().setVisible(true);
			
			form.lyrAdmission().tabTCI().setHeaderVisible(false);
			form.lyrAdmission().tabTCI().setVisible(false);
		}
		else if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && (form.getLocalContext().getTabSelected() == null || form.getLocalContext().getTabSelected().equals(TAB_TCI)))
		{
			form.lyrAdmission().tabBooked().setVisible(false);
			form.lyrAdmission().tabBooked().setHeaderVisible(false);
			form.lyrAdmission().tabPlanned().setVisible(false);
			form.lyrAdmission().tabPlanned().setHeaderVisible(false);
//			form.lyrAdmission().tabEmergency().setVisible(false);
//			form.lyrAdmission().tabEmergency().setHeaderVisible(false);	
//			form.lyrAdmission().tabInWaiting().setVisible(false);	
//			form.lyrAdmission().tabInWaiting().setHeaderVisible(false);	
//			form.lyrAdmission().tabWaiting().setHeaderVisible(true);
//			form.lyrAdmission().tabWaiting().setVisible(true);
			form.lyrAdmission().tabTCI().setHeaderVisible(true);
			form.lyrAdmission().tabTCI().setVisible(true);
			
			showExtraUIControls_ElectiveList();
			
			form.lyrAdmission().tabTCI().dteTCI_From().setValue(new Date());
			form.lyrAdmission().tabTCI().dteTCI_To().setValue(new Date());
			form.lyrAdmission().tabTCI().chkTCI_Today().setValue(true);
			
			if (form.lyrAdmission().tabTCI().isVisible())
				populateTCITabFromData(form.lyrAdmission().tabTCI().dteTCI_From().getValue(), form.lyrAdmission().tabTCI().dteTCI_To().getValue(), false);
			
			form.lyrAdmission().tabWaiting().setCaption("Emergency Admission");
			form.getLocalContext().setIsEmergencyAdmissionTab(true);

			if (!hasWaitingArea)
			{
				form.lyrAdmission().tabInWaiting().setVisible(false);	
				form.lyrAdmission().tabInWaiting().setHeaderVisible(false);	
			}	
		}
		else
		{
			form.lyrAdmission().tabTCI().setHeaderVisible(Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()));
			form.lyrAdmission().tabTCI().setVisible(false);

			if(form.lyrAdmission().tabBooked().isVisible())
				populateBookedTabFromData();
			
			form.lyrAdmission().tabWaiting().setCaption("Emergency Admission");
			form.getLocalContext().setIsEmergencyAdmissionTab(true);	//WDEV-12587
			
			if(!hasWaitingArea)
			{
				form.lyrAdmission().tabInWaiting().setVisible(false);	
				form.lyrAdmission().tabInWaiting().setHeaderVisible(false);	
			}	
		}
		
		form.lblService().setVisible(false);
		form.cmbService().setVisible(false);
		form.lblReferralSource().setVisible(false);
		form.cmbSourceOfReferral().setVisible(false);
		
		form.lblPatientStatus().setVisible(false);
		form.cmbPatientStatus().setVisible(false);
		
		//WDEV-12587
		form.lblReferringConsultant().setVisible(false);
		form.ccReferringConsultant().setVisible(false);
		
		form.cmbCCOSpecialty().setVisible(false);
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
		{
			form.lblAntStay().setVisible(false);
			form.intAntStay().setVisible(false);
			form.cmbCCOSpecialty().setVisible(false);
		}
		else if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.dteEstDischarge().setEnabled(false);
			form.cmbCCOSpecialty().setVisible(true);

			form.cmbSpecialty().setVisible(false);
		}
		
		//WDEV-12957
		form.lblAntStay().setVisible(false);
		form.intAntStay().setVisible(false);
		form.lblCaseComment().setVisible(false);
		form.txtCaseComment().setVisible(false);
		form.lblUpdateCasefolder().setVisible(false);
		form.CaseFolderYesNo().setVisible(false);
		
		//WDEV-13509
		form.lblHLReturnDate().setVisible(false);
		form.dteHLDateReturn().setVisible(false);
		form.lblHLTimeOfReturn().setVisible(false);
		form.timHLTimeOfReturn().setVisible(false);

		showExtraUIControls();
		
		//WDEV-13001
		form.lblEpisode().setVisible(false);
		form.cmbEpisode().setVisible(false);
		
		if (form.lyrAdmission().tabEmergency().isVisible() && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST")) //WDEV-16056
		{
			form.lblReferralSource().setVisible(true);
			form.cmbSourceOfReferral().setVisible(true);
		}
		
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
		{
			form.lblEpisode().setVisible(true);
			form.cmbEpisode().setVisible(true);
		}
		
		//WDEV-16003
		if(form.lyrAdmission().tabWaiting().isVisible() && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
		{
			form.lblReferralSource().setVisible(true);
			form.cmbSourceOfReferral().setVisible(true);
		}
		
		if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()))
		{
			showExtraUIControls_ElectiveList();
		}
		
		hideTabs();
	}


	private void clearSelection()
	{
		//clear selection from the grids
		form.lyrAdmission().tabBooked().grdElective().setValue(null);
		form.lyrAdmission().tabPlanned().grdTCI().setValue(null);
		form.lyrAdmission().tabEmergency().grdEmergency().setValue(null);
		form.lyrAdmission().tabWaiting().grdPatients().setValue(null);
		form.lyrAdmission().tabInWaiting().grdInWaiting().setValue(null);
		form.lyrAdmission().tabTCI().grdTCI_Elective().setValue(null);
		form.getLocalContext().setRecordSelected(false);
	}


	public Boolean saveElectiveListEmergencyAdmission()
	{
		PatientShort patient = form.lyrAdmission().tabWaiting().grdPatients().getValue();
		PatientWithGPForCCGVo patientWithGP = domain.getPatientForCCG(patient);
		String codeCCG = getCCGCode(patientWithGP);
		ContractConfigShortVo contract = domain.getContractByCCG(codeCCG);
		
		AdmissionDetailVo admission = createAdmissionDetails(patient);
		CareSpellVo careSpell = createCareSpellEpisodeCareContext(patient, admission);
		
		// Create the catsReferral
		CatsReferralEmergencyAdmissionVo catsReferral = createNewCatsReferralForAdmission(patient, patientWithGP, careSpell, admission, contract);

		if (patient != null && patient.getDod() != null)
		{
			engine.showErrors(new String[]{"Deceased patient cannot be admitted."});
			return false;
		}
		
		BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
		//copy to previous
		if(voBedSpaceStateLite != null && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceStateLite.getCurrentBedStatus().clone());
			voBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceStateLite.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
			voBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime());
		}
		
		WardStayVo voWardStay = new WardStayVo();
		voWardStay.setTransferDateTime(new DateTime());
		if(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
		{
			voWardStay.setBedSpace(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace());
			voWardStay.setWard(form.getGlobalContext().Core.getSelectedBedSpaceState().getWard());
			if(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace() != null)
				voWardStay.setWardType(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace().getWardType());
		}
		

		String errors[] = admission.validate(getUIValidation());
		errors = careSpell.validate(errors);
		errors = catsReferral.validate(errors);
		
		
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			admission = domain.saveEmergencyAdmissionInElectiveCase(admission, careSpell, catsReferral, voBedSpaceStateLite, voWardStay, null);
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			initialise();
			clearSelection();
			enableInstanceControls(false);
			form.fireCustomControlValueChanged();
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			clearSelection();
			enableInstanceControls(false);
			form.fireCustomControlValueChanged();
			return false;
		}
		
		return true;
	}

	private AdmissionDetailVo createAdmissionDetails(PatientShort patient)
	{
		// Fill in data into PatientElectiveList.TCIDetails.AdmissionDetail record - create a new one if needed
		AdmissionDetailVo admissionDetails = new AdmissionDetailVo();

			PasEventAdmitVo pasEvent = new PasEventAdmitVo();
			
			if (form.ccConsultant().getValue() != null)
				pasEvent.setConsultant(domain.getMedic(new HcpRefVo(form.ccConsultant().getValue().getIMosHcpId(), 0)));
			else
				pasEvent.setConsultant(null);
			
			pasEvent.setEventDateTime(form.dtimAdmit().getValue());
			pasEvent.setEventType(PasEventType.EMERGENCY);
			pasEvent.setLocation(form.cmbWard().getValue());
			patient.setWard(form.cmbWard().getValue());
			pasEvent.setPatient(patient);
			pasEvent.setSpecialty(form.cmbSpecialty().getValue());
			pasEvent.setPasEventId(patient.getID_Patient().toString() + pasEvent.getEventDateTime().toString(DateTimeFormat.ISO));
			pasEvent.setSourceOfReferral(form.cmbSourceOfReferral().getValue());
			
			admissionDetails.setPasEvent(pasEvent);
		
		
		admissionDetails.setAdmissionDateTime(form.dtimAdmit().getValue());
		admissionDetails.setWard(form.cmbWard().getValue());
		if (form.getGlobalContext().Core.getSelectedBedSpaceState() != null)
			admissionDetails.setBed(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace());

		if (form.ccConsultant().getValue() != null)
			admissionDetails.setConsultant(domain.getMedic(new HcpRefVo(form.ccConsultant().getValue().getIMosHcpId(), 0)));
		else
			admissionDetails.setConsultant(null);

		admissionDetails.setSpecialty(form.cmbSpecialty().getValue());
		admissionDetails.setWardType(form.cmbWardType().getValue());
		admissionDetails.setMethodOfAdmission(form.cmbMethod().getValue());
		admissionDetails.setSourceOfAdmission(form.cmbSource().getValue());
		admissionDetails.setReasonForAdmission(form.txtReason().getValue());
		admissionDetails.setEstDischargeDate(form.dteEstDischarge().getValue());
		admissionDetails.setIsChaplainRequired(form.chkChaplain().getValue());
		admissionDetails.setReferringConsultant(form.ccReferringConsultant().getValue());
		admissionDetails.setPatientStatus(form.cmbPatientStatus().getValue());
		admissionDetails.setAnticipatedStay(form.intAntStay().getValue());

		return admissionDetails;
	}


	private CareSpellVo createCareSpellEpisodeCareContext(PatientShort patient, AdmissionDetailVo  admission)
	{
		HcpLiteVo hcp = domain.getHcpFromIMos(form.ccConsultant().getValue());
		BedSpaceStateLiteVo bedState = form.getGlobalContext().Core.getSelectedBedSpaceState();
		
		CareSpellVo careSpell = new CareSpellVo();
		careSpell.setStartDate(new Date());
		careSpell.setEndDate(null);
		careSpell.setPatient(patient);
		
    		EpisodeofCareVo episode = new EpisodeofCareVo();
    		episode.setCareSpell(careSpell);
    		episode.setResponsibleHCP(hcp);
    		episode.setSpecialty(form.cmbSpecialty().getValue());
    		episode.setRelationship(CareSpelltoEpisodeRelationship.PRIMARY);
    		episode.setStartDate(new Date());
    		episode.setEndDate(null);
    		
        		CareContextVo careContext = new CareContextVo();
        		careContext.setPasEvent(null);
        		careContext.setContext(ContextType.EMERGENCY_UNSCHEDULED);
        		careContext.setEpisodeOfCare(episode);
    			careContext.setOrderingHospital(null);
        		careContext.setEstimatedDischargeDate(form.dteEstDischarge().getValue());
        		careContext.setStartDateTime(new DateTime());
        		careContext.setEndDateTime(null);
        		careContext.setLocationType(null);
        		careContext.setResponsibleHCP(hcp);
        		careContext.setBedNumber((bedState != null && bedState.getBedSpace() != null) ? bedState.getBedSpace().getBedNumber() : null);
        		careContext.setDischargeReason(null);
        		careContext.setCareContextHistory(null);
        		
        		CareContextStatusHistoryVo contextStatus = new CareContextStatusHistoryVo();
        		contextStatus.setStatus(CareContextStatus.OPEN);
        		contextStatus.setStatusDateTime(new DateTime());
    			careContext.setCurrentStatus(contextStatus);
        		careContext.setStatusHistory(new CareContextStatusHistoryVoCollection());
        		careContext.getStatusHistory().add(contextStatus);
        		
    		episode.setCareContexts(new CareContextVoCollection());
    		episode.getCareContexts().add(careContext);
    		
    		episode.setLinkedReferrals(null);
    		episode.setLinkedReferralsHistory(null);
    		episode.setCurrentReferral(null);
    		episode.setEpisodeOfCareHistory(null);
    		
    		EpisodeOfCareStatusHistoryVo episodeStatus = new EpisodeOfCareStatusHistoryVo();
    		episodeStatus.setStatus(EpisodeOfCareStatus.OPEN);
    		episodeStatus.setStatusDateTime(new DateTime());
			episode.setCurrentStatus(episodeStatus);
    		episode.setStatusHistory(new EpisodeOfCareStatusHistoryVoCollection());
    		episode.getStatusHistory().add(episodeStatus);
		
   		careSpell.setEpisodes(new EpisodeofCareVoCollection());
		careSpell.getEpisodes().add(episode);
		
		CareSpellStatusHistoryVo careSpellStatus = new CareSpellStatusHistoryVo();
		careSpellStatus.setStatus(ProblemGroupStatus.OPEN);
		careSpellStatus.setStatusDateTime(new DateTime());
		careSpell.setCurrentStatus(careSpellStatus);
		careSpell.setStatusHistory(new CareSpellStatusHistoryVoCollection());
		careSpell.getStatusHistory().add(careSpellStatus);
		
		return careSpell;
	}


	private CatsReferralEmergencyAdmissionVo createNewCatsReferralForAdmission(PatientShort patientShort, PatientWithGPForCCGVo patient, CareSpellVo careSpell, AdmissionDetailVo admission, ContractConfigShortVo contract)
	{
		CatsReferralEmergencyAdmissionVo referral = new CatsReferralEmergencyAdmissionVo();
		
		referral.setPatient(patientShort);
		referral.setCareContext(careSpell.getEpisodes().get(0).getCareContexts().get(0));
		
		CatsReferralStatusVo referralStatus = new CatsReferralStatusVo();
		referralStatus.setReferralStatus(ReferralApptStatus.REFERRAL_ACCEPTED);
		referralStatus.setStatusDateTime(new DateTime());
		referralStatus.setAuthoringUser((MemberOfStaffRefVo) domain.getMosUser());
		referral.setCurrentStatus(referralStatus);
		referral.setStatusHistory(new CATSReferralStatusRefVoCollection());
		referral.getStatusHistory().add(referralStatus);

		String codeCCG = getCCGCode(patient);
		referral.setContract(contract);
		referral.setHasAppointments(false);
		
		referral.setAdmissions(new AdmissionDetailVoCollection());
		referral.getAdmissions().add(admission);
		
			ReferralDetailsEmergencyAdmissionVo referralDetails = new ReferralDetailsEmergencyAdmissionVo();
			referralDetails.setService(form.cmbService().getValue());
			referralDetails.setConsultant(domain.getHcpFromIMos(form.ccConsultant().getValue()));
			referralDetails.setAuthoringUser((MemberOfStaffRefVo) domain.getMosUser());
			referralDetails.setAuthoringDateTime(new DateTime());
			referralDetails.setDateReferralReceived(new Date());
			referralDetails.setDateOfReferral(new Date());
			referralDetails.setEnd18WW(calculateEnd18WW(contract));
			referralDetails.setPCT(codeCCG);
			referralDetails.setGPName(patient.getGp());
			referralDetails.setPractice(getPatientGpDefaultPractice(patient));
		
		referral.setReferralDetails(referralDetails);
		
		return referral;
	}


	private Date calculateEnd18WW(ContractConfigShortVo contract)
	{
		if (contract != null)
			return new Date().addDay(contract.getDaysToRTTBreachDate());

		return new Date();
	}


	private OrganisationRefVo getPatientGpDefaultPractice(PatientWithGPForCCGVo patient)
	{
		if (patient == null || patient.getGp() == null || patient.getGp().getPractices() == null)
			return null;
		
		for (GpToPracticesVo gpToPractices : patient.getGp().getPractices())
		{
			if (Boolean.TRUE.equals(gpToPractices.getIsPrimaryPractice()))
				return gpToPractices.getPractice();
		}
		
		return null;
	}


	private String getCCGCode(PatientWithGPForCCGVo patient)
	{
		if (patient == null)
			return null;
		
		if (!Boolean.TRUE.equals(ConfigFlag.DOM.GP_USE_SURGERIES.getValue()))
		{
			// 1 - Patient.Gp.practices.practice (with isDefault).PCTCode (this is a CCG so no lookup of CCGPCTPCCodes needed) 
			// 2 - Patient.Gp.practices.practice (with isDefault).Address.Postcode
			if (patient.getGp() != null && patient.getGp().getPractices() != null)
			{
				for (GpToPracticesVo gpToPractice : patient.getGp().getPractices())
				{
					if (Boolean.TRUE.equals(gpToPractice.getIsPrimaryPractice()))
					{
						// Case 1
						if (gpToPractice.getPractice() != null && gpToPractice.getPractice().getPctCode() != null)
							return gpToPractice.getPractice().getPctCode();
						
						// Case 2
						if (gpToPractice.getPractice() != null && gpToPractice.getPractice().getAddress() != null)
						{
							String codeCCG = domain.getCodeCCGFromPostalCode(gpToPractice.getPractice().getAddress().getPostCode());
							if (codeCCG != null) return codeCCG;
						}
					}
						
				}
			}
		}
			
		// 3 - Patient.gpSurgery.address.postcode
		if (patient.getGpSurgery() != null && patient.getGpSurgery().getAddress() != null)
		{
			String codeCCG = domain.getCodeCCGFromPostalCode(patient.getGpSurgery().getAddress().getPostCode());
			if (codeCCG != null) return codeCCG;
		}
		
		// 4 -  Patient.Address.Postcode 
		if (patient.getAddress() != null)
		{
			String codeCCG = domain.getCodeCCGFromPostalCode(patient.getAddress().getPostCode());
			if (codeCCG != null) return codeCCG;
		}
		
		return null;
	}


	public Boolean saveElectiveListAdmission(Boolean cancelOtherPatientElectiveList)
	{
		PatientElectiveListBedAdmissionVo electiveAdmission = populateDataFromScreenTCIElectiveAdmission(form.getLocalContext().getTCIElectiveAdmission());
		PatientElectiveListBedAdmissionVoCollection patientElectiveListToCancel = null;
		
		if (electiveAdmission != null && electiveAdmission.getPatient() != null && electiveAdmission.getPatient().getDod() != null)
		{
			engine.showErrors(new String[]{"Deceased patient cannot be admitted"});
			return false;
		}
		
		if (Boolean.TRUE.equals(domain.isPatientAnInpatient(electiveAdmission.getPatient())))
		{
			engine.showErrors(new String[]{"Patient cannot be admitted. Patient is already an inpatient."});
			return false;
		}
		
		if (cancelOtherPatientElectiveList && Specialty.EMERGENCY.equals(form.cmbSpecialty().getValue()))
		{
			// Get other PatientElectiveList to cancel
			patientElectiveListToCancel = domain.getPatientElectiveListToCancel(electiveAdmission.getPatient(), electiveAdmission, electiveAdmission.getElectiveList().getService());
			
			// Set values into record
			for (PatientElectiveListBedAdmissionVo patientElective : patientElectiveListToCancel)
			{
				TCIOutcomeForPatientElectiveListVo outcome = new TCIOutcomeForPatientElectiveListVo();
				if (patientElective.getTCIDetails().getTCIDate().isLessThan(new ims.framework.utils.Date()))
					outcome.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6);
				else
					outcome.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7);
				outcome.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
				outcome.setStatusDateTime(new DateTime());
				outcome.setOutcomeReason(TCIStatusChangeReason.CANCELLEDBYREMOVALOFELECTIVELISTRECORD);
				
				patientElective.getTCIDetails().setCurrentOutcome(outcome);
				patientElective.getTCIDetails().getOutcomeHistory().add(outcome);
				patientElective.getTCIDetails().setIsActive(false);
			}
		}
		
		BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
		//copy to previous
		if(voBedSpaceStateLite != null && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceStateLite.getCurrentBedStatus().clone());
			voBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceStateLite.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
			voBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime());
		}
		
		WardStayVo voWardStay = new WardStayVo();
		voWardStay.setTransferDateTime(new DateTime());
		if(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
		{
			voWardStay.setBedSpace(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace());
			voWardStay.setWard(form.getGlobalContext().Core.getSelectedBedSpaceState().getWard());
			if(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace() != null)
				voWardStay.setWardType(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace().getWardType());
		}
		
		ConsultantStayVo voConsStay = null;
		if(electiveAdmission.getConsultantIsNotNull())
		{
			voConsStay = new ConsultantStayVo();

			if (electiveAdmission.getConsultant() != null)
				voConsStay.setConsultant(domain.getMedic(electiveAdmission.getConsultant()));
			else
				voConsStay.setConsultant(null);

			voConsStay.setTransferDateTime(new DateTime(electiveAdmission.getTCIDetails().getTCIDate(), electiveAdmission.getTCIDetails().getTCITime()));
		}
		
		String errors[] = electiveAdmission.validate(getUIValidation());
		
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			electiveAdmission = domain.saveTCIAdmissionAndUpdateList(electiveAdmission, voBedSpaceStateLite, voWardStay, voConsStay, patientElectiveListToCancel);
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			initialise();
			clearSelection();
			enableInstanceControls(false);
			form.fireCustomControlValueChanged();
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			clearSelection();
			enableInstanceControls(false);
			form.fireCustomControlValueChanged();
			return false;
		}
		
		return true;
	}

	public Boolean saveAdmission()
	{	
		if (form.lyrAdmission().tabTCI().isVisible() && Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()))
		{
			return saveElectiveListAdmission(true);
		}
		
		AdmissionDetailVo voAdmissionDetail = new AdmissionDetailVo();
		if(form.getLocalContext().getAdmissionDetailIsNotNull())
			voAdmissionDetail = form.getLocalContext().getAdmissionDetail();
			
		voAdmissionDetail = populateDataFromScreen(voAdmissionDetail);
		
		//WDEV-8799 - dont allow admit of a dead patient - separate validation
		if(voAdmissionDetail != null && voAdmissionDetail.getPasEventIsNotNull() && voAdmissionDetail.getPasEvent().getPatientIsNotNull() && voAdmissionDetail.getPasEvent().getPatient().getDodIsNotNull())
		{
			engine.showErrors(new String[]{"Deceased patient cannot be admitted"});
			return false;
		}
	
		//WDEV-13001
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
			voAdmissionDetail.setAdmissionEpisode(form.cmbEpisode().getValue());
		
		String[] arrErrors = voAdmissionDetail.validate(getUIValidation());
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		PendingElectiveAdmissionAdmitVo voBookedElective = form.lyrAdmission().tabBooked().isVisible() ? form.lyrAdmission().tabBooked().grdElective().getValue() : null;
		PendingEmergencyAdmissionAdmitVo voEmergency = form.lyrAdmission().tabEmergency().isVisible() ? form.lyrAdmission().tabEmergency().grdEmergency().getValue() : null;
		PendingElectiveAdmissionAdmitVo voPlannedElective = form.lyrAdmission().tabPlanned().isVisible() ? form.lyrAdmission().tabPlanned().grdTCI().getValue() : null;
		
		if(voEmergency != null && voEmergency.getAdmissionStatusIsNotNull())
		{
			if(voEmergency.getAdmissionStatus().equals(EmergencyAdmissionStatus.DTA))
			{
				engine.showErrors(new String[]{"This patient cannot be admitted while they are still under the care of A&E.\nPatient must be Discharged from A&E."});
				return false;
			}
		}
		
		BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
		//copy to previous
		if(voBedSpaceStateLite != null && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceStateLite.getCurrentBedStatus().clone());
			voBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceStateLite.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
			voBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime());
		}
		
		WardStayVo voWardStay = new WardStayVo();
		voWardStay.setTransferDateTime(new DateTime());
		if(form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
		{
			voWardStay.setBedSpace(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace());
			voWardStay.setWard(form.getGlobalContext().Core.getSelectedBedSpaceState().getWard());
			if(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace() != null)
				voWardStay.setWardType(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace().getWardType());
		}
		
		ConsultantStayVo voConsStay = null;
		if(voAdmissionDetail.getConsultantIsNotNull())
		{
			voConsStay = new ConsultantStayVo();
			voConsStay.setConsultant(voAdmissionDetail.getConsultant());
			voConsStay.setTransferDateTime(voAdmissionDetail.getAdmissionDateTime());
		}
		
		AdmissionType admitType = null;
		if(form.lyrAdmission().tabBooked().isVisible())
			admitType = AdmissionType.BOOKED;
		else if (form.lyrAdmission().tabPlanned().isVisible())
			admitType = AdmissionType.PLANNED;
			
		try 	
		{
			domain.saveAdmissionAndUpdateList(voAdmissionDetail, voBedSpaceStateLite,  voWardStay, voConsStay,  voBookedElective, voEmergency, voPlannedElective, admitType);
		} 
		catch (DTODomainInterfaceException e)
		{
			if (e.getErrorCode() == -12) // Case note location error, CCO specific
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			engine.showMessage(e.getMessage());
			initialise();
			clearSelection();
			enableInstanceControls(false);
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			initialise();
			clearSelection();
			enableInstanceControls(false);
			form.fireCustomControlValueChanged();
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			clearSelection();
			enableInstanceControls(false);
			form.fireCustomControlValueChanged();
			return false;
		}
		
		return true;
	}
	

	private String[] getUIValidation()
	{
		List<String> errors = new ArrayList<String>();
				
		if (form.dteEstDischarge().getValue() != null && form.dtimAdmit().getValue() != null)
		{
			if(form.dteEstDischarge().getValue().isLessThan(form.dtimAdmit().getValue().getDate()))
				errors.add("Est. Discharge Date cannot be before the Admission Date");
		}
		
		if(form.cmbPatientStatus().getVisible())
		{
			if(form.cmbPatientStatus().getValue() == null)
				errors.add("Patient Status is mandatory");
		}
		
		if(form.cmbSourceOfReferral().getVisible())
		{
			if(form.cmbSourceOfReferral().getValue() == null)
				errors.add("Source of Referral is mandatory");
		}

		if(form.cmbCCOSpecialty().getVisible())
		{
			if(form.cmbCCOSpecialty().getValue() == null)
				errors.add("Specialty is mandatory");
		}

		if(form.intAntStay().isVisible())
		{
			if(form.intAntStay().getValue() == null)
				errors.add("Anticipated Stay is mandatory");
		}
		
		//WDEV-8322
		if(form.lyrAdmission().tabWaiting().isVisible())
		{			
			//WDEV-12587
			if(SourceOfReferral.CONSULTANT.equals(form.cmbSourceOfReferral().getValue()) && form.ccReferringConsultant().getValue() == null)
			{
				errors.add("Referring Consultant is mandatory.");
			}
		}
		
		//WDEV-13001
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
		{
			if(form.cmbEpisode().getValue() == null)
			{
				errors.add("Episode is mandatory.");
			}
		}
		
		if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && form.lyrAdmission().tabWaiting().isVisible())
		{
			if (form.cmbService().getValue() == null)
				errors.add("Service is mandatory.");
		}
		
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	public Boolean getInWaitingIsVisible()
	{
		return form.getLocalContext().getIsInWaitingTabVisible();
	}

	public Boolean checkForPatientAlreadyAdmited()
	{
		PatientRefVo voPatient = getSelectedPatient();
		
		if(voPatient != null)
		{
			String errors = domain.checkForPatientAlreadyAdmited(voPatient);
			
			if (errors != null){
				engine.showMessage(errors, "Admit Error", MessageButtons.OK, MessageIcon.ERROR);
				return true;			
			}
		}
		
		return false;
	}

	private PatientRefVo getSelectedPatient()
	{
		PatientRefVo voPatient = null;
		if(form.lyrAdmission().tabBooked().isVisible())
		{
			if(form.lyrAdmission().tabBooked().grdElective().getValue() != null && form.lyrAdmission().tabBooked().grdElective().getValue().getPasEventIsNotNull())
				voPatient = form.lyrAdmission().tabBooked().grdElective().getValue().getPasEvent().getPatient();
		}
		else if(form.lyrAdmission().tabPlanned().isVisible())
		{
			if(form.lyrAdmission().tabPlanned().grdTCI().getValue() != null && form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEventIsNotNull())
				voPatient = form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEvent().getPatient();			
		}
		else if(form.lyrAdmission().tabEmergency().isVisible())
		{
			if(form.lyrAdmission().tabEmergency().grdEmergency().getValue() != null && form.lyrAdmission().tabEmergency().grdEmergency().getValue().getPasEventIsNotNull())
				voPatient = form.lyrAdmission().tabEmergency().grdEmergency().getValue().getPasEvent().getPatient();					
		}
		else if(form.lyrAdmission().tabInWaiting().isVisible())
		{
			if(form.lyrAdmission().tabInWaiting().grdInWaiting().getValue() != null && form.lyrAdmission().tabInWaiting().grdInWaiting().getValue().getPasEventIsNotNull())
				voPatient = form.lyrAdmission().tabInWaiting().grdInWaiting().getValue().getPasEvent().getPatient();								
		}
		else if(form.lyrAdmission().tabWaiting().isVisible())
		{
			if(form.lyrAdmission().tabWaiting().grdPatients().getValue() != null)
				voPatient = form.lyrAdmission().tabWaiting().grdPatients().getValue();								
			
		}
		else if (form.lyrAdmission().tabTCI().isVisible())
		{
			if (form.lyrAdmission().tabTCI().grdTCI_Elective().getValue() != null)
				voPatient = form.lyrAdmission().tabTCI().grdTCI_Elective().getValue().getPatient();
		}
		return voPatient;
	}
	
	public Boolean allocateBed()
	{
		AdmissionDetailVo voAdmissionDetail = form.getLocalContext().getAdmissionDetail();
		BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
		InpatientEpisodeLiteVo voInpatEpis = domain.getInpatientEpisode(form.lyrAdmission().tabInWaiting().grdInWaiting().getValue());
		
		//WDEV-16062
		if (voInpatEpis != null && voInpatEpis.getBedIsNotNull() && form.lyrAdmission().tabInWaiting().isVisible() && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
		{
			BedSpaceStateLiteVo temVo = domain.getBedSpaceState(voBedSpaceStateLite);

			if (temVo != null && temVo.getCurrentBedStatusIsNotNull() && BedStatus.AVAILABLE.equals(temVo.getCurrentBedStatus().getBedStatus()))
			{
				engine.showMessage("Patient has already been allocated to another bed. Screen will be refreshed.");
				form.lyrAdmission().tabInWaiting().grdInWaiting().getRows().clear();
				clearScreen();
				populateInWaitingTabFromData();
				return false;
			}
		}
		
		if(voAdmissionDetail == null)
		{
			engine.showErrors(new String[]{"No Admission Detail record found"});
			return false;
		}
		if(voBedSpaceStateLite == null)
		{
			engine.showErrors(new String[]{"No Bed Selected to Allocate"});
			return false;
		}
		if(voInpatEpis == null)
		{
			engine.showErrors(new String[]{"Please select a Patient"});
			return false;
		}				
		
		//copy to previous
		if(voBedSpaceStateLite != null && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceStateLite.getCurrentBedStatus().clone());
			voBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceStateLite.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
			voBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime());
		}
		
		try
		{
			domain.allocateBed(voBedSpaceStateLite, voInpatEpis, voAdmissionDetail, null);
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			if (form.lyrAdmission().tabInWaiting().isVisible()) //WDEV-16063
			{
				return true; //dialog will be closed as bed is already occupied
			}
			return false;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}

	@Override
	protected void onCcConsultantValueChanged() throws PresentationLogicException
	{
		MOSQueryEvent event = form.ccConsultant().getEventFired();
		if(event != null)
		{
			if(event.equals(MOSQueryEvent.VALUE_CHANGED))
			{
				listSpecialtiesForConsultant();
			}
			else //WDEV-16214
			{
				form.cmbCCOSpecialty().clear();
				form.cmbSpecialty().clear();
			}
		}
	}

	private void listSpecialtiesForConsultant()
	{
		if(form.ccConsultant().getValue() != null)
		{
			String pasMapping = domain.getPasMappingFromConsultant(form.ccConsultant().getValue()) ;
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				loadCCOSpecialties(pasMapping);
				loadSpecialties(pasMapping);
			}
			else
				loadSpecialties(pasMapping);
		}
		else //WDEV-16214
		{
			form.cmbCCOSpecialty().clear();
			form.cmbSpecialty().clear();
		}
	}

	private void loadCCOSpecialties(String pasMapping) 
	{
		form.cmbCCOSpecialty().clear();
		if(pasMapping != null)
		{
			PASSpecialtyCollection collSpec = null;
			try
			{
				collSpec = domain.listCCOSpecialtiesFromConSpc( pasMapping );
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage("PAS Error : " + e.getMessage());
				return;
			}
			for(int i=0; collSpec != null && i<collSpec.size();i++)
			{
				PASSpecialty inst = collSpec.get(i);
				form.cmbCCOSpecialty().newRow(inst, inst.getText());
			}
		}
	}

	private void loadSpecialties(String pasMapping)
	{
		form.cmbSpecialty().clear();
		if(pasMapping != null)
		{
			SpecialtyCollection collSpec = null;
			try
			{
				collSpec = domain.listSpecialtiesFromConSpc( pasMapping );
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage("PAS Error : " + e.getMessage());
				return;
			}
			
			
			for(int i=0 ; collSpec != null && i < collSpec.size();i++)
			{
				Specialty inst = collSpec.get(i);
				form.cmbSpecialty().newRow(inst, inst.getText());
			}
		}
		
		// WDEV-18568 - if USE_ELECTIVE_LIST_FUNCTIONALITY is TRUE and there are no rows in the specialty combo, then add in all active Specialty lookups to the combo
		if (form.cmbSpecialty().getValues().size() == 0 && ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
		{
			loadAllSpecialties();
		}
	}

	// WDEV-18568 - if USE_ELECTIVE_LIST_FUNCTIONALITY is TRUE and there are no rows in the specialty combo, then add in all active Specialty lookups to the combo
	private void loadAllSpecialties()
	{
		SpecialtyCollection listSpecialty = ims.core.vo.lookups.LookupHelper.getSpecialty(domain.getLookupService());
		
		for(int i = 0; i < listSpecialty.size(); i++)
		{
			if(Boolean.TRUE.equals(listSpecialty.get(i).isActive())) 
				form.cmbSpecialty().newRow(listSpecialty.get(i), listSpecialty.get(i).getText());
		}	
	}

	public Boolean getIsRecordSelected()
	{
		return form.getLocalContext().getRecordSelected();
	}

	//WDEV-12587
	@Override
	protected void onCmbSourceOfReferralValueChanged() throws PresentationLogicException 
	{
		showExtraUIControls();
		
		if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && form.lyrAdmission().tabTCI().isVisible())
			showExtraUIControls_ElectiveList();
		
		enableInstanceControls(true);
	}
	
	//WDEV-12587
	private void bindCmbSourceOfReferralLookup()
	{
		form.cmbSourceOfReferral().clear();
		
		SourceOfReferralCollection lookupCollection = LookupHelper.getSourceOfReferral(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			if(SourceOfReferral.CONSULTANT.equals(lookupCollection.get(x))
				&& ! ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO")) //wdev-13472
			{
				//DONT add consultant if its not WAITING tab
				//IF its WAITING tab, only add if its EmergencyAdmission
				if(!form.lyrAdmission().tabWaiting().isVisible() 
					|| (form.lyrAdmission().tabWaiting().isVisible() 
						&& (form.getLocalContext().getIsEmergencyAdmissionTab() == null 
							|| (form.getLocalContext().getIsEmergencyAdmissionTabIsNotNull() 
								&& !form.getLocalContext().getIsEmergencyAdmissionTab()))))
						continue;
			}
			
			form.cmbSourceOfReferral().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}

	@Override
	protected void onRadioButtonCaseFolderYesNoValueChanged() throws PresentationLogicException
	{
		CaseFolderYesNoEnumeration val = form.CaseFolderYesNo().getValue();
		if(val.equals(CaseFolderYesNoEnumeration.rdoYes))
		{
			form.txtCaseComment().setEnabled(true);
		}
		else if(val.equals(CaseFolderYesNoEnumeration.rdoNo))
		{
			form.txtCaseComment().setEnabled(false);
			form.txtCaseComment().setValue(null);
		}
	}

	@Override
	protected void onIntAntStayValueChanged() throws PresentationLogicException
	{
		if(form.intAntStay().getValue() != null && form.intAntStay().getValue() > 0)
		{
			Date newRevisedDate = new Date();
			newRevisedDate.addDay(form.intAntStay().getValue());
			form.dteEstDischarge().setValue(newRevisedDate);
		}	
		else if(form.intAntStay().getValue() != null && form.intAntStay().getValue() == 0)
			form.dteEstDischarge().setValue(new Date());
		else
			form.dteEstDischarge().setValue(null);
	}

	public Boolean getIsReturnFromLeaveVisible()
	{
		return form.getLocalContext().getIsReturnFromLeaveVisible();
	}

	public Boolean returnFromLeave() 
	{
		AdmissionDetailVo voAdmissionDetail = form.getLocalContext().getAdmissionDetail();
		BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
		InpatientEpisodeLiteVo voInpatEpis = form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue();
		
		if(form.dteHLDateReturn().getValue() == null
			|| form.timHLTimeOfReturn().getValue() == null)
		{
			engine.showErrors(new String[]{"Please select a Return Date and Time"});
			return false;
		}				

		if(voAdmissionDetail == null)
		{
			engine.showErrors(new String[]{"No Admission Detail record found"});
			return false;
		}
		if(voBedSpaceStateLite == null)
		{
			engine.showErrors(new String[]{"No Bed Selected to Allocate"});
			return false;
		}
		if(voInpatEpis == null)
		{
			engine.showErrors(new String[]{"Please select a Patient"});
			return false;
		}				
		
		if (voInpatEpis.getDateOnHomeLeaveIsNotNull()
			&& form.dteHLDateReturn().getValue().isLessThan(voInpatEpis.getDateOnHomeLeave()))
		{
			engine.showErrors(new String[]{"Date of Return cannot be less than Date on Home Leave."});
			return false;
		}				
			
		HomeLeaveVo voHL = new HomeLeaveVo();
		voHL.setDateReturnedFromHomeLeave(form.dteHLDateReturn().getValue());
		voHL.setTimeReturnedFromHomeLeave(form.timHLTimeOfReturn().getValue());
		
		//copy to previous
		if(voBedSpaceStateLite != null && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceStateLite.getCurrentBedStatus().clone());
			voBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceStateLite.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
			voBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime());
		}
		try
		{
			domain.allocateBed(voBedSpaceStateLite, voInpatEpis, voAdmissionDetail, voHL);
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			return false;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}

	@Override
	protected void onGrdHomeLeaveSelectionChanged() throws PresentationLogicException 
	{
		form.getLocalContext().setAdmissionDetail(null);
		clearScreen();
		if(form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue() == null)
			return;

		form.dteHLDateReturn().setEnabled(true);
		form.timHLTimeOfReturn().setEnabled(true);
		form.dteHLDateReturn().setValue(new Date());
	
		form.getLocalContext().setRecordSelected(true);
		
		InpatientEpisodeLiteVo voInWaiting = form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue();
		AdmissionDetailVo voAdmission = domain.getAdmissionDetailByPasEvent(voInWaiting.getPasEvent());
		if(voAdmission == null)
			return;
		
		form.getLocalContext().setAdmissionDetail(voAdmission);
		form.fireCustomControlValueChanged();
	}

	
	protected void onChkTodayOnlyValueChanged()throws PresentationLogicException 
	{
		updatePlannedTabDateSearchCriteria();
		
		if (Boolean.TRUE.equals(form.lyrAdmission().tabPlanned().chkTodayOnly().getValue()))
			search();
		else
		{
			clearPlannedTabDetails(false);
		}
	}

	private void updatePlannedTabDateSearchCriteria() 
	{
		Boolean todayOnly = Boolean.TRUE.equals(form.lyrAdmission().tabPlanned().chkTodayOnly().getValue());
		
		Date fromDate = todayOnly ? new Date().addDay(0) : new Date().addDay(-7);
		Date toDate = todayOnly ? new Date().addDay(0) : new Date().addDay(7);
		
		form.lyrAdmission().tabPlanned().dteFrom().setValue(fromDate);
		form.lyrAdmission().tabPlanned().dteTo().setValue(toDate);
		
		enableDateSearch(!todayOnly);
	}

	private void enableDateSearch(Boolean dateIntervalSearchCriteriaEnabled) 
	{
		form.lyrAdmission().tabPlanned().dteFrom().setEnabled(dateIntervalSearchCriteriaEnabled);
		form.lyrAdmission().tabPlanned().dteTo().setEnabled(dateIntervalSearchCriteriaEnabled);		
	}

	@Override
	protected void onImbTCI_ClearClick() throws PresentationLogicException
	{
		// Clear TCI tab grid && search criteria
		form.lyrAdmission().tabTCI().dteTCI_From().setValue(null);
		form.lyrAdmission().tabTCI().dteTCI_To().setValue(null);
		form.lyrAdmission().tabTCI().chkTCI_Today().setValue(false);
		form.lyrAdmission().tabTCI().grdTCI_Elective().getRows().clear();

		// Clear selection
		form.getLocalContext().setTCIElectiveAdmission(null);
		clearSelection();
		
		// Clear TCI controls
		clearScreen();
		showExtraUIControls_ElectiveList();
		
		// Disable controls
		enableInstanceControls(false);
	}

	@Override
	protected void onImbTCI_SearchClick() throws PresentationLogicException
	{
		clearSelection();
		form.getLocalContext().setTCIElectiveAdmission(null);
		clearScreen();
		showExtraUIControls_ElectiveList();
		enableInstanceControls(false);
		
		populateTCITabFromData(form.lyrAdmission().tabTCI().dteTCI_From().getValue(), form.lyrAdmission().tabTCI().dteTCI_To().getValue(), true);
	}

	@Override
	protected void onChkTCI_TodayValueChanged() throws PresentationLogicException
	{
		form.lyrAdmission().tabTCI().dteTCI_From().setValue(new Date());
		form.lyrAdmission().tabTCI().dteTCI_To().setValue(new Date());
		
		clearSelection();
		form.getLocalContext().setTCIElectiveAdmission(null);
		clearScreen();
		showExtraUIControls_ElectiveList();
		enableInstanceControls(false);
		
		populateTCITabFromData(form.lyrAdmission().tabTCI().dteTCI_From().getValue(), form.lyrAdmission().tabTCI().dteTCI_To().getValue(), true);
	}

	@Override
	protected void onDteTCITo_ValueChanged() throws PresentationLogicException
	{
		form.lyrAdmission().tabTCI().chkTCI_Today().setValue(Boolean.FALSE);
	}

	@Override
	protected void onDteTCIFrom_ValueChanged() throws PresentationLogicException
	{
		form.lyrAdmission().tabTCI().chkTCI_Today().setValue(Boolean.FALSE);
	}


	@Override
	protected void onCmbSpecialtyValueChanged() throws PresentationLogicException
	{
		populateService(form.cmbSpecialty().getValue());
	}


	private void populateService(Specialty specialty)
	{
		form.cmbService().clear();
		
		if (specialty == null)
			return;
		
		ServiceLiteVoCollection services = domain.getServicesBySpecialty(specialty);
		
		if (services != null)
		{
			for (ServiceLiteVo service : services)
			{
				form.cmbService().newRow(service, service.getServiceName());
			}
			
			if (services.size() == 1)
				form.cmbService().setValue(services.get(0));
		}
	}
}
