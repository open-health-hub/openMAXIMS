//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.bedadmissioncomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrAdmissionLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabBookedContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdElectiveRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdElectiveRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDOB()
				{
					return (String)super.row.get(5);
				}
				public void setColDOB(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVo getValue()
				{
					return (ims.core.vo.PendingElectiveAdmissionAdmitVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdElectiveRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdElectiveRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdElectiveRow get(int index)
				{
					return new grdElectiveRow(super.collection.get(index));
				}
				public grdElectiveRow newRow()
				{
					return new grdElectiveRow(super.collection.newRow());
				}
				public grdElectiveRow newRow(boolean autoSelect)
				{
					return new grdElectiveRow(super.collection.newRow(autoSelect));
				}
				public grdElectiveRow newRowAt(int index)
				{
					return new grdElectiveRow(super.collection.newRowAt(index));
				}
				public grdElectiveRow newRowAt(int index, boolean autoSelect)
				{
					return new grdElectiveRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdElectiveGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVoCollection getValues()
				{
					ims.core.vo.PendingElectiveAdmissionAdmitVoCollection listOfValues = new ims.core.vo.PendingElectiveAdmissionAdmitVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVo getValue()
				{
					return (ims.core.vo.PendingElectiveAdmissionAdmitVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					super.grid.setValue(value);
				}
				public grdElectiveRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdElectiveRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdElectiveRowCollection getRows()
				{
					return new grdElectiveRowCollection(super.grid.getRows());
				}
				public grdElectiveRow getRowByValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdElectiveRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 636, 134, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdElectiveTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdElectiveTemp);
				grdElectiveGrid grdElective = (grdElectiveGrid)GridFlyweightFactory.getInstance().createGridBridge(grdElectiveGrid.class, m_grdElectiveTemp);
				grdElective.addStringColumn("Surname", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElective.addStringColumn("Forename", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElective.addStringColumn("NHS No.", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElective.addStringColumn("Sex", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElective.addStringColumn("Age", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElective.addStringColumn("DOB", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdElective);
			}

			public grdElectiveGrid grdElective()
			{
				return (grdElectiveGrid)super.getGrid(0);
			}
		}
		public static class tabEmergencyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdEmergencyRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdEmergencyRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDobReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDobReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDobOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDob()
				{
					return (String)super.row.get(5);
				}
				public void setColDob(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDobTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.PendingEmergencyAdmissionAdmitVo getValue()
				{
					return (ims.core.vo.PendingEmergencyAdmissionAdmitVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PendingEmergencyAdmissionAdmitVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdEmergencyRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdEmergencyRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdEmergencyRow get(int index)
				{
					return new grdEmergencyRow(super.collection.get(index));
				}
				public grdEmergencyRow newRow()
				{
					return new grdEmergencyRow(super.collection.newRow());
				}
				public grdEmergencyRow newRow(boolean autoSelect)
				{
					return new grdEmergencyRow(super.collection.newRow(autoSelect));
				}
				public grdEmergencyRow newRowAt(int index)
				{
					return new grdEmergencyRow(super.collection.newRowAt(index));
				}
				public grdEmergencyRow newRowAt(int index, boolean autoSelect)
				{
					return new grdEmergencyRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdEmergencyGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection getValues()
				{
					ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection listOfValues = new ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PendingEmergencyAdmissionAdmitVo getValue()
				{
					return (ims.core.vo.PendingEmergencyAdmissionAdmitVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PendingEmergencyAdmissionAdmitVo value)
				{
					super.grid.setValue(value);
				}
				public grdEmergencyRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdEmergencyRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdEmergencyRowCollection getRows()
				{
					return new grdEmergencyRowCollection(super.grid.getRows());
				}
				public grdEmergencyRow getRowByValue(ims.core.vo.PendingEmergencyAdmissionAdmitVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdEmergencyRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDobHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDobHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 636, 134, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdEmergencyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdEmergencyTemp);
				grdEmergencyGrid grdEmergency = (grdEmergencyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdEmergencyGrid.class, m_grdEmergencyTemp);
				grdEmergency.addStringColumn("Surname", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEmergency.addStringColumn("Forename", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEmergency.addStringColumn("NHS No.", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEmergency.addStringColumn("Sex", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEmergency.addStringColumn("Age", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEmergency.addStringColumn("DOB", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdEmergency);
			}

			public grdEmergencyGrid grdEmergency()
			{
				return (grdEmergencyGrid)super.getGrid(0);
			}
		}
		public static class tabPlannedContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdTCIRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTCIRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDobReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDobReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDobOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDob()
				{
					return (String)super.row.get(5);
				}
				public void setColDob(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDobTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVo getValue()
				{
					return (ims.core.vo.PendingElectiveAdmissionAdmitVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTCIRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTCIRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTCIRow get(int index)
				{
					return new grdTCIRow(super.collection.get(index));
				}
				public grdTCIRow newRow()
				{
					return new grdTCIRow(super.collection.newRow());
				}
				public grdTCIRow newRow(boolean autoSelect)
				{
					return new grdTCIRow(super.collection.newRow(autoSelect));
				}
				public grdTCIRow newRowAt(int index)
				{
					return new grdTCIRow(super.collection.newRowAt(index));
				}
				public grdTCIRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTCIRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTCIGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVoCollection getValues()
				{
					ims.core.vo.PendingElectiveAdmissionAdmitVoCollection listOfValues = new ims.core.vo.PendingElectiveAdmissionAdmitVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVo getValue()
				{
					return (ims.core.vo.PendingElectiveAdmissionAdmitVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					super.grid.setValue(value);
				}
				public grdTCIRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTCIRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTCIRowCollection getRows()
				{
					return new grdTCIRowCollection(super.grid.getRows());
				}
				public grdTCIRow getRowByValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTCIRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDobHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDobHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 200, 10, 26, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 10, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From :", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 240, 8, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 64, 8, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 384, 10, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Today Only", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 636, 102, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdTCITemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTCITemp);
				grdTCIGrid grdTCI = (grdTCIGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTCIGrid.class, m_grdTCITemp);
				grdTCI.addStringColumn("Surname", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI.addStringColumn("Forename", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI.addStringColumn("NHS No.", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI.addStringColumn("Sex", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI.addStringColumn("Age", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI.addStringColumn("DOB", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdTCI);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 620, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 588, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for patients matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public DateControl dteTo()
			{
				return (DateControl)super.getControl(2);
			}
			public DateControl dteFrom()
			{
				return (DateControl)super.getControl(3);
			}
			public CheckBox chkTodayOnly()
			{
				return (CheckBox)super.getControl(4);
			}
			public grdTCIGrid grdTCI()
			{
				return (grdTCIGrid)super.getGrid(0);
			}
			public ImageButton imbClear()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbSearch()
			{
				return (ImageButton)super.getControl(7);
			}
		}
		public static class tabWaitingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbIdTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PatIdType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PatIdType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PatIdType getValue()
				{
					return (ims.core.vo.lookups.PatIdType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatIdType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdPatientsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPatientsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDobReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDobReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDobOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDob()
				{
					return (String)super.row.get(5);
				}
				public void setColDob(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDobTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.PatientShort getValue()
				{
					return (ims.core.vo.PatientShort)super.row.getValue();
				}
				public void setValue(ims.core.vo.PatientShort value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPatientsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPatientsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPatientsRow get(int index)
				{
					return new grdPatientsRow(super.collection.get(index));
				}
				public grdPatientsRow newRow()
				{
					return new grdPatientsRow(super.collection.newRow());
				}
				public grdPatientsRow newRow(boolean autoSelect)
				{
					return new grdPatientsRow(super.collection.newRow(autoSelect));
				}
				public grdPatientsRow newRowAt(int index)
				{
					return new grdPatientsRow(super.collection.newRowAt(index));
				}
				public grdPatientsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPatientsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPatientsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.PatientShortCollection getValues()
				{
					ims.core.vo.PatientShortCollection listOfValues = new ims.core.vo.PatientShortCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PatientShort getValue()
				{
					return (ims.core.vo.PatientShort)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PatientShort value)
				{
					super.grid.setValue(value);
				}
				public grdPatientsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPatientsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPatientsRowCollection getRows()
				{
					return new grdPatientsRowCollection(super.grid.getRows());
				}
				public grdPatientsRow getRowByValue(ims.core.vo.PatientShort value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPatientsRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDobHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDobHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 34, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID Value :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 10, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID Type :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 224, 10, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 224, 34, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forename :", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 88, 32, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 296, 8, 180, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 296, 32, 180, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 88, 8, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbIdTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.ENABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbIdTypeTemp);
				cmbIdTypeComboBox cmbIdType = (cmbIdTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIdTypeComboBox.class, m_cmbIdTypeTemp);
				super.addComboBox(cmbIdType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 58, 636, 84, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdPatientsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPatientsTemp);
				grdPatientsGrid grdPatients = (grdPatientsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPatientsGrid.class, m_grdPatientsTemp);
				grdPatients.addStringColumn("Surname", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Forename", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("NHS No.", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Sex", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Age", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("DOB", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdPatients);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 620, 16, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 588, 16, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for patients matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public TextBox txtIdValue()
			{
				return (TextBox)super.getControl(4);
			}
			public TextBox txtSurname()
			{
				return (TextBox)super.getControl(5);
			}
			public TextBox txtForename()
			{
				return (TextBox)super.getControl(6);
			}
			public cmbIdTypeComboBox cmbIdType()
			{
				return (cmbIdTypeComboBox)super.getComboBox(0);
			}
			public grdPatientsGrid grdPatients()
			{
				return (grdPatientsGrid)super.getGrid(0);
			}
			public ImageButton imbClearWait()
			{
				return (ImageButton)super.getControl(9);
			}
			public ImageButton imbSearchWait()
			{
				return (ImageButton)super.getControl(10);
			}
		}
		public static class tabInWaitingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdInWaitingRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdInWaitingRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDobReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDobReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDobOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDob()
				{
					return (String)super.row.get(5);
				}
				public void setColDob(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDobTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdInWaitingRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdInWaitingRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdInWaitingRow get(int index)
				{
					return new grdInWaitingRow(super.collection.get(index));
				}
				public grdInWaitingRow newRow()
				{
					return new grdInWaitingRow(super.collection.newRow());
				}
				public grdInWaitingRow newRow(boolean autoSelect)
				{
					return new grdInWaitingRow(super.collection.newRow(autoSelect));
				}
				public grdInWaitingRow newRowAt(int index)
				{
					return new grdInWaitingRow(super.collection.newRowAt(index));
				}
				public grdInWaitingRow newRowAt(int index, boolean autoSelect)
				{
					return new grdInWaitingRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdInWaitingGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVoCollection getValues()
				{
					ims.core.vo.InpatientEpisodeLiteVoCollection listOfValues = new ims.core.vo.InpatientEpisodeLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdInWaitingRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdInWaitingRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdInWaitingRowCollection getRows()
				{
					return new grdInWaitingRowCollection(super.grid.getRows());
				}
				public grdInWaitingRow getRowByValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdInWaitingRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDobHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDobHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 636, 126, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdInWaitingTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdInWaitingTemp);
				grdInWaitingGrid grdInWaiting = (grdInWaitingGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInWaitingGrid.class, m_grdInWaitingTemp);
				grdInWaiting.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInWaiting.addStringColumn("Forename", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInWaiting.addStringColumn("NHS No.", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInWaiting.addStringColumn("Sex", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInWaiting.addStringColumn("Age", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInWaiting.addStringColumn("DOB", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdInWaiting);
			}

			public grdInWaitingGrid grdInWaiting()
			{
				return (grdInWaitingGrid)super.getGrid(0);
			}
		}
		public static class tabHomeLeaveContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdHomeLeaveRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdHomeLeaveRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDobReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDobReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDobOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDob()
				{
					return (String)super.row.get(5);
				}
				public void setColDob(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDobTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdHomeLeaveRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdHomeLeaveRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdHomeLeaveRow get(int index)
				{
					return new grdHomeLeaveRow(super.collection.get(index));
				}
				public grdHomeLeaveRow newRow()
				{
					return new grdHomeLeaveRow(super.collection.newRow());
				}
				public grdHomeLeaveRow newRow(boolean autoSelect)
				{
					return new grdHomeLeaveRow(super.collection.newRow(autoSelect));
				}
				public grdHomeLeaveRow newRowAt(int index)
				{
					return new grdHomeLeaveRow(super.collection.newRowAt(index));
				}
				public grdHomeLeaveRow newRowAt(int index, boolean autoSelect)
				{
					return new grdHomeLeaveRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdHomeLeaveGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVoCollection getValues()
				{
					ims.core.vo.InpatientEpisodeLiteVoCollection listOfValues = new ims.core.vo.InpatientEpisodeLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdHomeLeaveRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdHomeLeaveRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdHomeLeaveRowCollection getRows()
				{
					return new grdHomeLeaveRowCollection(super.grid.getRows());
				}
				public grdHomeLeaveRow getRowByValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdHomeLeaveRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDobHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDobHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 11, 636, 126, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdHomeLeaveTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdHomeLeaveTemp);
				grdHomeLeaveGrid grdHomeLeave = (grdHomeLeaveGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHomeLeaveGrid.class, m_grdHomeLeaveTemp);
				grdHomeLeave.addStringColumn("Surname", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHomeLeave.addStringColumn("Forename", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHomeLeave.addStringColumn("NHS No.", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHomeLeave.addStringColumn("Sex", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHomeLeave.addStringColumn("Age", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHomeLeave.addStringColumn("DOB", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdHomeLeave);
			}

			public grdHomeLeaveGrid grdHomeLeave()
			{
				return (grdHomeLeaveGrid)super.getGrid(0);
			}
		}
		public static class tabTCIContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdTCI_ElectiveRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTCI_ElectiveRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColNHSReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColNHSReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColNHSOpened()
				{
					super.row.showOpened(2);
				}
				public String getColNHS()
				{
					return (String)super.row.get(2);
				}
				public void setColNHS(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColNHSTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public Integer getColAge()
				{
					return (Integer)super.row.get(4);
				}
				public void setColAge(Integer value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(5);
				}
				public ims.framework.utils.PartialDate getColDOB()
				{
					return (ims.framework.utils.PartialDate)super.row.get(5);
				}
				public void setColDOB(ims.framework.utils.PartialDate value)
				{
					super.row.set(5, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.RefMan.vo.PatientElectiveListBedInfoVo getValue()
				{
					return (ims.RefMan.vo.PatientElectiveListBedInfoVo)super.row.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientElectiveListBedInfoVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTCI_ElectiveRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTCI_ElectiveRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTCI_ElectiveRow get(int index)
				{
					return new grdTCI_ElectiveRow(super.collection.get(index));
				}
				public grdTCI_ElectiveRow newRow()
				{
					return new grdTCI_ElectiveRow(super.collection.newRow());
				}
				public grdTCI_ElectiveRow newRow(boolean autoSelect)
				{
					return new grdTCI_ElectiveRow(super.collection.newRow(autoSelect));
				}
				public grdTCI_ElectiveRow newRowAt(int index)
				{
					return new grdTCI_ElectiveRow(super.collection.newRowAt(index));
				}
				public grdTCI_ElectiveRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTCI_ElectiveRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTCI_ElectiveGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public ims.RefMan.vo.PatientElectiveListBedInfoVoCollection getValues()
				{
					ims.RefMan.vo.PatientElectiveListBedInfoVoCollection listOfValues = new ims.RefMan.vo.PatientElectiveListBedInfoVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.RefMan.vo.PatientElectiveListBedInfoVo getValue()
				{
					return (ims.RefMan.vo.PatientElectiveListBedInfoVo)super.grid.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientElectiveListBedInfoVo value)
				{
					super.grid.setValue(value);
				}
				public grdTCI_ElectiveRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTCI_ElectiveRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTCI_ElectiveRowCollection getRows()
				{
					return new grdTCI_ElectiveRowCollection(super.grid.getRows());
				}
				public grdTCI_ElectiveRow getRowByValue(ims.RefMan.vo.PatientElectiveListBedInfoVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTCI_ElectiveRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColNHSHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColNHSHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 168, 16, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 192, 14, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 48, 14, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 320, 16, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Today Only", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 10, 48, 648, 96, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdTCI_ElectiveTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTCI_ElectiveTemp);
				grdTCI_ElectiveGrid grdTCI_Elective = (grdTCI_ElectiveGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTCI_ElectiveGrid.class, m_grdTCI_ElectiveTemp);
				grdTCI_Elective.addStringColumn("Surname", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI_Elective.addStringColumn("Forename", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI_Elective.addStringColumn("NHS", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI_Elective.addStringColumn("Sex", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI_Elective.addIntColumn("Age", 0, 0, 100, true, true, null, false, 0, true);
				grdTCI_Elective.addPartialDateColumn("DOB", 0, 0, 100, true, true, null, false, 0, true);
				super.addGrid(grdTCI_Elective);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 624, 8, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 584, 8, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public DateControl dteTCI_To()
			{
				return (DateControl)super.getControl(2);
			}
			public DateControl dteTCI_From()
			{
				return (DateControl)super.getControl(3);
			}
			public CheckBox chkTCI_Today()
			{
				return (CheckBox)super.getControl(4);
			}
			public grdTCI_ElectiveGrid grdTCI_Elective()
			{
				return (grdTCI_ElectiveGrid)super.getGrid(0);
			}
			public ImageButton imbTCI_Clear()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbTCI_Search()
			{
				return (ImageButton)super.getControl(7);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 676, 174, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabBooked = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Booked", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabBookedContainer m_tabBookedContainer = (tabBookedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBookedContainer.class, m_tabBooked, factory);
			super.addContainer(m_tabBooked, m_tabBookedContainer);
			ims.framework.utils.SizeInfo m_tabBookedDesignSize = new ims.framework.utils.SizeInfo(676, 174);
			ims.framework.utils.SizeInfo m_tabBookedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper32.getWidth(), anchoringHelper32.getHeight());
			m_tabBookedContainer.setContext(form, appForm, m_tabBooked, loader, form_images_local, startControlID, m_tabBookedDesignSize, m_tabBookedRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 676, 174, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabEmergency = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"A&E", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabEmergencyContainer m_tabEmergencyContainer = (tabEmergencyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEmergencyContainer.class, m_tabEmergency, factory);
			super.addContainer(m_tabEmergency, m_tabEmergencyContainer);
			ims.framework.utils.SizeInfo m_tabEmergencyDesignSize = new ims.framework.utils.SizeInfo(676, 174);
			ims.framework.utils.SizeInfo m_tabEmergencyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper33.getWidth(), anchoringHelper33.getHeight());
			m_tabEmergencyContainer.setContext(form, appForm, m_tabEmergency, loader, form_images_local, startControlID, m_tabEmergencyDesignSize, m_tabEmergencyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 676, 174, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabPlanned = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Planned", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPlannedContainer m_tabPlannedContainer = (tabPlannedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPlannedContainer.class, m_tabPlanned, factory);
			super.addContainer(m_tabPlanned, m_tabPlannedContainer);
			ims.framework.utils.SizeInfo m_tabPlannedDesignSize = new ims.framework.utils.SizeInfo(676, 174);
			ims.framework.utils.SizeInfo m_tabPlannedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper34.getWidth(), anchoringHelper34.getHeight());
			m_tabPlannedContainer.setContext(form, appForm, m_tabPlanned, loader, form_images_local, startControlID, m_tabPlannedDesignSize, m_tabPlannedRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 676, 174, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabWaiting = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Waiting Area - Admission", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabWaitingContainer m_tabWaitingContainer = (tabWaitingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabWaitingContainer.class, m_tabWaiting, factory);
			super.addContainer(m_tabWaiting, m_tabWaitingContainer);
			ims.framework.utils.SizeInfo m_tabWaitingDesignSize = new ims.framework.utils.SizeInfo(676, 174);
			ims.framework.utils.SizeInfo m_tabWaitingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper35.getWidth(), anchoringHelper35.getHeight());
			m_tabWaitingContainer.setContext(form, appForm, m_tabWaiting, loader, form_images_local, startControlID, m_tabWaitingDesignSize, m_tabWaitingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 676, 174, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabInWaiting = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Awaiting Bed - Waiting Area", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabInWaitingContainer m_tabInWaitingContainer = (tabInWaitingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInWaitingContainer.class, m_tabInWaiting, factory);
			super.addContainer(m_tabInWaiting, m_tabInWaitingContainer);
			ims.framework.utils.SizeInfo m_tabInWaitingDesignSize = new ims.framework.utils.SizeInfo(676, 174);
			ims.framework.utils.SizeInfo m_tabInWaitingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper36.getWidth(), anchoringHelper36.getHeight());
			m_tabInWaitingContainer.setContext(form, appForm, m_tabInWaiting, loader, form_images_local, startControlID, m_tabInWaitingDesignSize, m_tabInWaitingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 676, 174, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabHomeLeave = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Return from Leave", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabHomeLeaveContainer m_tabHomeLeaveContainer = (tabHomeLeaveContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHomeLeaveContainer.class, m_tabHomeLeave, factory);
			super.addContainer(m_tabHomeLeave, m_tabHomeLeaveContainer);
			ims.framework.utils.SizeInfo m_tabHomeLeaveDesignSize = new ims.framework.utils.SizeInfo(676, 174);
			ims.framework.utils.SizeInfo m_tabHomeLeaveRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper37.getWidth(), anchoringHelper37.getHeight());
			m_tabHomeLeaveContainer.setContext(form, appForm, m_tabHomeLeave, loader, form_images_local, startControlID, m_tabHomeLeaveDesignSize, m_tabHomeLeaveRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 676, 174, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabTCI = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"TCIs", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTCIContainer m_tabTCIContainer = (tabTCIContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTCIContainer.class, m_tabTCI, factory);
			super.addContainer(m_tabTCI, m_tabTCIContainer);
			ims.framework.utils.SizeInfo m_tabTCIDesignSize = new ims.framework.utils.SizeInfo(676, 174);
			ims.framework.utils.SizeInfo m_tabTCIRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
			m_tabTCIContainer.setContext(form, appForm, m_tabTCI, loader, form_images_local, startControlID, m_tabTCIDesignSize, m_tabTCIRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabBooked().setVisible(false);
			tabEmergency().setVisible(false);
			tabPlanned().setVisible(false);
			tabWaiting().setVisible(false);
			tabInWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabTCI().setVisible(false);
		}
		public void settabBookedEnabled(boolean value)
		{
			tabBooked().setEnabled(value);
		}
		public void settabEmergencyEnabled(boolean value)
		{
			tabEmergency().setEnabled(value);
		}
		public void settabPlannedEnabled(boolean value)
		{
			tabPlanned().setEnabled(value);
		}
		public void settabWaitingEnabled(boolean value)
		{
			tabWaiting().setEnabled(value);
		}
		public void settabInWaitingEnabled(boolean value)
		{
			tabInWaiting().setEnabled(value);
		}
		public void settabHomeLeaveEnabled(boolean value)
		{
			tabHomeLeave().setEnabled(value);
		}
		public void settabTCIEnabled(boolean value)
		{
			tabTCI().setEnabled(value);
		}
		public void showtabBooked()
		{
			tabEmergency().setVisible(false);
			tabPlanned().setVisible(false);
			tabWaiting().setVisible(false);
			tabInWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabTCI().setVisible(false);
			tabBooked().setVisible(true);
		}
		public void showtabEmergency()
		{
			tabBooked().setVisible(false);
			tabPlanned().setVisible(false);
			tabWaiting().setVisible(false);
			tabInWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabTCI().setVisible(false);
			tabEmergency().setVisible(true);
		}
		public void showtabPlanned()
		{
			tabBooked().setVisible(false);
			tabEmergency().setVisible(false);
			tabWaiting().setVisible(false);
			tabInWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabTCI().setVisible(false);
			tabPlanned().setVisible(true);
		}
		public void showtabWaiting()
		{
			tabBooked().setVisible(false);
			tabEmergency().setVisible(false);
			tabPlanned().setVisible(false);
			tabInWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabTCI().setVisible(false);
			tabWaiting().setVisible(true);
		}
		public void showtabInWaiting()
		{
			tabBooked().setVisible(false);
			tabEmergency().setVisible(false);
			tabPlanned().setVisible(false);
			tabWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabTCI().setVisible(false);
			tabInWaiting().setVisible(true);
		}
		public void showtabHomeLeave()
		{
			tabBooked().setVisible(false);
			tabEmergency().setVisible(false);
			tabPlanned().setVisible(false);
			tabWaiting().setVisible(false);
			tabInWaiting().setVisible(false);
			tabTCI().setVisible(false);
			tabHomeLeave().setVisible(true);
		}
		public void showtabTCI()
		{
			tabBooked().setVisible(false);
			tabEmergency().setVisible(false);
			tabPlanned().setVisible(false);
			tabWaiting().setVisible(false);
			tabInWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabTCI().setVisible(true);
		}

		public tabBookedContainer tabBooked()
		{
			return (tabBookedContainer)super.layers.get(0);
		}
		public tabEmergencyContainer tabEmergency()
		{
			return (tabEmergencyContainer)super.layers.get(1);
		}
		public tabPlannedContainer tabPlanned()
		{
			return (tabPlannedContainer)super.layers.get(2);
		}
		public tabWaitingContainer tabWaiting()
		{
			return (tabWaitingContainer)super.layers.get(3);
		}
		public tabInWaitingContainer tabInWaiting()
		{
			return (tabInWaitingContainer)super.layers.get(4);
		}
		public tabHomeLeaveContainer tabHomeLeave()
		{
			return (tabHomeLeaveContainer)super.layers.get(5);
		}
		public tabTCIContainer tabTCI()
		{
			return (tabTCIContainer)super.layers.get(6);
		}
	}
	public static class cmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceLiteVo getValue()
		{
			return (ims.core.vo.ServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbEpisodeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo getValue()
		{
			return (ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWardTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.WardType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.WardType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.WardType getValue()
		{
			return (ims.core.vo.lookups.WardType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.WardType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSourceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.SourceOfAdmission value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.SourceOfAdmission getValue()
		{
			return (ims.core.vo.lookups.SourceOfAdmission)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.SourceOfAdmission value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbMethodComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.MethodOfAdmission value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.MethodOfAdmission getValue()
		{
			return (ims.core.vo.lookups.MethodOfAdmission)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.MethodOfAdmission value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPatientStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PatientStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PatientStatus getValue()
		{
			return (ims.core.vo.lookups.PatientStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PatientStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSourceOfReferralComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.SourceOfReferral value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.SourceOfReferral getValue()
		{
			return (ims.core.vo.lookups.SourceOfReferral)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.SourceOfReferral value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWardComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbCCOSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PASSpecialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PASSpecialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PASSpecialty getValue()
		{
			return (ims.core.vo.lookups.PASSpecialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PASSpecialty value)
		{
			super.control.setValue(value);
		}
	}

	public static class CaseFolderYesNoRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 208, 358, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper39.getX(), anchoringHelper39.getY(), anchoringHelper39.getWidth(), "No", startTabIndex.intValue() + 2046);
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 160, 358, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper40.getX(), anchoringHelper40.getY(), anchoringHelper40.getWidth(), "Yes", startTabIndex.intValue() + 2045);
		}
		public void setText(CaseFolderYesNoEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public CaseFolderYesNoEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return CaseFolderYesNoEnumeration.None;
				case 0: return CaseFolderYesNoEnumeration.rdoNo;
				case 1: return CaseFolderYesNoEnumeration.rdoYes;
			}
			return null;
		}
		public void setValue(CaseFolderYesNoEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(CaseFolderYesNoEnumeration.None.id);
		}
		public boolean isEnabled(CaseFolderYesNoEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(CaseFolderYesNoEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(CaseFolderYesNoEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(CaseFolderYesNoEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class CaseFolderYesNoEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static CaseFolderYesNoEnumeration None = new CaseFolderYesNoEnumeration(-1);
		public static CaseFolderYesNoEnumeration rdoNo = new CaseFolderYesNoEnumeration(0);
		public static CaseFolderYesNoEnumeration rdoYes = new CaseFolderYesNoEnumeration(1);
		private CaseFolderYesNoEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((CaseFolderYesNoEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.ADTWard", "_cv_Core.ADTWard").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.ADTWard' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(680, 416);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 128, 205, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper41.getSize(), instance1, startTabIndex.intValue() + 28, skipContextValidation);
		//ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(128), new Integer(205), new Integer(192), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 28), m_ccConsultantForm, instance1 } );
		ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1039),  new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 28), m_ccConsultantForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccConsultantControl);
		Menu[] menus1 = m_ccConsultantForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 440, 328, 232, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ims.framework.FormUiLogic m_ccReferringConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper42.getSize(), instance2, startTabIndex.intValue() + 1044, skipContextValidation);
		//ims.framework.Control m_ccReferringConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(440), new Integer(328), new Integer(232), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 1044), m_ccReferringConsultantForm, instance2 } );
		ims.framework.Control m_ccReferringConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1041),  new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 1044), m_ccReferringConsultantForm, instance2, Boolean.FALSE } );
		super.addControl(m_ccReferringConsultantControl);
		Menu[] menus2 = m_ccReferringConsultantForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}

		// Layer Clasess
		lyrAdmissionLayer m_lyrAdmissionLayer = (lyrAdmissionLayer)LayerFlyweightFactory.getInstance().createLayer(lyrAdmissionLayer.class, this, factory);
		super.addLayer(m_lyrAdmissionLayer);
		m_lyrAdmissionLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 16, 256, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 16, 208, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time of Return :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 16, 184, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Return :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 16, 382, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Episode :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 272, 358, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 16, 358, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Update Casefolder Location", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 272, 282, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Anticipated Stay:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 16, 182, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 320, 182, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Ward Type:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 320, 207, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Source of Admission : ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 16, 207, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 16, 231, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 320, 231, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Method of Admission :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 440, 282, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Est. Discharge Date :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 16, 282, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admit Date/Time :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 16, 306, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Admission :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 320, 256, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Patient Status:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 16, 330, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source Of Referral:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 320, 330, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referring Consultant:", new Integer(0), null, new Integer(0)}));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 128, 304, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 1039), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(32), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 344, 356, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 2047), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 544, 280, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 1034), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 128, 180, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 128, 280, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 1032), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 128, 254, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbServiceTemp);
		cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
		super.addComboBox(cmbService);
		RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 128, 380, 528, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbEpisodeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 2048), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbEpisodeTemp);
		cmbEpisodeComboBox cmbEpisode = (cmbEpisodeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEpisodeComboBox.class, m_cmbEpisodeTemp);
		super.addComboBox(cmbEpisode);
		RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 440, 180, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbWardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 1035), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbWardTypeTemp);
		cmbWardTypeComboBox cmbWardType = (cmbWardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardTypeComboBox.class, m_cmbWardTypeTemp);
		super.addComboBox(cmbWardType);
		RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 440, 205, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbSourceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 1036), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSourceTemp);
		cmbSourceComboBox cmbSource = (cmbSourceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceComboBox.class, m_cmbSourceTemp);
		super.addComboBox(cmbSource);
		RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 128, 229, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 1031), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSpecialtyTemp);
		cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
		super.addComboBox(cmbSpecialty);
		RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 440, 229, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbMethodTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 1037), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbMethodTemp);
		cmbMethodComboBox cmbMethod = (cmbMethodComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMethodComboBox.class, m_cmbMethodTemp);
		super.addComboBox(cmbMethod);
		RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 440, 254, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbPatientStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 1038), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbPatientStatusTemp);
		cmbPatientStatusComboBox cmbPatientStatus = (cmbPatientStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientStatusComboBox.class, m_cmbPatientStatusTemp);
		super.addComboBox(cmbPatientStatus);
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 128, 328, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSourceOfReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 1043), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSourceOfReferralTemp);
		cmbSourceOfReferralComboBox cmbSourceOfReferral = (cmbSourceOfReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceOfReferralComboBox.class, m_cmbSourceOfReferralTemp);
		super.addComboBox(cmbSourceOfReferral);
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 128, 180, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbWardTemp);
		cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
		super.addComboBox(cmbWard);
		RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 128, 229, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbCCOSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 1030), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbCCOSpecialtyTemp);
		cmbCCOSpecialtyComboBox cmbCCOSpecialty = (cmbCCOSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCCOSpecialtyComboBox.class, m_cmbCCOSpecialtyTemp);
		super.addComboBox(cmbCCOSpecialty);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 440, 306, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(startTabIndex.intValue() + 1041), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Chaplain", Boolean.FALSE, null}));

		// Time Controls
		RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 128, 205, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 355, 280, 69, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 1033), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(2)}));

		// RadioButton Controls
		RadioButton tmpCaseFolderYesNo = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpCaseFolderYesNo);
		CaseFolderYesNoRadioButton CaseFolderYesNo = (CaseFolderYesNoRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(CaseFolderYesNoRadioButton.class, tmpCaseFolderYesNo);
		CaseFolderYesNo.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(CaseFolderYesNo);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccConsultant()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccConsultantVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccConsultantVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccConsultantEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccConsultantEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent ccReferringConsultant()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccReferringConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccReferringConsultantVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccReferringConsultantVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccReferringConsultantEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccReferringConsultantEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public lyrAdmissionLayer lyrAdmission()
	{
		return (lyrAdmissionLayer)super.getLayer(0);
	}
	public Label lblService()
	{
		return (Label)super.getControl(9);
	}
	public Label lblHLTimeOfReturn()
	{
		return (Label)super.getControl(10);
	}
	public Label lblHLReturnDate()
	{
		return (Label)super.getControl(11);
	}
	public Label lblEpisode()
	{
		return (Label)super.getControl(12);
	}
	public Label lblCaseComment()
	{
		return (Label)super.getControl(13);
	}
	public Label lblUpdateCasefolder()
	{
		return (Label)super.getControl(14);
	}
	public Label lblAntStay()
	{
		return (Label)super.getControl(15);
	}
	public Label lblWard()
	{
		return (Label)super.getControl(16);
	}
	public Label lblWardType()
	{
		return (Label)super.getControl(17);
	}
	public Label lblSourceOfAdmission()
	{
		return (Label)super.getControl(18);
	}
	public Label lblConsultant()
	{
		return (Label)super.getControl(19);
	}
	public Label lblSpecialty()
	{
		return (Label)super.getControl(20);
	}
	public Label lblMethod()
	{
		return (Label)super.getControl(21);
	}
	public Label lblEstDischDate()
	{
		return (Label)super.getControl(22);
	}
	public Label lblAdmitDateTime()
	{
		return (Label)super.getControl(23);
	}
	public Label lblReasonForAdmission()
	{
		return (Label)super.getControl(24);
	}
	public Label lblPatientStatus()
	{
		return (Label)super.getControl(25);
	}
	public Label lblReferralSource()
	{
		return (Label)super.getControl(26);
	}
	public Label lblReferringConsultant()
	{
		return (Label)super.getControl(27);
	}
	public TextBox txtReason()
	{
		return (TextBox)super.getControl(28);
	}
	public TextBox txtCaseComment()
	{
		return (TextBox)super.getControl(29);
	}
	public DateControl dteEstDischarge()
	{
		return (DateControl)super.getControl(30);
	}
	public DateControl dteHLDateReturn()
	{
		return (DateControl)super.getControl(31);
	}
	public DateTimeControl dtimAdmit()
	{
		return (DateTimeControl)super.getControl(32);
	}
	public cmbServiceComboBox cmbService()
	{
		return (cmbServiceComboBox)super.getComboBox(0);
	}
	public cmbEpisodeComboBox cmbEpisode()
	{
		return (cmbEpisodeComboBox)super.getComboBox(1);
	}
	public cmbWardTypeComboBox cmbWardType()
	{
		return (cmbWardTypeComboBox)super.getComboBox(2);
	}
	public cmbSourceComboBox cmbSource()
	{
		return (cmbSourceComboBox)super.getComboBox(3);
	}
	public cmbSpecialtyComboBox cmbSpecialty()
	{
		return (cmbSpecialtyComboBox)super.getComboBox(4);
	}
	public cmbMethodComboBox cmbMethod()
	{
		return (cmbMethodComboBox)super.getComboBox(5);
	}
	public cmbPatientStatusComboBox cmbPatientStatus()
	{
		return (cmbPatientStatusComboBox)super.getComboBox(6);
	}
	public cmbSourceOfReferralComboBox cmbSourceOfReferral()
	{
		return (cmbSourceOfReferralComboBox)super.getComboBox(7);
	}
	public cmbWardComboBox cmbWard()
	{
		return (cmbWardComboBox)super.getComboBox(8);
	}
	public cmbCCOSpecialtyComboBox cmbCCOSpecialty()
	{
		return (cmbCCOSpecialtyComboBox)super.getComboBox(9);
	}
	public CheckBox chkChaplain()
	{
		return (CheckBox)super.getControl(43);
	}
	public TimeControl timHLTimeOfReturn()
	{
		return (TimeControl)super.getControl(44);
	}
	public IntBox intAntStay()
	{
		return (IntBox)super.getControl(45);
	}
	public CaseFolderYesNoRadioButton CaseFolderYesNo()
	{
		return (CaseFolderYesNoRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				AddressSelection = new LocalFormName(102270);
				OtherAddresses = new LocalFormName(102178);
			}
			public final FormName AddressSelection;
			public final FormName OtherAddresses;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_IsRequired = new ims.framework.ContextVariable("IsRequired", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__IsRequired_" + componentIdentifier + "");
			cxl_addressResult = new ims.framework.ContextVariable("addressResult", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier + "");
			cxl_AdmissionDetail = new ims.framework.ContextVariable("AdmissionDetail", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier + "");
			cxl_IsInWaitingTabVisible = new ims.framework.ContextVariable("IsInWaitingTabVisible", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__IsInWaitingTabVisible_" + componentIdentifier + "");
			cxl_RecordSelected = new ims.framework.ContextVariable("RecordSelected", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__RecordSelected_" + componentIdentifier + "");
			cxl_IsEmergencyAdmissionTab = new ims.framework.ContextVariable("IsEmergencyAdmissionTab", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__IsEmergencyAdmissionTab_" + componentIdentifier + "");
			cxl_IsReturnFromLeaveVisible = new ims.framework.ContextVariable("IsReturnFromLeaveVisible", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__IsReturnFromLeaveVisible_" + componentIdentifier + "");
			cxl_TCIElectiveAdmission = new ims.framework.ContextVariable("TCIElectiveAdmission", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier + "");
			cxl_TabSelected = new ims.framework.ContextVariable("TabSelected", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TabSelected_" + componentIdentifier + "");
		}
		
		public boolean getIsRequiredIsNotNull()
		{
			return !cxl_IsRequired.getValueIsNull(context);
		}
		public Boolean getIsRequired()
		{
			return (Boolean)cxl_IsRequired.getValue(context);
		}
		public void setIsRequired(Boolean value)
		{
			cxl_IsRequired.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsRequired = null;
		public boolean getaddressResultIsNotNull()
		{
			return !cxl_addressResult.getValueIsNull(context);
		}
		public ims.core.vo.PersonAddress getaddressResult()
		{
			return (ims.core.vo.PersonAddress)cxl_addressResult.getValue(context);
		}
		public void setaddressResult(ims.core.vo.PersonAddress value)
		{
			cxl_addressResult.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_addressResult = null;
		public boolean getAdmissionDetailIsNotNull()
		{
			return !cxl_AdmissionDetail.getValueIsNull(context);
		}
		public ims.core.vo.AdmissionDetailVo getAdmissionDetail()
		{
			return (ims.core.vo.AdmissionDetailVo)cxl_AdmissionDetail.getValue(context);
		}
		public void setAdmissionDetail(ims.core.vo.AdmissionDetailVo value)
		{
			cxl_AdmissionDetail.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AdmissionDetail = null;
		public boolean getIsInWaitingTabVisibleIsNotNull()
		{
			return !cxl_IsInWaitingTabVisible.getValueIsNull(context);
		}
		public Boolean getIsInWaitingTabVisible()
		{
			return (Boolean)cxl_IsInWaitingTabVisible.getValue(context);
		}
		public void setIsInWaitingTabVisible(Boolean value)
		{
			cxl_IsInWaitingTabVisible.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsInWaitingTabVisible = null;
		public boolean getRecordSelectedIsNotNull()
		{
			return !cxl_RecordSelected.getValueIsNull(context);
		}
		public Boolean getRecordSelected()
		{
			return (Boolean)cxl_RecordSelected.getValue(context);
		}
		public void setRecordSelected(Boolean value)
		{
			cxl_RecordSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RecordSelected = null;
		public boolean getIsEmergencyAdmissionTabIsNotNull()
		{
			return !cxl_IsEmergencyAdmissionTab.getValueIsNull(context);
		}
		public Boolean getIsEmergencyAdmissionTab()
		{
			return (Boolean)cxl_IsEmergencyAdmissionTab.getValue(context);
		}
		public void setIsEmergencyAdmissionTab(Boolean value)
		{
			cxl_IsEmergencyAdmissionTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsEmergencyAdmissionTab = null;
		public boolean getIsReturnFromLeaveVisibleIsNotNull()
		{
			return !cxl_IsReturnFromLeaveVisible.getValueIsNull(context);
		}
		public Boolean getIsReturnFromLeaveVisible()
		{
			return (Boolean)cxl_IsReturnFromLeaveVisible.getValue(context);
		}
		public void setIsReturnFromLeaveVisible(Boolean value)
		{
			cxl_IsReturnFromLeaveVisible.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsReturnFromLeaveVisible = null;
		public boolean getTCIElectiveAdmissionIsNotNull()
		{
			return !cxl_TCIElectiveAdmission.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListBedAdmissionVo getTCIElectiveAdmission()
		{
			return (ims.RefMan.vo.PatientElectiveListBedAdmissionVo)cxl_TCIElectiveAdmission.getValue(context);
		}
		public void setTCIElectiveAdmission(ims.RefMan.vo.PatientElectiveListBedAdmissionVo value)
		{
			cxl_TCIElectiveAdmission.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TCIElectiveAdmission = null;
		public boolean getTabSelectedIsNotNull()
		{
			return !cxl_TabSelected.getValueIsNull(context);
		}
		public Integer getTabSelected()
		{
			return (Integer)cxl_TabSelected.getValue(context);
		}
		public void setTabSelected(Integer value)
		{
			cxl_TabSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TabSelected = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[117];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-ISMATERNITY", "IsMaternity");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-NOOFINFANTS", "NoOfInfants");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-COMMENT", "Comment");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ID", "ID_Location");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-NAME", "Name");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ISACTIVE", "IsActive");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-TYPE", "Type");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-ID", "ID_Address");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-LINE1", "Line1");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-LINE2", "Line2");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-LINE3", "Line3");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-LINE4", "Line4");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-LINE5", "Line5");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-POSTCODE", "PostCode");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-PHONE", "Phone");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-COUNTY", "County");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-FAX", "Fax");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-UPDATEDATE", "UpdateDate");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-NOTIFICATIONDATE", "NotificationDate");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-ADDRESSTYPE", "AddressType");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-PCT", "PCT");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-OTHERPHONE", "Otherphone");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-ID", "ID_AdmissionDetail");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-BED", "Bed");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-CONSULTANT", "Consultant");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-SPECIALTY", "Specialty");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-WARDTYPE", "WardType");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-METHODOFADMISSION", "MethodOfAdmission");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-SOURCEOFADMISSION", "SourceOfAdmission");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-REASONFORADMISSION", "ReasonForAdmission");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-ISCHAPLAINREQUIRED", "IsChaplainRequired");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-REFERRINGCONSULTANT", "ReferringConsultant");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-PATIENTSTATUS", "PatientStatus");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-UPDATECFL", "UpdateCFL");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-CASEFOLDERCOMMENTS", "CaseFolderComments");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-BED", "Bed");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
