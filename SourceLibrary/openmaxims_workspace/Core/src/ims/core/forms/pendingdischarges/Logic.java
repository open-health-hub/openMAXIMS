//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by Ander Telleria using IMS Development Environment (version 1.70 build 3300.22643)
//Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.pendingdischarges;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.pendingdischarges.GenForm.grdDischargesRow;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.InpatientEpisodeForPendingDischargesVo;
import ims.core.vo.InpatientEpisodeForPendingDischargesVoCollection;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PendingDischargesVo;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.TimeUnitsSecondsToMonths;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int COL_AGE = 4;
	private static final int COL_ESTIMATED_DISCHAGE_DATETIME = 8;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();

		//If we have make a search before this one, our search criteria will be loaded into the criteria search elements.
		if (form.getGlobalContext().STHK.getPendingDischargesListFilterIsNotNull())
		{
			refreshSearchCriteria();
		}
		else
		{
			form.int1().setValue(24);
			form.cmbTime().setValue(TimeUnitsSecondsToMonths.HOURS);
		}
	}
	
	private void initialise()
	{
		clearControls();
		//Load the list of active hospitals in order to fill the current hospital combo.
		form.cmbIDType().setValue(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));

		loadHospitals();
		if (form.cmbCurrentHospital().getValue() == null && engine.getCurrentLocation() != null)

		{
			//Try and load the logged in location as a ward
			LocMostVo voLoc = domain.getLocation((LocationRefVo)engine.getCurrentLocation());
			if (voLoc != null && voLoc.getTypeIsNotNull()
				&& voLoc.getType().equals(LocationType.WARD))
			{
				form.cmbCurrentHospital().setValue(voLoc.getParentLocation());
	
				form.cmbCurrentWard().newRow(voLoc, voLoc.getName());
				form.cmbCurrentWard().setValue(voLoc);
			}
		}


	}

	private void refreshSearchCriteria() 
	{
		PendingDischargesVo pendingDischarge = form.getGlobalContext().STHK.getPendingDischargesListFilter();
		//We fill all the criteria search elements
		if (pendingDischarge!=null)
		{
			if (pendingDischarge.getTimeUnitsIsNotNull())
				form.cmbTime().setValue(pendingDischarge.getTimeUnits());
			if (pendingDischarge.getNumberOfTimeUnitsIsNotNull())
				form.int1().setValue(pendingDischarge.getNumberOfTimeUnits());
			if (pendingDischarge.getForenameIsNotNull())
				form.txtForeName().setValue(pendingDischarge.getForename());
			if (pendingDischarge.getSurnameIsNotNull())
				form.txtSurname().setValue(pendingDischarge.getSurname());
			if (pendingDischarge.getHospitalNumberIsNotNull())
				form.txtIDNum().setValue(pendingDischarge.getHospitalNumber());
			if (pendingDischarge.getIDTypeIsNotNull())
				form.cmbIDType().setValue(pendingDischarge.getIDType());
			form.cmbCurrentHospital().setValue(null);
			form.cmbCurrentWard().setValue(null);
			if (pendingDischarge.getCurrentHospitalIsNotNull())
				form.cmbCurrentHospital().setValue(pendingDischarge.getCurrentHospital());		
			loadWards();
			if (pendingDischarge.getWardIsNotNull())
				form.cmbCurrentWard().setValue(pendingDischarge.getWard());

		}
	}
	private void search(InpatientEpisodeForPendingDischargesVo voToFind) 

	{
		form.grdDischarges().getRows().clear();
		form.lblTotal().setValue("Total : 0"); // WDEV-18099 
		
		//We validate that if both fields of time units have been introduced. If not, we show a message with the error.
		String[] errors = validate();
		if (errors!=null)
		{
			engine.showErrors(errors);
			return;
		}
		InpatientEpisodeForPendingDischargesVoCollection discharges=new InpatientEpisodeForPendingDischargesVoCollection();
		PendingDischargesVo discharge=new PendingDischargesVo();
		if (form.cmbCurrentHospital().getValue()!=null)
			discharge.setCurrentHospital(form.cmbCurrentHospital().getValue());
		//Algorighm to calculate the estimated discharte time, depending on the time units introduced by the user 
		if (form.cmbTime().getValue()!=null&&form.int1().getValue()!=null)
		{
			Date d= new Date();
			if (form.cmbTime().getValue().equals(TimeUnitsSecondsToMonths.SECONDS))
				d.addSeconds(form.int1().getValue());
			if (form.cmbTime().getValue().equals(TimeUnitsSecondsToMonths.MINUTES))
				d.addSeconds(form.int1().getValue() * 60);
			if (form.cmbTime().getValue().equals(TimeUnitsSecondsToMonths.HOURS))
				d.addSeconds(form.int1().getValue() * 3600);
			if (form.cmbTime().getValue().equals(TimeUnitsSecondsToMonths.DAYS))
				d.addDay(form.int1().getValue());
			if (form.cmbTime().getValue().equals(TimeUnitsSecondsToMonths.WEEKS))
				d.addDay(form.int1().getValue()*7);
			if (form.cmbTime().getValue().equals(TimeUnitsSecondsToMonths.MONTHS))
				d.addMonth(form.int1().getValue());
			discharge.setEstDischargeDate(d);
		}

		if (form.txtForeName().getValue()!=null)
			discharge.setForename(form.txtForeName().getValue());
		if (form.txtSurname().getValue()!=null)
			discharge.setSurname(form.txtSurname().getValue());
		
		if (form.txtIDNum().getValue()!=null)
			discharge.setHospitalNumber(form.txtIDNum().getValue());

		if (form.cmbIDType().getValue()!=null)
			discharge.setIDType(form.cmbIDType().getValue());

		if (form.txtIDNum().getValue() != null
			&& form.cmbIDType().getValue() == null)
		{
			engine.showErrors(new String[]{"Please enter both an Identifier type as well as its value."});
			return;
		}

		if (form.int1().getValue()!=null)
			discharge.setNumberOfTimeUnits(form.int1().getValue());
		if (form.cmbTime().getValue()!=null)
			discharge.setTimeUnits(form.cmbTime().getValue());
		if (form.cmbCurrentHospital().getValue()!=null)
			discharge.setCurrentHospital(form.cmbCurrentHospital().getValue());
		if (form.cmbCurrentWard().getValue()!=null)
			discharge.setWard(form.cmbCurrentWard().getValue());
		//When the user clicks on the button search, the global context variable is filled with the search criteria.
		if (form.chkQueryConfirmed().getValue())
			discharge.setQueryPending(form.chkQueryConfirmed().getValue());
		
		//When the user clicks on the button search, the global context variable is filled with the search criteria.
		form.getGlobalContext().STHK.setPendingDischargesListFilter(discharge);
		
		if (discharge.countFieldsWithValue() == 1 
			&& discharge.getIDTypeIsNotNull() )
		{
			engine.showMessage("Please enter some valid search criteria.", "Invalid search cirteria", MessageButtons.OK, MessageIcon.ERROR);
			return;
		}


		//If all the fields are empty, we show an error message. If not, we do the search.
		if (discharge.countFieldsWithValue()>0)
			discharges = domain.listPendingDischarges(discharge);

		else
		{
			engine.showErrors(new String[]{"Please enter some search criteria"});
			return;
		}
		//If there is no result, we show it in a message.
		if (discharges == null || discharges.size() == 0)
		{
			engine.showMessage("No matching records found");
			return;
		}
		//If there are results, we update the label at the bottom of the component, showing the number of results that matched the criteria.
		if (discharges != null)
			form.lblTotal().setValue("Total : " + String.valueOf(discharges.size()));

		//We populate the grid with the results.
		populateGrid(discharges, voToFind);
	}

	public void refresh()
	{
		refreshSearchCriteria();
		search(form.grdDischarges().getSelectedRow() != null ? form.grdDischarges().getValue() : null); //WDEV-16192
		updateControlState(); // WDEV-18123 
	}

	private void loadHospitals() 
	{
		LocationLiteVoCollection hospitals = domain.getActiveHospitals();
		if (hospitals!=null)
		{
			for (LocationLiteVo item: hospitals)
			{
				form.cmbCurrentHospital().newRow(item, item.getName());
				if(form.cmbCurrentHospital().getValue() == null)
				{
					if (engine.getCurrentLocation() != null && item.getID_Location().equals(engine.getCurrentLocation().getID()))
					{
						form.cmbCurrentHospital().setValue(item);
						
						loadWards();//wdev-7858
					}
				}
			}
		}
	}
	//When we select clear, we clear all the controls
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearControls();
		updateControlState(); //WDEV-18123 
		form.getGlobalContext().STHK.setPendingDischargesListFilter(null);
		
	}
	private void clearControls() 
	{
		form.cmbCurrentHospital().setValue(null);
		form.cmbTime().setValue(null);
		form.grdDischarges().getRows().clear();
		form.int1().setValue(null);
		form.cmbCurrentWard().setValue(null);
		form.txtForeName().setValue(null);
		form.txtSurname().setValue(null);
		form.txtIDNum().setValue(null);
		form.chkQueryConfirmed().setValue(false);
		form.lblTotal().setValue("Total : 0");
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search(null);
		updateControlState(); // WDEV-18123 
	}
	
	private void populateGrid(InpatientEpisodeForPendingDischargesVoCollection discharges, InpatientEpisodeForPendingDischargesVo voToFind) 
	{

		for (InpatientEpisodeForPendingDischargesVo item : discharges) 
		{
			grdDischargesRow row = form.grdDischarges().getRows().newRow();
			row.setValue(item);
			if(item.getPasEventIsNotNull())
				if (item.getPasEvent().getPatientIsNotNull())
				{
					item.getPasEvent().getPatient().calculateAge();

					row.setColHOSNUM(item.getPasEvent().getPatient().getHospnum().getValue());
					if (item.getPasEvent().getPatient().getAgeIsNotNull())
						row.setcolAge(item.getPasEvent().getPatient().getAge().toString());
					if (item.getPasEvent().getPatient().getSexIsNotNull())
						row.setColPatSex(item.getPasEvent().getPatient().getSex().getText());
					if (item.getPasEvent().getPatient().getNameIsNotNull())
						if (item.getPasEvent().getPatient().getName().getSurnameIsNotNull())
							row.setColSurname(item.getPasEvent().getPatient().getName().getSurname());
						if (item.getPasEvent().getPatient().getName().getForenameIsNotNull())
							row.setColForename(item.getPasEvent().getPatient().getName().getForename());


				}
			if (item.getPasEvent().getConsultantIsNotNull())
				if (item.getPasEvent().getConsultant().getMosIsNotNull())
					if (item.getPasEvent().getConsultant().getMos().getNameIsNotNull())
						row.setColConsultant(item.getPasEvent().getConsultant().getMos().getName().toString());
			if (item.getPasEvent().getLocationIsNotNull())
				if (item.getPasEvent().getLocation().getNameIsNotNull())
					row.setColWard(item.getPasEvent().getLocation().getName());
			if (item.getBedIsNotNull())
				if (item.getBed().getBedSpaceIsNotNull())
					if (item.getBed().getBedSpace().getBedSpaceTypeIsNotNull())
						row.setColLocation(item.getBed().getBedSpace().getBedSpaceType().getText());
			if (item.getEstDischargeDateIsNotNull())
				row.setColDateTime(item.getEstDischargeDate().toString());
			
			if(item.isDischargeDueWithin24Hrs())
			{
				if(item.getIsConfirmedDischarge() == null || item.getIsConfirmedDischarge().equals(false))
					row.setBackColor(Color.Orange);
				else if(item.getIsConfirmedDischargeIsNotNull() && item.getIsConfirmedDischarge().equals(true))
					row.setBackColor(Color.Red);
			}	
			
			if (voToFind != null 
				&& voToFind.equals(item))
				form.grdDischarges().setValue(voToFind);

		}
	}
	@Override
	protected void onCmbCurrentHospitalValueChanged() throws PresentationLogicException 
	{	
		loadWards();
	}
	private void loadWards()
	{
		form.cmbCurrentWard().clear();
		if (form.cmbCurrentHospital().getValue()!=null)
		{

			LocationLiteVoCollection wards = domain.getWards(form.cmbCurrentHospital().getValue().getID_Location());
			if (wards!=null)
			{
				for (LocationLiteVo item : wards) 
				{
					form.cmbCurrentWard().newRow(item, item.getName());
				}
			}
		}
	}
	private  String[] validate() 
	{
		ArrayList <String> errors=new ArrayList<String>();
		if ((form.cmbTime().getValue()!=null && form.int1().getValue()==null)||(form.cmbTime().getValue()==null&&form.int1().getValue()!=null))
			errors.add("If you want to add Time Period to the criteria, both fields are Mandatory");
		if (errors.size()>0)
			return  errors.toArray(new String[0]);
		else return null;
	}
	
	
	@Override
	/**
	 * WDEV-13136
	 * Event handler for Grid Column Header click
	 * Will sort records after column header
	 */
	protected void onGrdDischargesGridHeaderClicked(int column) throws PresentationLogicException 
	{
		sortDischargeRecords(column);
	}

	/**
	 * WDEV-13136
	 * Function used to sort discharge records
	 */
	private void sortDischargeRecords(int column)
	{
		// Get discharge records from grid
		InpatientEpisodeForPendingDischargesVoCollection records = form.grdDischarges().getValues();
		// Toggle sort order for column
		sortOrderToggle(column);
		
		// Determine column - sort records after it
		if (COL_AGE == column)
		{
			records.sort(InpatientEpisodeForPendingDischargesVo.getAgeComparator(form.getLocalContext().getSortOrderAge()));
		}
		else if (COL_ESTIMATED_DISCHAGE_DATETIME == column)
		{
			records.sort(InpatientEpisodeForPendingDischargesVo.getDateTimeComparator(form.getLocalContext().getSortOrder()));
		}
		
		// Get selection
		InpatientEpisodeForPendingDischargesVo selectedValue = form.grdDischarges().getValue();
		// Re-populate grid
		form.grdDischarges().getRows().clear();//wdev-14522
		populateGrid(records, null);
		// Update selection
		form.grdDischarges().setValue(selectedValue);
	}

	/**
	 *	WDEV-13136
	 *	Function used to toggle sort order for column 
	 */
	private void sortOrderToggle(int column)
	{
		if (COL_AGE == column)
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAge()))
				form.getLocalContext().setSortOrderAge(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderAge(SortOrder.ASCENDING);
		}
		else
		{
			form.getLocalContext().setSortOrderAge(null);
		}
		
		if (COL_ESTIMATED_DISCHAGE_DATETIME == column)
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder()))
				form.getLocalContext().setSortOrder(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
		}
		else
		{
			form.getLocalContext().setSortOrder(null);
		}
	}

	protected void onInt1ValueChanged() throws PresentationLogicException 
	{
		updateControlState();
	}

	protected void onCmbTimeValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}
	
	private void updateControlState() 
	{
		form.int1().setRequired(form.int1().getValue() == null && form.cmbTime().getValue() != null);
		form.cmbTime().setRequired(form.int1().getValue() != null && form.cmbTime().getValue() == null);
	}
}
