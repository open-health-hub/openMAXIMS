//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.71 build 3853.21665)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientcorrespondencetemplates;

import ims.admin.vo.ReportSeedParsedVo;
import ims.admin.vo.ReportSeedParsedVoCollection;
import ims.admin.vo.ReportTemplateVo;
import ims.clinical.vo.PatientSummaryNoteByHCPRefVo;
import ims.clinical.vo.PatientSummaryNoteByHcpShortVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.CareContextForPatientDocumentVo;
import ims.core.vo.CareContextForPatientDocumentVoCollection;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.ClinicalContactShortVoCollection;
import ims.core.vo.DocumentCategoryConfigShortVo;
import ims.core.vo.DocumentCategoryConfigShortVoCollection;
import ims.core.vo.DocumentWorklistSearchCriteriaVo;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.EpisodeofCareShortVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientDocumentStatusVo;
import ims.core.vo.PatientDocumentStatusVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.TemplateForPatientDocumentVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IMos;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.tree.DefaultElement;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final String	COLUMN_NAME			= "0";
	private static final String SPECIALTY_LIST_ALL_BY_TEMPLATE = "Template";  //WDEV-13992
	


	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		updateControlsState();
		
		Boolean copyLetter = domain.getCopyLetter(form.getGlobalContext().Core.getPatientShort());
		
		if(copyLetter != null)
		{
			if(copyLetter.equals(Boolean.TRUE))
				form.Group1().setValue(GenForm.Group1Enumeration.rdoYes);
			else
				form.Group1().setValue(GenForm.Group1Enumeration.rdoNo);
		}
	}

	private void initialize() throws PresentationLogicException 
	{
		Object mosUser = domain.getMosUser();
		if(mosUser == null)
			throw new PresentationLogicException("User must be a Member of Staff.");
		
		createDynamicGridColumns();
		
		bindEpisodeCombo();
		
		form.cmbEpisode().setValue(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		selectEpisodeOfCare();//WDEV-13520
		
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		{
			form.cmbCContext().setValue(new CareContextForPatientDocumentVo(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext(),form.getGlobalContext().Core.getCurrentCareContext().getVersion_CareContext()));
		}
		
		selectCareContext();//WDEV-13520
		
		form.cmbCContant().setValue(form.getGlobalContext().Core.getCurrentClinicalContact());
		//wdev-15533
	
		if( form.cmbCContant().getValue() != null && form.cmbCContant().getValue() instanceof ClinicalContactShortVo)
		{
			if(form.cmbSpecialty().getValues().contains(form.cmbCContant().getValue().getSpecialty()))
			{
				form.cmbSpecialty().setValue(form.cmbCContant().getValue().getSpecialty());
				form.getLocalContext().setSelectedSpecialty(form.cmbCContant().getValue().getSpecialty());
			}
			else
			{
				form.getLocalContext().setSelectedSpecialty(null);
				form.cmbSpecialty().setValue(null);
			}
		}
		//-----------
		
		form.ccAuthoring().initialize(MosType.HCP);
		form.ccAuthoring().isRequired(true);
		
		form.ccTypist().initialize(MosType.ALL);
		form.ccTypist().isRequired(true);
		
		
		form.ccResponsibleHcp().initializeResponsibleHcp(MosType.HCP, true);//WDEV-15836
		
		
		Object hcpUser = domain.getHcpLiteUser();
		if(hcpUser instanceof HcpLiteVo)
		{
			form.ccAuthoring().setValue((IMos) hcpUser);
		}
		if(mosUser instanceof MemberOfStaffShortVo)
		{
			form.ccTypist().setValue((IMos) mosUser);
		}
		
		form.dteDocumentDate().setValue(getDefaultEventDate());//	WDEV-13413
		if(ConfigFlag.UI.CORRESPONDENCE_DISPLAY_PATIENT_SUMMARY_NOTE_COMBO.getValue() == true) //wdev-14230
		{
			form.cmbSummaryNote().setVisible(Boolean.TRUE);
			populateSummaryNoteCombo(); //wdev-14230
			form.lblSummaryNote().setVisible(Boolean.TRUE);
		}
		else
		{
			form.cmbSummaryNote().setVisible(Boolean.FALSE);
			form.lblSummaryNote().setVisible(Boolean.FALSE);
		}
	}
	//wdev-14230
	private void populateSummaryNoteCombo()
	{
		form.cmbSummaryNote().clear();
		PatientSummaryNoteByHcpShortVoCollection tempColl = domain.listSummaryNotes(form.getGlobalContext().Core.getPatientShort());
		if(tempColl != null && tempColl.size() > 0)
		{
			for(int i = 0; i <  tempColl.size();i++)
			{
				// Skip null notes
				if (tempColl.get(i) == null)
					continue;
				
				// Build string to be displayed
				StringBuilder displayText = new StringBuilder();
	
				displayText.append(tempColl.get(i).getAuthoringInformation().getAuthoringHcpIsNotNull() ? tempColl.get(i).getAuthoringInformation().getAuthoringHcp().toString() : "");
				displayText.append(" - " + tempColl.get(i).getAuthoringInformation().getAuthoringDateTime().toString());
	
				if (tempColl.get(i).getSystemInformationIsNotNull() && tempColl.get(i).getSystemInformation().getLastupdateDateTime() != null)
					displayText.append(" - " + tempColl.get(i).getSystemInformation().getLastupdateDateTime().toString());
	
				// Add note to record browser
				form.cmbSummaryNote().newRow(tempColl.get(i), displayText.toString());
			}
		}
		
	}
	//	WDEV-13413
	private Date getDefaultEventDate() 
	{
		if(ConfigFlag.UI.DEFAULT_DOCUMENT_TO_CONTEXT_DATE.getValue())
		{
			if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
				return form.getGlobalContext().Core.getCurrentClinicalContact().getStartDateTime().getDate();
			else if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
				return form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime().getDate();
			else if(form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull())
				return form.getGlobalContext().Core.getEpisodeofCareShort().getStartDate();
		}
		
		return new Date();
	}

	private void bindCmbSpecialtyLookup(SpecialtyCollection lookupCollection)
	{
		this.form.cmbSpecialty().clear();
		
		if(lookupCollection == null)
			return;
		
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			form.cmbSpecialty().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}

	private void createDynamicGridColumns() 
	{
		DynamicGridColumn columnName = form.dyngrdReports().getColumns().newColumn("Name", COLUMN_NAME);
		columnName.setWidth(-1);
	}
	
	@Override
	protected void onBtnGenerateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] str = validateUIRules();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return;
		}
		
		 PatientDocumentVo doc = savePatientDocuments("DummyFileName");
		 if (doc == null)
			 return;
		
		String fileName = createReport(((DocumentCategoryConfigShortVo) form.dyngrdReports().getValue()).getTemplate(),doc);
		
		if (fileName == null)
		{
			domain.deleteDocument(doc);
			return;
		}
		
		doc.getServerDocument().setFileName(fileName);
		doc.validate();
		try
		{
			form.getGlobalContext().Core.setPatientCorrespondence(domain.savePatientDocument(doc));
			
			//WDEV-12643
			fillDocumentWorklistSearchCriteria();
		}
		catch (StaleObjectException e)
		{
			domain.deleteDocument(doc);
			deleteFile(getWorkAreaPath() + fileName);//WDEV-13366
			e.printStackTrace();
		}
		
		engine.close(DialogResult.OK);
	}
	
	//WDEV-12643
	private void fillDocumentWorklistSearchCriteria() 
	{
		DocumentWorklistSearchCriteriaVo criteria = new DocumentWorklistSearchCriteriaVo();
		
		criteria.setAuthor(form.ccAuthoring().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccAuthoring().getValue() : null);
		criteria.setResponsible(form.ccResponsibleHcp().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccResponsibleHcp().getValue() : null);
		criteria.setTypist(form.ccTypist().getValue() instanceof MemberOfStaffLiteVo ? (MemberOfStaffLiteVo) form.ccTypist().getValue() : null);
		criteria.setSpecialty(form.cmbSpecialty().getValue());
		criteria.setDateFrom(form.dteDocumentDate().getValue());
		criteria.setDateTo(form.dteDocumentDate().getValue());
		
		form.getGlobalContext().Core.setDocumentWorklistSearchCriteria(criteria);
	}

	private boolean deleteFile(String fileToDelete)
	{
		File file = new File(fileToDelete);

		return file.delete();
	}
	
	//WDEV-13366
	private String getWorkAreaPath()
	{
		String storePath = ConfigFlag.GEN.MAXIMS_DOCUMENT_WORK_AREA.getValue();

		if (!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";

		return storePath;
	}

	private PatientDocumentVo savePatientDocuments(String fileName) 
	{
		if(fileName == null || fileName.length() == 0)
			return null;
		
		PatientDocumentVo vo = populatePatientDocumentVo(populateServerDocumentVo(fileName));
		
		if(vo == null)
			return null;
		
		String[] str = vo.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return null;
		}
		
		try 
		{
			return domain.savePatientDocument(vo);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return null;
		}
	}

	private String[] validateUIRules() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		Object repTemplate = form.dyngrdReports().getValue();
		
		if(repTemplate == null || !(repTemplate instanceof DocumentCategoryConfigShortVo))
		{
			return new String[] {"Please select a template!"};
		}
		
		if(form.cmbEpisode().isRequired() && form.cmbEpisode().getValue() == null)
		{
			uiErrors.add("Episode of Care is mandatory.");
		}
		
		if(form.cmbCContext().isRequired() && form.cmbCContext().getValue() == null)
		{
			uiErrors.add("Care Context is mandatory.");
		}
		
		if(form.cmbCContant().isRequired() && form.cmbCContant().getValue() == null)
		{
			uiErrors.add("Clinical Contact is mandatory.");
		}
		
		if(form.ccAuthoring().getValue() == null)
		{
			uiErrors.add("Authoring HCP is mandatory.");
		}
		
		if(form.ccTypist().getValue() == null)
		{
			uiErrors.add("Typist Name is mandatory.");
		}
		
		if(form.dteDocumentDate().getValue() == null)
		{
			uiErrors.add("Event Date is mandatory.");
		}
		
		if(new Date().isLessThan(form.dteDocumentDate().getValue()))
		{
			uiErrors.add("Event Date can not be set in the future.");
		}
		
		if(form.cmbSpecialty().getValue() == null)
		{
			uiErrors.add("Specialty is mandatory.");					
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private PatientDocumentVo populatePatientDocumentVo(ServerDocumentVo serverDocumentVo) 
	{
		if(serverDocumentVo == null)
			return null;
		
		PatientDocumentVo vo = new PatientDocumentVo();
		vo.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		vo.setEpisodeofCare(form.cmbEpisode().getValue());
		vo.setCareContext(form.cmbCContext().getValue());
		vo.setClinicalContact(form.cmbCContant().getValue());
		
		if(form.dyngrdReports().getValue() instanceof DocumentCategoryConfigShortVo)
		{
			DocumentCategoryConfigShortVo templateConfig = (DocumentCategoryConfigShortVo) form.dyngrdReports().getValue();
			
			vo.setName(templateConfig.getTemplate() != null ? templateConfig.getTemplate().getName() : null);
			vo.setCategory(templateConfig.getCategory());
		}
		
		vo.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
		vo.setServerDocument(serverDocumentVo);
		
		vo.setCreationType(DocumentCreationType.GENERATED);
		
		MemberOfStaffLiteVo mosUser = form.ccTypist().getValue() instanceof MemberOfStaffLiteVo ? (MemberOfStaffLiteVo) form.ccTypist().getValue() : null;
		vo.setRecordingUser(mosUser);
		vo.setRecordingDateTime(new DateTime());
		vo.setCorrespondenceStatus(DocumentStatus.DRAFT);
		vo.setSpecialty(form.cmbSpecialty().getValue());
		
		HcpRefVo hcpUser = form.ccAuthoring().getValue() instanceof HcpRefVo ? (HcpRefVo) form.ccAuthoring().getValue() : null;
		vo.setAuthoringHCP(hcpUser);
		vo.setAuthoringDateTime(new DateTime());
		
		vo.setDocumentDate(form.dteDocumentDate().getValue());
		
		PatientDocumentStatusVo status  = new PatientDocumentStatusVo();
		status.setCorrespondenceStatus(DocumentStatus.DRAFT);
		status.setRecordingDateTime(new DateTime());
		status.setRecordingUser(mosUser);
		
		vo.setCurrentDocumentStatus(status);
		vo.setDocumentStatusHistory(new PatientDocumentStatusVoCollection());
		vo.getDocumentStatusHistory().add(status);
		
		HcpRefVo responsibleHcp = form.ccResponsibleHcp().getValue() instanceof HcpRefVo ? (HcpRefVo) form.ccResponsibleHcp().getValue() : null;
		vo.setResponsibleHCP(responsibleHcp);
		
		Boolean copyLetter = new Boolean(form.Group1().getValue().equals(GenForm.Group1Enumeration.rdoYes));
		vo.setCopyPatientOnCorrespondence(copyLetter);
		
		return vo;
	}

	private ServerDocumentVo populateServerDocumentVo(String fileName) 
	{
		if(fileName == null || fileName.length() == 0)
			return null;
		
		ServerDocumentVo vo = new ServerDocumentVo();	
		vo.setFileName(fileName);
		vo.setFileType(FileType.DOC);
		
		return vo;
	}

	private String createReport(TemplateForPatientDocumentVo repTemplate, PatientDocumentVo doc) 
	{
		if(repTemplate == null)
			return null;
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		ReportTemplateVo template = domain.getTemplate(repTemplate);

		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		ReportSeedParsedVoCollection seeds = getSeedsFromReport(template.getReport().getReportXml());

		addSeedsForTemplate(client, seeds, doc);
		
		if(!addValueForNonMandatorySeeds(client, seeds))//	WDEV-14299
			return null;
		
		String [] errors = checkForSeeds(seeds, client);
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return null;
		}
		
		String fileName;
		try
		{
			fileName = client.buildReportAndUpload(getWorkAreaPath(), template.getReport().getReportXml(), template.getTemplateXml(), urlReportServer, QueryBuilderClient.RTF, "", 1, false); //WDEV-13366
		}
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return null;
		}

		return fileName;
	}

	//	WDEV-14299
	private boolean addValueForNonMandatorySeeds(QueryBuilderClient client, ReportSeedParsedVoCollection seeds) 
	{
		if(seeds == null || seeds.size() == 0)
			return true;
		
		for(int i=0; i<seeds.size(); i++)
		{
			ReportSeedParsedVo seed = seeds.get(i);
			
			if(seed == null)
				continue;
			
			if(Boolean.TRUE.equals(seed.getCanBeNull()))
			{
				if(nonMandatorySeedNotAddedToReport(seed, client))
				{
					try 
					{
						client.addSeed(new SeedValue(seed.getName(), null, Class.forName(seed.getType())));
					} 
					catch (ClassNotFoundException e) 
					{
						e.printStackTrace();
						engine.showMessage("Error building the report: " + e.getMessage());
						return false;
					}
				}
			}
		}
		
		return true;
	}

	//WDEV-14299
	private boolean nonMandatorySeedNotAddedToReport(ReportSeedParsedVo seed, QueryBuilderClient client) 
	{
		if(seed == null)
			return false;
		
		if(client == null)
			return false;
		
		if(client.getSeeds() == null)
			return true;
		
		for(int i=0; i<client.getSeeds().size(); i++)
		{
			if(client.getSeeds().get(i) == null)
				continue;
			
			SeedValue sValue = (SeedValue)client.getSeeds().get(i);
			
			if(seed.getName() != null && seed.getName().equals(sValue.getName()))
				return false;
		}
		
		return true;
	}

	private ReportSeedParsedVoCollection getSeedsFromReport(String reportXml) 
	{
		if(reportXml == null || reportXml.length() == 0)
			return null;
		
		ReportSeedParsedVoCollection seeds = null;
		
		try 
		{
			seeds = parseSeedsFromXML(reportXml);
		} 
		catch (DocumentException e) 
		{
			engine.showMessage("Error deserializing Seeds: " + e.toString());
			return null;
		}
		
		if(seeds == null || seeds.size() == 0)
			return null;
		
		return seeds;
	}

	private void addSeedsForTemplate(QueryBuilderClient client, ReportSeedParsedVoCollection seeds, PatientDocumentVo doc) 
	{
		if(seeds == null || seeds.size() == 0)
			return;
		
		if(form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			String patientSeed = getSeedName(seeds,form.getGlobalContext().Core.getPatientShort().getBoClassName());
			
			if(patientSeed != null)
				client.addSeed(new SeedValue(patientSeed, form.getGlobalContext().Core.getPatientShort().getID_Patient(), Integer.class));
		}
		
		if(form.cmbEpisode().getValue() instanceof EpisodeofCareShortVo)
		{
			String episodeSeed = getSeedName(seeds, form.cmbEpisode().getValue().getBoClassName());
			
			if(episodeSeed != null)
				client.addSeed(new SeedValue(episodeSeed, form.cmbEpisode().getValue().getID_EpisodeOfCare(), Integer.class));
		}
		
		if(form.cmbCContext().getValue() instanceof CareContextForPatientDocumentVo)
		{
			String cContextSeed = getSeedName(seeds, form.cmbCContext().getValue().getBoClassName());
			
			if(cContextSeed != null)
				client.addSeed(new SeedValue(cContextSeed, form.cmbCContext().getValue().getID_CareContext(), Integer.class));
		}
		
		if(form.cmbCContant().getValue() instanceof ClinicalContactShortVo)
		{
			String cContactSeed = getSeedName(seeds, form.cmbCContant().getValue().getBoClassName());
			
			if(cContactSeed != null)
				client.addSeed(new SeedValue(cContactSeed, form.cmbCContant().getValue().getID_ClinicalContact(), Integer.class));
		}
		
		if (doc != null && doc.getID_PatientDocumentIsNotNull())
		{
			String patDocSeed = getSeedName(seeds, doc.getBoClassName());
			if (patDocSeed!=null)
				client.addSeed(new SeedValue(patDocSeed, doc.getID_PatientDocument(), Integer.class));
		}
		//wdev-14230 
		
		if(ConfigFlag.UI.CORRESPONDENCE_DISPLAY_PATIENT_SUMMARY_NOTE_COMBO.getValue() == true)
		{
			if(form.cmbSummaryNote().getValue() != null)
			{
				String cContactSeed = getSeedName(seeds, form.cmbSummaryNote().getValue().getBoClassName());
				if(cContactSeed != null)
					client.addSeed(new SeedValue(cContactSeed, form.cmbSummaryNote().getValue().getID_PatientSummaryNoteByHCP(), Integer.class));
				
			}
			else
			{
				String cContactSeed = getSeedName(seeds, new PatientSummaryNoteByHCPRefVo().getBoClassName());
				if(cContactSeed != null)
					client.addSeed(new SeedValue(cContactSeed, null, Integer.class));
			}
		}
		//-------------------
		
	}

	private String getSeedName(ReportSeedParsedVoCollection seeds, String boClassName) 
	{
		if(boClassName == null || boClassName.length() == 0)
			throw new CodingRuntimeException("BoClassName cannot be null.");
		
		if(seeds == null || seeds.size() == 0)
			throw new CodingRuntimeException("Cannot return a seed name from a null list of seeds.");
		
		for(int i=0; i<seeds.size(); i++)
		{
			ReportSeedParsedVo seed = seeds.get(i);
			
			if(seed == null)
				continue;
			
			if(boClassName.equals(seed.getBOName()))
				return seed.getName();
		}
		
		return null;
	}

	private String[] checkForSeeds(ReportSeedParsedVoCollection seeds, QueryBuilderClient client) 
	{
		if(seeds == null || seeds.size() == 0)
			return null;
		
		if(client == null)
			return null;
		
		List<String> uiErrors = new ArrayList<String>();
		
		for(int i=0; i<seeds.size(); i++)
		{
			if(seeds.get(i) == null || !seeds.get(i).getCanBeNullIsNotNull() || Boolean.TRUE.equals(seeds.get(i).getCanBeNull()))
				continue;
			
			if(!checkIfMandatorySeedIsAdded(seeds.get(i).getName(), client.getSeeds()))
			{
				uiErrors.add(seeds.get(i).getName() + " is mandatory for selected template.");
			}
		}
		
		String[] seedsValidate = new String[uiErrors.size()];
		uiErrors.toArray(seedsValidate);
		
		return seedsValidate;
	}
	
	private boolean checkIfMandatorySeedIsAdded(String name, ArrayList seeds) 
	{
		if(name == null || name.length() == 0)
			return true;
		
		if(seeds == null || seeds.size() == 0)
			return false;
		
		for(int i=0; i<seeds.size(); i++)
		{
			if(seeds.get(i) == null)
				continue;
			
			SeedValue sValue = (SeedValue)seeds.get(i);
			
			if(sValue.getName().equals(name))
				return true;
		}
		
		return false;
	}

	private ReportSeedParsedVoCollection parseSeedsFromXML(String reportXML) throws DocumentException
	{
		Document document = DocumentHelper.parseText(reportXML);

		ReportSeedParsedVoCollection seeds = new ReportSeedParsedVoCollection();
		List list = document.selectNodes("//Project/Seeds/Seed");
		for (Iterator iter = list.iterator(); iter.hasNext();)
		{
			DefaultElement attribute = (DefaultElement) iter.next();

			ReportSeedParsedVo seed = new ReportSeedParsedVo();
			seed.setName(attribute.valueOf("Name"));
			seed.setType(attribute.valueOf("Type"));
			seed.setBOName(attribute.valueOf("BOName"));
			seed.setBOField(attribute.valueOf("BOField"));
			seed.setCanBeNull(new Boolean(attribute.valueOf("CanBeNull").equalsIgnoreCase("true")));
			seeds.add(seed);
		}

		return seeds;
	}
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		searchTemplate();
		updateControlsState();
	}
	
	private void searchTemplate() 
	{
		form.dyngrdReports().getRows().clear();
		bindAndSelectSpecialty();//	WDEV-13527
		
		String[] errors = validateSearch();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}

		String templateName = form.txtTemplate().getValue();
		String listOfMandatorySeeds = getListOfSelectedSeeds();
	
		populateReports(domain.searchReports(templateName, listOfMandatorySeeds, form.cmbDocumentType().getValue(), form.cmbSSpecialty().getValue()));
	}

	private String[] validateSearch() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if ((form.txtTemplate().getValue() == null || form.txtTemplate().getValue().length() == 0)
				&& form.cmbDocumentType().getValue() == null && form.cmbSSpecialty().getValue() == null)
		{
			uiErrors.add("Please provide at least one search criteria.");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private String getListOfSelectedSeeds() 
	{
		StringBuilder list = new StringBuilder();
		
		list.append("'" + new PatientRefVo().getBoClassName() + "'");
		
		list.append((list.length() > 0 ? ", " : "") + "'" + new EpisodeOfCareRefVo().getBoClassName() + "'");
		
		list.append((list.length() > 0 ? ", " : "") + "'" + new CareContextRefVo().getBoClassName() + "'");
		
		list.append((list.length() > 0 ? ", " : "") + "'" + new ClinicalContactRefVo().getBoClassName() + "'");
		if(ConfigFlag.UI.CORRESPONDENCE_DISPLAY_PATIENT_SUMMARY_NOTE_COMBO.getValue() == true) //wdev-14230
			list.append((list.length() > 0 ? ", " : "") + "'" + new PatientSummaryNoteByHCPRefVo().getBoClassName() + "'");
		
		return list.toString();
	}

	private void populateReports(DocumentCategoryConfigShortVoCollection documentCategoryConfigShortVoCollection) 
	{
		form.dyngrdReports().getRows().clear();
		
		if (documentCategoryConfigShortVoCollection == null)
		{
			//wdev-12285
			engine.showMessage("No matching templates found.");
			//---------
			return;
		}

		if(documentCategoryConfigShortVoCollection.size() == 0)			//wdev-12285
			engine.showMessage("No matching templates found.");			//wdev-12285
		else															//wdev-12285
			for (int i = 0; i < documentCategoryConfigShortVoCollection.size(); i++)
			{
				DocumentCategoryConfigShortVo voReportList = documentCategoryConfigShortVoCollection.get(i);
				addReport(voReportList);
			}
	}

	private void addReport(DocumentCategoryConfigShortVo voReportList)
	{
		if(voReportList == null || voReportList.getTemplate() == null)
			return;
		
		DynamicGridRow reportRow = checkIfReportIsAlreadyAdded(voReportList.getTemplate());
		
		if(reportRow == null)
		{
			reportRow = createReportRow(voReportList.getTemplate());
			reportRow.setExpanded(true);				//wdev-13915
		}
		addTemplates(voReportList, reportRow);
	}
	
	private DynamicGridRow createReportRow(TemplateForPatientDocumentVo template) 
	{
		if(template == null || template.getReport() == null)
			throw new CodingRuntimeException("Cannot add a row with null template or null report.");
			
		DynamicGridRow reportRow = form.dyngrdReports().getRows().newRow();
		
		reportRow.setValue(template.getReport());
		reportRow.setSelectable(false);
		reportRow.setCollapsedImage(form.getImages().Core.ReportDesigner);
		reportRow.setExpandedImage(form.getImages().Core.ReportDesigner);

		DynamicGridCell cellName = createCell(reportRow, getColumn(COLUMN_NAME));
		
		if(cellName != null)
			cellName.setValue(template.getReport().getReportName());

		if(template.getReport().getImsIdIsNotNull() && template.getReport().getImsId().intValue() > 0)
		{
			reportRow.setTextColor(Color.Blue);
		}
		
		return reportRow;
	}

	private DynamicGridRow checkIfReportIsAlreadyAdded(TemplateForPatientDocumentVo template) 
	{
		if(template == null)
			return null;
		
		for(int i=0; i<form.dyngrdReports().getRows().size(); i++)
		{
			if(form.dyngrdReports().getRows().get(i).getValue().equals(template.getReport()))
				return form.dyngrdReports().getRows().get(i);
		}
		
		return null;
	}

	private void addTemplates(DocumentCategoryConfigShortVo voReportList, DynamicGridRow reportRow)
	{
		if(voReportList == null || voReportList.getTemplate() == null || voReportList.getTemplate().getReport() == null)
			throw new CodingRuntimeException("Cannot add a row with null template or null report.");
		
		if(reportRow == null)
			return;

		DynamicGridRow templateRow = reportRow.getRows().newRow();
		templateRow.setValue(voReportList);
		templateRow.setCollapsedImage(form.getImages().Core.TemplateReport);
		templateRow.setExpandedImage(form.getImages().Core.TemplateReport);
	
		DynamicGridCell cellTemplateName = createCell(templateRow, getColumn(COLUMN_NAME));
		if(cellTemplateName != null)
			cellTemplateName.setValue(voReportList.getTemplate().getName());
	
		if(voReportList.getTemplate().getReport().getImsIdIsNotNull() && voReportList.getTemplate().getReport().getImsId().intValue() > 0)
		{
			templateRow.setTextColor(Color.Blue);
		}
	}
	
	private DynamicGridCell createCell(DynamicGridRow row, DynamicGridColumn column)
	{
		if(row == null || column == null)
			return null;
		
		DynamicGridCell cell = row.getCells().get(column);
		if (cell == null)
		{
			cell = row.getCells().newCell(column, DynamicCellType.STRING);
			cell.setReadOnly(true);
		}

		return cell;
	}
	
	private DynamicGridColumn getColumn(String identifier) 
	{
		return form.dyngrdReports().getColumns().getByIdentifier(identifier);
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.txtTemplate().setValue(null);
		form.cmbDocumentType().setValue(null);
		form.cmbSSpecialty().setValue(null);
		form.dyngrdReports().getRows().clear();
		
		if(form.cmbEpisode().getValue() == null)
			bindcmbSpecialtyLookup();
		
		updateControlsState();
	}

	@Override
	protected void onCmbCContextValueChanged() throws PresentationLogicException 
	{
		selectCareContext();//WDEV-13520
	}

	//WDEV-13520
	private void selectCareContext() 
	{
		bindCmbClinicalContact();
		
		if(ConfigFlag.UI.DEFAULT_DOCUMENT_TO_CONTEXT_DATE.getValue())//	WDEV-13413
		{
			if(form.cmbCContext().getValue() instanceof CareContextForPatientDocumentVo)
			{
				form.dteDocumentDate().setValue(form.cmbCContext().getValue().getStartDateTime().getDate());
			}
			else
			{
				selectEpisodeOfCare();
			}
		}
		else if(form.cmbCContext().getValue() instanceof CareContextForPatientDocumentVo && ContextType.INPATIENT.equals(form.cmbCContext().getValue().getContext()) && form.cmbCContext().getValue().getStartDateTimeIsNotNull())//	WDEV-13413
		{
			form.dteDocumentDate().setValue(form.cmbCContext().getValue().getStartDateTime().getDate());
		}
		else
		{
			form.dteDocumentDate().setValue(new Date());
		}
		
		form.ccResponsibleHcp().setValue((form.cmbCContext().getValue() instanceof CareContextForPatientDocumentVo && form.cmbCContext().getValue().getResponsibleHCP() != null) ? form.cmbCContext().getValue().getResponsibleHCP() : (form.cmbEpisode().getValue() instanceof EpisodeofCareShortVo ? form.cmbEpisode().getValue().getResponsibleHCP() : null));
		
		updateControlsState();
	}

	private void bindCmbClinicalContact() 
	{
		form.cmbCContant().clear();
		
		if(form.cmbCContext().getValue() instanceof CareContextForPatientDocumentVo)
		{
			ClinicalContactShortVoCollection clinicalContactList = domain.listClinicalContact(form.cmbCContext().getValue());
			
			for(int i=0; clinicalContactList != null && i<clinicalContactList.size(); i++)
			{
				ClinicalContactShortVo cc = clinicalContactList.get(i);
				
				if(cc != null)
				{
					form.cmbCContant().newRow(cc, getTextForClinicaContact(cc));
				}
			}
		}
	}

	private String getTextForClinicaContact(ClinicalContactShortVo cc) 
	{
		if(cc == null)
			return "";
		
		StringBuilder result = new StringBuilder();
		
		result.append(cc.createDisplayString());
		
		if(cc.getSpecialtyIsNotNull())
		{
			result.append(" - " + cc.getSpecialty().getIItemText());
		}
		
		if(cc.getContactTypeIsNotNull())
		{
			result.append(" - " + cc.getContactType().getIItemText());
		}
		
		if(cc.getSeenByIsNotNull())
		{
			result.append(" - " + cc.getSeenBy().getIHcpName());
		}
		
		return result.toString();
	}

	@Override
	protected void onCmbEpisodeValueChanged() throws PresentationLogicException 
	{
		selectEpisodeOfCare();//WDEV-13520
	}

	//WDEV-13520
	private void selectEpisodeOfCare() 
	{
		//	WDEV-13992
		if(form.cmbEpisode().getValue() instanceof EpisodeofCareShortVo)
		{
			form.getLocalContext().setSelectedSpecialty(form.cmbEpisode().getValue().getSpecialty());
		}
		
		bindCmbCareContext();
		
		bindAndSelectSpecialty();//	WDEV-13527
		
		form.ccResponsibleHcp().setValue(form.cmbEpisode().getValue() instanceof EpisodeofCareShortVo ? form.cmbEpisode().getValue().getResponsibleHCP() : null);
		
		if(ConfigFlag.UI.DEFAULT_DOCUMENT_TO_CONTEXT_DATE.getValue())//	WDEV-13413
		{
			form.dteDocumentDate().setValue(form.cmbEpisode().getValue() instanceof EpisodeofCareShortVo ? form.cmbEpisode().getValue().getStartDate() : new Date());
		}
		else if(!(form.cmbCContext().getValue() instanceof CareContextForPatientDocumentVo))//	WDEV-13413
			form.dteDocumentDate().setValue(new Date());
		
		updateControlsState();
	}

	private void bindAndSelectSpecialty() 
	{
		SpecialtyCollection epSpecialty = null;
		Specialty specialtyFromEOC = null;//WDEV-13992
		
		if(form.cmbEpisode().getValue() instanceof EpisodeofCareShortVo)
		{
			specialtyFromEOC = form.cmbEpisode().getValue().getSpecialty();//WDEV-13992
		}
		
		if(form.dyngrdReports().getValue() instanceof DocumentCategoryConfigShortVo && ((DocumentCategoryConfigShortVo) form.dyngrdReports().getValue()).getSpecialty() != null)//WDEV-13992
		{
			epSpecialty = (SpecialtyCollection) ((DocumentCategoryConfigShortVo) form.dyngrdReports().getValue()).getSpecialty().clone();//WDEV-13992
			
			if(specialtyFromEOC != null && epSpecialty != null && !epSpecialty.contains(specialtyFromEOC))//WDEV-13992
			{
				epSpecialty.add(specialtyFromEOC);//WDEV-13992
			}
		}
		
		if(SPECIALTY_LIST_ALL_BY_TEMPLATE.equals(ConfigFlag.UI.CORRESPONDENCE_SPECIALTY_LIST_ALL_BY.getValue()) && epSpecialty != null && epSpecialty.size() > 0)//WDEV-13992
		{
			bindCmbSpecialtyLookup(epSpecialty);
		}
		else
		{
			bindcmbSpecialtyLookup();
		}
		
		//WDEV-13992
		if(form.cmbSpecialty().getValues().contains(form.getLocalContext().getSelectedSpecialty()))
		{
			form.cmbSpecialty().setValue(form.getLocalContext().getSelectedSpecialty());
		}
		else
		{
			form.getLocalContext().setSelectedSpecialty(null);
		}
		
		//WDEV-13992
		if(form.cmbSpecialty().getValue() == null && epSpecialty != null && epSpecialty.size() == 1)
		{
			form.cmbSpecialty().setValue(epSpecialty.get(0));
		}
	}
	
	private void updateControlsState() 
	{
		form.cmbCContext().setEnabled(form.cmbEpisode().getValue() instanceof EpisodeofCareShortVo);
		form.cmbCContant().setEnabled(form.cmbCContext().getValue() instanceof CareContextForPatientDocumentVo);
		
		selectMandatoryControls();
	}

	private void bindCmbCareContext() 
	{
		form.cmbCContext().clear();
		form.cmbCContant().clear();
		
		if(form.cmbEpisode().getValue() instanceof EpisodeofCareShortVo)
		{
			CareContextForPatientDocumentVoCollection careContextList = domain.listCareContext(form.cmbEpisode().getValue());
			
			for(int i=0; careContextList != null && i<careContextList.size(); i++)
			{
				CareContextForPatientDocumentVo cc = careContextList.get(i);
				
				if(cc != null)
				{
					form.cmbCContext().newRow(cc, getTextForCareContext(cc));
				}
			}
		}
	}

	private String getTextForCareContext(CareContextForPatientDocumentVo cc) 
	{
		if(cc == null)
			return "";
		
		StringBuilder result = new StringBuilder();
		
		result.append(cc.createDisplayString());
		
		if(cc.getContextIsNotNull())
		{
			result.append(" - " + cc.getContext().getIItemText());
		}
		
		if(cc.getResponsibleHCPIsNotNull())
		{
			result.append(" - " + cc.getResponsibleHCP().getIHcpName());
		}
		
		return result.toString();
	}

	private void bindEpisodeCombo()
	{
		form.cmbEpisode().clear();
		
		EpisodeofCareShortVoCollection listEpisodesOfCare = domain.listEpisodesOfCare(form.getGlobalContext().Core.getPatientShort());
		
		for (int i = 0 ; listEpisodesOfCare != null && i < listEpisodesOfCare.size() ; i++)
		{
			EpisodeofCareShortVo eoc = listEpisodesOfCare.get(i);
			
			if (eoc != null)
			{
				form.cmbEpisode().newRow(eoc, getTextForEOC(eoc));
			}
		}
	}
	
	private String getTextForEOC(EpisodeofCareShortVo eoc)
	{
		if (eoc == null)
			return "";
		
		StringBuilder result = new StringBuilder();
		
		result.append(eoc.createDisplayString());
		
		if (eoc.getSpecialtyIsNotNull())
		{
			result.append(" - " + eoc.getSpecialty().getText());
		}
		if (eoc.getResponsibleHCPIsNotNull())
		{
			result.append(" - " + eoc.getResponsibleHCP().getIHcpName());
		}
		
		return result.toString();
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onDyngrdReportsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{
		bindAndSelectSpecialty();//WDEV-13992
		
		updateControlsState();
	}

	private void selectMandatoryControls() 
	{
		Object repTemplate = form.dyngrdReports().getValue();
		
		ReportTemplateVo template = null;
		ReportSeedParsedVoCollection seeds = null;
		
		if(repTemplate instanceof DocumentCategoryConfigShortVo && ((DocumentCategoryConfigShortVo) repTemplate).getTemplateIsNotNull())
		{
			template = domain.getTemplate(((DocumentCategoryConfigShortVo) repTemplate).getTemplate());
			seeds = getSeedsFromReport(template.getReport().getReportXml());
		}
		
		Boolean isEpisodeOfCareRequired = false;
		Boolean isCareContextRequired = false;
		Boolean isClinicalContact = false;
		
		if(seeds != null)
		{
			for(int i=0; i<seeds.size(); i++)
			{
				if(seeds.get(i) == null || !seeds.get(i).getCanBeNullIsNotNull() || Boolean.TRUE.equals(seeds.get(i).getCanBeNull()))
					continue;
				
				if(new EpisodeOfCareRefVo().getBoClassName().equals(seeds.get(i).getBOName()))
				{
					isEpisodeOfCareRequired = true;
				}
				else if(new CareContextRefVo().getBoClassName().equals(seeds.get(i).getBOName()))
				{
					isCareContextRequired = true;
				}
				else if(new ClinicalContactRefVo().getBoClassName().equals(seeds.get(i).getBOName()))
				{
					isClinicalContact = true;
					
					break;
				}
			}
		}
		
		form.cmbEpisode().setRequired(isEpisodeOfCareRequired || isCareContextRequired || isClinicalContact);
		form.cmbCContext().setRequired(isCareContextRequired || isClinicalContact);
		form.cmbCContant().setRequired(isClinicalContact);
	}

	@Override
	//WDEV-13413
	protected void onCmbCContantValueChanged() throws PresentationLogicException 
	{
		selectClinicalContact();//	WDEV-13413
	}

	//	WDEV-13413
	private void selectClinicalContact() 
	{
		if(ConfigFlag.UI.DEFAULT_DOCUMENT_TO_CONTEXT_DATE.getValue())
		{
			if(form.cmbCContant().getValue() instanceof ClinicalContactShortVo)
			{
				form.dteDocumentDate().setValue(form.cmbCContant().getValue().getStartDateTime().getDate());
			}
			else
			{
				selectCareContext();
			}
		}
		//wdev-15533
		if( form.cmbCContant().getValue() != null && form.cmbCContant().getValue() instanceof ClinicalContactShortVo)
		{
			if(form.cmbSpecialty().getValues().contains(form.cmbCContant().getValue().getSpecialty()))
			{
				form.cmbSpecialty().setValue(form.cmbCContant().getValue().getSpecialty());
				form.getLocalContext().setSelectedSpecialty(form.cmbCContant().getValue().getSpecialty());
			}
			else
			{
				form.getLocalContext().setSelectedSpecialty(null);
				form.cmbSpecialty().setValue(null);
			}
		}
		else
		{
			if( form.cmbEpisode().getValue() != null && form.cmbEpisode().getValue() instanceof EpisodeofCareShortVo)
			{
				form.getLocalContext().setSelectedSpecialty(form.cmbEpisode().getValue().getSpecialty());
				form.cmbSpecialty().setValue(form.cmbEpisode().getValue().getSpecialty());
			} 
			else
			{
				form.cmbSpecialty().setValue(null);
				form.getLocalContext().setSelectedSpecialty(null);
			}
			
		}
		//end wdev-15533
		
	}
	

	//WDEV-13992
	@Override
	protected void onCmbSpecialtyValueChanged()	throws PresentationLogicException 
	{
		form.getLocalContext().setSelectedSpecialty(form.cmbSpecialty().getValue());
	}
}
