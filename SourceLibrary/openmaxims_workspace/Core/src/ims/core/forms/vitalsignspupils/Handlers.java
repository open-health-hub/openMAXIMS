//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.vitalsignspupils;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbReactionRightLookup();
	abstract protected void defaultcmbReactionRightLookupValue();
	abstract protected void bindcmbReactionLeftLookup();
	abstract protected void defaultcmbReactionLeftLookupValue();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkLegendValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbReactionRightValueSet(Object value);
	abstract protected void oncmbReactionLeftValueSet(Object value);
	abstract protected void onBtnNextClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnPrevClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtongrpShowByValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnViewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrhPupilsPointClicked(ims.framework.utils.graphing.GraphingPoint point);
	abstract protected void onImbRight8Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbLeft8Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRight7Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbLeft7Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRight6Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbLeft6Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRight5Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbLeft5Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRight4Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbLeft4Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRight3Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbLeft3Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRight2Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbLeft2Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRight1Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbLeft1Click() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkReturnClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.chkDisplayLegend().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkLegendValueChanged();
			}
		});
		this.form.cmbReactionRight().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbReactionRightValueSet(value);
			}
		});
		this.form.cmbReactionLeft().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbReactionLeftValueSet(value);
			}
		});
		this.form.btnNext().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNextClick();
			}
		});
		this.form.btnPrev().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPrevClick();
			}
		});
		this.form.grpShowBy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtongrpShowByValueChanged();
			}
		});
		this.form.btnView().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnViewClick();
			}
		});
		this.form.grhPupils().setGraphingControlClickEvent(new GraphingControlClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.utils.graphing.GraphingPoint point)
			{
				onGrhPupilsPointClicked(point);
			}
		});
		this.form.imbRight8().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRight8Click();
			}
		});
		this.form.imbLeft8().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbLeft8Click();
			}
		});
		this.form.imbRight7().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRight7Click();
			}
		});
		this.form.imbLeft7().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbLeft7Click();
			}
		});
		this.form.imbRight6().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRight6Click();
			}
		});
		this.form.imbLeft6().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbLeft6Click();
			}
		});
		this.form.imbRight5().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRight5Click();
			}
		});
		this.form.imbLeft5().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbLeft5Click();
			}
		});
		this.form.imbRight4().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRight4Click();
			}
		});
		this.form.imbLeft4().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbLeft4Click();
			}
		});
		this.form.imbRight3().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRight3Click();
			}
		});
		this.form.imbLeft3().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbLeft3Click();
			}
		});
		this.form.imbRight2().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRight2Click();
			}
		});
		this.form.imbLeft2().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbLeft2Click();
			}
		});
		this.form.imbRight1().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRight1Click();
			}
		});
		this.form.imbLeft1().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbLeft1Click();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnUpdate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUpdateClick();
			}
		});
		this.form.lnkReturn().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkReturnClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbReactionRightLookup();
		bindcmbReactionLeftLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbReactionRightLookup();
		bindcmbReactionLeftLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbReactionRightLookupValue();
		defaultcmbReactionLeftLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
