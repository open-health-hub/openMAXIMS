//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3922.16454)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.correspondence.forms.documentcategoryconfig;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.admin.vo.TemplateBoRefVoCollection;
import ims.core.vo.DocumentCategoryConfigShortVo;
import ims.core.vo.DocumentCategoryConfigShortVoCollection;
import ims.core.vo.ReportForPatientDocumentVo;
import ims.core.vo.TemplateForPatientDocumentVo;
import ims.core.vo.TemplateForPatientDocumentVoCollection;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCategoryCollection;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.correspondence.forms.documentcategoryconfig.GenForm.lyrMainLayer.tabByCategoryContainer;
import ims.correspondence.forms.documentcategoryconfig.GenForm.lyrMainLayer.tabByCategoryContainer.grdDocCatRow;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.vo.LookupInstanceCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String COLUMN_NAME = "0";
	private static final String COLUMN_SELECT = "1";
	private static final Integer SPECIALTY_ROW_IDENTIFIER = new Integer(-1);
	private static final int COLUMN_SELECT_WIDTH = 25;

	// Global Form Events

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CorrespondenceNamespace.DocumentCategorySpecialty.ADD:
				addSpecialty();
				break;
			case GenForm.ContextMenus.CorrespondenceNamespace.DocumentCategorySpecialty.REMOVE:
				removeSpecialty();
				break;
			default:
				break;
		}
		
		updateControlsState();//	WDEV-13646
	}

	// End Global Form Events

	// Tab ByTemplates Events

	@Override
	protected void onImbSearchTClick() throws PresentationLogicException
	{
		searchT();
	}

	@Override
	protected void onDyngrdReportsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		rowSelectionChanged(row);
		updateControlsState();
	}

	@Override
	protected void onBtnEditTClick() throws PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onBtnSaveTClick() throws PresentationLogicException
	{
		if (save())
			open();
	}

	@Override
	protected void onBtnCancelTClick() throws PresentationLogicException
	{
		open();
	}

	// End Tab ByTemplates Events

	// Tab ByCategories Events

	@Override
	protected void onGrdDocCatSelectionChanged() throws PresentationLogicException
	{
		selectRowGrdDoc();
		updateControlsState();
	}

	@Override
	protected void onBtnEditDCClick() throws PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onDyngrdAvailableRepCellValueChanged(DynamicGridCell cell)
	{
		updateControlsState();
	}

	@Override
	protected void onDyngrdMappsCellValueChanged(DynamicGridCell cell)
	{
		if (SPECIALTY_ROW_IDENTIFIER.equals(cell.getRow().getIdentifier()))
		{
			rebindCombos(cell.getRow().getParent());
		}
		updateControlsState();
	}

	@Override
	protected void onDyngrdMappsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateContextMenuState();
	}

	@Override
	protected void onImbSearchDCClick() throws PresentationLogicException
	{
		searchDC(true);
	}

	@Override
	protected void onImbAddAllClick() throws PresentationLogicException
	{
		addAllAvailable();
	}

	@Override
	protected void onImbAddClick() throws PresentationLogicException
	{
		addSelectedAvailable();
	}

	@Override
	protected void onImbRemoveAllClick() throws PresentationLogicException
	{
		form.lyrMain().tabByCategory().dyngrdMapps().getRows().clear();
		searchDC(false);
	}

	@Override
	protected void onImbRemoveClick() throws PresentationLogicException
	{
		removeSelectedReportsFromMappings();
	}

	@Override
	protected void onBtnSaveDCClick() throws PresentationLogicException
	{
		if (saveDC())
			open();
	}

	@Override
	protected void onBtnCancelDCClick() throws PresentationLogicException
	{
		open();
	}

	// End Tab ByCategories Events

	// Form Logic Methods

	public void initialize()
	{
		removeFromCategoryLookup();//WDEV-13606, WDEV-13634
		form.lyrMain().tabByTemplate().ccSpecialty().initialize(Specialty.TYPE_ID);// ActivityType.TYPE_ID);
		initDynamicGrids();
		populateDocCatGrid((DocumentCategoryCollection) domain.getLookupService().getLookupCollection(DocumentCategory.TYPE_ID, DocumentCategoryCollection.class, DocumentCategory.class, true, true));
	}

	//WDEV-13606, WDEV-13634
	private void removeFromCategoryLookup() 
	{
		for(int i=form.lyrMain().tabByTemplate().cmbDocCat().getValues().size()-1; i>=0; i--)//WDEV-13634
		{
			if(form.lyrMain().tabByTemplate().cmbDocCat().getValues().get(i) == null)
				continue;
			
			if(DocumentCategory.HISTORICAL.equals(form.lyrMain().tabByTemplate().cmbDocCat().getValues().get(i))
				|| DocumentCategory.ASSESSMENT.equals(form.lyrMain().tabByTemplate().cmbDocCat().getValues().get(i))
				|| DocumentCategory.RACPCSUMMARY.equals(form.lyrMain().tabByTemplate().cmbDocCat().getValues().get(i)))// WDEV-13634
			{
				form.lyrMain().tabByTemplate().cmbDocCat().removeRow((DocumentCategory) form.lyrMain().tabByTemplate().cmbDocCat().getValues().get(i));
			}
		}
	}

	public void open()
	{
		clearScreen();
		if (validateSearchCriteria(false))
			populateReports(domain.listReports(form.lyrMain().tabByTemplate().txtTemplateName().getValue(), null, null), form.lyrMain().tabByTemplate().dyngrdReports(), false,false);
		if (form.getLocalContext().getCurrentRecordTemIsNotNull())
		{
			form.lyrMain().tabByTemplate().dyngrdReports().setValue(form.getLocalContext().getCurrentRecordTem());
			if (form.lyrMain().tabByTemplate().dyngrdReports().getSelectedRow() != null)
			{
				rowSelectionChanged(form.lyrMain().tabByTemplate().dyngrdReports().getSelectedRow());
				form.lyrMain().tabByTemplate().dyngrdReports().getSelectedRow().getParent().setExpanded(true);
			}
		}
		if (form.getLocalContext().getCurrentRecordCatIsNotNull())
		{
			form.lyrMain().tabByCategory().grdDocCat().setValue(form.getLocalContext().getCurrentRecordCat());
			if (form.lyrMain().tabByCategory().grdDocCat().getSelectedRow() != null)
			{
				selectRowGrdDoc();
			}

		}
		
		form.setMode(FormMode.VIEW);
	}

	private void clearScreen()
	{
		clearInstanceControls();
		clearInstanceControlsDC();
		form.lyrMain().tabByTemplate().dyngrdReports().getRows().clear();
	}

	private void initDynamicGrids()
	{
		DynamicGridColumn nCol = form.lyrMain().tabByTemplate().dyngrdReports().getColumns().newColumn("Name", COLUMN_NAME);
		nCol.setWidth(-1);
		nCol = form.lyrMain().tabByCategory().dyngrdMapps().getColumns().newColumn("", COLUMN_SELECT);
		nCol.setWidth(3 * COLUMN_SELECT_WIDTH);

		nCol = form.lyrMain().tabByCategory().dyngrdMapps().getColumns().newColumn("Template/Specialty", COLUMN_NAME);
		nCol.setWidth(-1);

		nCol = form.lyrMain().tabByCategory().dyngrdAvailableRep().getColumns().newColumn("", COLUMN_SELECT);
		nCol.setWidth(3 * COLUMN_SELECT_WIDTH);

		nCol = form.lyrMain().tabByCategory().dyngrdAvailableRep().getColumns().newColumn("Templates", COLUMN_NAME);
		nCol.setWidth(-1);
	}
	private void populateReports(TemplateForPatientDocumentVoCollection templates, DynamicGrid dynamicGrid, boolean showCheck)
	{
		populateReports(templates, dynamicGrid, showCheck, true);
	}

	private void populateReports(TemplateForPatientDocumentVoCollection templates, DynamicGrid dynamicGrid, boolean showCheck,boolean showErrors)
	{
		if (templates == null || templates.size() == 0)
		{
			if (showErrors)
			{
				engine.showMessage("No records to match your criteria found", "No records", MessageButtons.OK, MessageIcon.INFORMATION);
			}
			return;
		}

		for (int i = 0; i < templates.size(); i++)
		{

			addTemplate(templates.get(i), getReportRow(templates.get(i).getReport(), dynamicGrid), dynamicGrid, showCheck);
		}
	}

	private void addTemplate(TemplateForPatientDocumentVo template, DynamicGridRow reportRow, DynamicGrid dynamicGrid, boolean showCheck)
	{
		if (template == null || reportRow == null)
			return;

		DynamicGridRow templateRow = reportRow.getRows().newRow();
		templateRow.setValue(template);
		templateRow.setCollapsedImage(form.getImages().Core.TemplateReport);
		templateRow.setExpandedImage(form.getImages().Core.TemplateReport);
		templateRow.setSelectable(!showCheck);
		DynamicGridCell cell;
		if (showCheck)
		{
			cell = templateRow.getCells().newCell(getColumn(dynamicGrid, COLUMN_SELECT), DynamicCellType.BOOL);
			cell.setReadOnly(false);
			cell.setAutoPostBack(true);
		}

		cell = templateRow.getCells().newCell(getColumn(dynamicGrid, COLUMN_NAME), DynamicCellType.LABEL);
		cell.setValue(template.getName());

		if (template.getReport().getImsIdIsNotNull() && template.getReport().getImsId().intValue() > 0)
		{
			templateRow.setTextColor(Color.Blue);
		}

	}

	private DynamicGridColumn getColumn(DynamicGrid dynamicGrid, String identifier)
	{
		return dynamicGrid.getColumns().getByIdentifier(identifier);
	}

	private DynamicGridRow getReportRow(ReportForPatientDocumentVo report, DynamicGrid dynGrid)
	{

		for (int i = 0; i < dynGrid.getRows().size(); i++)
		{
			if (report.equals(dynGrid.getRows().get(i).getValue()))
				return dynGrid.getRows().get(i);

		}
		DynamicGridRow reportRow = dynGrid.getRows().newRow();

		reportRow.setValue(report);
		reportRow.setSelectable(false);
		reportRow.setCollapsedImage(form.getImages().Core.ReportDesigner);
		reportRow.setExpandedImage(form.getImages().Core.ReportDesigner);

		DynamicGridCell cell = reportRow.getCells().newCell(getColumn(dynGrid, COLUMN_NAME), DynamicCellType.LABEL);
		cell.setValue(report.getReportName());

		if (report.getImsIdIsNotNull() && report.getImsId().intValue() > 0)
		{
			reportRow.setTextColor(Color.Blue);
		}
		
		return reportRow;
	}

	public void updateControlsState()
	{
		form.lyrMain().tabByTemplate().ccSpecialty().setMode(form.getMode());
		boolean isViewMode = form.getMode().equals(FormMode.VIEW);
		if (isViewMode)
		{
			form.lyrMain().tabByTemplate().btnEditT().setVisible(true);
			form.lyrMain().tabByTemplate().btnEditT().setEnabled(form.lyrMain().tabByTemplate().dyngrdReports().getValue() instanceof TemplateForPatientDocumentVo);
			form.lyrMain().tabByCategory().btnEditDC().setVisible(true);
			form.lyrMain().tabByCategory().btnEditDC().setEnabled(form.lyrMain().tabByCategory().grdDocCat().getValue() != null);
		}
		else
		{
			form.lyrMain().tabByCategory().imbRemoveAll().setVisible(true);
			form.lyrMain().tabByCategory().imbRemoveAll().setEnabled(form.lyrMain().tabByCategory().dyngrdMapps().getRows().size() > 0);

			form.lyrMain().tabByCategory().imbRemove().setVisible(true);
			form.lyrMain().tabByCategory().imbRemove().setEnabled(areRowsSelectedInMappsGrid());

			form.lyrMain().tabByCategory().imbAdd().setVisible(true);
			form.lyrMain().tabByCategory().imbAdd().setEnabled(areRowsSelectedInAvailableGrid());

			form.lyrMain().tabByCategory().imbAddAll().setVisible(true);
			form.lyrMain().tabByCategory().imbAddAll().setEnabled(form.lyrMain().tabByCategory().dyngrdAvailableRep().getRows().size() > 0);

		}
		form.lyrMain().tabByCategory().setHeaderEnabled(isViewMode);
		form.lyrMain().tabByTemplate().setHeaderEnabled(isViewMode);

		updateContextMenuState();
	}

	private void updateContextMenuState()
	{
		boolean editMode = FormMode.EDIT.equals(form.getMode());
		form.getContextMenus().Correspondence.getDocumentCategorySpecialtyADDItem().setVisible(editMode);
		form.getContextMenus().Correspondence.getDocumentCategorySpecialtyADDItem().setEnabled(form.lyrMain().tabByCategory().dyngrdMapps().getSelectedRow() != null);
		form.getContextMenus().Correspondence.getDocumentCategorySpecialtyREMOVEItem().setVisible(editMode);
		form.getContextMenus().Correspondence.getDocumentCategorySpecialtyREMOVEItem().setEnabled(form.lyrMain().tabByCategory().dyngrdMapps().getSelectedRow() != null && SPECIALTY_ROW_IDENTIFIER.equals(form.lyrMain().tabByCategory().dyngrdMapps().getSelectedRow().getIdentifier()));
	}

	// End Form Logic Methods

	// Tab ByTemplates Logic Methods

	private void populateScreenFromData(DocumentCategoryConfigShortVo data)
	{
		clearInstanceControls();
		if (data == null)
			return;

		form.lyrMain().tabByTemplate().cmbDocCat().setValue(data.getCategory());
		form.lyrMain().tabByTemplate().ccSpecialty().setValue(data.getSpecialty());
	}

	private DocumentCategoryConfigShortVo populateDataFromScreen(DocumentCategoryConfigShortVo data)
	{
		if (data == null)
			data = new DocumentCategoryConfigShortVo();

		if (form.lyrMain().tabByTemplate().dyngrdReports().getValue() instanceof TemplateForPatientDocumentVo)
			data.setTemplate((TemplateForPatientDocumentVo) form.lyrMain().tabByTemplate().dyngrdReports().getValue());
		else
			throw new CodingRuntimeException("Unable to save do to now valid row selected in grid");

		data.setCategory(form.lyrMain().tabByTemplate().cmbDocCat().getValue());

		data.setSpecialty((SpecialtyCollection) form.lyrMain().tabByTemplate().ccSpecialty().getValue());
		return data;
	}

	private void searchT()
	{
		clearInstanceControls();
		form.lyrMain().tabByTemplate().dyngrdReports().getRows().clear();
		if (validateSearchCriteria(true))
			populateReports(domain.listReports(form.lyrMain().tabByTemplate().txtTemplateName().getValue(), null, null), form.lyrMain().tabByTemplate().dyngrdReports(), false);
		updateControlsState();

	}

	private boolean validateSearchCriteria(boolean showErrors)
	{
		String tempName = form.lyrMain().tabByTemplate().txtTemplateName().getValue();
		if (tempName == null || tempName.length() < 3)
		{
			if (showErrors)
				engine.showMessage("Template name must contain at least 3 characters");
			return false;
		}
		
		return true;
	}

	public void clearInstanceControls()
	{
		form.lyrMain().tabByTemplate().cmbDocCat().setValue(null);
		form.lyrMain().tabByTemplate().ccSpecialty().setValue((LookupInstanceCollection) null);
	}

	private void rowSelectionChanged(DynamicGridRow row)
	{
		form.getLocalContext().setCurrentRecordTem(null);
		form.getLocalContext().setCurrentRecord(null);
		if (row.getValue() instanceof TemplateForPatientDocumentVo)
		{
			form.getLocalContext().setCurrentRecordTem((TemplateForPatientDocumentVo) row.getValue());
			form.getLocalContext().setCurrentRecord(domain.getDocCatConfig((TemplateBoRefVo) row.getValue()));
		}
		
		populateScreenFromData(form.getLocalContext().getCurrentRecord());
	}

	public boolean save() throws PresentationLogicException
	{
		DocumentCategoryConfigShortVo record = populateDataFromScreen(form.getLocalContext().getCurrentRecord());
		String[] errors = record.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			form.getLocalContext().setCurrentRecord(domain.save(record));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		return true;
	}

	// End Tab ByTemplates Logic Methods

	// Tab ByCategories Logic Methods

	private boolean areRowsSelectedInAvailableGrid()
	{
		DynamicGrid grid = form.lyrMain().tabByCategory().dyngrdAvailableRep();
		for (int i = 0; i < grid.getRows().size(); i++)
		{
			for (int j = 0; j < grid.getRows().get(i).getRows().size(); j++)
				if (Boolean.TRUE.equals(grid.getRows().get(i).getRows().get(j).getCells().get(getColumn(grid, COLUMN_SELECT)).getValue()))
				{
					return true;
				}
		}

		return false;
	}

	private void populateDocCatGrid(DocumentCategoryCollection docCats)
	{
		form.lyrMain().tabByCategory().grdDocCat().getRows().clear();
		if (docCats == null)
			return;
		
		for (int i = 0; i < docCats.size(); i++)
		{
			DocumentCategory docCat = docCats.get(i);
			if (docCat == null)
				continue;

			if(DocumentCategory.HISTORICAL.equals(docCat) || DocumentCategory.ASSESSMENT.equals(docCat) || DocumentCategory.RACPCSUMMARY.equals(docCat))//WDEV-13606, WDEV-13634
				continue;
			
			grdDocCatRow nRow = form.lyrMain().tabByCategory().grdDocCat().getRows().newRow();
			nRow.setColDocCat(docCat.getText());
			nRow.setValue(docCat);
		}
	}

	private void clearInstanceControlsDC()
	{
		form.lyrMain().tabByCategory().dyngrdMapps().getRows().clear();
		form.lyrMain().tabByCategory().dyngrdAvailableRep().getRows().clear();
		form.lyrMain().tabByCategory().txtSearchDC().setValue(null);
	}

	private void selectRowGrdDoc()
	{
		clearInstanceControlsDC();
		if (form.lyrMain().tabByCategory().grdDocCat().getValue() != null)
		{
			form.getLocalContext().setCurrentRecordCat(form.lyrMain().tabByCategory().grdDocCat().getValue());
			form.getLocalContext().setOldCats(domain.listDocCateConfig(form.lyrMain().tabByCategory().grdDocCat().getValue()));
			populateInstanceControlsDC(form.getLocalContext().getOldCats());
		}
	}

	private void populateInstanceControlsDC(DocumentCategoryConfigShortVoCollection docCatsCol)
	{
		if (docCatsCol == null)
			return;
		for (int i = 0; i < docCatsCol.size(); i++)
		{
			addRowToMappGrid(docCatsCol.get(i));
		}
	}

	private void addRowToMappGrid(DocumentCategoryConfigShortVo docCat)
	{
		if (docCat == null)
			return;
		DynamicGridRow nRow = form.lyrMain().tabByCategory().dyngrdMapps().getRows().newRow();
		nRow.setCollapsedImage(form.getImages().Core.TemplateReport);
		nRow.setExpandedImage(form.getImages().Core.TemplateReport);
		// nRow.setSelectable(false);

		DynamicGridCell nCell = nRow.getCells().newCell(getColumn(form.lyrMain().tabByCategory().dyngrdMapps(), COLUMN_SELECT), DynamicCellType.BOOL);
		nCell.setAutoPostBack(true);
		nCell = nRow.getCells().newCell(getColumn(form.lyrMain().tabByCategory().dyngrdMapps(), COLUMN_NAME), DynamicCellType.LABEL);
		nCell.setValue(docCat.getTemplateIsNotNull() ? docCat.getTemplate().getName() : "");

		nRow.setValue(docCat);

		addSpecialitiesRow(nRow, docCat.getSpecialty());
		rebindCombos(nRow);
	}

	private TemplateBoRefVoCollection getTemplateBoRefFromMappGrid()
	{
		DynamicGridRowCollection rows = form.lyrMain().tabByCategory().dyngrdMapps().getRows();
		if (rows.size() == 0)
			return null;

		TemplateBoRefVoCollection result = new TemplateBoRefVoCollection();
		for (int i = 0; i < rows.size(); i++)
		{
			if (rows.get(i).getValue() instanceof DocumentCategoryConfigShortVo)
			{
				result.add(((DocumentCategoryConfigShortVo) rows.get(i).getValue()).getTemplate());
			}
		}

		return result;
	}

	private void addSpecialitiesRow(DynamicGridRow pRow, SpecialtyCollection specialty)
	{
		if (specialty == null)
			return;

		for (int i = 0; i < specialty.size(); i++)
		{
			Specialty spe = specialty.get(i);
			DynamicGridRow nRow = pRow.getRows().newRow();

			nRow.setIdentifier(SPECIALTY_ROW_IDENTIFIER);
			nRow.setCollapsedImage(form.getImages().Admin.Specialty01);
			nRow.setExpandedImage(form.getImages().Admin.Specialty01);

			DynamicGridCell nCell = nRow.getCells().newCell(getColumn(form.lyrMain().tabByCategory().dyngrdMapps(), COLUMN_NAME), DynamicCellType.ENUMERATION);
			nCell.setReadOnly(false);
			nCell.setAutoPostBack(true);
			nCell.getItems().newItem(spe);
			nCell.setValue(spe);
		}
	}

	private boolean areRowsSelectedInMappsGrid()
	{
		DynamicGrid grid = form.lyrMain().tabByCategory().dyngrdMapps();
		for (int i = 0; i < grid.getRows().size(); i++)
		{
			if (Boolean.TRUE.equals(grid.getRows().get(i).getCells().get(getColumn(grid, COLUMN_SELECT)).getValue()))
			{
				return true;
			}
		}

		return false;
	}

	private void removeSelectedReportsFromMappings()
	{
		DynamicGrid grid = form.lyrMain().tabByCategory().dyngrdMapps();
		for (int i = grid.getRows().size() - 1; i >= 0; i--)
		{
			if (Boolean.TRUE.equals(grid.getRows().get(i).getCells().get(getColumn(grid, COLUMN_SELECT)).getValue()))
			{
				grid.getRows().remove(grid.getRows().get(i));
			}
		}
		
		searchDC(false);
	}

	// private void

	private void searchDC(boolean showErrors)
	{
		form.lyrMain().tabByCategory().dyngrdAvailableRep().getRows().clear();
		if (form.lyrMain().tabByCategory().txtSearchDC().getValue() == null || form.lyrMain().tabByCategory().txtSearchDC().getValue().length() < 3)
		{
			if (showErrors)
				engine.showMessage("Name must contain at least 3 characters");
			
			updateControlsState();//WDEV-13655
			
			return;
		}
		populateReports(domain.listReports(form.lyrMain().tabByCategory().txtSearchDC().getValue() != null ? form.lyrMain().tabByCategory().txtSearchDC().getValue() : "", getTemplateBoRefFromMappGrid(), form.lyrMain().tabByCategory().grdDocCat().getValue()), form.lyrMain().tabByCategory().dyngrdAvailableRep(), true);
		updateControlsState();
	}

	private void removeSpecialty()
	{
		DynamicGridRow parent = form.lyrMain().tabByCategory().dyngrdMapps().getSelectedRow().getParent();
		if (parent == null)
			throw new CodingRuntimeException("Inconsistent row selected parent is null");
		form.lyrMain().tabByCategory().dyngrdMapps().getRows().remove(form.lyrMain().tabByCategory().dyngrdMapps().getSelectedRow());
		rebindCombos(parent);
		form.lyrMain().tabByCategory().dyngrdMapps().setValue(parent.getValue());
		form.lyrMain().tabByCategory().dyngrdMapps().setEnabled(true);
	}

	private void rebindCombos(DynamicGridRow parent)
	{
		SpecialtyCollection specs = (SpecialtyCollection) domain.getLookupService().getLookupCollection(Specialty.TYPE_ID, SpecialtyCollection.class, Specialty.class, true, true);
		DynamicGridColumn col = getColumn(form.lyrMain().tabByCategory().dyngrdMapps(), COLUMN_NAME);
		ArrayList<Specialty> existing = new ArrayList<Specialty>();
		for (int i = 0; i < parent.getRows().size(); i++)
		{
			if (parent.getRows().get(i).getCells().get(col).getValue() instanceof Specialty)
				existing.add((Specialty) parent.getRows().get(i).getCells().get(col).getValue());
		}
		for (int i = 0; i < parent.getRows().size(); i++)
		{
			Specialty savedValue = null;
			DynamicGridCell cell = parent.getRows().get(i).getCells().get(col);
			if (cell.getValue() instanceof Specialty)
			{
				savedValue = (Specialty) cell.getValue();
			}
			cell.getItems().clear();

			for (int j = 0; j < specs.size(); j++)
			{
				if (!existing.contains(specs.get(j)) || (savedValue != null && savedValue.equals(specs.get(j))))
				{
					cell.getItems().newItem(specs.get(j));
				}
			}

			cell.setValue(savedValue);
		}
	}

	private void addSpecialty()
	{
		DynamicGridRow parent = form.lyrMain().tabByCategory().dyngrdMapps().getSelectedRow();

		if (parent.getParent() != null)
			parent = parent.getParent();

		DynamicGridRow nRow = parent.getRows().newRow();
		nRow.setIdentifier(SPECIALTY_ROW_IDENTIFIER);
		nRow.setCollapsedImage(form.getImages().Admin.Specialty01);
		nRow.setExpandedImage(form.getImages().Admin.Specialty01);

		DynamicGridCell nCell = nRow.getCells().newCell(getColumn(form.lyrMain().tabByCategory().dyngrdMapps(), COLUMN_NAME), DynamicCellType.ENUMERATION);
		nCell.setReadOnly(false);
		nCell.setAutoPostBack(false);
		form.lyrMain().tabByCategory().dyngrdMapps().setSelectedRow(nRow);

		parent.setExpanded(true);

		rebindCombos(parent);
		updateContextMenuState();
	}

	private void addAllAvailable()
	{
		tabByCategoryContainer tab = form.lyrMain().tabByCategory();

		for (int i = 0; i < tab.dyngrdAvailableRep().getRows().size(); i++)
		{
			DynamicGridRowCollection templates = tab.dyngrdAvailableRep().getRows().get(i).getRows();
			if (templates != null)
			{
				for (int j = 0; j < templates.size(); j++)
				{
					DocumentCategoryConfigShortVo docCat = new DocumentCategoryConfigShortVo();
					docCat.setTemplate((TemplateForPatientDocumentVo) templates.get(j).getValue());
					docCat.setCategory(tab.grdDocCat().getValue());
					addRowToMappGrid(docCat);
				}

			}
		}

		tab.dyngrdAvailableRep().getRows().clear();
		updateControlsState();
	}

	private void addSelectedAvailable()
	{
		tabByCategoryContainer tab = form.lyrMain().tabByCategory();
		DynamicGridColumn colSel = getColumn(tab.dyngrdAvailableRep(), COLUMN_SELECT);

		for (int i = 0; i < tab.dyngrdAvailableRep().getRows().size(); i++)
		{
			DynamicGridRowCollection templates = tab.dyngrdAvailableRep().getRows().get(i).getRows();
			if (templates != null)
			{
				for (int j = 0; j < templates.size(); j++)
				{

					if (Boolean.TRUE.equals(templates.get(j).getCells().get(colSel).getValue()))
					{
						DocumentCategoryConfigShortVo docCat = new DocumentCategoryConfigShortVo();
						docCat.setTemplate((TemplateForPatientDocumentVo) templates.get(j).getValue());
						docCat.setCategory(tab.grdDocCat().getValue());
						addRowToMappGrid(docCat);
					}
				}

			}
		}
		searchDC(false);
		updateControlsState();
	}

	private boolean saveDC()
	{
		DocumentCategoryConfigShortVoCollection record = populateDataFromScreenDC();
		if (record != null)
		{
			String[] err = record.validate();

			if (err != null && err.length > 0)
			{
				engine.showErrors(err);
				return false;
			}
		}
		if (record == null && !form.getLocalContext().getOldCatsIsNotNull())
			return true;
		try
		{
			form.getLocalContext().setOldCats(domain.saveAll(form.getLocalContext().getOldCats(), record));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		return true;
	}

	private DocumentCategoryConfigShortVoCollection populateDataFromScreenDC()
	{
		DynamicGridRowCollection rows = form.lyrMain().tabByCategory().dyngrdMapps().getRows();
		DynamicGridColumn colSpec = getColumn(form.lyrMain().tabByCategory().dyngrdMapps(), COLUMN_NAME);
		if (rows.size() == 0)
			return null;
		DocumentCategoryConfigShortVoCollection result = new DocumentCategoryConfigShortVoCollection();

		for (int i = 0; i < rows.size(); i++)
		{
			DocumentCategoryConfigShortVo docCat = (DocumentCategoryConfigShortVo) rows.get(i).getValue();
			docCat.setSpecialty(null);

			DynamicGridRowCollection specR = rows.get(i).getRows();
			if (specR != null && specR.size() > 0)
			{
				docCat.setSpecialty(new SpecialtyCollection());
				for (int j = 0; j < specR.size(); j++)
				{
					Object spec = specR.get(j).getCells().get(colSpec).getValue();
					if (spec instanceof Specialty)
					{
						docCat.getSpecialty().add((Specialty) spec);
					}
				}
			}
			result.add(docCat);
		}

		return result;
	}

	// End Tab ByCategories Logic Methods

	public void newInstance() throws PresentationLogicException
	{

	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}
}
