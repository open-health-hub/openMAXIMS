//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.correspondence.forms.noletterrequiredadmin;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdConsultantRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdConsultantRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolConsultantIDReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolConsultantIDReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolConsultantIDOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolConsultantID(String value)
		{
			super.row.setTooltip(0, value);
		}
		public Integer getcolConsultantID()
		{
			return (Integer)super.row.get(0);
		}
		public void setcolConsultantID(Integer value)
		{
			super.row.set(0, value);
		}
		public void setCellcolConsultantIDTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolNoLetterIsRequiredConsultantIDReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolNoLetterIsRequiredConsultantIDReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolNoLetterIsRequiredConsultantIDOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolNoLetterIsRequiredConsultantID(String value)
		{
			super.row.setTooltip(1, value);
		}
		public Integer getcolNoLetterIsRequiredConsultantID()
		{
			return (Integer)super.row.get(1);
		}
		public void setcolNoLetterIsRequiredConsultantID(Integer value)
		{
			super.row.set(1, value);
		}
		public void setCellcolNoLetterIsRequiredConsultantIDTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolConsultantImageReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolConsultantImageReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolConsultantImageOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolConsultantImage(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.framework.utils.Image getcolConsultantImage()
		{
			return (ims.framework.utils.Image)super.row.get(2);
		}
		public void setcolConsultantImage(ims.framework.utils.Image value)
		{
			super.row.set(2, value);
		}
		public void setCellcolConsultantImageTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolConsultantReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolConsultantOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolConsultant(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolConsultant()
		{
			return (String)super.row.get(3);
		}
		public void setcolConsultant(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolConsultantTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolExcludeReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolExcludeReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolExcludeOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolExclude(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.correspondence.vo.lookups.Yes getcolExclude()
		{
			return (ims.correspondence.vo.lookups.Yes)super.row.get(4);
		}
		public void setcolExclude(ims.correspondence.vo.lookups.Yes value)
		{
			super.row.set(4, value, true);
		}
		public void setCellcolExcludeTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdConsultantRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdConsultantRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdConsultantRow get(int index)
		{
			return new grdConsultantRow(super.collection.get(index));
		}
		public grdConsultantRow newRow()
		{
			return new grdConsultantRow(super.collection.newRow());
		}
		public grdConsultantRow newRow(boolean autoSelect)
		{
			return new grdConsultantRow(super.collection.newRow(autoSelect));
		}
		public grdConsultantRow newRowAt(int index)
		{
			return new grdConsultantRow(super.collection.newRowAt(index));
		}
		public grdConsultantRow newRowAt(int index, boolean autoSelect)
		{
			return new grdConsultantRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdConsultantGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addAnswerBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int imageHeight, boolean canBeEmpty, boolean canGrow)
		{
			super.grid.addAnswerBoxColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, imageHeight, canBeEmpty, canGrow);
		}
		public void answerBoxColumnClear(int column)
		{
			super.grid.answerBoxColumnClear(column);
		}
		public void answerBoxColumnNewOption(int column, AnswerBoxOption option)
		{
			super.grid.answerBoxColumnNewOption(column, option);
		}
		public ims.core.vo.MedicLiteVoCollection getValues()
		{
			ims.core.vo.MedicLiteVoCollection listOfValues = new ims.core.vo.MedicLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdConsultantRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdConsultantRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdConsultantRowCollection getRows()
		{
			return new grdConsultantRowCollection(super.grid.getRows());
		}
		public grdConsultantRow getRowByValue(ims.core.vo.MedicLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdConsultantRow(row);
		}
		public void setcolConsultantIDHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolConsultantIDHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolNoLetterIsRequiredConsultantIDHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolNoLetterIsRequiredConsultantIDHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolConsultantImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolConsultantImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolExcludeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolExcludeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public GridMutableAnswerBox colExcludeAnswerBox()
		{
			return null;//return new GridMutableAnswerBox(super.grid, 4);
		}
	}
	public static class grdClinicRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdClinicRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolClinicImageReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolClinicImageReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolClinicImageOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolClinicImage(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.Image getcolClinicImage()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setcolClinicImage(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellcolClinicImageTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolNoLetterIsRequiredClinicIDReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolNoLetterIsRequiredClinicIDReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolNoLetterIsRequiredClinicIDOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolNoLetterIsRequiredClinicID(String value)
		{
			super.row.setTooltip(1, value);
		}
		public Integer getcolNoLetterIsRequiredClinicID()
		{
			return (Integer)super.row.get(1);
		}
		public void setcolNoLetterIsRequiredClinicID(Integer value)
		{
			super.row.set(1, value);
		}
		public void setCellcolNoLetterIsRequiredClinicIDTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolClinicIDReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolClinicIDReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolClinicIDOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolClinicID(String value)
		{
			super.row.setTooltip(2, value);
		}
		public Integer getcolClinicID()
		{
			return (Integer)super.row.get(2);
		}
		public void setcolClinicID(Integer value)
		{
			super.row.set(2, value);
		}
		public void setCellcolClinicIDTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolClinicReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolClinicReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolClinicOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolClinic(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolClinic()
		{
			return (String)super.row.get(3);
		}
		public void setcolClinic(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolClinicTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolExcludeNewReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolExcludeNewReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolExcludeNewOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolExcludeNew(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.correspondence.vo.lookups.Yes getcolExcludeNew()
		{
			return (ims.correspondence.vo.lookups.Yes)super.row.get(4);
		}
		public void setcolExcludeNew(ims.correspondence.vo.lookups.Yes value)
		{
			super.row.set(4, value, true);
		}
		public void setCellcolExcludeNewTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolExcludeReviewReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolExcludeReviewReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolExcludeReviewOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForcolExcludeReview(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.correspondence.vo.lookups.Yes getcolExcludeReview()
		{
			return (ims.correspondence.vo.lookups.Yes)super.row.get(5);
		}
		public void setcolExcludeReview(ims.correspondence.vo.lookups.Yes value)
		{
			super.row.set(5, value, true);
		}
		public void setCellcolExcludeReviewTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.core.vo.ClinicLiteVo getValue()
		{
			return (ims.core.vo.ClinicLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.ClinicLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdClinicRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdClinicRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdClinicRow get(int index)
		{
			return new grdClinicRow(super.collection.get(index));
		}
		public grdClinicRow newRow()
		{
			return new grdClinicRow(super.collection.newRow());
		}
		public grdClinicRow newRow(boolean autoSelect)
		{
			return new grdClinicRow(super.collection.newRow(autoSelect));
		}
		public grdClinicRow newRowAt(int index)
		{
			return new grdClinicRow(super.collection.newRowAt(index));
		}
		public grdClinicRow newRowAt(int index, boolean autoSelect)
		{
			return new grdClinicRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdClinicGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addAnswerBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int imageHeight, boolean canBeEmpty, boolean canGrow)
		{
			super.grid.addAnswerBoxColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, imageHeight, canBeEmpty, canGrow);
		}
		public void answerBoxColumnClear(int column)
		{
			super.grid.answerBoxColumnClear(column);
		}
		public void answerBoxColumnNewOption(int column, AnswerBoxOption option)
		{
			super.grid.answerBoxColumnNewOption(column, option);
		}
		public ims.core.vo.ClinicLiteVoCollection getValues()
		{
			ims.core.vo.ClinicLiteVoCollection listOfValues = new ims.core.vo.ClinicLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.ClinicLiteVo getValue()
		{
			return (ims.core.vo.ClinicLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.ClinicLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdClinicRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdClinicRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdClinicRowCollection getRows()
		{
			return new grdClinicRowCollection(super.grid.getRows());
		}
		public grdClinicRow getRowByValue(ims.core.vo.ClinicLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdClinicRow(row);
		}
		public void setcolClinicImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolClinicImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolNoLetterIsRequiredClinicIDHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolNoLetterIsRequiredClinicIDHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolClinicIDHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolClinicIDHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolClinicHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolClinicHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolExcludeNewHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolExcludeNewHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public GridMutableAnswerBox colExcludeNewAnswerBox()
		{
			return null;//return new GridMutableAnswerBox(super.grid, 4);
		}
		public void setcolExcludeReviewHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolExcludeReviewHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public GridMutableAnswerBox colExcludeReviewAnswerBox()
		{
			return null;//return new GridMutableAnswerBox(super.grid, 5);
		}
	}
	public static class grdSpecialtyRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSpecialtyRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNoLetterIsRequiredSpecialtyIDReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNoLetterIsRequiredSpecialtyIDReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNoLetterIsRequiredSpecialtyIDOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolNoLetterIsRequiredSpecialtyID(String value)
		{
			super.row.setTooltip(0, value);
		}
		public Integer getcolNoLetterIsRequiredSpecialtyID()
		{
			return (Integer)super.row.get(0);
		}
		public void setcolNoLetterIsRequiredSpecialtyID(Integer value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNoLetterIsRequiredSpecialtyIDTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSpecialtyIDReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSpecialtyIDReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSpecialtyIDOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolSpecialtyID(String value)
		{
			super.row.setTooltip(1, value);
		}
		public Integer getcolSpecialtyID()
		{
			return (Integer)super.row.get(1);
		}
		public void setcolSpecialtyID(Integer value)
		{
			super.row.set(1, value);
		}
		public void setCellcolSpecialtyIDTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolSpecialtyImageReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolSpecialtyImageReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolSpecialtyImageOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolSpecialtyImage(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.framework.utils.Image getcolSpecialtyImage()
		{
			return (ims.framework.utils.Image)super.row.get(2);
		}
		public void setcolSpecialtyImage(ims.framework.utils.Image value)
		{
			super.row.set(2, value);
		}
		public void setCellcolSpecialtyImageTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolSpecialtyReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolSpecialtyReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolSpecialtyOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolSpecialty(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolSpecialty()
		{
			return (String)super.row.get(3);
		}
		public void setcolSpecialty(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolSpecialtyTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolExcludeReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolExcludeReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolExcludeOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolExclude(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.correspondence.vo.lookups.Yes getcolExclude()
		{
			return (ims.correspondence.vo.lookups.Yes)super.row.get(4);
		}
		public void setcolExclude(ims.correspondence.vo.lookups.Yes value)
		{
			super.row.set(4, value, true);
		}
		public void setCellcolExcludeTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.row.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSpecialtyRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSpecialtyRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSpecialtyRow get(int index)
		{
			return new grdSpecialtyRow(super.collection.get(index));
		}
		public grdSpecialtyRow newRow()
		{
			return new grdSpecialtyRow(super.collection.newRow());
		}
		public grdSpecialtyRow newRow(boolean autoSelect)
		{
			return new grdSpecialtyRow(super.collection.newRow(autoSelect));
		}
		public grdSpecialtyRow newRowAt(int index)
		{
			return new grdSpecialtyRow(super.collection.newRowAt(index));
		}
		public grdSpecialtyRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSpecialtyRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSpecialtyGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addAnswerBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int imageHeight, boolean canBeEmpty, boolean canGrow)
		{
			super.grid.addAnswerBoxColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, imageHeight, canBeEmpty, canGrow);
		}
		public void answerBoxColumnClear(int column)
		{
			super.grid.answerBoxColumnClear(column);
		}
		public void answerBoxColumnNewOption(int column, AnswerBoxOption option)
		{
			super.grid.answerBoxColumnNewOption(column, option);
		}
		public ims.core.vo.lookups.Specialty[] getValues()
		{
			ims.core.vo.lookups.Specialty[] listOfValues = new ims.core.vo.lookups.Specialty[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.grid.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.grid.setValue(value);
		}
		public grdSpecialtyRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSpecialtyRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSpecialtyRowCollection getRows()
		{
			return new grdSpecialtyRowCollection(super.grid.getRows());
		}
		public grdSpecialtyRow getRowByValue(ims.core.vo.lookups.Specialty value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSpecialtyRow(row);
		}
		public void setcolNoLetterIsRequiredSpecialtyIDHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNoLetterIsRequiredSpecialtyIDHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolSpecialtyIDHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSpecialtyIDHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolSpecialtyImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolSpecialtyImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolSpecialtyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolSpecialtyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolExcludeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolExcludeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public GridMutableAnswerBox colExcludeAnswerBox()
		{
			return null;//return new GridMutableAnswerBox(super.grid, 4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 12, 8, 264, 568, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,"Consultant List", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 560, 8, 270, 568, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Clinic List", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 286, 8, 264, 568, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specialty List", new Integer(2), ""}));

		// Button Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 12, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 20, 37, 248, 524, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdConsultantTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(25), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdConsultantTemp);
		grdConsultantGrid grdConsultant = (grdConsultantGrid)GridFlyweightFactory.getInstance().createGridBridge(grdConsultantGrid.class, m_grdConsultantTemp);
		grdConsultant.addIntColumn("Column Header", 0, 0, 0, true, true, null, false, 0, true);
		grdConsultant.addIntColumn("Column Header", 0, 0, 0, true, true, null, false, 0, true);
		grdConsultant.addImageColumn(" ", 0, 0, 32, true, 0);
		grdConsultant.addStringColumn("Consultant", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdConsultant.addAnswerBoxColumn("Exclude", 0, 0, -1, false, false, 10, true, true);
		super.addGrid(grdConsultant);
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 568, 32, 254, 524, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		Grid m_grdClinicTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(25), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdClinicTemp);
		grdClinicGrid grdClinic = (grdClinicGrid)GridFlyweightFactory.getInstance().createGridBridge(grdClinicGrid.class, m_grdClinicTemp);
		grdClinic.addImageColumn(" ", 0, 0, 28, true, 0);
		grdClinic.addIntColumn("Column Header", 0, 0, 0, true, true, null, false, 0, true);
		grdClinic.addIntColumn(" ", 0, 0, 0, true, true, null, false, 0, true);
		grdClinic.addStringColumn("Clinic", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinic.addAnswerBoxColumn("Excl. New", 0, 0, 65, false, false, 10, true, true);
		grdClinic.addAnswerBoxColumn("Excl.  Review", 0, 0, -1, false, false, 10, true, true);
		super.addGrid(grdClinic);
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 294, 32, 248, 524, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdSpecialtyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(25), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdSpecialtyTemp);
		grdSpecialtyGrid grdSpecialty = (grdSpecialtyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpecialtyGrid.class, m_grdSpecialtyTemp);
		grdSpecialty.addIntColumn("Column Header", 0, 0, 0, true, true, null, false, 0, true);
		grdSpecialty.addIntColumn(" ", 0, 0, 0, true, true, null, false, 0, true);
		grdSpecialty.addImageColumn(" ", 0, 0, 32, true, 0);
		grdSpecialty.addStringColumn("Specialty", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSpecialty.addAnswerBoxColumn("Exclude", 0, 0, -1, false, false, 10, true, true);
		super.addGrid(grdSpecialty);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public grdConsultantGrid grdConsultant()
	{
		return (grdConsultantGrid)super.getGrid(0);
	}
	public grdClinicGrid grdClinic()
	{
		return (grdClinicGrid)super.getGrid(1);
	}
	public grdSpecialtyGrid grdSpecialty()
	{
		return (grdSpecialtyGrid)super.getGrid(2);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Location = new ImageHelper(103104, "Images/Admin/location.png", new Integer(16), new Integer(16));
				MemberOfStaff = new ImageHelper(103133, "Images/Admin/User-Offline.gif", new Integer(16), new Integer(16));
				Service = new ImageHelper(103110, "Images/Admin/clinical_service.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Location;
			public final ims.framework.utils.Image MemberOfStaff;
			public final ims.framework.utils.Image Service;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Tick;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_NoLetterIsRequiredInstance = new ims.framework.ContextVariable("NoLetterIsRequiredInstance", prefix + "_lv_Correspondence.NoLetterRequiredAdmin.__internal_x_context__NoLetterIsRequiredInstance_" + componentIdentifier + "");
		}
		
		public boolean getNoLetterIsRequiredInstanceIsNotNull()
		{
			return !cxl_NoLetterIsRequiredInstance.getValueIsNull(context);
		}
		public ims.correspondence.vo.NoLetterIsRequiredVo getNoLetterIsRequiredInstance()
		{
			return (ims.correspondence.vo.NoLetterIsRequiredVo)cxl_NoLetterIsRequiredInstance.getValue(context);
		}
		public void setNoLetterIsRequiredInstance(ims.correspondence.vo.NoLetterIsRequiredVo value)
		{
			cxl_NoLetterIsRequiredInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NoLetterIsRequiredInstance = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[73];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.NoLetterRequiredAdmin.__internal_x_context__NoLetterIsRequiredInstance_" + componentIdentifier, "BO-1053100007-ID", "ID_NoLetterIsRequired");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.NoLetterRequiredAdmin.__internal_x_context__NoLetterIsRequiredInstance_" + componentIdentifier, "BO-1053100007-ISACTIVE", "IsActive");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
