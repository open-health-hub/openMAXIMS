//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.correspondence.forms.glossaryadmin;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrGlossaryLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabGlossaryDefContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdGlossaryRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdGlossaryRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolCategoryReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolCategoryReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolCategoryOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolCategory(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.correspondence.vo.lookups.GlossaryCategory getcolCategory()
				{
					return (ims.correspondence.vo.lookups.GlossaryCategory)super.row.get(0);
				}
				public void setcolCategory(ims.correspondence.vo.lookups.GlossaryCategory value)
				{
					super.row.set(0, value, true);
				}
				public void setCellcolCategoryTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolGlossaryTextReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolGlossaryTextReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolGlossaryTextOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolGlossaryText(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.framework.utils.Image getcolGlossaryText()
				{
					return (ims.framework.utils.Image)super.row.get(1);
				}
				public void setcolGlossaryText(ims.framework.utils.Image value)
				{
					super.row.set(1, value);
				}
				public void setCellcolGlossaryTextTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.correspondence.vo.GlossaryVo getValue()
				{
					return (ims.correspondence.vo.GlossaryVo)super.row.getValue();
				}
				public void setValue(ims.correspondence.vo.GlossaryVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdGlossaryRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdGlossaryRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdGlossaryRow get(int index)
				{
					return new grdGlossaryRow(super.collection.get(index));
				}
				public grdGlossaryRow newRow()
				{
					return new grdGlossaryRow(super.collection.newRow());
				}
				public grdGlossaryRow newRow(boolean autoSelect)
				{
					return new grdGlossaryRow(super.collection.newRow(autoSelect));
				}
				public grdGlossaryRow newRowAt(int index)
				{
					return new grdGlossaryRow(super.collection.newRowAt(index));
				}
				public grdGlossaryRow newRowAt(int index, boolean autoSelect)
				{
					return new grdGlossaryRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdGlossaryGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.correspondence.vo.GlossaryVoCollection getValues()
				{
					ims.correspondence.vo.GlossaryVoCollection listOfValues = new ims.correspondence.vo.GlossaryVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.correspondence.vo.GlossaryVo getValue()
				{
					return (ims.correspondence.vo.GlossaryVo)super.grid.getValue();
				}
				public void setValue(ims.correspondence.vo.GlossaryVo value)
				{
					super.grid.setValue(value);
				}
				public grdGlossaryRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdGlossaryRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdGlossaryRowCollection getRows()
				{
					return new grdGlossaryRowCollection(super.grid.getRows());
				}
				public grdGlossaryRow getRowByValue(ims.correspondence.vo.GlossaryVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdGlossaryRow(row);
				}
				public void setcolCategoryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolCategoryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public GridComboBox colCategoryComboBox()
				{
					return new GridComboBox(super.grid, 0);
				}
				public void setcolGlossaryTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolGlossaryTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 22, 808, 314, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdGlossaryTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdGlossaryTemp);
				grdGlossaryGrid grdGlossary = (grdGlossaryGrid)GridFlyweightFactory.getInstance().createGridBridge(grdGlossaryGrid.class, m_grdGlossaryTemp);
				grdGlossary.addComboBoxColumn("Glossary Heading", 0, 0, 650, true, true, false, false, true, -1);
				grdGlossary.addImageColumn("Glossary Text", 0, 0, -1, true, 0);
				super.addGrid(grdGlossary);
			}

			public grdGlossaryGrid grdGlossary()
			{
				return (grdGlossaryGrid)super.getGrid(0);
			}
		}
		public static class tabGlossaryProfileContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbProfileTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.correspondence.vo.lookups.ProfileType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.correspondence.vo.lookups.ProfileType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.correspondence.vo.lookups.ProfileType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.correspondence.vo.lookups.ProfileType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.correspondence.vo.lookups.ProfileType value)
				{
					return super.control.removeRow(value);
				}
				public ims.correspondence.vo.lookups.ProfileType getValue()
				{
					return (ims.correspondence.vo.lookups.ProfileType)super.control.getValue();
				}
				public void setValue(ims.correspondence.vo.lookups.ProfileType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdGlossaryProfileRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdGlossaryProfileRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolCategoryReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolCategoryReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolCategoryOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolCategory(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.correspondence.vo.lookups.GlossaryCategory getcolCategory()
				{
					return (ims.correspondence.vo.lookups.GlossaryCategory)super.row.get(0);
				}
				public void setcolCategory(ims.correspondence.vo.lookups.GlossaryCategory value)
				{
					super.row.set(0, value, true);
				}
				public void setCellcolCategoryTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolGlossaryTextReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolGlossaryTextReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolGlossaryTextOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolGlossaryText(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.framework.utils.Image getcolGlossaryText()
				{
					return (ims.framework.utils.Image)super.row.get(1);
				}
				public void setcolGlossaryText(ims.framework.utils.Image value)
				{
					super.row.set(1, value);
				}
				public void setCellcolGlossaryTextTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolLinkedReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolLinkedReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolLinkedOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForcolLinked(String value)
				{
					super.row.setTooltip(2, value);
				}
				public boolean getcolLinked()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setcolLinked(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellcolLinkedTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.correspondence.vo.GlossaryVo getValue()
				{
					return (ims.correspondence.vo.GlossaryVo)super.row.getValue();
				}
				public void setValue(ims.correspondence.vo.GlossaryVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdGlossaryProfileRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdGlossaryProfileRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdGlossaryProfileRow get(int index)
				{
					return new grdGlossaryProfileRow(super.collection.get(index));
				}
				public grdGlossaryProfileRow newRow()
				{
					return new grdGlossaryProfileRow(super.collection.newRow());
				}
				public grdGlossaryProfileRow newRow(boolean autoSelect)
				{
					return new grdGlossaryProfileRow(super.collection.newRow(autoSelect));
				}
				public grdGlossaryProfileRow newRowAt(int index)
				{
					return new grdGlossaryProfileRow(super.collection.newRowAt(index));
				}
				public grdGlossaryProfileRow newRowAt(int index, boolean autoSelect)
				{
					return new grdGlossaryProfileRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdGlossaryProfileGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.correspondence.vo.GlossaryVoCollection getValues()
				{
					ims.correspondence.vo.GlossaryVoCollection listOfValues = new ims.correspondence.vo.GlossaryVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.correspondence.vo.GlossaryVo getValue()
				{
					return (ims.correspondence.vo.GlossaryVo)super.grid.getValue();
				}
				public void setValue(ims.correspondence.vo.GlossaryVo value)
				{
					super.grid.setValue(value);
				}
				public grdGlossaryProfileRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdGlossaryProfileRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdGlossaryProfileRowCollection getRows()
				{
					return new grdGlossaryProfileRowCollection(super.grid.getRows());
				}
				public grdGlossaryProfileRow getRowByValue(ims.correspondence.vo.GlossaryVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdGlossaryProfileRow(row);
				}
				public void setcolCategoryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolCategoryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public GridComboBox colCategoryComboBox()
				{
					return new GridComboBox(super.grid, 0);
				}
				public void setcolGlossaryTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolGlossaryTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolLinkedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolLinkedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public static class grdSpecConsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSpecConsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolDescriptionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolDescriptionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolDescriptionOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolDescription()
				{
					return (String)super.row.get(0);
				}
				public void setcolDescription(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolDescriptionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.vo.interfaces.ICspTypeSpecifier getValue()
				{
					return (ims.vo.interfaces.ICspTypeSpecifier)super.row.getValue();
				}
				public void setValue(ims.vo.interfaces.ICspTypeSpecifier value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSpecConsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSpecConsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSpecConsRow get(int index)
				{
					return new grdSpecConsRow(super.collection.get(index));
				}
				public grdSpecConsRow newRow()
				{
					return new grdSpecConsRow(super.collection.newRow());
				}
				public grdSpecConsRow newRow(boolean autoSelect)
				{
					return new grdSpecConsRow(super.collection.newRow(autoSelect));
				}
				public grdSpecConsRow newRowAt(int index)
				{
					return new grdSpecConsRow(super.collection.newRowAt(index));
				}
				public grdSpecConsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSpecConsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSpecConsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.vo.interfaces.ICspTypeSpecifier[] getValues()
				{
					ims.vo.interfaces.ICspTypeSpecifier[] listOfValues = new ims.vo.interfaces.ICspTypeSpecifier[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.vo.interfaces.ICspTypeSpecifier getValue()
				{
					return (ims.vo.interfaces.ICspTypeSpecifier)super.grid.getValue();
				}
				public void setValue(ims.vo.interfaces.ICspTypeSpecifier value)
				{
					super.grid.setValue(value);
				}
				public grdSpecConsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSpecConsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSpecConsRowCollection getRows()
				{
					return new grdSpecConsRowCollection(super.grid.getRows());
				}
				public grdSpecConsRow getRowByValue(ims.vo.interfaces.ICspTypeSpecifier value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSpecConsRow(row);
				}
				public void setcolDescriptionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolDescriptionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 280, 8, 536, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Glossary Detail", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 272, 336, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,"Profile Specifier", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Filter By", new Integer(0), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 56, 40, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbProfileTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbProfileTypeTemp);
				cmbProfileTypeComboBox cmbProfileType = (cmbProfileTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProfileTypeComboBox.class, m_cmbProfileTypeTemp);
				super.addComboBox(cmbProfileType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 288, 40, 520, 285, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdGlossaryProfileTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdGlossaryProfileTemp);
				grdGlossaryProfileGrid grdGlossaryProfile = (grdGlossaryProfileGrid)GridFlyweightFactory.getInstance().createGridBridge(grdGlossaryProfileGrid.class, m_grdGlossaryProfileTemp);
				grdGlossaryProfile.addComboBoxColumn("Glossary Heading", 0, 0, 340, true, true, false, false, true, -1);
				grdGlossaryProfile.addImageColumn("Glossary Text", 0, 0, 140, true, 0);
				grdGlossaryProfile.addBoolColumn("Linked", 0, 0, -1, false, true, 0, true);
				super.addGrid(grdGlossaryProfile);
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 76, 256, 260, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdSpecConsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Correspondence.contextMenuGlossaryConsultantGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSpecConsTemp);
				grdSpecConsGrid grdSpecCons = (grdSpecConsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpecConsGrid.class, m_grdSpecConsTemp);
				grdSpecCons.addStringColumn("Specifier", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSpecCons);
			}

			public cmbProfileTypeComboBox cmbProfileType()
			{
				return (cmbProfileTypeComboBox)super.getComboBox(0);
			}
			public grdGlossaryProfileGrid grdGlossaryProfile()
			{
				return (grdGlossaryProfileGrid)super.getGrid(0);
			}
			public grdSpecConsGrid grdSpecCons()
			{
				return (grdSpecConsGrid)super.getGrid(1);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 384, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabGlossaryDef = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Glossary Headings and Text", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabGlossaryDefContainer m_tabGlossaryDefContainer = (tabGlossaryDefContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGlossaryDefContainer.class, m_tabGlossaryDef, factory);
			super.addContainer(m_tabGlossaryDef, m_tabGlossaryDefContainer);
			ims.framework.utils.SizeInfo m_tabGlossaryDefDesignSize = new ims.framework.utils.SizeInfo(832, 384);
			ims.framework.utils.SizeInfo m_tabGlossaryDefRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper8.getWidth(), anchoringHelper8.getHeight());
			m_tabGlossaryDefContainer.setContext(form, appForm, m_tabGlossaryDef, loader, form_images_local, contextMenus, startControlID, m_tabGlossaryDefDesignSize, m_tabGlossaryDefRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 384, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabGlossaryProfile = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Glossary Profile", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabGlossaryProfileContainer m_tabGlossaryProfileContainer = (tabGlossaryProfileContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGlossaryProfileContainer.class, m_tabGlossaryProfile, factory);
			super.addContainer(m_tabGlossaryProfile, m_tabGlossaryProfileContainer);
			ims.framework.utils.SizeInfo m_tabGlossaryProfileDesignSize = new ims.framework.utils.SizeInfo(832, 384);
			ims.framework.utils.SizeInfo m_tabGlossaryProfileRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper9.getWidth(), anchoringHelper9.getHeight());
			m_tabGlossaryProfileContainer.setContext(form, appForm, m_tabGlossaryProfile, loader, form_images_local, contextMenus, startControlID, m_tabGlossaryProfileDesignSize, m_tabGlossaryProfileRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabGlossaryDef().setVisible(false);
			tabGlossaryProfile().setVisible(false);
		}
		public void settabGlossaryDefEnabled(boolean value)
		{
			tabGlossaryDef().setEnabled(value);
		}
		public void settabGlossaryProfileEnabled(boolean value)
		{
			tabGlossaryProfile().setEnabled(value);
		}
		public void showtabGlossaryDef()
		{
			tabGlossaryProfile().setVisible(false);
			tabGlossaryDef().setVisible(true);
		}
		public void showtabGlossaryProfile()
		{
			tabGlossaryDef().setVisible(false);
			tabGlossaryProfile().setVisible(true);
		}

		public tabGlossaryDefContainer tabGlossaryDef()
		{
			return (tabGlossaryDefContainer)super.layers.get(0);
		}
		public tabGlossaryProfileContainer tabGlossaryProfile()
		{
			return (tabGlossaryProfileContainer)super.layers.get(1);
		}
	}
	public static class ctnGlossaryTextContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Rich Text Controls
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 152, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public RichTextControl richText()
		{
			return (RichTextControl)super.getControl(0);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add glossary text", true, false, new Integer(102179), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGrid.add(contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGridAddItem);
		contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit glossary text", true, false, new Integer(102150), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGrid.add(contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGridUpdateItem);
		contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGridDeleteItem = factory.createMenuItem(startControlID.intValue() + 3, "Delete glossary text", true, false, new Integer(102148), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGrid.add(contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGridDeleteItem);
		form.registerMenu(contextMenus.Correspondence.contextMenuCorrespondenceGlossaryGrid);
		contextMenus.Correspondence.contextMenuGlossaryConsultantGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Correspondence.contextMenuGlossaryConsultantGridAddUpdateItem = factory.createMenuItem(startControlID.intValue() + 4, "Change  Profile", true, false, new Integer(103108), true, false);
		contextMenus.Correspondence.contextMenuGlossaryConsultantGrid.add(contextMenus.Correspondence.contextMenuGlossaryConsultantGridAddUpdateItem);
		form.registerMenu(contextMenus.Correspondence.contextMenuGlossaryConsultantGrid);


		// Layer Clasess
		lyrGlossaryLayer m_lyrGlossaryLayer = (lyrGlossaryLayer)LayerFlyweightFactory.getInstance().createLayer(lyrGlossaryLayer.class, this, factory);
		super.addLayer(m_lyrGlossaryLayer);
		m_lyrGlossaryLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Container Clasess
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 408, 832, 184, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnGlossaryText = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Glossary Text", new Boolean(true)});
		addControl(m_ctnGlossaryText);
		ctnGlossaryTextContainer ctnGlossaryText = (ctnGlossaryTextContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnGlossaryTextContainer.class, m_ctnGlossaryText, factory);
		ims.framework.utils.SizeInfo m_ctnGlossaryTextDesignSize = new ims.framework.utils.SizeInfo(832, 184);
		ims.framework.utils.SizeInfo m_ctnGlossaryTextRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper11.getWidth(), anchoringHelper11.getHeight());
		ctnGlossaryText.setContext(form, appForm, m_ctnGlossaryText, loader, this.getImages(), contextMenus, startControlID, m_ctnGlossaryTextDesignSize, m_ctnGlossaryTextRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnGlossaryText);

		// Button Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 680, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrGlossaryLayer lyrGlossary()
	{
		return (lyrGlossaryLayer)super.getLayer(0);
	}
	public ctnGlossaryTextContainer ctnGlossaryText()
	{
		return (ctnGlossaryTextContainer)super.getContainer(0);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Leaf = new ImageHelper(103101, "Images/Admin/Leaf.gif", new Integer(16), new Integer(16));
				MemberOfStaff = new ImageHelper(103133, "Images/Admin/User-Offline.gif", new Integer(16), new Integer(16));
				Service = new ImageHelper(103110, "Images/Admin/clinical_service.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Leaf;
			public final ims.framework.utils.Image MemberOfStaff;
			public final ims.framework.utils.Image Service;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				TextBox = new ImageHelper(102240, "Images/Core/Textbox.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image TextBox;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_voGlossary = new ims.framework.ContextVariable("voGlossary", prefix + "_lv_Correspondence.GlossaryAdmin.__internal_x_context__voGlossary_" + componentIdentifier + "");
			cxl_GlossaryCategoryColl = new ims.framework.ContextVariable("GlossaryCategoryColl", prefix + "_lv_Correspondence.GlossaryAdmin.__internal_x_context__GlossaryCategoryColl_" + componentIdentifier + "");
			cxl_SpecialtyColl = new ims.framework.ContextVariable("SpecialtyColl", prefix + "_lv_Correspondence.GlossaryAdmin.__internal_x_context__SpecialtyColl_" + componentIdentifier + "");
			cxl_GlossaryProfile = new ims.framework.ContextVariable("GlossaryProfile", prefix + "_lv_Correspondence.GlossaryAdmin.__internal_x_context__GlossaryProfile_" + componentIdentifier + "");
			cxl_profileSpecifier = new ims.framework.ContextVariable("profileSpecifier", prefix + "_lv_Correspondence.GlossaryAdmin.__internal_x_context__profileSpecifier_" + componentIdentifier + "");
		}
		
		public boolean getvoGlossaryIsNotNull()
		{
			return !cxl_voGlossary.getValueIsNull(context);
		}
		public ims.correspondence.vo.GlossaryVo getvoGlossary()
		{
			return (ims.correspondence.vo.GlossaryVo)cxl_voGlossary.getValue(context);
		}
		public void setvoGlossary(ims.correspondence.vo.GlossaryVo value)
		{
			cxl_voGlossary.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voGlossary = null;
		public boolean getGlossaryCategoryCollIsNotNull()
		{
			return !cxl_GlossaryCategoryColl.getValueIsNull(context);
		}
		public ims.correspondence.vo.lookups.GlossaryCategoryCollection getGlossaryCategoryColl()
		{
			return (ims.correspondence.vo.lookups.GlossaryCategoryCollection)cxl_GlossaryCategoryColl.getValue(context);
		}
		public void setGlossaryCategoryColl(ims.correspondence.vo.lookups.GlossaryCategoryCollection value)
		{
			cxl_GlossaryCategoryColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GlossaryCategoryColl = null;
		public boolean getSpecialtyCollIsNotNull()
		{
			return !cxl_SpecialtyColl.getValueIsNull(context);
		}
		public ims.core.vo.lookups.SpecialtyCollection getSpecialtyColl()
		{
			return (ims.core.vo.lookups.SpecialtyCollection)cxl_SpecialtyColl.getValue(context);
		}
		public void setSpecialtyColl(ims.core.vo.lookups.SpecialtyCollection value)
		{
			cxl_SpecialtyColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SpecialtyColl = null;
		public boolean getGlossaryProfileIsNotNull()
		{
			return !cxl_GlossaryProfile.getValueIsNull(context);
		}
		public ims.correspondence.vo.GlossaryProfileVo getGlossaryProfile()
		{
			return (ims.correspondence.vo.GlossaryProfileVo)cxl_GlossaryProfile.getValue(context);
		}
		public void setGlossaryProfile(ims.correspondence.vo.GlossaryProfileVo value)
		{
			cxl_GlossaryProfile.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GlossaryProfile = null;
		public boolean getprofileSpecifierIsNotNull()
		{
			return !cxl_profileSpecifier.getValueIsNull(context);
		}
		public ims.vo.interfaces.ICspTypeSpecifier getprofileSpecifier()
		{
			return (ims.vo.interfaces.ICspTypeSpecifier)cxl_profileSpecifier.getValue(context);
		}
		public void setprofileSpecifier(ims.vo.interfaces.ICspTypeSpecifier value)
		{
			cxl_profileSpecifier.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_profileSpecifier = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CorrespondenceNamespace Correspondence = new CorrespondenceNamespace();
		public final class CorrespondenceNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class CorrespondenceGlossaryGrid implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 1;
				public static final int Update = 2;
				public static final int Delete = 3;
			}
			public void disableAllCorrespondenceGlossaryGridMenuItems()
			{
				this.contextMenuCorrespondenceGlossaryGridAddItem.setEnabled(false);
				this.contextMenuCorrespondenceGlossaryGridUpdateItem.setEnabled(false);
				this.contextMenuCorrespondenceGlossaryGridDeleteItem.setEnabled(false);
			}
			public void hideAllCorrespondenceGlossaryGridMenuItems()
			{
				this.contextMenuCorrespondenceGlossaryGridAddItem.setVisible(false);
				this.contextMenuCorrespondenceGlossaryGridUpdateItem.setVisible(false);
				this.contextMenuCorrespondenceGlossaryGridDeleteItem.setVisible(false);
			}
			private Menu contextMenuCorrespondenceGlossaryGrid;
			public MenuItem getCorrespondenceGlossaryGridAddItem()
			{
				return this.contextMenuCorrespondenceGlossaryGridAddItem;
			}
			private MenuItem contextMenuCorrespondenceGlossaryGridAddItem;
			public MenuItem getCorrespondenceGlossaryGridUpdateItem()
			{
				return this.contextMenuCorrespondenceGlossaryGridUpdateItem;
			}
			private MenuItem contextMenuCorrespondenceGlossaryGridUpdateItem;
			public MenuItem getCorrespondenceGlossaryGridDeleteItem()
			{
				return this.contextMenuCorrespondenceGlossaryGridDeleteItem;
			}
			private MenuItem contextMenuCorrespondenceGlossaryGridDeleteItem;
			public final class GlossaryConsultantGrid implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int AddUpdate = 4;
			}
			public void disableAllGlossaryConsultantGridMenuItems()
			{
				this.contextMenuGlossaryConsultantGridAddUpdateItem.setEnabled(false);
			}
			public void hideAllGlossaryConsultantGridMenuItems()
			{
				this.contextMenuGlossaryConsultantGridAddUpdateItem.setVisible(false);
			}
			private Menu contextMenuGlossaryConsultantGrid;
			public MenuItem getGlossaryConsultantGridAddUpdateItem()
			{
				return this.contextMenuGlossaryConsultantGridAddUpdateItem;
			}
			private MenuItem contextMenuGlossaryConsultantGridAddUpdateItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[77];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.GlossaryAdmin.__internal_x_context__voGlossary_" + componentIdentifier, "BO-1053100003-ID", "ID_Glossary");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.GlossaryAdmin.__internal_x_context__voGlossary_" + componentIdentifier, "BO-1053100003-GLOSSARY", "Glossary");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.GlossaryAdmin.__internal_x_context__voGlossary_" + componentIdentifier, "BO-1053100003-GLOSSARYTEXT", "GlossaryText");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.GlossaryAdmin.__internal_x_context__GlossaryProfile_" + componentIdentifier, "BO-1053100001-ID", "ID_GlossaryProfile");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.GlossaryAdmin.__internal_x_context__GlossaryProfile_" + componentIdentifier, "BO-1053100001-SPECIFIERID", "SpecifierID");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.GlossaryAdmin.__internal_x_context__GlossaryProfile_" + componentIdentifier, "BO-1053100001-SPECIFIERTYPE", "SpecifierType");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
