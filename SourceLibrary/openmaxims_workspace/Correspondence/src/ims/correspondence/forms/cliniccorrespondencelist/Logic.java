//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3932.16072)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.correspondence.forms.cliniccorrespondencelist;

import ims.configuration.gen.ConfigFlag;
import ims.core.helper.ConversionHelper;
import ims.core.vo.ClinicLiteVoCollection;
import ims.core.vo.DocumentsToBeDeletedVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.OutPatientListVo;
import ims.core.vo.OutPatientListVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientDocumentVoCollection;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.MedicGrade;
import ims.core.vo.lookups.PatIdType;
import ims.correspondence.forms.cliniccorrespondencelist.GenForm.grdListRow;
import ims.correspondence.vo.ClinicCorrespondenceListSearchCriteriaVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

import ims.vo.ValueObject;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.SecureRandom;

public class Logic extends BaseLogic
{
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();

	}

	@Override
	protected void onQmbClinicTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbLocation().getValue() == null)
		{
			engine.showMessage("Please select a Location");
			form.cmbLocation().setFocus();
			return;
		}
		loadClinicsbyLocation(form.cmbLocation().getValue(), value);
	}

	@Override
	protected void onQmbConsultantTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		clearConsultantCombo();
		if (value != null)
		{
			MedicLiteVoCollection voMedicColl = domain.listActiveMedics(value);
			if (voMedicColl != null)
			{
				for (int i = 0; i < voMedicColl.size(); i++)
				{
					MedicLiteVo med = voMedicColl.get(i);
					form.qmbConsultant().newRow(med, med.toString());
				}
			}
			if (voMedicColl != null && voMedicColl.size() == 1)
				form.qmbConsultant().setValue(voMedicColl.get(0));
			else if (voMedicColl != null && voMedicColl.size() > 1)
				form.qmbConsultant().showOpened();
		}
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearInstanceControls();
		updateControlsState();
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
		updateControlsState();
	}

	@Override
	protected void onCmbLocationValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}

	private void clearInstanceControls()
	{
		clearClinicCombo();
		form.cmbLocation().setValue(null);
		clearConsultantCombo();
		form.dteClinic().setValue(null);
		clearList();
		form.cmbSpecialty().setValue(null);
		form.getGlobalContext().Correspondence.setClinicCorrespondenceListSearchCriteria(null);

	}

	private void updateControlsState()
	{
		boolean viewMode = form.getMode().equals(FormMode.VIEW);
		if (viewMode)
		{
			form.qmbClinic().setVisible(true);
			form.qmbClinic().setEnabled(form.cmbLocation().getValue() != null);

		}
		form.getContextMenus().Correspondence.getCorrespondenceClinicCorrespondenceListCREATEItem().setVisible(!viewMode);
		form.getContextMenus().Correspondence.getCorrespondenceClinicCorrespondenceListCREATEItem().setEnabled(form.grdList().getValue() != null);
	}

	private void clearList()
	{
		form.grdList().getRows().clear();
		form.grdList().setValue(null);

	}

	private void clearConsultantCombo()
	{
		form.qmbConsultant().clear();

	}

	private void search()
	{
		form.getGlobalContext().Correspondence.setClinicCorrespondenceListSearchCriteria(null);

		clearList();

		if (form.dteClinic().getValue() == null || (form.qmbClinic().getValue() == null && form.qmbConsultant().getValue() == null))
		{
			engine.showMessage("Valid search criteria must be specified - Please enter a Clinic Date and a Clinic and/or Consultant");
			return;
		}
		storeSearchCriteria();

		populateList(domain.listOutpatients(form.qmbClinic().getValue(), form.qmbConsultant().getValue(), form.cmbSpecialty().getValue(), form.dteClinic().getValue()));

	}

	private void populateList(OutPatientListVoCollection voOutPatColl)
	{
		if (voOutPatColl != null)
		{
			if (voOutPatColl.size() == 0)
			{
				engine.showMessage("No matching patients found.");
				return;
			}

			grdListRow row = null;

			for (int i = 0; i < voOutPatColl.size(); i++)
			{
				OutPatientListVo voOutPatient = voOutPatColl.get(i);
				if (voOutPatient != null && voOutPatient.getPasEventIsNotNull() && voOutPatient.getPasEvent().getPatientIsNotNull())
				{
					row = form.grdList().getRows().newRow();
					if (voOutPatient.getPasEvent().getPatient().getNameIsNotNull())
					{
						row.setcolForename(voOutPatient.getPasEvent().getPatient().getName().getForename());
						row.setcolSurname(voOutPatient.getPasEvent().getPatient().getName().getSurname());
					}

					ims.core.vo.PatientId voPatId = voOutPatient.getPasEvent().getPatient().getDisplayId();
					if (voPatId != null)
						row.setcolHospnum(voPatId.getValue());

					if (voOutPatient.getPasEvent().getPatient().getDobIsNotNull())
						row.setcolDob(voOutPatient.getPasEvent().getPatient().getDob().toString());

					if (voOutPatient.getPasEvent().getPatient().getAgeIsNotNull())
						row.setColAge(voOutPatient.getPasEvent().getPatient().getAge().toString());
					else
						row.setColAge(voOutPatient.getPasEvent().getPatient().calculateAge().toString());

					if (voOutPatient.getPasEvent().getPatient().getSexIsNotNull())
						row.setcolSex(voOutPatient.getPasEvent().getPatient().getSex().getText());

					if (voOutPatient.getClinicIsNotNull())
						row.setcolClinic(voOutPatient.getClinic().getClinicName());

					if (voOutPatient.getPasEvent() != null && voOutPatient.getPasEvent().getSpecialty() != null)
						row.setcolSpecialty(voOutPatient.getPasEvent().getSpecialty().getText());

					if (voOutPatient.getAppointmentDateTimeIsNotNull())
						row.setcolClinicDate(voOutPatient.getAppointmentDateTime().toString());

					if (voOutPatient.getPasEvent().getPatient().getIsDead() != null && voOutPatient.getPasEvent().getPatient().getIsDead().booleanValue())
						row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());

					row.setValue(voOutPatient.getPasEvent().getPatient());
				}

			}
		}

	}

	private void storeSearchCriteria()
	{
		ClinicCorrespondenceListSearchCriteriaVo voSearch = new ClinicCorrespondenceListSearchCriteriaVo();

		voSearch.setClinic(form.qmbClinic().getValue());
		voSearch.setConsultant(form.qmbConsultant().getValue());

		voSearch.setClinicDate(form.dteClinic().getValue());
		voSearch.setLocation(form.cmbLocation().getValue());
		voSearch.setSpecialty(form.cmbSpecialty().getValue());
		form.getGlobalContext().Correspondence.setClinicCorrespondenceListSearchCriteria(voSearch);

	}

	private void open()
	{
		if (form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteriaIsNotNull())
		{
			displaySearchCriteria();
			search();
		}
		form.setMode(FormMode.VIEW);
		updateControlsState();

	}

	private void displaySearchCriteria()
	{
		form.dteClinic().setValue(form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getClinicDate());
		form.qmbConsultant().setValue(form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getConsultant());
		if (form.qmbConsultant().getValue() == null && form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getConsultantIsNotNull())
		{
			form.qmbConsultant().newRow(form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getConsultant(), form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getConsultant().toString());
			form.qmbConsultant().setValue(form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getConsultant());
		}

		form.cmbLocation().setValue(form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getLocation());
		form.cmbSpecialty().setValue(form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getSpecialty());
		if (form.cmbLocation().getValue() != null && form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getClinicIsNotNull())
		{
			form.qmbClinic().newRow(form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getClinic(), form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getClinic().getClinicName());
			form.qmbClinic().setValue(form.getGlobalContext().Correspondence.getClinicCorrespondenceListSearchCriteria().getClinic());
		}

	}

	private void initialize()
	{

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		form.grdList().setcolHospnumCaption(dispIdType.getText());

		loadClinicLocationCombo();

		populateQmbConsultants();

		form.dteClinic().setValue(new Date());

	}

	private void loadClinicLocationCombo()
	{
		LocationLiteVoCollection voLocationLiteColl = domain.listActiveHospitalsLite();
		if (voLocationLiteColl != null)
		{
			String currentLocName = "";
			for (int i = 0; i < voLocationLiteColl.size(); i++)
			{
				form.cmbLocation().newRow(voLocationLiteColl.get(i), voLocationLiteColl.get(i).getName().toString());
				// WDEV-4585

				if (engine.getCurrentLocation() != null)
				{
					// WDEV-2847
					currentLocName = engine.getCurrentLocation().getName();
					if (currentLocName.equals(voLocationLiteColl.get(i).getName()))
					{
						form.cmbLocation().setValue(voLocationLiteColl.get(i));
						form.qmbClinic().setEnabled(true);
					}
				}
			}

		}

	}

	private void clearClinicCombo()
	{
		form.qmbClinic().clear();

	}

	// WDEV-2847
	private void populateQmbConsultants()
	{
		MedicLiteVo voMedic = new MedicLiteVo();
		// WDEV-8199
		HcpLiteVo currHcpUser = (HcpLiteVo) domain.getHcpLiteUser();

		if (domain.getHcpUser() instanceof MedicVo && MedicGrade.CONS.equals(((MedicVo) domain.getHcpUser()).getGrade()))
		{
			voMedic.setMos(currHcpUser.getMos());
			voMedic.setID_Hcp(currHcpUser.getID_Hcp());// wdev-10188
			form.qmbConsultant().newRow(voMedic, voMedic.getName().toString());
			form.qmbConsultant().setValue(voMedic);
		}
	}

	private void loadClinicsbyLocation(LocationLiteVo voLocLite, String strClinicName)
	{
		clearClinicCombo();

		if (voLocLite != null)
		{
			ClinicLiteVoCollection voClinicLiteColl = domain.listClinicsforLocation(voLocLite, strClinicName);

			if (voClinicLiteColl != null)
			{
				for (int i = 0; i < voClinicLiteColl.size(); i++)
				{
					form.qmbClinic().newRow(voClinicLiteColl.get(i), voClinicLiteColl.get(i).getClinicName());
				}
				if (voClinicLiteColl.size() == 1)
					form.qmbClinic().setValue(voClinicLiteColl.get(0));
				else if (voClinicLiteColl.size() > 1)
					form.qmbClinic().showOpened();
			}
		}

	}

	@Override
	protected void onBtnBatchPrintClick() throws PresentationLogicException
	{
		doEndBatchPrint();
		open();
	}

	@Override
	protected void onBtnStartBatchClick() throws PresentationLogicException
	{
		doStartBatchPrint();
	}

	private void doEndBatchPrint()
	{
		PatientDocumentVoCollection docs = form.getLocalContext().getContextDocumentsCreated();
		if (docs == null || docs.size() == 0)
		{

			return;
		}		

		PatientDocumentVoCollection docsForPrint = new PatientDocumentVoCollection();
		
		for (int i = docs.size() - 1; i >= 0; i--)
		{
			PatientDocumentVo lockedPatientDoc = lockPatientDoc(docs.get(i));
			if (lockedPatientDoc != null)
			{
				docs.remove(i);
				docsForPrint.add(lockedPatientDoc);
			}
		}
		
		if (docs.size() > 0)
		{
			form.getLocalContext().setContextDocumentsCreated(docsForPrint);
			showErrorsAndPrint(docs);

			return;
		}
		print(docsForPrint);
		form.getLocalContext().setContextDocumentsCreated(new PatientDocumentVoCollection());

	}

	private void print(PatientDocumentVoCollection docsForPrint)
	{
		if (docsForPrint == null)
			return;
		engine.open(form.getForms().Core.MultiPrintDialog, new Object[] { docsForPrint });

	}

	private void showErrorsAndPrint(PatientDocumentVoCollection docs)
	{
		if (docs == null)
			throw new CodingRuntimeException("Trying to show null errors ");
		StringBuilder errorMessage = new StringBuilder("Following documents could not be locked and will not be available for print:\n\n");
		for (int i = 0; i < docs.size(); i++)
		{
			errorMessage.append("" + (i + 1) + ")" + docs.get(i).getName() + " created at: " + docs.get(i).getRecordingDateTime().toString() + "\n");
		}
		engine.showMessage(errorMessage.toString(), "Errors locking documents", MessageButtons.OK, MessageIcon.ERROR);

	}

	private PatientDocumentVo lockPatientDoc(PatientDocumentVo patientDocument)
	{
		if (patientDocument == null)
			throw new CodingRuntimeException("Trying to lock null patient document");

		String rtfFileName = null;

		patientDocument.setCorrespondenceStatus(DocumentStatus.FINAL);

		ServerDocumentVo document = patientDocument.getServerDocument();
		String pdfFileName = null;
		if (document != null)
		{
			rtfFileName = document.getFileName();
			pdfFileName = convertRtfToPdf(rtfFileName);

			document.setFileName(pdfFileName);
			document.setFileType(FileType.PDF);
		}

		patientDocument.setServerDocument(document);

		String[] errs = patientDocument.validate();
		if (errs != null && errs.length > 0)
		{
			return null;
		}
		PatientDocumentVo result = null;

		try
		{
			result = domain.savePatientDocument(patientDocument);
		}
		catch (StaleObjectException e)
		{
			//Delete converted file (Simulating transaction)
			deleteFile(getPdfStorePath()+pdfFileName, result);
			e.printStackTrace();
			return null;
		}

		// deleteRtfFile
		if (rtfFileName != null)
		{
			deleteFile(getPdfStorePath() + rtfFileName,result);
		}

		return result;
	}

	private void deleteFile(String fileToDelete, ValueObject linkedObject)
	{

		if (fileToDelete == null || fileToDelete.length() == 0)
			return;

		boolean success = false;

		File file = new File(fileToDelete);

		if (file.exists())
			success = file.delete();

		if (!success)
		{
			DocumentsToBeDeletedVo deleteDocument = new DocumentsToBeDeletedVo();
			deleteDocument.setFileName(fileToDelete);
			if (linkedObject != null)
			{
				deleteDocument.setReferenceId(linkedObject.getBoId());
				deleteDocument.setReferenceType(linkedObject.getBoClassName());
			}
			deleteDocument.validate();
			domain.saveToBeDeteled(deleteDocument);
			System.out.println("File '" + fileToDelete + "' was not successfully deleted !");
		}
	}

	private String convertRtfToPdf(String inputFileName)
	{
		if (inputFileName == null || inputFileName.length() == 0)
			return null;

		int inputFileTypesIndex = inputFileName.lastIndexOf(".");
		String inputFileType = inputFileName.substring(inputFileTypesIndex + 1);
		String inputFilePath = inputFileName.substring(0, inputFileName.lastIndexOf("/"));
		String pdfFileName = inputFilePath + "/" + generateName() + ".pdf";
		String pdfPathName = (getPdfStorePath() + pdfFileName).replace("/", "\\");

		byte[] buffer = readFile(getPdfStorePath() + inputFileName);
		if (buffer == null || (buffer != null && buffer.length == 0))
			return null;

		FileOutputStream outStream = null;

		try
		{
			outStream = new FileOutputStream(pdfPathName);
			ConversionHelper helper = new ConversionHelper();
			helper.convert(buffer, inputFileType, outStream);					
		}
		catch (Exception e)
		{
			e.printStackTrace();
			pdfFileName = null;
		}
		finally
		{
			if (outStream != null)
			{
				try
				{
					outStream.close();
				}
				catch (IOException e)
				{
					// Do Nothing
				}
			}
		}

		return pdfFileName;

	}

	private String getPdfStorePath()
	{
		String storePath = ConfigFlag.GEN.PDF_STORE_PATH.getValue();

		if (!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";

		return storePath;
	}

	private byte[] readFile(String filePath)
	{
		File pdf = new File(filePath);
		long size = pdf.length();

		if (size == 0)
		{
			return null;
		}
		FileInputStream fileInputStream = null;
		byte[] buffer = null;
		try
		{
			fileInputStream = new FileInputStream(pdf);

			int bytesAvailable = fileInputStream.available();

			int maxBufferSize = (int) size;

			int bufferSize = Math.min(bytesAvailable, maxBufferSize);

			buffer = new byte[bufferSize];

			int bytesRead = fileInputStream.read(buffer, 0, bufferSize);

			while (bytesRead > 0)
			{
				bytesAvailable = fileInputStream.available();
				bufferSize = Math.min(bytesAvailable, maxBufferSize);
				bytesRead = fileInputStream.read(buffer, 0, bufferSize);
			}

		}
		catch (IOException e)
		{
			buffer = null;

			e.printStackTrace();
		}
		finally
		{
			if (fileInputStream != null)
			{
				try
				{
					fileInputStream.close();
				}
				catch (IOException e1)
				{// Do Nothing

				}
			}
		}
		return buffer;

	}

	private String generateName()
	{
		String str = "";

		try
		{
			// Get Random Segment
			SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(prng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			// Get CurrentTimeMillis() segment
			str += Long.toHexString(System.currentTimeMillis());
			while (str.length() < 12)
			{
				str = '0' + str;
			}

			// Get Random Segment
			SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(secondPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			// Get IdentityHash() segment
			str += Long.toHexString(System.identityHashCode((Object) this));
			while (str.length() < 8)
			{
				str = '0' + str;
			}
			// Get Third Random Segment
			byte bytes[] = new byte[16];
			SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
			thirdPrng.nextBytes(bytes);
			str += Integer.toHexString(thirdPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}
		}
		catch (java.security.NoSuchAlgorithmException ex)
		{
			ex.getMessage();
		}

		return str;
	}

	private void doStartBatchPrint()
	{
		if (form.grdList().getRows().size() < 1)
		{
			engine.showMessage("No patients to start batch print were found. Please do a search first");
			return;
		}
		form.getLocalContext().setContextDocumentsCreated(new PatientDocumentVoCollection());
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceClinicCorrespondenceList.CREATE:

				createNewPatDoc();
				break;

			default:
				break;
		}

	}

	private void createNewPatDoc()
	{
		if (form.grdList().getValue() == null)
		{
			throw new CodingRuntimeException("A row must be selected when you try to create a document");
		}
		form.getGlobalContext().Core.setPatientShort(form.grdList().getValue());
		engine.open(form.getForms().Core.PatientCorrespondenceTemplates);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();

	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.PatientCorrespondenceTemplates) && DialogResult.OK.equals(result))
		{
			if (!form.getLocalContext().getContextDocumentsCreatedIsNotNull())
			{
				form.getLocalContext().setContextDocumentsCreated(new PatientDocumentVoCollection());
			}
			form.getLocalContext().getContextDocumentsCreated().add(form.getGlobalContext().Core.getPatientCorrespondence());
			form.grdList().getSelectedRow().setcolDocCreate(form.getImages().Correspondence.PatientDocumentCreated16);
		}

	}

	@Override
	protected void onGrdListSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		print(form.getLocalContext().getContextDocumentsCreated());
		form.getLocalContext().setContextDocumentsCreated(new PatientDocumentVoCollection());

	}
}
