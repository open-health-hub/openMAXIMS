//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.28 build 2001.21673)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.patientdocuments;

import ims.core.vo.DocumentVoCollection;
import ims.core.vo.DocumentVo;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;


public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		listDocuments();
	}
	protected void listDocuments()
	{
		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			 DocumentVoCollection voDocColl = domain.listPatientDocs(form.getGlobalContext().Core.getPatientShort());
			
			if (voDocColl != null)
			{
				if (voDocColl.size()>0)
				{
					for(int i=0;i<voDocColl.size();i++)
					{
						DocumentVo voDoc = new DocumentVo();
						voDoc = voDocColl.get(i);
						//add new row								
						GenForm.grdDocumentsRow row;
						row = form.grdDocuments().getRows().newRow();
						row.setValue(voDoc);	
						
						if (voDoc.getCreationDateIsNotNull())
							row.setDate(voDoc.getCreationDate());
						
						if (voDoc.getTemplateIsNotNull() && voDoc.getTemplate().getDescriptionIsNotNull())
							row.setDescription(voDoc.getTemplate().getDescription());
					
						if (voDoc.getClinicalContactIsNotNull())							
						{
							if (voDoc.getClinicalContact().getSeenByIsNotNull())
									row.setConsultant(voDoc.getClinicalContact().getSeenBy().getName().toString());
																			
							if (voDoc.getClinicalContact().getStartDateTimeIsNotNull())
								row.setDiscDate(voDoc.getClinicalContact().getStartDateTimeIsNotNull()?voDoc.getClinicalContact().getStartDateTime().getDate():null);							
						}
						
						if (voDoc.getPasEventIsNotNull())
							row.setContactNo(voDoc.getPasEvent().getPasEventId());
						
						if (voDoc.getRecUserIsNotNull())
							row.setRecordingUser(voDoc.getRecUser().toString());
						
						if (voDoc.getStatusIsNotNull())
								row.setStatus(voDoc.getStatus().getText());
					}
				}
			}
		}
	}
	/* (non-Javadoc)
	 * @see ims.dischargeletters.forms.patientdocuments.Handlers#onContextMenuItemClick(int, ims.framework.Control)
	 */
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		  switch (menuItemID)
		  {
		  	case GenForm.ContextMenus.CorrespondenceNamespace.PatientDocuments.View:
		  		viewSelectedDocument();
		  		break;
		  	case GenForm.ContextMenus.CorrespondenceNamespace.PatientDocuments.Print:
		  		printSelectedDocument();
		  		break;
		  }		
	}
	
	protected void viewSelectedDocument()
	{
		int selIndex = form.grdDocuments().getSelectedRowIndex();
		if (selIndex>=0)
		{
			form.getGlobalContext().Core.setDocumentID(form.grdDocuments().getRows().get(selIndex).getValue().getID_Document());			
			engine.open(form.getForms().Correspondence.ProcessReport);						
		}
		
	}
	
	protected void printSelectedDocument()
	{
		int selIndex = form.grdDocuments().getSelectedRowIndex();
		form.getGlobalContext().Core.setDocumentID(form.grdDocuments().getRows().get(selIndex).getValue().getID_Document());
		engine.open(form.getForms().Correspondence.PrintDishargeLetter);		
	}
	
	protected void updateContextMenus()
	{
		form.getContextMenus().Correspondence.getPatientDocumentsViewItem().setVisible(true);
		form.getContextMenus().Correspondence.getPatientDocumentsPrintItem().setVisible(true);
		form.getContextMenus().Correspondence.getPatientDocumentsChangeStatusItem().setVisible(false);
	}
	
	/* (non-Javadoc)
	 * @see ims.dischargeletters.forms.patientdocuments.Handlers#onRadioButtonGroup1ValueChanged()
	 */
	protected void onRadioButtonGroup1ValueChanged() throws PresentationLogicException 
	{
		
	}
	/* (non-Javadoc)
	 * @see ims.dischargeletters.forms.patientdocuments.Handlers#onGrdDocumentsSelectionChanged()
	 */
	protected void onGrdDocumentsSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenus();		
	}
	/* (non-Javadoc)
	 * @see ims.dischargeletters.forms.patientdocuments.Handlers#onFormDialogClosed(ims.framework.FormName, ims.framework.enumerations.DialogResult)
	 */
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
 	}
}
