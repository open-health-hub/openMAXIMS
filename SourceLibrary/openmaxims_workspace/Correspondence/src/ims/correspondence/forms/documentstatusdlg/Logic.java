//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.32 build 2074.21380)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.documentstatusdlg;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.DocumentStatusCollection;
import ims.correspondence.helper.StatusHelper;
import ims.correspondence.vo.CorrespondenceStatusHistoryVo;
import ims.correspondence.vo.CorrespondenceStatusHistoryVoCollection;
import ims.correspondence.vo.CorrespondenceDetailsVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}

	/**
	 * 
	 */
	private void open() 
	{		
		CorrespondenceStatusHistoryVoCollection voCollCspStatusHistory = form.getGlobalContext().Correspondence.getcurrentCspStatusHistory().sort(SortOrder.DESCENDING);
		
		if (voCollCspStatusHistory.size() > 0)
		{			
			DocumentStatus currentStatus = voCollCspStatusHistory.get(0).getStatus();
			form.lblCurrentStatus().setValue(currentStatus.getIItemText());
									
			form.grdHistory().getRows().clear();
			for (int i= 0; i < voCollCspStatusHistory.size(); i++)
			{
				GenForm.grdHistoryRow row = form.grdHistory().getRows().newRow();
				row.setValue(voCollCspStatusHistory.get(i));
				row.setcolStatus(voCollCspStatusHistory.get(i).getStatus().getText());
				row.setcolImage(voCollCspStatusHistory.get(i).getStatus().getImage());
				row.setcolTemplate(voCollCspStatusHistory.get(i).getTemplateName());				
				
				if (voCollCspStatusHistory.get(i).getSysInfoIsNotNull())
				{
					if (voCollCspStatusHistory.get(i).getMosIsNotNull())
						row.setcolChangedBy(voCollCspStatusHistory.get(i).getMos().getNameIsNotNull() ? voCollCspStatusHistory.get(i).getMos().getName().toString() : "");
					if (voCollCspStatusHistory.get(i).getSysInfo().getCreationDateTime() != null)
						row.setcoldteChanged(voCollCspStatusHistory.get(i).getSysInfo().getCreationDateTime().getDate() + " " + voCollCspStatusHistory.get(i).getSysInfo().getCreationDateTime().getTime());
				}
			}
			
			listAvailableStatuses(currentStatus);
		}	
	}

	private void listAvailableStatuses(DocumentStatus currentStatus) 
	{
		form.cmbNewStatus().clear();		
		DocumentStatusCollection lkpCollStatus = ims.core.vo.lookups.LookupHelper.getDocumentStatus(domain.getLookupService()); 
		boolean bHide = false;
		for (int i=0; i < lkpCollStatus.size(); i++)
		{
			if (StatusHelper.canUpdateStatus(currentStatus,lkpCollStatus.get(i)))
			{
				form.cmbNewStatus().newRow(lkpCollStatus.get(i), lkpCollStatus.get(i).toString());
				bHide = true;
			}
		}
		
		form.lblChangeTo().setVisible(bHide);
		form.cmbNewStatus().setVisible(bHide);
		form.btnChange().setVisible(bHide);
	}
	
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
	
	
	
	
	

	protected void onBtnChangeClick() throws PresentationLogicException 
	{			
		setCurrentDocumentStatus(domain.getCorrespondenceDetails(form.getGlobalContext().Correspondence.getCorrespondenceDetails()), form.cmbNewStatus().getValue());
		open();			
	}


	private boolean setCurrentDocumentStatus(CorrespondenceDetailsVo voCorrespondenceDetails, DocumentStatus lkpDocumentStatus)
	{		
		MemberOfStaffShortVo voMos = new MemberOfStaffShortVo();
		voMos = (MemberOfStaffShortVo) domain.getMosUser();
		
		if (null == voMos)
			return false;
				
		CorrespondenceStatusHistoryVo voStatusHistory = new CorrespondenceStatusHistoryVo();
		voStatusHistory.setStatus(lkpDocumentStatus);
		voStatusHistory.setTemplateName(StatusHelper.getGenericTemplateName());
		voStatusHistory.setMos(voMos);
	
		voCorrespondenceDetails.getCspStatusHistory().add(voStatusHistory);			
		voCorrespondenceDetails.setCurrentStatus(lkpDocumentStatus);
		
		String[] sArr = voCorrespondenceDetails.validate();
		if (sArr != null)
		{
			engine.showErrors(sArr);
			return false;
		}
		
		try 
		{
			voCorrespondenceDetails = domain.saveCorrespondenceDetails(voCorrespondenceDetails,domain.getPasEvent(form.getGlobalContext().Core.getPasEvent()).getEventType());
		}
		
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		catch (DomainInterfaceException de)
		{
			engine.showMessage(de.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException ukve)
		{
			engine.showMessage(ukve.getMessage());
			return false;
		}
				
		form.getGlobalContext().Correspondence.setcurrentCspStatusHistory(voCorrespondenceDetails.getCspStatusHistory());
		return true;
	}
	
}



