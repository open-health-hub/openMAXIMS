//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.correspondence.forms.batchupdatepatientlists;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdPatientListRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPatientListRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolLeaveReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolLeaveReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolLeaveOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolLeave(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.Image getcolLeave()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setcolLeave(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellcolLeaveTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolHospnumReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolHospnumReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolHospnumOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolHospnum(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolHospnum()
		{
			return (String)super.row.get(1);
		}
		public void setcolHospnum(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolHospnumTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolSurnameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolSurnameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolSurnameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolSurname(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolSurname()
		{
			return (String)super.row.get(2);
		}
		public void setcolSurname(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolSurnameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolForenameReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolForenameReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolForenameOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolForename(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolForename()
		{
			return (String)super.row.get(3);
		}
		public void setcolForename(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolForenameTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolSexReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolSexReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolSexOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolSex(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolSex()
		{
			return (String)super.row.get(4);
		}
		public void setcolSex(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolSexTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColAgeReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColAgeReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColAgeOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColAge(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColAge()
		{
			return (String)super.row.get(5);
		}
		public void setColAge(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColAgeTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcolDobReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscolDobReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcolDobOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForcolDob(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getcolDob()
		{
			return (String)super.row.get(6);
		}
		public void setcolDob(String value)
		{
			super.row.set(6, value);
		}
		public void setCellcolDobTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setcolWardReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean iscolWardReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showcolWardOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForcolWard(String value)
		{
			super.row.setTooltip(7, value);
		}
		public String getcolWard()
		{
			return (String)super.row.get(7);
		}
		public void setcolWard(String value)
		{
			super.row.set(7, value);
		}
		public void setCellcolWardTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setcolConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean iscolConsultantReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showcolConsultantOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForcolConsultant(String value)
		{
			super.row.setTooltip(8, value);
		}
		public String getcolConsultant()
		{
			return (String)super.row.get(8);
		}
		public void setcolConsultant(String value)
		{
			super.row.set(8, value);
		}
		public void setCellcolConsultantTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setcolAdmissionDateReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean iscolAdmissionDateReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showcolAdmissionDateOpened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForcolAdmissionDate(String value)
		{
			super.row.setTooltip(9, value);
		}
		public String getcolAdmissionDate()
		{
			return (String)super.row.get(9);
		}
		public void setcolAdmissionDate(String value)
		{
			super.row.set(9, value);
		}
		public void setCellcolAdmissionDateTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setcolDocStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean iscolDocStatusReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showcolDocStatusOpened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForcolDocStatus(String value)
		{
			super.row.setTooltip(10, value);
		}
		public ims.framework.utils.Image getcolDocStatus()
		{
			return (ims.framework.utils.Image)super.row.get(10);
		}
		public void setcolDocStatus(ims.framework.utils.Image value)
		{
			super.row.set(10, value);
		}
		public void setCellcolDocStatusTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public void setcolDischargedReadOnly(boolean value)
		{
			super.row.setReadOnly(11, value);
		}
		public boolean iscolDischargedReadOnly()
		{
			return super.row.isReadOnly(11);
		}
		public void showcolDischargedOpened()
		{
			super.row.showOpened(11);
		}
		public void setTooltipForcolDischarged(String value)
		{
			super.row.setTooltip(11, value);
		}
		public ims.framework.utils.Image getcolDischarged()
		{
			return (ims.framework.utils.Image)super.row.get(11);
		}
		public void setcolDischarged(ims.framework.utils.Image value)
		{
			super.row.set(11, value);
		}
		public void setCellcolDischargedTooltip(String value)
		{
			super.row.setTooltip(11, value);
		}
		public void setcolSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(12, value);
		}
		public boolean iscolSelectReadOnly()
		{
			return super.row.isReadOnly(12);
		}
		public void showcolSelectOpened()
		{
			super.row.showOpened(12);
		}
		public void setTooltipForcolSelect(String value)
		{
			super.row.setTooltip(12, value);
		}
		public boolean getcolSelect()
		{
			return ((Boolean)super.row.get(12)).booleanValue();
		}
		public void setcolSelect(boolean value)
		{
			super.row.set(12, new Boolean(value));
		}
		public void setCellcolSelectTooltip(String value)
		{
			super.row.setTooltip(12, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPatientListRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPatientListRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPatientListRow get(int index)
		{
			return new grdPatientListRow(super.collection.get(index));
		}
		public grdPatientListRow newRow()
		{
			return new grdPatientListRow(super.collection.newRow());
		}
		public grdPatientListRow newRow(boolean autoSelect)
		{
			return new grdPatientListRow(super.collection.newRow(autoSelect));
		}
		public grdPatientListRow newRowAt(int index)
		{
			return new grdPatientListRow(super.collection.newRowAt(index));
		}
		public grdPatientListRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPatientListRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPatientListGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public void setcolHospnumCaption(String value)
		{
			this.grid.setColumnCaption(1, value);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public void setcolWardCaption(String value)
		{
			this.grid.setColumnCaption(7, value);
		}
		public void setcolConsultantCaption(String value)
		{
			this.grid.setColumnCaption(8, value);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdPatientListRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPatientListRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPatientListRowCollection getRows()
		{
			return new grdPatientListRowCollection(super.grid.getRows());
		}
		public grdPatientListRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPatientListRow(row);
		}
		public void setcolLeaveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolLeaveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolHospnumHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolHospnumHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolSurnameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolSurnameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolForenameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolForenameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolSexHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolSexHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColAgeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColAgeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcolDobHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcolDobHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setcolWardHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getcolWardHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setcolConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getcolConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setcolAdmissionDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getcolAdmissionDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setcolDocStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getcolDocStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
		public void setcolDischargedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(11, value);
		}
		public String getcolDischargedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(11);
		}
		public void setcolSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(12, value);
		}
		public String getcolSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(12);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.OutPatientListSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.OutPatientListSearchCriteriaVo' of the global context variable 'Core.OutPatientSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientListsFilterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientListsFilterVo' of the global context variable 'Correspondence.PatientListSearchCriteria' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 488);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Batch Update", new Integer(1), ""}));

		// Button Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 760, 456, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel", Boolean.FALSE, null, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 680, 456, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 408, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdPatientListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(26), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPatientListTemp);
		grdPatientListGrid grdPatientList = (grdPatientListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPatientListGrid.class, m_grdPatientListTemp);
		grdPatientList.addImageColumn(" ", 1, 0, 15, true, 0);
		grdPatientList.addStringColumn("Hospital Number", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatientList.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatientList.addStringColumn("Forename", 0, 0, 95, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatientList.addStringColumn("Sex", 0, 0, 55, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatientList.addStringColumn("Age", 0, 0, 38, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatientList.addStringColumn("D.O.B", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatientList.addStringColumn("Ward", 0, 0, 105, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatientList.addStringColumn("Consultant", 0, 0, 95, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatientList.addStringColumn("Admission Date", 0, 0, 95, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatientList.addImageColumn(" ", 0, 0, 20, true, 0);
		grdPatientList.addImageColumn(" ", 0, 0, 20, true, 0);
		grdPatientList.addBoolColumn(" ", 0, 0, -1, false, false, 0, true);
		super.addGrid(grdPatientList);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlBatchUpdate()
	{
		return (Panel)super.getControl(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(1);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(2);
	}
	public grdPatientListGrid grdPatientList()
	{
		return (grdPatientListGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Core = new CoreForms();
			Therapies = new TherapiesForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				Procedures = new LocalFormName(123119);
				PatientProblems = new LocalFormName(123120);
				DiagnosisComplications = new LocalFormName(123117);
				ClinicalDiAssociations = new LocalFormName(123121);
				ClinicalNoteDrawing = new LocalFormName(102177);
				ClinicalNoteDrawingDialog = new LocalFormName(102175);
				ClinicalNotesDialog = new LocalFormName(102176);
				DiagnosisComplications_Dialog = new LocalFormName(123130);
				PatientProblems_Dialog = new LocalFormName(123129);
				Procedures_Dialog = new LocalFormName(123134);
			}
			public final FormName Procedures;
			public final FormName PatientProblems;
			public final FormName DiagnosisComplications;
			public final FormName ClinicalDiAssociations;
			public final FormName ClinicalNoteDrawing;
			public final FormName ClinicalNoteDrawingDialog;
			public final FormName ClinicalNotesDialog;
			public final FormName DiagnosisComplications_Dialog;
			public final FormName PatientProblems_Dialog;
			public final FormName Procedures_Dialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				CareSpellDialog = new LocalFormName(102216);
			}
			public final FormName CareSpellDialog;
		}
		public final class TherapiesForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private TherapiesForms()
			{
				SOAPNoteDialog = new LocalFormName(112149);
			}
			public final FormName SOAPNoteDialog;
		}

		public ClinicalForms Clinical;
		public CoreForms Core;
		public TherapiesForms Therapies;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			COE = new COEImages();
			Admin = new AdminImages();
			Core = new CoreImages();
			NTPF = new NTPFImages();
		}
		public final class COEImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private COEImages()
			{
				Blue = new ImageHelper(101100, "Images/COE/blue12x12.gif", new Integer(12), new Integer(12));
				LightSkyBlue = new ImageHelper(101105, "Images/COE/lightblue12x12.gif", new Integer(12), new Integer(12));
				BlueViolet = new ImageHelper(101101, "Images/COE/violet12x12.gif", new Integer(12), new Integer(12));
				DarkCyan = new ImageHelper(101102, "Images/COE/darkcyan12x12.gif", new Integer(12), new Integer(12));
				LightSeaGreen = new ImageHelper(101104, "Images/COE/LightSeaGreen.gif", new Integer(12), new Integer(12));
				Turquoise = new ImageHelper(101108, "Images/COE/Turquoise.gif", new Integer(12), new Integer(12));
				Orange = new ImageHelper(101106, "Images/COE/orange12x12.gif", new Integer(12), new Integer(12));
				OrangeBoth = new ImageHelper(101125, "Images/COE/OrangeBoth.gif", new Integer(12), new Integer(12));
				OrangeLeft = new ImageHelper(101126, "Images/COE/OrangeLeft.gif", new Integer(12), new Integer(12));
				OrangeRight = new ImageHelper(101127, "Images/COE/OrangeRight.gif", new Integer(12), new Integer(12));
				DarkCyanLeft = new ImageHelper(101121, "Images/COE/DarkCyanLeft.gif", new Integer(12), new Integer(12));
				BlueBoth = new ImageHelper(101113, "Images/COE/BlueBoth.gif", new Integer(12), new Integer(12));
				BlueLeft = new ImageHelper(101117, "Images/COE/BlueLeft.gif", new Integer(12), new Integer(12));
				LightSkyBlueBoth = new ImageHelper(101115, "Images/COE/LightSkyBlueBoth.gif", new Integer(12), new Integer(12));
				LightSkyBlueLeft = new ImageHelper(101124, "Images/COE/LightSkyBlueLeft.gif", new Integer(12), new Integer(12));
				LightSkyBlueRight = new ImageHelper(101123, "Images/COE/LightSkyBlueRight.gif", new Integer(12), new Integer(12));
				BlueRight = new ImageHelper(101118, "Images/COE/BlueRight.gif", new Integer(12), new Integer(12));
				DarkCyanBoth = new ImageHelper(101116, "Images/COE/DarkCyanBoth.gif", new Integer(12), new Integer(12));
				DarkCyanRight = new ImageHelper(101122, "Images/COE/DarkCyanRight.gif", new Integer(12), new Integer(12));
			}
			public final ims.framework.utils.Image Blue;
			public final ims.framework.utils.Image LightSkyBlue;
			public final ims.framework.utils.Image BlueViolet;
			public final ims.framework.utils.Image DarkCyan;
			public final ims.framework.utils.Image LightSeaGreen;
			public final ims.framework.utils.Image Turquoise;
			public final ims.framework.utils.Image Orange;
			public final ims.framework.utils.Image OrangeBoth;
			public final ims.framework.utils.Image OrangeLeft;
			public final ims.framework.utils.Image OrangeRight;
			public final ims.framework.utils.Image DarkCyanLeft;
			public final ims.framework.utils.Image BlueBoth;
			public final ims.framework.utils.Image BlueLeft;
			public final ims.framework.utils.Image LightSkyBlueBoth;
			public final ims.framework.utils.Image LightSkyBlueLeft;
			public final ims.framework.utils.Image LightSkyBlueRight;
			public final ims.framework.utils.Image BlueRight;
			public final ims.framework.utils.Image DarkCyanBoth;
			public final ims.framework.utils.Image DarkCyanRight;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				MemberOfStaff = new ImageHelper(103133, "Images/Admin/User-Offline.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image MemberOfStaff;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				S_Red = new ImageHelper(102230, "Images/Core/S-red.gif", new Integer(16), new Integer(16));
				CareSpell = new ImageHelper(102253, "Images/Core/CareSpell.gif", new Integer(16), new Integer(16));
				CareContext = new ImageHelper(102252, "Images/Core/CareContext.gif", new Integer(16), new Integer(16));
				EpisodeOfCare = new ImageHelper(102255, "Images/Core/EpisodeOfCare.gif", new Integer(16), new Integer(16));
				AI = new ImageHelper(102264, "Images/Core/ai.gif", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
				Home = new ImageHelper(102220, "Images/Core/Home-2.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image S_Red;
			public final ims.framework.utils.Image CareSpell;
			public final ims.framework.utils.Image CareContext;
			public final ims.framework.utils.Image EpisodeOfCare;
			public final ims.framework.utils.Image AI;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image EditDisabled;
			public final ims.framework.utils.Image Home;
		}
		public final class NTPFImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NTPFImages()
			{
				Discharge = new ImageHelper(110111, "Images/NTPF/Home.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Discharge;
		}
		public final COEImages COE;
		public final AdminImages Admin;
		public final CoreImages Core;
		public final NTPFImages NTPF;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ParentEnded = new ims.framework.ContextVariable("ParentEnded", prefix + "_lv_Correspondence.BatchUpdatePatientLists.__internal_x_context__ParentEnded_" + componentIdentifier + "");
			cxl_IsDisplayAssociationsOnSummary = new ims.framework.ContextVariable("IsDisplayAssociationsOnSummary", prefix + "_lv_Correspondence.BatchUpdatePatientLists.__internal_x_context__IsDisplayAssociationsOnSummary_" + componentIdentifier + "");
			cxl_PreviousDiagnosisEpisodeOfCare = new ims.framework.ContextVariable("PreviousDiagnosisEpisodeOfCare", prefix + "_lv_Correspondence.BatchUpdatePatientLists.__internal_x_context__PreviousDiagnosisEpisodeOfCare_" + componentIdentifier + "");
			cxl_PreviousProcedureEpisodeOfCare = new ims.framework.ContextVariable("PreviousProcedureEpisodeOfCare", prefix + "_lv_Correspondence.BatchUpdatePatientLists.__internal_x_context__PreviousProcedureEpisodeOfCare_" + componentIdentifier + "");
		}
		
		public boolean getParentEndedIsNotNull()
		{
			return !cxl_ParentEnded.getValueIsNull(context);
		}
		public Boolean getParentEnded()
		{
			return (Boolean)cxl_ParentEnded.getValue(context);
		}
		public void setParentEnded(Boolean value)
		{
			cxl_ParentEnded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ParentEnded = null;
		public boolean getIsDisplayAssociationsOnSummaryIsNotNull()
		{
			return !cxl_IsDisplayAssociationsOnSummary.getValueIsNull(context);
		}
		public Boolean getIsDisplayAssociationsOnSummary()
		{
			return (Boolean)cxl_IsDisplayAssociationsOnSummary.getValue(context);
		}
		public void setIsDisplayAssociationsOnSummary(Boolean value)
		{
			cxl_IsDisplayAssociationsOnSummary.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsDisplayAssociationsOnSummary = null;
		public boolean getPreviousDiagnosisEpisodeOfCareIsNotNull()
		{
			return !cxl_PreviousDiagnosisEpisodeOfCare.getValueIsNull(context);
		}
		public ims.core.admin.vo.EpisodeOfCareRefVo getPreviousDiagnosisEpisodeOfCare()
		{
			return (ims.core.admin.vo.EpisodeOfCareRefVo)cxl_PreviousDiagnosisEpisodeOfCare.getValue(context);
		}
		public void setPreviousDiagnosisEpisodeOfCare(ims.core.admin.vo.EpisodeOfCareRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'PreviousDiagnosisEpisodeOfCare' RefVo context variable.");
			if(value == null)
				cxl_PreviousDiagnosisEpisodeOfCare.setValue(context, null);
			else
				cxl_PreviousDiagnosisEpisodeOfCare.setValue(context, new ims.core.admin.vo.EpisodeOfCareRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_PreviousDiagnosisEpisodeOfCare = null;
		public boolean getPreviousProcedureEpisodeOfCareIsNotNull()
		{
			return !cxl_PreviousProcedureEpisodeOfCare.getValueIsNull(context);
		}
		public ims.core.admin.vo.EpisodeOfCareRefVo getPreviousProcedureEpisodeOfCare()
		{
			return (ims.core.admin.vo.EpisodeOfCareRefVo)cxl_PreviousProcedureEpisodeOfCare.getValue(context);
		}
		public void setPreviousProcedureEpisodeOfCare(ims.core.admin.vo.EpisodeOfCareRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'PreviousProcedureEpisodeOfCare' RefVo context variable.");
			if(value == null)
				cxl_PreviousProcedureEpisodeOfCare.setValue(context, null);
			else
				cxl_PreviousProcedureEpisodeOfCare.setValue(context, new ims.core.admin.vo.EpisodeOfCareRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_PreviousProcedureEpisodeOfCare = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[73];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.BatchUpdatePatientLists.__internal_x_context__PreviousDiagnosisEpisodeOfCare_" + componentIdentifier, "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.BatchUpdatePatientLists.__internal_x_context__PreviousProcedureEpisodeOfCare_" + componentIdentifier, "BO-1004100018-ID", "ID_EpisodeOfCare");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
