//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.correspondence.forms.userprofileconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdUserListRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdUserListRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolPersonNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolPersonNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolPersonNameOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolPersonName(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolPersonName()
		{
			return (String)super.row.get(0);
		}
		public void setcolPersonName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolPersonNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolUsernameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolUsernameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolUsernameOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolUsername(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolUsername()
		{
			return (String)super.row.get(1);
		}
		public void setcolUsername(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolUsernameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.admin.vo.AppUserShortWithNameVo getValue()
		{
			return (ims.admin.vo.AppUserShortWithNameVo)super.row.getValue();
		}
		public void setValue(ims.admin.vo.AppUserShortWithNameVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdUserListRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdUserListRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdUserListRow get(int index)
		{
			return new grdUserListRow(super.collection.get(index));
		}
		public grdUserListRow newRow()
		{
			return new grdUserListRow(super.collection.newRow());
		}
		public grdUserListRow newRow(boolean autoSelect)
		{
			return new grdUserListRow(super.collection.newRow(autoSelect));
		}
		public grdUserListRow newRowAt(int index)
		{
			return new grdUserListRow(super.collection.newRowAt(index));
		}
		public grdUserListRow newRowAt(int index, boolean autoSelect)
		{
			return new grdUserListRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdUserListGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.admin.vo.AppUserShortWithNameVoCollection getValues()
		{
			ims.admin.vo.AppUserShortWithNameVoCollection listOfValues = new ims.admin.vo.AppUserShortWithNameVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.admin.vo.AppUserShortWithNameVo getValue()
		{
			return (ims.admin.vo.AppUserShortWithNameVo)super.grid.getValue();
		}
		public void setValue(ims.admin.vo.AppUserShortWithNameVo value)
		{
			super.grid.setValue(value);
		}
		public grdUserListRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdUserListRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdUserListRowCollection getRows()
		{
			return new grdUserListRowCollection(super.grid.getRows());
		}
		public grdUserListRow getRowByValue(ims.admin.vo.AppUserShortWithNameVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdUserListRow(row);
		}
		public void setcolPersonNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolPersonNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolUsernameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolUsernameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Correspondence.contextMenuUserProfileConfiguration = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Correspondence.contextMenuUserProfileConfigurationCorrespondenceAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Correspondence", true, false, new Integer(102179), true, false);
		contextMenus.Correspondence.contextMenuUserProfileConfiguration.add(contextMenus.Correspondence.contextMenuUserProfileConfigurationCorrespondenceAddItem);
		contextMenus.Correspondence.contextMenuUserProfileConfigurationCorrespondenceEditItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Correspondence", true, false, new Integer(102150), true, false);
		contextMenus.Correspondence.contextMenuUserProfileConfiguration.add(contextMenus.Correspondence.contextMenuUserProfileConfigurationCorrespondenceEditItem);
		contextMenus.Correspondence.contextMenuUserProfileConfigurationCorrespondenceRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove Correspondence", true, false, new Integer(102300), true, false);
		contextMenus.Correspondence.contextMenuUserProfileConfiguration.add(contextMenus.Correspondence.contextMenuUserProfileConfigurationCorrespondenceRemoveItem);
		contextMenus.Correspondence.contextMenuUserProfileConfigurationCorrespondenceRemoveAllItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove All Correspondence", true, false, new Integer(102300), true, true);
		contextMenus.Correspondence.contextMenuUserProfileConfiguration.add(contextMenus.Correspondence.contextMenuUserProfileConfigurationCorrespondenceRemoveAllItem);
		contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsGrantFullItem = factory.createMenuItem(startControlID.intValue() + 5, "Grant Full Rights", true, false, new Integer(102101), true, true);
		contextMenus.Correspondence.contextMenuUserProfileConfiguration.add(contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsGrantFullItem);
		contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsGrantReadOnlyItem = factory.createMenuItem(startControlID.intValue() + 6, "Grant Read-Only Rights", true, false, new Integer(102100), true, false);
		contextMenus.Correspondence.contextMenuUserProfileConfiguration.add(contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsGrantReadOnlyItem);
		contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsRemoveAllItem = factory.createMenuItem(startControlID.intValue() + 7, "Remove All Rights", true, false, null, true, false);
		contextMenus.Correspondence.contextMenuUserProfileConfiguration.add(contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsRemoveAllItem);
		contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsToAllGrantFullItem = factory.createMenuItem(startControlID.intValue() + 8, "Grant Full Rights To All", true, false, new Integer(102101), true, true);
		contextMenus.Correspondence.contextMenuUserProfileConfiguration.add(contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsToAllGrantFullItem);
		contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsToAllGrantReadOnlyItem = factory.createMenuItem(startControlID.intValue() + 9, "Grant Read-Only Rights To All", true, false, new Integer(102100), true, false);
		contextMenus.Correspondence.contextMenuUserProfileConfiguration.add(contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsToAllGrantReadOnlyItem);
		contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsToAllRemoveAllItem = factory.createMenuItem(startControlID.intValue() + 10, "Remove All Rights From All", true, false, null, true, false);
		contextMenus.Correspondence.contextMenuUserProfileConfiguration.add(contextMenus.Correspondence.contextMenuUserProfileConfigurationRightsToAllRemoveAllItem);
		form.registerMenu(contextMenus.Correspondence.contextMenuUserProfileConfiguration);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 376, 48, 448, 568, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"User Profile Configuration", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 50, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 392, 104, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Username: -", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 392, 80, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name: -", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 733, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 650, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 392, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 285, 48, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Search", Boolean.TRUE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 72, 48, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 80, 336, 536, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdUserListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdUserListTemp);
		grdUserListGrid grdUserList = (grdUserListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdUserListGrid.class, m_grdUserListTemp);
		grdUserList.addStringColumn("Person Name", 0, 0, 236, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdUserList.addStringColumn("Username", 0, 0, -1, true, false, 0, 30, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdUserList);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 392, 128, 416, 432, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Correspondence.contextMenuUserProfileConfiguration, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblUsername()
	{
		return (Label)super.getControl(3);
	}
	public Label lblName()
	{
		return (Label)super.getControl(4);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(7);
	}
	public Button btnSearch()
	{
		return (Button)super.getControl(8);
	}
	public TextBox txtUserSearch()
	{
		return (TextBox)super.getControl(9);
	}
	public grdUserListGrid grdUserList()
	{
		return (grdUserListGrid)super.getGrid(0);
	}
	public DynamicGrid dyngrdDetails()
	{
		return (DynamicGrid)super.getControl(11);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				User = new ImageHelper(102316, "Images/Core/user.ico", new Integer(16), new Integer(16));
				Users = new ImageHelper(102317, "Images/Core/users.ico", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image User;
			public final ims.framework.utils.Image Users;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Clinic = new ImageHelper(103160, "Images/Admin/Clinic.jpg", new Integer(16), new Integer(16));
				Clinic2 = new ImageHelper(103161, "Images/Admin/Clinics.jpg", new Integer(16), new Integer(16));
				Specialty = new ImageHelper(103162, "Images/Admin/Specialies.jpg", new Integer(16), new Integer(16));
				Specialty2 = new ImageHelper(103163, "Images/Admin/Specialty.jpg", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Clinic;
			public final ims.framework.utils.Image Clinic2;
			public final ims.framework.utils.Image Specialty;
			public final ims.framework.utils.Image Specialty2;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_currentUserAccess = new ims.framework.ContextVariable("currentUserAccess", prefix + "_lv_Correspondence.UserProfileConfiguration.__internal_x_context__currentUserAccess_" + componentIdentifier + "");
		}
		
		public boolean getcurrentUserAccessIsNotNull()
		{
			return !cxl_currentUserAccess.getValueIsNull(context);
		}
		public ims.correspondence.vo.UserAccessVo getcurrentUserAccess()
		{
			return (ims.correspondence.vo.UserAccessVo)cxl_currentUserAccess.getValue(context);
		}
		public void setcurrentUserAccess(ims.correspondence.vo.UserAccessVo value)
		{
			cxl_currentUserAccess.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_currentUserAccess = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CorrespondenceNamespace Correspondence = new CorrespondenceNamespace();
		public final class CorrespondenceNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class UserProfileConfiguration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int CorrespondenceAdd = 1;
				public static final int CorrespondenceEdit = 2;
				public static final int CorrespondenceRemove = 3;
				public static final int CorrespondenceRemoveAll = 4;
				public static final int RightsGrantFull = 5;
				public static final int RightsGrantReadOnly = 6;
				public static final int RightsRemoveAll = 7;
				public static final int RightsToAllGrantFull = 8;
				public static final int RightsToAllGrantReadOnly = 9;
				public static final int RightsToAllRemoveAll = 10;
			}
			public void disableAllUserProfileConfigurationMenuItems()
			{
				this.contextMenuUserProfileConfigurationCorrespondenceAddItem.setEnabled(false);
				this.contextMenuUserProfileConfigurationCorrespondenceEditItem.setEnabled(false);
				this.contextMenuUserProfileConfigurationCorrespondenceRemoveItem.setEnabled(false);
				this.contextMenuUserProfileConfigurationCorrespondenceRemoveAllItem.setEnabled(false);
				this.contextMenuUserProfileConfigurationRightsGrantFullItem.setEnabled(false);
				this.contextMenuUserProfileConfigurationRightsGrantReadOnlyItem.setEnabled(false);
				this.contextMenuUserProfileConfigurationRightsRemoveAllItem.setEnabled(false);
				this.contextMenuUserProfileConfigurationRightsToAllGrantFullItem.setEnabled(false);
				this.contextMenuUserProfileConfigurationRightsToAllGrantReadOnlyItem.setEnabled(false);
				this.contextMenuUserProfileConfigurationRightsToAllRemoveAllItem.setEnabled(false);
			}
			public void hideAllUserProfileConfigurationMenuItems()
			{
				this.contextMenuUserProfileConfigurationCorrespondenceAddItem.setVisible(false);
				this.contextMenuUserProfileConfigurationCorrespondenceEditItem.setVisible(false);
				this.contextMenuUserProfileConfigurationCorrespondenceRemoveItem.setVisible(false);
				this.contextMenuUserProfileConfigurationCorrespondenceRemoveAllItem.setVisible(false);
				this.contextMenuUserProfileConfigurationRightsGrantFullItem.setVisible(false);
				this.contextMenuUserProfileConfigurationRightsGrantReadOnlyItem.setVisible(false);
				this.contextMenuUserProfileConfigurationRightsRemoveAllItem.setVisible(false);
				this.contextMenuUserProfileConfigurationRightsToAllGrantFullItem.setVisible(false);
				this.contextMenuUserProfileConfigurationRightsToAllGrantReadOnlyItem.setVisible(false);
				this.contextMenuUserProfileConfigurationRightsToAllRemoveAllItem.setVisible(false);
			}
			private Menu contextMenuUserProfileConfiguration;
			public MenuItem getUserProfileConfigurationCorrespondenceAddItem()
			{
				return this.contextMenuUserProfileConfigurationCorrespondenceAddItem;
			}
			private MenuItem contextMenuUserProfileConfigurationCorrespondenceAddItem;
			public MenuItem getUserProfileConfigurationCorrespondenceEditItem()
			{
				return this.contextMenuUserProfileConfigurationCorrespondenceEditItem;
			}
			private MenuItem contextMenuUserProfileConfigurationCorrespondenceEditItem;
			public MenuItem getUserProfileConfigurationCorrespondenceRemoveItem()
			{
				return this.contextMenuUserProfileConfigurationCorrespondenceRemoveItem;
			}
			private MenuItem contextMenuUserProfileConfigurationCorrespondenceRemoveItem;
			public MenuItem getUserProfileConfigurationCorrespondenceRemoveAllItem()
			{
				return this.contextMenuUserProfileConfigurationCorrespondenceRemoveAllItem;
			}
			private MenuItem contextMenuUserProfileConfigurationCorrespondenceRemoveAllItem;
			public ReadOnlyMenuItem getUserProfileConfigurationRightsGrantFullItem()
			{
				return this.contextMenuUserProfileConfigurationRightsGrantFullItem;
			}
			private MenuItem contextMenuUserProfileConfigurationRightsGrantFullItem;
			public ReadOnlyMenuItem getUserProfileConfigurationRightsGrantReadOnlyItem()
			{
				return this.contextMenuUserProfileConfigurationRightsGrantReadOnlyItem;
			}
			private MenuItem contextMenuUserProfileConfigurationRightsGrantReadOnlyItem;
			public ReadOnlyMenuItem getUserProfileConfigurationRightsRemoveAllItem()
			{
				return this.contextMenuUserProfileConfigurationRightsRemoveAllItem;
			}
			private MenuItem contextMenuUserProfileConfigurationRightsRemoveAllItem;
			public ReadOnlyMenuItem getUserProfileConfigurationRightsToAllGrantFullItem()
			{
				return this.contextMenuUserProfileConfigurationRightsToAllGrantFullItem;
			}
			private MenuItem contextMenuUserProfileConfigurationRightsToAllGrantFullItem;
			public ReadOnlyMenuItem getUserProfileConfigurationRightsToAllGrantReadOnlyItem()
			{
				return this.contextMenuUserProfileConfigurationRightsToAllGrantReadOnlyItem;
			}
			private MenuItem contextMenuUserProfileConfigurationRightsToAllGrantReadOnlyItem;
			public ReadOnlyMenuItem getUserProfileConfigurationRightsToAllRemoveAllItem()
			{
				return this.contextMenuUserProfileConfigurationRightsToAllRemoveAllItem;
			}
			private MenuItem contextMenuUserProfileConfigurationRightsToAllRemoveAllItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[73];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfileConfiguration.__internal_x_context__currentUserAccess_" + componentIdentifier, "BO-1053100011-ID", "ID_UserAccess");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfileConfiguration.__internal_x_context__currentUserAccess_" + componentIdentifier, "BO-1053100011-APPUSER", "AppUser");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
