//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.25 build 1948.28680)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.correspondencedetails;

import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportTemplateVoCollection;
import ims.admin.vo.UserEmailAccountVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.DocumentVo;
import ims.core.vo.ExternalPersonShortVo;
import ims.core.vo.GpLiteVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.PatIdType;
import ims.correspondence.forms.correspondencedetails.GenForm;
import ims.correspondence.helper.AttachmentHelper;
import ims.correspondence.helper.DocumentDetailsInitialiser;
import ims.correspondence.helper.EmailHelper;
import ims.correspondence.vo.CategoryNotesVo;
import ims.correspondence.vo.CategoryNotesVoCollection;
import ims.correspondence.vo.CorrespondenceDetailsVo;
import ims.correspondence.vo.CorrespondenceStatusHistoryVo;
import ims.correspondence.vo.CorrespondenceStatusHistoryVoCollection;
import ims.correspondence.vo.RecipientVo;
import ims.correspondence.vo.RecipientVoCollection;
import ims.correspondence.vo.TemplateCategoryVo;
import ims.correspondence.vo.lookups.RecipientType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
import ims.vo.ValueObject;
import ims.core.vo.lookups.PasEventType;

import javax.mail.MessagingException;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws FormOpenException
	{
		initalize();
		open();
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		updateControlStateUI();
		setStatusCaption();
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		clear();
		if (form.getGlobalContext().Correspondence.getCorrespondenceDetailsIsNotNull())
		{
			open();
		}
		form.setMode(FormMode.VIEW);
		updateContextMenusState();
	}

	private void clear()
	{
		if (form.getLocalContext().getcorrespondenceDetailsIsNotNull())
		{
			// get saved recipients
			if (form.getLocalContext().getcorrespondenceDetails().getRecipientsIsNotNull())
				populateRecipients(form.getLocalContext().getcorrespondenceDetails().getRecipients());

			// If not signed clear singed by combo
			form.qmbSignedBy().setValue(form.getLocalContext().getcorrespondenceDetails().getSignedBy());
		}
		else
		{
			form.ctnRecipient().grdAdressee().getRows().clear();
			form.qmbSignedBy().setValue(null);
		}

	}

	protected void onBtnPreviewLetterClick() throws ims.framework.exceptions.PresentationLogicException
	{
		previewLetter();
	}

	protected void onBtnPrintLetterClick() throws ims.framework.exceptions.PresentationLogicException
	{
		printCorrespondence();
	}

	protected void onBtnSupplementaryClick() throws ims.framework.exceptions.PresentationLogicException
	{
		supplementaryCorrespondence();
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Correspondence.TemplateSelect))
		{
			if (result.equals(DialogResult.OK))
				templateSelectOK();
			else
			{
				// display patient info
				populateScreenPatientInfoFromData(null, GetPasEventDetails());
			}
		}

		else if (formName.equals(form.getForms().Correspondence.GPDetails) && result.equals(DialogResult.OK))
		{
			RecipientVo recipient = new RecipientVo();

			recipient.setName(form.getGlobalContext().Core.getGPDetails().getName());
			recipient.setRecipientType(RecipientType.EXTERNAL_GP);
			
			createRecipientRow(recipient);
		}

		else if (formName.equals(form.getForms().Correspondence.NonGPSelect) && result.equals(DialogResult.OK))
		{
			RecipientVo recipent = new RecipientVo();
			
			recipent.setName(form.getGlobalContext().Correspondence.getExternalPerson().getName());
			recipent.setRecipientType(RecipientType.EXTERNAL_PERSON);
			
			createRecipientRow(recipent);
			
		}
			
			
			
		else if (formName.equals(form.getForms().Correspondence.HeaderComment) && result.equals(DialogResult.OK))
			updategrdDischargeComment();

		else if (formName.equals(form.getForms().Correspondence.PrintDishargeLetter) && result.equals(DialogResult.OK))
		{
			byte[] b = prepairPrintCorrespondenceDoc();
			if (b != null)
				saveStatus(DocumentStatus.PRINTEDNOSIGNATURE, form.getLocalContext().getcorrespondenceDetails(), b);

			updateControlsState();
		}
		else if (formName.equals(form.getForms().Correspondence.AttendancesContacts) && result.equals(DialogResult.OK))
			open();
		else if (formName.equals(form.getForms().Correspondence.DocumentStatusDlg))
		{
			open();
		}
	}

	protected void onBtnSaveLetterClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.ctnRecipient().grdAdressee().getRows().size() <= 0)
		{
			engine.showMessage("Please select an addressee before generating.");
			return;
		}

		saveCorrespondence(DocumentStatus.GENNOTPRINTED);
		form.setMode(FormMode.VIEW);
	}

	private void initalize() throws FormOpenException
	{
		form.getLocalContext().setsuplementryLetterVisible(new Boolean(ConfigFlag.UI.DISCHARGE_LETTERS_SUPPLEMENTARY_BUTTON.getValue()));
		MemberOfStaffShortVo voMos = (MemberOfStaffShortVo) domain.getMosUser();
		if (null == voMos)
		{
			throw new FormOpenException("Current user not associated with a Member Of Staff");
		}
		else
		{
			form.getLocalContext().setloggedInMos(voMos);
		}

		// get full paseventvo
		form.getLocalContext().setpasEventVo(domain.getPasEvent(form.getGlobalContext().Core.getPasEvent()));

		if (form.getGlobalContext().Correspondence.getGenerateFormModeIsNotNull())
			form.setMode(form.getGlobalContext().Correspondence.getGenerateFormMode());

		// set caption
		// TODO
		// if (form.getGlobalContext().Core.getPasEvent().gettype == inpat)

		// String strTitle()

	}

	private void setContextVariables(CorrespondenceDetailsVo voCorrespondenceDetails)
	{
		clearContextvariables();

		if (null == voCorrespondenceDetails)
			return;

		if (voCorrespondenceDetails.getCurrentDocumentIsNotNull())
			form.getGlobalContext().Correspondence.setReportTemplate(voCorrespondenceDetails.getCurrentDocument().getTemplate());

		if (voCorrespondenceDetails.getID_CorrespondenceDetailsIsNotNull())
			form.getGlobalContext().Correspondence.setDocDetailIdReportSeed(voCorrespondenceDetails.getCurrentDocumentIsNotNull() ? voCorrespondenceDetails.getCurrentDocument().getID_Document() : null);

		form.getLocalContext().setcorrespondenceDetails(voCorrespondenceDetails);

		if (voCorrespondenceDetails.getCurrentDocumentIsNotNull())
			form.getLocalContext().setLastDocGenerated(voCorrespondenceDetails.getCurrentDocument());

		if (voCorrespondenceDetails.getCurrentStatusIsNotNull())
			form.getLocalContext().setlastDocumentStatus(voCorrespondenceDetails.getCurrentStatus());

	}

	/**
	 * @param docDetailVo
	 */
	private void populateScreenFromData(CorrespondenceDetailsVo voDocumentDetails)
	{
		if (null == voDocumentDetails)
			return;

		if (voDocumentDetails.getCategoriesIsNotNull())
			populateCategoryDetails(voDocumentDetails.getCategories());

		// recipients
		if (voDocumentDetails.getRecipientsIsNotNull())
			populateRecipients(voDocumentDetails.getRecipients());

		// special interest
		if (voDocumentDetails.getSpecialInterestIsNotNull())
		{
			form.cmbType().setValue(voDocumentDetails.getSpecialInterest());
			form.chkSpecialInterest().setValue(true);
		}
		else
		{
			form.chkSpecialInterest().setValue(false);
		}

		// List template categories
		if (voDocumentDetails.getCurrentDocumentIsNotNull() && voDocumentDetails.getCurrentDocument().getTemplateIsNotNull())
		{
			// first time to load template catedories for this correspondence
			form.pnlTitle().setValue("Correspondence Details  -   Template : " + voDocumentDetails.getCurrentDocument().getTemplate().getName());
			if (voDocumentDetails.getCategoriesIsNotNull())
				populateScreenFromDataTemplateCategoryTexts(voDocumentDetails.getCategories(), voDocumentDetails.getCurrentDocument().getTemplate());
			else
				loadCategoriesForTemplate(voDocumentDetails.getCurrentDocument().getTemplate());
		}

		// signed by
		if (voDocumentDetails.getSignedByIsNotNull())
		{
			MedicLiteVo voLiteMedic = voDocumentDetails.getSignedBy();
			if (voLiteMedic != null)
			{
				form.qmbSignedBy().setValue(voLiteMedic);
				form.qmbSignedBy().setEditedText(voLiteMedic.getMos().getName().toShortForm());
				form.qmbSignedBy().setTooltip(voLiteMedic.getMos().getName().toShortForm());
			}
		}

		setCurrentStatusImage(voDocumentDetails.getCurrentStatus());

		if (voDocumentDetails.getCurrentStatusIsNotNull())
			form.getLocalContext().setlastDocumentStatus(voDocumentDetails.getCurrentStatus());

		PasEventVo voPasEvent = form.getLocalContext().getpasEventVo();
		if (voPasEvent != null)
		{
			form.ctnPatientDetails().txtContactNo().setValue(voPasEvent.getPasEventIdIsNotNull() ? voPasEvent.getPasEventId() : "");
			form.ctnPatientDetails().txtClinicDate().setValue(voPasEvent.getEventDateTimeIsNotNull() ? voPasEvent.getEventDateTime().getDate().toString(DateFormat.STANDARD) : "");
			form.ctnPatientDetails().txtClinicTime().setValue(voPasEvent.getEventDateTimeIsNotNull() ? voPasEvent.getEventDateTime().getTime().toString(TimeFormat.DEFAULT) : "");
		}

		populateScreenPatientInfoFromData(voDocumentDetails, voPasEvent);
		/*
		 * if (voPatient.getGpIsNotNull()) populateGPDetails(voPatient.getGp()); }
		 */
	}

	/**
	 * @param voDocumentDetails
	 */
	private void setCurrentStatusImage(ims.core.vo.lookups.DocumentStatus currentStatus)
	{
		if (currentStatus != null)
		{
			form.imbCurrentStatus().setEnabledImage(currentStatus.getImage());
			form.imbCurrentStatus().setDisabledImage(currentStatus.getImage());
			form.imbCurrentStatus().setTooltip("Current Status : " + currentStatus.getText());
			form.lblStatusText().setValue(currentStatus.getText());
		}
		else
		{
			form.imbCurrentStatus().setEnabledImage(null);
			form.imbCurrentStatus().setDisabledImage(null);
			form.lblStatusText().setValue(null);
		}
	}

	/**
	 * @param voDocumentDetails
	 * @param voPasEvent
	 */
	private void populateScreenPatientInfoFromData(CorrespondenceDetailsVo voDocumentDetails, PasEventVo voPasEvent)
	{
		// show patient details

		Patient voPatient = null;
		PatientShort voPatientShort = null;

		if (voDocumentDetails != null)
			voPatient = domain.getPatientLocal(form.getLocalContext().getpasEventVo().getPatient());
		else if (voPasEvent != null)
			voPatientShort = voPasEvent.getPatient();

		if (null != voPatient)
		{
			populatePatientDetails(voPatient);
			if (voDocumentDetails.getPasEventIsNotNull())
				populateGPDetails(voPasEvent.getReferringGP(), voPasEvent.getReferringGpSurgery());

			form.getLocalContext().setPatientGP(voPatient.getGp());
		}
		else if (null != voPatientShort)
		{
			populatePatientDetails(voPatientShort);
		}
	}

	private void populateScreenFromDataTemplateCategoryTexts(CategoryNotesVoCollection voCollCategories, ReportTemplateVo voReportTemplate)
	{
		if (voCollCategories == null)
			return;

		GenForm.ctnHeaderContainer.grdCategoriesRow rowDocumentCategory;

		// clear the list
		form.ctnHeader().grdCategories().getRows().clear();

		// add saved category texts

		// Match the categories for the current document details..
		for (int i = 0; i < voCollCategories.size(); i++)
		{
			CategoryNotesVo voCatNote = voCollCategories.get(i);
			rowDocumentCategory = form.ctnHeader().grdCategories().getRows().newRow();
			rowDocumentCategory.setCategoryText(form.getImages().Core.Memo);
			rowDocumentCategory.setValue(voCatNote);
			rowDocumentCategory.setDate(voCatNote.getSysInfo().getCreationDateTime().getDate());
			rowDocumentCategory.setTime(voCatNote.getSysInfo().getCreationDateTime().getTime());
			rowDocumentCategory.setRecUser(domain.getMosUser(voCatNote.getSysInfo().getCreationUser()).toString());
			rowDocumentCategory.setCategory(voCatNote.getCategory());
			rowDocumentCategory.setTooltipForCategoryText(voCatNote.getCategoryText());
		}

		// load the rest of the Categories based on tempalte and set the value of all rows to a
		GenForm.ctnHeaderContainer.grdCategoriesRow catRow;

		TemplateCategoryVo voTemplateCategory = domain.listTemplateDischargeCategories(voReportTemplate);

		if (voTemplateCategory != null && voTemplateCategory.getDischargeCategoriesIsNotNull())
		{
			boolean found = false;
			for (int i = 0; i < voTemplateCategory.getDischargeCategories().size(); i++)
			{
				for (int k = 0; k < form.ctnHeader().grdCategories().getRows().size(); k++)
				{
					if (voTemplateCategory.getDischargeCategories().get(i) != null)
					{
						if (form.ctnHeader().grdCategories().getRows().get(k).getValue() != null)
						{
							if (form.ctnHeader().grdCategories().getRows().get(k).getValue().getCategory().equals(voTemplateCategory.getDischargeCategories().get(i)))
							{
								found = true;
								break;
							}
						}
					}
				}
				if (!found)
				{
					catRow = form.ctnHeader().grdCategories().getRows().newRow();
					// store discharge category type id
					catRow.setTemplateCategoryId(new Integer(voTemplateCategory.getDischargeCategories().get(i).getId()));
					// discharge category
					catRow.setCategory(voTemplateCategory.getDischargeCategories().get(i));
				}
				else
					found = false;
			}
		}

	}

	/**
	 * @param docDetailVo
	 */
	private void populateRecipients(RecipientVoCollection voDocRecipColl)
	{
		RecipientVo vpDocRecip = new RecipientVo();
		form.ctnRecipient().grdAdressee().getRows().clear();
		GenForm.ctnRecipientContainer.grdAdresseeRow row;

		for (int i = 0; i < voDocRecipColl.size(); i++)
		{
			vpDocRecip = voDocRecipColl.get(i);
			row = form.ctnRecipient().grdAdressee().getRows().newRow();

			populateRow(vpDocRecip, row);

			if (vpDocRecip.getRecipientType().equals(RecipientType.EXTERNAL_GP))
			{
				row.setGP(form.getImages().Admin.StaffBlue);
			}
			else if (vpDocRecip.getRecipientType().equals(RecipientType.EXTERNAL_PERSON))
			{
				row.setGP(form.getImages().Admin.StaffYellow);
			}
			else if (vpDocRecip.getRecipientType().equals(RecipientType.PATIENT_RECIPIENT))
			{
				row.setGP(form.getImages().Admin.StaffGreen);
			}
			else if (vpDocRecip.getRecipientType().equals(RecipientType.PATIENT_GP))
			{
				row.setGP(form.getImages().Admin.StaffBlack);
			}

		}
	}

	private void populateRow(RecipientVo vpDocRecip, GenForm.ctnRecipientContainer.grdAdresseeRow row)
	{

		if (vpDocRecip != null)
		{

			row.setValue(vpDocRecip);

			/*
			 * if (vpDocRecip.getAddressIsNotNull()) row.setAddress(vpDocRecip.getAddress().toDisplayString());
			 */

			if (vpDocRecip.getNameIsNotNull())
				row.setAdressee(vpDocRecip.getName().toShortForm());
		}
	}

	/**
	 * @param docDetailVo
	 */
	private void populateCategoryDetails(CategoryNotesVoCollection voDocCats)
	{
		// category glossary texts
		if (voDocCats != null)
		{
			GenForm.ctnHeaderContainer.grdCategoriesRow row;
			for (int i = 0; i < voDocCats.size(); i++)
			{
				for (int j = 0; j < form.ctnHeader().grdCategories().getRows().size(); j++)
				{
					row = form.ctnHeader().grdCategories().getRows().get(j);
					if (row.getCategory().equals(voDocCats.get(i).getCategory()))
					{
						row.setCategoryText(form.getImages().Core.Memo);
						if (voDocCats.get(i).getCategoryTextIsNotNull())
							row.setTooltipForCategoryText(voDocCats.get(i).getCategoryText());
						if (voDocCats.get(i).getSysInfoIsNotNull())
						{
							row.setDate(voDocCats.get(i).getSysInfo().getCreationDateTime().getDate());
							row.setTime(voDocCats.get(i).getSysInfo().getCreationDateTime().getTime());
							row.setRecUser(voDocCats.get(i).getSysInfo().getCreationUser().toString());
						}
						row.setValue(voDocCats.get(i));
					}
				}
			}
		}
	}

	protected void loadCategoriesForTemplate(ReportTemplateVo voReportTemplate)
	{
		// load Categories based on tempalte
		form.ctnHeader().grdCategories().getRows().clear();
		GenForm.ctnHeaderContainer.grdCategoriesRow catRow;
		TemplateCategoryVo voTemplateCategory = domain.listTemplateDischargeCategories(voReportTemplate);

		if (voTemplateCategory != null && voTemplateCategory.getDischargeCategoriesIsNotNull())
		{
			for (int i = 0; i < voTemplateCategory.getDischargeCategories().size(); i++)
			{
				if (voTemplateCategory.getDischargeCategories().get(i) != null)
				{
					catRow = form.ctnHeader().grdCategories().getRows().newRow();
					// store discharge category type id
					catRow.setTemplateCategoryId(new Integer(voTemplateCategory.getDischargeCategories().get(i).getId()));
					// discharge category
					catRow.setCategory(voTemplateCategory.getDischargeCategories().get(i));
				}

			}
		}
	}

	/*
	 * protected void insertgrdAdressee(ValueObject voAdressee) { if (voAdressee == null) return;
	 * 
	 * GenForm.ctnRecipientContainer.grdAdresseeRow row = form.ctnRecipient().grdAdressee().getRows().newRow();
	 * 
	 * if (voAdressee instanceof GpShortVo) { GpShortVo voGP = (GpShortVo)voAdressee; row.setValue(voGP); row.setAdressee(voGP.getName().toString()); row.setGP(form.getImages().Admin.StaffYellow); } else if (voAdressee instanceof ExternalPersonShortVo) { ExternalPersonShortVo voExtPer = (ExternalPersonShortVo)voAdressee; row.setValue(voExtPer); row.setAdressee(voExtPer.getName().toShortForm()); row.setGP(form.getImages().Admin.StaffBlue); } }
	 */

	protected void updategrdDischargeComment()
	{
		GenForm.ctnHeaderContainer.grdCategoriesRow doccatrow;
		CategoryNotesVo doccatVo;

		if (form.ctnHeader().grdCategories().getSelectedRowIndex() >= 0)
		{
			doccatrow = form.ctnHeader().grdCategories().getSelectedRow();
			// check if a doccattext exists
			if (doccatrow.getValue() != null)
			{
				doccatVo = doccatrow.getValue();
			}
			else
			{
				doccatVo = new CategoryNotesVo();
				doccatVo.setCategory(doccatrow.getCategory());
			}

			// set recording date and time
			doccatrow.setDate(new Date());
			doccatrow.setTime(new Time());

			// set recording user
			Object mos = domain.getMosUser();
			if (mos != null)
			{
				MemberOfStaffShortVo voMosAppUser = new MemberOfStaffShortVo();
				voMosAppUser = (MemberOfStaffShortVo) mos;
				doccatrow.setRecUser(voMosAppUser.getName().toString());
			}

			doccatVo.setCategoryText(form.getGlobalContext().Correspondence.getDocCategory().getCategoryText());
			doccatrow.setValue(doccatVo);
			doccatrow.setCategoryText(form.getImages().Core.Memo);
			doccatrow.setTooltipForCategoryText(form.getGlobalContext().Correspondence.getDocCategory().getCategoryText());
		}
	}

	protected void onGrdCategoriesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateContextMenusState();
	}

	/**
	 * 
	 */
	private void showPrintDialog()
	{
		Integer iDocId = form.getLocalContext().getLastDocGenerated().getID_Document();
		form.getGlobalContext().Core.setDocumentID(iDocId);
		engine.open(form.getForms().Correspondence.PrintDishargeLetter);
	}

	private byte[] prepairPrintCorrespondenceDoc()
	{

		// get saved document from local context
		CorrespondenceDetailsVo voCorrespondenceDetails = form.getLocalContext().getcorrespondenceDetails();

		byte[] resultPdf;
		resultPdf = null;
		try
		{
			resultPdf = buildDocumentPDF(voCorrespondenceDetails);
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage("Report Generation Failed for the following reason(s): " + e.getMessage());
			return null;
		}

		return resultPdf;
	}

	private boolean saveStatus(ims.core.vo.lookups.DocumentStatus docStatus, CorrespondenceDetailsVo voCorrespondenceDetails, byte[] resultPdf)
	{
		if (null != resultPdf)
			voCorrespondenceDetails.getCurrentDocument().setContent(new String(resultPdf));

		// update current status
		voCorrespondenceDetails.setCurrentStatus(docStatus);
		// update Status History
		voCorrespondenceDetails.setCspStatusHistory(updateHistoryStatus(voCorrespondenceDetails, docStatus));

		if (!saveDocumentDetails(voCorrespondenceDetails))
			return false;

		return true;
	}

	private boolean saveCorrespondence(ims.core.vo.lookups.DocumentStatus docStatus)
	{
		CorrespondenceDetailsVo voCorrespondenceDetails = form.getLocalContext().getcorrespondenceDetails();
		if (null == voCorrespondenceDetails)
			return false;

		MemberOfStaffShortVo voMos = (MemberOfStaffShortVo) domain.getMosUser();

		if (null == voMos)
			return false;

		populateDataFromScreen(voCorrespondenceDetails);

		// WDEV-2774
		// update Status History
		voCorrespondenceDetails.setCspStatusHistory(updateHistoryStatus(voCorrespondenceDetails, voCorrespondenceDetails.getCurrentStatus()));

		// update the current status
		voCorrespondenceDetails.setCurrentStatus(docStatus);

		if (!saveDocumentDetails(voCorrespondenceDetails))
			return false;

		return true;
	}

	/**
	 * @param voDocDetail
	 */
	private boolean saveDocumentDetails(CorrespondenceDetailsVo voCorrespondenceDetails)
	{
		if (null == voCorrespondenceDetails)
			return false;

		String[] errors = voCorrespondenceDetails.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		CorrespondenceDetailsVo voSavedDocumentDetails = null;
		try
		{
			voSavedDocumentDetails = domain.saveCorrespondenceDetails(voCorrespondenceDetails, form.getLocalContext().getpasEventVo().getEventType());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}

		if (voSavedDocumentDetails != null)
		{
			form.getLocalContext().setcorrespondenceDetails(voSavedDocumentDetails);
			form.getLocalContext().setlastDocumentStatus(voSavedDocumentDetails.getCurrentStatus());
			form.getLocalContext().setLastDocGenerated(voSavedDocumentDetails.getCurrentDocument());
			setCurrentStatusImage(voSavedDocumentDetails.getCurrentStatus());
			Integer iDocId = form.getLocalContext().getLastDocGenerated().getID_Document();
			form.getGlobalContext().Core.setDocumentID(iDocId);
			form.getGlobalContext().Correspondence.setCorrespondenceDetails(voSavedDocumentDetails);
		}

		return true;

	}

	/**
	 * 
	 */
	private byte[] buildDocumentPDF(CorrespondenceDetailsVo voCorrespondenceDetails) throws QueryBuilderClientException
	{
		Integer iDocId;
		iDocId = voCorrespondenceDetails.getID_CorrespondenceDetails();

		form.getGlobalContext().Correspondence.setDocDetailIdReportSeed(iDocId);
		// generate the document for viewing
		form.getGlobalContext().Core.setReportID(form.getGlobalContext().Correspondence.getReportTemplate().getReport().getID_ReportBo());
		form.getGlobalContext().Core.setTemplateID(form.getGlobalContext().Correspondence.getReportTemplate().getID_TemplateBo());

		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		String[] obj = null;
		try
		{
			obj = domain.getReportAndTemplate(form.getGlobalContext().Core.getReportID(), form.getGlobalContext().Core.getTemplateID());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage("I could not get the report and template !");
			return null;
		}

		if (obj == null || obj.length == 0)
		{
			engine.showMessage("I could not get the report and template !");
			return null;
		}

		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

		if (form.getGlobalContext().Correspondence.getDocDetailIdReportSeedIsNotNull())
			client.addSeed(new SeedValue("CorrespondenceDetails_id", form.getGlobalContext().Correspondence.getDocDetailIdReportSeed(), Integer.class));

		return client.buildReport(obj[0], obj[1], urlReportServer, QueryBuilderClient.FP3, "", 1);

	}

	private Integer getSpecialtyId(PasEventVo voPasEvent)
	{
		if (voPasEvent != null && voPasEvent.getSpecialtyIsNotNull())
		{
			return (new Integer(voPasEvent.getSpecialty().getId()));
		}
		return null;
	}

	private Integer getConsultantId(PasEventVo voPasEvent)
	{
		if (voPasEvent != null && voPasEvent.getConsultantIsNotNull())
		{
			return voPasEvent.getConsultant().getID_Hcp();
		}
		return null;
	}

	private Integer getLocationId(PasEventVo voPasEvent)
	{
		if (voPasEvent != null && voPasEvent.getLocationIsNotNull())
		{
			return (voPasEvent.getLocation().getID_Location());
		}
		return null;
	}

	protected void open()
	{
		form.getLocalContext().setsupplementaryLetterClicked(new Boolean(false));
		form.ctnPatientDetails().setCollapsed(true);
		form.ctnRecipient().setCollapsed(false);

		// Call the method to see if a doc details exists
		if (form.getGlobalContext().Correspondence.getCorrespondenceDetailsIsNotNull())
		{
			// get CorrespondenceDetail from domain
			// set local context var for correspondenceDetail
			form.getLocalContext().setcorrespondenceDetails(domain.getCorrespondenceDetails(form.getGlobalContext().Correspondence.getCorrespondenceDetails()));

			setContextVariables(form.getLocalContext().getcorrespondenceDetails());
			populateScreenFromData(form.getLocalContext().getcorrespondenceDetails());

			if (null == form.getLocalContext().getcorrespondenceDetails().getCurrentDocument() || null == form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getTemplate())
			{
				// check for template association, if more than one then display the list for selection
				// open the template selection dialog if more than one template
				PasEventVo voPasEvent = form.getLocalContext().getpasEventVo();
				ReportTemplateVoCollection voCollRepTemplates = domain.listTemplates(new Boolean(true), getConsultantId(voPasEvent), getLocationId(voPasEvent), getSpecialtyId(voPasEvent));
				if (voCollRepTemplates.size() > 1)
				{
					engine.open(form.getForms().Correspondence.TemplateSelect);
					return;
				}
				else if (voCollRepTemplates.size() == 1)
				{
					form.getGlobalContext().Correspondence.setReportTemplate(voCollRepTemplates.get(0));
				}
				templateSelectOK();
			}
			else
				form.setMode(FormMode.VIEW);
		}
		else
		{
			// create a new one
			DocumentDetailsInitialiser docDetails = new DocumentDetailsInitialiser((MemberOfStaffShortVo) domain.getMosUser(), form.getLocalContext().getpasEventVo());
			CorrespondenceDetailsVo voCorrespondenceDetails = docDetails.get_DocumentDetails();
			if (null == voCorrespondenceDetails)
			{
				engine.showMessage("Error occurred creating Document Details : " + docDetails.getErrorMessage());
				updateControlStateForError();
				form.setMode(FormMode.VIEW);
				return;
			}
			voCorrespondenceDetails.setCurrentStatus(DocumentStatus.LETTERREQUIRED);

			// set local context var for correspondenceDetail
			form.getLocalContext().setcorrespondenceDetails(voCorrespondenceDetails);

			// open the template selection dialog if more than one template
			PasEventVo voPasEvent = form.getLocalContext().getpasEventVo();
			ReportTemplateVoCollection voCollRepTemplates = domain.listTemplates(new Boolean(true), getConsultantId(voPasEvent), getLocationId(voPasEvent), getSpecialtyId(voPasEvent));
			if (voCollRepTemplates.size() > 1)
			{
				// open the template selection dialog
				engine.open(form.getForms().Correspondence.TemplateSelect);
				return;
			}
			else if (voCollRepTemplates.size() == 1)
			{
				form.getGlobalContext().Correspondence.setReportTemplate(voCollRepTemplates.get(0));
			}
			templateSelectOK();
		}

		// set title
		String strTitle = "";
		if (form.getLocalContext().getpasEventVo().getEventType().equals(PasEventType.INPATIENT))
		{
			strTitle = "In patient - ";
		}
		else
		{
			strTitle = "Out patient - ";
		}
		if (form.getLocalContext().getpasEventVo().getEventDateTimeIsNotNull())
			strTitle += form.getLocalContext().getpasEventVo().getEventDateTime().toString() + " - ";
		if (form.getLocalContext().getpasEventVo().getConsultantIsNotNull())
			strTitle += form.getLocalContext().getpasEventVo().getConsultant().toString() + " - ";
		if (form.getLocalContext().getpasEventVo().getLocationIsNotNull())
			strTitle += form.getLocalContext().getpasEventVo().getLocation().toString() + " - ";
		if (form.getLocalContext().getpasEventVo().getSpecialtyIsNotNull())
			strTitle += form.getLocalContext().getpasEventVo().getSpecialty().toString() + " - ";

		form.pnlTitle().setValue(strTitle);

	}

	/**
	 * 
	 */
	private void setStatusCaption()
	{
		if (form.getLocalContext().getcorrespondenceDetailsIsNotNull() && form.getLocalContext().getcorrespondenceDetails().getCurrentDocumentIsNotNull() && form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getStatusIsNotNull())
			setCurrentStatusImage(form.getLocalContext().getcorrespondenceDetails().getCurrentStatus());
		else
			setCurrentStatusImage(DocumentStatus.LETTERREQUIRED);
	}

	/**
	 * @param voGP
	 */
	private void populateGPDetails(GpLiteVo voGP, LocSiteShortVo voPractice)
	{
		if (voGP != null)
		{
			form.ctnPatientDetails().txtSurname().setValue(voGP.getNameIsNotNull() ? voGP.getName().toString() : null);
			if (voPractice != null)
			{
				if (voPractice.getAddressIsNotNull())
				{
					if (voPractice.getAddress().getLine1IsNotNull())
						form.ctnPatientDetails().txtRefDocAddress1().setValue(voPractice.getAddress().getLine1());
					if (voPractice.getAddress().getLine2IsNotNull())
						form.ctnPatientDetails().txtRefDocAddress1().setValue(voPractice.getAddress().getLine2());
					if (voPractice.getAddress().getLine3IsNotNull())
						form.ctnPatientDetails().txtRefDocAddress1().setValue(voPractice.getAddress().getLine3());
					if (voPractice.getAddress().getLine4IsNotNull())
						form.ctnPatientDetails().txtRefDocAddress1().setValue(voPractice.getAddress().getLine4());
					if (voPractice.getAddress().getLine5IsNotNull())
						form.ctnPatientDetails().txtRefDocAddress1().setValue(voPractice.getAddress().getLine5());
				}
				form.getLocalContext().setReferrerGP(voGP);
				form.getLocalContext().setReferrerPractice(voPractice);
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ims.correspondence.forms.generatedischargeletter.Handlers#onContextMenuItemClick(int, ims.framework.Control)
	 */
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{

		switch (menuItemID)
		{
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.AddGp :
				addGP();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.AddNonGp :
				addNonGP();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.RemoveRecipient :
				removeRecipient();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.ADD_PATIENT_GP :
				addPatientGpToGrid();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.ADD_REFERRER_GP :
				addReferrerGpToGrid();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.MoveDown :
				moveRecipientDown();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.MoveUp :
				moveRecipientUp();
			break;

			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsCategories.AddText :
				addCategoryText();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsCategories.RemoveText :
				removeCategoryText();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsCategories.ViewText :
				viewCategoryText();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsCategories.MoveDown :
				moveDownHeader();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsCategories.MoveUp :
				moveUpHeader();
			break;

		}
	}

	private void moveRecipientUp()
	{
		form.ctnRecipient().grdAdressee().moveUp();
	}

	private void moveRecipientDown()
	{
		form.ctnRecipient().grdAdressee().moveDown();
	}

	private void moveUpHeader()
	{
		form.ctnHeader().grdCategories().moveUp();
	}

	private void moveDownHeader()
	{
		form.ctnHeader().grdCategories().moveDown();
	}

	private void removeRecipient()
	{
		if (form.ctnRecipient().grdAdressee().getSelectedRowIndex() >= 0)
			form.ctnRecipient().grdAdressee().getRows().remove(form.ctnRecipient().grdAdressee().getSelectedRowIndex());

		updateContextMenusState();
	}

	private void createRecipientRow(RecipientVo recipient)
	{
		GenForm.ctnRecipientContainer.grdAdresseeRow row = form.ctnRecipient().grdAdressee().getRows().newRow();

		populateRow(recipient, row);

		if (recipient.getRecipientType().equals(RecipientType.PATIENT_GP))
		{
			row.setGP(form.getImages().Admin.StaffBlack);
		}
		else if (recipient.getRecipientType().equals(RecipientType.EXTERNAL_GP))
		{
			row.setGP(form.getImages().Admin.StaffBlue);
		}
		else if (recipient.getRecipientType().equals(RecipientType.EXTERNAL_PERSON))
		{
			row.setGP(form.getImages().Admin.StaffYellow);

		}
		else if (recipient.getRecipientType().equals(RecipientType.PATIENT_RECIPIENT))
		{
			row.setGP(form.getImages().Admin.StaffGreen);
		}

	}

	private void addReferrerGpToGrid()
	{
		if (form.getLocalContext().getReferrerGP() == null)
			return;

		GenForm.ctnRecipientContainer.grdAdresseeRow recipientRow = form.ctnRecipient().grdAdressee().getRows().newRow();
		recipientRow.setAdressee(form.getLocalContext().getReferrerGP().getName().toString());
		//recipientRow.setValue(form.getLocalContext().getReferrerGP());
		

		updateContextMenusState();
	}

	private void addPatientGpToGrid()
	{
		if (form.getLocalContext().getPatientGP() == null)
			return;
		RecipientVo patGP = new RecipientVo();
		GenForm.ctnRecipientContainer.grdAdresseeRow recipientRow = form.ctnRecipient().grdAdressee().getRows().newRow();
		recipientRow.setAdressee(form.getLocalContext().getPatientGP().getName().toString());
		
		patGP.setName(form.getLocalContext().getPatientGP().getName());
		patGP.setRecipientType(RecipientType.PATIENT_GP);
		
		recipientRow.setValue(patGP);
		recipientRow.setExpandedImage(form.getImages().Admin.StaffYellow);
		recipientRow.setCollapsedImage(form.getImages().Admin.StaffYellow);
		recipientRow.setSelectedImage(form.getImages().Admin.StaffYellow);

		updateContextMenusState();
	}

	protected void addCategoryText()
	{
		GenForm.ctnHeaderContainer.grdCategoriesRow doccatrow;
		CategoryNotesVo doccatVo;
		if (form.ctnHeader().grdCategories().getSelectedRowIndex() >= 0)
		{
			doccatVo = new CategoryNotesVo();
			doccatrow = form.ctnHeader().grdCategories().getRows().get(form.ctnHeader().grdCategories().getSelectedRowIndex());

			// check if a doccattext exists
			if (doccatrow.getValue() != null)
				doccatVo = doccatrow.getValue();
			else
			{
				doccatVo.setCategory(doccatrow.getCategory());
			}

			form.getGlobalContext().Correspondence.setDocCategory(doccatVo);

			String l_caption;
			l_caption = "Please enter the associated text for : ";
			l_caption += doccatrow.getCategory().getText();
			engine.open(form.getForms().Correspondence.HeaderComment, l_caption);
		}
	}

	protected void removeCategoryText()
	{
	}

	protected void viewCategoryText()
	{
	}

	protected void addGP()
	{
		engine.open(form.getForms().Correspondence.GPDetails);
	}

	protected void addNonGP()
	{
		engine.open(form.getForms().Correspondence.NonGPSelect);
	}

	protected void updateContextMenusState()
	{
		form.getContextMenus().Correspondence.hideAllCorrespondenceDetailsAddresseeMenuItems();
		form.getContextMenus().Correspondence.hideAllCorrespondenceDetailsCategoriesMenuItems();

		if (form.getMode().equals(FormMode.EDIT))
		{
			// check status
			if (form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.SIGNED) || form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.NOLETTERREQUIRED))
			{
				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeAddGpItem().setVisible(false);
				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeAddNonGpItem().setVisible(false);
				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeRemoveRecipientItem().setVisible(false);
			}
			else
			{
				// recipients

				// check if Patient GP already entered as recipient
				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeADD_PATIENT_GPItem().setVisible(!(checkEnteredRecipients(RecipientType.PATIENT_GP)));

				// check if referral Patient GP already entered as recipient
				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeADD_REFERRER_GPItem().setVisible(checkEnteredRecipients(RecipientType.EXTERNAL_PERSON));

				if (form.ctnRecipient().grdAdressee().getSelectedRowIndex() >= 0)
				{
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeRemoveRecipientItem().setVisible(true);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeMoveDownItem().setVisible(true);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeMoveUpItem().setVisible(true);
				}
				else
				{
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeRemoveRecipientItem().setVisible(false);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeMoveDownItem().setVisible(false);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeMoveUpItem().setVisible(false);
				}

				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeAddNonGpItem().setVisible(true);

				// header text
				if (form.ctnHeader().grdCategories().getSelectedRowIndex() >= 0)
				{
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesAddTextItem().setVisible(true);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesMoveDownItem().setVisible(true);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesMoveUpItem().setVisible(true);
				}
				else
				{
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesAddTextItem().setVisible(false);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesMoveDownItem().setVisible(false);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesMoveUpItem().setVisible(false);
				}

			}
		}
	}

	private boolean checkEnteredRecipients(RecipientType recipentType)
	{

		RecipientVoCollection recpColl = form.ctnRecipient().grdAdressee().getValues();

		for (int i = 0; i < recpColl.size(); i++)
		{

			RecipientVo recpVo = recpColl.get(i);
			if (recpVo.getRecipientType().equals(recipentType))
			{
				return true;
			}
		}
		return false;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ims.correspondence.forms.generatedischargeletter.Handlers#onQmbSignedByTextSubmited(java.lang.String)
	 */
	protected void onQmbSignedByTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbSignedBy().clear();

		MedicLiteVoCollection voCollMedics = domain.listSignatories(value);
		for (int i = 0; i < voCollMedics.size(); i++)
		{
			MedicLiteVo hcp = voCollMedics.get(i);
			form.qmbSignedBy().newRow(hcp, hcp.getMos().getName().toShortForm());
		}
		if (voCollMedics.size() == 1)
		{
			form.qmbSignedBy().setValue(voCollMedics.get(0));
		}
		else if (voCollMedics.size() > 1)
		{
			form.qmbSignedBy().showOpened();
		}
	}

	protected PasEventVo GetPasEventDetails()
	{
		if (form.getGlobalContext().Core.getPasEventIsNotNull())
		{
			return domain.getPasEvent(form.getGlobalContext().Core.getPasEvent());
		}
		return null;
	}

	private void populateDataFromScreen(CorrespondenceDetailsVo voDocumentDetails)
	{
		// document categories
		if (form.ctnHeader().grdCategories().getRows().size() > 0)
		{
			GenForm.ctnHeaderContainer.grdCategoriesRow catRow;
			CategoryNotesVoCollection voDocCatColl = new CategoryNotesVoCollection();

			for (int i = 0; i < form.ctnHeader().grdCategories().getRows().size(); i++)
			{
				catRow = form.ctnHeader().grdCategories().getRows().get(i);
				if (catRow.getValue() != null)
				{
					voDocCatColl.add(catRow.getValue());
				}
			}
			voDocumentDetails.setCategories(voDocCatColl);
		}

		// Recipients
		if (form.ctnRecipient().grdAdressee().getRows().size() > 0)
		{
			GenForm.ctnRecipientContainer.grdAdresseeRow addrRow;

			RecipientVoCollection voDocRecipColl = new RecipientVoCollection();

			voDocRecipColl = form.ctnRecipient().grdAdressee().getValues();

			voDocumentDetails.setRecipients(voDocRecipColl);
		}

		// signed by
		if (form.qmbSignedBy().getValue() != null)
			voDocumentDetails.setSignedBy(form.qmbSignedBy().getValue());

		if (form.chkSpecialInterest().getValue())
			voDocumentDetails.setSpecialInterest(form.cmbType().getValue());

		form.getLocalContext().setcorrespondenceDetails(voDocumentDetails);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ims.correspondence.forms.generatedischargeletter.Handlers#onChkSpecialInterestValueChanged()
	 */
	protected void onChkSpecialInterestValueChanged() throws PresentationLogicException
	{
		if (form.chkSpecialInterest().getValue())
			form.cmbType().setEnabled(true);
		else
			form.cmbType().setEnabled(false);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ims.correspondence.forms.generatedischargeletter.Handlers#onBtnEMailClick()
	 */
	protected void onBtnEMailClick() throws PresentationLogicException
	{
		eMailCorrespondence();
	}

	private void populatePatientDetails(PatientShort voPatientShort)
	{
		// Patient Id
		PatientId idPat = voPatientShort.getPatId(PatIdType.CHARTNUM);
		if (idPat != null)
			form.ctnPatientDetails().txtPatientId().setValue(idPat.getValue());

		// PPSN
		if (voPatientShort.getPpsn() != null)
			form.ctnPatientDetails().txtPPSN().setValue(voPatientShort.getPpsn().getValue());

		// Medical Record Number
		form.ctnPatientDetails().txtMedicalRecNo().setValue(voPatientShort.getHospnum().getValue());

		if (voPatientShort.getDobIsNotNull())
			form.ctnPatientDetails().txtDOB().setValue(voPatientShort.getDob().toString(DateFormat.STANDARD));

		if (voPatientShort.getNameIsNotNull())
		{
			if (voPatientShort.getName().getForenameIsNotNull())
				form.ctnPatientDetails().txtForename().setValue(voPatientShort.getName().getForename());
			if (voPatientShort.getName().getSurnameIsNotNull())
				form.ctnPatientDetails().txtSurname().setValue(voPatientShort.getName().getSurname());
			if (voPatientShort.getName().getTitleIsNotNull())
				form.ctnPatientDetails().txtTitle().setValue(voPatientShort.getName().getTitle().getText());
		}

		if (voPatientShort.getAddressIsNotNull())
		{
			form.ctnPatientDetails().txtAddress1().setValue(voPatientShort.getAddress().getLine1());
			form.ctnPatientDetails().txtAddress2().setValue(voPatientShort.getAddress().getLine2());
			form.ctnPatientDetails().txtAddress3().setValue(voPatientShort.getAddress().getLine3());
			form.ctnPatientDetails().txtAddress4().setValue(voPatientShort.getAddress().getLine4());
			form.ctnPatientDetails().txtAddress5().setValue(voPatientShort.getAddress().getLine5());
		}
	}

	private void populatePatientDetails(Patient voPatient)
	{
		// Patient Id
		PatientId idPat = voPatient.getPatId(PatIdType.CHARTNUM);
		if (idPat != null)
			form.ctnPatientDetails().txtPatientId().setValue(idPat.getValue());

		// PPSN
		if (voPatient.getPpsn() != null)
			form.ctnPatientDetails().txtPPSN().setValue(voPatient.getPpsn().getValue());

		// TODO: review addition of Insurance to PatientShort
		// Medical Record Number
		if (voPatient.getInsuranceIsNotNull())
		{
			// Medical Card Number
			if (voPatient.getInsurance().getMedicalCardNoIsNotNull())
				form.ctnPatientDetails().txtMedicalCardNo().setValue(voPatient.getInsurance().getMedicalCardNo());
		}

		// Medical Record Number
		form.ctnPatientDetails().txtMedicalRecNo().setValue(voPatient.getHospnum().getValue());

		if (voPatient.getDobIsNotNull())
			form.ctnPatientDetails().txtDOB().setValue(voPatient.getDob().toString(DateFormat.STANDARD));

		if (voPatient.getNameIsNotNull())
		{
			if (voPatient.getName().getForenameIsNotNull())
				form.ctnPatientDetails().txtForename().setValue(voPatient.getName().getForename());
			if (voPatient.getName().getSurnameIsNotNull())
				form.ctnPatientDetails().txtSurname().setValue(voPatient.getName().getSurname());
			if (voPatient.getName().getTitleIsNotNull())
				form.ctnPatientDetails().txtTitle().setValue(voPatient.getName().getTitle().getText());
		}

		if (voPatient.getAddressIsNotNull())
		{
			form.ctnPatientDetails().txtAddress1().setValue(voPatient.getAddress().getLine1());
			form.ctnPatientDetails().txtAddress2().setValue(voPatient.getAddress().getLine2());
			form.ctnPatientDetails().txtAddress3().setValue(voPatient.getAddress().getLine3());
			form.ctnPatientDetails().txtAddress4().setValue(voPatient.getAddress().getLine4());
			form.ctnPatientDetails().txtAddress5().setValue(voPatient.getAddress().getLine5());
		}

		if (voPatient.getGpIsNotNull())
			form.getLocalContext().setPatientGP(voPatient.getGp());

	}

	/**
	 * @param voDocumentDetails
	 * @return
	 */
	private CorrespondenceStatusHistoryVoCollection updateHistoryStatus(CorrespondenceDetailsVo voDocumentDetails, DocumentStatus docStatus)
	{
		CorrespondenceStatusHistoryVoCollection voColl = null;

		if (voDocumentDetails.getCspStatusHistoryIsNotNull())
			voColl = voDocumentDetails.getCspStatusHistory();
		else
			voColl = new CorrespondenceStatusHistoryVoCollection();

		CorrespondenceStatusHistoryVo vo = new CorrespondenceStatusHistoryVo();

		if (voDocumentDetails.getCurrentDocumentIsNotNull() && voDocumentDetails.getCurrentDocument().getTemplateIsNotNull())
			vo.setTemplateName(voDocumentDetails.getCurrentDocument().getTemplate().getNameIsNotNull() ? voDocumentDetails.getCurrentDocument().getTemplate().getName() : "");
		else
			vo.setTemplateName("");

		vo.setStatus(docStatus);
		vo.setMos((MemberOfStaffShortVo) domain.getMosUser());
		if (voDocumentDetails.getCurrentDocument().getTemplateIsNotNull())
			vo.setTemplateName(voDocumentDetails.getCurrentDocument().getTemplate().getNameIsNotNull() ? voDocumentDetails.getCurrentDocument().getTemplate().getName() : "");
		voColl.add(vo);
		return voColl;
	}

	private void updateControlStateUI()
	{
		if (null == form.getLocalContext().getcorrespondenceDetails())
			updateControlStateForError();
		else
			updateControlStateForStatus();

	}

	/**
	 * 
	 */
	private void updateControlStateForStatus()
	{
		if (null == form.getLocalContext().getcorrespondenceDetails().getCurrentStatus())
		{
			throw new CodingRuntimeException("No Status found for current document.");
		}

		// allow change status only if a documentdetail is saved
		form.imbDocStatHist().setEnabled(form.getLocalContext().getcorrespondenceDetails().getID_CorrespondenceDetailsIsNotNull());

		DocumentStatus lkpStatus = form.getLocalContext().getcorrespondenceDetails().getCurrentStatus();

		if (lkpStatus.equals(DocumentStatus.SUPLEMENTRY))
			lkpStatus = DocumentStatus.LETTERREQUIRED;

		form.btnEMail().setEnabled(lkpStatus.equals(DocumentStatus.SIGNED));
		form.btnPreviewLetter().setEnabled(lkpStatus.equals(DocumentStatus.GENNOTPRINTED) || lkpStatus.equals(DocumentStatus.SIGNED) || lkpStatus.equals(DocumentStatus.PRINTEDNOSIGNATURE));

		if (isTemplateSelected())
		{
			form.btnUpdate().setEnabled(form.getMode().equals(FormMode.VIEW));
			form.imbDocStatHist().setEnabled(form.getMode().equals(FormMode.VIEW));
			form.btnPreviewLetter().setEnabled(form.getMode().equals(FormMode.VIEW));
		}

		if (form.getMode().equals(FormMode.EDIT))
		{
			boolean bLetterRequired = (!lkpStatus.equals(DocumentStatus.SIGNED) || (!lkpStatus.equals(DocumentStatus.PRINTEDNOSIGNATURE)));
			form.ctnRecipient().grdAdressee().setEnabled(bLetterRequired);
			form.chkSpecialInterest().setEnabled(bLetterRequired);
			form.cmbType().setEnabled(form.chkSpecialInterest().getValue() && bLetterRequired);

			form.ctnHeader().grdCategories().setEnabled(lkpStatus.equals(DocumentStatus.GENNOTPRINTED) || bLetterRequired);

			// to be signed by
			form.qmbSignedBy().setEnabled(true);
			form.btnSign().setEnabled(false);

			form.btnSaveLetter().setEnabled((lkpStatus.equals(DocumentStatus.GENNOTPRINTED) || bLetterRequired) && (!lkpStatus.equals(DocumentStatus.SIGNED)));

			form.btnSupplementary().setEnabled(lkpStatus.equals(DocumentStatus.SIGNED));
			// form.btnPrintLetter().setEnabled(lkpStatus.equals(DocumentStatus.GENNOTPRINTED) ||
			// lkpStatus.equals(DocumentStatus.SIGNED) ||
			// lkpStatus.equals(DocumentStatus.LETTERREQUIRED));
			form.btnPrintLetter().setEnabled(false);

			boolean boolCanResetTemplate = form.getLocalContext().getcorrespondenceDetails() != null && bLetterRequired;
			form.imbResetTemplate().setEnabled(boolCanResetTemplate);
			form.lblResetTemplate().setEnabled(boolCanResetTemplate);
		}
		else
		{
			form.btnSign().setEnabled(lkpStatus.equals(DocumentStatus.PRINTEDNOSIGNATURE));
			form.btnPrintLetter().setEnabled(!lkpStatus.equals(DocumentStatus.SIGNED) && lkpStatus.equals(DocumentStatus.GENNOTPRINTED));
			form.ctnHeader().grdCategories().setUnselectable(true);
			form.ctnRecipient().grdAdressee().setUnselectable(true);
		}

		updateContextMenusState();
	}

	private void previewLetter()
	{
		// get saved document from local context
		CorrespondenceDetailsVo voCorrespondenceDetails = form.getLocalContext().getcorrespondenceDetails();

		byte[] resultPdf;
		resultPdf = null;
		try
		{
			resultPdf = buildDocumentPDF(voCorrespondenceDetails);
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage("Report Generation Failed for the following reason(s): " + e.getMessage());
			return;
		}

		if (null != resultPdf)
			voCorrespondenceDetails.getCurrentDocument().setContent(new String(resultPdf));

		if (!saveDocumentDetails(voCorrespondenceDetails))
			return;

		engine.open(form.getForms().Correspondence.ProcessReport);
	}

	private void updateControlStateForError()
	{
		form.ctnRecipient().grdAdressee().setValue(null);
		form.ctnHeader().grdCategories().setValue(null);
		form.chkSpecialInterest().setValue(false);
		form.cmbType().setValue(null);
		form.ctnPatientDetails().txtRefDoctorName().setValue(null);
		form.qmbSignedBy().setValue(null);
		form.ctnPatientDetails().txtAddress1().setValue(null);
		form.ctnPatientDetails().txtAddress2().setValue(null);
		form.ctnPatientDetails().txtAddress3().setValue(null);
		form.ctnPatientDetails().txtAddress4().setValue(null);
		form.ctnPatientDetails().txtAddress5().setValue(null);

		form.ctnPatientDetails().txtClinicDate().setValue(null);
		form.ctnPatientDetails().txtClinicTime().setValue(null);
		form.ctnPatientDetails().txtContactNo().setValue(null);
		form.ctnPatientDetails().txtDOB().setValue(null);
		form.ctnPatientDetails().txtForename().setValue(null);
		form.ctnPatientDetails().txtMedicalCardNo().setValue(null);
		form.ctnPatientDetails().txtMedicalRecNo().setValue(null);
		form.ctnPatientDetails().txtPatientId().setValue(null);
		form.ctnPatientDetails().txtPPSN().setValue(null);
		form.ctnPatientDetails().txtRefDocAddress1().setValue(null);
		form.ctnPatientDetails().txtRefDocAddress2().setValue(null);
		form.ctnPatientDetails().txtRefDocAddress3().setValue(null);
		form.ctnPatientDetails().txtRefDocAddress4().setValue(null);
		form.ctnPatientDetails().txtRefDocAddress5().setValue(null);
		form.ctnPatientDetails().txtSurname().setValue(null);
		form.ctnPatientDetails().txtTitle().setValue(null);

		hideButtons();
	}

	private void hideButtons()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.btnEMail().setEnabled(false);
			form.btnPreviewLetter().setEnabled(false);
			form.btnPrintLetter().setEnabled(false);
			form.btnSupplementary().setEnabled(false);
			form.btnUpdate().setEnabled(false);
			form.imbResetTemplate().setEnabled(false);
			form.lblResetTemplate().setEnabled(false);
			form.imbDocStatHist().setEnabled(false);
		}
	}

	private void clearContextvariables()
	{
		form.getLocalContext().setcorrespondenceDetails(null);
		form.getLocalContext().setLastDocGenerated(null);
		form.getLocalContext().setlastDocumentStatus(null);
	}

	protected void onImbDocStatHistClick() throws PresentationLogicException
	{
		form.getGlobalContext().Correspondence.setcurrentCspStatusHistory(form.getLocalContext().getcorrespondenceDetails().getCspStatusHistory());
		engine.open(form.getForms().Correspondence.DocumentStatusDlg);
	}

	private void printCorrespondence()
	{
		if (form.lblStatusText().getValue() == null)
			return;

		if (form.getMode().equals(FormMode.VIEW))
		{

			if (!form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.SIGNED))
				if (prepairPrintCorrespondenceDoc() != null)
					showPrintDialog();
			return;
		}

		// this code for if we are printing from Edit mode.
		if (form.ctnRecipient().grdAdressee().getRows().size() <= 0)
		{
			engine.showMessage("Please select an addressee before generating.");
			return;
		}

		/*
		 * if (form.lblStatusText().getValue().equals(DocumentStatus.SIGNED) == false) { boolean l_printed = true; if (!form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.SIGNED)) l_printed = prepairPrintCorrespondenceDoc(DocumentStatus.PRINTEDNOSIGNATURE);
		 * 
		 * if (!l_printed) return; }
		 */

		if (form.getLocalContext().getLastDocGeneratedIsNotNull())
			showPrintDialog();
	}

	private void supplementaryCorrespondence()
	{
		// Use existing information to create a suplementry letter

		// Clear signed status and signature
		form.lblStatusText().setValue("");
		form.qmbSignedBy().setValue(null);
		form.qmbSignedBy().setEditedText("");
		form.qmbSignedBy().setTooltip("");

		CorrespondenceDetailsVo voDocumentDetails = form.getLocalContext().getcorrespondenceDetails();
		if (null == voDocumentDetails)
		{
			updateControlStateForError();
			return;
		}

		voDocumentDetails.setCurrentStatus(DocumentStatus.SUPLEMENTRY);

		if (!saveDocumentDetails(voDocumentDetails))
		{
			updateControlStateForError();
			return;
		}

		// set for return of dialog selection
		form.getLocalContext().setsupplementaryLetterClicked(new Boolean(true));
		engine.open(form.getForms().Correspondence.TemplateSelect);
		return;
	}

	private void eMailCorrespondence()
	{
		if (null == form.getLocalContext().getcorrespondenceDetails() || null == form.getLocalContext().getcorrespondenceDetails().getCurrentDocument() || null == form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getContent() || null == form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getContent().getBytes())
		{
			engine.showMessage("Error retrieving document content.");
			return;
		}

		// get email account information for logged in user
		UserEmailAccountVo emailAuthor = domain.getEmailAppUser(engine.getLoggedInUser().getUserId());
		if (emailAuthor == null || emailAuthor.getEmailAddress() == null || emailAuthor.getEmailAddress().length() == 0)
		{
			engine.showMessage("Logged in users email address is not configured. Please add Email communication channel to your account.");
			return;
		}

		StringBuffer sRecipientsNoEmail = new StringBuffer();

		if (form.getLocalContext().getcorrespondenceDetailsIsNotNull() && form.getLocalContext().getcorrespondenceDetails().getRecipientsIsNotNull())
		{
			DocumentVo voDoc = new DocumentVo();
			voDoc.setID_Document(form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getID_Document());
			voDoc = domain.getDocument(voDoc);
			if (null == voDoc)
				return;

			AttachmentHelper correspondenceDocument = new AttachmentHelper(voDoc, engine.getSessionId(), "DischargeLetter_" + String.valueOf(voDoc.getID_Document()) + ".pdf");

			StringBuffer emailAddresses = new StringBuffer();

			try
			{
				String noEmailAddresses = form.getLocalContext().getcorrespondenceDetails().getRecipients().getIRecipientsWithNoEmail();
				if (noEmailAddresses != null)
				{
					engine.showMessage("The following recipients do not have email addresses\n\n" + sRecipientsNoEmail);
					// TODO give an option to continue?
					return;
				}

				EmailHelper emailCorresp = new EmailHelper(emailAuthor, emailAuthor);
				if (form.getLocalContext().getcorrespondenceDetails().getRecipients() != null && form.getLocalContext().getcorrespondenceDetails().getRecipients().getIRecipientlistItems().length > 0)
				{
					emailCorresp.addRecipients(form.getLocalContext().getcorrespondenceDetails().getRecipients());
					emailCorresp.setAttach(correspondenceDocument);
					emailCorresp.setSubject("Correspondence Reference : " + form.getLocalContext().getcorrespondenceDetails().getID_CorrespondenceDetails().toString());
					emailCorresp.sendEmail();
				}

				engine.showMessage("The discharge letter has been emailed to\n\n" + emailAddresses);
			}
			catch (MessagingException me)
			{
				engine.showMessage(me.getMessage());
			}
			catch (SecurityException se)
			{
				engine.showMessage(se.getMessage());
			}
		}
	}

	private void templateSelectOK()
	{
		// Get the selected template
		ReportTemplateVo voReportTemplate = new ReportTemplateVo();
		if (form.getGlobalContext().Correspondence.getReportTemplateIsNotNull())
			voReportTemplate = form.getGlobalContext().Correspondence.getReportTemplate();
		else
		{
			engine.showMessage("Template not selected, cannot continue with discharge letter creation.");
			form.setMode(FormMode.VIEW);
			updateControlStateForError();
			return;
		}

		if (form.getLocalContext().getcorrespondenceDetailsIsNotNull())
		{
			// attach the template used for this document.
			CorrespondenceDetailsVo voCorrespondenceDetails = form.getLocalContext().getcorrespondenceDetails();
			voCorrespondenceDetails.getCurrentDocument().setTemplate(voReportTemplate);
			form.getLocalContext().setcorrespondenceDetails(voCorrespondenceDetails);

			setContextVariables(voCorrespondenceDetails);
			populateScreenFromData(voCorrespondenceDetails);
			form.setMode(FormMode.EDIT);
		}
	}

	private boolean isTemplateSelected()
	{
		return (form.getGlobalContext().Correspondence.getReportTemplateIsNotNull());
	}

	// private void populateDoctorDetailControls(PersonAddress voPerAddress)
	// {
	// if (voPerAddress == null) return;
	//		
	// if (voPerAddress.getLine1IsNotNull())
	// form.ctnPatientDetails().txtRefDocAddress1().setValue(voPerAddress.getLine1());
	// if (voPerAddress.getLine2IsNotNull())
	// form.ctnPatientDetails().txtRefDocAddress2().setValue(voPerAddress.getLine2());
	// if (voPerAddress.getLine3IsNotNull())
	// form.ctnPatientDetails().txtRefDocAddress3().setValue(voPerAddress.getLine3());
	// if (voPerAddress.getLine4IsNotNull())
	// form.ctnPatientDetails().txtRefDocAddress4().setValue(voPerAddress.getLine4());
	// if (voPerAddress.getLine5IsNotNull())
	// form.ctnPatientDetails().txtRefDocAddress5().setValue(voPerAddress.getLine5());
	// }

	/*
	 * private RecipientVoCollection newRecipientCollectionFromGP(GpShortVo voGP) { if (voGP == null) return null;
	 * 
	 * RecipientVoCollection voCollRecipients = new RecipientVoCollection(); RecipientVo voRecipient = new RecipientVo(); voRecipient.setGp(voGP); voCollRecipients.add(voRecipient);
	 * 
	 * return voCollRecipients; }
	 */

	protected void onImbResetTemplateClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Correspondence.TemplateSelect);
	}

	protected void onLnkReturnClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Correspondence.PatientLists);
	}

	protected void onGrdAdresseeSelectionChanged() throws PresentationLogicException
	{
		updateContextMenusState();
	}

	protected void onBtnSignClick() throws PresentationLogicException
	{
		if (null == form.qmbSignedBy().getValue())
		{
			engine.showMessage("Please choose a 'signed by' entry");
			return;
		}
		CorrespondenceDetailsVo voDocumentDetails = form.getLocalContext().getcorrespondenceDetails();
		DocumentStatus lkpDocStatus = voDocumentDetails.getCurrentStatus();
		voDocumentDetails.setSignedBy(form.qmbSignedBy().getValue());

		// update current status
		voDocumentDetails.setCurrentStatus(DocumentStatus.SIGNED);

		// update Status History
		voDocumentDetails.setCspStatusHistory(updateHistoryStatus(voDocumentDetails, DocumentStatus.SIGNED));

		if (!saveDocumentDetails(voDocumentDetails))
		{
			form.qmbSignedBy().setValue(null);
			// roll back signed data
			voDocumentDetails.setSignedBy(null);
			// roll back current status
			voDocumentDetails.setCurrentStatus(lkpDocStatus);
			// remove the document status history record
			CorrespondenceStatusHistoryVoCollection voColl = voDocumentDetails.getCspStatusHistory();
			if (voColl.size() > 0)
				voColl.remove(voColl.size());
		}
		else
			form.setMode(FormMode.VIEW);
	}
}
