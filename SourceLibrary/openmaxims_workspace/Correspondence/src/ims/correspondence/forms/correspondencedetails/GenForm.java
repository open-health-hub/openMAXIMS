//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.correspondence.forms.correspondencedetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnRecipientContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class grdAdresseeRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdAdresseeRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setAdresseeReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isAdresseeReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showAdresseeOpened()
			{
				super.row.showOpened(0);
			}
			public String getAdressee()
			{
				return (String)super.row.get(0);
			}
			public void setAdressee(String value)
			{
				super.row.set(0, value);
			}
			public void setCellAdresseeTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setGPReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isGPReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showGPOpened()
			{
				super.row.showOpened(1);
			}
			public ims.framework.utils.Image getGP()
			{
				return (ims.framework.utils.Image)super.row.get(1);
			}
			public void setGP(ims.framework.utils.Image value)
			{
				super.row.set(1, value);
			}
			public void setCellGPTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.correspondence.vo.RecipientVo getValue()
			{
				return (ims.correspondence.vo.RecipientVo)super.row.getValue();
			}
			public void setValue(ims.correspondence.vo.RecipientVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdAdresseeRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdAdresseeRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdAdresseeRow get(int index)
			{
				return new grdAdresseeRow(super.collection.get(index));
			}
			public grdAdresseeRow newRow()
			{
				return new grdAdresseeRow(super.collection.newRow());
			}
			public grdAdresseeRow newRow(boolean autoSelect)
			{
				return new grdAdresseeRow(super.collection.newRow(autoSelect));
			}
			public grdAdresseeRow newRowAt(int index)
			{
				return new grdAdresseeRow(super.collection.newRowAt(index));
			}
			public grdAdresseeRow newRowAt(int index, boolean autoSelect)
			{
				return new grdAdresseeRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdAdresseeGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
			{
				super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
			}
			public ims.correspondence.vo.RecipientVoCollection getValues()
			{
				ims.correspondence.vo.RecipientVoCollection listOfValues = new ims.correspondence.vo.RecipientVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.correspondence.vo.RecipientVo getValue()
			{
				return (ims.correspondence.vo.RecipientVo)super.grid.getValue();
			}
			public void setValue(ims.correspondence.vo.RecipientVo value)
			{
				super.grid.setValue(value);
			}
			public grdAdresseeRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdAdresseeRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdAdresseeRowCollection getRows()
			{
				return new grdAdresseeRowCollection(super.grid.getRows());
			}
			public grdAdresseeRow getRowByValue(ims.correspondence.vo.RecipientVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdAdresseeRow(row);
			}
			public void setAdresseeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getAdresseeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setGPHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getGPHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 80, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdAdresseeTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddressee, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdAdresseeTemp);
			grdAdresseeGrid grdAdressee = (grdAdresseeGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAdresseeGrid.class, m_grdAdresseeTemp);
			grdAdressee.addStringColumn("Addressee", 0, 0, 700, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdAdressee.addImageColumn("Type", 0, 0, -1, true, 2);
			super.addGrid(grdAdressee);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public grdAdresseeGrid grdAdressee()
		{
			return (grdAdresseeGrid)super.getGrid(0);
		}
	}
	public static class ctnHeaderContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class grdCategoriesRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdCategoriesRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setDateReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isDateReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showDateOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForDate(String value)
			{
				super.row.setTooltip(0, value);
			}
			public ims.framework.utils.Date getDate()
			{
				return (ims.framework.utils.Date)super.row.get(0);
			}
			public void setDate(ims.framework.utils.Date value)
			{
				super.row.set(0, value);
			}
			public void setCellDateTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setTimeReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isTimeReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showTimeOpened()
			{
				super.row.showOpened(1);
			}
			public void setTooltipForTime(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.framework.utils.Time getTime()
			{
				return (ims.framework.utils.Time)super.row.get(1);
			}
			public void setTime(ims.framework.utils.Time value)
			{
				super.row.set(1, value);
			}
			public void setCellTimeTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setRecUserReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isRecUserReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showRecUserOpened()
			{
				super.row.showOpened(2);
			}
			public void setTooltipForRecUser(String value)
			{
				super.row.setTooltip(2, value);
			}
			public String getRecUser()
			{
				return (String)super.row.get(2);
			}
			public void setRecUser(String value)
			{
				super.row.set(2, value);
			}
			public void setCellRecUserTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setCategoryReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isCategoryReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showCategoryOpened()
			{
				super.row.showOpened(3);
			}
			public void setTooltipForCategory(String value)
			{
				super.row.setTooltip(3, value);
			}
			public ims.correspondence.vo.lookups.Header getCategory()
			{
				return (ims.correspondence.vo.lookups.Header)super.row.get(3);
			}
			public void setCategory(ims.correspondence.vo.lookups.Header value)
			{
				super.row.set(3, value, true);
			}
			public void setCellCategoryTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public void setTemplateCategoryIdReadOnly(boolean value)
			{
				super.row.setReadOnly(4, value);
			}
			public boolean isTemplateCategoryIdReadOnly()
			{
				return super.row.isReadOnly(4);
			}
			public void showTemplateCategoryIdOpened()
			{
				super.row.showOpened(4);
			}
			public void setTooltipForTemplateCategoryId(String value)
			{
				super.row.setTooltip(4, value);
			}
			public Integer getTemplateCategoryId()
			{
				return (Integer)super.row.get(4);
			}
			public void setTemplateCategoryId(Integer value)
			{
				super.row.set(4, value);
			}
			public void setCellTemplateCategoryIdTooltip(String value)
			{
				super.row.setTooltip(4, value);
			}
			public void setCategoryTextReadOnly(boolean value)
			{
				super.row.setReadOnly(5, value);
			}
			public boolean isCategoryTextReadOnly()
			{
				return super.row.isReadOnly(5);
			}
			public void showCategoryTextOpened()
			{
				super.row.showOpened(5);
			}
			public void setTooltipForCategoryText(String value)
			{
				super.row.setTooltip(5, value);
			}
			public ims.framework.utils.Image getCategoryText()
			{
				return (ims.framework.utils.Image)super.row.get(5);
			}
			public void setCategoryText(ims.framework.utils.Image value)
			{
				super.row.set(5, value);
			}
			public void setCellCategoryTextTooltip(String value)
			{
				super.row.setTooltip(5, value);
			}
			public ims.correspondence.vo.CategoryNotesVo getValue()
			{
				return (ims.correspondence.vo.CategoryNotesVo)super.row.getValue();
			}
			public void setValue(ims.correspondence.vo.CategoryNotesVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdCategoriesRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdCategoriesRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdCategoriesRow get(int index)
			{
				return new grdCategoriesRow(super.collection.get(index));
			}
			public grdCategoriesRow newRow()
			{
				return new grdCategoriesRow(super.collection.newRow());
			}
			public grdCategoriesRow newRow(boolean autoSelect)
			{
				return new grdCategoriesRow(super.collection.newRow(autoSelect));
			}
			public grdCategoriesRow newRowAt(int index)
			{
				return new grdCategoriesRow(super.collection.newRowAt(index));
			}
			public grdCategoriesRow newRowAt(int index, boolean autoSelect)
			{
				return new grdCategoriesRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdCategoriesGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			private void addTimeColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addTimeColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, validationString, bold, sortOrder, canGrow);
			}
			public void setRecUserCaption(String value)
			{
				this.grid.setColumnCaption(2, value);
			}
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
			{
				super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
			}
			public ims.correspondence.vo.CategoryNotesVoCollection getValues()
			{
				ims.correspondence.vo.CategoryNotesVoCollection listOfValues = new ims.correspondence.vo.CategoryNotesVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.correspondence.vo.CategoryNotesVo getValue()
			{
				return (ims.correspondence.vo.CategoryNotesVo)super.grid.getValue();
			}
			public void setValue(ims.correspondence.vo.CategoryNotesVo value)
			{
				super.grid.setValue(value);
			}
			public grdCategoriesRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdCategoriesRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdCategoriesRowCollection getRows()
			{
				return new grdCategoriesRowCollection(super.grid.getRows());
			}
			public grdCategoriesRow getRowByValue(ims.correspondence.vo.CategoryNotesVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdCategoriesRow(row);
			}
			public void setDateHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getDateHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setTimeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getTimeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setRecUserHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getRecUserHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setCategoryHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getCategoryHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
			public GridComboBox CategoryComboBox()
			{
				return new GridComboBox(super.grid, 3);
			}
			public void setTemplateCategoryIdHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(4, value);
			}
			public String getTemplateCategoryIdHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(4);
			}
			public void setCategoryTextHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(5, value);
			}
			public String getCategoryTextHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(5);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 9, 808, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdCategoriesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategories, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdCategoriesTemp);
			grdCategoriesGrid grdCategories = (grdCategoriesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCategoriesGrid.class, m_grdCategoriesTemp);
			grdCategories.addDateColumn("Date", 0, 0, 80, true, true, null, false, 1, true);
			grdCategories.addTimeColumn("Time", 0, 0, 50, true, true, false, null, false, 1, true);
			grdCategories.addStringColumn("Recording User", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdCategories.addComboBoxColumn("Header", 0, 0, 100, true, true, false, false, true, -1);
			grdCategories.addIntColumn("TemplateCategoryId", 0, 0, 0, true, true, null, false, 0, true);
			grdCategories.addImageColumn("Note", 0, 0, -1, true, 2);
			super.addGrid(grdCategories);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public grdCategoriesGrid grdCategories()
		{
			return (grdCategoriesGrid)super.getGrid(0);
		}
	}
	public static class ctnPatientDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 576, 0, 240, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Referral Doctor and Address:", new Integer(2), ""}));
	
			// Label Controls
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 176, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "D.O.B.:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 152, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Contact No:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Medical Card No:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Medical Record No:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "PPSN:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Id:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 288, 8, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 288, 80, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 288, 32, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forename:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 288, 56, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 120, 152, 88, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 120, 128, 88, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 120, 104, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 120, 80, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 120, 56, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 120, 8, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 120, 32, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 120, 176, 88, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 360, 176, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 360, 152, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 360, 128, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 360, 104, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 360, 80, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 360, 56, 65, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 360, 32, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 360, 8, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 584, 24, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 584, 56, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 584, 80, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 584, 104, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 584, 152, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 584, 128, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public TextBox txtClinicTime()
		{
			return (TextBox)super.getControl(13);
		}
		public TextBox txtClinicDate()
		{
			return (TextBox)super.getControl(14);
		}
		public TextBox txtContactNo()
		{
			return (TextBox)super.getControl(15);
		}
		public TextBox txtMedicalCardNo()
		{
			return (TextBox)super.getControl(16);
		}
		public TextBox txtMedicalRecNo()
		{
			return (TextBox)super.getControl(17);
		}
		public TextBox txtPatientId()
		{
			return (TextBox)super.getControl(18);
		}
		public TextBox txtPPSN()
		{
			return (TextBox)super.getControl(19);
		}
		public TextBox txtDOB()
		{
			return (TextBox)super.getControl(20);
		}
		public TextBox txtAddress5()
		{
			return (TextBox)super.getControl(21);
		}
		public TextBox txtAddress4()
		{
			return (TextBox)super.getControl(22);
		}
		public TextBox txtAddress3()
		{
			return (TextBox)super.getControl(23);
		}
		public TextBox txtAddress2()
		{
			return (TextBox)super.getControl(24);
		}
		public TextBox txtAddress1()
		{
			return (TextBox)super.getControl(25);
		}
		public TextBox txtTitle()
		{
			return (TextBox)super.getControl(26);
		}
		public TextBox txtForename()
		{
			return (TextBox)super.getControl(27);
		}
		public TextBox txtSurname()
		{
			return (TextBox)super.getControl(28);
		}
		public TextBox txtRefDoctorName()
		{
			return (TextBox)super.getControl(29);
		}
		public TextBox txtRefDocAddress1()
		{
			return (TextBox)super.getControl(30);
		}
		public TextBox txtRefDocAddress2()
		{
			return (TextBox)super.getControl(31);
		}
		public TextBox txtRefDocAddress3()
		{
			return (TextBox)super.getControl(32);
		}
		public TextBox txtRefDocAddress5()
		{
			return (TextBox)super.getControl(33);
		}
		public TextBox txtRefDocAddress4()
		{
			return (TextBox)super.getControl(34);
		}
	}
	public static class cmbTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.correspondence.vo.lookups.SpecialInterestType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.correspondence.vo.lookups.SpecialInterestType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.correspondence.vo.lookups.SpecialInterestType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.correspondence.vo.lookups.SpecialInterestType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.correspondence.vo.lookups.SpecialInterestType value)
		{
			return super.control.removeRow(value);
		}
		public ims.correspondence.vo.lookups.SpecialInterestType getValue()
		{
			return (ims.correspondence.vo.lookups.SpecialInterestType)super.control.getValue();
		}
		public void setValue(ims.correspondence.vo.lookups.SpecialInterestType value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbSignedByComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.MedicLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.MedicLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.correspondence.vo.CorrespondenceDetailsRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.correspondence.vo.CorrespondenceDetailsRefVo' of the global context variable 'Correspondence.CorrespondenceDetails' is not supported.");
		if(!context.isValidContextType(ims.core.admin.pas.vo.PASEventRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.admin.pas.vo.PASEventRefVo' of the global context variable 'Core.PasEvent' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.PasEvent", "_cvp_Core.PasEvent").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PasEvent' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddressee = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeADD_PATIENT_GPItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Patients GP", true, false, new Integer(103128), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddressee.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeADD_PATIENT_GPItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeADD_REFERRER_GPItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Referrering GP", true, false, new Integer(103125), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddressee.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeADD_REFERRER_GPItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeADD_PATIENTItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Patient", true, false, new Integer(103123), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddressee.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeADD_PATIENTItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeAddGpItem = factory.createMenuItem(startControlID.intValue() + 4, "Add GP", true, false, new Integer(103122), false, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddressee.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeAddGpItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeAddNonGpItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Support Professional", true, false, new Integer(103124), false, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddressee.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeAddNonGpItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeRemoveRecipientItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove Recipient", true, false, new Integer(102148), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddressee.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeRemoveRecipientItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeMoveUpItem = factory.createMenuItem(startControlID.intValue() + 7, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddressee.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeMoveUpItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeMoveDownItem = factory.createMenuItem(startControlID.intValue() + 8, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddressee.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddresseeMoveDownItem);
		form.registerMenu(contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddressee);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategories = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesAddTextItem = factory.createMenuItem(startControlID.intValue() + 9, "Add / Update Header Text", true, false, new Integer(102179), false, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategories.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesAddTextItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesRemoveTextItem = factory.createMenuItem(startControlID.intValue() + 10, "Remove Header Text", true, false, new Integer(102148), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategories.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesRemoveTextItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesViewTextItem = factory.createMenuItem(startControlID.intValue() + 11, "View Header Text", true, false, new Integer(102202), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategories.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesViewTextItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesUpdateTextItem = factory.createMenuItem(startControlID.intValue() + 12, "Amend Header Text", true, false, null, true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategories.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesUpdateTextItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesMoveUpItem = factory.createMenuItem(startControlID.intValue() + 13, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategories.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesMoveUpItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesMoveDownItem = factory.createMenuItem(startControlID.intValue() + 14, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategories.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategoriesMoveDownItem);
		form.registerMenu(contextMenus.Correspondence.contextMenuCorrespondenceDetailsCategories);


		// Panel Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 544, 832, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Correspondence Details", new Integer(1), ""}));

		// Container Clasess
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 272, 832, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Container m_ctnRecipient = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Recipients", new Boolean(true)});
		addControl(m_ctnRecipient);
		ctnRecipientContainer ctnRecipient = (ctnRecipientContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnRecipientContainer.class, m_ctnRecipient, factory);
		ims.framework.utils.SizeInfo m_ctnRecipientDesignSize = new ims.framework.utils.SizeInfo(832, 112);
		ims.framework.utils.SizeInfo m_ctnRecipientRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper40.getWidth(), anchoringHelper40.getHeight());
		ctnRecipient.setContext(form, appForm, m_ctnRecipient, loader, this.getImages(), contextMenus, startControlID, m_ctnRecipientDesignSize, m_ctnRecipientRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnRecipient);
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 386, 832, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Container m_ctnHeader = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Header and Notes", new Boolean(true)});
		addControl(m_ctnHeader);
		ctnHeaderContainer ctnHeader = (ctnHeaderContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnHeaderContainer.class, m_ctnHeader, factory);
		ims.framework.utils.SizeInfo m_ctnHeaderDesignSize = new ims.framework.utils.SizeInfo(832, 144);
		ims.framework.utils.SizeInfo m_ctnHeaderRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper41.getWidth(), anchoringHelper41.getHeight());
		ctnHeader.setContext(form, appForm, m_ctnHeader, loader, this.getImages(), contextMenus, startControlID, m_ctnHeaderDesignSize, m_ctnHeaderRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnHeader);
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 832, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Container m_ctnPatientDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Patient Details", new Boolean(true)});
		addControl(m_ctnPatientDetails);
		ctnPatientDetailsContainer ctnPatientDetails = (ctnPatientDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnPatientDetailsContainer.class, m_ctnPatientDetails, factory);
		ims.framework.utils.SizeInfo m_ctnPatientDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 224);
		ims.framework.utils.SizeInfo m_ctnPatientDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper42.getWidth(), anchoringHelper42.getHeight());
		ctnPatientDetails.setContext(form, appForm, m_ctnPatientDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnPatientDetailsDesignSize, m_ctnPatientDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnPatientDetails);

		// Label Controls
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 701, 560, 108, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Change Template:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 352, 560, 16, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 320, 560, 45, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 128, 560, 39, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Type :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 448, 560, 82, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "To be Signed:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 136, 600, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Letter Signed", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 744, 600, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Update", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 232, 600, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "E-Mail Letter", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 328, 600, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Preview Letter", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 640, 600, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print Letter", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 432, 600, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Supplementary", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 536, 600, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save Letter", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 168, 560, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTypeTemp);
		cmbTypeComboBox cmbType = (cmbTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTypeComboBox.class, m_cmbTypeTemp);
		super.addComboBox(cmbType);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 528, 560, 168, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ComboBox m_qmbSignedByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbSignedByTemp);
		qmbSignedByComboBox qmbSignedBy = (qmbSignedByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbSignedByComboBox.class, m_qmbSignedByTemp);
		super.addComboBox(qmbSignedBy);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 16, 560, 96, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Special Interest", Boolean.TRUE, null}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 368, 560, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, this.getImages().Core.ZoomInEnabled16, this.getImages().Core.ZoomInDisabled16, "View Correspondence Status History", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 808, 560, 24, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, this.getImages().Core.Separator, this.getImages().Core.Separator, "Reset the template for this correspondence", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 400, 560, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, this.getImages().Core.ZoomInEnabled16, this.getImages().Core.ZoomInDisabled16, "View Correspondence Status History", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));

		// Link Controls
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 688, 16, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return To Patient List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlTitle()
	{
		return (Panel)super.getControl(1);
	}
	public ctnRecipientContainer ctnRecipient()
	{
		return (ctnRecipientContainer)super.getContainer(0);
	}
	public ctnHeaderContainer ctnHeader()
	{
		return (ctnHeaderContainer)super.getContainer(1);
	}
	public ctnPatientDetailsContainer ctnPatientDetails()
	{
		return (ctnPatientDetailsContainer)super.getContainer(2);
	}
	public Label lblResetTemplate()
	{
		return (Label)super.getControl(5);
	}
	public Label lblStatusText()
	{
		return (Label)super.getControl(6);
	}
	public Button btnSign()
	{
		return (Button)super.getControl(10);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(11);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(12);
	}
	public Button btnEMail()
	{
		return (Button)super.getControl(13);
	}
	public Button btnPreviewLetter()
	{
		return (Button)super.getControl(14);
	}
	public Button btnPrintLetter()
	{
		return (Button)super.getControl(15);
	}
	public Button btnSupplementary()
	{
		return (Button)super.getControl(16);
	}
	public Button btnSaveLetter()
	{
		return (Button)super.getControl(17);
	}
	public cmbTypeComboBox cmbType()
	{
		return (cmbTypeComboBox)super.getComboBox(0);
	}
	public qmbSignedByComboBox qmbSignedBy()
	{
		return (qmbSignedByComboBox)super.getComboBox(1);
	}
	public CheckBox chkSpecialInterest()
	{
		return (CheckBox)super.getControl(20);
	}
	public ImageButton imbCurrentStatus()
	{
		return (ImageButton)super.getControl(21);
	}
	public ImageButton imbResetTemplate()
	{
		return (ImageButton)super.getControl(22);
	}
	public ImageButton imbDocStatHist()
	{
		return (ImageButton)super.getControl(23);
	}
	public Link lnkReturn()
	{
		return (Link)super.getControl(24);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Correspondence = new CorrespondenceForms();
			Core = new CoreForms();
		}
		public final class CorrespondenceForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CorrespondenceForms()
			{
				GPDetails = new LocalFormName(111112);
				HeaderComment = new LocalFormName(111110);
				TemplateSelect = new LocalFormName(111117);
				ProcessReport = new LocalFormName(111119);
				NonGPSelect = new LocalFormName(111118);
				PrintDishargeLetter = new LocalFormName(111120);
				DocumentStatusDlg = new LocalFormName(111122);
				PatientLists = new LocalFormName(111106);
				AttendancesContacts = new LocalFormName(111107);
			}
			public final FormName GPDetails;
			public final FormName HeaderComment;
			public final FormName TemplateSelect;
			public final FormName ProcessReport;
			public final FormName NonGPSelect;
			public final FormName PrintDishargeLetter;
			public final FormName DocumentStatusDlg;
			public final FormName PatientLists;
			public final FormName AttendancesContacts;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				PrinterSelection = new LocalFormName(102123);
			}
			public final FormName PrinterSelection;
		}

		public CorrespondenceForms Correspondence;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Memo = new ImageHelper(102136, "Images/Core/memo.GIF", new Integer(17), new Integer(17));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
				ZoomInEnabled16 = new ImageHelper(102158, "Images/Core/zoom.png", new Integer(16), new Integer(16));
				ZoomInDisabled16 = new ImageHelper(102159, "Images/Core/zoom_disabled.png", new Integer(16), new Integer(16));
				Separator = new ImageHelper(102242, "Images/Core/Separator.gif", new Integer(17), new Integer(17));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Memo;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image EditDisabled;
			public final ims.framework.utils.Image ZoomInEnabled16;
			public final ims.framework.utils.Image ZoomInDisabled16;
			public final ims.framework.utils.Image Separator;
			public final ims.framework.utils.Image Delete;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				StaffBlue = new ImageHelper(103122, "Images/Admin/user_blue.png", new Integer(16), new Integer(16));
				StaffYellow = new ImageHelper(103124, "Images/Admin/user_yellow.png", new Integer(16), new Integer(16));
				StaffGreen = new ImageHelper(103123, "Images/Admin/user_green.png", new Integer(16), new Integer(16));
				StaffBlack = new ImageHelper(103128, "Images/Admin/user_black.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image StaffBlue;
			public final ims.framework.utils.Image StaffYellow;
			public final ims.framework.utils.Image StaffGreen;
			public final ims.framework.utils.Image StaffBlack;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_correspondenceDetails = new ims.framework.ContextVariable("correspondenceDetails", prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__correspondenceDetails_" + componentIdentifier + "");
			cxl_LastDocGenerated = new ims.framework.ContextVariable("LastDocGenerated", prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__LastDocGenerated_" + componentIdentifier + "");
			cxl_lastDocumentStatus = new ims.framework.ContextVariable("lastDocumentStatus", prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__lastDocumentStatus_" + componentIdentifier + "");
			cxl_suplementryLetterVisible = new ims.framework.ContextVariable("suplementryLetterVisible", prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__suplementryLetterVisible_" + componentIdentifier + "");
			cxl_LetterAsPdf = new ims.framework.ContextVariable("LetterAsPdf", prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__LetterAsPdf_" + componentIdentifier + "");
			cxl_supplementaryLetterClicked = new ims.framework.ContextVariable("supplementaryLetterClicked", prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__supplementaryLetterClicked_" + componentIdentifier + "");
			cxl_loggedInMos = new ims.framework.ContextVariable("loggedInMos", prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__loggedInMos_" + componentIdentifier + "");
			cxl_PatientGP = new ims.framework.ContextVariable("PatientGP", prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__PatientGP_" + componentIdentifier + "");
			cxl_ReferrerGP = new ims.framework.ContextVariable("ReferrerGP", prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerGP_" + componentIdentifier + "");
			cxl_ReferrerPractice = new ims.framework.ContextVariable("ReferrerPractice", prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerPractice_" + componentIdentifier + "");
			cxl_pasEventVo = new ims.framework.ContextVariable("pasEventVo", prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier + "");
		}
		
		public boolean getcorrespondenceDetailsIsNotNull()
		{
			return !cxl_correspondenceDetails.getValueIsNull(context);
		}
		public ims.correspondence.vo.CorrespondenceDetailsVo getcorrespondenceDetails()
		{
			return (ims.correspondence.vo.CorrespondenceDetailsVo)cxl_correspondenceDetails.getValue(context);
		}
		public void setcorrespondenceDetails(ims.correspondence.vo.CorrespondenceDetailsVo value)
		{
			cxl_correspondenceDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_correspondenceDetails = null;
		public boolean getLastDocGeneratedIsNotNull()
		{
			return !cxl_LastDocGenerated.getValueIsNull(context);
		}
		public ims.core.vo.DocumentVo getLastDocGenerated()
		{
			return (ims.core.vo.DocumentVo)cxl_LastDocGenerated.getValue(context);
		}
		public void setLastDocGenerated(ims.core.vo.DocumentVo value)
		{
			cxl_LastDocGenerated.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastDocGenerated = null;
		public boolean getlastDocumentStatusIsNotNull()
		{
			return !cxl_lastDocumentStatus.getValueIsNull(context);
		}
		public ims.core.vo.lookups.DocumentStatus getlastDocumentStatus()
		{
			return (ims.core.vo.lookups.DocumentStatus)cxl_lastDocumentStatus.getValue(context);
		}
		public void setlastDocumentStatus(ims.core.vo.lookups.DocumentStatus value)
		{
			cxl_lastDocumentStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_lastDocumentStatus = null;
		public boolean getsuplementryLetterVisibleIsNotNull()
		{
			return !cxl_suplementryLetterVisible.getValueIsNull(context);
		}
		public Boolean getsuplementryLetterVisible()
		{
			return (Boolean)cxl_suplementryLetterVisible.getValue(context);
		}
		public void setsuplementryLetterVisible(Boolean value)
		{
			cxl_suplementryLetterVisible.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_suplementryLetterVisible = null;
		public boolean getLetterAsPdfIsNotNull()
		{
			return !cxl_LetterAsPdf.getValueIsNull(context);
		}
		public byte[] getLetterAsPdf()
		{
			return (byte[])cxl_LetterAsPdf.getValue(context);
		}
		public void setLetterAsPdf(byte[] value)
		{
			cxl_LetterAsPdf.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LetterAsPdf = null;
		public boolean getsupplementaryLetterClickedIsNotNull()
		{
			return !cxl_supplementaryLetterClicked.getValueIsNull(context);
		}
		public Boolean getsupplementaryLetterClicked()
		{
			return (Boolean)cxl_supplementaryLetterClicked.getValue(context);
		}
		public void setsupplementaryLetterClicked(Boolean value)
		{
			cxl_supplementaryLetterClicked.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_supplementaryLetterClicked = null;
		public boolean getloggedInMosIsNotNull()
		{
			return !cxl_loggedInMos.getValueIsNull(context);
		}
		public ims.core.vo.MemberOfStaffShortVo getloggedInMos()
		{
			return (ims.core.vo.MemberOfStaffShortVo)cxl_loggedInMos.getValue(context);
		}
		public void setloggedInMos(ims.core.vo.MemberOfStaffShortVo value)
		{
			cxl_loggedInMos.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_loggedInMos = null;
		public boolean getPatientGPIsNotNull()
		{
			return !cxl_PatientGP.getValueIsNull(context);
		}
		public ims.core.vo.GpShortVo getPatientGP()
		{
			return (ims.core.vo.GpShortVo)cxl_PatientGP.getValue(context);
		}
		public void setPatientGP(ims.core.vo.GpShortVo value)
		{
			cxl_PatientGP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientGP = null;
		public boolean getReferrerGPIsNotNull()
		{
			return !cxl_ReferrerGP.getValueIsNull(context);
		}
		public ims.core.vo.GpLiteVo getReferrerGP()
		{
			return (ims.core.vo.GpLiteVo)cxl_ReferrerGP.getValue(context);
		}
		public void setReferrerGP(ims.core.vo.GpLiteVo value)
		{
			cxl_ReferrerGP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferrerGP = null;
		public boolean getReferrerPracticeIsNotNull()
		{
			return !cxl_ReferrerPractice.getValueIsNull(context);
		}
		public ims.core.vo.LocSiteShortVo getReferrerPractice()
		{
			return (ims.core.vo.LocSiteShortVo)cxl_ReferrerPractice.getValue(context);
		}
		public void setReferrerPractice(ims.core.vo.LocSiteShortVo value)
		{
			cxl_ReferrerPractice.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferrerPractice = null;
		public boolean getpasEventVoIsNotNull()
		{
			return !cxl_pasEventVo.getValueIsNull(context);
		}
		public ims.core.vo.PasEventVo getpasEventVo()
		{
			return (ims.core.vo.PasEventVo)cxl_pasEventVo.getValue(context);
		}
		public void setpasEventVo(ims.core.vo.PasEventVo value)
		{
			cxl_pasEventVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_pasEventVo = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CorrespondenceNamespace Correspondence = new CorrespondenceNamespace();
		public final class CorrespondenceNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class CorrespondenceDetailsAddressee implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_PATIENT_GP = 1;
				public static final int ADD_REFERRER_GP = 2;
				public static final int ADD_PATIENT = 3;
				public static final int AddGp = 4;
				public static final int AddNonGp = 5;
				public static final int RemoveRecipient = 6;
				public static final int MoveUp = 7;
				public static final int MoveDown = 8;
			}
			public void disableAllCorrespondenceDetailsAddresseeMenuItems()
			{
				this.contextMenuCorrespondenceDetailsAddresseeADD_PATIENT_GPItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsAddresseeADD_REFERRER_GPItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsAddresseeADD_PATIENTItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsAddresseeAddGpItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsAddresseeAddNonGpItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsAddresseeRemoveRecipientItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsAddresseeMoveUpItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsAddresseeMoveDownItem.setEnabled(false);
			}
			public void hideAllCorrespondenceDetailsAddresseeMenuItems()
			{
				this.contextMenuCorrespondenceDetailsAddresseeADD_PATIENT_GPItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsAddresseeADD_REFERRER_GPItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsAddresseeADD_PATIENTItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsAddresseeAddGpItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsAddresseeAddNonGpItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsAddresseeRemoveRecipientItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsAddresseeMoveUpItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsAddresseeMoveDownItem.setVisible(false);
			}
			private Menu contextMenuCorrespondenceDetailsAddressee;
			public MenuItem getCorrespondenceDetailsAddresseeADD_PATIENT_GPItem()
			{
				return this.contextMenuCorrespondenceDetailsAddresseeADD_PATIENT_GPItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsAddresseeADD_PATIENT_GPItem;
			public MenuItem getCorrespondenceDetailsAddresseeADD_REFERRER_GPItem()
			{
				return this.contextMenuCorrespondenceDetailsAddresseeADD_REFERRER_GPItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsAddresseeADD_REFERRER_GPItem;
			public ReadOnlyMenuItem getCorrespondenceDetailsAddresseeADD_PATIENTItem()
			{
				return this.contextMenuCorrespondenceDetailsAddresseeADD_PATIENTItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsAddresseeADD_PATIENTItem;
			public MenuItem getCorrespondenceDetailsAddresseeAddGpItem()
			{
				return this.contextMenuCorrespondenceDetailsAddresseeAddGpItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsAddresseeAddGpItem;
			public MenuItem getCorrespondenceDetailsAddresseeAddNonGpItem()
			{
				return this.contextMenuCorrespondenceDetailsAddresseeAddNonGpItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsAddresseeAddNonGpItem;
			public MenuItem getCorrespondenceDetailsAddresseeRemoveRecipientItem()
			{
				return this.contextMenuCorrespondenceDetailsAddresseeRemoveRecipientItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsAddresseeRemoveRecipientItem;
			public MenuItem getCorrespondenceDetailsAddresseeMoveUpItem()
			{
				return this.contextMenuCorrespondenceDetailsAddresseeMoveUpItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsAddresseeMoveUpItem;
			public MenuItem getCorrespondenceDetailsAddresseeMoveDownItem()
			{
				return this.contextMenuCorrespondenceDetailsAddresseeMoveDownItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsAddresseeMoveDownItem;
			public final class CorrespondenceDetailsCategories implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int AddText = 9;
				public static final int RemoveText = 10;
				public static final int ViewText = 11;
				public static final int UpdateText = 12;
				public static final int MoveUp = 13;
				public static final int MoveDown = 14;
			}
			public void disableAllCorrespondenceDetailsCategoriesMenuItems()
			{
				this.contextMenuCorrespondenceDetailsCategoriesAddTextItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsCategoriesRemoveTextItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsCategoriesViewTextItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsCategoriesUpdateTextItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsCategoriesMoveUpItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsCategoriesMoveDownItem.setEnabled(false);
			}
			public void hideAllCorrespondenceDetailsCategoriesMenuItems()
			{
				this.contextMenuCorrespondenceDetailsCategoriesAddTextItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsCategoriesRemoveTextItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsCategoriesViewTextItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsCategoriesUpdateTextItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsCategoriesMoveUpItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsCategoriesMoveDownItem.setVisible(false);
			}
			private Menu contextMenuCorrespondenceDetailsCategories;
			public MenuItem getCorrespondenceDetailsCategoriesAddTextItem()
			{
				return this.contextMenuCorrespondenceDetailsCategoriesAddTextItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsCategoriesAddTextItem;
			public MenuItem getCorrespondenceDetailsCategoriesRemoveTextItem()
			{
				return this.contextMenuCorrespondenceDetailsCategoriesRemoveTextItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsCategoriesRemoveTextItem;
			public MenuItem getCorrespondenceDetailsCategoriesViewTextItem()
			{
				return this.contextMenuCorrespondenceDetailsCategoriesViewTextItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsCategoriesViewTextItem;
			public MenuItem getCorrespondenceDetailsCategoriesUpdateTextItem()
			{
				return this.contextMenuCorrespondenceDetailsCategoriesUpdateTextItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsCategoriesUpdateTextItem;
			public MenuItem getCorrespondenceDetailsCategoriesMoveUpItem()
			{
				return this.contextMenuCorrespondenceDetailsCategoriesMoveUpItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsCategoriesMoveUpItem;
			public MenuItem getCorrespondenceDetailsCategoriesMoveDownItem()
			{
				return this.contextMenuCorrespondenceDetailsCategoriesMoveDownItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsCategoriesMoveDownItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[134];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-ID", "ID_Gp");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-STATUS", "Status");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Correspondence.DocCategory", "BO-1052100002-ID", "ID_CategoryNotes");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Correspondence.DocCategory", "BO-1052100002-CATEGORY", "Category");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Correspondence.DocCategory", "BO-1052100002-CATEGORYTEXT", "CategoryText");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Correspondence.ReportTemplate", "BO-1004100008-ID", "ID_TemplateBo");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Correspondence.ReportTemplate", "BO-1004100008-TEMPLATEXML", "TemplateXml");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Correspondence.ReportTemplate", "BO-1004100008-NAME", "Name");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Correspondence.ReportTemplate", "BO-1004100008-DESCRIPTION", "Description");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Correspondence.ReportTemplate", "BO-1004100008-ISACTIVE", "IsActive");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Correspondence.Mos", "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Correspondence.Mos", "BO-1006100006-INITIALS", "Initials");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Correspondence.Mos", "BO-1006100006-SIGNATUREBLOCK", "SignatureBlock");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Correspondence.Mos", "BO-1006100006-STAFFTYPE", "StaffType");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Correspondence.Mos", "BO-1006100006-ISACTIVE", "IsActive");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Correspondence.Mos", "BO-1006100006-SDSROLEID", "SdsRoleId");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Correspondence.Mos", "BO-1006100006-CANREFERPATIENT", "CanReferPatient");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Correspondence.ExternalPerson", "BO-1002100006-ID", "ID_ExternalPerson");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Correspondence.ExternalPerson", "BO-1002100006-ISACTIVE", "IsActive");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__correspondenceDetails_" + componentIdentifier, "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__correspondenceDetails_" + componentIdentifier, "BO-1052100001-PASEVENT", "PasEvent");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__correspondenceDetails_" + componentIdentifier, "BO-1052100001-CURRENTSTATUS", "CurrentStatus");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__correspondenceDetails_" + componentIdentifier, "BO-1052100001-SPECIALINTEREST", "SpecialInterest");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__correspondenceDetails_" + componentIdentifier, "BO-1052100001-DATEOFCLINIC", "DateOfClinic");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__correspondenceDetails_" + componentIdentifier, "BO-1052100001-ADMISSIONDATE", "AdmissionDate");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__correspondenceDetails_" + componentIdentifier, "BO-1052100001-DISCHARGEDATE", "DischargeDate");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__correspondenceDetails_" + componentIdentifier, "BO-1052100001-DICTATEDBYINITIALS", "DictatedByInitials");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__correspondenceDetails_" + componentIdentifier, "BO-1052100001-TYPEDBYINITIALS", "TypedByInitials");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__correspondenceDetails_" + componentIdentifier, "BO-1052100001-WASTYPEDWITHOUTCASENOTES", "WasTypedWithoutCaseNotes");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__LastDocGenerated_" + componentIdentifier, "BO-1001100009-ID", "ID_Document");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__LastDocGenerated_" + componentIdentifier, "BO-1001100009-CONTENT", "Content");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__LastDocGenerated_" + componentIdentifier, "BO-1001100009-STATUS", "Status");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__loggedInMos_" + componentIdentifier, "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__loggedInMos_" + componentIdentifier, "BO-1006100006-INITIALS", "Initials");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__loggedInMos_" + componentIdentifier, "BO-1006100006-SIGNATUREBLOCK", "SignatureBlock");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__loggedInMos_" + componentIdentifier, "BO-1006100006-STAFFTYPE", "StaffType");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__loggedInMos_" + componentIdentifier, "BO-1006100006-ISACTIVE", "IsActive");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__loggedInMos_" + componentIdentifier, "BO-1006100006-SDSROLEID", "SdsRoleId");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__loggedInMos_" + componentIdentifier, "BO-1006100006-CANREFERPATIENT", "CanReferPatient");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__PatientGP_" + componentIdentifier, "BO-1006100001-ID", "ID_Gp");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__PatientGP_" + componentIdentifier, "BO-1006100001-STATUS", "Status");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerGP_" + componentIdentifier, "BO-1006100001-ID", "ID_Gp");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerPractice_" + componentIdentifier, "BO-1007100007-ID", "ID_Location");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerPractice_" + componentIdentifier, "BO-1007100007-NAME", "Name");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerPractice_" + componentIdentifier, "BO-1007100007-ISACTIVE", "IsActive");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerPractice_" + componentIdentifier, "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerPractice_" + componentIdentifier, "BO-1007100007-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerPractice_" + componentIdentifier, "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerPractice_" + componentIdentifier, "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerPractice_" + componentIdentifier, "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerPractice_" + componentIdentifier, "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__ReferrerPractice_" + componentIdentifier, "BO-1007100002-ALLSECUREACCOMMODATION", "AllSecureAccommodation");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier, "BO-1014100003-ID", "ID_PASEvent");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier, "BO-1014100003-PASEPISODEID", "PasEpisodeId");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier, "BO-1014100003-EVENTDATETIME", "EventDateTime");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier, "BO-1014100003-PASEVENTID", "PasEventId");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier, "BO-1014100003-EVENTTYPE", "EventType");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier, "BO-1014100003-SPECIALTY", "Specialty");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier, "BO-1014100003-EPISODEFINANCIALCLASS", "EpisodeFinancialClass");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier, "BO-1014100003-SOURCEOFREFERRAL", "SourceOfReferral");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier, "BO-1014100003-ISVIP", "IsVip");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier, "BO-1014100003-CSPDOCUMENTSTATUS", "CspDocumentStatus");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.CorrespondenceDetails.__internal_x_context__pasEventVo_" + componentIdentifier, "BO-1014100003-PASSPECIALTY", "PASSpecialty");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
