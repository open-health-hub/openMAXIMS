//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.62 build 3023.13950)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.glossaryadminconfiguration;

import ims.correspondence.vo.GlossaryProfileVo;
import ims.correspondence.vo.GlossaryProfileVoCollection;
import ims.correspondence.vo.GlossaryVo;
import ims.correspondence.vo.GlossaryVoCollection;
import ims.correspondence.vo.lookups.GlossaryCategory;
import ims.correspondence.vo.lookups.LookupHelper;
import ims.correspondence.vo.lookups.ProfileType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellItem;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Image;
import ims.vo.interfaces.ICspTypeSpecifier;

public class Logic extends BaseLogic
{
	private static final int COL_IMAGE = 1;
	private static final int COL_HEADING =2;
	private static final int COL_TEXT =3;
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
		if (!populateGlossaryLookups())
			throw new FormOpenException("No Glossary Category lookups setup for this screen");
		
		initializeGrid();
	}
	
	private boolean populateGlossaryLookups()
	{
		//Local Context to hold the Glossary Category Lookup Collection
		form.getLocalContext().setGlossaryCategoryColl(LookupHelper.getGlossaryCategory(domain.getLookupService()));
		
		if (form.getLocalContext().getGlossaryCategoryCollIsNotNull() && form.getLocalContext().getGlossaryCategoryColl().size()>0)
		{
			return true;
		}		
		return false;
	}
	
	private void initializeGrid() 
	{
		form.dyngrdGlossary().clear();
		form.dyngrdGlossary().getColumns().newColumn("", COL_IMAGE);
		form.dyngrdGlossary().getColumns().getByIdentifier(COL_IMAGE).setCanGrow(false);
		form.dyngrdGlossary().getColumns().getByIdentifier(COL_IMAGE).setWidth(75);
		form.dyngrdGlossary().getColumns().getByIdentifier(COL_IMAGE).setAlignment(Alignment.RIGHT);
		
		form.dyngrdGlossary().getColumns().newColumn("Heading", COL_HEADING);
		form.dyngrdGlossary().getColumns().getByIdentifier(COL_HEADING).setWidth(600);
		form.dyngrdGlossary().getColumns().getByIdentifier(COL_HEADING).setCanGrow(true);
		
		form.dyngrdGlossary().getColumns().newColumn("Text", COL_TEXT);
		form.dyngrdGlossary().getColumns().getByIdentifier(COL_TEXT).setWidth(100);
		form.dyngrdGlossary().getColumns().getByIdentifier(COL_TEXT).setCanGrow(false);
		form.dyngrdGlossary().setReadOnly(true);
		
	}
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onDyngrdGlossaryRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		getSelectedInstance();
		updateControlsState();
	}
	
	private void getSelectedInstance() 
	{
		if(form.dyngrdGlossary().getValue() instanceof GlossaryVo)
		{
			form.getLocalContext().setLastRecord(form.dyngrdGlossary().getValue());
			populateScreenFromData((GlossaryVo) form.dyngrdGlossary().getValue());
		}
		else
		{
			form.getLocalContext().setLastRecord(null);
		}
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		populateGrid();
		form.setMode(FormMode.VIEW);
		form.getLocalContext().setGlossaryProfileForSave(new GlossaryProfileVoCollection());
		form.getLocalContext().setCanAddNewProfile(true);
		if(form.getLocalContext().getLastRecordIsNotNull())
		{
			form.dyngrdGlossary().setValue(form.getLocalContext().getLastRecord());
			form.dyngrdGlossary().resetScrollPosition();
		}
		updateControlsState();
	}
	
	private void populateGrid() 
	{
		form.dyngrdGlossary().getRows().clear();
		populateGlossary();
	}
	
	private void populateGlossary() 
	{
		GlossaryVoCollection collGlossary =  domain.listAllGlossaryItems();
		
		for(int i=0 ; i <form.getLocalContext().getGlossaryCategoryColl().size(); i++)
		{
			boolean foundGlossaryVo = false;
			DynamicGridRow row;
			if(collGlossary != null)
			{
				for(int j=0; j<collGlossary.size(); j++)
				{
					if(form.getLocalContext().getGlossaryCategoryColl().get(i).getId() == collGlossary.get(j).getGlossary().getId())
					{
						row = form.dyngrdGlossary().getRows().newRow();
						updateRowGlossary(row, collGlossary.get(j).getGlossary(), collGlossary.get(j));
						foundGlossaryVo = true;
					}
				}
			}
			if(foundGlossaryVo == false)
			{
				row = form.dyngrdGlossary().getRows().newRow();
				updateRowGlossary(row, form.getLocalContext().getGlossaryCategoryColl().get(i), new GlossaryVo());
			}
		}
	}
	
	private void updateRowGlossary(DynamicGridRow parentRow, GlossaryCategory glossaryCategory, GlossaryVo gCatVo) 
	{
		DynamicGridColumn column = null;
		DynamicGridCell cell = null;
		
		column = form.dyngrdGlossary().getColumns().getByIdentifier(COL_IMAGE);
		cell = parentRow.getCells().newCell(column, DynamicCellType.IMAGE);
		cell.setValue(form.getImages().Core.BookOpenEnabled);
		
		column = form.dyngrdGlossary().getColumns().getByIdentifier(COL_HEADING);
		cell = parentRow.getCells().newCell(column, DynamicCellType.STRING);
		cell.setReadOnly(true);
		if(gCatVo != null && gCatVo.getGlossary() != null)
		{
			cell.setValue(gCatVo.getGlossary().toString());
		}
		else
		{
			gCatVo.setGlossary(glossaryCategory);
			cell.setValue(glossaryCategory.toString());
		}
		column = form.dyngrdGlossary().getColumns().getByIdentifier(COL_TEXT);
		cell = parentRow.getCells().newCell(column, DynamicCellType.IMAGE);
		if(gCatVo != null && gCatVo.getGlossaryText() != null)
		{
			cell.setValue(form.getImages().Core.TextBox);
			cell.setTooltip(gCatVo.getGlossaryText());
		}
		cell.setReadOnly(true);
		parentRow.setValue(gCatVo);
		parentRow.setExpanded(true);
		parentRow.setBackColor(Color.Beige);
		if(gCatVo != null && gCatVo.getGlossaryTextIsNotNull())
		{
			populateProfileType(parentRow);
		}
	}
	
	private void populateProfileType(DynamicGridRow parentRow) 
	{
		parentRow.getRows().clear();
		
		DynamicGridRow childConsultantRow = parentRow.getRows().newRow();
		DynamicGridColumn column = null;
		DynamicGridCell cell = null;
		
		column = form.dyngrdGlossary().getColumns().getByIdentifier(COL_IMAGE);
		cell = childConsultantRow.getCells().newCell(column, DynamicCellType.IMAGE);
		cell.setValue(form.getImages().Core.Users);
		column = form.dyngrdGlossary().getColumns().getByIdentifier(COL_HEADING);
		cell = childConsultantRow.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(ProfileType.CONSULTANT.toString());
		cell.setReadOnly(true);
		childConsultantRow.setValue(ProfileType.CONSULTANT);
		childConsultantRow.isReadOnly();
		populateGlossaryProfile(parentRow, childConsultantRow, form.getImages().Core.User);
		
		DynamicGridRow childSpecialtyRow = parentRow.getRows().newRow();
		
		column = form.dyngrdGlossary().getColumns().getByIdentifier(COL_IMAGE);
		cell = childSpecialtyRow.getCells().newCell(column, DynamicCellType.IMAGE);
		cell.setValue(form.getImages().Admin.Specialty);
		column = form.dyngrdGlossary().getColumns().getByIdentifier(COL_HEADING);
		cell = childSpecialtyRow.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(ProfileType.SPECIALTY.toString());
		cell.setReadOnly(true);
		childSpecialtyRow.setValue(ProfileType.SPECIALTY);
		childSpecialtyRow.isReadOnly();
		populateGlossaryProfile(parentRow, childSpecialtyRow, form.getImages().Admin.Specialty2);
	}

	private void populateGlossaryProfile(DynamicGridRow glossaryRow, DynamicGridRow profileRow, Image img) 
	{
		if(glossaryRow == null || profileRow == null)
			return;
		
		GlossaryProfileVoCollection glossaryProfileList = domain.listGlossaryProfile((GlossaryVo) glossaryRow.getValue(), (ProfileType) profileRow.getValue());
		
		if(glossaryProfileList == null)
			return;
		
		profileRow.getRows().clear();
		
		for(int i = 0; i < glossaryProfileList.size(); i++)
		{
			ICspTypeSpecifier cellValue = domain.getMedicOrSpec((ProfileType) profileRow.getValue(), glossaryProfileList.get(i).getSpecifierID());
			
			if(cellValue != null)
			{
				DynamicGridRow childRow = profileRow.getRows().newRow();
				DynamicGridColumn column = null;
				DynamicGridCell cell = null;
				
				column = form.dyngrdGlossary().getColumns().getByIdentifier(COL_IMAGE);
				cell = childRow.getCells().newCell(column, DynamicCellType.IMAGE);
				cell.setValue(img);
				
				column = form.dyngrdGlossary().getColumns().getByIdentifier(COL_HEADING);
				cell = childRow.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue(cellValue.getIGenericItemInfoName());
				cell.setReadOnly(true);
				childRow.setValue(cellValue);
			}
		}
	}

	public void clearInstanceControls()
	{
		// TODO: Add you code here.
	}
	
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		
	}
	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.dyngrdGlossary().getValue() instanceof GlossaryVo)
		{
			return saveGlossary();
		}
		if(form.getLocalContext().getGlossaryProfileForSaveIsNotNull() && form.getLocalContext().getGlossaryProfileForSave().size() > 0)
		{
			return saveGlossaryProfile();
		}
		if(form.getLocalContext().getCanAddNewProfileIsNotNull() && !form.getLocalContext().getCanAddNewProfile())
		{
			engine.showErrors(new String[] {"Select a value for Glossary Profile."});
			return false;
		}
		return false;
	}
	
	private boolean saveGlossaryProfile() throws ims.framework.exceptions.PresentationLogicException
	{
		for(int i=0; i < form.getLocalContext().getGlossaryProfileForSave().size(); i++)
		{
			String arrErrors[] = form.getLocalContext().getGlossaryProfileForSave().get(i).validate();
			if(arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return false;
			}
			try 
			{
				domain.saveGlossaryProfile(form.getLocalContext().getGlossaryProfileForSave().get(i));
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return false;
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			} 
			catch (UniqueKeyViolationException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			}
		}
		form.getLocalContext().setGlossaryProfileForSave(new GlossaryProfileVoCollection());
		return true;
	}

	private boolean saveGlossary() 
	{
		GlossaryVo glossaryNew = populateDataFromScreen((GlossaryVo) form.dyngrdGlossary().getValue());
		
		String [] errors = glossaryNew.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			glossaryNew = domain.saveGlossary(glossaryNew);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}	
		catch (StaleObjectException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		form.getLocalContext().setLastRecord(glossaryNew);
		return true;
	}
	
	public void updateControlsState()
	{
		form.ctnGlossary().setCollapsed(!((form.dyngrdGlossary().getValue() != null 
										   		&& form.dyngrdGlossary().getValue() instanceof GlossaryVo 
										   			&& ((GlossaryVo) form.dyngrdGlossary().getValue()).getGlossaryTextIsNotNull() 
										   				&& form.getMode().equals(FormMode.VIEW)) 
										   					||(form.dyngrdGlossary().getValue() instanceof GlossaryVo 
										   							&& form.getMode().equals(FormMode.EDIT))));
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(form.dyngrdGlossary().getValue() instanceof GlossaryVo);
		}
		
		form.getContextMenus().Correspondence.getGlossaryAdminConfigurationADDItem().setVisible(form.dyngrdGlossary().getValue() instanceof ProfileType 
				&& form.getLocalContext().getCanAddNewProfileIsNotNull() 
					&& form.getLocalContext().getCanAddNewProfile());
		
		form.getContextMenus().Correspondence.getGlossaryAdminConfigurationADDGLOSSARYTEXTItem().setVisible(form.getMode().equals(FormMode.VIEW)
				&& form.dyngrdGlossary().getValue() instanceof GlossaryVo
					&& !((GlossaryVo) form.dyngrdGlossary().getValue()).getGlossaryTextIsNotNull());
		
		form.getContextMenus().Correspondence.getGlossaryAdminConfigurationEDITGLOSSARYTEXTItem().setVisible(form.getMode().equals(FormMode.VIEW)
				&& form.dyngrdGlossary().getValue() instanceof GlossaryVo
					&& ((GlossaryVo) form.dyngrdGlossary().getValue()).getGlossaryTextIsNotNull());
		
		form.getContextMenus().Correspondence.getGlossaryAdminConfigurationDELETEGLOSSARYTEXTItem().setVisible(form.getMode().equals(FormMode.VIEW)
				&& form.dyngrdGlossary().getValue() instanceof GlossaryVo
					&& ((GlossaryVo) form.dyngrdGlossary().getValue()).getGlossaryTextIsNotNull());
		
		form.getContextMenus().Correspondence.getGlossaryAdminConfigurationDELETEPROFILEItem().setVisible(form.getMode().equals(FormMode.VIEW) 
				&& form.dyngrdGlossary().getValue() instanceof ICspTypeSpecifier);
		
		form.dyngrdGlossary().setEnabled(!(form.getMode().equals(FormMode.EDIT) && form.dyngrdGlossary().getValue() instanceof GlossaryVo));
		form.dyngrdGlossary().setReadOnly(false);
		for(int i =0; i < form.dyngrdGlossary().getRows().size(); i++)
		{
			if(form.dyngrdGlossary().getRows().get(i).getValue() instanceof GlossaryVo)
			{
				form.dyngrdGlossary().getRows().get(i).setSelectable(!form.getMode().equals(FormMode.EDIT));
			}
		}
	}
	
	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CorrespondenceNamespace.GlossaryAdminConfiguration.ADD:
				if(form.dyngrdGlossary().getSelectedRow() != null)
				{
					form.setMode(FormMode.EDIT);
					newInstance(form.dyngrdGlossary().getSelectedRow());
				}
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.GlossaryAdminConfiguration.ADDGLOSSARYTEXT:
				addGlossary();
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.GlossaryAdminConfiguration.EDITGLOSSARYTEXT:
				updateInstance();
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.GlossaryAdminConfiguration.DELETEPROFILE:
				if(deleteProfile())
					open();
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.GlossaryAdminConfiguration.DELETEGLOSSARYTEXT:
				if(deleteGlossary())
					open();
				break;
		}
	}
	
	private boolean deleteProfile() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.dyngrdGlossary().getValue() instanceof ICspTypeSpecifier)
		{
			form.getLocalContext().setGlossaryProfileForSave(new GlossaryProfileVoCollection());
			GlossaryProfileVo voGlossaryProfileToDetele = domain.getGlossaryProfile((ICspTypeSpecifier) form.dyngrdGlossary().getValue());
			
			voGlossaryProfileToDetele.getGlossaries().remove((GlossaryVo) form.dyngrdGlossary().getSelectedRow().getParent().getParent().getValue());
			form.getLocalContext().getGlossaryProfileForSave().add(voGlossaryProfileToDetele);
			
			return saveGlossaryProfile();
		}
		return false;
	}

	private boolean deleteGlossary() 
	{
		if(form.dyngrdGlossary().getValue() instanceof GlossaryVo)
		{
			try 
			{
				domain.deleteGlossary((GlossaryVo) form.dyngrdGlossary().getValue());
			}
			catch (ForeignKeyViolationException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			catch (StaleObjectException e) 
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() + " " + e.getMessage());
				return false;
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			}
		}
		return true;
	}
	
	private void addGlossary() 
	{
		populateScreenFromData(null);
		form.setMode(FormMode.EDIT);
	}
	
	private void newInstance(DynamicGridRow parent) 
	{
		if(parent.getValue() instanceof ProfileType)
		{
			DynamicGridRow childRow = parent.getRows().newRow(true);
			DynamicGridColumn column = null;
			DynamicGridCell cell = null;
			
			column = form.dyngrdGlossary().getColumns().getByIdentifier(COL_IMAGE);
			cell = childRow.getCells().newCell(column, DynamicCellType.IMAGE);
			if(parent.getValue().equals(ProfileType.CONSULTANT))
			{
				cell.setValue(form.getImages().Core.User);
			}
			else if(parent.getValue().equals(ProfileType.SPECIALTY))
			{
				cell.setValue(form.getImages().Admin.Specialty2);
			}
			
			column = form.dyngrdGlossary().getColumns().getByIdentifier(COL_HEADING);
			cell = childRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
			cell.setTooltip("");
			cell.setAutoPostBack(true);
			
			parent.setExpanded(true);
			
			form.getLocalContext().setCanAddNewProfile(false);
		}
	}
	
	@Override
	protected void onDyngrdGlossaryCellTextSubmited(DynamicGridCell cell) 
	{
		if(cell.getRow() != null && cell.getRow().getParent() != null)
		{
			if(cell.getRow().getParent().getValue() instanceof ProfileType)
			{
				if (cell.getTypedText() == null || cell.getTypedText().length() < 3)
				{
					engine.showMessage("Please enter at least 3 characters for search criteria");
					return;
				}
				populateQueryComboBox(cell, domain.listMedicAndSpec((ProfileType) cell.getRow().getParent().getValue(), cell.getTypedText()));
			}
		}
	}
	
	private void populateQueryComboBox(DynamicGridCell cell, ICspTypeSpecifier[] cspTypeSpecifiers) 
	{
		cell.getItems().clear();
		for(int i = 0; i < cspTypeSpecifiers.length; i++)
		{
			DynamicGridCellItem newComboItem = cell.getItems().newItem(cspTypeSpecifiers[i].getIGenericItemInfoName());
			newComboItem.setIdentifier(cspTypeSpecifiers[i]);
		}
		if (cspTypeSpecifiers.length >= 1)
		{
			cell.showOpened();
		}
	}
	
	@Override
	protected void onDyngrdGlossaryCellValueChanged(DynamicGridCell cell) 
	{
		if(cell.getValue() != null && cell.getRow() != null && cell.getRow().getParent() != null && cell.getRow().getParent().getParent() != null)
		{
			if(getSelectedItemFromCell(cell) != null)
			{
				GlossaryProfileVo newGLP = populateGlossaryProfile(getSelectedItemFromCell(cell), cell.getRow().getParent());
				form.getLocalContext().getGlossaryProfileForSave().add(newGLP);
				form.getLocalContext().setCanAddNewProfile(true);
			}
			else
			{
				engine.showErrors(new String[] {"Invalid value."});
			}
		}
	}
	
	private GlossaryProfileVo populateGlossaryProfile(ICspTypeSpecifier selectedItemFromCell, DynamicGridRow profileRow) 
	{
		GlossaryProfileVo voGlossaryProfileColl = domain.getGlossaryProfile(selectedItemFromCell);	
		
		if (voGlossaryProfileColl == null)
		{
			voGlossaryProfileColl = new GlossaryProfileVo();
			voGlossaryProfileColl.setSpecifierID(selectedItemFromCell.getIGenericItemInfoID());
			voGlossaryProfileColl.setSpecifierType((ProfileType) profileRow.getValue());
			
			GlossaryVoCollection voCollGlossary = new GlossaryVoCollection();
			voCollGlossary.add((GlossaryVo) profileRow.getParent().getValue());
			voGlossaryProfileColl.setGlossaries(voCollGlossary);
		}
		else
		{
			voGlossaryProfileColl.getGlossaries().add((GlossaryVo) profileRow.getParent().getValue());
		}
		
		return voGlossaryProfileColl;
	}

	private ICspTypeSpecifier getSelectedItemFromCell(DynamicGridCell cell)
	{
		if(cell.getItems() != null)
		{
			for(int i=0; i < cell.getItems().size(); i++)
			{
				if(((ICspTypeSpecifier) cell.getItems().get(i).getIdentifier()).getIGenericItemInfoName().equals(( String) cell.getValue()))
				{
					return (ICspTypeSpecifier) cell.getItems().get(i).getIdentifier();
				}
			}
		}
		return null;
	}
}
