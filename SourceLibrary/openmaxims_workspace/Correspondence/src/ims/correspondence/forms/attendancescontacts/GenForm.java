//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.correspondence.forms.attendancescontacts;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdAttendencesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAttendencesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolContactTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolContactTypeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolContactTypeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolContactType(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolContactType()
		{
			return (String)super.row.get(0);
		}
		public void setcolContactType(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolContactTypeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolContactNumberReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolContactNumberReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolContactNumberOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolContactNumber(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolContactNumber()
		{
			return (String)super.row.get(1);
		}
		public void setcolContactNumber(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolContactNumberTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolDateOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolDate(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.framework.utils.Date getcolDate()
		{
			return (ims.framework.utils.Date)super.row.get(2);
		}
		public void setcolDate(ims.framework.utils.Date value)
		{
			super.row.set(2, value);
		}
		public void setCellcolDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolLocationReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolLocationReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolLocationOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolLocation(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolLocation()
		{
			return (String)super.row.get(3);
		}
		public void setcolLocation(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolLocationTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolConsultantReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolConsultantOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolConsultant(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolConsultant()
		{
			return (String)super.row.get(4);
		}
		public void setcolConsultant(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolConsultantTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolSpecialtyReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolSpecialtyReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolSpecialtyOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForcolSpecialty(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getcolSpecialty()
		{
			return (String)super.row.get(5);
		}
		public void setcolSpecialty(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolSpecialtyTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcolDocStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscolDocStatusReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcolDocStatusOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForcolDocStatus(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.framework.utils.Image getcolDocStatus()
		{
			return (ims.framework.utils.Image)super.row.get(6);
		}
		public void setcolDocStatus(ims.framework.utils.Image value)
		{
			super.row.set(6, value);
		}
		public void setCellcolDocStatusTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setcolAccessReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean iscolAccessReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showcolAccessOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForcolAccess(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.correspondence.vo.lookups.Access getcolAccess()
		{
			return (ims.correspondence.vo.lookups.Access)super.row.get(7);
		}
		public void setcolAccess(ims.correspondence.vo.lookups.Access value)
		{
			super.row.set(7, value);
		}
		public void setCellcolAccessTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.correspondence.vo.PasContactVo getValue()
		{
			return (ims.correspondence.vo.PasContactVo)super.row.getValue();
		}
		public void setValue(ims.correspondence.vo.PasContactVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAttendencesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAttendencesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAttendencesRow get(int index)
		{
			return new grdAttendencesRow(super.collection.get(index));
		}
		public grdAttendencesRow newRow()
		{
			return new grdAttendencesRow(super.collection.newRow());
		}
		public grdAttendencesRow newRow(boolean autoSelect)
		{
			return new grdAttendencesRow(super.collection.newRow(autoSelect));
		}
		public grdAttendencesRow newRowAt(int index)
		{
			return new grdAttendencesRow(super.collection.newRowAt(index));
		}
		public grdAttendencesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAttendencesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAttendencesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.correspondence.vo.PasContactVoCollection getValues()
		{
			ims.correspondence.vo.PasContactVoCollection listOfValues = new ims.correspondence.vo.PasContactVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.correspondence.vo.PasContactVo getValue()
		{
			return (ims.correspondence.vo.PasContactVo)super.grid.getValue();
		}
		public void setValue(ims.correspondence.vo.PasContactVo value)
		{
			super.grid.setValue(value);
		}
		public grdAttendencesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAttendencesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAttendencesRowCollection getRows()
		{
			return new grdAttendencesRowCollection(super.grid.getRows());
		}
		public grdAttendencesRow getRowByValue(ims.correspondence.vo.PasContactVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAttendencesRow(row);
		}
		public void setcolContactTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolContactTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolContactNumberHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolContactNumberHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolLocationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolLocationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolSpecialtyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolSpecialtyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcolDocStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcolDocStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setcolAccessHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getcolAccessHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.admin.pas.vo.PASEventRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.admin.pas.vo.PASEventRefVo' of the global context variable 'Core.PasEvent' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.correspondence.vo.CorrespondenceDetailsRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.correspondence.vo.CorrespondenceDetailsRefVo' of the global context variable 'Correspondence.CorrespondenceDetails' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(832, 424);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Correspondence.contextMenuCorrespondenceDetails = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New Correspondence", true, false, new Integer(111108), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsEditItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Correspondence", true, false, new Integer(103102), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsEditItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsViewItem = factory.createMenuItem(startControlID.intValue() + 3, "View Correspondence Details", true, false, new Integer(102223), false, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsViewItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsPreviewLetterItem = factory.createMenuItem(startControlID.intValue() + 4, "Preview Document", true, false, new Integer(102221), false, true);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsPreviewLetterItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsDocumentStatusItem = factory.createMenuItem(startControlID.intValue() + 5, "View Document Status History", true, false, new Integer(102202), false, true);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsDocumentStatusItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit Document Status History", true, false, new Integer(102150), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsViewDemographicsItem = factory.createMenuItem(startControlID.intValue() + 7, "View Demographics", true, false, new Integer(111106), false, true);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsViewDemographicsItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsVIEWCONTACTSItem = factory.createMenuItem(startControlID.intValue() + 8, "View Contacts", true, false, new Integer(111105), false, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsVIEWCONTACTSItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsSetLetterRequiredItem = factory.createMenuItem(startControlID.intValue() + 9, "Set Letter Required", true, false, new Integer(102209), false, true);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsSetLetterRequiredItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsSetNoLetterRequiredItem = factory.createMenuItem(startControlID.intValue() + 10, "Set No Letter Required", true, false, new Integer(111104), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsSetNoLetterRequiredItem);
		form.registerMenu(contextMenus.Correspondence.contextMenuCorrespondenceDetails);


		// Button Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 392, 392, 80, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 376, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdAttendencesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Correspondence.contextMenuCorrespondenceDetails, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAttendencesTemp);
		grdAttendencesGrid grdAttendences = (grdAttendencesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAttendencesGrid.class, m_grdAttendencesTemp);
		grdAttendences.addStringColumn("Contact type", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAttendences.addStringColumn("Contact No.", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAttendences.addDateColumn("Date", 0, 0, 80, true, true, null, false, 1, true);
		grdAttendences.addStringColumn("Clinic - Ward", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAttendences.addStringColumn("Consultant", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAttendences.addStringColumn("Specialty", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAttendences.addImageColumn("Doc Status", 0, 0, 150, true, 2);
		grdAttendences.addStringColumn("Access", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAttendences);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public Button btnClose()
	{
		return (Button)super.getControl(0);
	}
	public grdAttendencesGrid grdAttendences()
	{
		return (grdAttendencesGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Correspondence = new CorrespondenceForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				Demographics = new LocalFormName(102101);
			}
			public final FormName Demographics;
		}
		public final class CorrespondenceForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CorrespondenceForms()
			{
				DocumentStatusDlg = new LocalFormName(111122);
				ProcessReport = new LocalFormName(111119);
				CorrespondenceDetails = new LocalFormName(111109);
			}
			public final FormName DocumentStatusDlg;
			public final FormName ProcessReport;
			public final FormName CorrespondenceDetails;
		}

		public CoreForms Core;
		public CorrespondenceForms Correspondence;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_openForm = new ims.framework.ContextVariable("openForm", prefix + "_lv_Correspondence.AttendancesContacts.__internal_x_context__openForm_" + componentIdentifier + "");
			cxl_userFullAccess = new ims.framework.ContextVariable("userFullAccess", prefix + "_lv_Correspondence.AttendancesContacts.__internal_x_context__userFullAccess_" + componentIdentifier + "");
		}
		
		public boolean getopenFormIsNotNull()
		{
			return !cxl_openForm.getValueIsNull(context);
		}
		public ims.framework.FormName getopenForm()
		{
			return (ims.framework.FormName)cxl_openForm.getValue(context);
		}
		public void setopenForm(ims.framework.FormName value)
		{
			cxl_openForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_openForm = null;
		public boolean getuserFullAccessIsNotNull()
		{
			return !cxl_userFullAccess.getValueIsNull(context);
		}
		public ims.correspondence.vo.UserAccessFullVo getuserFullAccess()
		{
			return (ims.correspondence.vo.UserAccessFullVo)cxl_userFullAccess.getValue(context);
		}
		public void setuserFullAccess(ims.correspondence.vo.UserAccessFullVo value)
		{
			cxl_userFullAccess.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_userFullAccess = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CorrespondenceNamespace Correspondence = new CorrespondenceNamespace();
		public final class CorrespondenceNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class CorrespondenceDetails implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 1;
				public static final int Edit = 2;
				public static final int View = 3;
				public static final int PreviewLetter = 4;
				public static final int DocumentStatus = 5;
				public static final int EditDocumentStatusHistory = 6;
				public static final int ViewDemographics = 7;
				public static final int VIEWCONTACTS = 8;
				public static final int SetLetterRequired = 9;
				public static final int SetNoLetterRequired = 10;
			}
			public void disableAllCorrespondenceDetailsMenuItems()
			{
				this.contextMenuCorrespondenceDetailsAddItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsEditItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsViewItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsPreviewLetterItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsDocumentStatusItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsViewDemographicsItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsVIEWCONTACTSItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsSetLetterRequiredItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsSetNoLetterRequiredItem.setEnabled(false);
			}
			public void hideAllCorrespondenceDetailsMenuItems()
			{
				this.contextMenuCorrespondenceDetailsAddItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsEditItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsViewItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsPreviewLetterItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsDocumentStatusItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsViewDemographicsItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsVIEWCONTACTSItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsSetLetterRequiredItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsSetNoLetterRequiredItem.setVisible(false);
			}
			private Menu contextMenuCorrespondenceDetails;
			public MenuItem getCorrespondenceDetailsAddItem()
			{
				return this.contextMenuCorrespondenceDetailsAddItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsAddItem;
			public MenuItem getCorrespondenceDetailsEditItem()
			{
				return this.contextMenuCorrespondenceDetailsEditItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsEditItem;
			public MenuItem getCorrespondenceDetailsViewItem()
			{
				return this.contextMenuCorrespondenceDetailsViewItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsViewItem;
			public MenuItem getCorrespondenceDetailsPreviewLetterItem()
			{
				return this.contextMenuCorrespondenceDetailsPreviewLetterItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsPreviewLetterItem;
			public MenuItem getCorrespondenceDetailsDocumentStatusItem()
			{
				return this.contextMenuCorrespondenceDetailsDocumentStatusItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsDocumentStatusItem;
			public MenuItem getCorrespondenceDetailsEditDocumentStatusHistoryItem()
			{
				return this.contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem;
			public MenuItem getCorrespondenceDetailsViewDemographicsItem()
			{
				return this.contextMenuCorrespondenceDetailsViewDemographicsItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsViewDemographicsItem;
			public MenuItem getCorrespondenceDetailsVIEWCONTACTSItem()
			{
				return this.contextMenuCorrespondenceDetailsVIEWCONTACTSItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsVIEWCONTACTSItem;
			public MenuItem getCorrespondenceDetailsSetLetterRequiredItem()
			{
				return this.contextMenuCorrespondenceDetailsSetLetterRequiredItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsSetLetterRequiredItem;
			public MenuItem getCorrespondenceDetailsSetNoLetterRequiredItem()
			{
				return this.contextMenuCorrespondenceDetailsSetNoLetterRequiredItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsSetNoLetterRequiredItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[73];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.AttendancesContacts.__internal_x_context__userFullAccess_" + componentIdentifier, "BO-1053100011-ID", "ID_UserAccess");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.AttendancesContacts.__internal_x_context__userFullAccess_" + componentIdentifier, "BO-1053100011-APPUSER", "AppUser");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
