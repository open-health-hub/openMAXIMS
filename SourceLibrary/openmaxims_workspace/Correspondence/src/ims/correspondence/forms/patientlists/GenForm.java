//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.correspondence.forms.patientlists;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrPatientListsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabInpatientListContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbWardComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocShortMappingsVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocShortMappingsVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocShortMappingsVo getValue()
				{
					return (ims.core.vo.LocShortMappingsVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocShortMappingsVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbIPDocStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.DocumentStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.DocumentStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.DocumentStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.DocumentStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.DocumentStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.DocumentStatus getValue()
				{
					return (ims.core.vo.lookups.DocumentStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.DocumentStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbIPSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.correspondence.vo.SpecialtyAccessVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.correspondence.vo.SpecialtyAccessVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.correspondence.vo.SpecialtyAccessVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.correspondence.vo.SpecialtyAccessVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.correspondence.vo.SpecialtyAccessVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.correspondence.vo.SpecialtyAccessVo getValue()
				{
					return (ims.correspondence.vo.SpecialtyAccessVo)super.control.getValue();
				}
				public void setValue(ims.correspondence.vo.SpecialtyAccessVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbIPConsultantComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.correspondence.vo.ConsultantAccessFullVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.correspondence.vo.ConsultantAccessFullVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.correspondence.vo.ConsultantAccessFullVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.correspondence.vo.ConsultantAccessFullVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.correspondence.vo.ConsultantAccessFullVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.correspondence.vo.ConsultantAccessFullVo getValue()
				{
					return (ims.correspondence.vo.ConsultantAccessFullVo)super.control.getValue();
				}
				public void setValue(ims.correspondence.vo.ConsultantAccessFullVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdIPListRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdIPListRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolContactNoReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolContactNoReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolContactNoOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolContactNo(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolContactNo()
				{
					return (String)super.row.get(0);
				}
				public void setcolContactNo(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolContactNoTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolChartNoReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolChartNoReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolChartNoOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolChartNo(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getcolChartNo()
				{
					return (String)super.row.get(1);
				}
				public void setcolChartNo(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolChartNoTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolDischargeDateReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolDischargeDateReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolDischargeDateOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForcolDischargeDate(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getcolDischargeDate()
				{
					return (String)super.row.get(2);
				}
				public void setcolDischargeDate(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolDischargeDateTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolSurnameReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolSurnameOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForcolSurname(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getcolSurname()
				{
					return (String)super.row.get(3);
				}
				public void setcolSurname(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolSurnameTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolForenameReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolForenameOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForcolForename(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getcolForename()
				{
					return (String)super.row.get(4);
				}
				public void setcolForename(String value)
				{
					super.row.set(4, value);
				}
				public void setCellcolForenameTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolSexReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolSexReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolSexOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForcolSex(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getcolSex()
				{
					return (String)super.row.get(5);
				}
				public void setcolSex(String value)
				{
					super.row.set(5, value);
				}
				public void setCellcolSexTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setcolDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean iscolDOBReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showcolDOBOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForcolDOB(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.framework.utils.PartialDate getcolDOB()
				{
					return (ims.framework.utils.PartialDate)super.row.get(6);
				}
				public void setcolDOB(ims.framework.utils.PartialDate value)
				{
					super.row.set(6, value);
				}
				public void setCellcolDOBTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setcolWardReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean iscolWardReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showcolWardOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForcolWard(String value)
				{
					super.row.setTooltip(7, value);
				}
				public String getcolWard()
				{
					return (String)super.row.get(7);
				}
				public void setcolWard(String value)
				{
					super.row.set(7, value);
				}
				public void setCellcolWardTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setcolConsultantReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean iscolConsultantReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showcolConsultantOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForcolConsultant(String value)
				{
					super.row.setTooltip(8, value);
				}
				public String getcolConsultant()
				{
					return (String)super.row.get(8);
				}
				public void setcolConsultant(String value)
				{
					super.row.set(8, value);
				}
				public void setCellcolConsultantTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public void setcolAccessReadOnly(boolean value)
				{
					super.row.setReadOnly(9, value);
				}
				public boolean iscolAccessReadOnly()
				{
					return super.row.isReadOnly(9);
				}
				public void showcolAccessOpened()
				{
					super.row.showOpened(9);
				}
				public void setTooltipForcolAccess(String value)
				{
					super.row.setTooltip(9, value);
				}
				public ims.correspondence.vo.lookups.Access getcolAccess()
				{
					return (ims.correspondence.vo.lookups.Access)super.row.get(9);
				}
				public void setcolAccess(ims.correspondence.vo.lookups.Access value)
				{
					super.row.set(9, value);
				}
				public void setCellcolAccessTooltip(String value)
				{
					super.row.setTooltip(9, value);
				}
				public void setcolPasEventReadOnly(boolean value)
				{
					super.row.setReadOnly(10, value);
				}
				public boolean iscolPasEventReadOnly()
				{
					return super.row.isReadOnly(10);
				}
				public void showcolPasEventOpened()
				{
					super.row.showOpened(10);
				}
				public void setTooltipForcolPasEvent(String value)
				{
					super.row.setTooltip(10, value);
				}
				public String getcolPasEvent()
				{
					return (String)super.row.get(10);
				}
				public void setcolPasEvent(String value)
				{
					super.row.set(10, value);
				}
				public void setCellcolPasEventTooltip(String value)
				{
					super.row.setTooltip(10, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(11, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(11);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(11);
				}
				public void setTooltipForcolStatus(String value)
				{
					super.row.setTooltip(11, value);
				}
				public ims.framework.utils.Image getcolStatus()
				{
					return (ims.framework.utils.Image)super.row.get(11);
				}
				public void setcolStatus(ims.framework.utils.Image value)
				{
					super.row.set(11, value);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(11, value);
				}
				public ims.correspondence.vo.PatientListRowVo getValue()
				{
					return (ims.correspondence.vo.PatientListRowVo)super.row.getValue();
				}
				public void setValue(ims.correspondence.vo.PatientListRowVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdIPListRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdIPListRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdIPListRow get(int index)
				{
					return new grdIPListRow(super.collection.get(index));
				}
				public grdIPListRow newRow()
				{
					return new grdIPListRow(super.collection.newRow());
				}
				public grdIPListRow newRow(boolean autoSelect)
				{
					return new grdIPListRow(super.collection.newRow(autoSelect));
				}
				public grdIPListRow newRowAt(int index)
				{
					return new grdIPListRow(super.collection.newRowAt(index));
				}
				public grdIPListRow newRowAt(int index, boolean autoSelect)
				{
					return new grdIPListRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdIPListGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setcolDischargeDateCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.correspondence.vo.PatientListRowVoCollection getValues()
				{
					ims.correspondence.vo.PatientListRowVoCollection listOfValues = new ims.correspondence.vo.PatientListRowVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.correspondence.vo.PatientListRowVo getValue()
				{
					return (ims.correspondence.vo.PatientListRowVo)super.grid.getValue();
				}
				public void setValue(ims.correspondence.vo.PatientListRowVo value)
				{
					super.grid.setValue(value);
				}
				public grdIPListRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdIPListRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdIPListRowCollection getRows()
				{
					return new grdIPListRowCollection(super.grid.getRows());
				}
				public grdIPListRow getRowByValue(ims.correspondence.vo.PatientListRowVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdIPListRow(row);
				}
				public void setcolContactNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolContactNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolChartNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolChartNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolDischargeDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolDischargeDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setcolSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setcolDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getcolDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setcolWardHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getcolWardHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setcolConsultantHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getcolConsultantHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
				public void setcolAccessHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(9, value);
				}
				public String getcolAccessHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(9);
				}
				public void setcolPasEventHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(10, value);
				}
				public String getcolPasEventHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(10);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(11, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(11);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 568, 44, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total:0", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 336, 44, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Discharge Date To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 44, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 336, 68, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Document Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 68, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 336, 20, 150, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Discharge Date On/From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 20, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 664, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "btn2", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 744, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "btn1", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 496, 40, 232, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 496, 16, 232, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 88, 64, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbWardTemp);
				cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
				super.addComboBox(cmbWard);
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 496, 64, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbIPDocStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbIPDocStatusTemp);
				cmbIPDocStatusComboBox cmbIPDocStatus = (cmbIPDocStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIPDocStatusComboBox.class, m_cmbIPDocStatusTemp);
				super.addComboBox(cmbIPDocStatus);
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 88, 40, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbIPSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbIPSpecialtyTemp);
				cmbIPSpecialtyComboBox cmbIPSpecialty = (cmbIPSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIPSpecialtyComboBox.class, m_cmbIPSpecialtyTemp);
				super.addComboBox(cmbIPSpecialty);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 88, 16, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbIPConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbIPConsultantTemp);
				qmbIPConsultantComboBox qmbIPConsultant = (qmbIPConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbIPConsultantComboBox.class, m_qmbIPConsultantTemp);
				super.addComboBox(qmbIPConsultant);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 808, 464, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdIPListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Correspondence.contextMenuCorrespondenceDetails, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdIPListTemp);
				grdIPListGrid grdIPList = (grdIPListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdIPListGrid.class, m_grdIPListTemp);
				grdIPList.addStringColumn("Contact No", 0, 0, 60, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIPList.addStringColumn("Chart No", 0, 0, 60, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIPList.addStringColumn("Disch. Date", 0, 0, 90, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIPList.addStringColumn("Surname", 0, 0, 110, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIPList.addStringColumn("Forename", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIPList.addStringColumn("Sex", 0, 0, 40, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIPList.addPartialDateColumn("D.O.B.", 0, 0, 50, true, true, null, false, 1, true);
				grdIPList.addStringColumn("Ward", 0, 0, 95, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIPList.addStringColumn("Consultant", 0, 0, 90, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIPList.addStringColumn(" ", 0, 0, 0, false, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIPList.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIPList.addImageColumn("Status", 0, 0, -1, true, 2);
				super.addGrid(grdIPList);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 786, 32, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 753, 32, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for patients matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public Label lblIPTotal()
			{
				return (Label)super.getControl(0);
			}
			public Label lblIPDischPeriod()
			{
				return (Label)super.getControl(1);
			}
			public Label lblIPDocumentStatus()
			{
				return (Label)super.getControl(3);
			}
			public Label lblIPWard()
			{
				return (Label)super.getControl(4);
			}
			public Label lblIPDischDate()
			{
				return (Label)super.getControl(5);
			}
			public Button btn2()
			{
				return (Button)super.getControl(7);
			}
			public Button btn1()
			{
				return (Button)super.getControl(8);
			}
			public DateControl dteIPDischEndDate()
			{
				return (DateControl)super.getControl(9);
			}
			public DateControl dteIPDischDate()
			{
				return (DateControl)super.getControl(10);
			}
			public cmbWardComboBox cmbWard()
			{
				return (cmbWardComboBox)super.getComboBox(0);
			}
			public cmbIPDocStatusComboBox cmbIPDocStatus()
			{
				return (cmbIPDocStatusComboBox)super.getComboBox(1);
			}
			public cmbIPSpecialtyComboBox cmbIPSpecialty()
			{
				return (cmbIPSpecialtyComboBox)super.getComboBox(2);
			}
			public qmbIPConsultantComboBox qmbIPConsultant()
			{
				return (qmbIPConsultantComboBox)super.getComboBox(3);
			}
			public grdIPListGrid grdIPList()
			{
				return (grdIPListGrid)super.getGrid(0);
			}
			public ImageButton imbIPClear()
			{
				return (ImageButton)super.getControl(16);
			}
			public ImageButton imbIPSearch()
			{
				return (ImageButton)super.getControl(17);
			}
		}
		public static class tabOutpatientListContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbOPConsultantComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.correspondence.vo.ConsultantAccessFullVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.correspondence.vo.ConsultantAccessFullVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.correspondence.vo.ConsultantAccessFullVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.correspondence.vo.ConsultantAccessFullVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.correspondence.vo.ConsultantAccessFullVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.correspondence.vo.ConsultantAccessFullVo getValue()
				{
					return (ims.correspondence.vo.ConsultantAccessFullVo)super.control.getValue();
				}
				public void setValue(ims.correspondence.vo.ConsultantAccessFullVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbOPClinicComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.correspondence.vo.ClinicAccessFullVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.correspondence.vo.ClinicAccessFullVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.correspondence.vo.ClinicAccessFullVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.correspondence.vo.ClinicAccessFullVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.correspondence.vo.ClinicAccessFullVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.correspondence.vo.ClinicAccessFullVo getValue()
				{
					return (ims.correspondence.vo.ClinicAccessFullVo)super.control.getValue();
				}
				public void setValue(ims.correspondence.vo.ClinicAccessFullVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbOPDocumentStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.DocumentStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.DocumentStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.DocumentStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.DocumentStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.DocumentStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.DocumentStatus getValue()
				{
					return (ims.core.vo.lookups.DocumentStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.DocumentStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbOPSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.correspondence.vo.SpecialtyAccessVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.correspondence.vo.SpecialtyAccessVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.correspondence.vo.SpecialtyAccessVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.correspondence.vo.SpecialtyAccessVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.correspondence.vo.SpecialtyAccessVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.correspondence.vo.SpecialtyAccessVo getValue()
				{
					return (ims.correspondence.vo.SpecialtyAccessVo)super.control.getValue();
				}
				public void setValue(ims.correspondence.vo.SpecialtyAccessVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdOPListRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdOPListRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolContactNoReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolContactNoReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolContactNoOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolContactNo(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolContactNo()
				{
					return (String)super.row.get(0);
				}
				public void setcolContactNo(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolContactNoTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolChartNoReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolChartNoReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolChartNoOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolChartNo(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getcolChartNo()
				{
					return (String)super.row.get(1);
				}
				public void setcolChartNo(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolChartNoTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolClinicDateReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolClinicDateReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolClinicDateOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForcolClinicDate(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getcolClinicDate()
				{
					return (String)super.row.get(2);
				}
				public void setcolClinicDate(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolClinicDateTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolSurnameReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolSurnameOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForcolSurname(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getcolSurname()
				{
					return (String)super.row.get(3);
				}
				public void setcolSurname(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolSurnameTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolForenameReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolForenameOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForcolForename(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getcolForename()
				{
					return (String)super.row.get(4);
				}
				public void setcolForename(String value)
				{
					super.row.set(4, value);
				}
				public void setCellcolForenameTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolSexReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolSexReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolSexOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForcolSex(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getcolSex()
				{
					return (String)super.row.get(5);
				}
				public void setcolSex(String value)
				{
					super.row.set(5, value);
				}
				public void setCellcolSexTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setcolDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean iscolDOBReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showcolDOBOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForcolDOB(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.framework.utils.PartialDate getcolDOB()
				{
					return (ims.framework.utils.PartialDate)super.row.get(6);
				}
				public void setcolDOB(ims.framework.utils.PartialDate value)
				{
					super.row.set(6, value);
				}
				public void setCellcolDOBTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setcolClinicReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean iscolClinicReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showcolClinicOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForcolClinic(String value)
				{
					super.row.setTooltip(7, value);
				}
				public String getcolClinic()
				{
					return (String)super.row.get(7);
				}
				public void setcolClinic(String value)
				{
					super.row.set(7, value);
				}
				public void setCellcolClinicTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setcolConsultantReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean iscolConsultantReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showcolConsultantOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForcolConsultant(String value)
				{
					super.row.setTooltip(8, value);
				}
				public String getcolConsultant()
				{
					return (String)super.row.get(8);
				}
				public void setcolConsultant(String value)
				{
					super.row.set(8, value);
				}
				public void setCellcolConsultantTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public void setcolAccessReadOnly(boolean value)
				{
					super.row.setReadOnly(9, value);
				}
				public boolean iscolAccessReadOnly()
				{
					return super.row.isReadOnly(9);
				}
				public void showcolAccessOpened()
				{
					super.row.showOpened(9);
				}
				public void setTooltipForcolAccess(String value)
				{
					super.row.setTooltip(9, value);
				}
				public ims.correspondence.vo.lookups.Access getcolAccess()
				{
					return (ims.correspondence.vo.lookups.Access)super.row.get(9);
				}
				public void setcolAccess(ims.correspondence.vo.lookups.Access value)
				{
					super.row.set(9, value);
				}
				public void setCellcolAccessTooltip(String value)
				{
					super.row.setTooltip(9, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(10, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(10);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(10);
				}
				public void setTooltipForcolStatus(String value)
				{
					super.row.setTooltip(10, value);
				}
				public ims.framework.utils.Image getcolStatus()
				{
					return (ims.framework.utils.Image)super.row.get(10);
				}
				public void setcolStatus(ims.framework.utils.Image value)
				{
					super.row.set(10, value);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(10, value);
				}
				public ims.correspondence.vo.PatientListRowVo getValue()
				{
					return (ims.correspondence.vo.PatientListRowVo)super.row.getValue();
				}
				public void setValue(ims.correspondence.vo.PatientListRowVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdOPListRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdOPListRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdOPListRow get(int index)
				{
					return new grdOPListRow(super.collection.get(index));
				}
				public grdOPListRow newRow()
				{
					return new grdOPListRow(super.collection.newRow());
				}
				public grdOPListRow newRow(boolean autoSelect)
				{
					return new grdOPListRow(super.collection.newRow(autoSelect));
				}
				public grdOPListRow newRowAt(int index)
				{
					return new grdOPListRow(super.collection.newRowAt(index));
				}
				public grdOPListRow newRowAt(int index, boolean autoSelect)
				{
					return new grdOPListRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdOPListGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setcolClinicDateCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.correspondence.vo.PatientListRowVoCollection getValues()
				{
					ims.correspondence.vo.PatientListRowVoCollection listOfValues = new ims.correspondence.vo.PatientListRowVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.correspondence.vo.PatientListRowVo getValue()
				{
					return (ims.correspondence.vo.PatientListRowVo)super.grid.getValue();
				}
				public void setValue(ims.correspondence.vo.PatientListRowVo value)
				{
					super.grid.setValue(value);
				}
				public grdOPListRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdOPListRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdOPListRowCollection getRows()
				{
					return new grdOPListRowCollection(super.grid.getRows());
				}
				public grdOPListRow getRowByValue(ims.correspondence.vo.PatientListRowVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdOPListRow(row);
				}
				public void setcolContactNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolContactNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolChartNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolChartNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolClinicDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolClinicDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setcolSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setcolDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getcolDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setcolClinicHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getcolClinicHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setcolConsultantHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getcolConsultantHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
				public void setcolAccessHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(9, value);
				}
				public String getcolAccessHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(9);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(10, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(10);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 568, 44, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total:0", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 368, 43, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Clinic Date To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 44, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 368, 67, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Document Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 68, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 368, 20, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Clinic Date On/From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 20, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 664, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "btn4", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 744, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "btn3", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 520, 40, 151, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 520, 16, 151, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 80, 16, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbOPConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbOPConsultantTemp);
				cmbOPConsultantComboBox cmbOPConsultant = (cmbOPConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOPConsultantComboBox.class, m_cmbOPConsultantTemp);
				super.addComboBox(cmbOPConsultant);
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 80, 64, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbOPClinicTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbOPClinicTemp);
				cmbOPClinicComboBox cmbOPClinic = (cmbOPClinicComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOPClinicComboBox.class, m_cmbOPClinicTemp);
				super.addComboBox(cmbOPClinic);
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 520, 64, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbOPDocumentStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbOPDocumentStatusTemp);
				cmbOPDocumentStatusComboBox cmbOPDocumentStatus = (cmbOPDocumentStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOPDocumentStatusComboBox.class, m_cmbOPDocumentStatusTemp);
				super.addComboBox(cmbOPDocumentStatus);
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 80, 40, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbOPSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbOPSpecialtyTemp);
				cmbOPSpecialtyComboBox cmbOPSpecialty = (cmbOPSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOPSpecialtyComboBox.class, m_cmbOPSpecialtyTemp);
				super.addComboBox(cmbOPSpecialty);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 808, 464, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdOPListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Correspondence.contextMenuCorrespondenceDetails, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdOPListTemp);
				grdOPListGrid grdOPList = (grdOPListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOPListGrid.class, m_grdOPListTemp);
				grdOPList.addStringColumn("Contact No", 0, 0, 60, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOPList.addStringColumn("Chart No", 0, 0, 60, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOPList.addStringColumn("Clinic Date", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOPList.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOPList.addStringColumn("Forename", 0, 0, 70, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOPList.addStringColumn("Sex", 0, 0, 40, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOPList.addPartialDateColumn("D.O.B.", 0, 0, 60, true, true, null, false, 1, true);
				grdOPList.addStringColumn("Clinic", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOPList.addStringColumn("Consultant", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOPList.addStringColumn(" ", 0, 0, 0, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOPList.addImageColumn("Status", 0, 0, -1, true, 2);
				super.addGrid(grdOPList);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 786, 50, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 786, 16, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for patients matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public Label lblOPTotal()
			{
				return (Label)super.getControl(0);
			}
			public Label lblOPClinicPeriod()
			{
				return (Label)super.getControl(1);
			}
			public Label lblOPDocumentStatus()
			{
				return (Label)super.getControl(3);
			}
			public Label lblOPClinic()
			{
				return (Label)super.getControl(4);
			}
			public Label lblOPClinicDate()
			{
				return (Label)super.getControl(5);
			}
			public Button btn4()
			{
				return (Button)super.getControl(7);
			}
			public Button btn3()
			{
				return (Button)super.getControl(8);
			}
			public DateControl dteOPClinicEndDate()
			{
				return (DateControl)super.getControl(9);
			}
			public DateControl dteOPClinicDate()
			{
				return (DateControl)super.getControl(10);
			}
			public cmbOPConsultantComboBox cmbOPConsultant()
			{
				return (cmbOPConsultantComboBox)super.getComboBox(0);
			}
			public cmbOPClinicComboBox cmbOPClinic()
			{
				return (cmbOPClinicComboBox)super.getComboBox(1);
			}
			public cmbOPDocumentStatusComboBox cmbOPDocumentStatus()
			{
				return (cmbOPDocumentStatusComboBox)super.getComboBox(2);
			}
			public cmbOPSpecialtyComboBox cmbOPSpecialty()
			{
				return (cmbOPSpecialtyComboBox)super.getComboBox(3);
			}
			public grdOPListGrid grdOPList()
			{
				return (grdOPListGrid)super.getGrid(0);
			}
			public ImageButton imbOPClear()
			{
				return (ImageButton)super.getControl(16);
			}
			public ImageButton imbOPSearch()
			{
				return (ImageButton)super.getControl(17);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 624, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabInpatientList = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Inpatient List", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabInpatientListContainer m_tabInpatientListContainer = (tabInpatientListContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInpatientListContainer.class, m_tabInpatientList, factory);
			super.addContainer(m_tabInpatientList, m_tabInpatientListContainer);
			ims.framework.utils.SizeInfo m_tabInpatientListDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabInpatientListRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper37.getWidth(), anchoringHelper37.getHeight());
			m_tabInpatientListContainer.setContext(form, appForm, m_tabInpatientList, loader, form_images_local, contextMenus, startControlID, m_tabInpatientListDesignSize, m_tabInpatientListRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 624, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOutpatientList = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Outpatient List", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOutpatientListContainer m_tabOutpatientListContainer = (tabOutpatientListContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOutpatientListContainer.class, m_tabOutpatientList, factory);
			super.addContainer(m_tabOutpatientList, m_tabOutpatientListContainer);
			ims.framework.utils.SizeInfo m_tabOutpatientListDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabOutpatientListRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
			m_tabOutpatientListContainer.setContext(form, appForm, m_tabOutpatientList, loader, form_images_local, contextMenus, startControlID, m_tabOutpatientListDesignSize, m_tabOutpatientListRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabInpatientList().setVisible(false);
			tabOutpatientList().setVisible(false);
		}
		public void settabInpatientListEnabled(boolean value)
		{
			tabInpatientList().setEnabled(value);
		}
		public void settabOutpatientListEnabled(boolean value)
		{
			tabOutpatientList().setEnabled(value);
		}
		public void showtabInpatientList()
		{
			tabOutpatientList().setVisible(false);
			tabInpatientList().setVisible(true);
		}
		public void showtabOutpatientList()
		{
			tabInpatientList().setVisible(false);
			tabOutpatientList().setVisible(true);
		}

		public tabInpatientListContainer tabInpatientList()
		{
			return (tabInpatientListContainer)super.layers.get(0);
		}
		public tabOutpatientListContainer tabOutpatientList()
		{
			return (tabOutpatientListContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.admin.pas.vo.PASEventRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.admin.pas.vo.PASEventRefVo' of the global context variable 'Core.PasEvent' is not supported.");
		if(!context.isValidContextType(ims.correspondence.vo.CorrespondenceDetailsRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.correspondence.vo.CorrespondenceDetailsRefVo' of the global context variable 'Correspondence.CorrespondenceDetails' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientListsFilterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientListsFilterVo' of the global context variable 'Correspondence.PatientListSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Correspondence.contextMenuCorrespondenceDetails = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New Correspondence", true, false, new Integer(111108), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsAddItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsEditItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Correspondence", true, false, new Integer(103102), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsEditItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsViewItem = factory.createMenuItem(startControlID.intValue() + 3, "View Correspondence Details", true, false, new Integer(102223), false, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsViewItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsPreviewLetterItem = factory.createMenuItem(startControlID.intValue() + 4, "Preview Document", true, false, new Integer(102221), false, true);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsPreviewLetterItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsDocumentStatusItem = factory.createMenuItem(startControlID.intValue() + 5, "View Document Status History", true, false, new Integer(102202), false, true);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsDocumentStatusItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit Document Status History", true, false, new Integer(102150), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsViewDemographicsItem = factory.createMenuItem(startControlID.intValue() + 7, "View Demographics", true, false, new Integer(111106), false, true);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsViewDemographicsItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsVIEWCONTACTSItem = factory.createMenuItem(startControlID.intValue() + 8, "View Contacts", true, false, new Integer(111105), false, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsVIEWCONTACTSItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsSetLetterRequiredItem = factory.createMenuItem(startControlID.intValue() + 9, "Set Letter Required", true, false, new Integer(102209), false, true);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsSetLetterRequiredItem);
		contextMenus.Correspondence.contextMenuCorrespondenceDetailsSetNoLetterRequiredItem = factory.createMenuItem(startControlID.intValue() + 10, "Set No Letter Required", true, false, new Integer(111104), true, false);
		contextMenus.Correspondence.contextMenuCorrespondenceDetails.add(contextMenus.Correspondence.contextMenuCorrespondenceDetailsSetNoLetterRequiredItem);
		form.registerMenu(contextMenus.Correspondence.contextMenuCorrespondenceDetails);


		// Layer Clasess
		lyrPatientListsLayer m_lyrPatientListsLayer = (lyrPatientListsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrPatientListsLayer.class, this, factory);
		super.addLayer(m_lyrPatientListsLayer);
		m_lyrPatientListsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrPatientListsLayer lyrPatientLists()
	{
		return (lyrPatientListsLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Correspondence = new CorrespondenceForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				Demographics = new LocalFormName(102101);
			}
			public final FormName Demographics;
		}
		public final class CorrespondenceForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CorrespondenceForms()
			{
				AttendancesContacts = new LocalFormName(111107);
				CorrespondenceDetails = new LocalFormName(111109);
				DocumentStatusDlg = new LocalFormName(111122);
				ProcessReport = new LocalFormName(111119);
			}
			public final FormName AttendancesContacts;
			public final FormName CorrespondenceDetails;
			public final FormName DocumentStatusDlg;
			public final FormName ProcessReport;
		}

		public CoreForms Core;
		public CorrespondenceForms Correspondence;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedCorrespondenceInstance = new ims.framework.ContextVariable("SelectedCorrespondenceInstance", prefix + "_lv_Correspondence.PatientLists.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier + "");
			cxl_voCollConsultantAccess = new ims.framework.ContextVariable("voCollConsultantAccess", prefix + "_lv_Correspondence.PatientLists.__internal_x_context__voCollConsultantAccess_" + componentIdentifier + "");
			cxl_voCollClinicAccess = new ims.framework.ContextVariable("voCollClinicAccess", prefix + "_lv_Correspondence.PatientLists.__internal_x_context__voCollClinicAccess_" + componentIdentifier + "");
			cxl_voCollSpecialtyAccess = new ims.framework.ContextVariable("voCollSpecialtyAccess", prefix + "_lv_Correspondence.PatientLists.__internal_x_context__voCollSpecialtyAccess_" + componentIdentifier + "");
			cxl_patientListType = new ims.framework.ContextVariable("patientListType", prefix + "_lv_Correspondence.PatientLists.__internal_x_context__patientListType_" + componentIdentifier + "");
			cxl_previousScreens = new ims.framework.ContextVariable("previousScreens", prefix + "_lv_Correspondence.PatientLists.__internal_x_context__previousScreens_" + componentIdentifier + "");
			cxl_lastRecordFromGrid = new ims.framework.ContextVariable("lastRecordFromGrid", prefix + "_lv_Correspondence.PatientLists.__internal_x_context__lastRecordFromGrid_" + componentIdentifier + "");
			cxl_firstRecordFromGrid = new ims.framework.ContextVariable("firstRecordFromGrid", prefix + "_lv_Correspondence.PatientLists.__internal_x_context__firstRecordFromGrid_" + componentIdentifier + "");
			cxl_buttonStatus = new ims.framework.ContextVariable("buttonStatus", prefix + "_lv_Correspondence.PatientLists.__internal_x_context__buttonStatus_" + componentIdentifier + "");
		}
		
		public boolean getSelectedCorrespondenceInstanceIsNotNull()
		{
			return !cxl_SelectedCorrespondenceInstance.getValueIsNull(context);
		}
		public ims.correspondence.vo.CorrespondenceDetailsVo getSelectedCorrespondenceInstance()
		{
			return (ims.correspondence.vo.CorrespondenceDetailsVo)cxl_SelectedCorrespondenceInstance.getValue(context);
		}
		public void setSelectedCorrespondenceInstance(ims.correspondence.vo.CorrespondenceDetailsVo value)
		{
			cxl_SelectedCorrespondenceInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedCorrespondenceInstance = null;
		public boolean getvoCollConsultantAccessIsNotNull()
		{
			return !cxl_voCollConsultantAccess.getValueIsNull(context);
		}
		public ims.correspondence.vo.ConsultantAccessFullVoCollection getvoCollConsultantAccess()
		{
			return (ims.correspondence.vo.ConsultantAccessFullVoCollection)cxl_voCollConsultantAccess.getValue(context);
		}
		public void setvoCollConsultantAccess(ims.correspondence.vo.ConsultantAccessFullVoCollection value)
		{
			cxl_voCollConsultantAccess.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voCollConsultantAccess = null;
		public boolean getvoCollClinicAccessIsNotNull()
		{
			return !cxl_voCollClinicAccess.getValueIsNull(context);
		}
		public ims.correspondence.vo.ClinicAccessFullVoCollection getvoCollClinicAccess()
		{
			return (ims.correspondence.vo.ClinicAccessFullVoCollection)cxl_voCollClinicAccess.getValue(context);
		}
		public void setvoCollClinicAccess(ims.correspondence.vo.ClinicAccessFullVoCollection value)
		{
			cxl_voCollClinicAccess.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voCollClinicAccess = null;
		public boolean getvoCollSpecialtyAccessIsNotNull()
		{
			return !cxl_voCollSpecialtyAccess.getValueIsNull(context);
		}
		public ims.correspondence.vo.SpecialtyAccessVoCollection getvoCollSpecialtyAccess()
		{
			return (ims.correspondence.vo.SpecialtyAccessVoCollection)cxl_voCollSpecialtyAccess.getValue(context);
		}
		public void setvoCollSpecialtyAccess(ims.correspondence.vo.SpecialtyAccessVoCollection value)
		{
			cxl_voCollSpecialtyAccess.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voCollSpecialtyAccess = null;
		public boolean getpatientListTypeIsNotNull()
		{
			return !cxl_patientListType.getValueIsNull(context);
		}
		public ims.core.vo.lookups.PatientListType getpatientListType()
		{
			return (ims.core.vo.lookups.PatientListType)cxl_patientListType.getValue(context);
		}
		public void setpatientListType(ims.core.vo.lookups.PatientListType value)
		{
			cxl_patientListType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_patientListType = null;
		public boolean getpreviousScreensIsNotNull()
		{
			return !cxl_previousScreens.getValueIsNull(context);
		}
		public Integer getpreviousScreens()
		{
			return (Integer)cxl_previousScreens.getValue(context);
		}
		public void setpreviousScreens(Integer value)
		{
			cxl_previousScreens.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_previousScreens = null;
		public boolean getlastRecordFromGridIsNotNull()
		{
			return !cxl_lastRecordFromGrid.getValueIsNull(context);
		}
		public ims.correspondence.vo.PatientListRowVoCollection getlastRecordFromGrid()
		{
			return (ims.correspondence.vo.PatientListRowVoCollection)cxl_lastRecordFromGrid.getValue(context);
		}
		public void setlastRecordFromGrid(ims.correspondence.vo.PatientListRowVoCollection value)
		{
			cxl_lastRecordFromGrid.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_lastRecordFromGrid = null;
		public boolean getfirstRecordFromGridIsNotNull()
		{
			return !cxl_firstRecordFromGrid.getValueIsNull(context);
		}
		public ims.correspondence.vo.PatientListRowVoCollection getfirstRecordFromGrid()
		{
			return (ims.correspondence.vo.PatientListRowVoCollection)cxl_firstRecordFromGrid.getValue(context);
		}
		public void setfirstRecordFromGrid(ims.correspondence.vo.PatientListRowVoCollection value)
		{
			cxl_firstRecordFromGrid.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_firstRecordFromGrid = null;
		public boolean getbuttonStatusIsNotNull()
		{
			return !cxl_buttonStatus.getValueIsNull(context);
		}
		public ims.correspondence.vo.enums.ButtonStatus getbuttonStatus()
		{
			return (ims.correspondence.vo.enums.ButtonStatus)cxl_buttonStatus.getValue(context);
		}
		public void setbuttonStatus(ims.correspondence.vo.enums.ButtonStatus value)
		{
			cxl_buttonStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_buttonStatus = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CorrespondenceNamespace Correspondence = new CorrespondenceNamespace();
		public final class CorrespondenceNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class CorrespondenceDetails implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 1;
				public static final int Edit = 2;
				public static final int View = 3;
				public static final int PreviewLetter = 4;
				public static final int DocumentStatus = 5;
				public static final int EditDocumentStatusHistory = 6;
				public static final int ViewDemographics = 7;
				public static final int VIEWCONTACTS = 8;
				public static final int SetLetterRequired = 9;
				public static final int SetNoLetterRequired = 10;
			}
			public void disableAllCorrespondenceDetailsMenuItems()
			{
				this.contextMenuCorrespondenceDetailsAddItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsEditItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsViewItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsPreviewLetterItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsDocumentStatusItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsViewDemographicsItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsVIEWCONTACTSItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsSetLetterRequiredItem.setEnabled(false);
				this.contextMenuCorrespondenceDetailsSetNoLetterRequiredItem.setEnabled(false);
			}
			public void hideAllCorrespondenceDetailsMenuItems()
			{
				this.contextMenuCorrespondenceDetailsAddItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsEditItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsViewItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsPreviewLetterItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsDocumentStatusItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsViewDemographicsItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsVIEWCONTACTSItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsSetLetterRequiredItem.setVisible(false);
				this.contextMenuCorrespondenceDetailsSetNoLetterRequiredItem.setVisible(false);
			}
			private Menu contextMenuCorrespondenceDetails;
			public MenuItem getCorrespondenceDetailsAddItem()
			{
				return this.contextMenuCorrespondenceDetailsAddItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsAddItem;
			public MenuItem getCorrespondenceDetailsEditItem()
			{
				return this.contextMenuCorrespondenceDetailsEditItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsEditItem;
			public MenuItem getCorrespondenceDetailsViewItem()
			{
				return this.contextMenuCorrespondenceDetailsViewItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsViewItem;
			public MenuItem getCorrespondenceDetailsPreviewLetterItem()
			{
				return this.contextMenuCorrespondenceDetailsPreviewLetterItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsPreviewLetterItem;
			public MenuItem getCorrespondenceDetailsDocumentStatusItem()
			{
				return this.contextMenuCorrespondenceDetailsDocumentStatusItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsDocumentStatusItem;
			public MenuItem getCorrespondenceDetailsEditDocumentStatusHistoryItem()
			{
				return this.contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsEditDocumentStatusHistoryItem;
			public MenuItem getCorrespondenceDetailsViewDemographicsItem()
			{
				return this.contextMenuCorrespondenceDetailsViewDemographicsItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsViewDemographicsItem;
			public MenuItem getCorrespondenceDetailsVIEWCONTACTSItem()
			{
				return this.contextMenuCorrespondenceDetailsVIEWCONTACTSItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsVIEWCONTACTSItem;
			public MenuItem getCorrespondenceDetailsSetLetterRequiredItem()
			{
				return this.contextMenuCorrespondenceDetailsSetLetterRequiredItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsSetLetterRequiredItem;
			public MenuItem getCorrespondenceDetailsSetNoLetterRequiredItem()
			{
				return this.contextMenuCorrespondenceDetailsSetNoLetterRequiredItem;
			}
			private MenuItem contextMenuCorrespondenceDetailsSetNoLetterRequiredItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[81];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.PatientLists.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier, "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.PatientLists.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier, "BO-1052100001-PASEVENT", "PasEvent");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.PatientLists.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier, "BO-1052100001-CURRENTSTATUS", "CurrentStatus");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.PatientLists.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier, "BO-1052100001-SPECIALINTEREST", "SpecialInterest");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.PatientLists.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier, "BO-1052100001-DATEOFCLINIC", "DateOfClinic");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.PatientLists.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier, "BO-1052100001-ADMISSIONDATE", "AdmissionDate");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.PatientLists.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier, "BO-1052100001-DISCHARGEDATE", "DischargeDate");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.PatientLists.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier, "BO-1052100001-DICTATEDBYINITIALS", "DictatedByInitials");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.PatientLists.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier, "BO-1052100001-TYPEDBYINITIALS", "TypedByInitials");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.PatientLists.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier, "BO-1052100001-WASTYPEDWITHOUTCASENOTES", "WasTypedWithoutCaseNotes");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
