//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.35 build 2097.21013)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.patientlists;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.PasEventType;
import ims.core.vo.lookups.PatientListType;
import ims.correspondence.helper.DocumentDetailsInitialiser;
import ims.correspondence.helper.StatusHelper;
import ims.correspondence.vo.ClinicAccessFullVoCollection;
import ims.correspondence.vo.ConsultantAccessFullVoCollection;
import ims.correspondence.vo.CorrespondenceDetailsVo;
import ims.correspondence.vo.CorrespondenceStatusHistoryVo;
import ims.correspondence.vo.PasContactVo;
import ims.correspondence.vo.PasContactVoCollection;
import ims.correspondence.vo.PatientListRowVo;
import ims.correspondence.vo.PatientListRowVoCollection;
import ims.core.vo.PatientListsFilterVo;
import ims.correspondence.vo.SpecialtyAccessVoCollection;
import ims.correspondence.vo.enums.ButtonStatus;
import ims.correspondence.vo.lookups.Access;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.dto.ResultException;
import ims.framework.LayerBridge;
import ims.framework.controls.Button;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final String	NEXT		= "Next";
	private static final String	PREVIOUS	= "Previous";
	private static final int	TABIP		= 1;
	private static final int	TABOP		= 2;

	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		populateSearchCombos();
		if (form.getGlobalContext().Correspondence.getPatientListSearchCriteriaIsNotNull())
		{
			displayPatientSearchCriteria();
			populatePatientGrid();
		}
		else
		{
			// default to InPatient List view
			form.getLocalContext().setpatientListType(PatientListType.INPATIENTLIST);
		}

		hideAllButtons();
		updateSearchControlsState(true);
	}

	private void hideAllButtons()
	{
		form.lyrPatientLists().tabInpatientList().btn1().setVisible(false);
		form.lyrPatientLists().tabInpatientList().btn2().setVisible(false);
		form.lyrPatientLists().tabOutpatientList().btn3().setVisible(false);
		form.lyrPatientLists().tabOutpatientList().btn4().setVisible(false);
	}

	private void displayPatientSearchCriteria()
	{
		if (form.getGlobalContext().Correspondence.getPatientListSearchCriteria() == null || form.getGlobalContext().Correspondence.getPatientListSearchCriteria().getInPatientSearch() == null)
			return;

		PatientListsFilterVo voFilter = form.getGlobalContext().Correspondence.getPatientListSearchCriteria();
		if (voFilter.getInPatientSearch().booleanValue() == true)
		{
			displayInpatientSearchCriteria(voFilter);
			form.lyrPatientLists().showtabInpatientList();
			form.lyrPatientLists().tabInpatientList().imbIPSearch().setAsDefaultButton();
		}
		else
		{
			displayOutpatientSearchCriteria(voFilter);
			form.lyrPatientLists().showtabOutpatientList();
			form.lyrPatientLists().tabOutpatientList().imbOPSearch().setAsDefaultButton();
		}
	}

	private void displayOutpatientSearchCriteria(PatientListsFilterVo voFilter)
	{
		form.getLocalContext().setpatientListType(PatientListType.OUTPATIENTLIST);

		if (voFilter.getConsultantsIsNotNull() && voFilter.getConsultants().size() == 1)
			form.lyrPatientLists().tabOutpatientList().cmbOPConsultant().setValue(voFilter.getConsultants().get(0));

		if (voFilter.getSpecialtiesIsNotNull() && voFilter.getSpecialties().size() == 1)
			form.lyrPatientLists().tabOutpatientList().cmbOPSpecialty().setValue(voFilter.getSpecialties().get(0));

		if (voFilter.getClinicsIsNotNull() && voFilter.getClinics().size() == 1)
			form.lyrPatientLists().tabOutpatientList().cmbOPClinic().setValue(voFilter.getClinics().get(0));

		if (voFilter.getDateIsNotNull())
			form.lyrPatientLists().tabOutpatientList().dteOPClinicDate().setValue(voFilter.getDate());

		if (voFilter.getDocumentStatusIsNotNull())
			form.lyrPatientLists().tabOutpatientList().cmbOPDocumentStatus().setValue(voFilter.getDocumentStatus());

	}

	private void displayInpatientSearchCriteria(PatientListsFilterVo voFilter)
	{
		form.getLocalContext().setpatientListType(PatientListType.INPATIENTLIST);

		if (voFilter.getConsultantsIsNotNull() && voFilter.getConsultants().size() == 1)
			form.lyrPatientLists().tabInpatientList().qmbIPConsultant().setValue(voFilter.getConsultants().get(0));

		if (voFilter.getSpecialtiesIsNotNull() && voFilter.getSpecialties().size() == 1)
			form.lyrPatientLists().tabInpatientList().cmbIPSpecialty().setValue(voFilter.getSpecialties().get(0));

		if (voFilter.getWardIsNotNull())
			form.lyrPatientLists().tabInpatientList().cmbWard().setValue(voFilter.getWard());

		if (voFilter.getDateIsNotNull())
			form.lyrPatientLists().tabInpatientList().dteIPDischDate().setValue(voFilter.getDate());

		if (voFilter.getDocumentStatusIsNotNull())
			form.lyrPatientLists().tabInpatientList().cmbIPDocStatus().setValue(voFilter.getDocumentStatus());
	}

	protected void onGrdInPatientsSelectionChanged() throws PresentationLogicException
	{
		selectionChanged(PatientListType.INPATIENTLIST);
	}

	protected void onGrdOutPatientsSelectionChanged() throws PresentationLogicException
	{
		selectionChanged(PatientListType.OUTPATIENTLIST);
	}

	protected void onImbIPClearClick() throws PresentationLogicException
	{
		clearScreen(PatientListType.INPATIENTLIST);
		// WDEV-2757
		form.getGlobalContext().Core.setPatientShort(null);
		form.getLocalContext().setpreviousScreens(0);
		form.getLocalContext().setfirstRecordFromGrid(null);
		form.getLocalContext().setlastRecordFromGrid(null);

		showHideButtons(false, false, true, form.lyrPatientLists().tabInpatientList().btn1(), form.lyrPatientLists().tabInpatientList().btn2());

		engine.setPatientInfo("Please enter Patient ID or Surname and/or Forename");
		form.lyrPatientLists().tabInpatientList().lblIPTotal().setValue("Total : " + form.lyrPatientLists().tabInpatientList().grdIPList().getRows().size());
	}

	protected void onImbOPClearClick() throws PresentationLogicException
	{
		clearScreen(PatientListType.OUTPATIENTLIST);
		// WDEV-2757
		form.getGlobalContext().Core.setPatientShort(null);
		engine.setPatientInfo("Please enter Patient ID or Surname and/or Forename");
		form.lyrPatientLists().tabOutpatientList().lblOPTotal().setValue("Total : " + form.lyrPatientLists().tabOutpatientList().grdOPList().getRows().size());
	}

	private void showHideNext(PatientListsFilterVo voFilter)
	{
		PatientListsFilterVo filter = updateNextFilter(voFilter);
		PasContactVoCollection voColl = listIPPasContactColl(filter);

		if (voColl != null)
		{
			if (form.getLocalContext().getpreviousScreensIsNotNull() && form.getLocalContext().getpreviousScreens() > 0)
				showHideButtons(true, true, false, form.lyrPatientLists().tabInpatientList().btn1(), form.lyrPatientLists().tabInpatientList().btn2());
			else
				showHideButtons(true, false, false, form.lyrPatientLists().tabInpatientList().btn1(), form.lyrPatientLists().tabInpatientList().btn2());
		}
	}

	private PatientListsFilterVo updateNextFilter(PatientListsFilterVo voFilter)
	{
		PatientListRowVo s = form.lyrPatientLists().tabInpatientList().grdIPList().getRows().get(0).getValue();

		voFilter.setDate(s.getPasContact().getDischargeDateTime().getDate());
		voFilter.setDateEnd(form.lyrPatientLists().tabInpatientList().dteIPDischEndDate().getValue());

		return voFilter;
	}

	private PatientListsFilterVo updatePreviousFilter(PatientListsFilterVo voFilter)
	{
		int i = -1;
		PatientListRowVo e = null;
		PatientListRowVo s = null;

		if (form.getLocalContext().getpreviousScreensIsNotNull())
		{
			i = form.getLocalContext().getpreviousScreens();
		}
		// First screen
		if (i == 0)
		{
			s = form.getLocalContext().getfirstRecordFromGrid().get(0);
			e = form.getLocalContext().getlastRecordFromGrid().get(0);
		}
		else
		{
			s = form.getLocalContext().getfirstRecordFromGrid().get(i);
			e = form.getLocalContext().getlastRecordFromGrid().get(i);
		}

		voFilter.setDate(e.getPasContact().getDischargeDateTime().getDate());
		voFilter.setDateEnd(s.getPasContact().getDischargeDateTime().getDate().addDay(1));

		if (form.getLocalContext().getpreviousScreens() == 0)
			voFilter.setDate(form.lyrPatientLists().tabInpatientList().dteIPDischDate().getValue());

		return voFilter;
	}

	private void showHideButtons(boolean showNext, boolean showPrevious, boolean hideAll, Button btnNext, Button btnPrevious)
	{
		if (form.lyrPatientLists().tabInpatientList().isVisible())
		{
			setBtnStatus(ButtonStatus.NEXT);
			btnNext.setText(NEXT);
			btnNext.setTooltip(NEXT + " " + maxContactSearch() + " records");
			btnPrevious.setText(PREVIOUS);
			btnPrevious.setTooltip(PREVIOUS + " " + maxContactSearch() + " records");
			btnNext.setVisible(showNext);
			btnPrevious.setVisible(showPrevious);

			if (showNext == false && !hideAll)
			{
				setBtnStatus(ButtonStatus.PREVIOUS);
				btnNext.setText(PREVIOUS);
				btnNext.setTooltip(PREVIOUS + maxContactSearch() + " records");
				btnNext.setVisible(!showNext);
				btnPrevious.setVisible(showNext);
			}
		}
	}

	protected void onImbIPSearchClick() throws PresentationLogicException
	{

		form.getContextMenus().Correspondence.hideAllCorrespondenceDetailsMenuItems();
		form.getGlobalContext().Correspondence.setPatientListSearchCriteria(null);
		form.getLocalContext().setpreviousScreens(0);
		int maxContacts = maxContactSearch();

		form.getLocalContext().setpreviousScreens(0);
		form.getLocalContext().setfirstRecordFromGrid(null);
		form.getLocalContext().setlastRecordFromGrid(null);

		PatientListsFilterVo voFilter = populateIPSearchCriteria();
		if (voFilter != null)
		{
			PasContactVoCollection voColl = listIPPasContactColl(voFilter);
			populateInpatientGrid(voFilter, voColl);
			if ((voColl != null) && (voColl.size() != 0))
				saveFirstAndLastRecords(TABIP);
			if ((voColl != null) && (voColl.size() == maxContacts))
			{
				showHideNext(voFilter);
			}
			else
			{
				showHideButtons(false, false, true, form.lyrPatientLists().tabInpatientList().btn1(), form.lyrPatientLists().tabInpatientList().btn2());
			}
		}
	}

	protected void onImbOPSearchClick() throws PresentationLogicException
	{
		form.getGlobalContext().Correspondence.setPatientListSearchCriteria(null);
		form.getLocalContext().setpreviousScreens(0);
		int maxContacts = maxContactSearch();

		form.getLocalContext().setpreviousScreens(0);
		form.getLocalContext().setfirstRecordFromGrid(null);
		form.getLocalContext().setlastRecordFromGrid(null);

		PatientListsFilterVo voFilter = populateOPSearchCriteria();
		if (voFilter != null)
		{
			PasContactVoCollection voColl = listOPPasContactColl(voFilter);
			populateOutPatientGrid(voFilter, voColl);
			if ((voColl != null) && (voColl.size() != 0))
				saveFirstAndLastRecords(TABOP);
			if ((voColl != null) && (voColl.size() == maxContacts))
			{
				showHideNext(voFilter);
			}
			else
			{
				showHideButtons(false, false, true, form.lyrPatientLists().tabOutpatientList().btn3(), form.lyrPatientLists().tabOutpatientList().btn4());
			}
		}
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getGlobalContext().Core.getPatientShortIsNotNull() && getPasContact() != null)
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.VIEWCONTACTS :
					viewPASContacts();
				break;
				case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.ViewDemographics :
					viewDemographics();
				break;
				case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.PreviewLetter :
					previewDischargeLetter();
				break;
				case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.Add :
					addDocumentDetails();
				break;
				case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.View :
					viewDocumentDetails();
				break;
				case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.DocumentStatus :
					viewDocumentStatusHistory();
				break;
				case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.EditDocumentStatusHistory :
					viewDocumentStatusHistory();
				break;
				case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.SetLetterRequired :
					setLetterRequired();
				break;
				case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.SetNoLetterRequired :
					setNoLetterRequired();
				break;

			}
		}
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Correspondence.AttendancesContacts) && result.equals(DialogResult.OK))
			engine.open(form.getGlobalContext().Correspondence.getOpenForm());
		else if (formName.equals(form.getForms().Correspondence.DocumentStatusDlg) && result.equals(DialogResult.OK))
			populatePatientGrid();
	}

	/**
	 * @param collection
	 * 
	 */
	private void populateClinicCombo(ClinicAccessFullVoCollection voCollClinicAccess)
	{
		form.getLocalContext().setvoCollClinicAccess(voCollClinicAccess);

		if (voCollClinicAccess != null)
		{
			for (int i = 0; i < voCollClinicAccess.size(); i++)
			{
				if (voCollClinicAccess.get(i) != null && voCollClinicAccess.get(i).getAccessRightIsNotNull())
				{
					if (voCollClinicAccess.get(i).getAccessRight().equals(Access.READWRITE))
						form.lyrPatientLists().tabOutpatientList().cmbOPClinic().newRow(voCollClinicAccess.get(i), voCollClinicAccess.get(i).getClinic().getClinicName(), Color.Black);
					else
						form.lyrPatientLists().tabOutpatientList().cmbOPClinic().newRow(voCollClinicAccess.get(i), voCollClinicAccess.get(i).getClinic().getClinicName(), Color.Blue);
				}
			}
		}
	}

	/**
	 * @param voCollSpecialtyAccess
	 * @author dhickey Populates the Specialty Access combos on both in and out patient lists
	 */
	private void populateSpecialtyCombos(SpecialtyAccessVoCollection voCollSpecialtyAccess)
	{
		form.getLocalContext().setvoCollSpecialtyAccess(voCollSpecialtyAccess);
		if (voCollSpecialtyAccess != null)
		{
			for (int i = 0; i < voCollSpecialtyAccess.size(); i++)
			{
				if (voCollSpecialtyAccess.get(i) != null && voCollSpecialtyAccess.get(i).getAccessRightIsNotNull())
				{
					if (voCollSpecialtyAccess.get(i).getAccessRight().equals(Access.READWRITE))
					{
						form.lyrPatientLists().tabInpatientList().cmbIPSpecialty().newRow(voCollSpecialtyAccess.get(i), voCollSpecialtyAccess.get(i).getSpecialty().getText(), Color.Black);
						form.lyrPatientLists().tabOutpatientList().cmbOPSpecialty().newRow(voCollSpecialtyAccess.get(i), voCollSpecialtyAccess.get(i).getSpecialty().getText(), Color.Black);
					}
					else
					{
						form.lyrPatientLists().tabInpatientList().cmbIPSpecialty().newRow(voCollSpecialtyAccess.get(i), voCollSpecialtyAccess.get(i).getSpecialty().getText(), Color.Blue);
						form.lyrPatientLists().tabOutpatientList().cmbOPSpecialty().newRow(voCollSpecialtyAccess.get(i), voCollSpecialtyAccess.get(i).getSpecialty().getText(), Color.Blue);
					}
				}
			}
		}
	}

	/**
	 * 
	 */
	private void populateWardCombo(String wardName)
	{
		form.lyrPatientLists().tabInpatientList().cmbWard().clear();
		LocShortMappingsVoCollection voCollWards = domain.listActiveWards(wardName);
		if (voCollWards != null)
		{
			for (int i = 0; i < voCollWards.size(); i++)
				form.lyrPatientLists().tabInpatientList().cmbWard().newRow(voCollWards.get(i), voCollWards.get(i).getName());
		}
	}

	private void populatePatientGrid()
	{
		if (form.getGlobalContext().Correspondence.getPatientListSearchCriteria() == null)
			return;

		PatientListsFilterVo voSearchCriteria = form.getGlobalContext().Correspondence.getPatientListSearchCriteria();

		if (voSearchCriteria.getInPatientSearchIsNotNull())
		{

			if (voSearchCriteria.getInPatientSearch().equals(Boolean.TRUE))
				populateInpatientGrid(voSearchCriteria, listIPPasContactColl(voSearchCriteria));
			else
				populateOutPatientGrid(voSearchCriteria, listOPPasContactColl(voSearchCriteria));
		}

	}

	/**
	 * 
	 */
	private void clearScreen(PatientListType patientListType)
	{
		if (patientListType.equals(PatientListType.INPATIENTLIST))
		{
			form.lyrPatientLists().tabInpatientList().cmbIPDocStatus().setValue(null);
			form.lyrPatientLists().tabInpatientList().cmbIPSpecialty().setValue(null);
			form.lyrPatientLists().tabInpatientList().cmbWard().setValue(null);
			form.lyrPatientLists().tabInpatientList().dteIPDischDate().setValue(null);
			form.lyrPatientLists().tabInpatientList().dteIPDischEndDate().setValue(null);
			form.lyrPatientLists().tabInpatientList().qmbIPConsultant().setValue(null);
			form.lyrPatientLists().tabInpatientList().grdIPList().getRows().clear();
			form.lyrPatientLists().tabInpatientList().lblIPTotal().setValue("Total : 0");

		}
		else if (patientListType.equals(PatientListType.OUTPATIENTLIST))
		{
			form.lyrPatientLists().tabOutpatientList().cmbOPDocumentStatus().setValue(null);
			form.lyrPatientLists().tabOutpatientList().cmbOPSpecialty().setValue(null);
			form.lyrPatientLists().tabOutpatientList().cmbOPClinic().setValue(null);
			form.lyrPatientLists().tabOutpatientList().dteOPClinicDate().setValue(null);
			form.lyrPatientLists().tabOutpatientList().dteOPClinicEndDate().setValue(null);
			form.lyrPatientLists().tabOutpatientList().cmbOPConsultant().setValue(null);
			form.lyrPatientLists().tabOutpatientList().grdOPList().getRows().clear();
			form.lyrPatientLists().tabOutpatientList().lblOPTotal().setValue("Total : 0");
		}
		hideAllButtons();
		form.getGlobalContext().Correspondence.setPatientListSearchCriteria(null);
	}

	/**
	 * @param collection
	 */
	private void populateInpatientGrid(PatientListsFilterVo voSearchCriteria, PasContactVoCollection voPasContactColl)
	{
		if (voSearchCriteria == null || voPasContactColl == null)
			return;

		form.getGlobalContext().Correspondence.setPatientListSearchCriteria(voSearchCriteria);

		form.lyrPatientLists().tabInpatientList().grdIPList().getRows().clear();
		PasContactVo voPasContact;
		GenForm.lyrPatientListsLayer.tabInpatientListContainer.grdIPListRow row = null;
		if (voPasContactColl != null)
		{

			DocumentDetailsInitialiser dd = new DocumentDetailsInitialiser(form.getLocalContext().getvoCollConsultantAccess(), null, form.getLocalContext().getvoCollSpecialtyAccess());
			dd.set_InPatientList(true);

			for (int i = 0; i < voPasContactColl.size(); i++)
			{
				voPasContact = voPasContactColl.get(i);
				row = form.lyrPatientLists().tabInpatientList().grdIPList().getRows().newRow();

				row.setcolContactNo(voPasContact.getContactNumber());

				if (voPasContact.getPatient().getName() != null)
				{
					row.setcolSurname(voPasContact.getPatient().getName().getSurname());
					row.setcolForename(voPasContact.getPatient().getName().getForename());
				}

				if (voPasContact.getPatient().getDisplayId() != null)
					row.setcolChartNo(voPasContact.getPatient().getDisplayId().getValue());

				if (voPasContact.getPatient().getDob() != null)
					row.setcolDOB(voPasContact.getPatient().getDob());// .toString());

				if (voPasContact.getDischargeDateTime() != null)
					row.setcolDischargeDate(voPasContact.getDischargeDateTime().toString());

				if (voPasContact.getPatient().getSex() != null)
					row.setcolSex(voPasContact.getPatient().getSex().toString());

				if (voPasContact.getLocation() != null)
					row.setcolWard(voPasContact.getLocation().getName());

				if (voPasContact.getConsultant() != null)
					row.setcolConsultant(voPasContact.getConsultant().getName().toString());

				if (voPasContact.getPatient().getIsDead() != null && voPasContact.getPatient().getIsDead().booleanValue())
					row.setBackColor(Color.getColor(ConfigFlag.UI.RIP_COLOUR.toString()));

				if (voPasContact.getDocumentStatus() != null)
				{
					row.setcolStatus(voPasContact.getDocumentStatus().getImage());
					row.setTooltipForcolStatus(voPasContact.getDocumentStatus().getText());
				}

				if (voPasContact.getPatient().getIsDead().booleanValue())
					row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());

				PatientListRowVo voPatientListRow = new PatientListRowVo();
				voPatientListRow.setPasContact(voPasContact);
				row.setValue(voPatientListRow);

				Access lkpAccess = dd.getUserAccess(voPasContact);
				if (lkpAccess != null)
					row.setcolAccess(lkpAccess);
			}

			if (voPasContactColl.size() == 0)
			{
				form.lyrPatientLists().tabInpatientList().lblIPTotal().setValue("Total : 0");
				engine.showMessage("No matching inpatients found.");
			}
			else
			{
				if (form.getLocalContext().getpreviousScreensIsNotNull() && form.getLocalContext().getpreviousScreens() != 0)
				{
					int i = form.getLocalContext().getpreviousScreens();
					form.lyrPatientLists().tabInpatientList().lblIPTotal().setValue("Total : " + (voPasContactColl.size() + (i * maxContactSearch())));
				}
				else
				{
					form.lyrPatientLists().tabInpatientList().lblIPTotal().setValue("Total : " + voPasContactColl.size());
				}
			}
		}
	}

	private PasContactVoCollection listIPPasContactColl(PatientListsFilterVo voSearchCriteria)
	{
		PasContactVoCollection voPasContactColl;

		try
		{

			voPasContactColl = domain.listInPatients(voSearchCriteria);
		}

		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.toString());
			return null;
		}
		return voPasContactColl;
	}

	private PasContactVoCollection listOPPasContactColl(PatientListsFilterVo voSearchCriteria)
	{
		PasContactVoCollection voPasContactColl;
		
		try
		{
			// WDEV-2773
			voPasContactColl = domain.listOutPatients(voSearchCriteria.getDate(), (voSearchCriteria.getDateEndIsNotNull() ? voSearchCriteria.getDateEnd() : null), voSearchCriteria.getClinics(), voSearchCriteria.getConsultants(), voSearchCriteria.getSpecialties(), voSearchCriteria.getDocumentStatus());
		}

		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.toString());
			return null;
		}
		catch (DomainRuntimeException dre)
		{
			engine.showMessage(dre.getCause().getMessage().toString());
			return null;
		}
		return voPasContactColl;
		

	}

	private void populateOutPatientGrid(PatientListsFilterVo voSearchCriteria, PasContactVoCollection voPasContactColl)
	{
		if (voSearchCriteria == null || voPasContactColl == null)
			return;

		form.getGlobalContext().Correspondence.setPatientListSearchCriteria(voSearchCriteria);

		form.lyrPatientLists().tabOutpatientList().grdOPList().getRows().clear();
		PasContactVo voPasContact;
		GenForm.lyrPatientListsLayer.tabOutpatientListContainer.grdOPListRow row = null;
		if (voPasContactColl != null)
		{
			for (int i = 0; i < voPasContactColl.size(); i++)
			{
				DocumentDetailsInitialiser dd = new DocumentDetailsInitialiser(form.getLocalContext().getvoCollConsultantAccess(), form.getLocalContext().getvoCollClinicAccess(), form.getLocalContext().getvoCollSpecialtyAccess());

				dd.set_InPatientList(false);

				voPasContact = voPasContactColl.get(i);
				row = form.lyrPatientLists().tabOutpatientList().grdOPList().getRows().newRow();

				row.setcolContactNo(voPasContact.getContactNumber());

				if (voPasContact.getPatient().getName() != null)
				{
					row.setcolSurname(voPasContact.getPatient().getName().getSurname());
					row.setcolForename(voPasContact.getPatient().getName().getForename());
				}

				if (voPasContact.getPatient().getDisplayId() != null)
					row.setcolChartNo(voPasContact.getPatient().getDisplayId().getValue());

				if (voPasContact.getPatient().getDob() != null)
					row.setcolDOB(voPasContact.getPatient().getDob());// .toString());

				if (voPasContact.getAppointmentDateTime() != null)
					row.setcolClinicDate(voPasContact.getAppointmentDateTime().toString());

				if (voPasContact.getPatient().getSex() != null)
					row.setcolSex(voPasContact.getPatient().getSex().toString());

				if (voPasContact.getLocation() != null)
					row.setcolClinic(voPasContact.getLocation().getName());

				if (voPasContact.getConsultant() != null)
					row.setcolConsultant(voPasContact.getConsultant().getName().toString());

				if (voPasContact.getPatient().getIsDead() != null && voPasContact.getPatient().getIsDead().booleanValue())
					row.setBackColor(Color.getColor(ConfigFlag.UI.RIP_COLOUR.toString()));

				if (voPasContact.getDocumentStatus() != null)
				{
					row.setcolStatus(voPasContact.getDocumentStatus().getImage());
					row.setTooltipForcolStatus(voPasContact.getDocumentStatus().getText());
				}

				Access lkpAccess = dd.getUserAccess(voPasContact);
				if (lkpAccess != null)
					row.setcolAccess(lkpAccess);

				if (voPasContact.getPatient().getIsDead().booleanValue())
					row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());

				PatientListRowVo voPatientListRow = new PatientListRowVo();
				voPatientListRow.setPasContact(voPasContact);
				row.setValue(voPatientListRow);
			}

			if (voPasContactColl.size() == 0)
			{
				form.lyrPatientLists().tabOutpatientList().lblOPTotal().setValue("Total : 0");
				engine.showMessage("No matching outpatients found.");
			}
			else
			{
				form.lyrPatientLists().tabOutpatientList().lblOPTotal().setValue("Total : " + voPasContactColl.size());
			}
		}

	}

	private void setLetterRequired()
	{
		setLetterRequired(true);
	}

	private void setNoLetterRequired()
	{
		setLetterRequired(false);
	}

	private PasContactVo getPasContact()
	{
		PasContactVo voPasContact = null;

		if (form.getLocalContext().getpatientListType().equals(PatientListType.INPATIENTLIST) && form.lyrPatientLists().tabInpatientList().grdIPList().getSelectedRowIndex() >= 0 && form.lyrPatientLists().tabInpatientList().grdIPList().getValue() != null)

			voPasContact = form.lyrPatientLists().tabInpatientList().grdIPList().getValue().getPasContact();

		if (form.getLocalContext().getpatientListType().equals(PatientListType.OUTPATIENTLIST) && form.lyrPatientLists().tabOutpatientList().grdOPList().getSelectedRowIndex() >= 0 && form.lyrPatientLists().tabOutpatientList().grdOPList().getValue() != null)

			voPasContact = form.lyrPatientLists().tabOutpatientList().grdOPList().getValue().getPasContact();

		return voPasContact;
	}

	private void setLetterRequired(boolean bLetterRequired)
	{
		DocumentStatus lkpDocumentStatus = bLetterRequired ? DocumentStatus.LETTERREQUIRED : DocumentStatus.NOLETTERREQUIRED;

		CorrespondenceDetailsVo voCorrespondenceDetails = null;
		CorrespondenceStatusHistoryVo cspStatus = new CorrespondenceStatusHistoryVo();
		cspStatus.setStatus(lkpDocumentStatus);
		cspStatus.setMos((MemberOfStaffShortVo) domain.getMosUser());// wdev-2677

		if (form.getLocalContext().getSelectedCorrespondenceInstanceIsNotNull())
		{
			voCorrespondenceDetails = form.getLocalContext().getSelectedCorrespondenceInstance();
		}
		else
		{

			DocumentDetailsInitialiser docDetails = new DocumentDetailsInitialiser((MemberOfStaffShortVo) domain.getMosUser(), domain.getPasEvent(form.getGlobalContext().Core.getPasEvent()));
			voCorrespondenceDetails = docDetails.get_DocumentDetails();
			if (null == voCorrespondenceDetails)
			{
				engine.showMessage("Error occurred creating Document Details : " + docDetails.getErrorMessage());
				return;
			}

		}

		cspStatus.setTemplateName(StatusHelper.getGenericTemplateName());

		if (StatusHelper.canUpdateStatus(voCorrespondenceDetails.getCurrentStatus(), lkpDocumentStatus))
		{
			voCorrespondenceDetails.getCspStatusHistory().add(cspStatus);
		}
		else
		{
			engine.showMessage("Cannot change status from " + voCorrespondenceDetails.getCurrentStatus().toString() + " to " + lkpDocumentStatus.toString());
			return;
		}

		voCorrespondenceDetails.setCurrentStatus(lkpDocumentStatus);

		String[] sArrErrors = voCorrespondenceDetails.validate();
		if (sArrErrors != null)
		{
			engine.showErrors(sArrErrors);
			return;
		}

		try
		{
			voCorrespondenceDetails = domain.saveCorrespondenceDetails(voCorrespondenceDetails, domain.getPasEvent(form.getGlobalContext().Core.getPasEvent()).getEventType());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage("Pas status not updated : " + ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		form.getGlobalContext().Correspondence.setCorrespondenceDetails(voCorrespondenceDetails);
		form.getLocalContext().setSelectedCorrespondenceInstance(voCorrespondenceDetails);

		populatePatientGrid();
	}

	private void viewDocumentDetails()
	{
		form.getGlobalContext().Correspondence.setGenerateFormMode(FormMode.VIEW);
		engine.open(form.getForms().Correspondence.CorrespondenceDetails);
	}

	/**
	 * @param voPasContact
	 * 
	 */
	private void addDocumentDetails()
	{
		form.getGlobalContext().Correspondence.setGenerateFormMode(FormMode.EDIT);
		engine.open(form.getForms().Correspondence.CorrespondenceDetails);
	}

	/**
	 * 
	 */
	private void viewDemographics()
	{
		engine.open(form.getForms().Core.Demographics);
	}

	/**
	 * 
	 */
	private void viewPASContacts()
	{
		engine.open(form.getForms().Correspondence.AttendancesContacts);
	}

	/**
	 * 
	 */
	private void viewDocumentStatusHistory()
	{
		if (form.getLocalContext().getSelectedCorrespondenceInstanceIsNotNull() && form.getLocalContext().getSelectedCorrespondenceInstance().getCspStatusHistoryIsNotNull())
		{
			form.getGlobalContext().Correspondence.setcurrentCspStatusHistory(form.getLocalContext().getSelectedCorrespondenceInstance().getCspStatusHistory());
			engine.open(form.getForms().Correspondence.DocumentStatusDlg);
		}
	}

	/**
	 * 
	 */
	private void previewDischargeLetter()
	{
		if (form.getGlobalContext().Correspondence.getCorrespondenceDetailsIsNotNull() && form.getGlobalContext().Correspondence.getCorrespondenceDetails().getID_CorrespondenceDetailsIsNotNull())
		{
			form.getGlobalContext().Core.setDocumentID(domain.getCurrentDocument(form.getGlobalContext().Correspondence.getCorrespondenceDetails()).getID_Document());
			engine.open(form.getForms().Correspondence.ProcessReport);
		}
	}

	/**
	 * 
	 */
	private void setContextVariablesForSelection(PatientListType patientListType)
	{
		clearContextVariables();
		PatientListRowVo voInpatientListRow = null, voOutPatientListRow = null;
		PatientShort voPatientShort = null;
		PasContactVo voPasContact = null;
		PASEventRefVo voRefPasEvent = null;

		if (patientListType.equals(PatientListType.INPATIENTLIST))
		{
			if (form.lyrPatientLists().tabInpatientList().grdIPList().getSelectedRowIndex() >= 0 && form.lyrPatientLists().tabInpatientList().grdIPList().getRows().get(form.lyrPatientLists().tabInpatientList().grdIPList().getSelectedRowIndex()).getValue() != null)
			{
				voInpatientListRow = form.lyrPatientLists().tabInpatientList().grdIPList().getSelectedRow().getValue();
				voPasContact = voInpatientListRow.getPasContact();
				voPatientShort = voInpatientListRow.getPasContact().getPatient();
				voRefPasEvent = voInpatientListRow.getPasEvent();
			}
		}

		else if (patientListType.equals(PatientListType.OUTPATIENTLIST))
		{
			if (form.lyrPatientLists().tabOutpatientList().grdOPList().getSelectedRowIndex() >= 0 && form.lyrPatientLists().tabOutpatientList().grdOPList().getRows().get(form.lyrPatientLists().tabOutpatientList().grdOPList().getSelectedRowIndex()).getValue() != null)
			{
				voOutPatientListRow = form.lyrPatientLists().tabOutpatientList().grdOPList().getSelectedRow().getValue();
				voPasContact = voOutPatientListRow.getPasContact();
				voPatientShort = voOutPatientListRow.getPasContact().getPatient();
				voRefPasEvent = voOutPatientListRow.getPasEvent();
			}
		}

		Patient voPatient = setPatientContext(voPatientShort);

		if (voRefPasEvent == null && voPasContact != null)
		{
			voRefPasEvent = getOrCreatePasEventForPasContact(voPasContact, voPatient, patientListType);

			if (patientListType.equals(PatientListType.INPATIENTLIST))
			{
				voInpatientListRow.setPasContact(voPasContact);
				voInpatientListRow.setPasEvent(voRefPasEvent);
				form.lyrPatientLists().tabInpatientList().grdIPList().setValue(voInpatientListRow);
			}
			else
			{
				voOutPatientListRow.setPasContact(voPasContact);
				voOutPatientListRow.setPasEvent(voRefPasEvent);
				form.lyrPatientLists().tabOutpatientList().grdOPList().setValue(voOutPatientListRow);
			}

			form.getGlobalContext().Core.setPasEvent(voRefPasEvent);

		}
		else
			form.getGlobalContext().Core.setPasEvent(voRefPasEvent);

		// LOGGER.warn("Start: domain.getCorrespondenceDetailsByPasEvent :" + getDateTime());
		form.getLocalContext().setSelectedCorrespondenceInstance(domain.getCorrespondenceDetailsByPasEvent(voRefPasEvent));
		// LOGGER.warn("End: domain.getCorrespondenceDetailsByPasEvent :" + getDateTime());
		form.getGlobalContext().Correspondence.setCorrespondenceDetails(form.getLocalContext().getSelectedCorrespondenceInstance());

		// LOGGER.warn("End: setContextVariablesForSelection :" + getDateTime());
	}

	private Patient setPatientContext(PatientShort voPatientShort)
	{
		Patient voPatient = null;
		if (voPatientShort != null)
		{
			try
			{
				voPatient = domain.getPatient(voPatientShort);
			}
			catch (StaleObjectException e)
			{
				// Try a second time. Only then fail.
				try
				{
					voPatient = domain.getPatient(voPatientShort);
				}
				catch (StaleObjectException e1)
				{
					engine.showMessage("Failed to retrieve Patient due to StaleObjectException");
				}
			}

			if (voPatient.getIsDead() != null && voPatient.getIsDead().booleanValue())
			{
				engine.setPatientInfo(voPatient.getPatientInfo(), Color.getColor(ConfigFlag.UI.RIP_INFO_COLOUR.toString()));
			}
			else
			{
				engine.setPatientInfo(voPatient.getPatientInfo());
			}

			// This is required to ensure the Patient in the global context
			// has an internal hibernate assigned id.
			form.getGlobalContext().Core.setPatientShort(voPatient);
		}

		return voPatient;
	}

	private PASEventRefVo getOrCreatePasEventForPasContact(PasContactVo voPasContact, Patient voPatientShort, PatientListType patientListType)
	{
		if (voPasContact == null)
			throw new CodingRuntimeException("Pas Contact not supplied");

		PasEventVo voPasEvent = null;
		DateTime eventDateTime = null;

		if (patientListType.equals(PatientListType.INPATIENTLIST))
		{
			eventDateTime = voPasContact.getDischargeDateTime();
		}
		else if (patientListType.equals(PatientListType.OUTPATIENTLIST))
		{
			eventDateTime = voPasContact.getAppointmentDateTime();
		}

		if (voPatientShort.getID_PatientIsNotNull())
		{
			try
			{
				voPasEvent = domain.getPasEvent(eventDateTime, voPatientShort, voPasContact.getContactNumber());
			}

			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return null;
			}
		}

		if (voPasEvent != null)
		{
			CorrespondenceDetailsVo voCorrespondenceDetails = domain.getCorrespondenceDetailsByPasEvent(voPasEvent);
			if (voCorrespondenceDetails != null)
			{
				form.getGlobalContext().Correspondence.setCorrespondenceDetails(voCorrespondenceDetails);
				form.getGlobalContext().Correspondence.setDocDetailIdReportSeed(voCorrespondenceDetails.getID_CorrespondenceDetails());
				form.getLocalContext().setSelectedCorrespondenceInstance(voCorrespondenceDetails);
			}
		}
		else
		{
			try
			{
				voPasEvent = domain.createPasEvent(eventDateTime, voPatientShort, voPasContact);
				// Box the patient into the pascontact
				voPasContact.setPatient(voPasEvent.getPatient());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage("Error creating PasEvent for this contact " + ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return null;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return null;
			}
		}

		if (patientListType.equals(PatientListType.INPATIENTLIST))
		{
			voPasEvent.setEventType(PasEventType.INPATIENT);
		}
		else if (patientListType.equals(PatientListType.OUTPATIENTLIST))
		{
			voPasEvent.setEventType(PasEventType.OUTPATIENT);
		}

		return voPasEvent;
	}

	private void clearContextVariables()
	{
		form.getLocalContext().setSelectedCorrespondenceInstance(null);

		form.getGlobalContext().Correspondence.setCorrespondenceDetails(null);
		form.getGlobalContext().Correspondence.setDocDetailIdReportSeed(null);
		form.getGlobalContext().Correspondence.setGenerateFormMode(null);
		form.getGlobalContext().Core.setPasEvent(null);
		form.getGlobalContext().Core.setPatientShort(null);
	}

	private void selectionChanged(PatientListType patientListType)
	{
		setContextVariablesForSelection(patientListType);
		updateControlsState();
		if (form.isReadOnly())
			engine.showMessage("Read only form");
	}

	private void setContextMenusForReadOnlyAccess()
	{
		form.getContextMenus().Correspondence.getCorrespondenceDetailsVIEWCONTACTSItem().setVisible(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsVIEWCONTACTSItem().setEnabled(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewDemographicsItem().setVisible(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewDemographicsItem().setEnabled(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewItem().setVisible(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewItem().setEnabled(true);
	}

	private void setContextMenusForNullAccess()
	{
		form.getContextMenus().Correspondence.hideAllCorrespondenceDetailsMenuItems();
		// form.getContextMenus().getCorrespondenceDetailsViewDemographicsItem().setVisible(true);
	}

	private PatientListsFilterVo populateIPSearchCriteria()
	{
		PatientListsFilterVo voSearchCriteria = new PatientListsFilterVo();
		voSearchCriteria.setInPatientSearch(new Boolean(true));

		if (ConfigFlag.UI.USE_PAS_CONTACT_FOR_CORRESPONDENCE.getValue())
		{
			if (form.lyrPatientLists().tabInpatientList().dteIPDischDate().getValue() == null)
			{
				engine.showMessage("'Discharge Date On/From' is a mandatory field");
				form.lyrPatientLists().tabInpatientList().dteIPDischDate().setFocus();
				return null;
			}
		}

		if (form.lyrPatientLists().tabInpatientList().dteIPDischEndDate().getValue() != null)
		{
			if (form.lyrPatientLists().tabInpatientList().dteIPDischEndDate().getValue().isLessThan(form.lyrPatientLists().tabInpatientList().dteIPDischDate().getValue()))
			{
				engine.showMessage("'Discharge Date To' must be later than the 'Discharge Date On/From'");
				form.lyrPatientLists().tabInpatientList().dteIPDischEndDate().setFocus();
				return null;
			}
		}

		voSearchCriteria.setDate(form.lyrPatientLists().tabInpatientList().dteIPDischDate().getValue());
		voSearchCriteria.setDateEnd(form.lyrPatientLists().tabInpatientList().dteIPDischEndDate().getValue());

		if (form.lyrPatientLists().tabInpatientList().qmbIPConsultant().getValue() != null)
		{
			voSearchCriteria.setConsultants(new ConsultantAccessFullVoCollection());
			voSearchCriteria.getConsultants().add(form.lyrPatientLists().tabInpatientList().qmbIPConsultant().getValue());
		}
		else
		{
			if (form.getLocalContext().getvoCollConsultantAccess() == null)
			{
				// load all consultant access for first time in session
				form.getLocalContext().setvoCollConsultantAccess(loadConsultantQcmb("",false));
			}
			voSearchCriteria.setConsultants(form.getLocalContext().getvoCollConsultantAccess());
		}

		if (form.lyrPatientLists().tabInpatientList().cmbIPSpecialty().getValue() != null)
		{
			voSearchCriteria.setSpecialties(new SpecialtyAccessVoCollection());
			voSearchCriteria.getSpecialties().add(form.lyrPatientLists().tabInpatientList().cmbIPSpecialty().getValue());
		}
		else
			voSearchCriteria.setSpecialties(form.getLocalContext().getvoCollSpecialtyAccess());

		if (form.lyrPatientLists().tabInpatientList().cmbWard().getValue() != null)
			voSearchCriteria.setWard(form.lyrPatientLists().tabInpatientList().cmbWard().getValue());

		if (form.lyrPatientLists().tabInpatientList().cmbIPDocStatus().getValue() != null)
			voSearchCriteria.setDocumentStatus(form.lyrPatientLists().tabInpatientList().cmbIPDocStatus().getValue());

		form.getGlobalContext().Correspondence.setPatientListSearchCriteria(voSearchCriteria);
		return voSearchCriteria;
	}

	private PatientListsFilterVo populateOPSearchCriteria()
	{
		PatientListsFilterVo voSearchCriteria = new PatientListsFilterVo();

		voSearchCriteria.setInPatientSearch(new Boolean(false));
		if (form.lyrPatientLists().tabOutpatientList().dteOPClinicDate().getValue() == null)
		{
			engine.showMessage("'Clinic Date On/From' is a mandatory field");
			form.lyrPatientLists().tabOutpatientList().dteOPClinicDate().setFocus();
			return null;
		}

		if (form.lyrPatientLists().tabOutpatientList().dteOPClinicEndDate().getValue() != null)
		{
			if (form.lyrPatientLists().tabOutpatientList().dteOPClinicEndDate().getValue().isLessThan(form.lyrPatientLists().tabOutpatientList().dteOPClinicDate().getValue()))
			{
				engine.showMessage("'Clinic Date To' must be later than the 'Clinic Date On/From'");
				form.lyrPatientLists().tabOutpatientList().dteOPClinicEndDate().setFocus();
				return null;
			}
		}

		voSearchCriteria.setDate(form.lyrPatientLists().tabOutpatientList().dteOPClinicDate().getValue());

		if (form.lyrPatientLists().tabOutpatientList().cmbOPConsultant().getValue() != null)
		{
			voSearchCriteria.setConsultants(new ConsultantAccessFullVoCollection());
			voSearchCriteria.getConsultants().add(form.lyrPatientLists().tabOutpatientList().cmbOPConsultant().getValue());
		}
		else
			voSearchCriteria.setConsultants(form.getLocalContext().getvoCollConsultantAccess());

		if (form.lyrPatientLists().tabOutpatientList().cmbOPSpecialty().getValue() != null)
		{
			voSearchCriteria.setSpecialties(new SpecialtyAccessVoCollection());
			voSearchCriteria.getSpecialties().add(form.lyrPatientLists().tabOutpatientList().cmbOPSpecialty().getValue());
		}
		else
			voSearchCriteria.setSpecialties(form.getLocalContext().getvoCollSpecialtyAccess());

		if (form.lyrPatientLists().tabOutpatientList().cmbOPClinic().getValue() != null)
		{
			voSearchCriteria.setClinics(new ClinicAccessFullVoCollection());
			voSearchCriteria.getClinics().add(form.lyrPatientLists().tabOutpatientList().cmbOPClinic().getValue());
		}
		else
			voSearchCriteria.setClinics(form.getLocalContext().getvoCollClinicAccess());

		if (form.lyrPatientLists().tabOutpatientList().cmbOPDocumentStatus() != null)
			voSearchCriteria.setDocumentStatus(form.lyrPatientLists().tabOutpatientList().cmbOPDocumentStatus().getValue());

		return voSearchCriteria;
	}

	private void populateSearchCombos()
	{
		if (form.getLocalContext().getvoCollSpecialtyAccess() == null)
		{
			form.getLocalContext().setvoCollSpecialtyAccess(loadSpecialtyAccess());
		}
		populateSpecialtyCombos(form.getLocalContext().getvoCollSpecialtyAccess());
		
		
		if (form.getLocalContext().getvoCollClinicAccess() == null)
		{
			form.getLocalContext().setvoCollClinicAccess(loadClinicAccess());
		}
		populateClinicCombo(form.getLocalContext().getvoCollClinicAccess());

		
		loadConsultantQcmb("%%%",true);
		
		
		populateWardCombo("");
	}

	private ClinicAccessFullVoCollection loadClinicAccess()
	{
		form.lyrPatientLists().tabOutpatientList().cmbOPClinic().clear();

		Integer id = engine.getLoggedInUser().getHcpId();

		if (id == null)
		{
			engine.showMessage("You are not associated to Member of Staff, and therfore no User profile exists for you.");
			return null;
		}

		ClinicAccessFullVoCollection voClinColl = domain.listClinicAccessForUser(id);

		if (voClinColl != null)
		{
			for (int i = 0; i < voClinColl.size(); i++)
			{
				form.lyrPatientLists().tabOutpatientList().cmbOPClinic().newRow(voClinColl.get(i), voClinColl.get(i).getClinic().getClinicName());
			}
		}

		return voClinColl;

	}

	private SpecialtyAccessVoCollection loadSpecialtyAccess()
	{
		form.lyrPatientLists().tabInpatientList().cmbIPSpecialty().clear();

		Integer id = engine.getLoggedInUser().getHcpId();

		if (id == null)
		{
			engine.showMessage("You are not associated to Member of Staff, and therfore no User profile exists for you.");
			return null;
		}

		SpecialtyAccessVoCollection voSpecColl = domain.listSpecialtyAccessForUser(id);

		if (voSpecColl != null)
		{
			for (int i = 0; i < voSpecColl.size(); i++)
			{
				form.lyrPatientLists().tabInpatientList().cmbIPSpecialty().newRow(voSpecColl.get(i), voSpecColl.get(i).getSpecialty().getText());
			}
		}

		return voSpecColl;

	}

	private void updateControlsState()
	{
		updateSearchControlsState(form.getMode().equals(FormMode.VIEW));

		setContextMenusState(form.getLocalContext().getpatientListType());

	}

	private void updateSearchControlsState(boolean b)
	{
		form.lyrPatientLists().tabInpatientList().qmbIPConsultant().setEnabled(b);
		form.lyrPatientLists().tabInpatientList().cmbIPDocStatus().setEnabled(b);
		form.lyrPatientLists().tabInpatientList().cmbIPSpecialty().setEnabled(b);
		form.lyrPatientLists().tabInpatientList().cmbWard().setEnabled(b);
		form.lyrPatientLists().tabInpatientList().dteIPDischDate().setEnabled(b);
		form.lyrPatientLists().tabInpatientList().dteIPDischEndDate().setEnabled(b);
		form.lyrPatientLists().tabInpatientList().imbIPClear().setEnabled(b);
		form.lyrPatientLists().tabInpatientList().imbIPSearch().setEnabled(b);
		form.lyrPatientLists().tabOutpatientList().cmbOPClinic().setEnabled(b);
		form.lyrPatientLists().tabOutpatientList().cmbOPConsultant().setEnabled(b);;
		form.lyrPatientLists().tabOutpatientList().cmbOPDocumentStatus().setEnabled(b);
		form.lyrPatientLists().tabOutpatientList().cmbOPSpecialty().setEnabled(b);
		form.lyrPatientLists().tabOutpatientList().dteOPClinicDate().setEnabled(b);
		form.lyrPatientLists().tabOutpatientList().dteOPClinicEndDate().setEnabled(b);
		form.lyrPatientLists().tabOutpatientList().imbOPClear().setEnabled(b);
		form.lyrPatientLists().tabOutpatientList().imbOPSearch().setEnabled(b);

	}

	/**
	 * 
	 */
	private void setContextMenusState(PatientListType patientListType)
	{
		boolean bRowSelected = false;
		DocumentStatus lkpStatus = null;
		Access lkpAccess = null;

		// default patientListType will be the first tab
		if (patientListType == null)
			patientListType = PatientListType.INPATIENTLIST;

		if (patientListType.equals(PatientListType.INPATIENTLIST))
		{
			lkpAccess = form.lyrPatientLists().tabInpatientList().grdIPList().getSelectedRowIndex() < 0 ? null : form.lyrPatientLists().tabInpatientList().grdIPList().getRows().get(form.lyrPatientLists().tabInpatientList().grdIPList().getSelectedRowIndex()).getcolAccess();
			bRowSelected = form.lyrPatientLists().tabInpatientList().grdIPList().getSelectedRowIndex() >= 0;
			if (ConfigFlag.UI.USE_PAS_CONTACT_FOR_CORRESPONDENCE.getValue())
				lkpStatus = form.lyrPatientLists().tabInpatientList().grdIPList().getSelectedRowIndex() < 0 ? null : form.lyrPatientLists().tabInpatientList().grdIPList().getSelectedRow().getValue().getPasContact().getDocumentStatus();
			else if (form.getGlobalContext().Core.getPasEventIsNotNull())
				lkpStatus = domain.getPasEvent(form.getGlobalContext().Core.getPasEvent()).getCspDocumentStatus();
		}
		else if (patientListType.equals(PatientListType.OUTPATIENTLIST))
		{
			lkpAccess = form.lyrPatientLists().tabOutpatientList().grdOPList().getSelectedRowIndex() < 0 ? null : form.lyrPatientLists().tabOutpatientList().grdOPList().getRows().get(form.lyrPatientLists().tabOutpatientList().grdOPList().getSelectedRowIndex()).getcolAccess();
			bRowSelected = form.lyrPatientLists().tabOutpatientList().grdOPList().getSelectedRowIndex() >= 0;
			if (ConfigFlag.UI.USE_PAS_CONTACT_FOR_CORRESPONDENCE.getValue())
				lkpStatus = form.lyrPatientLists().tabOutpatientList().grdOPList().getSelectedRowIndex() < 0 ? null : form.lyrPatientLists().tabOutpatientList().grdOPList().getSelectedRow().getValue().getPasContact().getDocumentStatus();
			else if (form.getGlobalContext().Core.getPasEventIsNotNull())
				lkpStatus = domain.getPasEvent(form.getGlobalContext().Core.getPasEvent()).getCspDocumentStatus();
		}

		if (ConfigFlag.UI.USE_PAS_CONTACT_FOR_CORRESPONDENCE.getValue())
		{
			if (lkpAccess == null || bRowSelected == false)
			{
				setContextMenusForNullAccess();
				return;
			}

			if (lkpAccess.equals(Access.READONLY) || form.getGlobalContext().Core.getPasEvent() == null)
			{
				setContextMenusForReadOnlyAccess();
				return;
			}
		}
		else
		{
			if (bRowSelected == false)
			{
				setContextMenusForNullAccess();
				return;
			}

			if (form.getGlobalContext().Core.getPasEvent() == null)
			{
				setContextMenusForReadOnlyAccess();
				return;
			}
		}
		boolean boolCanAddCSP, boolCanViewCSP, boolCanPreviewLetter, boolCanViewDocStatusHistory, boolCanViewContacts, boolCanSetLetterRequired, boolCanSetNOLetterRequired;
		if (lkpStatus == null)
			lkpStatus = DocumentStatus.LETTERREQUIRED;

		boolCanAddCSP = lkpStatus.equals(DocumentStatus.LETTERREQUIRED);
		boolCanViewCSP = lkpStatus.equals(DocumentStatus.GENNOTPRINTED) || lkpStatus.equals(DocumentStatus.PRINTEDNOSIGNATURE) || lkpStatus.equals(DocumentStatus.SIGNED);
		boolCanPreviewLetter = lkpStatus.equals(DocumentStatus.GENNOTPRINTED) || lkpStatus.equals(DocumentStatus.PRINTEDNOSIGNATURE) || lkpStatus.equals(DocumentStatus.SIGNED);
		if (form.getLocalContext().getSelectedCorrespondenceInstanceIsNotNull())
			boolCanViewDocStatusHistory = form.getLocalContext().getSelectedCorrespondenceInstance().getCspStatusHistoryIsNotNull() ? true : false;
		else
			boolCanViewDocStatusHistory = false;

		boolCanViewContacts = true;
		boolCanSetLetterRequired = lkpStatus.equals(DocumentStatus.NOLETTERREQUIRED);
		boolCanSetNOLetterRequired = lkpStatus.equals(DocumentStatus.LETTERREQUIRED);

		enableAllContextMenus();

		form.getContextMenus().Correspondence.getCorrespondenceDetailsAddItem().setVisible(boolCanAddCSP);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewItem().setVisible(boolCanViewCSP);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsPreviewLetterItem().setVisible(boolCanPreviewLetter);
		// form.getContextMenus().Correspondence.getCorrespondenceDetailsEditDocumentStatusHistoryItem().setVisible(boolCanViewDocStatusHistory);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsDocumentStatusItem().setVisible(boolCanViewDocStatusHistory);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsVIEWCONTACTSItem().setVisible(boolCanViewContacts);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewDemographicsItem().setVisible(boolCanViewContacts);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsSetLetterRequiredItem().setVisible(boolCanSetLetterRequired);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsSetNoLetterRequiredItem().setVisible(boolCanSetNOLetterRequired);

	}

	private void enableAllContextMenus()
	{
		form.getContextMenus().Correspondence.getCorrespondenceDetailsAddItem().setVisible(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsAddItem().setEnabled(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewItem().setEnabled(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsPreviewLetterItem().setEnabled(true);
		// form.getContextMenus().Correspondence.getCorrespondenceDetailsEditDocumentStatusHistoryItem().setEnabled(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsDocumentStatusItem().setVisible(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsVIEWCONTACTSItem().setEnabled(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsSetLetterRequiredItem().setEnabled(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsSetNoLetterRequiredItem().setEnabled(true);
	}

	protected void onlyrPatientListsTabChanged(LayerBridge tab)
	{
		form.getGlobalContext().Core.setPatientShort(null);
		engine.setPatientInfo("Please enter Patient ID or Surname and/or Forename");

		form.getLocalContext().setpreviousScreens(0);
		form.getLocalContext().setfirstRecordFromGrid(null);
		form.getLocalContext().setlastRecordFromGrid(null);

		if (tab.equals(form.lyrPatientLists().tabInpatientList()))
		{
			form.getLocalContext().setpatientListType(PatientListType.INPATIENTLIST);
			form.lyrPatientLists().tabInpatientList().imbIPSearch().setAsDefaultButton();
			clearScreen(PatientListType.INPATIENTLIST);
		}
		else if (tab.equals(form.lyrPatientLists().tabOutpatientList()))
		{
			form.getLocalContext().setpatientListType(PatientListType.OUTPATIENTLIST);
			form.lyrPatientLists().tabOutpatientList().imbOPSearch().setAsDefaultButton();
			clearScreen(PatientListType.OUTPATIENTLIST);
		}
	}

	protected void onBtn1Click() throws PresentationLogicException
	{
		next(TABIP);
	}

	private void next(int iTab) throws PresentationLogicException
	{
		ButtonStatus btnStatus = getBtnStatus();
		if (btnStatus == null)
			throw new CodingRuntimeException("No button status");

		if (btnStatus.equals(ButtonStatus.NEXT))
		{
			saveFirstAndLastRecords(iTab);
			int i = -1;
			if (form.getLocalContext().getpreviousScreensIsNotNull())
			{
				i = form.getLocalContext().getpreviousScreens();
				form.getLocalContext().setpreviousScreens(i + 1);
			}
			else
				form.getLocalContext().setpreviousScreens(1);
			if (iTab == TABIP)
			{
				PatientListsFilterVo voSearchCriteria = populateIPSearchCriteria();
				PatientListsFilterVo filterNext = updateNextFilter(voSearchCriteria);
				PasContactVoCollection voNextColl = listIPPasContactColl(filterNext);

				populateInpatientGrid(voSearchCriteria, voNextColl);

				if (voNextColl.size() == maxContactSearch())
					showHideNext(filterNext);
				else
					showHideButtons(false, true, false, form.lyrPatientLists().tabInpatientList().btn1(), form.lyrPatientLists().tabInpatientList().btn2());
			}

			if (iTab == TABOP)
			{
				PatientListsFilterVo voSearchCriteria = populateOPSearchCriteria();
				PatientListsFilterVo filterNext = updateNextFilter(voSearchCriteria);
				PasContactVoCollection voNextColl = listOPPasContactColl(filterNext);

				populateOutPatientGrid(voSearchCriteria, voNextColl);

				if (voNextColl.size() == maxContactSearch())
					showHideNext(filterNext);
				else
					showHideButtons(false, true, false, form.lyrPatientLists().tabOutpatientList().btn3(), form.lyrPatientLists().tabOutpatientList().btn4());
			}

			return;
		}

		if (btnStatus.equals(ButtonStatus.PREVIOUS))
		{
			if (iTab == TABIP)
				onBtn2Click();
			if (iTab == TABOP)
				onBtn4Click();

			return;
		}
	}

	private ButtonStatus getBtnStatus()
	{
		return form.getLocalContext().getbuttonStatus();
	}

	private void setBtnStatus(ButtonStatus btnStatus)
	{
		form.getLocalContext().setbuttonStatus(btnStatus);
	}

	private int maxContactSearch()
	{
		return ConfigFlag.DOM.CONTACT_SEARCH_MAX_SIZE.getValue();
	}

	private void saveFirstAndLastRecords(int iTab)
	{
		PatientListRowVoCollection voFirstRecordColl = null;
		PatientListRowVoCollection voLastRecordColl = null;

		if (!form.getLocalContext().getfirstRecordFromGridIsNotNull())
			voFirstRecordColl = new PatientListRowVoCollection();
		else
			voFirstRecordColl = form.getLocalContext().getfirstRecordFromGrid();

		if (!form.getLocalContext().getlastRecordFromGridIsNotNull())
			voLastRecordColl = new PatientListRowVoCollection();
		else
			voLastRecordColl = form.getLocalContext().getlastRecordFromGrid();

		int size = 0;
		if (iTab == TABIP)
		{
			size = form.lyrPatientLists().tabInpatientList().grdIPList().getRows().size();
			voFirstRecordColl.add(form.lyrPatientLists().tabInpatientList().grdIPList().getRows().get(0).getValue());
			voLastRecordColl.add(form.lyrPatientLists().tabInpatientList().grdIPList().getRows().get(size - 1).getValue());
		}

		if (iTab == TABOP)
		{
			size = form.lyrPatientLists().tabOutpatientList().grdOPList().getRows().size();
			voFirstRecordColl.add(form.lyrPatientLists().tabOutpatientList().grdOPList().getRows().get(0).getValue());
			voLastRecordColl.add(form.lyrPatientLists().tabOutpatientList().grdOPList().getRows().get(size - 1).getValue());
		}

		form.getLocalContext().setfirstRecordFromGrid(voFirstRecordColl);
		form.getLocalContext().setlastRecordFromGrid(voLastRecordColl);
	}

	protected void onBtn2Click() throws PresentationLogicException
	{
		previous(TABIP);
	}

	private void previous(int iTab)
	{
		int i = -1;
		if (form.getLocalContext().getpreviousScreensIsNotNull())
		{
			i = form.getLocalContext().getpreviousScreens();
			form.getLocalContext().setpreviousScreens(i - 1);
		}
		if (iTab == TABIP)
		{
			PatientListsFilterVo voSearchCriteria = populateIPSearchCriteria();
			PatientListsFilterVo filterPrevious = updatePreviousFilter(voSearchCriteria);
			PasContactVoCollection voPreviousColl = listIPPasContactColl(filterPrevious);

			populateInpatientGrid(filterPrevious, voPreviousColl);

			if (i != -1)
			{
				if (i - 1 == 0)
					showHideButtons(true, false, false, form.lyrPatientLists().tabInpatientList().btn1(), form.lyrPatientLists().tabInpatientList().btn2());
				else
					showHideButtons(true, true, false, form.lyrPatientLists().tabInpatientList().btn1(), form.lyrPatientLists().tabInpatientList().btn2());
			}
		}
		if (iTab == TABOP)
		{
			PatientListsFilterVo voSearchCriteria = populateOPSearchCriteria();
			PatientListsFilterVo filterPrevious = updatePreviousFilter(voSearchCriteria);
			PasContactVoCollection voPreviousColl = listOPPasContactColl(filterPrevious);

			populateOutPatientGrid(filterPrevious, voPreviousColl);

			if (i != -1)
			{
				if (i - 1 == 0)
					showHideButtons(true, false, false, form.lyrPatientLists().tabOutpatientList().btn3(), form.lyrPatientLists().tabOutpatientList().btn4());
				else
					showHideButtons(true, true, false, form.lyrPatientLists().tabOutpatientList().btn3(), form.lyrPatientLists().tabOutpatientList().btn4());
			}
		}
	}

	protected void onBtn3Click() throws PresentationLogicException
	{
		next(TABOP);
	}

	protected void onBtn4Click() throws PresentationLogicException
	{
		previous(TABOP);
	}

	protected void onQmbIPConsultantTextSubmited(String value) throws PresentationLogicException
	{
		loadConsultantQcmb(value,false);
	}

	/**
	 * @param value
	 */
	private ConsultantAccessFullVoCollection loadConsultantQcmb(String value,Boolean loadOutPatients)
	{
		form.lyrPatientLists().tabInpatientList().qmbIPConsultant().clear();
		form.lyrPatientLists().tabOutpatientList().cmbOPConsultant();

		if (value != null)
		{
			Integer id = engine.getLoggedInUser().getHcpId();

			if (id == null)
			{
				engine.showMessage("You are not associated to Member of Staff, and therfore no User profile exists for you.");
				return null;
			}

			ConsultantAccessFullVoCollection voConsColl = domain.listConsultantAccessForUser(id, value);

			if (voConsColl != null)
			{
				for (int i = 0; i < voConsColl.size(); i++)
				{
					
					if(loadOutPatients)
						form.lyrPatientLists().tabOutpatientList().cmbOPConsultant().newRow(voConsColl.get(i), voConsColl.get(i).getConsultant().getName().toString());
					else
						form.lyrPatientLists().tabInpatientList().qmbIPConsultant().newRow(voConsColl.get(i), voConsColl.get(i).getConsultant().getName().toString());
				
				}
			}

			if (value != "")
			{
				if (voConsColl.size() == 1)
				{
					form.lyrPatientLists().tabInpatientList().qmbIPConsultant().setValue(voConsColl.get(0));
				}
				else if (voConsColl.size() > 1 && form.lyrPatientLists().tabInpatientList().qmbIPConsultant().getValues().size()>0)
				{
					form.lyrPatientLists().tabInpatientList().qmbIPConsultant().showOpened();
				}
			}

			return voConsColl;
		}

		return null;
	}
}
