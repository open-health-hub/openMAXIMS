//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.35 build 2103.16649)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.headercomment;

import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.correspondence.vo.CategoryNotesVo;;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		if(form.getGlobalContext().Correspondence.getDocCategoryIsNotNull())
		{
			if (form.getGlobalContext().Correspondence.getDocCategory().getCategoryTextIsNotNull())
				form.categoryText().setValue(form.getGlobalContext().Correspondence.getDocCategory().getCategoryText());
		}
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getGlobalContext().Correspondence.getDocCategoryIsNotNull())
		{
			CategoryNotesVo vo = new CategoryNotesVo();
			vo = form.getGlobalContext().Correspondence.getDocCategory();
			vo.setCategoryText(form.categoryText().getValue());
			form.getGlobalContext().Correspondence.setDocCategory(vo);
			engine.close(DialogResult.OK);
		}
		//else assume global context will allways be built by caller
	}
	
	/* (non-Javadoc)
	 * @see ims.dischargeletters.forms.dischargelettercomment.Handlers#onFormDialogClosed(ims.framework.FormName, ims.framework.enumerations.DialogResult)
	 */
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException {

		if(formName.equals(form.getForms().Correspondence.GlossaryDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				//add selected glossary text to category text
				form.categoryText().pasteText(form.getGlobalContext().Correspondence.getGlossaryText());
			}
		}
	}
	
	/* (non-Javadoc)
	 * @see ims.dischargeletters.forms.dischargelettercomment.Handlers#onCategoryTextGlossaryClick()
	 */
	protected void onCategoryTextGlossaryClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Correspondence.GlossaryDialog);		
	}	
}
