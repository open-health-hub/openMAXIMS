//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.62 build 3023.13950)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.vo.ReportTemplateLiteVoCollection;
import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.domain.ReportTemplateLiteVoAssembler;
import ims.admin.vo.domain.ReportTemplateVoAssembler;
import ims.core.admin.domain.objects.TemplateBo;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.vo.ClinicLiteVo;
import ims.core.vo.ClinicLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.domain.ClinicLiteVoAssembler;
import ims.core.vo.domain.MedicLiteVoAssembler;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.correspondence.configuration.domain.objects.TemplateAssociations;
import ims.correspondence.domain.base.impl.BaseTemplateAssociationsConfigurationImpl;
import ims.correspondence.vo.TemplateAssociationsVo;
import ims.correspondence.vo.domain.TemplateAssociationsVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.domain.lookups.LookupService;
import ims.framework.exceptions.CodingRuntimeException;

public class TemplateAssociationsConfigurationImpl extends BaseTemplateAssociationsConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	public ReportTemplateLiteVoCollection listTemplatesByName(String templateName) throws DomainInterfaceException
	{
		if (templateName == null || templateName.length() == 0)
			throw new DomainInterfaceException("Cannot search on null or zero lenght template name"); //WDEV-17872
		
		String[] names = templateName.split(" ");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer();
		String query = "from TemplateBo tb ";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		// Build search criteria for template name
		{
			if (markers.size() > 0)
				hql.append(" AND (");
			else
				hql.append("(");
			
			for (int i = 0; i < names.length; i++)
			{
				hql.append("upper(tb.name) like :NAME" + i);
				markers.add("NAME" + i);
				values.add("%" + names[i].toUpperCase() + "%");
				
				if (i != names.length -1)
					hql.append(" OR ");
			}
			
			hql.append(")");
		}
		
		if (markers.size() > 0)
			query += " where ";
		
		query += hql.toString();
		
		try
		{
			List<DomainObject> results = factory.find(query, markers, values);
			ReportTemplateLiteVoCollection templateCollection = ReportTemplateLiteVoAssembler.createReportTemplateLiteVoCollectionFromTemplateBo(results);
			return templateCollection;
		}
		catch (RuntimeException e)
		{
			e.printStackTrace();
			return null;
		}
	}

	public TemplateAssociationsVo getTemplateAssociation(TemplateBoRefVo templateID) throws DomainInterfaceException
	{
		if (templateID == null)
			throw new CodingRuntimeException("Can not search on null user");
		
		DomainFactory factory = getDomainFactory();
		return TemplateAssociationsVoAssembler.create(TemplateAssociations.getTemplateAssociationsFromTemplate(factory, templateID.getID_TemplateBo()));
	}


	public ClinicLiteVoCollection listClinics(ClinicLiteVo filterVo) throws DomainInterfaceException
	{
		if (filterVo == null)
			throw new DomainInterfaceException("Can not search on null clinic filter");
		
		if (filterVo.getClinicName() == null || filterVo.getClinicName().trim().length() == 0)
			throw new DomainInterfaceException("Can not search on null or zero length clinic name");
		
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer();
		String query = " from Clinic c ";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		
		// Build search criteria
		{
			if (markers.size() > 0)
				hql.append(" and ");
			
			hql.append("c.upperName like :clinicName");
			markers.add("clinicName");
			values.add("%" + filterVo.getClinicName().toUpperCase() + "%");
		}
		
		if (markers.size() > 0)
			query += " where ";
		
		query += hql.toString();
		
		
		try
		{
			List<DomainObject> listClinics;
			listClinics = factory.find(query, markers, values);
			return ClinicLiteVoAssembler.createClinicLiteVoCollectionFromClinic(listClinics);
		}
		catch (RuntimeException e)
		{
			e.printStackTrace();
			return null;
		}
	}

	public MedicLiteVoCollection listConsultants(MedicLiteVo filterVo) throws DomainInterfaceException
	{
		if (filterVo == null)
			throw new DomainInterfaceException("Can not search on null medic filter");
		
		if (filterVo.getName() == null
				|| (filterVo.getName().getSurname() == null && filterVo.getName().getForename() == null)
				|| (filterVo.getName().getSurname().length() == 00 && filterVo.getName().getForename().length() == 0))
			throw new DomainInterfaceException("Can not search on null or zero length consultant name");
		
		String[] names;
		
		if (filterVo.getName().getSurnameIsNotNull() && filterVo.getName().getSurname().length() > 0)
			names = filterVo.getName().getSurname().split(" ");
		else
			names = filterVo.getName().getForename().split(" ");
		
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer();
		String query = " from Medic md ";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		// Build search criteria
		{
			if (markers.size() > 0)
				hql.append(" AND (");
			else
				hql.append("(");
			
			for (int i = 0; i < names.length; i++)
			{
				hql.append("md.mos.name.upperSurname like :SURNAME" + i);
				markers.add("SURNAME" + i);
				values.add("%" + names[i].toUpperCase() + "%");
				
				hql.append(" OR ");
				
				hql.append("md.mos.name.upperForename like :FORENAME" + i);
				markers.add("FORENAME" + i);
				values.add("%" + names[i].toUpperCase() + "%");
				
				if (i != names.length - 1)
					hql.append(" OR ");
			}
			
			hql.append(")");
		}
		
		if (markers.size() > 0)
			query += " where ";
		
		query += hql.toString();

		try
		{
			List<DomainObject> listMedics;
			listMedics = factory.find(query, markers, values);
			return MedicLiteVoAssembler.createMedicLiteVoCollectionFromMedic(listMedics);
		}
		catch (RuntimeException e)
		{
			e.printStackTrace();
			return null;
		}
	}

	public ArrayList<Specialty> listSpecialties(Specialty filterLookup) throws DomainInterfaceException
	{
		if (filterLookup == null)
			throw new DomainInterfaceException("Can not search on null speciality filter");
		
		ArrayList<Specialty> specialtiesList = new ArrayList<Specialty>();
		
		
		ArrayList<String> searchWords = new ArrayList<String>();
		
		filterLookup.setText(filterLookup.getText().replaceAll(" ", "%"));
		String[] split = filterLookup.getText().split("%");
		
		for (int i = split.length - 1; i >= 0; i--)
		{
			if (!(split[i].equalsIgnoreCase("")))
				searchWords.add(split[i]);
		}
		
		LookupService lookup = this.getLookupService();
		SpecialtyCollection collection = (SpecialtyCollection) lookup.getLookupCollection(Specialty.TYPE_ID, SpecialtyCollection.class, Specialty.class);
		
		for (int i = 0; i < collection.size(); i++)
		{
			Specialty specialty = collection.get(i);
			
			if (containsText(specialty, searchWords))
				specialtiesList.add(specialty);
		}
		
		return specialtiesList;
	}

	private boolean containsText(Specialty specialty, ArrayList<String> searchWords)
	{
		for (int i = 0; i < searchWords.size(); i++)
			if (specialty.getText().toUpperCase().indexOf(searchWords.get(i).toUpperCase()) == -1)
				return false;
		
		return true;
	}

	public TemplateAssociationsVo saveTemplateAssociations(TemplateAssociationsVo templateAssociation) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		if (! templateAssociation.isValidated())
			throw new DomainRuntimeException("TempalteAssociationsVo has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		TemplateAssociations domTemplateAssociations = TemplateAssociationsVoAssembler.extractTemplateAssociations(factory, templateAssociation);

		try
		{
			factory.save(domTemplateAssociations);
		}
		catch (UnqViolationUncheckedException exception)
		{
			throw new UniqueKeyViolationException("Template Association already exists for this template.", exception);
		}

		return TemplateAssociationsVoAssembler.create(domTemplateAssociations);
	}
}
