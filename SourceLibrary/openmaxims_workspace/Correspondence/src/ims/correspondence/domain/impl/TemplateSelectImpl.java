//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.30 build 2012.21169)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.domain.ADT;
import ims.core.domain.impl.ADTImpl;
import ims.core.vo.PasEventVo;
import ims.domain.impl.DomainImpl;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.admin.vo.domain.ReportTemplateVoAssembler;

public class TemplateSelectImpl extends DomainImpl implements ims.correspondence.domain.TemplateSelect, ims.domain.impl.Transactional
{
	/**
	* list tempaltes
	*/
	public ims.admin.vo.ReportTemplateVoCollection listTemplates(Boolean activeOnly, Integer voMedicId, Integer voLocationId, Integer voServiceId)
	{
		DomainFactory factory = getDomainFactory();
		String andStr = " ";
		StringBuffer condStr = new StringBuffer();
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		StringBuffer hql = new StringBuffer();
		hql.append("select distinct t2_1.id from TemplateAssociations as t1_1 left join t1_1.template as t2_1");
		
		if (voMedicId != null)
		{			
			hql.append(" left join t1_1.consultants as m1_1");
			condStr.append(andStr + " m1_1.id = :medicId");
			markers.add("medicId");
			values.add(voMedicId);
			andStr = " or ";
		}
		if (voServiceId != null)
		{
			hql.append(" left join t1_1.specialties as l1_1 left join l1_1.instance as l2_1");
			condStr.append(andStr + " l2_1.id = :service");
			markers.add("service");
			values.add(voServiceId);
			andStr = " or ";
		}
		if (voLocationId != null)
		{		
			hql.append(" left join t1_1.clinics as c1_1");
			condStr.append(andStr + " c1_1.id = :location");
			markers.add("location");
			values.add(voLocationId);
		}				
		 
		List templates;
		if (values.size()>0)
		{			
			hql.append(" where ");
			hql.append("(" + condStr + ")");
			templates  = factory.find("from TemplateBo where id in (" + hql.toString() + ")",markers,values);
			if(templates.size()>0)
			{
			return ReportTemplateVoAssembler.createReportTemplateVoCollectionFromTemplateBo(templates);
			}
			templates  = factory.find("from TemplateBo");
			return ReportTemplateVoAssembler.createReportTemplateVoCollectionFromTemplateBo(templates);
		}
		else
		{
			templates  = factory.find("from TemplateBo");
			return ReportTemplateVoAssembler.createReportTemplateVoCollectionFromTemplateBo(templates);
		}
	}

	public PasEventVo getPasEvent(PASEventRefVo pasEventVoRef) 
	{
		if (pasEventVoRef == null)
			throw new CodingRuntimeException("Mandatory Argument - PAS Event Required");
		
		ADT impl = (ADT)getDomainImpl(ADTImpl.class);
		return impl.getPasEvent(pasEventVoRef);		
	}
}
