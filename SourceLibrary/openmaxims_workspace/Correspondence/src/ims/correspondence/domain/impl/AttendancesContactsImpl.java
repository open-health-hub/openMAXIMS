//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.25 build 1949.18196)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.domain.impl;

import java.text.ParseException;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.correspondence.domain.impl.PatientListsImpl;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.domain.ADT;
import ims.core.domain.Demographics;
import ims.core.domain.impl.ADTImpl;
import ims.core.domain.impl.DemographicsImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.MedicWithMappingsLiteVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.Specialty;
import ims.correspondence.domain.CorrespondenceDetails;
import ims.correspondence.domain.PatientLists;
import ims.correspondence.vo.CorrespondenceDetailsRefVo;
import ims.correspondence.vo.CorrespondenceDetailsVo;
import ims.correspondence.vo.PasContactVo;
import ims.correspondence.vo.PasContactVoCollection;
import ims.correspondence.vo.UserAccessFullVo;
import ims.core.vo.lookups.DocumentStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;

import ims.dto.DTODomainImplementation;
import ims.dto.client.Patientcontacts;
import ims.dto.client.Patientcontacts.PatientcontactsRecord;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.vo.LookupInstVo;
import ims.core.vo.lookups.LocationType;

public class AttendancesContactsImpl extends DTODomainImplementation implements ims.correspondence.domain.AttendancesContacts, ims.domain.impl.Transactional
{
	/**
	 * 
	 */
	private static final long	serialVersionUID	= 1L;

	public boolean dtoOnly() {
		return false;
	}

	public Class getLookupServiceClass()
	{
		return ims.domain.lookups.impl.LookupServiceImpl.class;
	}
	/**
	* listPASContacts
	*/
	public PasContactVoCollection listPASContacts(ims.core.vo.PatientShort patient)
	{
		String extSystem = ConfigFlag.DOM.DEMOGRAPHICS_EXT_SYSTEM.getValue();
		
		PasContactVoCollection voPasContactColl= new PasContactVoCollection();
		
		Patientcontacts patientContacts = (Patientcontacts)getDTOInstance(Patientcontacts.class);
		patientContacts.Filter.clear();
		
		 
		if (patient != null)
		{
			patientContacts.Filter.Hospnum = patient.getHospnum().getValue();
		}
		
		patientContacts.Filter.Contacttype = "I||O";
		
		patientContacts.list();		
		
		PatientcontactsRecord patientContactsRecord;
		PasContactVo voPasContact;

		for (int i = 0; i < patientContacts.DataCollection.count(); i++)
		{
			patientContactsRecord = patientContacts.DataCollection.get(i);
			voPasContact = new PasContactVo();
		
			voPasContact.setContactNumber(patientContactsRecord.Contactno);
			
			if (patientContactsRecord.Contacttype != null && patientContactsRecord.Contacttype.equalsIgnoreCase("I"))
			{
				voPasContact.setContactType("Inpatient");
				voPasContact.setGPCode(patientContactsRecord.Ip_gpcode);
				if (patientContactsRecord.Inpatconsultant != null)
				{
					HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
					MedicWithMappingsLiteVo voMedicWithMappingsLite = hcpAdmin.getMedicMedicMappingsByPasCode(patientContactsRecord.Inpatconsultant);
					voPasContact.setConsultant(voMedicWithMappingsLite == null ? null : voMedicWithMappingsLite);
				}
				
				if (patientContactsRecord.Ward != null)
				{
					OrganisationAndLocation locImpl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
					voPasContact.setLocation(locImpl.getLocationByLocalCode(patientContactsRecord.Ward,LocationType.WARD));
				}
				
				if (patientContactsRecord.Inpatspecialty != null)
				{
					voPasContact.setSpecialty((Specialty)getLookupService().getLocalLookup(Specialty.class, Specialty.TYPE_ID, extSystem, patientContactsRecord.Inpatspecialty));					
				}
				if (patientContactsRecord.Dischargedate != null)
				{
					try {
						voPasContact.setDischargeDateTime(new DateTime (patientContactsRecord.Dischargedate));
					} catch (ParseException e) {
						voPasContact.setDischargeDateTime(null);
						e.printStackTrace();
					}
				}				
			}

			if (patientContactsRecord.Contacttype != null && patientContactsRecord.Contacttype.equalsIgnoreCase("O"))
			{
				voPasContact.setContactType("Outpatient");
				voPasContact.setGPCode(patientContactsRecord.Op_gpcode);				
				if (patientContactsRecord.Outpatconsultant != null)
				{
					HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
					MedicWithMappingsLiteVo voMedicWithMappingsLite = hcpAdmin.getMedicMedicMappingsByPasCode(patientContactsRecord.Outpatconsultant);
					voPasContact.setConsultant(voMedicWithMappingsLite == null ? null : voMedicWithMappingsLite);
				}
				
				if (patientContactsRecord.Cliniccode != null)
				{
					OrganisationAndLocation locImpl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
					voPasContact.setLocation(locImpl.getLocationByLocalCode(patientContactsRecord.Cliniccode,LocationType.CLINIC));
				}
				
				if (patientContactsRecord.Outpatspecialty != null)
				{
					voPasContact.setSpecialty((Specialty)getLookupService().getLocalLookup(Specialty.class, Specialty.TYPE_ID, extSystem, patientContactsRecord.Outpatspecialty));
					
				}
				if (patientContactsRecord.Apptdate != null && patientContactsRecord.Appttime != null)
				try {
					voPasContact.setAppointmentDateTime(new DateTime (patientContactsRecord.Apptdate,patientContactsRecord.Appttime ));
				} catch (ParseException e) {
					voPasContact.setDischargeDateTime(null);
					e.printStackTrace();
				}
				
			}
			
			
			if (patientContactsRecord.Documentstatus == "")
			{
				voPasContact.setDocumentStatus(DocumentStatus.LETTERREQUIRED);
			}
			else
			{
				Integer nDocStatus = new Integer(patientContactsRecord.Documentstatus);
				voPasContact.setDocumentStatus((DocumentStatus)getLookupService().getLookupInstance(DocumentStatus.class, DocumentStatus.TYPE_ID,nDocStatus.intValue() ));				
			}
			
							
			voPasContactColl.add(voPasContact);
		}

		return voPasContactColl.sort();
	}

	public CorrespondenceDetailsVo getCorrespondenceDetails(CorrespondenceDetailsRefVo voCorrespRef) 
	{
		if (voCorrespRef == null)
			throw new CodingRuntimeException("Mandatory Argument - Correspondence Details Required");
		
		CorrespondenceDetails cspDet = (CorrespondenceDetails)getDomainImpl(CorrespondenceDetailsImpl.class);	
		return cspDet.getCorrespondenceDetails(voCorrespRef);
	}
	
	public CorrespondenceDetailsVo getCorrespondenceDetailsByPasEvent(PASEventRefVo voPasEventRef) 
	{
		if (voPasEventRef == null)
			throw new CodingRuntimeException("Mandatory Argument - PAS Event Required");
		
		CorrespondenceDetails cspDet = (CorrespondenceDetails)getDomainImpl(CorrespondenceDetailsImpl.class);	
		return cspDet.getCorrespondenceDetailsByPasEvent(voPasEventRef);
	
	}

	public PasEventVo getPasEvent(PASEventRefVo voPasEventRef) 
	{
		ADT impl =  (ADT) getDomainImpl(ADTImpl.class);
		return impl.getPasEvent(voPasEventRef);
	}

	public Patient getPatient(PatientShort voFilter) throws StaleObjectException 
	{
		Demographics implDemographics = (Demographics)getDomainImpl(DemographicsImpl.class);
		return implDemographics.getPatient(voFilter);
	}
	
	public ims.correspondence.vo.CorrespondenceDetailsVo saveCorrespondenceDetails(CorrespondenceDetailsVo voDocumentDetails, LookupInstVo pasEventType) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		CorrespondenceDetails impl = (CorrespondenceDetails) getDomainImpl(CorrespondenceDetailsImpl.class);
		return impl.saveCorrespondenceDetails(voDocumentDetails,pasEventType);
	}

	public PasEventVo getPasEvent(PatientRefVo voPatienRef, String pasEventId) 
	{
		ADT impl =  (ADT) getDomainImpl(ADTImpl.class);
		return impl.getPasEventByUnqIdx(voPatienRef, pasEventId);		
	}

	public UserAccessFullVo getFullUserAccessForUser(Integer appUserID) 
	{
		PatientLists impl =  (PatientLists) getDomainImpl(PatientListsImpl.class);
		return impl.getFullUserAccessForUser(appUserID);
	}

	public ims.core.vo.PasEventVo createPasEvent(ims.framework.utils.DateTime eventDateTime, ims.core.patient.vo.PatientRefVo voRefPatient, ims.correspondence.vo.PasContactVo voPasContact) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException 
	{
		ADT impl =  (ADT) getDomainImpl(ADTImpl.class);
		return impl.createPasEvent(eventDateTime,voRefPatient,voPasContact);
	}
}
