//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4091.21781)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.correspondence.domain.impl;

import java.util.List;

import ims.core.documents.domain.objects.PatientDocument;
import ims.correspondence.domain.base.impl.BaseCheckedOutDocumentsImpl;
import ims.correspondence.vo.CheckedOutDocumentVo;
import ims.correspondence.vo.domain.CheckedOutDocumentVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

public class CheckedOutDocumentsImpl extends BaseCheckedOutDocumentsImpl
{

	private static final long serialVersionUID = 1L;

	public ims.correspondence.vo.CheckedOutDocumentVoCollection listCheckedOutDocuments()
	{
		DomainFactory factory = getDomainFactory();
		String query = "from PatientDocument as pd where pd.isLockedForEditing = 1 order by pd.lockedOnDateTime asc";
		return CheckedOutDocumentVoAssembler.createCheckedOutDocumentVoCollectionFromPatientDocument(factory.find(query));
	}

	public CheckedOutDocumentVo savePatientDocument(CheckedOutDocumentVo document) throws StaleObjectException
	{
		if(document == null)
			throw new CodingRuntimeException("Can not save a null PatientDocument.");
		
		if(!document.isValidated())
			throw new CodingRuntimeException("PatientDocument not validated");
		
		DomainFactory factory = getDomainFactory();
		PatientDocument doc = CheckedOutDocumentVoAssembler.extractPatientDocument(factory, document);
		if (doc == null)
			throw new StaleObjectException(doc);
		factory.save(doc);	
		
		return CheckedOutDocumentVoAssembler.create(doc);
	}

	public Boolean isStaleObjectException(CheckedOutDocumentVo patientDocument) 
	{
		if(patientDocument == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		
		List<?> patDoc = factory.find("select d.id from PatientDocument as d where d.id = :docId and d.version > :docVersion", new String[] {"docId", "docVersion"}, new Object[] {patientDocument.getID_PatientDocument(), patientDocument.getVersion_PatientDocument()});
		
		if(patDoc != null && patDoc.size() > 0)
			return true;
		
		return false;
	}
}
