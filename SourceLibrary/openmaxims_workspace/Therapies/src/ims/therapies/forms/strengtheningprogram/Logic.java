//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.44 build 2238.36879)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.strengtheningprogram;

import java.util.ArrayList;

import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.spinalinjuries.vo.lookups.StrengtheningProgramExercise;
import ims.spinalinjuries.vo.lookups.StrengtheningProgramExerciseCollection;
import ims.spinalinjuries.vo.lookups.StrengtheningProgramLimbType;
import ims.spinalinjuries.vo.lookups.StrengtheningProgramLimbTypeCollection;
import ims.spinalinjuries.vo.lookups.StrengtheningProgramMovement;
import ims.spinalinjuries.vo.lookups.StrengtheningProgramMovementCollection;
import ims.therapies.forms.strengtheningprogram.GenForm.grdLimbWeightRow;
import ims.therapies.forms.strengtheningprogram.GenForm.grdLimbWeightRowCollection;
import ims.therapies.vo.StrengtheningProgramLimbWeightVo;
import ims.therapies.vo.StrengtheningProgramLimbWeightVoCollection;
import ims.therapies.vo.StrengtheningProgramShortVoCollection;
import ims.therapies.vo.StrengtheningProgramVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		setDefaultValues();
		form.setMode(FormMode.EDIT);
	}
	private void setDefaultValues() 
	{
		HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();
		if (hcpUser != null)
		{
			form.qmbHCP().newRow(hcpUser, hcpUser.toString());
			form.qmbHCP().setValue(hcpUser);
		}
		form.dtimAuthoring().setValue(new DateTime());		
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save() == false)
			return;

		initialize();		
		open();
	}

	protected void clearScreen()
	{
		form.qmbHCP().clear();
		form.dtimAuthoring().setValue(null);
		form.txtComments().setValue(null);
	}
	
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	protected void onQmbHCPTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbHCP().clear();
		
		HcpLiteVoCollection voHCPColl = domain.listHcpLiteByName(value);

		if (voHCPColl != null)
		{
			for (int i = 0; i < voHCPColl.size(); i++)
				form.qmbHCP().newRow(voHCPColl.get(i), voHCPColl.get(i).getName().toString());
			if (voHCPColl.size() == 1)
				form.qmbHCP().setValue(voHCPColl.get(0));
			else if (voHCPColl.size() > 1)
				form.qmbHCP().showOpened();
		}
	}

	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.dtimAuthoring().setEnabled(isAuthoringDtimEnableable());
			form.qmbHCP().setEnabled(isAuthoringHcpEnableable());
		}

	//	if (form.getMode().equals(FormMode.VIEW))
	//	{
	//		boolean newRecord = isNewRecord();
	//		form.btnNew().setVisible(newRecord);
	//		form.btnUpdate().setVisible(!newRecord);
	//	}
	}

	// Private methods ------------------
	private void open()
	{
		form.setMode(FormMode.VIEW);
		fillRecordBrowser();		
	}

	private void fillRecordBrowser() 
	{
		StrengtheningProgramShortVoCollection voStrengtheningProgramColl = domain.listStrengthProgByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		ClinicalContactShortVo voCurrentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		loadCareContext();
		boolean currentClinicalContactFound = false; 
		
		if(voStrengtheningProgramColl != null)
		{
			for(int i=0; i<voStrengtheningProgramColl.size(); i++)
			{
				ClinicalContactShortVo voClinicalContact = voStrengtheningProgramColl.get(i).getClinicalContact();
				
				if(voCurrentClinicalContact != null && voCurrentClinicalContact.getID_ClinicalContact().equals(voClinicalContact.getID_ClinicalContact()))
				{
					currentClinicalContactFound = true;
					loadClinicalContact(voClinicalContact,  Color.Green);	
				}
				else
				{
					loadClinicalContact(voClinicalContact, null);
				}
			}
		}
		
		if(!currentClinicalContactFound)
			loadClinicalContact(voCurrentClinicalContact, Color.Green);
		
		browseRecord();
	}
	
	private void loadClinicalContact(ClinicalContactShortVo voClinicalContact, Color active)
	{
		if(voClinicalContact != null)
		{
			form.recbrStrengthProg().newRow(voClinicalContact, "\t\t\t\tClinical Contact: " + voClinicalContact.getStartDateTime() + " - " + voClinicalContact.getSeenBy(), active);		
			if(active != null)
				form.recbrStrengthProg().setValue(voClinicalContact);
		}
	}
	
	private void loadCareContext()
	{
		CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			form.recbrStrengthProg().newRow(voCareContext, voCareContext.getRecordBrowserText());
		}
		else
		{
			form.recbrStrengthProg().newRow(voCareContext, voCareContext.getRecordBrowserText(), Color.Green);
			form.recbrStrengthProg().setValue(voCareContext);
		}
	}

	private boolean save()
	{
		StrengtheningProgramVo voStrengtheningProgram = form.getLocalContext().getStrengtheningProgramVo();
		if (voStrengtheningProgram == null)
			voStrengtheningProgram = new StrengtheningProgramVo();

		populateDataFromScreen(voStrengtheningProgram);
		String[] errors = voStrengtheningProgram.validate(validateUIRules());
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			voStrengtheningProgram = domain.saveStrenghteningProgram(voStrengtheningProgram);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialize();
			open();
			return false;
		} catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			initialize();
			open();
			return false;
		}

		form.getLocalContext().setStrengtheningProgramVo(voStrengtheningProgram);

		return true;
	}

	private String[] validateUIRules()
	{
		ArrayList errors = new ArrayList();
		if(form.dtimAuthoring().getValue() == null)
		{
			String dateTimeTxt = form.lblAuthoringDateTime().getValue();
			if(dateTimeTxt == null)
				dateTimeTxt = "Authoring DateTime"; 
			errors.add( dateTimeTxt.replaceAll(":", "") + " is mandatory");
		}
		if(form.qmbHCP().getValue() == null)
		{
			String hcpTxt = form.lblAuthoringHcp().getValue();
			if(hcpTxt == null)
				hcpTxt = "Authoring HCP";
			errors.add(hcpTxt.replaceAll(":","") + " is mandatory");
		}
		
		if(errors.size() > 0)
		{
			String[] uiErrors = new String[errors.size()];
			errors.toArray(uiErrors);
			return uiErrors;
		}
		return null;
	}

	private void initialize()
	{
		clearScreen();
		StrengtheningProgramLimbTypeCollection voStrenghteningColl = LookupHelper.getStrengtheningProgramLimbType(domain.getLookupService());
		StrengtheningProgramMovementCollection voMovementColl = LookupHelper.getStrengtheningProgramMovement(domain.getLookupService());
		ims.spinalinjuries.vo.lookups.StrengtheningProgramExerciseCollection voColl = LookupHelper.getStrengtheningProgramExercise(domain.getLookupService());

		prePopulateLimbGrid(voStrenghteningColl);
		prePopulateActionsGrid(voMovementColl);
		prepopulateExerciseGrid(voColl);
	}

	private void prepopulateExerciseGrid(StrengtheningProgramExerciseCollection voColl)
	{
		form.grdPlinth().getRows().clear();

		if(voColl == null)
			return;
		
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			GenForm.grdPlinthRow row = form.grdPlinth().getRows().newRow();
			StrengtheningProgramExercise lookup = voColl.get(i);
			row.setColPlinth(lookup.toString());
			Image image = lookup.getImage();
			if(image != null)
			{
				row.setExpandedImage(image);
				row.setCollapsedImage(image);
			}
			row.setValue(lookup);
		}
	}

	private void prePopulateLimbGrid(StrengtheningProgramLimbTypeCollection voStrenghteningColl)
	{
		form.grdLimbWeight().getRows().clear();

		if(voStrenghteningColl == null)
			return;
		
		ims.framework.cn.data.TreeNode[] rootNodes = voStrenghteningColl.getRootNodes();
		if (rootNodes == null)
			return;

		for (int i = 0; i < rootNodes.length; i++)
		{
			ims.framework.cn.data.TreeNode node = rootNodes[i];
			if (node instanceof StrengtheningProgramLimbType)
			{
				StrengtheningProgramLimbType lkpItem = (StrengtheningProgramLimbType) node;
				GenForm.grdLimbWeightRow row = form.grdLimbWeight().getRows().newRow();
				setRowData(lkpItem, row);
				addTreeNode(row, lkpItem.getChildren());
			}
		}
	}

	private void addTreeNode(grdLimbWeightRow rowParent, TreeNode[] nodes)
	{
		if (rowParent == null || nodes == null)
			return;

		for (int i = 0; nodes != null && i < nodes.length; i++)
		{
			if (nodes[i] instanceof StrengtheningProgramLimbType)
			{
				StrengtheningProgramLimbType lkpItem = (StrengtheningProgramLimbType) nodes[i];
				grdLimbWeightRow rowChild = rowParent.getRows().newRow();
				setRowData(lkpItem, rowChild);
				if (lkpItem.getChildren() != null && lkpItem.getChildren().length > 0)
					addTreeNode(rowChild, lkpItem.getChildren());
			}
		}
	}

	private void setRowData(StrengtheningProgramLimbType lkpItem, GenForm.grdLimbWeightRow row)
	{
		row.setColLimbWeight(lkpItem.toString());
		row.setExpandedImage(form.getImages().Therapies.Weight);
		row.setCollapsedImage(form.getImages().Therapies.Weight);
		row.setValue(lkpItem);
	}

	private void prePopulateActionsGrid(StrengtheningProgramMovementCollection voMovementColl)
	{
		if(voMovementColl == null)
			return;
		for (int i = 0; i < form.grdLimbWeight().getRows().size(); i++)
		{
			Object value = form.grdLimbWeight().getRows().get(i).getValue();
			if (value instanceof StrengtheningProgramLimbType)
			{
				if (form.grdLimbWeight().getRows().get(i).getRows().size() == 0)
				{
					addActions(form.grdLimbWeight().getRows().get(i), voMovementColl, false, null);
					form.grdLimbWeight().getRows().get(i).setExpanded(true);
				}
				else
				{
					StrengtheningProgramLimbType lkpItem = (StrengtheningProgramLimbType) value;
					if (lkpItem.getChildren() != null && lkpItem.getChildren().length > 0)
						addActionChildren(form.grdLimbWeight().getRows().get(i), lkpItem.getChildren(), voMovementColl, false, null );
				}
			}
		}
	}

	private void addActionChildren(grdLimbWeightRow parentRow, TreeNode[] children, StrengtheningProgramMovementCollection voMovementColl, boolean bAddValues, StrengtheningProgramVo voStrengtheningProgram)
	{
		if (parentRow == null || children == null)
			return;

		for (int i = 0; i < parentRow.getRows().size(); i++)
		{
			Object value = parentRow.getRows().get(i).getValue();
			if (value instanceof StrengtheningProgramLimbType)
			{
				if (parentRow.getRows().get(i).getRows().size() == 0)
				{
					addActions(parentRow.getRows().get(i), voMovementColl, bAddValues, voStrengtheningProgram);
					parentRow.getRows().get(i).setExpanded(true);
				}
				else
				{
					StrengtheningProgramLimbType lkpItem = (StrengtheningProgramLimbType) value;
					if (lkpItem.getChildren() != null && lkpItem.getChildren().length > 0)
						addActionChildren(parentRow.getRows().get(i), lkpItem.getChildren(), voMovementColl, bAddValues, voStrengtheningProgram);
				}
			}
		}
	}

	private void addActions(grdLimbWeightRow parentRow, StrengtheningProgramMovementCollection voMovementColl, boolean bAddValues, StrengtheningProgramVo voStrengtheningProgram)
	{
		if (parentRow == null || voMovementColl == null)
			return;

		for (int i = 0; i < voMovementColl.size(); i++)
		{
			grdLimbWeightRow childRow = parentRow.getRows().newRow();
			childRow.setColLimbWeight(voMovementColl.get(i).toString());
			childRow.setValue(voMovementColl.get(i));
			
			if(bAddValues && voStrengtheningProgram!=null){
				for (int k = 0; voStrengtheningProgram.getLimbWeightIsNotNull() && k < voStrengtheningProgram.getLimbWeight().size(); k++)
				{
					StrengtheningProgramLimbWeightVo voLimbWeightVo = voStrengtheningProgram.getLimbWeight().get(k);
					boolean sameType = childRow.getParentRow() != null && childRow.getParentRow().getValue() != null && childRow.getParentRow().getValue().equals(voLimbWeightVo.getLimbType());				
					boolean sameAction = childRow.getValue() != null && childRow.getValue().equals(voLimbWeightVo.getAction());
					
					if (sameType && sameAction){
						childRow.setColKgs(voLimbWeightVo.getKgs());
						childRow.setColReps(voLimbWeightVo.getRepetitions());
					}
					
				}
				
			}
		}
	}

	protected void populateScreenFromData(StrengtheningProgramVo voStrengtheningProgram)
	{
		super.populateScreenFromData(voStrengtheningProgram);
		populateAuthoringInfo(voStrengtheningProgram);
		populateLimbGrid(voStrengtheningProgram);
		populateExerciseGrid(voStrengtheningProgram);
		form.getLocalContext().setStrengtheningProgramVo(voStrengtheningProgram);
	}

	private void populateAuthoringInfo(StrengtheningProgramVo voStrengtheningProgram)
	{
		if (voStrengtheningProgram != null)
		{
			AuthoringInformationVo voAuthoringInformation = voStrengtheningProgram.getAuthoringInformation();
			if (voAuthoringInformation != null)
			{
				form.dtimAuthoring().setValue(voAuthoringInformation.getAuthoringDateTime());
				if (voAuthoringInformation.getAuthoringHcpIsNotNull())
				{
					form.qmbHCP().newRow(voAuthoringInformation.getAuthoringHcp(), voAuthoringInformation.getAuthoringHcp().toString());
					form.qmbHCP().setValue(voAuthoringInformation.getAuthoringHcp());
				}
			}
		}
	}

	private void populateLimbGrid(StrengtheningProgramVo voStrengtheningProgram)
	{
		if (voStrengtheningProgram == null)
			return;
		
		form.grdLimbWeight().getRows().clear();
		
		StrengtheningProgramLimbTypeCollection voStrenghteningColl = LookupHelper.getStrengtheningProgramLimbType(domain.getLookupService());
		StrengtheningProgramMovementCollection voMovementColl = LookupHelper.getStrengtheningProgramMovement(domain.getLookupService());
		
		if(voStrenghteningColl == null)
			return;
		
		ims.framework.cn.data.TreeNode[] rootNodes = voStrenghteningColl.getRootNodes();
		if (rootNodes == null)
			return;

		for (int i = 0; i < rootNodes.length; i++)
		{
			ims.framework.cn.data.TreeNode node = rootNodes[i];
			if (node instanceof StrengtheningProgramLimbType)
			{
				StrengtheningProgramLimbType lkpItem = (StrengtheningProgramLimbType) node;
				GenForm.grdLimbWeightRow row = form.grdLimbWeight().getRows().newRow();
				setRowData(lkpItem, row);
				addTreeNode(row, lkpItem.getChildren());
			}
		}
		
		if(voMovementColl == null)
			return;
		
		for (int i = 0; i < form.grdLimbWeight().getRows().size(); i++)
		{
			Object value = form.grdLimbWeight().getRows().get(i).getValue();
			if (value instanceof StrengtheningProgramLimbType)
			{
				if (form.grdLimbWeight().getRows().get(i).getRows().size() == 0)
				{
					addActions(form.grdLimbWeight().getRows().get(i), voMovementColl, true, voStrengtheningProgram);
					form.grdLimbWeight().getRows().get(i).setExpanded(true);
				}
				else
				{
					StrengtheningProgramLimbType lkpItem = (StrengtheningProgramLimbType) value;
					if (lkpItem.getChildren() != null && lkpItem.getChildren().length > 0)
						addActionChildren(form.grdLimbWeight().getRows().get(i), lkpItem.getChildren(), voMovementColl, true, voStrengtheningProgram);
				}
			}
		}

		form.grdLimbWeight().expandAll();
	}

	//WDEV-2785 
	private grdLimbWeightRow getCurrentRow(StrengtheningProgramMovement action, StrengtheningProgramLimbType limbType)
	{
		if (action == null || limbType == null)
			return null;

		for (int i = 0; i < form.grdLimbWeight().getRows().size(); i++)
		{
			grdLimbWeightRow childRow = getChildRow(action, limbType, form.grdLimbWeight().getRows().get(i).getRows());
			if(childRow != null)
			{
				form.grdLimbWeight().getRows().get(i).setExpanded(true);
				return childRow;
			}
		}

		return null;
	}
	//WDEV-2785 
	private grdLimbWeightRow getChildRow(StrengtheningProgramMovement action, StrengtheningProgramLimbType limbType, grdLimbWeightRowCollection rowParentColelction)
	{
		if(rowParentColelction == null)
			return null;
		
		for (int j = 0; j < rowParentColelction.size(); j++)
		{
			grdLimbWeightRow rowLevel1Child = rowParentColelction.get(j);
			Object value = rowLevel1Child.getValue();

			if (value instanceof StrengtheningProgramMovement)
			{
				boolean sameType = rowLevel1Child.getParentRow() != null && rowLevel1Child.getParentRow().getValue() != null && rowLevel1Child.getParentRow().getValue().equals(limbType);				
				boolean sameAction = rowLevel1Child.getValue() != null && rowLevel1Child.getValue().equals(action);
				
				if (sameType && sameAction)
					return rowLevel1Child;
			}
			else
			{
				return getChildRow(action, limbType, rowLevel1Child.getRows());
			}
		}
		
		return null;
	}

	private void populateExerciseGrid(StrengtheningProgramVo voStrengtheningProgram)
	{
		if (voStrengtheningProgram == null)
			return;

		for (int i = 0; i < voStrengtheningProgram.getExcercise().size(); i++)
		{
			for (int j = 0; j < form.grdPlinth().getRows().size(); j++)
			{
				if (form.grdPlinth().getRows().get(j).getValue().equals(voStrengtheningProgram.getExcercise().get(i)))
				{
					form.grdPlinth().getRows().get(j).setColSelect(true);
					break;
				}
			}
		}
	}

	protected StrengtheningProgramVo populateDataFromScreen(StrengtheningProgramVo voStrengtheningProgram)
	{
		voStrengtheningProgram.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		populateAuthoringData(voStrengtheningProgram);
		populateLimbsDataFromGrid(voStrengtheningProgram);
		populateExercises(voStrengtheningProgram);
		return super.populateDataFromScreen(voStrengtheningProgram);
	}

	private void populateAuthoringData(StrengtheningProgramVo voStrengtheningProgram)
	{
		AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
		voAuthoringInformation.setAuthoringDateTime(form.dtimAuthoring().getValue());
		voAuthoringInformation.setAuthoringHcp(form.qmbHCP().getValue());
		voStrengtheningProgram.setAuthoringInformation(voAuthoringInformation);
	}

	private void populateLimbsDataFromGrid(StrengtheningProgramVo voStrengtheningProgram)
	{
		StrengtheningProgramLimbWeightVoCollection voColl = new StrengtheningProgramLimbWeightVoCollection();
		
		getTreeRow(form.grdLimbWeight().getRows(), voColl);
		voStrengtheningProgram.setLimbWeight(voColl);
	}
	//WDEV-2785 
	private grdLimbWeightRow getTreeRow(grdLimbWeightRowCollection parentRows, StrengtheningProgramLimbWeightVoCollection voColl)
	{
		if (parentRows == null)
			return null;

		for (int j = 0; j < parentRows.size(); j++)
		{
			grdLimbWeightRow rowLevel1Child = parentRows.get(j);
			Object value = rowLevel1Child.getValue();

			StrengtheningProgramLimbType limbType = null;
			StrengtheningProgramMovement action = null;
			
			if (value instanceof StrengtheningProgramMovement)
			{
				limbType = rowLevel1Child.getParentRow().getValue() instanceof StrengtheningProgramLimbType ? (StrengtheningProgramLimbType)  rowLevel1Child.getParentRow().getValue() : null;
				action = (StrengtheningProgramMovement) value;

				StrengtheningProgramLimbWeightVo limbWight = getLimbWeightRecord(rowLevel1Child, limbType, action);
				if (limbWight != null)
					voColl.add(limbWight);
			}

			if (rowLevel1Child.getRows() != null && rowLevel1Child.getRows().size() > 0)
			{
				grdLimbWeightRow row = getTreeRow(rowLevel1Child.getRows(), voColl);
				if (row != null)
					return row;
			}
		}

		return null;
	}
	
	private StrengtheningProgramLimbWeightVo getLimbWeightRecord(grdLimbWeightRow rowLevel1Child, StrengtheningProgramLimbType limbType, StrengtheningProgramMovement action)
	{
		StrengtheningProgramLimbWeightVo voLimb = null;
		Integer kgs = rowLevel1Child.getColKgs();
		Integer repetitions = rowLevel1Child.getColReps();
		if (kgs != null || repetitions != null)
		{
			voLimb = new StrengtheningProgramLimbWeightVo();
			voLimb.setKgs(kgs);
			voLimb.setRepetitions(repetitions);
			voLimb.setAction(action);
			voLimb.setLimbType(limbType);
		}
		return voLimb;
	}

	private void populateExercises(StrengtheningProgramVo voStrengtheningProgram)
	{
		ims.spinalinjuries.vo.lookups.StrengtheningProgramExerciseCollection lookupColl = new ims.spinalinjuries.vo.lookups.StrengtheningProgramExerciseCollection();
		for (int i = 0; i < form.grdPlinth().getRows().size(); i++)
		{
			if (form.grdPlinth().getRows().get(i).getColSelect())
				lookupColl.add(form.grdPlinth().getRows().get(i).getValue());
		}
		voStrengtheningProgram.setExcercise(lookupColl);
	}

	private boolean isAuthoringHcpEnableable()
	{
		StrengtheningProgramVo voStrengtheningProgram = form.getLocalContext().getStrengtheningProgramVo();
		if (voStrengtheningProgram != null && voStrengtheningProgram.getID_StrengtheningProgramIsNotNull())
		{
			return voStrengtheningProgram.getAuthoringInformation() == null;
		}

		return true;
	}

	private boolean isAuthoringDtimEnableable()
	{
		StrengtheningProgramVo voStrengtheningProgram = form.getLocalContext().getStrengtheningProgramVo();
		if (voStrengtheningProgram != null && voStrengtheningProgram.getID_StrengtheningProgramIsNotNull())
		{
			return voStrengtheningProgram.getAuthoringInformation() == null;
		}

		return true;
	}

	private boolean isNewRecord()
	{
		StrengtheningProgramVo voStrengtheningProgram = form.getLocalContext().getStrengtheningProgramVo();
		return voStrengtheningProgram == null || voStrengtheningProgram.getID_StrengtheningProgram() == null;
	}
	// End Private methods --------------

	protected void onRecbrStrengthProgValueChanged() throws PresentationLogicException 
	{
		browseRecord();
		
	}

	private void browseRecord() 
	{
		initialize();
		
		if(form.recbrStrengthProg().getValue() != null)
		{
			if(form.recbrStrengthProg().getValue() instanceof ClinicalContactShortVo)
			{
				populateScreenFromData(domain.getStrengthProgByClinicalContact((ClinicalContactRefVo) form.recbrStrengthProg().getValue()));
			}
		}
		isRecordEditable();
	}

	private void isRecordEditable() 
	{
		if(form.recbrStrengthProg().getValue() != null)
		{
			if(form.recbrStrengthProg().getValue() instanceof ClinicalContactShortVo)
			{
				ClinicalContactShortVo voClinicalContact = (ClinicalContactShortVo) form.recbrStrengthProg().getValue();
				ClinicalContactShortVo voCurrentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
				
				if(voCurrentClinicalContact != null && voClinicalContact.getID_ClinicalContact().equals(voCurrentClinicalContact.getID_ClinicalContact()))
				{
					hideButtons(true);
					if(form.getLocalContext().getStrengtheningProgramVoIsNotNull())
					{					
						form.btnUpdate().setVisible(true);
						form.btnNew().setVisible(false);
					}
					else
					{
						form.btnUpdate().setVisible(false);
						form.btnNew().setVisible(true);
					}
				}
				else
					hideButtons(false);
			}
			
			if(form.recbrStrengthProg().getValue()instanceof CareContextShortVo)
				hideButtons(false);
		}
	}
	private void hideButtons(boolean visible)
	{
		form.btnNew().setVisible(visible);
		form.btnUpdate().setVisible(visible);
	}
}
