//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.42 build 2202.25904)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.bobath;

import java.util.ArrayList;
import java.util.List;

import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.therapies.forms.bobath.GenForm.gridDetailsRow;
import ims.therapies.vo.BobathShortVo;
import ims.therapies.vo.BobathShortVoCollection;
import ims.therapies.vo.BobathTreatmentVo;
import ims.therapies.vo.BobathTreatmentVoCollection;
import ims.therapies.vo.BobathVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	private void initialize()
	{
		form.ctnDetail().setCollapsed(true);
		form.ctnDetail().lyrBoBath().tabEmpty().setHeaderVisible(false);
	}
	private void open() 
	{
		clear();
		resetContextVariables();		
							
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			populateParentNodes(domain.listByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));			
									
		form.setMode(FormMode.VIEW);
		reselectUpdatedNode();	
	}
	private void reselectUpdatedNode()
	{
		// Pattern demands that the last updated node is displayed
		if (form.getLocalContext().getUpdatedChildIsNotNull())
		{
			form.gridDetails().setValue(form.getLocalContext().getUpdatedChild());
			getSelectedInstance();
			form.getLocalContext().setUpdatedChild(null);
		}
		
	}
	private void getSelectedInstance()
	{
		// In update mode we can select nodes without displaying anything but the context
		// menus can change based on what's selected so we need to update them
		if (form.getMode().equals(FormMode.EDIT)) 
		{
			updateContextMenusState();
			return;
		}		
		
		if(form.gridDetails().getValue() instanceof BobathVo)
		{
			form.getLocalContext().setSelectedChildInstance(null); //WDEV-13808
			clearChildInstanceControls(); //WDEV-13808
			populateParentInstanceControls((BobathVo) form.gridDetails().getValue());
		}
		if(form.gridDetails().getValue() instanceof BobathShortVo)
		{									 
			form.getLocalContext().setSelectedParentInstance(getParentFromDomain((BobathShortVo) form.gridDetails().getValue()));
			populateParentInstanceControls(form.getLocalContext().getSelectedParentInstance());
			//add children if not added already
			populateChildNodes(form.gridDetails().getSelectedRow(),form.getLocalContext().getSelectedParentInstance().getBobathTreatment());			
			form.getLocalContext().setSelectedChildInstance(null);
			clearChildInstanceControls();
	
		}		
		else if(form.gridDetails().getValue() instanceof BobathTreatmentVo)
		{
			GenForm.gridDetailsRow parentRow = form.gridDetails().getSelectedRow().getParentRow();
			populateParentInstanceControls((BobathVo) parentRow.getValue());
			form.getLocalContext().setSelectedParentInstance((BobathVo) parentRow.getValue());
			
			form.getLocalContext().setSelectedChildInstance((BobathTreatmentVo) form.gridDetails().getValue());
			populateChildInstanceControls(form.getLocalContext().getSelectedChildInstance());			
		}
 
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(form.getLocalContext().getSelectedParentInstance().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())));
		
		updateControlsState();
		
	}
	private void updateControlsState()
	{
		// The new button
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) 
				&& form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
				&& form.getLocalContext().getGoldenInstanceFound().booleanValue() == false);

		// The collapsible container
		form.ctnDetail().setCollapsed(form.getLocalContext().getSelectedParentInstance() == null);						

		// The empty tab
		if (form.gridDetails().getValue() == null)
			form.ctnDetail().lyrBoBath().showtabEmpty();

		// The Parent tab
		setParentTabVisability();						

		// The details tab
		setDetailsTabVisibility();		

		// Pick a tab to show
		showHeaderOrDetailsTab();																				

		// The context menus
		updateContextMenusState();		
		
	}
	private void showHeaderOrDetailsTab()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			// In view mode just show the selected node 
			if (form.gridDetails().getValue() instanceof BobathShortVo)		
				form.ctnDetail().lyrBoBath().showtabBoBath();
			else if (form.gridDetails().getValue() instanceof BobathVo)		
				form.ctnDetail().lyrBoBath().showtabBoBath();
			else if (form.gridDetails().getValue() instanceof BobathTreatmentVo)
				form.ctnDetail().lyrBoBath().showtabAreaDetail();
			
			enableParentControls(false);
		}
		else
		{
			if (form.getLocalContext().getSelectedParentInstanceIsNotNull() && (form.getLocalContext().getSelectedParentInstance().getID_BobathIsNotNull()))
				enableParentControls(false);		//on update
			else
				enableParentControls(true);			//new record
							
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.TRUE))
				form.ctnDetail().lyrBoBath().showtabBoBath();
			else
				form.ctnDetail().lyrBoBath().showtabAreaDetail();
		}
	}
	private void setDetailsTabVisibility()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{	
			// In view mode, make the details tab visible if a detail instance is selected in the hierarchy grid.  
			form.ctnDetail().lyrBoBath().tabAreaDetail().setHeaderVisible(form.gridDetails().getValue() instanceof BobathTreatmentVo);									
		}
		else
		{			
			// In edit mode, make the details tab visible if a hierarchy item has been selected and we're not
			// editing a parent.
			form.ctnDetail().lyrBoBath().tabAreaDetail().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull() && 
					form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE));
			
			setAddApplyCaption();			
		}			

		enableDetailsButtons();		
	}
	private void enableDetailsButtons()
	{
		boolean boolVisible = (form.getMode().equals(FormMode.EDIT) &&
				  form.ctnDetail().lyrBoBath().tabAreaDetail().isHeaderVisible() &&
				  form.getLocalContext().getSelectedChildInstance() == null);

		form.ctnDetail().lyrBoBath().tabAreaDetail().btnOk().setVisible(boolVisible);
		form.ctnDetail().lyrBoBath().tabAreaDetail().btnCancelDetails().setVisible(boolVisible);
	}
	private void setAddApplyCaption()
	{
		form.ctnDetail().lyrBoBath().tabAreaDetail().btnOk().setText("Add");
		
		if (form.getLocalContext().getSelectedChildInstance() == null &&
			 (form.gridDetails().getValue() instanceof BobathTreatmentVo))
				form.ctnDetail().lyrBoBath().tabAreaDetail().btnOk().setText("Apply");
	}
	private void setParentTabVisability()
	{
		form.ctnDetail().lyrBoBath().tabBoBath().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull());					
	}
	private void enableParentControls(boolean boolEnabled)
	{
		form.ctnDetail().lyrBoBath().tabBoBath().dtimAuthoring().setEnabled(boolEnabled);
		form.ctnDetail().lyrBoBath().tabBoBath().qmbAuthoringCP().setEnabled(boolEnabled);
	}
	private void populateChildInstanceControls(BobathTreatmentVo voBobathTreat)
	{
		if (voBobathTreat == null ) return;
		
		form.ctnDetail().lyrBoBath().tabAreaDetail().txtAreaTreated().setValue(voBobathTreat.getAreaTreated());
		form.ctnDetail().lyrBoBath().tabAreaDetail().txtPosition().setValue(voBobathTreat.getPosition());
		form.ctnDetail().lyrBoBath().tabAreaDetail().txtAnalysis().setValue(voBobathTreat.getAnalysis());
		form.ctnDetail().lyrBoBath().tabAreaDetail().txtClinical().setValue(voBobathTreat.getClinicalReasoning());
		form.getLocalContext().setSelectedChildInstance(voBobathTreat);
	}
	private void updateContextMenusState()
	{
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			if(form.getLocalContext().getGoldenInstanceSelected().booleanValue())
			{
				// If the golden instance is currently selected we change the text of the update context menu
				// based on whether a parent or child node is selected in the grid.
				if (form.gridDetails().getValue() instanceof BobathShortVo)
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);					
				else if (form.gridDetails().getValue() instanceof BobathTreatmentVo)
					form.getContextMenus().getGenericGridUpdateItem().setText("Edit Bobath Treatment");
				
				// If the golden node is selected we can now only add child nodes so set the menu text accordingly.
				form.getContextMenus().getGenericGridAddItem().setText("Add Bobath Treatment");			
	
				// Only show the update menu if the user has selected an item to update.
				form.getContextMenus().getGenericGridUpdateItem().setVisible((form.getMode().equals(FormMode.VIEW)&& 
																			 form.gridDetails().getSelectedRowIndex()>=0) &&
																			 form.gridDetails().getValue() instanceof BobathTreatmentVo ||
																			 (form.getMode().equals(FormMode.EDIT) &&
																			 form.gridDetails().getValue() instanceof BobathTreatmentVo &&
																			 ((BobathTreatmentVo)form.gridDetails().getValue()).getID_BobathTreatment() == null));
																										
			}
			else
			{
				// If the golden instance has been found but NOT selected hide the context menu's 
				if (form.getLocalContext().getGoldenInstanceFound().booleanValue() == true)
				{
					form.getContextMenus().hideAllGenericGridMenuItems();
					return;
				}
				else
				{
					form.getContextMenus().getGenericGridAddItem().setText("New Bobath");
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);				
				}
			}
			
			form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.VIEW));
			form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) &&
					 form.gridDetails().getValue() instanceof BobathTreatmentVo &&
					 ((BobathTreatmentVo)form.gridDetails().getValue()).getID_BobathTreatment() == null);
		}
		else
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
		}
		
	}
	private void populateParentNodes(BobathShortVoCollection voCollBobathParents)
	{
		if (voCollBobathParents == null || voCollBobathParents.size() <= 0 ) return;
		
		for(int i=0; i<voCollBobathParents.size(); i++)
		{
			populateParentNode(voCollBobathParents.get(i));			
		}	
	}
	private void populateParentNode(BobathShortVo voBobathShort)
	{
		GenForm.gridDetailsRow parRow = form.gridDetails().getRows().newRow();
		parRow.setColAreaTreated(voBobathShort.getAuthoringDateTime().toString()+ " - " + voBobathShort.getAuthoringHCP().toString());
		
		parRow.setValue(voBobathShort);			
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() && voBobathShort.getClinicalContact().getID_ClinicalContact().equals
				(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
		{
			form.gridDetails().setValue(voBobathShort);
			form.getLocalContext().setUpdatingParentInstance(voBobathShort);
			expandParentNode(parRow);
		}
	}
	private void expandParentNode(gridDetailsRow selectedRow)
	{
		if (selectedRow.getValue() instanceof BobathShortVo == false ) return;
		
		form.getLocalContext().setSelectedParentInstance(getParentFromDomain((BobathShortVo) selectedRow.getValue()));		
		if (form.getLocalContext().getSelectedParentInstance() == null ) return; 				

		BobathVo voParentInstance = form.getLocalContext().getSelectedParentInstance();				
		if(voParentInstance.getClinicalContact().getID_ClinicalContact().equals
									(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
		{
			// If this is the Golden Node then we'll colour it golden (ok then beige).
			form.getLocalContext().setGoldenInstanceFound(new Boolean(true));
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
			selectedRow.setBackColor(Color.Beige);			
		}
		
		if (voParentInstance.getBobathTreatment() != null)  
		{
			selectedRow.setExpanded(true);
			populateChildNodes(selectedRow, voParentInstance.getBobathTreatment());
		}
		
		populateParentInstanceControls(voParentInstance);
		
	}
	private void populateParentInstanceControls(BobathVo voBobathParent)
	{
		if(voBobathParent != null)
		{
			form.ctnDetail().lyrBoBath().tabBoBath().dtimAuthoring().setValue(voBobathParent.getAuthoringDateTime());
			if(voBobathParent.getAuthoringHCPIsNotNull())
				form.ctnDetail().lyrBoBath().tabBoBath().qmbAuthoringCP().newRow(voBobathParent.getAuthoringHCP(), voBobathParent.getAuthoringHCP().toString());
			form.ctnDetail().lyrBoBath().tabBoBath().qmbAuthoringCP().setValue(voBobathParent.getAuthoringHCP());
		}
		
	}
	private void populateChildNodes(gridDetailsRow parRow, BobathTreatmentVoCollection voCollBobathTreatments)
	{
		parRow.getRows().clear();
		
		if (voCollBobathTreatments == null || voCollBobathTreatments.size()<=0) return;		
		
		voCollBobathTreatments.sort();
		for(int i=0; i<voCollBobathTreatments.size(); i++)
		{
			if (parRow != null)
			{
				GenForm.gridDetailsRow childRow = parRow.getRows().newRow();
				populateChildNode(childRow, voCollBobathTreatments.get(i));				
			}
		}
		//reselect parent
		parRow.setValue(form.getLocalContext().getSelectedParentInstance());
		form.gridDetails().setValue(parRow.getValue());
		parRow.setExpanded(true);

	}
	private void populateChildNode(gridDetailsRow childRow, BobathTreatmentVo voBobathTreat)
	{
		if (voBobathTreat == null) return;		
		
		childRow.setValue(voBobathTreat);
		childRow.setColAreaTreated(voBobathTreat.getAreaTreated());
		childRow.setColPosition(voBobathTreat.getPosition());
		childRow.setColAnalysis(voBobathTreat.getAnalysis());
		childRow.setColClinicalReasoning(voBobathTreat.getClinicalReasoning());			
	
		//if not saved then set the colour
		if(voBobathTreat.getID_BobathTreatment() == null)
			childRow.setTextColor(Color.Red);
	}
	private BobathVo getParentFromDomain(BobathShortVo voBoBathShort)
	{
		if( engine.isRIEMode())
			return domain.getBoBathById(voBoBathShort);     				//wdev-13807
		else
			return domain.getBoBath(voBoBathShort.getClinicalContact());
	}
	private void resetContextVariables()
	{
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(false));
		form.getLocalContext().setGoldenInstanceFound(new Boolean(false));
		form.getLocalContext().setUpdatingParent(new Boolean(false));
		form.getLocalContext().setSelectedParentInstance(null);
		form.getLocalContext().setSelectedChildInstance(null);
		form.getLocalContext().setUpdatingParentInstance(null);
	}
	private void clear()
	{
		form.gridDetails().getRows().clear();		
		clearChildInstanceControls();		
	}
	private void clearChildInstanceControls()
	{
		form.ctnDetail().lyrBoBath().tabAreaDetail().txtAnalysis().setValue(null);
		form.ctnDetail().lyrBoBath().tabAreaDetail().txtAreaTreated().setValue(null);
		form.ctnDetail().lyrBoBath().tabAreaDetail().txtClinical().setValue(null);
		form.ctnDetail().lyrBoBath().tabAreaDetail().txtPosition().setValue(null);		
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();			
	}
	private boolean save() 
	{	
		if(checkForUnsavedChild())
			return false;
		
		BobathVo voBobath  = populateInstanceData(form.getLocalContext().getSelectedParentInstance());
		
		if (voBobath.getClinicalContact() == null)
			voBobath.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		String[] arrErrors =  voBobath.validate();	
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedParentInstance(domain.saveBoBath(voBobath));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Bobath record already exists for this SOAP clinical contact. " + e.getMessage());
			open();
			return false;
		}
		
		setUpdatedChild();
		return true;		
	}	
	
	private void setUpdatedChild()
	{
		// Straight child update - Select the currently being updated child as the one so show - post save
		if (form.gridDetails().getValue() instanceof BobathTreatmentVo)		
		{
			form.getLocalContext().setUpdatedChild((BobathTreatmentVo) form.gridDetails().getValue());
		}
		else
		{
			// Find the most recently added child
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE))
			{
				form.getLocalContext().getSelectedParentInstance().getBobathTreatment().sort();
				form.getLocalContext().setUpdatedChild(
						form.getLocalContext().getSelectedParentInstance().getBobathTreatment().get(
								form.getLocalContext().getSelectedParentInstance().getBobathTreatment().size() - 1));
			}
			
		}
	}
	private BobathVo populateInstanceData(BobathVo voBobath)
	{
		if (voBobath == null)
			voBobath = new BobathVo();
				
		populateParentInstanceData(voBobath);						

		if (form.getLocalContext().getSelectedChildInstance() == null)
		{
			populateChildCollectionFromGrid(voBobath);			
		}
		else 		// Update child instance.
		{
			BobathTreatmentVo voBobathTreat = form.getLocalContext().getSelectedChildInstance();
			populateChildInstanceData(voBobathTreat);
			form.getLocalContext().setSelectedChildInstance(voBobathTreat);
			
			for (int i=0; i < voBobath.getBobathTreatment().size(); i++)
			{
				if (voBobath.getBobathTreatment().get(i).getID_BobathTreatment() == 
					form.getLocalContext().getSelectedChildInstance().getID_BobathTreatment())
				{						
					voBobath.getBobathTreatment().set(i, form.getLocalContext().getSelectedChildInstance());
				}
			}								
		}
		return voBobath;	
	}
	private void populateChildCollectionFromGrid(BobathVo voBobath)
	{
		if (form.gridDetails().getValue() == null) return;

		if (voBobath.getBobathTreatment() == null)
			voBobath.setBobathTreatment(new BobathTreatmentVoCollection());
		
		GenForm.gridDetailsRow parentRow = form.gridDetails().getValue() instanceof BobathVo || form.gridDetails().getValue() instanceof BobathShortVo ? 
										    form.gridDetails().getSelectedRow() : form.gridDetails().getSelectedRow().getParentRow();		
		
        if (parentRow.getRows().size() > 0 )
        	voBobath.getBobathTreatment().clear();
										    
		for (int i=0; i < parentRow.getRows().size(); i++)
        {
			voBobath.getBobathTreatment().add((BobathTreatmentVo) parentRow.getRows().get(i).getValue());
        }
		
	}
	private void populateParentInstanceData(BobathVo voBobath)
	{
		voBobath.setAuthoringHCP(form.ctnDetail().lyrBoBath().tabBoBath().qmbAuthoringCP().getValue());
		voBobath.setAuthoringDateTime(form.ctnDetail().lyrBoBath().tabBoBath().dtimAuthoring().getValue());		
	}
	private boolean checkForUnsavedChild()
	{
		if (form.getLocalContext().getSelectedChildInstance() == null)
		{				
			if(addOrUpdateChild())
				return true;
		}
		return false;
	}
	private boolean addOrUpdateChild()
	{
		if (form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))			
			if(!newParentNode(form.getLocalContext().getSelectedParentInstance()))
				return false;			
				
		BobathTreatmentVo voBoBatTreatment = form.getLocalContext().getSelectedChildInstance();
		
		if (voBoBatTreatment == null)
			voBoBatTreatment = new BobathTreatmentVo(); 

		populateChildInstanceData(voBoBatTreatment);

		if (form.gridDetails().getValue() instanceof BobathTreatmentVo && form.getLocalContext().getSelectedChildInstanceIsNotNull())
		{
			promoteUpdatedChild(voBoBatTreatment);
			newChildInstance();
			updateControlsState();
		}
		else
		{
			if(newChildNode(voBoBatTreatment))
				return true;
		}
		return false;
	}
	private boolean newChildNode(BobathTreatmentVo voBobathTreatment)
	{
		if (form.getLocalContext().getSelectedChildInstance() != null) return false;
		
		if (voBobathTreatment.countFieldsWithValue() >= 1)
		{
			String strErrors[] = voBobathTreatment.validate();
		
			if(strErrors != null && strErrors.length > 0)
			{
				engine.showErrors(strErrors);
				return true;
			}
	 				
			promoteChild(voBobathTreatment);			
			clearChildInstanceControls();
		}
		return false;
	}
	private void promoteChild(BobathTreatmentVo voBobathTreatment)
	{
		if (voBobathTreatment == null) return;
		GenForm.gridDetailsRow childRow = null;
		form.gridDetails().setValue(form.getLocalContext().getUpdatingParentInstance());
		if(form.gridDetails().getValue() != null)
		{
			if(form.gridDetails().getSelectedRow().getValue() instanceof BobathTreatmentVo)
				childRow = form.gridDetails().getSelectedRow().getParentRow().getRows().newRow();
			else
				childRow = form.gridDetails().getSelectedRow().getRows().newRow();
		}
		
		//GenForm.gridDetailsRow childRow = form.gridDetails().getSelectedRow().getRows().newRow();		
		populateChildNode(childRow, voBobathTreatment);	
	}
	private void newChildInstance()
	{
		clearChildInstanceControls();
		form.getLocalContext().setSelectedChildInstance(null);
		form.gridDetails().setValue(form.gridDetails().getSelectedRow().getParentRow().getValue());
	}
	private void promoteUpdatedChild(BobathTreatmentVo voBobathTreatment)
	{
		if (voBobathTreatment == null) return;
		populateChildNode(form.gridDetails().getSelectedRow(),voBobathTreatment);	
	}
	private void populateChildInstanceData(BobathTreatmentVo voBobathTreatment)
	{
		voBobathTreatment.setAnalysis(form.ctnDetail().lyrBoBath().tabAreaDetail().txtAnalysis().getValue());
		voBobathTreatment.setAreaTreated(form.ctnDetail().lyrBoBath().tabAreaDetail().txtAreaTreated().getValue());
		voBobathTreatment.setClinicalReasoning(form.ctnDetail().lyrBoBath().tabAreaDetail().txtClinical().getValue());
		voBobathTreatment.setPosition(form.ctnDetail().lyrBoBath().tabAreaDetail().txtPosition().getValue());
	}
	
	private boolean newParentNode(BobathVo voNewParent)
	{
		if (voNewParent == null) return true;
		
		BobathShortVo voParentShort = new BobathShortVo();
		voParentShort.setAuthoringHCP(form.ctnDetail().lyrBoBath().tabBoBath().qmbAuthoringCP().getValue());
		voParentShort.setAuthoringDateTime(form.ctnDetail().lyrBoBath().tabBoBath().dtimAuthoring().getValue());
		voParentShort.setClinicalContact(voNewParent.getClinicalContact());
		
		String[] errors = voParentShort.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		GenForm.gridDetailsRow parentRow = form.gridDetails().getRows().newRow();	
		parentRow.setColAreaTreated(voParentShort.getAuthoringDateTime().toString()+ " - " + 
							   				voParentShort.getAuthoringHCP().toString());			
		parentRow.setValue(voParentShort);
		parentRow.setBackColor(Color.Beige);
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
		form.getLocalContext().setUpdatingParentInstance(voParentShort);
		parentRow.setExpanded(true);
		form.gridDetails().setValue(voParentShort);	
		
		return true;
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();		
	}	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				updateInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Remove:
				removeChild();
		}
	}	
	
	private void removeChild()
	{
		BobathShortVo voParentShort = null;
		BobathVo voParent = null;
		
		if(form.gridDetails().getSelectedRow().getParentRow().getValue() instanceof BobathShortVo)
		{
			voParentShort = (BobathShortVo) form.gridDetails().getSelectedRow().getParentRow().getValue();
			form.gridDetails().removeSelectedRow();
			form.gridDetails().setValue(voParentShort);
		}
		else
		{
			voParent = (BobathVo) form.gridDetails().getSelectedRow().getParentRow().getValue();
			form.gridDetails().removeSelectedRow();
			form.gridDetails().setValue(voParent);
		}
		
		updateContextMenusState();
	}
	private void updateInstance()
	{
		form.getLocalContext().setUpdatingParent(new Boolean(form.gridDetails().getValue() instanceof BobathShortVo));
		form.setMode(FormMode.EDIT);	
		if (form.gridDetails().getValue() instanceof BobathTreatmentVo)			
		{
			BobathTreatmentVo voCachedChild = (BobathTreatmentVo) form.gridDetails().getValue(); 
			if ( voCachedChild.getID_BobathTreatment() == null)
			{
				populateChildInstanceControls(voCachedChild);
			}			
		}
	}
	private void newInstance()
	{
		// New instance has been invoked for a parent instance with no current selection made OR
		// with a parent that is not the Golden node..
		if (form.gridDetails().getValue() == null || ((form.getLocalContext().getSelectedParentInstanceIsNotNull() 
				&& form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))))
		{
			newParentInstance();			
		}

		// New instance has been invoked with a child node selected.
		if (form.gridDetails().getValue() instanceof BobathTreatmentVo)
		{
			newChildInstance();
		}
		
		form.setMode(FormMode.EDIT);	
	}
	private void newParentInstance()
	{
		BobathVo voNewParent = new BobathVo(); 	
		
		Hcp voHcp = (Hcp) domain.getHcpUser();
		if(voHcp != null)
			voNewParent.setAuthoringHCP(voHcp);
			
		voNewParent.setAuthoringDateTime(new DateTime());
		voNewParent.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voNewParent.setBobathTreatment(new BobathTreatmentVoCollection());
		populateParentInstanceControls(voNewParent);		
		form.getLocalContext().setSelectedParentInstance(voNewParent);	
	}	
	
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		newInstance();
	}
	
	protected void onBtnCancelDetailsClick() throws PresentationLogicException 
	{
		clearChildInstanceControls();
	}
	
	protected void onBtnOkClick() throws PresentationLogicException 
	{
		addOrUpdateChild();			
	}
	
	protected void onQmbAuthoringCPTextSubmited(String value) throws PresentationLogicException 
	{
		setAuthoringCP(value);		
	}
	private void setAuthoringCP(String value)
	{
		form.ctnDetail().lyrBoBath().tabBoBath().qmbAuthoringCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		
		HcpCollection coll = domain.listMedics(filter);
		for (int i = 0; i < coll.size(); i++)
		{
			Hcp med = coll.get(i);
			form.ctnDetail().lyrBoBath().tabBoBath().qmbAuthoringCP().newRow(med, med.toString());			
		}
		
		if (coll.size() == 1)
			form.ctnDetail().lyrBoBath().tabBoBath().qmbAuthoringCP().setValue(coll.get(0));
		else if (coll.size() > 1)
			form.ctnDetail().lyrBoBath().tabBoBath().qmbAuthoringCP().showOpened();		
	}

	protected void onGridDetailsSelectionChanged() throws PresentationLogicException 
	{
		getSelectedInstance();
	}
	protected void onFormModeChanged()
	{
		updateControlsState();	
	}
}
