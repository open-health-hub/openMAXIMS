//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.44 build 2244.18931)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.wheelchairreferral;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.spinalinjuries.vo.lookups.WheelchairType;
import ims.therapies.vo.WheelchairReferralVo;
import ims.therapies.vo.WheelchairReferralVoCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	private void initialize()
	{
		loadTypeOfChairCombo();		
	}
	private void loadTypeOfChairCombo()
	{
		TreeNode[] coll = LookupHelper.getWheelchairType(domain.getLookupService()).getRootNodes();
		
		if(coll != null)
		{
			for(int i=0;i<coll.length;i++)
			{
				WheelchairType item = (WheelchairType) coll[i];
				if(item.isActive())
					form.cmbType().newRow(item, item.getText());
			}
		}	
	}
	private void open()
	{
		form.setMode(FormMode.VIEW);
		super.clearScreen();
		
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull()){
			WheelchairReferralVoCollection coll = domain.getWheelchairReferralVoByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			if(coll!=null && coll.size()>0)
				form.getLocalContext().setWheelchairReferral(coll.get(0));
			else
				form.getLocalContext().setWheelchairReferral(null);
		}
		displayButtons();	
		populateHCP();
		
		super.populateScreenFromData(form.getLocalContext().getWheelchairReferral());
	}
	private void populateHCP()
	{
		if(form.getLocalContext().getWheelchairReferral() != null)
			form.qmbHCP().newRow(form.getLocalContext().getWheelchairReferral().getAuthoringCP(), form.getLocalContext().getWheelchairReferral().getAuthoringCP().toString());
	}
	private void displayButtons()
	{
		if(form.getLocalContext().getWheelchairReferral() == null)
			visibleButtons(true);
		else
			visibleButtons(false);
	}
	private void visibleButtons(boolean visible)
	{
		form.btnNew().setVisible(visible);
		form.btnUpdate().setVisible(!visible);
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.dtimRecording().setEnabled(true);
		form.qmbHCP().setEnabled(true);
		form.dtimRecording().setValue(new DateTime());
		form.dteAssess().setValue(new Date());
		form.dteReferral().setValue(new Date());
		
		Hcp hcp = (Hcp)domain.getHcpUser();
		if (hcp != null)
		{
			form.qmbHCP().newRow(hcp,hcp.toString());
			form.qmbHCP().setValue(hcp);
		}
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		WheelchairReferralVo voWheelchairReferral = super.populateDataFromScreen(form.getLocalContext().getWheelchairReferral());
		
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			voWheelchairReferral.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			voWheelchairReferral.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		String[] arrErrors = voWheelchairReferral.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try
		{
			domain.save(voWheelchairReferral);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
		}
		
		open();
	}
	protected void onQmbHCPTextSubmited(String value) throws PresentationLogicException
	{
		setAuthoringCP(value);	
	}
	private void setAuthoringCP(String value)
	{
		form.qmbHCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname("%" + value + "%");
		filter.setQueryName(name);
		
		HcpCollection coll = domain.listHCPs(filter);
		for (int i = 0; i < coll.size(); i++)
		{
			Hcp med = coll.get(i);
			form.qmbHCP().newRow(med, med.toString());			
		}
		
		if (coll.size() == 1)
			form.qmbHCP().setValue(coll.get(0));
		else if (coll.size() > 1)
			form.qmbHCP().showOpened();
		
	}
	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(false);
		}
	}
}
