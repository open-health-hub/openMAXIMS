//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.43 build 2232.25589)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.wheelchairassessment;

import java.util.ArrayList;

import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.ClinicalContactShortVoCollection;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.spinalinjuries.vo.lookups.PowerchairSkillCollection;
import ims.spinalinjuries.vo.lookups.WheelchairSkillAssessedLevel;
import ims.spinalinjuries.vo.lookups.WheelchairSkillCollection;
import ims.spinalinjuries.vo.lookups.PowerchairSkillAssessedLevel;
import ims.spinalinjuries.vo.lookups.WheelchairType;
import ims.spinalinjuries.vo.lookups.WheelchairTypeCollection;
import ims.therapies.vo.PowerchairSkillsAssessmentVo;
import ims.therapies.vo.PowerchairSkillsAssessmentVoCollection;
import ims.therapies.vo.WheelchairAssessmentVo;
import ims.therapies.vo.WheelchairAssessmentVoCollection;
import ims.therapies.vo.WheelchairSkillsAssessmentVo;
import ims.therapies.vo.WheelchairSkillsAssessmentVoCollection;
import ims.therapies.vo.WheelchairSurfaceDistanceVo;
import ims.therapies.vo.WheelchairSurfaceDistanceVoCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	/**
	 * prepopulates Type hierarchical lookup
	 * @return      void
	 */	
	private void prepopulateControls() {
		
		form.cmbChairType().clear();
		WheelchairTypeCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getWheelchairType(domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			if(lookupCollection.get(x).getParent()==null)
				form.cmbChairType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	private void initialize() {
		prepopulateControls();
		loadGrids();
		
		ClinicalContactShortVo currentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		form.getLocalContext().setClinicalContact(currentClinicalContact);
		if(currentClinicalContact!=null)
			form.getLocalContext().setCurrentClinicalContactId(currentClinicalContact.getID_ClinicalContact());
		
		form.grdPowechair().getRows().clear(); //wdev-13511
		
	}
	private void loadGrids() 
	{
		populatePowerChairGrid();
		
		WheelchairSkillCollection voCollWheelchairSkills = LookupHelper.getWheelchairSkill(domain.getLookupService());
		form.grdSkills().getRows().clear();
		GenForm.grdSkillsRow rowSkills = null;
		for(int i=0; i<voCollWheelchairSkills.size();i++)
		{
			rowSkills = form.grdSkills().getRows().newRow();
		
			rowSkills.setColWheelchairSkills(voCollWheelchairSkills.get(i));
		}
		
	}
	
	private void open() {
		clearFields();
		form.setMode(FormMode.VIEW);
		form.getContextMenus().hideAllGenericGridMenuItems();
		
		fillRecordBrowser();	
		
		if(form.getLocalContext().getClinicalContactIsNotNull()){
			form.recbrAssessments().setValue(form.getLocalContext().getClinicalContact());
		
		}
		else{
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(false);
		}
		
		if(form.recbrAssessments().size()>0){
			try {
				onRecbrAssessmentsValueChanged();
			} catch (PresentationLogicException e) {
				engine.showMessage("Failed to populate assessment details.");
			}
		}
		
	}
	private void fillRecordBrowser() {
		
		Integer currentContactId = form.getLocalContext().getCurrentClinicalContactId();
		Color textColour = null;
		
		ClinicalContactShortVoCollection collClinicalContactShortVo = domain.listClinicalContactsByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		for(int i=0; i<collClinicalContactShortVo.size(); i++){
			ClinicalContactShortVo voClinicalContactShort =  collClinicalContactShortVo.get(i); 
			if(voClinicalContactShort.getID_ClinicalContact().equals(currentContactId))
				textColour = Color.Green;
			else
				textColour = null;
			form.recbrAssessments().newRow(voClinicalContactShort, "Clinical Contact: " + voClinicalContactShort.getStartDateTime() + " - " + voClinicalContactShort.getSeenBy(), textColour);
		}
		
	}
	private void populateScreenFromData(WheelchairAssessmentVo voWheelchairAssessment) {
		
		form.getLocalContext().setWheelchairAssessmentVo(voWheelchairAssessment);
		
		if(voWheelchairAssessment.getAuthoringCPIsNotNull()){
			form.qmbHCP().newRow(voWheelchairAssessment.getAuthoringCP(), voWheelchairAssessment.getAuthoringCP().getName().toString());
			form.qmbHCP().setValue(voWheelchairAssessment.getAuthoringCP());
		}
		
		if(voWheelchairAssessment.getAuthoringDateTimeIsNotNull())
			form.dtimRecording().setValue(voWheelchairAssessment.getAuthoringDateTime());
		
		form.cmbChairType().setValue(voWheelchairAssessment.getChairTypeIsNotNull() ? voWheelchairAssessment.getChairType() : null);
		cmbChairTypeValueChanged();
				
		boolean lkupFound;
		GenForm.grdSurfaceRow rowSurface;
		form.grdSurface().getRows().clear();
		if(voWheelchairAssessment.getSurfaceDistanceIsNotNull())
			for (int i = 0; i< voWheelchairAssessment.getSurfaceDistance().size(); i++)
			{
				WheelchairSurfaceDistanceVo voSurfaceDistance = voWheelchairAssessment.getSurfaceDistance().get(i);
				
				rowSurface = form.grdSurface().getRows().newRow();
				rowSurface.setColSurface(voSurfaceDistance.getSurface());
				if(voSurfaceDistance.getDistanceIsNotNull())
					rowSurface.setColDistance(voSurfaceDistance.getDistance());
			}
		
		populateWheelchairAssessment(voWheelchairAssessment);
					
		GenForm.grdSkillsRow rowSkills;
		if(voWheelchairAssessment.getWheelchairSkillsAssessIsNotNull())
			for (int i = 0; i< voWheelchairAssessment.getWheelchairSkillsAssess().size(); i++)
			{
				WheelchairSkillsAssessmentVo voWheelchairSkills = voWheelchairAssessment.getWheelchairSkillsAssess().get(i);
				
				lkupFound = false;
				for(int j=0; j<form.grdSkills().getRows().size(); j++){
					rowSkills = form.grdSkills().getRows().get(j);
					if(rowSkills.getColWheelchairSkills().equals(voWheelchairSkills.getWheelchairSkill())){
						if(voWheelchairSkills.getWheelchairSkillAssLevelIsNotNull()){
							 if(voWheelchairSkills.getWheelchairSkillAssLevel().equals(WheelchairSkillAssessedLevel.CONTINUOUSLYGOOD))
								 rowSkills.setColContgood(true);
							 else if(voWheelchairSkills.getWheelchairSkillAssLevel().equals(WheelchairSkillAssessedLevel.FAIR))
								 rowSkills.setColFair(true);
							 else if(voWheelchairSkills.getWheelchairSkillAssLevel().equals(WheelchairSkillAssessedLevel.POOR))
								 rowSkills.setColPoor(true);
						}
						lkupFound = true;
					}
				}
				if(!lkupFound){				
					rowSkills = form.grdSkills().getRows().newRow();
					rowSkills.setColWheelchairSkills(voWheelchairSkills.getWheelchairSkill());
					if(voWheelchairSkills.getWheelchairSkillAssLevelIsNotNull()){
						 if(voWheelchairSkills.getWheelchairSkillAssLevel().equals(WheelchairSkillAssessedLevel.CONTINUOUSLYGOOD))
							 rowSkills.setColContgood(true);
						 else if(voWheelchairSkills.getWheelchairSkillAssLevel().equals(WheelchairSkillAssessedLevel.FAIR))
							 rowSkills.setColFair(true);
						 else if(voWheelchairSkills.getWheelchairSkillAssLevel().equals(WheelchairSkillAssessedLevel.POOR))
							 rowSkills.setColPoor(true);
					}
				}
			}
				
			
	}
	private void populateWheelchairAssessment(WheelchairAssessmentVo voWheelchairAssessment)
	{
		if(voWheelchairAssessment == null || voWheelchairAssessment.getPowerchairSkillsAssess() == null)
			return;
		
		boolean lkupFound;
		GenForm.grdPowechairRow rowPowerchair;
		if(voWheelchairAssessment.getPowerchairSkillsAssessIsNotNull())
			for (int i = 0; i< voWheelchairAssessment.getPowerchairSkillsAssess().size(); i++)
			{
				PowerchairSkillsAssessmentVo voPowerchairSkills = voWheelchairAssessment.getPowerchairSkillsAssess().get(i);
				
				lkupFound = false;
				for(int j=0; j<form.grdPowechair().getRows().size(); j++){
					rowPowerchair = form.grdPowechair().getRows().get(j);
					if(rowPowerchair.getColPowerchairskills().equals(voPowerchairSkills.getPowerchairSkill())){
						if(voPowerchairSkills.getPowerchairSkillAssLevelIsNotNull()){
						 if(voPowerchairSkills.getPowerchairSkillAssLevel().equals(PowerchairSkillAssessedLevel.INDEPENDENT))
							rowPowerchair.setColIndependent(true);
						 else if(voPowerchairSkills.getPowerchairSkillAssLevel().equals(PowerchairSkillAssessedLevel.SUPERVISION))
							rowPowerchair.setColSupervision(true);
						 else if(voPowerchairSkills.getPowerchairSkillAssLevel().equals(PowerchairSkillAssessedLevel.SAFE))
							rowPowerchair.setColUnsafe(true);
						}
						lkupFound = true;
					}
				}
				if(!lkupFound){				
					rowPowerchair = form.grdPowechair().getRows().newRow();
					rowPowerchair.setColPowerchairskills(voPowerchairSkills.getPowerchairSkill());
					if(voPowerchairSkills.getPowerchairSkillAssLevelIsNotNull()){
						 if(voPowerchairSkills.getPowerchairSkillAssLevel().equals(PowerchairSkillAssessedLevel.INDEPENDENT))
							rowPowerchair.setColIndependent(true);
						 else if(voPowerchairSkills.getPowerchairSkillAssLevel().equals(PowerchairSkillAssessedLevel.SUPERVISION))
							rowPowerchair.setColSupervision(true);
						 else if(voPowerchairSkills.getPowerchairSkillAssLevel().equals(PowerchairSkillAssessedLevel.SAFE))
							rowPowerchair.setColUnsafe(true);
						}
				}
				
			}
	}
	
	private void clearFields()
	{
		form.dtimRecording().setValue(null);
		form.qmbHCP().setValue(null);
		form.cmbChairType().setValue(null);
		
		form.grdSurface().getRows().clear();
		
		form.grdPowechair().getRows().clear();
		
		GenForm.grdSkillsRow rowSkills = null;
		for(int i=0; i<form.grdSkills().getRows().size();i++)
		{
			rowSkills = form.grdSkills().getRows().get(i);
		
			rowSkills.setColPoor(false);
			rowSkills.setColFair(false);
			rowSkills.setColContgood(false);
		}
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		setDefaultValues();
		form.setMode(FormMode.EDIT);
		form.qmbHCP().setEnabled(true);
		form.dtimRecording().setEnabled(true);
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
		form.getLocalContext().setWheelchairAssessmentVo(null);
	}
	private void setDefaultValues() {
		Hcp hcpUser = (Hcp)domain.getHcpUser();
		if(hcpUser!=null){
			form.qmbHCP().newRow(hcpUser, hcpUser.getName().toString());
			form.qmbHCP().setValue(hcpUser);
		}
		DateTime dateTime = new DateTime();
		form.dtimRecording().setValue(dateTime);		
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.qmbHCP().setEnabled(false);
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
	
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		WheelchairAssessmentVo voWheelchairAssessment = form.getLocalContext().getWheelchairAssessmentVo();
		if (voWheelchairAssessment == null)
			voWheelchairAssessment = new WheelchairAssessmentVo();
		
		voWheelchairAssessment = populateDataFromScreem(voWheelchairAssessment);
		
		if(voWheelchairAssessment==null)
			return;
		
		String[] arrErrors = voWheelchairAssessment.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(arrErrors);
		if (arrScreenAndVoErrors.length > 0)
		{
			engine.showErrors("Validation Errors", arrScreenAndVoErrors);
			return;
		}
	
		//save and update local context
		try 
		{
			form.getLocalContext().setWheelchairAssessmentVo(domain.saveWheelchairAssessment(voWheelchairAssessment));
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
		}
		
		open(); 
	}
	private WheelchairAssessmentVo populateDataFromScreem(WheelchairAssessmentVo voWheelchairAssessment) {
		
		if(voWheelchairAssessment.getClinicalContact()==null)
			voWheelchairAssessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		voWheelchairAssessment.setAuthoringCP(form.qmbHCP().getValue());
		if(form.dtimRecording().getValue() == null || form.dtimRecording().getValue().getDate()==null){
			engine.showMessage("Please enter Date and Time.");
			return null;
		}
		if(form.dtimRecording().getValue().getTime()==null){
			engine.showMessage("Please enter Time.");
			return null;
		}
		voWheelchairAssessment.setAuthoringDateTime(form.dtimRecording().getValue());
		
		voWheelchairAssessment.setChairType(form.cmbChairType().getValue());
		
		WheelchairSurfaceDistanceVoCollection collSurfaceDistance = new WheelchairSurfaceDistanceVoCollection();
		GenForm.grdSurfaceRow rowSurface = null;
		for (int i = 0; i< form.grdSurface().getRows().size(); i++)
		{
			rowSurface = form.grdSurface().getRows().get(i);
			WheelchairSurfaceDistanceVo voSurfaceDistance = new WheelchairSurfaceDistanceVo();	
			
			voSurfaceDistance.setSurface(rowSurface.getColSurface());
			voSurfaceDistance.setDistance(rowSurface.getColDistance());
			
			collSurfaceDistance.add(voSurfaceDistance);
		}
		voWheelchairAssessment.setSurfaceDistance(collSurfaceDistance);
		
		PowerchairSkillsAssessmentVoCollection collPowerchairSkillsAssess = new PowerchairSkillsAssessmentVoCollection();
		GenForm.grdPowechairRow rowPowerchair = null;
		for (int i = 0; i< form.grdPowechair().getRows().size(); i++)
		{
			rowPowerchair = form.grdPowechair().getRows().get(i);
			PowerchairSkillsAssessmentVo voPowerchairSkills = new PowerchairSkillsAssessmentVo();	
			
			voPowerchairSkills.setPowerchairSkill(rowPowerchair.getColPowerchairskills());
			if(rowPowerchair.getColIndependent())
				voPowerchairSkills.setPowerchairSkillAssLevel(PowerchairSkillAssessedLevel.INDEPENDENT);
			else if(rowPowerchair.getColSupervision())
				voPowerchairSkills.setPowerchairSkillAssLevel(PowerchairSkillAssessedLevel.SUPERVISION);
			else if(rowPowerchair.getColUnsafe())
				voPowerchairSkills.setPowerchairSkillAssLevel(PowerchairSkillAssessedLevel.SAFE);
			
			collPowerchairSkillsAssess.add(voPowerchairSkills);
		}
		voWheelchairAssessment.setPowerchairSkillsAssess(collPowerchairSkillsAssess);
		
		WheelchairSkillsAssessmentVoCollection collWheelchairSkills = new WheelchairSkillsAssessmentVoCollection();
		GenForm.grdSkillsRow rowSkills = null;
		for (int i = 0; i< form.grdSkills().getRows().size(); i++)
		{
			rowSkills = form.grdSkills().getRows().get(i);
			WheelchairSkillsAssessmentVo voWheelchairSkills = new WheelchairSkillsAssessmentVo();	
			
			voWheelchairSkills.setWheelchairSkill(rowSkills.getColWheelchairSkills());
			if(rowSkills.getColContgood())
				voWheelchairSkills.setWheelchairSkillAssLevel(WheelchairSkillAssessedLevel.CONTINUOUSLYGOOD);
			else if(rowSkills.getColPoor())
				voWheelchairSkills.setWheelchairSkillAssLevel(WheelchairSkillAssessedLevel.POOR);
			else if(rowSkills.getColFair())
				voWheelchairSkills.setWheelchairSkillAssLevel(WheelchairSkillAssessedLevel.FAIR);
			
			collWheelchairSkills.add(voWheelchairSkills);
		}
		voWheelchairAssessment.setWheelchairSkillsAssess(collWheelchairSkills);
		
		return voWheelchairAssessment;
	}
	/**
	 * check for screen validation errors and add to VO validation errors
	 * returns array or error messages
	 * @return String[]
	 *  @param voWheelchairAssessment, arrErrors
	 */	
	private String[] addScreenErrorsToVOErrors(String[] arrErrors)
	{
		String[] arrAllErrors = null;
		ArrayList<String> screenErrors = new ArrayList<String>();
		
		GenForm.grdPowechairRow rowPowerchair = null;
		for (int i = 0; i< form.grdPowechair().getRows().size(); i++)
		{
			int nPowerchairOptions = 0; 
			rowPowerchair = form.grdPowechair().getRows().get(i);
			if(rowPowerchair.getColIndependent())
				nPowerchairOptions++;
			if(rowPowerchair.getColSupervision())
				nPowerchairOptions++;
			if(rowPowerchair.getColUnsafe())
				nPowerchairOptions++;
			
			if(nPowerchairOptions>1){
				StringBuffer sErrorMessage = new StringBuffer();
				sErrorMessage.append("Only one option should be choosen for Powerchair Skill: \"");
				sErrorMessage.append(rowPowerchair.getColPowerchairskills().getText());
				sErrorMessage.append("\".");
				screenErrors.add(sErrorMessage.toString());
			}
		}
		
		GenForm.grdSkillsRow rowSkills = null;
		for (int i = 0; i< form.grdSkills().getRows().size(); i++)
		{
			rowSkills = form.grdSkills().getRows().get(i);
			int nWeelchairOptions = 0; 
			rowSkills = form.grdSkills().getRows().get(i);
			if(rowSkills.getColContgood())
				nWeelchairOptions++;
			if(rowSkills.getColPoor())
				nWeelchairOptions++;
			if(rowSkills.getColFair())
				nWeelchairOptions++;
			
			if(nWeelchairOptions>1){
				StringBuffer sErrorMessage = new StringBuffer();
				sErrorMessage.append("Only one option should be choosen for Wheelchair Skill: ");
				sErrorMessage.append(rowSkills.getColWheelchairSkills().getText());
				sErrorMessage.append(".");
				screenErrors.add(sErrorMessage.toString());
			}
		}
		
		
		if(arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);
			
			int i=0;	
			for(int p=screenErrors.size();p<arrAllErrors.length;p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}	
		else
		{
			arrAllErrors = new String[screenErrors.size()];		
			
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);	
		}	
		
		return arrAllErrors;
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();	
	}
	protected void onQmbHCPTextSubmited(String value) throws PresentationLogicException {
		form.qmbHCP().clear();
		Hcp filter = new Hcp();
		PersonName name = new PersonName();
		name.setSurname("%" + value + "%");
		filter.setQueryName(name);
		//filter.setHcpType(HcpDisType.MEDICAL);
		
		HcpCollection voHCPColl = domain.listHcps(filter);
		
		if(voHCPColl != null)
		{
			for (int i = 0; i < voHCPColl.size(); i++)
			{
				form.qmbHCP().newRow(voHCPColl.get(i), voHCPColl.get(i).getName().toString());
			}
			if (voHCPColl.size() == 1)
			{
				form.qmbHCP().setValue(voHCPColl.get(0));
			}
			else if (voHCPColl.size() > 1)
			{
				form.qmbHCP().showOpened();		
			}
		}
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException {
		if (sender.equals(form.grdSurface()))
		{
			if (menuItemID == form.getContextMenus().getGenericGridAddItem().getID())
				form.grdSurface().getRows().newRow();	
		}
		
	}
	protected void onRecbrAssessmentsValueChanged() throws PresentationLogicException {
		WheelchairAssessmentVoCollection voWheelchairAssessment = null;	//wdev-13410
		WheelchairAssessmentVo tempVo = null;							//wdev-13410	
		
		ClinicalContactShortVo voClinicalContactShort = form.recbrAssessments().getValue();
		
		form.getLocalContext().setClinicalContact(voClinicalContactShort);
		voWheelchairAssessment = domain.getWheelchairAssessment(voClinicalContactShort.getID_ClinicalContact());
		if(voWheelchairAssessment != null && voWheelchairAssessment.size() > 0)		//wdev-13410
			tempVo = voWheelchairAssessment.get(0);									//wdev-13410
		else
			tempVo = null;
		
		displayContactAssessment(tempVo, voClinicalContactShort);					//wdev-13410
	
	}
	private void displayContactAssessment(WheelchairAssessmentVo voWheelchairAssessment, ClinicalContactShortVo voClinicalContactShort) {
		
		Integer currentContactId = form.getLocalContext().getCurrentClinicalContactId();
		
		clearFields();
		
		if(voWheelchairAssessment!=null){
			populateScreenFromData(voWheelchairAssessment);
			
			if(voClinicalContactShort.getID_ClinicalContact().equals(currentContactId))
				form.btnUpdate().setVisible(true);
			else
				form.btnUpdate().setVisible(false);
			
			form.btnNew().setVisible(false);
			
		}
		else{
			
			form.getLocalContext().setWheelchairAssessmentVo(null);
						
			if(voClinicalContactShort.getID_ClinicalContact().equals(currentContactId))
				form.btnNew().setVisible(true);
			else
				form.btnNew().setVisible(false);
			
			form.btnUpdate().setVisible(false);
		}
		
	}

	protected void onCmbChairTypeValueChanged() throws PresentationLogicException
	{
		cmbChairTypeValueChanged();
	}

	private void cmbChairTypeValueChanged() {
		form.grdPowechair().getRows().clear();
		enablePowerChairGrid();
		refreshPowerChairGridWithSavedData();
		
	}
	//Repopulates the grid with the saved data when the user flicks from Power to Manual then back to Power 
	private void refreshPowerChairGridWithSavedData()
	{
		WheelchairType wheelchairType = form.cmbChairType().getValue();
		boolean isPower  = wheelchairType != null && wheelchairType.equals(WheelchairType.POWER);  
		boolean editMode = form.getMode().equals(FormMode.EDIT); 
		if(editMode && isPower)
			populatePowerChairGrid();
	}

	private void enablePowerChairGrid()
	{
		WheelchairType wheelChairType = form.cmbChairType().getValue();
		if (wheelChairType != null)
		{
			if (wheelChairType.equals(WheelchairType.POWER))
			{
				if (form.getMode().equals(FormMode.EDIT))
				{
					form.grdPowechair().setEnabled(true);
					form.grdPowechair().setReadOnly(false);
				}
				else
				{
					form.grdPowechair().setReadOnly(true);
				}
			}
			else
			{
				form.grdPowechair().setReadOnly(true);
			}
		}
		else
		{
			form.grdPowechair().setReadOnly(true);
		}
	}

	private void populatePowerChairGrid()
	{
		form.grdPowechair().getRows().clear();
		WheelchairType wheelChairType = form.cmbChairType().getValue();
		
		if(wheelChairType != null && wheelChairType.equals(WheelchairType.POWER))
		{
			PowerchairSkillCollection voCollPowerchairSkills = LookupHelper.getPowerchairSkill(domain.getLookupService());
			GenForm.grdPowechairRow rowPowechair = null;
			for(int i=0; i<voCollPowerchairSkills.size();i++)
			{
				rowPowechair = form.grdPowechair().getRows().newRow();
				rowPowechair.setColPowerchairskills(voCollPowerchairSkills.get(i));
			}
		}
		
		WheelchairAssessmentVo wheelchairAssessment = form.getLocalContext().getWheelchairAssessmentVo();
		if(wheelchairAssessment != null && wheelchairAssessment.getID_WheelchairAssessmentIsNotNull())
			populateWheelchairAssessment(wheelchairAssessment);
	}
	
	protected void onFormModeChanged()
	{
		enablePowerChairGrid();
	}
}
