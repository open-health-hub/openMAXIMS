//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.52 build 2508.29436)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.soapnote;

import java.util.ArrayList;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ClinicalNotesRefVo;
import ims.core.forms.authoringinfo.IComponent;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.ClinicalNoteStatusVo;
import ims.core.vo.ClinicalNoteStatusVoCollection;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffVo;
import ims.core.vo.SOAPVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.lookups.ClinicalNoteType;
import ims.core.vo.lookups.ClinicalNotesStatus;
import ims.core.vo.lookups.ClinicalNotingMode;
import ims.core.vo.lookups.SourceOfNote;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException, ims.framework.exceptions.FormOpenException
	{
		//WDEV-2511 
		if (domain.getMosUser() == null)
			throw new FormOpenException("The User Account is not linked to a HCP or Member of Staff, this form will not be active. Please contact the System Administrator.");
		
		form.btnClose().setVisible(engine.isDialog());
		initialiseScreenControls();
		
		openTherapiesSOAP();
		checkForDiscipline();
	}

	private void initialiseScreenControls() 
	{
		form.customControlReviewed().ignoreComponentReadonlyFlag(Boolean.TRUE);
		form.customControlAuthoring().setIsRequiredPropertyToControls(true);
		form.chkForReview().setVisible(true);
		form.cmbDiscipline().setVisible(true);
		form.lblDiscipline().setVisible(true);
		form.setcustomControlReviewedVisible(false);
		form.chkMarkAsReviewed().setVisible(false);
	}
	protected void onChkForReviewValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.chkForReview().getValue() == true)
		{
			form.cmbDiscipline().setEnabled(true);
		}
		else
		{
			form.cmbDiscipline().setEnabled(false);
			form.cmbDiscipline().setValue(null);
		}
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
		showHideCustomComponent(form.customControlAuthoring(), Boolean.FALSE, false);
		
		if (isDialog())
		{
			form.btnClose().setVisible(false);
			form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		}
		
		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.UPDATE);
		form.btnClose().setEnabled(false);
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() &&
				validationIPMode(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus()))
		{
			form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.VALIDATE);
		}
	}
	
	private boolean validationIPMode(ClinicalNoteStatusVo currentStatus) 
	{
		if (currentStatus != null
			&&	currentStatus.getStatusIsNotNull() 
			&& (currentStatus.getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
			&& domain.getHcpLiteUser() != null 
			&& testDiscipline()) 
			//domain.getHcpLiteUser().equals(form.customControlAuthoring().getValue().getAuthoringHcp()))
			return true;
		else
			return false;
	}
	
	private boolean testDiscipline()
	{
		MemberOfStaffVo fullVo = null;
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo)domain.getMosUser();
		if (mos != null)
			fullVo = domain.getMemberOfStaff(mos);
		
		if (fullVo != null)
		{
			if (fullVo.getHcpIsNotNull())
			{
				if (fullVo.getHcp().getHcpTypeIsNotNull())
				{
					if (form.customControlAuthoring().getValue() != null &&
							form.customControlAuthoring().getValue().getAuthoringHcpIsNotNull() &&
								form.customControlAuthoring().getValue().getAuthoringHcp().getHcpTypeIsNotNull())
					{
						if (form.customControlAuthoring().getValue().getAuthoringHcp().getHcpType().equals(fullVo.getHcp().getHcpType()))
							return true;
					}					
				}				
			}
		}
		return false;
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (saveTherapiesSOAP())
			openTherapiesSOAP();
		
		form.btnClose().setEnabled(true);
	}

	private void checkForDiscipline()
	{
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
		{
			MemberOfStaffShortVo mos = null;
			if (getDisciplineForLoggedInUser(form.getGlobalContext().Clinical.getCurrentClinicalNote()) != null)
				mos = getDisciplineForLoggedInUser(form.getGlobalContext().Clinical.getCurrentClinicalNote());
			else
			{
				engine.showMessage("No Discipline is available. Please choose an authoring user.");
				return;
			}
					
			/*if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
				{
				if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() &&
						form.getGlobalContext().Clinical.getCurrentClinicalNote().getDisciplineIsNotNull() &&
						( ( mos.getHcpIsNotNull() &&
							!form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcp().getHcpType().equals(mos.getHcp().getHcpType()) &&
								form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() &&
									!form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT) ) ||
										mos.getHcpIsNotNull() ))	
								{
									form.btnNew().setVisible(false);
									form.btnUpdate().setVisible(false);
								}
				}*/
			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())// &&
				//	form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsTranscribedIsNotNull() )
					{
						if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() &&
								form.getGlobalContext().Clinical.getCurrentClinicalNote().getDisciplineIsNotNull() &&
									mos.getHcpIsNotNull())
						{
									if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo() != null
											&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcp()!=null
											&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcp().getHcpType()!=null
											&& !form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcp().getHcpType().equals(mos.getHcp().getHcpType()) &&
										(form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() &&
											!form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT) ||
											form.getGlobalContext().Clinical.getReturnToFormMode() == null))
			
									{
										form.btnNew().setVisible(false);
										form.btnUpdate().setVisible(false);
									}
						}
						//Non HCP
						else 
						{
							if (form.getMode().equals(FormMode.VIEW) &&
									domain.getHcpLiteUser() == null)
							{
								form.btnNew().setVisible(false);
								form.btnUpdate().setVisible(false);
								
								if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() &&
										form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatusIsNotNull() &&
											!(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.ACTIVE) ||
												form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.CORRECTED)))
								{
									form.btnUpdate().setVisible(true);
								}
							}
						}
				}
		}
	}
	
	private boolean isCmbStatusFill()
	{
		if(form.cmbStatus().getValue() == null)
		{
			engine.showMessage("Status is a mandatory field!");
			return false;
		}
		return true;
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		form.btnClose().setEnabled(true);

		if (isDialog())
			onBtnCloseClick();
		else
			openTherapiesSOAP();
	}
	
	private boolean isDialog()
	{
		return engine.isDialog();
	}
	
	private String[] getUiErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if(form.customControlAuthoring().getValue() == null
			|| form.customControlAuthoring().getValue().getAuthoringHcp()==null
				|| form.customControlAuthoring().getValue().getAuthoringDateTime()==null)
		{
			errors.add("Authoring Information is mandatory");
		}
		
		//wdev-2163
		if (form.txtSubjective().getValue() == null	&&
				form.txtObjective().getValue() == null &&
					form.txtAnalysis().getValue() == null &&
						form.txtPlan().getValue() == null)
		{
			errors.add("SOAP details are mandatory");
		}
		
		if(form.cmbStatus().getValue() == null)
		{
			errors.add("Status is mandatory");
		}
		
		if (form.chkForReview().getValue() == true)
		{
			if (form.cmbDiscipline().getValue() == null)
			{
				//form.chkForReview().setValue(false);
				errors.add("If 'For Review' is checked 'Discipline' is mandatory");
			}
		}
	
		if (errors.size() > 0) 
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid SOAP record", searchErrors);
			return searchErrors;
		}
		return null;
	}
	
	private boolean saveTherapiesSOAP() throws PresentationLogicException 
	{
		ClinicalNotesVo clinNoteVo = populateDataFromScreen(form.getLocalContext().getclinicalNotesVo());
		if (clinNoteVo == null)
			return false;
		 
		String[] uiErrors = getUiErrors();
		String[] errors = clinNoteVo.validate(uiErrors);
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			
			if (form.chkForReview().getValue() == false)
				form.cmbDiscipline().setEnabled(false);
			else
				form.cmbDiscipline().setEnabled(true);
			
			return false;
		}

		boolean clinicalContacttobeSaved = false;
		if (clinNoteVo.getID_ClinicalNotes() == null)
			clinicalContacttobeSaved = true;

		try
		{
			clinNoteVo = domain.saveClinicalNotes(clinNoteVo);
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setclinicalNotesVo(clinNoteVo);
			openTherapiesSOAP();
			return false;
		}
		catch(UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			form.getLocalContext().setclinicalNotesVo(clinNoteVo);
			openTherapiesSOAP();
			return false;
		}
		catch(DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			form.getLocalContext().setclinicalNotesVo(clinNoteVo);
			openTherapiesSOAP();
			return false;
		}
		catch (DomainInterfaceException e) {

			engine.showMessage(e.getMessage());
			form.getLocalContext().setclinicalNotesVo(clinNoteVo);
			openTherapiesSOAP();
			return false;
		} 
				
		if (clinNoteVo == null)
			throw new FormOpenException("There is a clinical note of a different type already recorded on the system for this clincal contact");		
		
		form.getLocalContext().setclinicalNotesVo(clinNoteVo);
		form.getGlobalContext().Clinical.setCurrentClinicalNote(clinNoteVo);
		
		//Now Save SOAP
		SOAPVo voSOAP = form.getLocalContext().getSOAPVo();
		if (voSOAP == null)
			voSOAP = new SOAPVo();

		if (clinNoteVo != null)
		{
			ClinicalNotesRefVo voRef = new ClinicalNotesRefVo();
			voRef.setID_ClinicalNotes(clinNoteVo.getID_ClinicalNotes());
			voSOAP.setClinicalNote(voRef);
		}

		if (!voSOAP.getClinicalContactIsNotNull())
			voSOAP.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

		if (!voSOAP.getCareContextIsNotNull())
			voSOAP.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		errors = voSOAP.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			domain.saveSOAPsVo(voSOAP);
		}
		catch (StaleObjectException sox)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			openTherapiesSOAP();
			return false;
		}
		catch (UniqueKeyViolationException ue)
		{
			engine.showMessage(ue.getMessage());
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		if (clinicalContacttobeSaved)
			saveClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		if (isDialog())
		{
			onBtnCancelClick();
			onBtnCloseClick();
		}

		return true;
	}

	private void saveClinicalContact(ClinicalContactShortVo currentClinicalContact) 
	{
		currentClinicalContact.setIsClinicalNoteCreated(new Boolean(true));
		String[] errors = currentClinicalContact.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		try 
		{
			form.getGlobalContext().Core.setCurrentClinicalContact(domain.saveClinicalContact(currentClinicalContact));
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}
	
	private void fillIPStatusCombo(ClinicalNotesVo voClinicalNote) 
	{
		if (voClinicalNote != null)
		{
			//In Correct mode, HCP ok and either Active or Correct
			if (correctModeIP(voClinicalNote.getCurrentStatus())) 
			{
				form.btnUpdate().setText("Correct");
				fillIPStatusCorrect();
			}
			//Requires Validation
			else if (voClinicalNote.getCurrentStatus().getStatusIsNotNull() &&
				voClinicalNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
			{
				//fillIPStatusValidation();
				if (domain.getHcpLiteUser() != null)
					form.btnUpdate().setText("Validate");
				fillIPStatusPreValidation();
			}
			//Draft, HCP OK
			else if (voClinicalNote.getCurrentStatus().getStatusIsNotNull() &&
				voClinicalNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT)	&&
					domain.getHcpLiteUser() != null	&&
						//domain.getHcpLiteUser().equals(form.customControlAuthoring().getValue().getAuthoringHcp()))
						testDiscipline())
			{
				fillIPStatusNew();
			}
			//Draft, HCP not OK
			else if (voClinicalNote.getCurrentStatus().getStatusIsNotNull()	&&
				voClinicalNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT)	&&
					domain.getHcpLiteUser() == null) 
			{
				fillIPStatusPreValidation();
			}				
		}
	}

	
	private void fillIPStatusPreValidation() 
	{
		form.cmbStatus().clear();
		form.cmbStatus().newRow(ClinicalNotesStatus.PREVALIDATION, ClinicalNotesStatus.PREVALIDATION.getText());
		form.cmbStatus().newRow(ClinicalNotesStatus.DRAFT, ClinicalNotesStatus.DRAFT.getText());
	}

	private void fillIPStatusNew() 
	{
		form.cmbStatus().clear();
		form.cmbStatus().newRow(ClinicalNotesStatus.ACTIVE, ClinicalNotesStatus.ACTIVE.getText());
		form.cmbStatus().newRow(ClinicalNotesStatus.DRAFT, ClinicalNotesStatus.DRAFT.getText());
	}

	private void fillIPStatusCorrect() 
	{
		form.cmbStatus().clear();
		form.cmbStatus().newRow(ClinicalNotesStatus.ACTIVE, ClinicalNotesStatus.ACTIVE.getText());
		form.cmbStatus().newRow(ClinicalNotesStatus.CORRECTED, ClinicalNotesStatus.CORRECTED.getText());
	}

	private void fillIPStatusValidation() 
	{
		form.cmbStatus().clear();
		form.cmbStatus().newRow(ClinicalNotesStatus.PREVALIDATION, ClinicalNotesStatus.PREVALIDATION.getText());
		form.cmbStatus().newRow(ClinicalNotesStatus.ACTIVE, ClinicalNotesStatus.ACTIVE.getText());
	}
	
	private ClinicalNotesVo populateDataFromScreen(ClinicalNotesVo clinicalNotesVo) 
	{
		if (clinicalNotesVo == null)
			clinicalNotesVo = new ClinicalNotesVo();
		
		if ( ! clinicalNotesVo.getCareContextIsNotNull())
			clinicalNotesVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if ( ! clinicalNotesVo.getClinicalContactIsNotNull())
			clinicalNotesVo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		MemberOfStaffShortVo mos = null;
		if (getDisciplineForLoggedInUser(clinicalNotesVo) != null)
			mos = getDisciplineForLoggedInUser(clinicalNotesVo);
		else
			return null;
		
		//Save old Status to check for active
		ClinicalNoteStatusVo voPreviousStat = clinicalNotesVo.getCurrentStatus();

		ClinicalNoteStatusVo voStat = new ClinicalNoteStatusVo();
		voStat.setStatus(form.cmbStatus().getValue());
		voStat.setDateTime(new DateTime());
		voStat.setMOS(mos != null ? mos : null);
		
		/*//In Correct mode, HCP ok and either Active or Correct then be sure status saved is Corrected
		if (correctModeIP(voPreviousStat)) 
		{
			voStat.setStatus(ClinicalNotesStatus.CORRECTED);
			clinicalNotesVo.setIsCorrected(new Boolean(true));
		}*/

		SOAPVo voSOAP = form.getLocalContext().getSOAPVo();
		if (voSOAP == null)
			voSOAP = new SOAPVo();
		
		if (!voSOAP.getClinicalContactIsNotNull())
			voSOAP.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

		if (!voSOAP.getCareContextIsNotNull())
			voSOAP.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voSOAP.setSubjectiveNote(form.txtSubjective().getValue() != null ? form.txtSubjective().getValue() : "");
		voSOAP.setObjectiveNote(form.txtObjective().getValue() != null ? form.txtObjective().getValue() : "");
		voSOAP.setAnalysisNote(form.txtAnalysis().getValue() != null ? form.txtAnalysis().getValue() : "");
		voSOAP.setPlanNote(form.txtPlan().getValue() != null ? form.txtPlan().getValue() : "");


		form.getLocalContext().setSOAPVo(voSOAP);
		//TODO
		if(form.getGlobalContext().Core.getClinicalNotingModeIsNotNull()
				&& form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.VALIDATE))
		{
			voStat.setClinicalNote(clinicalNotesVo.getClinicalNote());
			voStat.setStatus(ClinicalNotesStatus.ACTIVE);
		}
		else
			voStat.setStatus(form.cmbStatus().getValue());
		
		boolean isReviewed = false;
		
		if (form.getGlobalContext().Core.getClinicalNotingModeIsNotNull())
			isReviewed = form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW);
		
		if (correctModeIP(voPreviousStat) && !isReviewed &&
				!clinicalNotesVo.getClinicalNote().equals(voSOAP.getRichTextString())) //In Correct mode
		{
			voStat.setClinicalNote(clinicalNotesVo.getClinicalNote());
			clinicalNotesVo.setStatusHistory(addStatusToCollection(clinicalNotesVo.getStatusHistory(), voStat));
			
			voStat.setStatus(ClinicalNotesStatus.CORRECTED);
			clinicalNotesVo.setIsCorrected(new Boolean(true));
		}
		
		if (voStat.getStatusIsNotNull())
			clinicalNotesVo.setCurrentStatus(voStat);
		else
			clinicalNotesVo.setCurrentStatus(voPreviousStat);
		clinicalNotesVo.setClinicalNote(voSOAP.getRichTextString());
		clinicalNotesVo.setInHospitalReport(Boolean.FALSE);

		if(form.customControlAuthoring().getValue()!=null)
			clinicalNotesVo.setDiscipline(form.customControlAuthoring().getValue().getAuthoringHcpIsNotNull()
					&& form.customControlAuthoring().getValue().getAuthoringHcp().getHcpTypeIsNotNull() ? form.customControlAuthoring().getValue().getAuthoringHcp().getHcpType() : null);

		setAuthoringInfo(clinicalNotesVo);
		
		if ( ! clinicalNotesVo.getNoteTypeIsNotNull())
			clinicalNotesVo.setNoteType(ClinicalNoteType.CLINICALNOTE);
		
		clinicalNotesVo.setIsDerivedNote(Boolean.TRUE);
		
		clinicalNotesVo.setSourceOfNote(SourceOfNote.THERAPYSOAPNOTE);
		
		if (form.chkForReview().getValue())
		{
			clinicalNotesVo.setForReview(new Boolean(form.chkForReview().getValue()));
			clinicalNotesVo.setForReviewDiscipline(form.cmbDiscipline().getValue());
		}
		else
		{
			clinicalNotesVo.setForReview(null);
			clinicalNotesVo.setForReviewDiscipline(null);
		}
		
		if (form.iscustomControlReviewedVisible())
		{
			clinicalNotesVo.setReviewingDateTime(
				form.customControlReviewed().getValue() != null && 
					form.customControlReviewed().getValue().getAuthoringDateTimeIsNotNull() ? 
							form.customControlReviewed().getValue().getAuthoringDateTime() : null);
			clinicalNotesVo.setReviewingHCP(
				form.customControlReviewed().getValue() != null && 
					form.customControlReviewed().getValue().getAuthoringHcpIsNotNull() ?
							form.customControlReviewed().getValue().getAuthoringHcp() : null);
		}

		if (clinicalNotesVo.getRecordingUser() == null)
			clinicalNotesVo.setRecordingUser((MemberOfStaffShortVo)domain.getMosUser());
		if (clinicalNotesVo.getRecordingDateTime() == null)
			clinicalNotesVo.setRecordingDateTime(new DateTime());

	
		
		return clinicalNotesVo;
	}

	private void setAuthoringInfo(ClinicalNotesVo clinicalNotesVo)
	{
		AuthoringInformationVo voAuthor = new AuthoringInformationVo();
		voAuthor.setAuthoringDateTime(form.customControlAuthoring().getValue() != null && form.customControlAuthoring().getValue().getAuthoringDateTimeIsNotNull() ? form.customControlAuthoring().getValue().getAuthoringDateTime() : null);
		voAuthor.setAuthoringHcp(form.customControlAuthoring().getValue() != null && form.customControlAuthoring().getValue().getAuthoringHcpIsNotNull() ? form.customControlAuthoring().getValue().getAuthoringHcp() : null);
		clinicalNotesVo.setAuthoringInfo(voAuthor);
	}

	private MemberOfStaffShortVo getDisciplineForLoggedInUser(ClinicalNotesVo clinicalNotesVo)
	{
		MemberOfStaffVo fullVo = null;
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo)domain.getMosUser();
		if (mos != null)
			fullVo = domain.getMemberOfStaff(mos);

		if (fullVo != null)
		{
			if (fullVo.getHcpIsNotNull() && fullVo.getHcp() instanceof MedicVo)
			{
				MedicVo voMedic = (MedicVo)fullVo.getHcp();
				if (voMedic.getHcpTypeIsNotNull())
					clinicalNotesVo.setDiscipline(voMedic.getHcpType());
				else
				{
					engine.showMessage("Please select a Discipline type for the logged in user.");
					return null;
				}
			}
			else
			{
				if (form.customControlAuthoring().getValue()!=null
						&& form.customControlAuthoring().getValue().getAuthoringHcpIsNotNull())
					clinicalNotesVo.setDiscipline(form.customControlAuthoring().getValue().getAuthoringHcp().getHcpType());
				else
				{
					engine.showMessage("No Discipline is available. Please choose an authoring user.");
					return null;
				}
			}
		}
		else
		{
			engine.showMessage("Member of Staff is Null.");
			return null;
		}
		return mos;
	}
	
	private ClinicalNoteStatusVoCollection addStatusToCollection(ClinicalNoteStatusVoCollection statusHistory, ClinicalNoteStatusVo voStat) 
	{
		ClinicalNoteStatusVoCollection voColl = statusHistory;
		if (voColl == null)
			voColl = new ClinicalNoteStatusVoCollection();
		voColl.add(voStat);
		
		return voColl;
	}
	
	private boolean correctModeIP(ClinicalNoteStatusVo currentStatus) 
	{
		if (currentStatus != null
			&&	currentStatus.getStatusIsNotNull() 
				&& (currentStatus.getStatus().equals(ClinicalNotesStatus.ACTIVE) 
						|| currentStatus.getStatus().equals(ClinicalNotesStatus.CORRECTED) )
							&& domain.getHcpLiteUser() != null 
								&& testDiscipline()) 
								//domain.getHcpLiteUser().equals(form.customControlAuthoring().getValue().getAuthoringHcp()))
									return true;
		else
			return false;
	}
	
	
	private void newInstance() 
	{
		form.setMode(FormMode.EDIT);
		
		showHideCustomComponent(form.customControlAuthoring(), Boolean.TRUE, true);
		AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo ();
		voAuthoringInformation.setAuthoringDateTime(new DateTime());
		if (domain.getHcpUser() != null)
		{
			HcpLiteVo authoringHcp = (HcpLiteVo) domain.getHcpLiteUser();
			if (authoringHcp != null)
				voAuthoringInformation.setAuthoringHcp(authoringHcp);
			form.customControlAuthoring().setValue(voAuthoringInformation);
			fillIPStatusNew();
		}
		else // No a HCP
		{
			if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() && form.getGlobalContext().Core.getCurrentClinicalContact().getSeenByIsNotNull())
				voAuthoringInformation.setAuthoringHcp(form.getGlobalContext().Core.getCurrentClinicalContact().getSeenBy());
			form.customControlAuthoring().setValue(voAuthoringInformation);			
			fillIPStatusPreValidation();
		}
		
		
		form.setcustomControlReviewedVisible(false);
		form.chkMarkAsReviewed().setVisible(false);

		form.btnClose().setEnabled(false);

		form.cmbStatus().setEnabled(true);
	}

	private void setCurrentClinicalNote() throws FormOpenException
	{
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			
			ClinicalNotesVo clinicalNotesForContact = null;
			if(engine.isDialog() && form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
			{		
				
				clinicalNotesForContact = domain.getClinicalNotes( form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContact());
			}
			else
			{
				ClinicalContactShortVo currentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
				try
				{
					clinicalNotesForContact = domain.getClinicalNotesForContact(currentClinicalContact);
				}
				catch(Exception e)
				{
					throw new FormOpenException("There is a clinical note of a different type already recorded on the system for this clincal contact");
				}
			}
			
			if (clinicalNotesForContact != null)
				form.getGlobalContext().Clinical.setCurrentClinicalNote(clinicalNotesForContact);
			else
				form.getGlobalContext().Clinical.setCurrentClinicalNote(null);
		}
	}
	
	private void openTherapiesSOAP() throws PresentationLogicException
	{
		clearDetails();
		setCurrentClinicalNote();
		form.setMode(FormMode.VIEW);
		
		
		showHideCustomComponent(form.customControlAuthoring(), Boolean.FALSE, false);
		
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
		{
			checkCurrentClinicalNote();
			populateScreenControls(form.getGlobalContext().Clinical.getCurrentClinicalNote());

			if (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() && 
					form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT))
			{
				openAsDialog();
			}
			else
			{
				ClinicalNotesVo note = form.getGlobalContext().Clinical.getCurrentClinicalNote();
				boolean isDraft = note.getCurrentStatusIsNotNull() && ClinicalNotesStatus.DRAFT.equals(note.getCurrentStatus().getStatus());
				boolean myNote =  note.getAuthoringInfoIsNotNull() && note.getAuthoringInfo().getAuthoringHcpIsNotNull() 
									&& note.getAuthoringInfo().getAuthoringHcp().equals(domain.getHcpLiteUser());
				
				showBtnEdit((isDraft && myNote) || !isDraft);
				showBtnNew(false);
			}
		}
		else if (form.getGlobalContext().Clinical.getCurrentClinicalNote() == null &&
			form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull()	&&
				form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT) )
		{
			newInstance();

			form.getGlobalContext().Clinical.setReturnToFormMode(null);
			form.getGlobalContext().Clinical.setCurrentClinicalNote(null);
		}
		else
		{
			if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			{
				ClinicalNotesVo voNote = domain.getClinicalNotes(form.getGlobalContext().Core.getCurrentClinicalContact());
				checkForExistingClinicalNotes(voNote);
				
				if (voNote != null && 
					voNote.getNoteTypeIsNotNull() &&//wdev-4952
					voNote.getNoteType().equals(ClinicalNoteType.THERAPYNOTE))
				{
					populateScreenControls(voNote);
	
					showBtnEdit(true);
					showBtnNew(false);
				}
				else
				{
					showBtnNew(true);
					showBtnEdit(false);
				}
			}
			else
			{
				showBtnEdit(false);
				showBtnNew(false);
			}
		}
		if(engine.isDialog() && form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.VIEW))
			showBtnEdit(false);
	}

	private void checkForExistingClinicalNotes(ClinicalNotesVo voNote) throws FormOpenException
	{
		if ((voNote !=null &&
				voNote.getSourceOfNoteIsNotNull() && 
					! voNote.getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE)) ||
						(voNote != null &&
							voNote.getNoteTypeIsNotNull() &&//wdev-4952
							!(voNote.getNoteType().equals(ClinicalNoteType.DISCHARGENOTE) ||
								voNote.getNoteType().equals(ClinicalNoteType.SUMMARYATADMISSION)) && 
									voNote.getIsDerivedNoteIsNotNull() &&
										!voNote.getIsDerivedNote().booleanValue()))			
											throw new FormOpenException("There is a clinical note of a different type already recorded on the system for this clincal contact");
	}

	private void openAsDialog() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
		if(form.getGlobalContext().Core.getClinicalNotingModeIsNotNull() && 
			form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW))
		{
			form.chkForReview().setVisible(false);
			form.cmbDiscipline().setVisible(false);
			form.lblDiscipline().setVisible(false);
			form.setcustomControlReviewedVisible(true);
			form.customControlReviewed().setLabels(AuthoringLabelType.REVIEWING);
			form.chkMarkAsReviewed().setVisible(true);
			form.chkMarkAsReviewed().setValue(true);
			
			onChkMarkAsReviewedValueChanged();
			
			if (! form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCPIsNotNull() && 
					! form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTimeIsNotNull())
			{
				enabledCustomReviewed(Boolean.TRUE);
			}
		}

		enableCustomReviewed(false);
		
		form.btnClose().setVisible(false);
	}

	private void enableCustomReviewed(boolean isEnabled)
	{
		if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCPIsNotNull()
				&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTimeIsNotNull())
		{
			if (isEnabled == false)
				enabledCustomReviewed(Boolean.FALSE);
			else
				enabledCustomReviewed(Boolean.TRUE);
				
			form.chkMarkAsReviewed().setEnabled(isEnabled);
			setReviewedInfo();
		}
	}

	private void checkCurrentClinicalNote() throws FormOpenException
	{
		if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getSourceOfNoteIsNotNull() && 
				! form.getGlobalContext().Clinical.getCurrentClinicalNote().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE) &&
				form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContactIsNotNull())
		{
			form.getGlobalContext().Core.setClinicalNotingMode(null);
				throw new FormOpenException("There is a clinical note of a different type already recorded on the system for this clincal contact");
		}
		if (!SourceOfNote.THERAPYSOAPNOTE.equals(form.getGlobalContext().Clinical.getCurrentClinicalNote().getSourceOfNote()))
		{
			throw new FormOpenException("You are trying to open a different note type than this form supports");
		}
	}

	private void showBtnEdit(boolean value)
	{
		form.btnUpdate().setVisible(value);
		form.btnUpdate().setEnabled(value);
	}
	
	private void showBtnNew(boolean value)
	{
		form.btnNew().setVisible(value);
		form.btnNew().setEnabled(value);
	}
	

	private void enabledCustomReviewed(Boolean value)
	{
		form.customControlReviewed().setEnabledAuthoringHCP(value);
		form.customControlReviewed().setEnabledDateTime(value);
	}

	private void setReviewedInfo()
	{
		AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
		voAuthoringInformation.setAuthoringHcp(form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCP());
		voAuthoringInformation.setAuthoringDateTime(form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTime());
		form.customControlReviewed().setValue(voAuthoringInformation);
	}
	
	private void populateScreenControls(ClinicalNotesVo voNote) 
	{
		initialiseScreenControls();
		
		if (voNote.getIsDerivedNoteIsNotNull()
				&& voNote.getIsDerivedNote().equals(Boolean.TRUE) )
			{	
				//Its a SOAP Clinical Note
				form.getLocalContext().setclinicalNotesVo(voNote);

				AuthoringInformationVo voAuthor = new AuthoringInformationVo();
				if (voNote.getAuthoringInfoIsNotNull())
				{
					voAuthor.setAuthoringDateTime(voNote.getAuthoringInfo().getAuthoringDateTime());
					voAuthor.setAuthoringHcp(voNote.getAuthoringInfo().getAuthoringHcp());
				}
				form.customControlAuthoring().setValue(voAuthor);
				
				ClinicalNotesRefVo voClinNotesRef = new ClinicalNotesRefVo();
				voClinNotesRef.setID_ClinicalNotes(voNote.getID_ClinicalNotes());
				
				SOAPVo voSOAP = domain.getSOAPsVo(voClinNotesRef);
				if (voSOAP != null)
				{
					form.getLocalContext().setSOAPVo(voSOAP);

					form.txtSubjective().setValue(voSOAP.getSubjectiveNoteIsNotNull() ? voSOAP.getSubjectiveNote() : "");  
					form.txtObjective().setValue(voSOAP.getObjectiveNoteIsNotNull() ? voSOAP.getObjectiveNote() : "");  
					form.txtAnalysis().setValue(voSOAP.getAnalysisNoteIsNotNull() ? voSOAP.getAnalysisNote() : "");  
					form.txtPlan().setValue(voSOAP.getPlanNoteIsNotNull() ? voSOAP.getPlanNote() : "");
				}

				fillIPStatusCombo(voNote);
				
				if (form.cmbStatus().getValues().size() == 0)
					form.cmbStatus().newRow(voNote.getCurrentStatus().getStatus(), voNote.getCurrentStatus().getStatus().getText());
				
				form.cmbStatus().setValue(voNote.getCurrentStatusIsNotNull() ? voNote.getCurrentStatus().getStatus() : null);

				if (voNote.getForReviewIsNotNull() && voNote.getForReview().booleanValue())
				{
					form.chkForReview().setValue(voNote.getForReview().booleanValue());
					form.cmbDiscipline().setValue(voNote.getForReviewDiscipline());

					form.chkForReview().setVisible(true);
					form.cmbDiscipline().setVisible(true);
					form.lblDiscipline().setVisible(true);
					form.setcustomControlReviewedVisible(false);
					form.chkMarkAsReviewed().setVisible(false);
					
					if (voNote.getReviewingHCPIsNotNull() || voNote.getReviewingDateTimeIsNotNull())
					{
						AuthoringInformationVo voReview = new AuthoringInformationVo();
						voReview.setAuthoringDateTime(voNote.getReviewingDateTime());
						voReview.setAuthoringHcp(voNote.getReviewingHCP());
						form.customControlReviewed().setValue(voReview);
						
						form.chkForReview().setVisible(false);
						form.cmbDiscipline().setVisible(false);
						form.lblDiscipline().setVisible(false);
						form.setcustomControlReviewedVisible(true);
						form.customControlReviewed().setLabels(AuthoringLabelType.REVIEWING);
						form.chkMarkAsReviewed().setVisible(true);
						form.chkMarkAsReviewed().setValue(true);
					}
				}
			}
	}

	private void clearDetails() 
	{
		form.customControlAuthoring().setValue(null);
		form.txtSubjective().setValue(null);
		form.txtObjective().setValue(null);
		form.txtAnalysis().setValue(null);
		form.txtPlan().setValue(null);
		form.cmbStatus().setValue(null);
		form.customControlReviewed().setValue(null);
		form.chkForReview().setValue(false);
		form.cmbDiscipline().setValue(null);
		
	}
	
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Core.setClinicalNotingMode(null);
		engine.close(DialogResult.OK);
	}

	protected void onFormModeChanged() 
	{
		form.chkForReview().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
		form.cmbDiscipline().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
		form.setcustomControlReviewedEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
		form.chkMarkAsReviewed().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
		
		if(form.getGlobalContext().Core.getClinicalNotingModeIsNotNull()
			&& form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW))
		{
			form.cmbStatus().setEnabled(true);
			
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.txtSubjective().setEnabled(false);
				form.txtObjective().setEnabled(false);
				form.txtAnalysis().setEnabled(false);
				form.txtPlan().setEnabled(false);
				form.cmbStatus().setEnabled(false);
				//form.customControlReviewed().setEnabledAuthoringHCP(Boolean.FALSE);
				//form.customControlReviewed().setEnabledDateTime(Boolean.FALSE);
			}
			
		}
		else
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.txtSubjective().setEnabled(true);
				form.txtObjective().setEnabled(true);
				form.txtAnalysis().setEnabled(true);
				form.txtPlan().setEnabled(true);
				form.cmbStatus().setEnabled(true);
				enabledCustomReviewed(Boolean.TRUE);
				
				//In Correct mode
				if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() &&
						form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() &&
							correctModeIP(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus()))
				{
					form.chkForReview().setEnabled(false);
					form.cmbDiscipline().setEnabled(false);
					form.cmbStatus().setEnabled(false);
				}
				else
				{
					form.chkForReview().setEnabled(true);
					
					if (form.chkForReview().getValue() == false)
					{
						form.cmbDiscipline().setEnabled(false);
						form.cmbStatus().setEnabled(false);
					}
					else
					{
						form.cmbDiscipline().setEnabled(true);
						form.cmbStatus().setEnabled(true);
					}
					

					if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() &&
							form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() 
							&&  form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION) )
					{
						form.cmbStatus().setEnabled(false);
					}
					else
						form.cmbStatus().setEnabled(true);
				}
			}
			else
			{
				form.cmbStatus().setEnabled(false);
			}
		}
		
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
		{
			form.setcustomControlReviewedEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
			form.chkMarkAsReviewed().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
			
			enableCustomReviewed(false);
		}
	}
	
	protected void showHideCustomComponent(IComponent customControl, Boolean isEnabled, boolean initialize)
	{	
		if (customControl != null)
		{
			customControl.setEnabledAuthoringHCP(isEnabled);
			customControl.setEnabledDateTime(isEnabled);
		}
		
		if (customControl != null &&
				initialize != false)
		{	
			customControl.initializeComponent();
		}
	}

	protected void onChkMarkAsReviewedValueChanged() throws PresentationLogicException
	{
		if (form.chkMarkAsReviewed().getValue() == true)
		{
			enabledCustomReviewed(Boolean.TRUE);
			form.customControlReviewed().initializeComponent();
		}
		else
		{
			form.customControlReviewed().setEnabledAuthoringHCP(Boolean.FALSE);
			form.customControlReviewed().setEnabledDateTime(Boolean.FALSE);
			form.customControlReviewed().setValue(null);
		}		
	}
}
