//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.forms.massage;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class recbrMassageRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.ValueObject value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.control.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbAuthoringCPComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.Hcp value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.Hcp value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.Hcp getValue()
		{
			return (ims.core.vo.Hcp)super.control.getValue();
		}
		public void setValue(ims.core.vo.Hcp value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdConnectiveRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdConnectiveRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColAreaReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColAreaReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColAreaOpened()
		{
			super.row.showOpened(0);
		}
		public ims.spinalinjuries.vo.lookups.ConnectiveTissueMassageArea getColArea()
		{
			return (ims.spinalinjuries.vo.lookups.ConnectiveTissueMassageArea)super.row.get(0);
		}
		public void setColArea(ims.spinalinjuries.vo.lookups.ConnectiveTissueMassageArea value)
		{
			super.row.set(0, value, true);
		}
		public void setCellColAreaTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColAreaDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColAreaDescriptionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColAreaDescriptionOpened()
		{
			super.row.showOpened(1);
		}
		public String getColAreaDescription()
		{
			return (String)super.row.get(1);
		}
		public void setColAreaDescription(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColAreaDescriptionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColLateralityReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColLateralityReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColLateralityOpened()
		{
			super.row.showOpened(2);
		}
		public ims.core.vo.lookups.LateralityLRB getColLaterality()
		{
			return (ims.core.vo.lookups.LateralityLRB)super.row.get(2);
		}
		public void setColLaterality(ims.core.vo.lookups.LateralityLRB value)
		{
			super.row.set(2, value, true);
		}
		public void setCellColLateralityTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColDurationReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColDurationReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColDurationOpened()
		{
			super.row.showOpened(3);
		}
		public Integer getColDuration()
		{
			return (Integer)super.row.get(3);
		}
		public void setColDuration(Integer value)
		{
			super.row.set(3, value);
		}
		public void setCellColDurationTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColNotesReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColNotesReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColNotesOpened()
		{
			super.row.showOpened(4);
		}
		public String getColNotes()
		{
			return (String)super.row.get(4);
		}
		public void setColNotes(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColNotesTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.therapies.vo.ConnectiveTissueMassageVo getValue()
		{
			return (ims.therapies.vo.ConnectiveTissueMassageVo)super.row.getValue();
		}
		public void setValue(ims.therapies.vo.ConnectiveTissueMassageVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdConnectiveRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdConnectiveRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdConnectiveRow get(int index)
		{
			return new grdConnectiveRow(super.collection.get(index));
		}
		public grdConnectiveRow newRow()
		{
			return new grdConnectiveRow(super.collection.newRow());
		}
		public grdConnectiveRow newRow(boolean autoSelect)
		{
			return new grdConnectiveRow(super.collection.newRow(autoSelect));
		}
		public grdConnectiveRow newRowAt(int index)
		{
			return new grdConnectiveRow(super.collection.newRowAt(index));
		}
		public grdConnectiveRow newRowAt(int index, boolean autoSelect)
		{
			return new grdConnectiveRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdConnectiveGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.therapies.vo.ConnectiveTissueMassageVoCollection getValues()
		{
			ims.therapies.vo.ConnectiveTissueMassageVoCollection listOfValues = new ims.therapies.vo.ConnectiveTissueMassageVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.therapies.vo.ConnectiveTissueMassageVo getValue()
		{
			return (ims.therapies.vo.ConnectiveTissueMassageVo)super.grid.getValue();
		}
		public void setValue(ims.therapies.vo.ConnectiveTissueMassageVo value)
		{
			super.grid.setValue(value);
		}
		public grdConnectiveRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdConnectiveRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdConnectiveRowCollection getRows()
		{
			return new grdConnectiveRowCollection(super.grid.getRows());
		}
		public grdConnectiveRow getRowByValue(ims.therapies.vo.ConnectiveTissueMassageVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdConnectiveRow(row);
		}
		public void setColAreaHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColAreaHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox ColAreaComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setColAreaDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColAreaDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColLateralityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColLateralityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public GridComboBox ColLateralityComboBox()
		{
			return new GridComboBox(super.grid, 2);
		}
		public void setColDurationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColDurationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColNotesHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColNotesHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	public static class grdFrictionRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdFrictionRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColAreaReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColAreaReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColAreaOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getColArea()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellColAreaTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColStructureReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColStructureReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColStructureOpened()
		{
			super.row.showOpened(1);
		}
		public ims.framework.controls.GridMutableComboBox getColStructure()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 1);
		}
		public void setCellColStructureTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColLateralityReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColLateralityReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColLateralityOpened()
		{
			super.row.showOpened(2);
		}
		public ims.core.vo.lookups.LateralityLRB getColLaterality()
		{
			return (ims.core.vo.lookups.LateralityLRB)super.row.get(2);
		}
		public void setColLaterality(ims.core.vo.lookups.LateralityLRB value)
		{
			super.row.set(2, value, true);
		}
		public void setCellColLateralityTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColDurationReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColDurationReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColDurationOpened()
		{
			super.row.showOpened(3);
		}
		public Integer getColDuration()
		{
			return (Integer)super.row.get(3);
		}
		public void setColDuration(Integer value)
		{
			super.row.set(3, value);
		}
		public void setCellColDurationTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColNotesReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColNotesReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColNotesOpened()
		{
			super.row.showOpened(4);
		}
		public String getColNotes()
		{
			return (String)super.row.get(4);
		}
		public void setColNotes(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColNotesTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.therapies.vo.DeepFrictionMassageVo getValue()
		{
			return (ims.therapies.vo.DeepFrictionMassageVo)super.row.getValue();
		}
		public void setValue(ims.therapies.vo.DeepFrictionMassageVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdFrictionRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdFrictionRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdFrictionRow get(int index)
		{
			return new grdFrictionRow(super.collection.get(index));
		}
		public grdFrictionRow newRow()
		{
			return new grdFrictionRow(super.collection.newRow());
		}
		public grdFrictionRow newRow(boolean autoSelect)
		{
			return new grdFrictionRow(super.collection.newRow(autoSelect));
		}
		public grdFrictionRow newRowAt(int index)
		{
			return new grdFrictionRow(super.collection.newRowAt(index));
		}
		public grdFrictionRow newRowAt(int index, boolean autoSelect)
		{
			return new grdFrictionRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdFrictionGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.therapies.vo.DeepFrictionMassageVoCollection getValues()
		{
			ims.therapies.vo.DeepFrictionMassageVoCollection listOfValues = new ims.therapies.vo.DeepFrictionMassageVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.therapies.vo.DeepFrictionMassageVo getValue()
		{
			return (ims.therapies.vo.DeepFrictionMassageVo)super.grid.getValue();
		}
		public void setValue(ims.therapies.vo.DeepFrictionMassageVo value)
		{
			super.grid.setValue(value);
		}
		public grdFrictionRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdFrictionRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdFrictionRowCollection getRows()
		{
			return new grdFrictionRowCollection(super.grid.getRows());
		}
		public grdFrictionRow getRowByValue(ims.therapies.vo.DeepFrictionMassageVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdFrictionRow(row);
		}
		public void setColAreaHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColAreaHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColStructureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColStructureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColLateralityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColLateralityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public GridComboBox ColLateralityComboBox()
		{
			return new GridComboBox(super.grid, 2);
		}
		public void setColDurationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColDurationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColNotesHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColNotesHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	public static class grdTissueRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTissueRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColTypeofMassageReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColTypeofMassageReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColTypeofMassageOpened()
		{
			super.row.showOpened(0);
		}
		public ims.spinalinjuries.vo.lookups.SoftTissueMassageType getColTypeofMassage()
		{
			return (ims.spinalinjuries.vo.lookups.SoftTissueMassageType)super.row.get(0);
		}
		public void setColTypeofMassage(ims.spinalinjuries.vo.lookups.SoftTissueMassageType value)
		{
			super.row.set(0, value, true);
		}
		public void setCellColTypeofMassageTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColAreaReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColAreaReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColAreaOpened()
		{
			super.row.showOpened(1);
		}
		public ims.spinalinjuries.vo.lookups.SoftTissueMassageArea getColArea()
		{
			return (ims.spinalinjuries.vo.lookups.SoftTissueMassageArea)super.row.get(1);
		}
		public void setColArea(ims.spinalinjuries.vo.lookups.SoftTissueMassageArea value)
		{
			super.row.set(1, value, true);
		}
		public void setCellColAreaTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColAreaDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColAreaDescriptionReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColAreaDescriptionOpened()
		{
			super.row.showOpened(2);
		}
		public String getColAreaDescription()
		{
			return (String)super.row.get(2);
		}
		public void setColAreaDescription(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColAreaDescriptionTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColLateralityReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColLateralityReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColLateralityOpened()
		{
			super.row.showOpened(3);
		}
		public ims.core.vo.lookups.LateralityLRB getColLaterality()
		{
			return (ims.core.vo.lookups.LateralityLRB)super.row.get(3);
		}
		public void setColLaterality(ims.core.vo.lookups.LateralityLRB value)
		{
			super.row.set(3, value, true);
		}
		public void setCellColLateralityTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColDurationReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColDurationReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColDurationOpened()
		{
			super.row.showOpened(4);
		}
		public Integer getColDuration()
		{
			return (Integer)super.row.get(4);
		}
		public void setColDuration(Integer value)
		{
			super.row.set(4, value);
		}
		public void setCellColDurationTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColNotesReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColNotesReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColNotesOpened()
		{
			super.row.showOpened(5);
		}
		public String getColNotes()
		{
			return (String)super.row.get(5);
		}
		public void setColNotes(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColNotesTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.therapies.vo.SoftTissueMassageVo getValue()
		{
			return (ims.therapies.vo.SoftTissueMassageVo)super.row.getValue();
		}
		public void setValue(ims.therapies.vo.SoftTissueMassageVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdTissueRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTissueRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTissueRow get(int index)
		{
			return new grdTissueRow(super.collection.get(index));
		}
		public grdTissueRow newRow()
		{
			return new grdTissueRow(super.collection.newRow());
		}
		public grdTissueRow newRow(boolean autoSelect)
		{
			return new grdTissueRow(super.collection.newRow(autoSelect));
		}
		public grdTissueRow newRowAt(int index)
		{
			return new grdTissueRow(super.collection.newRowAt(index));
		}
		public grdTissueRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTissueRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTissueGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.therapies.vo.SoftTissueMassageVoCollection getValues()
		{
			ims.therapies.vo.SoftTissueMassageVoCollection listOfValues = new ims.therapies.vo.SoftTissueMassageVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.therapies.vo.SoftTissueMassageVo getValue()
		{
			return (ims.therapies.vo.SoftTissueMassageVo)super.grid.getValue();
		}
		public void setValue(ims.therapies.vo.SoftTissueMassageVo value)
		{
			super.grid.setValue(value);
		}
		public grdTissueRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTissueRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTissueRowCollection getRows()
		{
			return new grdTissueRowCollection(super.grid.getRows());
		}
		public grdTissueRow getRowByValue(ims.therapies.vo.SoftTissueMassageVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTissueRow(row);
		}
		public void setColTypeofMassageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColTypeofMassageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox ColTypeofMassageComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setColAreaHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColAreaHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox ColAreaComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
		public void setColAreaDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColAreaDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColLateralityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColLateralityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public GridComboBox ColLateralityComboBox()
		{
			return new GridComboBox(super.grid, 3);
		}
		public void setColDurationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColDurationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColNotesHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColNotesHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getCurrentMassageVo();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuMassageConnective = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuMassageConnectiveAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMassageConnective.add(contextMenus.contextMenuMassageConnectiveAddItem);
		contextMenus.contextMenuMassageConnectiveRemoveItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMassageConnective.add(contextMenus.contextMenuMassageConnectiveRemoveItem);
		form.registerMenu(contextMenus.contextMenuMassageConnective);
		contextMenus.contextMenuMassageDeep = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuMassageDeepAddItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMassageDeep.add(contextMenus.contextMenuMassageDeepAddItem);
		contextMenus.contextMenuMassageDeepRemoveItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMassageDeep.add(contextMenus.contextMenuMassageDeepRemoveItem);
		form.registerMenu(contextMenus.contextMenuMassageDeep);
		contextMenus.contextMenuMassageSoft = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuMassageSoftAddItem = factory.createMenuItem(startControlID.intValue() + 5, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMassageSoft.add(contextMenus.contextMenuMassageSoftAddItem);
		contextMenus.contextMenuMassageSoftRemoveItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMassageSoft.add(contextMenus.contextMenuMassageSoftRemoveItem);
		form.registerMenu(contextMenus.contextMenuMassageSoft);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 720, 32, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<Browser Status>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 328, 48, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring Date/Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 264, 84, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Deep Friction:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 424, 163, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Connective Tissue Massage:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 80, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Soft Tissue:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 672, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 756, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 464, 48, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 816, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrMassageTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrMassageTemp);
		recbrMassageRecordBrowser recbrMassage = (recbrMassageRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrMassageRecordBrowser.class, m_recbrMassageTemp);
		super.addRecordBrowser(recbrMassage);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 48, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbAuthoringCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbAuthoringCPTemp);
		qmbAuthoringCPComboBox qmbAuthoringCP = (qmbAuthoringCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbAuthoringCPComboBox.class, m_qmbAuthoringCPTemp);
		super.addComboBox(qmbAuthoringCP);

		// Grid Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 448, 816, 128, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdConnectiveTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuMassageConnective, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdConnectiveTemp);
		grdConnectiveGrid grdConnective = (grdConnectiveGrid)GridFlyweightFactory.getInstance().createGridBridge(grdConnectiveGrid.class, m_grdConnectiveTemp);
		grdConnective.addComboBoxColumn("Area", 0, 0, 150, false, true, false, false, true, -1);
		grdConnective.addStringColumn("Area Description", 0, 0, 150, false, false, 0, 30, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdConnective.addComboBoxColumn("Laterality", 0, 0, 150, false, true, false, false, true, -1);
		grdConnective.addIntColumn("Duration", 0, 0, 100, false, true, null, false, 0, true);
		grdConnective.addStringColumn("Notes", 0, 0, -1, false, false, 0, 80, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdConnective);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 288, 816, 128, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdFrictionTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuMassageDeep, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdFrictionTemp);
		grdFrictionGrid grdFriction = (grdFrictionGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFrictionGrid.class, m_grdFrictionTemp);
		grdFriction.addMutableComboBoxColumn("Area", 0, 0, 150, false, true, true, false, false, true, -1);
		grdFriction.addMutableComboBoxColumn("Structure", 0, 0, 150, false, true, false, false, false, true, -1);
		grdFriction.addComboBoxColumn("Laterality", 0, 0, 150, false, true, false, false, true, -1);
		grdFriction.addIntColumn("Duration", 0, 0, 100, false, true, null, false, 0, true);
		grdFriction.addStringColumn("Notes", 0, 0, -1, false, false, 0, 80, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdFriction);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 104, 816, 152, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdTissueTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuMassageSoft, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdTissueTemp);
		grdTissueGrid grdTissue = (grdTissueGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTissueGrid.class, m_grdTissueTemp);
		grdTissue.addComboBoxColumn("Type of Massage", 0, 0, 150, false, true, false, false, true, -1);
		grdTissue.addComboBoxColumn("Area", 0, 0, 150, false, true, false, false, true, -1);
		grdTissue.addStringColumn("Area Description", 0, 0, 150, false, false, 0, 30, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTissue.addComboBoxColumn("Laterality", 0, 0, 150, false, true, false, false, true, -1);
		grdTissue.addIntColumn("Duration", 0, 0, 100, false, true, null, false, 0, true);
		grdTissue.addStringColumn("Notes", 0, 0, -1, false, false, 0, 80, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdTissue);
	}


	public Label lblBrowserStatus()
	{
		return (Label)super.getControl(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(6);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(7);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(8);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(9);
	}
	public DateTimeControl dtimAuthoringDateTime()
	{
		return (DateTimeControl)super.getControl(10);
	}
	public recbrMassageRecordBrowser recbrMassage()
	{
		return (recbrMassageRecordBrowser)super.getRecordBrowser(0);
	}
	public qmbAuthoringCPComboBox qmbAuthoringCP()
	{
		return (qmbAuthoringCPComboBox)super.getComboBox(0);
	}
	public grdConnectiveGrid grdConnective()
	{
		return (grdConnectiveGrid)super.getGrid(0);
	}
	public grdFrictionGrid grdFriction()
	{
		return (grdFrictionGrid)super.getGrid(1);
	}
	public grdTissueGrid grdTissue()
	{
		return (grdTissueGrid)super.getGrid(2);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentMassageVo = new ims.framework.ContextVariable("CurrentMassageVo", prefix + "_lv_Therapies.Massage.__internal_x_context__CurrentMassageVo_" + componentIdentifier + "");
		}
		
		public boolean getCurrentMassageVoIsNotNull()
		{
			return !cxl_CurrentMassageVo.getValueIsNull(context);
		}
		public ims.therapies.vo.MassageVo getCurrentMassageVo()
		{
			return (ims.therapies.vo.MassageVo)cxl_CurrentMassageVo.getValue(context);
		}
		public void setCurrentMassageVo(ims.therapies.vo.MassageVo value)
		{
			cxl_CurrentMassageVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentMassageVo = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class MassageConnective implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Remove = 2;
		}
		public void disableAllMassageConnectiveMenuItems()
		{
			this.contextMenuMassageConnectiveAddItem.setEnabled(false);
			this.contextMenuMassageConnectiveRemoveItem.setEnabled(false);
		}
		public void hideAllMassageConnectiveMenuItems()
		{
			this.contextMenuMassageConnectiveAddItem.setVisible(false);
			this.contextMenuMassageConnectiveRemoveItem.setVisible(false);
		}
		private Menu contextMenuMassageConnective;
		public MenuItem getMassageConnectiveAddItem()
		{
			return this.contextMenuMassageConnectiveAddItem;
		}
		private MenuItem contextMenuMassageConnectiveAddItem;
		public MenuItem getMassageConnectiveRemoveItem()
		{
			return this.contextMenuMassageConnectiveRemoveItem;
		}
		private MenuItem contextMenuMassageConnectiveRemoveItem;
		public final class MassageDeep implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 3;
			public static final int Remove = 4;
		}
		public void disableAllMassageDeepMenuItems()
		{
			this.contextMenuMassageDeepAddItem.setEnabled(false);
			this.contextMenuMassageDeepRemoveItem.setEnabled(false);
		}
		public void hideAllMassageDeepMenuItems()
		{
			this.contextMenuMassageDeepAddItem.setVisible(false);
			this.contextMenuMassageDeepRemoveItem.setVisible(false);
		}
		private Menu contextMenuMassageDeep;
		public MenuItem getMassageDeepAddItem()
		{
			return this.contextMenuMassageDeepAddItem;
		}
		private MenuItem contextMenuMassageDeepAddItem;
		public MenuItem getMassageDeepRemoveItem()
		{
			return this.contextMenuMassageDeepRemoveItem;
		}
		private MenuItem contextMenuMassageDeepRemoveItem;
		public final class MassageSoft implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 5;
			public static final int Remove = 6;
		}
		public void disableAllMassageSoftMenuItems()
		{
			this.contextMenuMassageSoftAddItem.setEnabled(false);
			this.contextMenuMassageSoftRemoveItem.setEnabled(false);
		}
		public void hideAllMassageSoftMenuItems()
		{
			this.contextMenuMassageSoftAddItem.setVisible(false);
			this.contextMenuMassageSoftRemoveItem.setVisible(false);
		}
		private Menu contextMenuMassageSoft;
		public MenuItem getMassageSoftAddItem()
		{
			return this.contextMenuMassageSoftAddItem;
		}
		private MenuItem contextMenuMassageSoftAddItem;
		public MenuItem getMassageSoftRemoveItem()
		{
			return this.contextMenuMassageSoftRemoveItem;
		}
		private MenuItem contextMenuMassageSoftRemoveItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[73];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Massage.__internal_x_context__CurrentMassageVo_" + componentIdentifier, "BO-1019100016-ID", "ID_Massage");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Massage.__internal_x_context__CurrentMassageVo_" + componentIdentifier, "BO-1019100016-AUTHORINGDATETIME", "AuthoringDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
