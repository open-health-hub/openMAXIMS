//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.44 build 2242.19306)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.rangeofmovement;

import java.util.ArrayList;

import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.MskGroupVo;
import ims.core.vo.MskJointMovementVo;
import ims.core.vo.MskJointMovementVoCollection;
import ims.core.vo.MskJointVo;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.LateralityLRonly;
import ims.core.vo.lookups.LateralityLRonlyCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.generalmedical.vo.RangeOfMovementDetailVo;
import ims.generalmedical.vo.RangeOfMovementDetailVoCollection;
import ims.generalmedical.vo.RangeOfMovementJointVo;
import ims.generalmedical.vo.RangeOfMovementJointVoCollection;
import ims.generalmedical.vo.RangeOfMovementVo;
import ims.generalmedical.vo.RangeOfMovementVoCollection;
import ims.spinalinjuries.vo.lookups.MSKGroupType;
import ims.spinalinjuries.vo.lookups.MskJointsMovementsCollection;
import ims.therapies.forms.rangeofmovement.GenForm.grdCentralRow;
import ims.therapies.forms.rangeofmovement.GenForm.grdPeripheralRow;

public class Logic extends BaseLogic
{
	private static final Integer	Action_None				= new Integer(0);
	private static final Integer	Action_NewROM			= new Integer(1);
	private static final Integer	Action_AddJoint			= new Integer(2);
	private static final Integer	Action_AddMovement		= new Integer(3);
	private static final Integer	Action_UpdateMovement	= new Integer(4);

	private static final Integer	Joint_Type_None			= new Integer(0);
	private static final Integer	Joint_Type_Central		= new Integer(1);
	private static final Integer	Joint_Type_Peripheral	= new Integer(2);

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	protected void OnBtnCentralAddApplyClick() throws PresentationLogicException
	{
		ArrayList errors = new ArrayList();
		if(form.lyrDetails().tabCentral().cmbCentralArea().isEnabled() == true && form.lyrDetails().tabCentral().cmbCentralArea().getValue() == null)
			errors.add("Joint is mandatory.");
		
		if (form.lyrDetails().tabCentral().cmbCentralAction().getValue() == null)
			errors.add("Action is mandatory.");
		
		if (form.lyrDetails().tabCentral().cmbCentralMovement().getValue() == null )
			errors.add("Movement is mandatory.");
				
		if(errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors(searchErrors);
			return;
		}
		
		pushChanges();
	}

	protected void onBtnCentralClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearCentralChildInstanceControls(false);
	}

	protected void onBtnPeripheralAddApplyClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ArrayList errors = new ArrayList();
		if (form.lyrDetails().tabPeripheral().cmbPeripheralArea().isEnabled() == true && form.lyrDetails().tabPeripheral().cmbPeripheralArea().getValue() == null)
			errors.add("Joint is mandatory.");
		if (form.lyrDetails().tabPeripheral().cmbLaterality().isEnabled() == true && form.lyrDetails().tabPeripheral().cmbLaterality().getValue() == null)
			errors.add("Laterality is mandatory.");
		if( form.lyrDetails().tabPeripheral().cmbPeripheralAction().getValue() == null)
			errors.add("Action is mandatory.");
		
		if (form.lyrDetails().tabPeripheral().cmbPeripheralMovement().getValue() == null)
			errors.add("Movement is mandatory.");
		
			
		if(errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors(searchErrors);
			return;
		}
		
		pushChanges();
	}

	protected void onBtnPeripheralClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearPeripheralChildInstanceControls(false);
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newParentInstance();
	}

	protected void onGrdPeripheralSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setJointTypeSelected(Joint_Type_Peripheral);
		getSelectedInstance();
	}

	protected void onCmbPeripheralAreaValueChanged() throws PresentationLogicException
	{
		clearChildInstanceControls(false);
		if (form.lyrDetails().tabPeripheral().cmbPeripheralArea().getValue() == null)
			return;
		if (form.lyrDetails().tabPeripheral().cmbPeripheralArea().getValue().getJoint() == null)
			return;

		loadAvailableLateralities(form.lyrDetails().tabPeripheral().cmbPeripheralArea().getValue().getJoint(), false);
		loadMovementsForPeripheralJoint(form.lyrDetails().tabPeripheral().cmbPeripheralArea().getValue().getJoint());
	}

	protected void onGrdCentralSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setJointTypeSelected(Joint_Type_Central);
		getSelectedInstance();
	}

	protected void onQmbAuthoringCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		setAuthoringCP(value);
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		if (sender.equals(form.grdCentral()))
			form.getLocalContext().setJointTypeSelected(Joint_Type_Central);
		else
			form.getLocalContext().setJointTypeSelected(Joint_Type_Peripheral);

		switch (menuItemID)
		{
			case GenForm.ContextMenus.RangeOfMovementCentral.ADDJoint :
			case GenForm.ContextMenus.RangeOfMovementPeripheral.AddJoint :

				newJointInstance();
			break;

			case GenForm.ContextMenus.RangeOfMovementCentral.ADDdetails :
			case GenForm.ContextMenus.RangeOfMovementPeripheral.AddDetail :

				newMovementInstance();
			break;

			case GenForm.ContextMenus.RangeOfMovementCentral.Update :
			case GenForm.ContextMenus.RangeOfMovementPeripheral.Edit :

				updateMovementInstance();
			break;

			case GenForm.ContextMenus.RangeOfMovementCentral.REMOVE :
				form.grdCentral().removeSelectedRow();
			break;

			case GenForm.ContextMenus.RangeOfMovementPeripheral.REMOVE :
				form.grdPeripheral().removeSelectedRow();
			break;

		}

		updateContextMenusState();

	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void open()
	{
		clear();
		resetAllContextVariables();

		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			populateRecordBrowser(domain.listRangeOfMovementsForCareContext(form.getGlobalContext().Core.getCurrentCareContext()));

		// clear grid selection
		form.grdCentral().setValue(null);
		form.grdPeripheral().setValue(null);

		form.setMode(FormMode.VIEW);
	}

	private void populateRecordBrowser(RangeOfMovementVoCollection voCollRangeOfMovement)
	{
		if (voCollRangeOfMovement == null)
			return;

		for (int i = 0; i < voCollRangeOfMovement.size(); i++)
		{
			if (form.getGlobalContext().Core.getCurrentClinicalContact() != null && voCollRangeOfMovement.get(i).getClinicalContact()!=null && voCollRangeOfMovement.get(i).getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
			{
				form.getLocalContext().setGoldenInstanceExists(Boolean.TRUE);
				form.recbr1().newRow(voCollRangeOfMovement.get(i), buildBrowserLine(voCollRangeOfMovement.get(i)), null, Color.Green);
				form.recbr1().setValue(voCollRangeOfMovement.get(i));
				selectGroup();
			}
			else
			{
				form.recbr1().newRow(voCollRangeOfMovement.get(i), buildBrowserLine(voCollRangeOfMovement.get(i)));
			}
		}

		if (form.getLocalContext().getGoldenInstanceExists().equals(Boolean.FALSE) && form.recbr1().size() > 0)
			selectGroup();

	}

	private void populateTree(RangeOfMovementVo voRangeOfMovement)
	{
		if (voRangeOfMovement == null || voRangeOfMovement.getDetails() == null)
			return;
		voRangeOfMovement.getDetails().sort();

		form.grdCentral().getRows().clear();
		form.grdPeripheral().getRows().clear();

		for (int i = 0; i < voRangeOfMovement.getDetails().size(); i++)
		{
			if (voRangeOfMovement.getDetails() != null)
			{
				
				if (voRangeOfMovement.getDetails().get(i) != null && voRangeOfMovement.getDetails().get(i).getGroup() != null && voRangeOfMovement.getDetails().get(i).getGroup().getGroupType() != null)
				{

					if (voRangeOfMovement.getDetails().get(i).getGroup().getGroupType().equals(MSKGroupType.CENTRAL))
					{
						GenForm.grdCentralRow row = form.grdCentral().getRows().newRow();
						populateCentralChildNode(row, voRangeOfMovement.getDetails().get(i));
						voRangeOfMovement.getDetails().get(i).getSelectedMovements().sort();
						if (voRangeOfMovement.getDetails().get(i).getSelectedMovements() != null)
						{
							for (int j = 0; j < voRangeOfMovement.getDetails().get(i).getSelectedMovements().size(); j++)
							{
								GenForm.grdCentralRow childRow = row.getRows().newRow();
								populateCentralMovementNode(childRow, voRangeOfMovement.getDetails().get(i).getSelectedMovements().get(j));
							}
						}
					}
					else
					/* if (voRangeOfMovement.getDetails().get(i).getGroup().getGroupType().equals(MSKGroupType.CENTRAL) == false) */
					{

						GenForm.grdPeripheralRow row = form.grdPeripheral().getRows().newRow();
						populatePeripheralChildNode(row, voRangeOfMovement.getDetails().get(i));
						voRangeOfMovement.getDetails().get(i).getSelectedMovements().sort();
						if (voRangeOfMovement.getDetails().get(i).getSelectedMovements() != null)
						{
							for (int j = 0; j < voRangeOfMovement.getDetails().get(i).getSelectedMovements().size(); j++)
							{
								GenForm.grdPeripheralRow childRow = row.getRows().newRow();
								populatePeripheralMovementNode(childRow, voRangeOfMovement.getDetails().get(i).getSelectedMovements().get(j));
							}
						}

					}
				}
			}
		}
	}

	private void populateParentInstanceControls(RangeOfMovementVo voRangeOfMovement)
	{
		if (voRangeOfMovement == null)
			return;

		form.lyrDetails().tabHeader().dtimAuthoringDateTime().setValue(voRangeOfMovement.getAuthoringDateTime());
		form.lyrDetails().tabHeader().qmbAuthoringCP().newRow(voRangeOfMovement.getAuthoringCP() != null ? voRangeOfMovement.getAuthoringCP() : null, voRangeOfMovement.getAuthoringCP() != null ? voRangeOfMovement.getAuthoringCP().toString() : "<Unknown>");
		form.lyrDetails().tabHeader().qmbAuthoringCP().setValue(voRangeOfMovement.getAuthoringCP());
	}

	private void populateCentralChildInstanceControls(MskJointMovementVo vo)
	{
		form.lyrDetails().tabCentral().cmbCentralArea().setValue(getRomJoint());
		form.lyrDetails().tabCentral().cmbCentralLimited().setValue(vo.getLimited());
		form.lyrDetails().tabCentral().cmbRange().setValue(vo.getQualitativeRange());
		// WDEV-11598
		form.lyrDetails().tabCentral().intSOR().setValue(vo.getMovSOR());
		form.lyrDetails().tabCentral().intEOR().setValue(vo.getMovEOR());
		form.lyrDetails().tabCentral().cmbCentralMovement().setValue(vo.getMoveType());
		form.lyrDetails().tabCentral().cmbCentralAction().setValue(vo.getMoveAction());
	}

	private void populatePeripheralChildInstanceControls(RangeOfMovementDetailVo voRomDetail, MskJointMovementVo vo)
	{
		RangeOfMovementJointVo voRomJoint = getRomJoint();
		form.lyrDetails().tabPeripheral().cmbPeripheralArea().setValue(voRomJoint);
		form.lyrDetails().tabPeripheral().cmbPeripheralLimited().setValue(vo.getLimited());
		form.lyrDetails().tabPeripheral().cmbPeripheralMovement().setValue(vo.getMoveType());
		form.lyrDetails().tabPeripheral().txtEOR().setValue(vo.getMovEOR() != null ? vo.getMovEOR().toString() : "");
		form.lyrDetails().tabPeripheral().txtSOR().setValue(vo.getMovSOR() != null ? vo.getMovSOR().toString() : "");
		form.lyrDetails().tabPeripheral().cmbLaterality().setValue(voRomDetail.getLaterality());
		form.lyrDetails().tabPeripheral().cmbPeripheralAction().setValue(vo.getMoveAction());
	}

	private void populateCentralChildNode(grdCentralRow row, RangeOfMovementDetailVo voRangeOfMovementDetail)
	{
		if(row == null || voRangeOfMovementDetail == null)
			return;
		
		// WDEV-11598
		if(voRangeOfMovementDetail.getJoint() != null)
		{
			row.setColTarget(voRangeOfMovementDetail.getJoint().getName());
			row.setTooltipForColTarget(voRangeOfMovementDetail.getJoint().getName());
		}
		row.setValue(voRangeOfMovementDetail);
		row.setBackColor(Color.Beige);
		form.getLocalContext().setSelectedChildInstance(voRangeOfMovementDetail);
		if (voRangeOfMovementDetail.getID_MSkExamJointBonesDetail() == null)
			row.setTextColor(Color.Red);

		row.setExpanded(true);
	}

	private void populatePeripheralChildNode(grdPeripheralRow row, RangeOfMovementDetailVo voRangeOfMovementDetail)
	{
		if(row == null || voRangeOfMovementDetail == null)
			return;
		row.setColTarget((voRangeOfMovementDetail.getJoint() == null? " ":voRangeOfMovementDetail.getJoint().getName()) +  (voRangeOfMovementDetail.getLaterality() == null ? " " : " - (" + voRangeOfMovementDetail.getLaterality().toString() + ")"));
		// WDEV-11598
		row.setTooltipForColTarget((voRangeOfMovementDetail.getJoint() == null? " ":voRangeOfMovementDetail.getJoint().getName()) +  (voRangeOfMovementDetail.getLaterality() == null ? " " : " - (" + voRangeOfMovementDetail.getLaterality().toString() + ")"));
		row.setValue(voRangeOfMovementDetail);
		row.setBackColor(Color.Beige);
		form.getLocalContext().setSelectedChildInstance(voRangeOfMovementDetail);
		if (voRangeOfMovementDetail.getID_MSkExamJointBonesDetail() == null)
			row.setTextColor(Color.Red);

		row.setExpanded(true);
	}

	private void populateChildFromGrid(RangeOfMovementVo voRangeOfMovement)
	{
		if (voRangeOfMovement.getDetails() == null)
			voRangeOfMovement.setDetails(new RangeOfMovementDetailVoCollection());

		populateParentInstanceData(voRangeOfMovement);

		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
		{
			populateCentralChildDataFromGrid(voRangeOfMovement);
		}
		else if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Peripheral))
		{
			populatePeripheralChildDataFromGrid(voRangeOfMovement);
		}
	}

	private void populatePeripheralMovementNode(grdPeripheralRow childRow, MskJointMovementVo voMovement)
	{
		if (voMovement == null)
			return;

		childRow.setValue(voMovement);
		
		// WDEV-11598
		if (voMovement.getLimited() != null)
		{
			childRow.setColLimited(voMovement.getLimited().toString());
			childRow.setTooltipForColLimited(voMovement.getLimited().toString());
		}
		if (voMovement.getMovSOR() != null)
		{
			childRow.setColSOR(voMovement.getMovSOR());
			childRow.setTooltipForColSOR(voMovement.getMovSOR().toString());
		}
		if (voMovement.getMovEOR() != null)
		{
			childRow.setColEOR(voMovement.getMovEOR());
			childRow.setTooltipForColEOR(voMovement.getMovEOR().toString());
		}
		if (voMovement.getMoveType() != null)
		{
			childRow.setColMovement(voMovement.getMoveType().toString());
			childRow.setTooltipForColMovement(voMovement.getMoveType().toString());
		}
		if (voMovement.getMoveAction() != null)
		{
			childRow.setColAction(voMovement.getMoveAction().toString());
			childRow.setTooltipForColAction(voMovement.getMoveAction().toString());
		}

		childRow.setValue(voMovement);

		// if not saved then set the colour
		if (voMovement.getID_MskJointMovement() == null)
			childRow.setTextColor(Color.Red);

	}

	private void populateCentralMovementNode(grdCentralRow childRow, MskJointMovementVo voMovement)
	{
		if (voMovement == null)
			return;

		// WDEV-11598		
		if (voMovement.getLimited() != null)
		{
			childRow.setColLimited(voMovement.getLimited().toString());
			childRow.setTooltipForColLimited(voMovement.getLimited().toString());
		}
		if (voMovement.getQualitativeRange() != null)
		{
			childRow.setColRange(voMovement.getQualitativeRange().toString());
			childRow.setTooltipForColRange(voMovement.getQualitativeRange().toString());
		}
		if (voMovement.getMovSORIsNotNull())
		{
			childRow.setColSOR(voMovement.getMovSOR());
			childRow.setTooltipForColSOR(voMovement.getMovSOR().toString());
		}
		if (voMovement.getMovEORIsNotNull())
		{
			childRow.setColEOR(voMovement.getMovEOR());
			childRow.setTooltipForColEOR(voMovement.getMovEOR().toString());
		}
		if (voMovement.getMoveType() != null)
		{
			childRow.setcolMovement(voMovement.getMoveType().toString());
			childRow.setTooltipForcolMovement(voMovement.getMoveType().toString());
		}
		if (voMovement.getMoveAction() != null)
		{
			childRow.setColAction(voMovement.getMoveAction().toString());
			childRow.setTooltipForColAction(voMovement.getMoveAction().toString());
		}

		childRow.setValue(voMovement);

		// if not saved then set the colour
		if (voMovement.getID_MskJointMovement() == null)
			childRow.setTextColor(Color.Red);

	}

	private RangeOfMovementVo populateInstanceData(RangeOfMovementVo voRangeOfMovement)
	{
		if (voRangeOfMovement == null)
			voRangeOfMovement = new RangeOfMovementVo();

		populateParentInstanceData(voRangeOfMovement);

		if (form.getLocalContext().getCurrentAction().equals(Action_AddMovement) || form.getLocalContext().getCurrentAction().equals(Action_AddJoint))
		{
			populateChildFromGrid(voRangeOfMovement);
		}
		else if (form.getLocalContext().getCurrentAction().equals(Action_UpdateMovement))
		{
			for (int i = 0; i < voRangeOfMovement.getDetails().size(); i++)
			{
				if (voRangeOfMovement.getDetails().get(i).getID_MSkExamJointBonesDetail() == form.getLocalContext().getSelectedChildInstance().getID_MSkExamJointBonesDetail())
				{
					MskJointMovementVo voMskJointMovement = form.getLocalContext().getSelectedMovement();
					populateMovementInstanceData(voRangeOfMovement.getDetails().get(i), voMskJointMovement);
					form.getLocalContext().setSelectedMovement(voMskJointMovement);
					voRangeOfMovement.getDetails().set(i, form.getLocalContext().getSelectedChildInstance());
				}
			}
		}
		return voRangeOfMovement;
	}

	private void populateParentInstanceData(RangeOfMovementVo voRangeOfMovement)
	{
		voRangeOfMovement.setAuthoringCP(form.lyrDetails().tabHeader().qmbAuthoringCP().getValue());
		voRangeOfMovement.setAuthoringDateTime(form.lyrDetails().tabHeader().dtimAuthoringDateTime().getValue());
	}

	private boolean populateChildInstanceData(RangeOfMovementDetailVo voRangeOfMovementDetail)
	{
		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_None) == false)
		{
			if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
			{
				if (form.lyrDetails().tabCentral().cmbCentralArea().getValue() == null)
				{
					engine.showMessage("You must select a joint ");
					return false;
				}

				RangeOfMovementJointVo voROMCentralJoint = form.lyrDetails().tabCentral().cmbCentralArea().getValue();
				voRangeOfMovementDetail.setJoint(voROMCentralJoint.getJoint());
				voRangeOfMovementDetail.setGroup(voROMCentralJoint.getGroup());
			}
			else
			{
				if (form.lyrDetails().tabPeripheral().cmbPeripheralArea().getValue() == null)
				{
					engine.showMessage("You must select a joint ");
					return false;
				}

				RangeOfMovementJointVo voRomPeripheralJoint = form.lyrDetails().tabPeripheral().cmbPeripheralArea().getValue();
				voRangeOfMovementDetail.setJoint(voRomPeripheralJoint.getJoint());
				voRangeOfMovementDetail.setGroup(voRomPeripheralJoint.getGroup());
			}

			voRangeOfMovementDetail.setSelectedMovements(new MskJointMovementVoCollection());
			MskJointMovementVo voMskJointMovement = new MskJointMovementVo();
			populateMovementInstanceData(voRangeOfMovementDetail, voMskJointMovement);
			voRangeOfMovementDetail.getSelectedMovements().add(voMskJointMovement);

			return true;
		}
		return false;
	}

	private void populateMovementInstanceData(RangeOfMovementDetailVo voRangeOfDetailMovement, MskJointMovementVo voMovement)
	{
		if (voMovement == null)
			return;

		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
		{
			voMovement.setLimited(form.lyrDetails().tabCentral().cmbCentralLimited().getValue() != null ? form.lyrDetails().tabCentral().cmbCentralLimited().getValue() : null);
			voMovement.setQualitativeRange(form.lyrDetails().tabCentral().cmbRange().getValue() != null ? form.lyrDetails().tabCentral().cmbRange().getValue() : null);
			// WDEV-11598
			voMovement.setMovSOR(form.lyrDetails().tabCentral().intSOR().getValue());
			voMovement.setMovEOR(form.lyrDetails().tabCentral().intEOR().getValue());
			voMovement.setMoveType(form.lyrDetails().tabCentral().cmbCentralMovement().getValue() != null ? form.lyrDetails().tabCentral().cmbCentralMovement().getValue() : null);
			voMovement.setMoveAction(form.lyrDetails().tabCentral().cmbCentralAction().getValue() != null ? form.lyrDetails().tabCentral().cmbCentralAction().getValue() : null);
		}
		else
		{
			voMovement.setLimited(form.lyrDetails().tabPeripheral().cmbPeripheralLimited().getValue());
	
			if (form.lyrDetails().tabPeripheral().txtEOR().getValue() != null)
				voMovement.setMovEOR(new Integer(form.lyrDetails().tabPeripheral().txtEOR().getValue()));

			if (form.lyrDetails().tabPeripheral().txtSOR().getValue() != null)
				voMovement.setMovSOR(new Integer(form.lyrDetails().tabPeripheral().txtSOR().getValue()));

			voMovement.setMoveAction(form.lyrDetails().tabPeripheral().cmbPeripheralAction().getValue());
			voMovement.setMoveType(form.lyrDetails().tabPeripheral().cmbPeripheralMovement().getValue());
			voRangeOfDetailMovement.setLaterality(form.lyrDetails().tabPeripheral().cmbLaterality().getValue());

		}
	}

	private void populateCentralChildDataFromGrid(RangeOfMovementVo voRangeOfMovement)
	{
		for (int i = 0; i < form.grdCentral().getRows().size(); i++)
		{
			GenForm.grdCentralRow currentRow = form.grdCentral().getRows().get(i);
			RangeOfMovementDetailVo voDetail = (RangeOfMovementDetailVo) currentRow.getValue();

			voDetail.getSelectedMovements().clear();
			for (int j = 0; j < currentRow.getRows().size(); j++)
			{
				voDetail.getSelectedMovements().add((MskJointMovementVo) currentRow.getRows().get(j).getValue());
			}

			if (voDetail.getID_MSkExamJointBonesDetail() == null)
			{
				voDetail.setIsJoint(Boolean.TRUE);
				voRangeOfMovement.getDetails().add(voDetail);
			}
			else
			{
				for (int j = 0; j < voRangeOfMovement.getDetails().size(); j++)
				{
					if (voRangeOfMovement.getDetails().get(j).equals(voDetail))
					{
						voRangeOfMovement.getDetails().set(j, voDetail);
						break;
					}
				}
			}
		}

	}

	private void populatePeripheralChildDataFromGrid(RangeOfMovementVo voRangeOfMovement)
	{
		for (int i = 0; i < form.grdPeripheral().getRows().size(); i++)
		{
			GenForm.grdPeripheralRow currentRow = form.grdPeripheral().getRows().get(i);
			RangeOfMovementDetailVo voDetail = (RangeOfMovementDetailVo) currentRow.getValue();

			voDetail.getSelectedMovements().clear();
			for (int j = 0; j < currentRow.getRows().size(); j++)
			{
				voDetail.getSelectedMovements().add((MskJointMovementVo) currentRow.getRows().get(j).getValue());
			}

			if (voDetail.getID_MSkExamJointBonesDetail() == null)
			{
				voDetail.setIsJoint(Boolean.TRUE);
				voRangeOfMovement.getDetails().add(voDetail);
			}
			else
			{
				for (int j = 0; j < voRangeOfMovement.getDetails().size(); j++)
				{
					if (voRangeOfMovement.getDetails().get(j).equals(voDetail))
					{
						voRangeOfMovement.getDetails().set(j, voDetail);
						break;
					}
				}
			}
		}
	}

	private void restoreUpdatedNode()
	{
		// Pattern demands that the last updated node is displayed
		if (form.getLocalContext().getUpdatedChildIsNotNull())
		{
			if (form.getLocalContext().getSelectedParentInstance() == null)
				return;
			if (form.getLocalContext().getUpdatedChild() == null || form.getLocalContext().getUpdatedChildType() == null)
				return;

			if (form.getLocalContext().getUpdatedChildType().equals(Joint_Type_Central))
			{
				GenForm.grdCentralRow centralRow = form.grdCentral().getRowByValue(form.getLocalContext().getUpdatedChild());
				if (centralRow != null)
					form.grdCentral().setValue(centralRow.getValue());
			}
			else if (form.getLocalContext().getUpdatedChildType().equals(Joint_Type_Peripheral))
			{
				GenForm.grdPeripheralRow peripheralRow = form.grdPeripheral().getRowByValue(form.getLocalContext().getUpdatedChild());
				if (peripheralRow != null)
					form.grdPeripheral().setValue(peripheralRow.getValue());
			}

			getSelectedInstance();
			form.getLocalContext().setUpdatedChild(null);
			form.getLocalContext().setUpdatedChildType(Joint_Type_None);
		}

	}

	private void resetAllContextVariables()
	{
		form.getLocalContext().setSelectedParentInstance(null);
		resetSelectionContextVariables();
	}

	private void resetSelectionContextVariables()
	{
		form.getLocalContext().setSelectedMovement(null);
		form.getLocalContext().setSelectedChildInstance(null);
		form.getLocalContext().setCurrentAction(Action_None);
		form.getLocalContext().setJointTypeSelected(Joint_Type_None);
	}

	private void clear()
	{
		form.recbr1().clear();
		form.grdCentral().getRows().clear();
		form.grdPeripheral().getRows().clear();
		clearChildInstanceControls(true);
	}

	private void clearChildInstanceControls(boolean bAll)
	{
		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
		{
			clearCentralChildInstanceControls(bAll);
		}
		else if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Peripheral))
		{
			clearPeripheralChildInstanceControls(bAll);
		}
		else
		{
			clearCentralChildInstanceControls(bAll);
			clearPeripheralChildInstanceControls(bAll);
		}

	}

	private void clearPeripheralChildInstanceControls(boolean bAll)
	{
		if (bAll == true)
		{
			form.lyrDetails().tabPeripheral().cmbPeripheralArea().setValue(null);
			form.lyrDetails().tabPeripheral().cmbLaterality().setValue(null);
		}

		form.lyrDetails().tabPeripheral().cmbPeripheralAction().setValue(null);
		form.lyrDetails().tabPeripheral().cmbPeripheralLimited().setValue(null);
		form.lyrDetails().tabPeripheral().cmbPeripheralMovement().setValue(null);
		form.lyrDetails().tabPeripheral().txtSOR().setValue(null);
		form.lyrDetails().tabPeripheral().txtEOR().setValue(null);
	}

	private void initialize()
	{
		form.getLocalContext().setJointTypeSelected(Joint_Type_None);
		form.getLocalContext().setCurrentAction(Action_None);
		form.getLocalContext().setGoldenInstanceExists(new Boolean(false));
	}

	private void listAvailableJoints(boolean bAll)
	{
		form.lyrDetails().tabCentral().cmbCentralArea().clear();
		form.lyrDetails().tabPeripheral().cmbPeripheralArea().clear();

		RangeOfMovementJointVoCollection voCollJoints = domain.listJoints();
		if (voCollJoints == null || voCollJoints.size() == 0)
			return;

		for (int i = 0; i < voCollJoints.size(); i++)
		{
			RangeOfMovementJointVo voJoint = voCollJoints.get(i);
			if (voCollJoints.get(i).getGroup().getGroupType() == null)
				continue;

			if (voCollJoints.get(i).getGroup().getGroupType().equals(MSKGroupType.CENTRAL))
			{
				if (bAll == false)
				{
					GenForm.grdCentralRow row = findCentralChildNode(voJoint.getJoint());
					if (row == null)
						form.lyrDetails().tabCentral().cmbCentralArea().newRow(voJoint, voJoint.getJoint().getName());
				}
				else
				{
					form.lyrDetails().tabCentral().cmbCentralArea().newRow(voJoint, voJoint.getJoint().getName());
				}
			}

			else
			{
				if (bAll == false)
				{
					if (voCollJoints.get(i).getGroup().getGroupType().equals(MSKGroupType.DIGIT) == false)
					{
						GenForm.grdPeripheralRow row = null;
						row = findPeripheralChildNode(voJoint.getJoint(), LateralityLRonly.LEFT);
						if (row == null)
						{
							form.lyrDetails().tabPeripheral().cmbPeripheralArea().newRow(voJoint, voJoint.getJoint().getName());
						}
						else
						{
							row = findPeripheralChildNode(voJoint.getJoint(), LateralityLRonly.RIGHT);
							if (row == null)
							{
								form.lyrDetails().tabPeripheral().cmbPeripheralArea().newRow(voJoint, voJoint.getJoint().getName());
							}
						}
					}
				}
				else
				{
					form.lyrDetails().tabPeripheral().cmbPeripheralArea().newRow(voCollJoints.get(i), voCollJoints.get(i).getJoint().getName());
				}
			}
		}

	}

	/**
	 * @param voJoint
	 * @param bAll
	 *            Loads the laterality combo on the forms peripheral tab. If the passed in joint can be found in the peripheral tree then the lateralities present in the tree are NOT loaded into the combo.
	 */
	private void loadAvailableLateralities(MskJointVo voJoint, boolean bAll)
	{
		form.lyrDetails().tabPeripheral().cmbLaterality().clear();

		if (bAll == true)
		{
			LateralityLRonlyCollection coll = LookupHelper.getLateralityLRonly(domain.getLookupService());
			for (int i = 0; i < coll.size(); i++)
				form.lyrDetails().tabPeripheral().cmbLaterality().newRow(coll.get(i), coll.get(i).getIItemText());

		}
		else
		{
			GenForm.grdPeripheralRow row = null;
			row = findPeripheralChildNode(voJoint, LateralityLRonly.LEFT);
			if (row == null)
			{
				form.lyrDetails().tabPeripheral().cmbLaterality().newRow(LateralityLRonly.LEFT, LateralityLRonly.LEFT.getIItemText());
			}

			row = findPeripheralChildNode(voJoint, LateralityLRonly.RIGHT);
			if (row == null)
			{
				form.lyrDetails().tabPeripheral().cmbLaterality().newRow(LateralityLRonly.RIGHT, LateralityLRonly.RIGHT.getIItemText());
			}
		}
	}

	private void loadMovementsForCentralJoint(MskJointVo voJoint)
	{
		form.lyrDetails().tabCentral().cmbCentralMovement().clear();
		MskJointsMovementsCollection lkpCollJointMovements = domain.listMovementsForJoint(voJoint);
		for (int i = 0; i < lkpCollJointMovements.size(); i++)
			form.lyrDetails().tabCentral().cmbCentralMovement().newRow(lkpCollJointMovements.get(i), lkpCollJointMovements.get(i).getIItemText());
	}

	private void loadMovementsForPeripheralJoint(MskJointVo voJoint)
	{
		form.lyrDetails().tabPeripheral().cmbPeripheralMovement().clear();
		MskJointsMovementsCollection lkpCollJointMovements = domain.listMovementsForJoint(voJoint);
		for (int i = 0; i < lkpCollJointMovements.size(); i++)
			form.lyrDetails().tabPeripheral().cmbPeripheralMovement().newRow(lkpCollJointMovements.get(i), lkpCollJointMovements.get(i).getIItemText());
	}

	private void updateControlsState()
	{

		boolean bCareContextLevel = form.getGlobalContext().Core.getCurrentClinicalContact() == null;

		boolean boolAllowNew = ((form.getLocalContext().getGoldenInstanceExists().equals(Boolean.FALSE) && bCareContextLevel == false));

		form.btnNew().setVisible(boolAllowNew);
		setEmptyTabVisibility();

		setHeaderTabVisibility();
		setCentralTabVisibility();
		setPeripheralTabVisibility();
		setAddApplyCaption();
		showTab();

		updateContextMenusState();

	}

	private void setEmptyTabVisibility()
	{
		form.lyrDetails().tabEmpty().setHeaderVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectedParentInstance() == null);
	}

	private void showTab()
	{
		if (form.getLocalContext().getSelectedParentInstance() == null)
		{
			form.lyrDetails().showtabEmpty();
			return;
		}

		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
		{
			if (form.grdCentral().getValue() instanceof RangeOfMovementDetailVo)
			{
				if (form.getLocalContext().getCurrentAction().equals(Action_AddMovement) || form.getLocalContext().getCurrentAction().equals(Action_AddJoint))
					form.lyrDetails().showtabCentral();
				else
					form.lyrDetails().showtabHeader();
			}
			else
			// (form.grdCentral().getValue() instanceof MskJointMovementVo) || (form.grdCentral().getValue() == null
			{
				form.lyrDetails().showtabCentral();
			}
		}
		else if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Peripheral))
		{
			if (form.grdPeripheral().getValue() instanceof RangeOfMovementDetailVo)
			{
				if (form.getLocalContext().getCurrentAction().equals(Action_AddMovement) || form.getLocalContext().getCurrentAction().equals(Action_AddJoint))
					form.lyrDetails().showtabPeripheral();
				else
					form.lyrDetails().showtabHeader();
			}
			else
			// (form.grdPeripheral().getValue() instanceof MskJointMovementVo) || (form.grdPeripheral().getValue() == null
			{
				form.lyrDetails().showtabPeripheral();
			}
		}
		else
		{
			form.lyrDetails().showtabHeader();
		}
	}

	private void setHeaderTabVisibility()
	{
		boolean bVisible = form.getLocalContext().getSelectedParentInstanceIsNotNull();
		form.lyrDetails().tabHeader().setHeaderVisible(bVisible);
	}

	private void setCentralTabVisibility()
	{
		boolean bVisible = form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central) && ((form.grdCentral().getValue() == null || form.grdCentral().getValue() instanceof MskJointMovementVo) || ((form.getLocalContext().getCurrentAction().equals(Action_AddMovement) || form.getLocalContext().getCurrentAction().equals(Action_AddJoint))));

		form.lyrDetails().tabCentral().setHeaderVisible(bVisible);

		setCentralButtonsVisibility();
		setCentralJointComboVisibility(bVisible);
	}

	private void setPeripheralTabVisibility()
	{
		boolean bVisible = form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Peripheral) && ((form.grdPeripheral().getValue() == null || form.grdPeripheral().getValue() instanceof MskJointMovementVo) || ((form.getLocalContext().getCurrentAction().equals(Action_AddMovement)) || form.getLocalContext().getCurrentAction().equals(Action_AddJoint)));

		form.lyrDetails().tabPeripheral().setHeaderVisible(bVisible);

		setPeripheralButtonsVisibility();
		setPeripheralJointComboVisibility(bVisible);
	}

	private void setCentralButtonsVisibility()
	{
		boolean bVisible = form.getMode().equals(FormMode.EDIT) && form.getLocalContext().getCurrentAction().equals(Action_UpdateMovement) == false;

		form.lyrDetails().tabCentral().btnCentralAddApply().setVisible(bVisible);
		form.lyrDetails().tabCentral().btnCentralClear().setVisible(bVisible);
	}

	private void setPeripheralButtonsVisibility()
	{
		boolean bVisible = form.getMode().equals(FormMode.EDIT) && form.getLocalContext().getCurrentAction().equals(Action_UpdateMovement) == false;

		form.lyrDetails().tabPeripheral().btnPeripheralAddApply().setVisible(bVisible);
		form.lyrDetails().tabPeripheral().btnPeripheralClear().setVisible(bVisible);
	}

	private void setCentralJointComboVisibility(boolean bTabVisible)
	{
		form.lyrDetails().tabCentral().cmbCentralArea().setEnabled(bTabVisible && form.getLocalContext().getCurrentAction().equals(Action_AddJoint));
	}

	private void setPeripheralJointComboVisibility(boolean bTabVisible)
	{
		boolean bEnabled = bTabVisible && form.getLocalContext().getCurrentAction().equals(Action_AddJoint);
		form.lyrDetails().tabPeripheral().cmbPeripheralArea().setEnabled(bEnabled);
		form.lyrDetails().tabPeripheral().cmbLaterality().setEnabled(bEnabled);
	}

	private void getSelectedInstance()
	{
		// In update mode we can select nodes without displaying anything but the context
		// menus can change based on what's selected so we need to update them
		if (form.getMode().equals(FormMode.EDIT))
		{
			updateContextMenusState();
			return;
		}

		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
		{
			if (form.grdCentral().getValue() instanceof RangeOfMovementDetailVo)
			{
				form.grdPeripheral().setValue(null);
				form.getLocalContext().setSelectedChildInstance((RangeOfMovementDetailVo) form.grdCentral().getValue());
			}
			else if (form.grdCentral().getValue() instanceof MskJointMovementVo)
			{
				form.grdPeripheral().setValue(null);
				form.getLocalContext().setSelectedMovement((MskJointMovementVo) form.grdCentral().getValue());
				form.getLocalContext().setSelectedChildInstance((RangeOfMovementDetailVo) form.grdCentral().getSelectedRow().getParentRow().getValue());
				populateCentralChildInstanceControls(form.getLocalContext().getSelectedMovement());
			}
		}

		else if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Peripheral))
		{
			if (form.grdPeripheral().getValue() instanceof RangeOfMovementDetailVo)
			{
				form.grdCentral().setValue(null);
				form.getLocalContext().setSelectedChildInstance((RangeOfMovementDetailVo) form.grdPeripheral().getValue());
			}
			else if (form.grdPeripheral().getValue() instanceof MskJointMovementVo)
			{
				form.grdCentral().setValue(null);
				form.getLocalContext().setSelectedMovement((MskJointMovementVo) form.grdPeripheral().getValue());
				RangeOfMovementDetailVo voRomDetail = (RangeOfMovementDetailVo) form.grdPeripheral().getSelectedRow().getParentRow().getValue();
				form.getLocalContext().setSelectedChildInstance(voRomDetail);
				populatePeripheralChildInstanceControls(voRomDetail, form.getLocalContext().getSelectedMovement());
			}
		}

		updateControlsState();
	}

	private RangeOfMovementJointVo getRomJoint()
	{
		RangeOfMovementJointVo voRomJoint = new RangeOfMovementJointVo();
		if (form.getLocalContext().getSelectedChildInstance() == null)
			return voRomJoint;

		voRomJoint.setGroup(form.getLocalContext().getSelectedChildInstance().getGroup());
		voRomJoint.setJoint(form.getLocalContext().getSelectedChildInstance().getJoint());
		return voRomJoint;
	}

	private void setAuthoringCP(String value)
	{
		form.lyrDetails().tabHeader().qmbAuthoringCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);

		HcpCollection coll = domain.listHCPs(filter);
		for (int i = 0; i < coll.size(); i++)
		{
			Hcp med = coll.get(i);
			form.lyrDetails().tabHeader().qmbAuthoringCP().newRow(med, med.toString());
		}

		if (coll.size() == 1)
			form.lyrDetails().tabHeader().qmbAuthoringCP().setValue(coll.get(0));
		else if (coll.size() > 1)
			form.lyrDetails().tabHeader().qmbAuthoringCP().showOpened();

	}

	private void clearCentralChildInstanceControls(boolean bAll)
	{
		if (bAll == true)
			form.lyrDetails().tabCentral().cmbCentralArea().setValue(null);

		form.lyrDetails().tabCentral().cmbCentralAction().setValue(null);
		form.lyrDetails().tabCentral().cmbCentralLimited().setValue(null);
		form.lyrDetails().tabCentral().cmbCentralMovement().setValue(null);
		form.lyrDetails().tabCentral().cmbRange().setValue(null);
		// WDEV-11598
		form.lyrDetails().tabCentral().intEOR().setValue(null);
		form.lyrDetails().tabCentral().intSOR().setValue(null);
	}

	private void newMovementInstance()
	{
		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_None))
		{
			form.getLocalContext().setCurrentAction(Action_NewROM);
			newParentInstance();
		}
		else
		{
			if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
			{

				form.getLocalContext().setCurrentAction(Action_AddMovement);

				if (form.grdCentral().getValue() instanceof RangeOfMovementDetailVo)
				{
					newChildInstance((RangeOfMovementDetailVo) form.grdCentral().getValue());
				}
				else if (form.grdCentral().getValue() instanceof MskJointMovementVo)
				{
					if (form.grdCentral().getSelectedRow().getParentRow().getValue() instanceof RangeOfMovementDetailVo)
						newChildInstance((RangeOfMovementDetailVo) form.grdCentral().getSelectedRow().getParentRow().getValue());
				}

			}
			else
			{
				form.getLocalContext().setCurrentAction(Action_AddMovement);

				if (form.grdPeripheral().getValue() instanceof RangeOfMovementDetailVo)
				{
					newChildInstance((RangeOfMovementDetailVo) form.grdPeripheral().getValue());
				}
				else if (form.grdPeripheral().getValue() instanceof MskJointMovementVo)
				{
					if (form.grdPeripheral().getSelectedRow().getParentRow().getValue() instanceof RangeOfMovementDetailVo)
						newChildInstance((RangeOfMovementDetailVo) form.grdPeripheral().getSelectedRow().getParentRow().getValue());
				}

			}
		}

		form.setMode(FormMode.EDIT);
	}

	private void newParentInstance()
	{
		RangeOfMovementVo voNewParent = new RangeOfMovementVo();
		voNewParent.setAuthoringCP((Hcp) domain.getHcpUser());
		// form.getGlobalContext().Core.getCurrentClinicalContact().getRootClinContact().getResponsibleHCP()
		voNewParent.setAuthoringDateTime(new DateTime());
		voNewParent.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voNewParent.setCareContext(form.getGlobalContext().Core.getCurrentClinicalContact().getCareContext());
		voNewParent.setDetails(new RangeOfMovementDetailVoCollection());
		populateParentInstanceControls(voNewParent);
		form.getLocalContext().setSelectedParentInstance(voNewParent);
		form.setMode(FormMode.EDIT);
		form.btnNew().setVisible(false);
	}

	private void newJointInstance()
	{
		form.getLocalContext().setCurrentAction(Action_AddJoint);
		newChildInstance();
		form.setMode(FormMode.EDIT);
	}

	private void updateMovementInstance()
	{
		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
		{
			if (form.grdCentral().getSelectedRow().getValue() instanceof MskJointMovementVo)
			{
				RangeOfMovementDetailVo voROMDetail = (RangeOfMovementDetailVo) form.grdCentral().getSelectedRow().getParentRow().getValue();
				loadMovementsForCentralJoint(voROMDetail.getJoint());
				populateCentralChildInstanceControls((MskJointMovementVo) form.grdCentral().getSelectedRow().getValue());

			}
		}
		else if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Peripheral))
		{
			if (form.grdPeripheral().getSelectedRow().getValue() instanceof MskJointMovementVo)
			{
				RangeOfMovementDetailVo voROMDetail = (RangeOfMovementDetailVo) form.grdPeripheral().getSelectedRow().getParentRow().getValue();
				loadMovementsForPeripheralJoint(voROMDetail.getJoint());
				populatePeripheralChildInstanceControls(voROMDetail, (MskJointMovementVo) form.grdPeripheral().getSelectedRow().getValue());
			}

		}

		form.getLocalContext().setCurrentAction(Action_UpdateMovement);
		form.setMode(FormMode.EDIT);
	}

	private boolean pushChanges()
	{
		if ( ! validateMovementInstanceData())
			return false;

		RangeOfMovementDetailVo voRangeOfMovementDetail = form.getLocalContext().getSelectedChildInstance();

		
		if (voRangeOfMovementDetail == null)
			voRangeOfMovementDetail = new RangeOfMovementDetailVo();

		if (!populateChildInstanceData(voRangeOfMovementDetail))
			return false;

		if (voRangeOfMovementDetail.countFieldsWithValue() > 1)
		{
			// WDEV-2259
			String[] uiErrors = getUiErrors();
			String strErrors[] = voRangeOfMovementDetail.validate(uiErrors);

			if (strErrors != null && strErrors.length > 0)
			{
				engine.showErrors(strErrors);
				return false;
			}
		}
		else
		{
			return false;
		}

		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
		{
			if (form.lyrDetails().tabCentral().cmbCentralMovement().getValue() != null)
			{
				pushCentralChildNode(voRangeOfMovementDetail);
				form.grdCentral().setValue(voRangeOfMovementDetail);
			}

		}
		else if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Peripheral))
		{
			if (form.lyrDetails().tabPeripheral().cmbPeripheralMovement().getValue() != null)
			{
				pushPeripheralChildNode(voRangeOfMovementDetail);
				form.grdPeripheral().setValue(voRangeOfMovementDetail);
			}

		}

		form.getLocalContext().setSelectedMovement(null);
		clearChildInstanceControls(false);
		return true;
	}

	private void pushPeripheralChildNode(RangeOfMovementDetailVo voRangeOfMovementDetail)
	{
		GenForm.grdPeripheralRow childRow = findPeripheralChildNode(voRangeOfMovementDetail.getJoint(), voRangeOfMovementDetail.getLaterality());
		if (childRow == null)
			childRow = form.grdPeripheral().getRows().newRow();

		childRow.setValue(voRangeOfMovementDetail);
		populatePeripheralChildNode(childRow, voRangeOfMovementDetail);
		if (voRangeOfMovementDetail.getSelectedMovements().size() > 0)
		{
			MskJointMovementVo voJointMovement = voRangeOfMovementDetail.getSelectedMovements().get(0);
			if (voJointMovement.getID_MskJointMovement() != null)
			{
				for (int i = 0; i < childRow.getRows().size(); i++)
				{
					MskJointMovementVo nodeMovement = (MskJointMovementVo) childRow.getRows().get(i).getValue();
					if (nodeMovement.equals(voJointMovement))
					{
						childRow.getRows().get(i).setValue(voJointMovement);
						break;
					}
				}
			}
			else
			{
				if (voJointMovement.getMoveType() != null)
				{
					GenForm.grdPeripheralRow movementRow = childRow.getRows().newRow();
					populatePeripheralMovementNode(movementRow, voJointMovement);
				}
			}

		}

		form.lyrDetails().tabPeripheral().cmbPeripheralArea().setEnabled(false);
		form.lyrDetails().tabPeripheral().cmbLaterality().setEnabled(false);
	}

	private void pushCentralChildNode(RangeOfMovementDetailVo voRangeOfMovementDetail)
	{
		GenForm.grdCentralRow childRow = findCentralChildNode(voRangeOfMovementDetail.getJoint());
		if (childRow == null)
			childRow = form.grdCentral().getRows().newRow();

		childRow.setValue(voRangeOfMovementDetail);
		populateCentralChildNode(childRow, voRangeOfMovementDetail);
		if (voRangeOfMovementDetail.getSelectedMovements().size() > 0)
		{
			MskJointMovementVo voJointMovement = voRangeOfMovementDetail.getSelectedMovements().get(0);
			if (voJointMovement.getID_MskJointMovement() != null)
			{
				for (int i = 0; i < childRow.getRows().size(); i++)
				{
					MskJointMovementVo nodeMovement = (MskJointMovementVo) childRow.getRows().get(i).getValue();
					if (nodeMovement.equals(voJointMovement))
					{
						childRow.getRows().get(i).setValue(voJointMovement);
						break;
					}
				}
			}
			else
			{
				if (voJointMovement.getMoveType() != null)
				{
					GenForm.grdCentralRow movementRow = childRow.getRows().newRow();
					populateCentralMovementNode(movementRow, voJointMovement);
				}

			}

		}

		// form.grdCentral().setValue(voRangeOfMovementDetail);
		form.lyrDetails().tabCentral().cmbCentralArea().setEnabled(false);
	}

	private GenForm.grdCentralRow findCentralChildNode(MskJointVo voJointToFind)
	{
		GenForm.grdCentralRow row = null;
		for (int i = 0; i < form.grdCentral().getRows().size(); i++)
		{
			// Looking for a match for the joint here
			MskJointVo voJoint = ((RangeOfMovementDetailVo) form.grdCentral().getRows().get(i).getValue()).getJoint();
			if (voJoint.equals(voJointToFind))
			{
				row = form.grdCentral().getRows().get(i);
				break;
			}
		}

		return row;
	}

	private GenForm.grdPeripheralRow findPeripheralChildNode(MskJointVo voJointToFind, LateralityLRonly lkpLateralityToFind)
	{
		GenForm.grdPeripheralRow row = null;
		for (int i = 0; i < form.grdPeripheral().getRows().size(); i++)
		{
			// Looking for a match for the joint and laterality here
			MskJointVo voJoint = ((RangeOfMovementDetailVo) form.grdPeripheral().getRows().get(i).getValue()).getJoint();
			LateralityLRonly lkpLaterality = ((RangeOfMovementDetailVo) form.grdPeripheral().getRows().get(i).getValue()).getLaterality();
			if (voJoint != null && voJoint.equals(voJointToFind) && lkpLaterality != null && lkpLaterality.equals(lkpLateralityToFind))
			{
				row = form.grdPeripheral().getRows().get(i);
				break;
			}
		}

		return row;
	}

	// WDEV-2259
	private String[] getUiErrors()
	{
		ArrayList errors = new ArrayList();

		if ((form.lyrDetails().tabPeripheral().cmbPeripheralArea().isEnabled() || !form.lyrDetails().tabPeripheral().btnPeripheralAddApply().isVisible())
				&& form.lyrDetails().tabPeripheral().cmbPeripheralArea().getValue() != null)
		{
			if (form.lyrDetails().tabPeripheral().cmbLaterality().getValue() == null)
			{
				errors.add("Laterality is mandatory");
			}
			if (form.lyrDetails().tabPeripheral().cmbPeripheralAction().getValue() == null)
			{
				errors.add("Action is mandatory");
			}
			if (form.lyrDetails().tabPeripheral().cmbPeripheralMovement().getValue() == null)
			{
				errors.add("Movement is mandatory");
			}
		}

		if ((form.lyrDetails().tabCentral().cmbCentralArea().isEnabled() || !form.lyrDetails().tabCentral().btnCentralAddApply().isVisible())
				&& form.lyrDetails().tabCentral().cmbCentralArea().getValue() != null)
		{
			if (form.lyrDetails().tabCentral().cmbCentralAction().getValue() == null)
			{
				errors.add("Action is mandatory");
			}
			if (form.lyrDetails().tabCentral().cmbCentralMovement().getValue() == null)
			{
				errors.add("Movement is mandatory");
			}
		}

		if (errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Range of Movement Record", searchErrors);
			return searchErrors;
		}
		return null;
	}

	private boolean save()
	{
		if ( ! validateMovementInstanceData())
			return false;
		

		try
		{
			checkForUnsavedChild();
		}
		catch (PresentationLogicException e)
		{
			return false;
		}

		RangeOfMovementVo voRangeOfMovement = populateInstanceData(form.getLocalContext().getSelectedParentInstance());

		if (voRangeOfMovement.getClinicalContact() == null)
			voRangeOfMovement.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		String[] uiErrors = getUiErrors();
		String[] arrErrors = voRangeOfMovement.validate(uiErrors);
		// validateUIRules()

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		try
		{
			RangeOfMovementVo voSavedRom = domain.save(voRangeOfMovement);
			form.getLocalContext().setSelectedParentInstance(voSavedRom);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("A Range of Movement record already exists for this SOAP clinical contact. " + e.getMessage());
			open();
			return false;
		}

		setUpdatedChild();
		return true;

	}

	private boolean validateMovementInstanceData()
	{
		if (form.lyrDetails().tabPeripheral().txtSOR().getValue() != null)
		{
			Integer thisNum = 0;
			try
			{
				thisNum = Integer.parseInt(form.lyrDetails().tabPeripheral().txtSOR().getValue());
			}
			catch(NumberFormatException  e)
			{
				engine.showMessage("The SOR number supplied is not valid.");
				return false;
			}
		}
	
		if (form.lyrDetails().tabPeripheral().txtEOR().getValue() != null)
		{
			Integer thisNum = 0;
			try
			{
				thisNum = Integer.parseInt(form.lyrDetails().tabPeripheral().txtEOR().getValue());
			}
			catch(NumberFormatException  e)
			{
				engine.showMessage("The EOR number supplied is not valid.");
				return false;
			}
		}

		return true;
	}

	private void setUpdatedChild()
	{

		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
			setUpdatedCentralChild();
		else if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Peripheral))
			setUpdatedPeripheralChild();
	}

	private void setUpdatedPeripheralChild()
	{
		form.getLocalContext().setUpdatedChildType(Joint_Type_Peripheral);

		if (form.grdPeripheral().getValue() instanceof MskJointMovementVo)
		{
			form.getLocalContext().setUpdatedChild((MskJointMovementVo) form.grdPeripheral().getValue());
		}
		else
		{
			// Find the most recently added child
			if (form.getLocalContext().getCurrentAction().equals(Action_UpdateMovement) == false)
			{
				for (int i = 0; i < form.getLocalContext().getSelectedParentInstance().getDetails().size(); i++)
				{
					RangeOfMovementDetailVo voCurrentRom = form.getLocalContext().getSelectedParentInstance().getDetails().get(i);
					if (voCurrentRom.equals(form.getLocalContext().getSelectedChildInstance()))
					{
						if(voCurrentRom.getSelectedMovements().size() > 0)
						{
							voCurrentRom.getSelectedMovements().sort();
							form.getLocalContext().setUpdatedChild(voCurrentRom.getSelectedMovements().get(voCurrentRom.getSelectedMovements().size() - 1));
						}
					}
				}
			}
		}
	}

	private void setUpdatedCentralChild()
	{
		form.getLocalContext().setUpdatedChildType(Joint_Type_Central);

		// We edited a central child which is still selected in the tree
		if (form.grdCentral().getValue() instanceof MskJointMovementVo)
		{
			form.getLocalContext().setUpdatedChild((MskJointMovementVo) form.grdCentral().getValue());
		}
		else
		{
			// We added a movement to the selected child. Interrogate the saved movement collection
			// and select the most recently added one.
			if (form.getLocalContext().getCurrentAction().equals(Action_UpdateMovement) == false)
			{
				for (int i = 0; i < form.getLocalContext().getSelectedParentInstance().getDetails().size(); i++)
				{
					RangeOfMovementDetailVo voCurrentRom = form.getLocalContext().getSelectedParentInstance().getDetails().get(i);
					if (voCurrentRom.equals(form.getLocalContext().getSelectedChildInstance()))
					{
						if(voCurrentRom.getSelectedMovements().size() > 0)
						{
							voCurrentRom.getSelectedMovements().sort();
							form.getLocalContext().setUpdatedChild(voCurrentRom.getSelectedMovements().get(voCurrentRom.getSelectedMovements().size() - 1));
						}
					}
				}
			}
		}
	}

	private void updateContextMenusState()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().hideAllRangeOfMovementCentralMenuItems();
			form.getContextMenus().hideAllRangeOfMovementPeripheralMenuItems();
			setContextMenuCaptions();
			setRemoveAndUpdateContextMenuVisibility();
		}
		else
		{
			setContextMenuCaptions();
			setContextMenuVisibility();
		}
	}

	private void setRemoveAndUpdateContextMenuVisibility()
	{
		boolean bCentralVisible = false;
		boolean bPeripheralVisible = false;
		boolean bByClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull();

		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central) && form.getMode().equals(FormMode.EDIT) && bByClinicalContact == true && form.grdCentral().getValue() instanceof MskJointMovementVo && ((MskJointMovementVo) form.grdCentral().getValue()).getID_MskJointMovement() == null)

			bCentralVisible = true;

		else if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Peripheral) && form.getMode().equals(FormMode.EDIT) && bByClinicalContact == true && form.grdPeripheral().getValue() instanceof MskJointMovementVo && ((MskJointMovementVo) form.grdPeripheral().getValue()).getID_MskJointMovement() == null)

			bPeripheralVisible = true;

		form.getContextMenus().getRangeOfMovementCentralREMOVEItem().setVisible(bCentralVisible);
	
		form.getContextMenus().getRangeOfMovementPeripheralREMOVEItem().setVisible(bPeripheralVisible);
	}

	private void setContextMenuVisibility()
	{
		boolean bGolden = form.getLocalContext().getGoldenInstanceSelected() != null && form.getLocalContext().getGoldenInstanceSelected().booleanValue() == true;

		form.getContextMenus().getRangeOfMovementCentralADDdetailsItem().setVisible(form.getMode().equals(FormMode.VIEW) && bGolden && form.grdCentral().getValue() != null);
		form.getContextMenus().getRangeOfMovementPeripheralAddDetailItem().setVisible(form.getMode().equals(FormMode.VIEW) && bGolden && form.grdPeripheral().getValue() != null);

		form.getContextMenus().getRangeOfMovementCentralUpdateItem().setVisible(form.getMode().equals(FormMode.VIEW) && bGolden && form.getLocalContext().getSelectedParentInstance() != null && form.grdCentral().getValue() instanceof MskJointMovementVo);

		form.getContextMenus().getRangeOfMovementPeripheralEditItem().setVisible(form.getMode().equals(FormMode.VIEW) && bGolden && form.getLocalContext().getSelectedParentInstance() != null && form.grdPeripheral().getValue() instanceof MskJointMovementVo);

		form.getContextMenus().getRangeOfMovementCentralADDJointItem().setVisible(form.getMode().equals(FormMode.VIEW) && bGolden && form.getLocalContext().getSelectedParentInstance() != null);
		form.getContextMenus().getRangeOfMovementPeripheralAddJointItem().setVisible(form.getMode().equals(FormMode.VIEW) && bGolden && form.getLocalContext().getSelectedParentInstance() != null);
	}

	private void setContextMenuCaptions()
	{
		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
		{
			setCentralContextMenuCaptions();
		}
		else if (form.getLocalContext().getJointTypeSelected().equals((Joint_Type_Peripheral)))
		{
			setPeripheralContextMenuCaptions();
		}
	}

	private void setPeripheralContextMenuCaptions()
	{
		if (form.grdPeripheral().getValue() == null)
		{
			if (form.getLocalContext().getSelectedParentInstance() == null)
				form.getContextMenus().getRangeOfMovementPeripheralAddDetailItem().setText("New Range Of Movement");
			else
				form.getContextMenus().getRangeOfMovementPeripheralAddDetailItem().setText("Add Range Of Movement Details");
		}
		else
		{
			if (form.getLocalContext().getSelectedChildInstance() == null)
				return;
			if (form.getLocalContext().getSelectedChildInstance().getJoint() == null)
				return;
			if (form.getLocalContext().getSelectedChildInstance().getLaterality() == null)
				return;

			String str = "Add Selected Movements for " + (form.getLocalContext().getSelectedChildInstance().getJoint().getName() + " - (" + (form.getLocalContext().getSelectedChildInstance().getLaterality().getIItemText() + ")"));

			form.getContextMenus().getRangeOfMovementPeripheralAddDetailItem().setText(str);

			if (form.grdPeripheral().getSelectedRow().getValue() instanceof MskJointMovementVo)
				form.getContextMenus().getRangeOfMovementPeripheralEditItem().setText("Edit Movement Details");
			else
				form.getContextMenus().getRangeOfMovementPeripheralEditItem().setText(str);
		}

	}

	private void setCentralContextMenuCaptions()
	{
		if (form.grdCentral().getValue() == null)
		{
			if (form.getLocalContext().getSelectedParentInstance() == null)
				form.getContextMenus().getRangeOfMovementCentralADDdetailsItem().setText("New Range Of Movement");
			else
				form.getContextMenus().getRangeOfMovementCentralADDdetailsItem().setText("Add Range Of Movement Details");
		}
		else
		{
			if (form.getLocalContext().getSelectedChildInstance().getJoint() == null)
				return;

			String str = "Add Selected Movements for " + form.getLocalContext().getSelectedChildInstance().getJoint().getName();

			form.getContextMenus().getRangeOfMovementCentralADDdetailsItem().setText(str);

			if (form.grdCentral().getSelectedRow().getValue() instanceof MskJointMovementVo)
				form.getContextMenus().getRangeOfMovementCentralUpdateItem().setText("Edit Movement Details");
			else
				form.getContextMenus().getRangeOfMovementCentralUpdateItem().setText(str);

		}
	}

	private void setAddApplyCaption()
	{
		form.lyrDetails().tabCentral().btnCentralAddApply().setText("Add");
		form.lyrDetails().tabPeripheral().btnPeripheralAddApply().setText("Add");

		if (form.getLocalContext().getSelectedChildInstance() == null && (form.grdCentral().getValue() instanceof MskGroupVo))
			form.lyrDetails().tabCentral().btnCentralAddApply().setText("Apply");

		if (form.getLocalContext().getSelectedChildInstance() == null && (form.grdPeripheral().getValue() instanceof MskGroupVo))
			form.lyrDetails().tabPeripheral().btnPeripheralAddApply().setText("Apply");

	}

	private void newChildInstance()
	{
		form.getLocalContext().setSelectedChildInstance(new RangeOfMovementDetailVo());
		listAvailableJoints(false);
		clearChildInstanceControls(true);
	}

	private void newChildInstance(RangeOfMovementDetailVo voRangeOfMovementDetail)
	{
		form.getLocalContext().setSelectedChildInstance(voRangeOfMovementDetail);

		RangeOfMovementJointVo voROMJoint = getRomJoint();
		if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Central))
		{
			clearChildInstanceControls(true);
			form.lyrDetails().tabCentral().cmbCentralArea().setValue(voROMJoint);
			loadMovementsForCentralJoint(voROMJoint.getJoint());
		}
		else if (form.getLocalContext().getJointTypeSelected().equals(Joint_Type_Peripheral))
		{
			clearChildInstanceControls(true);
			form.lyrDetails().tabPeripheral().cmbPeripheralArea().setValue(getRomJoint());
			form.lyrDetails().tabPeripheral().cmbLaterality().setValue(form.getLocalContext().getSelectedChildInstance().getLaterality());
			loadMovementsForPeripheralJoint(voROMJoint.getJoint());
		}
	}

	protected void onCmbCentralAreaValueChanged() throws PresentationLogicException
	{
		clearChildInstanceControls(false);
		// WDEV-2259
		if (form.lyrDetails().tabCentral().cmbCentralArea().getValue() != null)
			loadMovementsForCentralJoint(form.lyrDetails().tabCentral().cmbCentralArea().getValue().getJoint());
	}

	/**
	 * Invoked as part of the save routine. The user may have entered data in the details tab and not bothered clicking ok. This method counts thae vo fields to decide if it should promote the unsaved data entry to the grid before saving.
	 */
	private void checkForUnsavedChild() throws PresentationLogicException
	{
		if (form.getLocalContext().getSelectedParentInstance() == null)
			return;
		if (form.getLocalContext().getSelectedParentInstance().getID_MskExamJointBones() == null)
			return;

		if ((form.getLocalContext().getCurrentAction().equals(Action_AddMovement) || form.getLocalContext().getCurrentAction().equals(Action_AddJoint)) && form.getLocalContext().getSelectedMovement() == null)
			if (pushChanges() == false)
				throw new PresentationLogicException();
	}

	protected void onRecbr1ValueChanged() throws PresentationLogicException
	{
		selectGroup();
	}

	private void selectGroup()
	{
		resetAllContextVariables();
		RangeOfMovementVo voRangeOfMovement = form.recbr1().getValue();
		if (voRangeOfMovement != null)
		{
			if (voRangeOfMovement.getClinicalContactIsNotNull())
				form.getLocalContext().setGoldenInstanceSelected(new Boolean(voRangeOfMovement.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact())));
			populateTree(voRangeOfMovement);
			form.getLocalContext().setSelectedParentInstance(voRangeOfMovement);
			populateParentInstanceControls(voRangeOfMovement);
		}
		listAvailableJoints(true);

		restoreUpdatedNode();
		updateControlsState();
	}

	String buildBrowserLine(RangeOfMovementVo record)
	{
		if (record == null)
			return "Unknown Range of Movement";

		String result = "";
		result += "Author:  ";
		result += record.getAuthoringCP() != null ? record.getAuthoringCP().toString() : "<unknown>";
		result += " date: ";
		result += record.getAuthoringDateTime() != null ? record.getAuthoringDateTime().toString() : "<unknown>";

		return result;
	}

}
