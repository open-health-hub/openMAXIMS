//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.43 build 2232.25589)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.wheelchaircushion;

import java.util.ArrayList;

import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.spinalinjuries.vo.lookups.WheelchairCushionAccessory;
import ims.spinalinjuries.vo.lookups.WheelchairCushionAccessoryCollection;
import ims.spinalinjuries.vo.lookups.WheelchairCushionModification;
import ims.spinalinjuries.vo.lookups.WheelchairCushionModificationCollection;
import ims.spinalinjuries.vo.lookups.WheelchairCushionType;
import ims.spinalinjuries.vo.lookups.WheelchairCushionTypeCollection;
import ims.therapies.vo.WheelchairCushionVo;
import ims.therapies.vo.WheelchairCushionVoCollection;

public class Logic extends BaseLogic
{
	/*
	 * @see ims.therapies.forms.wheelchaircushion.Handlers#onFormOpen()
	 */
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		prepopulateControls();
		open();
	}
	/**
	 * prepopulates Type hierarchical lookup
	 * @return      void
	 */	
	private void prepopulateControls() {
		
		form.ctnDetails().cmbType().clear();
		WheelchairCushionTypeCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getWheelchairCushionType(domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			if(lookupCollection.get(x).getParent()==null)
				form.ctnDetails().cmbType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
		
		form.ctnDetails().gridModifications().getRows().clear();
		WheelchairCushionModificationCollection lookupCollCushionMod = ims.spinalinjuries.vo.lookups.LookupHelper.getWheelchairCushionModification(domain.getLookupService());
		GenForm.ctnDetailsContainer.gridModificationsRow rowModifications = null;
		for(int x = 0; x < lookupCollCushionMod.size(); x++)
		{
			rowModifications = form.ctnDetails().gridModifications().getRows().newRow();
			
			rowModifications.setColModifications(lookupCollCushionMod.get(x).getText());
			rowModifications.setValue(lookupCollCushionMod.get(x));
		}
		
		form.ctnDetails().gridAccessories().getRows().clear();
		WheelchairCushionAccessoryCollection lookupCollCushionAcc = ims.spinalinjuries.vo.lookups.LookupHelper.getWheelchairCushionAccessory(domain.getLookupService());
		GenForm.ctnDetailsContainer.gridAccessoriesRow rowAccessories = null;
		for(int x = 0; x < lookupCollCushionAcc.size(); x++)
		{
			rowAccessories = form.ctnDetails().gridAccessories().getRows().newRow();
			
			rowAccessories.setColAccessories(lookupCollCushionAcc.get(x).getText());
			rowAccessories.setValue(lookupCollCushionAcc.get(x));
		}
		
		form.getLocalContext().setWheelchairCushionVo(null);
		
	}
	/**
	 * called to populate the screen with List and Instance Data in the occurance of opening a form,canceling a new or update and staleobject exception.
	 * @return      void
	 */	
	private void open() {
		form.getContextMenus().hideAllGenericGridMenuItems();
		
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			populateListControl(domain.listByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		
		//set selection back
		if (form.getLocalContext().getWheelchairCushionVoIsNotNull())
		{
			form.grdDetails().setValue(form.getLocalContext().getWheelchairCushionVo());
			populateInstanceControl(form.grdDetails().getValue());
			updateControlsState();			
		}
		else
			form.ctnDetails().setCollapsed(true);
				
		form.setMode(FormMode.VIEW);		
	}
	/**
	 * populates the screen from data from specified WheelchairCushionVoCollection
	 * @param collWheelchairCushionVo 
	 * @return      void
	 */
	private void populateListControl(WheelchairCushionVoCollection collWheelchairCushionVo) {
		clear();
		
		if (collWheelchairCushionVo != null)
		{
			GenForm.grdDetailsRow row;
			for (int i =0; i < collWheelchairCushionVo.size();i++)
			{
				row = form.grdDetails().getRows().newRow();
				
				row.setValue(collWheelchairCushionVo.get(i));	
				if(collWheelchairCushionVo.get(i).getAuthoringDateTimeIsNotNull())
					row.setColDate(collWheelchairCushionVo.get(i).getAuthoringDateTime().toString());
				if(collWheelchairCushionVo.get(i).getAuthoringCPIsNotNull())
					row.setColHCP(collWheelchairCushionVo.get(i).getAuthoringCP().toString());
				if(collWheelchairCushionVo.get(i).getCushionCategoryIsNotNull())
					row.setColCategory(collWheelchairCushionVo.get(i).getCushionCategory().toString());
				if(collWheelchairCushionVo.get(i).getCushionTypeIsNotNull())
					row.setColType(collWheelchairCushionVo.get(i).getCushionType().toString());
				if(collWheelchairCushionVo.get(i).getCoverTypeIsNotNull())
					row.setColCoverType(collWheelchairCushionVo.get(i).getCoverType().toString());
				if(collWheelchairCushionVo.get(i).getCushionSizeIsNotNull())
					row.setColCushionSize(collWheelchairCushionVo.get(i).getCushionSize().toString());
				if(collWheelchairCushionVo.get(i).getStartDateIsNotNull())
					row.setColStartDate(collWheelchairCushionVo.get(i).getStartDate().toString());
				if(collWheelchairCushionVo.get(i).getEndDateIsNotNull())
					row.setColEndDate(collWheelchairCushionVo.get(i).getEndDate().toString());
			}
		}
	}
	/**
	 * clear list and instance controls
	 * @return void 
	 */		
	public void clear()
	{
		form.grdDetails().getRows().clear();
		clearInstanceControls();
	}
	/*
	 * @see ims.therapies.forms.wheelchaircushion.Handlers#onBtnNewClick()
	 */
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	private void newInstance() {
		if (allowNew())
		{
			// initalise the screen for a new record
			form.getLocalContext().setWheelchairCushionVo(new WheelchairCushionVo());
			clearInstanceControls();
			form.ctnDetails().setCollapsed(false);
			//set the form mode
			form.setMode(FormMode.EDIT);
			//set any control status specific this form	
			form.ctnDetails().dtimRecording().setEnabled(true);
			form.ctnDetails().qmbAuthoringHCP().setEnabled(true);
			form.ctnDetails().cmbCategory().setEnabled(false);
			form.getContextMenus().hideAllGenericGridMenuItems();
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			setDefaultValues();
		}	
	}
	/**
	 * set default values on New
	 * @return void 
	 */	
	private void setDefaultValues() {
		Hcp hcpUser = (Hcp)domain.getHcpUser();
		if(hcpUser!=null){
			form.ctnDetails().qmbAuthoringHCP().newRow(hcpUser, hcpUser.getName().toString());
			form.ctnDetails().qmbAuthoringHCP().setValue(hcpUser);
		}
		DateTime dateTime = new DateTime();
		form.ctnDetails().dtimRecording().setValue(dateTime);		
	}
	private void clearInstanceControls() {
		form.ctnDetails().dtimRecording().setValue(null);
		form.ctnDetails().qmbAuthoringHCP().setValue(null);
		form.ctnDetails().cmbType().setValue(null);
		form.ctnDetails().cmbCategory().setValue(null);
		form.ctnDetails().cmbCoverType().setValue(null);
		form.ctnDetails().cmbCushionSize().setValue(null);
		form.ctnDetails().dteEnd().setValue(null);
		form.ctnDetails().dteStart().setValue(null);
		
		form.ctnDetails().gridPressureReading().getRows().clear();
		
		GenForm.ctnDetailsContainer.gridModificationsRow rowModifications = null;
		for(int j=0; j<form.ctnDetails().gridModifications().getRows().size(); j++){
			rowModifications = form.ctnDetails().gridModifications().getRows().get(j);
			rowModifications.setColSelected(false);
		}
		GenForm.ctnDetailsContainer.gridAccessoriesRow rowAccessories = null;
		for(int j=0; j<form.ctnDetails().gridAccessories().getRows().size(); j++){
			rowAccessories = form.ctnDetails().gridAccessories().getRows().get(j);
			rowAccessories.setColSelected(false);
		}
	}
	private boolean allowNew() {
		// TODO Auto-generated method stub
		return true;
	}
	/*
	 * @see ims.therapies.forms.wheelchaircushion.Handlers#onBtnUpdateClick()
	 */
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	/**
	 * called from context menus and update button for initiating an update
	 * @return void 
	 */	
	private void updateInstance() {
		if (allowUpdate()){
			form.setMode(FormMode.EDIT);
			form.ctnDetails().dtimRecording().setEnabled(false);
			form.ctnDetails().qmbAuthoringHCP().setEnabled(false);
			form.getContextMenus().hideAllGenericGridMenuItems();
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			form.ctnDetails().setCollapsed(false);
		}
	}
	/**
	 * checks before allowing an update
	 * @return void 
	 */	
	private boolean allowUpdate() {
		return (form.getLocalContext().getWheelchairCushionVoIsNotNull());
	}
	/*
	 * @see ims.therapies.forms.wheelchaircushion.Handlers#onBtnCancelClick()
	 */
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	/*
	 * @see ims.therapies.forms.wheelchaircushion.Handlers#onBtnSaveClick()
	 */
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();	
	}
	/**
	 * gather screen data into local context vo and save updating the local context vo
	 * returns true for successful save
	 * @return boolean
	 * @throws PresentationLogicException 
	 */	
	private boolean save() {
		WheelchairCushionVo voWheelchairCushion = populateInstanceData();
		
		//set clinical contact
		if (!voWheelchairCushion.getClinicalContactIsNotNull())
			voWheelchairCushion.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		//set Care Context
		if (!voWheelchairCushion.getCareContextIsNotNull())
			voWheelchairCushion.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				
		//validate Vo
		String[] arrErrors = voWheelchairCushion.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(arrErrors);
		if (arrScreenAndVoErrors.length > 0)
		{	
			engine.showErrors(arrScreenAndVoErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setWheelchairCushionVo(domain.save(voWheelchairCushion));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}
	/**
	 * check for screen validation errors and add to VO validation errors
	 * returns array or error messages
	 * @return String[]
	 *  @param arrErrors
	 */	
	private String[] addScreenErrorsToVOErrors(String[] arrErrors)
	{
		String[] arrAllErrors = null;
		ArrayList screenErrors = new ArrayList();
		
		if(form.ctnDetails().gridPressureReading().getRows().size()>0){
			for(int i=0; i<form.ctnDetails().gridPressureReading().getRows().size(); i++){
				
				if(form.ctnDetails().gridPressureReading().getRows().get(i).getColDate()==null)
					screenErrors.add("Please enter Pressure Reading Date.");
			}
		}
		
		if(form.ctnDetails().dteStart().getValue()!= null && form.ctnDetails().dteEnd().getValue() != null				
				&& form.ctnDetails().dteStart().getValue().isGreaterThan(form.ctnDetails().dteEnd().getValue()))
			screenErrors.add("Start Date can not be after End Date.");		
		
		if(arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);
			
			int i=0;	
			for(int p=screenErrors.size();p<arrAllErrors.length;p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}	
		else
		{
			arrAllErrors = new String[screenErrors.size()];		
			
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);	
		}	
		
		return arrAllErrors;
	}
	/**
	 * gather screen data into local context vo and save updating the local context vo
	 * returns true for successful save
	 * @return boolean
	 * @throws PresentationLogicException 
	 */	
	private WheelchairCushionVo populateInstanceData(){
		WheelchairCushionVo voWheelchairCushion = form.getLocalContext().getWheelchairCushionVo();
		
		if(voWheelchairCushion == null)
			voWheelchairCushion = new WheelchairCushionVo();

		voWheelchairCushion.setAuthoringDateTime(form.ctnDetails().dtimRecording().getValue());
		voWheelchairCushion.setAuthoringCP(form.ctnDetails().qmbAuthoringHCP().getValue());
		voWheelchairCushion.setCushionType(form.ctnDetails().cmbType().getValue());
		voWheelchairCushion.setCushionCategory(form.ctnDetails().cmbCategory().getValue());
		voWheelchairCushion.setCoverType(form.ctnDetails().cmbCoverType().getValue());
		voWheelchairCushion.setCushionSize(form.ctnDetails().cmbCushionSize().getValue());
		voWheelchairCushion.setStartDate(form.ctnDetails().dteStart().getValue());
		voWheelchairCushion.setEndDate(form.ctnDetails().dteEnd().getValue());	
		
		if(form.ctnDetails().gridPressureReading().getRows().size()>0){
			Date[] collPressureReadingDate = new Date[form.ctnDetails().gridPressureReading().getRows().size()];
			for(int i=0; i<form.ctnDetails().gridPressureReading().getRows().size(); i++){
				
				collPressureReadingDate[i] = form.ctnDetails().gridPressureReading().getRows().get(i).getColDate();
			}
			voWheelchairCushion.setPressureReadingDate(collPressureReadingDate);
		}
		else
			voWheelchairCushion.setPressureReadingDate( new Date[0]);
		
		WheelchairCushionModificationCollection collWheelchairCushionModification = new WheelchairCushionModificationCollection();
		GenForm.ctnDetailsContainer.gridModificationsRow rowModifications = null;
		for(int i=0; i<form.ctnDetails().gridModifications().getRows().size(); i++){
			rowModifications = form.ctnDetails().gridModifications().getRows().get(i);
			if(rowModifications.getColSelected())
				collWheelchairCushionModification.add(rowModifications.getValue());
		}
		voWheelchairCushion.setCushionModification(collWheelchairCushionModification);
		
		WheelchairCushionAccessoryCollection collWheelchairCushionAccessory = new WheelchairCushionAccessoryCollection();
		GenForm.ctnDetailsContainer.gridAccessoriesRow rowAccessories = null;
		for(int i=0; i<form.ctnDetails().gridAccessories().getRows().size(); i++){
			rowAccessories = form.ctnDetails().gridAccessories().getRows().get(i);
			if(rowAccessories.getColSelected())
				collWheelchairCushionAccessory.add(form.ctnDetails().gridAccessories().getRows().get(i).getValue());
		}
		voWheelchairCushion.setCushionAccessory(collWheelchairCushionAccessory);
		
		
		return voWheelchairCushion;
	}
	/*
	 * updates the context menus and other dependant screen controls
	 * @see ims.clinical.forms.familyhistory.Handlers#onFormModeChanged()
	 */
	protected void onFormModeChanged() {
		updateControlsState(); 
		
	}
	private void updateControlsState() {
		//TODO: will be set as default to New. remove the "New " when this is complete.
		form.getContextMenus().getLIPNewItem().setText("New");

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().getLIPNewItem().setVisible(false);
			form.getContextMenus().getLIPUpdateItem().setVisible(false);
			if(form.ctnDetails().cmbType().getValue()!=null)
				form.ctnDetails().cmbCategory().setEnabled(true);
		}
		else
		{
			if (form.grdDetails().getSelectedRowIndex()>=0)
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.getContextMenus().getLIPUpdateItem().setVisible(true);
				if (form.grdDetails().getSelectedRowIndex()>=0)
					form.btnUpdate().setVisible(true);
				else
					form.btnUpdate().setVisible(false);
			}
			else
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.getContextMenus().getLIPUpdateItem().setVisible(false);
				form.btnUpdate().setVisible(false);
			}
		}
		
	}
	protected void onGrdDetailsSelectionChanged() throws PresentationLogicException {
		//Display Panel and detail
		form.getLocalContext().setWheelchairCushionVo(form.grdDetails().getValue());
		populateInstanceControl(form.grdDetails().getValue());
		updateControlsState();
	}
	/**
	 * displays the Wheelchair Cushion record specified by WheelchairCushionVo
	 * @param voFamHist
	 */
	private void populateInstanceControl(WheelchairCushionVo voWheelchairCushion) {
		clearInstanceControls();
		
		if(voWheelchairCushion!=null){
			form.getLocalContext().setWheelchairCushionVo(voWheelchairCushion);
			
			if(voWheelchairCushion.getAuthoringDateTimeIsNotNull())
				form.ctnDetails().dtimRecording().setValue(voWheelchairCushion.getAuthoringDateTime());
			if(voWheelchairCushion.getAuthoringCPIsNotNull()){
				form.ctnDetails().qmbAuthoringHCP().newRow(voWheelchairCushion.getAuthoringCP(), voWheelchairCushion.getAuthoringCP().getName().toString());
				form.ctnDetails().qmbAuthoringHCP().setValue(voWheelchairCushion.getAuthoringCP());
			}
			if(voWheelchairCushion.getCushionTypeIsNotNull())
				form.ctnDetails().cmbType().setValue(voWheelchairCushion.getCushionType());
			try {
				onCmbTypeValueChanged();
			} catch (PresentationLogicException e) {
				engine.showMessage("Failed to populate Category combo.");
			}
			//TODO field in BO to be reviewed
			if(voWheelchairCushion.getCushionCategoryIsNotNull())
				form.ctnDetails().cmbCategory().setValue(voWheelchairCushion.getCushionCategory());
			if(voWheelchairCushion.getCoverTypeIsNotNull())
				form.ctnDetails().cmbCoverType().setValue(voWheelchairCushion.getCoverType());
			if(voWheelchairCushion.getCushionSizeIsNotNull())
				form.ctnDetails().cmbCushionSize().setValue(voWheelchairCushion.getCushionSize());
			if(voWheelchairCushion.getStartDateIsNotNull())
				form.ctnDetails().dteStart().setValue(voWheelchairCushion.getStartDate());
			if(voWheelchairCushion.getEndDateIsNotNull())
				form.ctnDetails().dteEnd().setValue(voWheelchairCushion.getEndDate());	
			
			if(voWheelchairCushion.getPressureReadingDateIsNotNull()){
				GenForm.ctnDetailsContainer.gridPressureReadingRow rowPressureReading = null;
				Date[] collPressureReadingDate = voWheelchairCushion.getPressureReadingDate();
				for(int i=0; i<collPressureReadingDate.length; i++){
					rowPressureReading = form.ctnDetails().gridPressureReading().getRows().newRow();
					rowPressureReading.setColDate(collPressureReadingDate[i]);
				}
			}
			
			//marked saved lookup instances as selected or if not found add to grid
			if(voWheelchairCushion.getCushionModificationIsNotNull()){
				GenForm.ctnDetailsContainer.gridModificationsRow rowModifications = null;
				
				boolean lkupFound;
				for(int i=0; i<voWheelchairCushion.getCushionModification().size(); i++){
					WheelchairCushionModification lkupCushionModification = voWheelchairCushion.getCushionModification().get(i);
					lkupFound = false;
					for(int j=0; j<form.ctnDetails().gridModifications().getRows().size(); j++){
						rowModifications = form.ctnDetails().gridModifications().getRows().get(j);
						if(rowModifications.getValue().equals(lkupCushionModification)){
							rowModifications.setColSelected(true);
							lkupFound = true;
						}
					}
					if(!lkupFound){				
						rowModifications = form.ctnDetails().gridModifications().getRows().newRow();
						rowModifications.setColModifications(lkupCushionModification.getText());
						rowModifications.setValue(lkupCushionModification);
					}
				}
			}
			
			//marked saved lookup instances as selected or if not found add to grid
			if(voWheelchairCushion.getCushionAccessoryIsNotNull()){
				GenForm.ctnDetailsContainer.gridAccessoriesRow rowAccessories = null;
				
				boolean lkupFound;
				for(int i=0; i<voWheelchairCushion.getCushionAccessory().size(); i++){
					WheelchairCushionAccessory lkupCushionAccessory = voWheelchairCushion.getCushionAccessory().get(i);
					lkupFound = false;
					for(int j=0; j<form.ctnDetails().gridAccessories().getRows().size(); j++){
						rowAccessories = form.ctnDetails().gridAccessories().getRows().get(j);
						if(rowAccessories.getValue().equals(lkupCushionAccessory)){
							rowAccessories.setColSelected(true);
							lkupFound = true;
						}
					}
					if(!lkupFound){				
						rowAccessories = form.ctnDetails().gridAccessories().getRows().newRow();
						rowAccessories.setColAccessories(lkupCushionAccessory.getText());
						rowAccessories.setValue(lkupCushionAccessory);
					}
				}
			}
			
			form.ctnDetails().setCollapsed(false);
		}
		
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException {
		if (sender.equals(form.grdDetails()))
		{
			if (menuItemID == form.getContextMenus().getLIPNewItem().getID())
				newInstance();
			else if (menuItemID == form.getContextMenus().getLIPUpdateItem().getID())
				updateInstance();
		}
		else if (sender.equals(form.ctnDetails().gridPressureReading())){
			if (menuItemID == form.getContextMenus().getGenericGridAddItem().getID())
				form.ctnDetails().gridPressureReading().getRows().newRow();	
			else if (menuItemID == form.getContextMenus().getGenericGridRemoveItem().getID()){
				form.ctnDetails().gridPressureReading().getRows().remove(form.ctnDetails().gridPressureReading().getSelectedRowIndex());
				form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
			}
		}		
	}
	protected void onCmbTypeValueChanged() throws PresentationLogicException {
		if(form.getMode().equals(FormMode.EDIT))
			form.ctnDetails().cmbCategory().setEnabled(true);	
		form.ctnDetails().cmbCategory().clear();
		
		if(form.ctnDetails().cmbType().getValue()!=null){
			
			WheelchairCushionType lkupWheelchairCushionType = form.ctnDetails().cmbType().getValue();
			ArrayList coll = lkupWheelchairCushionType.getChildInstances();
			WheelchairCushionType type = null;
			for(int i=0;i<coll.size();i++)
			{
				type = (WheelchairCushionType)coll.get(i);
				if(type.isActive())
					form.ctnDetails().cmbCategory().newRow((WheelchairCushionType)coll.get(i), coll.get(i).toString());
			}
		}
	}
	protected void onQmbAuthoringHCPTextSubmited(String value) throws PresentationLogicException {
		form.ctnDetails().qmbAuthoringHCP().clear();
		Hcp filter = new Hcp();
		PersonName name = new PersonName();
		name.setSurname("%" + value + "%");
		filter.setQueryName(name);
		//filter.setHcpType(HcpDisType.MEDICAL);
		
		HcpCollection voHCPColl = domain.listHcps(filter);
		
		if(voHCPColl != null)
		{
			for (int i = 0; i < voHCPColl.size(); i++)
			{
				form.ctnDetails().qmbAuthoringHCP().newRow(voHCPColl.get(i), voHCPColl.get(i).getName().toString());
			}
			if (voHCPColl.size() == 1)
			{
				form.ctnDetails().qmbAuthoringHCP().setValue(voHCPColl.get(0));
			}
			else if (voHCPColl.size() > 1)
			{
				form.ctnDetails().qmbAuthoringHCP().showOpened();		
			}
		}		
	}
	protected void onGridPressureReadingSelectionChanged() throws PresentationLogicException {
		if(form.getMode().equals(FormMode.EDIT))
			form.getContextMenus().getGenericGridRemoveItem().setVisible(true);
	}
}
