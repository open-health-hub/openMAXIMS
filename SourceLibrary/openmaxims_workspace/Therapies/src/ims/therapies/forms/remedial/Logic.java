//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.42 build 2204.20175)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.remedial;

import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.spinalinjuries.vo.lookups.RemedialActivityCollection;
import ims.spinalinjuries.vo.lookups.RemedialLocationCollection;
import ims.spinalinjuries.vo.lookups.RemedialTechnique;
import ims.spinalinjuries.vo.lookups.RemedialTechniqueCollection;
import ims.therapies.forms.remedial.GenForm.ctnRemedialContainer.lyrRemedialLayer.tabDetailsContainer.grdMaterialRow;
import ims.therapies.forms.remedial.GenForm.grdActivityRow;
import ims.therapies.vo.RemedialActivityVo;
import ims.therapies.vo.RemedialActivityVoCollection;
import ims.therapies.vo.RemedialMaterialVo;
import ims.therapies.vo.RemedialMaterialVoCollection;
import ims.therapies.vo.RemedialShortVo;
import ims.therapies.vo.RemedialShortVoCollection;
import ims.therapies.vo.RemedialVo;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws PresentationLogicException
	{
		initialize();	
		open();
	}
	
	private void initialize() throws PresentationLogicException
	{
		form.ctnRemedial().setCollapsed(true);
		form.ctnRemedial().lyrRemedial().tabEmpty().setHeaderVisible(false);
		checkForPopulatedLookups();
	}
	
	private void checkForPopulatedLookups() throws PresentationLogicException
	{
		StringBuffer exceptions = new StringBuffer();		
		RemedialLocationCollection remedialLocationColl = LookupHelper.getRemedialLocation(domain.getLookupService());
		if(remedialLocationColl == null || remedialLocationColl.size() == 0)
		{
			exceptions.append("Please configure RemedialLocation lookup");
			exceptions.append("\n");
		}
		
		RemedialActivityCollection remedialActivityColl = LookupHelper.getRemedialActivity(domain.getLookupService());
		if(remedialActivityColl == null || remedialActivityColl.size() == 0)
		{
			exceptions.append("Please configure RemedialActivity lookup");
			exceptions.append("\n");
		}
		if(exceptions.length() > 0)
			throw new PresentationLogicException(exceptions.toString());
	}

	private void open() 
	{
		clear();
		loadLookupsIntoGrid();
		resetContextVariables();
		
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		{
			populateParentNodes(domain.listRemedialByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));			
		}
									
		form.setMode(FormMode.VIEW);
		reselectUpdatedNode();	
	}

	private void reselectUpdatedNode()
	{
		// Pattern demands that the last updated node is displayed
		if (form.getLocalContext().getUpdatedChildIsNotNull())
		{
			form.grdActivity().setValue(form.getLocalContext().getUpdatedChild());
			getSelectedInstance();
			form.getLocalContext().setUpdatedChild(null);
		}
	}

	private void getSelectedInstance()
	{
		if (form.getMode().equals(FormMode.EDIT)) 
		{
			updateContextMenusState();
			return;
		}		
		
		//expand the selected parent
		if(form.grdActivity().getValue() instanceof RemedialVo)
		{
			populateParentInstanceControls((RemedialVo) form.grdActivity().getValue());
		}
		else if(form.grdActivity().getValue() instanceof RemedialShortVo)
		{									 
			form.getLocalContext().setSelectedParentInstance(getParentFromDomain((RemedialShortVo)form.grdActivity().getValue()));
			populateParentInstanceControls(form.getLocalContext().getSelectedParentInstance());
			populateChildNodes(form.grdActivity().getSelectedRow(),form.getLocalContext().getSelectedParentInstance().getRemedialActivity());
			form.getLocalContext().setSelectedChildInstance(null);
			clearChildInstanceControls();
		}		
		else if(form.grdActivity().getValue() instanceof RemedialActivityVo)
		{
			GenForm.grdActivityRow parentRow = form.grdActivity().getSelectedRow().getParentRow();
			populateParentInstanceControls((RemedialVo) parentRow.getValue());
			form.getLocalContext().setSelectedParentInstance((RemedialVo) parentRow.getValue());
			
			form.getLocalContext().setSelectedChildInstance((RemedialActivityVo) form.grdActivity().getValue());
			populateChildInstanceControls(form.getLocalContext().getSelectedChildInstance());			
		}
 
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(form.getLocalContext().getSelectedParentInstance().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())));
		
		updateControlsState();
	}

	private void populateChildInstanceControls(RemedialActivityVo voRemedialActivity)
	{
		if (voRemedialActivity == null ) return;
		
		form.ctnRemedial().lyrRemedial().tabDetails().cmbActivity().setValue(voRemedialActivity.getActivity());
		form.ctnRemedial().lyrRemedial().tabDetails().cmbPatPosition().setValue(voRemedialActivity.getPatientPosition());
		form.ctnRemedial().lyrRemedial().tabDetails().cmbActPosition().setValue(voRemedialActivity.getActivityPosition());
		form.ctnRemedial().lyrRemedial().tabDetails().cmbSeq().setValue(voRemedialActivity.getSequence());
		form.ctnRemedial().lyrRemedial().tabDetails().intHeight().setValue(voRemedialActivity.getActivityHeight());
		form.ctnRemedial().lyrRemedial().tabDetails().intPause().setValue(voRemedialActivity.getAveragePause());
		form.ctnRemedial().lyrRemedial().tabDetails().intRest().setValue(voRemedialActivity.getRestPeriod());
		form.ctnRemedial().lyrRemedial().tabDetails().txtPauses().setValue(voRemedialActivity.getNumberPauses());
		form.ctnRemedial().lyrRemedial().tabDetails().intDuration().setValue(voRemedialActivity.getDuration());
		form.ctnRemedial().lyrRemedial().tabDetails().cmbIndependence().setValue(voRemedialActivity.getIndependence());
		form.ctnRemedial().lyrRemedial().tabDetails().cmbSubOb().setValue(voRemedialActivity.getSubjectiveObs());

		//Material...
		RemedialMaterialVoCollection collMaterial = voRemedialActivity.getMaterial();
		GenForm.ctnRemedialContainer.lyrRemedialLayer.tabDetailsContainer.grdMaterialRow rowMaterial;
		form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getRows().clear();
		if(collMaterial != null)
		{
			for (int i = 0; i < collMaterial.size(); i++)
			{
				RemedialMaterialVo voMaterial = collMaterial.get(i);
				
				rowMaterial = form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getRows().newRow();
				
				rowMaterial.setColMaterial(voMaterial.getMaterial());
				rowMaterial.setColSizes(voMaterial.getSize());
				rowMaterial.setValue(voMaterial);
			}
		}

		//Technique...
		form.ctnRemedial().lyrRemedial().tabDetails().grdTechnique().getRows().clear();
		loadLookupsIntoGrid();
		RemedialTechniqueCollection colRemedialTech = voRemedialActivity.getTechnique();
		GenForm.ctnRemedialContainer.lyrRemedialLayer.tabDetailsContainer.grdTechniqueRow rowTech;
		if(colRemedialTech != null)
		{
			for (int j = 0; j < colRemedialTech.size(); j++)
			{
				RemedialTechnique techVo = colRemedialTech.get(j);
				int i = 0;
				for (i = 0; i < form.ctnRemedial().lyrRemedial().tabDetails().grdTechnique().getRows().size(); i++)
				{
					rowTech = form.ctnRemedial().lyrRemedial().tabDetails().grdTechnique().getRows().get(i);
					if (rowTech.getValue().getId() == techVo.getId())
					{
						rowTech.setColSelected(true);
						break;
					}
				}
				if (i == form.ctnRemedial().lyrRemedial().tabDetails().grdTechnique().getRows().size())
				{
					rowTech = form.ctnRemedial().lyrRemedial().tabDetails().grdTechnique().getRows().newRow();
					rowTech.setValue(techVo);
					rowTech.setColTechnique(techVo);
					rowTech.setColSelected(true);
				}
			}
		}
		form.getLocalContext().setSelectedChildInstance(voRemedialActivity);
	}

	private void populateParentInstanceControls(RemedialVo voRemedialParent)
	{
		if(voRemedialParent != null)
		{
			form.ctnRemedial().lyrRemedial().tabHeader().dtimAuthoring().setValue(voRemedialParent.getAuthoringDateTime());
			if(voRemedialParent.getAuthoringCPIsNotNull())
				form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().newRow(voRemedialParent.getAuthoringCP(), voRemedialParent.getAuthoringCP().toString());
			form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().setValue(voRemedialParent.getAuthoringCP());
			form.ctnRemedial().lyrRemedial().tabHeader().cmbLocation().setValue(voRemedialParent.getRemedialLocation());
		}
	}

	private RemedialVo getParentFromDomain(RemedialShortVo voRemedialShort)
	{
		return domain.getRemedialVoByClinicalContact(voRemedialShort.getClinicalContact());
	}

	private void updateControlsState()
	{
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) 
				&& form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
				&& form.getLocalContext().getGoldenInstanceFound().booleanValue() == false);

		form.ctnRemedial().setCollapsed(form.getLocalContext().getSelectedParentInstance() == null);						

		if (form.grdActivity().getValue() == null)
			form.ctnRemedial().lyrRemedial().showtabEmpty();

		// The Parent tab
		setParentTabVisability();						

		// The details tab
		setDetailsTabVisibility();		

		// Pick a tab to show
		showHeaderOrDetailsTab();																				

		// The context menus
		updateContextMenusState();
	}

	private void showHeaderOrDetailsTab()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			// In view mode just show the selected node 
			if (form.grdActivity().getValue() instanceof RemedialShortVo)		
				form.ctnRemedial().lyrRemedial().showtabHeader();
			else if(form.grdActivity().getValue() instanceof RemedialVo)
				form.ctnRemedial().lyrRemedial().showtabHeader();
			else if (form.grdActivity().getValue() instanceof RemedialActivityVo)
				form.ctnRemedial().lyrRemedial().showtabDetails();
		}
		else
		{
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.TRUE))
				form.ctnRemedial().lyrRemedial().showtabHeader();
			else
				form.ctnRemedial().lyrRemedial().showtabDetails();
			
			if (form.getLocalContext().getSelectedParentInstanceIsNotNull() && 
					(form.getLocalContext().getSelectedParentInstance().getID_RemedialIsNotNull()))
				enableParentControls(false);		//on update
			else
				enableParentControls(true);			//new record
		}		
	}

	private void enableParentControls(boolean enable)
	{
		form.ctnRemedial().lyrRemedial().tabHeader().dtimAuthoring().setEnabled(enable);
		form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().setEnabled(enable);
	}

	private void setDetailsTabVisibility()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{	  
			form.ctnRemedial().lyrRemedial().tabDetails().setHeaderVisible(form.grdActivity().getValue() instanceof RemedialActivityVo);									
		}
		else
		{			
			form.ctnRemedial().lyrRemedial().tabDetails().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull() && 
					form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE));
			
			setAddApplyCaption();			
		}			

		enableDetailsButtons();
	}

	private void enableDetailsButtons()
	{
		boolean boolVisible = (form.getMode().equals(FormMode.EDIT) &&
				  form.ctnRemedial().lyrRemedial().tabDetails().isHeaderVisible() &&
				  form.getLocalContext().getSelectedChildInstance() == null);

		form.ctnRemedial().lyrRemedial().tabDetails().btnOk().setVisible(boolVisible);
		form.ctnRemedial().lyrRemedial().tabDetails().btnClearActivity().setVisible(boolVisible);
	}

	private void setAddApplyCaption()
	{
		form.ctnRemedial().lyrRemedial().tabDetails().btnOk().setText("Add");
		
		if (form.getLocalContext().getSelectedChildInstance() == null &&
			 (form.grdActivity().getValue() instanceof RemedialActivityVo))
				form.ctnRemedial().lyrRemedial().tabDetails().btnOk().setText("Apply");
	}

	private void setParentTabVisability()
	{
		form.ctnRemedial().lyrRemedial().tabHeader().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull());
	}

	private void populateChildNodes(grdActivityRow parRow, RemedialActivityVoCollection voRemedialActivityColl)
	{
		parRow.getRows().clear();
		
		if (voRemedialActivityColl == null || voRemedialActivityColl.size()<=0) return;		
		
		voRemedialActivityColl.sort();
		for(int i=0; i<voRemedialActivityColl.size(); i++)
		{
			if (parRow != null)
			{
				GenForm.grdActivityRow childRow = parRow.getRows().newRow();
				populateChildNode(childRow, voRemedialActivityColl.get(i));				
			}
		}
		//reselect parent
		parRow.setValue(form.getLocalContext().getSelectedParentInstance());
		form.grdActivity().setValue(parRow.getValue());
		parRow.setExpanded(true);
	}

	private void populateChildNode(grdActivityRow childRow, RemedialActivityVo voRemedialActivity)
	{
		if (voRemedialActivity == null) return;		
		
		if(voRemedialActivity.getActivity() != null)
			childRow.setColActivity(voRemedialActivity.getActivity().toString());
		if(voRemedialActivity.getSequence() != null)
			childRow.setColSequence(voRemedialActivity.getSequence().toString());
		if(voRemedialActivity.getPatientPosition() != null)
			childRow.setColPatientPosition(voRemedialActivity.getPatientPosition().toString());	
		if(voRemedialActivity.getActivityPosition() != null)
			childRow.setColActivityPosition(voRemedialActivity.getActivityPosition().toString());
		if(voRemedialActivity.getDuration() != null)
			childRow.setColDuration(voRemedialActivity.getDuration().toString());
		childRow.setValue(voRemedialActivity);
	
		//if not saved then set the colour
		if(voRemedialActivity.getID_RemedialActivity() == null)
			childRow.setTextColor(Color.Red);		
	}

	private void updateContextMenusState()
	{
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			if(form.getLocalContext().getGoldenInstanceSelected().booleanValue())
			{
				if (form.grdActivity().getValue() instanceof RemedialShortVo)
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);						
				else if (form.grdActivity().getValue() instanceof RemedialActivityVo)
					form.getContextMenus().getGenericGridUpdateItem().setText("Edit Remedial Detail");
				
				form.getContextMenus().getGenericGridAddItem().setText("Add Remedial Detail");			

				form.getContextMenus().getGenericGridUpdateItem().setVisible((form.getMode().equals(FormMode.VIEW)&& 
																			 form.grdActivity().getSelectedRowIndex()>=0 && 
																			 form.grdActivity().getValue() instanceof RemedialActivityVo) ||
																			 (form.getMode().equals(FormMode.EDIT) &&
																			 form.grdActivity().getValue() instanceof RemedialActivityVo &&
																			 ((RemedialActivityVo)form.grdActivity().getValue()).getID_RemedialActivity() == null));	
			
			}
			else
			{
				// If the golden instance has been found but NOT selected hide the context menu's 
				if (form.getLocalContext().getGoldenInstanceFound().booleanValue() == true)
				{
					form.getContextMenus().hideAllGenericGridMenuItems();
					return;
				}
				else
				{
					form.getContextMenus().getGenericGridAddItem().setText("New Remedial Therapy");
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
				}
			}
			
			form.getContextMenus().getHcpGridADDItem().setVisible(form.getMode().equals(FormMode.EDIT));
			form.getContextMenus().getHcpGridREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getSelectedRowIndex() >=0);
					
			form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.VIEW));
			form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) &&
					 form.grdActivity().getValue() instanceof RemedialActivityVo &&
					 ((RemedialActivityVo)form.grdActivity().getValue()).getID_RemedialActivity() == null);
		}
		else
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
		}
	}

	private void populateParentNodes(RemedialShortVoCollection voRemedialColl)
	{
		if (voRemedialColl == null || voRemedialColl.size() <= 0 ) return;
		
		for(int i=0; i<voRemedialColl.size(); i++)
		{
			populateParentNode(voRemedialColl.get(i));			
		}	
	}

	private void populateParentNode(RemedialShortVo voRemedial)
	{
		GenForm.grdActivityRow parRow = form.grdActivity().getRows().newRow();
		parRow.setColActivity(voRemedial.getAuthoringDateTime().toString()+ " - " + 
				voRemedial.getAuthoringCP().toString());
		parRow.setValue(voRemedial);			
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() && voRemedial.getClinicalContact().getID_ClinicalContact().equals
				(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
		{
			form.grdActivity().setValue(voRemedial);			
			expandParentNode(parRow);
		}
	}

	private void expandParentNode(grdActivityRow selectedRow)
	{
		if (selectedRow.getValue() instanceof RemedialShortVo == false ) return;
		
		form.getLocalContext().setSelectedParentInstance(getParentFromDomain((RemedialShortVo) selectedRow.getValue()));		
		if (form.getLocalContext().getSelectedParentInstance() == null ) return; 				

		//RemedialVo voParentInstance = form.getLocalContext().getSelectedParentInstance();	
		//WDEV-15078
		RemedialVo voParentInstance = domain.getRemedial((RemedialShortVo)selectedRow.getValue());
		if(voParentInstance.getClinicalContact().getID_ClinicalContact().equals
									(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
		{
			// If this is the Golden Node then we'll colour it golden (ok then beige).
			form.getLocalContext().setGoldenInstanceFound(new Boolean(true));
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
			selectedRow.setBackColor(Color.Beige);			
		}
		
		if (voParentInstance.getRemedialActivity() != null)  
		{
			selectedRow.setValue(voParentInstance);
			selectedRow.setExpanded(true);
			populateChildNodes(selectedRow, voParentInstance.getRemedialActivity());
		}
		
		populateParentInstanceControls(voParentInstance);		
					
	}

	private void resetContextVariables()
	{
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(false));
		form.getLocalContext().setGoldenInstanceFound(new Boolean(false));
		form.getLocalContext().setUpdatingParent(new Boolean(false));
		form.getLocalContext().setSelectedParentInstance(null);
		form.getLocalContext().setSelectedChildInstance(null);
	}

	private void clear()
	{
		form.grdActivity().getRows().clear();
		form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().setValue(null);
		form.ctnRemedial().lyrRemedial().tabHeader().dtimAuthoring().setValue(null);
		form.ctnRemedial().lyrRemedial().tabHeader().cmbLocation().setValue(null);
		clearChildInstanceControls();
	}

	private void clearChildInstanceControls()
	{
		form.ctnRemedial().lyrRemedial().tabDetails().cmbActivity().setValue(null);
		form.ctnRemedial().lyrRemedial().tabDetails().cmbPatPosition().setValue(null);
		form.ctnRemedial().lyrRemedial().tabDetails().cmbActPosition().setValue(null);
		form.ctnRemedial().lyrRemedial().tabDetails().cmbSeq().setValue(null);
		form.ctnRemedial().lyrRemedial().tabDetails().intHeight().setValue(null);
		form.ctnRemedial().lyrRemedial().tabDetails().intPause().setValue(null);
		form.ctnRemedial().lyrRemedial().tabDetails().intRest().setValue(null);
		form.ctnRemedial().lyrRemedial().tabDetails().txtPauses().setValue(null);
		form.ctnRemedial().lyrRemedial().tabDetails().intDuration().setValue(null);
		form.ctnRemedial().lyrRemedial().tabDetails().cmbIndependence().setValue(null);
		form.ctnRemedial().lyrRemedial().tabDetails().cmbSubOb().setValue(null);

		form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getRows().clear();
		form.ctnRemedial().lyrRemedial().tabDetails().grdTechnique().getRows().clear();
	}

	protected void onBtnOkActivityClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addOrUpdateChild();
		//WDEV-15257
		if(form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().getValue()==null)
		{
			engine.showMessage("'Authoring HCP' is a mandatory field.");
		}
		
		//WDEV-15258
		if(form.ctnRemedial().lyrRemedial().tabHeader().dtimAuthoring().getValue()==null)
		{
			engine.showMessage("'Authoring Date/Time' is a mandatory field.");
		}
	}
	
	private boolean addOrUpdateChild()
	{
		if (form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))			
			if(!newParentNode(form.getLocalContext().getSelectedParentInstance()))
				return false;				
				
		RemedialActivityVo voRemedialActivity = form.getLocalContext().getSelectedChildInstance();
		
		if (voRemedialActivity == null)
			voRemedialActivity = new RemedialActivityVo(); 

		populateChildInstanceData(voRemedialActivity);

		if (form.grdActivity().getValue() instanceof RemedialActivityVo && form.getLocalContext().getSelectedChildInstanceIsNotNull())
		{
			promoteUpdatedChild(voRemedialActivity);
			newChildInstance();
			updateControlsState();
		}
		else
		{
			if(newChildNode(voRemedialActivity))
				return true;
		}
		return false;		
	}

	private boolean newChildNode(RemedialActivityVo voRemedialActivity)
	{
		if (form.getLocalContext().getSelectedChildInstance() != null) return true;
		
		if (voRemedialActivity.countFieldsWithValue() >= 1)
		{
			String strErrors[] = voRemedialActivity.validate();
		
			if(strErrors != null && strErrors.length > 0)
			{
				engine.showErrors(strErrors);
				return true;
			}
	 				
			promoteChild(voRemedialActivity);			
			clearChildInstanceControls();
			loadLookupsIntoGrid();
		}
		return false;
	}

	private void promoteChild(RemedialActivityVo voRemedialActivity)
	{
		if (voRemedialActivity == null) return;
		GenForm.grdActivityRow childRow = null; 
		form.grdActivity().setValue(form.getLocalContext().getSelectedParentInstance());
		if(form.grdActivity().getValue() != null)
		{
			if(form.grdActivity().getSelectedRow().getValue() instanceof RemedialActivityVo)
				childRow = form.grdActivity().getSelectedRow().getParentRow().getRows().newRow();
			else
				childRow = form.grdActivity().getSelectedRow().getRows().newRow();
		}
		populateChildNode(childRow, voRemedialActivity);	
	}

	private void newChildInstance()
	{
		clearChildInstanceControls();
		loadLookupsIntoGrid();
		form.getLocalContext().setSelectedChildInstance(null);
		form.grdActivity().setValue(form.grdActivity().getSelectedRow().getParentRow().getValue());
	}

	private void promoteUpdatedChild(RemedialActivityVo voRemedialActivity)
	{
		if (voRemedialActivity == null) return;
		form.grdActivity().setValue(form.getLocalContext().getSelectedChildInstance());
		populateChildNode(form.grdActivity().getSelectedRow(),voRemedialActivity);	
	}
	
	//WDEV-15078
	private RemedialActivityVo populateChildInstanceData(RemedialActivityVo voRemedialDetails)
	{
		voRemedialDetails.setActivity(form.ctnRemedial().lyrRemedial().tabDetails().cmbActivity().getValue());
		voRemedialDetails.setPatientPosition(form.ctnRemedial().lyrRemedial().tabDetails().cmbPatPosition().getValue());
		voRemedialDetails.setActivityPosition(form.ctnRemedial().lyrRemedial().tabDetails().cmbActPosition().getValue());
		voRemedialDetails.setSequence(form.ctnRemedial().lyrRemedial().tabDetails().cmbSeq().getValue());
		voRemedialDetails.setActivityHeight(form.ctnRemedial().lyrRemedial().tabDetails().intHeight().getValue());
		voRemedialDetails.setAveragePause(form.ctnRemedial().lyrRemedial().tabDetails().intPause().getValue());
		voRemedialDetails.setRestPeriod(form.ctnRemedial().lyrRemedial().tabDetails().intRest().getValue());
		voRemedialDetails.setNumberPauses(form.ctnRemedial().lyrRemedial().tabDetails().txtPauses().getValue());
		voRemedialDetails.setDuration(form.ctnRemedial().lyrRemedial().tabDetails().intDuration().getValue());
		voRemedialDetails.setIndependence(form.ctnRemedial().lyrRemedial().tabDetails().cmbIndependence().getValue());
		voRemedialDetails.setSubjectiveObs(form.ctnRemedial().lyrRemedial().tabDetails().cmbSubOb().getValue());
		
		//Material...
		RemedialMaterialVoCollection collMaterial = null;

		GenForm.ctnRemedialContainer.lyrRemedialLayer.tabDetailsContainer.grdMaterialRow rowMaterial;
		for (int i = 0; i < form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getRows().size(); i++)
		{
			rowMaterial = form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getRows().get(i);
			
			if (rowMaterial.getColMaterial() == null)
			{
				//engine.showMessage("Please enter a value for Material in all rows in the grid and save again.");
				return null;//WDEV-15078
			}

			RemedialMaterialVo voMaterial = null;
			voMaterial = rowMaterial.getValue();
			if (voMaterial == null)
				voMaterial = new RemedialMaterialVo();
			
			voMaterial.setMaterial(rowMaterial.getColMaterial());
			voMaterial.setSize(rowMaterial.getColSizes());

			if(collMaterial == null)
				collMaterial = new RemedialMaterialVoCollection();
			
			collMaterial.add(voMaterial);
		}
		voRemedialDetails.setMaterial(collMaterial);		

		//Technique...
		RemedialTechniqueCollection colRemedialTech = null;
		GenForm.ctnRemedialContainer.lyrRemedialLayer.tabDetailsContainer.grdTechniqueRow rowTech;
		for (int i = 0; i < form.ctnRemedial().lyrRemedial().tabDetails().grdTechnique().getRows().size(); i++)
		{
			rowTech = form.ctnRemedial().lyrRemedial().tabDetails().grdTechnique().getRows().get(i);
			if (rowTech.getColSelected())
			{
				if(colRemedialTech == null)
					colRemedialTech = new RemedialTechniqueCollection();
				
				colRemedialTech.add(rowTech.getValue());
			}
		}
		voRemedialDetails.setTechnique(colRemedialTech);
		return voRemedialDetails;//WDEV-15078
	}

	private boolean newParentNode(RemedialVo voNewParent)
	{
		if (voNewParent == null) return true;
		
		if(form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().getValue()==null || form.ctnRemedial().lyrRemedial().tabHeader().dtimAuthoring().getValue()==null)
		{
			return false;
		}
		
		RemedialShortVo voParentShort = new RemedialShortVo();
		voParentShort.setAuthoringCP(form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().getValue());
		voParentShort.setAuthoringDateTime(form.ctnRemedial().lyrRemedial().tabHeader().dtimAuthoring().getValue());
		voParentShort.setClinicalContact(voNewParent.getClinicalContact());
		
		GenForm.grdActivityRow parentRow = form.grdActivity().getRows().newRow();			
		parentRow.setColActivity(voParentShort.getAuthoringDateTime().toString()+ " - " + 
							   voParentShort.getAuthoringCP().toString());			
		parentRow.setValue(voParentShort);
		parentRow.setBackColor(Color.Beige);
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
		parentRow.setExpanded(true);
		form.grdActivity().setValue(voParentShort);	
		return true;
	}

	protected void onBtnCancelActivityClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearChildInstanceControls();
		loadLookupsIntoGrid();
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	
	private boolean save()
	{	
		if(checkForUnsavedChild())
			return false;
		RemedialVo voRemedial = populateInstanceData(form.getLocalContext().getSelectedParentInstance());
		
		//WDEV-15078
		if (voRemedial.getID_Remedial()==null && domain.existRemedialForClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact()))
		{
			engine.showMessage("A Remedial Therapy record already exists for this SOAP clinical contact. ");
			open();
			return false;
		}
		
		if (voRemedial.getClinicalContact() == null)
			voRemedial.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
		String[] messages = voRemedial.validate(validateUIRules());
		if (messages != null)
		{
			engine.showErrors(messages);
			return false;
		}		
		
		try
		{
			form.getLocalContext().setSelectedParentInstance(domain.saveRemedialVo(voRemedial));
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;				
		}
		/*
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("A Remedial Therapy record already exists for this SOAP clinical contact. " + e.getMessage());
			open();
			return false;
		}
		*/
		setUpdatedChild();
		return true;
	}

	private String[] validateUIRules()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		
		for (int i = 0; i < form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getRows().size(); i++)
		{
			grdMaterialRow rowMaterial = form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getRows().get(i);
			
			if (rowMaterial.getColMaterial() == null)
			{
				errorList.add("Please enter a value for Material in all rows in the grid and save again.");
				break;
			}
		}
		
		return errorList.toArray(new String[errorList.size()]);
	}

	private RemedialVo populateInstanceData(RemedialVo voRemedial)
	{
		if (voRemedial == null)
			voRemedial = new RemedialVo();
				
		populateParentInstanceData(voRemedial);						

		if (form.getLocalContext().getSelectedChildInstance() == null)
		{
			populateChildCollectionFromGrid(voRemedial);			
		}
		else 		// Update child instance.
		{
			RemedialActivityVo voRemedialActivity = form.getLocalContext().getSelectedChildInstance();
			voRemedialActivity=populateChildInstanceData(voRemedialActivity);//WDEV-15078
			form.getLocalContext().setSelectedChildInstance(voRemedialActivity);
			
			for (int i=0; i < voRemedial.getRemedialActivity().size(); i++)
			{
				if (voRemedial.getRemedialActivity().get(i).getID_RemedialActivity().equals(form.getLocalContext().getSelectedChildInstance().getID_RemedialActivity()))//WDEV-15078
				{						
					voRemedial.getRemedialActivity().set(i, form.getLocalContext().getSelectedChildInstance());
				}
			}								
		}
		return voRemedial;
	}

	private void populateChildCollectionFromGrid(RemedialVo voRemedial)
	{
		if (form.grdActivity().getValue() == null) return;

		if (voRemedial.getRemedialActivity() == null)
			voRemedial.setRemedialActivity(new RemedialActivityVoCollection());
		
		GenForm.grdActivityRow parentRow = form.grdActivity().getValue() instanceof RemedialShortVo || form.grdActivity().getValue() instanceof RemedialVo ? 
										    form.grdActivity().getSelectedRow() : form.grdActivity().getSelectedRow().getParentRow();		
		
        if (parentRow.getRows().size() > 0 )
        	voRemedial.getRemedialActivity().clear();
										    
		for (int i=0; i < parentRow.getRows().size(); i++)
        {
			voRemedial.getRemedialActivity().add((RemedialActivityVo) parentRow.getRows().get(i).getValue());
        }
	}

	private void populateParentInstanceData(RemedialVo voRemedial)
	{
		voRemedial.setAuthoringCP(form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().getValue());
		voRemedial.setAuthoringDateTime(form.ctnRemedial().lyrRemedial().tabHeader().dtimAuthoring().getValue());		
		voRemedial.setRemedialLocation(form.ctnRemedial().lyrRemedial().tabHeader().cmbLocation().getValue());
	}

	private boolean checkForUnsavedChild()
	{
		if (form.getLocalContext().getSelectedChildInstance() == null)
		{				
			if(addOrUpdateChild())
				return true;
		}
		return false;
	}

	private void setUpdatedChild()
	{
		if (form.grdActivity().getValue() instanceof RemedialActivityVo)		
		{
			form.getLocalContext().setUpdatedChild((RemedialActivityVo) form.grdActivity().getValue());
		}
		else
		{
			// Find the most recently added child
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE))
			{
				form.getLocalContext().getSelectedParentInstance().getRemedialActivity().sort();
				form.getLocalContext().setUpdatedChild(
						form.getLocalContext().getSelectedParentInstance().getRemedialActivity().get(
								form.getLocalContext().getSelectedParentInstance().getRemedialActivity().size() - 1));
			}
		}
	}

	protected void onGrdActivitySelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		getSelectedInstance();
	}
	
	private void materialGridRemove() 
	{
		if (form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getSelectedRowIndex() >= 0)
			form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getRows().remove(form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getSelectedRowIndex());
		updateContextMenusState(); //WDEV-15257
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		if(sender.equals(form.grdActivity()))
		{
			switch(menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add:
					newInstance();
					break;
				case GenForm.ContextMenus.GenericGrid.Update:
					updateInstance();
					break;
				case GenForm.ContextMenus.GenericGrid.Remove:
					removeInstance();
			}
		}

		if(sender.equals(form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial()))
		{
			switch(menuItemID)
			{
				case GenForm.ContextMenus.HcpGrid.ADD:
					form.ctnRemedial().lyrRemedial().tabDetails().grdMaterial().getRows().newRow();
					break;
				case GenForm.ContextMenus.HcpGrid.REMOVE:
					materialGridRemove();
					break;
			}
		}
	}

	private void removeInstance()
	{
		RemedialShortVo voParentShort = null;
		RemedialVo voParent = null;
		
		if(form.grdActivity().getSelectedRow().getParentRow().getValue() instanceof RemedialShortVo)
		{
			voParentShort = (RemedialShortVo) form.grdActivity().getSelectedRow().getParentRow().getValue();
			form.grdActivity().removeSelectedRow();
			form.grdActivity().setValue(voParentShort);
		}
		else
		{
			voParent = (RemedialVo) form.grdActivity().getSelectedRow().getParentRow().getValue();
			form.grdActivity().removeSelectedRow();
			form.grdActivity().setValue(voParent);
		}
		
		updateContextMenusState();
	}

	private void updateInstance()
	{
		form.getLocalContext().setUpdatingParent(new Boolean(form.grdActivity().getValue() instanceof RemedialShortVo));
		form.setMode(FormMode.EDIT);
		if (form.grdActivity().getValue() instanceof RemedialActivityVo)			
		{
			RemedialActivityVo voCachedChild =  (RemedialActivityVo) form.grdActivity().getValue(); 
			if ( voCachedChild.getID_RemedialActivity() == null)
			{
				populateChildInstanceControls(voCachedChild);
			}			
		}
	}

	private void newInstance()
	{
		if (form.grdActivity().getValue() == null || ((form.getLocalContext().getSelectedParentInstanceIsNotNull() 
				&& form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))))
		{
			newParentInstance();			
		}

		// New instance has been invoked with a child node selected.
		if (form.grdActivity().getValue() instanceof RemedialActivityVo)
		{
			newChildInstance();
		}
		
		form.setMode(FormMode.EDIT);
	}

	private void newParentInstance()
	{
		RemedialVo voNewParent = new RemedialVo(); 
		Hcp voHcp = (Hcp) domain.getHcpUser();
		if(voHcp != null)
			voNewParent.setAuthoringCP(voHcp);

		voNewParent.setAuthoringDateTime(new DateTime());
		voNewParent.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voNewParent.setRemedialActivity(new RemedialActivityVoCollection());
		populateParentInstanceControls(voNewParent);		
		form.getLocalContext().setSelectedParentInstance(voNewParent);	
	}

	private void loadLookupsIntoGrid() 
	{
		//Technique...
		GenForm.ctnRemedialContainer.lyrRemedialLayer.tabDetailsContainer.grdTechniqueRow rowTech = null;
		RemedialTechniqueCollection colTech = LookupHelper.getRemedialTechnique(domain.getLookupService());
		for (int i = 0; i < colTech.size(); i++)
		{
			RemedialTechnique instTech = colTech.get(i);
			rowTech = form.ctnRemedial().lyrRemedial().tabDetails().grdTechnique().getRows().newRow();
			rowTech.setValue(instTech);
			rowTech.setColTechnique(instTech);	
		}
	}
	
	protected void onQmbAuthoringCPTextSubmited(String value) throws PresentationLogicException 
	{
		form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		
		HcpCollection coll = domain.listHCPs(filter);
		for (int i = 0; i < coll.size(); i++)
		{
			Hcp med = coll.get(i);
			form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().newRow(med, med.toString());			
		}
		if (coll.size() == 1)
		{
			form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.ctnRemedial().lyrRemedial().tabHeader().qmbAuthoringHCP().showOpened();		
		}		
	}

	protected void onGrdMaterialSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenusState();
	}

	protected void onFormModeChanged() 
	{
		updateControlsState();	
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}
}
