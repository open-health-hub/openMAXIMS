//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.39 build 2174.26977)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.educationtocarer;

import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.therapies.vo.EducationToCarersVo;
import ims.therapies.vo.EducationToCarersVoCollection;
import ims.framework.utils.DateTime;
import ims.framework.exceptions.FormOpenException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedRecord(null);
		open();	
	}
	/**
	 * populates the data to be stored from the screen into specified FamilyHistoryVo 
	 * @return      void
	 */
	public EducationToCarersVo populateInstanceData()	
	{
		EducationToCarersVo voEduc = form.getLocalContext().getSelectedRecord();
		
		if (voEduc == null)
			voEduc = new EducationToCarersVo();
		
		voEduc.setAuthoringCP(form.ctnEducateToCarers().qmbAuthoringCP().getValue());
		if(form.ctnEducateToCarers().dateAuthoringDateTime().getValue()!=null)
			voEduc.setAuthoringDateTime(new DateTime(form.ctnEducateToCarers().dateAuthoringDateTime().getValue()));
		else
			voEduc.setAuthoringDateTime(null);
		voEduc.setCarer(form.ctnEducateToCarers().cboBoxCarer().getValue());
		voEduc.setDetails(form.ctnEducateToCarers().textBoxDetails().getValue());
		
		if (!voEduc.getClinicalContactIsNotNull())
			voEduc.setClinicalContact(form.getLocalContext().getClinicalContactShort());
		
		return voEduc;
	}
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	protected void onQmbAuthoringCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnEducateToCarers().qmbAuthoringCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname("%" + value + "%");
		filter.setQueryName(name);
		
		HcpCollection coll = domain.listHCPs(filter);
		if(coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				Hcp med = coll.get(i);
				form.ctnEducateToCarers().qmbAuthoringCP().newRow(med, med.toString());			
			}
			if (coll.size() == 1)
			{
				form.ctnEducateToCarers().qmbAuthoringCP().setValue(coll.get(0));
			}
			else if (coll.size() > 1)
			{
				form.ctnEducateToCarers().qmbAuthoringCP().showOpened();		
			}		
		}
	}
	/* (non-Javadoc)
	 * @see ims.therapies.forms.educationtocarer.Handlers#onContextMenuItemClick(int, ims.framework.Control)
	 */
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		if (menuItemID == form.getContextMenus().getLIPNewItem().getID())
			newInstance();
		else if (menuItemID == form.getContextMenus().getLIPUpdateItem().getID())
			updateInstance();				
	}
	protected void setAuthoringDetails()
	{
		form.ctnEducateToCarers().qmbAuthoringCP().setValue(null);

		Hcp hcp = (Hcp) domain.getHcpUser();
		if(hcp != null)
		{
			form.ctnEducateToCarers().qmbAuthoringCP().newRow(hcp, hcp.toString());
			form.ctnEducateToCarers().qmbAuthoringCP().setValue(hcp);
		}
		
		form.ctnEducateToCarers().dateAuthoringDateTime().setValue(new DateTime().getDate());		
	}	
	/* (non-Javadoc)
	 * @see ims.therapies.forms.educationtocarer.Handlers#onGridDetailsSelectionChanged()
	 */
	protected void onGridDetailsSelectionChanged() throws PresentationLogicException 
	{
		//Display Panel and detail
		form.getLocalContext().setSelectedRecord(form.grdList().getValue());
		populateInstanceControl(form.grdList().getValue());
		updateControlsState();	
	}
	/* (non-Javadoc)
	 * @see ims.therapies.forms.educationtocarer.Handlers#onBCancelClick()
	 */
	protected void onBCancelClick() throws PresentationLogicException 
	{
		open();
	}
	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		updateInstance();
	}
	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}	
	protected void onFormModeChanged()
	{
		updateControlsState(); 
	}
	/**
	 * clear controls used for displaying instance data
	 * @return void 
	 */		
	public void clearInstanceControls() 
	{
		this.form.ctnEducateToCarers().dateAuthoringDateTime().setValue(null);
		this.form.ctnEducateToCarers().qmbAuthoringCP().setValue(null);
		this.form.ctnEducateToCarers().cboBoxCarer().setValue(null);
		this.form.ctnEducateToCarers().textBoxDetails().setValue(null);
	}
	public void newInstance() throws PresentationLogicException
	{
		if (allowNew())
		{
			// initalise the screen for a new record
			form.getLocalContext().setSelectedRecord(new EducationToCarersVo());
			clearInstanceControls();
			setAuthoringDetails();
			//set the form mode
			form.setMode(FormMode.EDIT);
			//set any control status specific this form			
		}
	}
	public boolean save() throws PresentationLogicException
	{
		EducationToCarersVo voEdCar = populateInstanceData();
		
		//set clinical contact
		if (!voEdCar.getClinicalContactIsNotNull())
			voEdCar.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

		if (!voEdCar.getCareContextIsNotNull())
			voEdCar.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				
		//validate Vo
		String[] arrErrors =  voEdCar.validate(validateUIRules());	
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedRecord(domain.saveEducationToCarer(voEdCar));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}
	public void updateControlsState()
	{
		//TODO: will be set as default to New. remove the "New " when this is complete.
		form.getContextMenus().getLIPNewItem().setText("New");

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.ctnEducateToCarers().setCollapsed(false);
			form.getContextMenus().getLIPNewItem().setVisible(false);
			form.getContextMenus().getLIPUpdateItem().setVisible(false);
			form.btnUpdate().setVisible(false);			
		}
		else
		{
			if (form.grdList().getSelectedRowIndex()>=0)
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.getContextMenus().getLIPUpdateItem().setVisible(true);
				if (form.grdList().getSelectedRowIndex()>=0)
					form.btnUpdate().setVisible(true);
				else
					form.btnUpdate().setVisible(false);
			}
			else
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.getContextMenus().getLIPUpdateItem().setVisible(false);
				form.btnUpdate().setVisible(false);
			}
		}
	}
	public void updateInstance()
	{
		if (allowUpdate())
			form.setMode(FormMode.EDIT);	
	}
	public void open() throws PresentationLogicException
	{
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			populateListControl(domain.listEduTocCarerForCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		
		//set selection back
		if (form.getLocalContext().getSelectedRecordIsNotNull())
		{
			//need to get timestamp from record retrieved from List call.
			GenForm.grdListRow row = form.grdList().getRowByValue(form.getLocalContext().getSelectedRecord());
			if (row != null && row.getValue() != null)
			{			
				form.getLocalContext().setSelectedRecord(row.getValue());
				form.grdList().setValue(form.getLocalContext().getSelectedRecord());
				populateInstanceControl(form.grdList().getValue());
			}
			else
				clearInstanceControls();

			updateControlsState();			
		}
		else		
			form.ctnEducateToCarers().setCollapsed(true);
		
		form.setMode(FormMode.VIEW);
	}
	/**
	 * checks before allowing an update
	 * @return void 
	 */	
	public boolean allowUpdate()
	{
		return (form.getLocalContext().getSelectedRecordIsNotNull()); 
	}
	/**
	 * clear list and instance controls
	 * @return void 
	 */		
	public void clear()
	{
		form.grdList().getRows().clear();
		clearInstanceControls();
	}
	/**
	 * 
	 * @return void 
	 */	
	public void initialize() throws FormOpenException
	{		
	}
	/**
	 * displays the Family History record specified by FamilyHistoryVo
	 * @param voFamHist
	 */
	public void populateInstanceControl(EducationToCarersVo voEduCar)
	{
		clearInstanceControls();
		
		if (voEduCar != null)
		{
			form.ctnEducateToCarers().dateAuthoringDateTime().setValue(voEduCar.getAuthoringDateTimeIsNotNull()?voEduCar.getAuthoringDateTime().getDate():null);
			form.ctnEducateToCarers().qmbAuthoringCP().clear();
			if (voEduCar.getAuthoringCPIsNotNull())
			{
				form.ctnEducateToCarers().qmbAuthoringCP().newRow(voEduCar.getAuthoringCP(), voEduCar.getAuthoringCP().toString());
				form.ctnEducateToCarers().qmbAuthoringCP().setValue(voEduCar.getAuthoringCP());
			}
			form.ctnEducateToCarers().cboBoxCarer().setValue(voEduCar.getCarer());
			form.ctnEducateToCarers().textBoxDetails().setValue(voEduCar.getDetails());
			form.ctnEducateToCarers().setCollapsed(false);
		}
	}	
	/**
	 * populates the screen from data from specified FamilyHistoryVoCollection
	 * @param voCollFamHist 
	 * @return      void
	 */
	public void populateListControl(EducationToCarersVoCollection voCollEduCar)
	{	
		clear();
		
		if (voCollEduCar != null)
		{
			GenForm.grdListRow row;
			for (int i =0; i < voCollEduCar.size();i++)
			{
				row = form.grdList().getRows().newRow();
				
				row.setValue(voCollEduCar.get(i));				
				row.setColDate(voCollEduCar.get(i).getAuthoringDateTimeIsNotNull()?voCollEduCar.get(i).getAuthoringDateTime().getDate():null);			
				row.setColHCP(voCollEduCar.get(i).getAuthoringCPIsNotNull()?voCollEduCar.get(i).getAuthoringCP().toString():"");
				row.setColCarer(voCollEduCar.get(i).getCarer());
				row.setColDetails(voCollEduCar.get(i).getDetails());
			}
		}
	}		
}
