//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.39 build 2173.29356)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.adaptations;

import ims.framework.Control;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.therapies.vo.AdaptationsVoCollection;
import ims.therapies.vo.AdaptationsVo;
import ims.domain.exceptions.StaleObjectException;
import ims.spinalinjuries.vo.lookups.Adaptation;

public class Logic extends BaseLogic
{
	public void updateControlsState()
	{
		form.getContextMenus().getLIPNewItem().setText("New");

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().getLIPNewItem().setVisible(false);
			form.getContextMenus().getLIPUpdateItem().setVisible(false);
			form.btnUpdate().setVisible(false);			
		}
		else
		{
			if (form.grdList().getSelectedRowIndex()>=0)
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.getContextMenus().getLIPUpdateItem().setVisible(true);
				if (form.grdList().getSelectedRowIndex()>=0)
					form.btnUpdate().setVisible(true);
				else
					form.btnUpdate().setVisible(false);
			}
			else
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.getContextMenus().getLIPUpdateItem().setVisible(false);
				form.btnUpdate().setVisible(false);
			}
		}
	}
	public void clearInstanceControls()
	{
		this.form.ctnDetail().comboBoxAdapt1().setValue(null);
		this.form.ctnDetail().comboBoxAdapt2().setValue(null);
		this.form.ctnDetail().comboBoxFunded().setValue(null);
		this.form.ctnDetail().comboBoxLoan().setValue(null);
		this.form.ctnDetail().comboBoxSuppliedFor().setValue(null);
		this.form.ctnDetail().comboBoxSupplier().setValue(null);
		this.form.ctnDetail().dateRequired().setValue(null);
		this.form.ctnDetail().dateSupplied().setValue(null);		
	}	
	/**
	 * populates the screen from data returned from domain call
	 * <p>
	 * @return      void
	 */
	protected void populateListControl(AdaptationsVoCollection voCollAdaptation)
	{
		clear();
		if (voCollAdaptation != null)
		{
			GenForm.grdListRow row = null;	
			GenForm.grdListRow rowChild = null;
			AdaptationsVo voAdaptation = null;
			AdaptationsVo vogrdAdaptation = null;
			
			for (int i =0; i < voCollAdaptation.size();i++)
			{						
				voAdaptation = voCollAdaptation.get(i);
				rowChild = null;
				//search for category
				for(int j=0;j<form.grdList().getRows().size();j++)
				{

					vogrdAdaptation = (AdaptationsVo)form.grdList().getRows().get(j).getValue();
					if ((vogrdAdaptation != null) && (vogrdAdaptation.getItemCategory().equals(voAdaptation.getItemCategory())))
					{
						//found category
						rowChild = form.grdList().getRows().get(j).getRows().newRow();
						break;
					}
				}
				
				if (rowChild == null)
				{
					row = form.grdList().getRows().newRow();
					
					if (voAdaptation.getItemCategoryIsNotNull())					
						row.setColAdaptations(voAdaptation.getItemCategory().getIItemText());
					
					row.setExpanded(true);
					row.setSelectable(false);
					row.setValue(voAdaptation);
					row.setSelectable(false);
					
					rowChild = row.getRows().newRow();							
				}

				rowChild.setColAdaptations(voAdaptation.getItemTypeIsNotNull()?voAdaptation.getItemType().getIItemText():"");		
				rowChild.setColSupplier(voAdaptation.getSupplier());
				rowChild.setColDateRequired(voAdaptation.getDateRequired());
				rowChild.setColDateSupplied(voAdaptation.getDateSupplied());
				rowChild.setColSuppliedfor(voAdaptation.getSuppliedFor());					
				rowChild.setColLoan(voAdaptation.getLoan());					
				rowChild.setColFundedby(voAdaptation.getFundedByIsNotNull()?voAdaptation.getFundedBy().getIItemText():"");									
				rowChild.setValue(voAdaptation);
				rowChild.setSelectable(true);
							
			}
		}
	}

	protected void loadAdaptationCategories()
	{
		TreeNode[] coll = ims.spinalinjuries.vo.lookups.LookupHelper.getAdaptation(domain.getLookupService()).getRootNodes();
		
		this.form.ctnDetail().comboBoxAdapt1().clear();
		
		if(coll != null)
		{
			for(int i=0;i<coll.length;i++)
			{
				Adaptation item = (Adaptation)coll[i];
				if(item.isActive())
					form.ctnDetail().comboBoxAdapt1().newRow(item, item.getText());
			}
		}		
	}
	
	/**
	 * populates the data to be stored from the screen into local context selected record
	 * @return      void
	 */
	public AdaptationsVo populateInstanceData()
	{
		AdaptationsVo voAdaptation = form.getLocalContext().getSelectedRecord();
		
		if (voAdaptation == null)
			voAdaptation = new AdaptationsVo();
		
		voAdaptation.setDateRequired(form.ctnDetail().dateRequired().getValue());
		voAdaptation.setDateSupplied(form.ctnDetail().dateSupplied().getValue());
		voAdaptation.setFundedBy(form.ctnDetail().comboBoxFunded().getValue());
		voAdaptation.setItemCategory(form.ctnDetail().comboBoxAdapt1().getValue());
		voAdaptation.setItemType(form.ctnDetail().comboBoxAdapt2().getValue());
		voAdaptation.setLoan(form.ctnDetail().comboBoxLoan().getValue());
		voAdaptation.setSuppliedFor(form.ctnDetail().comboBoxSuppliedFor().getValue());
		voAdaptation.setSupplier(form.ctnDetail().comboBoxSupplier().getValue());
		
		if (!voAdaptation.getClinicalContactIsNotNull())
			voAdaptation.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		return voAdaptation;
	}
	
	/**
	 * displays the Family History record specified by FamilyHistoryVo
	 * @param voFamHist
	 */
	public void populateInstanceControl(ims.vo.ValueObject refVo)
	{
		clearInstanceControls();
		
		if (refVo != null)
		{
			AdaptationsVo voAdaptation = (AdaptationsVo)refVo;
			
			if (voAdaptation.getItemCategoryIsNotNull())
			{
				//if (form.ctnDetail().comboBoxAdapt1().size() == 0)
				form.ctnDetail().comboBoxAdapt1().newRow(voAdaptation.getItemCategory(),voAdaptation.getItemCategory().toString());
				form.ctnDetail().comboBoxAdapt1().setValue(voAdaptation.getItemCategory());
				
				//loadChildAdaptations();
				if(voAdaptation.getItemType() != null)
					form.ctnDetail().comboBoxAdapt2().newRow(voAdaptation.getItemType(), voAdaptation.getItemType().toString());
				form.ctnDetail().comboBoxAdapt2().setValue(voAdaptation.getItemType());
			}
			else
				form.ctnDetail().comboBoxAdapt1().clear();
			
			form.ctnDetail().comboBoxSupplier().setValue(voAdaptation.getSupplierIsNotNull() ? voAdaptation.getSupplier(): null);
			
			form.ctnDetail().dateRequired().setValue(voAdaptation.getDateRequiredIsNotNull() ? voAdaptation.getDateRequired() : null);
			
			form.ctnDetail().dateSupplied().setValue(voAdaptation.getDateSuppliedIsNotNull() ? voAdaptation.getDateSupplied() : null);
			
			form.ctnDetail().comboBoxSuppliedFor().setValue(voAdaptation.getSuppliedForIsNotNull() ? voAdaptation.getSuppliedFor() : null);
			
			form.ctnDetail().comboBoxLoan().setValue(voAdaptation.getLoanIsNotNull() ? voAdaptation.getLoan(): null);
			
			form.ctnDetail().comboBoxFunded().setValue(voAdaptation.getFundedByIsNotNull() ? voAdaptation.getFundedBy(): null);
			
			form.getLocalContext().setSelectedRecord(voAdaptation);
			
			form.grdList().setValue(form.getLocalContext().getSelectedRecord());
			
			form.ctnDetail().setCollapsed(false);
		}
	}	

	/**
	 * checks before allowing an new record to be created
	 * @return void 
	 */		
	public boolean allowNew()
	{
		return true;		
	}
	/**
	 * checks before allowing an update
	 * @return void 
	 */	
	public boolean allowUpdate()
	{
		return (form.getLocalContext().getSelectedRecordIsNotNull()); 
	}
	/**
	 * clear list and instance controls
	 * @return void 
	 */		
	public void clear()
	{
		form.grdList().getRows().clear();
		clearInstanceControls();
	}
	public boolean save() throws PresentationLogicException
	{
		AdaptationsVo voAdaptation = populateInstanceData();
		
		//set clinical contact
		if (!voAdaptation.getClinicalContactIsNotNull())
			voAdaptation.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		voAdaptation.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				
		//validate Vo
		String[] arrErrors =  voAdaptation.validate(validateUIRules());	
		
		if(arrErrors != null)
		{
			arrErrors = SearchErrS(arrErrors);
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedRecord(domain.save(voAdaptation));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}
	private String[] SearchErrS(String[] arg)
	{
		for(int i = 0;i<arg.length;i++)
		{
			if(arg[i] == "ItemCategory is mandatory")
				arg[i] = "Adaptation is mandatory";
		}
		return arg;
	}
	/**
	 * 
	 * @return void 
	 */	
	public void initialize() throws FormOpenException
	{
		if (ims.spinalinjuries.vo.lookups.LookupHelper.getAdaptation(domain.getLookupService()).size() == 0)
			throw new FormOpenException("The Adaptation lookup must first be populated before this form can be used. ");	
		
		form.getLocalContext().setSelectedRecord(null);
	}
	public void newInstance() throws PresentationLogicException
	{
		if (allowNew())
		{
			// initalise the screen for a new record
			form.getLocalContext().setSelectedRecord(new AdaptationsVo());
			clearInstanceControls();
			loadAdaptationCategories();
			form.ctnDetail().setCollapsed(false);
			//set the form mode
			form.setMode(FormMode.EDIT);
			//set any control status specific this form			
		}	
	}
	/**
	 * called from context menus and update button for initiating an update
	 * @return void 
	 */	
	public void updateInstance() 
	{
		if (allowUpdate())
		{
			loadAdaptationCategories();
			populateInstanceControl(form.grdList().getValue());
			loadChildAdaptations();
			form.setMode(FormMode.EDIT);
		}
	}	
	public void open() throws PresentationLogicException
	{
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			populateListControl(domain.listByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		
		//set selection back
		if (form.getLocalContext().getSelectedRecordIsNotNull())
		{
			//need to get timestamp from record retrieved from List call.
			GenForm.grdListRow row = form.grdList().getRowByValue(form.getLocalContext().getSelectedRecord());
			if (row != null && row.getValue() != null)
			{
				form.getLocalContext().setSelectedRecord((AdaptationsVo)row.getValue());
				form.grdList().setValue(form.getLocalContext().getSelectedRecord());
				populateInstanceControl(form.grdList().getValue());
			}
			else
				clearInstanceControls();
			updateControlsState();			
		}
		else		
			form.ctnDetail().setCollapsed(true);
		
		form.setMode(FormMode.VIEW);		
		
	}	
	/*
	 * @see ims.clinical.forms.familyhistory.Handlers#onFormOpen()
	 */
	protected void onFormOpen() throws PresentationLogicException
	{	
		initialize();
		open();
	}	
	/*
	 * updates the context menus and other dependant screen controls
	 * @see ims.clinical.forms.familyhistory.Handlers#onFormModeChanged()
	 */
	protected void onFormModeChanged()
	{
		updateControlsState(); 
	}
	/*
	 * @see ims.clinical.forms.familyhistory.Handlers#onGridDetailsSelectionChanged()
	 */
	protected void onGrdListSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		//Display Panel and detail
		form.getLocalContext().setSelectedRecord((AdaptationsVo)form.grdList().getValue());
		populateInstanceControl(form.grdList().getValue());
		updateControlsState();
	}
	/*
	 * @see ims.clinical.forms.familyhistory.Handlers#onContextMenuItemClick(int, ims.framework.Control)
	 */
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{		
		if (menuItemID == form.getContextMenus().getLIPNewItem().getID())
			newInstance();
		else if (menuItemID == form.getContextMenus().getLIPUpdateItem().getID())
			updateInstance();
	}
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	protected void onComboBoxAdapt1ValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetail().comboBoxAdapt2().clear();
		loadChildAdaptations();
	}
	private void loadChildAdaptations()
	{
		if (this.form.ctnDetail().comboBoxAdapt1().getValue() == null)
			return;
		
		if (this.form.ctnDetail().comboBoxAdapt1().getValue().getChildInstances() != null)
		{
			for(int x = 0; x < this.form.ctnDetail().comboBoxAdapt1().getValue().getChildInstances().size(); x++)
			{
				this.form.ctnDetail().comboBoxAdapt2().newRow((Adaptation)this.form.ctnDetail().comboBoxAdapt1().getValue().getChildInstances().get(x),this.form.ctnDetail().comboBoxAdapt1().getValue().getChildInstances().get(x).toString());
			}
		}		
	}
	/* (non-Javadoc)
	 * @see ims.therapies.forms.adaptations.Handlers#oncomboBoxAdapt1ValueSet(java.lang.Object)
	 */
	protected void oncomboBoxAdapt1ValueSet(Object value) 
	{	
		this.form.ctnDetail().comboBoxAdapt2().clear();
		if (value == null)
			return;
		
		if (this.form.ctnDetail().comboBoxAdapt1().getValue().getChildInstances() != null)
		{
			for(int x = 0; x < this.form.ctnDetail().comboBoxAdapt1().getValue().getChildInstances().size(); x++)
			{
				this.form.ctnDetail().comboBoxAdapt2().newRow((Adaptation)this.form.ctnDetail().comboBoxAdapt1().getValue().getChildInstances().get(x),this.form.ctnDetail().comboBoxAdapt1().getValue().getChildInstances().get(x).toString());
			}
		}
	}
	/*
	 * @see ims.clinical.forms.familyhistory.Handlers#onBtnSaveClick()
	 */
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		if (save())
			open();			
	}
	/*
	 * @see ims.clinical.forms.familyhistory.Handlers#onBtnCancelClick()
	 */
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}	
	/*
	 * @see ims.clinical.forms.familyhistory.Handlers#onBtnUpdateClick()
	 */
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{		
		updateInstance();		
	}
	/*
	 * @see ims.clinical.forms.familyhistory.Handlers#onBtnNewClick()
	 */
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		newInstance();
	}
}
