//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.42 build 2207.27783)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.functionaltransfers;

import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PersonName;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.spinalinjuries.vo.lookups.FunctionalTransferEquipment;
import ims.spinalinjuries.vo.lookups.FunctionalTransferEquipmentCollection;
import ims.spinalinjuries.vo.lookups.FunctionalTransferTechnique;
import ims.spinalinjuries.vo.lookups.FunctionalTransferTechniqueCollection;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.therapies.forms.functionaltransfers.GenForm;
import ims.therapies.forms.functionaltransfers.GenForm.grdFunctionalTransRow;
import ims.therapies.vo.FunctionalTransfersShortVo;
import ims.therapies.vo.FunctionalTransfersShortVoCollection;
import ims.therapies.vo.FunctionalTransfersTechniqueVo;
import ims.therapies.vo.FunctionalTransfersTechniqueVoCollection;
import ims.therapies.vo.FunctionalTransfersVo;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	private void open()
	{
		clear();
		resetContextVariables();

		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		{
			populateParentNodes(domain.listFunctionalTransfersByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		}

		form.setMode(FormMode.VIEW);
		reselectUpdatedNode();
	}

	private void reselectUpdatedNode()
	{
		// Pattern demands that the last updated node is displayed
		if (form.getLocalContext().getUpdatedChildIsNotNull())
		{
			form.grdFunctionalTrans().setValue(form.getLocalContext().getUpdatedChild());
			getSelectedInstance();
			form.getLocalContext().setUpdatedChild(null);
		}
	}

	private void getSelectedInstance()
	{
		// In update mode we can select nodes without displaying anything but
		// the context
		// menus can change based on what's selected so we need to update them
		if (form.getMode().equals(FormMode.EDIT))
		{
			updateContextMenusState();
			return;
		}

		// expand the selected parent
		if (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersShortVo)
		{
			form.getLocalContext().setSelectedParentInstance(getParentFromDomain((FunctionalTransfersShortVo) form.grdFunctionalTrans().getValue()));
			populateParentInstanceControls(form.getLocalContext().getSelectedParentInstance());
			// add activities if not added already
			populateChildNodes(form.grdFunctionalTrans().getSelectedRow(), form.getLocalContext().getSelectedParentInstance().getMovements());
			form.getLocalContext().setSelectedChildInstance(null);
			clearChildInstanceControls();
		}
		else if (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo)
		{
			form.getLocalContext().setSelectedChildInstance((FunctionalTransfersTechniqueVo) form.grdFunctionalTrans().getValue());
			populateChildInstanceControls(form.getLocalContext().getSelectedChildInstance());
		}

		if (form.getGlobalContext().Core.getCurrentClinicalContact() == null)
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(false));
		else
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(form.getLocalContext().getSelectedParentInstance().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())));

		updateControlsState();

		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(false);
		}

	}

	private void updateControlsState()
	{
		// The new button
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getGoldenInstanceFound().booleanValue() == false && form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull());

		form.btnUpdate().setVisible(form.getMode().equals(FormMode.VIEW) && form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() && form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo && form.getLocalContext().getGoldenInstanceFound().booleanValue() == true);

		// The collapsible container
		form.ctnFunctTrans().setCollapsed(form.getLocalContext().getSelectedParentInstance() == null);

		// The empty tab
		if (form.grdFunctionalTrans().getValue() == null)
			form.ctnFunctTrans().lyrFunctTransfers().showtabEmpty();

		// The Parent tab
		setParentTabVisability();

		// The details tab
		setDetailsTabVisibility();

		// Pick a tab to show
		showHeaderOrDetailsTab();

		// The context menus
		updateContextMenusState();
	}

	private void showHeaderOrDetailsTab()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			// In view mode just show the selected node
			if (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersShortVo)
				form.ctnFunctTrans().lyrFunctTransfers().showtabHeader();
			else if (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo)
				form.ctnFunctTrans().lyrFunctTransfers().showtabDetails();
			else
				form.ctnFunctTrans().lyrFunctTransfers().showtabEmpty();

			form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().setReadOnly(true);
			form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().setReadOnly(true);
		}
		else
		{
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.TRUE))
				form.ctnFunctTrans().lyrFunctTransfers().showtabHeader();
			else
				form.ctnFunctTrans().lyrFunctTransfers().showtabDetails();

			form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().setReadOnly(false);
			form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().setReadOnly(false);
		}
	}

	private void setDetailsTabVisibility()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			// In view mode, make the details tab visible if a detail instance
			// is selected in the hierarchy grid.
			form.ctnFunctTrans().lyrFunctTransfers().tabDetails().setHeaderVisible(form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo);
		}
		else
		{
			// In edit mode, make the details tab visible if a hierarchy item
			// has been selected and we're not
			// editing a parent.
			form.ctnFunctTrans().lyrFunctTransfers().tabDetails().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull() && form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE));

			setAddApplyCaption();
		}
		enableDetailsButtons();
	}

	private void enableDetailsButtons()
	{
		boolean boolVisible = (form.getMode().equals(FormMode.EDIT) && form.ctnFunctTrans().lyrFunctTransfers().tabDetails().isHeaderVisible() && form.getLocalContext().getSelectedChildInstance() == null);

		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().btnOk().setVisible(boolVisible);
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().btnCancelDetails().setVisible(boolVisible);
	}

	private void setAddApplyCaption()
	{
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().btnOk().setText("Add");

		if (form.getLocalContext().getSelectedChildInstance() == null && (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo))
			form.ctnFunctTrans().lyrFunctTransfers().tabDetails().btnOk().setText("Apply");
	}

	private void setParentTabVisability()
	{
		form.ctnFunctTrans().lyrFunctTransfers().tabHeader().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull());
		enableParentControls();
	}

	private void enableParentControls()
	{
		boolean boolEnabled = (form.getMode().equals(FormMode.EDIT));
		form.ctnFunctTrans().lyrFunctTransfers().tabHeader().dtimAuthoringDateTime().setEnabled(boolEnabled);
		form.ctnFunctTrans().lyrFunctTransfers().tabHeader().qmbAuthoringCP().setEnabled(boolEnabled);
	}

	private void populateChildInstanceControls(FunctionalTransfersTechniqueVo voFTTechnique)
	{
		if (voFTTechnique == null)
			return;

		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().cmbFinishPos().setValue(voFTTechnique.getFinishPosition());
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().cmbRisk().setValue(voFTTechnique.getRisk());
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().cmbStartPos().setValue(voFTTechnique.getStartPosition());
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFIMScore().setValue(voFTTechnique.getFIMScore());
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishHeight().setValue(voFTTechnique.getFinishHeight());
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishTarget().setValue(voFTTechnique.getFinishTarget());
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartHeight().setValue(voFTTechnique.getStartHeight());
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartTarget().setValue(voFTTechnique.getStartTarget());

		// TODO - WORK FOR THE GRIDS STILL NEEDS TO BE DONE.
		loadEquipment();
		loadTechnique();

		overlayEquipment(voFTTechnique.getEquipment());
		overlayTechnique(voFTTechnique.getTechnique());
	}

	private void overlayTechnique(FunctionalTransferTechniqueCollection techniqueColl)
	{
		if (techniqueColl != null)
		{
			// Technique...
			GenForm.ctnFunctTransContainer.lyrFunctTransfersLayer.tabDetailsContainer.grdTechniqueRow rowTech;
			for (int j = 0; j < techniqueColl.size(); j++)
			{
				FunctionalTransferTechnique techVo = techniqueColl.get(j);
				int i = 0;
				for (i = 0; i < form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().getRows().size(); i++)
				{
					rowTech = form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().getRows().get(i);
					if (rowTech.getValue().getId() == techVo.getId())
					{
						rowTech.setcolSelected(true);
						break;
					}
				}
				if (i == form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().getRows().size())
				{
					rowTech = form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().getRows().newRow();
					rowTech.setValue(techVo);
					rowTech.setcolTechnique(techVo);
					rowTech.setcolSelected(true);
				}
			}
		}
	}

	private void overlayEquipment(FunctionalTransferEquipmentCollection equipmentColl)
	{
		// Equipment Given...
		if (equipmentColl != null)
		{
			GenForm.ctnFunctTransContainer.lyrFunctTransfersLayer.tabDetailsContainer.grdEquipmentRow rowEquip;
			for (int j = 0; j < equipmentColl.size(); j++)
			{
				FunctionalTransferEquipment equipVo = equipmentColl.get(j);
				int i = 0;
				for (i = 0; i < form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().getRows().size(); i++)
				{
					rowEquip = form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().getRows().get(i);
					if (rowEquip.getValue().getId() == equipVo.getId())
					{
						rowEquip.setcolSelected(true);
						break;
					}
				}
				if (i == form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().getRows().size())
				{
					rowEquip = form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().getRows().newRow();
					rowEquip.setValue(equipVo);
					rowEquip.setcolEquipment(equipVo);
					rowEquip.setcolSelected(true);
				}
			}
		}
	}

	private void populateParentInstanceControls(FunctionalTransfersVo voFunctTransParent)
	{
		if (voFunctTransParent != null)
		{
			form.ctnFunctTrans().lyrFunctTransfers().tabHeader().dtimAuthoringDateTime().setValue(voFunctTransParent.getAuthoringDateTime());
			if (voFunctTransParent.getAuthoringCP() != null)
				form.ctnFunctTrans().lyrFunctTransfers().tabHeader().qmbAuthoringCP().newRow(voFunctTransParent.getAuthoringCP(), voFunctTransParent.getAuthoringCP().toString());
			form.ctnFunctTrans().lyrFunctTransfers().tabHeader().qmbAuthoringCP().setValue(voFunctTransParent.getAuthoringCP());
		}
	}

	private FunctionalTransfersVo getParentFromDomain(FunctionalTransfersShortVo voFunctTransShort)
	{
		return domain.getFunctionalTransfers(voFunctTransShort);
	}

	private void updateContextMenusState()
	{
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			if (form.getLocalContext().getGoldenInstanceSelected().booleanValue())
			{
				// If the golden instance is currently selected we change the
				// text of the update context menu
				// based on whether a parent or child node is selected in the
				// grid.
				if (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersShortVo)
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
				else if (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo)
					form.getContextMenus().getGenericGridUpdateItem().setText("Edit Functional Transfers Technique");

				// If the golden node is selected we can now only add child
				// nodes so set the menu text accordingly.
				form.getContextMenus().getGenericGridAddItem().setText("Add Functional Transfers Technique");

				// Only show the update menu if the user has selected an item to
				// update.
				form.getContextMenus().getGenericGridUpdateItem().setVisible((form.getMode().equals(FormMode.VIEW) && form.grdFunctionalTrans().getSelectedRowIndex() >= 0) && form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo || (form.getMode().equals(FormMode.EDIT) && form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo && ((FunctionalTransfersTechniqueVo) form.grdFunctionalTrans().getValue()).getID_FunctionalTransfersTechnique() == null));
			}
			else
			{
				// If the golden instance has been found but NOT selected hide
				// the context menu's
				if (form.getLocalContext().getGoldenInstanceFound().booleanValue() == true)
				{
					form.getContextMenus().hideAllGenericGridMenuItems();
					return;
				}
				else
				{
					form.getContextMenus().getGenericGridAddItem().setText("New Functional Transfer");
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
				}
			}

			form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.VIEW));
			form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo && ((FunctionalTransfersTechniqueVo) form.grdFunctionalTrans().getValue()).getID_FunctionalTransfersTechnique() == null);
		}
		else
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
		}
	}

	private void populateParentNodes(FunctionalTransfersShortVoCollection voCollFunctTransParents)
	{
		if (voCollFunctTransParents == null || voCollFunctTransParents.size() <= 0)
			return;

		for (int i = 0; i < voCollFunctTransParents.size(); i++)
		{
			populateParentNode(voCollFunctTransParents.get(i));
		}
	}

	private void populateParentNode(FunctionalTransfersShortVo voFunctTransParent)
	{
		GenForm.grdFunctionalTransRow parRow = form.grdFunctionalTrans().getRows().newRow();
		parRow.setcolStartingPositionParent(voFunctTransParent.getAuthoringDateTime().toString());
		// parRow.setTooltip(voRehabParent.getCareContext().toString());

		parRow.setValue(voFunctTransParent);
		form.grdFunctionalTrans().setValue(voFunctTransParent);
		expandParentNode(parRow);
	}

	private void expandParentNode(grdFunctionalTransRow selectedRow)
	{
		if (selectedRow.getValue() instanceof FunctionalTransfersShortVo == false)
			return;

		form.getLocalContext().setSelectedParentInstance(getParentFromDomain((FunctionalTransfersShortVo) selectedRow.getValue()));
		if (form.getLocalContext().getSelectedParentInstance() == null)
			return;

		FunctionalTransfersVo voParentInstance = form.getLocalContext().getSelectedParentInstance();
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() && (voParentInstance.getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())))
		{
			// If this is the Golden Node then we'll colour it golden (ok then
			// beige).
			form.getLocalContext().setGoldenInstanceFound(new Boolean(true));
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
			selectedRow.setBackColor(Color.Beige);
		}
		if (voParentInstance.getMovementsIsNotNull())
		{
			selectedRow.setExpanded(true);
			populateChildNodes(selectedRow, voParentInstance.getMovements());
		}
		populateParentInstanceControls(voParentInstance);
	}

	private void populateChildNodes(grdFunctionalTransRow parRow, FunctionalTransfersTechniqueVoCollection voFunctTransTechniqueColl)
	{
		parRow.getRows().clear();

		if (voFunctTransTechniqueColl == null || voFunctTransTechniqueColl.size() <= 0)
			return;

		// RehabilitationVo voParentInstance =
		// form.getLocalContext().getSelectedParentInstance();
		// if(voParentInstance.getClinicalContact().getID_ClinicalContact().equals
		// (form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))

		voFunctTransTechniqueColl.sort();
		for (int i = 0; i < voFunctTransTechniqueColl.size(); i++)
		{
			if (parRow != null)
			{
				GenForm.grdFunctionalTransRow childRow = parRow.getRows().newRow();
				populateChildNode(childRow, voFunctTransTechniqueColl.get(i));
			}
		}
		// reselect parent
		form.grdFunctionalTrans().setValue(parRow.getValue());
		parRow.setExpanded(true);
	}

	private void populateChildNode(grdFunctionalTransRow childRow, FunctionalTransfersTechniqueVo voFunctTransMovements)
	{
		if (voFunctTransMovements == null)
			return;

		childRow.setValue(voFunctTransMovements);
		if (voFunctTransMovements.getStartPosition() != null)
			childRow.setcolStartingPositionParent(voFunctTransMovements.getStartPosition().toString());
		if (voFunctTransMovements.getStartHeight() != null)
			childRow.setcolHeightStartChild(voFunctTransMovements.getStartHeight().toString());
		if (voFunctTransMovements.getStartTarget() != null)
			childRow.setcolTargetStart(voFunctTransMovements.getStartTarget().toString());
		if (voFunctTransMovements.getFinishPosition() != null)
			childRow.setcolFinishingPosition(voFunctTransMovements.getFinishPosition().toString());
		if (voFunctTransMovements.getFinishHeight() != null)
			childRow.setcolHeightFinish(voFunctTransMovements.getFinishHeight().toString());
		if (voFunctTransMovements.getFinishTarget() != null)
			childRow.setcolTargetFinish(voFunctTransMovements.getFinishTarget().toString());
		if (voFunctTransMovements.getFIMScore() != null)
			childRow.setcolFIMScore(voFunctTransMovements.getFIMScore().toString());
		if (voFunctTransMovements.getRisk() != null)
			childRow.setcolRisk(voFunctTransMovements.getRisk().toString());

		// if not saved then set the colour
		if (voFunctTransMovements.getID_FunctionalTransfersTechnique() == null)
			childRow.setTextColor(Color.Red);
	}

	private void resetContextVariables()
	{
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(false));
		form.getLocalContext().setGoldenInstanceFound(new Boolean(false));
		form.getLocalContext().setUpdatingParent(new Boolean(false));
		form.getLocalContext().setSelectedParentInstance(null);
		form.getLocalContext().setSelectedChildInstance(null);
	}

	private void clear()
	{
		form.grdFunctionalTrans().getRows().clear();
		clearChildInstanceControls();
	}

	private void clearChildInstanceControls()
	{
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().cmbFinishPos().setValue(null);
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().cmbRisk().setValue(null);
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().cmbStartPos().setValue(null);
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFIMScore().setValue(null);
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishHeight().setValue(null);
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishTarget().setValue(null);
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartHeight().setValue(null);
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartTarget().setValue(null);

		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().getRows().clear();
		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().getRows().clear();
	}

	private void initialize()
	{
		form.ctnFunctTrans().setCollapsed(true);
		form.ctnFunctTrans().lyrFunctTransfers().tabEmpty().setHeaderVisible(false);
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void setAuthoringCP(String value)
	{
		HcpLiteVoCollection coll = domain.listHcps(value);

		for (HcpLiteVo hcpLiteVo : coll)
		{
			form.ctnFunctTrans().lyrFunctTransfers().tabHeader().qmbAuthoringCP().newRow(hcpLiteVo, hcpLiteVo.toString());
		}

		if (coll.size() == 1)
			form.ctnFunctTrans().lyrFunctTransfers().tabHeader().qmbAuthoringCP().setValue(coll.get(0));
		else if (coll.size() > 1)
			form.ctnFunctTrans().lyrFunctTransfers().tabHeader().qmbAuthoringCP().showOpened();
	}

	private boolean addOrUpdateChild(boolean bOnSave)
	{
		if (form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))
			newParentNode(form.getLocalContext().getSelectedParentInstance());

		FunctionalTransfersTechniqueVo voFunctionalTransfersTechnique = form.getLocalContext().getSelectedChildInstance();

		if (voFunctionalTransfersTechnique == null)
			voFunctionalTransfersTechnique = new FunctionalTransfersTechniqueVo();

		populateChildInstanceData(voFunctionalTransfersTechnique);

		if (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo && form.getLocalContext().getSelectedChildInstanceIsNotNull())
		{
			FunctionalTransfersTechniqueVo voFunctTransTechniqueSelected = (FunctionalTransfersTechniqueVo) form.grdFunctionalTrans().getValue();

			if (voFunctTransTechniqueSelected.getID_FunctionalTransfersTechnique() == null)
			{
				// allow update of selected child that is not saved yet.
				promoteUpdatedChild(voFunctionalTransfersTechnique);
				newChildInstance();
				updateControlsState();
			}
		}
		else
		{
			if (newChildNode(voFunctionalTransfersTechnique, bOnSave))
				return true;
		}
		return false;
	}

	private boolean newChildNode(FunctionalTransfersTechniqueVo voFunctionalTransfersTechnique, boolean bOnSave)
	{
		if (form.getLocalContext().getSelectedChildInstance() != null)
			return false;

		if (voFunctionalTransfersTechnique.countFieldsWithValue() >= 1)
		{
			String strErrors[] = voFunctionalTransfersTechnique.validate();

			if (strErrors != null && strErrors.length > 0)
			{
				engine.showErrors(strErrors);
				return true;
			}

			promoteChild(voFunctionalTransfersTechnique);
			clearChildInstanceControls();
			loadEquipment();
			loadTechnique();
		}
		else if (!bOnSave)
			engine.showMessage("No details fields have been filled in.");

		return false;
	}

	private void promoteChild(FunctionalTransfersTechniqueVo voFunctionalTransfersTechnique)
	{
		if (voFunctionalTransfersTechnique == null)
			return;
		GenForm.grdFunctionalTransRow childRow = null;
		form.grdFunctionalTrans().setValue(form.getLocalContext().getSelectedParentInstance());
		if (form.grdFunctionalTrans().getSelectedRow().getValue() instanceof FunctionalTransfersTechniqueVo)
			childRow = form.grdFunctionalTrans().getSelectedRow().getParentRow().getRows().newRow();
		else
			childRow = form.grdFunctionalTrans().getSelectedRow().getRows().newRow();
		populateChildNode(childRow, voFunctionalTransfersTechnique);
	}

	private void newChildInstance()
	{
		clearChildInstanceControls();
		form.getLocalContext().setSelectedChildInstance(null);
		loadEquipment();
		loadTechnique();
		if (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersShortVo)
			form.grdFunctionalTrans().setValue(form.grdFunctionalTrans().getSelectedRow().getValue());
		else if (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo)
			form.grdFunctionalTrans().setValue(form.grdFunctionalTrans().getSelectedRow().getParentRow().getValue());
	}

	private void loadTechnique()
	{
		FunctionalTransferTechniqueCollection coll = LookupHelper.getFunctionalTransferTechnique(domain.getLookupService());

		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().getRows().clear();

		for (int j = 0; j < coll.size(); j++)
		{
			GenForm.ctnFunctTransContainer.lyrFunctTransfersLayer.tabDetailsContainer.grdTechniqueRow row = form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().getRows().newRow();
			row.setcolTechnique(coll.get(j));
			row.setValue(coll.get(j));
		}
	}

	private void loadEquipment()
	{
		FunctionalTransferEquipmentCollection coll = LookupHelper.getFunctionalTransferEquipment(domain.getLookupService());

		form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().getRows().clear();

		for (int j = 0; j < coll.size(); j++)
		{
			GenForm.ctnFunctTransContainer.lyrFunctTransfersLayer.tabDetailsContainer.grdEquipmentRow row = form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().getRows().newRow();
			row.setcolEquipment(coll.get(j));
			row.setValue(coll.get(j));
		}
	}

	private void promoteUpdatedChild(FunctionalTransfersTechniqueVo voFunctionalTransfersTechnique)
	{
		if (voFunctionalTransfersTechnique == null)
			return;
		populateChildNode(form.grdFunctionalTrans().getSelectedRow(), voFunctionalTransfersTechnique);
	}

	private void populateChildInstanceData(FunctionalTransfersTechniqueVo voFTTechnique)
	{
		voFTTechnique.setStartPosition(form.ctnFunctTrans().lyrFunctTransfers().tabDetails().cmbStartPos().getValue());
		voFTTechnique.setStartHeight(form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartHeight().getValue());
		voFTTechnique.setStartTarget(form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartTarget().getValue());
		voFTTechnique.setFinishPosition(form.ctnFunctTrans().lyrFunctTransfers().tabDetails().cmbFinishPos().getValue());
		voFTTechnique.setFinishHeight(form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishHeight().getValue());
		voFTTechnique.setFinishTarget(form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishTarget().getValue());
		voFTTechnique.setFIMScore(form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFIMScore().getValue());
		voFTTechnique.setRisk(form.ctnFunctTrans().lyrFunctTransfers().tabDetails().cmbRisk().getValue());

		FunctionalTransferEquipmentCollection voCollEquip = new FunctionalTransferEquipmentCollection();
		FunctionalTransferTechniqueCollection voCollTech = new FunctionalTransferTechniqueCollection();

		// equipment
		if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().getRows() != null)
		{
			for (int i = 0; i < form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().getRows().size(); i++)
			{
				if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().getRows().get(i).getcolSelected())
					voCollEquip.add(form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdEquipment().getRows().get(i).getValue());
			}
			if (voCollEquip.size() > 0)
				voFTTechnique.setEquipment(voCollEquip);
			else
				voFTTechnique.setEquipment(null);
		}

		// Technique
		if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().getRows() != null)
		{
			for (int i = 0; i < form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().getRows().size(); i++)
			{
				if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().getRows().get(i).getcolSelected())
					voCollTech.add(form.ctnFunctTrans().lyrFunctTransfers().tabDetails().grdTechnique().getRows().get(i).getValue());
			}
			if (voCollTech.size() > 0)
				voFTTechnique.setTechnique(voCollTech);
			else
				voFTTechnique.setTechnique(null);
		}
	}

	private void newParentNode(FunctionalTransfersVo voNewParent)
	{
		if (voNewParent == null)
			return;

		FunctionalTransfersShortVo voParentShort = new FunctionalTransfersShortVo();
		voParentShort.setAuthoringCP(voNewParent.getAuthoringCP());
		voParentShort.setAuthoringDateTime(voNewParent.getAuthoringDateTime());
		voParentShort.setClinicalContact(voNewParent.getClinicalContact());

		GenForm.grdFunctionalTransRow parentRow = form.grdFunctionalTrans().getRows().newRow();
		if (voParentShort.getAuthoringCP() != null)
			parentRow.setcolStartingPositionParent(voParentShort.getAuthoringDateTime().toString() + " - " + voParentShort.getAuthoringCP().toString());
		parentRow.setValue(voParentShort);
		parentRow.setBackColor(Color.Beige);
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
		parentRow.setExpanded(true);
		form.grdFunctionalTrans().setValue(voParentShort);
	}

	private boolean save()
	{
		if (form.ctnFunctTrans().lyrFunctTransfers().tabHeader().qmbAuthoringCP().getValue() == null)
		{
			engine.showMessage("No Authoring HCP has been provided! Please select an Authoring HCP from the Functional Transfers tab before proceeding.");
			return false;
		}

		if (validateIntValues())
			return false;

		if (checkForUnsavedChild())
			return false;

		FunctionalTransfersVo voFunctionalTransfers = populateInstanceData(form.getLocalContext().getSelectedParentInstance());

		if (voFunctionalTransfers.getClinicalContact() == null)
			voFunctionalTransfers.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

		String[] arrErrors = voFunctionalTransfers.validate(validateUIRules());

		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		try
		{
			form.getLocalContext().setSelectedParentInstance(domain.saveFunctionalTransfers(voFunctionalTransfers));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			open();
			return false;
		}

		setUpdatedChild();
		return true;
	}

	private boolean validateIntValues()
	{

		if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartHeight().getValue() != null)
		{
			if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartHeight().getValue() < 0)
			{
				engine.showMessage("Start Height value cannot be a minus number");
				form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartHeight().setFocus();
				return true;
			}
		}

		if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartTarget().getValue() != null)
		{

			if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartTarget().getValue() < 0)
			{
				engine.showMessage("Start Target value cannot be a minus number");
				form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intStartTarget().setFocus();

				return true;
			}
		}

		if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishHeight().getValue() != null)
		{
			if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishHeight().getValue() < 0)
			{
				engine.showMessage("Finish Height value cannot be a minus number");
				form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishHeight().setFocus();
				return true;
			}
		}

		if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishTarget().getValue() != null)
		{
			if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishTarget().getValue() < 0)
			{
				engine.showMessage("Finish Target value cannot be a minus number");
				form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFinishTarget().setFocus();
				return true;
			}
		}

		if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFIMScore().getValue() != null)
		{
			if (form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFIMScore().getValue() < 0)
			{
				engine.showMessage("FIM Score value cannot be a minus number");
				form.ctnFunctTrans().lyrFunctTransfers().tabDetails().intFIMScore().setFocus();
				return true;
			}
		}
		return false;
	}

	private void setUpdatedChild()
	{
		// Straight child update - Select the currently being updated child as
		// the one so show - post save
		if (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo)
		{
			form.getLocalContext().setUpdatedChild((FunctionalTransfersTechniqueVo) form.grdFunctionalTrans().getValue());
		}
		else
		{
			// Find the most recently added child
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE))
			{
				form.getLocalContext().getSelectedParentInstance().getMovements().sort();
				form.getLocalContext().setUpdatedChild(form.getLocalContext().getSelectedParentInstance().getMovements().get(form.getLocalContext().getSelectedParentInstance().getMovements().size() - 1));
			}

		}
	}

	private String[] validateUIRules()
	{
		return null;
	}

	private FunctionalTransfersVo populateInstanceData(FunctionalTransfersVo voFunctionalTransfers)
	{
		if (voFunctionalTransfers == null)
			voFunctionalTransfers = new FunctionalTransfersVo();

		populateParentInstanceData(voFunctionalTransfers);

		if (form.getLocalContext().getSelectedChildInstance() == null)
		{
			populateChildCollectionFromGrid(voFunctionalTransfers);
		}
		else
		// Update child instance.
		{
			FunctionalTransfersTechniqueVo voFunctTransTechnique = form.getLocalContext().getSelectedChildInstance();
			populateChildInstanceData(voFunctTransTechnique);
			form.getLocalContext().setSelectedChildInstance(voFunctTransTechnique);

			for (int i = 0; i < voFunctionalTransfers.getMovements().size(); i++)
			{
				if (voFunctionalTransfers.getMovements().get(i).getID_FunctionalTransfersTechnique() == form.getLocalContext().getSelectedChildInstance().getID_FunctionalTransfersTechnique())
				{
					voFunctionalTransfers.getMovements().set(i, form.getLocalContext().getSelectedChildInstance());
				}
			}
		}
		return voFunctionalTransfers;
	}

	private void populateChildCollectionFromGrid(FunctionalTransfersVo voFunctionalTransfers)
	{
		if (form.grdFunctionalTrans().getValue() == null)
			return;

		if (voFunctionalTransfers.getMovements() == null)
			voFunctionalTransfers.setMovements(new FunctionalTransfersTechniqueVoCollection());

		GenForm.grdFunctionalTransRow parentRow = form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersShortVo ? form.grdFunctionalTrans().getSelectedRow() : form.grdFunctionalTrans().getSelectedRow().getParentRow();

		if (parentRow.getRows().size() > 0)
			voFunctionalTransfers.getMovements().clear();

		for (int i = 0; i < parentRow.getRows().size(); i++)
		{
			voFunctionalTransfers.getMovements().add((FunctionalTransfersTechniqueVo) parentRow.getRows().get(i).getValue());
		}
	}

	private void populateParentInstanceData(FunctionalTransfersVo voFunctionalTransfers)
	{
		voFunctionalTransfers.setAuthoringCP(form.ctnFunctTrans().lyrFunctTransfers().tabHeader().qmbAuthoringCP().getValue());
		voFunctionalTransfers.setAuthoringDateTime(form.ctnFunctTrans().lyrFunctTransfers().tabHeader().dtimAuthoringDateTime().getValue());
	}

	private boolean checkForUnsavedChild()
	{
		if (form.getLocalContext().getSelectedChildInstance() == null)
		{
			if (addOrUpdateChild(true))
				return true;
		}
		return false;
	}

	private void newInstance()
	{
		// New instance has been invoked for a parent instance with no current
		// selection made OR
		// with a parent that is not the Golden node..
		if (form.grdFunctionalTrans().getValue() == null || ((form.getLocalContext().getSelectedParentInstanceIsNotNull() && form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))))
		{
			newParentInstance();
			form.setMode(FormMode.EDIT);
		}
		else
		{
			newChildInstance();
			form.setMode(FormMode.EDIT);
			disableHeaderInfo();
		}
	}

	private void newParentInstance()
	{
		FunctionalTransfersVo voNewParent = new FunctionalTransfersVo();
		voNewParent.setAuthoringCP((HcpLiteVo) domain.getHcpLiteUser());
		voNewParent.setAuthoringDateTime(new DateTime());
		voNewParent.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voNewParent.setMovements(new FunctionalTransfersTechniqueVoCollection());
		populateParentInstanceControls(voNewParent);
		loadEquipment();
		loadTechnique();
		form.getLocalContext().setSelectedParentInstance(voNewParent);
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
				newInstance();
			break;
			case GenForm.ContextMenus.GenericGrid.Update :
				updateInstance();
			break;
			case GenForm.ContextMenus.GenericGrid.Remove :
				removeChild();
		}
	}

	private void removeChild()
	{
		FunctionalTransfersShortVo voParent = (FunctionalTransfersShortVo) form.grdFunctionalTrans().getSelectedRow().getParentRow().getValue();
		form.grdFunctionalTrans().removeSelectedRow();
		form.grdFunctionalTrans().setValue(voParent);
		updateContextMenusState();
	}

	private void updateInstance()
	{
		form.getLocalContext().setUpdatingParent(new Boolean(form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersShortVo));
		form.setMode(FormMode.EDIT);
		if (form.grdFunctionalTrans().getValue() instanceof FunctionalTransfersTechniqueVo)
		{
			FunctionalTransfersTechniqueVo voCachedChild = (FunctionalTransfersTechniqueVo) form.grdFunctionalTrans().getValue();
			if (voCachedChild.getID_FunctionalTransfersTechnique() == null)
			{
				populateChildInstanceControls(voCachedChild);
			}
		}
		disableHeaderInfo();
	}

	private void disableHeaderInfo()
	{
		form.ctnFunctTrans().lyrFunctTransfers().tabHeader().dtimAuthoringDateTime().setEnabled(false);
		form.ctnFunctTrans().lyrFunctTransfers().tabHeader().qmbAuthoringCP().setEnabled(false);
	}

	protected void onQmbAuthoringCPTextSubmited(String value) throws PresentationLogicException
	{
		setAuthoringCP(value);
	}

	protected void onBtnOkClick() throws PresentationLogicException
	{
		addOrUpdateChild(false);
	}

	protected void onBtnCancelDetailsClick() throws PresentationLogicException
	{
		clearChildInstanceControls();
		newChildInstance();
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
			open();
	}

	protected void onGrdFunctionalTransSelectionChanged() throws PresentationLogicException
	{
		getSelectedInstance();
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		updateInstance();
	}

}
