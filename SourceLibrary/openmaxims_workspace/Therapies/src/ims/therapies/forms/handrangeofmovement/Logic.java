//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2340.34011)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.handrangeofmovement;

import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MskGroupLiteVo;
import ims.core.vo.MskGroupLiteVoCollection;
import ims.core.vo.MskJointMovementVo;
import ims.core.vo.MskJointMovementVoCollection;
import ims.core.vo.MskJointVo;
import ims.core.vo.MskJointVoCollection;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LateralityLRonly;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.generalmedical.vo.RangeOfMovementDetailVo;
import ims.generalmedical.vo.RangeOfMovementDetailVoCollection;
import ims.spinalinjuries.vo.lookups.MskJointsMovementsCollection;
import ims.therapies.forms.handrangeofmovement.GenForm.grdMovementRow;
import ims.therapies.vo.HandRangeOfMovementVo;
import ims.therapies.vo.HandRangeOfMovementVoCollection;
import ims.vo.ValueObject;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// ----------------------------------------------------------------------------------------------------------------------
	// Event handler region
	// ----------------------------------------------------------------------------------------------------------------------

	protected void onFormOpen() throws PresentationLogicException
	{
		initialize();
		open();
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.YesNoDialog))
		{
			if (result.equals(DialogResult.YES))
			{
				// WDEV-11598
				if (form.ctnDetails().lyrDetails().tabDetails().cmbAction().getValue() != null || form.ctnDetails().lyrDetails().tabDetails().cmbMovement().getValue() != null || form.ctnDetails().lyrDetails().tabDetails().intEOR().getValue() != null || form.ctnDetails().lyrDetails().tabDetails().intSOR().getValue() != null)

					// See if we can promote the unsaved child.
					if (addOrUpdateChild())
					{
						saveWithoutCheck();
						open();
					}
			}
			else
			{
				clearDetailsInstanceControls();
			}
		}
	}

	protected void onRecbrValueChanged() throws PresentationLogicException
	{
		selectHandRangeOfMovement();
	}

	protected void onGrdMovementSelectionChanged() throws PresentationLogicException
	{
		selectionChanged();
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onBtnOKClick() throws PresentationLogicException
	{
		if (addOrUpdateChild())
		{
			form.getLocalContext().setHasDataComitted(Boolean.TRUE);
		}
	}

	protected void onBtnCancelDetailsClick() throws PresentationLogicException
	{
		clearDetailsInstanceControls();
	}

	protected void onCmbDigitValueChanged() throws PresentationLogicException
	{
		MskGroupLiteVo digit = form.ctnDetails().lyrDetails().tabDetails().cmbDigit().getValue();

		if (digit == null)
		{
			// Clear joints & movements
			form.ctnDetails().lyrDetails().tabDetails().cmbJoint().clear();
			form.ctnDetails().lyrDetails().tabDetails().cmbMovement().clear();
		}
		else
		{
			listJointsForGroup(domain.listJointsForGroup(digit));
		}
	}

	protected void onCmbJointValueChanged() throws PresentationLogicException
	{
		MskJointVo joint = form.ctnDetails().lyrDetails().tabDetails().cmbJoint().getValue();

		if (joint == null)
		{
			// Clear movements
			form.ctnDetails().lyrDetails().tabDetails().cmbMovement().clear();
		}
		else
		{
			loadMovementsForJoint(domain.listMovementsForJoint(joint));
		}
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.HandRangeOfMovement.NEW_PARENT:
				newHandRangeOfMovementInstance();
				break;
			case GenForm.ContextMenus.HandRangeOfMovement.UPDATE_PARENT:
				updateHandRangeOfMovementInstance();
				break;
			case GenForm.ContextMenus.HandRangeOfMovement.NEW_DETAIL:
				newDigitConfigurationInstance();
				break;
			case GenForm.ContextMenus.HandRangeOfMovement.NEW_JOINT:
				newJointConfigurationInstance();
				break;
			case GenForm.ContextMenus.HandRangeOfMovement.NEW_MOVEMENT:
				newMovementConfigurationInstance();
				break;
			case GenForm.ContextMenus.HandRangeOfMovement.UPDATE_DETAIL:
				updateMovementValue();
				break;
			case GenForm.ContextMenus.HandRangeOfMovement.REMOVE_DETAIL:
				removeMovementInstance();
				break;
		}
	}

	// ----------------------------------------------------------------------------------------------------------------------
	// Form presentation functions
	// ----------------------------------------------------------------------------------------------------------------------

	public void initialize()
	{
		form.ctnDetails().setCollapsed(true);
		form.ctnDetails().lyrDetails().tabEmpty().setHeaderVisible(false);
		form.ctnDetails().lyrDetails().tabHeader().customControlAuthoringHCP().setHcpType(HcpDisType.MEDICAL);
	}

	private void open()
	{
		clear();
		resetContextVariables();

		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			populateRecordBrowser(domain.listHandRangeOfMovementsForCareContext(form.getGlobalContext().Core.getCurrentCareContext()));

		form.setMode(FormMode.VIEW);
		reselectUpdatedNode();
	}

	public void clear()
	{
		form.grdMovement().getRows().clear();
		clearDetailsInstanceControls();
	}

	private void clearDetailsInstanceControls()
	{
		/*
		 * if (form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().isEnabled() == true) form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().clear();
		 * 
		 * if (form.ctnDetails().lyrDetails().tabDetails().cmbDigit().isEnabled() == true) form.ctnDetails().lyrDetails().tabDetails().cmbDigit().clear();
		 * 
		 * if (form.ctnDetails().lyrDetails().tabDetails().cmbJoint().isEnabled() == true) form.ctnDetails().lyrDetails().tabDetails().cmbJoint().clear();
		 */
		form.ctnDetails().lyrDetails().tabDetails().cmbMovement().setValue(null);
		form.ctnDetails().lyrDetails().tabDetails().cmbAction().setValue(null);
		// WDEV-11598
		form.ctnDetails().lyrDetails().tabDetails().intEOR().setValue(null);
		form.ctnDetails().lyrDetails().tabDetails().intSOR().setValue(null);
		// form.ctnDetails().lyrDetails().tabDetails().intValue().setValue(null);

	}

	private void selectHandRangeOfMovement()
	{
		resetContextVariables();
		HandRangeOfMovementVo voHandRangeOfMovement = form.recbrHandRangeOfMovements().getValue();
		if (voHandRangeOfMovement != null)
		{
			instanceControlsPopulateHandRangeOfMovement(voHandRangeOfMovement);
			populateTree(voHandRangeOfMovement);
			form.getLocalContext().setSelectedHandRangeOfMovementInstance(voHandRangeOfMovement);
		}

		reselectUpdatedNode();
		updateControlsState();
	}

	private boolean addOrUpdateChild()
	{
		RangeOfMovementDetailVo voRangeOfMovementDetail = form.getLocalContext().getSelectedRangeOfMovementDetailInstance();
		if (voRangeOfMovementDetail == null)
			voRangeOfMovementDetail = new RangeOfMovementDetailVo();

		if (instanceDataPopulateRangeOfMovementDetail(voRangeOfMovementDetail))
		{
			form.getLocalContext().setSelectedRangeOfMovementDetailInstance(voRangeOfMovementDetail);

			return promoteValidatedRom(voRangeOfMovementDetail);
		}

		return false;
	}

	/**
	 * Methods that populate controls on the form from vo data. From Parent to Child to movement.
	 * 
	 * Populate the controls in the header tab from the HandRangeOfMovement tab passed in.
	 */
	private void instanceControlsPopulateHandRangeOfMovement(HandRangeOfMovementVo voHandRangeOfMovement)
	{
		if (voHandRangeOfMovement != null)
		{
			form.ctnDetails().lyrDetails().tabHeader().customControlAuthoringHCP().setValue(getAuthoringInfo(voHandRangeOfMovement));
			if (voHandRangeOfMovement.getDominantHand() != null)
			{
				form.ctnDetails().lyrDetails().tabHeader().cmbDominantHand().newRow(voHandRangeOfMovement.getDominantHand(), voHandRangeOfMovement.getDominantHand().getText());
				form.ctnDetails().lyrDetails().tabHeader().cmbDominantHand().setValue(voHandRangeOfMovement.getDominantHand());
			}
		}
	}

	private void instanceControlPopulateRangeOfMovementDetail(RangeOfMovementDetailVo voRangeOfMovementDetail)
	{
		if (voRangeOfMovementDetail == null)
			return;

		form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().setValue(voRangeOfMovementDetail.getLaterality() != null ? voRangeOfMovementDetail.getLaterality() : null);

		if (voRangeOfMovementDetail.getGroup() != null)
		{
			form.ctnDetails().lyrDetails().tabDetails().cmbDigit().newRow(voRangeOfMovementDetail.getGroup(), voRangeOfMovementDetail.getGroup().getName());
			form.ctnDetails().lyrDetails().tabDetails().cmbDigit().setValue(voRangeOfMovementDetail.getGroup());
		}

		if (voRangeOfMovementDetail.getJoint() != null)
		{
			form.ctnDetails().lyrDetails().tabDetails().cmbJoint().newRow(voRangeOfMovementDetail.getJoint(), voRangeOfMovementDetail.getJoint().getName());
			form.ctnDetails().lyrDetails().tabDetails().cmbJoint().setValue(voRangeOfMovementDetail.getJoint());
		}
	}

	private void instanceControlsPopulateMovement(MskJointMovementVo vo)
	{
		form.ctnDetails().lyrDetails().tabDetails().cmbMovement().newRow(vo.getMoveType(), vo.getMoveType().getIItemText());
		form.ctnDetails().lyrDetails().tabDetails().cmbMovement().setValue(vo.getMoveType());
		form.ctnDetails().lyrDetails().tabDetails().cmbAction().setValue(vo.getMoveAction());

		// WDEV-11598
		form.ctnDetails().lyrDetails().tabDetails().intEOR().setValue(vo.getMovEOR());
		form.ctnDetails().lyrDetails().tabDetails().intSOR().setValue(vo.getMovSOR());

		// form.ctnDetails().lyrDetails().tabDetails().intValue().setValue(vo.getMovEOR());
	}

	private HandRangeOfMovementVo instanceDataPopulate(HandRangeOfMovementVo voHandRangeOfMovement)
	{
		if (voHandRangeOfMovement == null)
			voHandRangeOfMovement = new HandRangeOfMovementVo();

		instanceDataPopulateHandRangeOfMovement(voHandRangeOfMovement);

		// New or update parent - return updated parent only..
		if (voHandRangeOfMovement.getID_HandRangeOfMovement() == null || form.getLocalContext().getUpdatingParent().equals(Boolean.TRUE))
			return voHandRangeOfMovement;
		else
			instanceDataPopulateMovements(voHandRangeOfMovement);

		return voHandRangeOfMovement;
	}

	private void instanceDataPopulateHandRangeOfMovement(HandRangeOfMovementVo voHandRangeOfMovement)
	{
		voHandRangeOfMovement.setAuthoringCP(form.ctnDetails().lyrDetails().tabHeader().customControlAuthoringHCP().getValue().getAuthoringHcp());
		voHandRangeOfMovement.setAuthoringDateTime(form.ctnDetails().lyrDetails().tabHeader().customControlAuthoringHCP().getValue().getAuthoringDateTime());
		voHandRangeOfMovement.setDominantHand(form.ctnDetails().lyrDetails().tabHeader().cmbDominantHand().getValue());
	}

	private boolean instanceDataPopulateRangeOfMovementDetail(RangeOfMovementDetailVo voRangeOfMovementDetail)
	{
		// if (form.ctnDetails().lyrDetails().tabDetails().cmbJoint().getValue() == null)
		// {
		// engine.showMessage("You must select a joint ");
		// return;
		// }

		voRangeOfMovementDetail.setGroup(form.ctnDetails().lyrDetails().tabDetails().cmbDigit().getValue());
		voRangeOfMovementDetail.setJoint(form.ctnDetails().lyrDetails().tabDetails().cmbJoint().getValue());
		voRangeOfMovementDetail.setLaterality(form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().getValue());

		if (!voRangeOfMovementDetail.getSelectedMovementsIsNotNull())
		{
			voRangeOfMovementDetail.setSelectedMovements(new MskJointMovementVoCollection());
		}

		MskJointMovementVo voMskJointMovement = new MskJointMovementVo();
		voMskJointMovement.setMoveAction(form.ctnDetails().lyrDetails().tabDetails().cmbAction().getValue());
		voMskJointMovement.setMoveType(form.ctnDetails().lyrDetails().tabDetails().cmbMovement().getValue());

		// WDEV-11598
		voMskJointMovement.setMovEOR(form.ctnDetails().lyrDetails().tabDetails().intEOR().getValue());
		voMskJointMovement.setMovSOR(form.ctnDetails().lyrDetails().tabDetails().intSOR().getValue());

		// voMskJointMovement.setMovEOR(form.ctnDetails().lyrDetails().tabDetails().intValue().getValue());

		String[] errors = validateUIRules();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		if (checkExits(voRangeOfMovementDetail.getSelectedMovements(), voMskJointMovement))
		{
			engine.showMessage("Combination of Action and Movement already exitst for current joint.");
			return false;
		}

		voRangeOfMovementDetail.setIsJoint(new Boolean(true));
		voRangeOfMovementDetail.getSelectedMovements().add(voMskJointMovement);

		return true;
	}

	private boolean checkExits(MskJointMovementVoCollection selectedMovements, MskJointMovementVo movement)
	{
		if (movement == null)
			throw new CodingRuntimeException("Logical error - movement to add can not be null");

		for (MskJointMovementVo movementInCollection : selectedMovements)
		{
			if (movement.getMoveActionIsNotNull() && movement.getMoveAction().equals(movementInCollection.getMoveAction()) && movement.getMoveTypeIsNotNull() && movement.getMoveTypeIsNotNull() && movement.getMoveType().equals(movementInCollection.getMoveType()) && (!movement.getID_MskJointMovementIsNotNull() || (movement.getID_MskJointMovementIsNotNull() && !movement.getID_MskJointMovement().equals(movementInCollection.getID_MskJointMovement()))))
				return true;
		}

		return false;
	}

	private void instanceDataPopulateMovements(HandRangeOfMovementVo voHandRangeOfMovement)
	{
		grdMovementRow lateralityRow, digitRow, jointRow;
		lateralityRow = findLateralityNode(form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().getValue());
		digitRow = checkForDigitNode(lateralityRow, form.ctnDetails().lyrDetails().tabDetails().cmbDigit().getValue());
		jointRow = checkForJointNode(digitRow, form.ctnDetails().lyrDetails().tabDetails().cmbJoint().getValue());

		RangeOfMovementDetailVo voCurrentRangeOfMovementDetail = (RangeOfMovementDetailVo) digitRow.getValue();
		voCurrentRangeOfMovementDetail.setJoint((MskJointVo) jointRow.getValue());

		// Still have to populate the selected movements
		voCurrentRangeOfMovementDetail.getSelectedMovements().clear();
		MskJointMovementVoCollection voCollSelectedMovements = new MskJointMovementVoCollection();
		for (int i = 0; i < jointRow.getRows().size(); i++)
			voCollSelectedMovements.add((MskJointMovementVo) jointRow.getRows().get(i).getValue());

		voCurrentRangeOfMovementDetail.setSelectedMovements(voCollSelectedMovements);

		// Now just find the detail within the collection and save it..
		if (voCurrentRangeOfMovementDetail.getID_MSkExamJointBonesDetail() != null)
		{
			for (int x = 0; x < voHandRangeOfMovement.getDetails().size(); x++)
				if (voHandRangeOfMovement.getDetails().get(x).getID_MSkExamJointBonesDetail().equals(voCurrentRangeOfMovementDetail.getID_MSkExamJointBonesDetail()))
				{
					voHandRangeOfMovement.getDetails().set(x, voCurrentRangeOfMovementDetail);
					break;
				}
		}
		else
			voHandRangeOfMovement.getDetails().add(voCurrentRangeOfMovementDetail);

	}

	/**
	 * Node population methods - Coded hierarchically from laterality through the details collection and detail followed by digit and joint
	 * 
	 * 
	 * This method is called twice to add the two basic nodes in the parent tree namely a row for Right Laterality and a node for Left laterality
	 */
	private void nodeLateralityPopulate(LateralityLRonly lkpLaterality)
	{
		grdMovementRow lateralityRow = form.grdMovement().getRows().newRow();
		lateralityRow.setColLaterality(lkpLaterality.getIItemText());
		lateralityRow.setcolLateralityForLookup(lkpLaterality);
		if (lkpLaterality.equals(LateralityLRonly.LEFT))
		{
			lateralityRow.setCollapsedImage(form.getImages().Core.AnswerBox_Left);
			lateralityRow.setExpandedImage(form.getImages().Core.AnswerBox_Left);
		}
		else
		{
			lateralityRow.setCollapsedImage(form.getImages().Core.AnswerBox_Right);
			lateralityRow.setExpandedImage(form.getImages().Core.AnswerBox_Right);
		}
		lateralityRow.setBackColor(Color.Beige);
		lateralityRow.setBold(true);
	}

	private void nodesDetailsPopulate(RangeOfMovementDetailVoCollection voCollRangeOfMovementDetail)
	{
		for (int i = 0; i < voCollRangeOfMovementDetail.size(); i++)
			nodeDetailPopulate(voCollRangeOfMovementDetail.get(i));
	}

	private void nodeDetailPopulate(RangeOfMovementDetailVo voRangeOfMovementDetail)
	{
		grdMovementRow lateralityRow = findLateralityNode(voRangeOfMovementDetail.getLaterality());
		try
		{
			nodeDigitPopulate(voRangeOfMovementDetail, lateralityRow);
		}
		catch (PresentationLogicException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		lateralityRow.setExpanded(true);
	}

	private boolean nodeDigitPopulate(RangeOfMovementDetailVo voRangeOfMovementDetail, grdMovementRow lateralityRow) throws PresentationLogicException
	{
		if (voRangeOfMovementDetail != null && lateralityRow != null)
		{
			boolean bExpanded = false;
			grdMovementRow digitRow;

			digitRow = checkForDigitNode(lateralityRow, voRangeOfMovementDetail.getGroup());
			digitRow.setColLaterality(voRangeOfMovementDetail.getGroup().getName());
			digitRow.setCollapsedImage(form.getImages().ICP.Phase);
			digitRow.setExpandedImage(form.getImages().ICP.Phase);
			digitRow.setValue(voRangeOfMovementDetail);

			if (voRangeOfMovementDetail.getID_MSkExamJointBonesDetail() == null)
				digitRow.setTextColor(Color.Red);

			nodeJointPopulate(voRangeOfMovementDetail, digitRow);

			if (voRangeOfMovementDetail.getSelectedMovements().size() > 0)
			{
				digitRow.setExpanded(true);
				bExpanded = true;
			}

			return bExpanded;
		}

		return false;
	}

	private void nodeJointPopulate(RangeOfMovementDetailVo voRangeOfMovementDetail, grdMovementRow digitRow) throws PresentationLogicException
	{
		if (voRangeOfMovementDetail.getJoint() != null && digitRow != null)
		{
			grdMovementRow jointRow;
			grdMovementRow movementRow = null;
			// Add the joint first , then the selected movements..
			jointRow = checkForJointNode(digitRow, voRangeOfMovementDetail.getJoint());

			jointRow.setColLaterality(voRangeOfMovementDetail.getJoint().getName());
			jointRow.setCollapsedImage(form.getImages().ICP.Component);
			jointRow.setExpandedImage(form.getImages().ICP.Component);
			jointRow.setValue(voRangeOfMovementDetail.getJoint());
			if (voRangeOfMovementDetail.getJoint().getID_MskJoints() == null || voRangeOfMovementDetail.getID_MSkExamJointBonesDetail() == null)
				jointRow.setTextColor(Color.Red);

			jointRow.getRows().clear();

			MskJointMovementVoCollection voCollMovements = voRangeOfMovementDetail.getSelectedMovements() == null ? null : voRangeOfMovementDetail.getSelectedMovements().sort(SortOrder.ASCENDING, true);

			if (voCollMovements != null)
			{
				for (int i = 0; i < voCollMovements.size(); i++)
				{
					MskJointMovementVo msjJointMovement = voCollMovements.get(i);

					movementRow = jointRow.getRows().newRow();

					movementRow.setColAction(msjJointMovement.getMoveAction() == null ? null : msjJointMovement.getMoveAction().getText());
					movementRow.setColMovement(msjJointMovement.getMoveType() == null ? null : msjJointMovement.getMoveType().getIItemText());
					// WDEV-11598
					movementRow.setColEOR(msjJointMovement.getMovEOR() == null ? "" : String.valueOf(msjJointMovement.getMovEOR()));
					movementRow.setColSOR(msjJointMovement.getMovSOR() == null ? "" : String.valueOf(msjJointMovement.getMovSOR()));
					// movementRow.setColValue(voCollMovements.get(i).getMovEOR() == null ? "" : String.valueOf(voCollMovements.get(i).getMovEOR()));
					movementRow.setCollapsedImage(form.getImages().ICP.Child);
					movementRow.setExpandedImage(form.getImages().ICP.Child);
					movementRow.setValue(msjJointMovement);

					if (msjJointMovement.getID_MskJointMovement() == null)
						movementRow.setTextColor(Color.Red);

					jointRow.setExpanded(true);
				}
			}
		}
	}

	/**
	 * 'New' methods - These methods create a new item, from HandRangeOfMovement through RangeOfMovementDetail in various guises and and a new MSKMovement collection
	 * 
	 */
	private void newInstance()
	{
		// New instance has been invoked for a parent instance with no current
		// selection made OR
		// with a parent that is not the Golden node..
		if (form.grdMovement().getValue() == null || (form.getLocalContext().getSelectedHandRangeOfMovementInstanceIsNotNull()))
			newHandRangeOfMovementInstance();

		// New instance has been invoked with a child node selected.
		if (form.grdMovement().getValue() instanceof RangeOfMovementDetailVo)
			newDigitConfigurationInstance();

		form.setMode(FormMode.EDIT);
	}

	/**
	 * Create a new HandRangeOfMovement instance and set the localContext SelectedParent with the newly created instance.
	 * 
	 */
	private void newHandRangeOfMovementInstance()
	{
		form.getLocalContext().setUpdatingParent(Boolean.TRUE);
		HandRangeOfMovementVo voNewParent = new HandRangeOfMovementVo();
		voNewParent.setDetails(new RangeOfMovementDetailVoCollection());
		form.getLocalContext().setSelectedHandRangeOfMovementInstance(voNewParent);

		voNewParent.setAuthoringCP((HcpLiteVo) domain.getHcpLiteUser());
		voNewParent.setAuthoringDateTime(new DateTime());

		clearHandRangeOfMovementInstanceControls();
		instanceControlsPopulateHandRangeOfMovement(voNewParent);
		form.setMode(FormMode.EDIT);
	}

	/**
	 * Update the HandRangeOfMovement
	 */
	private void updateHandRangeOfMovementInstance()
	{
		form.getLocalContext().setUpdatingParent(Boolean.TRUE);
		form.setMode(FormMode.EDIT);
	}

	/**
	 * Create a new RangeOfMovementDetailsVo Populate the Digit combo box with the digits that are not yet configured for this modality.
	 * 
	 */
	private void newDigitConfigurationInstance()
	{
		form.getLocalContext().setUpdatingParent(Boolean.FALSE);
		clearMovementInstanceControls(true);

		// Maybe set the laterality here?
		form.getLocalContext().setSelectedRangeOfMovementDetailInstance(new RangeOfMovementDetailVo());
		listUnUsedDigits();
		form.setMode(FormMode.EDIT);
	}

	/**
	 * Create a new RangeOfMovementDetailsVo Populate the newly created RangeOfMovementDetails with the laterality and Digit which have been set by where in the tree the menu option to create a new joint was chosen.
	 */
	private void newJointConfigurationInstance()
	{
		form.getLocalContext().setUpdatingParent(Boolean.FALSE);

		if (listUnUsedJoints() == false)
			return;

		clearMovementInstanceControls(true);
		RangeOfMovementDetailVo voNewROmDetail = new RangeOfMovementDetailVo();
		voNewROmDetail.setLaterality(form.getLocalContext().getSelectedRangeOfMovementDetailInstance().getLaterality());
		voNewROmDetail.setGroup(form.getLocalContext().getSelectedRangeOfMovementDetailInstance().getGroup());
		form.getLocalContext().setSelectedRangeOfMovementDetailInstance(voNewROmDetail);

		// Set the mode at the end of this method.
		form.setMode(FormMode.EDIT);
		instanceControlPopulateRangeOfMovementDetail(voNewROmDetail);

		form.ctnDetails().lyrDetails().tabDetails().cmbDigit().setEnabled(false);
		form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().setEnabled(false);
	}

	/**
	 * Create a new MskJointVo instance hosted by a single instance collection of the same type
	 * 
	 * 
	 */
	private void newMovementConfigurationInstance()
	{
		form.getLocalContext().setUpdatingParent(Boolean.FALSE);

		clearMovementInstanceControls(true);
		RangeOfMovementDetailVo voNewROmDetail = form.getLocalContext().getSelectedRangeOfMovementDetailInstance();

		// This should be at the end of this method.
		form.setMode(FormMode.EDIT);

		if (!voNewROmDetail.getSelectedMovementsIsNotNull())
		{
			voNewROmDetail.setSelectedMovements(new MskJointMovementVoCollection());
		}

		instanceControlPopulateRangeOfMovementDetail(voNewROmDetail);

		loadMovementsForJoint(domain.listMovementsForJoint(form.ctnDetails().lyrDetails().tabDetails().cmbJoint().getValue()));

		form.ctnDetails().lyrDetails().tabDetails().cmbDigit().setEnabled(false);
		form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().setEnabled(false);
		form.ctnDetails().lyrDetails().tabDetails().cmbJoint().setEnabled(false);
	}

	/**
	 * Lists all configured digit joints from the domain and sets the forms joint combo with the joints that have not been configured
	 * 
	 */
	private boolean listUnUsedJoints()
	{
		form.ctnDetails().lyrDetails().tabDetails().cmbJoint().clear();
		MskJointVoCollection voCollConfiguredJoints = domain.listDigitJoints();
		for (int i = 0; i < voCollConfiguredJoints.size(); i++)
		{
			boolean bFound = false;
			for (int j = 0; j < form.grdMovement().getSelectedRow().getRows().size(); j++)
			{
				if (form.grdMovement().getSelectedRow().getRows().get(j).getValue() instanceof MskJointVo && form.grdMovement().getSelectedRow().getRows().get(j).getValue().equals(voCollConfiguredJoints.get(i)))
				{
					bFound = true;
					break;
				}
			}

			if (bFound == false)
				form.ctnDetails().lyrDetails().tabDetails().cmbJoint().newRow(voCollConfiguredJoints.get(i), voCollConfiguredJoints.get(i).getName());

		}

		if (form.ctnDetails().lyrDetails().tabDetails().cmbJoint() == null)
		{
			engine.showMessage("All joints configured for this Digit");
			return false;
		}
		else
			return true;
	}

	private void removeMovementInstance()
	{
		form.getLocalContext().setUpdatingParent(Boolean.FALSE);

		MskJointMovementVo voSelectedMovement = (MskJointMovementVo) form.grdMovement().getSelectedRow().getValue();
		form.grdMovement().removeSelectedRow();

		if (voSelectedMovement.getID_MskJointMovement() != null)
			saveWithoutCheck();

		updateContextMenusState();
	}

	private void reselectUpdatedNode()
	{
		// Pattern demands that the last updated node is displayed
		if (form.getLocalContext().getUpdatedHROM() != null)
			form.grdMovement().setValue(form.getLocalContext().getUpdatedHROM());

		getSelectedInstance();

	}

	private void populateRecordBrowser(HandRangeOfMovementVoCollection voCollHandRangeOfMovements)
	{
		if (voCollHandRangeOfMovements == null)
			return;

		form.recbrHandRangeOfMovements().clear();
		for (int i = 0; i < voCollHandRangeOfMovements.size(); i++)
		{
			if (form.getGlobalContext().Core.getCurrentClinicalContact() != null && voCollHandRangeOfMovements.get(i).getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
			{
				form.recbrHandRangeOfMovements().newRow(voCollHandRangeOfMovements.get(i), buildBrowserLine(voCollHandRangeOfMovements.get(i)), null, Color.Green);
				form.recbrHandRangeOfMovements().setValue(voCollHandRangeOfMovements.get(i));
				selectHandRangeOfMovement();
			}
			else
			{
				form.recbrHandRangeOfMovements().newRow(voCollHandRangeOfMovements.get(i), buildBrowserLine(voCollHandRangeOfMovements.get(i)));
			}
		}

		if (form.recbrHandRangeOfMovements().size() > 0)
			selectHandRangeOfMovement();

	}

	/*
	 * private void listAvailableDigitJoints() { MskJointVoCollection voCollConfiguredJoints = domain.listDigitJoints(); if (voCollConfiguredJoints == null) return;
	 * 
	 * for (int i = 0; i < voCollConfiguredJoints.size(); i++) form.ctnDetails().lyrDetails().tabDetails().cmbJoint().newRow(voCollConfiguredJoints.get(i), voCollConfiguredJoints.get(i).getName()); }
	 */

	private void populateTree(HandRangeOfMovementVo voHandRangeOfMovement)
	{
		if (voHandRangeOfMovement.getDetails() != null)
			populateGrid(voHandRangeOfMovement.getDetails());
	}

	private void populateGrid(RangeOfMovementDetailVoCollection voCollRangeOfMovementDetails)
	{
		form.grdMovement().getRows().clear();
		// Add Left and Right Lateralitites..
		nodeLateralityPopulate(LateralityLRonly.LEFT);
		nodeLateralityPopulate(LateralityLRonly.RIGHT);

		if (voCollRangeOfMovementDetails != null)
			nodesDetailsPopulate(voCollRangeOfMovementDetails);
	}

	private grdMovementRow findLateralityNode(LateralityLRonly lkpLaterality)
	{
		GenForm.grdMovementRow lateralityRow = null;
		for (int i = 0; i < form.grdMovement().getRows().size(); i++)
		{
			if (form.grdMovement().getRows().get(i).getcolLateralityForLookup().equals(lkpLaterality))
			{
				lateralityRow = form.grdMovement().getRows().get(i);
				break;
			}
		}

		if (lateralityRow == null)
			throw new CodingRuntimeException("Laterality row expected but not found.");

		return lateralityRow;
	}

	private grdMovementRow checkForDigitNode(grdMovementRow lateralityRow, MskGroupLiteVo voMskGroup)
	{
		if (lateralityRow == null || voMskGroup == null)
			throw new CodingRuntimeException("Digit row check only in the context of a laterality and group");

		for (int i = 0; i < lateralityRow.getRows().size(); i++)
		{
			RangeOfMovementDetailVo vo = (RangeOfMovementDetailVo) lateralityRow.getRows().get(i).getValue();
			if (vo.getGroup().equals(voMskGroup))
				return lateralityRow.getRows().get(i);
		}

		grdMovementRow digitRow = lateralityRow.getRows().newRow();

		if (voMskGroup.getID_MskGroups() == null)
			digitRow.setTextColor(Color.Red);

		return digitRow;
	}

	private grdMovementRow checkForJointNode(grdMovementRow digitRow, MskJointVo voMskJoint)
	{
		if (digitRow == null || voMskJoint == null)
			throw new CodingRuntimeException("Digit row check only in the context of a laterality and group");

		for (int i = 0; i < digitRow.getRows().size(); i++)
		{
			if (digitRow.getRows().get(i).getValue().equals(voMskJoint))
				return digitRow.getRows().get(i);
		}

		grdMovementRow movementRow = digitRow.getRows().newRow();

		if (voMskJoint.getID_MskJoints() == null)
			movementRow.setTextColor(Color.Red);

		return movementRow;
	}

	private void listUnUsedDigits()
	{
		form.ctnDetails().lyrDetails().tabDetails().cmbDigit().clear();
		MskGroupLiteVoCollection voCollDigitGroups = domain.listDigitGroups();
		if (voCollDigitGroups != null)
			for (int i = 0; i < voCollDigitGroups.size(); i++)
			{
				grdMovementRow latRow = form.grdMovement().getSelectedRow();
				if (latRow != null)
				{
					boolean bFound = false;
					for (int j = 0; j < latRow.getRows().size(); j++)
					{
						if (latRow.getRows().get(j).getValue() instanceof RangeOfMovementDetailVo)
						{
							RangeOfMovementDetailVo vo = (RangeOfMovementDetailVo) latRow.getRows().get(j).getValue();
							if (vo.getGroup().equals(voCollDigitGroups.get(i)))
							{
								bFound = true;
								break;
							}
						}
					}

					if (bFound == false)
						form.ctnDetails().lyrDetails().tabDetails().cmbDigit().newRow(voCollDigitGroups.get(i), voCollDigitGroups.get(i).getName());

				}
			}
	}

	private void getSelectedInstance()
	{
		// In update mode we can select nodes without displaying anything but
		// the context
		// menus can change based on what's selected so we need to update them
		if (form.getMode().equals(FormMode.EDIT))
		{
			updateContextMenusState();
			return;
		}

		if (form.grdMovement().getValue() instanceof RangeOfMovementDetailVo)
		{
			form.getLocalContext().setSelectedRangeOfMovementDetailInstance((RangeOfMovementDetailVo) form.grdMovement().getValue());
			instanceControlPopulateRangeOfMovementDetail(form.getLocalContext().getSelectedRangeOfMovementDetailInstance());
		}

		updateControlsState();
	}

	private boolean save()
	{
		boolean boolRet = false;

		// WDEV-13423
		// Avoided an ugly NPE
		if (Boolean.TRUE.equals(form.getLocalContext().getUpdatingParent()))
		{
			boolRet = saveWithoutCheck();
		}
		else
		{
			if (!Boolean.TRUE.equals(form.getLocalContext().getHasDataComitted()))
			{
				// Validate UI rules
				String[] errorsUI = validateMandatoryUIRules();

				if (errorsUI != null && errorsUI.length > 0)
				{
					engine.showErrors(errorsUI);
					return false;
				}
			}

			if (form.ctnDetails().lyrDetails().tabDetails().cmbAction().isEnabled() == true)
			{
				if (form.ctnDetails().lyrDetails().tabDetails().cmbAction().getValue() != null || form.ctnDetails().lyrDetails().tabDetails().cmbMovement().getValue() != null || form.ctnDetails().lyrDetails().tabDetails().intEOR().getValue() != null || form.ctnDetails().lyrDetails().tabDetails().intSOR().getValue() != null)
				{
					form.getGlobalContext().Core.setYesNoDialogMessage("You have entered movement data without clicking the 'Add' button. Do you want to add the unsaved movement.");
					engine.open(form.getForms().Core.YesNoDialog);
				}
				else
				{
					boolRet = saveWithoutCheck();
				}
			}
			else
			// update a child
			{
				grdMovementRow rowToUpdate = findUpdatedMskMovementVo();

				MskJointMovementVo voMovementToUpdate = (MskJointMovementVo) rowToUpdate.getValue();

				// WDEV-11598
				voMovementToUpdate.setMovEOR(form.ctnDetails().lyrDetails().tabDetails().intEOR().getValue());
				voMovementToUpdate.setMovSOR(form.ctnDetails().lyrDetails().tabDetails().intSOR().getValue());
				rowToUpdate.setColEOR(voMovementToUpdate.getMovEORIsNotNull() ? voMovementToUpdate.getMovEOR().toString() : "");
				rowToUpdate.setColSOR(voMovementToUpdate.getMovSORIsNotNull() ? voMovementToUpdate.getMovSOR().toString() : "");
				// voMovementToUpdate.setMovEOR(form.ctnDetails().lyrDetails().tabDetails().intValue().getValue());
				// Integer intValue = form.ctnDetails().lyrDetails().tabDetails().intValue().getValue();
				// rowToUpdate.setColValue(intValue != null?intValue.toString():"");

				rowToUpdate.setValue(voMovementToUpdate);
				boolRet = saveWithoutCheck();
			}
		}
		return boolRet;
	}

	private boolean saveWithoutCheck()
	{
		HandRangeOfMovementVo voHandRangeOfMovement = instanceDataPopulate(form.getLocalContext().getSelectedHandRangeOfMovementInstance());

		if (voHandRangeOfMovement != null && voHandRangeOfMovement.getClinicalContact() == null)
		{
			voHandRangeOfMovement.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		}

		String[] arrErrors = voHandRangeOfMovement.validate();

		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		try
		{
			form.getLocalContext().setSelectedHandRangeOfMovementInstance(domain.saveHandRangeOfMovement(voHandRangeOfMovement));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		// WDEV-13423
		// Only update child when not updating parent
		if (!Boolean.TRUE.equals(form.getLocalContext().getUpdatingParent()))
		{
			setUpdatedChild();
		}

		return true;
	}

	// We need to store the node which was last updated
	private void setUpdatedChild()
	{
		if (form.ctnDetails().lyrDetails().tabDetails().cmbJoint().getValue() == null || form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().getValue() == null)
			return;

		form.getLocalContext().setUpdatedHROM(getDetailForLateralityDigitJoint(form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().getValue(), form.ctnDetails().lyrDetails().tabDetails().cmbDigit().getValue(), form.ctnDetails().lyrDetails().tabDetails().cmbJoint().getValue()));
	}

	private grdMovementRow findUpdatedMskMovementVo()
	{
		grdMovementRow latRow = findLateralityNode(form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().getValue());
		grdMovementRow digitRow = checkForDigitNode(latRow, form.ctnDetails().lyrDetails().tabDetails().cmbDigit().getValue());
		grdMovementRow jointRow = checkForJointNode(digitRow, form.ctnDetails().lyrDetails().tabDetails().cmbJoint().getValue());
		grdMovementRow movementRow = findMovementNode(jointRow, form.ctnDetails().lyrDetails().tabDetails().cmbAction().getValue(), form.ctnDetails().lyrDetails().tabDetails().cmbMovement().getValue());

		return movementRow;
	}

	private grdMovementRow findMovementNode(grdMovementRow jointRow, ims.spinalinjuries.vo.lookups.RangeOfMovementAction lkpRomAction, ims.spinalinjuries.vo.lookups.MskJointsMovements lkpRomMovement)
	{
		grdMovementRow row = null;
		for (int i = 0; i < jointRow.getRows().size(); i++)
		{
			String movementValue = jointRow.getRows().get(i).getColMovement();
			String actionValue = jointRow.getRows().get(i).getColAction();
			if (movementValue != null && actionValue != null && lkpRomMovement != null && movementValue.equals(lkpRomMovement.getIItemText()) && actionValue.equals(lkpRomAction.getIItemText()))
			{
				row = jointRow.getRows().get(i);
				break;
			}
		}

		return row;
	}

	/**
	 * Invoked as part of the save routine. The user may have entered data in the details tab and not bothered clicking ok. This method counts the vo fields to decide if it should promote the unsaved data entry to the hierarchy grid before saving.
	 */

	public String[] validateUIRules()
	{
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();

		if (form.ctnDetails().lyrDetails().tabDetails().cmbAction().getValue() == null)
			listOfErrors.add("Please enter an Action.");

		if (form.ctnDetails().lyrDetails().tabDetails().cmbDigit().getValue() == null)
			listOfErrors.add("Please enter a Digit.");

		if (form.ctnDetails().lyrDetails().tabDetails().cmbJoint().getValue() == null)
			listOfErrors.add("Please enter a Joint.");

		if (form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().getValue() == null)
			listOfErrors.add("Please enter a Laterality.");

		if (form.ctnDetails().lyrDetails().tabDetails().cmbMovement().getValue() == null)
			listOfErrors.add("Please enter a Movement.");

		// WDEV-11598
		if (form.ctnDetails().lyrDetails().tabDetails().intEOR().getValue() == null)
			listOfErrors.add("Please enter EOR value.");
		if (form.ctnDetails().lyrDetails().tabDetails().intSOR().getValue() == null)
			listOfErrors.add("Please enter SOR value.");
		// if (form.ctnDetails().lyrDetails().tabDetails().intValue().getValue() == null)
		// listOfErrors.add("Please enter a Value.");

		int errorCount = listOfErrors.size();
		if (errorCount == 0)
		{
			return null;
		}
		String[] result = new String[errorCount];
		listOfErrors.toArray(result);

		return result;
	}

	public String[] validateMandatoryUIRules()
	{
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();

		if (form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().getValue() == null)
			listOfErrors.add("Laterality is mandatory.");

		if (form.ctnDetails().lyrDetails().tabDetails().cmbDigit().getValue() == null)
			listOfErrors.add("Digit is mandatory.");

		if (form.ctnDetails().lyrDetails().tabDetails().cmbJoint().getValue() == null)
			listOfErrors.add("Joint is mandatory.");

		if (form.ctnDetails().lyrDetails().tabDetails().cmbMovement().getValue() == null)
			listOfErrors.add("Movement is mandatory.");

		if (form.ctnDetails().lyrDetails().tabDetails().cmbAction().getValue() == null)
			listOfErrors.add("Action is mandatory.");

		if (form.ctnDetails().lyrDetails().tabDetails().intEOR().getValue() == null)
			listOfErrors.add("EOR value is mandatory.");

		if (form.ctnDetails().lyrDetails().tabDetails().intSOR().getValue() == null)
			listOfErrors.add("SOR value is mandatory.");

		int errorCount = listOfErrors.size();
		if (errorCount == 0)
		{
			return null;
		}
		String[] result = new String[errorCount];
		listOfErrors.toArray(result);

		return result;
	}

	public void updateControlsState()
	{
		// The new button
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectedHandRangeOfMovementInstance() == null);

		// The collapsible container
		form.ctnDetails().setCollapsed(form.getLocalContext().getSelectedHandRangeOfMovementInstance() == null);

		// The empty tab
		if (form.grdMovement().getValue() == null)
			form.ctnDetails().lyrDetails().showtabEmpty();

		// The Parent tab
		setParentTabVisability();

		// The details tab
		setDetailsTabVisibility();

		// Pick a tab to show
		chooseTab();

		// The context menus
		updateContextMenusState();

		setNodeSelection(form.getMode().equals(FormMode.VIEW));
	}

	private void chooseTab()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			ValueObject vo = form.grdMovement().getValue();

			// In view mode just show the selected node
			if (vo instanceof MskJointMovementVo)
				form.ctnDetails().lyrDetails().showtabDetails();
			else
			{
				if (form.getLocalContext().getSelectedHandRangeOfMovementInstance() == null)
					form.ctnDetails().lyrDetails().showtabEmpty();
				else
					form.ctnDetails().lyrDetails().showtabHeader();
			}
		}
		else
		{
			boolean bNewParent = form.getLocalContext().getSelectedHandRangeOfMovementInstanceIsNotNull() && form.getLocalContext().getSelectedHandRangeOfMovementInstance().getID_HandRangeOfMovement() == null;

			if (form.getLocalContext().getUpdatingParent().equals(Boolean.TRUE) || bNewParent)
			{
				form.ctnDetails().lyrDetails().showtabHeader();
			}
			else
			{
				form.ctnDetails().lyrDetails().showtabDetails();
			}
		}
	}

	private void setParentTabVisability()
	{
		form.ctnDetails().lyrDetails().tabHeader().setHeaderVisible(form.getLocalContext().getSelectedHandRangeOfMovementInstanceIsNotNull());
		enableParentControls();
	}

	private void setDetailsTabVisibility()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			// In view mode, make the details tab visible if a detail instance
			// is selected in the hierarchy grid.
			// form.ctnDetails().lyrDetails().tabDetails().setHeaderVisible(form.grdMovement().getValue()
			// instanceof HandRangeOfMovementDetailVo);
		}
		else
		{
			// In edit mode, make the details tab visible if a hierarchy item
			// has been selected and we're not
			// editing a parent.
			form.ctnDetails().lyrDetails().tabDetails().setHeaderVisible(form.getLocalContext().getSelectedHandRangeOfMovementInstanceIsNotNull() && form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE));
			setAddApplyCaption();
		}

		enableDetailsButtons();
	}

	private void setAddApplyCaption()
	{
		form.ctnDetails().lyrDetails().tabDetails().btnOK().setText("Add");

		if (form.getLocalContext().getSelectedRangeOfMovementDetailInstance() == null && (form.grdMovement().getValue() instanceof RangeOfMovementDetailVo))
			form.ctnDetails().lyrDetails().tabDetails().btnOK().setText("Apply");

	}

	private void updateContextMenusState()
	{
		boolean bViewMode = form.getMode().equals(FormMode.VIEW);
		form.getContextMenus().getHandRangeOfMovementNEW_PARENTItem().setVisible(bViewMode && form.getLocalContext().getSelectedHandRangeOfMovementInstance() == null);

		boolean boolParentHasBeenSaved = bViewMode && form.getLocalContext().getSelectedHandRangeOfMovementInstance() != null && form.getLocalContext().getSelectedHandRangeOfMovementInstance().getID_HandRangeOfMovement() != null;
		form.getContextMenus().getHandRangeOfMovementUPDATE_PARENTItem().setVisible(boolParentHasBeenSaved);

		boolean boolRowSelected = form.grdMovement().getSelectedRow() != null;
		boolean boolLateralityRowSelected = boolRowSelected && form.grdMovement().getSelectedRow().getParentRow() == null;
		boolean boolGroupRowSelected = bViewMode && boolRowSelected && form.grdMovement().getSelectedRow().getValue() instanceof RangeOfMovementDetailVo;
		boolean boolJointRowSelected = boolRowSelected && form.grdMovement().getSelectedRow().getValue() instanceof MskJointVo;
		boolean boolMovementRowSelected = boolRowSelected && form.grdMovement().getSelectedRow().getValue() instanceof MskJointMovementVo;

		form.getContextMenus().getHandRangeOfMovementNEW_DETAILItem().setVisible(boolLateralityRowSelected);
		if (boolLateralityRowSelected)
		{
			if (form.grdMovement().getSelectedRow().getColLaterality() != null && form.grdMovement().getSelectedRow().getColLaterality() != null)
				form.getContextMenus().getHandRangeOfMovementNEW_DETAILItem().setText("Add digit for " + form.grdMovement().getSelectedRow().getColLaterality() + " laterality");

			form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().setValue(form.grdMovement().getSelectedRow().getcolLateralityForLookup());
			form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().setEnabled(bViewMode);
		}

		form.getContextMenus().getHandRangeOfMovementNEW_JOINTItem().setVisible(boolGroupRowSelected);
		if (boolGroupRowSelected)
		{
			if (form.getLocalContext().getSelectedRangeOfMovementDetailInstance() != null && form.getLocalContext().getSelectedRangeOfMovementDetailInstance().getGroup() != null)
				form.getContextMenus().getHandRangeOfMovementNEW_JOINTItem().setText("Add joint to " + form.getLocalContext().getSelectedRangeOfMovementDetailInstance().getGroup().getName());
		}

		form.getContextMenus().getHandRangeOfMovementNEW_MOVEMENTItem().setVisible(boolJointRowSelected);
		if (boolJointRowSelected)
		{
			if (form.getLocalContext().getSelectedRangeOfMovementDetailInstance() != null && form.getLocalContext().getSelectedRangeOfMovementDetailInstance().getJoint() != null)
				form.getContextMenus().getHandRangeOfMovementNEW_MOVEMENTItem().setText("Add movements for " + form.getLocalContext().getSelectedRangeOfMovementDetailInstance().getJoint().getName());
		}

		form.getContextMenus().getHandRangeOfMovementREMOVE_DETAILItem().setVisible(boolMovementRowSelected);
		form.getContextMenus().getHandRangeOfMovementUPDATE_DETAILItem().setVisible(boolMovementRowSelected);

	}

	/**
	 * Set's the visibility of the OK and Cancel buttons. Essentially if we are adding a new child then we want to see both buttons Otherwise we don't
	 */
	private void enableDetailsButtons()
	{
		if (form.grdMovement().getSelectedRow() != null && form.grdMovement().getSelectedRow().getValue() instanceof MskJointMovementVo)
		{
			setUIForUpdateValue();
			return;
		}

		boolean boolAddnew = form.getMode().equals(FormMode.EDIT) && form.ctnDetails().lyrDetails().tabDetails().isHeaderVisible() && form.getLocalContext().getSelectedRangeOfMovementDetailInstance() != null && (form.getLocalContext().getSelectedRangeOfMovementDetailInstance().getID_MSkExamJointBonesDetail() == null || form.getLocalContext().getSelectedRangeOfMovementDetailInstance().getID_MSkExamJointBonesDetail() != null && form.ctnDetails().lyrDetails().tabDetails().cmbAction().getValue() == null);

		form.ctnDetails().lyrDetails().tabDetails().btnOK().setVisible(boolAddnew);
		form.ctnDetails().lyrDetails().tabDetails().btnCancelDetails().setVisible(boolAddnew);

		boolean boolEdit = form.getMode().equals(FormMode.EDIT) && form.ctnDetails().lyrDetails().tabDetails().isHeaderVisible() && form.getLocalContext().getSelectedRangeOfMovementDetailInstance() != null && form.getLocalContext().getSelectedRangeOfMovementDetailInstance().getID_MSkExamJointBonesDetail() != null;

		// If we are configuring a digit then we want to disable this combo
		// until we're finished
		form.ctnDetails().lyrDetails().tabDetails().cmbDigit().setEnabled(boolAddnew);

		form.ctnDetails().lyrDetails().tabDetails().cmbAction().setEnabled(boolEdit || boolAddnew);
		form.ctnDetails().lyrDetails().tabDetails().cmbJoint().setEnabled(boolEdit || boolAddnew);
		// form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().setEnabled(boolEdit
		// || boolAddnew);
		form.ctnDetails().lyrDetails().tabDetails().cmbMovement().setEnabled(boolEdit || boolAddnew);

		// WDEV-11598
		form.ctnDetails().lyrDetails().tabDetails().intEOR().setEnabled(boolEdit || boolAddnew);
		form.ctnDetails().lyrDetails().tabDetails().intSOR().setEnabled(boolEdit || boolAddnew);
		// form.ctnDetails().lyrDetails().tabDetails().intValue().setEnabled(boolEdit || boolAddnew);
	}

	private void setUIForUpdateValue()
	{
		form.ctnDetails().lyrDetails().tabDetails().cmbAction().setEnabled(false);
		form.ctnDetails().lyrDetails().tabDetails().cmbDigit().setEnabled(false);
		form.ctnDetails().lyrDetails().tabDetails().cmbJoint().setEnabled(false);
		form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().setEnabled(false);
		form.ctnDetails().lyrDetails().tabDetails().cmbMovement().setEnabled(false);
		// WDEV-11598
		form.ctnDetails().lyrDetails().tabDetails().intEOR().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.ctnDetails().lyrDetails().tabDetails().intSOR().setEnabled(FormMode.EDIT.equals(form.getMode()));
		// form.ctnDetails().lyrDetails().tabDetails().intValue().setEnabled(false);
	}

	private void enableParentControls()
	{
		Boolean boolEnabled = new Boolean(form.getMode().equals(FormMode.EDIT));
		form.ctnDetails().lyrDetails().tabHeader().cmbDominantHand().setEnabled(boolEnabled.booleanValue());
		form.ctnDetails().lyrDetails().tabHeader().customControlAuthoringHCP().setEnabledAuthoringHCP(boolEnabled);
		form.ctnDetails().lyrDetails().tabHeader().customControlAuthoringHCP().setEnabledDateTime(boolEnabled);
	}

	private void resetContextVariables()
	{
		form.getLocalContext().setUpdatingParent(Boolean.FALSE);
		form.getLocalContext().setSelectedHandRangeOfMovementInstance(null);

		form.getLocalContext().setSelectedRangeOfMovementDetailInstance(null);

		form.getLocalContext().setHasDataComitted(Boolean.FALSE);
	}

	String buildBrowserLine(HandRangeOfMovementVo record)
	{
		if (record == null)
			return "Unknown Range of Movement";

		String result = "";
		result += "Author:  ";
		result += record.getAuthoringCP() != null ? record.getAuthoringCP().toString() : "<unknown>";
		result += " date: ";
		result += record.getAuthoringDateTime() != null ? record.getAuthoringDateTime().toString() : "<unknown>";

		return result;
	}

	private void clearHandRangeOfMovementInstanceControls()
	{
		form.ctnDetails().lyrDetails().tabHeader().customControlAuthoringHCP().setValue(null);
		form.ctnDetails().lyrDetails().tabHeader().cmbDominantHand().setValue(null);
	}

	private void clearMovementInstanceControls(boolean bAll)
	{
		if (bAll == true)
		{
			form.ctnDetails().lyrDetails().tabDetails().cmbDigit().setValue(null);
			form.ctnDetails().lyrDetails().tabDetails().cmbLaterality().setValue(null);
			form.ctnDetails().lyrDetails().tabDetails().cmbJoint().setValue(null);
		}

		form.ctnDetails().lyrDetails().tabDetails().cmbAction().setValue(null);
		form.ctnDetails().lyrDetails().tabDetails().cmbMovement().setValue(null);
		// WDEV-11598
		form.ctnDetails().lyrDetails().tabDetails().intEOR().setValue(null);
		form.ctnDetails().lyrDetails().tabDetails().intSOR().setValue(null);
		// form.ctnDetails().lyrDetails().tabDetails().intValue().setValue(null);
	}

	/**
	 * Invoked when the user clicks OK to add a new element to the child array Basically we update the hierarchy grid with the newly added details clearing the control to facilitate new input. We then update the local context variable with the new child
	 * 
	 */
	private boolean promoteValidatedRom(RangeOfMovementDetailVo voRangeOfMovementDetail)
	{
		String strErrors[] = voRangeOfMovementDetail.validate(validateUIRules());

		if (strErrors != null && strErrors.length > 0)
		{
			// WDEV-11598
			engine.showErrors(strErrors);
			return false;
		}

		promoteChild(voRangeOfMovementDetail);
		clearMovementInstanceControls(false);

		return true;
	}

	private void updateMovementValue()
	{
		form.getLocalContext().setUpdatingParent(Boolean.FALSE);
		instanceControlPopulateRangeOfMovementDetail(form.getLocalContext().getSelectedRangeOfMovementDetailInstance());

		// WDEV-11598
		form.ctnDetails().lyrDetails().tabDetails().intSOR().setFocus();
		form.ctnDetails().lyrDetails().tabDetails().intEOR().setEnabled(true);
		form.ctnDetails().lyrDetails().tabDetails().intSOR().setEnabled(true);
		// form.ctnDetails().lyrDetails().tabDetails().intValue().setFocus();
		form.setMode(FormMode.EDIT);
		// form.ctnDetails().lyrDetails().tabDetails().intValue().setEnabled(true);
	}

	private void promoteChild(RangeOfMovementDetailVo voRangeOfMovementDetail)
	{
		if (voRangeOfMovementDetail == null)
			return;

		form.ctnDetails().lyrDetails().tabDetails().cmbDigit().setEnabled(false);
		form.ctnDetails().lyrDetails().tabDetails().cmbJoint().setEnabled(false);

		nodeDetailPopulate(voRangeOfMovementDetail);
	}

	private void selectionChanged()
	{
		// In update mode we can select nodes without displaying anything but
		// the context
		// menus can change based on what's selected so we need to update them
		if (form.getMode().equals(FormMode.EDIT))
		{
			updateContextMenusState();
			return;
		}

		LateralityLRonly lkpLaterality = null;
		RangeOfMovementDetailVo voRom = null;
		MskGroupLiteVo voDigit = null;
		MskJointVo voJoint = null;

		if (form.grdMovement().getSelectedRow().getValue() instanceof RangeOfMovementDetailVo)
		{
			form.getLocalContext().setSelectedRangeOfMovementDetailInstance((RangeOfMovementDetailVo) form.grdMovement().getValue());
		}
		else if (form.grdMovement().getSelectedRow().getValue() instanceof MskJointVo)
		{
			lkpLaterality = form.grdMovement().getSelectedRow().getParentRow().getParentRow().getcolLateralityForLookup();
			voRom = (RangeOfMovementDetailVo) form.grdMovement().getSelectedRow().getParentRow().getValue();
			voDigit = voRom.getGroup();
			voJoint = (MskJointVo) form.grdMovement().getSelectedRow().getValue();
			form.getLocalContext().setSelectedRangeOfMovementDetailInstance(getDetailForLateralityDigitJoint(lkpLaterality, voDigit, voJoint));
		}
		else if (form.grdMovement().getSelectedRow().getValue() instanceof MskJointMovementVo)
		{
			lkpLaterality = form.grdMovement().getSelectedRow().getParentRow().getParentRow().getParentRow().getcolLateralityForLookup();
			voRom = (RangeOfMovementDetailVo) form.grdMovement().getSelectedRow().getParentRow().getParentRow().getValue();
			voDigit = voRom.getGroup();
			voJoint = (MskJointVo) form.grdMovement().getSelectedRow().getParentRow().getValue();
			form.getLocalContext().setSelectedRangeOfMovementDetailInstance(getDetailForLateralityDigitJoint(lkpLaterality, voDigit, voJoint));
			instanceControlPopulateRangeOfMovementDetail(form.getLocalContext().getSelectedRangeOfMovementDetailInstance());
			instanceControlsPopulateMovement((MskJointMovementVo) form.grdMovement().getValue());
		}

		updateControlsState();

	}

	/**
	 * WDEV-4490 Function used for listing Joints records for a Group
	 */
	private void listJointsForGroup(MskJointVoCollection joints)
	{
		// Clear joints & movements
		form.ctnDetails().lyrDetails().tabDetails().cmbJoint().clear();
		form.ctnDetails().lyrDetails().tabDetails().cmbMovement().clear();

		if (joints == null)
			return;

		for (int i = 0; i < joints.size(); i++)
			form.ctnDetails().lyrDetails().tabDetails().cmbJoint().newRow(joints.get(i), joints.get(i).getName());
	}

	private void loadMovementsForJoint(MskJointsMovementsCollection lkpCollJointMovements)
	{
		form.ctnDetails().lyrDetails().tabDetails().cmbMovement().clear();

		for (int i = 0; i < lkpCollJointMovements.size(); i++)
			form.ctnDetails().lyrDetails().tabDetails().cmbMovement().newRow(lkpCollJointMovements.get(i), lkpCollJointMovements.get(i).getIItemText());
	}

	private AuthoringInformationVo getAuthoringInfo(HandRangeOfMovementVo voSelectedInstance)
	{
		AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
		voAuthoringInformation.setAuthoringDateTime(voSelectedInstance.getAuthoringDateTime());
		voAuthoringInformation.setAuthoringHcp(voSelectedInstance.getAuthoringCP());
		return voAuthoringInformation;
	}

	private void setNodeSelection(boolean boolSelect)
	{
		GenForm.grdMovementRow[] rows = form.grdMovement().getAllRows();
		for (int i = 0; i < rows.length; i++)
		{
			if (rows[i].getValue() instanceof RangeOfMovementDetailVo)
			{
				RangeOfMovementDetailVo vo = (RangeOfMovementDetailVo) rows[i].getValue();
				if (boolSelect == true)
					rows[i].setSelectable(true);
				else
					rows[i].setSelectable(vo.getID_MSkExamJointBonesDetail() == null);
			}
			else if (rows[i].getValue() instanceof MskJointVo)
			{
				MskJointVo vo = (MskJointVo) rows[i].getValue();
				if (boolSelect == true)
					rows[i].setSelectable(true);
				else
					rows[i].setSelectable(vo.getID_MskJoints() == null);
			}
			else if (rows[i].getValue() instanceof MskJointMovementVo)
			{
				MskJointMovementVo vo = (MskJointMovementVo) rows[i].getValue();
				if (boolSelect == true)
					rows[i].setSelectable(true);
				else
					rows[i].setSelectable(vo.getID_MskJointMovement() == null);
			}
		}
	}

	private RangeOfMovementDetailVo getDetailForLateralityDigitJoint(LateralityLRonly lkpLaterality, MskGroupLiteVo voGroup, MskJointVo voJoint)
	{
		if (lkpLaterality == null || voGroup == null || voJoint == null)
			return null;

		RangeOfMovementDetailVo voRom = null;
		for (int i = 0; i < form.getLocalContext().getSelectedHandRangeOfMovementInstance().getDetails().size(); i++)
		{
			if ((form.getLocalContext().getSelectedHandRangeOfMovementInstance().getDetails().get(i).getLaterality().equals(lkpLaterality) && form.getLocalContext().getSelectedHandRangeOfMovementInstance().getDetails().get(i).getGroup().equals(voGroup) && form.getLocalContext().getSelectedHandRangeOfMovementInstance().getDetails().get(i).getJoint().equals(voJoint)))
			{
				voRom = form.getLocalContext().getSelectedHandRangeOfMovementInstance().getDetails().get(i);
				break;
			}
		}

		if (voRom == null)
			throw new CodingRuntimeException("getDetailForLateralityDigitJoint failed in to find laterality group joint .");
		else
			return voRom;
	}

}
