//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.forms.handrangeofmovement;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class lyrDetailsLayer extends Layer
		{
			private static final long serialVersionUID = 1L;
			public static class tabHeaderContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbDominantHandComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.therapies.vo.lookups.DominantHand value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.therapies.vo.lookups.DominantHand value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.therapies.vo.lookups.DominantHand value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.therapies.vo.lookups.DominantHand value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.therapies.vo.lookups.DominantHand value)
					{
						return super.control.removeRow(value);
					}
					public ims.therapies.vo.lookups.DominantHand getValue()
					{
						return (ims.therapies.vo.lookups.DominantHand)super.control.getValue();
					}
					public void setValue(ims.therapies.vo.lookups.DominantHand value)
					{
						super.control.setValue(value);
					}
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Custom Controls
					ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 432, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ims.framework.FormUiLogic m_customControlAuthoringHCPForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 5, skipContextValidation);
					//ims.framework.Control m_customControlAuthoringHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(16), new Integer(16), new Integer(432), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 5), m_customControlAuthoringHCPForm, instance1 } );
					ims.framework.Control m_customControlAuthoringHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 5), m_customControlAuthoringHCPForm, instance1, Boolean.FALSE } );
					super.addControl(m_customControlAuthoringHCPControl);
					Menu[] menus1 = m_customControlAuthoringHCPForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus1.length; x++)
					{
						form.registerMenu(menus1[x]);
					}
			
					// Label Controls
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 24, 76, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Dominant Hand:", new Integer(1), null, new Integer(0)}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 152, 76, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbDominantHandTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbDominantHandTemp);
					cmbDominantHandComboBox cmbDominantHand = (cmbDominantHandComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDominantHandComboBox.class, m_cmbDominantHandTemp);
					super.addComboBox(cmbDominantHand);
				}
	
				public ims.core.forms.authoringinfo.IComponent customControlAuthoringHCP()
				{
					return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
				}
				public void setcustomControlAuthoringHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
				}
				public void setcustomControlAuthoringHCPVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setVisible(value);
				}
				public boolean iscustomControlAuthoringHCPVisible()
				{
					return ((ims.framework.Control)super.getControl(0)).isVisible();
				}
				public void setcustomControlAuthoringHCPEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setEnabled(value);
				}
				public boolean iscustomControlAuthoringHCPEnabled()
				{
					return ((ims.framework.Control)super.getControl(0)).isEnabled();
				}
				public cmbDominantHandComboBox cmbDominantHand()
				{
					return (cmbDominantHandComboBox)super.getComboBox(0);
				}
			}
			public static class tabDetailsContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbDigitComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.MskGroupLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.MskGroupLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.MskGroupLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.MskGroupLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.MskGroupLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.MskGroupLiteVo getValue()
					{
						return (ims.core.vo.MskGroupLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.MskGroupLiteVo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbActionComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value)
					{
						return super.control.removeRow(value);
					}
					public ims.spinalinjuries.vo.lookups.RangeOfMovementAction getValue()
					{
						return (ims.spinalinjuries.vo.lookups.RangeOfMovementAction)super.control.getValue();
					}
					public void setValue(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbMovementComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value)
					{
						return super.control.removeRow(value);
					}
					public ims.spinalinjuries.vo.lookups.MskJointsMovements getValue()
					{
						return (ims.spinalinjuries.vo.lookups.MskJointsMovements)super.control.getValue();
					}
					public void setValue(ims.spinalinjuries.vo.lookups.MskJointsMovements value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbJointComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.MskJointVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.MskJointVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.MskJointVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.MskJointVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.MskJointVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.MskJointVo getValue()
					{
						return (ims.core.vo.MskJointVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.MskJointVo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbLateralityComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.LateralityLRonly value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.LateralityLRonly getValue()
					{
						return (ims.core.vo.lookups.LateralityLRonly)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.LateralityLRonly value)
					{
						super.control.setValue(value);
					}
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 400, 82, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "EOR:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 400, 58, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "SOR:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 400, 10, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Action:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 400, 34, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Movement:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 24, 58, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Joint:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 24, 10, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 24, 34, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Digit:", new Integer(1), null, new Integer(0)}));
			
					// Button Controls
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 704, 104, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Clear", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 624, 104, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "OK", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 104, 32, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbDigitTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbDigitTemp);
					cmbDigitComboBox cmbDigit = (cmbDigitComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDigitComboBox.class, m_cmbDigitTemp);
					super.addComboBox(cmbDigit);
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 480, 8, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					ComboBox m_cmbActionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbActionTemp);
					cmbActionComboBox cmbAction = (cmbActionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActionComboBox.class, m_cmbActionTemp);
					super.addComboBox(cmbAction);
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 480, 32, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					ComboBox m_cmbMovementTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbMovementTemp);
					cmbMovementComboBox cmbMovement = (cmbMovementComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMovementComboBox.class, m_cmbMovementTemp);
					super.addComboBox(cmbMovement);
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 104, 56, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbJointTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbJointTemp);
					cmbJointComboBox cmbJoint = (cmbJointComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbJointComboBox.class, m_cmbJointTemp);
					super.addComboBox(cmbJoint);
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 104, 8, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbLateralityTemp);
					cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
					super.addComboBox(cmbLaterality);
			
					// IntBox Controls
					RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 480, 80, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 480, 56, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
				}
	
				public Button btnCancelDetails()
				{
					return (Button)super.getControl(7);
				}
				public Button btnOK()
				{
					return (Button)super.getControl(8);
				}
				public cmbDigitComboBox cmbDigit()
				{
					return (cmbDigitComboBox)super.getComboBox(0);
				}
				public cmbActionComboBox cmbAction()
				{
					return (cmbActionComboBox)super.getComboBox(1);
				}
				public cmbMovementComboBox cmbMovement()
				{
					return (cmbMovementComboBox)super.getComboBox(2);
				}
				public cmbJointComboBox cmbJoint()
				{
					return (cmbJointComboBox)super.getComboBox(3);
				}
				public cmbLateralityComboBox cmbLaterality()
				{
					return (cmbLateralityComboBox)super.getComboBox(4);
				}
				public IntBox intEOR()
				{
					return (IntBox)super.getControl(14);
				}
				public IntBox intSOR()
				{
					return (IntBox)super.getControl(15);
				}
			}
			public static class tabEmptyContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 132, 48, 513, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No details to display - Please select a target from one of the grids", new Integer(1), null, new Integer(1)}));
				}
	
			}
	
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 800, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabHeader = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Header", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
				tabHeaderContainer m_tabHeaderContainer = (tabHeaderContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHeaderContainer.class, m_tabHeader, factory);
				super.addContainer(m_tabHeader, m_tabHeaderContainer);
				ims.framework.utils.SizeInfo m_tabHeaderDesignSize = new ims.framework.utils.SizeInfo(800, 160);
				ims.framework.utils.SizeInfo m_tabHeaderRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
				m_tabHeaderContainer.setContext(form, appForm, m_tabHeader, loader, form_images_local, contextMenus, startControlID, m_tabHeaderDesignSize, m_tabHeaderRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 800, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Add Digit", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
				tabDetailsContainer m_tabDetailsContainer = (tabDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsContainer.class, m_tabDetails, factory);
				super.addContainer(m_tabDetails, m_tabDetailsContainer);
				ims.framework.utils.SizeInfo m_tabDetailsDesignSize = new ims.framework.utils.SizeInfo(800, 160);
				ims.framework.utils.SizeInfo m_tabDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
				m_tabDetailsContainer.setContext(form, appForm, m_tabDetails, loader, form_images_local, contextMenus, startControlID, m_tabDetailsDesignSize, m_tabDetailsRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 800, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabEmpty = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Empty", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
				tabEmptyContainer m_tabEmptyContainer = (tabEmptyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEmptyContainer.class, m_tabEmpty, factory);
				super.addContainer(m_tabEmpty, m_tabEmptyContainer);
				ims.framework.utils.SizeInfo m_tabEmptyDesignSize = new ims.framework.utils.SizeInfo(800, 160);
				ims.framework.utils.SizeInfo m_tabEmptyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper23.getWidth(), anchoringHelper23.getHeight());
				m_tabEmptyContainer.setContext(form, appForm, m_tabEmpty, loader, form_images_local, contextMenus, startControlID, m_tabEmptyDesignSize, m_tabEmptyRuntimeSize, startTabIndex, skipContextValidation);
			}
			public void hide()
			{
				tabHeader().setVisible(false);
				tabDetails().setVisible(false);
				tabEmpty().setVisible(false);
			}
			public void showtabHeader()
			{
				tabDetails().setVisible(false);
				tabEmpty().setVisible(false);
				tabHeader().setVisible(true);
			}
			public void showtabDetails()
			{
				tabHeader().setVisible(false);
				tabEmpty().setVisible(false);
				tabDetails().setVisible(true);
			}
			public void showtabEmpty()
			{
				tabHeader().setVisible(false);
				tabDetails().setVisible(false);
				tabEmpty().setVisible(true);
			}
	
			public tabHeaderContainer tabHeader()
			{
				return (tabHeaderContainer)super.layers.get(0);
			}
			public tabDetailsContainer tabDetails()
			{
				return (tabDetailsContainer)super.layers.get(1);
			}
			public tabEmptyContainer tabEmpty()
			{
				return (tabEmptyContainer)super.layers.get(2);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Layer Clasess
			lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
			super.addLayer(m_lyrDetailsLayer);
			m_lyrDetailsLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public lyrDetailsLayer lyrDetails()
		{
			return (lyrDetailsLayer)super.getLayer(0);
		}
	}
	public static class recbrHandRangeOfMovementsRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.therapies.vo.HandRangeOfMovementVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.therapies.vo.HandRangeOfMovementVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.therapies.vo.HandRangeOfMovementVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.therapies.vo.HandRangeOfMovementVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.therapies.vo.HandRangeOfMovementVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.therapies.vo.HandRangeOfMovementVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.therapies.vo.HandRangeOfMovementVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.therapies.vo.HandRangeOfMovementVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.therapies.vo.HandRangeOfMovementVo getValue()
		{
			return (ims.therapies.vo.HandRangeOfMovementVo)super.control.getValue();
		}
		public void setValue(ims.therapies.vo.HandRangeOfMovementVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdMovementRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdMovementRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColLateralityReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColLateralityReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColLateralityOpened()
		{
			super.row.showOpened(0);
		}
		public String getColLaterality()
		{
			return (String)super.row.get(0);
		}
		public void setColLaterality(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColLateralityTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDigitReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDigitReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDigitOpened()
		{
			super.row.showOpened(1);
		}
		public String getColDigit()
		{
			return (String)super.row.get(1);
		}
		public void setColDigit(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColDigitTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColJointReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColJointReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColJointOpened()
		{
			super.row.showOpened(2);
		}
		public String getColJoint()
		{
			return (String)super.row.get(2);
		}
		public void setColJoint(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColJointTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColActionReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColActionReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColActionOpened()
		{
			super.row.showOpened(3);
		}
		public String getColAction()
		{
			return (String)super.row.get(3);
		}
		public void setColAction(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColActionTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColMovementReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColMovementReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColMovementOpened()
		{
			super.row.showOpened(4);
		}
		public String getColMovement()
		{
			return (String)super.row.get(4);
		}
		public void setColMovement(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColMovementTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolLateralityForLookupReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolLateralityForLookupReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolLateralityForLookupOpened()
		{
			super.row.showOpened(5);
		}
		public ims.core.vo.lookups.LateralityLRonly getcolLateralityForLookup()
		{
			return (ims.core.vo.lookups.LateralityLRonly)super.row.get(5);
		}
		public void setcolLateralityForLookup(ims.core.vo.lookups.LateralityLRonly value)
		{
			super.row.set(5, value);
		}
		public void setCellcolLateralityForLookupTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColSORReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColSORReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColSOROpened()
		{
			super.row.showOpened(6);
		}
		public String getColSOR()
		{
			return (String)super.row.get(6);
		}
		public void setColSOR(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColSORTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColEORReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColEORReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColEOROpened()
		{
			super.row.showOpened(7);
		}
		public String getColEOR()
		{
			return (String)super.row.get(7);
		}
		public void setColEOR(String value)
		{
			super.row.set(7, value);
		}
		public void setCellColEORTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
		public grdMovementRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdMovementRow(super.row.getParent());
		}
		public grdMovementRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdMovementRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdMovementRowCollection collection;
	}
	public static class grdMovementRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdMovementRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdMovementRow get(int index)
		{
			return new grdMovementRow(super.collection.get(index));
		}
		public grdMovementRow newRow()
		{
			return new grdMovementRow(super.collection.newRow());
		}
		public grdMovementRow newRow(boolean autoSelect)
		{
			return new grdMovementRow(super.collection.newRow(autoSelect));
		}
		public grdMovementRow newRowAt(int index)
		{
			return new grdMovementRow(super.collection.newRowAt(index));
		}
		public grdMovementRow newRowAt(int index, boolean autoSelect)
		{
			return new grdMovementRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdMovementGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdMovementRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdMovementRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdMovementRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdMovementRow[] result = new GenForm.grdMovementRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdMovementRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdMovementRow[] getAllRows(GenForm.grdMovementRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdMovementRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdMovementRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdMovementRow[] result = new GenForm.grdMovementRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdMovementRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdMovementRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdMovementRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdMovementRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdMovementRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdMovementRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdMovementRowCollection getRows()
		{
			return new grdMovementRowCollection(super.grid.getRows());
		}
		public grdMovementRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdMovementRow(row);
		}
		public void setColLateralityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColLateralityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDigitHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDigitHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColJointHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColJointHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColActionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColActionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColMovementHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColMovementHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolLateralityForLookupHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolLateralityForLookupHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColSORHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColSORHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColEORHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColEORHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.CurrentClinicalContact", "_cvp_Core.CurrentClinicalContact").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentClinicalContact' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedHandRangeOfMovementInstance();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuHandRangeOfMovement = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuHandRangeOfMovementNEW_PARENTItem = factory.createMenuItem(startControlID.intValue() + 1, "New Hand Range Of Movement", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuHandRangeOfMovement.add(contextMenus.contextMenuHandRangeOfMovementNEW_PARENTItem);
		contextMenus.contextMenuHandRangeOfMovementUPDATE_PARENTItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Hand Range Of Movement", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuHandRangeOfMovement.add(contextMenus.contextMenuHandRangeOfMovementUPDATE_PARENTItem);
		contextMenus.contextMenuHandRangeOfMovementNEW_DETAILItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Digits to Hand Range Of Movement", true, false, new Integer(102116), true, true);
		contextMenus.contextMenuHandRangeOfMovement.add(contextMenus.contextMenuHandRangeOfMovementNEW_DETAILItem);
		contextMenus.contextMenuHandRangeOfMovementUPDATE_DETAILItem = factory.createMenuItem(startControlID.intValue() + 4, "Change Value for Movement", true, false, new Integer(103108), true, false);
		contextMenus.contextMenuHandRangeOfMovement.add(contextMenus.contextMenuHandRangeOfMovementUPDATE_DETAILItem);
		contextMenus.contextMenuHandRangeOfMovementREMOVE_DETAILItem = factory.createMenuItem(startControlID.intValue() + 5, "Remove Movement from Joint", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuHandRangeOfMovement.add(contextMenus.contextMenuHandRangeOfMovementREMOVE_DETAILItem);
		contextMenus.contextMenuHandRangeOfMovementNEW_JOINTItem = factory.createMenuItem(startControlID.intValue() + 6, "Add joints to ", true, false, new Integer(102116), true, true);
		contextMenus.contextMenuHandRangeOfMovement.add(contextMenus.contextMenuHandRangeOfMovementNEW_JOINTItem);
		contextMenus.contextMenuHandRangeOfMovementNEW_MOVEMENTItem = factory.createMenuItem(startControlID.intValue() + 7, "Add movements for joint", true, false, new Integer(102116), true, false);
		contextMenus.contextMenuHandRangeOfMovement.add(contextMenus.contextMenuHandRangeOfMovementNEW_MOVEMENTItem);
		form.registerMenu(contextMenus.contextMenuHandRangeOfMovement);


		// Container Clasess
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 408, 816, 184, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 184);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper24.getWidth(), anchoringHelper24.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 752, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 672, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 816, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrHandRangeOfMovementsTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrHandRangeOfMovementsTemp);
		recbrHandRangeOfMovementsRecordBrowser recbrHandRangeOfMovements = (recbrHandRangeOfMovementsRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrHandRangeOfMovementsRecordBrowser.class, m_recbrHandRangeOfMovementsTemp);
		super.addRecordBrowser(recbrHandRangeOfMovements);

		// Grid Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 816, 352, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdMovementTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.contextMenuHandRangeOfMovement, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdMovementTemp);
		grdMovementGrid grdMovement = (grdMovementGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMovementGrid.class, m_grdMovementTemp);
		grdMovement.addTreeColumn("Laterality", 0, 150, false, true);
		grdMovement.addStringColumn("Digit", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMovement.addStringColumn("Joint", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMovement.addStringColumn("Action", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMovement.addStringColumn("Movement", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMovement.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMovement.addStringColumn("SOR", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMovement.addStringColumn("EOR", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdMovement);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(1);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(2);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(3);
	}
	public recbrHandRangeOfMovementsRecordBrowser recbrHandRangeOfMovements()
	{
		return (recbrHandRangeOfMovementsRecordBrowser)super.getRecordBrowser(0);
	}
	public grdMovementGrid grdMovement()
	{
		return (grdMovementGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				YesNoDialog = new LocalFormName(102107);
			}
			public final FormName YesNoDialog;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Common = new CommonImages();
			Core = new CoreImages();
			ICP = new ICPImages();
		}
		public final class CommonImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CommonImages()
			{
				Down = new ImageHelper(100106, "Images/Nursing/yellow6.bmp", new Integer(16), new Integer(16));
				Right = new ImageHelper(100101, "Images/Nursing/green1.bmp", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Down;
			public final ims.framework.utils.Image Right;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_Left = new ImageHelper(102105, "Images/Core/L.gif", new Integer(10), new Integer(10));
				AnswerBox_Right = new ImageHelper(102106, "Images/Core/R.gif", new Integer(10), new Integer(10));
			}
			public final ims.framework.utils.Image AnswerBox_Left;
			public final ims.framework.utils.Image AnswerBox_Right;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				Child = new ImageHelper(118100, "Images/ICP/property.gif", new Integer(16), new Integer(16));
				Component = new ImageHelper(118101, "Images/ICP/VSObject_Method.gif", new Integer(16), new Integer(16));
				Phase = new ImageHelper(118102, "Images/ICP/VSObject_ValueType_Friend.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Child;
			public final ims.framework.utils.Image Component;
			public final ims.framework.utils.Image Phase;
		}
		public final CommonImages Common;
		public final CoreImages Core;
		public final ICPImages ICP;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedHandRangeOfMovementInstance = new ims.framework.ContextVariable("SelectedHandRangeOfMovementInstance", prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__SelectedHandRangeOfMovementInstance_" + componentIdentifier + "");
			cxl_UpdatingParent = new ims.framework.ContextVariable("UpdatingParent", prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatingParent_" + componentIdentifier + "");
			cxl_UpdatedMovement = new ims.framework.ContextVariable("UpdatedMovement", prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedMovement_" + componentIdentifier + "");
			cxl_UpdatedHROM = new ims.framework.ContextVariable("UpdatedHROM", prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedHROM_" + componentIdentifier + "");
			cxl_SelectedRangeOfMovementDetailInstance = new ims.framework.ContextVariable("SelectedRangeOfMovementDetailInstance", prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__SelectedRangeOfMovementDetailInstance_" + componentIdentifier + "");
			cxl_HasDataComitted = new ims.framework.ContextVariable("HasDataComitted", prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__HasDataComitted_" + componentIdentifier + "");
		}
		
		public boolean getSelectedHandRangeOfMovementInstanceIsNotNull()
		{
			return !cxl_SelectedHandRangeOfMovementInstance.getValueIsNull(context);
		}
		public ims.therapies.vo.HandRangeOfMovementVo getSelectedHandRangeOfMovementInstance()
		{
			return (ims.therapies.vo.HandRangeOfMovementVo)cxl_SelectedHandRangeOfMovementInstance.getValue(context);
		}
		public void setSelectedHandRangeOfMovementInstance(ims.therapies.vo.HandRangeOfMovementVo value)
		{
			cxl_SelectedHandRangeOfMovementInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedHandRangeOfMovementInstance = null;
		public boolean getUpdatingParentIsNotNull()
		{
			return !cxl_UpdatingParent.getValueIsNull(context);
		}
		public Boolean getUpdatingParent()
		{
			return (Boolean)cxl_UpdatingParent.getValue(context);
		}
		public void setUpdatingParent(Boolean value)
		{
			cxl_UpdatingParent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatingParent = null;
		public boolean getUpdatedMovementIsNotNull()
		{
			return !cxl_UpdatedMovement.getValueIsNull(context);
		}
		public ims.core.vo.MskJointMovementVo getUpdatedMovement()
		{
			return (ims.core.vo.MskJointMovementVo)cxl_UpdatedMovement.getValue(context);
		}
		public void setUpdatedMovement(ims.core.vo.MskJointMovementVo value)
		{
			cxl_UpdatedMovement.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedMovement = null;
		public boolean getUpdatedHROMIsNotNull()
		{
			return !cxl_UpdatedHROM.getValueIsNull(context);
		}
		public ims.generalmedical.vo.RangeOfMovementDetailVo getUpdatedHROM()
		{
			return (ims.generalmedical.vo.RangeOfMovementDetailVo)cxl_UpdatedHROM.getValue(context);
		}
		public void setUpdatedHROM(ims.generalmedical.vo.RangeOfMovementDetailVo value)
		{
			cxl_UpdatedHROM.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedHROM = null;
		public boolean getSelectedRangeOfMovementDetailInstanceIsNotNull()
		{
			return !cxl_SelectedRangeOfMovementDetailInstance.getValueIsNull(context);
		}
		public ims.generalmedical.vo.RangeOfMovementDetailVo getSelectedRangeOfMovementDetailInstance()
		{
			return (ims.generalmedical.vo.RangeOfMovementDetailVo)cxl_SelectedRangeOfMovementDetailInstance.getValue(context);
		}
		public void setSelectedRangeOfMovementDetailInstance(ims.generalmedical.vo.RangeOfMovementDetailVo value)
		{
			cxl_SelectedRangeOfMovementDetailInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRangeOfMovementDetailInstance = null;
		public boolean getHasDataComittedIsNotNull()
		{
			return !cxl_HasDataComitted.getValueIsNull(context);
		}
		public Boolean getHasDataComitted()
		{
			return (Boolean)cxl_HasDataComitted.getValue(context);
		}
		public void setHasDataComitted(Boolean value)
		{
			cxl_HasDataComitted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasDataComitted = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class HandRangeOfMovement implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int NEW_PARENT = 1;
			public static final int UPDATE_PARENT = 2;
			public static final int NEW_DETAIL = 3;
			public static final int UPDATE_DETAIL = 4;
			public static final int REMOVE_DETAIL = 5;
			public static final int NEW_JOINT = 6;
			public static final int NEW_MOVEMENT = 7;
		}
		public void disableAllHandRangeOfMovementMenuItems()
		{
			this.contextMenuHandRangeOfMovementNEW_PARENTItem.setEnabled(false);
			this.contextMenuHandRangeOfMovementUPDATE_PARENTItem.setEnabled(false);
			this.contextMenuHandRangeOfMovementNEW_DETAILItem.setEnabled(false);
			this.contextMenuHandRangeOfMovementUPDATE_DETAILItem.setEnabled(false);
			this.contextMenuHandRangeOfMovementREMOVE_DETAILItem.setEnabled(false);
			this.contextMenuHandRangeOfMovementNEW_JOINTItem.setEnabled(false);
			this.contextMenuHandRangeOfMovementNEW_MOVEMENTItem.setEnabled(false);
		}
		public void hideAllHandRangeOfMovementMenuItems()
		{
			this.contextMenuHandRangeOfMovementNEW_PARENTItem.setVisible(false);
			this.contextMenuHandRangeOfMovementUPDATE_PARENTItem.setVisible(false);
			this.contextMenuHandRangeOfMovementNEW_DETAILItem.setVisible(false);
			this.contextMenuHandRangeOfMovementUPDATE_DETAILItem.setVisible(false);
			this.contextMenuHandRangeOfMovementREMOVE_DETAILItem.setVisible(false);
			this.contextMenuHandRangeOfMovementNEW_JOINTItem.setVisible(false);
			this.contextMenuHandRangeOfMovementNEW_MOVEMENTItem.setVisible(false);
		}
		private Menu contextMenuHandRangeOfMovement;
		public MenuItem getHandRangeOfMovementNEW_PARENTItem()
		{
			return this.contextMenuHandRangeOfMovementNEW_PARENTItem;
		}
		private MenuItem contextMenuHandRangeOfMovementNEW_PARENTItem;
		public MenuItem getHandRangeOfMovementUPDATE_PARENTItem()
		{
			return this.contextMenuHandRangeOfMovementUPDATE_PARENTItem;
		}
		private MenuItem contextMenuHandRangeOfMovementUPDATE_PARENTItem;
		public MenuItem getHandRangeOfMovementNEW_DETAILItem()
		{
			return this.contextMenuHandRangeOfMovementNEW_DETAILItem;
		}
		private MenuItem contextMenuHandRangeOfMovementNEW_DETAILItem;
		public MenuItem getHandRangeOfMovementUPDATE_DETAILItem()
		{
			return this.contextMenuHandRangeOfMovementUPDATE_DETAILItem;
		}
		private MenuItem contextMenuHandRangeOfMovementUPDATE_DETAILItem;
		public MenuItem getHandRangeOfMovementREMOVE_DETAILItem()
		{
			return this.contextMenuHandRangeOfMovementREMOVE_DETAILItem;
		}
		private MenuItem contextMenuHandRangeOfMovementREMOVE_DETAILItem;
		public MenuItem getHandRangeOfMovementNEW_JOINTItem()
		{
			return this.contextMenuHandRangeOfMovementNEW_JOINTItem;
		}
		private MenuItem contextMenuHandRangeOfMovementNEW_JOINTItem;
		public MenuItem getHandRangeOfMovementNEW_MOVEMENTItem()
		{
			return this.contextMenuHandRangeOfMovementNEW_MOVEMENTItem;
		}
		private MenuItem contextMenuHandRangeOfMovementNEW_MOVEMENTItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[89];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__SelectedHandRangeOfMovementInstance_" + componentIdentifier, "BO-1019100060-ID", "ID_HandRangeOfMovement");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__SelectedHandRangeOfMovementInstance_" + componentIdentifier, "BO-1019100060-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__SelectedHandRangeOfMovementInstance_" + componentIdentifier, "BO-1019100060-CLINICALCONTACT", "ClinicalContact");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__SelectedHandRangeOfMovementInstance_" + componentIdentifier, "BO-1019100060-DOMINANTHAND", "DominantHand");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedMovement_" + componentIdentifier, "BO-1023100022-ID", "ID_MskJointMovement");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedMovement_" + componentIdentifier, "BO-1023100022-MOVETYPE", "MoveType");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedMovement_" + componentIdentifier, "BO-1023100022-MOVEFINDING", "MoveFinding");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedMovement_" + componentIdentifier, "BO-1023100022-MOVSOR", "MovSOR");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedMovement_" + componentIdentifier, "BO-1023100022-MOVEOR", "MovEOR");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedMovement_" + componentIdentifier, "BO-1023100022-QUALITATIVERANGE", "QualitativeRange");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedMovement_" + componentIdentifier, "BO-1023100022-LIMITED", "Limited");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedMovement_" + componentIdentifier, "BO-1023100022-MOVEACTION", "MoveAction");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedHROM_" + componentIdentifier, "BO-1072100035-ID", "ID_MSkExamJointBonesDetail");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedHROM_" + componentIdentifier, "BO-1072100035-LATERALITY", "Laterality");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__UpdatedHROM_" + componentIdentifier, "BO-1072100035-ISJOINT", "IsJoint");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__SelectedRangeOfMovementDetailInstance_" + componentIdentifier, "BO-1072100035-ID", "ID_MSkExamJointBonesDetail");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__SelectedRangeOfMovementDetailInstance_" + componentIdentifier, "BO-1072100035-LATERALITY", "Laterality");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.HandRangeOfMovement.__internal_x_context__SelectedRangeOfMovementDetailInstance_" + componentIdentifier, "BO-1072100035-ISJOINT", "IsJoint");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
