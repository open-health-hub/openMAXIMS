//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.39 build 2173.29356)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.environmentalvisitrooms;

import java.util.ArrayList;
import java.util.List;

import ims.core.vo.ClinicalContactShortVo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.spinalinjuries.vo.lookups.RoomLocationCollection;
import ims.therapies.forms.environmentalvisitrooms.GenForm.grdRoomsRow;
import ims.therapies.vo.EnvironmentalVisitVo;
import ims.therapies.vo.HomeDetailsVo;
import ims.therapies.vo.RoomDetailsVo;
import ims.therapies.vo.RoomDetailsVoCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws PresentationLogicException
	{
		initialize();
		open();
	}

	private void initialize() throws PresentationLogicException
	{
		RoomLocationCollection roomLocationColl = LookupHelper.getRoomLocation(domain.getLookupService());
		if (roomLocationColl == null || roomLocationColl.size() == 0)
			throw new PresentationLogicException("Please configure roomLocation lookup");
		
		form.getLocalContext().setvoRoomDetails(null);
	}

	private void open()
	{
		clear();
		form.setMode(FormMode.VIEW);

		populateScreenFromData(domain.getEnvironmentalVisit(form.getGlobalContext().Therapies.getEnvironmentalVisit()));
		RoomDetailsVoCollection tempvoColl = domain.getRoomDetails(form.getGlobalContext().Therapies.getEnvironmentalVisit());   //wdev-13576 - dummy get from database to display RIE icon 
		resetUpdatedChild();
		showButtonsForRecord();
		form.ctnDetails().setCollapsed(true);

		if (form.getLocalContext().getvoRoomDetails() != null)
		{
			try
			{
				onGrdRoomsSelectionChanged();
			}
			catch (PresentationLogicException e)
			{
				engine.showMessage("Failed to display current selection.");
			}
		}
	}

	private void clear()
	{
		form.qmbAuthoringHCP().setValue(null);
		form.dtimAuthoringDateTime().setValue(null);
		form.txtPlaceVisited().setValue(null);
		form.cmbVisitLocation().setValue(null);
		form.grdRooms().getRows().clear();
		clearInstanceControls();
	}

	private void showButtonsForRecord()
	{
		form.btnEdit().setVisible(false);

		if (isRecordCurrent())
			form.btnNew().setVisible(true);
		else
			form.btnNew().setVisible(false);
	}

	private void populateScreenFromData(EnvironmentalVisitVo voEnvironmentalVisit)
	{
		if (voEnvironmentalVisit == null)
			return;

		form.getLocalContext().setvoEnvironmentalVisit(voEnvironmentalVisit);

		form.qmbAuthoringHCP().clear();
		if (voEnvironmentalVisit.getAuthoringCPIsNotNull())
		{
			form.qmbAuthoringHCP().newRow(voEnvironmentalVisit.getAuthoringCP(), voEnvironmentalVisit.getAuthoringCP().toString());
			form.qmbAuthoringHCP().setValue(voEnvironmentalVisit.getAuthoringCP());
		}

		form.dtimAuthoringDateTime().setValue(voEnvironmentalVisit.getAuthoringDateTime());
		form.cmbVisitLocation().setValue(voEnvironmentalVisit.getLocation());

		if (voEnvironmentalVisit.getHouseDetailsIsNotNull() && voEnvironmentalVisit.getHouseDetails().getAddressIsNotNull())
			form.txtPlaceVisited().setValue(voEnvironmentalVisit.getHouseDetails().getAddress());

		populateChildNodes(voEnvironmentalVisit.getRooms());

	}

	private void populateChildNodes(RoomDetailsVoCollection voRoomDetailsColl)
	{
		if (voRoomDetailsColl == null || voRoomDetailsColl.size() <= 0)
			return;

		voRoomDetailsColl.sort();
		for (int i = 0; i < voRoomDetailsColl.size(); i++)
		{
			GenForm.grdRoomsRow row = form.grdRooms().getRows().newRow();
			populateChildNode(row, voRoomDetailsColl.get(i));
		}
	}

	private void resetUpdatedChild()
	{
		if (form.getLocalContext().getvoRoomDetailsIsNotNull())
		{
			populateChildInstanceControls(form.getLocalContext().getvoRoomDetails());
			form.grdRooms().setValue(form.getLocalContext().getvoRoomDetails());
			form.btnEdit().setEnabled(true);
		}
	}

	private void clearInstanceControls()
	{
		form.ctnDetails().cmbLocation().setValue(null);
		form.ctnDetails().cmbType().setValue(null);
		form.ctnDetails().txtAccess().setValue(null);
		form.ctnDetails().intDoorWidth().setValue(null);
		form.ctnDetails().cmbUnit().setValue(null);
		form.ctnDetails().txtDetails().setValue(null);
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
			open();
	}

	private boolean save()
	{
		// if we are not updating
		if (form.getLocalContext().getvoRoomDetails() == null)
		{
			if (childNotAdded())
			{
				if (!processChildNotAdded())
					return false;
			}
		}

		EnvironmentalVisitVo voEnvironmentalVisit = populateInstanceData(form.getLocalContext().getvoEnvironmentalVisit());

		String[] arrErrors = voEnvironmentalVisit.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		if (!widthAndUnitEntered(voEnvironmentalVisit))
		{
			engine.showErrors(new String[]{"Please enter a Door Width and Unit together"});
			return false;
		}

		try
		{
			form.getLocalContext().setvoEnvironmentalVisit(domain.saveEnvironmentalVisit(voEnvironmentalVisit));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("A meeting with the same criteria already exists.   " + e.getMessage());
			open();
			return false;
		}

		form.getGlobalContext().Therapies.setEnvironmentalVisit(form.getLocalContext().getvoEnvironmentalVisit());

		return true;
	}
	
	public String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.ctnDetails().intDoorWidth() != null && form.ctnDetails().intDoorWidth().getValue() != null && form.ctnDetails().intDoorWidth().getValue() < 0)
		{
			uiErrors.add("Door Width can't be a negative number");					
		}
		
		String[] result = new String[uiErrors.size()];
		uiErrors.toArray(result);
		return result;
	}

	private boolean childNotAdded()
	{
		RoomDetailsVo voRoomDetails = new RoomDetailsVo();
		voRoomDetails = populateChildInstanceData(voRoomDetails);
		return voRoomDetails.countFieldsWithValue() > 0;
	}

	private boolean processChildNotAdded()
	{
		if (form.getLocalContext().getvoRoomDetails() == null)
		{
			if (addOrUpdateChild())
				return true;
		}
		return false;
	}

	private EnvironmentalVisitVo populateInstanceData(EnvironmentalVisitVo voEnvironmentalVisit)
	{
		if (voEnvironmentalVisit == null)
			voEnvironmentalVisit = new EnvironmentalVisitVo();

		populateEnvironmentInstanceData(voEnvironmentalVisit);

		if (form.getLocalContext().getvoRoomDetails() == null)
		{
			populateChildCollectionFromGrid(voEnvironmentalVisit);
		}
		else
		// Update child instance.
		{
			RoomDetailsVo voRoomDetail = form.getLocalContext().getvoRoomDetails();
			populateChildInstanceData(voRoomDetail);
			form.getLocalContext().setvoRoomDetails(voRoomDetail);

			for (int i = 0; i < voEnvironmentalVisit.getRooms().size(); i++)
			{
				if (voEnvironmentalVisit.getRooms().get(i).getID_RoomDetails() == form.getLocalContext().getvoRoomDetails().getID_RoomDetails())
				{
					voEnvironmentalVisit.getRooms().set(i, form.getLocalContext().getvoRoomDetails());
				}
			}
		}
		return voEnvironmentalVisit;
	}

	private void populateEnvironmentInstanceData(EnvironmentalVisitVo voEnvironmentalVisit)
	{
		voEnvironmentalVisit.setAuthoringCP(form.qmbAuthoringHCP().getValue());
		voEnvironmentalVisit.setAuthoringDateTime(form.dtimAuthoringDateTime().getValue());
		voEnvironmentalVisit.setLocation(form.cmbVisitLocation().getValue());

		HomeDetailsVo voHomeDetails = voEnvironmentalVisit.getHouseDetails();
		if (voHomeDetails == null)
			voHomeDetails = new HomeDetailsVo();

		voHomeDetails.setAddress(form.txtPlaceVisited().getValue());
		voEnvironmentalVisit.setHouseDetails(voHomeDetails);
	}

	private void populateChildCollectionFromGrid(EnvironmentalVisitVo voEnvironmentalVisit)
	{
		if (voEnvironmentalVisit.getRooms() == null)
			voEnvironmentalVisit.setRooms(new RoomDetailsVoCollection());

		if (form.grdRooms().getRows().size() > 0)
			voEnvironmentalVisit.getRooms().clear();

		for (int i = 0; i < form.grdRooms().getRows().size(); i++)
		{
			voEnvironmentalVisit.getRooms().add(form.grdRooms().getRows().get(i).getValue());
		}
	}

	private RoomDetailsVo populateChildInstanceData(RoomDetailsVo voRoomDetails)
	{
		voRoomDetails.setAccess(form.ctnDetails().txtAccess().getValue());
		voRoomDetails.setDoorWidth(form.ctnDetails().intDoorWidth().getValue());
		voRoomDetails.setUnitOfMeasure(form.ctnDetails().cmbUnit().getValue());
		voRoomDetails.setLocation(form.ctnDetails().cmbLocation().getValue());
		voRoomDetails.setRoomDetails(form.ctnDetails().txtDetails().getValue());
		voRoomDetails.setEnvironmentVisitRoomType(form.ctnDetails().cmbType().getValue());

		return voRoomDetails;
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		form.getLocalContext().setvoRoomDetails(null);
		form.setMode(FormMode.EDIT);
		form.ctnDetails().setCollapsed(false);
		clearInstanceControls();
	}

	protected void onGrdRoomsSelectionChanged() throws PresentationLogicException
	{
		getSelectedInstance();
		form.ctnDetails().setCollapsed(false);
		if (isRecordCurrent())
			form.btnEdit().setVisible(true);
	}

	private void getSelectedInstance()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			updateContextMenusState();
			return;
		}
		form.getLocalContext().setvoRoomDetails(form.grdRooms().getValue());
		populateChildInstanceControls(form.getLocalContext().getvoRoomDetails());

		updateControlsState();
	}

	private void updateContextMenusState()
	{
		if (!isRecordCurrent())
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
			return;
		}

		form.getContextMenus().getGenericGridAddItem().setText("New Environment Room Detail");
		form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.VIEW));

		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Environment Room Detail");
		form.getContextMenus().getGenericGridUpdateItem().setVisible((form.getMode().equals(FormMode.VIEW) && form.grdRooms().getSelectedRowIndex() >= 0) || (form.getMode().equals(FormMode.EDIT) && form.grdRooms().getValue() != null && (form.grdRooms().getValue()).getID_RoomDetails() == null));

		form.getContextMenus().getGenericGridRemoveItem().setText("Remove Environment Room Detail");
		form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdRooms().getValue() != null && (form.grdRooms().getValue()).getID_RoomDetails() == null);

	}

	private boolean isRecordCurrent()
	{
		ClinicalContactShortVo voCurrentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		EnvironmentalVisitVo voEnvironmentalVisit = form.getLocalContext().getvoEnvironmentalVisit();

		// check if the record has a clinicalContact and the GC ClinicalContact
		// is not null, if they are equal then return true.
		// or if the ClinicalContact is null and the GC Clinical Contact is
		// null, then the current care context selected, return true.
		// else return false;
		if (voEnvironmentalVisit != null)
		{
			if ((voEnvironmentalVisit.getClinicalContactIsNotNull() && voCurrentClinicalContact != null && voCurrentClinicalContact.getID_ClinicalContact().equals(voEnvironmentalVisit.getClinicalContact().getID_ClinicalContact())) || (voEnvironmentalVisit.getClinicalContact() == null && voCurrentClinicalContact == null))
			{
				return true;
			}
		}
		return false;
	}

	private void populateChildInstanceControls(RoomDetailsVo voRoomDetails)
	{
		if (voRoomDetails == null)
			return;

		form.ctnDetails().cmbLocation().setValue(voRoomDetails.getLocation());
		form.ctnDetails().cmbType().setValue(voRoomDetails.getEnvironmentVisitRoomType());
		form.ctnDetails().txtAccess().setValue(voRoomDetails.getAccess());
		form.ctnDetails().intDoorWidth().setValue(voRoomDetails.getDoorWidth());
		form.ctnDetails().cmbUnit().setValue(voRoomDetails.getUnitOfMeasure());
		form.ctnDetails().txtDetails().setValue(voRoomDetails.getRoomDetails());
	}

	protected void onBtnClearClick() throws PresentationLogicException
	{
		clearInstanceControls();
	}

	protected void onBtnAddClick() throws PresentationLogicException
	{
		if (!widthAndUnitEntered(null))
			engine.showErrors(new String[]{"Please enter a Door Width and Unit together"});
		else
			addOrUpdateChild();
	}

	private boolean addOrUpdateChild()
	{
		RoomDetailsVo voRoomDetails = form.getLocalContext().getvoRoomDetails();

		if (voRoomDetails == null)
			voRoomDetails = new RoomDetailsVo();

		populateChildInstanceData(voRoomDetails);
		
		String[] arrErrors = voRoomDetails.validate(validateUIRules());
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		if (widthAndUnitEntered(null))
		{
			if (form.getLocalContext().getvoRoomDetails() != null)
			{
				promoteUpdatedChild(voRoomDetails);
				newChildInstance();
				updateControlsState();
			}
			else
			{
				if (newChildNode(voRoomDetails))
					return true;
			}
		}
		else
			engine.showErrors(new String[]{"Please enter a Door Width and Unit together"});

		return false;

	}

	// if one value is entered then both values need to be entered
	private boolean widthAndUnitEntered(EnvironmentalVisitVo voEnvironmentalVisit)
	{
		// for add
		if (voEnvironmentalVisit == null)
		{
			if (form.ctnDetails().intDoorWidth().getValue() != null)
			{
				if (form.ctnDetails().cmbUnit().getValue() != null)
					return true;
				else
					return false;
			}
			else
			{
				if (form.ctnDetails().cmbUnit().getValue() != null)
					return false;
			}
		}
		// for save
		else
		{
			for (int i = 0; i < voEnvironmentalVisit.getRooms().size(); i++)
			{
				RoomDetailsVo room = voEnvironmentalVisit.getRooms().get(i);
				if (room.getDoorWidthIsNotNull())
				{
					if (room.getUnitOfMeasureIsNotNull())
						return true;
					else
						return false;
				}
				else
				{
					if (room.getUnitOfMeasureIsNotNull())
						return false;
				}
			}
		}
		return true;
	}

	private boolean newChildNode(RoomDetailsVo voRoomDetails)
	{
		if (form.getLocalContext().getvoRoomDetails() != null)
			return false;

		if (voRoomDetails.countFieldsWithValue() >= 1)
		{
			String strErrors[] = voRoomDetails.validate();

			if (strErrors != null && strErrors.length > 0)
			{
				engine.showErrors(strErrors);
				return false;
			}

			promoteChild(voRoomDetails);
			clearInstanceControls();
		}

		return true;
	}

	private void promoteChild(RoomDetailsVo voRoomDetails)
	{
		if (voRoomDetails == null)
			return;
		GenForm.grdRoomsRow row = form.grdRooms().getRows().newRow();
		populateChildNode(row, voRoomDetails);
	}

	private void updateControlsState()
	{
		if (form.getMode().equals(FormMode.EDIT))
			setAddApplyCaption();

		enableDetailsButtons();

		updateContextMenusState();
	}

	private void enableDetailsButtons()
	{
		boolean boolVisible = (form.getMode().equals(FormMode.EDIT) && (form.getLocalContext().getvoRoomDetails() == null || form.getLocalContext().getvoRoomDetails() != null && form.getLocalContext().getvoRoomDetails().getID_RoomDetails() == null));

		form.ctnDetails().btnAdd().setVisible(boolVisible);
		form.ctnDetails().btnClear().setVisible(boolVisible);
	}

	private void setAddApplyCaption()
	{
		form.ctnDetails().btnAdd().setText("Add");

		if (form.getLocalContext().getvoRoomDetails() != null && form.getLocalContext().getvoRoomDetails().getID_RoomDetails() == null)
			form.ctnDetails().btnAdd().setText("Apply");
	}

	private void newChildInstance()
	{
		clearInstanceControls();
		form.getLocalContext().setvoRoomDetails(null);
	}

	private void promoteUpdatedChild(RoomDetailsVo voRoomDetails)
	{
		if (voRoomDetails == null)
			return;
		GenForm.grdRoomsRow row = form.grdRooms().getSelectedRow();
		populateChildNode(row, voRoomDetails);
	}

	private void populateChildNode(grdRoomsRow row, RoomDetailsVo voRoomDetails)
	{
		if (voRoomDetails == null)
			return;

		row.setValue(voRoomDetails);
		if (voRoomDetails.getLocationIsNotNull())
			row.setcolLocation(voRoomDetails.getLocation().toString());
		if (voRoomDetails.getEnvironmentVisitRoomTypeIsNotNull())
			row.setcolType(voRoomDetails.getEnvironmentVisitRoomType().toString());
		if (voRoomDetails.getAccessIsNotNull())
			row.setcolAccess(voRoomDetails.getAccess().toString());
		if (voRoomDetails.getDoorWidthIsNotNull())
			row.setcolDoorWidth(voRoomDetails.getDoorWidth().toString());
		if (voRoomDetails.getUnitOfMeasureIsNotNull())
			row.setColUnit(voRoomDetails.getUnitOfMeasure().getText());
		if (voRoomDetails.getRoomDetailsIsNotNull())
			row.setcolComment(voRoomDetails.getRoomDetails());

		// if not saved then set the colour
		if (voRoomDetails.getID_RoomDetails() == null)
			row.setTextColor(Color.Red);
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
				newInstance();
			break;
			case GenForm.ContextMenus.GenericGrid.Update :
				updateInstance();
			break;
			case GenForm.ContextMenus.GenericGrid.Remove :
				form.grdRooms().removeSelectedRow();
			break;
		}
	}

	private void updateInstance()
	{
		// get selected row and disable all the others
		grdRoomsRow row = form.grdRooms().getSelectedRow();
		for (int i = 0; i < form.grdRooms().getRows().size(); i++)
			form.grdRooms().getRows().get(i).setSelectable(false);

		row.setSelectable(true);

		RoomDetailsVo voCachedChild = form.grdRooms().getValue();
		if (voCachedChild.getID_RoomDetails() == null)
		{
			populateChildInstanceControls(voCachedChild);
		}
		form.getLocalContext().setvoRoomDetails(voCachedChild);
		form.setMode(FormMode.EDIT);
		form.ctnDetails().setCollapsed(false);
	}

	private void newInstance()
	{
		newChildInstance();
		form.setMode(FormMode.EDIT);
		form.ctnDetails().setCollapsed(false);
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	protected void onBtnEditClick() throws PresentationLogicException
	{
		updateInstance();

	}

}
