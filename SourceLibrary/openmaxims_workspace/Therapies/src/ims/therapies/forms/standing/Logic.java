//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.42 build 2202.25904)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.42 build 2202.25904)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.standing;

import java.util.ArrayList;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.therapies.forms.standing.GenForm.grdSummaryRow;
import ims.therapies.treatment.vo.TiltExerciseRefVo;
import ims.therapies.vo.FrameExerciseSupportVo;
import ims.therapies.vo.FrameExerciseSupportVoCollection;
import ims.therapies.vo.FrameExerciseVo;
import ims.therapies.vo.FrameExerciseVoCollection;
import ims.therapies.vo.StandingSessionShortVo;
import ims.therapies.vo.StandingSessionShortVoCollection;
import ims.therapies.vo.StandingSessionVo;
import ims.therapies.vo.TiltExerciseVo;
import ims.therapies.vo.TiltExerciseVoCollection;
import ims.therapies.vo.lookups.LookupHelper;
import ims.therapies.vo.lookups.StandingSupportTypeExercise;
import ims.therapies.vo.lookups.StandingSupportTypeExerciseCollection;
import ims.vo.ValueObject;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void initialize() 
	{
		form.ctnStand().setCollapsed(true);
		form.ctnStand().lyrParent().tabEmpty().setHeaderVisible(false);
		prePopulateSupportCombo();
	}

	private void open()
	{
		clear();
		resetContextVariables();		
							
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		{
			populateParentNodes(domain.getStandingSessionByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));			
		}
									
		form.setMode(FormMode.VIEW);
		reselectUpdatedNode();
	}
	
	private void reselectUpdatedNode()
	{
		//Pattern demands that the last updated node is displayed
		if (form.getLocalContext().getUpdatedChildIsNotNull())
		{
			form.grdSummary().setValue(form.getLocalContext().getUpdatedChild());
			getSelectedInstance();
			form.getLocalContext().setUpdatedChild(null);
		}
	}

	private void getSelectedInstance()
	{
		//In update mode we can select nodes without displaying anything but the context
		// menus can change based on what's selected so we need to update them
		if (form.getMode().equals(FormMode.EDIT)) 
		{
			updateContextMenusState();
			return;
		}		
		
		if(form.grdSummary().getValue() instanceof StandingSessionVo)
		{	
			populateParentInstanceControls((StandingSessionVo) form.grdSummary().getValue());
		}
		if(form.grdSummary().getValue() instanceof StandingSessionShortVo)
		{									 
			form.getLocalContext().setSelectedParentInstance(getParentFromDomain((StandingSessionShortVo) form.grdSummary().getValue()));
			populateParentInstanceControls(form.getLocalContext().getSelectedParentInstance());
			populateChildNodes(form.grdSummary().getSelectedRow(),form.getLocalContext().getSelectedParentInstance());
			form.getLocalContext().setSelectedChildInstance(null);
			clearChildInstanceControls();
		}
		else if(form.grdSummary().getValue() instanceof FrameExerciseVo ||form.grdSummary().getValue() instanceof TiltExerciseVo) 
		{
			GenForm.grdSummaryRow parentRow = form.grdSummary().getSelectedRow().getParentRow();
			form.getLocalContext().setSelectedParentInstance((StandingSessionVo) parentRow.getValue());
			
			if(form.grdSummary().getValue() instanceof FrameExerciseVo)
				form.getLocalContext().setSelectedChildInstance(form.grdSummary().getValue());
			
			if(form.grdSummary().getValue() instanceof TiltExerciseVo)
				form.getLocalContext().setSelectedChildInstance(form.grdSummary().getValue());
			
			
			populateChildInstanceControls(form.getLocalContext().getSelectedChildInstance());			
		}
 
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(form.getLocalContext().getSelectedParentInstance().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())));
		
		updateControlsState();
		
	}

	private void populateChildInstanceControls(ValueObject selectedChildInstance)
	{
		if(selectedChildInstance == null) return;
		
		if(selectedChildInstance instanceof FrameExerciseVo)
		{
			FrameExerciseVo voFrame = (FrameExerciseVo) selectedChildInstance;
			populateFrame(voFrame);
		}
		if(selectedChildInstance instanceof TiltExerciseVo)
		{
			TiltExerciseVo voTilt = (TiltExerciseVo) selectedChildInstance;
			populateTilt(voTilt);
		}
	}

	private void clearChildInstanceControls()
	{
		form.ctnStand().lyrParent().tabDetails().cmbSupport().setValue(null);
		form.ctnStand().lyrParent().tabDetails().txtComment().setValue(null);
		form.ctnStand().lyrParent().tabDetails().intDegrees().setValue(null);
		form.ctnStand().lyrParent().tabDetails().intMinutes().setValue(null);
		form.ctnStand().lyrParent().tabDetails().grdTime().getRows().clear();
		form.ctnStand().lyrParent().tabDetails().grdSelect().getRows().clear();
	}

	private void populateParentInstanceControls(StandingSessionVo voStandingParent)
	{
		if(voStandingParent != null)
		{
			form.ctnStand().lyrParent().tabHeader().dtimAuthoringDateTime().setValue(voStandingParent.getAuthoringDateTime());
			if(voStandingParent.getAuthoringCPIsNotNull())
				form.ctnStand().lyrParent().tabHeader().qmbAuthoringCP().newRow(voStandingParent.getAuthoringCP(), voStandingParent.getAuthoringCP().toString());
			form.ctnStand().lyrParent().tabHeader().qmbAuthoringCP().setValue(voStandingParent.getAuthoringCP());
		}
	}

	private StandingSessionVo getParentFromDomain(StandingSessionShortVo voStandingShort)
	{
		//	WDEV-13649return domain.getStandingSessionByClinicalContact(voStandingShort.getClinicalContact());
		return domain.getStanding(voStandingShort);
	}

	private void updateContextMenusState()
	{
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			if(form.getLocalContext().getGoldenInstanceSelected().booleanValue())
			{
				// If the golden instance is currently selected we change the text of the update context menu
				// based on whether a parent or child node is selected in the grid.
				if (form.grdSummary().getValue() instanceof StandingSessionShortVo)
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);						
				else if (form.grdSummary().getValue() instanceof FrameExerciseVo || form.grdSummary().getValue() instanceof TiltExerciseVo)
					form.getContextMenus().getGenericGridUpdateItem().setText("Edit Standing Detail");
				
				// If the golden node is selected we can now only add child nodes so set the menu text accordingly.
				form.getContextMenus().getGenericGridAddItem().setText("Add Standing Detail");			
	
				// Only show the update menu if the user has selected an item to update.
				form.getContextMenus().getGenericGridUpdateItem().setVisible((form.getMode().equals(FormMode.VIEW)&& 
																			 form.grdSummary().getSelectedRowIndex()>=0 &&
																			 (form.grdSummary().getValue() instanceof TiltExerciseVo || form.grdSummary().getValue() instanceof FrameExerciseVo)) ||
																			 (form.getMode().equals(FormMode.EDIT) &&
																			 ((form.grdSummary().getValue() instanceof TiltExerciseVo && ((TiltExerciseVo)form.grdSummary().getValue()).getID_TiltExercise() == null)||form.grdSummary().getValue() instanceof FrameExerciseVo && ((FrameExerciseVo)form.grdSummary().getValue()).getID_FrameExercise() == null)));																								
			}
			else
			{
				// If the golden instance has been found but NOT selected hide the context menu's 
				if (form.getLocalContext().getGoldenInstanceFound().booleanValue() == true)
				{
					form.getContextMenus().hideAllGenericGridMenuItems();
					return;
				}
				else
				{
					form.getContextMenus().getGenericGridAddItem().setText("New Standing Session");
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);				
				}
			}
			
			form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.VIEW));
			form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) &&
					 ((form.grdSummary().getValue() instanceof TiltExerciseVo && ((TiltExerciseVo)form.grdSummary().getValue()).getID_TiltExercise() == null)||form.grdSummary().getValue() instanceof FrameExerciseVo && ((FrameExerciseVo)form.grdSummary().getValue()).getID_FrameExercise() == null));
		}
		else
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
		}
	}

	private void populateParentNodes(StandingSessionShortVoCollection voStandingSessionShortColl)
	{
		if (voStandingSessionShortColl == null || voStandingSessionShortColl.size() <= 0 ) return;
		
		for(int i=0; i<voStandingSessionShortColl.size(); i++)
		{
			populateParentNode(voStandingSessionShortColl.get(i));			
		}	
	}

	private void populateParentNode(StandingSessionShortVo voStandingSessionShort)
	{
		GenForm.grdSummaryRow parRow = form.grdSummary().getRows().newRow();
		parRow.setColDateSupportType(voStandingSessionShort.getAuthoringDateTime().toString()+ " - " + voStandingSessionShort.getAuthoringCP().toString());
		
		parRow.setValue(voStandingSessionShort);			
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() && voStandingSessionShort.getClinicalContact().getID_ClinicalContact().equals
				(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
		{
			form.grdSummary().setValue(voStandingSessionShort);
			expandParentNode(parRow);
		}
	}

	private void expandParentNode(grdSummaryRow selectedRow)
	{
		if (selectedRow.getValue() instanceof StandingSessionShortVo == false ) return;
		
		form.getLocalContext().setSelectedParentInstance(getParentFromDomain((StandingSessionShortVo) selectedRow.getValue()));		
		if (form.getLocalContext().getSelectedParentInstance() == null ) return; 				

		StandingSessionVo voParentInstance = form.getLocalContext().getSelectedParentInstance();				
		if(voParentInstance.getClinicalContact().getID_ClinicalContact().equals
									(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
		{
			// If this is the Golden Node then we'll colour it golden (ok then beige).
			form.getLocalContext().setGoldenInstanceFound(new Boolean(true));
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
			selectedRow.setBackColor(Color.Beige);			
		}
		
		if (voParentInstance.getFrameExercise() != null || voParentInstance.getTiltTableExercise() != null)  
		{
			selectedRow.setExpanded(true);
			populateChildNodes(selectedRow, voParentInstance);
		}
		
		populateParentInstanceControls(voParentInstance);		
		
	}

	private void populateChildNodes(grdSummaryRow parRow, StandingSessionVo voParentInstance)
	{
		GenForm.grdSummaryRow childRow;
		FrameExerciseVoCollection voFrameColl = voParentInstance.getFrameExercise();
		TiltExerciseVoCollection voTiltColl = voParentInstance.getTiltTableExercise();
		if ((voFrameColl == null && voFrameColl.size()<=0) ||
				(voTiltColl == null && voTiltColl.size()<=0)) return;		
		
		voFrameColl.sort();
		voTiltColl.sort();
		for(int i=0; i<voFrameColl.size(); i++)
		{
			if (parRow != null)
			{
				childRow = parRow.getRows().newRow();
				populateChildNode(childRow, voFrameColl.get(i));				
			}
		}
		for(int z=0; z<voTiltColl.size(); z++)
		{
			if (parRow != null)
			{
				childRow = parRow.getRows().newRow();
				populateChildNode(childRow, voTiltColl.get(z));				
			}
		}
		
		//reselect parent
		parRow.setValue(form.getLocalContext().getSelectedParentInstance());
		form.grdSummary().setValue(parRow.getValue());
		parRow.setExpanded(true);
	}

	private void resetContextVariables()
	{
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(false));
		form.getLocalContext().setGoldenInstanceFound(new Boolean(false));
		form.getLocalContext().setUpdatingParent(new Boolean(false));
		form.getLocalContext().setSelectedParentInstance(null);
		form.getLocalContext().setSelectedChildInstance(null);			
	}

	protected void onFormModeChanged()
	{
		updateControlsState(); 
	}
	private void prePopulateSupportCombo() 
	{
		TreeNode[] coll = LookupHelper.getStandingSupportTypeExercise(domain.getLookupService()).getRootNodes();
		
		form.ctnStand().lyrParent().tabDetails().grdSelect().getRows().clear();
		form.ctnStand().lyrParent().tabDetails().cmbSupport().getValues().clear();
		
		if(coll != null)
		{
			for(int i=0;i<coll.length;i++)
			{
				StandingSupportTypeExercise item = (StandingSupportTypeExercise)coll[i];
				if(item.isActive())
					form.ctnStand().lyrParent().tabDetails().cmbSupport().newRow(item, item.getText());
			}
		}	
	}
	private void clear()
	{
		form.grdSummary().getRows().clear();
		clearChildInstanceControls();
	}

	protected void onGrdSummarySelectionChanged() throws PresentationLogicException
	{
		getSelectedInstance();		
	}
	private void populateTilt(TiltExerciseVo voTilt)
	{
		form.ctnStand().lyrParent().tabDetails().grdSelect().getRows().clear();
		form.ctnStand().lyrParent().tabDetails().grdTime().getRows().clear();
		hideControlsForTilt(true);
		populateTiltControls(voTilt);
		prePopulateTiltGrd();
		populateTiltGrd(voTilt.getTiltSupportExercise());
	}
	private void populateFrame(FrameExerciseVo voFrame)
	{
		form.ctnStand().lyrParent().tabDetails().grdSelect().getRows().clear();
		form.ctnStand().lyrParent().tabDetails().grdTime().getRows().clear();
		hideControlsForTilt(false);
		populateFrameControls(voFrame);
		prePopulateFrameGrd();
		populateFrameGrd(voFrame.getFrameExerciseSupport());
	}
	
	protected void onComboBoxSupportValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnStand().lyrParent().tabDetails().grdSelect().getRows().clear();
		form.ctnStand().lyrParent().tabDetails().grdTime().getRows().clear();
		if(form.ctnStand().lyrParent().tabDetails().cmbSupport().getValue() == null) 
			return;

		if(form.ctnStand().lyrParent().tabDetails().cmbSupport().getValue().equals(StandingSupportTypeExercise.TILTTABLE)) //populate Select grid
		{
			
			hideControlsForTilt(true);
			showGrd(true);
			form.ctnStand().lyrParent().tabDetails().grdSelect().setReadOnly(false);
			prePopulateTiltGrd();
		}
		else
		{
			hideControlsForTilt(false);
			showGrd(false);
			form.ctnStand().lyrParent().tabDetails().grdTime().setReadOnly(false);
			prePopulateFrameGrd();
		}
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	private boolean save()
	{
		checkForUnsavedChild();		
		StandingSessionVo voStandingSession = populateInstanceData(form.getLocalContext().getSelectedParentInstance());
		
		if (voStandingSession.getClinicalContact() == null)
			voStandingSession.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
				
		String[] arrErrors =  voStandingSession.validate(validateUIRules());	
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedParentInstance(domain.save(voStandingSession));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Standing Session record already exists for this SOAP clinical contact. " + e.getMessage());
			open();
			return false;
		}
		
		setUpdatedChild();
		return true;		
	}

	private void setUpdatedChild()
	{
		//Straight child update - Select the currently being updated child as the one so show - post save
		if (form.grdSummary().getValue() instanceof FrameExerciseVo || form.grdSummary().getValue() instanceof TiltExerciseVo)		
		{
			form.getLocalContext().setUpdatedChild(form.grdSummary().getValue());
		}
	}

	private String[] validateUIRules()
	{
		return null;
	}

	private StandingSessionVo populateInstanceData(StandingSessionVo voStandingSession)
	{
		if (voStandingSession == null)
			voStandingSession = new StandingSessionVo();
				
		populateParentInstanceData(voStandingSession);						

		if (form.getLocalContext().getSelectedChildInstance() == null)
		{
			populateChildCollectionFromGrid(voStandingSession);			
		}
		else 		// Update child instance.
		{
			
			populateChildInstanceData(form.getLocalContext().getSelectedChildInstance());
			if(form.getLocalContext().getSelectedChildInstance() instanceof TiltExerciseVo)
			{
				for (int i=0; i < voStandingSession.getTiltTableExercise().size(); i++)
				{
					if (voStandingSession.getTiltTableExercise().get(i).getID_TiltExercise() == 
						((TiltExerciseRefVo) form.getLocalContext().getSelectedChildInstance()).getID_TiltExercise())
					{						
						voStandingSession.getTiltTableExercise().set(i, (TiltExerciseVo) form.getLocalContext().getSelectedChildInstance());
					}
				}	
			}
			if(form.getLocalContext().getSelectedChildInstance() instanceof FrameExerciseVo)
			{
				for (int i=0; i < voStandingSession.getFrameExercise().size(); i++)
				{
					if (voStandingSession.getFrameExercise().get(i).getID_FrameExercise() == 
						((FrameExerciseVo) form.getLocalContext().getSelectedChildInstance()).getID_FrameExercise())
					{						
						voStandingSession.getFrameExercise().set(i, (FrameExerciseVo) form.getLocalContext().getSelectedChildInstance());
					}
				}	
			}
										
		}
		return voStandingSession;		
	}

	private void populateChildCollectionFromGrid(StandingSessionVo voStandingSession)
	{
		if (form.grdSummary().getValue() == null) return;

		if (voStandingSession.getFrameExercise() == null)
			voStandingSession.setFrameExercise(new FrameExerciseVoCollection());
		if(voStandingSession.getTiltTableExercise() == null)
			voStandingSession.setTiltTableExercise(new TiltExerciseVoCollection());
		
		GenForm.grdSummaryRow parentRow = form.grdSummary().getValue() instanceof StandingSessionShortVo || form.grdSummary().getValue() instanceof StandingSessionVo ? 
										    form.grdSummary().getSelectedRow() : form.grdSummary().getSelectedRow().getParentRow();		
		
        if (parentRow.getRows().size() > 0 )
        {
        	voStandingSession.getTiltTableExercise().clear();
        	voStandingSession.getFrameExercise().clear();
        }								    
		for (int i=0; i < parentRow.getRows().size(); i++)
        {
			if(parentRow.getRows().get(i).getValue() instanceof TiltExerciseVo)
				voStandingSession.getTiltTableExercise().add((TiltExerciseVo) parentRow.getRows().get(i).getValue());
			if(parentRow.getRows().get(i).getValue() instanceof FrameExerciseVo)
				voStandingSession.getFrameExercise().add((FrameExerciseVo) parentRow.getRows().get(i).getValue());
        }
		
	}

	private void populateParentInstanceData(StandingSessionVo voStandingSession)
	{
		voStandingSession.setAuthoringCP(form.ctnStand().lyrParent().tabHeader().qmbAuthoringCP().getValue());
		voStandingSession.setAuthoringDateTime(form.ctnStand().lyrParent().tabHeader().dtimAuthoringDateTime().getValue());		
	}

	private void checkForUnsavedChild()
	{
		if (form.getLocalContext().getSelectedChildInstance() == null)
		{				
			addOrUpdateChild();
		}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	private void updateControlsState()
	{
		//The new button
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) 
				&& form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
				&& form.getLocalContext().getGoldenInstanceFound().booleanValue() == false);

		// The collapsible container
		form.ctnStand().setCollapsed(form.getLocalContext().getSelectedParentInstance() == null);						

		// The empty tab
		if (form.grdSummary().getValue() == null)
			form.ctnStand().lyrParent().showtabEmpty();

		// The Parent tab
		setParentTabVisability();						

		// The details tab
		setDetailsTabVisibility();		

		// Pick a tab to show
		showHeaderOrDetailsTab();																				

		// The context menus
		updateContextMenusState();		
		
	}
	private void showHeaderOrDetailsTab()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			// In view mode just show the selected node 
			if (form.grdSummary().getValue() instanceof StandingSessionShortVo)		
				form.ctnStand().lyrParent().showtabHeader();
			else if (form.grdSummary().getValue() instanceof StandingSessionVo)		
				form.ctnStand().lyrParent().showtabHeader();
			else if (form.grdSummary().getValue() instanceof FrameExerciseVo)
				form.ctnStand().lyrParent().showtabDetails();
			else if (form.grdSummary().getValue() instanceof TiltExerciseVo)
				form.ctnStand().lyrParent().showtabDetails();
			
			enableParentControls(false);
		}
		else
		{
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.TRUE))
				form.ctnStand().lyrParent().showtabHeader();
			else
				form.ctnStand().lyrParent().showtabDetails();
			
			if (form.getLocalContext().getSelectedParentInstanceIsNotNull() && 
					(form.getLocalContext().getSelectedParentInstance().getID_StandingSessionIsNotNull()))
				enableParentControls(false);		//on update
			else
				enableParentControls(true);			//new record
		}
		
	}

	private void setDetailsTabVisibility()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{	
			// In view mode, make the details tab visible if a detail instance is selected in the hierarchy grid.  
			form.ctnStand().lyrParent().tabDetails().setHeaderVisible(form.grdSummary().getValue() instanceof FrameExerciseVo || form.grdSummary().getValue() instanceof TiltExerciseVo);									
			enableControls(true);
		}
		else
		{			
			// In edit mode, make the details tab visible if a hierarchy item has been selected and we're not
			// editing a parent.
			form.ctnStand().lyrParent().tabDetails().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull() && 
					form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE));
			
			enableControls(false);
			
			setAddApplyCaption();			
		}			
		enableDetailsButtons();	
	}

	private void enableControls(boolean enable)
	{
		form.ctnStand().lyrParent().tabDetails().grdSelect().setReadOnly(enable);
		form.ctnStand().lyrParent().tabDetails().grdTime().setReadOnly(enable);
		form.ctnStand().lyrParent().tabDetails().intDegrees().setEnabled(!enable);
		form.ctnStand().lyrParent().tabDetails().intMinutes().setEnabled(!enable);
		form.ctnStand().lyrParent().tabDetails().cmbSupport().setEnabled(!enable);
	}

	private void enableDetailsButtons()
	{
		boolean boolVisible = (form.getMode().equals(FormMode.EDIT) &&
				  form.ctnStand().lyrParent().tabDetails().isHeaderVisible() &&
				  form.getLocalContext().getSelectedChildInstance() == null);

		form.ctnStand().lyrParent().tabDetails().btnOk().setVisible(boolVisible);
		form.ctnStand().lyrParent().tabDetails().btnCancelDetails().setVisible(boolVisible);
		
	}

	private void setAddApplyCaption()
	{
		form.ctnStand().lyrParent().tabDetails().btnOk().setText("Add");
		
		if (form.getLocalContext().getSelectedChildInstance() == null &&
			 (form.grdSummary().getValue() instanceof FrameExerciseVo || form.grdSummary().getValue() instanceof TiltExerciseVo))
				form.ctnStand().lyrParent().tabDetails().btnOk().setText("Apply");	
	}

	private void setParentTabVisability()
	{
		form.ctnStand().lyrParent().tabHeader().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull());					
		//enableParentControls();		
	}

	private void enableParentControls(boolean enable)
	{
		form.ctnStand().lyrParent().tabHeader().dtimAuthoringDateTime().setEnabled(enable);
		form.ctnStand().lyrParent().tabHeader().qmbAuthoringCP().setEnabled(enable);	
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				updateInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Remove:
				removeChild();
		}
	}
	private void removeChild()
	{
		StandingSessionShortVo voParentShort = null;
		StandingSessionVo voParentStanding = null;
		
		if(form.grdSummary().getSelectedRow().getParentRow().getValue() instanceof StandingSessionShortVo)
		{
			voParentShort = (StandingSessionShortVo) form.grdSummary().getSelectedRow().getParentRow().getValue();
			form.grdSummary().removeSelectedRow();
			form.grdSummary().setValue(voParentShort);
		}
		else
		{
			voParentStanding = (StandingSessionVo) form.grdSummary().getSelectedRow().getParentRow().getValue();
			form.grdSummary().removeSelectedRow();
			form.grdSummary().setValue(voParentStanding);
		}
		
		updateContextMenusState();
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}
	private void newInstance()
	{
		// New instance has been invoked for a parent instance with no current selection made OR
		// with a parent that is not the Golden node..
		if (form.grdSummary().getValue() == null || ((form.getLocalContext().getSelectedParentInstanceIsNotNull() 
				&& form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))))
		{
			newParentInstance();			
		}

		// New instance has been invoked with a child node selected.
		if (form.grdSummary().getValue() instanceof StandingSessionVo || (form.grdSummary().getValue() instanceof FrameExerciseVo || form.grdSummary().getValue() instanceof TiltExerciseVo))
		{
			newChildInstance();
		}
		form.setMode(FormMode.EDIT);	
	}

	private void newChildInstance()
	{
		clearChildInstanceControls();
		form.getLocalContext().setSelectedChildInstance(null);
		if(form.grdSummary().getSelectedRow().getParentRow() != null)
			form.grdSummary().setValue(form.grdSummary().getSelectedRow().getParentRow().getValue());
	}

	private void newParentInstance()
	{
		StandingSessionVo voNewParent = new StandingSessionVo(); 	
		Hcp voHcp = (Hcp) domain.getHcpUser();
		if(voHcp != null)
			voNewParent.setAuthoringCP(voHcp);
		voNewParent.setAuthoringDateTime(new DateTime());
		voNewParent.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voNewParent.setTiltTableExercise(new TiltExerciseVoCollection());
		populateParentInstanceControls(voNewParent);		
		form.getLocalContext().setSelectedParentInstance(voNewParent);		
	}

	private void updateInstance()
	{
		if(allowUpdate())
		{		
			form.getLocalContext().setUpdatingParent(new Boolean(form.grdSummary().getValue() instanceof StandingSessionShortVo));
			form.setMode(FormMode.EDIT);
			if (form.grdSummary().getValue() instanceof TiltExerciseVo) 			
			{
				TiltExerciseVo voCachedChild = (TiltExerciseVo) form.grdSummary().getValue(); 
				if ( voCachedChild.getID_TiltExercise() == null)
				{
					populateChildInstanceControls(voCachedChild);
				}			
			}
			if(form.grdSummary().getValue() instanceof FrameExerciseVo)
			{
				FrameExerciseVo voCachedChild = (FrameExerciseVo) form.grdSummary().getValue(); 
				if ( voCachedChild.getID_FrameExercise() == null)
				{
					populateChildInstanceControls(voCachedChild);
				}	
			}			
			form.ctnStand().lyrParent().tabDetails().cmbSupport().setEnabled(false);
		}
	}
	
	public boolean allowUpdate()
	{
		return (form.grdSummary().getValue() != null); 
	}
	
	protected void onBtnCancelDetailsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearChildInstanceControls();
	}
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addOrUpdateChild();
	}
	private boolean addOrUpdateChild()
	{		
		if (form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))			
			if(!newParentNode(form.getLocalContext().getSelectedParentInstance()))
				return false;			
		
		ValueObject vo = form.getLocalContext().getSelectedChildInstance();
		
		vo = populateChildInstanceData(vo);

		if ((form.grdSummary().getValue() instanceof FrameExerciseVo || form.grdSummary().getValue() instanceof TiltExerciseVo)
																	&& form.getLocalContext().getSelectedChildInstanceIsNotNull())
		{
			promoteUpdatedChild(vo);
			newChildInstance();
			updateControlsState();
		}
		else
		{
			newChildNode(vo);
			return true;
		}
		return false;
	}

	private void newChildNode(ValueObject vo)
	{
		if (form.getLocalContext().getSelectedChildInstance() != null) return;
		
		TiltExerciseVo voTilt = null;
		FrameExerciseVo voFrame = null;
		
		if(vo instanceof TiltExerciseVo)
			voTilt = (TiltExerciseVo) vo;

		if(vo instanceof FrameExerciseVo)
			voFrame = (FrameExerciseVo) vo;
		
		if(voTilt != null)
		{
			if (voTilt.countFieldsWithValue() > 1)
			{
				String strErrors[] = voTilt.validate();
			
				if(strErrors != null && strErrors.length > 0)
				{
					engine.showErrors(strErrors);
					return;
				}	
				promoteChild(voTilt);			
			}
		}
		if(voFrame != null)
		{
			if (voFrame.countFieldsWithValue() > 1)
			{
				String strErrors[] = voFrame.validate();
			
				if(strErrors != null && strErrors.length > 0)
				{
					engine.showErrors(strErrors);
					return;
				}	
				promoteChild(voFrame);			
			}
		}
		clearChildInstanceControls();
	}

	private void promoteChild(ValueObject vo)
	{
		if(vo == null) return;
		
		TiltExerciseVo voTilt = null;
		FrameExerciseVo voFrame = null;
		if(vo instanceof TiltExerciseVo)
			voTilt = (TiltExerciseVo) vo;
		if(vo instanceof FrameExerciseVo)
			voFrame = (FrameExerciseVo) vo;
	
		GenForm.grdSummaryRow childRow = null;
		form.grdSummary().setValue(form.getLocalContext().getSelectedParentInstance());
		if(form.grdSummary().getValue() != null)
		{
			if(form.grdSummary().getSelectedRow().getValue() instanceof TiltExerciseVo ||form.grdSummary().getSelectedRow().getValue() instanceof FrameExerciseVo)
				childRow = form.grdSummary().getSelectedRow().getParentRow().getRows().newRow();
			else
				childRow = form.grdSummary().getSelectedRow().getRows().newRow();
		}
		if(voTilt != null)
			populateChildNode(childRow, voTilt);
		else
			populateChildNode(childRow, voFrame);
		
	}

	private void populateChildNode(grdSummaryRow childRow, ValueObject vo)
	{
		if (vo == null) return;
		
		TiltExerciseVo voTilt = null;
		FrameExerciseVo voFrame = null;
		
		if(vo instanceof TiltExerciseVo)
			voTilt = (TiltExerciseVo) vo;
		if(vo instanceof FrameExerciseVo)
			voFrame = (FrameExerciseVo) vo;
		
		if(voTilt != null)
		{
			if(voTilt.getSupportType() != null)
				childRow.setColDateSupportType(voTilt.getSupportType().toString());
			if(voTilt.getTiltExerciseDetails() != null)
				childRow.setColDetails(voTilt.getTiltExerciseDetails());	
			childRow.setValue(voTilt);
	
			//if not saved then set the colour
			if(voTilt.getID_TiltExercise() == null)
				childRow.setTextColor(Color.Red);
		}
		else
		{
			if(voFrame.getFrameExerciseSupportType() != null)
				childRow.setColDateSupportType(voFrame.getFrameExerciseSupportType().toString());
			if(voFrame.getFrameExerciseDetails() != null)
				childRow.setColDetails(voFrame.getFrameExerciseDetails());	
			childRow.setValue(voFrame);
	
			//if not saved then set the colour
			if(voFrame.getID_FrameExercise() == null)
				childRow.setTextColor(Color.Red);
		}
		
	}

	private void promoteUpdatedChild(ValueObject vo)
	{
		if (vo == null) return;
		form.grdSummary().setValue(form.getLocalContext().getSelectedChildInstance());
		populateChildNode(form.grdSummary().getSelectedRow(),vo);
		//populateChildNode(form.grdSummary().getSelectedRow(),vo);	
	}

	private ValueObject populateChildInstanceData(ValueObject vo)
	{
		StandingSessionVo voStandingSession = null;
		TiltExerciseVo voTilt = null;
		TiltExerciseVoCollection voTiltColl = null;
		FrameExerciseVo voFrame = null;
		FrameExerciseSupportVo voSupport = null;
		FrameExerciseVoCollection voFrameColl = null;
		FrameExerciseSupportVoCollection voFrameSupportColl = null;
		StandingSupportTypeExerciseCollection standExerciseVoColl = null;
		
		if(form.getLocalContext().getSelectedParentInstance() != null)
		{
			voStandingSession = form.getLocalContext().getSelectedParentInstance();
			voTiltColl = voStandingSession.getTiltTableExercise();
			voFrameColl = voStandingSession.getFrameExercise();
		}
		
		if(vo instanceof TiltExerciseVo)
			voTilt = (TiltExerciseVo) vo;
		
		if(vo instanceof FrameExerciseVo)
			voFrame = (FrameExerciseVo) vo;
		
		if(form.ctnStand().lyrParent().tabDetails().cmbSupport().getValue() != null)
		{
			if(form.ctnStand().lyrParent().tabDetails().cmbSupport().getValue().equals(StandingSupportTypeExercise.TILTTABLE))
			{
				if(voTilt == null)
					voTilt = new TiltExerciseVo();
				
				voTilt.setSupportType(form.ctnStand().lyrParent().tabDetails().cmbSupport().getValue());
				voTilt.setDegrees(form.ctnStand().lyrParent().tabDetails().intDegrees().getValue());
				voTilt.setDuration(form.ctnStand().lyrParent().tabDetails().intMinutes().getValue());
				voTilt.setTiltExerciseDetails(form.ctnStand().lyrParent().tabDetails().txtComment().getValue());
				
				if(voTiltColl == null)
					voTiltColl = new TiltExerciseVoCollection();
				
				if(form.ctnStand().lyrParent().tabDetails().grdSelect().getRows().size()>0)
				{
					for(int i=0; i<form.ctnStand().lyrParent().tabDetails().grdSelect().getRows().size(); i++)
					{
						GenForm.ctnStandContainer.lyrParentLayer.tabDetailsContainer.grdSelectRow rowSelect = form.ctnStand().lyrParent().tabDetails().grdSelect().getRows().get(i);
						if(rowSelect.getColSelect())
						{
							if(standExerciseVoColl == null)
								standExerciseVoColl = new StandingSupportTypeExerciseCollection();
							
							standExerciseVoColl.add(rowSelect.getValue());	
						}
					}
					voTilt.setTiltSupportExercise(standExerciseVoColl);
				}
				voTiltColl.add(voTilt);
				voStandingSession.setTiltTableExercise(voTiltColl);
				return voTilt;
			}
			else
			{
				if(voFrame == null)
					voFrame = new FrameExerciseVo();
				voFrame.setFrameExerciseSupportType(form.ctnStand().lyrParent().tabDetails().cmbSupport().getValue());
				voFrame.setFrameExerciseDetails(form.ctnStand().lyrParent().tabDetails().txtComment().getValue());
				if(voFrameColl == null)
					voFrameColl = new FrameExerciseVoCollection();
				if(form.ctnStand().lyrParent().tabDetails().grdTime().getRows().size()>0)
				{			
					GenForm.ctnStandContainer.lyrParentLayer.tabDetailsContainer.grdTimeRow rowTime;
					for(int i=0; i<form.ctnStand().lyrParent().tabDetails().grdTime().getRows().size(); i++)
					{
						
						rowTime = form.ctnStand().lyrParent().tabDetails().grdTime().getRows().get(i);
						voSupport = rowTime.getValue();
						if (voSupport == null)
							voSupport = new FrameExerciseSupportVo();
	
						voSupport.setDurationTime(rowTime.getColTime());
						voSupport.setFrameSupportExercise(rowTime.getColSupportType());
						if(rowTime.getColTime() != null)
						{
							if(voFrameSupportColl == null)
								voFrameSupportColl = new FrameExerciseSupportVoCollection();
							voFrameSupportColl.add(voSupport);
						}
					}
					voFrame.setFrameExerciseSupport(voFrameSupportColl);
					
				}
				voFrameColl.add(voFrame);
				voStandingSession.setFrameExercise(voFrameColl);
				return voFrame;
			}
		}
		return null;
	}

	private boolean newParentNode(StandingSessionVo voNewParent)
	{
		if (voNewParent == null) return true;
		
		StandingSessionShortVo voParentShort = new StandingSessionShortVo();
		voParentShort.setAuthoringCP(form.ctnStand().lyrParent().tabHeader().qmbAuthoringCP().getValue());
		voParentShort.setAuthoringDateTime(form.ctnStand().lyrParent().tabHeader().dtimAuthoringDateTime().getValue());
		voParentShort.setClinicalContact(voNewParent.getClinicalContact());
		
		String[] errors = voParentShort.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		GenForm.grdSummaryRow parentRow = form.grdSummary().getRows().newRow();	
		if(voParentShort.getAuthoringCPIsNotNull())
			parentRow.setColDateSupportType(voParentShort.getAuthoringDateTime().toString()+ " - " + 
							   	voParentShort.getAuthoringCP().toString());			
		parentRow.setValue(voParentShort);
		parentRow.setBackColor(Color.Beige);
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
		parentRow.setExpanded(true);
		form.grdSummary().setValue(voParentShort);	
		return true;		
	}

	private void hideControlsForTilt(boolean visible)
	{
		form.ctnStand().lyrParent().tabDetails().labelDeg().setVisible(visible);
		form.ctnStand().lyrParent().tabDetails().intDegrees().setVisible(visible);
		form.ctnStand().lyrParent().tabDetails().labelMin().setVisible(visible);
		form.ctnStand().lyrParent().tabDetails().intMinutes().setVisible(visible);
	}
	private void showGrd(boolean visible)
	{
		form.ctnStand().lyrParent().tabDetails().grdSelect().setVisible(visible);
		form.ctnStand().lyrParent().tabDetails().grdTime().setVisible(!visible);
		form.ctnStand().lyrParent().tabDetails().txtComment().setValue(null);
	}

	private void prePopulateTiltGrd()
	{
		GenForm.ctnStandContainer.lyrParentLayer.tabDetailsContainer.grdSelectRow row = null;
		form.ctnStand().lyrParent().tabDetails().grdSelect().getRows().clear();
		ArrayList coll = form.ctnStand().lyrParent().tabDetails().cmbSupport().getValue().getChildInstances();
		
		for(int i=0;i<coll.size();i++)
		{
			StandingSupportTypeExercise type = (StandingSupportTypeExercise)coll.get(i);
			row = form.ctnStand().lyrParent().tabDetails().grdSelect().getRows().newRow();
			row.setValue(type);
			row.setColSupportType(type.getText());
		}
		
	}
	private void populateTiltControls(TiltExerciseVo tiltTableExercise)
	{
		form.ctnStand().lyrParent().tabDetails().cmbSupport().setValue(tiltTableExercise.getSupportType());
		form.ctnStand().lyrParent().tabDetails().txtComment().setValue(tiltTableExercise.getTiltExerciseDetails());
		form.ctnStand().lyrParent().tabDetails().intDegrees().setValue(tiltTableExercise.getDegrees());
		form.ctnStand().lyrParent().tabDetails().intMinutes().setValue(tiltTableExercise.getDuration());
		form.getLocalContext().setSelectedChildInstance(tiltTableExercise);
	}
	private void populateTiltGrd(StandingSupportTypeExerciseCollection tiltSupportExerciseColl)
	{
		GenForm.ctnStandContainer.lyrParentLayer.tabDetailsContainer.grdSelectRow tRow = null;
		form.ctnStand().lyrParent().tabDetails().grdTime().setVisible(false);
		form.ctnStand().lyrParent().tabDetails().grdSelect().setVisible(true);
		if(tiltSupportExerciseColl != null)
		{
			for (int i=0; i<tiltSupportExerciseColl.size(); i++)
			{
				StandingSupportTypeExercise modal = tiltSupportExerciseColl.get(i);
				tRow = form.ctnStand().lyrParent().tabDetails().grdSelect().getRowByValue(modal);
				if (tRow != null)
					tRow.setColSelect(true);
				else
				{
					tRow = form.ctnStand().lyrParent().tabDetails().grdSelect().getRows().newRow();
					tRow.setValue(modal);
					tRow.setColSupportType(modal.getText());	
					tRow.setColSelect(true);	
				}
			}	
		}
	}
	private void prePopulateFrameGrd()  
	{
	  	GenForm.ctnStandContainer.lyrParentLayer.tabDetailsContainer.grdTimeRow row = null;
	  	form.ctnStand().lyrParent().tabDetails().grdTime().getRows().clear();
	  	ArrayList coll = form.ctnStand().lyrParent().tabDetails().cmbSupport().getValue().getChildInstances();
	  	
	  	for (int i = 0; i < coll.size(); i++)
		{
			StandingSupportTypeExercise type  = (StandingSupportTypeExercise) coll.get(i);
		  	row = form.ctnStand().lyrParent().tabDetails().grdTime().getRows().newRow();
		  	row.setColSupportType(type);
		}
	}
	private void populateFrameControls(FrameExerciseVo frameExercise)
	{
		form.ctnStand().lyrParent().tabDetails().cmbSupport().newRow(frameExercise.getFrameExerciseSupportType(), frameExercise.getFrameExerciseSupportType().toString());
		form.ctnStand().lyrParent().tabDetails().cmbSupport().setValue(frameExercise.getFrameExerciseSupportType());
		form.ctnStand().lyrParent().tabDetails().txtComment().setValue(frameExercise.getFrameExerciseDetails());
		form.getLocalContext().setSelectedChildInstance(frameExercise);
		form.ctnStand().lyrParent().tabDetails().grdTime().setVisible(true);
		form.ctnStand().lyrParent().tabDetails().grdSelect().setVisible(false);
		
		populateFrameGrd(frameExercise.getFrameExerciseSupport());
	
	}
	private void populateFrameGrd(FrameExerciseSupportVoCollection voSupportColl)
	{
		GenForm.ctnStandContainer.lyrParentLayer.tabDetailsContainer.grdTimeRow row = null;
		
		for(int x=0; x<voSupportColl.size(); x++)
		{
			FrameExerciseSupportVo voSupport = voSupportColl.get(x);
			int i=0;
			for(i=0; i<form.ctnStand().lyrParent().tabDetails().grdTime().getRows().size(); i++)
			{
				row = form.ctnStand().lyrParent().tabDetails().grdTime().getRows().get(i);
				if(row.getColSupportType().equals(voSupport.getFrameSupportExercise()))
				{
					row.setColTime(voSupport.getDurationTime());
					break;
				}
			}
			if(i == form.ctnStand().lyrParent().tabDetails().grdTime().getRows().size())
			{
				row = form.ctnStand().lyrParent().tabDetails().grdTime().getRows().newRow();
				row.setValue(voSupport);
				row.setColSupportType(voSupport.getFrameSupportExercise());
				row.setColTime(voSupport.getDurationTime());
			}
		}
		
	}
	protected void onQmbAuthoringCPTextSubmited(String value) throws PresentationLogicException
	{
		setAuthoringCP(value);		
	}

	private void setAuthoringCP(String value)
	{
		form.ctnStand().lyrParent().tabHeader().qmbAuthoringCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		
		HcpCollection coll = domain.listMedics(filter);
		for (int i = 0; i < coll.size(); i++)
		{
			Hcp med = coll.get(i);
			form.ctnStand().lyrParent().tabHeader().qmbAuthoringCP().newRow(med, med.toString());			
		}
		if (coll.size() == 1)
			form.ctnStand().lyrParent().tabHeader().qmbAuthoringCP().setValue(coll.get(0));
		else if (coll.size() > 1)
			form.ctnStand().lyrParent().tabHeader().qmbAuthoringCP().showOpened();	
		
	}

}
