//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.45 build 2265.41281)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.patientmotorchart;

import ims.clinicaladmin.vo.MotorAreaVo;
import ims.clinicaladmin.vo.MotorAreaVoCollection;
import ims.clinicaladmin.vo.MuscleGroupsVo;
import ims.clinicaladmin.vo.MuscleVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.LateralityLRonly;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.therapies.vo.MotorAreaRefVo;
import ims.therapies.vo.MotorChartDetailsVo;
import ims.therapies.vo.MotorChartDetailsVoCollection;
import ims.therapies.vo.MuscleGroupRefVo;
import ims.therapies.vo.MuscleRefVo;
import ims.therapies.vo.PatientMotorChartShortVo;
import ims.therapies.vo.PatientMotorChartShortVoCollection;
import ims.therapies.vo.PatientMotorChartVo;
import ims.vo.ValueObject;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	
	private static final String	MOTOR_COLUMN	= "0";
	private static final String	RIGHT_COLUMN	= "1";
	private static final String	LEFT_COLUMN		= "2";

	protected void onFormOpen() throws PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void initialize()
	{
		form.getLocalContext().setMotorAreaVoCollection(domain.listMotorAreas());
		initializeDynamicGrdMotor();
	}
	
	private void open()
	{
		clearControls();
		fillRecordBrowser();
		form.setMode(FormMode.VIEW);
	}

	private void clearControls()
	{
		form.dyngrdMotor().getRows().clear();
		clearAuthoringControls();
	}

	private void clearAuthoringControls()
	{
		form.qmbAuthoringHCP().clear();
		form.dtimAuthoring().setValue(null);
	}
	
	private void fillRecordBrowser()
	{
		form.recbrPreviousMotorCharts().clear();
		
		PatientMotorChartShortVoCollection collCharts = domain.listPatientMotorChartShort(form.getGlobalContext().Core.getCurrentCareContext());
		
		loadCareContext();
		loadClinicalContactPatientMotorChartRecords(collCharts);
		
		updateBrowseInformation();
		
		browserRecord();
	}
	
	private void loadCareContext()
	{
		CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		ClinicalContactShortVo voClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		
		form.recbrPreviousMotorCharts().newRow(voCareContext, voCareContext.getRecordBrowserText(),voClinicalContact == null? Color.Green:Color.Default);
		
		if(voClinicalContact == null)
			form.recbrPreviousMotorCharts().setValue(voCareContext);
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	private void newInstance()
	{
		listAreas(false);
		setDefaultValues();
		form.getLocalContext().setSelectedPatientMotorChartVo(null);
		form.setMode(FormMode.EDIT);
	}

	private void setDefaultValues()
	{
		Hcp voHcp = (Hcp) domain.getHcpUser();
		if(voHcp != null)
			form.qmbAuthoringHCP().newRow(voHcp, voHcp.toString());
		
		form.qmbAuthoringHCP().setValue(voHcp);
		form.dtimAuthoring().setValue(new DateTime());
	}

	private void listAreas(boolean bShowInactive)
	{
		MotorAreaVoCollection collArea = form.getLocalContext().getMotorAreaVoCollection();

		form.dyngrdMotor().getRows().clear();

		for (int i = 0; i < collArea.size(); i++)
		{
			MotorAreaVo areaVo = collArea.get(i);

			if ((bShowInactive) || (areaVo.getIsActiveIsNotNull() && areaVo.getIsActive().booleanValue()))
			{
				DynamicGridRow rowArea = form.dyngrdMotor().getRows().newRow();
				DynamicGridCell cellMuscleArea = rowArea.getCells().newCell(form.dyngrdMotor().getColumns().getByIdentifier(MOTOR_COLUMN), DynamicCellType.LABEL);
				rowArea.setSelectable(false);
				rowArea.setExpanded(true);
				rowArea.setValue(areaVo);
				cellMuscleArea.setValue(areaVo.getName());
			
				rowArea.getCells().newCell(form.dyngrdMotor().getColumns().getByIdentifier(RIGHT_COLUMN), DynamicCellType.INT);
				rowArea.getCells().newCell(form.dyngrdMotor().getColumns().getByIdentifier(LEFT_COLUMN), DynamicCellType.INT);
				
				if (areaVo.getMuscleGroupsIsNotNull())
				{
					for (int j = 0; j < areaVo.getMuscleGroups().size(); j++)
					{
						MuscleGroupsVo groupVo = areaVo.getMuscleGroups().get(j);
						if ((bShowInactive) || (groupVo.getIsActive().booleanValue()))
						{
							DynamicGridRow rowGroup = rowArea.getRows().newRow();
							rowGroup.setSelectable(false);
							rowGroup.setValue(groupVo);
							DynamicGridCell cellMuscleGroup = rowGroup.getCells().newCell(form.dyngrdMotor().getColumns().getByIdentifier(MOTOR_COLUMN),DynamicCellType.LABEL);
							cellMuscleGroup.setValue(groupVo.getName());
							
							rowGroup.getCells().newCell(form.dyngrdMotor().getColumns().getByIdentifier(RIGHT_COLUMN), DynamicCellType.INT);
							rowGroup.getCells().newCell(form.dyngrdMotor().getColumns().getByIdentifier(LEFT_COLUMN), DynamicCellType.INT);

							groupVo = domain.getMuscles(groupVo);
							
							if (groupVo.getMuscleGroupMuscleIsNotNull())
							{
								for (int k = 0; k < groupVo.getMuscleGroupMuscle().size(); k++)
								{
									MuscleVo muscleVo = groupVo.getMuscleGroupMuscle().get(k).getMuscle();

									if ((bShowInactive) || (muscleVo.getIsActive().booleanValue()))
									{
										DynamicGridRow rowMuscle = rowGroup.getRows().newRow();
										rowMuscle.setSelectable(false);
										rowMuscle.setValue(muscleVo);
										DynamicGridCell cellMuscle = rowMuscle.getCells().newCell(form.dyngrdMotor().getColumns().getByIdentifier(MOTOR_COLUMN), DynamicCellType.LABEL);
										cellMuscle.setValue(muscleVo.getName());
										
										rowMuscle.getCells().newCell(form.dyngrdMotor().getColumns().getByIdentifier(RIGHT_COLUMN), DynamicCellType.INT);
										rowMuscle.getCells().newCell(form.dyngrdMotor().getColumns().getByIdentifier(LEFT_COLUMN), DynamicCellType.INT);
									}
								}
							}
							rowGroup.setExpanded(true);
						}
					}
				}
				rowArea.setExpanded(true);
			}
		}
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	private boolean save()
	{
		PatientMotorChartVo patChartVo = form.getLocalContext().getSelectedPatientMotorChartVo();
		if (patChartVo == null)
			patChartVo = new PatientMotorChartVo();

		patChartVo.setAuthoringCP(form.qmbAuthoringHCP().getValue());
		patChartVo.setAuthoringDateTime(form.dtimAuthoring().getValue());

		patChartVo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

		MotorChartDetailsVoCollection coll = populateMuscleAreasDataFromGrd();

		if (coll.size() > 0)
			patChartVo.setDetails(coll);
		else
		{
			engine.showMessage("You have saved no Motor Chart scores. Please enter some Score details and save again.");
			return false;
		}

		String[] errors = patChartVo.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			form.getLocalContext().setSelectedPatientMotorChartVo(domain.savePatientMotorChart(patChartVo));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		return true;
	}

	private MotorChartDetailsVoCollection populateMuscleAreasDataFromGrd()
	{
		MotorChartDetailsVoCollection coll = new MotorChartDetailsVoCollection();

		DynamicGridColumn leftColumn = form.dyngrdMotor().getColumns().getByIdentifier(LEFT_COLUMN);
		DynamicGridColumn rightColumn = form.dyngrdMotor().getColumns().getByIdentifier(RIGHT_COLUMN);
		
		for (int i = 0; i < form.dyngrdMotor().getRows().size(); i++)
		{
			MotorAreaVo voMotorArea = null;
			MotorAreaRefVo voMotorAreaRef = null;
			
			MuscleGroupsVo groupMuscleVo = null;
			MuscleGroupRefVo groupMuscleRefVo = null;
			
			MuscleVo muscleVo = null;
			MuscleRefVo voMuscleRef = null;
			
			DynamicGridRow row = form.dyngrdMotor().getRows().get(i);
			if(row != null)
			{
				if(row.getValue() instanceof MotorAreaVo)
				{
					//saves a Motor Area Score
					voMotorArea = (MotorAreaVo) row.getValue();
					voMotorAreaRef = new MotorAreaRefVo();
					voMotorAreaRef.setID_MotorArea(voMotorArea.getID_MotorArea());
					
					groupMuscleRefVo = null;
					voMuscleRef = null;
					
					if (row.getCells().get(leftColumn).getValue() != null)
						populateMotorChartDetails(coll, LateralityLRonly.LEFT,voMotorAreaRef,groupMuscleRefVo,voMuscleRef, row.getCells().get(leftColumn).getValue());

					if (row.getCells().get(rightColumn).getValue()!= null)
						populateMotorChartDetails(coll, LateralityLRonly.RIGHT,voMotorAreaRef,groupMuscleRefVo,voMuscleRef, row.getCells().get(rightColumn).getValue());
			
					
					if(row.getRows() != null)
					{
						//save Muscle Group Scores
						for(int z=0; z<row.getRows().size(); z++)
						{
							DynamicGridRow groupRow = row.getRows().get(z);
							if(groupRow.getValue() instanceof MuscleGroupsVo)
							{
								groupMuscleVo = (MuscleGroupsVo) groupRow.getValue();
								groupMuscleRefVo = new MuscleGroupRefVo();
								groupMuscleRefVo.setID_MuscleGroup(groupMuscleVo.getID_MuscleGroup());
				
								voMotorArea = (MotorAreaVo) row.getRows().get(z).getParent().getValue();
								voMotorAreaRef = new MotorAreaRefVo();
								voMotorAreaRef.setID_MotorArea(voMotorArea.getID_MotorArea());
								
								voMuscleRef = null;
				
								if (row.getRows().get(z).getCells().get(leftColumn).getValue() != null)
									populateMotorChartDetails(coll, LateralityLRonly.LEFT,voMotorAreaRef,groupMuscleRefVo,voMuscleRef, row.getRows().get(z).getCells().get(leftColumn).getValue());
					
								if (row.getRows().get(z).getCells().get(rightColumn).getValue() != null)
									populateMotorChartDetails(coll, LateralityLRonly.RIGHT,voMotorAreaRef,groupMuscleRefVo,voMuscleRef, row.getRows().get(z).getCells().get(rightColumn).getValue());
	
							}
							
							if(groupRow.getRows() != null)
							{
								// save Muscle Scores
								for(int s=0; s< groupRow.getRows().size(); s++)
								{
									DynamicGridRow muscleRow = groupRow.getRows().get(s);
									if(muscleRow.getValue() instanceof MuscleVo)
									{
										muscleVo = (MuscleVo) muscleRow.getValue();
										voMuscleRef = new MuscleRefVo();
										voMuscleRef.setID_Muscle(muscleVo.getID_Muscle());
										
										groupMuscleVo = (MuscleGroupsVo) muscleRow.getParent().getValue();
										groupMuscleRefVo = new MuscleGroupRefVo();
										groupMuscleRefVo.setID_MuscleGroup(groupMuscleVo.getID_MuscleGroup());
						
										voMotorArea = (MotorAreaVo) muscleRow.getParent().getParent().getValue();
										voMotorAreaRef = new MotorAreaRefVo();
										voMotorAreaRef.setID_MotorArea(voMotorArea.getID_MotorArea());
						
										if (groupRow.getRows().get(s).getCells().get(leftColumn).getValue() != null)
											populateMotorChartDetails(coll, LateralityLRonly.LEFT,voMotorAreaRef,groupMuscleRefVo,voMuscleRef, groupRow.getRows().get(s).getCells().get(leftColumn).getValue());
						
										if (groupRow.getRows().get(s).getCells().get(rightColumn).getValue() != null)
											populateMotorChartDetails(coll, LateralityLRonly.RIGHT,voMotorAreaRef,groupMuscleRefVo,voMuscleRef, groupRow.getRows().get(s).getCells().get(rightColumn).getValue());

									}
								}
							}
						}
					}
				}
			}
		}
		return coll;
	}

	private void populateMotorChartDetails(MotorChartDetailsVoCollection coll, LateralityLRonly lateralityLR, MotorAreaRefVo areaRefVo, MuscleGroupRefVo groupRefVo, MuscleRefVo muscleRefVo, Object score)
	{		
		MotorChartDetailsVo voMotorChartDetails = new MotorChartDetailsVo();
		
		voMotorChartDetails.setLaterality(lateralityLR);
		voMotorChartDetails.setScore((Integer) score);
		voMotorChartDetails.setMotorArea(areaRefVo);
		voMotorChartDetails.setMuscleGroup(groupRefVo);
		voMotorChartDetails.setMuscle(muscleRefVo);
		coll.add(voMotorChartDetails);
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	private void updateInstance()
	{
		listAreas(false);
		displayMotorChart((PatientMotorChartShortVo) form.recbrPreviousMotorCharts().getValue());
		form.setMode(FormMode.EDIT);
	}

	protected void onRecbrPreviousMotorChartsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		browserRecord();		
	}

	private void browserRecord()
	{
		clearControls();
		listAreas(true);
		
		
		//TODO
		ValueObject value = form.recbrPreviousMotorCharts().getValue();
		if( value instanceof PatientMotorChartShortVo && ((PatientMotorChartShortVo)value).getID_PatientMotorChartIsNotNull())
			displayMotorChart((PatientMotorChartShortVo) value);
		
		if (form.dyngrdMotor().getRows().size() > 0)
			removeBlankRows(form.dyngrdMotor().getRows());
		
		enableButtons();
		
		updateBrowseInformation();
	}

	private void displayMotorChart(PatientMotorChartShortVo voPatientMotorChartShort)
	{
		if (voPatientMotorChartShort == null)
			return;

		populateGridWithChartVo(domain.getPatientMotorChart(voPatientMotorChartShort));
	}

	private void removeBlankRows(DynamicGridRowCollection rows)
	{
		int initialSize = rows.size();
		DynamicGridColumn  leftColumn = form.dyngrdMotor().getColumns().getByIdentifier(LEFT_COLUMN);
		DynamicGridColumn rightColumn = form.dyngrdMotor().getColumns().getByIdentifier(RIGHT_COLUMN);
		
		for (int i = 0; i < initialSize; i++)
		{
			if (i < rows.size())
			{
				DynamicGridRow row = rows.get(i);

				if (row.getValue() instanceof MotorAreaVo && row.getRows().size() == 0 
						&& (row.getCells().get(leftColumn).getValue() == null) && (row.getCells().get(rightColumn).getValue() == null))
				{
					form.dyngrdMotor().getRows().remove(row);
					removeBlankRows(rows);
				}
				
				if ((row.getValue() instanceof MotorAreaVo) && (row.getRows().size()> 0))
				{
					for(int z =0; z<row.getRows().size(); z++)
					{
						DynamicGridRow rowGroup = row.getRows().get(z);
						if ((rowGroup.getValue() instanceof MuscleGroupsVo))
						{
							if (rowGroup.getRows().size() == 0 && (rowGroup.getCells().get(leftColumn).getValue() == null) && (rowGroup.getCells().get(rightColumn).getValue() == null))
							{
								//rows.get(z).getRows().remove(rowGroup);
								row.getRows().remove(rowGroup);
								removeBlankRows(rows);
							}
	
							if(rowGroup.getRows().size()>0)
							{
								for(int x=0; x < rowGroup.getRows().size(); x++)
								{
									DynamicGridRow mRow = rowGroup.getRows().get(x);
									if ((mRow.getCells().get(leftColumn).getValue() == null) && (mRow.getCells().get(rightColumn).getValue() == null))
									{
										rowGroup.getRows().remove(mRow);
										removeBlankRows(rows);
									}
								}
							}								
						}
					}
				}
				
				//if (row.getRows().size() > 0)
				//	removeBlankRows(row.getRows());
			}

		}
		return;
	}

	private void populateGridWithChartVo(PatientMotorChartVo chartVO)
	{
		if (chartVO == null)
			return;

		form.getLocalContext().setSelectedPatientMotorChartVo(chartVO);
		
		form.qmbAuthoringHCP().newRow(chartVO.getAuthoringCP(), chartVO.getAuthoringCP().toString());
		form.qmbAuthoringHCP().setValue(chartVO.getAuthoringCP());
		form.dtimAuthoring().setValue(chartVO.getAuthoringDateTime());

		MotorChartDetailsVoCollection chartDetailsVoColl = chartVO.getDetails();
		
		if (chartDetailsVoColl == null || (chartDetailsVoColl != null && chartDetailsVoColl.size() <= 0))
			return;

		DynamicGridColumn leftCol  = form.dyngrdMotor().getColumns().getByIdentifier(LEFT_COLUMN);
		DynamicGridColumn rightCol = form.dyngrdMotor().getColumns().getByIdentifier(RIGHT_COLUMN);
		
		//Loop thru grid rows and show any results from PatientMotorChartVo
		for (int i = 0; i < form.dyngrdMotor().getRows().size(); i++)
		{
			MotorAreaVo voMotorArea = null;
			DynamicGridRow row = form.dyngrdMotor().getRows().get(i);
			DynamicGridRow groupRow = null;
			DynamicGridRow muscleRow = null;
			
			if (row.getValue() instanceof MotorAreaVo)
				voMotorArea = (MotorAreaVo) row.getValue();
						
			if(voMotorArea != null)
			{
				for (int j = 0; j < chartDetailsVoColl.size(); j++)
				{
					MotorChartDetailsVo voDetail = chartDetailsVoColl.get(j);
					
					// display Motor Area
					if(voDetail.getMotorArea() != null && voDetail.getMuscleGroup() == null && voDetail.getMuscle() == null
							&& voDetail.getMotorArea().getID_MotorArea().equals(voMotorArea.getID_MotorArea()))
					{
						if (voDetail.getLaterality().equals(LateralityLRonly.LEFT))
						{
							DynamicGridCell cell = row.getCells().get(leftCol);
							cell.setValue(voDetail.getScore());
						}
		
						if (voDetail.getLaterality().equals(LateralityLRonly.RIGHT))
						{
							DynamicGridCell cell = row.getCells().get(rightCol);
							cell.setValue(voDetail.getScore());
						}
					}
					
					// display Muscle Group Score
					if(voDetail.getMotorAreaIsNotNull() && voDetail.getMuscleGroupIsNotNull() && voDetail.getMuscle() == null)
					{
						if(row.getRows()!= null)
						{
							for(int x=0; x<row.getRows().size(); x++)
							{
								groupRow = row.getRows().get(x);
								if(groupRow.getValue() instanceof MuscleGroupsVo)
								{
									MuscleGroupsVo voMuscleGroup = (MuscleGroupsVo) groupRow.getValue();
									if(voMuscleGroup.getID_MuscleGroup().equals(voDetail.getMuscleGroup().getID_MuscleGroup()))
									{
										if (voDetail.getLaterality().equals(LateralityLRonly.LEFT))
										{
											DynamicGridCell cell = row.getRows().get(x).getCells().get(leftCol);
											cell.setValue(voDetail.getScore());
										}
						
										if (voDetail.getLaterality().equals(LateralityLRonly.RIGHT))
										{
											DynamicGridCell cell = row.getRows().get(x).getCells().get(rightCol);
											cell.setValue(voDetail.getScore());
										}
									}
								}
							}
						}
					}
					
					// display Muscle Scores
					if(voDetail.getMotorAreaIsNotNull() && voDetail.getMuscleGroupIsNotNull() && voDetail.getMuscleIsNotNull()
							&& voDetail.getMotorArea().getID_MotorArea().equals(voMotorArea.getID_MotorArea()))
					{
						/*if(groupRow == null)*/
							groupRow = findGroupRow(voDetail);
						
						if(groupRow.getRows()!= null)
						{
							for(int x=0; x<groupRow.getRows().size(); x++)
							{
								muscleRow = groupRow.getRows().get(x);
								if(muscleRow.getValue() instanceof MuscleVo)
								{
									MuscleVo muscleVo = (MuscleVo) muscleRow.getValue();
									if(muscleVo.getID_Muscle().equals(voDetail.getMuscle().getID_Muscle()))
									{
										if (voDetail.getLaterality().equals(LateralityLRonly.LEFT))
										{
											DynamicGridCell cell = groupRow.getRows().get(x).getCells().get(leftCol);
											cell.setValue(voDetail.getScore());
										}
						
										if (voDetail.getLaterality().equals(LateralityLRonly.RIGHT))
										{
											DynamicGridCell cell = groupRow.getRows().get(x).getCells().get(rightCol);
											cell.setValue(voDetail.getScore());
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	private DynamicGridRow findGroupRow(MotorChartDetailsVo voDetail)
	{
		DynamicGridRow groupRow = null;
		for(int i=0; i < form.dyngrdMotor().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdMotor().getRows().get(i);
			if(row.getValue() instanceof MotorAreaVo)
			{
				for(int z=0; z<row.getRows().size(); z++)
				{
					DynamicGridRow gRow = row.getRows().get(z);
					if(gRow.getValue() instanceof MuscleGroupsVo)
					{
						MuscleGroupsVo voGroup = (MuscleGroupsVo) gRow.getValue();
						if(voGroup.getID_MuscleGroup().equals(voDetail.getMuscleGroup().getID_MuscleGroup()))
							groupRow = gRow;
					}
				}
			}
		}
		return groupRow;
	}

	protected void onQmbAuthoringCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbAuthoringHCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);

		HcpCollection coll = domain.listHCPs(filter);
		for (int i = 0; i < coll.size(); i++)
		{
			Hcp med = coll.get(i);
			form.qmbAuthoringHCP().newRow(med, med.toString());
		}
		if (coll.size() == 1)
			form.qmbAuthoringHCP().setValue(coll.get(0));
		else if (coll.size() > 1)
			form.qmbAuthoringHCP().showOpened();

	}
	private void loadClinicalContactPatientMotorChartRecords(PatientMotorChartShortVoCollection voPatientMotorChartColl)
	{
		boolean clinConctactRecordExists = isRecordForCurrentClincontactSaved(voPatientMotorChartColl);
		
		if(!clinConctactRecordExists)
			loadCurrentClinicalContact();
			
		for (int i = 0; voPatientMotorChartColl != null && i < voPatientMotorChartColl.size(); i++)
		{
			PatientMotorChartShortVo patientMotorChartShortVo = voPatientMotorChartColl.get(i);
			loadClinicalContactDetails(patientMotorChartShortVo);
		}		
	}

	private void loadClinicalContactDetails(PatientMotorChartShortVo patientMotorChartShortVo)
	{
		boolean isCurrentClinicalContact = false;
		
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			isCurrentClinicalContact = patientMotorChartShortVo.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		form.recbrPreviousMotorCharts().newRow(patientMotorChartShortVo, getClinicalContactText(patientMotorChartShortVo), isCurrentClinicalContact?Color.Green:Color.Default);
		
		if(isCurrentClinicalContact)
			form.recbrPreviousMotorCharts().setValue(patientMotorChartShortVo);
	}

	private void loadCurrentClinicalContact()
	{
		if(form.getGlobalContext().Core.getCurrentClinicalContact() != null)
		{
			PatientMotorChartShortVo patientMotorChartShortVo = new PatientMotorChartShortVo();
			patientMotorChartShortVo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			form.recbrPreviousMotorCharts().newRow(form.getGlobalContext().Core.getCurrentClinicalContact(), getClinicalContactText(patientMotorChartShortVo), Color.Green);
			form.recbrPreviousMotorCharts().setValue(form.getGlobalContext().Core.getCurrentClinicalContact());
		}
	}

	private String getClinicalContactText(PatientMotorChartShortVo patientMotorChartShortVo)
	{
		if (patientMotorChartShortVo == null)
			return "";

		ClinicalContactShortVo voClinicalContact = patientMotorChartShortVo.getClinicalContact();
		if(voClinicalContact != null)
		{
			String sb ="\t\t\t\tClinical Contact: " + voClinicalContact.getStartDateTime().toString() + " - " + voClinicalContact.getSeenBy().toString();
			return sb;
		}
		
		return "";
	}

	private void initializeDynamicGrdMotor()
	{
		form.dyngrdMotor().clear();
		DynamicGridColumn colMotor = form.dyngrdMotor().getColumns().newColumn("Area/Movements", MOTOR_COLUMN, true);
		colMotor.setWidth(600);
	
		DynamicGridColumn colRight = form.dyngrdMotor().getColumns().newColumn("Right", RIGHT_COLUMN, false);
		colRight.setWidth(100);
		
		DynamicGridColumn colLeft = form.dyngrdMotor().getColumns().newColumn("Left", LEFT_COLUMN, false);
		colLeft.setWidth(-1);
	}

	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			boolean isNewRecord = isNewRecord();
			form.qmbAuthoringHCP().setEnabled(isNewRecord);
			form.dtimAuthoring().setEnabled(isNewRecord);
		}
		enableButtons();
	}
	private void enableButtons()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnUpdate().setVisible(form.recbrPreviousMotorCharts().getSelectedIndex() >= 0 && isCurrentClinicalRecordSelected());
			form.btnNew().setVisible(isCurrentClinicalRecord() && isNewRecord());
			if (isNewRecord())
				form.btnUpdate().setVisible(false);
		}
	}
	
	private boolean isNewRecord()
	{
		if(form.recbrPreviousMotorCharts().getValue() instanceof PatientMotorChartShortVo)
		{
			PatientMotorChartShortVo voMotorChart = (PatientMotorChartShortVo) form.recbrPreviousMotorCharts().getValue();
			return voMotorChart == null || voMotorChart.getID_PatientMotorChart() == null;
		}

		if(form.recbrPreviousMotorCharts().getValue() instanceof ClinicalContactShortVo)
			return true;

		return false;
	}
	
	private boolean isCurrentClinicalRecordSelected()
	{
		if(form.recbrPreviousMotorCharts().getValue() instanceof PatientMotorChartShortVo)
		{
			PatientMotorChartShortVo voMotorChart = (PatientMotorChartShortVo) form.recbrPreviousMotorCharts().getValue();
			return voMotorChart != null && voMotorChart.getClinicalContactIsNotNull() && voMotorChart.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()) && voMotorChart.getID_PatientMotorChartIsNotNull();
		}
		if(form.recbrPreviousMotorCharts().getValue() instanceof ClinicalContactShortVo)
		{
			ClinicalContactShortVo voClinContact = (ClinicalContactShortVo)form.recbrPreviousMotorCharts().getValue();
			return voClinContact != null && voClinContact.equals(form.getGlobalContext().Core.getCurrentClinicalContact());
		}
		return false;
	}

	//Check if there is a record for Current Clinical Contact
	private boolean isCurrentClinicalRecord()
	{
		if(form.recbrPreviousMotorCharts().getValue() instanceof PatientMotorChartShortVo)
		{
			PatientMotorChartShortVo voMotorChart = (PatientMotorChartShortVo)form.recbrPreviousMotorCharts().getValue(); 
			if (voMotorChart.getClinicalContactIsNotNull() && voMotorChart.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
				return true;
		}
		if(form.recbrPreviousMotorCharts().getValue() instanceof ClinicalContactShortVo)
		{
			ClinicalContactShortVo voClinContact = (ClinicalContactShortVo)form.recbrPreviousMotorCharts().getValue(); 
			if (voClinContact != null && voClinContact.equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
				return true;
		}
		return false;
	}
	private void updateBrowseInformation()
	{
		int nCount = 0 ;
		int nDisplayedRecord = 0;
		for (int i = 0 ; i < form.recbrPreviousMotorCharts().size() ; i++)
		{
			if( form.recbrPreviousMotorCharts().getValues().get(i) instanceof PatientMotorChartShortVo )
				nCount++;
			
			if( form.recbrPreviousMotorCharts().getValues().get(i) instanceof PatientMotorChartShortVo 
				&& form.recbrPreviousMotorCharts().getValues().get(i).equals(form.recbrPreviousMotorCharts().getValue()))
				nDisplayedRecord = nCount;
		}

		form.lblBrowser().setValue("Assessment " + nDisplayedRecord + " of " + nCount);
	}
	
	private boolean isRecordForCurrentClincontactSaved(PatientMotorChartShortVoCollection collCharts)
	{
		ClinicalContactShortVo voClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		if(voClinicalContact != null && collCharts != null) 
		{
			for (int i = 0; i < collCharts.size(); i++)
			{
				PatientMotorChartShortVo voMotorChart = collCharts.get(i); 
				if (voMotorChart.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
					return true;
			}
		}
		return false;
	}
}
