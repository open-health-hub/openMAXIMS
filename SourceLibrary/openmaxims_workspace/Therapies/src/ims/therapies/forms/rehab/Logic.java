//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.40 build 2194.25473)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.rehab;

import java.util.ArrayList;

import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Color;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.spinalinjuries.vo.lookups.RehabActivity;
import ims.spinalinjuries.vo.lookups.RehabActivityCollection;
import ims.spinalinjuries.vo.lookups.RehabEnvAdaptation;
import ims.spinalinjuries.vo.lookups.RehabEnvAdaptationCollection;
import ims.spinalinjuries.vo.lookups.RehabEquipment;
import ims.spinalinjuries.vo.lookups.RehabEquipmentCollection;
import ims.spinalinjuries.vo.lookups.RehabTechnique;
import ims.spinalinjuries.vo.lookups.RehabTechniqueCollection;
import ims.therapies.forms.rehab.GenForm;
import ims.therapies.vo.RehabilitationVo;
import ims.therapies.vo.RehabilitationShortVo;
import ims.therapies.vo.RehabilitationShortVoCollection;
import ims.therapies.vo.RehabilitationActivityVo;
import ims.therapies.vo.RehabilitationActivityVoCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{		
		initialize();
		open();		
	}
	public void initialize() 
	{		
		form.ctnDetail().setCollapsed(true);
		loadTypeCombo();		
	}	
	protected void onBtnOkActivityClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addOrUpdateNotSavedChild();
	}
	private boolean addOrUpdateNotSavedChild()
	{
		if (form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))			
			if(!newParentNode(form.getLocalContext().getSelectedParentInstance()))
				return false;			
				
		RehabilitationActivityVo voRehabActivity = form.getLocalContext().getSelectedChildInstance();		
			
		if (voRehabActivity == null)
			voRehabActivity = new RehabilitationActivityVo(); 

		populateChildInstanceData(voRehabActivity);

		if (form.grdActivity().getValue() instanceof RehabilitationActivityVo && form.getLocalContext().getSelectedChildInstanceIsNotNull())
		{
			RehabilitationActivityVo voRehabActivitySelected = (RehabilitationActivityVo)form.grdActivity().getValue();
			
			if (voRehabActivitySelected.getID_RehabilitationActivity() == null) 
			{
				//allow update of selected child that is not saved yet.
				promoteUpdatedChild(voRehabActivity);
				newChildInstance();
				updateControlsState();
			}
		}
		else
		{
			if(newChildNode(voRehabActivity))
				return true;			
		}
		return false;		
	}
	
	/**
	 * Invoked when the user clicks OK to add a new element to the child array
	 * Basically we update the hierarchy grid with the newly added details clearing the control
	 * to facilitate new input. We then update the local conte xt variable with the new child 
	 *
	 */
	private boolean newChildNode(RehabilitationActivityVo voRehabActivity) 
	{
		if (form.getLocalContext().getSelectedChildInstance() != null) return false;
		
		if (voRehabActivity.countFieldsWithValue() > 0)
		{
			String strErrors[] = voRehabActivity.validate();
		
			if(strErrors != null && strErrors.length > 0)
			{
				engine.showErrors(strErrors);
				return true;
			}
	 				
			promoteChild(voRehabActivity);			
			clearChildInstanceControls();
			loadEquipment();
			loadAdaptation();
			loadTechnique();
		}
		return false;
	}
	private void promoteChild(RehabilitationActivityVo voRehabActivity) 
	{
		if (voRehabActivity == null) return;
		GenForm.grdActivityRow childRow = null;
		form.grdActivity().setValue(form.getLocalContext().getSelectedParentInstance());
		if(form.grdActivity().getSelectedRow().getValue() instanceof RehabilitationActivityVo)
			childRow = form.grdActivity().getSelectedRow().getParentRow().getRows().newRow();
		else
			childRow = form.grdActivity().getSelectedRow().getRows().newRow();		
		populateChildNode(childRow, voRehabActivity);	
	}
	public void updateControlsState()
	{				
		// The new button
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) 
				&& form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
				&& form.getLocalContext().getGoldenInstanceFound().booleanValue() == false);

		form.btnUpdate().setVisible(form.getMode().equals(FormMode.VIEW) 
				&& form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
				&& form.grdActivity().getValue() instanceof RehabilitationActivityVo
				&& form.getLocalContext().getGoldenInstanceFound().booleanValue() == true);
		
		// The collapsible container
		form.ctnDetail().setCollapsed(form.getLocalContext().getSelectedParentInstance() == null);						

		// The empty tab
		//if (form.grdHierarchy().getValue() == null)
			//form.ctnDetail().lyrUltra().showtabEmpty();

		// Show Header and/or Detail
		showHeaderOrDetails();																				

		// The context menus
		updateContextMenusState();		
	}
	private void showHeaderOrDetails() 
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.ctnDetail().dtimAuthoring().setEnabled(false);
			form.ctnDetail().qmbAuthoringCP().setEnabled(false);			
			form.ctnDetail().setCollapsed(false);
			form.ctnDetail().cmbActivity().setEnabled(false);
			form.ctnDetail().cmbCategory().setEnabled(false);
			form.ctnDetail().cmbGroup().setEnabled(false);
			form.ctnDetail().cmbIndependence().setEnabled(false);
			form.ctnDetail().cmbLocation().setEnabled(false);
			form.ctnDetail().cmbPurpose().setEnabled(false);
			form.ctnDetail().cmbTypes().setEnabled(false);
			form.ctnDetail().grdEnvironment().setReadOnly(true);
			form.ctnDetail().grdEquipment().setReadOnly(true);
			form.ctnDetail().grdTechnique().setReadOnly(true);
		}
		else
		{
			if (form.getLocalContext().getSelectedParentInstanceIsNotNull() && (form.getLocalContext().getSelectedParentInstance().getID_RehabilitationIsNotNull()))
			{
				//this is an update
				form.ctnDetail().dtimAuthoring().setEnabled(false);
				form.ctnDetail().qmbAuthoringCP().setEnabled(false);
			}
			else
			{
				//this is an new record
				form.ctnDetail().dtimAuthoring().setEnabled(true);
				form.ctnDetail().qmbAuthoringCP().setEnabled(true);				
			}
			
			form.ctnDetail().cmbActivity().setEnabled(true);
			form.ctnDetail().cmbCategory().setEnabled(true);
			form.ctnDetail().cmbGroup().setEnabled(true);
			form.ctnDetail().cmbIndependence().setEnabled(true);
			form.ctnDetail().cmbLocation().setEnabled(true);
			form.ctnDetail().cmbPurpose().setEnabled(true);
			form.ctnDetail().cmbTypes().setEnabled(true);
			form.ctnDetail().grdEnvironment().setReadOnly(false);
			form.ctnDetail().grdEquipment().setReadOnly(false);
			form.ctnDetail().grdTechnique().setReadOnly(false);			
		}
		enableDetailsButtons();
	}	
	/**
	 * Set's the visibility of the OK and Cancel buttons.
	 * Essentially if we are adding a new child then we want to see both buttons
	 * Otherwise we don't
	 */
	private void enableDetailsButtons()
	{					
		boolean boolVisible = (form.getMode().equals(FormMode.EDIT) &&
							  form.getLocalContext().getSelectedChildInstance() == null);
		
		form.ctnDetail().btnOkActivity().setVisible(boolVisible);
		form.ctnDetail().btnCancelActivity().setVisible(boolVisible);
	}
	private void updateContextMenusState()
	{						
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			if(form.getLocalContext().getGoldenInstanceSelected().booleanValue())
			{
				// If the golden instance is currently selected we change the text of the update context menu
				// based on whether a parent or child node is selected in the grid.
				if (form.grdActivity().getValue() instanceof RehabilitationShortVo)
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);						
				else if (form.grdActivity().getValue() instanceof RehabilitationActivityVo)
					form.getContextMenus().getGenericGridUpdateItem().setText("Edit Rehab Activity");
				
				// If the golden node is selected we can now only add child nodes so set the menu text accordingly.
				form.getContextMenus().getGenericGridAddItem().setText("Add Rehab Activity");			
	
				// Only show the update menu if the user has selected an item to update.
				form.getContextMenus().getGenericGridUpdateItem().setVisible((form.getMode().equals(FormMode.VIEW)&& 
																			 form.grdActivity().getSelectedRowIndex()>=0) &&
																			 form.grdActivity().getValue() instanceof RehabilitationActivityVo ||
																			 (form.getMode().equals(FormMode.EDIT) &&
																			 form.grdActivity().getValue() instanceof RehabilitationActivityVo &&
																			 ((RehabilitationActivityVo)form.grdActivity().getValue()).getID_RehabilitationActivity() == null));																								
			}
			else
			{
				// If the golden instance has been found but NOT selected hide the context menu's 
				if (form.getLocalContext().getGoldenInstanceFound().booleanValue() == true)
				{
					form.getContextMenus().hideAllGenericGridMenuItems();
					return;
				}
				else
				{
					form.getContextMenus().getGenericGridAddItem().setText("New Rehabilitation");
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);				
				}
			}
			
			form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.VIEW));
			form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) &&
					 form.grdActivity().getValue() instanceof RehabilitationActivityVo &&
					 ((RehabilitationActivityVo)form.grdActivity().getValue()).getID_RehabilitationActivity() == null);
		}
		else
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
		}
	}

	private void newChildInstance() 
	{
		clearChildInstanceControls();
		form.getLocalContext().setSelectedChildInstance(null);
		loadEquipment();
		loadAdaptation();
		loadTechnique();
		if (form.grdActivity().getValue() instanceof RehabilitationShortVo)
			form.grdActivity().setValue(form.grdActivity().getSelectedRow().getValue());
		else if (form.grdActivity().getValue() instanceof RehabilitationActivityVo)
			form.grdActivity().setValue(form.grdActivity().getSelectedRow().getParentRow().getValue());
			
	}	
	private void promoteUpdatedChild(RehabilitationActivityVo voRehabActivity) 
	{
		if (voRehabActivity == null) return;
		populateChildNode(form.grdActivity().getSelectedRow(),voRehabActivity);		
	}
	private void populateParentInstanceData(RehabilitationVo voRehab) 
	{
		voRehab.setAuthoringCP(form.ctnDetail().qmbAuthoringCP().getValue());
		voRehab.setAuthoringDateTime(form.ctnDetail().dtimAuthoring().getValue());	
	}
	private void populateChildInstanceData(RehabilitationActivityVo voRehabActivity) 
	{
		voRehabActivity.setActivity(form.ctnDetail().cmbActivity().getValue());
		voRehabActivity.setActivityCategory(form.ctnDetail().cmbCategory().getValue());
		voRehabActivity.setActivityGroup(form.ctnDetail().cmbGroup().getValue());
		voRehabActivity.setActivityType(form.ctnDetail().cmbTypes().getValue());
		
		RehabEnvAdaptationCollection voCollAdpt = new RehabEnvAdaptationCollection();
		RehabEquipmentCollection voCollEquip = new RehabEquipmentCollection();
		RehabTechniqueCollection voCollTech = new RehabTechniqueCollection();
		
		//adaptations
		if (form.ctnDetail().grdEnvironment().getRows() != null)
		{
			
	
			for(int i = 0 ; i < form.ctnDetail().grdEnvironment().getRows().size(); i++)
			{
				if (form.ctnDetail().grdEnvironment().getRows().get(i).getColSelect())
					voCollAdpt.add(form.ctnDetail().grdEnvironment().getRows().get(i).getValue());
			}
			if (voCollAdpt.size() > 0)
				voRehabActivity.setEnvAdaptations(voCollAdpt);
			else
				voRehabActivity.setEnvAdaptations(null);					
		}
		
		//equipment
		if (form.ctnDetail().grdEquipment().getRows() != null)
		{
			for(int i = 0 ; i < form.ctnDetail().grdEquipment().getRows().size(); i++)
			{
				if (form.ctnDetail().grdEquipment().getRows().get(i).getColSelect())
					voCollEquip.add(form.ctnDetail().grdEquipment().getRows().get(i).getValue());
			}
			if (voCollEquip.size() > 0)
				voRehabActivity.setEquipment(voCollEquip);
			else
				voRehabActivity.setEquipment(null);					
		}
		
		//Technique
		if (form.ctnDetail().grdTechnique().getRows() != null)
		{
			
	
			for(int i = 0 ; i < form.ctnDetail().grdTechnique().getRows().size(); i++)
			{
				if (form.ctnDetail().grdTechnique().getRows().get(i).getColSelect())
					voCollTech.add(form.ctnDetail().grdTechnique().getRows().get(i).getValue());
			}
			if (voCollTech.size() > 0)
				voRehabActivity.setTechnique(voCollTech);
			else
				voRehabActivity.setTechnique(null);					
		}
		
		voRehabActivity.setIndependenceLevel(form.ctnDetail().cmbIndependence().getValue());		
		voRehabActivity.setLocation(form.ctnDetail().cmbLocation().getValue());
		voRehabActivity.setPurpose(form.ctnDetail().cmbPurpose().getValue());
				
	}

	private boolean newParentNode(RehabilitationVo voNewParent) 
	{
		if (voNewParent == null) return true;
		
		RehabilitationShortVo voParentShort = new RehabilitationShortVo();
		voParentShort.setAuthoringCP(form.ctnDetail().qmbAuthoringCP().getValue());
		voParentShort.setAuthoringDateTime(form.ctnDetail().dtimAuthoring().getValue());
		voParentShort.setClinicalContact(voNewParent.getClinicalContact());
		
		String[] errors = voParentShort.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		GenForm.grdActivityRow parentRow = form.grdActivity().getRows().newRow();	
		StringBuffer text =  new StringBuffer();
		if(voParentShort.getAuthoringDateTime()!=null){
			text.append(voParentShort.getAuthoringDateTime().toString());
			text.append(" ");
		}
		if(voParentShort.getAuthoringCP()!=null)
			text.append(voParentShort.getAuthoringCP().toString());
		parentRow.setColDateTime(text.toString());			
		parentRow.setValue(voParentShort);
		parentRow.setBackColor(Color.Beige);
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
		parentRow.setExpanded(true);
		form.grdActivity().setValue(voParentShort);	
		
		return true;
	}
	
	protected void onBtnCancelActivityClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearChildInstanceControls();
		newChildInstance();
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();					
	}
	/**
	 * Invoked as part of the save routine. The user may have entered data in the details tab and not 
	 * bothered clicking ok. This method counts thae vo fields to decide if it should promote the unsaved
     * data entry to the hierarchy grid before saving.	 	
	 **/ 
	private boolean checkForUnsavedChild() 
	{
		if (form.getLocalContext().getSelectedChildInstance() == null)
		{				
			if(addOrUpdateNotSavedChild())
				return true;
		}
		return false;
	}
	public String[] validateUIRules()
	{
		return null;
	}
	private boolean save() 
	{				
		if (form.grdActivity().getValue() == null) {
			engine.showMessage("Add Rehab Activity to grid.");
			return false;
		}
		
		if(checkForUnsavedChild())
			return false;
							
		RehabilitationVo voRehab  = populateInstanceData(form.getLocalContext().getSelectedParentInstance());
		
		if (voRehab.getClinicalContact() == null)
			voRehab.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
				
		String[] arrErrors =  voRehab.validate(validateUIRules());	
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedParentInstance(domain.saveRehabVo(voRehab));
			
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Rehab record already exists for this SOAP clinical contact. " + e.getMessage());
			open();
			return false;
		}
		
		setUpdatedChild();
		return true;		
	}
	// We need to store the node which was last updated
	private void setUpdatedChild() 
	{
		// Straight child update - Select the currently being updated child as the one so show - post save
		if (form.grdActivity().getValue() instanceof RehabilitationActivityVo)		
		{
			form.getLocalContext().setUpdatedChild((RehabilitationActivityVo) form.grdActivity().getValue());
		}
		else
		{
			// Find the most recently added child
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE))
			{
				form.getLocalContext().getSelectedParentInstance().getRehabActivity().sort();
				form.getLocalContext().setUpdatedChild(
						form.getLocalContext().getSelectedParentInstance().getRehabActivity().get(
								form.getLocalContext().getSelectedParentInstance().getRehabActivity().size() - 1));
			}
			
		}
	}
	private RehabilitationVo populateInstanceData(RehabilitationVo voRehab)
	{

		if (voRehab == null)
			voRehab = new RehabilitationVo();
				
		populateParentInstanceData(voRehab);						

		if (form.getLocalContext().getSelectedChildInstance() == null)
		{
			populateChildCollectionFromGrid(voRehab);			
		}
		else 		// Update child instance.
		{
			RehabilitationActivityVo voRehabActivity = form.getLocalContext().getSelectedChildInstance();
			populateChildInstanceData(voRehabActivity);
			form.getLocalContext().setSelectedChildInstance(voRehabActivity);
			
			for (int i=0; i < voRehab.getRehabActivity().size(); i++)
			{
				if (voRehab.getRehabActivity().get(i).getID_RehabilitationActivity() == 
					form.getLocalContext().getSelectedChildInstance().getID_RehabilitationActivity())
				{						
					voRehab.getRehabActivity().set(i, form.getLocalContext().getSelectedChildInstance());
				}
			}								
		}
		return voRehab;		
	}
	private void populateChildCollectionFromGrid(RehabilitationVo voRehab) 
	{
		if (form.grdActivity().getValue() == null) return;

		if (voRehab.getRehabActivity() == null)
			voRehab.setRehabActivity(new RehabilitationActivityVoCollection());
		
		GenForm.grdActivityRow parentRow = form.grdActivity().getValue() instanceof RehabilitationShortVo ? 
										    form.grdActivity().getSelectedRow() : form.grdActivity().getSelectedRow().getParentRow();		
		
        if (parentRow.getRows().size() > 0 )
        	voRehab.getRehabActivity().clear();
										    
		for (int i=0; i < parentRow.getRows().size(); i++)
        {
        	voRehab.getRehabActivity().add((RehabilitationActivityVo) parentRow.getRows().get(i).getValue());
        }
	}
	protected void onGrdActivitySelectionChanged() throws PresentationLogicException 
	{
		getSelectedInstance();
	}
	
	private void open() 
	{
		clear();
		resetContextVariables();		
							
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		{
			populateParentNodes(domain.listByCareContext(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext()));			
		}
									
		form.setMode(FormMode.VIEW);
		reselectUpdatedNode();		
		
	}
	private void reselectUpdatedNode() 
	{
		// Pattern demands that the last updated node is displayed
		if (form.getLocalContext().getUpdatedChildIsNotNull())
		{
			form.grdActivity().setValue(form.getLocalContext().getUpdatedChild());
			getSelectedInstance();
			form.getLocalContext().setUpdatedChild(null);
		}
	}
	private void getSelectedInstance() 
	{				
		// In update mode we can select nodes without displaying anything but the context
		// menus can change based on what's selected so we need to update them
		if (form.getMode().equals(FormMode.EDIT)) 
		{						
			updateContextMenusState();
			return;
		}		 
		
		//expand the selected parent
		if(form.grdActivity().getValue() instanceof RehabilitationShortVo)
		{									 
			form.getLocalContext().setSelectedParentInstance(getParentFromDomain((RehabilitationShortVo) form.grdActivity().getValue()));
			form.getLocalContext().setParentInstance(form.getLocalContext().getSelectedParentInstance()); //wdev-13599
			populateParentInstanceControls(form.getLocalContext().getSelectedParentInstance());
			//add activities if not added already
			populateChildNodes(form.grdActivity().getSelectedRow(),form.getLocalContext().getSelectedParentInstance().getRehabActivity());			
			form.getLocalContext().setSelectedChildInstance(null);
			clearChildInstanceControls();
		}		
		else if(form.grdActivity().getValue() instanceof RehabilitationActivityVo)
		{
			//wdev-13599
			form.getLocalContext().setParentInstance(null);
			//----------
			form.getLocalContext().setSelectedChildInstance((RehabilitationActivityVo) form.grdActivity().getValue());
			populateChildInstanceControls(form.getLocalContext().getSelectedChildInstance());			
		}
 
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(form.getLocalContext().getSelectedParentInstance().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())));
		
		updateControlsState();

		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(false);
		}
	}
	private void overlayEquipment(RehabEquipmentCollection colRehabEquip)
	{
		//Equipment Given...
		if (colRehabEquip != null)
		{
			GenForm.ctnDetailContainer.grdEquipmentRow rowEquip;
			for (int j = 0; j < colRehabEquip.size(); j++)
			{
				RehabEquipment equipVo = colRehabEquip.get(j);
				int i = 0;
				for (i = 0; i < form.ctnDetail().grdEquipment().getRows().size(); i++)
				{
					rowEquip = form.ctnDetail().grdEquipment().getRows().get(i);
					if (rowEquip.getValue().getId() == equipVo.getId())
					{
						rowEquip.setColSelect(true);
						break;
					}
				}
				if (i == form.ctnDetail().grdEquipment().getRows().size())
				{
					rowEquip = form.ctnDetail().grdEquipment().getRows().newRow();
					rowEquip.setValue(equipVo);
					rowEquip.setColEquipment(equipVo);
					rowEquip.setColSelect(true);
				}
			}
		}
	
	}
	private void overlayEnvirAdaptation(RehabEnvAdaptationCollection colEnvAdapt)
	{
		if (colEnvAdapt != null)
		{
			//Environmant Adaption...
			GenForm.ctnDetailContainer.grdEnvironmentRow rowEnv;
			for (int j = 0; j < colEnvAdapt.size(); j++)
			{
				RehabEnvAdaptation envVo = colEnvAdapt.get(j);
				int i = 0;
				for (i = 0; i < form.ctnDetail().grdEnvironment().getRows().size(); i++)
				{
					rowEnv = form.ctnDetail().grdEnvironment().getRows().get(i);
					if (rowEnv.getValue().getId() == envVo.getId())
					{
						rowEnv.setColSelect(true);
						break;
					}
				}
				if (i == form.ctnDetail().grdEnvironment().getRows().size())
				{
					rowEnv = form.ctnDetail().grdEnvironment().getRows().newRow();
					rowEnv.setValue(envVo);
					rowEnv.setColEnvironment(envVo);
					rowEnv.setColSelect(true);
				}
			}
		}	
	}
	private void overlayTechnique(RehabTechniqueCollection colRehabTech)
	{
		if (colRehabTech != null)
		{
			//Technique...
			GenForm.ctnDetailContainer.grdTechniqueRow rowTech;
			for (int j = 0; j < colRehabTech.size(); j++)
			{
				RehabTechnique techVo = colRehabTech.get(j);
				int i = 0;
				for (i = 0; i < form.ctnDetail().grdTechnique().getRows().size(); i++)
				{
					rowTech = form.ctnDetail().grdTechnique().getRows().get(i);
					if (rowTech.getValue().getId() == techVo.getId())
					{
						rowTech.setColSelect(true);
						break;
					}
				}
				if (i == form.ctnDetail().grdTechnique().getRows().size())
				{
					rowTech = form.ctnDetail().grdTechnique().getRows().newRow();
					rowTech.setValue(techVo);
					rowTech.setColTech(techVo);
					rowTech.setColSelect(true);
				}
			}
		}
	}
	private void populateChildInstanceControls(RehabilitationActivityVo voRehabActivity)
	{	
		if (voRehabActivity != null)
		{

			form.ctnDetail().cmbTypes().setValue(voRehabActivity.getActivityTypeIsNotNull() ? voRehabActivity.getActivityType() : null);
			selectionChangeCmbTypes();
			form.ctnDetail().cmbCategory().setValue(voRehabActivity.getActivityCategoryIsNotNull() ? voRehabActivity.getActivityCategory() : null);
			selectionChangedCmbCategory();
			form.ctnDetail().cmbGroup().setValue(voRehabActivity.getActivityGroupIsNotNull() ? voRehabActivity.getActivityGroup() : null);
			selectionChangedCmbGroup();
			form.ctnDetail().cmbActivity().setValue(voRehabActivity.getActivityIsNotNull() ? voRehabActivity.getActivity() : null);
			
			form.ctnDetail().cmbLocation().setValue(voRehabActivity.getLocationIsNotNull() ? voRehabActivity.getLocation() : null);
			form.ctnDetail().cmbPurpose().setValue(voRehabActivity.getPurposeIsNotNull() ? voRehabActivity.getPurpose() : null);
			form.ctnDetail().cmbIndependence().setValue(voRehabActivity.getIndependenceLevelIsNotNull() ? voRehabActivity.getIndependenceLevel() : null);
						
			//Equipment Given...
			form.ctnDetail().grdEquipment().getRows().clear();			
			if (voRehabActivity.getEquipmentIsNotNull())
			{
				// all lookups items must be displayed, not only saved items
				GenForm.ctnDetailContainer.grdEquipmentRow row;	
				RehabEquipment equipItem;
				RehabEquipmentCollection coll = loadEquipLkpColl();				
				if (coll != null)
				{
					for (int i = 0; i < coll.size(); i++)
					{
						equipItem = coll.get(i);
						
						row = form.ctnDetail().grdEquipment().getRows().newRow();
						row.setValue(equipItem);
						row.setColEquipment(equipItem);
						
						for (int z = 0; z < voRehabActivity.getEquipment().size(); z++)
						{
							if (equipItem.getID() == voRehabActivity.getEquipment().get(z).getID())
							{
								row.setColSelect(true);
								break;
							}
						}
					}
				}
			}
			//Env Adaptation Given...
			form.ctnDetail().grdEnvironment().getRows().clear();			
			if (voRehabActivity.getEnvAdaptationsIsNotNull())
			{
				// all lookups items must be displayed, not only saved items
				GenForm.ctnDetailContainer.grdEnvironmentRow row;
				RehabEnvAdaptation envAdaptItem;
				RehabEnvAdaptationCollection coll = loadEnvAdaptationLkpColl();				
				if (coll != null)
				{
					for (int i = 0; i < coll.size(); i++)
					{
						envAdaptItem = coll.get(i);
						
						row = form.ctnDetail().grdEnvironment().getRows().newRow();
						row.setValue(envAdaptItem);
						row.setColEnvironment(envAdaptItem);
						
						for (int z = 0; z < voRehabActivity.getEnvAdaptations().size(); z++)
						{
							if (envAdaptItem.getID() == voRehabActivity.getEnvAdaptations().get(z).getID())
							{
								row.setColSelect(true);
								break;
							}
						}
					}
				}
			}
			//Technique...
			form.ctnDetail().grdTechnique().getRows().clear();
			if (voRehabActivity.getTechniqueIsNotNull())
			{
				// all lookups items must be displayed, not only saved items
				GenForm.ctnDetailContainer.grdTechniqueRow row;	
				RehabTechnique techItem;
				RehabTechniqueCollection coll = loadTechniqueLkpColl();				
				if (coll != null)
				{
					for (int i = 0; i < coll.size(); i++)
					{
						techItem = coll.get(i);
						
						row = form.ctnDetail().grdTechnique().getRows().newRow();
						row.setValue(techItem);
						row.setColTech(techItem);
						
						for (int z = 0; z < voRehabActivity.getTechnique().size(); z++)
						{
							if (techItem.getID() == voRehabActivity.getTechnique().get(z).getID())
							{
								row.setColSelect(true);
								break;
							}
						}
					}
				}
			}
			
			form.getLocalContext().setSelectedChildInstance(voRehabActivity);
		}
	}
	private void populateChildInstanceControlsForUpdate(RehabilitationActivityVo voRehabActivity)
	{	
		if (voRehabActivity != null)
		{

			form.ctnDetail().cmbTypes().setValue(voRehabActivity.getActivityTypeIsNotNull() ? voRehabActivity.getActivityType() : null);
			selectionChangeCmbTypes();
			form.ctnDetail().cmbCategory().setValue(voRehabActivity.getActivityCategoryIsNotNull() ? voRehabActivity.getActivityCategory() : null);
			selectionChangedCmbCategory();
			form.ctnDetail().cmbGroup().setValue(voRehabActivity.getActivityGroupIsNotNull() ? voRehabActivity.getActivityGroup() : null);
			selectionChangedCmbGroup();
			form.ctnDetail().cmbActivity().setValue(voRehabActivity.getActivityIsNotNull() ? voRehabActivity.getActivity() : null);
			
			form.ctnDetail().cmbLocation().setValue(voRehabActivity.getLocationIsNotNull() ? voRehabActivity.getLocation() : null);
			form.ctnDetail().cmbPurpose().setValue(voRehabActivity.getPurposeIsNotNull() ? voRehabActivity.getPurpose() : null);
			form.ctnDetail().cmbIndependence().setValue(voRehabActivity.getIndependenceLevelIsNotNull() ? voRehabActivity.getIndependenceLevel() : null);
						
			loadEquipment();
			loadAdaptation();
			loadTechnique();
			
			overlayEquipment(voRehabActivity.getEquipment());
			overlayEnvirAdaptation(voRehabActivity.getEnvAdaptations());
			overlayTechnique(voRehabActivity.getTechnique());
			
			form.getLocalContext().setSelectedChildInstance(voRehabActivity);
			
		}
	}		
	/**
	 * Populates the Hierarchy tree with the contents of the ElectrotherapyUltrasoundShortVoCollection
	 * Selects the item that matches the current SOAP clinical contact 
	 * Sets that items background colour to LightYellow and expands that node.
	 * @param voCollUltrasoundParents
	 */
	private void populateParentNodes(RehabilitationShortVoCollection voCollRehabParents)
	{
		if (voCollRehabParents == null || voCollRehabParents.size() <= 0 ) return;
		
		for(int i=0; i<voCollRehabParents.size(); i++)
		{
			populateParentNode(voCollRehabParents.get(i));			
		}		
	}
	private void populateParentNode(RehabilitationShortVo voRehabParent) 
	{
		GenForm.grdActivityRow parRow = form.grdActivity().getRows().newRow();
		parRow.setColDateTime(voRehabParent.getAuthoringDateTime().toString());
		//parRow.setTooltip(voRehabParent.getCareContext().toString());
		
		parRow.setValue(voRehabParent);
		form.grdActivity().setValue(voRehabParent);
		expandParentNode(parRow);
	}
	/**
	 * @calls the Domain Get for the selected node..
	 * 
	 */	
		private void expandParentNode(GenForm.grdActivityRow selectedRow)
		{
			if (selectedRow.getValue() instanceof RehabilitationShortVo == false ) return;
					
			form.getLocalContext().setSelectedParentInstance(getParentFromDomain((RehabilitationShortVo) selectedRow.getValue()));	
			form.getLocalContext().setParentInstance(form.getLocalContext().getSelectedParentInstance());  //wdev-13599
			if (form.getLocalContext().getSelectedParentInstance() == null ) return; 				

			RehabilitationVo voParentInstance = form.getLocalContext().getSelectedParentInstance();				
			if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
					&& (voParentInstance.getClinicalContact().getID_ClinicalContact().equals
										(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())))
			{
				// If this is the Golden Node then we'll colour it golden (ok then beige).
				form.getLocalContext().setGoldenInstanceFound(new Boolean(true));
				form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
				selectedRow.setBackColor(Color.Beige);			
			}
			
			if (voParentInstance.getRehabActivityIsNotNull())  
			{
				selectedRow.setExpanded(true);
				populateChildNodes(selectedRow, voParentInstance.getRehabActivity());
			}
			
			populateParentInstanceControls(voParentInstance);		
											
		}

		private RehabilitationVo getParentFromDomain(RehabilitationShortVo voRehabShort)
		{ 			
			if(engine.isRIEMode())		//wdev-13599
				return domain.getRehabById(voRehabShort);
			else
				return domain.getRehabVo(voRehabShort.getClinicalContact());						
		}	

		/**
		 * Given a row in the hierarchy row get the collection of treatments associated
		 * with that ultrasound and and create a child treenode for each. Use a Red 
		 * text colour to denote any as yes unsaved treatments.
		 * @param voCollTreatments
		 * @param parRow
		 */			
		private void populateChildNodes(GenForm.grdActivityRow parRow, RehabilitationActivityVoCollection voCollRehabActivity)
		{
			parRow.getRows().clear();
			
			if (voCollRehabActivity == null || voCollRehabActivity.size()<=0) return;		
			
			//RehabilitationVo voParentInstance = form.getLocalContext().getSelectedParentInstance();				
			//if(voParentInstance.getClinicalContact().getID_ClinicalContact().equals
			//						(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
			
			voCollRehabActivity.sort();
			for(int i=0; i<voCollRehabActivity.size(); i++)
			{
				if (parRow != null)
				{
					GenForm.grdActivityRow childRow = parRow.getRows().newRow();
					populateChildNode(childRow, voCollRehabActivity.get(i));				
				}
			}
			
			//reselect parent
			if (parRow != null)
			{
				form.grdActivity().setValue(parRow.getValue());
				parRow.setExpanded(true);
			}
			
		}
		
	private void populateChildNode(GenForm.grdActivityRow childRow, RehabilitationActivityVo voRehabActivity) 
	{		
		if (voRehabActivity == null) return;		
					
		childRow.setValue(voRehabActivity);
		childRow.setColActCategory(voRehabActivity.getActivityCategoryIsNotNull()?voRehabActivity.getActivityCategory().toString():null);
		childRow.setColActDateAndType(voRehabActivity.getActivityTypeIsNotNull()?voRehabActivity.getActivityType().toString():null);
		childRow.setColActGroup(voRehabActivity.getActivityGroupIsNotNull()?voRehabActivity.getActivityGroup().toString():null);
		childRow.setColActivity(voRehabActivity.getActivityIsNotNull()?voRehabActivity.getActivity().toString():null);
		childRow.setColDateTime("");
		childRow.setColIndependence(voRehabActivity.getIndependenceLevelIsNotNull()?voRehabActivity.getIndependenceLevel().toString():null);
		childRow.setColLocation(voRehabActivity.getLocationIsNotNull()?voRehabActivity.getLocation().toString():null);
		
		childRow.setValue(voRehabActivity);
	
		//if not saved then set the colour
		if(voRehabActivity.getID_RehabilitationActivity() == null)
			childRow.setTextColor(Color.Red);
	}

	public void clear()
	{		
		form.grdActivity().getRows().clear();
		
		// WDEV-18143 
		form.ctnDetail().dtimAuthoring().setValue(null);
		form.ctnDetail().qmbAuthoringCP().setValue(null);
		
		clearChildInstanceControls();
	}
	private void clearChildInstanceControls()
	{
		// Details
		form.ctnDetail().cmbActivity().setValue(null);
		form.ctnDetail().cmbCategory().setValue(null);
		form.ctnDetail().cmbGroup().setValue(null);
		form.ctnDetail().cmbIndependence().setValue(null);
		form.ctnDetail().cmbLocation().setValue(null);
		form.ctnDetail().cmbPurpose().setValue(null);
		form.ctnDetail().cmbTypes().setValue(null);	

		form.ctnDetail().grdEnvironment().getRows().clear();
		form.ctnDetail().grdEquipment().getRows().clear();
		form.ctnDetail().grdTechnique().getRows().clear();
	}
	private void loadEquipment()
	{
		form.ctnDetail().grdEquipment().getRows().clear();
		RehabEquipmentCollection coll = loadEquipLkpColl();
		if (coll != null)
		{
			for (int j = 0; j < coll.size(); j++)
			{
				GenForm.ctnDetailContainer.grdEquipmentRow row = form.ctnDetail().grdEquipment().getRows().newRow();
				row.setColEquipment(coll.get(j));
				row.setValue(coll.get(j));
			}
		}
	}
	RehabEquipmentCollection loadEquipLkpColl()
	{
		RehabEquipmentCollection coll = LookupHelper.getRehabEquipment(domain.getLookupService());
		return coll;
	}
	private void loadAdaptation()
	{
		form.ctnDetail().grdEnvironment().getRows().clear();
		RehabEnvAdaptationCollection coll = loadEnvAdaptationLkpColl();
		if (coll != null)
		{
			for (int j = 0; j < coll.size(); j++)
			{
				GenForm.ctnDetailContainer.grdEnvironmentRow row = form.ctnDetail().grdEnvironment().getRows().newRow();
				row.setColEnvironment(coll.get(j));
				row.setValue(coll.get(j));
			}	
		}
	}
	RehabEnvAdaptationCollection loadEnvAdaptationLkpColl()
	{
		RehabEnvAdaptationCollection coll = LookupHelper.getRehabEnvAdaptation(domain.getLookupService());
		return coll;
	}
	private void loadTechnique()
	{
		form.ctnDetail().grdTechnique().getRows().clear();
		RehabTechniqueCollection coll = loadTechniqueLkpColl();
		if (coll != null)
		{
			for (int j = 0; j < coll.size(); j++)
			{
				GenForm.ctnDetailContainer.grdTechniqueRow row = form.ctnDetail().grdTechnique().getRows().newRow();
				row.setColTech(coll.get(j));
				row.setValue(coll.get(j));
			}
		}
	}
	RehabTechniqueCollection loadTechniqueLkpColl()
	{
		RehabTechniqueCollection coll = LookupHelper.getRehabTechnique(domain.getLookupService());
		return coll;
	}
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				updateInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Remove:
				removeChild();
		}
	}
	private void updateInstance()
	{								
		form.getLocalContext().setUpdatingParent(new Boolean(form.grdActivity().getValue() instanceof RehabilitationShortVo || form.grdActivity().getValue() instanceof RehabilitationVo));
		form.setMode(FormMode.EDIT);
		if (form.grdActivity().getValue() instanceof RehabilitationActivityVo)			
		{
			RehabilitationActivityVo voCachedChild = (RehabilitationActivityVo) form.grdActivity().getValue(); 
			if (voCachedChild.getID_RehabilitationActivity() == null)
			{
				populateChildInstanceControlsForUpdate(voCachedChild);
			}			
		}	
	}
	private void removeChild()
	{
		RehabilitationShortVo voParent = (RehabilitationShortVo) form.grdActivity().getSelectedRow().getParentRow().getValue();
		form.grdActivity().removeSelectedRow();
		form.grdActivity().setValue(voParent);
		updateContextMenusState();
	}
	protected void onQmbAuthoringCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetail().qmbAuthoringCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		
		HcpCollection coll = domain.listHCPs(filter);
		for (int i = 0; i < coll.size(); i++)
		{
			Hcp med = coll.get(i);
			form.ctnDetail().qmbAuthoringCP().newRow(med, med.toString());			
		}
		if (coll.size() == 1)
		{
			form.ctnDetail().qmbAuthoringCP().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.ctnDetail().qmbAuthoringCP().showOpened();		
		}		
	}
	
	protected void onCmbTypesValueChanged() throws PresentationLogicException 
	{
		selectionChangeCmbTypes();
	}
	private void selectionChangeCmbTypes()
	{
		form.ctnDetail().cmbCategory().clear();
		form.ctnDetail().cmbGroup().clear();
		form.ctnDetail().cmbActivity().clear();

		loadCombo(form.ctnDetail().cmbTypes().getID());

	}
	private void loadCombo(int iFromCombo)
	{
		RehabActivityCollection collRehabActivity = LookupHelper.getRehabActivity(domain.getLookupService());
		
		if (form.ctnDetail().cmbTypes().getValue() == null)
			return;
		
		ArrayList childColl = null;

		for (int j = 0 ; j < collRehabActivity.size() ; j++)
		{
			RehabActivity inst = collRehabActivity.get(j);
			Boolean bFillCombo = Boolean.FALSE;
			
			if (form.ctnDetail().cmbTypes().getID() == iFromCombo)
			{
				form.ctnDetail().cmbCategory().clear();
				if (form.ctnDetail().cmbTypes().getValue() != null && form.ctnDetail().cmbTypes().getValue().equals(inst))  //wdev-12494
					bFillCombo = Boolean.TRUE;
			}
			else if (form.ctnDetail().cmbCategory().getID() == iFromCombo)
			{
				form.ctnDetail().cmbGroup().clear();
				if (form.ctnDetail().cmbCategory().getValue()!= null && form.ctnDetail().cmbCategory().getValue().equals(inst))	//wdev-12494
					bFillCombo = Boolean.TRUE;
			}
			else if (form.ctnDetail().cmbGroup().getID() == iFromCombo)
			{
				form.ctnDetail().cmbActivity().clear();
				if (form.ctnDetail().cmbGroup().getValue() != null && form.ctnDetail().cmbGroup().getValue().equals(inst))		//wdev-12494
					bFillCombo = Boolean.TRUE;
			}
			
			if (bFillCombo.booleanValue())
			{	
				childColl = inst.getChildInstances();
				if (childColl != null)
				{
					for (int p = 0; p < childColl.size(); p++)
					{
						RehabActivity instChild = (RehabActivity) childColl.get(p);
						
						if (form.ctnDetail().cmbTypes().getID() == iFromCombo)
							form.ctnDetail().cmbCategory().newRow(instChild, instChild.getText());
						else if (form.ctnDetail().cmbCategory().getID() == iFromCombo)
							form.ctnDetail().cmbGroup().newRow(instChild, instChild.getText());
						else if (form.ctnDetail().cmbGroup().getID() == iFromCombo)
							form.ctnDetail().cmbActivity().newRow(instChild, instChild.getText());
					}
				}
				break;
			}
		}
	}

	private void loadTypeCombo()
	{
		RehabActivityCollection collRehabActivity = LookupHelper.getRehabActivity(domain.getLookupService());

		TreeNode[] rootNodes = null;
		rootNodes = collRehabActivity.getRootNodes();
		form.ctnDetail().cmbTypes().clear();
		for (int j = 0; j < rootNodes.length; j++)
		{
			RehabActivity inst = (RehabActivity) rootNodes[j];
			form.ctnDetail().cmbTypes().newRow(inst, inst.getText());
		}
	}

	protected void onCmbGroupValueChanged() throws PresentationLogicException 
	{
		selectionChangedCmbGroup();
	}
	private void selectionChangedCmbGroup()
	{
		loadCombo(form.ctnDetail().cmbGroup().getID());
	}
	protected void onCmbCategoryValueChanged() throws PresentationLogicException 
	{
		selectionChangedCmbCategory();
	}
	private void selectionChangedCmbCategory()
	{
		loadCombo(form.ctnDetail().cmbCategory().getID());
	}
	private void resetContextVariables() 
	{
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(false));
		form.getLocalContext().setGoldenInstanceFound(new Boolean(false));
		form.getLocalContext().setUpdatingParent(new Boolean(false));
		form.getLocalContext().setSelectedParentInstance(null);
		form.getLocalContext().setParentInstance(null); //wdev-13599
		form.getLocalContext().setSelectedChildInstance(null);		
	}
	private void newParentInstance() 
	{
		RehabilitationVo voNewParent = new RehabilitationVo(); 		
		voNewParent.setAuthoringCP((Hcp) domain.getHcpUser());
		voNewParent.setAuthoringDateTime(new DateTime());
		voNewParent.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voNewParent.setRehabActivity(new RehabilitationActivityVoCollection());
		populateParentInstanceControls(voNewParent);
		loadEquipment();
		loadAdaptation();
		loadTechnique();
		form.getLocalContext().setSelectedParentInstance(voNewParent);			
		form.getLocalContext().setParentInstance(voNewParent); //wdev-13599
	}
	private void populateParentInstanceControls(RehabilitationVo voParent)
	{
		if(voParent != null)
		{			
			form.ctnDetail().dtimAuthoring().setValue(voParent.getAuthoringDateTime());
			if (voParent.getAuthoringCPIsNotNull())
			{
				form.ctnDetail().qmbAuthoringCP().newRow(voParent.getAuthoringCP(), voParent.getAuthoringCP().toString());
				form.ctnDetail().qmbAuthoringCP().setValue(voParent.getAuthoringCP());
			}
			else
				form.ctnDetail().qmbAuthoringCP().setValue(null);
		}
	}

	private void newInstance()
	{
		// New instance has been invoked for a parent instance with no current selection made OR
		// with a parent that is not the Golden node..
		if (form.grdActivity().getValue() == null || ((form.getLocalContext().getSelectedParentInstanceIsNotNull() 
				&& form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))))
		{
			form.ctnDetail().dtimAuthoring().setValue(null);
			form.ctnDetail().qmbAuthoringCP().setValue(null);
			form.ctnDetail().qmbAuthoringCP().clear();
			newParentInstance();			
		}

		if (form.grdActivity().getValue() instanceof RehabilitationShortVo)
		{
			//new instance for golden parent node meaning add a new child
			newChildInstance();
		}
		else if (form.grdActivity().getValue() instanceof RehabilitationActivityVo)
		{
			// New instance has been invoked with a child node selected.
			newChildInstance();
		}
		
		
		form.setMode(FormMode.EDIT);		
	}
	
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		newInstance();		
	}
	protected void onFormModeChanged() 
	{
		updateControlsState();		
	}
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		updateInstance();
	}
}
