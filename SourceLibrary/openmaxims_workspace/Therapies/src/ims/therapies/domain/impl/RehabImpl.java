//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.40 build 2212.20748)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.therapies.domain.base.impl.BaseRehabImpl;
import ims.therapies.treatment.domain.objects.Rehabilitation;
import ims.therapies.treatment.vo.RehabilitationRefVo;
import ims.therapies.vo.RehabilitationShortVoCollection;
import ims.therapies.vo.RehabilitationVo;
import ims.therapies.vo.RehabilitationVoCollection;
import ims.therapies.vo.domain.RehabilitationVoAssembler;
import ims.therapies.vo.domain.RehabilitationShortVoAssembler;

public class RehabImpl extends BaseRehabImpl implements ims.therapies.domain.Rehab, ims.domain.impl.Transactional
{
	/**
	* Get the current Rehab record for the Clinical Contact 
	*/
	public ims.therapies.vo.RehabilitationVo getRehabVo(ims.core.vo.ClinicalContactShortVo voClinicalContactShort)
	{
		RehabilitationVoCollection voRehabColl  = new RehabilitationVoCollection();
		
		DomainFactory factory = getDomainFactory();
		
		String hql = " from Rehabilitation rehab "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(voClinicalContactShort !=null)
		{
			condStr.append(andStr + " rehab.clinicalContact.id = :id_ClinicalContact"); 
			markers.add("id_ClinicalContact");
			values.add(voClinicalContactShort.getID_ClinicalContact());
			andStr = " and ";
		}	
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		voRehabColl = RehabilitationVoAssembler.createRehabilitationVoCollectionFromRehabilitation(factory.find(hql, markers, values));
		if(voRehabColl.size()>0)
			return voRehabColl.get(0);
		else 
			return null;		
	}

	/**
	* Save a rehab Record for a Clinical Contact
	*/
	public ims.therapies.vo.RehabilitationVo saveRehabVo(ims.therapies.vo.RehabilitationVo voRehab) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		// Ensure the value object has been validated
		if (!voRehab.isValidated())
			throw new DomainRuntimeException("Rehabilitation has not been validated");
		
		if (voRehab.getID_Rehabilitation() == null && getRehabVo(voRehab.getClinicalContact()) != null)
			throw new UniqueKeyViolationException("The screen will be refreshed.");
	
		
		DomainFactory factory = getDomainFactory();
		Rehabilitation doRehab = RehabilitationVoAssembler.extractRehabilitation(factory, voRehab);
		factory.save(doRehab);
		return RehabilitationVoAssembler.create(doRehab);
	}

	/**
	* list HCPs
	*/
	public ims.core.vo.HcpCollection listHCPs(ims.core.vo.HcpFilter filter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(filter);
	}

	public RehabilitationShortVoCollection listByCareContext(Integer idCareContext) 
	{
		if (idCareContext != null)
		{
			DomainFactory factory = getDomainFactory();
			List RespTrList  = factory.find(" from Rehabilitation rt where rt.clinicalContact.careContext.id = :ccId order by rt.authoringDateTime",
					new String[]{"ccId"},
					new Object[]{idCareContext});
	
			return RehabilitationShortVoAssembler.createRehabilitationShortVoCollectionFromRehabilitation(RespTrList); 
		}
		
		return null;
	}

	//wdsev-13599
	public RehabilitationVo getRehabById(RehabilitationRefVo recordref) 
	{
		if( recordref == null)
			return null;
		Rehabilitation doRehabilitation = (Rehabilitation) getDomainFactory().getDomainObject(Rehabilitation.class, recordref.getID_Rehabilitation());
		return RehabilitationVoAssembler.create(doRehabilitation);
		
		
		
	}
}
