//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2343.17448)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.clinical.vo.MskGroupsRefVo;
import ims.core.clinical.vo.MskJointsRefVo;
import ims.core.domain.BoneJointConfiguration;
import ims.core.domain.impl.MuscleJointConfigurationImpl;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MskGroupLiteVoCollection;
import ims.core.vo.MskJointVoCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.spinalinjuries.vo.lookups.MSKGroupType;
import ims.spinalinjuries.vo.lookups.MskJointsMovementsCollection;
import ims.therapies.domain.base.impl.BaseHandRangeOfMovementImpl;
import ims.therapies.hand.domain.objects.HandRangeOfMovement;
import ims.therapies.vo.HandRangeOfMovementVo;
import ims.therapies.vo.HandRangeOfMovementVoCollection;
import ims.therapies.vo.domain.HandRangeOfMovementVoAssembler;




public class HandRangeOfMovementImpl extends BaseHandRangeOfMovementImpl
{

	private static final long serialVersionUID = 1L;

	public ims.therapies.vo.HandRangeOfMovementVoCollection listHandRangeOfMovementsForCareContext(ims.core.admin.vo.CareContextRefVo voRefCareContact)
	{
		DomainFactory factory = getDomainFactory();
		String hql = " from HandRangeOfMovement h where h.clinicalContact.careContext.id = " + voRefCareContact.getID_CareContext();
		return HandRangeOfMovementVoAssembler.createHandRangeOfMovementVoCollectionFromHandRangeOfMovement(factory.find(hql));
	}

	public HcpLiteVoCollection listHcpLiteByName(String hcpName)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName(hcpName);

	}

	public HandRangeOfMovementVo saveHandRangeOfMovement(HandRangeOfMovementVo voHandRangeOfMovement) throws StaleObjectException 
	{
		if(!voHandRangeOfMovement.isValidated())
			throw new DomainRuntimeException("This Hand Range Of Movement has not been validated");
	
		DomainFactory factory = getDomainFactory();
		HandRangeOfMovement domHandRangeOfMovement = HandRangeOfMovementVoAssembler.extractHandRangeOfMovement(factory, voHandRangeOfMovement);
		factory.save(domHandRangeOfMovement);
				
		return HandRangeOfMovementVoAssembler.create(domHandRangeOfMovement);						
	}

	public HandRangeOfMovementVo getHandRangeOfMovementByClinicalContact(ClinicalContactRefVo voRefClinicalContact) 
	{
		DomainFactory factory = getDomainFactory();				
		String hql;
		hql = " from HandRangeOfMovement m where m.clinicalContact.id = " + voRefClinicalContact.getID_ClinicalContact();

		HandRangeOfMovementVoCollection voCollHandRangeOfMovements =  HandRangeOfMovementVoAssembler.createHandRangeOfMovementVoCollectionFromHandRangeOfMovement(factory.find(hql));

		if (voCollHandRangeOfMovements.size() == 1)
			return voCollHandRangeOfMovements.get(0);
		else 
			return null;
	}

	public MskJointVoCollection listDigitJoints() 
	{
		BoneJointConfiguration impl =  (BoneJointConfiguration)getDomainImpl(MuscleJointConfigurationImpl.class);
		return impl.listJointsForGroupType(MSKGroupType.DIGIT);
	}

	public MskJointVoCollection listJointsForGroup(MskGroupsRefVo voRefMskGroup)
	{
		BoneJointConfiguration impl =  (BoneJointConfiguration)getDomainImpl(MuscleJointConfigurationImpl.class);
		return impl.listJointsForGroup(voRefMskGroup);
	}

	public MskGroupLiteVoCollection listDigitGroups()
	{
		BoneJointConfiguration impl =  (BoneJointConfiguration)getDomainImpl(MuscleJointConfigurationImpl.class);
		return impl.listGroupsForGroupType(MSKGroupType.DIGIT);
	}

	public MskJointsMovementsCollection listMovementsForJoint(MskJointsRefVo refJoint)
	{
		BoneJointConfiguration impl =  (BoneJointConfiguration)getDomainImpl(MuscleJointConfigurationImpl.class);
		return impl.listMovementsForJoint(refJoint);
	}



}
