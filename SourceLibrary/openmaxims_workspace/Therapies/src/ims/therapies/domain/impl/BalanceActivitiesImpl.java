//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.42 build 2196.26417)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.therapies.domain.base.impl.BaseBalanceActivitiesImpl;
import ims.therapies.treatment.domain.objects.BalanceActivities;
import ims.therapies.vo.BalanceActivitiesVo;
import ims.therapies.vo.BalanceActivitiesVoCollection;
import ims.therapies.vo.domain.BalanceActivitiesVoAssembler;

public class BalanceActivitiesImpl extends BaseBalanceActivitiesImpl
{

	public HcpCollection listHCPs(HcpFilter voHcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(voHcpFilter);
	}

	public void saveBalanceActivities(BalanceActivitiesVo voBalanceActivities) throws StaleObjectException, UniqueKeyViolationException
	{
		if(!voBalanceActivities.isValidated())
			throw new DomainRuntimeException("These Balance Activites have not been validated");
		
		if (voBalanceActivities.getID_BalanceActivities() == null && getBalanceActivitiesByClinicalContact(voBalanceActivities.getClinicalContact()) != null)
			throw new StaleObjectException(null, "A Balance Activities record already exists for this Care Context, the screen will be refreshed.");
			
		DomainFactory factory = getDomainFactory();
		BalanceActivities doBalAct = BalanceActivitiesVoAssembler.extractBalanceActivities(factory, voBalanceActivities);
		factory.save(doBalAct);
	}

	public BalanceActivitiesVo getBalanceActivitiesByClinicalContact(ClinicalContactRefVo voClinicalContactRef)
	{
		if (voClinicalContactRef == null)
			throw new RuntimeException("Cannot get Balance Activity for null Clinical Contact");

		StringBuffer query = new StringBuffer("from BalanceActivities as b1_1 where b1_1.clinicalContact.id = :CCID order by b1_1.systemInformation.creationDateTime desc"); //wdev-13637

		List list = getDomainFactory().find(query.toString(), "CCID", voClinicalContactRef.getID_ClinicalContact());

		if (list == null || list.size() == 0)
			return null;
		
		BalanceActivitiesVoCollection voColl = BalanceActivitiesVoAssembler.createBalanceActivitiesVoCollectionFromBalanceActivities(list);
		if (voColl != null && voColl.size() > 0)
		{						
			return voColl.get(0);
		}

		return null;
	}

	public BalanceActivitiesVoCollection getBalanceActivitiesByCareContext(CareContextRefVo voCareContextRef) 
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from BalanceActivities b ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		if (voCareContextRef != null)
		{
			hql.append(andStr + " b.clinicalContact.careContext.id = :id_CareContext");
			markers.add("id_CareContext");
			values.add(voCareContextRef.getID_CareContext());			
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();
		
		List driving = factory.find(query, markers, values);	
		return BalanceActivitiesVoAssembler.createBalanceActivitiesVoCollectionFromBalanceActivities(driving);
	}
}
