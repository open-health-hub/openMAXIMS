//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.45 build 2257.23328)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.therapies.domain.base.impl.BaseDrivingImpl;
import ims.therapies.vo.DrivingVo;
import ims.therapies.vo.DrivingVoCollection;
import ims.therapies.vo.domain.DrivingVoAssembler;
import ims.therapies.workleisuredriving.domain.objects.Driving;

public class DrivingImpl extends BaseDrivingImpl
{
	private static final long serialVersionUID = 1L;

	public DrivingVo saveDriving(DrivingVo driving) throws StaleObjectException 
	{
		if (!driving.isValidated())
		{
			throw new DomainRuntimeException("This WheelchairSkillsVo has not been validated");
		}
		if(driving.getID_Driving() == null)
		{
			if(driving.getCareContext() != null)
			{
				
				if(driving.getCareContext() != null)
				{
					DrivingVoCollection coll = getDrivingByCareContext(driving.getCareContext());
					if(coll != null && coll.size()>0)
						throw new DomainRuntimeException("A Driving record already exists for current CareContext.");
				}
			}
		}
		DomainFactory factory = getDomainFactory();	
		Driving domDriving = DrivingVoAssembler.extractDriving(factory, driving);
		
		factory.save(domDriving);
		
		return DrivingVoAssembler.create(domDriving);
	}

	

	public HcpCollection listHcps(Hcp filter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(filter);
	}

	
	public DrivingVoCollection getDrivingByCareContext(CareContextRefVo voCareContext) 
	{
		if(voCareContext == null)
			throw new CodingRuntimeException("ElectrotherapyPneumatic Filter not provided for get call. ");
		
		String hql = new String("from Driving d where d.careContext.id = :CARECONTEXT_ID order by d.systemInformation.creationDateTime desc");

		java.util.List list = getDomainFactory().find(hql, "CARECONTEXT_ID", voCareContext.getID_CareContext());

		if (list.size() == 0)
			return null;
		
		DrivingVoCollection coll = DrivingVoAssembler.createDrivingVoCollectionFromDriving(list);
		
		return coll;
	}

}
