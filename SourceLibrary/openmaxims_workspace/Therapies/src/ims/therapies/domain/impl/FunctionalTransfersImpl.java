//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.42 build 2207.27783)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.therapies.domain.base.impl.BaseFunctionalTransfersImpl;
import ims.therapies.treatment.domain.objects.FunctionalTransfers;
import ims.therapies.treatment.vo.FunctionalTransfersRefVo;
import ims.therapies.vo.FunctionalTransfersShortVoCollection;
import ims.therapies.vo.FunctionalTransfersVo;
import ims.therapies.vo.domain.FunctionalTransfersShortVoAssembler;
import ims.therapies.vo.domain.FunctionalTransfersVoAssembler;

import java.util.ArrayList;

public class FunctionalTransfersImpl extends BaseFunctionalTransfersImpl
{
	private static final long serialVersionUID = 1L;

	/**
	 *	Domain Interface function used to retrieve Functional Transfers for specific CareContext
	 */
	public FunctionalTransfersShortVoCollection listFunctionalTransfersByCareContext(CareContextRefVo careContextRef)
	{
		// Check parameter
		if (careContextRef == null || !careContextRef.getID_CareContextIsNotNull())
			throw new DomainRuntimeException("Invalid parameter CareContext");
		
		String query = "from FunctionalTransfers as ft where ft.clinicalContact.careContext.id = :CCID";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("CCID");
		paramValues.add(careContextRef.getID_CareContext());
		
		return FunctionalTransfersShortVoAssembler.createFunctionalTransfersShortVoCollectionFromFunctionalTransfers(getDomainFactory().find(query, paramNames, paramValues));
	}

	/**
	 *	Domain Interface function used to save a Functional Transfer
	 */
	public FunctionalTransfersVo saveFunctionalTransfers(FunctionalTransfersVo functionalTransfers) throws StaleObjectException, UniqueKeyViolationException, ForeignKeyViolationException 
	{
		// Ensure the value object has been validated
		if (!functionalTransfers.isValidated())
			throw new DomainRuntimeException("FunctionalTransfers record has not been validated");

		// Creating a new record
		if (!functionalTransfers.getID_FunctionalTransfersIsNotNull())
		{
			if (existsRecord(functionalTransfers.getClinicalContact()))
				throw new ForeignKeyViolationException("A Functional Transfer record already exists for this Clinical Contact");
		}
			
		DomainFactory factory = getDomainFactory();
		FunctionalTransfers domFunctionalTransfers = FunctionalTransfersVoAssembler.extractFunctionalTransfers(factory, functionalTransfers);

		factory.save(domFunctionalTransfers);

		return FunctionalTransfersVoAssembler.create(domFunctionalTransfers);
	}

	/**
	 *	Domain Interface function used to retrieve a specific Functional Transfer
	 */
	public FunctionalTransfersVo getFunctionalTransfers(FunctionalTransfersRefVo functionalTransferRef)
	{
		// Check parameter
		if (functionalTransferRef == null || !functionalTransferRef.getID_FunctionalTransfersIsNotNull())
			throw new DomainRuntimeException("Invalid parameter FunctionalTransfer");
		
		return FunctionalTransfersVoAssembler.create((FunctionalTransfers) getDomainFactory().getDomainObject(FunctionalTransfers.class, functionalTransferRef.getID_FunctionalTransfers()));
	}


	public HcpLiteVoCollection listHcps(String value)
	{
		// Check parameter
		if (value == null || value.length() <= 0)
			throw new DomainRuntimeException("Provide at least 3 character for HCP search");
		
		String query = "from Hcp as hcp where hcp.mos.name.upperSurname like :SURNAME or hcp.mos.name.upperForename like :FORENAME";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("SURNAME");
		paramValues.add(value.toUpperCase());
		paramNames.add("FORENAME");
		paramValues.add(value.toUpperCase());
		
		return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(getDomainFactory().find(query, paramNames, paramValues));
	}


	private boolean existsRecord(ClinicalContactRefVo clinicalContact)
	{
		if (clinicalContact == null || !clinicalContact.getID_ClinicalContactIsNotNull())
			throw new DomainRuntimeException("Invalid parameter Clinical Contact");
		
		String query = "select COUNT (ft.id) from FunctionalTransfers as ft where ft.clinicalContact.id = :CCID and ft.isRIE <> 1";

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("CCID");
		paramValues.add(clinicalContact.getID_ClinicalContact());
		
		Object[] count = getDomainFactory().find(query, paramNames, paramValues).toArray();
		
		if (count != null && count.length > 0 && ((Long)count[0]).intValue() > 0)
			return true;

		return false;
	}
}
