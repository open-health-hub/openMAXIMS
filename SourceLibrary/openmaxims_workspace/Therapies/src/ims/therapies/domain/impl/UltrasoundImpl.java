//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.42 build 2202.25904)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.therapies.domain.TreatmentEquipmentConfig;
import ims.therapies.domain.base.impl.BaseUltrasoundImpl;
import ims.therapies.treatment.domain.objects.ElectrotherapyUltrasound;
import ims.therapies.treatment.vo.ElectrotherapyUltrasoundRefVo;
import ims.therapies.vo.ElectrotherapyUltrasoundShortVoCollection;
import ims.therapies.vo.ElectrotherapyUltrasoundVo;
import ims.therapies.vo.TreatmentEquipmentConfigVoCollection;
import ims.therapies.vo.domain.ElectrotherapyUltrasoundShortVoAssembler;
import ims.therapies.vo.domain.ElectrotherapyUltrasoundVoAssembler;
import ims.therapies.vo.lookups.TreatmentEquipmentTypeConfig;

public class UltrasoundImpl extends BaseUltrasoundImpl
{
	private static final long serialVersionUID = 1L;

	
	/**
	 * WDEV-13598
	 * List records by Care Context and take into account the RIE records.
	 */
	public ElectrotherapyUltrasoundShortVoCollection listByCareContext(CareContextLiteVo voCareContext)
	{
		String hql = "from ElectrotherapyUltrasound eu where eu.clinicalContact.careContext.id = :CC";

		return ElectrotherapyUltrasoundShortVoAssembler.createElectrotherapyUltrasoundShortVoCollectionFromElectrotherapyUltrasound(getDomainFactory().find(hql, "CC", voCareContext.getID_CareContext()));
	}

	
	/**
	 * WDEV-13648
	 * Get ElectrotherapyUltrasoundVo record by id
	 */
	public ElectrotherapyUltrasoundVo getUltrasound(ElectrotherapyUltrasoundRefVo ultrasound)
	{
		// Check parameter
		if (ultrasound == null || !ultrasound.getID_ElectrotherapyUltrasoundIsNotNull())
			return null;
		
		return ElectrotherapyUltrasoundVoAssembler.create((ElectrotherapyUltrasound) getDomainFactory().getDomainObject(ElectrotherapyUltrasound.class, ultrasound.getID_ElectrotherapyUltrasound()));
	}

	public HcpLiteVoCollection listHcpLiteByName(String hcpName)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName(hcpName);

	}

	public ElectrotherapyUltrasoundVo save(ElectrotherapyUltrasoundVo voElectroUltrasound) throws StaleObjectException, UniqueKeyViolationException 
	{
		if(!voElectroUltrasound.isValidated())
			throw new DomainRuntimeException("This Ultrasound has not been validated");
	
		DomainFactory factory = getDomainFactory();
		
		if (voElectroUltrasound.getID_ElectrotherapyUltrasound() == null)//Inserting a record
		{
			ElectrotherapyUltrasoundVo vo = getUltrasoundByClinicalContact(voElectroUltrasound.getClinicalContact());
			if(vo != null)
				throw new UniqueKeyViolationException("The screen will be refreshed");
		}
		
		ElectrotherapyUltrasound doUltrasound = ElectrotherapyUltrasoundVoAssembler.extractElectrotherapyUltrasound(factory, voElectroUltrasound);
		factory.save(doUltrasound);
				
		return ElectrotherapyUltrasoundVoAssembler.create(doUltrasound);
	}

	private ElectrotherapyUltrasoundVo getUltrasoundByClinicalContact(ClinicalContactShortVo voClinicalContact)
	{
		if(voClinicalContact == null)
			throw new CodingRuntimeException("ElectrotherapyUltrasound Filter not provided for get call. ");
		
		String hql = "from ElectrotherapyUltrasound e where e.clinicalContact.id = :CLINICAL_CONTACT_ID and e.isRIE is null";

		return ElectrotherapyUltrasoundVoAssembler.create((ElectrotherapyUltrasound) getDomainFactory().findFirst(hql, "CLINICAL_CONTACT_ID", voClinicalContact.getID_ClinicalContact()));
	}

	public TreatmentEquipmentConfigVoCollection listTreatmentEquipmentConfigs(TreatmentEquipmentTypeConfig lkpTreatmentEquipmentConfig) 
	{
		TreatmentEquipmentConfig impl = (TreatmentEquipmentConfig) getDomainImpl(TreatmentEquipmentConfigImpl.class);		
		return impl.list(lkpTreatmentEquipmentConfig);
	}
}
