//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.42 build 2196.26417)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.therapies.domain.base.impl.BaseBobathImpl;
import ims.therapies.treatment.domain.objects.Bobath;
import ims.therapies.treatment.domain.objects.Massage;
import ims.therapies.treatment.vo.BobathRefVo;
import ims.therapies.vo.BobathShortVoCollection;
import ims.therapies.vo.BobathVo;
import ims.therapies.vo.BobathVoCollection;
import ims.therapies.vo.domain.BobathShortVoAssembler;
import ims.therapies.vo.domain.BobathVoAssembler;
import ims.therapies.vo.domain.MassageVoAssembler;


public class BobathImpl extends BaseBobathImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* get Bobath record for a clinical contact
	*/
	public BobathVo getBoBath(ims.core.vo.ClinicalContactShortVo voClinicalContact)
	{
		if(voClinicalContact == null)
			throw new CodingRuntimeException("Bobath Filter not provided for get call. ");
		
		String hql = new String("from Bobath b where b.clinicalContact.id = :CLINICAL_CONTACT_ID");

		BobathVoCollection bobaths = BobathVoAssembler.createBobathVoCollectionFromBobath(getDomainFactory().find(hql, "CLINICAL_CONTACT_ID", voClinicalContact.getID_ClinicalContact()));

		if (bobaths.size() > 0)
			return bobaths.get(0);
		
		return null;
	}

	/**
	* save a Bobath record
	 * @throws UniqueKeyViolationException 
	*/
	public BobathVo saveBoBath(BobathVo voBobath) throws ims.domain.exceptions.StaleObjectException, UniqueKeyViolationException
	{
		if(!voBobath.isValidated())
			throw new DomainRuntimeException("BoBath Value Object has not been validated");
		
		if (voBobath.getID_Bobath() == null && getBoBath(voBobath.getClinicalContact()) != null)
			throw new UniqueKeyViolationException("The screen will be refreshed.");
		
		DomainFactory factory = getDomainFactory();		
		Bobath doBobath = BobathVoAssembler.extractBobath(factory,voBobath);
				 
		factory.save(doBobath);
					
		return BobathVoAssembler.create(doBobath);		
	}
	public HcpCollection listMedics(HcpFilter voHcpFilter) 
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listMedics(voHcpFilter);		
	}

	public BobathShortVoCollection listByCareContext(CareContextRefVo voCareContextRef)
	{
		String query = "from Bobath bo where bo.clinicalContact.careContext.id = :CC";
		
		return BobathShortVoAssembler.createBobathShortVoCollectionFromBobath(getDomainFactory().find(query, "CC", voCareContextRef.getID_CareContext()));
	}

	//wdev-13807
	public BobathVo getBoBathById(BobathRefVo recordID) 
	{
		if( recordID == null)
			return null;
			
		Bobath doBobath = (Bobath)getDomainFactory().getDomainObject(Bobath.class, recordID.getID_Bobath());
		return BobathVoAssembler.create(doBobath);
	}

	

}
