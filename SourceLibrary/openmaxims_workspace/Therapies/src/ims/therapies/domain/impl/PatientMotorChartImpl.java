//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.45 build 2265.41281)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.clinicaladmin.domain.MuscleAreaGroupsMuscles;
import ims.clinicaladmin.domain.impl.MuscleAreaGroupsMusclesImpl;
import ims.clinicaladmin.vo.MuscleGroupsVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.SortOrder;
import ims.spinalinjuries.therapies.domain.objects.PatientMotorChart;
import ims.spinalinjuries.therapies.vo.PatientMotorChartRefVo;
import ims.therapies.domain.base.impl.BasePatientMotorChartImpl;
import ims.therapies.vo.PatientMotorChartShortVoCollection;
import ims.therapies.vo.PatientMotorChartVo;
import ims.therapies.vo.domain.PatientMotorChartShortVoAssembler;
import ims.therapies.vo.domain.PatientMotorChartVoAssembler;

public class PatientMotorChartImpl extends BasePatientMotorChartImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* List Motor Areas
	*/
	public ims.clinicaladmin.vo.MotorAreaVoCollection listMotorAreas()
	{
		MuscleAreaGroupsMuscles muscleArea = (MuscleAreaGroupsMuscles)getDomainImpl(MuscleAreaGroupsMusclesImpl.class);
		return muscleArea.listMotorAreas();

	}

	public HcpCollection listHCPs(HcpFilter filter) 
	{
		HcpAdmin impl = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return impl.listHCPs(filter);
	}

	public PatientMotorChartShortVoCollection listPatientMotorChartShort(CareContextRefVo careContextRefVo)
	{
		if(careContextRefVo == null )
            throw new RuntimeException("Cannot get PatientMotorChartShortVoCollection for null CareContextRefVo");
			
		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer("from PatientMotorChart mc where mc.clinicalContact.careContext.id = :id_CareContext");

		java.util.List list = factory.find(hql.toString(), "id_CareContext", careContextRefVo.getID_CareContext());
		return PatientMotorChartShortVoAssembler.createPatientMotorChartShortVoCollectionFromPatientMotorChart(list).sort(SortOrder.DESCENDING);
	}

	public PatientMotorChartVo getPatientMotorChart(PatientMotorChartRefVo chartVo) 
	{
		if(chartVo == null || chartVo.getID_PatientMotorChart() == null)
			throw new DomainRuntimeException("Motor Chart Filter not provided for get call. ");

		DomainFactory factory = getDomainFactory();
		return PatientMotorChartVoAssembler.create((PatientMotorChart)factory.getDomainObject(chartVo));
	}

	public PatientMotorChartVo savePatientMotorChart(PatientMotorChartVo chartVo) throws StaleObjectException 
	{
		// Ensure the value object has been validated
		if (!chartVo.isValidated())
			throw new DomainRuntimeException("ChartVo has not been validated");
		
		DomainFactory factory = getDomainFactory();
		PatientMotorChart doChart = PatientMotorChartVoAssembler.extractPatientMotorChart(factory, chartVo);

		factory.save(doChart);
		
		return PatientMotorChartVoAssembler.create(doChart);

	}

	public MuscleGroupsVo getMuscles(MuscleGroupsVo voMuscleGroup)
	{
		MuscleAreaGroupsMuscles muscleImpl = (MuscleAreaGroupsMuscles) getDomainImpl(MuscleAreaGroupsMusclesImpl.class);
		return muscleImpl.getMuscles(voMuscleGroup);
	}
}
