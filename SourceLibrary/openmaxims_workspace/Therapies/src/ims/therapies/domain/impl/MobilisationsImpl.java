//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.39 build 2173.22508)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.vo.AppFormMenuActionsVo;
import ims.admin.vo.domain.AppFormMenuActionsVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;
import ims.therapies.domain.Mobilisations;
import ims.therapies.treatment.domain.objects.MobilisationsTreatment;
import ims.therapies.treatment.domain.objects.SportsActivity;
import ims.therapies.treatment.vo.MobilisationsRefVo;
import ims.therapies.vo.MobilisationsShortVoCollection;
import ims.therapies.vo.MobilisationsTreatmentVo;
import ims.therapies.vo.MobilisationsVo;
import ims.therapies.vo.MobilisationsVoCollection;
import ims.therapies.vo.domain.MobilisationsShortVoAssembler;
import ims.therapies.vo.domain.MobilisationsTreatmentVoAssembler;
import ims.therapies.vo.domain.MobilisationsVoAssembler;
import ims.therapies.vo.domain.SportsActivityVoAssembler;

public class MobilisationsImpl extends DomainImpl implements ims.therapies.domain.Mobilisations, ims.domain.impl.Transactional
{
	public HcpCollection listHCPs(HcpFilter voHcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(voHcpFilter);
	}

	public MobilisationsVo save(MobilisationsVo voMobilisations)throws StaleObjectException, UniqueKeyViolationException 
	{
		if(!voMobilisations.isValidated())
			throw new DomainRuntimeException("This Mobilisation has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("from Mobilisations as mb ");
		if(voMobilisations.getID_Mobilisations() == null)
			hql.append(" where (mb.clinicalContact.id = " + voMobilisations.getClinicalContact().getID_ClinicalContact() + ")");
		else
			hql.append(" where (mb.clinicalContact.id = " + voMobilisations.getClinicalContact().getID_ClinicalContact() + ") and mb.id <> " +  voMobilisations.getID_Mobilisations());
		
		List list = (factory.find(hql.toString()));
		
		if(list.size() > 0)
		{
			MobilisationsVoCollection tempCol = MobilisationsVoAssembler.createMobilisationsVoCollectionFromMobilisations(list);  //wdev-13513
			if(tempCol != null && tempCol.size() > 0)	//wdev-13513
				throw new DomainRuntimeException("A record exists for this clinical contact, the screen will be refreshed");
		}
		
		
		
		ims.therapies.treatment.domain.objects.Mobilisations domMobilisation = MobilisationsVoAssembler.extractMobilisations(factory, voMobilisations);
		
		factory.save(domMobilisation);
		
		return MobilisationsVoAssembler.create(domMobilisation);
	}

	public MobilisationsVo getMobilisation(ClinicalContactShortVo voClinicalContact)
	{
		if (voClinicalContact == null)
			throw new RuntimeException("Cannot get Mobilisation record for null Clinical Contact");

		StringBuffer query = new StringBuffer("from Mobilisations as m1_1 where m1_1.clinicalContact.id = :CCID order by m1_1.systemInformation.creationDateTime desc "); //wdev-13564
		List list = getDomainFactory().find(query.toString(), "CCID", voClinicalContact.getID_ClinicalContact());

		if (list == null || list.size() == 0)
			return null;
		//else if (list.size() > 1)
		//	throw new RuntimeException("More than one Mobilisation found for the current Clinical Contact");

		MobilisationsVoCollection voList = MobilisationsVoAssembler.createMobilisationsVoCollectionFromMobilisations(list);
		if (voList.size() > 0)
			return voList.get(0);

		return null;
	}
	

	public MobilisationsShortVoCollection listByCareContext(CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from Mobilisations mob ";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
		String andStr = " ";

		if (voCareContextRef != null)
		{
			hql.append(andStr + " mob.clinicalContact.careContext.id = :cc");
			markers.add("cc");
			values.add(voCareContextRef.getID_CareContext());
		}

		if (markers.size() > 0)
			query += " where ";
		query += hql.toString();

		java.util.List mobilisation = factory.find(query, markers, values);
		return MobilisationsShortVoAssembler.createMobilisationsShortVoCollectionFromMobilisations(mobilisation);
	}

	//wdev-13564
	public MobilisationsTreatmentVo saveMobilisationTreatment(MobilisationsTreatmentVo record) throws DomainInterfaceException,	StaleObjectException, UniqueKeyViolationException 
	{
		if (record == null || record.getID_MobilisationsTreatment()== null)
			throw new CodingRuntimeException("This MobilisationsTreatmentVo is null");
		
		
		DomainFactory factory = getDomainFactory();	
		
				
		MobilisationsTreatment domMobilisationsTreatment = MobilisationsTreatmentVoAssembler.extractMobilisationsTreatment(factory, record);
		domMobilisationsTreatment.setIsRIE(record.getIsRIE());
		factory.save(domMobilisationsTreatment);
		
		return MobilisationsTreatmentVoAssembler.create(domMobilisationsTreatment);
	}

	//wdev-13564
	public MobilisationsVo getMobilisationById(MobilisationsRefVo record) 
	{
		if(record == null || record.getID_Mobilisations() == null)
			return null;
		DomainFactory factory = getDomainFactory();
		ims.therapies.treatment.domain.objects.Mobilisations doMobilisations = (ims.therapies.treatment.domain.objects.Mobilisations) factory.getDomainObject(ims.therapies.treatment.domain.objects.Mobilisations.class, record.getID_Mobilisations());
		MobilisationsVo vo = MobilisationsVoAssembler.create(doMobilisations);
		return vo;		
	}

}
