//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4073.27193)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.forms.tumourgroupoverallprognostic;

import ims.clinicaladmin.vo.GleasonConfigLiteVo;
import ims.clinicaladmin.vo.GleasonConfigLiteVoCollection;
import ims.clinicaladmin.vo.OverallPrognosticGroupingLiteVo;
import ims.clinicaladmin.vo.OverallPrognosticGroupingVo;
import ims.clinicaladmin.vo.OverallPrognosticGroupingVoCollection;
import ims.clinicaladmin.vo.PSAConfigVo;
import ims.clinicaladmin.vo.PSAConfigVoCollection;
import ims.clinicaladmin.vo.PrognosticGroupingCongfigVo;
import ims.clinicaladmin.vo.PrognosticRiskConfigVo;
import ims.clinicaladmin.vo.PrognosticRiskConfigVoCollection;
import ims.clinicaladmin.vo.TumourGroupHistologyVo;
import ims.clinicaladmin.vo.TumourGroupHistologyVoCollection;
import ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo;
import ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVoCollection;
import ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo;
import ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVoCollection;
import ims.clinicaladmin.vo.TumourGroupVo;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.oncology.vo.PrognosticLocationConfigVo;
import ims.oncology.vo.PrognosticLocationConfigVoCollection;
import ims.oncology.vo.lookups.LookupHelper;
import ims.oncology.vo.lookups.PrognosticGroup;
import ims.oncology.vo.lookups.PrognosticGroupCollection;
import ims.oncology.vo.lookups.TNMClinicalpathological;
import ims.oncology.vo.lookups.TNMType;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private class OverallStagingComapartor implements Comparator<OverallPrognosticGroupingVo>
	{
		private int direction;
		private Integer column;

		public OverallStagingComapartor(DynamicGridColumn column, SortOrder order)
		{
			if (column != null && column.getIdentifier() == null)
				throw new CodingRuntimeException("Logical error - All columns in the grid must have an identifier. Check grid initialization");

    		this.column = column != null ? (Integer) column.getIdentifier() : null;
    		
    		this.direction = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}

		public int compare(OverallPrognosticGroupingVo overallPrognostic_1, OverallPrognosticGroupingVo overallPrognostic_2)
		{
			if (column == null)
				return 0;
			
			if (overallPrognostic_1 == null || overallPrognostic_2 == null)
				return 0;
			
			switch (column)
			{
				case COL_T_VALUE:
					return compareByTValue(overallPrognostic_1, overallPrognostic_2);
						
				case COL_N_VALUE:
					return compareByNValue(overallPrognostic_1, overallPrognostic_2);
					
				case COL_M_VALUE:
					return compareByMValue(overallPrognostic_1, overallPrognostic_2);
					
				case COL_HIST_TYPE:
					return compareByHistoType(overallPrognostic_1, overallPrognostic_2);
					
				case COL_HIST_GRADE:
					return compareByHistDifValue(overallPrognostic_1, overallPrognostic_2);
					
				case COL_PROG_LOCATION:
					return overallPrognostic_1.getPrognosticLocationVal().getLocationName().compareTo(overallPrognostic_2.getPrognosticLocationVal().getLocationName()) * direction;
					
				case COL_PROG_RISK:
					return compareByRiskValue(overallPrognostic_1, overallPrognostic_2);
					
				case COL_PROG_PSA:
					return compareByPSAValue(overallPrognostic_1, overallPrognostic_2);
					
				case COL_PROG_GLEASON:
					return compareByGleasonValue(overallPrognostic_1, overallPrognostic_2);
					
				case COL_OVERALL:
					return compareByPrognosticGrouping(overallPrognostic_1, overallPrognostic_2);
			}

			return 0;
		}

		/**
		 * @param overallPrognostic_1
		 * @param overallPrognostic_2
		 * @return
		 */
		private int compareByTValue(OverallPrognosticGroupingVo overallPrognostic_1, OverallPrognosticGroupingVo overallPrognostic_2)
		{
			if (overallPrognostic_1.getTVal() == null && overallPrognostic_2.getTVal() == null)
				return 0;
			
			if (overallPrognostic_1.getTVal() == null && overallPrognostic_2.getTVal() != null)
				return direction;
			
			if (overallPrognostic_1.getTVal() != null && overallPrognostic_2.getTVal() == null)
				return -1 * direction;
			
			return overallPrognostic_1.getTVal().getTNMValue().compareTo(overallPrognostic_2.getTVal().getTNMValue()) * direction;
		}

		/**
		 * @param overallPrognostic_1
		 * @param overallPrognostic_2
		 * @return
		 */
		private int compareByNValue(OverallPrognosticGroupingVo overallPrognostic_1, OverallPrognosticGroupingVo overallPrognostic_2)
		{
			if (overallPrognostic_1.getNVal() == null && overallPrognostic_2.getNVal() == null)
				return 0;
			
			if (overallPrognostic_1.getNVal() == null && overallPrognostic_2.getNVal() != null)
				return direction;
			
			if (overallPrognostic_1.getNVal() != null && overallPrognostic_2.getNVal() == null)
				return -1 * direction;
			
			return overallPrognostic_1.getNVal().getTNMValue().compareTo(overallPrognostic_2.getNVal().getTNMValue()) * direction;
		}

		/**
		 * @param overallPrognostic_1
		 * @param overallPrognostic_2
		 * @return
		 */
		private int compareByMValue(OverallPrognosticGroupingVo overallPrognostic_1, OverallPrognosticGroupingVo overallPrognostic_2)
		{
			if (overallPrognostic_1.getMVal() == null && overallPrognostic_2.getMVal() == null)
				return 0;
			
			if (overallPrognostic_1.getMVal() == null && overallPrognostic_2.getMVal() != null)
				return direction;
			
			if (overallPrognostic_1.getMVal() != null && overallPrognostic_2.getMVal() == null)
				return -1 * direction;
			
			return overallPrognostic_1.getMVal().getTNMValue().compareTo(overallPrognostic_2.getMVal().getTNMValue()) * direction;
		}

		/**
		 * @param overallPrognostic_1
		 * @param overallPrognostic_2
		 * @return
		 */
		private int compareByHistoType(OverallPrognosticGroupingVo overallPrognostic_1, OverallPrognosticGroupingVo overallPrognostic_2)
		{
			if (overallPrognostic_1.getHistVal() == null && overallPrognostic_2.getHistVal() == null)
				return 0;
			
			if (overallPrognostic_1.getHistVal() == null && overallPrognostic_2.getHistVal() != null)
				return direction;
			
			if (overallPrognostic_1.getHistVal() != null && overallPrognostic_2.getHistVal() == null)
				return -1 * direction;
			
			return overallPrognostic_1.getHistVal().getAssociatedHistology().getHistologyDescription().compareTo(overallPrognostic_2.getHistVal().getAssociatedHistology().getHistologyDescription()) * direction;
		}

		/**
		 * @param overallPrognostic_1
		 * @param overallPrognostic_2
		 * @return
		 */
		private int compareByHistDifValue(OverallPrognosticGroupingVo overallPrognostic_1, OverallPrognosticGroupingVo overallPrognostic_2)
		{
			if (overallPrognostic_1.getDiffVal() == null && overallPrognostic_2.getDiffVal() == null)
				return 0;
			
			if (overallPrognostic_1.getDiffVal() == null && overallPrognostic_2.getDiffVal() != null)
				return direction;
			
			if (overallPrognostic_1.getDiffVal() != null && overallPrognostic_2.getDiffVal() == null)
				return -1 * direction;
			
			return overallPrognostic_1.getDiffVal().getTumourDifferentation().getTumourDifferentation().compareTo(overallPrognostic_2.getDiffVal().getTumourDifferentation().getTumourDifferentation()) * direction;
		}

		/**
		 * @param overallPrognostic_1
		 * @param overallPrognostic_2
		 * @return
		 */
		private int compareByRiskValue(OverallPrognosticGroupingVo overallPrognostic_1, OverallPrognosticGroupingVo overallPrognostic_2)
		{
			if (overallPrognostic_1.getPrognosticRiskVal() == null && overallPrognostic_2.getPrognosticRiskVal() == null)
				return 0;
			
			if (overallPrognostic_1.getPrognosticRiskVal() == null && overallPrognostic_2.getPrognosticRiskVal() != null)
				return direction;
			
			if (overallPrognostic_1.getPrognosticRiskVal() != null && overallPrognostic_2.getPrognosticRiskVal() == null)
				return -1 * direction;
			
			return overallPrognostic_1.getPrognosticRiskVal().getRiskName().compareTo(overallPrognostic_2.getPrognosticRiskVal().getRiskName()) * direction;
		}

		/**
		 * @param overallPrognostic_1
		 * @param overallPrognostic_2
		 * @return
		 */
		private int compareByPSAValue(OverallPrognosticGroupingVo overallPrognostic_1, OverallPrognosticGroupingVo overallPrognostic_2)
		{
			if (overallPrognostic_1.getPrognosticPSAVal() == null && overallPrognostic_2.getPrognosticPSAVal() == null)
				return 0;
			
			if (overallPrognostic_1.getPrognosticPSAVal() == null && overallPrognostic_2.getPrognosticPSAVal() != null)
				return direction;
			
			if (overallPrognostic_1.getPrognosticPSAVal() != null && overallPrognostic_2.getPrognosticPSAVal() == null)
				return -1 * direction;
			
			return overallPrognostic_1.getPrognosticPSAVal().getPSAName().compareTo(overallPrognostic_2.getPrognosticPSAVal().getPSAName()) * direction;
		}

		/**
		 * @param overallPrognostic_1
		 * @param overallPrognostic_2
		 * @return
		 */
		private int compareByGleasonValue(OverallPrognosticGroupingVo overallPrognostic_1, OverallPrognosticGroupingVo overallPrognostic_2)
		{
			if (overallPrognostic_1.getPrognosticGleasonVal() == null && overallPrognostic_2.getPrognosticGleasonVal() == null)
				return 0;
			
			if (overallPrognostic_1.getPrognosticGleasonVal() == null && overallPrognostic_2.getPrognosticGleasonVal() != null)
				return direction;
			
			if (overallPrognostic_1.getPrognosticGleasonVal() != null && overallPrognostic_2.getPrognosticGleasonVal() == null)
				return -1 * direction;
			
			return overallPrognostic_1.getPrognosticGleasonVal().getGleasonName().compareTo(overallPrognostic_2.getPrognosticGleasonVal().getGleasonName()) * direction;
		}

		/**
		 * @param overallPrognostic_1
		 * @param overallPrognostic_2
		 * @return
		 */
		private int compareByPrognosticGrouping(OverallPrognosticGroupingVo overallPrognostic_1, OverallPrognosticGroupingVo overallPrognostic_2)
		{
			if (overallPrognostic_1.getPrognosticGroup() == null && overallPrognostic_2.getPrognosticGroup() == null)
				return 0;
			
			if (overallPrognostic_1.getPrognosticGroup() == null && overallPrognostic_2.getPrognosticGroup() != null)
				return direction;
			
			if (overallPrognostic_1.getPrognosticGroup() != null && overallPrognostic_2.getPrognosticGroup() == null)
				return -1 * direction;
				
			return overallPrognostic_1.getPrognosticGroup().getText().compareTo(overallPrognostic_2.getPrognosticGroup().getText()) * direction;
		}

	}

	
	private static final long serialVersionUID = 1L;

	// Constant for DYNAMIC GRID COLUMNS
	private static final int COL_T_VALUE = -170;
	private static final int COL_N_VALUE = -171;
	private static final int COL_M_VALUE = -172;
	private static final int COL_HIST_TYPE = -173;
	private static final int COL_HIST_GRADE = -174;
	private static final int COL_PROG_LOCATION = -175;
	private static final int COL_PROG_RISK = -176;
	private static final int COL_PROG_PSA = -177;
	private static final int COL_PROG_GLEASON = -178;
	private static final int COL_OVERALL = -179;

	// -------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Event handlers region
	// -------------------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialize the form (clear local context, hide context menu, initialize dynamic grid)
		initialize();

		// Display data on form
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		// WDEV-12569
		// Determine if we are editing or adding an Overall Prognostic record
		if (form.getForms().ClinicalAdmin.TumourOverallPrognostic.equals(formName) && DialogResult.OK.equals(result))
		{
			addDynamicGridRow(form.getGlobalContext().Oncology.getSelectedRecordForOverallPrognosticDialog());
		}
	}

	@Override
	/**
	 * WDEV-12569 - Request confirmation for save from user (occurs when saving with unconfigured Overall Prognostic records)
	 */
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (DialogResult.YES.equals(result))
		{
			if (save(false))
			{
				engine.close(DialogResult.OK);
			}
		}
	}

	@Override
	protected void onDyngrdOverallRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onDyngrdOverallRowSelectionCleared() throws PresentationLogicException
	{
		// Update controls state
		updateControlsState();
	}
	

	@Override
	protected void onDyngrdOverallColumnHeaderClicked(DynamicGridColumn column)
	{
		if (column.getIdentifier() == null)
			throw new CodingRuntimeException("Logical Error - All columns must have an identifier.");
		
		// Set sorting order for appropriate column
		setColumnSortOrder(column);
		
		// Sort dynamic grid values
		sortOverallRecords(column);
	}


	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// If save was successful close dialog with OK result
		if (save(true))
		{
			engine.close(DialogResult.OK);
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Close dialog with CANCEL result
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onDyngrdOverallCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getValue() instanceof PrognosticGroup)
		{
			cell.setIdentifier(cell.getValue());

			if (cell.getRow().getValue() instanceof OverallPrognosticGroupingVo)
			{
				OverallPrognosticGroupingVo overall = (OverallPrognosticGroupingVo) cell.getRow().getValue();

				overall.setPrognosticGroup((PrognosticGroup) cell.getValue());
				overall.setIsSaved(Boolean.FALSE);
			}
		}
		else if (cell.getValue() == null)
		{
			cell.setIdentifier(null);

			if (cell.getRow().getValue() instanceof OverallPrognosticGroupingVo)
			{
				OverallPrognosticGroupingVo overall = (OverallPrognosticGroupingVo) cell.getRow().getValue();

				overall.setPrognosticGroup(null);
				overall.setIsSaved(Boolean.FALSE);
			}
		}
	}

	@Override
	protected void onChkGenerateValueChanged() throws PresentationLogicException
	{
		// Generate all default values
		if (Boolean.TRUE.equals(form.chkGenerate().getValue()))
		{
			generateDefaultRecords(form.getGlobalContext().ClinicalAdmin.getTumourGroup());
		}
		
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
				break;
				
			case GenForm.ContextMenus.GenericGrid.Remove:
				inactivateInstance();
				break;
		}

		updateControlsState();
	}

	// -------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Form presentation function
	// -------------------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to initialize the form Clear local context, clear global context, hide context menu options, etc Initialize components
	 */
	public void initialize() throws FormOpenException
	{
		// Check Global context
		if (!Boolean.TRUE.equals(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getIsPrognosticGroupingRelevant()) && !form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfigIsNotNull())
			throw new FormOpenException("This form is used only for configuring overall prognostic for Tumour Groups that have prognostic grouping relevant");

		// Set tumour group name to tumour group label
		form.lblGeoup().setValue(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getGroupName());

		// Hide all context menu options && set text
		form.getContextMenus().hideAllGenericGridMenuItems();

		form.getContextMenus().getGenericGridAddItem().setText("Add Overall Prognostic");
		form.getContextMenus().getGenericGridRemoveItem().setText("Inactivate Overall Prognostic");

		// Initialize dynamic grid
		initializeDynamicGrid();
	}

	/**
	 * Function used to initialize the dynamic grid for Pre Treatment staging
	 */
	private void initializeDynamicGrid()
	{
		// Clear dynamic grid
		form.dyngrdOverall().clear();

		// This should never be null - as it is checked by initialize() function
		PrognosticGroupingCongfigVo prognosticGroupingSettings = form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig();

		DynamicGridColumn column = null;

		// Create T column
		if (Boolean.TRUE.equals(prognosticGroupingSettings.getUseTValues()))
		{
			column = form.dyngrdOverall().getColumns().newColumn("T", COL_T_VALUE);
			column.setWidth(50);
			column.setSortMode(SortMode.MANUAL);					// WDEV-12569
		}

		// Create N column
		if (Boolean.TRUE.equals(prognosticGroupingSettings.getUseNValues()))
		{
			column = form.dyngrdOverall().getColumns().newColumn("N", COL_N_VALUE);
			column.setWidth(50);
			column.setSortMode(SortMode.MANUAL);					// WDEV-12569
		}

		// Create M column
		if (Boolean.TRUE.equals(prognosticGroupingSettings.getUseMValues()))
		{
			column = form.dyngrdOverall().getColumns().newColumn("M", COL_M_VALUE);
			column.setWidth(50);
			column.setSortMode(SortMode.MANUAL);					// WDEV-12569
		}

		// Check if Tumour Group uses histopathologic type for overall staging
		if (Boolean.TRUE.equals(prognosticGroupingSettings.getIsHistologicalTypePertinent()))
		{
			column = form.dyngrdOverall().getColumns().newColumn("Histology Type", COL_HIST_TYPE);
			column.setWidth(120);
			column.setSortMode(SortMode.MANUAL);					// WDEV-12569
		}

		// Check if Tumour Group uses histopathologic grade for overall staging
		if (Boolean.TRUE.equals(prognosticGroupingSettings.getIsHistologicalGradePertinent()))
		{
			column = form.dyngrdOverall().getColumns().newColumn("Histology Grade", COL_HIST_GRADE);
			column.setWidth(120);
			column.setSortMode(SortMode.MANUAL);					// WDEV-12569
		}

		// Check if Tumour Group uses Prognostic Location for overall staging
		if (Boolean.TRUE.equals(prognosticGroupingSettings.getIsTumourLocationPertinent()))
		{
			column = form.dyngrdOverall().getColumns().newColumn("Location", COL_PROG_LOCATION);
			column.setWidth(120);
			column.setSortMode(SortMode.MANUAL);					// WDEV-12569
		}

		// Check if Tumour Group uses Prognostic Risk for overall staging
		if (Boolean.TRUE.equals(prognosticGroupingSettings.getIsRiskCategoryPertinent()))
		{
			column = form.dyngrdOverall().getColumns().newColumn("Risk", COL_PROG_RISK);
			column.setWidth(110);//WDEV-16926
			column.setSortMode(SortMode.MANUAL);					// WDEV-12569
		}

		// Check if Tumour Group uses Prognostic PSA for overall staging
		if (Boolean.TRUE.equals(prognosticGroupingSettings.getIsPSAPertinent()))
		{
			column = form.dyngrdOverall().getColumns().newColumn("PSA", COL_PROG_PSA);
			column.setWidth(110);//WDEV-16926
			column.setSortMode(SortMode.MANUAL);					// WDEV-12569
		}

		// Check if Tumour Group uses Prognostic Gleason for overall staging
		if (Boolean.TRUE.equals(prognosticGroupingSettings.getIsGleasonPertinent()))
		{
			column = form.dyngrdOverall().getColumns().newColumn("Gleason", COL_PROG_GLEASON);
			column.setWidth(115);//WDEV-16926
			column.setSortMode(SortMode.MANUAL);					// WDEV-12569
		}

		// Column for Overall prognostic value
		column = form.dyngrdOverall().getColumns().newColumn("Overall Prognostic", COL_OVERALL);
		column.setWidth(120);
		column.setSortMode(SortMode.MANUAL);						// WDEV-12569
	}

	/**
	 * Function used to display data on screen (refresh the screen) when form opens Will retrieve records from domain, display them, set the form to EDIT mode
	 */
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear grid
		clearInstanceControls();

		// Populate overalls
		populateOverallStagingToScreen(domain.listOverallPrognostic(form.getGlobalContext().ClinicalAdmin.getTumourGroup()), true);

		// Set form mode to EDIT
		form.setMode(FormMode.EDIT);
	}

	private void sortOverallRecords(DynamicGridColumn column)
	{
		// Get grid values
		OverallPrognosticGroupingVoCollection gridValues = populateOverallPrognosticFromScreen(false);
		
		if (column != null && column.getIdentifier() == null)
			throw new CodingRuntimeException("Logical error - All grid columns must have identifiers! Check grid initialization!");
		
		if (column != null)
		{
			switch ((Integer) column.getIdentifier())
			{
				case COL_T_VALUE:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_T()));
					break;

				case COL_N_VALUE:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_N()));
					break;

				case COL_M_VALUE:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_M()));
					break;

				case COL_HIST_TYPE:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_HisType()));
					break;

				case COL_HIST_GRADE:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_HisGrade()));
					break;

				case COL_PROG_LOCATION:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_Loc()));
					break;
					
				case COL_PROG_RISK:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_Risk()));
					break;
					
				case COL_PROG_PSA:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_PSA()));
					break;
					
				case COL_PROG_GLEASON:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_Gleason()));
					break;

				case COL_OVERALL:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_Overall()));
					break;				
			}
		}
		
		populateOverallStagingToScreen(gridValues, false);
	}

	private void setColumnSortOrder(DynamicGridColumn column)
	{
		if (column != null && column.getIdentifier() == null)
			throw new CodingRuntimeException("Logical Error - All grid columns must have an identifier. Check grid initialization");
		
		// Toggle between ASCENDING and DESCENDING sort mode
		// In the case where sort mode has not been set then default to ASCENDING sort mode
		// Each line will toggle if the column matches, else the sort mode will be cleared (null)
		form.getLocalContext().setSortOrder_T(column != null && column.getIdentifier().equals(COL_T_VALUE) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_T()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		form.getLocalContext().setSortOrder_N(column != null && column.getIdentifier().equals(COL_N_VALUE) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_N()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		form.getLocalContext().setSortOrder_M(column != null && column.getIdentifier().equals(COL_M_VALUE) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_M()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		form.getLocalContext().setSortOrder_HisType(column != null && column.getIdentifier().equals(COL_HIST_TYPE) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_HisType()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		form.getLocalContext().setSortOrder_HisGrade(column != null && column.getIdentifier().equals(COL_HIST_GRADE) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_HisGrade()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		
		form.getLocalContext().setSortOrder_Loc(column != null && column.getIdentifier().equals(COL_PROG_LOCATION) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_Loc()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		form.getLocalContext().setSortOrder_Risk(column != null && column.getIdentifier().equals(COL_PROG_RISK) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_Risk()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		form.getLocalContext().setSortOrder_PSA(column != null && column.getIdentifier().equals(COL_PROG_PSA) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_PSA()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		form.getLocalContext().setSortOrder_Gleason(column != null && column.getIdentifier().equals(COL_PROG_GLEASON) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_Gleason()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		
		form.getLocalContext().setSortOrder_Overall(column != null && column.getIdentifier().equals(COL_OVERALL) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_Overall()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// WDEV-12569
		// Set global context collection from screen
		form.getGlobalContext().Oncology.setOverallPrognosticDynamicGridCollection(populateOverallPrognosticFromScreen(false));
		// Clear record global context
		form.getGlobalContext().Oncology.setSelectedRecordForOverallPrognosticDialog(null);

		// Open dialog
		engine.open(form.getForms().ClinicalAdmin.TumourOverallPrognostic);
	}
	
	
	private void inactivateInstance()
	{
		if (form.dyngrdOverall().getSelectedRow() == null || !(form.dyngrdOverall().getSelectedRow().getValue() instanceof OverallPrognosticGroupingVo))
			throw new CodingRuntimeException("Major Logical Error - Can not inactivate null selected row or unexpected value");

		// Get selected row value
		((OverallPrognosticGroupingVo) form.dyngrdOverall().getSelectedRow().getValue()).setIsActive(Boolean.FALSE);

		// Update row back colour
		form.dyngrdOverall().getSelectedRow().setBackColor(Color.Crimson);
	}

	/**
	 * <b>WDEV-12569</b>
	 * <br>Function used to save Overall Prognostic collection configured for Tumour Group
	 * @param checkUnconfiguredStages - if set to <b>true</b>, then check for unconfigured Overall Prognostic records
	 *  
	 * @return <b>true</b> - if data has been committed to database, <b>false</b> - otherwise
	 */
	public boolean save(boolean checkUnconfiguredPrognostics) throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			// Get collection from screen
			OverallPrognosticGroupingVoCollection overallStaging = populateOverallPrognosticFromScreen(!checkUnconfiguredPrognostics);

    		// If records with no value or with TOBECONFIGURED (-2151) value exist
    		// then let user decide whether to proceed with save
			if (checkUnconfiguredPrognostics && hasUnconfiguredPrognostics())
			{
				engine.showMessage("There are records without a valid prognostic group allocated. Do you still wish to proceed with Save?", "Tumour Group Prognostic", MessageButtons.YESNO);
				return false;
			}
			
			// Validate collection
			String[] errors = overallStaging.validate();

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt domain save
			domain.saveOverall(overallStaging);

			return true;
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
	}

	/**
	 * <b>WDEV-12569</b>
	 * Function used to check for prognostic records not yet configured for the tumour group 
	 */
	private boolean hasUnconfiguredPrognostics()
	{
		// Check for overall value (other values should be populated)
		for (int i = 0; i < form.dyngrdOverall().getRows().size(); i++)
		{
			DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_OVERALL);
			DynamicGridRow row = form.dyngrdOverall().getRows().get(i);
			
			// If the row has an active overall value
			// Use the LiteVo version for value as this is the smallest type of VO
			if (row.getValue() instanceof OverallPrognosticGroupingLiteVo && ((OverallPrognosticGroupingLiteVo)row.getValue()).getIsActive())
			{
				DynamicGridCell cell = row.getCells().get(column);

				// If the value is null or TOBECONFIGURED then return as having stages not configured
				if (cell.getValue() == null || PrognosticGroup.TOBECONFIGURED.equals(cell.getValue()))
					return true;
			}
		}

		// All prognostic records are configured
		return false;
	}

	/**
	 * Function used to clear the screen It will only clear controls values, not local or global contexts
	 */
	public void clearInstanceControls()
	{
		// Clear dynamic grid
		form.dyngrdOverall().getRows().clear();
	}

	public void updateControlsState()
	{
		// Update context menu options
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(form.dyngrdOverall().getSelectedRow() != null
																		&& form.dyngrdOverall().getSelectedRow().getValue() instanceof OverallPrognosticGroupingVo
																		&& Boolean.TRUE.equals(((OverallPrognosticGroupingVo) form.dyngrdOverall().getSelectedRow().getValue()).getIsActive()));

		form.chkGenerate().setEnabled(form.dyngrdOverall().getRows().size() == 0);
	}

	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange functions
	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
	private void populateOverallStagingToScreen(OverallPrognosticGroupingVoCollection listOverall, boolean fromOpen)
	{
		// Clear grid rows
		form.dyngrdOverall().getRows().clear();

		// Check collection - if it is null terminate function
		if (listOverall == null)
			return;

		for (OverallPrognosticGroupingVo overall : listOverall)
		{
			if (fromOpen)
			{
				overall.setIsSaved(Boolean.TRUE);
			}
			
			addNewOverallStaging(overall);
		}
	}

	/**
	 * @param overall
	 */
	private void addNewOverallStaging(OverallPrognosticGroupingVo overall)
	{
		PrognosticGroupingCongfigVo prognosticSettings = form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig();

		// Create new row for each value in collection
		DynamicGridRow overallRow = form.dyngrdOverall().getRows().newRow();

		DynamicGridColumn column;
		DynamicGridCell cell;
		
	

		// Create cell for T Value
		if (Boolean.TRUE.equals(prognosticSettings.getUseTValues()))
		{
			column = form.dyngrdOverall().getColumns().getByIdentifier(COL_T_VALUE);
			cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);

			if (overall.getTValIsNotNull())
				cell.setValue(overall.getTValIsNotNull() ? overall.getTVal().getTNMValue() : "");

			cell.setReadOnly(true);//WDEV-13353
		}

		// Create cell for N Value
		if (Boolean.TRUE.equals(prognosticSettings.getUseNValues()))
		{
			column = form.dyngrdOverall().getColumns().getByIdentifier(COL_N_VALUE);
			cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);

			if (overall.getNValIsNotNull())
				cell.setValue(overall.getNValIsNotNull() ? overall.getNVal().getTNMValue() : "");

			cell.setReadOnly(true);//WDEV-13353
		}

		// Create cell for M Value
		if (Boolean.TRUE.equals(prognosticSettings.getUseMValues()))
		{
			column = form.dyngrdOverall().getColumns().getByIdentifier(COL_M_VALUE);
			cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);

			if (overall.getMValIsNotNull())
				cell.setValue(overall.getMValIsNotNull() ? overall.getMVal().getTNMValue() : "");

			cell.setReadOnly(true);//WDEV-13353
		}

		// Create cell for Histology Type value if needed
		if (Boolean.TRUE.equals(prognosticSettings.getIsHistologicalTypePertinent()))
		{
			column = form.dyngrdOverall().getColumns().getByIdentifier(COL_HIST_TYPE);
			cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);

			if (overall.getHistValIsNotNull())
				cell.setValue(overall.getHistVal().getAssociatedHistology().getHistologyDescription());

			cell.setReadOnly(true);//WDEV-13353
		}

		// Create cell for Histology Grade value if needed
		if (Boolean.TRUE.equals(prognosticSettings.getIsHistologicalGradePertinent()))
		{
			column = form.dyngrdOverall().getColumns().getByIdentifier(COL_HIST_GRADE);
			cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			
			if (overall.getDiffValIsNotNull())
				cell.setValue(overall.getDiffVal().getTumourDifferentation().getGrade());

			cell.setReadOnly(true);//WDEV-13353
		}

		// Create cell for Prognostic Location value if needed
		if (Boolean.TRUE.equals(prognosticSettings.getIsTumourLocationPertinent()))
		{
			column = form.dyngrdOverall().getColumns().getByIdentifier(COL_PROG_LOCATION);
			cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			
			if (overall.getPrognosticLocationValIsNotNull())
				cell.setValue(overall.getPrognosticLocationVal().getLocationName());

			cell.setReadOnly(true);//WDEV-13353
		}

		// Create cell for Prognostic Risk value if needed
		if (Boolean.TRUE.equals(prognosticSettings.getIsRiskCategoryPertinent()))
		{
			column = form.dyngrdOverall().getColumns().getByIdentifier(COL_PROG_RISK);
			cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
		
			if (overall.getPrognosticRiskValIsNotNull())
				cell.setValue(overall.getPrognosticRiskVal().getRiskName());
			
			cell.setReadOnly(true);//WDEV-13353
		}

		// Create cell for Prognostic PSA value if needed
		if (Boolean.TRUE.equals(prognosticSettings.getIsPSAPertinent()))
		{
			column = form.dyngrdOverall().getColumns().getByIdentifier(COL_PROG_PSA);
			cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);

			if (overall.getPrognosticPSAValIsNotNull())
				cell.setValue(overall.getPrognosticPSAVal().getPSAName());
			
			cell.setReadOnly(true);//WDEV-13353
		}

		// Create cell for Prognostic Gleason value if needed
		if (Boolean.TRUE.equals(prognosticSettings.getIsGleasonPertinent()))
		{
			column = form.dyngrdOverall().getColumns().getByIdentifier(COL_PROG_GLEASON);
			cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			
			if (overall.getPrognosticGleasonValIsNotNull())
				cell.setValue(overall.getPrognosticGleasonVal().getGleasonName());

			cell.setReadOnly(true);//WDEV-13353
		}

		// Create cell for Overall staging value
		column = form.dyngrdOverall().getColumns().getByIdentifier(COL_OVERALL);
		if (!Boolean.TRUE.equals(overall.getIsSaved()) || !overall.getPrognosticGroupIsNotNull() || (PrognosticGroup.TOBECONFIGURED.equals(overall.getPrognosticGroup()) && Boolean.TRUE.equals(overall.getIsActive())))
		{
			cell = overallRow.getCells().newCell(column, DynamicCellType.ENUMERATION);
			bindOverallValue(cell);
			cell.setValue(overall.getPrognosticGroup());
			cell.setReadOnly(false);
			cell.setAutoPostBack(true);
		}
		else
		{
    		cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
    		cell.setValue(overall.getPrognosticGroup().getText());
    		cell.setReadOnly(true);
		}

		// Set row background for inactive records
		if (!Boolean.TRUE.equals(overall.getIsActive()))
			overallRow.setBackColor(Color.Crimson);

		// Set overall record to row
		overallRow.setValue(overall);
	}


	/**
	 * <b>WDEV-12569</b>
	 * Function used to retrieve Overall Prognostic collection from screen
	 * @param setToBeConfigured - if set to <b>true</b>, function will replace <b>null</b> Prognostic Group values with <b>TOBECONFIGURED</b> (-2151)
	 * @param excludeSelectedRow - if set to <b>true</b>, function will not include selected row value into collection
	 *  
	 * @return Overall Prognostic records collection configured for Tumour Group
	 */
	private OverallPrognosticGroupingVoCollection populateOverallPrognosticFromScreen(boolean setToBeConfigured)
	{
		OverallPrognosticGroupingVoCollection overallPrognostic = new OverallPrognosticGroupingVoCollection();

		for (int i = 0; i < form.dyngrdOverall().getRows().size(); i++)
		{
			if (form.dyngrdOverall().getRows().get(i).getValue() instanceof OverallPrognosticGroupingVo)
			{
				OverallPrognosticGroupingVo prognostic = (OverallPrognosticGroupingVo) form.dyngrdOverall().getRows().get(i).getValue();
				
				if (setToBeConfigured && !prognostic.getPrognosticGroupIsNotNull())
					prognostic.setPrognosticGroup(PrognosticGroup.TOBECONFIGURED);
				
				overallPrognostic.add(prognostic);
			}
		}

		return overallPrognostic;
	}

	private void addDynamicGridRow(OverallPrognosticGroupingVo overall)
	{
		if (overall == null)
			return;

		// Create Overall VO to be added to dynamic grid
		OverallPrognosticGroupingVo tumourOverall = new OverallPrognosticGroupingVo();

		tumourOverall.setTGroup(overall.getTGroup());
		tumourOverall.setTSite(null);

		tumourOverall.setIsActive(Boolean.TRUE);

		// Get T TNM value
		tumourOverall.setTVal(overall.getTVal());
		// Get N TNM value
		tumourOverall.setNVal(overall.getNVal());
		// Get M TNM value
		tumourOverall.setMVal(overall.getMVal());

		// Get Histology Type
		tumourOverall.setHistVal(overall.getHistVal());
		// Get Histology Grade
		tumourOverall.setDiffVal(overall.getDiffVal());
		// Get Prognostic Location
		tumourOverall.setPrognosticLocationVal(overall.getPrognosticLocationVal());
		// Get Prognostic Risk
		tumourOverall.setPrognosticRiskVal(overall.getPrognosticRiskVal());
		// Get Prognostic PSA
		tumourOverall.setPrognosticPSAVal(overall.getPrognosticPSAVal());
		// Get Prognostic Gleason
		tumourOverall.setPrognosticGleasonVal(overall.getPrognosticGleasonVal());

		// Get Overall Staging
		tumourOverall.setPrognosticGroup(overall.getPrognosticGroup());

		addNewOverallStaging(tumourOverall);
	}

	private void generateDefaultRecords(TumourGroupVo tumourGroup)
	{
		// Check group parameter
		if (tumourGroup == null)
			return;

		// Check group prognostic settings
		if (!Boolean.TRUE.equals(tumourGroup.getIsPrognosticGroupingRelevant()) || !tumourGroup.getPrognosticGroupingConfigIsNotNull())
			return;

		// Separate T, N and M collection values
		TumourGroupSiteTNMValueListVoCollection TValues = new TumourGroupSiteTNMValueListVoCollection();
		TumourGroupSiteTNMValueListVoCollection NValues = new TumourGroupSiteTNMValueListVoCollection();
		TumourGroupSiteTNMValueListVoCollection MValues = new TumourGroupSiteTNMValueListVoCollection();

		if (tumourGroup.getTNMValuesIsNotNull())
		{
			for (TumourGroupSiteTNMValueListVo tumourGroupSiteTNM : tumourGroup.getTNMValues())
			{
				// WDEV-13259
				// Pathological T, N, M values are not used for OverallStaging so exclude them
				if (TNMClinicalpathological.PATHOLOGICALONLY.equals(tumourGroupSiteTNM.getClinicalPathological()))
					continue;
				
				if (!Boolean.TRUE.equals(tumourGroupSiteTNM.getIsActive()))
					continue;

				if (TNMType.T.equals(tumourGroupSiteTNM.getTNMType()))
				{
					TValues.add(tumourGroupSiteTNM);
					continue;
				}

				if (TNMType.N.equals(tumourGroupSiteTNM.getTNMType()))
				{
					NValues.add(tumourGroupSiteTNM);
					continue;
				}

				if (TNMType.M.equals(tumourGroupSiteTNM.getTNMType()))
				{
					MValues.add(tumourGroupSiteTNM);
				}
			}
		}

		// Get pointers to relevant collection
		TumourGroupHistologyVoCollection histopatologicType = tumourGroup.getHistologies();
		TumourGroupHistopathologyGradeVoCollection histopathologicGrades = tumourGroup.getHistopathologicGrades();
		PrognosticLocationConfigVoCollection location = tumourGroup.getPrognosticGroupingConfig().getLocation();
		PrognosticRiskConfigVoCollection risk = tumourGroup.getPrognosticGroupingConfig().getRisk();
		PSAConfigVoCollection psa = tumourGroup.getPrognosticGroupingConfig().getPSA();
		GleasonConfigLiteVoCollection gleason = tumourGroup.getPrognosticGroupingConfig().getGleason();

		int sizeT = 1;
		int sizeN = 1;
		int sizeM = 1;
		int sizeHistologyType = 1;
		int sizeHistologyGrade = 1;
		int sizeLocation = 1;
		int sizeRisk = 1;
		int sizePSA = 1;
		int sizeGleason = 1;

		// Get size for relevant collection (Put 1 where the collection is not to be considered)
		// Also perform validation (if a collection has no values and it is required)
		boolean requiredTValues = Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getUseTValues());
		boolean requiredNValues = Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getUseNValues());
		boolean requiredMValues = Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getUseMValues());
		boolean requiredHistologyType = Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getIsHistologicalTypePertinent());
		boolean requiredHistologyGrade = Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getIsHistologicalGradePertinent());
		boolean requiredLocation = Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getIsTumourLocationPertinent());
		boolean requiredRisk = Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getIsRiskCategoryPertinent());
		boolean requiredPSA = Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getIsPSAPertinent());
		boolean requiredGleason = Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getIsGleasonPertinent());

		if (requiredTValues)
		{
			if (TValues == null || TValues.size() == 0)
			{
				engine.showMessage("No T TNM values exist and they are required to create Overall Prognostic values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
				form.chkGenerate().setValue(false);
				return;
			}

			sizeT = TValues.size();
		}

		if (requiredNValues)
		{
			if (NValues == null || NValues.size() == 0)
			{
				engine.showMessage("No N TNM values exist and they are required to create Overall Prognostic values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
				form.chkGenerate().setValue(false);
				return;
			}

			sizeN = NValues.size();
		}

		if (requiredMValues)
		{
			if (MValues == null || MValues.size() == 0)
			{
				engine.showMessage("No M TNM values exist and they are required to create Overall Prognostic values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
				form.chkGenerate().setValue(false);
				return;
			}

			sizeM = MValues.size();
		}

		if (requiredHistologyType)
		{
			if (histopatologicType == null || histopatologicType.size() == 0)
			{
				engine.showMessage("No Histology Type values exist and they are required to create Overall Prognostic values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
				form.chkGenerate().setValue(false);
				return;
			}

			sizeHistologyType = histopatologicType.size();
		}

		if (requiredHistologyGrade)
		{
			if (histopathologicGrades == null || histopathologicGrades.size() == 0)
			{
				engine.showMessage("No Histology Grade values exist and they are required to create Overall Prognostic values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
				form.chkGenerate().setValue(false);
				return;
			}

			sizeHistologyGrade = histopathologicGrades.size();
		}

		if (requiredLocation)
		{
			if (location == null || location.size() == 0)
			{
				engine.showMessage("No Prognostic Location values exist and they are required to create Overall Prognostic values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
				form.chkGenerate().setValue(false);
				return;
			}

			sizeLocation = location.size();
		}

		if (requiredRisk)
		{
			if (risk == null || risk.size() == 0)
			{
				engine.showMessage("No Prognostic Risk values exist and they are required to create Overall Prognostic values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
				form.chkGenerate().setValue(false);
				return;
			}

			sizeRisk = risk.size();
		}

		if (requiredPSA)
		{
			if (psa == null || psa.size() == 0)
			{
				engine.showMessage("No Prognostic PSA values exist and they are required to create Overall Prognostic values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
				form.chkGenerate().setValue(false);
				return;
			}

			sizePSA = psa.size();
		}

		if (requiredGleason)
		{
			if (gleason == null || gleason.size() == 0)
			{
				engine.showMessage("No Prognostic Gleason values exist and they are required to create Overall Prognostic values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
				form.chkGenerate().setValue(false);
				return;
			}

			sizeGleason = gleason.size();
		}

		for (int indexTVal = 0; indexTVal < sizeT; indexTVal++)
			for (int indexNVal = 0; indexNVal < sizeN; indexNVal++)
				for (int indexMVal = 0; indexMVal < sizeM; indexMVal++)
					for (int indexHistologies = 0; indexHistologies < sizeHistologyType; indexHistologies++)
					{
						TumourGroupHistologyVo histologyType = null;
						if (requiredHistologyType && histopatologicType.size() > 0)
						{
							// Get histology type
							histologyType = histopatologicType.get(indexHistologies);

							// Skip for inactive histologyType
							if (!Boolean.TRUE.equals(histologyType.getIsActive()))
								continue;
						}

						for (int indexHistologyGrade = 0; indexHistologyGrade < sizeHistologyGrade; indexHistologyGrade++)
						{
							TumourGroupHistopathologyGradeVo histopathologicGrade = null;

							if (requiredHistologyGrade && histopathologicGrades.size() > 0)
							{
								// Get histology type
								histopathologicGrade = histopathologicGrades.get(indexHistologyGrade);

								// Skip for inactive histology grade
								if (!Boolean.TRUE.equals(histopathologicGrade.getIsActive()))
									continue;
							}

							for (int indexLocation = 0; indexLocation < sizeLocation; indexLocation++)
								for (int indexRisk = 0; indexRisk < sizeRisk; indexRisk++)
									for (int indexPSA = 0; indexPSA < sizePSA; indexPSA++)
										for (int indexGleason = 0; indexGleason < sizeGleason; indexGleason++)
										{
											addOverallPrognosticRow(requiredTValues ? TValues.get(indexTVal) : null, requiredNValues ? NValues.get(indexNVal) : null, requiredMValues ? MValues.get(indexMVal) : null, histologyType, histopathologicGrade, requiredLocation ? location.get(indexLocation) : null, requiredRisk ? risk.get(indexRisk) : null, requiredPSA ? psa.get(indexPSA) : null, requiredGleason ? gleason.get(indexGleason) : null);
										}
						}
					}
	}

	private void addOverallPrognosticRow(TumourGroupSiteTNMValueListVo valueT, TumourGroupSiteTNMValueListVo valueN, TumourGroupSiteTNMValueListVo valueM, TumourGroupHistologyVo histology, TumourGroupHistopathologyGradeVo histologyGrade, PrognosticLocationConfigVo location, PrognosticRiskConfigVo risk, PSAConfigVo psa, GleasonConfigLiteVo gleason)
	{
		// Create new row
		DynamicGridRow overallRow = form.dyngrdOverall().getRows().newRow();

		// Create overall value
		OverallPrognosticGroupingVo overall = new OverallPrognosticGroupingVo();

		// Create cell for T value
		if (Boolean.TRUE.equals(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig().getUseTValues()))
		{
			DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_T_VALUE);
			DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			cell.setValue(valueT != null ? valueT.getTNMValue() : "");
			cell.setReadOnly(true);
			overall.setTVal(valueT);
		}

		// Create cell for N value
		if (Boolean.TRUE.equals(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig().getUseNValues()))
		{
			DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_N_VALUE);
			DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			cell.setValue(valueN != null ? valueN.getTNMValue() : "");
			cell.setReadOnly(true);
			overall.setNVal(valueN);
		}

		// Create cell for M value
		if (Boolean.TRUE.equals(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig().getUseMValues()))
		{
			DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_M_VALUE);
			DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			cell.setValue(valueM != null ? valueM.getTNMValue() : "");
			cell.setReadOnly(true);
			overall.setMVal(valueM);
		}

		// Create cell for Histology Type value if needed
		if (Boolean.TRUE.equals(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig().getIsHistologicalTypePertinent()))
		{
			DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_HIST_TYPE);
			DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			cell.setReadOnly(true);

			if (histology != null)
			{
				cell.setValue(histology.getAssociatedHistology().getHistologyDescription());
				overall.setHistVal(histology);
			}
		}

		// Create cell for Histology Grade value if needed
		if (Boolean.TRUE.equals(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig().getIsHistologicalGradePertinent()))
		{
			DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_HIST_GRADE);
			DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			cell.setReadOnly(true);

			if (histologyGrade != null)
			{
				cell.setValue(histologyGrade.getTumourDifferentation().getGrade());
				overall.setDiffVal(histologyGrade);
			}
		}

		// Create cell for Prognostic Location value if needed
		if (Boolean.TRUE.equals(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig().getIsTumourLocationPertinent()))
		{
			DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_PROG_LOCATION);
			DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			cell.setReadOnly(true);

			if (location != null)
			{
				cell.setValue(location.getLocationName());
				overall.setPrognosticLocationVal(location);
			}
		}

		// Create cell for Prognostic Risk value if needed
		if (Boolean.TRUE.equals(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig().getIsRiskCategoryPertinent()))
		{
			DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_PROG_RISK);
			DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			cell.setReadOnly(true);

			if (risk != null)
			{
				cell.setValue(risk.getRiskName());
				overall.setPrognosticRiskVal(risk);
			}
		}

		// Create cell for Prognostic PSA value if needed
		if (Boolean.TRUE.equals(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig().getIsPSAPertinent()))
		{
			DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_PROG_PSA);
			DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			cell.setReadOnly(true);

			if (psa != null)
			{
				cell.setValue(psa.getPSAName());
				overall.setPrognosticPSAVal(psa);
			}
		}

		// Create cell for Prognostic Gleason value if needed
		if (Boolean.TRUE.equals(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig().getIsGleasonPertinent()))
		{
			DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_PROG_GLEASON);
			DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
			cell.setReadOnly(true);

			if (gleason != null)
			{
				cell.setValue(gleason.getGleasonName());
				overall.setPrognosticGleasonVal(gleason);
			}
		}

		DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_OVERALL);
		DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.ENUMERATION);
		cell.setAutoPostBack(true);

		bindOverallValue(cell);
		cell.setValue(LookupHelper.getTumourOverallStage(domain.getLookupService()));
		cell.setIdentifier(LookupHelper.getTumourOverallStage(domain.getLookupService()));

		overall.setIsActive(Boolean.TRUE);
		overall.setTGroup(form.getGlobalContext().ClinicalAdmin.getTumourGroup());
		overall.setTSite(null);

		overallRow.setValue(overall);
	}

	protected final void bindOverallValue(DynamicGridCell typeCell)
	{
		PrognosticGroupCollection lookupCollection = LookupHelper.getPrognosticGroup(domain.getLookupService());

		for (int x = 0; x < lookupCollection.size(); x++)
		{
			PrognosticGroup lookupValue = lookupCollection.get(x);
			
			// Replaced @deprecated method
			// typeCell.getItems().newItem(lookupCollection.get(x), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			typeCell.getItems().newItem(lookupValue, lookupValue.getText(), lookupValue.getImage(), lookupValue.getTextColor());
		}
	}
}
