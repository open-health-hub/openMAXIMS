//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.55 build 2722.20556)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.manchestertreatmentprotocoladmin;

import ims.assessment.vo.UserAssessmentShortVo;
import ims.assessment.vo.UserAssessmentShortVoCollection;
import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.clinicaladmin.forms.manchestertreatmentprotocoladmin.GenForm.grdListRow;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.ProblemTriageProtocolVo;
import ims.emergency.vo.ProblemTriageProtocolVoCollection;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.chkActive().setValue(true);
		
		open();
	}
	@Override
	protected void onChkActiveValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onGrdListSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnEdit().setEnabled(true);
		enableContextMenu();

		form.getLocalContext().setSelectedProblemProtocolAssessment(form.grdList().getSelectedRow().getValue());
	}

	@Override
	protected void onGrdListGridQueryComboBoxTextSubmited(int column, GenForm.grdListRow row, String text) throws ims.framework.exceptions.PresentationLogicException
	{
		if (column == 0)
		{
			try 
			{
				ClinicalProblemShortVoCollection listProbs = domain.listActiveProblems(text);
				
				row.getcolProblem().clear();
				for( int i = 0 ; i < listProbs.size() ; i++)
					row.getcolProblem().newRow(listProbs.get(i), listProbs.get(i).getPCName());
				
				if (listProbs.size() == 1)
					row.getcolProblem().setValue(listProbs.get(0));
				else if (listProbs.size() > 1)
					row.getcolProblem().showOpened();
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.toString());
			}
		}
		else
		{
			UserAssessmentShortVoCollection listAssessments = domain.listAssessments(text, null, UserDefinedAssessmentType.MANCHESTERTRIAGE);
			row.getcolAssessment().clear();
			for( int i = 0 ; i < listAssessments.size() ; i++)
				row.getcolAssessment().newRow(listAssessments.get(i), listAssessments.get(i).getName());
		
			if (listAssessments.size() == 1)
				row.getcolAssessment().setValue(listAssessments.get(0));
			else if (listAssessments.size() > 1)
				row.getcolAssessment().showOpened();
		}
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	private void newInstance() 
	{
		form.setMode(FormMode.EDIT);
		
		form.grdList().getRows().newRow(true);
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	private void updateInstance() 
	{
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setSelectedProblemProtocolAssessment(form.grdList().getSelectedRow().getValue());
	}

	private void enableContextMenu()
	{		
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().hideAllGenericGridMenuItems();

			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			if (form.grdList().getSelectedRow() != null)
			{
				form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
				form.getContextMenus().getGenericGridRemoveItem().setVisible(true);
				form.getContextMenus().getGenericGridRemoveItem().setText(form.grdList().getSelectedRow().getValue() != null && form.grdList().getSelectedRow().getValue().getIsActive() ? "Inactivate" : "Activate");
			}
		}
		else
			form.getContextMenus().hideAllGenericGridMenuItems();
		
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//Only allow one PTP for a Clinical Problem 
		if (form.getLocalContext().getSelectedProblemProtocolAssessment() == null)
		{
			if(domain.checkForConfiguredClinicalProblem((ClinicalProblemShortVo)form.grdList().getSelectedRow().getcolProblem().getValue()) == true)
			{
				engine.showMessage("There is already a saved protocol record for this Clinical Problem. Your record will not be saved.");
				return;
			}
			
			if(domain.checkForConfiguredAssessment((UserAssessmentShortVo) form.grdList().getSelectedRow().getcolAssessment().getValue()) == true)
			{
				engine.showMessage("There is already a saved protocol record for this Assessment. Your record will not be saved.");
				return;
			}
		}
		
		if(save())
		{
			form.setMode(FormMode.VIEW);
			open();
		}
	}
	
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdList().getRows().clear();
		
		ProblemTriageProtocolVoCollection collPTP = domain.listProblemTriageProtocols(form.chkActive().getValue());
		for(int i = 0 ; collPTP != null && i < collPTP.size() ; i++)
		{
			grdListRow row = form.grdList().getRows().newRow();
			row.getcolProblem().newRow(collPTP.get(i).getProblem(), collPTP.get(i).getProblem().getPCName());
			row.getcolProblem().setValue(collPTP.get(i).getProblem());
			row.getcolAssessment().newRow(collPTP.get(i).getTriageProtocol(), collPTP.get(i).getTriageProtocol().getName());
			row.getcolAssessment().setValue(collPTP.get(i).getTriageProtocol());
			row.setValue(collPTP.get(i));
			
			if ( ! collPTP.get(i).getIsActive().booleanValue())
				row.setBackColor(Color.RosyBrown);
		}
		
		enableEditButton();
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		ProblemTriageProtocolVo voPTP = form.getLocalContext().getSelectedProblemProtocolAssessment();
		if(voPTP == null)
			voPTP = new ProblemTriageProtocolVo();
		
		voPTP.setProblem((ClinicalProblemShortVo)form.grdList().getSelectedRow().getcolProblem().getValue());
		voPTP.setTriageProtocol((UserAssessmentShortVo) form.grdList().getSelectedRow().getcolAssessment().getValue());
		voPTP.setIsActive(Boolean.TRUE);
		
		String[] errs = voPTP.validate();
		if(errs != null)
		{
			engine.showErrors(errs);
			return false;
		}
		
		try
		{
			voPTP = domain.saveProblemTriageProtocol(voPTP);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
				newInstance();
			break;
			case GenForm.ContextMenus.GenericGrid.Update :
				updateInstance();
			break;
			case GenForm.ContextMenus.GenericGrid.Remove :
				activateInstance();
			break;
		}
	
	}

	private void activateInstance() throws PresentationLogicException 
	{
		ProblemTriageProtocolVo voPTP = form.getLocalContext().getSelectedProblemProtocolAssessment();
		if(voPTP == null)
			voPTP = new ProblemTriageProtocolVo();
		
		voPTP.setProblem((ClinicalProblemShortVo)form.grdList().getSelectedRow().getcolProblem().getValue());
		voPTP.setTriageProtocol((UserAssessmentShortVo) form.grdList().getSelectedRow().getcolAssessment().getValue());
		
		voPTP.setIsActive(! voPTP.getIsActive());
		
		String[] errs = voPTP.validate();
		if(errs != null)
		{
			engine.showErrors(errs);
			return;
		}
		
		try
		{
			voPTP = domain.saveProblemTriageProtocol(voPTP);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		open();
	}

	protected void onFormModeChanged() 
	{
		enableEditButton();
		
		enableContextMenu();
	}

	private void enableEditButton()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setEnabled(false);
			form.btnEdit().setVisible(true);
		}
	}
}
