//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.55 build 2741.25619)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.tumouroverallstaging;

import ims.clinicaladmin.vo.SelectedRecordForOverallStagingDialogVo;
import ims.clinicaladmin.vo.TumourGroupHistologyVo;
import ims.clinicaladmin.vo.TumourGroupHistologyVoCollection;
import ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo;
import ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVoCollection;
import ims.clinicaladmin.vo.TumourGroupSiteForOverallStagingDialogVo;
import ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo;
import ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo;
import ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVoCollection;
import ims.clinicaladmin.vo.TumourSerumMarkersLiteVo;
import ims.clinicaladmin.vo.TumourSerumMarkersLiteVoCollection;
import ims.clinicaladmin.vo.TumourSiteVo;
import ims.core.vo.lookups.YesNo;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.configuration.vo.TumourGroupRefVo;
import ims.oncology.configuration.vo.TumourSiteRefVo;
import ims.oncology.vo.lookups.TNMClinicalpathological;
import ims.oncology.vo.lookups.TNMType;
import ims.vo.ValueObjectRef;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers region
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getGlobalContext().Oncology.getSelectedRecordForOverallDialogIsNotNull())
		{
			ValueObjectRef voSiteRef  = form.getGlobalContext().Oncology.getSelectedRecordForOverallDialog().getSelectedSiteRecord();
			ValueObjectRef voGroupRef = form.getGlobalContext().Oncology.getSelectedRecordForOverallDialog().getSelectedGroupRecord();
			TumourGroupSiteForOverallStagingDialogVo voGroup = domain.getGroupForOverallStaging((TumourGroupRefVo)voGroupRef);
			
			// WDEV-13091
			// This check theoretically should not fail, but
			if (voGroup == null)
				throw new PresentationLogicException("Minimal context for form is not met");
			
			form.getLocalContext().setSelectedGroup(null);
			if (voGroup != null)
				form.getLocalContext().setSelectedGroup(voGroup);
			
			//if dialog is open from Group
			if (voSiteRef == null)
			{
				populateComboBoxes(voGroup, null, voGroup.getTNMValues());
			}
			//if dialog is open from Site
			else
			{
				TumourGroupSiteTNMValueListVoCollection voCollTNM = domain.getTNMValueForSite((TumourSiteRefVo)voSiteRef);
				
				TumourSiteVo voSite = domain.getSiteVo((TumourSiteRefVo)voSiteRef);
				form.getLocalContext().setSelectedSite(null);
				if (voSite != null)
					form.getLocalContext().setSelectedSite(voSite);
				
				populateComboBoxes(voGroup, voSite, voCollTNM);
			}
		} 
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if ( ! checkMandatoryValues() )
			return;
		
		populateDataFromScreen(new SelectedRecordForOverallStagingDialogVo());
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Oncology.setSelectedRecordForOverallDialog(null);
		engine.close(DialogResult.CANCEL);
	}

	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation function
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	private void populateComboBoxes(TumourGroupSiteForOverallStagingDialogVo voGroup, TumourSiteVo voSite, TumourGroupSiteTNMValueListVoCollection voCollTNM) 
	{
		populateTNMCmbs(voCollTNM);
		
		// WDEV-13091
		// Theoretically this check should never fail as the form can not function without a TumourGroup, but just in case
		if (voGroup == null)
			return;
		
		// WDEV-11684
		TumourGroupHistologyVoCollection voCollHistology = voGroup.getHistologies();
		TumourGroupHistopathologyGradeVoCollection voCollDifferentiation = voGroup.getHistopathologicGrades();
		TumourSerumMarkersLiteVoCollection voCollSerumMarkers = voGroup.getSerumMarkers();

		
		form.cmbHistology().clear();
		form.cmbHistology().setEnabled(false);
		form.cmbDifferentation().clear();
		form.cmbDifferentation().setEnabled(false);
		form.cmbSerumMarker().clear();
		form.cmbSerumMarker().setEnabled(false);
//		form.cmbOverall45().clear();
		form.cmbOverall45().setEnabled(false);

			
		// WDEV-13091
		// Histology Type, Histology Grade, Serum Marker, Over45 are not required for Overall Staging configuration at TumourSite level
		// and should never be displayed when configuring an OverallStaging record for a TumourSite
		if (voSite == null)
		{
			if (voGroup != null && Boolean.TRUE.equals(voGroup.getTnmRequiresHisto()))
			{
				form.cmbHistology().clear();
				form.cmbHistology().setEnabled(true);

				for (int i = 0; i < voCollHistology.size(); i++)
				{
					// Get Histology Type record
					TumourGroupHistologyVo histology = voCollHistology.get(i);
					// Populate combobox with active Histology Type records only
					if (Boolean.TRUE.equals(histology.getIsActive()))
					{
						form.cmbHistology().newRow(histology, histology.getAssociatedHistology().getHistologyDescription());
					}
				}
			}

			if (voGroup != null && Boolean.TRUE.equals(voGroup.getTnmRequiresDiff()))
			{
				form.cmbDifferentation().setEnabled(true);
				form.cmbDifferentation().clear();
				
				for (int i = 0; i < voCollDifferentiation.size(); i++) 
				{
					// Get histopathology grade record
					TumourGroupHistopathologyGradeVo histopathologyGrade = voCollDifferentiation.get(i);
					// Populate combobox with active Histopathology Grade records only
					if (Boolean.TRUE.equals(histopathologyGrade.getIsActive()))
					{
						form.cmbDifferentation().newRow(histopathologyGrade, histopathologyGrade.getTumourDifferentation().getTumourDifferentation());
					}
				}
			}

			if (voGroup != null && Boolean.TRUE.equals(voGroup.getTnmRequiresSMarkers()))
			{
				form.cmbSerumMarker().setEnabled(true);
				form.cmbSerumMarker().clear();
				
				for (int i = 0; i < voCollSerumMarkers.size(); i++) 
				{
					// Get serum marker record
					TumourSerumMarkersLiteVo serumMarker = voCollSerumMarkers.get(i);
					// Populate combobox with active Serum Markers records only
					if (Boolean.TRUE.equals(serumMarker.getIsActive()))
					{
						form.cmbSerumMarker().newRow(serumMarker, serumMarker.getSerumMarkerValue());
					}
				}
			}

			if (voGroup != null && Boolean.TRUE.equals(voGroup.getTnmRequiresOver45()))
			{
				form.cmbOverall45().setEnabled(true);
			}
			else
			{
				form.cmbOverall45().setEnabled(false);
			}
		}
	}
	
	private void populateTNMCmbs(TumourGroupSiteTNMValueListVoCollection voCollTNM) 
	{	
		TumourGroupSiteTNMValueListVoCollection voTNMTypeT = new TumourGroupSiteTNMValueListVoCollection(); 
		TumourGroupSiteTNMValueListVoCollection voTNMTypeN = new TumourGroupSiteTNMValueListVoCollection();
		TumourGroupSiteTNMValueListVoCollection voTNMTypeM = new TumourGroupSiteTNMValueListVoCollection();
		
		for (int i = 0; i < voCollTNM.size(); i++) 
		{
			// WDEV-13259
			// Pathological T, N, M values are not used for OverallStaging so exclude them
			if (TNMClinicalpathological.PATHOLOGICALONLY.equals(voCollTNM.get(i).getClinicalPathological()))
				continue;
			
			if (voCollTNM.get(i).getTNMType().equals(TNMType.T) && voCollTNM.get(i).getIsActive())
				voTNMTypeT.add(voCollTNM.get(i));
			else if (voCollTNM.get(i).getTNMType().equals(TNMType.N) && voCollTNM.get(i).getIsActive())
				voTNMTypeN.add(voCollTNM.get(i));
			else if (voCollTNM.get(i).getTNMType().equals(TNMType.M) && voCollTNM.get(i).getIsActive())
				voTNMTypeM.add(voCollTNM.get(i));
		}
		
		form.cmbTValue().clear();
		for (int i = 0; i < voTNMTypeT.size(); i++) 
		{
			form.cmbTValue().newRow(voTNMTypeT.get(i), voTNMTypeT.get(i).getTNMValue());
		}
		form.cmbNValue().clear();
		for (int j = 0; j < voTNMTypeN.size(); j++) 
		{
			form.cmbNValue().newRow(voTNMTypeN.get(j), voTNMTypeN.get(j).getTNMValue());
		}
		form.cmbMValue().clear();
		for (int i = 0; i < voTNMTypeM.size(); i++) 
		{
			form.cmbMValue().newRow(voTNMTypeM.get(i), voTNMTypeM.get(i).getTNMValue());
		}
	}
	
	private boolean checkMandatoryValues() 
	{
		StringBuffer sb = new StringBuffer();
		
		if (form.cmbTValue().getValue() == null ||
			form.cmbNValue().getValue() == null ||
			form.cmbMValue().getValue() == null ||
			form.cmbOverall().getValue() == null)
			sb.append("Please select a value for all T/N/M and Overall mandatory items.\n\n");
		
		TumourGroupSiteForOverallStagingDialogVo voGroup = form.getLocalContext().getSelectedGroup();
		TumourSiteVo voSite = form.getLocalContext().getSelectedSite();

		
		// WDEV-13091
		// Check Histology Type, Histology Grade, Serum Marker and Over 45 values only if
		// Overall Staging record is recorded at TumourGroup level (skip this check for TumourSite level)
		if (voSite == null && voGroup != null)
		{
			if (Boolean.TRUE.equals(voGroup.getTnmRequiresHisto()) && form.cmbHistology().getValue() == null)
			{
				sb.append("Please select a value for Histology, it is marked as required for this Tumour Group.\n\n");
			}

			if (Boolean.TRUE.equals(voGroup.getTnmRequiresDiff()) && form.cmbDifferentation().getValue() == null)
			{
				sb.append("Please select a value for Histology Grade, it is marked as required for this Tumour Group.\n\n");
			}

			if (Boolean.TRUE.equals(voGroup.getTnmRequiresOver45()) && form.cmbOverall45().getValue() == null)
			{
				sb.append("Please select a value for Over 45, it is marked as required for this Tumour Group.\n\n");
			}

			if (Boolean.TRUE.equals(voGroup.getTnmRequiresSMarkers()) && form.cmbSerumMarker().getValue() == null)
			{
				sb.append("Please select a value for Serum Marker, it is marked as required for this Tumour Group.\n\n");
			}
		}
		
		if (sb.length() > 0)
		{
			engine.showMessage(sb.toString(), "Warning", MessageButtons.OK, MessageIcon.WARNING);
			return false;
		}

		return true;
	}
	
	
	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange functions
	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * 
	 */
	private void populateDataFromScreen(SelectedRecordForOverallStagingDialogVo record) 
	{
		TumourGroupSiteTNMValueListVoCollection voCollTNM = new TumourGroupSiteTNMValueListVoCollection();
		
		voCollTNM.add(form.cmbTValue().getValue());
		voCollTNM.add(form.cmbNValue().getValue());
		voCollTNM.add(form.cmbMValue().getValue());
		record.setTNMValues(voCollTNM);

		// WDEV-13091
		// If no site selected - the Overall Staging is recorded at Tumour Group level and then
		// the Histology Type, Histology Grade, Serum Marker and Over 45 values need to be populated
		if (!form.getLocalContext().getSelectedSiteIsNotNull())
		{
			if (form.cmbHistology().getValue() != null)
				record.setHistologyValue(form.cmbHistology().getValue());

			if (form.cmbDifferentation().getValue() != null)
				record.setDifferentationValue(form.cmbDifferentation().getValue());

			if (form.cmbOverall45().getValue() != null)
			{
				if (form.cmbOverall45().getValue().equals(YesNo.YES))
					record.setOver45(Boolean.TRUE);
				else
					record.setOver45(Boolean.FALSE);
			}

			if (form.cmbSerumMarker().getValue() != null)
				record.setSerumMarker(form.cmbSerumMarker().getValue());
		}
		
		if (form.cmbOverall().getValue() != null)
			record.setOverallValue(form.cmbOverall().getValue());
		
		if(checkIfIsUnique(record))
		{
			form.getGlobalContext().Oncology.setSelectedRecordForOverallDialog(record);
			engine.close(DialogResult.OK);
		}
		else
			engine.showMessage("An active overall stage already exists for this combination", "Warning", MessageButtons.OK, MessageIcon.WARNING);
		
	}
	
	/**
	 * Function that will check if the combination is unique (has not been recorded or at least is not active)
	 * Re-written in WDEV-12152
	 */
	private boolean checkIfIsUnique(SelectedRecordForOverallStagingDialogVo record) 
	{
		if (!form.getGlobalContext().Oncology.getOverallStagingDynamicGridCollectionIsNotNull())
			return true;
		
		TumourGroupSiteForOverallStagingDialogVo tumourGroup = form.getLocalContext().getSelectedGroup();
		TumourSiteVo tumourSite = form.getLocalContext().getSelectedSite();
		
		// WDEV-13091
		// Histology Type, Histology Grade, Serum Marker and Over 45 are required only for Overall Staging recorded at Tumour Group level
		// They should be ignored for Overall Staging records at Tumour Site level
		boolean requiredHistologyType = Boolean.TRUE.equals(tumourGroup.getTnmRequiresHisto()) && tumourSite == null;
		boolean requiredHistologyGrade = Boolean.TRUE.equals(tumourGroup.getTnmRequiresDiff()) && tumourSite == null;
		boolean requiredSerumMarker = Boolean.TRUE.equals(tumourGroup.getTnmRequiresSMarkers() && tumourSite == null);
		boolean requiredOver45 = Boolean.TRUE.equals(tumourGroup.getTnmRequiresOver45()) && tumourSite == null;
		
		for (TumourGroupSiteOverallStagingVo overallStaging : form.getGlobalContext().Oncology.getOverallStagingDynamicGridCollection())
		{
			if (!Boolean.TRUE.equals(overallStaging.getIsActive()))
				continue;
			
			boolean matchTVal = false;
			boolean matchNVal = false;
			boolean matchMVal = false;
			boolean matchHistologyType = false;
			boolean matchHistologyGrade = false;
			boolean matchSerumMarker = false;
			boolean matchOver45 = false;
			
			for (TumourGroupSiteTNMValueListVo valueTNM : record.getTNMValues())
			{
				if (TNMType.T.equals(valueTNM.getTNMType()) && overallStaging.getTVal() != null && overallStaging.getTVal().equals(valueTNM))	//wdev-13091
					matchTVal = true;
				
				if (TNMType.N.equals(valueTNM.getTNMType()) && overallStaging.getNVal() != null && overallStaging.getNVal().equals(valueTNM))	//wdev-13091
					matchNVal = true;
				
				if (TNMType.M.equals(valueTNM.getTNMType()) && overallStaging.getMVal() != null && overallStaging.getMVal().equals(valueTNM))	//wdev-13091
					matchMVal = true;
			}
			
			if (requiredHistologyType && overallStaging.getHistVal() != null && overallStaging.getHistVal().equals(record.getHistologyValue()))	//wdev-13091
				matchHistologyType = true;
			
			if (requiredHistologyGrade && overallStaging.getDiffVal() != null && overallStaging.getDiffVal().equals(record.getDifferentationValue())) //wdev-13091
				matchHistologyGrade = true;
			
			if (requiredSerumMarker && overallStaging.getSerumMarkerVal() != null && overallStaging.getSerumMarkerVal().equals(record.getSerumMarker()))  //wdev-13091
				matchSerumMarker = true;
			
			if (requiredOver45)			// This is because someone never heard of Boolean and uses string "Y" or "N" :))
			{							// And it's too much of a hassle to change it - maybe someday
				if (overallStaging.getO45() != null && overallStaging.getO45().toUpperCase().equals("Y") && Boolean.TRUE.equals(record.getOver45()))   //wdev-13091
					matchOver45 = true;
				
				if (overallStaging.getO45() != null && overallStaging.getO45().toUpperCase().equals("N") && Boolean.FALSE.equals(record.getOver45()))	//wdev-13091
					matchOver45 = true;
			}
			
			if (matchTVal && matchNVal && matchMVal && (requiredHistologyType ? matchHistologyType : true)
					&& (requiredHistologyGrade ? matchHistologyGrade : true) && (requiredSerumMarker ? matchSerumMarker : true)
					&& (requiredOver45 ? matchOver45 : true))
				return false;
		}
		
		return true;
	}
}
