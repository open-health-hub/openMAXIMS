//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Margaret Mc Carthy using IMS Development Environment (version 1.53 build 2615.25234)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.hotlistdialog;

import ims.clinicaladmin.forms.hotlistdialog.GenForm.grdHotlistsRow;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	private void open() 
	{
		populateListControl();
		checkPresentSpecialties();
	}

	/**
	 * Lists all the specialties lookups in the grid. set row values to the relevant specialty. 
	 * @param void
	 * @return void
	 */
	private void populateListControl() 
	{
		form.grdHotlists().getRows().clear();
			
		SpecialtyCollection lkpCollSpecialties = LookupHelper.getSpecialty(domain.getLookupService());
		if (lkpCollSpecialties != null)
		{
			for (int x=0; x < lkpCollSpecialties.size(); x++)
			{
				grdHotlistsRow row = form.grdHotlists().getRows().newRow();
				row.setColumnHotlist(lkpCollSpecialties.get(x).getText());
				row.setValue(lkpCollSpecialties.get(x));
			}
		}
	}
	
	/**
	 * Loops through the global context specialties and ticks the relevant present checkboxes in the grid.
	 * @param void
	 * @return void
	 */
	private void checkPresentSpecialties() 
	{
		if (form.getGlobalContext().Core.getSpecialtiesIsNotNull())
		{
			form.getLocalContext().setSavedButInactiveLookups(new SpecialtyCollection());

			// for each global context specialty, check the relevant box in the grid. 
			SpecialtyCollection voCollSpecialties = form.getGlobalContext().Core.getSpecialties();
			
			for ( int i = 0; i < voCollSpecialties.size(); i++ )
			{
				if ( ! voCollSpecialties.get(i).isActive())
					form.getLocalContext().getSavedButInactiveLookups().add(voCollSpecialties.get(i));
				
				for (int j = 0; j < form.grdHotlists().getRows().size(); j++ )
				{
					if ( form.grdHotlists().getRows().get(j).getValue().equals(voCollSpecialties.get(i)))
					{
						form.grdHotlists().getRows().get(j).setColumnPresent(true);
					}
				}
			}
		}
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateGlobalContext();
		engine.close(DialogResult.OK);
	}
	
	/**
	 * Creates a collection of specialties from the grid and updates the global context. 
	 * @param void
	 * @return boolean
	 */
	private void updateGlobalContext() 
	{
		SpecialtyCollection voCollSpecialties = new SpecialtyCollection();
		
		for ( int i = 0; i < form.grdHotlists().getRows().size(); i++ )
		{
			if ( form.grdHotlists().getRows().get(i).getColumnPresent() )
			{
				voCollSpecialties.add(form.grdHotlists().getRows().get(i).getValue());
			}
		}
		
		for (int j = 0 ; form.getLocalContext().getSavedButInactiveLookups() != null && j < form.getLocalContext().getSavedButInactiveLookups().size() ; j++)
			voCollSpecialties.add(form.getLocalContext().getSavedButInactiveLookups().get(j));

		form.getGlobalContext().Core.setSpecialties(voCollSpecialties);
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
