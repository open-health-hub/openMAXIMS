//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.45 build 2265.41281)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.muscleareagroupsmuscles;

import ims.clinicaladmin.forms.muscleareagroupsmuscles.GenForm.lyrTabsLayer.tabMuscleSelectionContainer.grdSearchMusclesRow;
import ims.clinicaladmin.vo.MotorAreaVo;
import ims.clinicaladmin.vo.MotorAreaVoCollection;
import ims.clinicaladmin.vo.MuscleGroupMuscleVo;
import ims.clinicaladmin.vo.MuscleGroupMuscleVoCollection;
import ims.clinicaladmin.vo.MuscleGroupsVo;
import ims.clinicaladmin.vo.MuscleGroupsVoCollection;
import ims.clinicaladmin.vo.MuscleVo;
import ims.clinicaladmin.vo.MuscleVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.VertebrallevelVo;
import ims.core.vo.VertebrallevelVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.therapies.vo.MuscleRefVo;
import ims.therapies.vo.MuscleRefVoCollection;

public class Logic extends BaseLogic
{
	private static final String FILTER_ALL 		= "-1";
	private static final String FILTER_MUSCLE	= "-2";
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		populateFilterCombo();
		open();
		form.getLocalContext().setVertebrallevelCollection(domain.listVertebralLevels());
	}
	
	private void open()
	{	
		if (form.cmbFilter().getValue() != null)
		{
			if (form.cmbFilter().getValue().equals(FILTER_ALL))
			{
				listAreas();
				form.grdMotorArea().setColAreasCaption("Motor Area/Muscle Groups/Muscles");
			}
			if (form.cmbFilter().getValue().equals(FILTER_MUSCLE))
			{
				listAllMuscle();	
				form.grdMotorArea().setColAreasCaption("Muscles");
			}
		}
		
		//reSelectSavedItem();
	
		if (form.grdMotorArea().getSelectedRowIndex() >= 0)
		{
			Object gridObjectSelected = form.grdMotorArea().getSelectedRow().getValue();
			if (gridObjectSelected instanceof MuscleVo)
				onSelectMuscle();

			if (gridObjectSelected instanceof MotorAreaVo)
				onSelectArea();
		
			if (gridObjectSelected instanceof MuscleGroupsVo)
				onSelectGroup();
		}
		
		//form.grdMotorArea().setValue(null);
		enableContextMenu();
		
		form.setMode(FormMode.VIEW);
	}
	
	private void listAreas()
	{
		MotorAreaVoCollection collArea = domain.listMotorAreas();
		
		form.grdMotorArea().getRows().clear();
		clearControls();		
		for(int i = 0 ; i < collArea.size() ; i++)
		{
			MotorAreaVo areaVo = collArea.get(i);
			
			if (areaVo.getIsActiveIsNotNull() && areaVo.getIsActive().booleanValue())
			{
				GenForm.grdMotorAreaRow rowArea = form.grdMotorArea().getRows().newRow();
				rowArea.setValue(areaVo);
				rowArea.setColAreas(areaVo.getName());
				
				rowArea.setCollapsedImage(form.getImages().Core.ExpandAll);
				rowArea.setExpandedImage(form.getImages().Core.ExpandAll);
				
				if (areaVo.getMuscleGroupsIsNotNull())
				{
					for(int j = 0 ; j < areaVo.getMuscleGroups().size() ; j++)
					{
						MuscleGroupsVo groupVo = areaVo.getMuscleGroups().get(j);
						if (groupVo.getIsActive().booleanValue())
						{
							GenForm.grdMotorAreaRow rowGroup = rowArea.getRows().newRow();
							rowGroup.setValue(groupVo);
							rowGroup.setColAreas(groupVo.getName());
							
							rowGroup.setCollapsedImage(form.getImages().Core.BlueSquare);
							rowGroup.setCollapsedImage(form.getImages().Core.BlueSquare);
							
							groupVo = domain.getMuscles(groupVo);
							
							if (groupVo.getMuscleGroupMuscleIsNotNull())
							{
								for(int k = 0 ; k < groupVo.getMuscleGroupMuscle().size() ; k++)
								{
									MuscleVo muscleVo = groupVo.getMuscleGroupMuscle().get(k).getMuscle();
									
									if (muscleVo.getIsActive().booleanValue())
									{
										GenForm.grdMotorAreaRow rowMuscle = rowGroup.getRows().newRow();
										rowMuscle.setValue(muscleVo);
										rowMuscle.setColAreas(muscleVo.getName());
											
										rowMuscle.setCollapsedImage(form.getImages().Core.RedSqaure);
										rowMuscle.setCollapsedImage(form.getImages().Core.RedSqaure);
									}
								}
							}
							rowGroup.setExpanded(true);
						}
					}
				}
				rowArea.setExpanded(true);
			}
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
		}
		else
		{
			form.lyrTabs().tabMuscleSelection().btnAddList().setVisible(true);
			form.lyrTabs().tabMuscleSelection().btnAddList().setEnabled(selectedMuscles());
		}
		
		enableContextMenu();
	}

	private boolean selectedMuscles()
	{
		for (int i = 0; i < form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().size(); i++)
		{
			grdSearchMusclesRow row = form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(i);
			
			if (row.getColSelect())
			{
				return true;
			}
		}
		
		return false;
	}

	protected void onBtnCancelAreaClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onBtnSaveAreaClick() throws ims.framework.exceptions.PresentationLogicException
	{
		MotorAreaVo motorareaVo = new MotorAreaVo();
		motorareaVo = form.getLocalContext().getSelectedMotorArea();
		
		motorareaVo.setName(form.lyrTabs().tabMotorArea().txtAreaName().getValue());
		motorareaVo.setDescription(form.lyrTabs().tabMotorArea().txtAreaDesc().getValue());
		motorareaVo.setIsActive(new Boolean(form.lyrTabs().tabMotorArea().chkAreaActive().getValue()));

		saveMotorArea(motorareaVo);
	}

	protected void onBtnCancelGroupClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onBtnSaveGroupClick() throws ims.framework.exceptions.PresentationLogicException
	{
		MotorAreaVo motorareaVo = form.getLocalContext().getSelectedMotorArea();
		if (motorareaVo == null)
			motorareaVo = new MotorAreaVo();

		MuscleGroupsVo muscleGroupsVo = form.getLocalContext().getSelectedMuscleGroup();
		if (muscleGroupsVo == null)
			muscleGroupsVo = new MuscleGroupsVo();
		
		muscleGroupsVo.setName(form.lyrTabs().tabMuscleGroup().txtGroupName().getValue());
		muscleGroupsVo.setDescription(form.lyrTabs().tabMuscleGroup().txtGroupDesc().getValue());
		muscleGroupsVo.setIsActive(new Boolean(form.lyrTabs().tabMuscleGroup().chkGroupActive().getValue()));
		
		// Validate MuscleGroup VO
		String[] errors = muscleGroupsVo.validate();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		if(motorareaVo.getMuscleGroups() == null)
			motorareaVo.setMuscleGroups(new MuscleGroupsVoCollection());
		
		if ( !motorareaVo.getMuscleGroups().contains(muscleGroupsVo)) 
			motorareaVo.getMuscleGroups().add(muscleGroupsVo);
		
		if (!muscleGroupsVo.getIsActive().booleanValue())
			motorareaVo.getMuscleGroups().remove(muscleGroupsVo);
		
		saveMotorArea(motorareaVo);
	}
	
	private void saveMotorArea(MotorAreaVo motorareaVo)
	{
		String[] errors = motorareaVo.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}

		try
		{
			motorareaVo = domain.saveMotorArea(motorareaVo);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		form.getLocalContext().setSelectedMotorArea(motorareaVo);
		
		open();
	}
	
	protected void onBtnCancelMusclesClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSelectionTab();
		if (form.grdMotorArea().getSelectedRowIndex() > 0)
		{
			Object gridObjectSelected = form.grdMotorArea().getSelectedRow().getValue();
			if (gridObjectSelected instanceof MuscleVo)
				onSelectMuscle();

			if (gridObjectSelected instanceof MotorAreaVo)
				onSelectArea();
		
			if (gridObjectSelected instanceof MuscleGroupsVo)
				onSelectGroup();
		}

		form.setMode(FormMode.VIEW);
		enableContextMenu();
	}
	
	protected void onBtnSaveMusclesClick() throws ims.framework.exceptions.PresentationLogicException
	{

		if (form.getLocalContext().getSelectedMotorArea() == null)
			return;
		
		if (form.getLocalContext().getSelectedMuscleGroup() == null)
			return;
		
		
		MotorAreaVo motorAreaVo = form.getLocalContext().getSelectedMotorArea();		
		MuscleGroupsVo muscleGroupsVo = form.getLocalContext().getSelectedMuscleGroup();

		MuscleGroupMuscleVoCollection voCollMuscleGroupAssociations = muscleGroupsVo.getMuscleGroupMuscle();
		if (voCollMuscleGroupAssociations == null)			
			voCollMuscleGroupAssociations =  new MuscleGroupMuscleVoCollection();		
		
		for (int i = 0 ; i < form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().size() ; i++)
		{
			if(form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().get(i).getValue().getIsActive().booleanValue())
			{
				// WDEV-1413 Elimiate duplicate muscles within the group before appending to the collection of associations. 
				if (muscleInGroup(voCollMuscleGroupAssociations, form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().get(i).getValue()))
					continue;
				
				MuscleGroupMuscleVo voMuscleGroupMuscle = new MuscleGroupMuscleVo();
				voMuscleGroupMuscle.setMuslceGroup(form.getLocalContext().getSelectedMuscleGroup()); 
				voMuscleGroupMuscle.setMuscle(form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().get(i).getValue());
				voCollMuscleGroupAssociations.add(voMuscleGroupMuscle);
			}
			//if ( (!muscleGroupsVo.getMuscleCollection().contains(form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().get(i).getValue()))
			//	&& (form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().get(i).getValue().getIsActive().booleanValue()) )
			//	muscleGroupsVo.getMuscleCollection().add(form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().get(i).getValue());		
		}
		muscleGroupsVo.setMuscleGroupMuscle(voCollMuscleGroupAssociations);
		motorAreaVo.getMuscleGroups().set(motorAreaVo.getMuscleGroups().indexOf(muscleGroupsVo), muscleGroupsVo);
		
		saveMotorArea(motorAreaVo);
		
		clearSelectionTab();
		enableContextMenu();
		setSelectedGroup();
		form.setMode(FormMode.VIEW);		
	}
	
	private boolean muscleInGroup(MuscleGroupMuscleVoCollection voCollMuscleGroupLookups, MuscleVo voMuscle)
	{
		if (voMuscle == null)
			return false;
	
		if (voCollMuscleGroupLookups == null || voCollMuscleGroupLookups.size() == 0)
			return false;
		
		boolean bFound = false;
		for (int i=0; i < voCollMuscleGroupLookups.size(); i++)
		{
			if (voCollMuscleGroupLookups.get(i).getMuscle().equals(voMuscle))
			{
				bFound = true;
				break;
			}
		}
		
		return bFound;
	}

	protected void onBtnDeSelectAllClick() throws ims.framework.exceptions.PresentationLogicException
	{
		for( int i = 0 ; i < form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().size() ; i++)
		{
			GenForm.lyrTabsLayer.tabMuscleSelectionContainer.grdSearchMusclesRow row = form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(i);
			row.setColSelect(false);
		}
		
		updateControlsState();
	}
	
	protected void onBtnAddListClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getLinkCollectionIsNotNull())
		{
			MuscleRefVoCollection coll = form.getLocalContext().getLinkCollection();
			boolean flag = false;
			
			/*for (int i = 0; i < coll.size(); i++)
			{
				flag = false;
				for( int j = 0 ; j < form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().size() ; j++)
				{
					boolean equals = form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(j).getValue().getID_Muscle().equals(coll.get(i).getID_Muscle());
					boolean select = form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(j).getColSelect();
					
					if (select && equals)
					{
						flag = true;
						break;
					}
				}
				if(flag)
					break;
			}
						
			if (flag == false)
			{
				for (int i = 0; i < coll.size(); i++)
				{
					for( int j = 0 ; j < form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().size() ; j++)
					{
						if (form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(j).getColSelect())
						{
							GenForm.lyrTabsLayer.tabMuscleSelectionContainer.grdSelectedListRow row = form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().newRow();
							row.setValue(form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(j).getValue());
							row.setMuscName(form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(j).getValue().getName());
						
							addToColl(coll, i);
						}
					}
				}
			}*/
			//-------------------------------------------------------------------------------------------------
			int dim = coll.size();
			
			
				for( int j = 0 ; j < form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().size() ; j++)
				{
					if (form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(j).getColSelect())
					{
						for (int i = 0; i < dim; i++)
						{
							if(form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(j).getValue().getID_Muscle().equals(coll.get(i).getID_Muscle()))
								flag = true;
						}
						if(flag == true)
						{
							flag = false;
							continue;
						}
						GenForm.lyrTabsLayer.tabMuscleSelectionContainer.grdSelectedListRow row = form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().newRow();
						row.setValue(form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(j).getValue());
						row.setMuscName(form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(j).getValue().getName());
					
						addToColl(coll, j);
					}
				}
				//-----------------------------------------------------------------------------------------
		}
		else
		{
			MuscleRefVoCollection coll = new MuscleRefVoCollection();
			
			for( int i = 0 ; i < form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().size() ; i++)
			{
				if (form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(i).getColSelect())
				{
					GenForm.lyrTabsLayer.tabMuscleSelectionContainer.grdSelectedListRow row = form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().newRow();
					row.setValue(form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(i).getValue());
					row.setMuscName(form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(i).getValue().getName());
					
					addToColl(coll, i);
				}
			}
		}
	}

	private void addToColl(MuscleRefVoCollection coll, int i)
	{
		MuscleRefVo voRef = new MuscleRefVo();
		voRef.setID_Muscle(form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(i).getValue().getID_Muscle());
		coll.add(voRef);
		form.getLocalContext().setLinkCollection(coll);
	}
	
	protected void onBtnSelectAllClick() throws ims.framework.exceptions.PresentationLogicException
	{
		for( int i = 0 ; i < form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().size() ; i++)
		{
			GenForm.lyrTabsLayer.tabMuscleSelectionContainer.grdSearchMusclesRow row = form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().get(i);
			row.setColSelect(true);
		}
		
		updateControlsState();
	}
	
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSelectionTab();
		
		updateControlsState();
	}
	
	private void clearSelectionTab()
	{
		form.lyrTabs().tabMuscleSelection().txtSearchMuscle().setValue("");
		form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().clear();
		form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().clear();
		form.lyrTabs().tabMuscleSelection().btnSelectAll().setEnabled(false);
		form.lyrTabs().tabMuscleSelection().btnDeSelectAll().setEnabled(false);
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.lyrTabs().tabMuscleSelection().txtSearchMuscle().getValue() != null)
		{
			form.lyrTabs().tabMuscleSelection().btnSelectAll().setEnabled(false);
			form.lyrTabs().tabMuscleSelection().btnDeSelectAll().setEnabled(false);

			form.getLocalContext().setLinkCollection(null);
			
			MuscleVo searchMusc = new MuscleVo();
			searchMusc.setName("%" + form.lyrTabs().tabMuscleSelection().txtSearchMuscle().getValue() + "%");

			MuscleVoCollection muscColl = domain.listMuscles(searchMusc);
			
			form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().clear();
			
			for(int i = 0 ; i < muscColl.size() ; i++)
			{
				GenForm.lyrTabsLayer.tabMuscleSelectionContainer.grdSearchMusclesRow row = form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().newRow();
				row.setValue(muscColl.get(i));
				row.setMuscName(muscColl.get(i).getName());
			}
			if (muscColl.size() > 0)
			{
				form.lyrTabs().tabMuscleSelection().btnSelectAll().setEnabled(true);
				form.lyrTabs().tabMuscleSelection().btnDeSelectAll().setEnabled(true);
			}
			else
			{
				engine.showMessage("No records found.");
			}
		}
		else
		{
			engine.showMessage("Please enter search criteria.");
		}
		
		updateControlsState();
	}
	
	protected void onBtnCancelNewMuscleClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdMotorArea().getSelectedRowIndex() > 0)
		{
			Object gridObjectSelected = form.grdMotorArea().getSelectedRow().getValue();
			if (gridObjectSelected instanceof MuscleVo)
				onSelectMuscle();

			if (gridObjectSelected instanceof MotorAreaVo)
				onSelectArea();
		
			if (gridObjectSelected instanceof MuscleGroupsVo)
				onSelectGroup();
		}

		form.setMode(FormMode.VIEW);
		enableContextMenu();
	}
	
	protected void onBtnSaveNewMuscleClick() throws ims.framework.exceptions.PresentationLogicException
	{
		MuscleVo muscleVo = form.getLocalContext().getSelectedMuscle(); 
		if (muscleVo == null)
			muscleVo = new MuscleVo();
		
		muscleVo.setName(form.lyrTabs().tabMuscleEdit().txtMuscleName().getValue());
		muscleVo.setDescription(form.lyrTabs().tabMuscleEdit().txtMuscleDesc().getValue());
		muscleVo.setIsActive(new Boolean(form.lyrTabs().tabMuscleEdit().chkMuscleActive().getValue()));
		
		VertebrallevelVoCollection collRefs = muscleVo.getVertLevels();
		
		if(collRefs == null)
			collRefs = new VertebrallevelVoCollection();
		else
			collRefs.clear();
		
		muscleVo.setVertLevels(collRefs);
		for (int i = 0 ; i < form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().size() ; i++)
		{
			if (form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().get(i).getSelectionCol())
			{
				
				VertebrallevelVo rowValue = form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().get(i).getValue();
				if(rowValue == null)
					rowValue = new VertebrallevelVo();
				
				rowValue.setName(rowValue.getName());	
				rowValue.setDescription(rowValue.getDescription());
				rowValue.setIsULAsiaScore(rowValue.getIsULAsiaScore());
				rowValue.setIsLLAsiaScore(rowValue.getIsLLAsiaScore());
				rowValue.setIsActive(rowValue.getIsActive());
				rowValue.setOrderNo(rowValue.getOrderNo());
			
				collRefs.add(rowValue);
			}
		}
	
		muscleVo.setVertLevels(collRefs);
		
		String[] errors = muscleVo.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}

		try
		{
			domain.saveMuscleVo(muscleVo);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		/*if (form.getLocalContext().getSelectedMuscle() != null)
		{*/
			form.getLocalContext().setSelectedMuscle(muscleVo);
			/*form.grdMotorArea().setValue(muscleVo);
		}	*/	
		
		form.setMode(FormMode.VIEW);		
		open();
	}
	
	protected void onGrdMotorAreaSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		selectionChanged();		
	}

	private void selectionChanged()
	{
		enableContextMenu();
		
		Object gridObjectSelected = form.grdMotorArea().getSelectedRow().getValue();
		if (gridObjectSelected instanceof MuscleVo)
			onSelectMuscle();
		
		if (gridObjectSelected instanceof MotorAreaVo)
			onSelectArea();
		
		if (gridObjectSelected instanceof MuscleGroupsVo)
			onSelectGroup();
	}
	
	private void enableContextMenu()
	{
		resetContexMenu();
		
		if(form.getMode().equals(FormMode.EDIT))
			return;

		boolean gridRecordSelected = false;
		Object gridObjectSelected = null;
		
		if (form.grdMotorArea().getSelectedRow() != null)
		{
			gridRecordSelected = form.grdMotorArea().getSelectedRow().getValue() != null;
			gridObjectSelected = form.grdMotorArea().getSelectedRow().getValue();
		}
	
		if (gridRecordSelected)
		{
			if (gridObjectSelected instanceof MotorAreaVo)
			{
				form.getContextMenus().getMotorAreaGroupMuscleADD_GROUPItem().setVisible(true);

				form.getContextMenus().getMotorAreaGroupMuscleUPDATE_AREAItem().setVisible(true);
				form.getContextMenus().getMotorAreaGroupMuscleREMOVE_AREAItem().setVisible(true);
				form.getContextMenus().getMotorAreaGroupMuscleADD_AREAItem().setVisible(true);
			}
			
			if (gridObjectSelected instanceof MuscleGroupsVo)
			{
				form.getContextMenus().getMotorAreaGroupMuscleADD_MUSCLEItem().setText("Link muscle");
				form.getContextMenus().getMotorAreaGroupMuscleADD_MUSCLEItem().setVisible(true);

				form.getContextMenus().getMotorAreaGroupMuscleUPDATE_GROUPItem().setVisible(true);
				form.getContextMenus().getMotorAreaGroupMuscleREMOVE_GROUPItem().setVisible(true);
				form.getContextMenus().getMotorAreaGroupMuscleADD_AREAItem().setVisible(true);
				//wdev-11579
				MotorAreaVo tempMotorAreaVo = (MotorAreaVo) form.grdMotorArea().getSelectedRow().getParentRow().getValue();
				form.getContextMenus().getMotorAreaGroupMuscleMOVE_UPItem().setVisible(tempMotorAreaVo.getMuscleGroups().size() > 0 && tempMotorAreaVo.getMuscleGroups().indexOf((MuscleGroupsVo)gridObjectSelected) > 0);
				form.getContextMenus().getMotorAreaGroupMuscleMOVE_DOWNItem().setVisible(tempMotorAreaVo.getMuscleGroups().size() > 0 && tempMotorAreaVo.getMuscleGroups().indexOf((MuscleGroupsVo)gridObjectSelected) < (tempMotorAreaVo.getMuscleGroups().size() - 1));
								
				//-------
				
			}

			if (gridObjectSelected instanceof MuscleVo)
			{
				form.getContextMenus().getMotorAreaGroupMuscleNEW_MUSCLEItem().setVisible(true);
				form.getContextMenus().getMotorAreaGroupMuscleUPDATE_MUSCLEItem().setVisible(true);
			}
		}
		else
		{
			if (form.cmbFilter().getValue() != null)
			{
				if (form.cmbFilter().getValue().equals(FILTER_ALL))
				{
					form.getContextMenus().getMotorAreaGroupMuscleADD_AREAItem().setVisible(true);
					form.getContextMenus().getMotorAreaGroupMuscleNEW_MUSCLEItem().setVisible(true);
				}
				if (form.cmbFilter().getValue().equals(FILTER_MUSCLE))
				{
					form.getContextMenus().getMotorAreaGroupMuscleNEW_MUSCLEItem().setVisible(true);
				//	form.getContextMenus().getMotorAreaGroupMuscleUPDATE_MUSCLEItem().setVisible(true);
				}
			}
			
		}
	}

	private void resetContexMenu()
	{
		form.getContextMenus().getMotorAreaGroupMuscleADD_MUSCLEItem().setVisible(false);
		form.getContextMenus().getMotorAreaGroupMuscleUPDATE_MUSCLEItem().setVisible(false);
		form.getContextMenus().getMotorAreaGroupMuscleREMOVE_MUSCLEItem().setVisible(false);

		form.getContextMenus().getMotorAreaGroupMuscleADD_AREAItem().setVisible(false);
		form.getContextMenus().getMotorAreaGroupMuscleUPDATE_AREAItem().setVisible(false);
		form.getContextMenus().getMotorAreaGroupMuscleREMOVE_AREAItem().setVisible(false);
		
		form.getContextMenus().getMotorAreaGroupMuscleADD_GROUPItem().setVisible(false);
		form.getContextMenus().getMotorAreaGroupMuscleUPDATE_GROUPItem().setVisible(false);
		form.getContextMenus().getMotorAreaGroupMuscleREMOVE_GROUPItem().setVisible(false);
		
		form.getContextMenus().getMotorAreaGroupMuscleNEW_MUSCLEItem().setVisible(false);
		form.getContextMenus().getMotorAreaGroupMuscleEDIT_MUSCLEItem().setVisible(false);
		form.getContextMenus().getMotorAreaGroupMuscleREMOVE_MUSCLEItem().setVisible(false);
		
		form.getContextMenus().getMotorAreaGroupMuscleMOVE_DOWNItem().setVisible(false);
		form.getContextMenus().getMotorAreaGroupMuscleMOVE_UPItem().setVisible(false);
		
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getContextMenus().hideAllMotorAreaGroupMuscleMenuItems();
		
		switch (menuItemID)
		{
		
		// Question
		case GenForm.ContextMenus.MotorAreaGroupMuscle.ADD_AREA :
			onAddArea();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.UPDATE_AREA :
			onUpdateArea();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.REMOVE_AREA :
			onRemoveArea();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.ADD_GROUP :
			onAddGroup();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.UPDATE_GROUP :
			onUpdateGroup();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.REMOVE_GROUP :
			onRemoveGroup();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.ADD_MUSCLE :
			onAddMuscle();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.EDIT_MUSCLE :
			onEditMuscle();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.NEW_MUSCLE :
			onNewMuscle();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.UPDATE_MUSCLE :
			onUpdateMuscle();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.REMOVE_MUSCLE :
			unlinkMuscle();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.MOVE_UP :
			onMoveUp();
			break;
		case GenForm.ContextMenus.MotorAreaGroupMuscle.MOVE_DOWN:
			onMoveDown();
			break;
		}
	}

	private void onUpdateMuscle() 
	{
		onSelectMuscle();
		
		form.setMode(FormMode.EDIT);
		form.lyrTabs().tabMuscleEdit().txtMuscleName().setEnabled(false);
	}

	private void onSelectMuscle() 
	{
		form.lyrTabs().showtabMuscleEdit();
		
		MuscleVo voMusc =(MuscleVo) /* domain.getMuscleVertebralLevel((MuscleVo)*/form.grdMotorArea().getSelectedRow().getValue();
		form.getLocalContext().setSelectedMuscle(voMusc);
		populateMuscleTab(voMusc);
	}

	private void populateMuscleTab(MuscleVo muscleVo) 
	{
		form.lyrTabs().tabMuscleEdit().txtMuscleName().setValue(muscleVo.getNameIsNotNull() ? muscleVo.getName() : "");
		form.lyrTabs().tabMuscleEdit().txtMuscleDesc().setValue(muscleVo.getDescriptionIsNotNull() ? muscleVo.getDescription() : "");
		form.lyrTabs().tabMuscleEdit().chkMuscleActive().setValue(muscleVo.getIsActiveIsNotNull() ? muscleVo.getIsActive().booleanValue() : false);
		
		loadVertebralGrid();
		if (muscleVo.getVertLevelsIsNotNull())
		{
			for (int j = 0 ; j < muscleVo.getVertLevels().size() ; j++)
			{
				for (int i = 0 ; i < form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().size() ; i++)
				{
					if (form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().get(i).getValue().getID_VertebralLevels().equals(muscleVo.getVertLevels().get(j).getID_VertebralLevels()))
						form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().get(i).setSelectionCol(true);
				}
			}
		}
	}
	//wdev-11579
	private void onMoveDown() 
	{
		boolean gridRecordSelected = false;
		Object gridObjectSelected = null;
		if (form.grdMotorArea().getSelectedRow() != null)
		{
			gridRecordSelected = form.grdMotorArea().getSelectedRow().getValue() != null;
			gridObjectSelected = form.grdMotorArea().getSelectedRow().getValue();
		}
	
		if (gridRecordSelected)
		{						
			if (gridObjectSelected instanceof MuscleGroupsVo)
			{
				MotorAreaVo tempMotorAreaVo = (MotorAreaVo) form.grdMotorArea().getSelectedRow().getParentRow().getValue();
				if(tempMotorAreaVo != null && tempMotorAreaVo.getMuscleGroupsIsNotNull() && tempMotorAreaVo.getMuscleGroups().size() > 0 )
				{
					int index = tempMotorAreaVo.getMuscleGroups().indexOf((MuscleGroupsVo)gridObjectSelected);
					int sizeColl = tempMotorAreaVo.getMuscleGroups().size();
					if(index < (sizeColl-1))
					{
						MuscleGroupsVo tempMuscleGroupsVo = tempMotorAreaVo.getMuscleGroups().get(index + 1);
						tempMotorAreaVo.getMuscleGroups().set(index + 1 , (MuscleGroupsVo)gridObjectSelected);
						tempMotorAreaVo.getMuscleGroups().set(index  , tempMuscleGroupsVo);
						saveMotorArea(tempMotorAreaVo);
					}					
				}
			}
		}
	}

	//wdev-11579
	private void onMoveUp() 
	{
		
		boolean gridRecordSelected = false;
		Object gridObjectSelected = null;
		if (form.grdMotorArea().getSelectedRow() != null)
		{
			gridRecordSelected = form.grdMotorArea().getSelectedRow().getValue() != null;
			gridObjectSelected = form.grdMotorArea().getSelectedRow().getValue();
		}
	
		if (gridRecordSelected)
		{
						
			if (gridObjectSelected instanceof MuscleGroupsVo)
			{
				MotorAreaVo tempMotorAreaVo = (MotorAreaVo) form.grdMotorArea().getSelectedRow().getParentRow().getValue();
				if(tempMotorAreaVo != null && tempMotorAreaVo.getMuscleGroupsIsNotNull() && tempMotorAreaVo.getMuscleGroups().size() > 0 )
				{
					int index = tempMotorAreaVo.getMuscleGroups().indexOf((MuscleGroupsVo)gridObjectSelected);
					if(index > 0)
					{
						MuscleGroupsVo tempMuscleGroupsVo = tempMotorAreaVo.getMuscleGroups().get(index -1);
						tempMotorAreaVo.getMuscleGroups().set(index - 1 , (MuscleGroupsVo)gridObjectSelected);
						tempMotorAreaVo.getMuscleGroups().set(index  , tempMuscleGroupsVo);
						saveMotorArea(tempMotorAreaVo);
					}					
				}
			}
		}

	}

	private void onNewMuscle() 
	{
		form.lyrTabs().showtabMuscleEdit();
		
		form.getLocalContext().setSelectedMuscle(null);
		
		form.lyrTabs().tabMuscleEdit().txtMuscleName().setValue("");
		form.lyrTabs().tabMuscleEdit().txtMuscleDesc().setValue("");
		form.lyrTabs().tabMuscleEdit().chkMuscleActive().setValue(true);

		loadVertebralGrid();
		
		form.setMode(FormMode.EDIT);
		form.lyrTabs().tabMuscleEdit().txtMuscleName().setEnabled(true);
		
	}

	private void loadVertebralGrid() 
	{
		VertebrallevelVoCollection vertColl = new VertebrallevelVoCollection();
		//vertColl = form.getLocalContext().getVertebrallevelCollection();
		vertColl = domain.listVertebralLevels();
		form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().clear();
		if (vertColl != null)
		{
			for (int i = 0 ; i < vertColl.size() ; i++)
			{
				GenForm.lyrTabsLayer.tabMuscleEditContainer.grdVertrebralLevelsRow row = form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().newRow();
				row.setValue(vertColl.get(i));
				row.setVertCol(vertColl.get(i).getName());
			}
		}
		
	}

	private void onEditMuscle() 
	{
		form.lyrTabs().showtabMuscleEdit();
		
		MuscleVo muscleVo = (MuscleVo)form.grdMotorArea().getSelectedRow().getValue();
		
		form.lyrTabs().tabMuscleEdit().txtMuscleName().setValue(muscleVo.getNameIsNotNull() ? muscleVo.getName() : "");
		form.lyrTabs().tabMuscleEdit().txtMuscleDesc().setValue(muscleVo.getDescriptionIsNotNull() ? muscleVo.getDescription() : "");
		form.lyrTabs().tabMuscleEdit().chkMuscleActive().setValue(muscleVo.getIsActiveIsNotNull() ? muscleVo.getIsActive().booleanValue() : false);
		
		if (muscleVo.getVertLevelsIsNotNull())
		{
			for (int j = 0 ; j < muscleVo.getVertLevels().size() ; j++)
			{
				for (int i = 0 ; i < form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().size() ; i++)
				{
					if (form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().get(i).getValue().getID_VertebralLevels().equals(muscleVo.getVertLevels().get(j).getID_VertebralLevels()))
						form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().get(i).setSelectionCol(true);
				}
			}
		}
	}

	private void unlinkMuscle()
	{
		if(form.grdMotorArea().getSelectedRow()!=null && form.grdMotorArea().getSelectedRow().getParentRow()!=null
				&& form.grdMotorArea().getSelectedRow().getParentRow().getParentRow()!=null
				&& form.grdMotorArea().getSelectedRow().getParentRow().getValue() !=null){
		
			MotorAreaVo motorAreaVo = (MotorAreaVo) form.grdMotorArea().getSelectedRow().getParentRow().getParentRow().getValue();		
			MuscleGroupsVo muscleGroupsVo = (MuscleGroupsVo) form.grdMotorArea().getSelectedRow().getParentRow().getValue();
			MuscleGroupMuscleVoCollection voCollMuscleGroupAssociations = muscleGroupsVo.getMuscleGroupMuscle();
	
			for (int j=0; j < voCollMuscleGroupAssociations.size(); j++)
			{
				if (voCollMuscleGroupAssociations.get(j).getMuscle().equals(form.getLocalContext().getSelectedMuscle()))
				{	
					voCollMuscleGroupAssociations.remove(j);
				}
			}
			
			motorAreaVo.getMuscleGroups().set(motorAreaVo.getMuscleGroups().indexOf(muscleGroupsVo), muscleGroupsVo);
			
			saveMotorArea(motorAreaVo);		
		}
	}
	
	
	private void onAddMuscle() 
	{
		form.lyrTabs().showtabMuscleSelection();
		clearSelectionTab();

		if ( (form.grdMotorArea().getSelectedRow().getValue() != null) 
			&& (form.grdMotorArea().getSelectedRow().getValue() instanceof MuscleGroupsVo))
		{
			form.getLocalContext().setSelectedMuscleGroup((MuscleGroupsVo)form.grdMotorArea().getSelectedRow().getValue());			
			form.getLocalContext().setSelectedMotorArea((MotorAreaVo)form.grdMotorArea().getSelectedRow().getParentRow().getValue());
		}
		
		form.setMode(FormMode.EDIT);
		form.lyrTabs().tabMuscleSelection().imbMuscleSearch().setAsDefaultButton();
	}

	private void onRemoveGroup() 
	{
		if (form.getLocalContext().getSelectedMotorArea() == null)
			return;
		if (form.getLocalContext().getSelectedMuscleGroup() == null)
			return;
		
		MotorAreaVo voMotorArea = form.getLocalContext().getSelectedMotorArea(); 
		MuscleGroupsVo voMuscleGroup = form.getLocalContext().getSelectedMuscleGroup();
		
		boolean bChanged = false;
		for (int i=0; i < voMotorArea.getMuscleGroups().size(); i++)
		{
			if (voMotorArea.getMuscleGroups().get(i).equals(voMuscleGroup))
			{
				voMotorArea.getMuscleGroups().get(i).setIsActive(Boolean.FALSE);
				bChanged = true;
				break;
			}
		}
				
		if (bChanged == true)
		{
			saveMotorArea(voMotorArea);
			clearGroupControls();
		}
	}

	private void clearControls()
	{
		if (form.lyrTabs().tabMotorArea().isVisible())
			clearAreaControls();
		else if (form.lyrTabs().tabMuscleGroup().isVisible())
			clearGroupControls();
		else if (form.lyrTabs().tabMuscleSelection().isVisible())
			clearMuscleSelectionControls();
		else if (form.lyrTabs().tabMuscleEdit().isVisible()) 
			clearMuscleEditControls();
	}

	private void clearMuscleSelectionControls()
	{
		form.lyrTabs().tabMuscleSelection().txtSearchMuscle().setValue("");
		form.lyrTabs().tabMuscleSelection().grdSearchMuscles().getRows().clear();
		form.lyrTabs().tabMuscleSelection().grdSelectedList().getRows().clear();
	}

	private void clearAreaControls()
	{
		form.lyrTabs().tabMotorArea().txtAreaName().setValue("");
		form.lyrTabs().tabMotorArea().txtAreaDesc().setValue("");
		form.lyrTabs().tabMotorArea().chkAreaActive().setValue(false);		
	}

	private void clearGroupControls()
	{
		form.lyrTabs().tabMuscleGroup().txtGroupName().setValue("");
		form.lyrTabs().tabMuscleGroup().txtGroupDesc().setValue("");
		form.lyrTabs().tabMuscleGroup().chkGroupActive().setValue(false);
	}

	private void clearMuscleEditControls()
	{
		form.lyrTabs().tabMuscleEdit().txtMuscleName().setValue("");
		form.lyrTabs().tabMuscleEdit().txtMuscleDesc().setValue("");
		form.lyrTabs().tabMuscleEdit().chkMuscleActive().setValue(false);
		form.lyrTabs().tabMuscleEdit().grdVertrebralLevels().getRows().clear();
		
	}


	private void onUpdateGroup() 
	{
		onSelectGroup();
		
		form.setMode(FormMode.EDIT);
		form.lyrTabs().tabMuscleGroup().txtGroupName().setEnabled(false);
	}

	private void onSelectGroup() 
	{
		form.lyrTabs().showtabMuscleGroup();
		form.getLocalContext().setSelectedMuscleGroup((MuscleGroupsVo)form.grdMotorArea().getSelectedRow().getValue());
		form.getLocalContext().setSelectedMotorArea((MotorAreaVo)form.grdMotorArea().getSelectedRow().getParentRow().getValue());
		populateGroupTab((MuscleGroupsVo)form.grdMotorArea().getSelectedRow().getValue());
	}

	private void populateGroupTab(MuscleGroupsVo muscleGroupVo) 
	{
		form.lyrTabs().tabMuscleGroup().txtGroupName().setValue(muscleGroupVo.getNameIsNotNull() ? muscleGroupVo.getName() : "");
		form.lyrTabs().tabMuscleGroup().txtGroupDesc().setValue(muscleGroupVo.getDescriptionIsNotNull() ? muscleGroupVo.getDescription() : "");
		form.lyrTabs().tabMuscleGroup().chkGroupActive().setValue(muscleGroupVo.getIsActiveIsNotNull() ? muscleGroupVo.getIsActive().booleanValue() : false);
	}

	private void onAddGroup() 
	{
		form.lyrTabs().showtabMuscleGroup();
		
		if ( (form.grdMotorArea().getSelectedRow().getValue() != null) 
			&& (form.grdMotorArea().getSelectedRow().getValue() instanceof MotorAreaVo))
			form.getLocalContext().setSelectedMotorArea((MotorAreaVo)form.grdMotorArea().getSelectedRow().getValue());

		form.getLocalContext().setSelectedMuscleGroup(null);

		form.lyrTabs().tabMuscleGroup().txtGroupName().setValue("");
		form.lyrTabs().tabMuscleGroup().txtGroupDesc().setValue("");
		form.lyrTabs().tabMuscleGroup().chkGroupActive().setValue(true);

		form.setMode(FormMode.EDIT);
		form.lyrTabs().tabMuscleGroup().txtGroupName().setEnabled(true);
	}

	private void onAddArea()
	{
		form.lyrTabs().showtabMotorArea();
		
		form.getLocalContext().setSelectedMotorArea(new MotorAreaVo());

		form.lyrTabs().tabMotorArea().txtAreaName().setValue("");
		form.lyrTabs().tabMotorArea().txtAreaDesc().setValue("");
		form.lyrTabs().tabMotorArea().chkAreaActive().setValue(true);

		form.setMode(FormMode.EDIT);
		form.lyrTabs().tabMotorArea().txtAreaName().setEnabled(true);
	}
	
	private void onUpdateArea()
	{
		onSelectArea();
		
		form.setMode(FormMode.EDIT);
		form.lyrTabs().tabMotorArea().txtAreaName().setEnabled(false);
	}

	private void onSelectArea()
	{
		form.lyrTabs().showtabMotorArea();
		form.getLocalContext().setSelectedMotorArea((MotorAreaVo)form.grdMotorArea().getSelectedRow().getValue());
		populateAreaTab((MotorAreaVo)form.grdMotorArea().getSelectedRow().getValue());
	}
	
	private void populateAreaTab(MotorAreaVo motorAreaVo) 
	{
		form.lyrTabs().tabMotorArea().txtAreaName().setValue(motorAreaVo.getNameIsNotNull() ? motorAreaVo.getName() : "");
		form.lyrTabs().tabMotorArea().txtAreaDesc().setValue(motorAreaVo.getDescriptionIsNotNull() ? motorAreaVo.getDescription() : "");
		form.lyrTabs().tabMotorArea().chkAreaActive().setValue(motorAreaVo.getIsActiveIsNotNull() ? motorAreaVo.getIsActive().booleanValue() : false);
	}

	private void onRemoveArea()
	{
		MotorAreaVo motorareaVo = new MotorAreaVo();
		motorareaVo = form.getLocalContext().getSelectedMotorArea();
		motorareaVo.setIsActive(Boolean.FALSE);
		saveMotorArea(motorareaVo);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		// TODO Auto-generated method stub
		
	}
	
	
	private void clearContextVariables()
	{		
		form.getLocalContext().setSelectedMotorArea(null);
		form.getLocalContext().setSelectedMuscle(null);
		form.getLocalContext().setSelectedMuscleGroup(null);
		form.getLocalContext().setVertebrallevelCollection(null);
	}
	
	private void reSelectSavedItem()
	{
		if (form.lyrTabs().tabMotorArea().isVisible())
			setSelectedMotorArea();
		else if (form.lyrTabs().tabMuscleGroup().isVisible())
			setSelectedGroup();
		else if (form.lyrTabs().tabMuscleEdit().isVisible() || (form.lyrTabs().tabMuscleSelection().isVisible()))
			setSelectedMuscle();
			
	}

	private void setSelectedMuscle()
	{
		/*boolean bRowSelected = false;
		GenForm.grdMotorAreaRow[] rows = form.grdMotorArea().getAllRows();
		
		for (int i=0; i < rows.length; i++)
		{
			if (rows[i].getValue() instanceof MuscleVo)
			{
				if (rows[i].getValue().equals(form.getLocalContext().getSelectedMuscle()))
				{	*/
					form.grdMotorArea().setValue(form.getLocalContext().getSelectedMuscle());
			/*		bRowSelected = true;
				}
			}
		}

		clearContextVariables();
		if (bRowSelected)
			onSelectMuscle();					
		*/

	}

	private void setSelectedMotorArea()
	{
		boolean bRowSelected = false;
		GenForm.grdMotorAreaRow[] rows = form.grdMotorArea().getAllRows();
		
		for (int i=0; i < rows.length; i++)
		{
			if (rows[i].getValue() instanceof MotorAreaVo)
			{
				if (rows[i].getValue().equals(form.getLocalContext().getSelectedMotorArea()))
				{	
					form.grdMotorArea().setValue(form.getLocalContext().getSelectedMotorArea());
					bRowSelected = true;
				}
			}
		}

		clearContextVariables();
		
		if (bRowSelected)
			onSelectArea();					
	}

	private void setSelectedGroup()
	{
		boolean bRowSelected = false;
		GenForm.grdMotorAreaRow[] rows = form.grdMotorArea().getAllRows();
		
		for (int i=0; i < rows.length; i++)
		{
			if (rows[i].getValue() instanceof MuscleGroupsVo)
			{
				if (rows[i].getValue().equals(form.getLocalContext().getSelectedMuscleGroup()))
				{	
					form.grdMotorArea().setValue(form.getLocalContext().getSelectedMuscleGroup());
					bRowSelected = true;
				}
			}
		}

		clearContextVariables();
		if (bRowSelected)
			onSelectGroup();					
	}

	protected void onCmbFilterValueChanged() throws PresentationLogicException
	{
		if (form.cmbFilter().getValue() != null)
		{
			if (form.cmbFilter().getValue().equals(FILTER_ALL))
			{
				listAreas();
				form.lyrTabs().showtabMotorArea();
				form.grdMotorArea().setColAreasCaption("Motor 'Area/Muscle/Muscles'");
			}
			if (form.cmbFilter().getValue().equals(FILTER_MUSCLE))
			{
				listAllMuscle();
				form.lyrTabs().showtabMuscleEdit();
				form.grdMotorArea().setColAreasCaption("Muscles");
			}
		}
		else
		{
			engine.showMessage("Select a 'Motor Areas/Muscle Groups' or 'Muscles'");
			form.cmbFilter().setValue(FILTER_ALL);
			listAreas();
			form.lyrTabs().showtabMotorArea();
		}
		
		open();
	}
	
	private void listAllMuscle()
	{
		MuscleVoCollection collMuscle = domain.listMuscles(null);
		
		form.grdMotorArea().getRows().clear();
		clearControls();		
		for(int i = 0 ; i < collMuscle.size() ; i++)
		{
			MuscleVo muscleVo = collMuscle.get(i);	
			GenForm.grdMotorAreaRow rowMuscle = form.grdMotorArea().getRows().newRow();
			rowMuscle.setColAreas(muscleVo.getName());
			rowMuscle.setValue(muscleVo);
		}
	}

	private void populateFilterCombo() 
	{
		form.cmbFilter().clear();
		form.cmbFilter().newRow(FILTER_ALL, "Motor Areas/Muscle Groups");
		form.cmbFilter().newRow(FILTER_MUSCLE, "Muscles");
		form.cmbFilter().setValue(FILTER_ALL);
	}

	@Override
	protected void onGrdSearchMusclesGridCheckBoxClicked(int column, grdSearchMusclesRow row, boolean isChecked) throws PresentationLogicException
	{
		updateControlsState();
	}

}
