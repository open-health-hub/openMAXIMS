//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.forms.muscleareagroupsmuscles;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrTabsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabMotorAreaContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 304, 128, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 224, 128, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 120, 48, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 120, 16, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 120, 80, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.FALSE, null}));
		
				// Horizontal Line Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 360, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			}

			public Button btnCancelArea()
			{
				return (Button)super.getControl(2);
			}
			public Button btnSaveArea()
			{
				return (Button)super.getControl(3);
			}
			public TextBox txtAreaDesc()
			{
				return (TextBox)super.getControl(4);
			}
			public TextBox txtAreaName()
			{
				return (TextBox)super.getControl(5);
			}
			public CheckBox chkAreaActive()
			{
				return (CheckBox)super.getControl(6);
			}
		}
		public static class tabMuscleGroupContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 312, 128, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 232, 128, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 48, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 120, 16, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 120, 80, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.FALSE, null}));
		
				// Horizontal Line Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 360, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			}

			public Button btnCancelGroup()
			{
				return (Button)super.getControl(2);
			}
			public Button btnSaveGroup()
			{
				return (Button)super.getControl(3);
			}
			public TextBox txtGroupDesc()
			{
				return (TextBox)super.getControl(4);
			}
			public TextBox txtGroupName()
			{
				return (TextBox)super.getControl(5);
			}
			public CheckBox chkGroupActive()
			{
				return (CheckBox)super.getControl(6);
			}
		}
		public static class tabMuscleSelectionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSelectedListRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSelectedListRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setMuscNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isMuscNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showMuscNameOpened()
				{
					super.row.showOpened(0);
				}
				public String getMuscName()
				{
					return (String)super.row.get(0);
				}
				public void setMuscName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellMuscNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.clinicaladmin.vo.MuscleVo getValue()
				{
					return (ims.clinicaladmin.vo.MuscleVo)super.row.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.MuscleVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSelectedListRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSelectedListRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSelectedListRow get(int index)
				{
					return new grdSelectedListRow(super.collection.get(index));
				}
				public grdSelectedListRow newRow()
				{
					return new grdSelectedListRow(super.collection.newRow());
				}
				public grdSelectedListRow newRow(boolean autoSelect)
				{
					return new grdSelectedListRow(super.collection.newRow(autoSelect));
				}
				public grdSelectedListRow newRowAt(int index)
				{
					return new grdSelectedListRow(super.collection.newRowAt(index));
				}
				public grdSelectedListRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSelectedListRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSelectedListGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinicaladmin.vo.MuscleVoCollection getValues()
				{
					ims.clinicaladmin.vo.MuscleVoCollection listOfValues = new ims.clinicaladmin.vo.MuscleVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinicaladmin.vo.MuscleVo getValue()
				{
					return (ims.clinicaladmin.vo.MuscleVo)super.grid.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.MuscleVo value)
				{
					super.grid.setValue(value);
				}
				public grdSelectedListRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSelectedListRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSelectedListRowCollection getRows()
				{
					return new grdSelectedListRowCollection(super.grid.getRows());
				}
				public grdSelectedListRow getRowByValue(ims.clinicaladmin.vo.MuscleVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSelectedListRow(row);
				}
				public void setMuscNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getMuscNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public static class grdSearchMusclesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSearchMusclesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setMuscNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isMuscNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showMuscNameOpened()
				{
					super.row.showOpened(0);
				}
				public String getMuscName()
				{
					return (String)super.row.get(0);
				}
				public void setMuscName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellMuscNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.clinicaladmin.vo.MuscleVo getValue()
				{
					return (ims.clinicaladmin.vo.MuscleVo)super.row.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.MuscleVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSearchMusclesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSearchMusclesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSearchMusclesRow get(int index)
				{
					return new grdSearchMusclesRow(super.collection.get(index));
				}
				public grdSearchMusclesRow newRow()
				{
					return new grdSearchMusclesRow(super.collection.newRow());
				}
				public grdSearchMusclesRow newRow(boolean autoSelect)
				{
					return new grdSearchMusclesRow(super.collection.newRow(autoSelect));
				}
				public grdSearchMusclesRow newRowAt(int index)
				{
					return new grdSearchMusclesRow(super.collection.newRowAt(index));
				}
				public grdSearchMusclesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSearchMusclesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSearchMusclesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.clinicaladmin.vo.MuscleVoCollection getValues()
				{
					ims.clinicaladmin.vo.MuscleVoCollection listOfValues = new ims.clinicaladmin.vo.MuscleVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinicaladmin.vo.MuscleVo getValue()
				{
					return (ims.clinicaladmin.vo.MuscleVo)super.grid.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.MuscleVo value)
				{
					super.grid.setValue(value);
				}
				public grdSearchMusclesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSearchMusclesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSearchMusclesRowCollection getRows()
				{
					return new grdSearchMusclesRowCollection(super.grid.getRows());
				}
				public grdSearchMusclesRow getRowByValue(ims.clinicaladmin.vo.MuscleVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSearchMusclesRow(row);
				}
				public void setMuscNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getMuscNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 15, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 310, 504, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 230, 504, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 103, 240, 80, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Deselect All", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 304, 240, 80, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Add to List", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 240, 80, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Select All", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 64, 13, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 288, 368, 208, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSelectedListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSelectedListTemp);
				grdSelectedListGrid grdSelectedList = (grdSelectedListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSelectedListGrid.class, m_grdSelectedListTemp);
				grdSelectedList.addStringColumn("Linked Muscles", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSelectedList);
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 368, 184, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdSearchMusclesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSearchMusclesTemp);
				grdSearchMusclesGrid grdSearchMuscles = (grdSearchMusclesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSearchMusclesGrid.class, m_grdSearchMusclesTemp);
				grdSearchMuscles.addStringColumn("Muscles", 0, 0, 290, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSearchMuscles.addBoolColumn("Select", 0, 1, -1, false, true, 0, true);
				super.addGrid(grdSearchMuscles);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 352, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 320, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null}));
		
				// Horizontal Line Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 272, 368, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			}

			public Button btnCancelMuscles()
			{
				return (Button)super.getControl(1);
			}
			public Button btnSaveMuscles()
			{
				return (Button)super.getControl(2);
			}
			public Button btnDeSelectAll()
			{
				return (Button)super.getControl(3);
			}
			public Button btnAddList()
			{
				return (Button)super.getControl(4);
			}
			public Button btnSelectAll()
			{
				return (Button)super.getControl(5);
			}
			public TextBox txtSearchMuscle()
			{
				return (TextBox)super.getControl(6);
			}
			public grdSelectedListGrid grdSelectedList()
			{
				return (grdSelectedListGrid)super.getGrid(0);
			}
			public grdSearchMusclesGrid grdSearchMuscles()
			{
				return (grdSearchMusclesGrid)super.getGrid(1);
			}
			public ImageButton imbMuscleClear()
			{
				return (ImageButton)super.getControl(9);
			}
			public ImageButton imbMuscleSearch()
			{
				return (ImageButton)super.getControl(10);
			}
		}
		public static class tabMuscleEditContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdVertrebralLevelsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdVertrebralLevelsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setVertColReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isVertColReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showVertColOpened()
				{
					super.row.showOpened(0);
				}
				public String getVertCol()
				{
					return (String)super.row.get(0);
				}
				public void setVertCol(String value)
				{
					super.row.set(0, value);
				}
				public void setCellVertColTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setSelectionColReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isSelectionColReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showSelectionColOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getSelectionCol()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setSelectionCol(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellSelectionColTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.VertebrallevelVo getValue()
				{
					return (ims.core.vo.VertebrallevelVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.VertebrallevelVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdVertrebralLevelsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdVertrebralLevelsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdVertrebralLevelsRow get(int index)
				{
					return new grdVertrebralLevelsRow(super.collection.get(index));
				}
				public grdVertrebralLevelsRow newRow()
				{
					return new grdVertrebralLevelsRow(super.collection.newRow());
				}
				public grdVertrebralLevelsRow newRow(boolean autoSelect)
				{
					return new grdVertrebralLevelsRow(super.collection.newRow(autoSelect));
				}
				public grdVertrebralLevelsRow newRowAt(int index)
				{
					return new grdVertrebralLevelsRow(super.collection.newRowAt(index));
				}
				public grdVertrebralLevelsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdVertrebralLevelsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdVertrebralLevelsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.VertebrallevelVoCollection getValues()
				{
					ims.core.vo.VertebrallevelVoCollection listOfValues = new ims.core.vo.VertebrallevelVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.VertebrallevelVo getValue()
				{
					return (ims.core.vo.VertebrallevelVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.VertebrallevelVo value)
				{
					super.grid.setValue(value);
				}
				public grdVertrebralLevelsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdVertrebralLevelsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdVertrebralLevelsRowCollection getRows()
				{
					return new grdVertrebralLevelsRowCollection(super.grid.getRows());
				}
				public grdVertrebralLevelsRow getRowByValue(ims.core.vo.VertebrallevelVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdVertrebralLevelsRow(row);
				}
				public void setVertColHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getVertColHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setSelectionColHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getSelectionColHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 312, 504, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 232, 504, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 144, 48, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 144, 16, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 144, 80, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 368, 384, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdVertrebralLevelsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdVertrebralLevelsTemp);
				grdVertrebralLevelsGrid grdVertrebralLevels = (grdVertrebralLevelsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdVertrebralLevelsGrid.class, m_grdVertrebralLevelsTemp);
				grdVertrebralLevels.addStringColumn("Vertebral Levels", 0, 0, 310, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdVertrebralLevels.addBoolColumn(" ", 0, 1, -1, false, false, 0, true);
				super.addGrid(grdVertrebralLevels);
			}

			public Button btnCancelNewMuscle()
			{
				return (Button)super.getControl(2);
			}
			public Button btnSaveNewMuscle()
			{
				return (Button)super.getControl(3);
			}
			public TextBox txtMuscleDesc()
			{
				return (TextBox)super.getControl(4);
			}
			public TextBox txtMuscleName()
			{
				return (TextBox)super.getControl(5);
			}
			public CheckBox chkMuscleActive()
			{
				return (CheckBox)super.getControl(6);
			}
			public grdVertrebralLevelsGrid grdVertrebralLevels()
			{
				return (grdVertrebralLevelsGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 416, 48, 416, 568, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
			Container m_tabMotorArea = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Motor Area", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabMotorAreaContainer m_tabMotorAreaContainer = (tabMotorAreaContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMotorAreaContainer.class, m_tabMotorArea, factory);
			super.addContainer(m_tabMotorArea, m_tabMotorAreaContainer);
			ims.framework.utils.SizeInfo m_tabMotorAreaDesignSize = new ims.framework.utils.SizeInfo(416, 568);
			ims.framework.utils.SizeInfo m_tabMotorAreaRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper37.getWidth(), anchoringHelper37.getHeight());
			m_tabMotorAreaContainer.setContext(form, appForm, m_tabMotorArea, loader, form_images_local, contextMenus, startControlID, m_tabMotorAreaDesignSize, m_tabMotorAreaRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 416, 48, 416, 568, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
			Container m_tabMuscleGroup = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Muscle Groups", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabMuscleGroupContainer m_tabMuscleGroupContainer = (tabMuscleGroupContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMuscleGroupContainer.class, m_tabMuscleGroup, factory);
			super.addContainer(m_tabMuscleGroup, m_tabMuscleGroupContainer);
			ims.framework.utils.SizeInfo m_tabMuscleGroupDesignSize = new ims.framework.utils.SizeInfo(416, 568);
			ims.framework.utils.SizeInfo m_tabMuscleGroupRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
			m_tabMuscleGroupContainer.setContext(form, appForm, m_tabMuscleGroup, loader, form_images_local, contextMenus, startControlID, m_tabMuscleGroupDesignSize, m_tabMuscleGroupRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 416, 48, 416, 568, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
			Container m_tabMuscleSelection = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Muscles", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabMuscleSelectionContainer m_tabMuscleSelectionContainer = (tabMuscleSelectionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMuscleSelectionContainer.class, m_tabMuscleSelection, factory);
			super.addContainer(m_tabMuscleSelection, m_tabMuscleSelectionContainer);
			ims.framework.utils.SizeInfo m_tabMuscleSelectionDesignSize = new ims.framework.utils.SizeInfo(416, 568);
			ims.framework.utils.SizeInfo m_tabMuscleSelectionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper39.getWidth(), anchoringHelper39.getHeight());
			m_tabMuscleSelectionContainer.setContext(form, appForm, m_tabMuscleSelection, loader, form_images_local, contextMenus, startControlID, m_tabMuscleSelectionDesignSize, m_tabMuscleSelectionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 416, 48, 416, 568, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
			Container m_tabMuscleEdit = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"New / Update Muscle", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabMuscleEditContainer m_tabMuscleEditContainer = (tabMuscleEditContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMuscleEditContainer.class, m_tabMuscleEdit, factory);
			super.addContainer(m_tabMuscleEdit, m_tabMuscleEditContainer);
			ims.framework.utils.SizeInfo m_tabMuscleEditDesignSize = new ims.framework.utils.SizeInfo(416, 568);
			ims.framework.utils.SizeInfo m_tabMuscleEditRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper40.getWidth(), anchoringHelper40.getHeight());
			m_tabMuscleEditContainer.setContext(form, appForm, m_tabMuscleEdit, loader, form_images_local, contextMenus, startControlID, m_tabMuscleEditDesignSize, m_tabMuscleEditRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabMotorArea().setVisible(false);
			tabMuscleGroup().setVisible(false);
			tabMuscleSelection().setVisible(false);
			tabMuscleEdit().setVisible(false);
		}
		public void showtabMotorArea()
		{
			tabMuscleGroup().setVisible(false);
			tabMuscleSelection().setVisible(false);
			tabMuscleEdit().setVisible(false);
			tabMotorArea().setVisible(true);
		}
		public void showtabMuscleGroup()
		{
			tabMotorArea().setVisible(false);
			tabMuscleSelection().setVisible(false);
			tabMuscleEdit().setVisible(false);
			tabMuscleGroup().setVisible(true);
		}
		public void showtabMuscleSelection()
		{
			tabMotorArea().setVisible(false);
			tabMuscleGroup().setVisible(false);
			tabMuscleEdit().setVisible(false);
			tabMuscleSelection().setVisible(true);
		}
		public void showtabMuscleEdit()
		{
			tabMotorArea().setVisible(false);
			tabMuscleGroup().setVisible(false);
			tabMuscleSelection().setVisible(false);
			tabMuscleEdit().setVisible(true);
		}

		public tabMotorAreaContainer tabMotorArea()
		{
			return (tabMotorAreaContainer)super.layers.get(0);
		}
		public tabMuscleGroupContainer tabMuscleGroup()
		{
			return (tabMuscleGroupContainer)super.layers.get(1);
		}
		public tabMuscleSelectionContainer tabMuscleSelection()
		{
			return (tabMuscleSelectionContainer)super.layers.get(2);
		}
		public tabMuscleEditContainer tabMuscleEdit()
		{
			return (tabMuscleEditContainer)super.layers.get(3);
		}
	}
	public static class cmbFilterComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(String value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(String value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(String value)
		{
			return super.control.removeRow(value);
		}
		public String getValue()
		{
			return (String)super.control.getValue();
		}
		public void setValue(String value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdMotorAreaRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdMotorAreaRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColAreasReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColAreasReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColAreasOpened()
		{
			super.row.showOpened(0);
		}
		public String getColAreas()
		{
			return (String)super.row.get(0);
		}
		public void setColAreas(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColAreasTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(Object value)
		{
			super.row.setValue(value);
		}
		public grdMotorAreaRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdMotorAreaRow(super.row.getParent());
		}
		public grdMotorAreaRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdMotorAreaRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdMotorAreaRowCollection collection;
	}
	public static class grdMotorAreaRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdMotorAreaRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdMotorAreaRow get(int index)
		{
			return new grdMotorAreaRow(super.collection.get(index));
		}
		public grdMotorAreaRow newRow()
		{
			return new grdMotorAreaRow(super.collection.newRow());
		}
		public grdMotorAreaRow newRow(boolean autoSelect)
		{
			return new grdMotorAreaRow(super.collection.newRow(autoSelect));
		}
		public grdMotorAreaRow newRowAt(int index)
		{
			return new grdMotorAreaRow(super.collection.newRowAt(index));
		}
		public grdMotorAreaRow newRowAt(int index, boolean autoSelect)
		{
			return new grdMotorAreaRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdMotorAreaGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdMotorAreaRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdMotorAreaRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdMotorAreaRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdMotorAreaRow[] result = new GenForm.grdMotorAreaRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdMotorAreaRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdMotorAreaRow[] getAllRows(GenForm.grdMotorAreaRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdMotorAreaRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdMotorAreaRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdMotorAreaRow[] result = new GenForm.grdMotorAreaRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdMotorAreaRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdMotorAreaRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdMotorAreaRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdMotorAreaRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		public void setColAreasCaption(String value)
		{
			this.grid.setColumnCaption(0, value);
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		public Object[] getValues()
		{
			Object[] listOfValues = new Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(Object value)
		{
			super.grid.setValue(value);
		}
		public grdMotorAreaRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdMotorAreaRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdMotorAreaRowCollection getRows()
		{
			return new grdMotorAreaRowCollection(super.grid.getRows());
		}
		public grdMotorAreaRow getRowByValue(Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdMotorAreaRow(row);
		}
		public void setColAreasHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColAreasHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuMotorAreaGroupMuscle = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuMotorAreaGroupMuscleADD_AREAItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Motor Area", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleADD_AREAItem);
		contextMenus.contextMenuMotorAreaGroupMuscleUPDATE_AREAItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Motor Area", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleUPDATE_AREAItem);
		contextMenus.contextMenuMotorAreaGroupMuscleREMOVE_AREAItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove Motor Area", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleREMOVE_AREAItem);
		contextMenus.contextMenuMotorAreaGroupMuscleADD_GROUPItem = factory.createMenuItem(startControlID.intValue() + 4, "Add Muscle Group", true, false, new Integer(102179), true, true);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleADD_GROUPItem);
		contextMenus.contextMenuMotorAreaGroupMuscleUPDATE_GROUPItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit Muscle Group", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleUPDATE_GROUPItem);
		contextMenus.contextMenuMotorAreaGroupMuscleREMOVE_GROUPItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove Muscle Group", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleREMOVE_GROUPItem);
		contextMenus.contextMenuMotorAreaGroupMuscleADD_MUSCLEItem = factory.createMenuItem(startControlID.intValue() + 7, "Add Muscle", true, false, new Integer(102179), true, true);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleADD_MUSCLEItem);
		contextMenus.contextMenuMotorAreaGroupMuscleNEW_MUSCLEItem = factory.createMenuItem(startControlID.intValue() + 8, "New Muscle", true, false, new Integer(102179), true, true);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleNEW_MUSCLEItem);
		contextMenus.contextMenuMotorAreaGroupMuscleUPDATE_MUSCLEItem = factory.createMenuItem(startControlID.intValue() + 9, "Update Muscle", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleUPDATE_MUSCLEItem);
		contextMenus.contextMenuMotorAreaGroupMuscleREMOVE_MUSCLEItem = factory.createMenuItem(startControlID.intValue() + 10, "Remove Muscle", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleREMOVE_MUSCLEItem);
		contextMenus.contextMenuMotorAreaGroupMuscleEDIT_MUSCLEItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit Muscle", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleEDIT_MUSCLEItem);
		contextMenus.contextMenuMotorAreaGroupMuscleMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 12, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleMOVE_UPItem);
		contextMenus.contextMenuMotorAreaGroupMuscleMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 13, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuMotorAreaGroupMuscle.add(contextMenus.contextMenuMotorAreaGroupMuscleMOVE_DOWNItem);
		form.registerMenu(contextMenus.contextMenuMotorAreaGroupMuscle);


		// Layer Clasess
		lyrTabsLayer m_lyrTabsLayer = (lyrTabsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTabsLayer.class, this, factory);
		super.addLayer(m_lyrTabsLayer);
		m_lyrTabsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Choose Category:", new Integer(1), null, new Integer(0)}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 136, 16, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbFilterTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbFilterTemp);
		cmbFilterComboBox cmbFilter = (cmbFilterComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFilterComboBox.class, m_cmbFilterTemp);
		super.addComboBox(cmbFilter);

		// Grid Controls
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 384, 568, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdMotorAreaTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(-1), ControlState.EDITABLE, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuMotorAreaGroupMuscle, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdMotorAreaTemp);
		grdMotorAreaGrid grdMotorArea = (grdMotorAreaGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMotorAreaGrid.class, m_grdMotorAreaTemp);
		grdMotorArea.addTreeColumn("Motor Areas / Muscle Groups / Muscles", 0, -1, false, true);
		super.addGrid(grdMotorArea);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrTabsLayer lyrTabs()
	{
		return (lyrTabsLayer)super.getLayer(0);
	}
	public cmbFilterComboBox cmbFilter()
	{
		return (cmbFilterComboBox)super.getComboBox(0);
	}
	public grdMotorAreaGrid grdMotorArea()
	{
		return (grdMotorAreaGrid)super.getGrid(0);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ExpandAll = new ImageHelper(102207, "Images/Core/open_folder.png", new Integer(16), new Integer(16));
				BlueSquare = new ImageHelper(102121, "Images/Core/circle_blue.png", new Integer(16), new Integer(16));
				RedSqaure = new ImageHelper(102122, "Images/Core/circle_red.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ExpandAll;
			public final ims.framework.utils.Image BlueSquare;
			public final ims.framework.utils.Image RedSqaure;
		}
		public final CoreImages Core;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_VertebrallevelCollection = new ims.framework.ContextVariable("VertebrallevelCollection", prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__VertebrallevelCollection_" + componentIdentifier + "");
			cxl_SelectedMotorArea = new ims.framework.ContextVariable("SelectedMotorArea", prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMotorArea_" + componentIdentifier + "");
			cxl_SelectedMuscleGroup = new ims.framework.ContextVariable("SelectedMuscleGroup", prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMuscleGroup_" + componentIdentifier + "");
			cxl_SelectedMuscle = new ims.framework.ContextVariable("SelectedMuscle", prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMuscle_" + componentIdentifier + "");
			cxl_LinkCollection = new ims.framework.ContextVariable("LinkCollection", prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__LinkCollection_" + componentIdentifier + "");
		}
		
		public boolean getVertebrallevelCollectionIsNotNull()
		{
			return !cxl_VertebrallevelCollection.getValueIsNull(context);
		}
		public ims.core.vo.VertebrallevelVoCollection getVertebrallevelCollection()
		{
			return (ims.core.vo.VertebrallevelVoCollection)cxl_VertebrallevelCollection.getValue(context);
		}
		public void setVertebrallevelCollection(ims.core.vo.VertebrallevelVoCollection value)
		{
			cxl_VertebrallevelCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VertebrallevelCollection = null;
		public boolean getSelectedMotorAreaIsNotNull()
		{
			return !cxl_SelectedMotorArea.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.MotorAreaVo getSelectedMotorArea()
		{
			return (ims.clinicaladmin.vo.MotorAreaVo)cxl_SelectedMotorArea.getValue(context);
		}
		public void setSelectedMotorArea(ims.clinicaladmin.vo.MotorAreaVo value)
		{
			cxl_SelectedMotorArea.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedMotorArea = null;
		public boolean getSelectedMuscleGroupIsNotNull()
		{
			return !cxl_SelectedMuscleGroup.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.MuscleGroupsVo getSelectedMuscleGroup()
		{
			return (ims.clinicaladmin.vo.MuscleGroupsVo)cxl_SelectedMuscleGroup.getValue(context);
		}
		public void setSelectedMuscleGroup(ims.clinicaladmin.vo.MuscleGroupsVo value)
		{
			cxl_SelectedMuscleGroup.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedMuscleGroup = null;
		public boolean getSelectedMuscleIsNotNull()
		{
			return !cxl_SelectedMuscle.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.MuscleVo getSelectedMuscle()
		{
			return (ims.clinicaladmin.vo.MuscleVo)cxl_SelectedMuscle.getValue(context);
		}
		public void setSelectedMuscle(ims.clinicaladmin.vo.MuscleVo value)
		{
			cxl_SelectedMuscle.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedMuscle = null;
		public boolean getLinkCollectionIsNotNull()
		{
			return !cxl_LinkCollection.getValueIsNull(context);
		}
		public ims.therapies.vo.MuscleRefVoCollection getLinkCollection()
		{
			return (ims.therapies.vo.MuscleRefVoCollection)cxl_LinkCollection.getValue(context);
		}
		public void setLinkCollection(ims.therapies.vo.MuscleRefVoCollection value)
		{
			if(value != null)
			{
				for(int x = 0; x < value.size(); x++)
				{
					if(value.get(x) != null && (value.get(x).getBoId() == null || value.get(x).getBoId().intValue() < 1))
						throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id found in 'LinkCollection' RefVoCollection context variable.");
				}
			}
			if(value == null)
				cxl_LinkCollection.setValue(context, null);
			else
			{
				ims.therapies.vo.MuscleRefVoCollection copy = new ims.therapies.vo.MuscleRefVoCollection();
				for(int x = 0; x < value.size(); x++)
				{
					copy.add(value.get(x));
				}
				value.clear();
				for(int x = 0; x < copy.size(); x++)
				{
					if(copy.get(x) == null)
						value.add(null);
					else
						value.add(new ims.therapies.vo.MuscleRefVo(copy.get(x).getBoId(), copy.get(x).getBoVersion()));
				}
				cxl_LinkCollection.setValue(context, value);
			}
		}
		private ims.framework.ContextVariable cxl_LinkCollection = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class MotorAreaGroupMuscle implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD_AREA = 1;
			public static final int UPDATE_AREA = 2;
			public static final int REMOVE_AREA = 3;
			public static final int ADD_GROUP = 4;
			public static final int UPDATE_GROUP = 5;
			public static final int REMOVE_GROUP = 6;
			public static final int ADD_MUSCLE = 7;
			public static final int NEW_MUSCLE = 8;
			public static final int UPDATE_MUSCLE = 9;
			public static final int REMOVE_MUSCLE = 10;
			public static final int EDIT_MUSCLE = 11;
			public static final int MOVE_UP = 12;
			public static final int MOVE_DOWN = 13;
		}
		public void disableAllMotorAreaGroupMuscleMenuItems()
		{
			this.contextMenuMotorAreaGroupMuscleADD_AREAItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleUPDATE_AREAItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleREMOVE_AREAItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleADD_GROUPItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleUPDATE_GROUPItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleREMOVE_GROUPItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleADD_MUSCLEItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleNEW_MUSCLEItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleUPDATE_MUSCLEItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleREMOVE_MUSCLEItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleEDIT_MUSCLEItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleMOVE_UPItem.setEnabled(false);
			this.contextMenuMotorAreaGroupMuscleMOVE_DOWNItem.setEnabled(false);
		}
		public void hideAllMotorAreaGroupMuscleMenuItems()
		{
			this.contextMenuMotorAreaGroupMuscleADD_AREAItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleUPDATE_AREAItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleREMOVE_AREAItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleADD_GROUPItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleUPDATE_GROUPItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleREMOVE_GROUPItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleADD_MUSCLEItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleNEW_MUSCLEItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleUPDATE_MUSCLEItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleREMOVE_MUSCLEItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleEDIT_MUSCLEItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleMOVE_UPItem.setVisible(false);
			this.contextMenuMotorAreaGroupMuscleMOVE_DOWNItem.setVisible(false);
		}
		private Menu contextMenuMotorAreaGroupMuscle;
		public MenuItem getMotorAreaGroupMuscleADD_AREAItem()
		{
			return this.contextMenuMotorAreaGroupMuscleADD_AREAItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleADD_AREAItem;
		public MenuItem getMotorAreaGroupMuscleUPDATE_AREAItem()
		{
			return this.contextMenuMotorAreaGroupMuscleUPDATE_AREAItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleUPDATE_AREAItem;
		public MenuItem getMotorAreaGroupMuscleREMOVE_AREAItem()
		{
			return this.contextMenuMotorAreaGroupMuscleREMOVE_AREAItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleREMOVE_AREAItem;
		public MenuItem getMotorAreaGroupMuscleADD_GROUPItem()
		{
			return this.contextMenuMotorAreaGroupMuscleADD_GROUPItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleADD_GROUPItem;
		public MenuItem getMotorAreaGroupMuscleUPDATE_GROUPItem()
		{
			return this.contextMenuMotorAreaGroupMuscleUPDATE_GROUPItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleUPDATE_GROUPItem;
		public MenuItem getMotorAreaGroupMuscleREMOVE_GROUPItem()
		{
			return this.contextMenuMotorAreaGroupMuscleREMOVE_GROUPItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleREMOVE_GROUPItem;
		public MenuItem getMotorAreaGroupMuscleADD_MUSCLEItem()
		{
			return this.contextMenuMotorAreaGroupMuscleADD_MUSCLEItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleADD_MUSCLEItem;
		public MenuItem getMotorAreaGroupMuscleNEW_MUSCLEItem()
		{
			return this.contextMenuMotorAreaGroupMuscleNEW_MUSCLEItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleNEW_MUSCLEItem;
		public MenuItem getMotorAreaGroupMuscleUPDATE_MUSCLEItem()
		{
			return this.contextMenuMotorAreaGroupMuscleUPDATE_MUSCLEItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleUPDATE_MUSCLEItem;
		public MenuItem getMotorAreaGroupMuscleREMOVE_MUSCLEItem()
		{
			return this.contextMenuMotorAreaGroupMuscleREMOVE_MUSCLEItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleREMOVE_MUSCLEItem;
		public MenuItem getMotorAreaGroupMuscleEDIT_MUSCLEItem()
		{
			return this.contextMenuMotorAreaGroupMuscleEDIT_MUSCLEItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleEDIT_MUSCLEItem;
		public MenuItem getMotorAreaGroupMuscleMOVE_UPItem()
		{
			return this.contextMenuMotorAreaGroupMuscleMOVE_UPItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleMOVE_UPItem;
		public MenuItem getMotorAreaGroupMuscleMOVE_DOWNItem()
		{
			return this.contextMenuMotorAreaGroupMuscleMOVE_DOWNItem;
		}
		private MenuItem contextMenuMotorAreaGroupMuscleMOVE_DOWNItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[83];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMotorArea_" + componentIdentifier, "BO-1030100000-ID", "ID_MotorArea");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMotorArea_" + componentIdentifier, "BO-1030100000-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMotorArea_" + componentIdentifier, "BO-1030100000-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMotorArea_" + componentIdentifier, "BO-1030100000-ISACTIVE", "IsActive");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMuscleGroup_" + componentIdentifier, "BO-1030100001-ID", "ID_MuscleGroup");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMuscleGroup_" + componentIdentifier, "BO-1030100001-NAME", "Name");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMuscleGroup_" + componentIdentifier, "BO-1030100001-DESCRIPTION", "Description");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMuscleGroup_" + componentIdentifier, "BO-1030100001-ISACTIVE", "IsActive");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMuscle_" + componentIdentifier, "BO-1030100005-ID", "ID_Muscle");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMuscle_" + componentIdentifier, "BO-1030100005-NAME", "Name");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMuscle_" + componentIdentifier, "BO-1030100005-ISACTIVE", "IsActive");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.MuscleAreaGroupsMuscles.__internal_x_context__SelectedMuscle_" + componentIdentifier, "BO-1030100005-DESCRIPTION", "Description");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
