//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.forms.muscleareagroupsmuscles;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode, ims.framework.interfaces.IClearInfo
{
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbFilterValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelAreaClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveAreaClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelGroupClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveGroupClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelMusclesClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveMusclesClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnDeSelectAllClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddListClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSelectAllClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdSearchMusclesGridCheckBoxClicked(int column, GenForm.lyrTabsLayer.tabMuscleSelectionContainer.grdSearchMusclesRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelNewMuscleClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveNewMuscleClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdMotorAreaSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormOpen();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.cmbFilter().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbFilterValueChanged();
			}
		});
		this.form.lyrTabs().tabMotorArea().btnCancelArea().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelAreaClick();
			}
		});
		this.form.lyrTabs().tabMotorArea().btnSaveArea().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveAreaClick();
			}
		});
		this.form.lyrTabs().tabMuscleGroup().btnCancelGroup().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelGroupClick();
			}
		});
		this.form.lyrTabs().tabMuscleGroup().btnSaveGroup().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveGroupClick();
			}
		});
		this.form.lyrTabs().tabMuscleSelection().btnCancelMuscles().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelMusclesClick();
			}
		});
		this.form.lyrTabs().tabMuscleSelection().btnSaveMuscles().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveMusclesClick();
			}
		});
		this.form.lyrTabs().tabMuscleSelection().btnDeSelectAll().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnDeSelectAllClick();
			}
		});
		this.form.lyrTabs().tabMuscleSelection().btnAddList().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddListClick();
			}
		});
		this.form.lyrTabs().tabMuscleSelection().btnSelectAll().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSelectAllClick();
			}
		});
		this.form.lyrTabs().tabMuscleSelection().imbMuscleClear().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbClearClick();
			}
		});
		this.form.lyrTabs().tabMuscleSelection().imbMuscleSearch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchClick();
			}
		});
		this.form.lyrTabs().tabMuscleSelection().grdSearchMuscles().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdSearchMusclesGridCheckBoxClicked(column, new GenForm.lyrTabsLayer.tabMuscleSelectionContainer.grdSearchMusclesRow(row), isChecked);
			}
		});
		this.form.lyrTabs().tabMuscleEdit().btnCancelNewMuscle().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelNewMuscleClick();
			}
		});
		this.form.lyrTabs().tabMuscleEdit().btnSaveNewMuscle().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveNewMuscleClick();
			}
		});
		this.form.grdMotorArea().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdMotorAreaSelectionChanged();
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleADD_AREAItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.ADD_AREA, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleUPDATE_AREAItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.UPDATE_AREA, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleREMOVE_AREAItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.REMOVE_AREA, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleADD_GROUPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.ADD_GROUP, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleUPDATE_GROUPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.UPDATE_GROUP, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleREMOVE_GROUPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.REMOVE_GROUP, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleADD_MUSCLEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.ADD_MUSCLE, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleNEW_MUSCLEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.NEW_MUSCLE, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleUPDATE_MUSCLEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.UPDATE_MUSCLE, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleREMOVE_MUSCLEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.REMOVE_MUSCLE, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleEDIT_MUSCLEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.EDIT_MUSCLE, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleMOVE_UPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.MOVE_UP, sender);
			}
		});
		this.form.getContextMenus().getMotorAreaGroupMuscleMOVE_DOWNItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MotorAreaGroupMuscle.MOVE_DOWN, sender);
			}
		});
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	public abstract void clearContextInformation();
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
