//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.forms.tumourcategorygroupsites;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode, ims.framework.interfaces.IClearInfo
{
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCustomTreeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrConfigTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onChkCatActiveValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbVersionValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrGroupDetailsTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onQmbLinkedAssessmentTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkOtherClassificationsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkHasTNMValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkReqSerumMarkersValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkReqHistologyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkReqO45ValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkReqDiffValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkPrognosticGroupingValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onTreOtherClassificationTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkGleasonPrognosticGroupingValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkPSAPrognosticGroupingValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkRiskCategoryPrognosticGroupingValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkTumourLocationPrognosticGroupingValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPrognosticLocationSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPrognosticLocationSelectionCleared() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdRiskCategorySelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdRiskCategorySelectionCleared() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPSASelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPSASelectionCleared() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdGleasonSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdGleasonSelectionCleared() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkGroupActiveValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSiteSpecificHistologyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSiteSpecificTNMValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkActiveTNMValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrTNMTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onDynTNMRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupTNMValuesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdHistologySelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdDifferentationCellValueChanged(ims.framework.controls.DynamicGridCell cell);
	abstract protected void onDyngrdDifferentationRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onTreSpecialtyTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdSerumMarkersSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.setcustomTreeValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCustomTreeValueChanged();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.lyrConfig().tabTCategory().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigtabTCategoryActivated();
			}
		});
		this.form.lyrConfig().tabTVersion().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigtabTVersionActivated();
			}
		});
		this.form.lyrConfig().tabTGroup().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigtabTGroupActivated();
			}
		});
		this.form.lyrConfig().tabTSite().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigtabTSiteActivated();
			}
		});
		this.form.lyrConfig().tabTNM().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigtabTNMActivated();
			}
		});
		this.form.lyrConfig().tabHistologyType().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigtabHistologyTypeActivated();
			}
		});
		this.form.lyrConfig().tabHistologyGrade().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigtabHistologyGradeActivated();
			}
		});
		this.form.lyrConfig().tabSpecialties().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigtabSpecialtiesActivated();
			}
		});
		this.form.lyrConfig().tabSerumMarker().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigtabSerumMarkerActivated();
			}
		});
		this.form.lyrConfig().tabPagTaxonomy().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigtabPagTaxonomyActivated();
			}
		});
		this.form.lyrConfig().tabNoDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigtabNoDetailsActivated();
			}
		});
		this.form.lyrConfig().tabTCategory().chkCatActive().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCatActiveValueChanged();
			}
		});
		this.form.lyrConfig().tabTVersion().cmbVersion().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbVersionValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageGroupDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrGroupDetailstabPageGroupDetailsActivated();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabGroupTNM().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrGroupDetailstabGroupTNMActivated();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabClassification().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrGroupDetailstabClassificationActivated();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPrognosticGrouping().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrGroupDetailstabPrognosticGroupingActivated();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageTumourLocation().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrGroupDetailstabPageTumourLocationActivated();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageRiskCategory().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrGroupDetailstabPageRiskCategoryActivated();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPagePSA().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrGroupDetailstabPagePSAActivated();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageGleason().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrGroupDetailstabPageGleasonActivated();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageGroupDetails().qmbLinkedAssessment().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbLinkedAssessmentTextSubmited(value);
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageGroupDetails().chkOtherClassifications().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkOtherClassificationsValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageGroupDetails().chkHasTNM().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkHasTNMValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabGroupTNM().chkReqSerumMarkers().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkReqSerumMarkersValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabGroupTNM().chkReqHistology().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkReqHistologyValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabGroupTNM().chkReqO45().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkReqO45ValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabGroupTNM().chkReqDiff().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkReqDiffValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabGroupTNM().chkPrognosticGrouping().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkPrognosticGroupingValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabClassification().treOtherClassification().setTreeViewSelectionChangedEvent(new TreeViewSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
			{
				onTreOtherClassificationTreeViewSelectionChanged(node);
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPrognosticGrouping().chkGleasonPrognosticGrouping().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkGleasonPrognosticGroupingValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPrognosticGrouping().chkPSAPrognosticGrouping().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkPSAPrognosticGroupingValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPrognosticGrouping().chkRiskCategoryPrognosticGrouping().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkRiskCategoryPrognosticGroupingValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPrognosticGrouping().chkTumourLocationPrognosticGrouping().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkTumourLocationPrognosticGroupingValueChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageTumourLocation().grdPrognosticLocation().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPrognosticLocationSelectionChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageTumourLocation().grdPrognosticLocation().setSelectionClearedEvent(new SelectionCleared()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPrognosticLocationSelectionCleared();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageRiskCategory().grdRiskCategory().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdRiskCategorySelectionChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageRiskCategory().grdRiskCategory().setSelectionClearedEvent(new SelectionCleared()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdRiskCategorySelectionCleared();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPagePSA().grdPSA().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPSASelectionChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPagePSA().grdPSA().setSelectionClearedEvent(new SelectionCleared()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPSASelectionCleared();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageGleason().grdGleason().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdGleasonSelectionChanged();
			}
		});
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageGleason().grdGleason().setSelectionClearedEvent(new SelectionCleared()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdGleasonSelectionCleared();
			}
		});
		this.form.lyrConfig().tabTGroup().chkGroupActive().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkGroupActiveValueChanged();
			}
		});
		this.form.lyrConfig().tabTSite().chkSiteSpecificHistology().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSiteSpecificHistologyValueChanged();
			}
		});
		this.form.lyrConfig().tabTSite().chkSiteSpecificTNM().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSiteSpecificTNMValueChanged();
			}
		});
		this.form.lyrConfig().tabTNM().chkActiveTNM().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkActiveTNMValueChanged();
			}
		});
		this.form.lyrConfig().tabTNM().lyrTNM().tabTNMValues().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTNMtabTNMValuesActivated();
			}
		});
		this.form.lyrConfig().tabTNM().lyrTNM().tabTNMMappings().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTNMtabTNMMappingsActivated();
			}
		});
		this.form.lyrConfig().tabTNM().lyrTNM().tabTNMValues().dynTNM().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDynTNMRowSelectionChanged(row);
			}
		});
		this.form.lyrConfig().tabTNM().GroupTNMValues().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupTNMValuesValueChanged();
			}
		});
		this.form.lyrConfig().tabHistologyType().grdHistology().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdHistologySelectionChanged();
			}
		});
		this.form.lyrConfig().tabHistologyGrade().dyngrdDifferentation().setDynamicGridCellValueChangedEvent(new DynamicGridCellValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdDifferentationCellValueChanged(cell);
			}
		});
		this.form.lyrConfig().tabHistologyGrade().dyngrdDifferentation().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdDifferentationRowSelectionChanged(row);
			}
		});
		this.form.lyrConfig().tabSpecialties().treSpecialty().setTreeViewSelectionChangedEvent(new TreeViewSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
			{
				onTreSpecialtyTreeViewSelectionChanged(node);
			}
		});
		this.form.lyrConfig().tabSerumMarker().grdSerumMarkers().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdSerumMarkersSelectionChanged();
			}
		});
		this.form.getContextMenus().Oncology.getTumourGroupOtherClassificationUpdateClassificationItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.TumourGroupOtherClassification.UpdateClassification, sender);
			}
		});
		this.form.getContextMenus().Oncology.getTumourGroupOtherClassificationRemoveClassificationItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.TumourGroupOtherClassification.RemoveClassification, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupPrognosticLocationADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupPrognosticLocation.ADD, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupPrognosticLocationREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupPrognosticLocation.REMOVE, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupPrognosticRiskADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupPrognosticRisk.ADD, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupPrognosticRiskREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupPrognosticRisk.REMOVE, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupPrognosticPSAADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupPrognosticPSA.ADD, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupPrognosticPSAREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupPrognosticPSA.REMOVE, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupPrognosticGleasonADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupPrognosticGleason.ADD, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupPrognosticGleasonREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupPrognosticGleason.REMOVE, sender);
			}
		});
		this.form.getContextMenus().getTumourCategoryTNMAddTNMItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.TumourCategoryTNM.AddTNM, sender);
			}
		});
		this.form.getContextMenus().getTumourCategoryTNMInactivateTNMItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.TumourCategoryTNM.InactivateTNM, sender);
			}
		});
		this.form.getContextMenus().getTumourCategoryTNMActivateTNMItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.TumourCategoryTNM.ActivateTNM, sender);
			}
		});
		this.form.getContextMenus().Oncology.getTumourHistologyLayerADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.TumourHistologyLayer.ADD, sender);
			}
		});
		this.form.getContextMenus().Oncology.getTumourHistologyLayerSELECTFROMTAXONOMYItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.TumourHistologyLayer.SELECTFROMTAXONOMY, sender);
			}
		});
		this.form.getContextMenus().Oncology.getTumourHistologyLayerREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.TumourHistologyLayer.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Oncology.getTumourHistologyLayerREACTIVATEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.TumourHistologyLayer.REACTIVATE, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupHistologyGradeADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupHistologyGrade.ADD, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupHistologyGradeINACTIVATEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupHistologyGrade.INACTIVATE, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupHistologyGradeREACTIVATEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupHistologyGrade.REACTIVATE, sender);
			}
		});
		this.form.getContextMenus().ClinicalAdmin.getTumourGroupHistologyGradeLOAD_DEFAULTSItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalAdminNamespace.TumourGroupHistologyGrade.LOAD_DEFAULTS, sender);
			}
		});
		this.form.getContextMenus().getGenericGridAddItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.Add, sender);
			}
		});
		this.form.getContextMenus().getGenericGridUpdateItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.Update, sender);
			}
		});
		this.form.getContextMenus().getGenericGridRemoveItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.Remove, sender);
			}
		});
		this.form.getContextMenus().getGenericGridViewItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.View, sender);
			}
		});
		this.form.getContextMenus().getGenericGridMoveUpItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.MoveUp, sender);
			}
		});
		this.form.getContextMenus().getGenericGridMoveDownItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.MoveDown, sender);
			}
		});
		this.form.getContextMenus().getGenericGridReplaceItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.Replace, sender);
			}
		});
		this.form.getContextMenus().getGenericGridConfirmItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.Confirm, sender);
			}
		});
		this.form.getContextMenus().getGenericGridEDIT_VIEW_ICP_ACTIONSItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.EDIT_VIEW_ICP_ACTIONS, sender);
			}
		});
		this.form.getContextMenus().Oncology.getTumourSerumMarkersADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.TumourSerumMarkers.ADD, sender);
			}
		});
		this.form.getContextMenus().Oncology.getTumourSerumMarkersSLECTFROMTAXONOMYItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.TumourSerumMarkers.SLECTFROMTAXONOMY, sender);
			}
		});
		this.form.getContextMenus().Oncology.getTumourSerumMarkersREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.TumourSerumMarkers.REMOVE, sender);
			}
		});
	}
	private void onlyrConfigtabTCategoryActivated()
	{
		this.form.lyrConfig().showtabTCategory();
		onlyrConfigTabChanged(this.form.lyrConfig().tabTCategory());
	}
	private void onlyrConfigtabTVersionActivated()
	{
		this.form.lyrConfig().showtabTVersion();
		onlyrConfigTabChanged(this.form.lyrConfig().tabTVersion());
	}
	private void onlyrConfigtabTGroupActivated()
	{
		this.form.lyrConfig().showtabTGroup();
		onlyrConfigTabChanged(this.form.lyrConfig().tabTGroup());
	}
	private void onlyrConfigtabTSiteActivated()
	{
		this.form.lyrConfig().showtabTSite();
		onlyrConfigTabChanged(this.form.lyrConfig().tabTSite());
	}
	private void onlyrConfigtabTNMActivated()
	{
		this.form.lyrConfig().showtabTNM();
		onlyrConfigTabChanged(this.form.lyrConfig().tabTNM());
	}
	private void onlyrConfigtabHistologyTypeActivated()
	{
		this.form.lyrConfig().showtabHistologyType();
		onlyrConfigTabChanged(this.form.lyrConfig().tabHistologyType());
	}
	private void onlyrConfigtabHistologyGradeActivated()
	{
		this.form.lyrConfig().showtabHistologyGrade();
		onlyrConfigTabChanged(this.form.lyrConfig().tabHistologyGrade());
	}
	private void onlyrConfigtabSpecialtiesActivated()
	{
		this.form.lyrConfig().showtabSpecialties();
		onlyrConfigTabChanged(this.form.lyrConfig().tabSpecialties());
	}
	private void onlyrConfigtabSerumMarkerActivated()
	{
		this.form.lyrConfig().showtabSerumMarker();
		onlyrConfigTabChanged(this.form.lyrConfig().tabSerumMarker());
	}
	private void onlyrConfigtabPagTaxonomyActivated()
	{
		this.form.lyrConfig().showtabPagTaxonomy();
		onlyrConfigTabChanged(this.form.lyrConfig().tabPagTaxonomy());
	}
	private void onlyrConfigtabNoDetailsActivated()
	{
		this.form.lyrConfig().showtabNoDetails();
		onlyrConfigTabChanged(this.form.lyrConfig().tabNoDetails());
	}
	private void onlyrGroupDetailstabPageGroupDetailsActivated()
	{
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().showtabPageGroupDetails();
		onlyrGroupDetailsTabChanged(this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageGroupDetails());
	}
	private void onlyrGroupDetailstabGroupTNMActivated()
	{
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().showtabGroupTNM();
		onlyrGroupDetailsTabChanged(this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabGroupTNM());
	}
	private void onlyrGroupDetailstabClassificationActivated()
	{
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().showtabClassification();
		onlyrGroupDetailsTabChanged(this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabClassification());
	}
	private void onlyrGroupDetailstabPrognosticGroupingActivated()
	{
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().showtabPrognosticGrouping();
		onlyrGroupDetailsTabChanged(this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPrognosticGrouping());
	}
	private void onlyrGroupDetailstabPageTumourLocationActivated()
	{
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().showtabPageTumourLocation();
		onlyrGroupDetailsTabChanged(this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageTumourLocation());
	}
	private void onlyrGroupDetailstabPageRiskCategoryActivated()
	{
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().showtabPageRiskCategory();
		onlyrGroupDetailsTabChanged(this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageRiskCategory());
	}
	private void onlyrGroupDetailstabPagePSAActivated()
	{
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().showtabPagePSA();
		onlyrGroupDetailsTabChanged(this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPagePSA());
	}
	private void onlyrGroupDetailstabPageGleasonActivated()
	{
		this.form.lyrConfig().tabTGroup().lyrGroupDetails().showtabPageGleason();
		onlyrGroupDetailsTabChanged(this.form.lyrConfig().tabTGroup().lyrGroupDetails().tabPageGleason());
	}
	private void onlyrTNMtabTNMValuesActivated()
	{
		this.form.lyrConfig().tabTNM().lyrTNM().showtabTNMValues();
		onlyrTNMTabChanged(this.form.lyrConfig().tabTNM().lyrTNM().tabTNMValues());
	}
	private void onlyrTNMtabTNMMappingsActivated()
	{
		this.form.lyrConfig().tabTNM().lyrTNM().showtabTNMMappings();
		onlyrTNMTabChanged(this.form.lyrConfig().tabTNM().lyrTNM().tabTNMMappings());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	public abstract void clearContextInformation();
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
