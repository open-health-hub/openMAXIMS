//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4077.23636)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.forms.tumoursiteoverallstaging;

import java.util.Comparator;

import ims.clinicaladmin.forms.tumourgroupoverallstaging.GenForm;
import ims.clinicaladmin.vo.SelectedRecordForOverallStagingDialogVo;
import ims.clinicaladmin.vo.TumourGroupSiteOverallStagingLiteVo;
import ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo;
import ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVoCollection;
import ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo;
import ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVoCollection;
import ims.clinicaladmin.vo.TumourGroupVo;
import ims.clinicaladmin.vo.TumourSiteVo;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.oncology.vo.lookups.LookupHelper;
import ims.oncology.vo.lookups.TNMClinicalpathological;
import ims.oncology.vo.lookups.TNMType;
import ims.oncology.vo.lookups.TumourOverallStage;
import ims.oncology.vo.lookups.TumourOverallStageCollection;


public class Logic extends BaseLogic
{
	private class OverallStagingComapartor implements Comparator<TumourGroupSiteOverallStagingVo>
	{
		private int direction;
		private Integer column;

		public OverallStagingComapartor(DynamicGridColumn column, SortOrder order)
		{
			if (column != null && column.getIdentifier() == null)
				throw new CodingRuntimeException("Logical error - All columns in the grid must have an identifier. Check grid initialization");

    		this.column = column != null ? (Integer) column.getIdentifier() : null;
    		
    		this.direction = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}

		public int compare(TumourGroupSiteOverallStagingVo overallStaging1, TumourGroupSiteOverallStagingVo overallStaging2)
		{
			if (column == null)
				return 0;
			
			switch (column)
			{
				case COL_T_VALUE:
					return compareByTValue(overallStaging1, overallStaging2);
						
				case COL_N_VALUE:
					return compareByNValue(overallStaging1, overallStaging2);
					
				case COL_M_VALUE:
					return compareByMValue(overallStaging1, overallStaging2);
					
				case COL_OVERALL:
					return compareByOverallStage(overallStaging1, overallStaging2);
			}

			return 0;
		}

		/**
		 * @param overallStaging1
		 * @param overallStaging2
		 * @return
		 */
		private int compareByTValue(TumourGroupSiteOverallStagingVo overallStaging1, TumourGroupSiteOverallStagingVo overallStaging2)
		{
			if (overallStaging1.getTVal() == null && overallStaging2.getTVal() == null)
				return 0;
			
			if (overallStaging1.getTVal() == null && overallStaging2.getTVal() != null)
				return direction;
			
			if (overallStaging1.getTVal() != null && overallStaging2.getTVal() == null)
				return -1 * direction;
			
			return overallStaging1.getTVal().getTNMValue().compareTo(overallStaging2.getTVal().getTNMValue()) * direction;
		}

		/**
		 * @param overallStaging1
		 * @param overallStaging2
		 * @return
		 */
		private int compareByNValue(TumourGroupSiteOverallStagingVo overallStaging1, TumourGroupSiteOverallStagingVo overallStaging2)
		{
			if (overallStaging1.getNVal() == null && overallStaging2.getNVal() == null)
				return 0;
			
			if (overallStaging1.getNVal() == null && overallStaging2.getNVal() != null)
				return direction;
			
			if (overallStaging1.getNVal() != null && overallStaging2.getNVal() == null)
				return -1 * direction;
			
			return overallStaging1.getNVal().getTNMValue().compareTo(overallStaging2.getNVal().getTNMValue()) * direction;
		}

		/**
		 * @param overallStaging1
		 * @param overallStaging2
		 * @return
		 */
		private int compareByMValue(TumourGroupSiteOverallStagingVo overallStaging1, TumourGroupSiteOverallStagingVo overallStaging2)
		{
			if (overallStaging1.getMVal() == null && overallStaging2.getMVal() == null)
				return 0;
			
			if (overallStaging1.getMVal() == null && overallStaging2.getMVal() != null)
				return direction;
			
			if (overallStaging1.getMVal() != null && overallStaging2.getMVal() == null)
				return -1 * direction;
			
			return overallStaging1.getMVal().getTNMValue().compareTo(overallStaging2.getMVal().getTNMValue()) * direction;
		}

		/**
		 * @param overallStaging1
		 * @param overallStaging2
		 * @return
		 */
		private int compareByOverallStage(TumourGroupSiteOverallStagingVo overallStaging1, TumourGroupSiteOverallStagingVo overallStaging2)
		{
			if (overallStaging1.getOverallStageDescription() == null && overallStaging2.getOverallStageDescription() == null)
				return 0;
			
			if (overallStaging1.getOverallStageDescription() == null && overallStaging2.getOverallStageDescription() != null)
				return direction;
			
			if (overallStaging1.getOverallStageDescription() != null && overallStaging2.getOverallStageDescription() == null)
				return -1 * direction;
			
			return overallStaging1.getOverallStageDescription().getText().compareTo(overallStaging2.getOverallStageDescription().getText()) * direction;
		}

	}

	
	private static final long serialVersionUID = 1L;

	// Constant for DYNAMIC GRID COLUMNS
	private static final int COL_T_VALUE = -171;
	private static final int COL_N_VALUE = -172;
	private static final int COL_M_VALUE = -173;
	private static final int COL_OVERALL = -178;


	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers region
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialize the form (clear local context, hide context menu, initialize dynamic grid)
		initialize();

		// Display data on form
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		// WDEV-12569
		// See if we are adding or creating a new Overall Staging record
		if (form.getForms().ClinicalAdmin.TumourOverallStaging.equals(formName) && DialogResult.OK.equals(result))
		{
			addDynamicGridRow(form.getGlobalContext().Oncology.getSelectedRecordForOverallDialog());
		}
	}

	@Override
	/**
	 * WDEV-12569 - Request confirmation for save from user (occurs when saving with unconfigured stages)
	 */
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (DialogResult.YES.equals(result))
		{
			if (save(false))
			{
				engine.close(DialogResult.OK);
			}
		}
	}

	@Override
	protected void onChkDefaultValueChanged() throws PresentationLogicException
	{
		// Generate all default values
		if (Boolean.TRUE.equals(form.chkDefault().getValue()))
		{
			generateDefaultRecords(form.getGlobalContext().ClinicalAdmin.getTumourGroup(), form.getGlobalContext().ClinicalAdmin.getTumourSite());
		}
		
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onDyngrdOverallRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onDyngrdOverallRowSelectionCleared() throws PresentationLogicException
	{
		// Update controls state
		updateControlsState();
	}
	
	@Override
	protected void onDyngrdOverallColumnHeaderClicked(DynamicGridColumn column)
	{
		if (column.getIdentifier() == null)
			throw new CodingRuntimeException("Logical Error - All columns must have an identifier.");
		
		// Set sorting order for appropriate column
		setColumnSortOrder(column);
		
		// Sort dynamic grid values
		sortOverallRecords(column);
	}

	@Override
	protected void onDyngrdOverallCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getValue() instanceof TumourOverallStage)
		{
			cell.setIdentifier(cell.getValue());

			if (cell.getRow().getValue() instanceof TumourGroupSiteOverallStagingVo)
			{
				TumourGroupSiteOverallStagingVo overall = (TumourGroupSiteOverallStagingVo) cell.getRow().getValue();

				overall.setOverallStageDescription((TumourOverallStage) cell.getValue());
				overall.setIsSaved(Boolean.FALSE);
			}
		}
		else if (cell.getValue() == null)
		{
			cell.setIdentifier(null);

			if (cell.getRow().getValue() instanceof TumourGroupSiteOverallStagingVo)
			{
				TumourGroupSiteOverallStagingVo overall = (TumourGroupSiteOverallStagingVo) cell.getRow().getValue();

				overall.setOverallStageDescription(null);
				overall.setIsSaved(Boolean.FALSE);
			}
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// If save was successful close dialog with OK result
		if (save(true))
		{
			engine.close(DialogResult.OK);
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Close dialog with CANCEL result
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
				break;

			case GenForm.ContextMenus.GenericGrid.Remove:
				inactivateInstance();
				break;
		}

		updateControlsState();
	}


	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation function
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to initialize the form
	 * Clear local context, clear global context, hide context menu options, etc
	 * Initialize components
	 */
	public void initialize() throws FormOpenException
	{
		// Set Tumour Group to label
		form.lblGroupName().setValue(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getGroupName());
		form.lblSiteName().setValue(form.getGlobalContext().ClinicalAdmin.getTumourSite().getName());

		// Clear local context

		// Hide all context menu options && set text
		form.getContextMenus().hideAllGenericGridMenuItems();

		form.getContextMenus().getGenericGridAddItem().setText("Add Overall Staging");
		form.getContextMenus().getGenericGridRemoveItem().setText("Inactivate Overall Staging");

		// Initialize dynamic grid
		initializeDynamicGrid();
	}


	/**
	 * Function used to initialize the dynamic grid for Pre Treatment staging
	 */
	private void initializeDynamicGrid()
	{
		// Clear dynamic grid
		form.dyngrdOverall().clear();

		// Create T column
		DynamicGridColumn column = form.dyngrdOverall().getColumns().newColumn("T", COL_T_VALUE);
		column.setWidth(50);
		column.setSortMode(SortMode.MANUAL);					// WDEV-12569
		// Create N column
		column = form.dyngrdOverall().getColumns().newColumn("N", COL_N_VALUE);
		column.setWidth(50);
		column.setSortMode(SortMode.MANUAL);					// WDEV-12569
		// Create M column
		column = form.dyngrdOverall().getColumns().newColumn("M", COL_M_VALUE);
		column.setWidth(50);
		column.setSortMode(SortMode.MANUAL);					// WDEV-12569

		// WDEV-13091
		// Only T, N, M columns are relevant for an OverallStaging recorded at Tumour Site level
		// The rest are removed

		// Column for Overall staging value
		column = form.dyngrdOverall().getColumns().newColumn("Overall Staging", COL_OVERALL);
		column.setWidth(120);
		column.setSortMode(SortMode.MANUAL);					// WDEV-12569
	}


	/**
	 * Function used to display data on screen (refresh the screen) when form opens
	 * Will retrieve records from domain, display them, set the form to EDIT mode
	 */
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear grid
		clearInstanceControls();

		// Populate overalls
		populateOverallStagingToScreen(domain.listOverall(form.getGlobalContext().ClinicalAdmin.getTumourSite()), true);

		// Set form mode to EDIT
		form.setMode(FormMode.EDIT);
	}

	private void sortOverallRecords(DynamicGridColumn column)
	{
		// Get grid values
		TumourGroupSiteOverallStagingVoCollection gridValues = populateOverallStagingFromScreen(false);
		
		if (column != null && column.getIdentifier() == null)
			throw new CodingRuntimeException("Logical error - All grid columns must have identifiers! Check grid initialization!");
		
		if (column != null)
		{
			switch ((Integer) column.getIdentifier())
			{
				case COL_T_VALUE:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_T()));
					break;

				case COL_N_VALUE:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_N()));
					break;

				case COL_M_VALUE:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_M()));
					break;

				case COL_OVERALL:
					gridValues.sort(new OverallStagingComapartor(column, form.getLocalContext().getSortOrder_Overall()));
					break;				
			}
		}
		
		populateOverallStagingToScreen(gridValues, false);
	}

	private void setColumnSortOrder(DynamicGridColumn column)
	{
		if (column != null && column.getIdentifier() == null)
			throw new CodingRuntimeException("Logical Error - All grid columns must have an identifier. Check grid initialization");
		
		// Toggle between ASCENDING and DESCENDING sort mode
		// In the case where sort mode has not been set then default to ASCENDING sort mode
		// Each line will toggle if the column matches, else the sort mode will be cleared (null)
		form.getLocalContext().setSortOrder_T(column != null && column.getIdentifier().equals(COL_T_VALUE) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_T()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		form.getLocalContext().setSortOrder_N(column != null && column.getIdentifier().equals(COL_N_VALUE) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_N()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		form.getLocalContext().setSortOrder_M(column != null && column.getIdentifier().equals(COL_M_VALUE) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_M()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
		form.getLocalContext().setSortOrder_Overall(column != null && column.getIdentifier().equals(COL_OVERALL) ? (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder_Overall()) ? SortOrder.DESCENDING : SortOrder.ASCENDING) : null);
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// WDEV-12569
		// Set global context collection from screen
		form.getGlobalContext().Oncology.setOverallStagingDynamicGridCollection(populateOverallStagingFromScreen(false));

		// HACK Clear record global context
		SelectedRecordForOverallStagingDialogVo newRecord = new SelectedRecordForOverallStagingDialogVo();
		newRecord.setSelectedGroupRecord(form.getGlobalContext().ClinicalAdmin.getTumourGroup());
		newRecord.setSelectedSiteRecord(form.getGlobalContext().ClinicalAdmin.getTumourSite());
		form.getGlobalContext().Oncology.setSelectedRecordForOverallDialog(newRecord);

		// Open dialog
		engine.open(form.getForms().ClinicalAdmin.TumourOverallStaging);
	}

	private void inactivateInstance()
	{
		if (form.dyngrdOverall().getSelectedRow() == null || !(form.dyngrdOverall().getSelectedRow().getValue() instanceof TumourGroupSiteOverallStagingVo))
			throw new CodingRuntimeException("Major Logical Error - Can not inactivate null selected row or unexpected value");


		// Get selected row value
		((TumourGroupSiteOverallStagingVo)form.dyngrdOverall().getSelectedRow().getValue()).setIsActive(Boolean.FALSE);

		// Update row back colour
		form.dyngrdOverall().getSelectedRow().setBackColor(Color.Crimson);
	}


	/**
	 * <b>WDEV-12569</b>
	 * <br>Function used to save Overall Staging collection configured for Tumour Site
	 * @param checkUnconfiguredStages - if set to <b>true</b>, then check for unconfigured Overall Staging records
	 * 
	 * @return <b>true</b> - if data has been committed to database, <b>false</b> - otherwise
	 */
	public boolean save(boolean checkUnconfiguredStages) throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			// WDEV-12569
			// Get collection from screen
			TumourGroupSiteOverallStagingVoCollection overallStaging = populateOverallStagingFromScreen(!checkUnconfiguredStages);

			// If records with no value or with TOBECONFIGURED (-2151) value exist
			// then let user decide whether to proceed with save
			if (checkUnconfiguredStages && hasUnconfiguredStages())
			{
				engine.showMessage("There are records without a valid stage allocated. Do you still wish to proceed with Save?", "Tumour Site Staging", MessageButtons.YESNO);
				return false;
			}

			// Validate collection
			String[] errors = overallStaging.validate();

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt domain save
			domain.saveOverall(overallStaging);

			return true;
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
	}

	/**
	 * WDEV-12569
	 * Function used to check for stages not yet configured for the tumour site 
	 */
	private boolean hasUnconfiguredStages()
	{
		// Check for overall value (other values should be populated)
		for (int i = 0; i < form.dyngrdOverall().getRows().size(); i++)
		{
			DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_OVERALL);
			DynamicGridRow row = form.dyngrdOverall().getRows().get(i);

			// If the row has an active overall value
			// Use the LiteVo version for value as this is the smallest type of VO
			if (row.getValue() instanceof TumourGroupSiteOverallStagingLiteVo && ((TumourGroupSiteOverallStagingLiteVo)row.getValue()).getIsActive())
			{
				DynamicGridCell cell = row.getCells().get(column);

				// If the value is null or TOBECONFIGURED (-2151) then return as having stages not configured
				if (cell.getValue() == null || TumourOverallStage.TOBECONFIGURED.equals(cell.getValue()))
					return true;
			}
		}

		// All stages are configured
		return false;
	}

	/**
	 * Function used to clear the screen
	 * It will only clear controls values, not local or global contexts
	 */
	public void clearInstanceControls()
	{
		// Clear dynamic grid
		form.dyngrdOverall().getRows().clear();
	}

	public void updateControlsState()
	{
		// Update context menu options
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(form.dyngrdOverall().getSelectedRow() != null
				&& form.dyngrdOverall().getSelectedRow().getValue() instanceof TumourGroupSiteOverallStagingVo
				&& Boolean.TRUE.equals(((TumourGroupSiteOverallStagingVo)form.dyngrdOverall().getSelectedRow().getValue()).getIsActive()));

		form.chkDefault().setEnabled(form.dyngrdOverall().getRows().size() == 0);
	}


	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange functions
	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
	private void populateOverallStagingToScreen(TumourGroupSiteOverallStagingVoCollection listOverall, boolean fromOpen)
	{
		// Clear grid rows
		form.dyngrdOverall().getRows().clear();

		// Check collection - if it is null terminate function
		if (listOverall == null)
			return;


		for (TumourGroupSiteOverallStagingVo overall : listOverall)
		{
			if (fromOpen)
			{
				overall.setIsSaved(Boolean.TRUE);
			}
			
			addNewOverallStaging(overall);
		}
	}

	/**
	 * @param overall
	 */
	private void addNewOverallStaging(TumourGroupSiteOverallStagingVo overall)
	{
		// Create new row for each value in collection
		DynamicGridRow overallRow = form.dyngrdOverall().getRows().newRow();

		// Create cell for T Value
		DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_T_VALUE);
		DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(overall.getTValIsNotNull() ? overall.getTVal().getTNMValue() : "");
		cell.setReadOnly(true);

		// Create cell for N Value
		column = form.dyngrdOverall().getColumns().getByIdentifier(COL_N_VALUE);
		cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(overall.getNValIsNotNull() ? overall.getNVal().getTNMValue() : "");
		cell.setReadOnly(true);

		// Create cell for M Value
		column = form.dyngrdOverall().getColumns().getByIdentifier(COL_M_VALUE);
		cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(overall.getMValIsNotNull() ? overall.getMVal().getTNMValue() : "");
		cell.setReadOnly(true);

		// WDEV-13091
		// Only T, N, M values are relevant for an Overall Staging recorded at Tumour Site level
		// The rest of the values were removed


		// Create cell for Overall staging value
		column = form.dyngrdOverall().getColumns().getByIdentifier(COL_OVERALL);
		
		if (!Boolean.TRUE.equals(overall.getIsSaved()) || !overall.getOverallStageDescriptionIsNotNull() || (TumourOverallStage.TOBECONFIGURED.equals(overall.getOverallStageDescription()) && Boolean.TRUE.equals(overall.getIsActive())))
		{
			cell = overallRow.getCells().newCell(column, DynamicCellType.ENUMERATION);
			bindOverallValue(cell);
			cell.setValue(overall.getOverallStageDescription());
			cell.setReadOnly(false);
			cell.setAutoPostBack(true);
		}
		else
		{
    		cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
    		cell.setValue(overall.getOverallStageDescription().getText());
    		cell.setReadOnly(true);
		}


		// Set row background for inactive records
		if (!Boolean.TRUE.equals(overall.getIsActive()))
			overallRow.setBackColor(Color.Crimson);

		// Set overall record to row
		overallRow.setValue(overall);
	}


	/**
	 * <b>WDEV-12569</b>
	 * Function used to retrieve Overall Staging collection from screen
	 * @param setToBeConfigured - if set to <b>true</b>, function will replace <b>null</b> Overall Stage Description values with <b>TOBECONFIGURED</b> (-2151)
	 *  
	 * @return Overall Staging records collection configured for Tumour Site
	 */
	private TumourGroupSiteOverallStagingVoCollection populateOverallStagingFromScreen(boolean setToBeConfigured)
	{
		TumourGroupSiteOverallStagingVoCollection overallStaging = new TumourGroupSiteOverallStagingVoCollection();

		for (int i = 0; i < form.dyngrdOverall().getRows().size(); i++)
		{
			if (form.dyngrdOverall().getRows().get(i).getValue() instanceof TumourGroupSiteOverallStagingVo)
			{
				TumourGroupSiteOverallStagingVo staging = (TumourGroupSiteOverallStagingVo) form.dyngrdOverall().getRows().get(i).getValue();

				if (setToBeConfigured && !staging.getOverallStageDescriptionIsNotNull())
					staging.setOverallStageDescription(TumourOverallStage.TOBECONFIGURED);

				overallStaging.add(staging);
			}
		}

		return overallStaging;
	}


	private void addDynamicGridRow(SelectedRecordForOverallStagingDialogVo overall)
	{
		if (overall == null)
			return;

		// Create Overall VO to be added to dynamic grid
		TumourGroupSiteOverallStagingVo tumourOverall = new TumourGroupSiteOverallStagingVo();

		// HACK because the TumourGoupOverall Staging is discarding tumour group and tumour site
		tumourOverall.setTGroup(form.getGlobalContext().ClinicalAdmin.getTumourGroup());
		tumourOverall.setTSite(form.getGlobalContext().ClinicalAdmin.getTumourSite());

		tumourOverall.setIsActive(Boolean.TRUE);

		// Get TNM values
		for (TumourGroupSiteTNMValueListVo tumourGroupSiteTNM : overall.getTNMValues())
		{
			if (TNMType.T.equals(tumourGroupSiteTNM.getTNMType()))
			{
				tumourOverall.setTVal(tumourGroupSiteTNM);
				continue;
			}

			if (TNMType.N.equals(tumourGroupSiteTNM.getTNMType()))
			{
				tumourOverall.setNVal(tumourGroupSiteTNM);
				continue;
			}

			if (TNMType.M.equals(tumourGroupSiteTNM.getTNMType()))
			{
				tumourOverall.setMVal(tumourGroupSiteTNM);
			}
		}

		// Get Overall Staging
		tumourOverall.setOverallStageDescription(overall.getOverallValue());

		addNewOverallStaging(tumourOverall);
	}


	private void generateDefaultRecords(TumourGroupVo group, TumourSiteVo site)
	{
		// Check group parameter
		if (site == null)
			return;

		// Separate T, N and M collection values
		TumourGroupSiteTNMValueListVoCollection TValues = new TumourGroupSiteTNMValueListVoCollection();
		TumourGroupSiteTNMValueListVoCollection NValues = new TumourGroupSiteTNMValueListVoCollection();
		TumourGroupSiteTNMValueListVoCollection MValues = new TumourGroupSiteTNMValueListVoCollection();

		if (site.getTNMValuesIsNotNull())
		{
			for (TumourGroupSiteTNMValueListVo tumourGroupSiteTNM : site.getTNMValues())
			{
				// WDEV-13259
				// Pathological T, N, M values are not used for OverallStaging so exclude them
				if (TNMClinicalpathological.PATHOLOGICALONLY.equals(tumourGroupSiteTNM.getClinicalPathological()))
					continue;
				
				if (!Boolean.TRUE.equals(tumourGroupSiteTNM.getIsActive()))
					continue;

				if (TNMType.T.equals(tumourGroupSiteTNM.getTNMType()))
				{
					TValues.add(tumourGroupSiteTNM);
					continue;
				}

				if (TNMType.N.equals(tumourGroupSiteTNM.getTNMType()))
				{
					NValues.add(tumourGroupSiteTNM);
					continue;
				}

				if (TNMType.M.equals(tumourGroupSiteTNM.getTNMType()))
				{
					MValues.add(tumourGroupSiteTNM);
				}
			}
		}

		// Check T values
		if (TValues == null || TValues.size() == 0)
		{
			engine.showMessage("No TNM T Type values exist and they are required to create Overall Staging values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
			form.chkDefault().setValue(false);
			return;
		}
		// Check N values
		if (NValues == null || NValues.size() == 0)
		{
			engine.showMessage("No TNM N Type values exist and they are required to create Overall Staging values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
			form.chkDefault().setValue(false);
			return;
		}
		// Check M values
		if (MValues == null || MValues.size() == 0)
		{
			engine.showMessage("No TNM M Type values exist and they are required to create Overall Staging values.", "Missing data", MessageButtons.OK, MessageIcon.WARNING);
			form.chkDefault().setValue(false);
			return;
		}

		for (int indexTVal = 0; indexTVal < TValues.size(); indexTVal++)
		{
			for (int indexNVal = 0; indexNVal < NValues.size(); indexNVal++)
			{
				for (int indexMVal = 0; indexMVal < MValues.size(); indexMVal++)
				{
					addOverallStagingRow(TValues.get(indexTVal), NValues.get(indexNVal), MValues.get(indexMVal));
				}
			}
		}
	}

	private void addOverallStagingRow(TumourGroupSiteTNMValueListVo tValue, TumourGroupSiteTNMValueListVo nValue, TumourGroupSiteTNMValueListVo mValue)
	{
		// Create new row
		DynamicGridRow overallRow = form.dyngrdOverall().getRows().newRow();

		// Create overall value
		TumourGroupSiteOverallStagingVo overall = new TumourGroupSiteOverallStagingVo();

		// Create cell for T value
		DynamicGridColumn column = form.dyngrdOverall().getColumns().getByIdentifier(COL_T_VALUE);
		DynamicGridCell cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(tValue != null ? tValue.getTNMValue() : "");
		cell.setReadOnly(true);
		overall.setTVal(tValue);

		// Create cell for N value
		column = form.dyngrdOverall().getColumns().getByIdentifier(COL_N_VALUE);
		cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(nValue != null ? nValue.getTNMValue() : "");
		cell.setReadOnly(true);
		overall.setNVal(nValue);

		// Create cell for M value
		column = form.dyngrdOverall().getColumns().getByIdentifier(COL_M_VALUE);
		cell = overallRow.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(mValue != null ? mValue.getTNMValue() : "");
		cell.setReadOnly(true);
		overall.setMVal(mValue);

		// WDEV-13091
		// Only T, N, M values are relevant for an Overall Staging recorded at Tumour Site level
		// The rest of the values were removed

		// Create cell for Overall Staging value
		column = form.dyngrdOverall().getColumns().getByIdentifier(COL_OVERALL);
		cell = overallRow.getCells().newCell(column, DynamicCellType.ENUMERATION);
		cell.setAutoPostBack(true);

		bindOverallValue(cell);
		cell.setValue(LookupHelper.getTumourOverallStage(domain.getLookupService()));
		cell.setIdentifier(LookupHelper.getTumourOverallStage(domain.getLookupService()));

		overall.setIsActive(Boolean.TRUE);
		overall.setTGroup(form.getGlobalContext().ClinicalAdmin.getTumourGroup());
		overall.setTSite(form.getGlobalContext().ClinicalAdmin.getTumourSite());

		overallRow.setValue(overall);
	}

	protected final void bindOverallValue(DynamicGridCell typeCell)
	{
		TumourOverallStageCollection lookupCollection = LookupHelper.getTumourOverallStage(domain.getLookupService());

		for (int x = 0; x < lookupCollection.size(); x++)
		{
			// Replaced @deprecated method
			// typeCell.getItems().newItem(lookupCollection.get(x), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			typeCell.getItems().newItem(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
}
