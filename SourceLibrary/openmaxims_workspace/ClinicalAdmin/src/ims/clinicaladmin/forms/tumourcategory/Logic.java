//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.53 build 2651.24225)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.tumourcategory;

import ims.clinicaladmin.vo.TumourCategoryListVo;
import ims.clinicaladmin.vo.TumourCategoryListVoCollection;
import ims.clinicaladmin.vo.TumourCategoryVersionGroupsLiteVo;
import ims.clinicaladmin.vo.TumourCategoryVersionGroupsLiteVoCollection;
import ims.clinicaladmin.vo.TumourGroupListVo;
import ims.clinicaladmin.vo.TumourGroupListVoCollection;
import ims.clinicaladmin.vo.TumourSiteListVo;
import ims.clinicaladmin.vo.TumourSiteListVoCollection;
import ims.framework.Control;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Image;
import ims.oncology.configuration.vo.TNMStagingClassificationVersionRefVo;
import ims.oncology.configuration.vo.TumourCategoryRefVo;
import ims.oncology.configuration.vo.TumourCategoryVersionGroupsRefVo;
import ims.oncology.configuration.vo.TumourGroupRefVo;
import ims.oncology.vo.enums.TumourCategory;
import ims.vo.ValueObject;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Component interface methods region
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// Refresh tree	
	public void refresh()
	{
		open();
	}
	
	public void setComponentMode(FormMode mode) 
	{	
		if (mode.equals(FormMode.EDIT))
		{
			form.setMode(FormMode.EDIT);
		}
		else
		{
			form.setMode(FormMode.VIEW);
		}
	}
	
	public ValueObject getSelectedNod()
	{
		// WDEV-13087
		// Pass a clone value to main form
		// This way the value in the tree will not be modified until the form saves (commits) changes to database
		if (!form.getLocalContext().getSelectedNodeIsNotNull())
			return null;
		
		return (ValueObject) form.getLocalContext().getSelectedNode().clone();
	}

	public void setContextMenuForConfiguration(Boolean value) 
	{
		form.getLocalContext().setDisplayContextMenuFor(TumourCategory.CONFIGURATION);
		enableContextMenu();
	}

	public void showHideOverallContextMenu(TumourCategory menu, Boolean value) 
	{
		if (menu.equals(TumourCategory.OVERALLSTAGING))
			form.getContextMenus().getTumourCategoryOverallStagingItem().setVisible(value.booleanValue());
	}
	
	public void setContextMenuForInstantiation(Boolean value) 
	{
		form.getLocalContext().setDisplayContextMenuFor(TumourCategory.INSTANTIATION);
		enableContextMenu();
	}

	public TumourCategory getContextMenuSelected() 
	{
		return form.getLocalContext().getContextMenuSelected();
	}

	public void clear() 
	{
		form.treCategoryGroupSite().clear();
		clearAllLocalContext();
	}

	public void clearSelectedNod()
	{
		form.getLocalContext().setContextMenuSelected(null);
	}
	
	public void clearContextMenuSelected()
	{
		form.getLocalContext().setContextMenuSelected(null);
	}

	public ValueObject getParentNod()
	{
		TreeNode node = form.treCategoryGroupSite().getSelectedNode();
		
		if (node == null)
			return null;
		
		if (node.getParent() == null)
			return null;
		
		return (ValueObject) node.getParent().getValue();
//		
//		//Category
//		if (node.getParent() == null)
//		{
//			form.getLocalContext().setParentNode(null);
//		}
//		else
//		{
//			//Group
//			if (node.getParent().getParent() == null)
//			{
//				form.getLocalContext().setParentNode((ValueObject) node.getParent().getValue());
//			}
//			//Site
//			else
//			{
//				form.getLocalContext().setParentNode((ValueObject) node.getParent().getValue());
//			}
//		}
//		
//		return form.getLocalContext().getParentNode();
	}
	
	public ValueObject getRootNod()
	{
		TreeNode node = form.treCategoryGroupSite().getSelectedNode();
		
		if (node == null)
			return null;
		
		while (node.getParent() != null)
			node = node.getParent();
		
		return (ValueObject) node.getValue();
	}

	public TNMStagingClassificationVersionRefVo getSelectedBranchVersion()
	{
		TreeNode node = form.treCategoryGroupSite().getSelectedNode();
		
		if (node == null)
			return null;
		
		while (node.getParent() != null)
		{
			if (node.getValue() instanceof TumourCategoryVersionGroupsLiteVo)
				return ((TumourCategoryVersionGroupsLiteVo)node.getValue()).getTNMVersion();
			
			node = node.getParent();
		}

		return null;
	}

	public void setValue(ValueObject value) 
	{
		if (value == null)
			return;		
		
		form.getLocalContext().setCurrentValue(value);
		
		if (value instanceof TumourCategoryListVo)	
		{
			//List all categories
			open(); 
			
			//Set tree value to current category
			form.treCategoryGroupSite().setValue(value);
			refreshTree();	
		}
		else if (value instanceof TumourCategoryVersionGroupsLiteVo)
		{
			open();
			
			// Add new version
			if (form.getLocalContext().getSelectedValueIsNotNull() &&
					form.getLocalContext().getSelectedValue() instanceof TumourCategoryListVo)
			{
				form.treCategoryGroupSite().setValue(form.getLocalContext().getSelectedValue());
				refreshTree();
				form.treCategoryGroupSite().setValue(value);
			}
			// Edited version 
			else if (form.getLocalContext().getSelectedValueIsNotNull() &&
					form.getLocalContext().getSelectedValue() instanceof TumourCategoryVersionGroupsLiteVo)
			{
				form.treCategoryGroupSite().setValue(value);
				
				TumourCategoryListVo parentNode = (TumourCategoryListVo) getParentNod();
				form.treCategoryGroupSite().setValue(parentNode);
				refreshTree();
				
				form.treCategoryGroupSite().setValue(value);
			}
		}
		else if (value instanceof TumourGroupListVo)
		{	
			//Add new group - Category is selected
			if (form.getLocalContext().getSelectedValueIsNotNull() &&
					form.getLocalContext().getSelectedValue() instanceof TumourCategoryVersionGroupsLiteVo)
			{ 	
				//Set tree value to current category
				form.treCategoryGroupSite().setValue(form.getLocalContext().getSelectedValue());
				refreshTree();
				form.treCategoryGroupSite().setValue(value);
			}
			//Add new group - Group is selected
			else if (form.getLocalContext().getSelectedValueIsNotNull() &&
					form.getLocalContext().getSelectedValue() instanceof TumourGroupListVo)
			{
				form.treCategoryGroupSite().setValue(value);
				
				TumourCategoryVersionGroupsLiteVo parentNode = (TumourCategoryVersionGroupsLiteVo) getParentNod();
				form.treCategoryGroupSite().setValue(parentNode);
				refreshTree();		

				form.treCategoryGroupSite().setValue(value);
			} 
		}
		else if (value instanceof TumourSiteListVo)
		{
			//Add new site - Group is selected
			if (form.getLocalContext().getSelectedValueIsNotNull() &&
					form.getLocalContext().getSelectedValue() instanceof TumourGroupListVo)
			{
				//Set tree value to current site
				form.treCategoryGroupSite().setValue(form.getLocalContext().getSelectedValue());
				refreshTree();
			}
			//Add new site - Site is selected
			else if (form.getLocalContext().getSelectedValueIsNotNull() &&
					form.getLocalContext().getSelectedValue() instanceof TumourSiteListVo)
			{
				form.treCategoryGroupSite().setValue(value);

				TumourGroupListVo parentNod = (TumourGroupListVo) getParentNod();
				form.treCategoryGroupSite().setValue(parentNod);
				refreshTree();
				
				form.treCategoryGroupSite().setValue(form.getLocalContext().getCurrentValue());
				refreshTree();
			} 
		}
		
		selectSavedRecord(value);
	}

	
	// WDEV-12304 - Temporary fix, the expand, collapse of the tree should not send value change event for the component
	// These functions will clear the local context from event and will return the state (that an event is sent or not)
	// or evaluate if an event is set. In the forms that use the component use clearEvent() function after reading the event

	public void clearEvent()
	{
		form.getLocalContext().setSendEvent(Boolean.FALSE);
	}

	public Boolean hasEvent()
	{
		return form.getLocalContext().getSendEvent();
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers region
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		clearAllLocalContext();
		open();
	}

	
	@Override
	protected void onFormModeChanged()
	{
		enableContextMenu();
	}

	@Override
	protected void onChkActiveValueChanged() throws PresentationLogicException 
	{
		clearAllContextMenu();				//wdev-13097
		open();
		
		fireEvent();
	}
	
	@Override
	protected void onTreCategoryGroupSiteTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException 
	{
		if (node == null)
			return;
		
		treeCategoryGroupSiteSelectionChanged(node);
		
		ValueObject nodValue = (ValueObject) node.getValue();
		
		form.getLocalContext().setContextMenuSelected(null);
		form.getLocalContext().setSelectedNode(nodValue);
		form.getLocalContext().setSelectedValue(nodValue);
		
		enableContextMenu();
		
		fireEvent();
	}
	
	@Override
	protected void onTreCategoryGroupSiteTreeViewSelectionCleared() throws PresentationLogicException 
	{
		form.treCategoryGroupSite().clearSelection();
		clearContextMenuSelected();
		clearSelectedNod();
		clearAllContextMenu();
		form.getLocalContext().setSelectedNode(null); 
		displayContextMenu(true, true, false, false, false, false, false, false, false, false, true);
		//WDEV-18093 
		fireEvent();
				
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.TumourCategory.ADI :
				onMenuClick(TumourCategory.ADITIONALDATAITEMS);
			break;
			
			case GenForm.ContextMenus.TumourCategory.HDI :
				onMenuClick(TumourCategory.ADITIONALHISTOPATHOLOGYITEMS);
			break;
			
			case GenForm.ContextMenus.TumourCategory.NewCategory :
				onMenuClick(TumourCategory.NEWCATEGORY);
			break;
			
			case GenForm.ContextMenus.TumourCategory.EditCategory :
				onMenuClick(TumourCategory.EDITCATEGORY);
			break;
			
			case GenForm.ContextMenus.TumourCategory.NewVersion:
				onMenuClick(TumourCategory.NEWVERSION);
			break;
			
			case GenForm.ContextMenus.TumourCategory.NewGroup :
				onMenuClick(TumourCategory.NEWGROUP);
			break;
			
			case GenForm.ContextMenus.TumourCategory.EditGroup :
				onMenuClick(TumourCategory.EDITGROUP);
			break;
			
			case GenForm.ContextMenus.TumourCategory.NewSite :
				onMenuClick(TumourCategory.NEWSITE);
			break;
			
			case GenForm.ContextMenus.TumourCategory.EditSite :
				onMenuClick(TumourCategory.EDITSITE);
			break;
			
			case GenForm.ContextMenus.TumourCategory.OverallStaging :
				onMenuClick(TumourCategory.OVERALLSTAGING);
			break;
			
			case GenForm.ContextMenus.TumourCategory.OverallPrognostic:
				onMenuClick(TumourCategory.OVERALLPROGNOSTIC);
		}
	}

	private void onMenuClick(TumourCategory selectedMenu) 
	{
		form.getLocalContext().setContextMenuSelected(selectedMenu);
		//form.getLocalContext().setSelectedNode(null);
		fireEvent();
	}

	
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions region
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	private void initialize()
	{
		form.getLocalContext().setSendEvent(Boolean.FALSE);
		form.chkActive().setValue(true);
	}

	private void open() 
	{
		TumourCategoryListVoCollection list = domain.listCategorys();
		
		if (list != null &&	list.size() > 0)
		{
			clear();
			populateCategoryGroupSiteTree(list);
		}
		enableContextMenu();
	}

	private void populateCategoryGroupSiteTree(TumourCategoryListVoCollection voCategoryColl) 
	{	
		clear();		
		populateCategory(voCategoryColl);
	}
	
	private void enableContextMenu()
	{
		TreeNode node = form.treCategoryGroupSite().getSelectedNode();
		boolean showContextMenu = isContextMenuVisible() && form.getMode().equals(FormMode.VIEW);
		boolean isInstantiationContextMenuVisible = false;
		boolean isConfigurationContextMenuVisible = false;
		boolean categorySelected = false;
		boolean groupSelected = false;
		boolean groupTNM = false;
		boolean groupPrognostic = false;
		boolean siteSelected = false;
		boolean siteTNM = false;
		boolean overallStaging = groupSelected & siteSelected;
	
		if (node != null &&
				node.getValue() != null)
		{		
			categorySelected = node.getValue() instanceof  TumourCategoryListVo;
			groupSelected = node.getValue() instanceof TumourGroupListVo;
			groupTNM = (node.getValue() instanceof TumourGroupListVo) && Boolean.TRUE.equals(((TumourGroupListVo)node.getValue()).getHasTNM());
			groupPrognostic = (node.getValue() instanceof TumourGroupListVo) && Boolean.TRUE.equals(((TumourGroupListVo)node.getValue()).getIsPrognosticGroupingRelevant());
			siteSelected = node.getValue()instanceof TumourSiteListVo;
			siteTNM = (node.getValue() instanceof TumourSiteListVo) && Boolean.TRUE.equals(((TumourSiteListVo)node.getValue()).getHasSiteSpecificTNM());
			
			//TODO: remove this
			form.getLocalContext().setIsContextMenuVisible(true);
			
			if (form.getLocalContext().getDisplayContextMenuForIsNotNull())
			{
				isInstantiationContextMenuVisible = form.getLocalContext().getDisplayContextMenuFor().equals(TumourCategory.INSTANTIATION);
				isConfigurationContextMenuVisible =	form.getLocalContext().getDisplayContextMenuFor().equals(TumourCategory.CONFIGURATION);
				
				if (isInstantiationContextMenuVisible)
					isConfigurationContextMenuVisible = false;
				
				if (isConfigurationContextMenuVisible)
					isInstantiationContextMenuVisible = false;
			}
			
			displayContextMenu(showContextMenu, 
								isInstantiationContextMenuVisible, 
									isConfigurationContextMenuVisible,
										categorySelected,
											groupSelected,
												groupTNM,
													groupPrognostic,
														siteSelected,
															siteTNM,
																overallStaging,
																	false);		
		}
		
		//if no records or no nod selected
		if (form.treCategoryGroupSite().getNodes().size() == 0 ||
				form.treCategoryGroupSite().getSelectedNode() == null)
		{
			displayContextMenu(showContextMenu, 
					isInstantiationContextMenuVisible, 
						isConfigurationContextMenuVisible,
							categorySelected,
								groupSelected,
									groupTNM,
										groupPrognostic,
											siteSelected,
												siteTNM,
													overallStaging,	
														true);
		}
	}

	private void displayContextMenu(boolean showContextMenu, 
			boolean isInstantiationContextMenuVisible, 
				boolean isConfigurationContextMenuVisible, 
					boolean categorySelected,
						boolean groupSelected,
							boolean groupTNM,
								boolean groupPrognostic,
									boolean siteSelected,
										boolean siteTNM,
											boolean overallStaging,
												boolean noRecords) 
	{
		if (!noRecords)
		{
			//Configuration Screen
			form.getContextMenus().getTumourCategoryNewCategoryItem().setVisible(true);
			form.getContextMenus().getTumourCategoryEditCategoryItem().setVisible
				(showContextMenu && isConfigurationContextMenuVisible && categorySelected);
			
			form.getContextMenus().getTumourCategoryNewVersionItem().setVisible(form.treCategoryGroupSite().getValue() instanceof TumourCategoryListVo);
			
			form.getContextMenus().getTumourCategoryNewGroupItem().setVisible(showContextMenu && isConfigurationContextMenuVisible && 
																				form.treCategoryGroupSite().getValue() instanceof TumourCategoryVersionGroupsLiteVo);
			form.getContextMenus().getTumourCategoryEditGroupItem().setVisible
				(showContextMenu && isConfigurationContextMenuVisible && groupSelected);
			// WDEV-12172 - Show the new site option only when a group is selected
			form.getContextMenus().getTumourCategoryNewSiteItem().setVisible(showContextMenu && isConfigurationContextMenuVisible && groupSelected);
			form.getContextMenus().getTumourCategoryEditSiteItem().setVisible
				(showContextMenu && isConfigurationContextMenuVisible && siteSelected);
			form.getContextMenus().getTumourCategoryOverallStagingItem().setVisible
				(showContextMenu && isConfigurationContextMenuVisible && ((siteSelected && siteTNM) || (groupSelected && groupTNM)));
			form.getContextMenus().getTumourCategoryOverallPrognosticItem().setVisible
				(showContextMenu && isConfigurationContextMenuVisible && groupPrognostic);
	
			//Instantiation Screen
			form.getContextMenus().getTumourCategoryADIItem().setVisible
				(showContextMenu && isInstantiationContextMenuVisible);
			form.getContextMenus().getTumourCategoryHDIItem().setVisible
				(showContextMenu && isInstantiationContextMenuVisible);
		}
		else
		{
			form.getContextMenus().getTumourCategoryNewCategoryItem().setVisible(noRecords);
			form.getContextMenus().getTumourCategoryOverallStagingItem().setVisible(false);
			form.getContextMenus().getTumourCategoryOverallPrognosticItem().setVisible(false);
		}
	}

	private boolean isContextMenuVisible()
	{
		Boolean isContextMenuVisible = form.getLocalContext().getIsContextMenuVisible();
		return isContextMenuVisible != null ? isContextMenuVisible.booleanValue() : false;
	}
	
	private boolean showActive()
	{
		return form.chkActive().getValue();
	}
	
	private void populateCategory(TumourCategoryListVoCollection voColl) 
	{
		if (voColl == null)
			return;
		
		for (int i = 0; i < voColl.size(); i++)
		{
			TumourCategoryListVo voCategory = voColl.get(i);
			
			if (voCategory.getIsActive().booleanValue() == false && showActive())
				continue;
			
			TreeNode categoryNode = null;
			categoryNode = form.treCategoryGroupSite().getNodes().add(voCategory, voCategory.getCategoryName());
			
			Image img = voCategory.getIsActive().booleanValue() ? form.getImages().Core.OpenFolder : form.getImages().Core.ClosedFolder;			
			categoryNode.setCollapsedImage(img);
			categoryNode.setExpandedImage(img);
			
			if (voCategory.getVersionGroupsIsNotNull() &&
					voCategory.getVersionGroups().size() > 0)
			{
				categoryNode.setExpanded(false);
			}		
		}
	}
	
	private void populateVersions(TumourCategoryVersionGroupsLiteVoCollection groupVersions, TreeNode categoryNode)
	{
		if (groupVersions == null)
			return;
		
		for (TumourCategoryVersionGroupsLiteVo version : groupVersions)
		{
			// TODO Add check for active / non-active
			
			TreeNode versionNode = categoryNode.getNodes().add(version, version.getTNMVersion().getVersionNumber());
			
			versionNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			versionNode.setExpandedImage(form.getImages().Core.OpenFolder);

			if (version.getGroupsIsNotNull() && version.getGroups().size() > 0)
			{
				versionNode.setExpanded(false);
			}
		}
	}

	private void populateGroups(TumourGroupListVoCollection groups, TreeNode categoryNode) 
	{
		if (groups == null)
			return;
		
		TreeNode groupNode = null;
		for(int i=0; i < groups.size(); i++)
		{
			TumourGroupListVo voGroup = groups.get(i);
			
			if (voGroup.getIsActive().booleanValue() == false && showActive())
				continue;
			
			Image img = voGroup.getIsActive().booleanValue() ? form.getImages().Core.New : form.getImages().Core.NewDisabled;			
			groupNode = categoryNode.getNodes().add(voGroup, voGroup.getGroupName());
			groupNode.setCollapsedImage(img);
			groupNode.setExpandedImage(img);
			groupNode.setExpanded(true);
			
			if (voGroup.getSitesIsNotNull() &&
					voGroup.getSites().size() > 0)
			{
				categoryNode.setExpanded(false);
			}
		}
	}
	
	private void populateSites(TumourSiteListVoCollection collection, TreeNode categoryNode) 
	{
		if (collection == null)
			return;
		
		TreeNode siteNode = null;
		for(int i=0; i < collection.size(); i++)
		{
			TumourSiteListVo voSite = collection.get(i);
			
			if (voSite.getIsActive().booleanValue() == false && showActive())
				continue;
			
			Image img = voSite.getIsActive().booleanValue() ? form.getImages().Clinical.BlueSphere : form.getImages().Clinical.BlueSphere;			
			siteNode = categoryNode.getNodes().add(voSite, voSite.getName());
			siteNode.setCollapsedImage(img);
			siteNode.setExpandedImage(img);
			siteNode.setExpanded(true);
		}
	}

	private void treeCategoryGroupSiteSelectionChanged(TreeNode node) 
	{
		if (node == null)
			return;
		
		if (node.getValue() instanceof TumourCategoryListVo)
		{
			node.getNodes().clear();
			populateVersions(domain.listVersions((TumourCategoryRefVo) node.getValue()), node);
			node.setExpanded(true);
		}
		else if (node.getValue() instanceof TumourCategoryVersionGroupsLiteVo)
		{
			node.getParent().setExpanded(true);
			node.getNodes().clear();
			populateGroups(domain.listGroups((TumourCategoryVersionGroupsRefVo) node.getValue()), node);
			node.setExpanded(true);
		}
		
		else if (node.getValue() instanceof TumourGroupListVo)
		{
			node.getParent().setExpanded(true);
			node.getNodes().clear();
			populateSites(domain.listSites((TumourGroupRefVo)node.getValue()), node);
			node.setExpanded(true);
		}
	}

	private void fireEvent()
	{
		form.getLocalContext().setSendEvent(Boolean.TRUE);
		form.fireCustomControlValueChanged();
	}
	
	private void clearAllLocalContext() 
	{
		clearSelectedNod();
		clearContextMenuSelected();
		form.getLocalContext().setIsContextMenuVisible(null);
		form.getLocalContext().setSelectedNode(null);
	}

	private void clearAllContextMenu() 
	{
		// Easier and safer (not to mention cleaner)
		form.getContextMenus().hideAllTumourCategoryMenuItems();
	}
	
	private void refreshTree() 
	{
		try 
		{
			onTreCategoryGroupSiteTreeViewSelectionChanged(form.treCategoryGroupSite().getSelectedNode());
		} 
		catch (PresentationLogicException e) 
		{
			e.printStackTrace();
		}
	}
	
	private void selectSavedRecord(ValueObject value) 
	{
		form.treCategoryGroupSite().setValue(value);
		try 
		{
			onTreCategoryGroupSiteTreeViewSelectionChanged(form.treCategoryGroupSite().getNodeByValue(value));
		} 
		catch (PresentationLogicException e) 
		{
			e.printStackTrace();
		}
	}
}
