//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.forms.invasivedeviceconfig;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbDurationUnitComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.TimeUnitsSecondsToMonths getValue()
			{
				return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
			{
				super.control.setValue(value);
			}
		}
		public static class grdSizeRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdSizeRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolSizeReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolSizeReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolSizeOpened()
			{
				super.row.showOpened(0);
			}
			public String getcolSize()
			{
				return (String)super.row.get(0);
			}
			public void setcolSize(String value)
			{
				super.row.set(0, value);
			}
			public void setCellcolSizeTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVo getValue()
			{
				return (ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVo)super.row.getValue();
			}
			public void setValue(ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdSizeRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdSizeRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdSizeRow get(int index)
			{
				return new grdSizeRow(super.collection.get(index));
			}
			public grdSizeRow newRow()
			{
				return new grdSizeRow(super.collection.newRow());
			}
			public grdSizeRow newRow(boolean autoSelect)
			{
				return new grdSizeRow(super.collection.newRow(autoSelect));
			}
			public grdSizeRow newRowAt(int index)
			{
				return new grdSizeRow(super.collection.newRowAt(index));
			}
			public grdSizeRow newRowAt(int index, boolean autoSelect)
			{
				return new grdSizeRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdSizeGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVoCollection getValues()
			{
				ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVoCollection listOfValues = new ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVo getValue()
			{
				return (ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVo)super.grid.getValue();
			}
			public void setValue(ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVo value)
			{
				super.grid.setValue(value);
			}
			public grdSizeRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdSizeRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdSizeRowCollection getRows()
			{
				return new grdSizeRowCollection(super.grid.getRows());
			}
			public grdSizeRow getRowByValue(ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdSizeRow(row);
			}
			public void setcolSizeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolSizeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
		}
		public static class grdTypeRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdTypeRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolTypeReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolTypeReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolTypeOpened()
			{
				super.row.showOpened(0);
			}
			public String getcolType()
			{
				return (String)super.row.get(0);
			}
			public void setcolType(String value)
			{
				super.row.set(0, value);
			}
			public void setCellcolTypeTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolDurationReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolDurationReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolDurationOpened()
			{
				super.row.showOpened(1);
			}
			public Integer getcolDuration()
			{
				return (Integer)super.row.get(1);
			}
			public void setcolDuration(Integer value)
			{
				super.row.set(1, value);
			}
			public void setCellcolDurationTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setcolDurationUnitReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean iscolDurationUnitReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showcolDurationUnitOpened()
			{
				super.row.showOpened(2);
			}
			public ims.core.vo.lookups.TimeUnitsSecondsToMonths getcolDurationUnit()
			{
				return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.row.get(2);
			}
			public void setcolDurationUnit(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
			{
				super.row.set(2, value, true);
			}
			public void setCellcolDurationUnitTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setcolActiveReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean iscolActiveReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showcolActiveOpened()
			{
				super.row.showOpened(3);
			}
			public boolean getcolActive()
			{
				return ((Boolean)super.row.get(3)).booleanValue();
			}
			public void setcolActive(boolean value)
			{
				super.row.set(3, new Boolean(value));
			}
			public void setCellcolActiveTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public ims.clinicaladmin.vo.InvasiveDeviceTypeVo getValue()
			{
				return (ims.clinicaladmin.vo.InvasiveDeviceTypeVo)super.row.getValue();
			}
			public void setValue(ims.clinicaladmin.vo.InvasiveDeviceTypeVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdTypeRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdTypeRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdTypeRow get(int index)
			{
				return new grdTypeRow(super.collection.get(index));
			}
			public grdTypeRow newRow()
			{
				return new grdTypeRow(super.collection.newRow());
			}
			public grdTypeRow newRow(boolean autoSelect)
			{
				return new grdTypeRow(super.collection.newRow(autoSelect));
			}
			public grdTypeRow newRowAt(int index)
			{
				return new grdTypeRow(super.collection.newRowAt(index));
			}
			public grdTypeRow newRowAt(int index, boolean autoSelect)
			{
				return new grdTypeRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdTypeGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.clinicaladmin.vo.InvasiveDeviceTypeVoCollection getValues()
			{
				ims.clinicaladmin.vo.InvasiveDeviceTypeVoCollection listOfValues = new ims.clinicaladmin.vo.InvasiveDeviceTypeVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.clinicaladmin.vo.InvasiveDeviceTypeVo getValue()
			{
				return (ims.clinicaladmin.vo.InvasiveDeviceTypeVo)super.grid.getValue();
			}
			public void setValue(ims.clinicaladmin.vo.InvasiveDeviceTypeVo value)
			{
				super.grid.setValue(value);
			}
			public grdTypeRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdTypeRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdTypeRowCollection getRows()
			{
				return new grdTypeRowCollection(super.grid.getRows());
			}
			public grdTypeRow getRowByValue(ims.clinicaladmin.vo.InvasiveDeviceTypeVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdTypeRow(row);
			}
			public void setcolTypeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolTypeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolDurationHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolDurationHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setcolDurationUnitHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getcolDurationUnitHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public GridComboBox colDurationUnitComboBox()
			{
				return new GridComboBox(super.grid, 2);
			}
			public void setcolActiveHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getcolActiveHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 432, 8, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 232, 8, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Size:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 98, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Duration unit:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 66, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Duration:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 34, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Device:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 112, 32, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 112, 96, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbDurationUnitTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbDurationUnitTemp);
			cmbDurationUnitComboBox cmbDurationUnit = (cmbDurationUnitComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDurationUnitComboBox.class, m_cmbDurationUnitTemp);
			super.addComboBox(cmbDurationUnit);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 112, 184, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Requires Sites", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 112, 136, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Has Types", Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 112, 160, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Requires VIP", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 112, 208, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.FALSE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 232, 32, 184, 192, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdSizeTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdSizeTemp);
			grdSizeGrid grdSize = (grdSizeGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSizeGrid.class, m_grdSizeTemp);
			grdSize.addStringColumn("Size", 0, 0, -1, false, false, 0, 255, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdSize);
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 432, 32, 360, 192, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdTypeTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuInvasiveDeviceConfigType, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdTypeTemp);
			grdTypeGrid grdType = (grdTypeGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTypeGrid.class, m_grdTypeTemp);
			grdType.addStringColumn("Type", 0, 0, 100, false, false, 0, 50, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdType.addIntColumn("Duration", 0, 0, 100, false, true, null, false, 0, true);
			grdType.addComboBoxColumn("Duration unit", 0, 0, 100, false, true, false, false, true, -1);
			grdType.addBoolColumn("Active", 0, 0, -1, false, false, 0, true);
			super.addGrid(grdType);
	
			// IntBox Controls
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 112, 64, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public TextBox txtDevice()
		{
			return (TextBox)super.getControl(5);
		}
		public cmbDurationUnitComboBox cmbDurationUnit()
		{
			return (cmbDurationUnitComboBox)super.getComboBox(0);
		}
		public CheckBox chkRequiresSites()
		{
			return (CheckBox)super.getControl(7);
		}
		public CheckBox chkHasType()
		{
			return (CheckBox)super.getControl(8);
		}
		public CheckBox chkRequiresVIP()
		{
			return (CheckBox)super.getControl(9);
		}
		public CheckBox chkActive()
		{
			return (CheckBox)super.getControl(10);
		}
		public grdSizeGrid grdSize()
		{
			return (grdSizeGrid)super.getGrid(0);
		}
		public grdTypeGrid grdType()
		{
			return (grdTypeGrid)super.getGrid(1);
		}
		public IntBox intDuration()
		{
			return (IntBox)super.getControl(13);
		}
	}
	public static class grdListRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdListRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolDeviceReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolDeviceReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolDeviceOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolDevice()
		{
			return (String)super.row.get(0);
		}
		public void setcolDevice(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolDeviceTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolDurationReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolDurationReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolDurationOpened()
		{
			super.row.showOpened(1);
		}
		public Integer getcolDuration()
		{
			return (Integer)super.row.get(1);
		}
		public void setcolDuration(Integer value)
		{
			super.row.set(1, value);
		}
		public void setCellcolDurationTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolDurationUnitReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolDurationUnitReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolDurationUnitOpened()
		{
			super.row.showOpened(2);
		}
		public ims.core.vo.lookups.TimeUnitsSecondsToMonths getcolDurationUnit()
		{
			return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.row.get(2);
		}
		public void setcolDurationUnit(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
		{
			super.row.set(2, value, true);
		}
		public void setCellcolDurationUnitTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolSizeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolSizeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolSizeOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolSize()
		{
			return (String)super.row.get(3);
		}
		public void setcolSize(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolSizeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolIsActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolIsActiveReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolIsActiveOpened()
		{
			super.row.showOpened(4);
		}
		public ims.framework.utils.Image getcolIsActive()
		{
			return (ims.framework.utils.Image)super.row.get(4);
		}
		public void setcolIsActive(ims.framework.utils.Image value)
		{
			super.row.set(4, value);
		}
		public void setCellcolIsActiveTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo getValue()
		{
			return (ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo)super.row.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdListRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdListRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdListRow get(int index)
		{
			return new grdListRow(super.collection.get(index));
		}
		public grdListRow newRow()
		{
			return new grdListRow(super.collection.newRow());
		}
		public grdListRow newRow(boolean autoSelect)
		{
			return new grdListRow(super.collection.newRow(autoSelect));
		}
		public grdListRow newRowAt(int index)
		{
			return new grdListRow(super.collection.newRowAt(index));
		}
		public grdListRow newRowAt(int index, boolean autoSelect)
		{
			return new grdListRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdListGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.clinicaladmin.vo.InvasiveDeviceConfigShortVoCollection getValues()
		{
			ims.clinicaladmin.vo.InvasiveDeviceConfigShortVoCollection listOfValues = new ims.clinicaladmin.vo.InvasiveDeviceConfigShortVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo getValue()
		{
			return (ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo)super.grid.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo value)
		{
			super.grid.setValue(value);
		}
		public grdListRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdListRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdListRowCollection getRows()
		{
			return new grdListRowCollection(super.grid.getRows());
		}
		public grdListRow getRowByValue(ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdListRow(row);
		}
		public void setcolDeviceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolDeviceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolDurationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolDurationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolDurationUnitHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolDurationUnitHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public GridComboBox colDurationUnitComboBox()
		{
			return new GridComboBox(super.grid, 2);
		}
		public void setcolSizeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolSizeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolIsActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolIsActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.contextMenuInvasiveDeviceConfigType = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuInvasiveDeviceConfigTypeAddItem = factory.createMenuItem(startControlID.intValue() + 10, "Add Type", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuInvasiveDeviceConfigType.add(contextMenus.contextMenuInvasiveDeviceConfigTypeAddItem);
		contextMenus.contextMenuInvasiveDeviceConfigTypeRemoveItem = factory.createMenuItem(startControlID.intValue() + 11, "Remove Type", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuInvasiveDeviceConfigType.add(contextMenus.contextMenuInvasiveDeviceConfigTypeRemoveItem);
		contextMenus.contextMenuInvasiveDeviceConfigTypeUpdateItem = factory.createMenuItem(startControlID.intValue() + 12, "Edit Type", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuInvasiveDeviceConfigType.add(contextMenus.contextMenuInvasiveDeviceConfigTypeUpdateItem);
		contextMenus.contextMenuInvasiveDeviceConfigTypeInactivateItem = factory.createMenuItem(startControlID.intValue() + 13, "Inactivate Type", true, false, new Integer(102151), true, false);
		contextMenus.contextMenuInvasiveDeviceConfigType.add(contextMenus.contextMenuInvasiveDeviceConfigTypeInactivateItem);
		form.registerMenu(contextMenus.contextMenuInvasiveDeviceConfigType);
		contextMenus.contextMenuLIP = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuLIPNewItem = factory.createMenuItem(startControlID.intValue() + 14, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPNewItem);
		contextMenus.contextMenuLIPUpdateItem = factory.createMenuItem(startControlID.intValue() + 15, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPUpdateItem);
		form.registerMenu(contextMenus.contextMenuLIP);


		// Container Clasess
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 312, 816, 256, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 256);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 816, 280, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuLIP, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdListTemp);
		grdListGrid grdList = (grdListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdListGrid.class, m_grdListTemp);
		grdList.addStringColumn("Device", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdList.addIntColumn("Duration", 0, 0, 150, true, true, null, false, 0, true);
		grdList.addComboBoxColumn("Duration Unit", 0, 0, 150, true, true, false, false, true, -1);
		grdList.addStringColumn("Size", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdList.addImageColumn("Active", 0, 1, -1, true, 0);
		super.addGrid(grdList);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(1);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public grdListGrid grdList()
	{
		return (grdListGrid)super.getGrid(0);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image Delete;
		}
		public final CoreImages Core;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_EditedRecord = new ims.framework.ContextVariable("EditedRecord", prefix + "_lv_ClinicalAdmin.InvasiveDeviceConfig.__internal_x_context__EditedRecord_" + componentIdentifier + "");
		}
		
		public boolean getEditedRecordIsNotNull()
		{
			return !cxl_EditedRecord.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.InvasiveDeviceConfigVo getEditedRecord()
		{
			return (ims.clinicaladmin.vo.InvasiveDeviceConfigVo)cxl_EditedRecord.getValue(context);
		}
		public void setEditedRecord(ims.clinicaladmin.vo.InvasiveDeviceConfigVo value)
		{
			cxl_EditedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditedRecord = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class InvasiveDeviceConfigType implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 10;
			public static final int Remove = 11;
			public static final int Update = 12;
			public static final int Inactivate = 13;
		}
		public void disableAllInvasiveDeviceConfigTypeMenuItems()
		{
			this.contextMenuInvasiveDeviceConfigTypeAddItem.setEnabled(false);
			this.contextMenuInvasiveDeviceConfigTypeRemoveItem.setEnabled(false);
			this.contextMenuInvasiveDeviceConfigTypeUpdateItem.setEnabled(false);
			this.contextMenuInvasiveDeviceConfigTypeInactivateItem.setEnabled(false);
		}
		public void hideAllInvasiveDeviceConfigTypeMenuItems()
		{
			this.contextMenuInvasiveDeviceConfigTypeAddItem.setVisible(false);
			this.contextMenuInvasiveDeviceConfigTypeRemoveItem.setVisible(false);
			this.contextMenuInvasiveDeviceConfigTypeUpdateItem.setVisible(false);
			this.contextMenuInvasiveDeviceConfigTypeInactivateItem.setVisible(false);
		}
		private Menu contextMenuInvasiveDeviceConfigType;
		public MenuItem getInvasiveDeviceConfigTypeAddItem()
		{
			return this.contextMenuInvasiveDeviceConfigTypeAddItem;
		}
		private MenuItem contextMenuInvasiveDeviceConfigTypeAddItem;
		public MenuItem getInvasiveDeviceConfigTypeRemoveItem()
		{
			return this.contextMenuInvasiveDeviceConfigTypeRemoveItem;
		}
		private MenuItem contextMenuInvasiveDeviceConfigTypeRemoveItem;
		public MenuItem getInvasiveDeviceConfigTypeUpdateItem()
		{
			return this.contextMenuInvasiveDeviceConfigTypeUpdateItem;
		}
		private MenuItem contextMenuInvasiveDeviceConfigTypeUpdateItem;
		public MenuItem getInvasiveDeviceConfigTypeInactivateItem()
		{
			return this.contextMenuInvasiveDeviceConfigTypeInactivateItem;
		}
		private MenuItem contextMenuInvasiveDeviceConfigTypeInactivateItem;
		public final class LIP implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int New = 14;
			public static final int Update = 15;
		}
		public void disableAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setEnabled(false);
			this.contextMenuLIPUpdateItem.setEnabled(false);
		}
		public void hideAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setVisible(false);
			this.contextMenuLIPUpdateItem.setVisible(false);
		}
		private Menu contextMenuLIP;
		public MenuItem getLIPNewItem()
		{
			return this.contextMenuLIPNewItem;
		}
		private MenuItem contextMenuLIPNewItem;
		public MenuItem getLIPUpdateItem()
		{
			return this.contextMenuLIPUpdateItem;
		}
		private MenuItem contextMenuLIPUpdateItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[79];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InvasiveDeviceConfig.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1073100015-ID", "ID_InvasiveDeviceConfig");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InvasiveDeviceConfig.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1073100015-INVASIVEDEVICE", "InvasiveDevice");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InvasiveDeviceConfig.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1073100015-DURATIONINT", "DurationInt");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InvasiveDeviceConfig.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1073100015-DURATIONUNIT", "DurationUnit");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InvasiveDeviceConfig.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1073100015-ISACTIVE", "IsActive");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InvasiveDeviceConfig.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1073100015-REQUIRESVIP", "RequiresVIP");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InvasiveDeviceConfig.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1073100015-HASSITE", "HasSite");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InvasiveDeviceConfig.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1073100015-HASTYPES", "HasTypes");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
