//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.53 build 2663.17474)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.tumourgroupselect;

import ims.clinicaladmin.forms.tumourgroupselect.GenForm.grdTumourGroupRow;
import ims.clinicaladmin.vo.StagingClassificationVo;
import ims.clinicaladmin.vo.TumourGroupListVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		loadTumourGroups();
		open();
	}
	
	private void open()
	{
		loadTumourGroupForClassification(form.getGlobalContext().getSelectedStagingClassificationVo());
	}

	private void loadTumourGroups()
	{
		form.grdTumourGroup().getRows().clear();
		
		TumourGroupListVoCollection tumourVoColl = domain.listTumourGroup();
		if (tumourVoColl != null && tumourVoColl.size() > 0)
		{
			for (int j = 0 ; j < tumourVoColl.size() ; j++)
			{
				if (tumourVoColl.get(j).getIsActive().booleanValue())
				{
					grdTumourGroupRow rowTumour = form.grdTumourGroup().getRows().newRow();
					rowTumour.setColTumourGroups(tumourVoColl.get(j).getGroupName());
					rowTumour.setValue(tumourVoColl.get(j));
				}
			}
		}		
	}

	private void loadTumourGroupForClassification(StagingClassificationVo scVo)
	{
		TumourGroupListVoCollection tumourVoColl = null;
		
		//WDEV-16567
		tumourVoColl=form.getGlobalContext().ClinicalAdmin.getChosenTumourGroupListVoCollection();
		
		if (tumourVoColl != null && tumourVoColl.size() > 0)
		{
			for (int i = 0 ; i < form.grdTumourGroup().getRows().size() ; i++)
			{
				grdTumourGroupRow rowTumour = form.grdTumourGroup().getRows().get(i);
				for (int j = 0 ; j < tumourVoColl.size() ; j++)
				{
					if (rowTumour.getValue().getID_TumourGroup().equals(tumourVoColl.get(j).getID_TumourGroup()))
						rowTumour.setColSelect(true);
				}
			}
		}		
	}

	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		TumourGroupListVoCollection tgColl = new TumourGroupListVoCollection(); 
		for (int i = 0 ; i < form.grdTumourGroup().getRows().size() ; i++)
		{
			if (form.grdTumourGroup().getRows().get(i).getColSelect())
				tgColl.add(form.grdTumourGroup().getRows().get(i).getValue());
		}
		
		form.getGlobalContext().ClinicalAdmin.setChosenTumourGroupListVoCollection(tgColl);

		engine.close(DialogResult.OK);
		
/*		try 
		{
			for (int i = 0 ; i < form.grdTumourGroup().getRows().size() ; i++)
			{
				//for each tumour group check to see if this classification is in its Otherclassifications list
				//if it is not and selected add it, save
				//if it is and not selected remove it, save
				//else do nothing
				boolean bFoundClass = false;
				
				grdTumourGroupRow row = form.grdTumourGroup().getRows().get(i);
				if (row.getValue().getOtherClassifications().contains(form.getGlobalContext().getSelectedStagingClassificationVo()))
					bFoundClass = true;

				if (bFoundClass && ! row.getColSelect())
				{
					row.getValue().getOtherClassifications().remove(form.getGlobalContext().getSelectedStagingClassificationVo());
					if (row.getValue().getOtherClassifications().size() == 0)
						row.getValue().setHasOtherClassifications(false);
					
					domain.saveTumourGroup(row.getValue());
				}
				if (! bFoundClass && row.getColSelect())
				{
					row.getValue().setHasOtherClassifications(true);
					row.getValue().getOtherClassifications().add(form.getGlobalContext().getSelectedStagingClassificationVo());
					
					domain.saveTumourGroup(row.getValue());
				}
			}
			
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
*/		
	}
}
