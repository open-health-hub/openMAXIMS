//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2315.17237)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.specialtyhotlistconfiguration; 

import ims.clinicaladmin.vo.CancerImagingHotlistItemVoCollection;
import ims.clinicaladmin.vo.CancerImagingHotlistVo;
import ims.clinicaladmin.vo.DiagnosisHotListVo;
import ims.clinicaladmin.vo.DiagnosisHotlistItemVoCollection;
import ims.clinicaladmin.vo.ProblemHotlistItemVoCollection;
import ims.clinicaladmin.vo.ProblemHotlistVo;
import ims.clinicaladmin.vo.ProcedureHotlistItemVoCollection;
import ims.clinicaladmin.vo.ProcedureHotlistVo;
import ims.clinicaladmin.vo.enums.CciType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.vo.ValueObject;
import ims.vo.interfaces.IHotlist;
import ims.vo.interfaces.IHotlistItem;
import ims.vo.interfaces.IHotlistShort;
import ims.clinicaladmin.forms.specialtyhotlistconfiguration.GenForm.rdoGrpEnumeration;
import ims.domain.exceptions.DomainRuntimeException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String waitMsg = "Please wait...";
	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();		
		open(); 
	}
	
	private void initialize()
	{
		form.rdoGrp().setVisible(rdoGrpEnumeration.rdoCancerImaging, ConfigFlag.UI.USE_CANCER_IMAGING.getValue());
		if (isDiagnosisConfigScreen())
			form.rdoGrp().setValue(rdoGrpEnumeration.rdoDiagnosis);
		else if (isProblemConfigScreen())
			form.rdoGrp().setValue(rdoGrpEnumeration.rdoProblems);
		else if (isCancerImagingConfigScreen())
			form.rdoGrp().setValue(rdoGrpEnumeration.rdoCancerImaging);
		else
			form.rdoGrp().setValue(rdoGrpEnumeration.rdoProcedures);
			
		formatScreenCci(form.rdoGrp().getValue());	
	}

	private boolean isDiagnosisConfigScreen()
	{
		return engine.getFormName().equals(form.getForms().ClinicalAdmin.DiagnosisSpecialtyHotlistConfiguration);
	}

	private boolean isProblemConfigScreen()
	{
		return engine.getFormName().equals(form.getForms().ClinicalAdmin.ProblemSpecialtyHotlistConfiguration);
	}

	private boolean isCancerImagingConfigScreen()
	{
		return engine.getFormName().equals(form.getForms().ClinicalAdmin.CancerImagingSpecialtyHotlistConfiguration);
	}

	/**
	 * Sets the local context CciType value based on the radio button selection. 
	 * Also sets the text onscreen to suit the cci type. 
	 * @param rdoGrpEnumeration
	 * @return void
	 */
	private void formatScreenCci(rdoGrpEnumeration rdoOption) 
	{
		if ( rdoOption.equals(rdoGrpEnumeration.rdoDiagnosis) )
		{
			form.getLocalContext().setcurrentCciType(CciType.DIAGNOSIS);
			engine.setCaption("Diagnosis Specialty Hotlist configuration");	
		}
		else if ( rdoOption.equals(rdoGrpEnumeration.rdoProblems) )
		{	
			form.getLocalContext().setcurrentCciType(CciType.PROBLEM);
			engine.setCaption("Problem Specialty Hotlist configuration");
		}
		else if ( rdoOption.equals(rdoGrpEnumeration.rdoProcedures) )
		{
			form.getLocalContext().setcurrentCciType(CciType.PROCEDURE);
			engine.setCaption("Procedure Specialty Hotlist configuration");	
		}
		else if ( rdoOption.equals(rdoGrpEnumeration.rdoCancerImaging) )
		{
			form.getLocalContext().setcurrentCciType(CciType.CANCERIMAGE);
			engine.setCaption("Cancer Imaging Event Hotlist configuration");	
		}
		else
		{
			throw new DomainRuntimeException ("Unexpected radio button selection type in 'formatScreenCci' = " + rdoOption.toString());
		}
	}
	
	private void open() 
	{
		displaySpecialties();
		overlayConfiguredHotlists(form.getLocalContext().getcurrentCciType());
		form.setMode(FormMode.VIEW);
	}
	
	private void displaySpecialties() 
	{
		form.treConfig().clear();
		SpecialtyCollection lkpCollSpecialties = LookupHelper.getSpecialty(domain.getLookupService());
		if (lkpCollSpecialties != null)
		{
			for (int x=0; x < lkpCollSpecialties.size(); x++)
			{
				TreeNode node = form.treConfig().getNodes().add(lkpCollSpecialties.get(x), lkpCollSpecialties.get(x).getText());
				setNodeImage(node, Color.Red);				
			}
		}		
	}
	
	private void setNodeImage(TreeNode node, Color color ) 
	{
		if (color == Color.Red)
		{
			node.setExpandedImage(form.getImages().Core.RedSqaure);
			node.setCollapsedImage(form.getImages().Core.RedSqaure);
			node.setSelectedImage(form.getImages().Core.RedSqaure);			
		}
		else if (color == Color.Green)
		{
			node.setExpandedImage(form.getImages().Core.GreenSquare);
			node.setCollapsedImage(form.getImages().Core.GreenSquare);
			node.setSelectedImage(form.getImages().Core.GreenSquare);						
		}
		else if (color == Color.Blue)
		{
			node.setExpandedImage(form.getImages().Admin.Service);
			node.setCollapsedImage(form.getImages().Admin.Service);
			node.setSelectedImage(form.getImages().Admin.Service);						
		}		
	}
	
	/**
	 * Gets a list of configured hotlists and sets the nodes to the appropriate value
	 * @param CciType
	 * @return void
	 */
	private void overlayConfiguredHotlists(CciType cciType)
	{
		IHotlistShort[] configuredHotlists = domain.listIHotlistShorts(cciType);	
		
		if (configuredHotlists == null) 
			return ;		
		
		for (int i=0; i < configuredHotlists.length; i++)
		{
			for (int j=0; j < form.treConfig().getNodes().size(); j++)
			{
				if (configuredHotlists[i].getISpecialty().equals(form.treConfig().getNodes().get(j).getValue()))
				{
					displayHotlistAsTreeNode(form.treConfig().getNodes().get(j), configuredHotlists[i]);
					break;
				}
			}			
		}
	}
	
	private void displayHotlistAsTreeNode(TreeNode node, IHotlistShort voItem)
	{
		node.setValue(voItem);
		setNodeImage(node, Color.Green);
		node.getNodes().add(waitMsg, waitMsg);		
	}
	
	/**
	 * When a different radio button is selected, resets the screen to a just open state, and sets the local context cci type
	 * @param void
	 * @return void
	 */	
	protected void onRadioButtonrdoGrpValueChanged() throws PresentationLogicException 
	{
		form.treConfig().getNodes().clear();
		formatScreenCci(form.rdoGrp().getValue());
		open();
	}
	
	protected void onTreConfigTreeViewNodeExpandCollapse(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		expandNode(node);
	}
	
	/**
	 * This will expand the node by getting the IHotlist based on the node id and current CciType.
	 * It will then list the IHotlistItems below
	 * @param TreeNode
	 * @return void
	 */
	private void expandNode(TreeNode node)
	{
		if (node == null) return;
		
		if ( node.isExpanded() )
		{
			IHotlistShort val = (IHotlistShort) node.getValue();
			IHotlist item = domain.getIHotlist(val.getIHotlistShortID(), form.getLocalContext().getcurrentCciType());
			
			node.setValue(item);
			form.getLocalContext().setSelectedHotlist((IHotlist) node.getValue());			
			node.getNodes().clear();
			
			for ( int i = 0; i < item.getIHotlistItems().length; i++ )
			{
				TreeNode child = node.getNodes().add(item.getIHotlistItems()[i], item.getIHotlistItems()[i].getIGenericItem().getIGenericItemInfoName());
				setNodeImage(child, Color.Blue);
				child.setEnabled(node.isEnabled());
			}
		}
	}
	
	protected void onTreConfigTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getMode().equals(FormMode.EDIT)) 
			return;
		
		resetLocalContextSelection(node);
		updateControlsState();
	}
	
	/**
	 * Sets the local context value depending on whether the node selected is a hotlist or a hotlist item
	 * @param TreeNode
	 * @return void
	 */
	private void resetLocalContextSelection(TreeNode node)
	{
		// if the node is an IHotlist, no need for a get call, just refresh the value
		if ( node.getValue() instanceof IHotlist )
		{
			form.getLocalContext().setSelectedHotlist((IHotlist) node.getValue());
		}
		// if the node is an IHotlistShort, get it's IHotlist and reset the value
		else if ( node.getValue() instanceof IHotlistShort )
		{
			form.getLocalContext().setSelectedHotlist(domain.getIHotlist(((IHotlistShort)node.getValue()).getIHotlistShortID(), form.getLocalContext().getcurrentCciType()));
		}
		// if the node is an IHotlistItem, set the value to that of its parent (IHotlist). 
		else if ( node.getValue() instanceof IHotlistItem )
		{
			form.getLocalContext().setSelectedHotlist((IHotlist)node.getParent().getValue());
		}
		else
			form.getLocalContext().setSelectedHotlist(null);
	}
	
	protected void onFormModeChanged()
	{
		updateControlsState();		
	}
	
	private void updateControlsState()
	{
		if (form.getMode().equals(FormMode.EDIT) || form.treConfig().getSelectedNode() == null)
		{
			form.getContextMenus().hideAllSpecialtyHotlistConfigurationMenuItems();
			return;
		}
		// set the context menu text to suit the node selection						 
		setConfigureMenuText(form.treConfig().getSelectedNode().getValue() instanceof IHotlistItem);		
		form.getContextMenus().getSpecialtyHotlistConfigurationCONFIGUREItem().setVisible(true);		
	}
	
	private void setConfigureMenuText(boolean childSelected)
	{
		if (form.treConfig().getSelectedNode() == null) return;
		
		if (childSelected)
			form.getContextMenus().getSpecialtyHotlistConfigurationCONFIGUREItem().setText("Configure " + form.getLocalContext().getcurrentCciType().getText() + " for " + form.treConfig().getSelectedNode().getParent().getText());
		else
			form.getContextMenus().getSpecialtyHotlistConfigurationCONFIGUREItem().setText("Configure " + form.getLocalContext().getcurrentCciType().getText() + " for " + form.treConfig().getSelectedNode().getText());
	}
		
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (result != DialogResult.OK) 
			return;		
		
		form.getLocalContext().setSelectedHotlist((IHotlist)form.getGlobalContext().Clinical.getSpecialtyHotlistConfigurationVo());
		open(); 
		expandNode(findChangedNode());
		updateControlsState();
	}
	
	private TreeNode findChangedNode()
	{
		TreeNode node = null;
		IHotlist voVal = (IHotlist)form.getLocalContext().getSelectedHotlist();
		if (voVal == null) return node;			
		
		for (int x = 0 ; x< form.treConfig().getNodes().size(); x++ )
		{ 
			if ( !(form.treConfig().getNodes().get(x).getValue() instanceof Specialty) )
			{
				IHotlistShort voShort = (IHotlistShort) form.treConfig().getNodes().get(x).getValue(); 
				if (voShort.getISpecialty().equals(voVal.getISpecialty()))
				{
					node = form.treConfig().getNodes().get(x);
					node.setExpanded(true);
					form.treConfig().setValue(node.getValue());
					break;
				}
			}
		}	
		return node;
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.SpecialtyHotlistConfiguration.CONFIGURE:
				configureSpecialtyHotlist();
				break;
		}
	}
	
	private void configureSpecialtyHotlist()
	{
		IHotlist localContextHotlist = (IHotlist)form.getLocalContext().getSelectedHotlist();
		if (localContextHotlist == null)
		{
			localContextHotlist =  newHotlist();
		}

		form.getGlobalContext().Clinical.setSpecialtyHotlistConfigurationVo((ValueObject)localContextHotlist);
		
		if (localContextHotlist instanceof ProcedureHotlistVo)
		{
			form.getGlobalContext().Clinical.setPMHConfigSearchType("P");
			engine.open(form.getForms().Core.SpecialtyHotlistConfigurationDlg, "Configure Procedures");				
		}
		else if (localContextHotlist instanceof ProblemHotlistVo)
		{
			form.getGlobalContext().Clinical.setPMHConfigSearchType("PR");	
			engine.open(form.getForms().Core.SpecialtyHotlistConfigurationDlg, "Configure Problems");				
		}
		else if (localContextHotlist instanceof DiagnosisHotListVo)
		{
			form.getGlobalContext().Clinical.setPMHConfigSearchType("D");												
			engine.open(form.getForms().Core.SpecialtyHotlistConfigurationDlg, "Configure Diagnoses");
		}
		else if (localContextHotlist instanceof CancerImagingHotlistVo)
		{
			form.getGlobalContext().Clinical.setPMHConfigSearchType("C");												
			engine.open(form.getForms().Core.SpecialtyHotlistConfigurationDlg, "Configure Cancer Imaging Events");
		}
		else
		{
			throw new DomainRuntimeException("Unexpected CCI type in 'configureSpecialtyHotlist'");
		}
		
		form.getGlobalContext().Clinical.setSelectedProcedures(null);
	}
	
	/**
	 * Creates a new IHotlist depending on the current CciType.
	 * @param void
	 * @return IHotlist
	 */
	private IHotlist newHotlist()
	{
		IHotlist iHotlist = null;
		
		if ( form.getLocalContext().getcurrentCciType().equals(CciType.PROBLEM) )
		{
			ProblemHotlistVo voProblemHotlist = new ProblemHotlistVo(); 		
			voProblemHotlist.setHotlistItems(new ProblemHotlistItemVoCollection());	
			iHotlist = voProblemHotlist;
		}
		else if ( form.getLocalContext().getcurrentCciType().equals(CciType.PROCEDURE) )
		{
			ProcedureHotlistVo voProcedureHotlist = new ProcedureHotlistVo();
			voProcedureHotlist.setHotlistItems(new ProcedureHotlistItemVoCollection());
			iHotlist = voProcedureHotlist;
		}
		else if ( form.getLocalContext().getcurrentCciType().equals(CciType.DIAGNOSIS) )
		{
			DiagnosisHotListVo voDiagnosisHotlist = new DiagnosisHotListVo();
			voDiagnosisHotlist.setHotListItems(new DiagnosisHotlistItemVoCollection());
			iHotlist = voDiagnosisHotlist;
		}
		else if ( form.getLocalContext().getcurrentCciType().equals(CciType.CANCERIMAGE) )
		{
			CancerImagingHotlistVo voCancerImagingHotlist = new CancerImagingHotlistVo();
			voCancerImagingHotlist.setHotListItems(new CancerImagingHotlistItemVoCollection());
			iHotlist = voCancerImagingHotlist;
		}
		else
		{
			throw new DomainRuntimeException("Unknown CCI type in newHotlist()");
		}
		
		iHotlist.setISpecialty((Specialty) form.treConfig().getSelectedNode().getValue());
		form.getGlobalContext().Clinical.setSpecialtyHotlistConfigurationVo((ValueObject)iHotlist);
		return iHotlist;
	}
}
