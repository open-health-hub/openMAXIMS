//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4076.22135)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.forms.tumouroverallprognostic;

import ims.clinicaladmin.vo.GleasonConfigLiteVo;
import ims.clinicaladmin.vo.OverallPrognosticGroupingVo;
import ims.clinicaladmin.vo.PSAConfigVo;
import ims.clinicaladmin.vo.PrognosticGroupingCongfigVo;
import ims.clinicaladmin.vo.PrognosticRiskConfigVo;
import ims.clinicaladmin.vo.TumourGroupHistologyVo;
import ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo;
import ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo;
import ims.clinicaladmin.vo.TumourGroupVo;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.oncology.vo.PrognosticLocationConfigVo;
import ims.oncology.vo.lookups.TNMClinicalpathological;
import ims.oncology.vo.lookups.TNMType;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		open();
	}
	
	@Override
	protected void onFormModeChanged()
	{
		udpateControlsState();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if ( ! checkMandatoryValues() )
			return;
		
		// WDEV-12569
		// Get values from screen into selected Overall Prognostic record
		populateDataFromScreen(form.getGlobalContext().Oncology.getSelectedRecordForOverallPrognosticDialog());
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Oncology.setSelectedRecordForOverallPrognosticDialog(null);
		engine.close(DialogResult.CANCEL);
	}
	

	private void initialize() throws FormOpenException
	{
		if (!form.getGlobalContext().ClinicalAdmin.getTumourGroupIsNotNull()
				|| !Boolean.TRUE.equals(form.getGlobalContext().ClinicalAdmin.getTumourGroup().getIsPrognosticGroupingRelevant())
				|| !form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfigIsNotNull())
			throw new FormOpenException("This form is designed to work only with Prognostic Overall for a Tumour Group");
		
		populateComboBoxes(form.getGlobalContext().ClinicalAdmin.getTumourGroup());
	}

	private void populateComboBoxes(TumourGroupVo tumourGroup)
	{
		// Clear all comboboxes
		form.cmbTValue().clear();
		form.cmbNValue().clear();
		form.cmbMValue().clear();
		form.cmbHistologyType().clear();
		form.cmbHistologyGrade().clear();
		form.cmbLocation().clear();
		form.cmbRisk().clear();
		form.cmbPSA().clear();
		form.cmbGleason().clear();
		
		
		PrognosticGroupingCongfigVo prognosticSettings = tumourGroup.getPrognosticGroupingConfig();

		// Bind T N M Values
		if (tumourGroup.getTNMValuesIsNotNull())
			for (TumourGroupSiteTNMValueVo tnmValue : tumourGroup.getTNMValues())
			{
				// WDEV-13259
				// Pathological T, N, M values are not used for OverallStaging so exclude them 
				if (TNMClinicalpathological.PATHOLOGICALONLY.equals(tnmValue.getClinicalPathological()))
					continue;
				
				if (TNMType.T.equals(tnmValue.getTNMType()) && Boolean.TRUE.equals(tnmValue.getIsActive()))
				{
					form.cmbTValue().newRow(tnmValue, tnmValue.getTNMValue());
				}
				else if (TNMType.N.equals(tnmValue.getTNMType()) && Boolean.TRUE.equals(tnmValue.getIsActive()))
				{
					form.cmbNValue().newRow(tnmValue, tnmValue.getTNMValue());
				}
				else if (TNMType.M.equals(tnmValue.getTNMType()) && Boolean.TRUE.equals(tnmValue.getIsActive()))
				{
					form.cmbMValue().newRow(tnmValue, tnmValue.getTNMValue());
				}
			}
		
		// Bind Histological Type
		if (tumourGroup.getHistologiesIsNotNull())
			for (TumourGroupHistologyVo histology : tumourGroup.getHistologies())
			{
				// Skip inactive records
				if (Boolean.TRUE.equals(histology.getIsActive()))
					form.cmbHistologyType().newRow(histology, histology.getAssociatedHistology().getHistologyDescription());
			}

		// Bind Histology Grade
		if (tumourGroup.getHistopathologicGradesIsNotNull())
			for (TumourGroupHistopathologyGradeVo histopathologyGrade : tumourGroup.getHistopathologicGrades())
			{
				// Skip inactive records
				if (Boolean.TRUE.equals(histopathologyGrade.getIsActive()))
					form.cmbHistologyGrade().newRow(histopathologyGrade, histopathologyGrade.getTumourDifferentation().getTumourDifferentation());
			}
		
		// Bind Location
		if (prognosticSettings.getLocationIsNotNull())
			for (PrognosticLocationConfigVo location : prognosticSettings.getLocation())
			{
				form.cmbLocation().newRow(location, location.getLocationName());
			}
		
		// Bind Risk
		if (prognosticSettings.getRiskIsNotNull())
			for (PrognosticRiskConfigVo risk : prognosticSettings.getRisk())
				form.cmbRisk().newRow(risk, risk.getRiskName());
		
		// Bind PSA
		if (prognosticSettings.getPSAIsNotNull())
			for (PSAConfigVo psa : prognosticSettings.getPSA())
				form.cmbPSA().newRow(psa, psa.getPSAName());
		
		// Bind Gleason
		if (prognosticSettings.getGleasonIsNotNull())
			for (GleasonConfigLiteVo gleason : prognosticSettings.getGleason())
				form.cmbGleason().newRow(gleason, gleason.getGleasonName());
	}

	private void open()
	{
		form.setMode(FormMode.EDIT);
	}

	private boolean checkMandatoryValues() 
	{
		PrognosticGroupingCongfigVo prognosticSettings = form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig();
		
		StringBuffer sb = new StringBuffer();
		
		if (Boolean.TRUE.equals(prognosticSettings.getUseTValues()) && form.cmbTValue().getValue() == null)
			sb.append("Please select a value for all T and Overall mandatory items.\n\n");
		
		if (Boolean.TRUE.equals(prognosticSettings.getUseNValues()) && form.cmbNValue().getValue() == null)
			sb.append("Please select a value for all N and Overall mandatory items.\n\n");
		
		if (Boolean.TRUE.equals(prognosticSettings.getUseMValues()) && form.cmbMValue().getValue() == null)
			sb.append("Please select a value for all M and Overall mandatory items.\n\n");

		if (Boolean.TRUE.equals(prognosticSettings.getIsHistologicalTypePertinent()) && form.cmbHistologyType().getValue() == null)
			sb.append("Please select a value for Histology, it is marked as required for this Tumour Group.\n\n");

		if (Boolean.TRUE.equals(prognosticSettings.getIsHistologicalGradePertinent()) && form.cmbHistologyGrade().getValue() == null)
			sb.append("Please select a value for Histology Grade, it is marked as required for this Tumour Group.\n\n");

		if (Boolean.TRUE.equals(prognosticSettings.getIsTumourLocationPertinent()) && form.cmbLocation().getValue() == null)
			sb.append("Please select a value for Prognostic Location, it is marked as required for this Tumour Group.\n\n");

		if (Boolean.TRUE.equals(prognosticSettings.getIsRiskCategoryPertinent()) && form.cmbRisk().getValue() == null)
			sb.append("Please select a value for Prognostic Risk, it is marked as required for this Tumour Group.\n\n");
		
		if (Boolean.TRUE.equals(prognosticSettings.getIsPSAPertinent()) && form.cmbPSA().getValue() == null)
			sb.append("Please select a value for Prognostic PSA, it is marked as required for this Tumour Group.\n\n");

		if (form.cmbOverall().getValue() == null)
			sb.append("Please select a value for Overall.\n\n");
		
		if (sb.length() > 0)
		{
			engine.showMessage(sb.toString(), "Warning", MessageButtons.OK, MessageIcon.WARNING);
			return false;
		}

		return true;
	}
	
	
	private void populateDataFromScreen(OverallPrognosticGroupingVo record) 
	{
		// WDEV-12569
		// Create a new Overall Prognostic record if selected one is null
		if (record == null)
		{
			record = new OverallPrognosticGroupingVo();
		}
		
		record.setTGroup(form.getGlobalContext().ClinicalAdmin.getTumourGroup());
		record.setTSite(null);
		record.setIsActive(Boolean.TRUE);
		
		
		record.setTVal(form.cmbTValue().getValue());
		record.setNVal(form.cmbNValue().getValue());
		record.setMVal(form.cmbMValue().getValue());
		
		record.setHistVal(form.cmbHistologyType().getValue());
		record.setDiffVal(form.cmbHistologyGrade().getValue());
		
		record.setPrognosticLocationVal(form.cmbLocation().getValue());
		record.setPrognosticRiskVal(form.cmbRisk().getValue());
		record.setPrognosticPSAVal(form.cmbPSA().getValue());
		record.setPrognosticGleasonVal(form.cmbGleason().getValue());
		
		record.setPrognosticGroup(form.cmbOverall().getValue());
		
		if (checkIfIsUnique(record))
		{
			form.getGlobalContext().Oncology.setSelectedRecordForOverallPrognosticDialog(record);
			engine.close(DialogResult.OK);
		}
		else
			engine.showMessage("An active overall prognostic already exists for this combination", "Warning", MessageButtons.OK, MessageIcon.WARNING);
		
	}
	
	
	/**
	 * WDEV-12569
	 * Function used to check if the record is unique
	 * @param record
	 * @return
	 */
	private boolean checkIfIsUnique(OverallPrognosticGroupingVo record) 
	{
		if (!form.getGlobalContext().Oncology.getOverallPrognosticDynamicGridCollectionIsNotNull())
			return true;
		
		PrognosticGroupingCongfigVo prognosticSettings = form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig();
		
		boolean requiredTVal = Boolean.TRUE.equals(prognosticSettings.getUseTValues());
		boolean requiredNVal = Boolean.TRUE.equals(prognosticSettings.getUseNValues());
		boolean requiredMVal = Boolean.TRUE.equals(prognosticSettings.getUseMValues());
		
		boolean requiredHistologyType = Boolean.TRUE.equals(prognosticSettings.getIsHistologicalTypePertinent());
		boolean requiredHistologyGrade = Boolean.TRUE.equals(prognosticSettings.getIsHistologicalGradePertinent());

		boolean requiredPrognosticLocation = Boolean.TRUE.equals(prognosticSettings.getIsTumourLocationPertinent());
		boolean requiredPrognosticRisk = Boolean.TRUE.equals(prognosticSettings.getIsRiskCategoryPertinent());
		boolean requiredPrognosticPSA = Boolean.TRUE.equals(prognosticSettings.getIsPSAPertinent());
		boolean requiredPrognosticGleason = Boolean.TRUE.equals(prognosticSettings.getIsGleasonPertinent());
		
		
		for (OverallPrognosticGroupingVo overallPrognostic : form.getGlobalContext().Oncology.getOverallPrognosticDynamicGridCollection())
		{
			if (overallPrognostic.getID_PrognosticGroupingIsNotNull() && overallPrognostic.getID_PrognosticGrouping().equals(record.getID_PrognosticGrouping()))
				continue;
			
			if (!Boolean.TRUE.equals(overallPrognostic.getIsActive()))
				continue;
			
			if (requiredTVal && !overallPrognostic.getTVal().equals(record.getTVal()))
				continue;

			if (requiredNVal && !overallPrognostic.getNVal().equals(record.getNVal()))
				continue;

			if (requiredMVal && !overallPrognostic.getMVal().equals(record.getMVal()))
				continue;
			
			if (requiredHistologyType && !overallPrognostic.getHistVal().equals(record.getHistVal()))
				continue;
			
			if (requiredHistologyGrade && !overallPrognostic.getDiffVal().equals(record.getDiffVal()))
				continue;

			if (requiredPrognosticLocation && !overallPrognostic.getPrognosticLocationVal().equals(record.getPrognosticLocationVal()))
				continue;
			
			if (requiredPrognosticRisk && !overallPrognostic.getPrognosticRiskVal().equals(record.getPrognosticRiskVal()))
				continue;
			
			if (requiredPrognosticPSA && !overallPrognostic.getPrognosticPSAVal().equals(record.getPrognosticPSAVal()))
				continue;
			
			if (requiredPrognosticGleason && !overallPrognostic.getPrognosticGleasonVal().equals(record.getPrognosticGleasonVal()))
				continue;
			
			return false;
		}
		
		return true;
	}

	private void udpateControlsState()
	{
		// This can't be null as it was checked in the initialize function
		PrognosticGroupingCongfigVo prognosticSettings = form.getGlobalContext().ClinicalAdmin.getTumourGroup().getPrognosticGroupingConfig();
		
		form.cmbTValue().setEnabled(Boolean.TRUE.equals(prognosticSettings.getUseTValues()));
		form.cmbNValue().setEnabled(Boolean.TRUE.equals(prognosticSettings.getUseNValues()));
		form.cmbMValue().setEnabled(Boolean.TRUE.equals(prognosticSettings.getUseMValues()));
		
		form.cmbHistologyType().setEnabled(Boolean.TRUE.equals(prognosticSettings.getIsHistologicalTypePertinent()));
		form.cmbHistologyGrade().setEnabled(Boolean.TRUE.equals(prognosticSettings.getIsHistologicalGradePertinent()));
		
		form.cmbLocation().setEnabled(Boolean.TRUE.equals(prognosticSettings.getIsTumourLocationPertinent()));
		form.cmbRisk().setEnabled(Boolean.TRUE.equals(prognosticSettings.getIsRiskCategoryPertinent()));
		form.cmbPSA().setEnabled(Boolean.TRUE.equals(prognosticSettings.getIsPSAPertinent()));
		form.cmbGleason().setEnabled(Boolean.TRUE.equals(prognosticSettings.getIsGleasonPertinent()));
	}
}
