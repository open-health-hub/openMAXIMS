//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.39 build 2148.27757)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.pmhchecklistconfig;

import ims.clinical.vo.DiagnosisListVo;
import ims.clinical.vo.DiagnosisListVoCollection;
import ims.clinicaladmin.vo.PMHChecklistConfigShortVoCollection;
import ims.clinicaladmin.vo.PMHChecklistConfigVo;
import ims.clinical.vo.ProcedureListVo;
import ims.clinical.vo.ProcedureListVoCollection;
import ims.clinicaladmin.vo.PMHChecklistConfigShortVo;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ProcedureVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.controls.TreeNodeCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PMHCheckList.AddDiagnosis :
				displaySearchDialog("D");
				break;
			case GenForm.ContextMenus.PMHCheckList.AddProcedure :
				displaySearchDialog("P");
				break;
			case GenForm.ContextMenus.PMHCheckList.Remove :
				removeItem();
				break;
			case GenForm.ContextMenus.PMHCheckList.MOVEUP :
				moveItemUp();
				break;
			case GenForm.ContextMenus.PMHCheckList.MOVEDOWN :
				moveItemDown();
				break;
			default :
				break;
		}
	}
	
	private void moveItemDown()
	{
		if(!form.getLocalContext().getCurrentConfigIsNotNull())
			return;

		PMHChecklistConfigVo config = form.getLocalContext().getCurrentConfig();
		Object value = form.treConfig().getValue();
		
		if(value instanceof DiagnosisVo)
		{
			for(int i = 0; i < config.getDiagnosisList().size(); i++)
			{
				if(config.getDiagnosisList().get(i).getDiagnosis().equals(value))
				{
					int nOrder = config.getDiagnosisList().get(i).getOrder().intValue();
					
					config.getDiagnosisList().get(i).setOrder(new Integer(config.getDiagnosisList().get(i+1).getOrder().intValue()));
					config.getDiagnosisList().get(i+1).setOrder(new Integer(nOrder));
					config.getDiagnosisList().sort();
//					if (form.getLocalContext().getUseSpecialties().booleanValue())
						form.treConfig().getSelectedNode().getParent().getNodes().moveDown();
//					else
//						form.treConfig().getNodes().get(DIAGNOSIS_NODE_INDEX).getNodes().moveDown();
					
					break;
				}
			}
		}
		
		if(value instanceof ProcedureVo)
		{
			for(int i = 0; i < config.getProcedureList().size(); i++)
			{
				if(config.getProcedureList().get(i).getProcedure().equals(value))
				{
					int nOrder = config.getProcedureList().get(i).getOrder().intValue();
					
					config.getProcedureList().get(i).setOrder(new Integer(config.getProcedureList().get(i+1).getOrder().intValue()));
					config.getProcedureList().get(i+1).setOrder(new Integer(nOrder));
					config.getProcedureList().sort();
//					if (form.getLocalContext().getUseSpecialties().booleanValue())
						form.treConfig().getSelectedNode().getParent().getNodes().moveDown();
//					else
//						form.treConfig().getNodes().get(PROCEDURES_NODE_INDEX).getNodes().moveDown();
					break;
				}
			}
		}
		
		form.getLocalContext().setCurrentConfig(config);
		form.treConfig().setValue(value);
		displaySubmenus();
	}
	
	private void moveItemUp()
	{
		if(!form.getLocalContext().getCurrentConfigIsNotNull())
			return;

		PMHChecklistConfigVo config = form.getLocalContext().getCurrentConfig();
		Object value = form.treConfig().getValue();
		
		if(value instanceof DiagnosisVo)
		{
			for(int i = 0; i < config.getDiagnosisList().size(); i++)
			{
				if(config.getDiagnosisList().get(i).getDiagnosis().equals(value))
				{
					int nOrder = config.getDiagnosisList().get(i).getOrder().intValue();
					
					config.getDiagnosisList().get(i).setOrder(new Integer(config.getDiagnosisList().get(i-1).getOrder().intValue()));
					config.getDiagnosisList().get(i-1).setOrder(new Integer(nOrder));
					config.getDiagnosisList().sort();
//					if (form.getLocalContext().getUseSpecialties().booleanValue())
						form.treConfig().getSelectedNode().getParent().getNodes().moveUp();
//					else
//						form.treConfig().getNodes().get(DIAGNOSIS_NODE_INDEX).getNodes().moveUp();
					form.treConfig().setValue(value);
					break;
				}
			}
		}
		
		if(value instanceof ProcedureVo)
		{
			for(int i = 0; i < config.getProcedureList().size(); i++)
			{
				if(config.getProcedureList().get(i).getProcedure().equals(value))
				{
					int nOrder = config.getProcedureList().get(i).getOrder().intValue();
					
					config.getProcedureList().get(i).setOrder(new Integer(config.getProcedureList().get(i-1).getOrder().intValue()));
					config.getProcedureList().get(i-1).setOrder(new Integer(nOrder));
					config.getProcedureList().sort();
//					if (form.getLocalContext().getUseSpecialties().booleanValue())
						form.treConfig().getSelectedNode().getParent().getNodes().moveUp();
//					else
//						form.treConfig().getNodes().get(PROCEDURES_NODE_INDEX).getNodes().moveUp();
					form.treConfig().setValue(value);
					break;
				}
			}
		}
		
		form.getLocalContext().setCurrentConfig(config);
		displaySubmenus();
	}
	
	private void removeItem()
	{
		if(!form.getLocalContext().getCurrentConfigIsNotNull())
			return;
		
		Object value = form.treConfig().getValue();
		
		PMHChecklistConfigVo config = form.getLocalContext().getCurrentConfig();
		
		if(value instanceof DiagLiteVo)
		{
			for(int i = 0; i < config.getDiagnosisList().size(); i++)
			{
				if(config.getDiagnosisList().get(i).getDiagnosis().equals(value))
				{
					config.getDiagnosisList().remove(i);
					break;
				}
			}
		}
		else if(value instanceof ProcedureLiteVo)
		{
			for(int i = 0; i < config.getProcedureList().size(); i++)
			{
				if(config.getProcedureList().get(i).getProcedure().equals(value))
				{
					config.getProcedureList().remove(i);
					break;
				}
			}
		}

		form.getLocalContext().setCurrentConfig(config);
		form.treConfig().getNodes().remove(form.treConfig().getSelectedNode());
		displaySubmenus();
	}
	
	private void displaySearchDialog(String which)
	{
		form.getGlobalContext().Clinical.setPMHConfigSearchType(which);
		
		form.getGlobalContext().Clinical.setSelectedDiagnosis(null);
		form.getGlobalContext().Clinical.setSelectedProcedures(null);
		
		if(which.equalsIgnoreCase("P"))
			engine.open(form.getForms().Core.DiagnosisProcedureProblemSearch, "Search Procedures");
		else
			engine.open(form.getForms().Core.DiagnosisProcedureProblemSearch, "Search Diagnosis");
	}
	
	protected void onFormOpen() throws FormOpenException
	{
		form.btnNew().setVisible(true);
		form.btnUpdate().setVisible(true);
//		Boolean bSpec = new Boolean(ConfigFlag.GEN.PMH_CONFIG_USE_SPECIALTY.getValue());
//		if (bSpec.booleanValue())
//			form.getLocalContext().setUseSpecialties(Boolean.TRUE);
//		else
//			form.getLocalContext().setUseSpecialties(Boolean.FALSE);
		
		open();
		displaySubmenus();
	}
	
	private void displaySubmenus()
	{
		form.getContextMenus().getPMHCheckListMOVEUPItem().setVisible(false);
		form.getContextMenus().getPMHCheckListMOVEDOWNItem().setVisible(false);
		
		form.getContextMenus().getPMHCheckListRemoveItem().setVisible(false);
		if(form.getMode().equals(FormMode.EDIT))
		{
			
			// enable/disable MoveUp, MoveDown for diagnosis
			if(form.treConfig().getValue() instanceof DiagnosisVo)
			{
				form.getContextMenus().getPMHCheckListRemoveItem().setVisible(true);
				
				TreeNodeCollection nodesDiagnosis = null;
//				if (form.getLocalContext().getUseSpecialties().booleanValue())
					nodesDiagnosis = form.treConfig().getSelectedNode().getParent().getNodes();
//				else
//					nodesDiagnosis = form.treConfig().getNodes().get(DIAGNOSIS_NODE_INDEX).getNodes();

				int nodeIndex = getNodeIndex(nodesDiagnosis, form.treConfig().getValue());
				
				if(nodeIndex < nodesDiagnosis.size() - 1)
				{
					form.getContextMenus().getPMHCheckListMOVEDOWNItem().setVisible(true);
				}
				
				if(nodeIndex > 0)
				{
					form.getContextMenus().getPMHCheckListMOVEUPItem().setVisible(true);
				}
			}
			else if(form.treConfig().getValue() instanceof ProcedureVo)
			{
				form.getContextMenus().getPMHCheckListRemoveItem().setVisible(true);
				
				TreeNodeCollection nodesProcedures = null;
//				if (form.getLocalContext().getUseSpecialties().booleanValue())
					nodesProcedures = form.treConfig().getSelectedNode().getParent().getNodes();
//				else
//					nodesProcedures = form.treConfig().getNodes().get(PROCEDURES_NODE_INDEX).getNodes();
				
				int nodeIndex = getNodeIndex(nodesProcedures, form.treConfig().getValue());
				
				if(nodeIndex < nodesProcedures.size() - 1)
				{
					form.getContextMenus().getPMHCheckListMOVEDOWNItem().setVisible(true);
				}
				
				if(nodeIndex > 0)
				{
					form.getContextMenus().getPMHCheckListMOVEUPItem().setVisible(true);
				}
			}
		}
	}
	
	private int getNodeIndex(TreeNodeCollection nodes, Object value)
	{
		for(int i = 0; i < nodes.size(); i++)
		{
			if(nodes.get(i).getValue().equals(value))
				return i;
		}
		
		return -1;
	}
	
	private void open()
	{
		form.setMode(FormMode.VIEW);
		form.treConfig().setEnabled(true);

//		if (form.getLocalContext().getUseSpecialties().booleanValue())
//		{
			PMHChecklistConfigShortVoCollection configColl = null;
			configColl = domain.listPMHCheckListShort();
			displayRecords(configColl);
			form.getLocalContext().setCurrentConfig(null);
//		}
//		else
//		{
//			PMHChecklistConfigVo config = domain.getPMHCheckListConfig(null);
//			form.getLocalContext().setCurrentConfig(config);
//			//TreeNode child;
//			if(config != null)			/
//				displayRecord(config);
//		}

		setNewUpdateButtonVisibility();		
	}
	
	private void setNewUpdateButtonVisibility() 
	{
//		if (form.getLocalContext().getUseSpecialties().booleanValue())
//		{
			boolean bUpdateable = form.getLocalContext().getCurrentConfig() == null  ||
		    form.getLocalContext().getCurrentConfig().getID_PMHChecklistConfig() == null;		

			form.btnNew().setEnabled(form.getMode().equals(FormMode.VIEW));
			form.btnUpdate().setEnabled(!bUpdateable);		
/*		}
		else
		{
			boolean bNewVisible = form.getLocalContext().getCurrentConfig() == null  ||
		    form.getLocalContext().getCurrentConfig().getID_PMHChecklistConfig() == null;		

			form.btnNew().setEnabled(bNewVisible);
			form.btnUpdate().setEnabled(!bNewVisible);		
		}
		*/
	}

	private void displayRecords(PMHChecklistConfigShortVoCollection configColl)
	{
		form.treConfig().clear();
		
		if (configColl != null)
		{
			configColl.sort();
			for(int i = 0; i < configColl.size(); i++)
			{
				TreeNode node = form.treConfig().getNodes().add(configColl.get(i), configColl.get(i).getSpecialtyIsNotNull() ? configColl.get(i).getSpecialty().getText() : "No Specialty coded");
				node.setExpandedImage(form.getImages().Core.RedSqaure);
				node.setCollapsedImage(form.getImages().Core.RedSqaure);
				node.setSelectedImage(form.getImages().Core.RedSqaure);

				TreeNode nodeDiagnosis = null;
				TreeNode nodeProcedures = null;

//				if (form.getLocalContext().getUseSpecialties().booleanValue())
//				{
					node.getNodes().clear();
					
					nodeDiagnosis = node.getNodes().add("D", "Diagnoses");
					nodeDiagnosis.setExpandedImage(form.getImages().Core.BlueSquare);
					nodeDiagnosis.setCollapsedImage(form.getImages().Core.BlueSquare);
					nodeDiagnosis.setSelectedImage(form.getImages().Core.BlueSquare);
					
					nodeProcedures = node.getNodes().add("P", "Procedures");
					nodeProcedures.setExpandedImage(form.getImages().Core.GreenSquare);
					nodeProcedures.setCollapsedImage(form.getImages().Core.GreenSquare);
					nodeProcedures.setSelectedImage(form.getImages().Core.GreenSquare);
/*				}
				else
				{
			  		form.treConfig().clear();

					nodeDiagnosis = form.treConfig().getNodes().add("D", "Diagnosis");
					nodeDiagnosis.setExpandedImage(form.getImages().Core.BlueSquare);
					nodeDiagnosis.setCollapsedImage(form.getImages().Core.BlueSquare);
					nodeDiagnosis.setSelectedImage(form.getImages().Core.BlueSquare);
					nodeProcedures = form.treConfig().getNodes().add("P", "Procedures");
					nodeProcedures.setExpandedImage(form.getImages().Core.GreenSquare);
					nodeProcedures.setCollapsedImage(form.getImages().Core.GreenSquare);
					nodeProcedures.setSelectedImage(form.getImages().Core.GreenSquare);
				}
*/				node.setExpanded(true);
				nodeDiagnosis.setExpanded(true);
				nodeProcedures.setExpanded(true);
			}
		}
	}

	private void displayRecord(PMHChecklistConfigVo config)
	{
		TreeNode nodeDiagnosis = null;
		TreeNode nodeProcedures = null;
//		if (form.getLocalContext().getUseSpecialties().booleanValue())
//		{
			TreeNode nodeToUse = form.treConfig().getSelectedNode();
			if (nodeToUse == null)
				return;
			
			if (nodeToUse.getParent() != null)
				if (nodeToUse.getParent().getParent() != null)
					nodeToUse = nodeToUse.getParent().getParent();
				else
					nodeToUse = nodeToUse.getParent();
				
			nodeToUse.getNodes().clear();
			
			nodeDiagnosis = nodeToUse.getNodes().add(config.getDiagnosisList(), "Diagnoses");
			nodeDiagnosis.setExpandedImage(form.getImages().Core.BlueSquare);
			nodeDiagnosis.setCollapsedImage(form.getImages().Core.BlueSquare);
			nodeDiagnosis.setSelectedImage(form.getImages().Core.BlueSquare);
			
			nodeProcedures = nodeToUse.getNodes().add(config.getProcedureList(), "Procedures");
			nodeProcedures.setExpandedImage(form.getImages().Core.GreenSquare);
			nodeProcedures.setCollapsedImage(form.getImages().Core.GreenSquare);
			nodeProcedures.setSelectedImage(form.getImages().Core.GreenSquare);
/*		}
		else
		{
	  		form.treConfig().clear();

			nodeDiagnosis = form.treConfig().getNodes().add("D", "Diagnosis");
			nodeDiagnosis.setExpandedImage(form.getImages().Core.BlueSquare);
			nodeDiagnosis.setCollapsedImage(form.getImages().Core.BlueSquare);
			nodeDiagnosis.setSelectedImage(form.getImages().Core.BlueSquare);
			
			nodeProcedures = form.treConfig().getNodes().add("P", "Procedures");
			nodeProcedures.setExpandedImage(form.getImages().Core.GreenSquare);
			nodeProcedures.setCollapsedImage(form.getImages().Core.GreenSquare);
			nodeProcedures.setSelectedImage(form.getImages().Core.GreenSquare);
		}
*/
		if (config.getDiagnosisList() != null)
		{
			DiagnosisListVoCollection diagColl = config.getDiagnosisList().sort();
			for(int i = 0; i < diagColl.size(); i++)
				nodeDiagnosis.getNodes().add(diagColl.get(i).getDiagnosis(), diagColl.get(i).getDiagnosis().getDiagnosisName());
		}

		if (config.getProcedureList() != null)
		{
			ProcedureListVoCollection procColl = config.getProcedureList().sort();
			for(int i = 0; i < procColl.size(); i++)
				nodeProcedures.getNodes().add(procColl.get(i).getProcedure(), procColl.get(i).getProcedure().getProcedureName());
		}
		nodeDiagnosis.setExpanded(true);
		nodeProcedures.setExpanded(true);
	}
	
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		PMHChecklistConfigVo voSaved = saveRecord();
		if(voSaved==null)
			return;
		open();
		reselectSavedRecord(voSaved);
	}
	
	private PMHChecklistConfigVo saveRecord()
	{
		PMHChecklistConfigVo item = form.getLocalContext().getCurrentConfig();
		
		if(item == null)
		{
			engine.showMessage("Please choose a Specialty to Save.");
			return null;
		}
			
		String[] arrErrors = item.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return null;
		}
		
		try
		{
			item = domain.savePMHCheckListConfig(item);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return null;
		}
		
		return item;
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}
	
	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		displaySubmenus();
		hideNewUpdate();
		showSpecialtyControls(false);
		
		TreeNode selectedNode = form.treConfig().getSelectedNode();
		TreeNode nodeParentOfSelectedNode = selectedNode;
		
		if (selectedNode != null && selectedNode.getParent() != null) //If not the top level node chosen
		{
			nodeParentOfSelectedNode = selectedNode.getParent(); // See if the 
			if (nodeParentOfSelectedNode.getParent() != null)
				nodeParentOfSelectedNode = nodeParentOfSelectedNode.getParent();
		}
		
		for (int i = 0 ; i < form.treConfig().getNodes().size() ; i++)
		{
			if ( (!form.treConfig().getNodes().get(i).equals(selectedNode) )
					&& ( !form.treConfig().getNodes().get(i).equals(nodeParentOfSelectedNode)) )
			{
				TreeNode nodeSpecialtyOrTopNode = form.treConfig().getNodes().get(i); 
				nodeSpecialtyOrTopNode.setEnabled(false);
				
				if (nodeSpecialtyOrTopNode.getNodes().size() > 0)
				{
					for (int j = 0 ; j < nodeSpecialtyOrTopNode.getNodes().size() ; j++)
					{
						TreeNode nodeDiagProcOrConfigItem  =  nodeSpecialtyOrTopNode.getNodes().get(j);
						nodeDiagProcOrConfigItem.setEnabled(false);
						
						if (nodeDiagProcOrConfigItem.getNodes().size() > 0)
						{
							for (int k = 0 ; k < nodeDiagProcOrConfigItem.getNodes().size() ; k++)
								nodeDiagProcOrConfigItem.getNodes().get(k).setEnabled(false);
						}
					}
				}
			}
		}
	}
	
	private void hideNewUpdate()
	{
		form.btnNew().setEnabled(false);
		form.btnUpdate().setEnabled(false);
	}
	
	protected void onBtnNewClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
//		if (!form.getLocalContext().getUseSpecialties().booleanValue())
//			displaySubmenus();
		
		hideNewUpdate();
		
		form.getLocalContext().setCurrentConfig(null);
		
//		if (form.getLocalContext().getUseSpecialties().booleanValue())
//		{
			showSpecialtyControls(true);
			form.treConfig().setEnabled(false);
//		}
	}
	
	protected void showSpecialtyControls(boolean bShow)
	{
		form.lblSpecialty().setVisible(bShow);
		form.cmbSpecialty().setEnabled(bShow);
		form.cmbSpecialty().setVisible(bShow);
		form.cmbSpecialty().setValue(null);
		form.btnAddSpecialty().setEnabled(!bShow);
		form.btnAddSpecialty().setVisible(bShow);
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		PMHChecklistConfigVo item = form.getLocalContext().getCurrentConfig();
		
		if(item == null)
		{
			item = new PMHChecklistConfigVo();
		}
		
		if(!item.getDiagnosisListIsNotNull())
			item.setDiagnosisList(new DiagnosisListVoCollection());
		if(!item.getProcedureListIsNotNull())
			item.setProcedureList(new ProcedureListVoCollection());
		
		int nOrder = 0;
		
		DiagLiteVoCollection diagList = form.getGlobalContext().Clinical.getSelectedDiagnosis();
		ProcedureLiteVoCollection procList = form.getGlobalContext().Clinical.getSelectedProcedures();

		//add diagnosis
		if(diagList != null && diagList.size() > 0)
		{
			for(int i = 0; i < diagList.size(); i++)
			{
				DiagLiteVo diag = diagList.get(i);
				
				boolean bFound = false;
				
				int size = item.getDiagnosisList().size();
				for (int j = 0; j < size; j++)
				{
					if(item.getDiagnosisList().get(j).getOrder().intValue() > nOrder)
						nOrder = item.getDiagnosisList().get(j).getOrder().intValue();
					
					if(diag.getID_Diagnosis().equals(item.getDiagnosisList().get(j).getDiagnosis().getID_Diagnosis()))
					{
						bFound = true;
						break;
					}
				}
				
				if(bFound == false)
				{
					DiagnosisListVo dl = new DiagnosisListVo();
					
					if(nOrder == 0)
						nOrder = 1;
					else
						nOrder++;
					
					dl.setDiagnosis(diag);
					dl.setOrder(new Integer(nOrder));
					item.getDiagnosisList().add(dl);
				}
			}
		}

		nOrder = 0;
		
		//add procedures
		if(procList != null && procList.size() > 0)
		{
			for(int i = 0; i < procList.size(); i++)
			{
				ProcedureLiteVo proc = procList.get(i);
				
				boolean bFound = false;
				
				int size = item.getProcedureList().size();
				for (int j = 0; j < size; j++)
				{
					if(item.getProcedureList().get(j).getOrder().intValue() > nOrder)
						nOrder = item.getProcedureList().get(j).getOrder().intValue();
					
					if(proc.getID_Procedure().equals(item.getProcedureList().get(j).getProcedure().getID_Procedure()))
					{
						bFound = true;
						break;
					}
				}
				
				if(bFound == false)
				{
					ProcedureListVo dl = new ProcedureListVo();
					
					if(nOrder == 0)
						nOrder = 1;
					else
						nOrder++;
					
					dl.setProcedure(proc);
					dl.setOrder(new Integer(nOrder));
					item.getProcedureList().add(dl);
				}
			}
		}
		form.getLocalContext().setCurrentConfig(item);
		
		displayRecord(item);		
	}
	
	protected void onFormModeChanged()
	{
		updateContextMenuState();
	}
	
	private void updateContextMenuState()
	{
		boolean bView = form.getMode().equals(FormMode.VIEW);
		
		if (form.treConfig().getSelectedNode() == null)
		{
			form.getContextMenus().hideAllPMHCheckListMenuItems();
			return;
		}
		
		boolean bDiagnosisAddMenuVisible = (bView == false) && 
		  (form.treConfig().getSelectedNode().isEnabled()) &&
		  (form.treConfig().getSelectedNode().getText().equals("Diagnoses")); 
		
		boolean bProcedureAddMenuVisible = (bView == false) && 
		  (form.treConfig().getSelectedNode().isEnabled()) &&
		  (form.treConfig().getSelectedNode().getText().equals("Procedures")); 

		boolean bRemoveMenuVisible = (bView == false)  && 
        							 (form.treConfig().getSelectedNode() != null) &&
        							 (form.treConfig().getSelectedNode().isEnabled());

		bRemoveMenuVisible = bRemoveMenuVisible && 
							(form.treConfig().getSelectedNode().getValue() instanceof DiagLiteVo 
							|| form.treConfig().getSelectedNode().getValue() instanceof ProcedureLiteVo);        							  		
				
		form.getContextMenus().getPMHCheckListAddDiagnosisItem().setVisible(bDiagnosisAddMenuVisible);
		form.getContextMenus().getPMHCheckListAddProcedureItem().setVisible(bProcedureAddMenuVisible);
		form.getContextMenus().getPMHCheckListRemoveItem().setVisible(bRemoveMenuVisible);

		
	}

	protected void onTreConfigTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException
	{
		//if (!node.isExpanded())
		treeSelectionChanged(node);
		updateContextMenuState();				
	}
	
	protected void treeSelectionChanged(TreeNode node)
	{
//		if (form.getLocalContext().getUseSpecialties().booleanValue())
//		{
			Object value = node.getValue();
			if (form.getMode().equals(FormMode.VIEW))
			{
				if (value instanceof PMHChecklistConfigShortVo) //Top node
					getPMHCheckListConfig((PMHChecklistConfigShortVo)value);
				else if(node.getParent().getValue() instanceof PMHChecklistConfigShortVo) //Middle code
				{
					PMHChecklistConfigShortVo config = (PMHChecklistConfigShortVo) node.getParent().getValue();
				//	if ( (form.getLocalContext().getCurrentConfig().getID_PMHChecklistConfigIsNotNull()) 
				//		&& (form.getLocalContext().getCurrentConfig().getID_PMHChecklistConfig() != config.getID_PMHChecklistConfig()) )
						getPMHCheckListConfig(config);
				}
				else if(node.getParent().getParent().getValue() instanceof PMHChecklistConfigShortVo) // leaf NOde
				{
					PMHChecklistConfigShortVo config = (PMHChecklistConfigShortVo) node.getParent().getParent().getValue();
					if ( (form.getLocalContext().getCurrentConfigIsNotNull())
						&& (form.getLocalContext().getCurrentConfig().getID_PMHChecklistConfigIsNotNull()) 
						&& (form.getLocalContext().getCurrentConfig().getID_PMHChecklistConfig() != config.getID_PMHChecklistConfig()) )
						getPMHCheckListConfig(config);
				}
//			}
			displaySubmenus();
			
			if ((form.getMode().equals(FormMode.VIEW)))
				setNewUpdateButtonVisibility();
		}
			
		updateContextMenuState();
	}

	protected void getPMHCheckListConfig(PMHChecklistConfigShortVo value) 
	{
		PMHChecklistConfigVo config = domain.getPMHCheckListConfig(value);
		
		//TreeNode child;
		if(config != null)	
		{
			form.getLocalContext().setCurrentConfig(config);
			displayRecord(config);
		}
	}
	
	protected void onBtnAddSpecialtyClick() throws PresentationLogicException 
	{
		if (form.cmbSpecialty().getValue() != null)
		{
			PMHChecklistConfigVo config = new PMHChecklistConfigVo();
			config.setSpecialty(form.cmbSpecialty().getValue());

			for(int i = 0; i < form.treConfig().getNodes().size(); i++)
			{
				Object obj = form.treConfig().getNodes().get(i).getValue();
				if ((obj != null) && (obj instanceof PMHChecklistConfigShortVo))
				{
					PMHChecklistConfigShortVo configVo = (PMHChecklistConfigShortVo) obj;
					if ( (configVo.getSpecialtyIsNotNull()) 
						&& (configVo.getSpecialty().equals(form.cmbSpecialty().getValue())) )
					{
						engine.showMessage("This Specialty is already configured.");
						return;
					}
				}
			}
		
			for(int j = 0; j < form.treConfig().getNodes().size(); j++)
			{
				TreeNode nodeSpec = form.treConfig().getNodes().get(j);
				nodeSpec.setEnabled(false);
				for(int k = 0; k < nodeSpec.getNodes().size(); k++)
				{
					TreeNode nodeCat =  nodeSpec.getNodes().get(k);
					nodeCat.setEnabled(false);

					for(int l = 0; l < nodeCat.getNodes().size(); l++)
						nodeCat.getNodes().get(l).setEnabled(false);
					
				}
			}

			TreeNode node = form.treConfig().getNodes().add(config, config.getSpecialty().getText());
			node.setExpandedImage(form.getImages().Core.RedSqaure);
			node.setCollapsedImage(form.getImages().Core.RedSqaure);
			node.setSelectedImage(form.getImages().Core.RedSqaure);
	
			form.treConfig().setValue(config);
			form.getLocalContext().setCurrentConfig(config);
			
			form.treConfig().setEnabled(true);
	
			displayRecord(config);
	
			showSpecialtyControls(false);
			updateContextMenuState();
		}
		else
		{
			engine.showMessage("Select a Specialty");
		}
	}

	protected void onCmbSpecialtyValueChanged() throws PresentationLogicException
	{
		form.btnAddSpecialty().setEnabled(form.cmbSpecialty().getValue()!= null);
		updateContextMenuState();		
	}
	protected void onTreConfigTreeViewNodeExpandCollapse(TreeNode node) throws PresentationLogicException 
	{
		treeViewNodeExpandCollapse(node);
	}

	private void treeViewNodeExpandCollapse(TreeNode node)
	{
		if(node == null)
			return;
		
		if (node.isExpanded())
			treeSelectionChanged(node);
	}
	
	private void reselectSavedRecord(PMHChecklistConfigVo voPMHChecklistConfigVo)
	{
		if(voPMHChecklistConfigVo == null)
			return;
		
		TreeNode node = getNodeToSelect(voPMHChecklistConfigVo);
		if(node != null)
		{
			form.treConfig().setValue(voPMHChecklistConfigVo);
			node.setExpanded(true);
			treeViewNodeExpandCollapse(node);
		}
	}

	private TreeNode getNodeToSelect(PMHChecklistConfigVo voPMHChecklistConfigVo)
	{
		for (int i = 0; i < form.treConfig().getNodes().size(); i++)
		{
			TreeNode treeNode = form.treConfig().getNodes().get(i);
			if(treeNode.getValue() != null && treeNode.getValue().equals(voPMHChecklistConfigVo))
				return treeNode;
		}
		
		return null;
	}
		
	
}
