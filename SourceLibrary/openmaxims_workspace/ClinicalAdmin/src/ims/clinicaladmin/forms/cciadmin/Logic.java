//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.45 build 2342.23634)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.cciadmin;

import ims.admin.helper.Keywords;
import ims.clinical.vo.PresentingComplainHotlistVo;
import ims.clinical.vo.PresentingComplaintVo;
import ims.clinical.vo.ProblemConfigVo;
import ims.clinical.vo.lookups.DoseFormIndicator;
import ims.clinical.vo.lookups.DoseFormIndicatorCollection;
import ims.clinicaladmin.forms.cciadmin.GenForm.ContextMenus.AdminNamespace.TaxonomyGrid;
import ims.clinicaladmin.forms.cciadmin.GenForm.ContextMenus.GenericGrid;
import ims.clinicaladmin.forms.cciadmin.GenForm.grdItemsRow;
import ims.clinicaladmin.forms.cciadmin.GenForm.lyrDetailsLayer.tabKeywordsContainer.grdKeywordsRow;
import ims.clinicaladmin.forms.cciadmin.GenForm.lyrDetailsLayer.tabMappingsContainer.grdMappingsRow;
import ims.clinicaladmin.forms.cciadmin.GenForm.rdoGrpEnumeration;
import ims.clinicaladmin.vo.CancerImagingHotlistShortVo;
import ims.clinicaladmin.vo.DiagnosisHotListShortVo;
import ims.clinicaladmin.vo.MedicationHotlistShortVo;
import ims.clinicaladmin.vo.ProblemHotlistShortVo;
import ims.clinicaladmin.vo.ProcedureHotlistShortVo;
import ims.clinicaladmin.vo.TreatmentInterventionHotlistShortVo;
import ims.clinicaladmin.vo.TreatmentInterventionVo;
import ims.clinicaladmin.vo.enums.CciType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AllergenDetails;
import ims.core.vo.CancerImagingEventVo;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.KeywordVo;
import ims.core.vo.KeywordVoCollection;
import ims.core.vo.MedicationFormVo;
import ims.core.vo.MedicationFormVoCollection;
import ims.core.vo.MedicationFullVo;
import ims.core.vo.MedicationRouteVo;
import ims.core.vo.MedicationRouteVoCollection;
import ims.core.vo.MedicationUnitVo;
import ims.core.vo.MedicationUnitVoCollection;
import ims.core.vo.ProcedureVo;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.VaccineVo;
import ims.core.vo.lookups.MedicationDoseUnit;
import ims.core.vo.lookups.MedicationDoseUnitCollection;
import ims.core.vo.lookups.MedicationRoute;
import ims.core.vo.lookups.MedicationRouteCollection;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.vo.LookupInstVo;
import ims.vo.interfaces.ICciFull;
import ims.vo.interfaces.IGenericItemInfo;
import ims.vo.interfaces.IHotlistShort;

import java.util.StringTokenizer;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int COL_MAIN = 1;
			
	protected void onFormOpen() 
	{
		initialize();
		open();
	}
	
	public void initialize() //WDEV-17431
	{
		form.rdoGrp().setVisible(rdoGrpEnumeration.rdoCancerImaging, ConfigFlag.UI.USE_CANCER_IMAGING.getValue());
		
		rdoGrpEnumeration initialValue = rdoGrpEnumeration.rdoAllergy;
		
		if(ConfigFlag.UI.CCI_ADMIN_DEFAULT_TYPE.getValue() != null)
		{
			initialValue = getCCIAdminType(ConfigFlag.UI.CCI_ADMIN_DEFAULT_TYPE.getValue());
		}
		
		form.rdoGrp().setValue(initialValue);
		setCciNames(form.rdoGrp().getValue());
		
		form.getContextMenus().getGenericGridAddItem().setText("New");
		form.getLocalContext().setcurrentCciType(getCciTypeFromrdoOption(initialValue));
		
		/*WDEV-11921 - Start
		//WDEV-11836 - starts here
		initializeUnitsGrid();
		initializeFormsGrid();
		initializeRoutesGrid();
		//WDEV-11836 - ends here
		 * 	WDEV-11921 - End*/
		 initializeFRUGrid();//WDEV-11921
		
		clearSearchLocalContext();
	}
	/*WDEV-11921 - Start
	//WDEV-11836
	private void initializeRoutesGrid() 
	{
		---Removed lines to save space an make the code a little easier to read----
		form.lyrDetails().tabUnits().dyngrdUnits().getColumns().getByIdentifier(COL_UNIT).setWidth(-1);
	}
	WDEV-11921 - End*/
	
	private void initializeFRUGrid() //WDEV-11921
	{
		form.lyrDetails().tabFRU().dyngrdFRU().clear();
		
		form.lyrDetails().tabFRU().dyngrdFRU().getColumns().newColumn("Forms/Routes/Units", COL_MAIN);
		form.lyrDetails().tabFRU().dyngrdFRU().getColumns().getByIdentifier(COL_MAIN).setWidth(-1);
	}
	private void clearSearchLocalContext() 
	{
		form.getLocalContext().setIsLastActionSearch(null);
		form.getLocalContext().setIsSearchReturnResults(null);
	}

	private rdoGrpEnumeration getCCIAdminType(String flag) 
	{
		if(flag == null)
			return rdoGrpEnumeration.rdoAllergy;
		
		if(flag.toUpperCase().equals(CciType.ALLERGEN.getText().toUpperCase()))
			return rdoGrpEnumeration.rdoAllergy;
		if(flag.toUpperCase().equals(CciType.DIAGNOSIS.getText().toUpperCase()))
			return rdoGrpEnumeration.rdoDiagnoses;
		if(flag.toUpperCase().equals(CciType.MEDICATION.getText().toUpperCase()))
			return rdoGrpEnumeration.rdoMedications;
		if(flag.toUpperCase().equals(CciType.PROBLEM.getText().toUpperCase()))
			return rdoGrpEnumeration.rdoProblems;
		if(flag.toUpperCase().equals(CciType.PROCEDURE.getText().toUpperCase()))
			return rdoGrpEnumeration.rdoProcedures;
		if(flag.toUpperCase().equals(CciType.VACCINE.getText().toUpperCase()))
			return rdoGrpEnumeration.rdoVaccine;
		if(flag.toUpperCase().equals(CciType.CANCERIMAGE.getText().toUpperCase()))
			return rdoGrpEnumeration.rdoCancerImaging;
		if(flag.toUpperCase().equals(CciType.PRESENTING_ISSUE.getText().toUpperCase()))
			return rdoGrpEnumeration.rdoPresentingIssue;
		//WDEV-17060
		if(flag.toUpperCase().equals(CciType.TREATMENT_INTERVENTION.getText().toUpperCase()))
			return rdoGrpEnumeration.rdoTreatmentIntervention;
		
		return rdoGrpEnumeration.rdoAllergy;
	}

	private CciType getCciTypeFromrdoOption(rdoGrpEnumeration rdoOption)
	{		
		if (rdoOption == rdoGrpEnumeration.rdoAllergy)
		{
			return CciType.ALLERGEN;
		}		
		else if (rdoOption == rdoGrpEnumeration.rdoDiagnoses)
		{
			return CciType.DIAGNOSIS;
		}		
		else if (rdoOption == rdoGrpEnumeration.rdoMedications)
		{
			return CciType.MEDICATION;
		}		
		else if (rdoOption == rdoGrpEnumeration.rdoProblems)
		{
			return CciType.PROBLEM;
		}		
		else if (rdoOption == rdoGrpEnumeration.rdoProcedures)
		{
			return CciType.PROCEDURE;
		}	
		else if (rdoOption == rdoGrpEnumeration.rdoCancerImaging)
		{
			return CciType.CANCERIMAGE;
		}
		else if (rdoOption == rdoGrpEnumeration.rdoVaccine)
		{
			return CciType.VACCINE;
		}
		else if(rdoOption == rdoGrpEnumeration.rdoPresentingIssue)
		{
			return CciType.PRESENTING_ISSUE;
		}
		else if (rdoOption == rdoGrpEnumeration.rdoTreatmentIntervention) //WDEV-17060
		{
			return CciType.TREATMENT_INTERVENTION;
		}
		else 
		{
			throw new DomainRuntimeException("Unknown CCI type in 'getCciTypeFromrdoOption' = " + rdoOption.toString());
		}
	}
	
	/**
	 * If local context is not null, sets the selection in the grid and populates 
	 * details in the details panel.
	 * @param void
	 * @return void
	 */
	public void open()
	{
		if (form.getLocalContext().getSelectedItemIsNotNull())
		{
			form.getLocalContext().setSelectedItem(domain.getCci(form.getLocalContext().getSelectedItem(), form.getLocalContext().getcurrentCciType()));
			if (form.getLocalContext().getSelectedItemIsNotNull())
				if (form.getLocalContext().getSelectedItem().getIGenericItemInfoName() != null && form.getLocalContext().getSelectedItem().getIGenericItemInfoName().length() >= 3)
				{
					form.txtSearch().setValue(form.getLocalContext().getSelectedItem().getIGenericItemInfoName());
					populateListControl(domain.listCciLite(form.getLocalContext().getSelectedItem().getIGenericItemInfoName(), form.getLocalContext().getcurrentCciType(), Boolean.FALSE));
				}
			populateInstanceControls(form.getLocalContext().getSelectedItem());
			form.grdItems().setValue( form.getLocalContext().getSelectedItem() );
		}
		form.txtSearch().setFocus();
		form.setMode(FormMode.VIEW);
	}
	
	protected void onFormModeChanged() 
	{	
		updateControlsState();
	}
	
	public void updateControlsState()
	{
		boolean viewMode = form.getMode().equals(FormMode.VIEW);
		if (form.rdoGrp().getValue().equals(rdoGrpEnumeration.rdoProcedures))
		{
			form.intLOS().setEnabled(viewMode ? Boolean.FALSE : Boolean.TRUE);
			form.intProcDuration().setEnabled(viewMode ? Boolean.FALSE : Boolean.TRUE);
			form.intTCILag().setEnabled(viewMode ? Boolean.FALSE : Boolean.TRUE); //WDEV-12918
			
			// WDEV-17934
			form.cmbSurgeonCat().setEnabled(viewMode ? Boolean.FALSE : Boolean.TRUE);
			form.cmbAnaesthetistCat().setEnabled(viewMode ? Boolean.FALSE : Boolean.TRUE);
			form.cmbHospitalCat().setEnabled(viewMode ? Boolean.FALSE : Boolean.TRUE);
			
		}

		if (viewMode)
		{
			form.cmbAlgType().setEnabled(false);
			form.cmbTreatInterventionType().setEnabled(false);//WDEV-17125
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			form.getContextMenus().getGenericGridUpdateItem().setVisible(form.grdItems().getSelectedRowIndex() >= 0);
			form.btnEdit().setVisible(form.grdItems().getSelectedRowIndex() >= 0);
			form.getContextMenus().getKeywordAdminAddItem().setVisible(false);
			form.getContextMenus().getKeywordAdminMoveDownItem().setVisible(false);
			form.getContextMenus().getKeywordAdminMoveUpItem().setVisible(false);
			form.getContextMenus().getKeywordAdminRemoveAllItem().setVisible(false);
			form.getContextMenus().getKeywordAdminRestoreItem().setVisible(false);
			form.getContextMenus().getKeywordAdminRemoveItem().setVisible(false);
			form.getContextMenus().Admin.getTaxonomyGridAddTaxonomyItem().setVisible(false);
			form.getContextMenus().Admin.getTaxonomyGridUpdateTaxonomyItem().setVisible(false);
			form.getContextMenus().Admin.getTaxonomyGridRemoveTaxonomyItem().setVisible(false);
			form.getContextMenus().getCciHotlistUpdateItem().setVisible(false);
			//WDEV-13584 if (form.getLocalContext().getcurrentCciType().equals(CciType.ALLERGEN) || (Boolean.FALSE.equals(ConfigFlag.UI.EXTENDED_MEDICATION_DATASET.getValue()) && form.getLocalContext().getcurrentCciType().equals(CciType.MEDICATION)) || form.getLocalContext().getcurrentCciType().equals(CciType.PRESENTING_ISSUE))	//WDEV-11836
			form.lyrDetails().showtabKeywords();
		} 	
		else
		{
			form.lyrDetails().tabKeywords().grdKeywords().setEnabled(true);
			form.lyrDetails().tabKeywords().grdKeywords().setReadOnly(false);
			form.cmbAlgType().setEnabled(true);
			form.cmbTreatInterventionType().setEnabled(true);//WDEV-17125
			form.getContextMenus().getGenericGridAddItem().setVisible(false);
			form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
			form.getContextMenus().Admin.getTaxonomyGridAddTaxonomyItem().setVisible(true);
			form.getContextMenus().Admin.getTaxonomyGridUpdateTaxonomyItem().setVisible(form.lyrDetails().tabMappings().grdMappings().getSelectedRowIndex()>=0);//WDEV-11921
			form.getContextMenus().Admin.getTaxonomyGridRemoveTaxonomyItem().setVisible(form.lyrDetails().tabMappings().grdMappings().getSelectedRowIndex()>=0);//WDEV-11921
			form.getContextMenus().getKeywordAdminAddItem().setVisible(true);
			form.getContextMenus().getKeywordAdminMoveDownItem().setVisible(form.lyrDetails().tabKeywords().grdKeywords().canMoveCurrentDown());
			form.getContextMenus().getKeywordAdminMoveUpItem().setVisible(form.lyrDetails().tabKeywords().grdKeywords().canMoveCurrentUp());
			form.getContextMenus().getKeywordAdminRemoveAllItem().setVisible(form.lyrDetails().tabKeywords().grdKeywords().getRows().size() > 0);
			form.getContextMenus().getKeywordAdminRestoreItem().setVisible(form.lyrDetails().tabKeywords().grdKeywords().isEnabled());
			form.getContextMenus().getCciHotlistUpdateItem().setVisible(form.lyrDetails().tabHotlists().isHeaderEnabled() && (form.getLocalContext().getcurrentCciType().equals(CciType.PROBLEM) || form.getLocalContext().getcurrentCciType().equals(CciType.DIAGNOSIS) || form.getLocalContext().getcurrentCciType().equals(CciType.PROCEDURE) || form.getLocalContext().getcurrentCciType().equals(CciType.CANCERIMAGE) || form.getLocalContext().getcurrentCciType().equals(CciType.MEDICATION) || form.getLocalContext().getcurrentCciType().equals(CciType.PRESENTING_ISSUE) || form.getLocalContext().getcurrentCciType().equals(CciType.TREATMENT_INTERVENTION)));//WDEV-17060
			form.txtName().setEnabled(true);
			
			if (form.getLocalContext().getSelectedItemIsNotNull() && form.getLocalContext().getSelectedItem().getIGenericItemInfoID() != null)
				form.getContextMenus().getKeywordAdminRestoreItem().setText("Restore defaults");
			else
				form.getContextMenus().getKeywordAdminRestoreItem().setText("Set to default");
			
			// WDEV-2839 - 1 - Keywords grids were becoming available while creating a new record on closing a dialog. 
			if (form.getLocalContext().getSelectedItemIsNotNull() && form.getLocalContext().getSelectedItem().getIGenericItemInfoID() == null) 
			{
				newInstanceControlState();
			}
		}
		//WDEV-11921 -start
		form.lyrDetails().tabFRU().setHeaderVisible(ConfigFlag.UI.EXTENDED_MEDICATION_DATASET.getValue());
		form.lyrDetails().tabFRU().setHeaderEnabled(rdoGrpEnumeration.rdoMedications.equals(form.rdoGrp().getValue()));
		
		form.lyrDetails().tabDefaultValues().setHeaderVisible(rdoGrpEnumeration.rdoMedications.equals(form.rdoGrp().getValue()) && ConfigFlag.UI.DISPLAY_DEFAULT_VALUES_FOR_MEDICATION_ON_CCI_ADMIN.getValue());//	WDEV-13584
		form.lyrDetails().tabDefaultValues().setHeaderEnabled(rdoGrpEnumeration.rdoMedications.equals(form.rdoGrp().getValue()) && ConfigFlag.UI.DISPLAY_DEFAULT_VALUES_FOR_MEDICATION_ON_CCI_ADMIN.getValue());//	WDEV-13584

		form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuADDFORMItem().setVisible(!viewMode);
		form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuADDROUTEItem().setVisible(!viewMode);
		form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuADDUNITSItem().setVisible(!viewMode);
		form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuREMOVEFORMItem().setVisible(!viewMode);
		form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuREMOVEROUTEItem().setVisible(!viewMode);
		form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuREMOVEUNITSItem().setVisible(!viewMode);
		
		Object selected = form.lyrDetails().tabFRU().dyngrdFRU().getValue();
		boolean isForm = selected instanceof MedicationFormVo;
		boolean isRoute = !isForm && selected instanceof MedicationRouteVo;
		boolean isUnit = !isForm && !isRoute && selected instanceof MedicationUnitVo;
		
		form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuADDFORMItem().setEnabled(true);
		form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuREMOVEFORMItem().setEnabled(isForm);
		
		form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuADDROUTEItem().setEnabled(isForm || isRoute || isUnit);
		form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuREMOVEROUTEItem().setEnabled(isRoute);
	
		form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuADDUNITSItem().setEnabled(isRoute || isUnit);
			form.getContextMenus().ClinicalAdmin.getMedicationFRUMenuREMOVEUNITSItem().setEnabled(isUnit);
		
		//WDEV-11921 -end
		
		/*WDEV-11921
		//WDEV-11836 - starts here
		form.lyrDetails().tabUnits().setHeaderVisible(ConfigFlag.UI.EXTENDED_MEDICATION_DATASET.getValue());
		form.lyrDetails().tabForms().setHeaderVisible(ConfigFlag.UI.EXTENDED_MEDICATION_DATASET.getValue());
		form.lyrDetails().tabRoutes().setHeaderVisible(ConfigFlag.UI.EXTENDED_MEDICATION_DATASET.getValue());
		
		form.lyrDetails().tabUnits().setHeaderEnabled(rdoGrpEnumeration.rdoMedications.equals(form.rdoGrp().getValue()));
		form.lyrDetails().tabForms().setHeaderEnabled(rdoGrpEnumeration.rdoMedications.equals(form.rdoGrp().getValue()));
		form.lyrDetails().tabRoutes().setHeaderEnabled(rdoGrpEnumeration.rdoMedications.equals(form.rdoGrp().getValue()));
		WDEV-11921*/
		form.lblControlledDrug().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.EXTENDED_MEDICATION_DATASET.getValue()) && rdoGrpEnumeration.rdoMedications.equals(form.rdoGrp().getValue()));
		form.chkControlledDrug().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.EXTENDED_MEDICATION_DATASET.getValue()) && rdoGrpEnumeration.rdoMedications.equals(form.rdoGrp().getValue()));
		form.chkControlledDrug().setEnabled(FormMode.EDIT.equals(form.getMode()));
		/*WDEV-11921
		form.getContextMenus().ClinicalAdmin.getUnitsMenuForCCIAdminADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().ClinicalAdmin.getUnitsMenuForCCIAdminREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabUnits().dyngrdUnits().getSelectedRow() != null);
		form.getContextMenus().ClinicalAdmin.getUnitsMenuForCCIAdminREMOVE_ALLItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabUnits().dyngrdUnits().getRows().size() > 0);
		
		form.getContextMenus().ClinicalAdmin.getFormsMenuForCCIAdminADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().ClinicalAdmin.getFormsMenuForCCIAdminREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabForms().dyngrdForms().getSelectedRow() != null);
		form.getContextMenus().ClinicalAdmin.getFormsMenuForCCIAdminREMOVE_ALLItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabForms().dyngrdForms().getRows().size() > 0);
		
		form.getContextMenus().ClinicalAdmin.getRoutesMenuForCCIAdminADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().ClinicalAdmin.getRoutesMenuForCCIAdminREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabRoutes().dyngrdRoutes().getSelectedRow() != null);
		form.getContextMenus().ClinicalAdmin.getRoutesMenuForCCIAdminREMOVE_ALLItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabRoutes().dyngrdRoutes().getRows().size() > 0);
		//WDEV-11836 - ends here WDEV-11921*/
		
		form.cmbTreatInterventionType().setRequired(FormMode.EDIT.equals(form.getMode()));//WDEV-17125
	}
	
	/**
	 * Performs some updates to the controls state to happen only on a new instance being created. 
	 * @param void
	 * @return void
	 */
	private void newInstanceControlState() 
	{
		form.lyrDetails().tabKeywords().grdKeywords().setEnabled(false);
		form.getContextMenus().getKeywordAdminAddItem().setVisible(false);
		form.txtName().setEnabled(true);
	}
	
	protected void onRadioButtonrdoGrpValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		setCciNames(form.rdoGrp().getValue());
		clearSearchLocalContext();
		clearScreen();
		updateControlsState();
		form.txtSearch().setValue("");
		form.txtSearch().setFocus();
	}
	
	/**
	 * Based on the given radio item, sets the text of the screen to match
	 * @param rdoGrpEnumeration
	 * @return void
	 */
	private void setCciNames(rdoGrpEnumeration rdoOption)
	{
		form.cmbAlgType().setVisible(rdoOption == rdoGrpEnumeration.rdoAllergy);
		form.cmbTreatInterventionType().setVisible(rdoOption == rdoGrpEnumeration.rdoTreatmentIntervention);//WDEV-17125
		form.lblAlgType().setVisible(rdoOption == rdoGrpEnumeration.rdoAllergy || rdoOption == rdoGrpEnumeration.rdoProcedures || rdoOption == rdoGrpEnumeration.rdoTreatmentIntervention); //WDEV-7323	//WDEV-17125
		form.intProcDuration().setVisible(rdoOption == rdoGrpEnumeration.rdoProcedures);
		//WDEV-12918
		form.intTCILag().setVisible(rdoOption == rdoGrpEnumeration.rdoProcedures);
		form.lblTCILagTime().setVisible(rdoOption == rdoGrpEnumeration.rdoProcedures);
		form.lblMins().setVisible(rdoOption == rdoGrpEnumeration.rdoProcedures);
		
		// WDEV-17934
		form.lblSurgeonCat().setVisible(rdoOption == rdoGrpEnumeration.rdoProcedures);
		form.lblAnaesthetistCat().setVisible(rdoOption == rdoGrpEnumeration.rdoProcedures);
		form.lblHospitalCat().setVisible(rdoOption == rdoGrpEnumeration.rdoProcedures);
		form.cmbSurgeonCat().setVisible(rdoOption == rdoGrpEnumeration.rdoProcedures);
		form.cmbAnaesthetistCat().setVisible(rdoOption == rdoGrpEnumeration.rdoProcedures);
		form.cmbHospitalCat().setVisible(rdoOption == rdoGrpEnumeration.rdoProcedures);
		

		//wdev-7535
		form.lblLOS().setVisible(Boolean.FALSE);
		form.lblDays().setVisible(Boolean.FALSE);
		form.intLOS().setVisible(Boolean.FALSE);

		if(rdoOption == rdoGrpEnumeration.rdoProcedures)
		{
			form.lblAlgType().setValue("Duration in Mins:");	
			form.lblLOS().setVisible(Boolean.TRUE);
			form.lblDays().setVisible(Boolean.TRUE);
			form.intLOS().setVisible(Boolean.TRUE);
			
			form.intLOS().setEnabled(form.getMode().equals(FormMode.VIEW) ? Boolean.FALSE : Boolean.TRUE);
			form.intProcDuration().setEnabled(form.getMode().equals(FormMode.VIEW) ? Boolean.FALSE : Boolean.TRUE);
			form.intTCILag().setEnabled(form.getMode().equals(FormMode.VIEW) ? Boolean.FALSE : Boolean.TRUE); //WDEV-12918
			
			// WDEV-17934
			form.cmbAnaesthetistCat().setEnabled(form.getMode().equals(FormMode.VIEW) ? Boolean.FALSE : Boolean.TRUE); 
			form.cmbSurgeonCat().setEnabled(form.getMode().equals(FormMode.VIEW) ? Boolean.FALSE : Boolean.TRUE); 
			form.cmbHospitalCat().setEnabled(form.getMode().equals(FormMode.VIEW) ? Boolean.FALSE : Boolean.TRUE); 


		}
		else if (rdoOption == rdoGrpEnumeration.rdoAllergy || rdoOption == rdoGrpEnumeration.rdoTreatmentIntervention)//WDEV-17125
		{
			form.lblAlgType().setValue("Type:"); //WDEV-16090
		}
		
		String cciName = getCciName(rdoOption);
		form.pnlSearch().setValue("Search " + cciName + " List");
		form.pnlDetails().setValue(cciName + " Details");
		form.lblCciName().setValue(cciName + " Name:");
		form.grdItems().setCCINameCaption(cciName + " Name");
		
		form.getLocalContext().setcurrentCciType(getCciTypeFromrdoOption(rdoOption));
		
		form.lyrDetails().tabKeywords().setScrollToTop(true);
		form.lyrDetails().tabHotlists().setHeaderEnabled(!(rdoOption == rdoGrpEnumeration.rdoAllergy || rdoOption == rdoGrpEnumeration.rdoVaccine));
		
	}
	
	private String getCciName(rdoGrpEnumeration rdoOption)
	{
		String cciName = "";
		if (rdoOption == rdoGrpEnumeration.rdoAllergy)
		{
			cciName = "Allergen";
		}		
		else if (rdoOption == rdoGrpEnumeration.rdoDiagnoses)
		{
			cciName = "Diagnosis";
		}		
		else if (rdoOption == rdoGrpEnumeration.rdoMedications)
		{
			cciName = "Medication";
		}		
		else if (rdoOption == rdoGrpEnumeration.rdoProblems)
		{
			cciName = "Problem";
		}		
		else if (rdoOption == rdoGrpEnumeration.rdoProcedures)
		{
			cciName = "Procedure";
		}	
		else if (rdoOption == rdoGrpEnumeration.rdoCancerImaging)
		{
			cciName = "Cancer Imaging";
		}
		else if (rdoOption == rdoGrpEnumeration.rdoVaccine)
		{
			cciName = "Vaccine";
		}
		else if(rdoOption == rdoGrpEnumeration.rdoPresentingIssue)
		{
			cciName = "Presenting Issue";
		}
		else if (rdoOption == rdoGrpEnumeration.rdoTreatmentIntervention) //WDEV-17060
		{
			cciName = "Treatment/Intervention";
		}
		else 
		{
			throw new DomainRuntimeException("Unknown CCI type in 'getCciName' = " + rdoOption.toString());
		}
		return cciName;		
	}
	
	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();			
	}
	
	/**
	 * Performs a domain search using the search criteria and populates any results in the grid
	 * @param void
	 * @return void
	 */
	public void search()
	{		
		if (form.txtSearch().getValue() == null || form.txtSearch().getValue().length() < 3)
		{
			engine.showMessage("Please enter a search string of at least 3 characters.");
			return;
		}
		super.search();
		
		form.getLocalContext().setIsLastActionSearch(true);
		
		populateListControl(domain.listCciLite(form.txtSearch().getValue(), form.getLocalContext().getcurrentCciType(), Boolean.valueOf(form.chkActiveOnly().getValue())));
		updateControlsState();
	}
	
	/**
	 * Takes a collection of IGenericItemInfo and populates a row in the Item grid
	 * formeach member of the collection
	 * @param IGenericItemInfo[]
	 * @return void
	 */
	private void populateListControl(IGenericItemInfo[] collItems) 
	{
		clearScreen();
		
		if (collItems == null)
		{
			engine.showMessage("No matching " + form.getLocalContext().getcurrentCciType().toString() + " items found");
			form.getLocalContext().setIsSearchReturnResults(false);
			return;
		}
		
		for (int i = 0; i < collItems.length; i++)
		{
			grdItemsRow row = form.grdItems().getRows().newRow();
			setInstanceRowDetails(row, collItems[i]);
		}
	}
	
	/**
	 * Adds a row to the grid based on the given IGenericItemInfo
	 * @param IGenericItemInfo
	 * @param grdItemsRow
	 * @return void
	 */
	private void setInstanceRowDetails(grdItemsRow row, IGenericItemInfo vo)
	{
		row.setCCIName(vo.getIGenericItemInfoName());

		row.setValue(vo);			
		if (!vo.getIGenericItemInfoIsActive().booleanValue())
		{
			row.setBold(false);
			row.setTextColor(Color.Gray);
		}
		else
		{
			row.setBold(true);
			row.setTextColor(Color.Default);
		}	
	}
	
	public void clearScreen()
	{
		clearListControls();
		clearInstanceControls();
	}
	
	public void clearListControls()
	{
		form.grdItems().getRows().clear();
		form.grdItems().setValue(null);
	}
	
	public void clearInstanceControls()
	{
		form.intProcDuration().setValue(null);
		form.intTCILag().setValue(null); //WDEV-12918
		// WDEV-17934
		form.cmbAnaesthetistCat().setValue(null);
		form.cmbHospitalCat().setValue(null);
		form.cmbSurgeonCat().setValue(null);
		
		form.txtName().setValue(null);
		form.cmbAlgType().setValue(null);
		form.cmbTreatInterventionType().setValue(null);//WDEV-17125
		form.chkIsActive().setValue(false);
		form.lyrDetails().tabMappings().grdMappings().getRows().clear();
		form.lyrDetails().tabKeywords().grdKeywords().getRows().clear();
		form.lyrDetails().tabHotlists().treHotlists().clear();
		form.intLOS().setValue(null);
		//form.getLocalContext().setSelectedItem(null);
		
		//WDEV-11836 - starts here
		form.chkControlledDrug().setValue(false);
		//WDEV-11921 - starts here
		form.lyrDetails().tabFRU().dyngrdFRU().getRows().clear();
		/*
		form.lyrDetails().tabUnits().dyngrdUnits().getRows().clear();
		form.lyrDetails().tabForms().dyngrdForms().getRows().clear();
		form.lyrDetails().tabRoutes().dyngrdRoutes().getRows().clear();
		//WDEV-11836 - ends here
		 * WDEV-11921
		 */
		
		form.lyrDetails().tabDefaultValues().cmbFrequency().setValue(null);//	WDEV-13584
		form.lyrDetails().tabDefaultValues().intDays().setValue(null);//	WDEV-13584
	}
	
	protected void onGrdItemsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdItems().getValue() == null)
			return;
		
		// clear the context to populate for new selected cci
		form.getLocalContext().setIHotlistShorts(null);
		form.getGlobalContext().Core.setSpecialties(null);
		
		ICciFull cci = domain.getCci(form.grdItems().getValue(), form.getLocalContext().getcurrentCciType());
		form.getLocalContext().setSelectedItem(cci);
		populateInstanceControls(cci);
	}
	
	/**
	 * Populate the Details panel for a given ICciFull
	 * @param ICciFull
	 * @return void
	 */
	private void populateInstanceControls(ICciFull cci)
	{
		clearInstanceControls();
		
		if (cci == null)
			return;
		
		form.txtName().setValue(cci.getIGenericItemInfoName());
		form.cmbAlgType().setValue(cci.getCciAllergenType());
		form.cmbTreatInterventionType().setValue(cci.getCciTreatmentInterventionType()); //WDEV-17125
		form.intProcDuration().setValue(cci.getCciProcedureDuration());
		form.intTCILag().setValue(cci.getCciTCILagTime()); //WDEV-12918
		form.intLOS().setValue(cci.getCciProcedureLOS());
		
		// WDEV-17934
		form.cmbSurgeonCat().setValue(cci.getSurgeonCategory());
		form.cmbAnaesthetistCat().setValue(cci.getAnaesthetistCategory());
		form.cmbHospitalCat().setValue(cci.getHospitalCategory());
		
		form.chkIsActive().setValue(cci.getIGenericItemInfoIsActive() != null? cci.getIGenericItemInfoIsActive().booleanValue() : false);
		populateTaxonomyMappings(cci.getCciMappings());
		populateKeywords(cci.getCciKeywords());
		//WDEV-11921 - Start
		if (cci instanceof MedicationFullVo)
		{
			MedicationFullVo med = (MedicationFullVo) cci;
			form.chkControlledDrug().setValue(med.getIsControlledDrugIsNotNull() && med.getIsControlledDrug());
			populateFRU(med.getForms());
			
			form.lyrDetails().tabDefaultValues().cmbFrequency().setValue(med.getFrequencyDefault());//	WDEV-13584
			form.lyrDetails().tabDefaultValues().intDays().setValue(med.getNoOfDaysSupplyDefault());//	WDEV-13584
		}
		//WDEV-11921 - End
		/*WDEV-11921
		//WDEV-11836 - starts here
		
		form.chkControlledDrug().setValue(cci.getIIsControlledDrug());
		
		populateUnitsGrid(cci.getUnits());
		populateFormsGrid(cci.getForms());
		populateRoutesGrid(cci.getRoutes());
		//WDEV-11836 - ends here
		 * WDEV-11921
		 */
		
		// for the moment, hotlists are only available for procedure, problem and diagnosis
		if ( cci instanceof DiagnosisVo 
				|| cci instanceof ProblemConfigVo 
				|| cci instanceof ProcedureVo
				|| cci instanceof MedicationFullVo//WDEV-11921
				|| cci instanceof CancerImagingEventVo
				|| cci instanceof PresentingComplaintVo
				|| cci instanceof TreatmentInterventionVo)//WDEV-17060			
			populateHotlists(cci.getIGenericItemInfoID());

		updateControlsState();
	}
	
	
	private void populateFRU(MedicationFormVoCollection forms)
	{
		form.lyrDetails().tabFRU().dyngrdFRU().getRows().clear();
		if (forms == null)
			return;
		for (int i = 0 ; i < forms.size() ; i++)
		{
			DynamicGridRow nForm = addForm(forms.get(i), true);
			if (nForm != null && forms.get(i).getFormRoutesIsNotNull())
			{
				for (int j = 0 ; j < forms.get(i).getFormRoutes().size(); j++)
				{
					DynamicGridRow nRoute = addRoute(forms.get(i).getFormRoutes().get(j), false, nForm);
					if (nRoute!=null && forms.get(i).getFormRoutes().get(j).getRouteUnitsIsNotNull())
					{
						for (int k = 0 ; k < forms.get(i).getFormRoutes().get(j).getRouteUnits().size() ; k++)
						{
							addUnit(forms.get(i).getFormRoutes().get(j).getRouteUnits().get(k), false, nRoute);
						}
						rebindUnitRows(nRoute);
					}
				}
				rebindRouteRows(nForm);
			}
		}
		rebindFormRows();
		
	}

	/*WDEV-11921
	//WDEV-11836
	private void populateRoutesGrid(MedicationRouteCollection routes) 
	{
		if(routes == null || routes.size() == 0)
			return;
		
		form.lyrDetails().tabRoutes().dyngrdRoutes().getRows().clear();
		
		for(int i=0; i<routes.size(); i++)
		{
			if(routes.get(i) == null)
				continue;
			
			DynamicGridRow row = form.lyrDetails().tabRoutes().dyngrdRoutes().getRows().newRow();
			
			DynamicGridColumn column = null;
			DynamicGridCell cell = null;
			
			column = form.lyrDetails().tabRoutes().dyngrdRoutes().getColumns().getByIdentifier(COL_UNIT);
			cell = row.getCells().newCell(column, DynamicCellType.ENUMERATION);
			cell.setTooltip("");
			cell.setAutoPostBack(true);
			cell.setReadOnly(false);
			
			cell.getItems().newItem(routes.get(i));
			populateUnselectedRoutesItems(cell, routes);
			
			cell.setValue(routes.get(i));
			row.setValue(routes.get(i));
		}
	}

	private void populateUnselectedRoutesItems(DynamicGridCell cell, MedicationRouteCollection routes) 
	{
		if(cell == null || routes == null || routes.size() == 0)
			return;
		
		MedicationRouteCollection allRoutes = ims.core.vo.lookups.LookupHelper.getMedicationRoute(this.domain.getLookupService());
		
		for(int i = 0; i < allRoutes.size(); i++)
		{
			if(routes.contains(allRoutes.get(i)))
				continue;
			
			cell.getItems().newItem(allRoutes.get(i));
		}
	}

	//WDEV-11836
	private void populateFormsGrid(DoseFormIndicatorCollection forms) 
	{
		if(forms == null || forms.size() == 0)
			return;
		
		form.lyrDetails().tabForms().dyngrdForms().getRows().clear();
		
		for(int i=0; i<forms.size(); i++)
		{
			if(forms.get(i) == null)
				continue;
			
			DynamicGridRow row = form.lyrDetails().tabForms().dyngrdForms().getRows().newRow();
			
			DynamicGridColumn column = null;
			DynamicGridCell cell = null;
			
			column = form.lyrDetails().tabForms().dyngrdForms().getColumns().getByIdentifier(COL_UNIT);
			cell = row.getCells().newCell(column, DynamicCellType.ENUMERATION);
			cell.setTooltip("");
			cell.setAutoPostBack(true);
			cell.setReadOnly(false);
			
			cell.getItems().newItem(forms.get(i));
			populateUnselectedFormsItems(cell, forms);
			
			cell.setValue(forms.get(i));
			row.setValue(forms.get(i));
		}
	}

	//WDEV-11836
	private void populateUnselectedFormsItems(DynamicGridCell cell, DoseFormIndicatorCollection forms) 
	{
		if(cell == null || forms == null || forms.size() == 0)
			return;
		
		DoseFormIndicatorCollection allForms = ims.clinical.vo.lookups.LookupHelper.getDoseFormIndicator(this.domain.getLookupService());
		
		for(int i = 0; i < allForms.size(); i++)
		{
			if(forms.contains(allForms.get(i)))
				continue;
			
			cell.getItems().newItem(allForms.get(i));
		}
	}

	//WDEV-11836
	private void populateUnitsGrid(MedicationDoseUnitCollection units) 
	{
		if(units == null || units.size() == 0)
			return;
		
		form.lyrDetails().tabUnits().dyngrdUnits().getRows().clear();
		
		for(int i=0; i<units.size(); i++)
		{
			if(units.get(i) == null)
				continue;
			
			DynamicGridRow row = form.lyrDetails().tabUnits().dyngrdUnits().getRows().newRow();
			
			DynamicGridColumn column = null;
			DynamicGridCell cell = null;
			
			column = form.lyrDetails().tabUnits().dyngrdUnits().getColumns().getByIdentifier(COL_UNIT);
			cell = row.getCells().newCell(column, DynamicCellType.ENUMERATION);
			cell.setTooltip("");
			cell.setAutoPostBack(true);
			cell.setReadOnly(false);
			
			cell.getItems().newItem(units.get(i));
			populateUnselectedUnitsItems(cell, units);
			
			cell.setValue(units.get(i));
			row.setValue(units.get(i));
		}
	}

	//WDEV-11836
	private void populateUnselectedUnitsItems(DynamicGridCell cell, MedicationDoseUnitCollection units) 
	{
		if(cell == null || units == null || units.size() == 0)
			return;
		
		MedicationDoseUnitCollection allUnits = ims.core.vo.lookups.LookupHelper.getMedicationDoseUnit(this.domain.getLookupService());
		
		for(int i = 0; i < allUnits.size(); i++)
		{
			if(units.contains(allUnits.get(i)))
				continue;
			
			cell.getItems().newItem(allUnits.get(i));
		}
	}
	WDEV-11921*/
	/**
	 * Gets the hotlists associated with a given object name, based on the current ccitype
	 * @param String
	 * @return void
	 */
	private void populateHotlists(Integer cciID) 
	{
		IHotlistShort[] collIHotlistShort = domain.listIHotlistShortsByCCI(cciID, form.getLocalContext().getcurrentCciType());
		
		if (collIHotlistShort != null)
		{
			form.getLocalContext().setIHotlistShorts(collIHotlistShort);
			SpecialtyCollection specialties = new SpecialtyCollection();
			
			// loop through results adding each associated specialty to a collection
			for (int i = 0; i < collIHotlistShort.length; i++ )
			{
				if (collIHotlistShort[i].getISpecialtyIsNotNull().booleanValue())
				{
					specialties.add(collIHotlistShort[i].getISpecialty());
				}
					
			}
			form.getGlobalContext().Core.setSpecialties(specialties);
			
			populateHotlistsTree(form.getGlobalContext().Core.getSpecialties());
		}
	}

	/**
	 * Populates the Hotlists grid for a given SpecialtyCollection
	 * @param SpecialtyCollection
	 * @return void
	 */
	private void populateHotlistsTree(SpecialtyCollection specialties)
	{	
		form.lyrDetails().tabHotlists().treHotlists().getNodes().clear();
		
		if (specialties != null)
		{
			for ( int i = 0; i < specialties.size(); i++ )
			{
				form.lyrDetails().tabHotlists().treHotlists().getNodes().add(specialties.get(i), specialties.get(i).getText());
			}
			
			form.lyrDetails().tabHotlists().treHotlists().getNodes().sortByText();
		}
	}
	
	/**
	 * Populates the Taxonomy Mappings grid for a given TaxonomyMapCollection
	 * @param TaxonomyMapCollection
	 * @return void
	 */
	private void populateTaxonomyMappings(TaxonomyMapCollection coll)
	{
		form.lyrDetails().tabMappings().grdMappings().getRows().clear();//WDEV-1921
		
		if (coll != null)
		{
			grdMappingsRow row = null;
			for (int i=0; i < coll.size(); i++)
			{
				row = form.lyrDetails().tabMappings().grdMappings().getRows().newRow();//WDEV-1921					
				row.setcolExtCodeType(coll.get(i).getTaxonomyName());					
				row.setcolCode(coll.get(i).getTaxonomyCode());					
				row.setValue(coll.get(i));
			}
		}
	}
	
	/**
	 * Populates the Keywords grid for a given KeywordVoCollection
	 * @param KeywordVoCollection
	 * @return void
	 */
	private void populateKeywords(KeywordVoCollection keys)
	{
		form.lyrDetails().tabKeywords().grdKeywords().getRows().clear();
		if (keys != null)
		{
			form.lyrDetails().tabKeywords().grdKeywords().getRows().clear();
			grdKeywordsRow row = null;
			for (int i=0; i < keys.size(); i++)
			{
				row = form.lyrDetails().tabKeywords().grdKeywords().getRows().newRow();					
				row.setKeyword(keys.get(i).getKeyword());					
				row.setValue(keys.get(i));
			}
		}		
	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	public void updateInstance()
	{
		clearSearchLocalContext();
		
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearInstanceControls();
		open();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{	
		if (save())
		{
			form.txtSearch().setValue(form.getLocalContext().getSelectedItem().getIGenericItemInfoName());
			open();
		}
			
	}
	
	/**
	 * Populates the data from screen and attempts to save.
	 */
	public boolean save() throws PresentationLogicException
	{
		
		if (form.txtName().getValue() != null)// || form.txtName().getValue().trim().length() < 3)
		{
			StringTokenizer st=new StringTokenizer(form.txtName().getValue()," ");
			int number=0;
			while (st.hasMoreElements())
			{
				number=number + st.nextToken().length();
			}
			if (number<3)
			{
				engine.showMessage("Please enter a " + form.getLocalContext().getcurrentCciType().toString() + " name of length greater than 3 letters");
				return false;
			}
			
		}
		else
		{
			engine.showMessage("Please enter a " + form.getLocalContext().getcurrentCciType().toString() + " name of length greater than 3 letters");
			return false;
		}
		
		ICciFull  cci = populateInstanceData(form.getLocalContext().getSelectedItem());			
		
		String[] arrErrors = cci.validateCci();
		if(arrErrors != null)
		{
			engine.showErrors("Validation Errors", arrErrors);
			return false;
		}
		
		try  
		{
			cci = domain.saveCci(cci, form.getLocalContext().getcurrentCciType());
			form.getLocalContext().setSelectedItem(cci);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			onGrdItemsSelectionChanged();
			form.setMode(FormMode.VIEW);
			//open();
			return false;
		} 
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		// now that the cci itself is saved, then the hotlist items can be saved if they are of appropriate type
		if ( cci instanceof DiagnosisVo 
				|| cci instanceof ProblemConfigVo 
				|| cci instanceof ProcedureVo 
				|| cci instanceof MedicationFullVo//WDEV-11921
				|| cci instanceof CancerImagingEventVo
				|| cci instanceof PresentingComplaintVo
				|| cci instanceof TreatmentInterventionVo)//WDEV-17060
		{
			if (saveHotlists())
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		return true;
	}
	
	/**
	 * Adds and removes all altered hotlists in the tree on save. 
	 * @param void
	 * @return boolean
	 */
	private boolean saveHotlists() 
	{						
		try
		{
			SpecialtyCollection voCollSpecialties = form.getGlobalContext().Core.getSpecialties();
			
			if ( voCollSpecialties != null ) // WDEV-2946 Null content was not being caught on save. 
			{
				// if item is in local context and not in global, it has been removed
				if (form.getLocalContext().getIHotlistShortsIsNotNull())
				{
					for ( int i = 0; i < form.getLocalContext().getIHotlistShorts().length; i++ )
					{
						if ( voCollSpecialties.indexOf(form.getLocalContext().getIHotlistShorts()[i].getISpecialty()) < 0 )
						{
							domain.removeIGenericItemFromHotlist(form.getLocalContext().getIHotlistShorts()[i].getIHotlistShortID(), form.getLocalContext().getSelectedItem(), form.getLocalContext().getcurrentCciType());
						}					
					}
				}
			
				// if item in in global context and not in local, it has been added
			
				for ( int i = 0; i < voCollSpecialties.size(); i++ )
				{
					if ( !isInLocalContext(voCollSpecialties.get(i)) )
					{
						LookupInstVo specialtyInstVo = voCollSpecialties.get(i); // this is the specialty lookup associated with the selected row
						IHotlistShort[] iHotlistShorts = domain.listIHotlistShortsBySpecialty(specialtyInstVo, form.getLocalContext().getcurrentCciType());
						IHotlistShort iHotlistShort = null;
						
						if (iHotlistShorts == null || iHotlistShorts.length < 1)
						{
							// if a hotlist does not already exist for this specialty and cci type, create and save a new one
							iHotlistShort = newIHotlist(voCollSpecialties.get(i));
						}
						else
						{
							iHotlistShort = iHotlistShorts[0];
						}
						domain.addIGenericItemToHotlist(iHotlistShort.getIHotlistShortID(), form.getLocalContext().getSelectedItem(), form.getLocalContext().getcurrentCciType());
					}
				}
			}
		}
		catch ( StaleObjectException e )
		{
			engine.showMessage(e.getStackTrace().toString());
			return false;
		}
		catch ( ForeignKeyViolationException e )
		{
			engine.showMessage(e.getStackTrace().toString());
			return false;
		}
		catch ( UniqueKeyViolationException e )
		{
			engine.showMessage(e.getStackTrace().toString());
			return false;
		}
		
		return true; 

	}

	/**
	 * Returns a boolean to indicate whether the given specialty is in the local context of IHotlistShorts
	 * @param Specialty
	 * @return boolean
	 */
	private boolean isInLocalContext(Specialty specialty) 
	{
		if (form.getLocalContext().getIHotlistShortsIsNotNull())
		{
			for ( int i = 0; i < form.getLocalContext().getIHotlistShorts().length; i++ )
			{
				if ( form.getLocalContext().getIHotlistShorts()[i].getISpecialty().equals(specialty) )
				{
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * Creates and saves a new hotlist based on the specialty lookup and current cci type
	 * @param lookupInstVo
	 * @param CciType
	 * @return IHotlistShort
	 */
	private IHotlistShort newIHotlist(Specialty specialty) 
	{		
		IHotlistShort iHotlistShort = null; 
		
		if (form.getLocalContext().getcurrentCciType().equals(CciType.PROBLEM))
		{	
			iHotlistShort = new ProblemHotlistShortVo();
		}
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.DIAGNOSIS))
		{	
			iHotlistShort = new DiagnosisHotListShortVo();
		}
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.PROCEDURE))
		{	
			iHotlistShort = new ProcedureHotlistShortVo();
		}
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.CANCERIMAGE))
		{	
			iHotlistShort = new CancerImagingHotlistShortVo();
		}
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.MEDICATION))
		{	
			iHotlistShort = new MedicationHotlistShortVo();
			
		}
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.PRESENTING_ISSUE))
		{
			iHotlistShort = new PresentingComplainHotlistVo();
			
		}
		//WDEV-17060
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.TREATMENT_INTERVENTION))
		{	
			iHotlistShort = new TreatmentInterventionHotlistShortVo();
		}
		else
		{
			throw new DomainRuntimeException("Unknown CCI type in 'newIHotlist' = " + form.getLocalContext().getcurrentCciType().toString());
		}
		
		iHotlistShort.setISpecialty(specialty);
		
		try
		{
			iHotlistShort = domain.saveIHotlistShort(iHotlistShort);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.getMessage());
			open();
		}
		return iHotlistShort; 
	}
	
	/**
	 * Updates the given ICciFull interface with values from the data onscreen
	 * @param ICciFull
	 * @return ICciFull
	 */
	private ICciFull populateInstanceData(ICciFull selectedItem) 
	{		
		if (selectedItem==null)
			selectedItem=form.getLocalContext().getSelectedItem();
		
		selectedItem.setIGenericItemName(form.txtName().getValue());
		selectedItem.setCciAllergenType(form.cmbAlgType().getValue());
		selectedItem.setCciTreatmentInterventionType(form.cmbTreatInterventionType().getValue());//WDEV-17125
		selectedItem.setCciProcedureDuration(form.intProcDuration().getValue());
		selectedItem.setCciTCILagTime(form.intTCILag().getValue()); //WDEV-12918
		selectedItem.setCciProcedureLOS(form.intLOS().getValue());
		
		// WDEV-17934
		selectedItem.setSurgeonCategory(form.cmbSurgeonCat().getValue());
		selectedItem.setAnaesthetistCategory(form.cmbAnaesthetistCat().getValue());
		selectedItem.setHospitalCategory(form.cmbHospitalCat().getValue());
		
		selectedItem.setIGenericItemIsActive(Boolean.valueOf(form.chkIsActive().getValue()));
		selectedItem.setCciMappings(getMappings());
		selectedItem.setCciKeywords(getKeywords());
		
		//WDEV-11921 start
		if (selectedItem instanceof MedicationFullVo)
		{
			MedicationFullVo med = (MedicationFullVo) selectedItem;
			med.setIsControlledDrug(form.chkControlledDrug().getValue());
			med.setForms(populateFRUDataFromScreen());
			
			med.setFrequencyDefault(form.lyrDetails().tabDefaultValues().cmbFrequency().getValue());//	WDEV-13584
			med.setNoOfDaysSupplyDefault(form.lyrDetails().tabDefaultValues().intDays().getValue());//	WDEV-13584
			return med;
		}
		//WDEV-11921-end
		//WDEV-11836 - starts here
		
		/*WDEV-11921
		selectedItem.setUnits(getUnitsFromGrid());
		selectedItem.setForms(getFormsFromGrid());
		selectedItem.setRoutes(getRoutesFromGrid());
		//WDEV-11836 - ends here
		 * WDEV-11921
		 */
		
		return selectedItem;
	}

	private MedicationFormVoCollection populateFRUDataFromScreen()
	{
		MedicationFormVoCollection result = new MedicationFormVoCollection();
		for (int i = 0 ; i < form.lyrDetails().tabFRU().dyngrdFRU().getRows().size() ; i++)
		{
			Object value = form.lyrDetails().tabFRU().dyngrdFRU().getRows().get(i).getValue();
			if (value instanceof MedicationFormVo)
			{
				MedicationFormVo  x = (MedicationFormVo) value;
				x.setFormRoutes(getRoutes(form.lyrDetails().tabFRU().dyngrdFRU().getRows().get(i).getRows()));
				if (x.getFormIsNotNull() || x.getFormRoutesIsNotNull())
				{
					result.add(x);
				}
			}
		}
		if (result.size()==0)
			return null;
		return result;
	}

	private MedicationRouteVoCollection getRoutes(DynamicGridRowCollection rows)
	{
		if (rows == null)
			return null;
		MedicationRouteVoCollection result = new MedicationRouteVoCollection();
		for (int i = 0 ; i < rows.size() ; i++)
		{
			if (rows.get(i).getValue() instanceof MedicationRouteVo)
			{
				MedicationRouteVo x = (MedicationRouteVo) rows.get(i).getValue();
				x.setRouteUnits(getUnits(rows.get(i).getRows()));
				if (x.getRouteIsNotNull() || x.getRouteUnitsIsNotNull())
				{
					result.add(x);
				}
			}
		}
		if (result.size() == 0)
			return null;
		return result;
	}

	private MedicationUnitVoCollection getUnits(DynamicGridRowCollection rows)
	{
		if (rows == null)
			return null;
		MedicationUnitVoCollection result = new MedicationUnitVoCollection();
		for ( int i = 0 ; i  < rows.size() ; i++)
		{
			if (rows.get(i).getValue() instanceof MedicationUnitVo)
			{
				MedicationUnitVo x = (MedicationUnitVo) rows.get(i).getValue();
				if (x.getDoseUnitIsNotNull())
					result.add(x);
			}
		}
		if (result.size()==0)
			return null;
		return result;
	}

	/*WDEV-11921
	//WDEV - 11836
	private MedicationRouteCollection getRoutesFromGrid() 
	{
		MedicationRouteCollection routes = new MedicationRouteCollection();
		
		for(int i=0; i<form.lyrDetails().tabRoutes().dyngrdRoutes().getRows().size(); i++)
		{
			if(form.lyrDetails().tabRoutes().dyngrdRoutes().getRows().get(i).getValue() instanceof MedicationRoute)
			{
				MedicationRoute route = (MedicationRoute) form.lyrDetails().tabRoutes().dyngrdRoutes().getRows().get(i).getValue();
				routes.add(route);
			}
		}
		
		return routes.size() > 0 ? routes : null;
	}
	
	//WDEV - 11836
	private DoseFormIndicatorCollection getFormsFromGrid() 
	{
		DoseFormIndicatorCollection forms = new DoseFormIndicatorCollection();
		
		for(int i=0; i<form.lyrDetails().tabForms().dyngrdForms().getRows().size(); i++)
		{
			if(form.lyrDetails().tabForms().dyngrdForms().getRows().get(i).getValue() instanceof DoseFormIndicator)
			{
				DoseFormIndicator formDose = (DoseFormIndicator) form.lyrDetails().tabForms().dyngrdForms().getRows().get(i).getValue();
				forms.add(formDose);
			}
		}
		
		return forms.size() > 0 ? forms : null;
	}
	
	//WDEV - 11836
	private MedicationDoseUnitCollection getUnitsFromGrid() 
	{
		MedicationDoseUnitCollection units = new MedicationDoseUnitCollection();
		
		for(int i=0; i<form.lyrDetails().tabUnits().dyngrdUnits().getRows().size(); i++)
		{
			if(form.lyrDetails().tabUnits().dyngrdUnits().getRows().get(i).getValue() instanceof MedicationDoseUnit)
			{
				MedicationDoseUnit unit = (MedicationDoseUnit) form.lyrDetails().tabUnits().dyngrdUnits().getRows().get(i).getValue();
				units.add(unit);
			}
		}
		
		return units.size() > 0 ? units : null;
	}
	WDEV-11921
	*/

	/**
	 * Returns a TaxonomyMapCollection of all the mappings onscreen. 
	 * @param void
	 * @return TaxonomyMapCollection
	 */
	private TaxonomyMapCollection getMappings() 
	{
		TaxonomyMapCollection voTaxonomyMapCollection =  new TaxonomyMapCollection();
		
		for (int i = 0; i < form.lyrDetails().tabMappings().grdMappings().getRows().size(); i++)//WDEV-11921
		{
			grdMappingsRow row = form.lyrDetails().tabMappings().grdMappings().getRows().get(i);//WDEV-11921
			TaxonomyMap voTaxonomyMap = row.getValue() != null?row.getValue():new TaxonomyMap();
			voTaxonomyMap.setTaxonomyCode(row.getcolCode());			
			voTaxonomyMap.setTaxonomyName(row.getcolExtCodeType());
			voTaxonomyMapCollection.add(voTaxonomyMap);
		}

		return voTaxonomyMapCollection;
	}
	
	/**
	 * Returns a KeywordVoCollection of all the mappings onscreen. 
	 * @param void
	 * @return KeywordVoCollection
	 */
	private KeywordVoCollection getKeywords() 
	{
		KeywordVoCollection voKeywordVoCollection =  new KeywordVoCollection();
		for (int i = 0; i < form.lyrDetails().tabKeywords().grdKeywords().getRows().size(); i++)
		{
			grdKeywordsRow row = form.lyrDetails().tabKeywords().grdKeywords().getRows().get(i);
			KeywordVo vo = row.getValue();
			if (vo == null)
				vo = new KeywordVo();
			if (row.getKeyword() == null || row.getKeyword().equals(""))
				continue;
			
			vo.setKeyword(row.getKeyword());
			voKeywordVoCollection.add(vo);
		}
		return voKeywordVoCollection;
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	/**
	 * Sets the local context to be a new ICci based on the current local context cci type, then
	 * sets up the form for a new instance to be created.  
	 * @param void
	 * @return void
	 */
	public void newInstance() throws PresentationLogicException
	{
		ICciFull newCci = null;
		
		if (form.getLocalContext().getcurrentCciType().equals(CciType.ALLERGEN)) 
		{
			newCci = new AllergenDetails();
		}
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.MEDICATION)) 
		{
			newCci = new MedicationFullVo();//WDEV-11921
		}
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.DIAGNOSIS)) 
		{
			newCci = new DiagnosisVo();
		}
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.PROBLEM)) 
		{
			newCci = new ProblemConfigVo();
		}
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.PROCEDURE)) 
		{
			newCci = new ProcedureVo();
		}
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.CANCERIMAGE))
		{
			newCci = new CancerImagingEventVo();
		}
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.VACCINE))
		{
			newCci = new VaccineVo();
		}
		else if(form.getLocalContext().getcurrentCciType().equals(CciType.PRESENTING_ISSUE))
		{
			newCci = new PresentingComplaintVo();
		}
		//WDEV-17060
		else if (form.getLocalContext().getcurrentCciType().equals(CciType.TREATMENT_INTERVENTION)) 
		{
			newCci = new TreatmentInterventionVo();
		}	
		else
		{
			throw new DomainRuntimeException("Unknown CCI type in 'newInstance' = " + form.getLocalContext().getcurrentCciType().toString());
		}
		clearInstanceControls();
		form.getLocalContext().setSelectedItem(newCci); 
		form.getGlobalContext().Core.setSpecialties(null);
		form.getLocalContext().setIHotlistShorts(null);   // WDEV-2946 local context IHotlistShorts were not clearing on new. 
		form.grdItems().setValue(null);
		
		form.chkIsActive().setValue(true);
		
		if(form.getLocalContext().getIsLastActionSearchIsNotNull() 
				&& form.getLocalContext().getIsLastActionSearch() 
					&& (form.getLocalContext().getIsSearchReturnResultsIsNotNull() && !form.getLocalContext().getIsSearchReturnResults()))
			{	
				form.txtName().setValue(form.txtSearch().getValue());
			}
		
		clearSearchLocalContext();
		
		form.setMode(FormMode.EDIT);
		updateControlsState();
	}
	
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{		
			case GenericGrid.Add:
				newInstance();					
				break;
			case GenericGrid.Update:
				updateInstance();
				break;
			case TaxonomyGrid.AddTaxonomy:
				addTaxonomy();
				break;
			case TaxonomyGrid.UpdateTaxonomy:
				updateTaxonomy();
				break;
			case TaxonomyGrid.RemoveTaxonomy:
				removeTaxonomy();
				break;
			case GenForm.ContextMenus.KeywordAdmin.Add:
				addKeyword();
				break;
			case GenForm.ContextMenus.KeywordAdmin.Remove:
				removeKeyword();
				break;
			case GenForm.ContextMenus.KeywordAdmin.RemoveAll:
				removeAllKeywords();
				break;
			case GenForm.ContextMenus.KeywordAdmin.MoveUp:
				moveKeywordUp();
				break;
			case GenForm.ContextMenus.KeywordAdmin.MoveDown:
				moveKeywordDown();
				break;
			case GenForm.ContextMenus.KeywordAdmin.Restore:
				setDefaultKeywords();
				break;		
			case GenForm.ContextMenus.CciHotlist.Update:
				updateHotlists();
				break;
			//WDEV-11921 -Start
			case GenForm.ContextMenus.ClinicalAdminNamespace.MedicationFRUMenu.ADDFORM:
				addForm(null,true);
				break;
			case GenForm.ContextMenus.ClinicalAdminNamespace.MedicationFRUMenu.REMOVEFORM:
				removeSelectedRow();
				break;
			case GenForm.ContextMenus.ClinicalAdminNamespace.MedicationFRUMenu.ADDROUTE:
				addRoute(null,true,form.lyrDetails().tabFRU().dyngrdFRU().getSelectedRow());
				break;
			case GenForm.ContextMenus.ClinicalAdminNamespace.MedicationFRUMenu.REMOVEROUTE:
				removeSelectedRow();
				break;
			case GenForm.ContextMenus.ClinicalAdminNamespace.MedicationFRUMenu.ADDUNITS:
				addUnit(null,true,form.lyrDetails().tabFRU().dyngrdFRU().getSelectedRow());
				break;
			case GenForm.ContextMenus.ClinicalAdminNamespace.MedicationFRUMenu.REMOVEUNITS:
				removeSelectedRow();
				break;
			
			//WDEV-11921 - End
			/*WDEV-11921
			//WDEV-11836 - starts here	
			case GenForm.ContextMenus.ClinicalAdminNamespace.UnitsMenuForCCIAdmin.ADD:
			--- Removed extra code---
			case GenForm.ContextMenus.ClinicalAdminNamespace.RoutesMenuForCCIAdmin.REMOVE_ALL:
				removeAllRoutesItem();
			break;
			//WDEv-11836 ends here WDEV-11921*/
		}
		reselectAsToAvoidFWUIIssue();//WDEV-11921
		updateControlsState();
	}
	//WDEV-11921 Start
	private void removeSelectedRow()
	{
	
		DynamicGridRow row = form.lyrDetails().tabFRU().dyngrdFRU().getSelectedRow();
		if (row == null)
			return;
		Object rowValue =row.getValue();
		DynamicGridRow parent = row.getParent();
		form.lyrDetails().tabFRU().dyngrdFRU().getRows().remove(row);
		if (rowValue  instanceof MedicationFormVo)
			rebindFormRows();
		else if (rowValue instanceof MedicationRouteVo)
			rebindRouteRows(parent);
		else if (rowValue instanceof MedicationUnitVo)
			rebindUnitRows(parent);
		
	}

	private DynamicGridRow addUnit(MedicationUnitVo value,boolean rebind,DynamicGridRow parent)
	{
		if (parent == null)
			return null;
		if (value == null)
			value = new MedicationUnitVo();
		DynamicGridRow newRow = null;
		if (parent.getValue() instanceof MedicationRouteVo)
		{
			newRow = parent.getRows().newRow();
		}
		else if (parent.getValue() instanceof MedicationUnitVo)
		{
			newRow = parent.getParent().getRows().newRow();
		}
		if (newRow == null)
			return null;
		
		DynamicGridColumn column = form.lyrDetails().tabFRU().dyngrdFRU().getColumns().getByIdentifier(COL_MAIN);
		DynamicGridCell cell = newRow.getCells().newCell(column, DynamicCellType.ENUMERATION);
		cell.setAutoPostBack(true);
		cell.setReadOnly(false);
		if (value.getDoseUnitIsNotNull())
		{
			cell.getItems().newItem(value.getDoseUnit());
			cell.setValue(value.getDoseUnit());
		}
		newRow.setValue(value);
		if (rebind)
		rebindUnitRows(newRow.getParent());
		parent.setExpanded(true);
		return newRow;
		
		
	}

	private DynamicGridRow addRoute(MedicationRouteVo value,boolean rebind,DynamicGridRow parent)
	{
	
		if (parent == null)
			return null;
		if (value == null)
			value =new MedicationRouteVo();
		DynamicGridRow newRow = null;
		if (parent.getValue() instanceof MedicationFormVo)
		{
			newRow = parent.getRows().newRow();
		}
		else if (parent.getValue() instanceof MedicationRouteVo) 
		{
			newRow = parent.getParent().getRows().newRow();
		}
		else if (parent.getValue() instanceof MedicationUnitVo)
		{
			newRow = parent.getParent().getParent().getRows().newRow();
		}
		if (newRow == null)
			return null;
		DynamicGridColumn column = form.lyrDetails().tabFRU().dyngrdFRU().getColumns().getByIdentifier(COL_MAIN);
		DynamicGridCell cell = newRow.getCells().newCell(column, DynamicCellType.ENUMERATION);
		if (value.getRouteIsNotNull())
		{
			cell.getItems().newItem(value.getRoute());
			cell.setValue(value.getRoute());
		}
		cell.setAutoPostBack(true);
		cell.setReadOnly(false);
		newRow.setValue(value);
		if (rebind)
			rebindRouteRows(newRow.getParent());
		parent.setExpanded(true);
		return newRow;
	}

	private DynamicGridRow addForm(MedicationFormVo value,boolean rebind)
	{
		if (value == null)
			value = new MedicationFormVo();
		DynamicGridRow newRow = form.lyrDetails().tabFRU().dyngrdFRU().getRows().newRow();
		DynamicGridColumn column = form.lyrDetails().tabFRU().dyngrdFRU().getColumns().getByIdentifier(COL_MAIN);
		DynamicGridCell cell = newRow.getCells().newCell(column, DynamicCellType.ENUMERATION);
		if (value.getFormIsNotNull())
		{
			cell.getItems().newItem(value.getForm());
			cell.setValue(value.getForm());
		}
		cell.setAutoPostBack(true);
		cell.setReadOnly(false);
		newRow.setValue(value);
		if (rebind)
			rebindFormRows();
		return newRow;
		
	}
	private void rebindFormRows()
	{
		DynamicGridRowCollection rows = form.lyrDetails().tabFRU().dyngrdFRU().getRows();
		DoseFormIndicatorCollection mForms = ims.clinical.vo.lookups.LookupHelper.getDoseFormIndicator(this.domain.getLookupService());
		for (int i = 0 ; i < rows.size() ; i++)
		{
			if (rows.get(i).getValue() instanceof MedicationFormVo)
			{
				MedicationFormVo x = (MedicationFormVo) rows.get(i).getValue();
				if (!x.getFormIsNotNull())
					continue;
				mForms.remove(x.getForm());
			}	
		}
		for (int i = 0 ; i < rows.size() ; i++)
		{
			DynamicGridCell cell = rows.get(i).getCells().get(form.lyrDetails().tabFRU().dyngrdFRU().getColumns().getByIdentifier(COL_MAIN));
			Object back = cell.getValue();
			cell.getItems().clear();
			if (back!=null)
				cell.getItems().newItem(back);
			for (int j = 0 ; j < mForms.size() ;j++)
				cell.getItems().newItem(mForms.get(j));
			cell.setValue(back);
		}
		
	}
	private void rebindRouteRows(DynamicGridRow formRow)
	{
		
		if (formRow == null)
			return;
		DynamicGridRowCollection rows = formRow.getRows();
		MedicationRouteCollection mRoutes = ims.core.vo.lookups.LookupHelper.getMedicationRoute(this.domain.getLookupService());
		for (int i = 0 ; i < rows.size() ; i++)
		{
			if (rows.get(i).getValue() instanceof MedicationRouteVo)
			{
				MedicationRouteVo x = (MedicationRouteVo) rows.get(i).getValue();
				if (!x.getRouteIsNotNull())
					continue;
				mRoutes.remove(x.getRoute());
			}	
		}
		for (int i = 0 ; i < rows.size() ; i++)
		{
			DynamicGridCell cell = rows.get(i).getCells().get(form.lyrDetails().tabFRU().dyngrdFRU().getColumns().getByIdentifier(COL_MAIN));
			Object back = cell.getValue();
			cell.getItems().clear();
			if (back!=null)
				cell.getItems().newItem(back);
			for (int j = 0 ; j < mRoutes.size() ;j++)
				cell.getItems().newItem(mRoutes.get(j));
			cell.setValue(back);
		}
	}
	

	private void rebindUnitRows(DynamicGridRow parent)
	{
		if (parent == null)
			return;
		DynamicGridRowCollection rows = parent.getRows();
		MedicationDoseUnitCollection mRoutes = ims.core.vo.lookups.LookupHelper.getMedicationDoseUnit(this.domain.getLookupService());
		for (int i = 0 ; i < rows.size() ; i++)
		{
			if (rows.get(i).getValue() instanceof MedicationUnitVo)
			{
				MedicationUnitVo x = (MedicationUnitVo) rows.get(i).getValue();
				if (!x.getDoseUnitIsNotNull())
					continue;
				mRoutes.remove(x.getDoseUnit());
			}	
		}
		for (int i = 0 ; i < rows.size() ; i++)
		{
			DynamicGridCell cell = rows.get(i).getCells().get(form.lyrDetails().tabFRU().dyngrdFRU().getColumns().getByIdentifier(COL_MAIN));
			Object back = cell.getValue();
			cell.getItems().clear();
			if (back!=null)
				cell.getItems().newItem(back);
			for (int j = 0 ; j < mRoutes.size() ;j++)
				cell.getItems().newItem(mRoutes.get(j));
			cell.setValue(back);
		}
		
	}
	//WDEV-11921 End
	/*WDEV-11921
	//WDEv-11836
	private void removeAllRoutesItem() 
	{
		---Removed extra lines
		return true;
	}
	WDEV-11921*/
	/**
	 * Takes the current selected item and populates the global context to open the hotlists dialog
	 * @param void
	 * @return void
	 */
	private void updateHotlists() 
	{
		form.getGlobalContext().Core.setGenericItemToDisplay(form.getLocalContext().getSelectedItem());
		engine.open(form.getForms().ClinicalAdmin.HotlistDialog);
	}

	/**
	 * Resets the keywords to the default values based on the cci name
	 * @param void
	 * @return void
	 */
	private void setDefaultKeywords()
	{
		form.lyrDetails().tabKeywords().grdKeywords().getRows().clear();
		
		if (form.txtName().getValue() == null)
		{
			engine.showMessage("Please add the Name before set default keywords!");
			return;
		}
		
		String[] keys = Keywords.generateKeywords(form.txtName().getValue());
		
		for (int i = 0; i < keys.length; i++)
		{
			grdKeywordsRow row = form.lyrDetails().tabKeywords().grdKeywords().getRows().newRow();
			row.setValue(new KeywordVo());
			row.setKeyword(keys[i]);
		}
		updateControlsState();
	}

	/**
	 * Moves the selected keyword down in the list
	 * @param void
	 * @return void
	 */
	private void moveKeywordDown() 
	{
		form.lyrDetails().tabKeywords().grdKeywords().moveDown();
		updateControlsState();
	}

	/**
	 * Moved the selected keyword up in the grid
	 * @param void
	 * @return void
	 */
	private void moveKeywordUp() 
	{
		form.lyrDetails().tabKeywords().grdKeywords().moveUp();
		updateControlsState();
	}

	/**
	 * Removes all keywords from the grid
	 * @param void
	 * @return void
	 */
	private void removeAllKeywords() 
	{
		form.lyrDetails().tabKeywords().grdKeywords().getRows().clear();
		updateControlsState();
	}

	/**
	 * If a record is selected, removes it from the grid
	 * @param void
	 * @return void
	 */
	private void removeKeyword() 
	{
		form.lyrDetails().tabKeywords().grdKeywords().removeSelectedRow();
		updateControlsState();
	}

	/**
	 * Adds a new row to the keywords grid
	 * @param void
	 * @return void
	 */
	private void addKeyword() 
	{
		form.lyrDetails().tabKeywords().grdKeywords().getRows().newRow(true).setValue(new KeywordVo());
		updateControlsState();
	}

	/**
	 * Adds a new row to the taxonomy grid then updates the context menus to reflect this
	 * @param void
	 * @return void
	 */
	
	private void addTaxonomy() 
	{
		form.lyrDetails().tabMappings().grdMappings().getRows().newRow(true).setValue(new TaxonomyMap());//WDEV-11921
		updateControlsState();
	}
	
	/**
	 * If a record is selected, opens the taxonomy search dialog
	 * @param void
	 * @return void
	 */
	private void updateTaxonomy() 
	{
		if (form.lyrDetails().tabMappings().grdMappings().getSelectedRow() != null)//WDEV-11921
			taxonomySearch(form.lyrDetails().tabMappings().grdMappings().getSelectedRow());//WDEV-11921
	}
	
	/**
	 * If a record is selected, removes it from the grid
	 * @param void
	 * @return void
	 */
	private void removeTaxonomy() 
	{
		form.lyrDetails().tabMappings().grdMappings().removeSelectedRow(); //WDEV-11921
		updateControlsState();
	}
	
	protected void onGrdExtCodesGridButtonClicked(int column, grdMappingsRow row)
	{
		if(form.getMode().equals(FormMode.EDIT))
			taxonomySearch(row);
	}
	
	/**
	 * Takes the value of the selected row and opens the TaxonomySearch dialog
	 * @param grdMappingsRow
	 * @return void
	 */
	private void taxonomySearch(grdMappingsRow row)
	{
		if(row.getcolExtCodeType() == null)
		{
			engine.showMessage("Please select External Code Type");
			return;
		}
				
		form.getGlobalContext().Core.setTaxonomySearchForName(form.txtName().getValue());
		TaxonomyMap voTaxonomyMap = row.getValue();
		if(voTaxonomyMap == null)
			voTaxonomyMap = new TaxonomyMap();
		
		voTaxonomyMap.setTaxonomyName(row.getcolExtCodeType());
		voTaxonomyMap.setTaxonomyCode(row.getcolCode());
		
		form.getGlobalContext().Core.setTaxonomyMap(voTaxonomyMap);		
		engine.open(form.getForms().Core.TaxonomySearch);
	}
	
	protected void onGrdExtCodesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}
	
	protected void onGrdKeywordsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if ( (formName.equals(form.getForms().Core.TaxonomySearch)) && (result.equals(DialogResult.OK)) )
		{
			if(form.getGlobalContext().Core.getTaxonomyMapIsNotNull())
			{
				TaxonomyMap voTaxonomyMap = form.getGlobalContext().Core.getTaxonomyMap();
				grdMappingsRow row = form.lyrDetails().tabMappings().grdMappings().getRowByValue(voTaxonomyMap);//WDEV-11921
				if ((row == null) && (form.lyrDetails().tabMappings().grdMappings().getSelectedRowIndex() >= 0)) //WDEV-11921
					row = form.lyrDetails().tabMappings().grdMappings().getRows().get(form.lyrDetails().tabMappings().grdMappings().getSelectedRowIndex());//WDEV-11921
				else
				{
					engine.showMessage("Please select an External Code row and try again.");
					return;
				}				
				populateTaxonomy(row, voTaxonomyMap);
					
				//Check if the user wants to change the name of the CCI Item, only if creating a new record
				if(!voTaxonomyMap.getDescription().equals(form.txtName().getValue()) && form.grdItems().getValue() == null)
				{
					form.getGlobalContext().Core.setYesNoDialogMessage("Do you want to call the " + getCurrentCciName() + " - " + voTaxonomyMap.getDescription() + " ?");
					engine.open(form.getForms().Core.YesNoDialog);
				}
				updateControlsState();
			}
		}
		
		else if ( (formName.equals(form.getForms().Core.YesNoDialog)) && (result.equals(DialogResult.YES)) )
		{
			//Change the name of the Procedure as the one from the Taxonomy Search
			form.txtName().setValue(form.getGlobalContext().Core.getTaxonomyMap().getDescription());
			updateControlsState();
		}		
		
		else if ( formName.equals(form.getForms().ClinicalAdmin.HotlistDialog ))
		{
			// repopulate the hotlists tree if just returned from the hotlists dialog
			populateHotlistsTree(form.getGlobalContext().Core.getSpecialties());
		}
	}
	
	private String getCurrentCciName()
	{
		return getCciName(form.rdoGrp().getValue());
	}

	private void populateTaxonomy(grdMappingsRow row, TaxonomyMap voTaxonomyMap)
	{
		if(row != null && voTaxonomyMap != null)
		{
			row.setcolExtCodeType(voTaxonomyMap.getTaxonomyName());
			row.setcolCode(voTaxonomyMap.getTaxonomyCode());
			row.setValue(voTaxonomyMap);
		}		
	}
	/*WDEV-11921
	//WDEV-11836
	@Override
	protected void onDyngrdUnitsCellValueChanged(DynamicGridCell cell) 
	{
	REmovede extra lines
		updateControlsState();
	}	WDEV-11921*/

	
	@Override//WDEV-11921
	protected void onDyngrdFRUCellValueChanged(DynamicGridCell cell)
	{
		
		Object value = cell.getRow().getValue();
		if (value instanceof MedicationFormVo)
		{
			MedicationFormVo x = (MedicationFormVo) value;
			x.setForm(cell.getValue() instanceof DoseFormIndicator?(DoseFormIndicator)cell.getValue():null);
			rebindFormRows();
		}
		else if (value instanceof MedicationRouteVo)
		{
			MedicationRouteVo x = (MedicationRouteVo) value;
			x.setRoute(cell.getValue() instanceof MedicationRoute ? (MedicationRoute)cell.getValue():null);
			rebindRouteRows(cell.getRow().getParent());
		}
		else if (value instanceof MedicationUnitVo)
		{
			MedicationUnitVo x = (MedicationUnitVo) value;
			x.setDoseUnit(cell.getValue() instanceof MedicationDoseUnit ? (MedicationDoseUnit)cell.getValue():null);
			rebindUnitRows(cell.getRow().getParent());
		}
		reselectAsToAvoidFWUIIssue();
		
	}

	private void reselectAsToAvoidFWUIIssue()
	{
		Object value2 = form.lyrDetails().tabFRU().dyngrdFRU().getValue();
		form.lyrDetails().tabFRU().dyngrdFRU().setValue(null);
		form.lyrDetails().tabFRU().dyngrdFRU().setValue(value2);
	}


	@Override
	protected void onDyngrdFRURowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();
		
	}
	//WDEV-11921
}
