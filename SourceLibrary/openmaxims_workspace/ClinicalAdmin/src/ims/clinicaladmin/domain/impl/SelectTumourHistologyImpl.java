//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4035.27320)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.domain.impl;

import java.util.ArrayList;

import ims.clinicaladmin.domain.base.impl.BaseSelectTumourHistologyImpl;
import ims.clinicaladmin.vo.TumourHistologyLiteVoCollection;
import ims.clinicaladmin.vo.TumourHistologyVo;
import ims.clinicaladmin.vo.domain.TumourHistologyLiteVoAssembler;
import ims.clinicaladmin.vo.domain.TumourHistologyVoAssembler;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.oncology.configuration.domain.objects.TumourHistology;
import ims.oncology.configuration.vo.TumourHistologyRefVo;

public class SelectTumourHistologyImpl extends BaseSelectTumourHistologyImpl
{

	private static final long serialVersionUID = 1L;


	/**
	 * Function used to search TumourHistologyLiteVo records matching the search criteria.
	 * 
	 * It needs to retrieve only active records,
	 * because one of this records might be associated to a TumourGroup or TumourSite record.
	 */
	public TumourHistologyLiteVoCollection list(String description)
	{
		// Start building the query
		StringBuilder query = new StringBuilder();
		query.append(" from TumourHistology as tHist where tHist.isActive is not null and tHist.isActive = 1 ");
		
		// Arrays for parameters
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		// If we have a valid search criteria append the query and add parameters to be taken into account
		if (description != null && description.length() > 0)
		{
			query.append(" and upper(tHist.histologyDescription) like :DESCRIPTION ");
			
			paramNames.add("DESCRIPTION");
			paramValues.add(description.trim().toUpperCase() + "%");
		}

		// Set a sort order for records to be retrieved on
		query.append(" order by UPPER(tHist.histologyDescription)");

		// Return collection of found records
		return TumourHistologyLiteVoAssembler.createTumourHistologyLiteVoCollectionFromTumourHistology(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}

	/**
	 * Function used to retrieve a specific TumourHistologyVo
	 */
	public TumourHistologyVo get(TumourHistologyRefVo histology)
	{
		// Check parameters
		if (histology == null || !histology.getID_TumourHistologyIsNotNull())
			return null;
		
		return TumourHistologyVoAssembler.create((TumourHistology) getDomainFactory().getDomainObject(TumourHistology.class, histology.getID_TumourHistology()));
	}

	/**
	 * Function used to commit a TumourHistologyVo records to database
	 */
	public TumourHistologyVo save(TumourHistologyVo histology) throws StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException, UnqViolationUncheckedException
	{
		// Check for something to save
		if (histology == null)
			throw new DomainRuntimeException("ERROR - Can not save null histology");
		// Check for validation
		if (!histology.isValidated())
			throw new DomainRuntimeException("ERROR - Can not save VO not validated");
		
		// Build DOM Object
		TumourHistology domHistology = TumourHistologyVoAssembler.extractTumourHistology(getDomainFactory(), histology);
		
		// Attempt save
		getDomainFactory().save(domHistology);
		
		return TumourHistologyVoAssembler.create(domHistology);
	}
}
