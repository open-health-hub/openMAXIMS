//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.39 build 2154.21765)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.domain.impl;

import java.util.List;

import ims.admin.domain.impl.ServiceImpl;
import ims.clinical.configuration.domain.objects.PMHChecklistConfig;
import ims.clinicaladmin.vo.PMHChecklistConfigShortVo;
import ims.clinicaladmin.vo.PMHChecklistConfigShortVoCollection;
import ims.clinicaladmin.vo.PMHChecklistConfigVo;
import ims.clinicaladmin.vo.domain.PMHChecklistConfigShortVoAssembler;
import ims.clinicaladmin.vo.domain.PMHChecklistConfigVoAssembler;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ServiceVoCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;

public class PMHChecklistConfigImpl extends DomainImpl implements ims.clinicaladmin.domain.PMHChecklistConfig, ims.domain.impl.Transactional
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	* getPMHCheckListConfig
	*/
	public ims.clinicaladmin.vo.PMHChecklistConfigVo getPMHCheckListConfig(PMHChecklistConfigShortVo pmhchecklistshortVo)
	{
		DomainFactory factory = getDomainFactory();
		if (pmhchecklistshortVo == null)//Where we are not coding Specialties.
		{
			int configAmount = ConfigFlag.DOM.CLINICAL_ADMIN_SEARCH_MAX_SIZE.getValue();
			List procs = factory.find("from PMHChecklistConfig order by 1", configAmount);	

			if(procs.size() == 0)
				return null;
			
			return PMHChecklistConfigVoAssembler.create((ims.clinical.configuration.domain.objects.PMHChecklistConfig)procs.get(0));
		}
		else
		{
			PMHChecklistConfig doCheckList = (PMHChecklistConfig)factory.getDomainObject(PMHChecklistConfig.class,pmhchecklistshortVo.getID_PMHChecklistConfig());
			return PMHChecklistConfigVoAssembler.create(doCheckList);
		}
	}

	public PMHChecklistConfigVo savePMHCheckListConfig(PMHChecklistConfigVo item) throws StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		
		ims.clinical.configuration.domain.objects.PMHChecklistConfig obj = PMHChecklistConfigVoAssembler.extractPMHChecklistConfig(factory, item);
		
		factory.save(obj);
		
		return PMHChecklistConfigVoAssembler.create(obj);
	}

	public PMHChecklistConfigShortVoCollection listPMHCheckListShort()
	{
		DomainFactory factory = getDomainFactory();
		return PMHChecklistConfigShortVoAssembler.createPMHChecklistConfigShortVoCollectionFromPMHChecklistConfig(factory.listDomainObjects(PMHChecklistConfig.class));
	}

	public ServiceVoCollection listService(Boolean activeOnly) 
	{
		ims.admin.domain.Service impl = (ims.admin.domain.Service) getDomainImpl(ServiceImpl.class);
		ims.core.vo.ServiceShortVo filter = new ims.core.vo.ServiceShortVo();
		filter.setIsActive(activeOnly);
		return impl.listService(filter);
	}

}
