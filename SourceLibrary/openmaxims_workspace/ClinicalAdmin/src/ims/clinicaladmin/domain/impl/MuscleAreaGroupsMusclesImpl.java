//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.45 build 2265.41281)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.domain.impl;

import java.util.ArrayList;
import ims.clinicaladmin.domain.Vertebrallevels;
import ims.clinicaladmin.domain.impl.VertebrallevelsImpl;
import ims.clinicaladmin.domain.base.impl.BaseMuscleAreaGroupsMusclesImpl;
import ims.clinicaladmin.vo.MuscleGroupMuscleVoCollection;
import ims.clinicaladmin.vo.MuscleGroupsVo;
import ims.clinicaladmin.vo.MuscleVo;
import ims.clinicaladmin.vo.domain.MotorAreaVoAssembler;
import ims.clinicaladmin.vo.domain.MuscleGroupMuscleVoAssembler;
import ims.clinicaladmin.vo.domain.MuscleVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.therapies.domain.objects.MotorArea;
import ims.therapies.domain.objects.Muscle;
import ims.therapies.domain.objects.MuscleGroupMuscle;

public class MuscleAreaGroupsMusclesImpl extends BaseMuscleAreaGroupsMusclesImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* List all Vertebral Levels
	*/
	public ims.core.vo.VertebrallevelVoCollection listVertebralLevels()
	{
		Vertebrallevels vertLevel = (Vertebrallevels)getDomainImpl(VertebrallevelsImpl.class);
		return vertLevel.listVertebralLevel(Boolean.TRUE);
	}

	/**
	* List Muscles
	*/
	public ims.clinicaladmin.vo.MuscleVoCollection listMuscles(ims.clinicaladmin.vo.MuscleVo muscleVo)
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = " from Muscle mcl "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(muscleVo !=null)
		{
			condStr.append(andStr + " upper(mcl.name) like :mcl_name"); 
			markers.add("mcl_name");
			values.add(muscleVo.getName().toUpperCase());
			andStr = " and ";
		
			condStr.append(andStr + " mcl.isActive = :isActive"); 
			markers.add("isActive");
			values.add(Boolean.TRUE);
			andStr = " and ";
		}	
		else
		{
			condStr.append(andStr + " mcl.isActive = :isActive"); 
			markers.add("isActive");
			values.add(Boolean.TRUE);
			andStr = " and ";
		}
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		return MuscleVoAssembler.createMuscleVoCollectionFromMuscle(factory.find(hql, markers, values)).sort();
	}

	/**
	* List Motor Areas
	*/
	public ims.clinicaladmin.vo.MotorAreaVoCollection listMotorAreas()
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = " from MotorArea mtrarea"; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		condStr.append(andStr + " mtrarea.isActive = :isActive"); 
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		return MotorAreaVoAssembler.createMotorAreaVoCollectionFromMotorArea(factory.find(hql, markers, values)).sort();
	}

	/**
	* Save a motor Area
	*/
	public ims.clinicaladmin.vo.MotorAreaVo saveMotorArea(ims.clinicaladmin.vo.MotorAreaVo motorAreaVo) throws ims.domain.exceptions.StaleObjectException
	{
		// Ensure the value object has been validated
		if (!motorAreaVo.isValidated())
			throw new DomainRuntimeException("MotorAreaVo has not been validated");
		
		DomainFactory factory = getDomainFactory();
		MotorArea doMotor = MotorAreaVoAssembler.extractMotorArea(factory, motorAreaVo);
		try 
		{
			factory.save(doMotor);
		} 
		catch (DomainException e) 
		{
			throw new DomainRuntimeException("Error saving MotorAreaVo" + e.getMessage(),e);	
		} 
		
		if (motorAreaVo.getMuscleGroupsIsNotNull())
		{
			for(int i = 0 ; i < motorAreaVo.getMuscleGroups().size() ; i++)
			{
				MuscleGroupMuscleVoCollection voMuscleGroupMuscleColl = motorAreaVo.getMuscleGroups().get(i).getMuscleGroupMuscle();
				
				for(int z =0; voMuscleGroupMuscleColl != null && z<voMuscleGroupMuscleColl.size(); z++)
				{
					MuscleGroupMuscle doMuscleGroupMuscle = MuscleGroupMuscleVoAssembler.extractMuscleGroupMuscle(factory, voMuscleGroupMuscleColl.get(z));
					//doMuscleGroupMuscle.setMuscle(doMuscle);

					factory.save(doMuscleGroupMuscle); 
				}
				
			}
		}
		return MotorAreaVoAssembler.create(doMotor);
	}

	public MuscleVo saveMuscleVo(MuscleVo muscleVo) throws StaleObjectException 
	{
		// Ensure the value object has been validated
		if (!muscleVo.isValidated())
			throw new DomainRuntimeException("MuscleVo has not been validated");
		
		DomainFactory factory = getDomainFactory();
		Muscle doMuscle = MuscleVoAssembler.extractMuscle(factory, muscleVo);
		try 
		{
			factory.save(doMuscle);
		} 
		catch (DomainException e) 
		{
			throw new DomainRuntimeException("Error saving MuscleVo" + e.getMessage(),e);	
		} 
		
		return MuscleVoAssembler.create(doMuscle);
	}

	public MuscleGroupsVo getMuscles(MuscleGroupsVo voGroup)
	{
		if(voGroup == null)
			throw new DomainRuntimeException("Muscle Group Filter not provided for get call. ");

		DomainFactory factory = getDomainFactory();	
		String hql = " from MuscleGroupMuscle mgm "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		condStr.append(andStr + " mgm.muslceGroup.id = :groupid"); 
		markers.add("groupid");
		values.add(voGroup.getID_MuscleGroup());
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MuscleGroupMuscleVoCollection voColl = MuscleGroupMuscleVoAssembler.createMuscleGroupMuscleVoCollectionFromMuscleGroupMuscle(factory.find(hql, markers, values)).sort();

		if(voColl != null && voColl.size()>0)
			voGroup.setMuscleGroupMuscle(voColl);
		
		return voGroup;
	}

}
