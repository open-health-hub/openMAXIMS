//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.53 build 2663.17474)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.clinicaladmin.domain.base.impl.BaseCancerStagingClassificationsImpl;
import ims.clinicaladmin.vo.StagingClassificationVoCollection;
import ims.clinicaladmin.vo.TumourGroupListVo;
import ims.clinicaladmin.vo.TumourGroupListVoCollection;
import ims.clinicaladmin.vo.domain.StagingClassificationVoAssembler;
import ims.clinicaladmin.vo.domain.TumourGroupListVoAssembler;
import ims.clinicaladmin.vo.domain.TumourGroupVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.oncology.configuration.domain.objects.StagingClassification;
import ims.oncology.configuration.domain.objects.TumourGroup;
import ims.oncology.configuration.vo.StagingClassificationRefVo;

public class CancerStagingClassificationsImpl extends BaseCancerStagingClassificationsImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* saveStagingClassification
	*/
	public ims.clinicaladmin.vo.StagingClassificationVo saveStagingClassification(ims.clinicaladmin.vo.StagingClassificationVo stagingVo) throws ims.domain.exceptions.StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		StagingClassification doSC = StagingClassificationVoAssembler.extractStagingClassification(factory, stagingVo);
		factory.save(doSC);
		return StagingClassificationVoAssembler.create(doSC);
	}

	/**
	* geStagingClassification
	*/
	public ims.clinicaladmin.vo.StagingClassificationVo getStagingClassification(ims.oncology.configuration.vo.StagingClassificationRefVo stagingRefVo)
	{
		if(stagingRefVo == null)
			throw new RuntimeException("Cannot get StagingClassificationVo for null stagingRefVo");
		
		return StagingClassificationVoAssembler.create((StagingClassification)getDomainFactory().getDomainObject(StagingClassification.class, stagingRefVo.getID_StagingClassification()));
	}

	/**
	* listStagingClassification
	*/
	public StagingClassificationVoCollection listStagingClassification(Boolean bActive) 
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = new String();
		hql = " from StagingClassification sc ";

		StringBuffer condStr = new StringBuffer();
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if (bActive.booleanValue())
		{
			condStr.append(" sc.isActive = :isActive");
			markers.add("isActive");
			values.add(bActive.booleanValue());
			hql += " where ";
			hql += condStr.toString();
			return StagingClassificationVoAssembler.createStagingClassificationVoCollectionFromStagingClassification(factory.find(hql,markers,values)).sort();		
		}
		else
			return StagingClassificationVoAssembler.createStagingClassificationVoCollectionFromStagingClassification(factory.listDomainObjects(StagingClassification.class)).sort();
	}

	/**
	* list Tumour Groups for this classification
	*/
	public TumourGroupListVoCollection listTumourGroupForClassification(StagingClassificationRefVo classRefVo) 
	{
		String hql = new String();

		StringBuffer condStr = new StringBuffer();
		String[] strings = new String[] {"classId", "isActive"};
		Object[] objects = null;
		
		hql = " select tg from TumourGroup as tg left join tg.otherClassifications as tgc where tgc.classification.id = :classId " +
				"and tgc.isActive = :isActive ";
		objects = new Object[] {classRefVo.getID_StagingClassification(), Boolean.TRUE};
		List find = getDomainFactory().find(hql, strings, objects);

		return TumourGroupListVoAssembler.createTumourGroupListVoCollectionFromTumourGroup(find).sort();		
	}

	public TumourGroupListVo saveTumourGroup(TumourGroupListVo tumourgroupVo) throws StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();
		TumourGroup tgSC = TumourGroupListVoAssembler.extractTumourGroup(factory, tumourgroupVo);
		factory.save(tgSC);
		return TumourGroupVoAssembler.create(tgSC);
	}

}
