//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.45 build 2379.24619)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.domain.impl;

import ims.clinical.configuration.domain.objects.InvasiveDeviceConfig;
import ims.clinicaladmin.domain.base.impl.BaseInvasiveDeviceConfigImpl;
import ims.clinicaladmin.vo.domain.InvasiveDeviceConfigShortVoAssembler;
import ims.clinicaladmin.vo.domain.InvasiveDeviceConfigVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.exceptions.CodingRuntimeException;

public class InvasiveDeviceConfigImpl extends BaseInvasiveDeviceConfigImpl
{
	private static final long serialVersionUID = 1L;

	public ims.clinicaladmin.vo.InvasiveDeviceConfigShortVoCollection list()
	{
		DomainFactory factory = getDomainFactory();
		String hql = "from InvasiveDeviceConfig dsp ";
		
		return InvasiveDeviceConfigShortVoAssembler.
			createInvasiveDeviceConfigShortVoCollectionFromInvasiveDeviceConfig(factory.find(hql));
	}
	public ims.clinicaladmin.vo.InvasiveDeviceConfigVoCollection listFull()
	{
		DomainFactory factory = getDomainFactory();
		String hql = "from InvasiveDeviceConfig dsp ";
		
		return InvasiveDeviceConfigVoAssembler.
			createInvasiveDeviceConfigVoCollectionFromInvasiveDeviceConfig(factory.find(hql));
	}
	public ims.clinicaladmin.vo.InvasiveDeviceConfigVo save(ims.clinicaladmin.vo.InvasiveDeviceConfigVo record) throws ims.domain.exceptions.StaleObjectException
	{
		if(record == null)
		{
			throw new DomainRuntimeException("Invalid record");
		}
		if(!record.isValidated())
		{
			throw new CodingRuntimeException("Record not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		InvasiveDeviceConfig domainRecord = InvasiveDeviceConfigVoAssembler.
				extractInvasiveDeviceConfig(factory, record);		
		
		factory.save(domainRecord);
				
		return InvasiveDeviceConfigVoAssembler.create(domainRecord);
	}
	public ims.clinicaladmin.vo.InvasiveDeviceConfigVo get(ims.clinical.configuration.vo.InvasiveDeviceConfigRefVo id)
	{
		if(id == null || id.getID_InvasiveDeviceConfig() == null)
		{
			throw new DomainRuntimeException("Invalid record");
		}
		
		DomainFactory factory = getDomainFactory();
		InvasiveDeviceConfig domainRecord = (InvasiveDeviceConfig)factory.
			getDomainObject(InvasiveDeviceConfig.class, id.getID_InvasiveDeviceConfig().intValue());
		
		return InvasiveDeviceConfigVoAssembler.create(domainRecord);
	}
}
