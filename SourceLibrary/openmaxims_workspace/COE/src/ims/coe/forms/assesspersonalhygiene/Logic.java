//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40610.1450)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assesspersonalhygiene;

import ims.coe.vo.AssessmentPersonalHygiene;
import ims.coe.vo.PersonalHygieneFeetVo;
import ims.coe.vo.lookups.FeetFindings;
import ims.coe.vo.lookups.FeetFindingsCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;
import ims.nursing.vo.lookups.HygieneActivities;
import ims.nursing.vo.lookups.HygieneActivitiesCollection;
import ims.nursing.vo.lookups.LookupHelper;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		form.setMode(FormMode.EDIT);
		form.container1().gridCarePlan().setReadOnly(false);
		form.container1().bSave().setEnabled(true);
		form.checkBoxCopy().setEnabled(false);

		// If there is an assessment in the global context, we want to call the get component domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setassmnt(assmnt);
		if (assmnt != null && assmnt.getID_AssessmentIsNotNull())
		{		
			//AssessmentPersonalHygiene assessPH = (AssessmentPersonalHygiene)domain.getComponent(assmnt.getCurrentComponent(), AssessmentComponentType.PERSONAL_HYGIENE);
			AssessmentPersonalHygiene voAssessPH = (AssessmentPersonalHygiene)domain.getComponent(assmnt, AssessmentComponentType.PERSONAL_HYGIENE);
			form.getLocalContext().setassessPH(voAssessPH);
			populateInstanceControl(voAssessPH);			
		}
		else
		{
			// check if there is a relevant component
			getLastAssessmentComponent();
		}
	}

	private void initialize() 
	{
		prePopulateGrds();
	}

	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPrevAssessPH() == null)
			return;
	
		form.getLocalContext().getPrevAssessPH().setIsComplete(Boolean.FALSE);
		form.getLocalContext().getPrevAssessPH().setCarePlanTemplate(null);
	
		populateInstanceControl(form.getLocalContext().getPrevAssessPH());
		
		form.checkBoxCopy().setValue(true);
		form.checkBoxCopy().setEnabled(false);
	}
	
	protected void getLastAssessmentComponent()
	{
		AssessmentPersonalHygiene votmpAssessPH = (AssessmentPersonalHygiene)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext(),AssessmentComponentType.PERSONAL_HYGIENE);
		if (votmpAssessPH == null)
		{
			this.form.checkBoxCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessPH(votmpAssessPH);
		form.checkBoxCopy().setEnabled(true);
	}
	
	private void prePopulateGrds()
	{
		prePopulateHygieneGrd();
		prePopulateFootGrd();
		prePopulateCarePlanGrd();
	}
	
	private void prePopulateCarePlanGrd() 
	{
		// Populate the Grid CarePlan Templates
		form.container1().gridCarePlan().getRows().clear();
		CarePlanTemplateTitleCollection votempColl = domain.listCarePlanTemplates(AssessmentComponentType.PERSONAL_HYGIENE);
		if (votempColl != null)
		{
			 form.container1().gridCarePlan().getRows().clear();
			 GenForm.container1Container.gridCarePlanRow tempRow;
			 for (int i=0; i<votempColl.size(); i++)
			 {
				 CarePlanTemplateTitle votemplate = votempColl.get(i);
				 tempRow = form.container1().gridCarePlan().getRows().newRow();
				 tempRow.setValue(votemplate);
				 tempRow.setcolCarePlans(votemplate.getTitle());
			 }
		}
	}

	private void prePopulateFootGrd()
	{
		GenForm.container1Container.gridFootRow fRow;
		form.container1().gridFoot().getRows().clear();
		FeetFindingsCollection feetColl = ims.coe.vo.lookups.LookupHelper.getFeetFindings(domain.getLookupService());
		for (int i=0; i<feetColl.size(); i++)
		{
			FeetFindings finding = feetColl.get(i);
			fRow = form.container1().gridFoot().getRows().newRow();
			fRow.setcolFindings(finding);
		}
	}

	private void prePopulateHygieneGrd() 
	{
		GenForm.container1Container.gridHygieneRow row;
		form.container1().gridHygiene().getRows().clear();
		HygieneActivitiesCollection activityColl = LookupHelper.getHygieneActivities(domain.getLookupService());
		for (int i=0; i<activityColl.size(); i++)
		{
			String activiyToolTip = new String();
			HygieneActivities act = activityColl.get(i);
			activiyToolTip = "" + act.getText();
			row = form.container1().gridHygiene().getRows().newRow();
			row.setcolActivities(act);
			row.setTooltipForcolActivities(activiyToolTip);
		}		
	}

	private void populateInstanceControl(AssessmentPersonalHygiene voAssessPH)
	{
		if (voAssessPH == null)
			return;	
		
		form.checkBoxCopy().setValue(voAssessPH.getCopy().booleanValue());
		if (voAssessPH.getCopy().booleanValue() == true)
			form.checkBoxCopy().setEnabled(false);
	
		form.container1().checkBoxComplete().setValue(voAssessPH.getIsComplete().booleanValue());
		if (voAssessPH.getIsComplete().booleanValue() == true)  // Complete
		{
			form.setMode(FormMode.VIEW);
			form.container1().checkBoxComplete().setEnabled(false);
			form.container1().bSave().setEnabled(false);
			form.container1().gridCarePlan().setReadOnly(true);
			form.checkBoxCopy().setEnabled(false);
		}

		form.container1().comboBoxFeet().setValue(voAssessPH.getPersonalHygieneFeet().getConditionOfFeet());
		form.container1().comboBoxHair().setValue(voAssessPH.getConditionOfHair());
		form.container1().comboBoxNails().setValue(voAssessPH.getConditionOfNails());
		form.container1().textBoxSkin().setValue(voAssessPH.getConditionOfSkin());
		form.container1().datePodiatrist().setValue(voAssessPH.getPersonalHygieneFeet().getReferralToChiropodist());
		form.container1().textBoxPreferredBathing().setValue(voAssessPH.getPreferredBathingPattern());
		form.container1().answerBoxAssisstancePersonalHygiene().setValue(voAssessPH.getAssisstanceWithPersonalHygiene());
		form.container1().answerBoxAttendPodiatrist().setValue(voAssessPH.getPersonalHygieneFeet().getPatientAttendChiropodist());
		form.container1().answerBoxBathefeet().setValue(voAssessPH.getPersonalHygieneFeet().getPatientBatheFeet());
		form.container1().answerBoxHairInfestation().setValue(voAssessPH.getEvidenceOfHairInfestation());
			
		populateHygieneGrd(voAssessPH.getHygieneActivities());
		
		populateFootGrd(voAssessPH.getPersonalHygieneFeet().getFeetFindings());
		
		populateCarePlanGrd(voAssessPH.getCarePlanTemplate());
		
	}
	
	private void populateCarePlanGrd(CarePlanTemplateCollection voCarePlanTempColl)
	{
		//Populate the correct selected careplan template if one saved with the component
		if (voCarePlanTempColl != null && voCarePlanTempColl.size() > 0)
		{
			GenForm.container1Container.gridCarePlanRow cpRow;
			CarePlanTemplate template;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.container1().gridCarePlan().getRows().size(); j++)
			{
				cpRow = form.container1().gridCarePlan().getRows().get(j);
				for (i=0; i<voCarePlanTempColl.size(); i++)
				{
					template = voCarePlanTempColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}
	}

	private void populateFootGrd(ims.coe.vo.FeetFindingsCollection voFeetFindingsColl) 
	{
		//Populate the grid Foot Activities
		if (voFeetFindingsColl != null)
		{
			for (int j=0; j<voFeetFindingsColl.size(); j++)
			{
				ims.coe.vo.FeetFindings vofind = voFeetFindingsColl.get(j);
				GenForm.container1Container.gridFootRow row;
				int numRows = form.container1().gridFoot().getRows().size();
				int i = 0;
				for (i = 0; i < numRows; i++)
				{
					row = form.container1().gridFoot().getRows().get(i);
					if( vofind.getFindings().equals(row.getcolFindings()))
					{
						row.setcolStatus(vofind.getStatus());
						row.setValue(vofind);
						break;
					}					
				}
				if(i == form.container1().gridFoot().getRows().size())
				{
					row = form.container1().gridFoot().getRows().newRow();
					row.setcolFindings(vofind.getFindings());
					row.setcolStatus(vofind.getStatus());
					row.setValue(vofind);		
				}
			}
		}
	}

	private void populateHygieneGrd(ims.nursing.vo.HygieneActivitiesCollection voHygieneActColl)
	{
		//Populate the grid Hygiene Activities
		if (voHygieneActColl != null)
		{
			ims.nursing.vo.HygieneActivities voHygiene ;
			for (int j=0; j<voHygieneActColl.size(); j++)
			{
				voHygiene = voHygieneActColl.get(j);
				GenForm.container1Container.gridHygieneRow row;
				int numRows = form.container1().gridHygiene().getRows().size();
				int i = 0;
				for (i = 0; i < numRows; i++)
				{
					row = form.container1().gridHygiene().getRows().get(i);
					if (voHygiene.getActivities().equals(row.getcolActivities()))
					{
						String abilityToolTip, aidsToolTip = new String();
						row.setcolAbility(voHygiene.getAbility());
						if(voHygiene.getAbilityIsNotNull())
						{
							abilityToolTip = "" + voHygiene.getAbility();
							row.setTooltipForcolAbility(abilityToolTip);
						}
						
						row.setcolAids(voHygiene.getAidsUsed());
						if(voHygiene.getAidsUsedIsNotNull())
						{
							aidsToolTip = "" + voHygiene.getAidsUsed();
							row.setTooltipForcolAids(aidsToolTip);
						}
						row.setValue(voHygiene);
						break;
					}
				}
				if(i == form.container1().gridHygiene().getRows().size())
				{
					row = form.container1().gridHygiene().getRows().newRow();
					row.setcolActivities(voHygiene.getActivities());
					row.setcolAbility(voHygiene.getAbility());
					row.setcolAids(voHygiene.getAidsUsed());
					row.setValue(voHygiene);
				}
			}
		}
	}

	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getassessPH() != null && form.getLocalContext().getassessPH().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getassessPH().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}
	
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AssessmentPersonalHygiene voAssessPH = populateInstanceData();
		try
		{
			
			String[] messages = voAssessPH.validate();
			if (messages != null)
			{
				engine.showErrors("Error occurred Creating Assessment Personal Hygiene Component.", messages);			
				 return;
			}
			AssessmentHeaderInfo voNewAssmntHeader = form.getLocalContext().getassmnt();
			
			if (voNewAssmntHeader.getCareContext() == null)
				voNewAssmntHeader.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (voNewAssmntHeader.getClinicalContact() == null)
				voNewAssmntHeader.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
	
			voNewAssmntHeader = domain.saveComponent(voNewAssmntHeader, voAssessPH);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(voNewAssmntHeader);
			
			// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
			if (form.container1().gridCarePlan().getReadOnly() == false)
			{
				CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
				GenForm.container1Container.gridCarePlanRow cpRow;
				for (int i=0; i<form.container1().gridCarePlan().getRows().size(); i++)
				{
					cpRow = form.container1().gridCarePlan().getRows().get(i);
					if (cpRow.getcolSelected() && !cpRow.isReadOnly())
						templList.add(cpRow.getValue());
				}
				if (templList.size() > 0)
				{
					form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
					engine.open(form.getForms().Nursing.CarePlanStep2);
				}
				else
					engine.open(form.getForms().Nursing.AdmissionAssessOverview);
			}
			else
				engine.open(form.getForms().Nursing.AdmissionAssessOverview);
			
		}catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
	
			open();
			return;				
		} catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Personal Hygiene Assessment record already exists. " + e.getMessage());
			open();
			return;
		}	
		catch (DomainInterfaceException e) {
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			
			open();
			return;	
		}
	}

	private AssessmentPersonalHygiene populateInstanceData() 
	{
		AssessmentPersonalHygiene voAssessPH = form.getLocalContext().getassessPH();
		if (voAssessPH == null)
		{
			voAssessPH = new AssessmentPersonalHygiene();
			voAssessPH.setComponentType(AssessmentComponentType.PERSONAL_HYGIENE);
		}
		
		voAssessPH.setIsComplete(new Boolean(this.form.container1().checkBoxComplete().getValue()));
		voAssessPH.setCopy(new Boolean(this.form.checkBoxCopy().getValue()));
		voAssessPH.setConditionOfHair(form.container1().comboBoxHair().getValue());
		voAssessPH.setConditionOfNails(form.container1().comboBoxNails().getValue());
		voAssessPH.setPreferredBathingPattern(form.container1().textBoxPreferredBathing().getValue());
		voAssessPH.setConditionOfSkin(form.container1().textBoxSkin().getValue());
		
		PersonalHygieneFeetVo voFeet = voAssessPH.getPersonalHygieneFeet();
		if (voFeet == null)
			voFeet = new PersonalHygieneFeetVo();
			
		voFeet.setConditionOfFeet(form.container1().comboBoxFeet().getValue());
		voFeet.setReferralToChiropodist(form.container1().datePodiatrist().getValue());
		voFeet.setPatientBatheFeet(form.container1().answerBoxBathefeet().getValue());
		voFeet.setPatientAttendChiropodist(form.container1().answerBoxAttendPodiatrist().getValue());
		
		// Save the Feet Findings grid information
		ims.coe.vo.FeetFindingsCollection findings = new ims.coe.vo.FeetFindingsCollection();
		GenForm.container1Container.gridFootRow fRow;
		for (int i=0; i<form.container1().gridFoot().getRows().size(); i++)
		{
			fRow = form.container1().gridFoot().getRows().get(i);
			ims.coe.vo.FeetFindings find = fRow.getValue();
			if (find == null)
				find = new ims.coe.vo.FeetFindings();
			find.setFindings(fRow.getcolFindings());
			find.setStatus(fRow.getcolStatus());
			findings.add(find);
		}
		voFeet.setFeetFindings(findings);			
		
		voAssessPH.setPersonalHygieneFeet(voFeet);
		
		// Save the Hygiene Activities grid information
		ims.nursing.vo.HygieneActivitiesCollection voHygieneDetails = new ims.nursing.vo.HygieneActivitiesCollection();
		GenForm.container1Container.gridHygieneRow row;
		for (int i=0; i<form.container1().gridHygiene().getRows().size(); i++)
		{
			row = form.container1().gridHygiene().getRows().get(i);
			if (row.getcolAbility() != null || (row.getcolAids() != null && !row.getcolAids().equals("")))
			{
				ims.nursing.vo.HygieneActivities act = row.getValue();
				if (act == null)
					act = new ims.nursing.vo.HygieneActivities();
				act.setAbility(row.getcolAbility());
				act.setActivities(row.getcolActivities());
				act.setAidsUsed(row.getcolAids());
				voHygieneDetails.add(act);
			}
		}
		voAssessPH.setHygieneActivities(voHygieneDetails);
		
		voAssessPH.setEvidenceOfHairInfestation(form.container1().answerBoxHairInfestation().getValue());
		voAssessPH.setAssisstanceWithPersonalHygiene(form.container1().answerBoxAssisstancePersonalHygiene().getValue());
		return voAssessPH;
	}
}
