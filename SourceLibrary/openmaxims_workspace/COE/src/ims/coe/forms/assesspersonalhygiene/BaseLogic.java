//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.forms.assesspersonalhygiene;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.coe.domain.AssessPersonalHygiene.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.coe.domain.AssessPersonalHygiene domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void onanswerBoxHairInfestationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().answerBoxHairInfestation().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindanswerBoxHairInfestationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindanswerBoxHairInfestationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().answerBoxHairInfestation().addOption(instance);
		}
	}
	protected final void bindanswerBoxHairInfestationLookup()
	{
		this.form.container1().answerBoxHairInfestation().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().answerBoxHairInfestation().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultanswerBoxHairInfestationLookupValue()
	{
		this.form.container1().answerBoxHairInfestation().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void oncomboBoxHairValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().comboBoxHair().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.coe.vo.lookups.ConditionOfHair existingInstance = (ims.coe.vo.lookups.ConditionOfHair)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcomboBoxHairLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.coe.vo.lookups.ConditionOfHair)
		{
			ims.coe.vo.lookups.ConditionOfHair instance = (ims.coe.vo.lookups.ConditionOfHair)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcomboBoxHairLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.coe.vo.lookups.ConditionOfHair existingInstance = (ims.coe.vo.lookups.ConditionOfHair)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().comboBoxHair().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcomboBoxHairLookup()
	{
		this.form.container1().comboBoxHair().clear();
		ims.coe.vo.lookups.ConditionOfHairCollection lookupCollection = ims.coe.vo.lookups.LookupHelper.getConditionOfHair(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().comboBoxHair().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcomboBoxHairLookupValue(int id)
	{
		ims.coe.vo.lookups.ConditionOfHair instance = ims.coe.vo.lookups.LookupHelper.getConditionOfHairInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().comboBoxHair().setValue(instance);
	}
	protected final void defaultcomboBoxHairLookupValue()
	{
		this.form.container1().comboBoxHair().setValue((ims.coe.vo.lookups.ConditionOfHair)domain.getLookupService().getDefaultInstance(ims.coe.vo.lookups.ConditionOfHair.class, engine.getFormName().getID(), ims.coe.vo.lookups.ConditionOfHair.TYPE_ID));
	}
	protected final void bindgridHygienecolAbilityLookup()
	{
		this.form.container1().gridHygiene().colAbilityComboBox().clear();
		ims.nursing.vo.lookups.AbilityCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getAbility(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().gridHygiene().colAbilityComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void oncomboBoxNailsValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().comboBoxNails().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.coe.vo.lookups.ConditionOfNails existingInstance = (ims.coe.vo.lookups.ConditionOfNails)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcomboBoxNailsLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.coe.vo.lookups.ConditionOfNails)
		{
			ims.coe.vo.lookups.ConditionOfNails instance = (ims.coe.vo.lookups.ConditionOfNails)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcomboBoxNailsLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.coe.vo.lookups.ConditionOfNails existingInstance = (ims.coe.vo.lookups.ConditionOfNails)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().comboBoxNails().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcomboBoxNailsLookup()
	{
		this.form.container1().comboBoxNails().clear();
		ims.coe.vo.lookups.ConditionOfNailsCollection lookupCollection = ims.coe.vo.lookups.LookupHelper.getConditionOfNails(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().comboBoxNails().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcomboBoxNailsLookupValue(int id)
	{
		ims.coe.vo.lookups.ConditionOfNails instance = ims.coe.vo.lookups.LookupHelper.getConditionOfNailsInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().comboBoxNails().setValue(instance);
	}
	protected final void defaultcomboBoxNailsLookupValue()
	{
		this.form.container1().comboBoxNails().setValue((ims.coe.vo.lookups.ConditionOfNails)domain.getLookupService().getDefaultInstance(ims.coe.vo.lookups.ConditionOfNails.class, engine.getFormName().getID(), ims.coe.vo.lookups.ConditionOfNails.TYPE_ID));
	}
	protected final void onanswerBoxBathefeetValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().answerBoxBathefeet().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindanswerBoxBathefeetLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindanswerBoxBathefeetLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().answerBoxBathefeet().addOption(instance);
		}
	}
	protected final void bindanswerBoxBathefeetLookup()
	{
		this.form.container1().answerBoxBathefeet().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().answerBoxBathefeet().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultanswerBoxBathefeetLookupValue()
	{
		this.form.container1().answerBoxBathefeet().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void bindgridFootcolStatusLookup()
	{
		this.form.container1().gridFoot().answerBoxColumnClear(1);
		ims.core.vo.lookups.LateralityLRBCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLateralityLRB(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().gridFoot().answerBoxColumnNewOption(1, lookupCollection.get(x));
		}
	}
	protected final void oncomboBoxFeetValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().comboBoxFeet().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.coe.vo.lookups.ConditionOfFeet existingInstance = (ims.coe.vo.lookups.ConditionOfFeet)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcomboBoxFeetLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.coe.vo.lookups.ConditionOfFeet)
		{
			ims.coe.vo.lookups.ConditionOfFeet instance = (ims.coe.vo.lookups.ConditionOfFeet)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcomboBoxFeetLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.coe.vo.lookups.ConditionOfFeet existingInstance = (ims.coe.vo.lookups.ConditionOfFeet)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().comboBoxFeet().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcomboBoxFeetLookup()
	{
		this.form.container1().comboBoxFeet().clear();
		ims.coe.vo.lookups.ConditionOfFeetCollection lookupCollection = ims.coe.vo.lookups.LookupHelper.getConditionOfFeet(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().comboBoxFeet().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcomboBoxFeetLookupValue(int id)
	{
		ims.coe.vo.lookups.ConditionOfFeet instance = ims.coe.vo.lookups.LookupHelper.getConditionOfFeetInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().comboBoxFeet().setValue(instance);
	}
	protected final void defaultcomboBoxFeetLookupValue()
	{
		this.form.container1().comboBoxFeet().setValue((ims.coe.vo.lookups.ConditionOfFeet)domain.getLookupService().getDefaultInstance(ims.coe.vo.lookups.ConditionOfFeet.class, engine.getFormName().getID(), ims.coe.vo.lookups.ConditionOfFeet.TYPE_ID));
	}
	protected final void onanswerBoxAttendPodiatristValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().answerBoxAttendPodiatrist().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindanswerBoxAttendPodiatristLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindanswerBoxAttendPodiatristLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().answerBoxAttendPodiatrist().addOption(instance);
		}
	}
	protected final void bindanswerBoxAttendPodiatristLookup()
	{
		this.form.container1().answerBoxAttendPodiatrist().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().answerBoxAttendPodiatrist().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultanswerBoxAttendPodiatristLookupValue()
	{
		this.form.container1().answerBoxAttendPodiatrist().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void onanswerBoxAssisstancePersonalHygieneValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().answerBoxAssisstancePersonalHygiene().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindanswerBoxAssisstancePersonalHygieneLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindanswerBoxAssisstancePersonalHygieneLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().answerBoxAssisstancePersonalHygiene().addOption(instance);
		}
	}
	protected final void bindanswerBoxAssisstancePersonalHygieneLookup()
	{
		this.form.container1().answerBoxAssisstancePersonalHygiene().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().answerBoxAssisstancePersonalHygiene().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultanswerBoxAssisstancePersonalHygieneLookupValue()
	{
		this.form.container1().answerBoxAssisstancePersonalHygiene().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.coe.domain.AssessPersonalHygiene domain;
}
