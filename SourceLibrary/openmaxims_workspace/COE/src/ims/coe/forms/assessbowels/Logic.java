//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40616.1400)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assessbowels;

import ims.coe.vo.AssessmentBowels;
import ims.coe.vo.BowelMedication;
import ims.coe.vo.BowelMedicationCollection;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.BowelOstomyVo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.ConstipationVo;
import ims.nursing.vo.DiarrhoeaVo;
import ims.nursing.vo.lookups.AssessmentComponentType;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		prepareControls();
	
		// If there is an assessment in the global context, we want to call the get component domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo voAssessHeader = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssmnt(voAssessHeader);
		if (voAssessHeader != null && voAssessHeader.getID_AssessmentIsNotNull())
		{		
			
			AssessmentBowels voAssessBowel = (AssessmentBowels)domain.getComponent(voAssessHeader,AssessmentComponentType.BOWELS);
			form.getLocalContext().setAssessBowels(voAssessBowel);
			populateInstanceControl(voAssessBowel);
			
		}
		else
		{
			//check if there is a relevant component
			getLastAssessmentComponent();	
		}

	}

	private void prepareControls() 
	{
		form.setMode(FormMode.EDIT);
		form.container1().comboBoxBowelsOpen().setFocus();
		form.container1().textBoxLongAgo().setEnabled(false);
		form.container1().bMedication().setEnabled(false);
		form.checkBoxCopy().setEnabled(false);
		form.container1().bUpdateMed().setEnabled(false);
		enableControls(true);
		enableCombos(false);
	}

	private void enableControls(boolean enable) 
	{
		form.container1().bSave().setEnabled(enable);
		form.container1().gridCarePlans().setReadOnly(!enable);
	}

	private void initialize()
	{
		form.getLocalContext().setYesNoColl(ims.core.vo.lookups.LookupHelper.getYesNoUnknown(domain.getLookupService()));
		loadCarePlanGrd();
	}

	private void loadCarePlanGrd() 
	{
		//Populate the Grid CarePlan Templates
		CarePlanTemplateTitleCollection votempColl = domain.listCarePlanTemplates(AssessmentComponentType.BOWELS);
		if (votempColl != null)
		{
			form.container1().gridCarePlans().getRows().clear();
			GenForm.container1Container.gridCarePlansRow tempRow;
			for (int i=0; i<votempColl.size(); i++)
			{
				CarePlanTemplateTitle votemplate = votempColl.get(i);
				tempRow = form.container1().gridCarePlans().getRows().newRow();
				tempRow.setValue(votemplate);
				tempRow.setcolCarePlans(votemplate.getTitle());
			}
		}
	}

	private void populateInstanceControl(AssessmentBowels voAssessBowel) 
	{
		if (voAssessBowel == null)
			return;

		form.container1().answerBoxLaxatives().setValue(voAssessBowel.getConstipation().getTakingLaxatives());
		form.container1().answerBoxLeakagePast().setValue(voAssessBowel.getConstipation().getLeakageOfFaecesPast());
		form.container1().answerBoxLeakagePresent().setValue(voAssessBowel.getConstipation().getLeakageOfFaecesAtPresent());
		checkLeakagePast();
		
		form.container1().answerBoxNoticedStaining().setValue(voAssessBowel.getConstipation().getStainingOfFaeces());
		form.container1().answerBoxProneDiarr().setValue(voAssessBowel.getDiarrhoea().getProneToDiarrhoea());
		checkProneDiarr();
		form.container1().answerBoxProneToCons().setValue(voAssessBowel.getConstipation().getProneToConstipation());

		form.checkBoxCopy().setValue(voAssessBowel.getCopy().booleanValue());
		if (voAssessBowel.getCopy().booleanValue() == true)
			form.checkBoxCopy().setEnabled(false);
		
		form.container1().checkBoxComplete().setValue(voAssessBowel.getIsComplete().booleanValue());
		if (voAssessBowel.getIsComplete().booleanValue() == true)  // Complete
		{
			form.setMode(FormMode.VIEW);
			enableControls(false);
			form.container1().checkBoxComplete().setEnabled(false);
			form.checkBoxCopy().setEnabled(false);
			form.container1().bUpdateMed().setEnabled(false);
		}
			
		form.container1().comboBoxAmount().setValue(voAssessBowel.getDiarrhoea().getAmount());
		form.container1().comboBoxBowelsOpen().setValue(voAssessBowel.getBowelsOpen());
		form.container1().comboBoxColour().setValue(voAssessBowel.getDiarrhoea().getColour());
		form.container1().comboBoxConsistency().setValue(voAssessBowel.getDiarrhoea().getConsistency());
		form.container1().comboBoxFreq().setValue(voAssessBowel.getDiarrhoea().getFrequency());
		form.container1().comboBoxOdour().setValue(voAssessBowel.getDiarrhoea().getOdour());
		form.container1().comboBoxOstomy().setValue(voAssessBowel.getBowelOstomy().getOstomyType());
		form.container1().textBoxAlternatives().setValue(voAssessBowel.getAlternativesUsed());
		form.container1().textBoxAppliances().setValue(voAssessBowel.getBowelOstomy().getAppliancesUsed());
		form.container1().textBoxLongAgo().setValue(voAssessBowel.getConstipation().getHowLongAgo());
		
		// Populate the Bowel Medication Grid
		populateMedicationGrd(voAssessBowel.getBowelMedication());
		
		// Populate the correct selected careplan template if one saved with the component
		populateCarePlanGrd(voAssessBowel.getCarePlanTemplate());
		
		checkLeakagePast();
		checkLaxatives();

	}
	private void populateCarePlanGrd(CarePlanTemplateCollection voCarePlanTemplateColl)
	{
		if (voCarePlanTemplateColl != null && voCarePlanTemplateColl.size() > 0)
		{
			GenForm.container1Container.gridCarePlansRow cpRow;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.container1().gridCarePlans().getRows().size(); j++)
			{
				cpRow = form.container1().gridCarePlans().getRows().get(j);
				for (i=0; i<voCarePlanTemplateColl.size(); i++)
				{
					CarePlanTemplate votemplate = voCarePlanTemplateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(votemplate.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}
		
	}

	private void populateMedicationGrd(BowelMedicationCollection voBowelMedColl) 
	{
		if (voBowelMedColl != null)
		{
			 form.container1().gridMedication().getRows().clear();
			 GenForm.container1Container.gridMedicationRow medRow;
			 for (int i=0; i<voBowelMedColl.size(); i++)
			 {
			 	BowelMedication voMed = voBowelMedColl.get(i);
			 	
			 	if (voMed.getIsCurrentlyActive().booleanValue())
			 	{
			 		medRow = form.container1().gridMedication().getRows().newRow();
			 		medRow.setValue(voMed);
			 		if (voMed.getMedication() != null)
			 			medRow.setColMedication(voMed.getMedication().getText());
			 		else 
			 			medRow.setColMedication(voMed.getOther());
			 		medRow.setColDose(voMed.getDose());
			 		medRow.setColFrequency(voMed.getFrequency());
			 		medRow.setColRoute(voMed.getRoute());
			 	}
			 	else
			 	{
			 		BowelMedicationCollection volstInActiveList = form.getLocalContext().getInActiveMedicationsList();
			 		if (volstInActiveList == null)
			 			volstInActiveList = new ims.coe.vo.BowelMedicationCollection();
			 		volstInActiveList.add(voMed);
			 		form.getLocalContext().setInActiveMedicationsList(volstInActiveList);
			 	}
			 }
		}
		
	}

	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAssessBowels() != null && form.getLocalContext().getAssessBowels().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessBowels().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}
	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPrevAssessBowels() == null)
			return;
		
		form.getLocalContext().getPrevAssessBowels().setIsComplete(Boolean.FALSE);
		form.getLocalContext().getPrevAssessBowels().setCarePlanTemplate(null);
		populateInstanceControl(form.getLocalContext().getPrevAssessBowels());
		form.checkBoxCopy().setValue(true);
		form.checkBoxCopy().setEnabled(false);
	}
	
	protected void getLastAssessmentComponent()
	{
		AssessmentBowels tmpAssessBowels = (AssessmentBowels)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(),form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.BOWELS);
		if (tmpAssessBowels == null)
		{
			this.form.checkBoxCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessBowels(tmpAssessBowels);
		form.checkBoxCopy().setEnabled(true);
	}
	
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//must check that if a medication exists,that either Constipation,Diarrhoea or laxatives is checked
		if (form.container1().gridMedication().getRows().size() > 0)
		{
			if((form.container1().answerBoxProneToCons().getValue() == null && form.container1().answerBoxProneDiarr().getValue() == null && form.container1().answerBoxLaxatives().getValue() == null)
				||(!((form.container1().answerBoxProneToCons().getValue()!= null && form.container1().answerBoxProneToCons().getValue().equals(YesNoUnknown.YES))|| (form.container1().answerBoxProneDiarr().getValue()!=null && form.container1().answerBoxProneDiarr().getValue().equals(YesNoUnknown.YES)) || (form.container1().answerBoxLaxatives().getValue()!=null && form.container1().answerBoxLaxatives().getValue().equals(YesNoUnknown.YES)))))
			{
				engine.showMessage("A medication record cannot exist without a bowel complaint selected.");
				return;
			}
		}
		
		AssessmentBowels voAssessBowels = form.getLocalContext().getAssessBowels();
		if (voAssessBowels == null)
		{
			voAssessBowels = new AssessmentBowels();
			voAssessBowels.setComponentType(AssessmentComponentType.BOWELS);
		}
		
		voAssessBowels.setIsComplete(new Boolean(this.form.container1().checkBoxComplete().getValue()));
		voAssessBowels.setCopy(new Boolean(this.form.checkBoxCopy().getValue()));
		voAssessBowels.setAlternativesUsed(form.container1().textBoxAlternatives().getValue());
		voAssessBowels.setBowelsOpen(form.container1().comboBoxBowelsOpen().getValue());

		BowelOstomyVo voBowelOstomy = voAssessBowels.getBowelOstomy();
		if (voBowelOstomy == null)
			voBowelOstomy = new BowelOstomyVo();
		
		voBowelOstomy.setAppliancesUsed(form.container1().textBoxAppliances().getValue());
		voBowelOstomy.setOstomyType(form.container1().comboBoxOstomy().getValue());
		voAssessBowels.setBowelOstomy(voBowelOstomy);
		
		DiarrhoeaVo voDiarrhoea = voAssessBowels.getDiarrhoea();
		if (voDiarrhoea == null)
			voDiarrhoea = new DiarrhoeaVo();
		
		voDiarrhoea.setAmount(form.container1().comboBoxAmount().getValue());
		voDiarrhoea.setColour(form.container1().comboBoxColour().getValue());
		voDiarrhoea.setConsistency(form.container1().comboBoxConsistency().getValue());
		voDiarrhoea.setFrequency(form.container1().comboBoxFreq().getValue());
		voDiarrhoea.setProneToDiarrhoea(form.container1().answerBoxProneDiarr().getValue());
		voDiarrhoea.setOdour(form.container1().comboBoxOdour().getValue());
		voAssessBowels.setDiarrhoea(voDiarrhoea);

		ConstipationVo voConstipation = voAssessBowels.getConstipation();
		if (voConstipation == null)
			voConstipation = new ConstipationVo();
		
		voConstipation.setTakingLaxatives(form.container1().answerBoxLaxatives().getValue());
		voConstipation.setLeakageOfFaecesPast(form.container1().answerBoxLeakagePast().getValue());
		voConstipation.setLeakageOfFaecesAtPresent(form.container1().answerBoxLeakagePresent().getValue());
		voConstipation.setStainingOfFaeces(form.container1().answerBoxNoticedStaining().getValue());
		voConstipation.setHowLongAgo(form.container1().textBoxLongAgo().getValue());
		voConstipation.setProneToConstipation(form.container1().answerBoxProneToCons().getValue());
		voAssessBowels.setConstipation(voConstipation);
		
		// Save the Bowel Medications
		BowelMedicationCollection medColl = new BowelMedicationCollection();
		for (int i=0; i<form.container1().gridMedication().getRows().size(); i++)
		{
			medColl.add(form.container1().gridMedication().getRows().get(i).getValue());
		}
		
		BowelMedicationCollection lstInActiveList = form.getLocalContext().getInActiveMedicationsList();
		if (lstInActiveList != null)
		{
			for (int j = 0;  j < lstInActiveList.size() ; j++)
				medColl.add(lstInActiveList.get(j));
		}
		
		voAssessBowels.setBowelMedication(medColl);
			
		try
		{
			   String[] messages = voAssessBowels.validate();
			   if (messages != null)
			   {
					engine.showErrors("Validation Errors", messages);
					return;
			   }		
			   AssessmentHeaderInfo newAssmnt = form.getLocalContext().getAssmnt();
				
			   if (newAssmnt.getCareContext() == null)
				   newAssmnt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				
				if (newAssmnt.getClinicalContact() == null)
					newAssmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
			   newAssmnt = domain.saveComponent(newAssmnt, voAssessBowels);
			   form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
		  
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
	
		  open();
		  return;							
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Bowel Assessment record already exists. " + e.getMessage());
			open();
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			open();
			return;
		}
		
		// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.container1().gridCarePlans().getReadOnly() == false)
		{
			CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
			GenForm.container1Container.gridCarePlansRow row;
			for (int i=0; i<form.container1().gridCarePlans().getRows().size(); i++)
			{
				 row = form.container1().gridCarePlans().getRows().get(i);
				 if (row.getcolSelected() && !row.isReadOnly())
					 templList.add(row.getValue());
			 }
			 if (templList.size() > 0)
			 {
				 form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
				 engine.open(form.getForms().Nursing.CarePlanStep2);
			 }
			 else
				 engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		 }
		 else
			 engine.open(form.getForms().Nursing.AdmissionAssessOverview);	
	}
	
	protected void onBMedicationClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().COE.setBowelMedication(null);
		form.getLocalContext().setCurIndex(null);
		engine.open(form.getForms().COE.AssessBowelMedication);
	}
	
	protected void onMedSelChanged()
	{
		form.getLocalContext().setCurIndex(new Integer(form.container1().gridMedication().getSelectedRowIndex()));
		form.getGlobalContext().COE.setBowelMedication(form.container1().gridMedication().getValue());
		
		if(form.container1().checkBoxComplete().getValue() == false)
		{
			form.container1().bUpdateMed().setEnabled(true);
		}
	}
	
	protected void onDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().COE.AssessBowelMedication) && result == ims.framework.enumerations.DialogResult.OK)
		{
			// Get the medication from the global context
			BowelMedication med = form.getGlobalContext().COE.getBowelMedication();
			
			GenForm.container1Container.gridMedicationRow row=null;
			
			if ( !med.getIsCurrentlyActive().booleanValue())//Has been made Inactive
			{
				BowelMedicationCollection lstInActiveList = form.getLocalContext().getInActiveMedicationsList();
				if (lstInActiveList == null)
					lstInActiveList = new ims.coe.vo.BowelMedicationCollection();
				lstInActiveList.add(med);
				form.getLocalContext().setInActiveMedicationsList(lstInActiveList);
				if (form.getLocalContext().getCurIndex() != null)
					form.container1().gridMedication().getRows().remove(form.getLocalContext().getCurIndex().intValue());
			}
			else
			{
				if (form.getLocalContext().getCurIndex() == null)
				{
					row = form.container1().gridMedication().getRows().newRow();
					row.setValue(med);
					//	form.getLocalContext().setCurIndex(new Integer(form.gMed().getRows().size()));
				}
				else
				{
					row = form.container1().gridMedication().getRows().get(form.getLocalContext().getCurIndex().intValue());
					row.setValue(med);
				}
				row.setColDose(med.getDose());
				row.setColFrequency(med.getFrequency());
				if (med.getMedication() != null)
					row.setColMedication(med.getMedication().getText());
				else
					row.setColMedication(med.getOther());
				row.setColRoute(med.getRoute());
			}
			form.container1().bUpdateMed().setEnabled(false);
			if (form.container1().gridMedication().getSelectedRowIndex()>=0)
				onMedSelChanged();
			
		}
	}
	
	protected void onBUpdateMedClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().COE.AssessBowelMedication);
	}

	protected void onAnswerBoxLeakagePastValueChanged() throws PresentationLogicException 
	{
		checkLeakagePast();
	}

	private void checkLeakagePast() 
	{
		if (form.container1().answerBoxLeakagePast().getValue() != null && form.container1().answerBoxLeakagePast().getValue().equals(YesNoUnknown.YES))
		{
			if (form.getMode().equals(FormMode.EDIT)) form.container1().textBoxLongAgo().setEnabled(true);
		}
		else
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.container1().textBoxLongAgo().setValue(null);
				form.container1().textBoxLongAgo().setEnabled(false); 
			} 
		}
	}

	protected void onAnswerBoxLaxativesValueChanged() throws PresentationLogicException 
	{
		checkLaxatives();
	}

	private void checkLaxatives()
	{
		if (form.container1().gridMedication().getRows().size() > 0)
		{
			if (form.container1().answerBoxLaxatives().getValue() != null && !form.container1().answerBoxLaxatives().getValue().equals(YesNoUnknown.YES))
			{
				if ((form.container1().answerBoxProneToCons().getValue() == null && form.container1().answerBoxProneDiarr().getValue() == null)   ||
				 	(form.container1().answerBoxProneToCons().getValue() != null && !form.container1().answerBoxProneToCons().getValue().equals(YesNoUnknown.YES)) &&
				  	(form.container1().answerBoxProneDiarr().getValue() != null && !form.container1().answerBoxProneDiarr().getValue().equals(YesNoUnknown.YES)))
				{
					engine.showMessage("Cannot set to No or Unknown as a medication record exists.");
					form.container1().answerBoxLaxatives().setValue(YesNoUnknown.YES);
					return;
				}
			}
		}
	
		enableNewMedication();
	}

	protected void onAnswerBoxProneDiarrValueChanged() throws PresentationLogicException 
	{
		checkProneDiarr();
	}

	private void checkProneDiarr() 
	{
		if (form.container1().gridMedication().getRows().size() > 0)
		{
			if (form.container1().answerBoxProneDiarr().getValue() != null && !form.container1().answerBoxProneDiarr().getValue().equals(YesNoUnknown.YES))
			{
				if ((form.container1().answerBoxProneToCons().getValue() == null && form.container1().answerBoxLaxatives().getValue() == null)   ||
					(form.container1().answerBoxProneToCons().getValue() != null && !form.container1().answerBoxProneToCons().getValue().equals(YesNoUnknown.YES)) &&
					(form.container1().answerBoxLaxatives().getValue() != null && !form.container1().answerBoxLaxatives().getValue().equals(YesNoUnknown.YES)))
				{
					engine.showMessage("Cannot set to No or Unknown as a medication record exists.");
					form.container1().answerBoxProneDiarr().setValue(YesNoUnknown.YES);
					return;
				}
			} 
		}
		enableNewMedication();
		if (form.container1().answerBoxProneDiarr().getValue() != null && form.container1().answerBoxProneDiarr().getValue().equals(YesNoUnknown.YES))
		{
			if (form.getMode().equals(FormMode.EDIT)) 
				enableCombos(true);
		}
		else
		{
			if (form.getMode().equals(FormMode.EDIT)) 	
				enableCombos(false);
		}
		
	}

	private void enableCombos(boolean enable) 
	{
		form.container1().comboBoxFreq().setEnabled(enable);
		form.container1().comboBoxConsistency().setEnabled(enable);
		form.container1().comboBoxOdour().setEnabled(enable);
		form.container1().comboBoxColour().setEnabled(enable);
		form.container1().comboBoxAmount().setEnabled(enable);
	}

	protected void onAnswerBoxProneToConsValueChanged() throws PresentationLogicException 
	{
		if (form.container1().gridMedication().getRows().size() > 0)
		{
			if (form.container1().answerBoxProneToCons().getValue() != null && !form.container1().answerBoxProneToCons().getValue().equals(YesNoUnknown.YES))
			{
				if ((form.container1().answerBoxProneDiarr().getValue() == null && form.container1().answerBoxLaxatives().getValue() == null)   ||
					(form.container1().answerBoxProneDiarr().getValue() != null && !form.container1().answerBoxProneDiarr().getValue().equals(YesNoUnknown.YES)) &&
					(form.container1().answerBoxLaxatives().getValue() != null && !form.container1().answerBoxLaxatives().getValue().equals(YesNoUnknown.YES)))
				{
					engine.showMessage("Cannot set to No or Unknown as a medication record exists.");
					form.container1().answerBoxProneToCons().setValue(YesNoUnknown.YES);
					return;
				}
			} 
		}
		enableNewMedication();
			
	}

	private void enableNewMedication() 
	{
		if ( (form.container1().answerBoxProneToCons().getValue() != null && form.container1().answerBoxProneToCons().getValue().equals(YesNoUnknown.YES)) || (form.container1().answerBoxProneDiarr().getValue() != null && form.container1().answerBoxProneDiarr().getValue().equals(YesNoUnknown.YES)) || (form.container1().answerBoxLaxatives().getValue() != null && form.container1().answerBoxLaxatives().getValue().equals(YesNoUnknown.YES)))
		{
			if (form.getMode().equals(FormMode.EDIT)) form.container1().bMedication().setEnabled(true);
		}
		else
		{
			if (form.getMode().equals(FormMode.EDIT)) form.container1().bMedication().setEnabled(false);	
		}
		
	}
	
}
