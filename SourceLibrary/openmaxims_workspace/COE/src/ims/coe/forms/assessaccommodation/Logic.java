//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.17 build 40524.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assessaccommodation;

import ims.coe.vo.AccommodationHomeFacilities;
import ims.coe.vo.AccommodationHomeFacilitiesCollection;
import ims.coe.vo.AccommodationHousingVo;
import ims.coe.vo.AssessmentAccommodation;
import ims.coe.vo.lookups.HomeFacilities;
import ims.coe.vo.lookups.HomeFacilitiesCollection;
import ims.coe.vo.lookups.LookupHelper;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.lookups.AssessmentComponentType;

public class Logic extends BaseLogic
{
	
	protected void onFormOpen()
	{
		form.cmbLivingArrng().setFocus();
		form.setMode(FormMode.EDIT);
		form.bSave().setEnabled(true);
		form.chkCopyPrev().setEnabled(false);
		
		HomeFacilitiesCollection hfColl = LookupHelper.getHomeFacilities(domain.getLookupService());

		form.gHomeFacilities().getRows().clear();
		GenForm.gHomeFacilitiesRow row;
		for (int i=0; i< hfColl.size(); i++)
		{
			HomeFacilities comp = hfColl.get(i);
			row = form.gHomeFacilities().getRows().newRow();
			row.setcolService(comp);
		}
		
		// If there is an assessment in the global context, we want to call the get component
		// domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setassmnt(assmnt);
		
		if (assmnt != null && assmnt.getID_AssessmentIsNotNull())
		{				
			AssessmentAccommodation assessAccom = (AssessmentAccommodation)domain.getComponent(form.getLocalContext().getassmnt(),AssessmentComponentType.ACCOMMODATION);

			if (assessAccom != null)
				populateFormInfo(assessAccom);
		}
		else
		{
			// check if there is a relevant component
			getLastAssessmentComponent();
		}
	}
	
	private void populateFormInfo(AssessmentAccommodation assessAccom)
	{
		form.getLocalContext().setassessAccommodation(assessAccom);
		
		if(assessAccom.getAccommodationHousing() != null)
		{
			AccommodationHousingVo voAccomodation = assessAccom.getAccommodationHousing();
			form.cmbAccommodation().setValue(voAccomodation.getAccommodation());
			form.cmbLivingArrng().setValue(voAccomodation.getCurrentLivingArrangements());
			form.txtAccommodation().setValue(voAccomodation.getAccommodationNotes());
			form.txtLivingArrng().setValue(voAccomodation.getCurrentLivingArrangementsNotes());
			form.txtAssistance().setValue(voAccomodation.getAssistanceToOthersNotes());
			form.ansAssistance().setValue(voAccomodation.getAssisstanceToOthers());
		}
		
		if (assessAccom.getIsComplete().booleanValue() == true)
		{
			form.chkComplete().setValue(assessAccom.getIsComplete().booleanValue());
			form.chkComplete().setEnabled(false);
			form.bSave().setEnabled(false);
			form.setMode(FormMode.VIEW);
			form.chkCopyPrev().setEnabled(false);
		}
		else
			form.chkComplete().setValue(false);
				
		if (assessAccom.getCopy().booleanValue() == true)	
		{
			form.chkCopyPrev().setValue(true);
			form.chkCopyPrev().setEnabled(false);
		}

		// Fill the Home Facilities Grid
		GenForm.gHomeFacilitiesRow row;
		if(assessAccom.getHomeFacilities() != null)
		{
			for (int i=0; i<assessAccom.getHomeFacilities().size(); i++)
			{
				AccommodationHomeFacilities home = assessAccom.getHomeFacilities().get(i);
				// We have to find the row on the grid
				int j = 0;
				for (j=0; j<form.gHomeFacilities().getRows().size(); j++)
				{
					row = form.gHomeFacilities().getRows().get(j);
					if (row.getcolService().equals(home.getHomeFacilities()))
					{
						row.setValue(home);
						row.setcolDetails(home.getDetails());
						row.setcolStatus(home.getStatus());
						break;
					}
				}	
				if(j == form.gHomeFacilities().getRows().size())
				{
					row = form.gHomeFacilities().getRows().newRow();
					row.setcolService(home.getHomeFacilities());
					row.setcolDetails(home.getDetails());
					row.setcolStatus(home.getStatus());
					row.setValue(home);
				}
			}
		}
	}
	
	protected void onAssessInfoClick()
	{
		if (form.getLocalContext().getassessAccommodation() != null && form.getLocalContext().getassessAccommodation().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getassessAccommodation().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}
	
	protected void onCopyPrevAssessmentValueChanged()
	{
		if (form.getLocalContext().getPrevAssessmentAccomodation() == null)
			return;
		
		this.form.chkCopyPrev().setValue(true);
		form.chkCopyPrev().setEnabled(false);
		form.getLocalContext().getPrevAssessmentAccomodation().setIsComplete(new Boolean(false));
			
		populateFormInfo(form.getLocalContext().getPrevAssessmentAccomodation());		
	}
	
	protected void getLastAssessmentComponent()
	{
		AssessmentAccommodation tmpAssessAccom = (AssessmentAccommodation)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(),form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.ACCOMMODATION);
		if (tmpAssessAccom == null)
		{
			this.form.chkCopyPrev().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessmentAccomodation(tmpAssessAccom);
		form.chkCopyPrev().setEnabled(true);
	}

	protected void onBSaveClick() 
	{
		AccommodationHousingVo voAccHousing = null;
		AssessmentAccommodation assessAccom;
		if (form.getLocalContext().getassessAccommodation()== null)
		{
			assessAccom = new AssessmentAccommodation();
			assessAccom.setComponentType(AssessmentComponentType.ACCOMMODATION);
		}
		else
		{
			assessAccom = form.getLocalContext().getassessAccommodation();
		}
		
		voAccHousing = assessAccom.getAccommodationHousing();
		
		if(voAccHousing == null)
			voAccHousing = new AccommodationHousingVo();
		voAccHousing.setAccommodationNotes(form.txtAccommodation().getValue());
		voAccHousing.setAccommodation(form.cmbAccommodation().getValue());
		voAccHousing.setAssistanceToOthersNotes(form.txtAssistance().getValue());
		voAccHousing.setAssisstanceToOthers(form.ansAssistance().getValue());
		voAccHousing.setCurrentLivingArrangementsNotes(form.txtLivingArrng().getValue());
		voAccHousing.setCurrentLivingArrangements(form.cmbLivingArrng().getValue());
		assessAccom.setAccommodationHousing(voAccHousing);
		
		assessAccom.setIsComplete(new Boolean(this.form.chkComplete().getValue()));
		assessAccom.setCopy(new Boolean(this.form.chkCopyPrev().getValue()));
		
		// Fill in the home facilities values from the grid
		AccommodationHomeFacilitiesCollection homeFacilitiesColl = new AccommodationHomeFacilitiesCollection();
		GenForm.gHomeFacilitiesRow row;	
		for (int i=0; i<form.gHomeFacilities().getRows().size(); i++)
		{
			row = form.gHomeFacilities().getRows().get(i);
			ims.coe.vo.AccommodationHomeFacilities home = row.getValue();
			if (home == null)
				home = new AccommodationHomeFacilities();
			
			home.setHomeFacilities(row.getcolService());
			home.setDetails(row.getcolDetails());
			home.setStatus(row.getcolStatus());
			if((row.getcolDetails() != null && !row.getcolDetails().equals("")) || row.getcolStatus() != null)
				homeFacilitiesColl.add(home);
		}
		assessAccom.setHomeFacilities(homeFacilitiesColl);
		
		try
		{
			String[] messages = assessAccom.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			AssessmentHeaderInfo assmnt = form.getLocalContext().getassmnt();
			
			if (assmnt.getCareContext() == null)
				assmnt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (assmnt.getClinicalContact() == null)
				assmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
				
			
			
			AssessmentHeaderInfo newAssmnt = domain.saveComponent(assmnt, assessAccom);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			onFormOpen();
			return;						
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Accomodation Assessment record already exists. " + e.getMessage());
			onFormOpen();
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			onFormOpen();
			return;	
		}
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		
	}
	protected void onBCancelClick()
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
}
