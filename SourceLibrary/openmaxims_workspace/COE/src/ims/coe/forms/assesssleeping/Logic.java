//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John Pearson using IMS Development Environment (version 1.18 build 40608.1230)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assesssleeping;

import ims.coe.vo.AssessmentSleeping;
import ims.coe.vo.SleepingAidsVo;
import ims.coe.vo.SleepingMedication;
import ims.coe.vo.SleepingMedicationCollection;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;

public class Logic extends BaseLogic
{
	
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		AssessmentHeaderInfo voAssessHeader = null;
		AssessmentSleeping voAssessSleep = null;
		
		form.bSave().setEnabled(true);
		form.gCarePlans().setReadOnly(false);
		form.bAdd().setEnabled(false);
		form.bUpdateMed().setEnabled(false);
		form.chkCopyPrev().setEnabled(false);
		
		//If there is an assessment in the global context, we want to call the get component domain method
		// Otherwise, it is a new assessment component
		boolean bViewMode = false; 
		if ((voAssessHeader = form.getGlobalContext().Nursing.getAssessmentHeaderInfo()) != null )
		{
			form.getLocalContext().setassessHeader(voAssessHeader);
			if (voAssessHeader.getID_AssessmentIsNotNull())
			{					
				//assessSleep = (AssessmentSleeping )domain.getComponent(assessHeader.getCurrentComponent(), AssessmentComponentType.SLEEPING);
				voAssessSleep = (AssessmentSleeping )domain.getComponent(voAssessHeader, AssessmentComponentType.SLEEPING);
				if (voAssessSleep  != null)
				{
					populateInstanceControl(voAssessSleep);
					form.getLocalContext().setassessSleeping(voAssessSleep);
					bViewMode = true;
				}
			} 
			else
			{
				// check if there is a relevant component
				getLastAssessmentComponent();			
			}
		}
		else
		{
			// check if there is a relevant component
			getLastAssessmentComponent();	
		}
		
		if(!bViewMode)
			form.setMode(FormMode.EDIT);
		
	}

	private void initialize() 
	{
		loadCarePlanGrd();
	}

	private void loadCarePlanGrd() 
	{
		// Populate the Grid CarePlan Templates
		CarePlanTemplateTitleCollection voTempColl = domain.listCarePlanTemplates(AssessmentComponentType.SLEEPING);
		if (voTempColl != null)
		{
			form.gCarePlans().getRows().clear();
			GenForm.gCarePlansRow tempRow;
			for (int i=0; i<voTempColl.size(); i++)
			{
				CarePlanTemplateTitle voTemplate = voTempColl.get(i);
				tempRow = form.gCarePlans().getRows().newRow();
				tempRow.setValue(voTemplate);
				tempRow.setcolCarePlans(voTemplate.getTitle());
			}
		}
	}

	protected boolean bValidate()
	{
		AssessmentSleeping voAssessSleep = form.getLocalContext().getassessSleeping();
		if (voAssessSleep.getTimePatientGoToBed() == null)
			engine.showMessage("Please enter time patient goes to bed...");
		else if(voAssessSleep.getTimePatientGetUp() == null)
			engine.showMessage("Please enter time patient gets up...");
		else
			return true;
		return false;
	}
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);	
	}
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{	
		AssessmentSleeping voAssessSleep = populateInstanceData();
		
		if (!bValidate())
			return;
		
		try
		{
			String[] messages = voAssessSleep.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			AssessmentHeaderInfo voNewAssmnt = form.getLocalContext().getassessHeader();
			
			if (voNewAssmnt.getCareContext() == null)
				voNewAssmnt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (voNewAssmnt.getClinicalContact() == null)
				voNewAssmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
		  voNewAssmnt = domain.saveComponent(voNewAssmnt, voAssessSleep);
		  form.getGlobalContext().Nursing.setAssessmentHeaderInfo(voNewAssmnt);
		
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
    		form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			open();
			return;				
		} catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Sleeping Assessment record already exists. " + e.getMessage());
			open();
			return;
		}
		catch (DomainInterfaceException e) {
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			open();
			return;	
		}
						
		// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.gCarePlans().getReadOnly() == false)
		{
			CarePlanTemplateTitleCollection votemplList = new CarePlanTemplateTitleCollection();
			GenForm.gCarePlansRow cpRow;
			for (int i=0; i<form.gCarePlans().getRows().size(); i++)
			{
				cpRow = form.gCarePlans().getRows().get(i);
				if (cpRow.getcolSelected() && !cpRow.isReadOnly())
					votemplList.add(cpRow.getValue());
			}
			if (votemplList.size() > 0)
			{
				form.getGlobalContext().COE.CarePlan.setTemplateList(votemplList);
				engine.open(form.getForms().Nursing.CarePlanStep2);
			}
			else
				engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
			engine.open(form.getForms().Nursing.AdmissionAssessOverview);	
	}
	private AssessmentSleeping populateInstanceData() 
	{
		AssessmentSleeping voAssessSleep = form.getLocalContext().getassessSleeping();
		SleepingAidsVo voSleepingAids = null;
		if (voAssessSleep != null)
			voSleepingAids = voAssessSleep.getSleepingAids();
		else
		{
			voAssessSleep = new AssessmentSleeping();
			voAssessSleep.setComponentType(AssessmentComponentType.SLEEPING);
		}

		voAssessSleep.setHowManyBlankets(form.txtBlankets().getValue());
		voAssessSleep.setHowManyPillows(form.txtPillows().getValue( ));
		voAssessSleep.setPatternOfSleep(form.txtPattern().getValue());	
		voAssessSleep.setIsComplete(new Boolean(this.form.chkComplete().getValue()));
		voAssessSleep.setCopy(new Boolean(this.form.chkCopyPrev().getValue()));
		voAssessSleep.setTimePatientGoToBed(form.tmToBed().getValue());
		voAssessSleep.setTimePatientGetUp(form.tmGetUp().getValue());
		voAssessSleep.setPatientHaveDifficultyInSleeping(form.ansDiffSleep().getValue());
		
		//Sleeping Aids
		if(voSleepingAids == null)
			voSleepingAids = new SleepingAidsVo();
		voSleepingAids.setOtherMethods(form.txtMedDetail().getValue());
		voSleepingAids.setPatientTakeMedicationToSleep(form.ansMed().getValue());
		
//		If there were records and they were made inactive and then the Sleep medication answer box is set to no we
//		still need to be saving these inactive records in the DB
//		if ( (form.ansMed().getValue() != null) && (form.ansMed().getValue().equals(YesNoUnknown.YES)) )
//		{		
			// save sleeping meds
		    SleepingMedicationCollection voSleepMedColl = new SleepingMedicationCollection();
			GenForm.gMedRowCollection rowColl =form.gMed().getRows();
		
			for (int i = 0; i < rowColl.size(); i++)
				voSleepMedColl.add(rowColl.get(i).getValue());
			
			SleepingMedicationCollection volstInActiveList = form.getLocalContext().getInActiveMedicationsList();
			if (volstInActiveList != null)
			{
				for (int j = 0;  j < volstInActiveList.size() ; j++)
					voSleepMedColl.add(volstInActiveList.get(j));
			}
			voSleepingAids.setSleepMedication(voSleepMedColl);
//		}
		
		form.getLocalContext().setassessSleeping(voAssessSleep);
		return voAssessSleep;
	}

	protected void onLink1Click() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getassessSleeping() != null && form.getLocalContext().getassessSleeping().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getassessSleeping().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
		 
	}
	protected void onBSleepClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCurIndex(null);
		form.getGlobalContext().COE.setSleepMedication(null);
		engine.open(form.getForms().COE.AssessSleepingMedication);
	}
	
	protected void onMedSelChanged()
	{
		form.getLocalContext().setCurIndex(new Integer(form.gMed().getSelectedRowIndex()));
		form.getGlobalContext().COE.setSleepMedication(form.gMed().getValue());
		
		if(form.chkComplete().getValue() == false)
			form.bUpdateMed().setEnabled(true);
	}

	protected void onChkPrevValueChanged() throws PresentationLogicException 
	{
		if (this.form.chkCopyPrev().getValue() == true )
		{
			if (form.getLocalContext().getPrevAssessSleeping() == null)
				return;
					
			form.getLocalContext().getPrevAssessSleeping().setIsComplete(new Boolean(false));
			form.getLocalContext().getPrevAssessSleeping().setCarePlanTemplate(null);
		
			populateInstanceControl(form.getLocalContext().getPrevAssessSleeping() );
		}
		
		form.chkCopyPrev().setValue(true);
		form.chkCopyPrev().setEnabled(false);
	}
	
	protected void getLastAssessmentComponent()
	{		
		AssessmentSleeping votmpAssessSleep = (AssessmentSleeping)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext(),AssessmentComponentType.SLEEPING);
		if (votmpAssessSleep == null)
		{
			this.form.chkCopyPrev().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessSleeping(votmpAssessSleep);
		form.chkCopyPrev().setEnabled(true);
	}
	
	protected void onBSleepUpdate() throws PresentationLogicException 
	{
		engine.open(form.getForms().COE.AssessSleepingMedication);
	}

	private void populateInstanceControl(AssessmentSleeping voAssessSleep)
	{
		form.txtBlankets().setValue( voAssessSleep.getHowManyBlankets());
		form.txtPillows().setValue( voAssessSleep.getHowManyPillows());
		form.txtPattern().setValue(voAssessSleep.getPatternOfSleep());							
		form.tmToBed().setValue(voAssessSleep.getTimePatientGoToBed());
		form.tmGetUp().setValue(voAssessSleep.getTimePatientGetUp());
		form.gMed().getRows().clear();
		form.ansDiffSleep().setValue(voAssessSleep.getPatientHaveDifficultyInSleeping());
		form.chkComplete().setValue(voAssessSleep.getIsComplete().booleanValue());
		if (voAssessSleep.getIsComplete().booleanValue() == true) // Complete
		{
			form.chkComplete().setEnabled(false);
			form.bSave().setEnabled(false);
			form.chkCopyPrev().setEnabled(false);
			form.setMode(FormMode.VIEW);
			form.gCarePlans().setReadOnly(true);
		}
		else
			form.setMode(FormMode.EDIT);
		
		if(voAssessSleep.getSleepingAidsIsNotNull())
		{
			SleepingAidsVo voSleepAids = voAssessSleep.getSleepingAids();
			form.txtMedDetail().setValue(voSleepAids.getOtherMethods());
		
			if (voSleepAids.getPatientTakeMedicationToSleep() != null)
			{
				form.ansMed().setValue(voSleepAids.getPatientTakeMedicationToSleep());
				if(voSleepAids.getPatientTakeMedicationToSleep().equals(YesNoUnknown.YES))
					form.bAdd().setEnabled(true && form.getMode().equals(FormMode.EDIT));
			}
			
			form.gMed().getRows().clear();
			for (int i = 0;  voSleepAids.getSleepMedication() != null && i < voSleepAids.getSleepMedication().size() ; i++)
			{
				SleepingMedication med = voSleepAids.getSleepMedication().get(i);

				if (med.getIsCurrentlyActive().booleanValue())
				{
					GenForm.gMedRow row = form.gMed().getRows().newRow();
					if (med.getSleepMedication() != null)
						row.setColSleepMed(med.getSleepMedication().getText());
					else
						row.setColSleepMed(med.getOther());
				
					row.setColRoute(med.getRoute());
					row.setColDose(med.getDose());
					row.setColFrequency(med.getFrequency());
					row.setColEffectiveFor(med.getEffectiveFor());
					row.setColTakenwith(med.getTakenWhen());
					row.setValue(med);
				}
				else
				{
					SleepingMedicationCollection lstInActiveList = form.getLocalContext().getInActiveMedicationsList();
					if (lstInActiveList == null)
						lstInActiveList = new ims.coe.vo.SleepingMedicationCollection();
					lstInActiveList.add(med);
					form.getLocalContext().setInActiveMedicationsList(lstInActiveList);
				}
			}
		}
		if (voAssessSleep.getCopy().booleanValue() == true)
		{
			form.chkCopyPrev().setValue(true);
			form.chkCopyPrev().setEnabled(false);
		}

		form.getLocalContext().setInActiveMedicationsList(null);
		
		
		// Populate the correct selected careplan template if one saved with the component
		if (voAssessSleep.getCarePlanTemplate() != null && voAssessSleep.getCarePlanTemplate().size() > 0)
		{
			GenForm.gCarePlansRow cpRow;
			CarePlanTemplateCollection templateColl = voAssessSleep.getCarePlanTemplate();
			CarePlanTemplate template;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.gCarePlans().getRows().size(); j++)
			{
				cpRow = form.gCarePlans().getRows().get(j);
				for (i=0; i<templateColl.size(); i++)
				{
					template = templateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}

	}
	
	protected void onDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().COE.AssessSleepingMedication) && result == ims.framework.enumerations.DialogResult.OK)
		{
			// Get the medication from the global context
			SleepingMedication med = form.getGlobalContext().COE.getSleepMedication();
			GenForm.gMedRow row=null;

			if ( !med.getIsCurrentlyActive().booleanValue())//Has been made Inactive
			{
				SleepingMedicationCollection lstInActiveList = form.getLocalContext().getInActiveMedicationsList();
				if (lstInActiveList == null)
					lstInActiveList = new ims.coe.vo.SleepingMedicationCollection();
				lstInActiveList.add(med);
				form.getLocalContext().setInActiveMedicationsList(lstInActiveList);
				if (form.getLocalContext().getCurIndex() !=null)
					form.gMed().getRows().remove(form.getLocalContext().getCurIndex().intValue());
			}
			else
			{
				if (form.getLocalContext().getCurIndex() == null)
				{
					row = form.gMed().getRows().newRow();
					row.setValue(med);
				//	form.getLocalContext().setCurIndex(new Integer(form.gMed().getRows().size()));
				}
				else
				{
					row = form.gMed().getRows().get(form.getLocalContext().getCurIndex().intValue());
					row.setValue(med);
				}
				row.setColDose(med.getDose());
				row.setColFrequency(med.getFrequency());
				if (med.getSleepMedication() != null)
					row.setColSleepMed(med.getSleepMedication().getText());
				else
					row.setColSleepMed(med.getOther());
				row.setColRoute(med.getRoute());
				row.setColEffectiveFor(med.getEffectiveFor());
				row.setColTakenwith(med.getTakenWhen());
				
			}
		}
		
		form.bUpdateMed().setEnabled(false);
	}

	protected void onAnsMedValueChanged() throws PresentationLogicException 
	{
		if(form.ansMed().getValue() != null && form.ansMed().getValue().equals(YesNoUnknown.YES))
		{
			form.bAdd().setEnabled(true);
		}
		else
		{
			if(form.gMed().getRows().size() > 0)
			{
				engine.showMessage("Please remove all medications from grid.");
				form.ansMed().setValue(YesNoUnknown.YES);
				form.bAdd().setEnabled(true);
				return;
			}
			form.bAdd().setEnabled(false);
		}
	}
}
