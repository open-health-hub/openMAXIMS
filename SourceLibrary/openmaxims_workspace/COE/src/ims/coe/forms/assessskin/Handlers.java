//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.forms.assessskin;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcomboBoxCushionLookup();
	abstract protected void defaultcomboBoxCushionLookupValue();
	abstract protected void bindcomboBoxChairLookup();
	abstract protected void defaultcomboBoxChairLookupValue();
	abstract protected void bindcomboBoxByLookup();
	abstract protected void defaultcomboBoxByLookupValue();
	abstract protected void bindcomboBoxFreqLookup();
	abstract protected void defaultcomboBoxFreqLookupValue();
	abstract protected void bindcomboBoxMatressLookup();
	abstract protected void defaultcomboBoxMatressLookupValue();
	abstract protected void bindcomboBoxBedLookup();
	abstract protected void defaultcomboBoxBedLookupValue();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLinkSAClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLinkBSClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncomboBoxCushionValueSet(Object value);
	abstract protected void oncomboBoxChairValueSet(Object value);
	abstract protected void oncomboBoxByValueSet(Object value);
	abstract protected void oncomboBoxFreqValueSet(Object value);
	abstract protected void oncomboBoxMatressValueSet(Object value);
	abstract protected void oncomboBoxBedValueSet(Object value);
	abstract protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.linkSA().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLinkSAClick();
			}
		});
		this.form.linkBS().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLinkBSClick();
			}
		});
		this.form.bCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBCancelClick();
			}
		});
		this.form.bSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBSaveClick();
			}
		});
		this.form.comboBoxCushion().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncomboBoxCushionValueSet(value);
			}
		});
		this.form.comboBoxChair().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncomboBoxChairValueSet(value);
			}
		});
		this.form.comboBoxBy().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncomboBoxByValueSet(value);
			}
		});
		this.form.comboBoxFreq().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncomboBoxFreqValueSet(value);
			}
		});
		this.form.comboBoxMatress().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncomboBoxMatressValueSet(value);
			}
		});
		this.form.comboBoxBed().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncomboBoxBedValueSet(value);
			}
		});
		this.form.checkBoxCopy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCopyPrevAssessmentValueChanged();
			}
		});
		this.form.linkInfo().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onInfoLinkClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindcomboBoxCushionLookup();
		bindcomboBoxChairLookup();
		bindcomboBoxByLookup();
		bindcomboBoxFreqLookup();
		bindcomboBoxMatressLookup();
		bindcomboBoxBedLookup();
	}
	protected void rebindAllLookups()
	{
		bindcomboBoxCushionLookup();
		bindcomboBoxChairLookup();
		bindcomboBoxByLookup();
		bindcomboBoxFreqLookup();
		bindcomboBoxMatressLookup();
		bindcomboBoxBedLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcomboBoxCushionLookupValue();
		defaultcomboBoxChairLookupValue();
		defaultcomboBoxByLookupValue();
		defaultcomboBoxFreqLookupValue();
		defaultcomboBoxMatressLookupValue();
		defaultcomboBoxBedLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
