//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40615.1430)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assessskin;

import ims.coe.vo.AssessmentSkin;
import ims.coe.vo.RiskAssessmentCollection;
import ims.coe.vo.lookups.LookupHelper;
import ims.coe.vo.lookups.SkinCondition;
import ims.coe.vo.lookups.SkinConditionCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.nursing.vo.AssessmentComponent;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.setMode(FormMode.EDIT);
		form.bSave().setEnabled(true);

		form.linkBS().setTooltip("Very low risk:>18<br>At risk:15-18<br>Moderate risk:13-14<br>High risk:10-12<br>Very high risk:<9  ");

		form.gridCarePlan().setReadOnly(false);
		
		
		form.decBradenScore().setValue(null);
	
		if(form.getGlobalContext().COE.getAssessmentScoreIsNotNull())
			form.decBradenScore().setValue(form.getGlobalContext().COE.getAssessmentScore());
		
				
		form.checkBoxCopy().setEnabled(false);
		

		// Populate gridSkin with lookup values
		SkinConditionCollection skinColl = LookupHelper.getSkinCondition(domain.getLookupService());
		form.gridSkin().getRows().clear();
		GenForm.gridSkinRow row;
		for (int i = 0; i < skinColl.size(); i++)
		{
			SkinCondition skin = skinColl.get(i);
			row = form.gridSkin().getRows().newRow();
			row.setValue(skin);
			row.setcolCondition(skin.getText());
		}

		// Populate the Grid CarePlan Templates
		CarePlanTemplateTitleCollection tempColl = domain.listCarePlanTemplates(AssessmentComponentType.SKIN);
		if (tempColl != null)
		{
			form.gridCarePlan().getRows().clear();
			GenForm.gridCarePlanRow tempRow;
			for (int i = 0; i < tempColl.size(); i++)
			{
				CarePlanTemplateTitle template = tempColl.get(i);
				tempRow = form.gridCarePlan().getRows().newRow();
				tempRow.setValue(template);
				tempRow.setcolCarePlans(template.getTitle());
			}
		}

		// If there is an assessment in the global context, we want to call the get component
		// domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssmnt(assmnt);
		form.linkBS().setEnabled(false);
		form.checkBoxComplete().setEnabled((assmnt != null ? true : false) && form.linkBS().isEnabled());
		if (assmnt != null && assmnt.getID_AssessmentIsNotNull())
		{
			// AssessmentSkin assessSkin = (AssessmentSkin)domain.getComponent(assmnt.getCurrentComponent(), AssessmentComponentType.SKIN);
			AssessmentSkin assessSkin = (AssessmentSkin) domain.getComponent(assmnt, AssessmentComponentType.SKIN);
			if (assessSkin == null)
				return;

			if (assessSkin != null)
				form.getLocalContext().setAssessSkin(assessSkin);
			populateFormInfo(assessSkin);

			// Cannot complete BS until the Skin assessment is done
			if (assessSkin.getSkinAssessment() != null)
				form.linkBS().setEnabled(true);

			// Cannot complete the assessment until the patient movement record exists
			if ((assessSkin.getSkinAssessment() != null) && (assessSkin.getBradenScale() != null))
				form.checkBoxComplete().setEnabled(true);

			// If the Section has been completed previously then set the check box accordingly
			if (assessSkin.getIsComplete().booleanValue())
				form.checkBoxComplete().setEnabled(false);
		}
		else
		{
			// Probably a Cancel was hit on the linked Form and no AssessmentHeaderInfo is saved so
			// refresh the screen with any data that was entered befor using the link.
			if (form.getGlobalContext().Nursing.getAssessmentComponent() != null)
			{
				AssessmentSkin assessSkin = (AssessmentSkin) form.getGlobalContext().Nursing.getAssessmentComponent();
				populateFormInfo(assessSkin);
				// Cannot complete BS until the Skin assessment is done
				if (assessSkin.getSkinAssessment() != null)
					form.linkBS().setEnabled(true);

				// Cannot complete the assessment until the patient movement record exists
				if ((assessSkin.getSkinAssessment() != null) && (assessSkin.getBradenScale() != null))
					form.checkBoxComplete().setEnabled(true);
			}

			// check if there is a relevant component
			getLastAssessmentComponent();

			form.setMode(FormMode.EDIT);
		}
	}

	private void populateFormInfo(AssessmentSkin assessSkin)
	{
		if (assessSkin == null)
			return;

		form.checkBoxComplete().setValue(assessSkin.getIsComplete().booleanValue());
		if (assessSkin.getIsComplete().booleanValue() == true) // Complete
		{
			form.bSave().setEnabled(false);
			form.setMode(FormMode.VIEW);
			form.checkBoxComplete().setEnabled(false);
			form.checkBoxCopy().setEnabled(false);
			form.gridCarePlan().setReadOnly(true);
		}

		form.checkBoxCopy().setValue(assessSkin.getCopy().booleanValue());
		if (assessSkin.getCopy().booleanValue() == true)
			form.checkBoxCopy().setEnabled(false);

		form.comboBoxBed().setValue(assessSkin.getBedType());
		form.comboBoxBy().setValue(assessSkin.getTurnsPerformedBy());
		form.comboBoxChair().setValue(assessSkin.getChairType());
		form.comboBoxCushion().setValue(assessSkin.getCushionType());
		form.comboBoxFreq().setValue(assessSkin.getFrequencyOfTurns());
		form.comboBoxMatress().setValue(assessSkin.getMattressType());

		if (assessSkin.getBradenScaleScore() != null)
			form.decBradenScore().setValue(new Float(assessSkin.getBradenScaleScore().floatValue()));

		// Populate the grid with skin condition details
		GenForm.gridSkinRow row;
		if (assessSkin.getSkinCondition() != null)
		{
			SkinConditionCollection coll = assessSkin.getSkinCondition();
			for (int i = 0; i < coll.size(); i++)
			{
				SkinCondition skin = coll.get(i);
				row = form.gridSkin().getRowByValue(skin);
				if (row != null)
					row.setColSelection(true);
				else
				{
					row = form.gridSkin().getRows().newRow();
					row.setValue(skin);
					row.setcolCondition(skin.getText());
					row.setColSelection(true);
				}
			}
		}

		// Populate the correct selected careplan template if one saved with the component
		if (assessSkin.getCarePlanTemplate() != null && assessSkin.getCarePlanTemplate().size() > 0)
		{
			GenForm.gridCarePlanRow cpRow;
			CarePlanTemplateCollection templateColl = assessSkin.getCarePlanTemplate();
			CarePlanTemplate template;
			int i = 0;
			// Find the correct row to set to selected
			for (int j = 0; j < form.gridCarePlan().getRows().size(); j++)
			{
				cpRow = form.gridCarePlan().getRows().get(j);
				for (i = 0; i < templateColl.size(); i++)
				{
					template = templateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}

	}

	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}

	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AssessmentSkin assessSkin = loadDataFromScreen();
		if (assessSkin == null)
		{
			assessSkin = new AssessmentSkin();
			assessSkin.setComponentType(AssessmentComponentType.SKIN);
		}

		try
		{
			String[] messages = assessSkin.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			AssessmentHeaderInfo newAssmnt = form.getLocalContext().getAssmnt();

			if (newAssmnt.getCareContext() == null)
				newAssmnt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

			if (newAssmnt.getClinicalContact() == null)
				newAssmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

			newAssmnt = domain.saveComponent(newAssmnt, assessSkin);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			onFormOpen();
			return;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("A Skin Assessment record already exists. " + e.getMessage());
			onFormOpen();
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			onFormOpen();
			return;
		}

		// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.gridCarePlan().getReadOnly() == false)
		{
			CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
			GenForm.gridCarePlanRow cpRow;
			for (int i = 0; i < form.gridCarePlan().getRows().size(); i++)
			{
				cpRow = form.gridCarePlan().getRows().get(i);
				if (cpRow.getcolSelected() && !cpRow.isReadOnly())
					templList.add(cpRow.getValue());
			}
			if (templList.size() > 0)
			{
				form.getGlobalContext().Nursing.setAssessmentComponent(assessSkin);

				form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
				engine.open(form.getForms().Nursing.CarePlanStep2);
			}
			else
				engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
			engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}

	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPrevAssessSkin() == null)
			return;

		form.getLocalContext().getPrevAssessSkin().setIsComplete(new Boolean(false));
		form.getLocalContext().getPrevAssessSkin().setCarePlanTemplate(null);
		form.getLocalContext().getPrevAssessSkin().setBradenScale(null);
		form.getLocalContext().getPrevAssessSkin().setBradenScaleScore(null);

		populateFormInfo(form.getLocalContext().getPrevAssessSkin());
		form.checkBoxCopy().setValue(true);
		form.checkBoxCopy().setEnabled(false);
	}

	protected void getLastAssessmentComponent()
	{
		AssessmentSkin tmpAssessSkin = (AssessmentSkin) domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.SKIN);
		if (tmpAssessSkin == null)
		{
			this.form.checkBoxCopy().setValue(false);
			return;
		}

		form.getLocalContext().setPrevAssessSkin(tmpAssessSkin);
		form.checkBoxCopy().setEnabled(true);
	}

	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAssessSkin() != null && form.getLocalContext().getAssessSkin().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessSkin().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}

	protected void onLinkSAClick() throws PresentationLogicException
	{
		AssessmentSkin assessSkin = loadDataFromScreen();
		if (assessSkin == null)
			return;

		form.getGlobalContext().Nursing.setAssessmentComponent(assessSkin);
		if(form.decBradenScore().getValue()!= null)
		form.getGlobalContext().COE.setAssessmentScore(form.decBradenScore().getValue());
		engine.open(form.getForms().Nursing.SkinBodyChart);
	}

	protected void onLinkBSClick() throws PresentationLogicException
	{
		AssessmentSkin assessSkin = loadDataFromScreen();
		if (assessSkin == null)
			return;

		RiskAssessmentCollection risks = form.getGlobalContext().COE.getBradenAssessments();
		form.getGlobalContext().Nursing.setAssessmentHeaderInfo(form.getLocalContext().getAssmnt());
		if (risks == null)
		{
			try
			{
				risks = ims.nursing.helper.RiskAssessmentHelper.getBSRisks();
			}
			catch (PresentationLogicException e)
			{
				throw new PresentationLogicException("DocumentException occurred loading BS Risks " + e.getMessage(), e);
			}
			form.getGlobalContext().COE.setBradenAssessments(risks);
		}

		form.getGlobalContext().Nursing.setAssessmentComponent(assessSkin);

		// Set MNA in context
		if (assessSkin.getBradenScale() != null)
			form.getGlobalContext().COE.setBradenScaleRecord(assessSkin.getBradenScale());

		form.getGlobalContext().COE.setDisplayScore(Boolean.TRUE);
		engine.open(form.getForms().Nursing.BradenScaleDialog);
	}

	protected AssessmentSkin loadDataFromScreen()
	{
		AssessmentSkin skinAssessment = null;
		AssessmentComponent assessment = form.getGlobalContext().Nursing.getAssessmentComponent();
		
		if(assessment instanceof AssessmentSkin)
		{
			skinAssessment = (AssessmentSkin) form.getGlobalContext().Nursing.getAssessmentComponent();
			
		}
		AssessmentSkin assessSkin = form.getLocalContext().getAssessSkin();
		if (assessSkin == null)
			assessSkin = new AssessmentSkin();

		assessSkin.setIsComplete(new Boolean(this.form.checkBoxComplete().getValue()));
		assessSkin.setCopy(new Boolean(this.form.checkBoxCopy().getValue()));
		assessSkin.setBedType(form.comboBoxBed().getValue());
		assessSkin.setChairType(form.comboBoxChair().getValue());
		assessSkin.setCushionType(form.comboBoxCushion().getValue());
		assessSkin.setFrequencyOfTurns(form.comboBoxFreq().getValue());
		assessSkin.setMattressType(form.comboBoxMatress().getValue());
		assessSkin.setTurnsPerformedBy(form.comboBoxBy().getValue());
		
		if(skinAssessment != null)
		assessSkin.setBradenScale(skinAssessment.getBradenScale());
		
		// Braden score
		if (form.getGlobalContext().COE.getAssessmentScoreIsNotNull())
		{
			assessSkin.setBradenScaleScore(new Integer(form.getGlobalContext().COE.getAssessmentScore().intValue()));
		}
		
			
		// Save the skin conditions from the grid
		SkinConditionCollection coll = new SkinConditionCollection();
		GenForm.gridSkinRow row;
		for (int i = 0; i < form.gridSkin().getRows().size(); i++)
		{
			row = form.gridSkin().getRows().get(i);
			if (row.getColSelection())
			{
				SkinCondition skin = row.getValue();
				coll.add(skin);
			}
		}
		assessSkin.setSkinCondition(coll);

		form.getLocalContext().setAssessSkin(assessSkin);

		return assessSkin;
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		// If there is an assessment in the global context, we want to call the get component
		// domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();

		if (assmnt != null && assmnt.getCurrentComponent() != null)
		{
			AssessmentSkin assessSkin = (AssessmentSkin) domain.getComponent(assmnt.getCurrentComponent());

			if (assmnt != null)
				form.getLocalContext().setAssmnt(assmnt);

			form.checkBoxComplete().setEnabled(false);
			// AssessmentSkin assessSkin = (AssessmentSkin)domain.getComponent(assmnt.getCurrentComponent(), AssessmentComponentType.SKIN);

			if (assessSkin == null)
				return;

			if (assessSkin != null)
				form.getLocalContext().setAssessSkin(assessSkin);
			populateFormInfo(assessSkin);

			// Cannot complete the assessment until the patient movement record exists
			if (assessSkin.getSkinAssessment() != null)
				form.linkBS().setEnabled(true);

			if ((assessSkin.getSkinAssessment() != null) && (assessSkin.getBradenScale() != null))
				form.checkBoxComplete().setEnabled(true);

			if (assessSkin.getIsComplete() == true && form.checkBoxComplete().getValue() == true)
			{
				form.checkBoxComplete().setEnabled(false);
			}

		}

		if (formName.equals(form.getForms().Nursing.BradenScaleDialog))
		{
			if (form.getGlobalContext().COE.getAssessmentScore() != null)
			{
				form.decBradenScore().setValue(form.getGlobalContext().COE.getAssessmentScore());
				form.checkBoxComplete().setEnabled(true);
				// form.linkBS().setEnabled(false);//RF 08/09/2005 At Sineads Request
			}

		}

	}

}
