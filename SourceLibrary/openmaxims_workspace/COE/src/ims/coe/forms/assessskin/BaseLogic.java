//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.forms.assessskin;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.coe.domain.AssessSkin.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.coe.domain.AssessSkin domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncomboBoxCushionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.comboBoxCushion().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.CushionType existingInstance = (ims.nursing.vo.lookups.CushionType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcomboBoxCushionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.CushionType)
		{
			ims.nursing.vo.lookups.CushionType instance = (ims.nursing.vo.lookups.CushionType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcomboBoxCushionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.CushionType existingInstance = (ims.nursing.vo.lookups.CushionType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.comboBoxCushion().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcomboBoxCushionLookup()
	{
		this.form.comboBoxCushion().clear();
		ims.nursing.vo.lookups.CushionTypeCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getCushionType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.comboBoxCushion().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcomboBoxCushionLookupValue(int id)
	{
		ims.nursing.vo.lookups.CushionType instance = ims.nursing.vo.lookups.LookupHelper.getCushionTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.comboBoxCushion().setValue(instance);
	}
	protected final void defaultcomboBoxCushionLookupValue()
	{
		this.form.comboBoxCushion().setValue((ims.nursing.vo.lookups.CushionType)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.CushionType.class, engine.getFormName().getID(), ims.nursing.vo.lookups.CushionType.TYPE_ID));
	}
	protected final void oncomboBoxChairValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.comboBoxChair().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.ChairType existingInstance = (ims.nursing.vo.lookups.ChairType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcomboBoxChairLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.ChairType)
		{
			ims.nursing.vo.lookups.ChairType instance = (ims.nursing.vo.lookups.ChairType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcomboBoxChairLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.ChairType existingInstance = (ims.nursing.vo.lookups.ChairType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.comboBoxChair().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcomboBoxChairLookup()
	{
		this.form.comboBoxChair().clear();
		ims.nursing.vo.lookups.ChairTypeCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getChairType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.comboBoxChair().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcomboBoxChairLookupValue(int id)
	{
		ims.nursing.vo.lookups.ChairType instance = ims.nursing.vo.lookups.LookupHelper.getChairTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.comboBoxChair().setValue(instance);
	}
	protected final void defaultcomboBoxChairLookupValue()
	{
		this.form.comboBoxChair().setValue((ims.nursing.vo.lookups.ChairType)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.ChairType.class, engine.getFormName().getID(), ims.nursing.vo.lookups.ChairType.TYPE_ID));
	}
	protected final void oncomboBoxByValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.comboBoxBy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.TurnsPerformedBy existingInstance = (ims.nursing.vo.lookups.TurnsPerformedBy)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcomboBoxByLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.TurnsPerformedBy)
		{
			ims.nursing.vo.lookups.TurnsPerformedBy instance = (ims.nursing.vo.lookups.TurnsPerformedBy)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcomboBoxByLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.TurnsPerformedBy existingInstance = (ims.nursing.vo.lookups.TurnsPerformedBy)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.comboBoxBy().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcomboBoxByLookup()
	{
		this.form.comboBoxBy().clear();
		ims.nursing.vo.lookups.TurnsPerformedByCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getTurnsPerformedBy(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.comboBoxBy().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcomboBoxByLookupValue(int id)
	{
		ims.nursing.vo.lookups.TurnsPerformedBy instance = ims.nursing.vo.lookups.LookupHelper.getTurnsPerformedByInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.comboBoxBy().setValue(instance);
	}
	protected final void defaultcomboBoxByLookupValue()
	{
		this.form.comboBoxBy().setValue((ims.nursing.vo.lookups.TurnsPerformedBy)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.TurnsPerformedBy.class, engine.getFormName().getID(), ims.nursing.vo.lookups.TurnsPerformedBy.TYPE_ID));
	}
	protected final void oncomboBoxFreqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.comboBoxFreq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.FrequencyOfTurns existingInstance = (ims.nursing.vo.lookups.FrequencyOfTurns)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcomboBoxFreqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.FrequencyOfTurns)
		{
			ims.nursing.vo.lookups.FrequencyOfTurns instance = (ims.nursing.vo.lookups.FrequencyOfTurns)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcomboBoxFreqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.FrequencyOfTurns existingInstance = (ims.nursing.vo.lookups.FrequencyOfTurns)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.comboBoxFreq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcomboBoxFreqLookup()
	{
		this.form.comboBoxFreq().clear();
		ims.nursing.vo.lookups.FrequencyOfTurnsCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getFrequencyOfTurns(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.comboBoxFreq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcomboBoxFreqLookupValue(int id)
	{
		ims.nursing.vo.lookups.FrequencyOfTurns instance = ims.nursing.vo.lookups.LookupHelper.getFrequencyOfTurnsInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.comboBoxFreq().setValue(instance);
	}
	protected final void defaultcomboBoxFreqLookupValue()
	{
		this.form.comboBoxFreq().setValue((ims.nursing.vo.lookups.FrequencyOfTurns)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.FrequencyOfTurns.class, engine.getFormName().getID(), ims.nursing.vo.lookups.FrequencyOfTurns.TYPE_ID));
	}
	protected final void oncomboBoxMatressValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.comboBoxMatress().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.MattressType existingInstance = (ims.nursing.vo.lookups.MattressType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcomboBoxMatressLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.MattressType)
		{
			ims.nursing.vo.lookups.MattressType instance = (ims.nursing.vo.lookups.MattressType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcomboBoxMatressLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.MattressType existingInstance = (ims.nursing.vo.lookups.MattressType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.comboBoxMatress().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcomboBoxMatressLookup()
	{
		this.form.comboBoxMatress().clear();
		ims.nursing.vo.lookups.MattressTypeCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getMattressType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.comboBoxMatress().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcomboBoxMatressLookupValue(int id)
	{
		ims.nursing.vo.lookups.MattressType instance = ims.nursing.vo.lookups.LookupHelper.getMattressTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.comboBoxMatress().setValue(instance);
	}
	protected final void defaultcomboBoxMatressLookupValue()
	{
		this.form.comboBoxMatress().setValue((ims.nursing.vo.lookups.MattressType)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.MattressType.class, engine.getFormName().getID(), ims.nursing.vo.lookups.MattressType.TYPE_ID));
	}
	protected final void oncomboBoxBedValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.comboBoxBed().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BedType existingInstance = (ims.nursing.vo.lookups.BedType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcomboBoxBedLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.BedType)
		{
			ims.nursing.vo.lookups.BedType instance = (ims.nursing.vo.lookups.BedType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcomboBoxBedLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BedType existingInstance = (ims.nursing.vo.lookups.BedType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.comboBoxBed().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcomboBoxBedLookup()
	{
		this.form.comboBoxBed().clear();
		ims.nursing.vo.lookups.BedTypeCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getBedType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.comboBoxBed().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcomboBoxBedLookupValue(int id)
	{
		ims.nursing.vo.lookups.BedType instance = ims.nursing.vo.lookups.LookupHelper.getBedTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.comboBoxBed().setValue(instance);
	}
	protected final void defaultcomboBoxBedLookupValue()
	{
		this.form.comboBoxBed().setValue((ims.nursing.vo.lookups.BedType)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.BedType.class, engine.getFormName().getID(), ims.nursing.vo.lookups.BedType.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.coe.domain.AssessSkin domain;
}
