//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40610.1450)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assessmobility;


import ims.coe.vo.AssessmentMobility;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.nursing.helper.RiskAssessmentHelper;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;


public class Logic extends BaseLogic 
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		// If there is an assessment in the global context, we want to call the get component
		// domain method
		// Otherwise, it is a new assessment component
		form.setMode(FormMode.EDIT);
		form.bSave().setEnabled(true);
		form.linkFA().setTooltip("Low Risk: 3 - 8 <br>Medium Risk: 9 - 12 <br>High Risk: 13 + ");
		form.gridCarePlan().setReadOnly(false);
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setassmnt(assmnt);
		form.checkBoxCopy().setEnabled(false);
		// Populate the Grid CarePlan Templates
		CarePlanTemplateTitleCollection tempColl = domain.listCarePlanTemplates(AssessmentComponentType.MOBILITY);
		if (tempColl != null)
		{
		 form.gridCarePlan().getRows().clear();
		 GenForm.gridCarePlanRow tempRow;
		 for (int i=0; i<tempColl.size(); i++)
		 {
			 CarePlanTemplateTitle template = tempColl.get(i);
			 tempRow = form.gridCarePlan().getRows().newRow();
			 tempRow.setValue(template);
			 tempRow.setcolCarePlans(template.getTitle());
		 }
		}

		// Cannot complete the mobility component until
		// the patient movement record exists.
		form.checkBoxComplete().setEnabled(false);
		form.linkHandling().setEnabled(true);
		
		if (assmnt != null && assmnt.getID_AssessmentIsNotNull())
		{		
			//AssessmentMobility assessMob = (AssessmentMobility)domain.getComponent(assmnt.getCurrentComponent(), AssessmentComponentType.MOBILITY);
			AssessmentMobility assessMob = (AssessmentMobility)domain.getComponent(assmnt,AssessmentComponentType.MOBILITY);
			if (assessMob == null)
				return;
			
			//if (assessMob != null)
			form.getLocalContext().setassessMobility(assessMob);
			
			populateFormInfo(assessMob);
			
			form.linkFA().setEnabled(false);
			form.linkFallRiskassessment().setEnabled(false);
						
			// Cannot complete the assessment until the patient movement record exists and fall assessment exists
			// When patient movement has been filled in, Fall Assessment link becomes enabled.
			if ( (assessMob.getPatientMovement() != null) && (assessMob.getPatientHandling() !=null) )
			{	
				form.linkFA().setEnabled(true);
				form.linkFallRiskassessment().setEnabled(true);
			}
			
			// When both are filled in ONLY then can the Complete checkbox be enabled.
			if((assessMob.getFallAssessmentScore() != null)&&(assessMob.getPatientMovement() != null) && (assessMob.getPatientHandling() !=null)&&(assessMob.getEnvironmentChecklist() != null))
			
			{
				form.checkBoxComplete().setEnabled(true);
			}
		
			//If the Section has been completed previously then set the check box accordingly
			if(assessMob.getIsComplete().booleanValue() == true)
			{
				form.checkBoxComplete().setValue(true);	
				form.checkBoxComplete().setEnabled(false);
			}
			
		}
		else
		{
			form.linkFA().setEnabled(false);
			form.linkFallRiskassessment().setEnabled(false);
			form.checkBoxComplete().setEnabled(false);
			
			// Probably a Cancel was hit on the linked Form and no AssessmentHeaderInfo is saved so 
			// refresh the screen with any data that was entered before using the link.
			if (form.getGlobalContext().Nursing.getAssessmentComponent() != null)		
			{
				AssessmentMobility assessMob = (AssessmentMobility)form.getGlobalContext().Nursing.getAssessmentComponent();
				populateFormInfo(assessMob);
			
				// Cannot complete the assessment until the patient movement record exists and fall assessment exists
				// When patient movement has been filled in, Fall Assessment link and Environmental Checklist link becomes enabled.
				if ( (assessMob.getPatientMovement() != null) && (assessMob.getPatientHandling() !=null))
				{	
					form.linkFA().setEnabled(true);
					form.linkFallRiskassessment().setEnabled(true);
				}
				// When all are filled in ONLY then can the Complete checkbox be enabled.
				if((assessMob.getFallAssessmentScore() != null)&&(assessMob.getPatientMovement() != null) && (assessMob.getPatientHandling() !=null)&&(assessMob.getEnvironmentChecklist() != null))
				{
					form.checkBoxComplete().setEnabled(true);
				}
			}
			
			// check if there is a relevant component
			getLastAssessmentComponent();
			
			form.setMode(FormMode.EDIT);
		}
	}
	
	private void populateFormInfo(AssessmentMobility assessMob)
	{
		if (assessMob == null)
			return;
		
		form.checkBoxCopy().setValue(assessMob.getCopy().booleanValue());
		if (assessMob.getCopy().booleanValue() == true)
			form.checkBoxCopy().setEnabled(false);
				
		form.checkBoxComplete().setValue(assessMob.getIsComplete().booleanValue());
		if (assessMob.getIsComplete().booleanValue() == true) // Complete
		{
			form.bSave().setEnabled(false);
			form.setMode(FormMode.VIEW);
			form.checkBoxCopy().setEnabled(false);
			form.checkBoxComplete().setEnabled(false);
			form.gridCarePlan().setReadOnly(true);
		}
			
		form.comboBoxBed().setValue(assessMob.getBedType());
		form.comboBoxChair().setValue(assessMob.getChairType());
		form.textBoxNotes().setValue(assessMob.getNotes());
		form.answerBoxAssistanceWithMobility().setValue(assessMob.getAssistanceWithMobility());
		
		//fall assessment score
		if(assessMob.getFallAssessmentScore() != null)
			form.decFallScore().setValue(new Float(assessMob.getFallAssessmentScore().floatValue()));
		
		// Populate the correct selected careplan template if one saved with the component
		if (assessMob.getCarePlanTemplate() != null && assessMob.getCarePlanTemplate().size() > 0)
		{
			GenForm.gridCarePlanRow cpRow;
			CarePlanTemplateCollection templateColl = assessMob.getCarePlanTemplate();
			CarePlanTemplate template;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.gridCarePlan().getRows().size(); j++)
			{
				cpRow = form.gridCarePlan().getRows().get(j);
				for (i=0; i<templateColl.size(); i++)
				{
					template = templateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}

			
	}
	
	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getassessMobility() != null && form.getLocalContext().getassessMobility().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getassessMobility().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}

	protected AssessmentMobility loadDataFromScreen()
	{	
		AssessmentMobility assessMob = form.getLocalContext().getassessMobility();
		if (assessMob == null)
		{
			assessMob = new AssessmentMobility();
			assessMob.setComponentType(AssessmentComponentType.MOBILITY);
		}
		
		assessMob.setIsComplete(new Boolean(this.form.checkBoxComplete().getValue()));
		assessMob.setCopy(new Boolean(this.form.checkBoxCopy().getValue()));	
		assessMob.setBedType(form.comboBoxBed().getValue());
		assessMob.setChairType(form.comboBoxChair().getValue());
		assessMob.setNotes(form.textBoxNotes().getValue());
		assessMob.setAssistanceWithMobility(form.answerBoxAssistanceWithMobility().getValue());
	
		//FallAssessment score
		if(form.getGlobalContext().COE.getAssessmentScore() != null)
			assessMob.setFallAssessmentScore(new Integer(form.getGlobalContext().COE.getAssessmentScore().intValue()));
		
		String[] messages = assessMob.validate();
		if (messages != null)
		{
			engine.showErrors("Validation Errors", messages);
			return null;
		}
		return assessMob;
	}
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			AssessmentMobility assessMob = loadDataFromScreen();
			if (assessMob == null)
				return;
			
			AssessmentHeaderInfo newAssmnt = form.getLocalContext().getassmnt();
			
			if (newAssmnt.getClinicalContact() == null)
				newAssmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
			if (newAssmnt.getCareContext() == null)
				newAssmnt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			newAssmnt = domain.saveComponent(newAssmnt, assessMob);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
			
			// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
			if (form.gridCarePlan().getReadOnly() == false)
			{
				CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
				GenForm.gridCarePlanRow cpRow;
				for (int i=0; i<form.gridCarePlan().getRows().size(); i++)
				{
					cpRow = form.gridCarePlan().getRows().get(i);
					if (cpRow.getcolSelected() && !cpRow.isReadOnly())
						templList.add(cpRow.getValue());
				}
				if (templList.size() > 0)
				{
					form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
					
					form.getGlobalContext().Nursing.setAssessmentComponent(assessMob);		
					
					engine.open(form.getForms().Nursing.CarePlanStep2);
				}
				else
					engine.open(form.getForms().Nursing.AdmissionAssessOverview);
			}
			else
				engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
	
			onFormOpen();
			return;				
		} catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Mobility Assessment record already exists. " + e.getMessage());
			onFormOpen();
			return;
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			
			onFormOpen();
			return;	
		}
	}
	
	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPrevAssessMobility() == null)
			return;
		
		form.getLocalContext().getPrevAssessMobility().setIsComplete(new Boolean(false));
		form.getLocalContext().getPrevAssessMobility().setCarePlanTemplate(null);
		form.getLocalContext().getPrevAssessMobility().setFallAssessmentScore(null);
		form.getLocalContext().getPrevAssessMobility().setOptionalFallAssessment(null);
	
		populateFormInfo(form.getLocalContext().getPrevAssessMobility());
		form.checkBoxCopy().setValue(true);
		form.checkBoxCopy().setEnabled(false);
	}
	
	protected void getLastAssessmentComponent()
	{
		AssessmentMobility tmpAssessMob = (AssessmentMobility)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext(),AssessmentComponentType.MOBILITY);
		if (tmpAssessMob == null)
		{
			this.form.checkBoxCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessMobility(tmpAssessMob);
		form.checkBoxCopy().setEnabled(true);
	}
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		//If there is a score then the Complete checkbox can be enabled, cause the linkFA would not be enabled unless
		//Patient movement had been also populated. FA is not saved to the patient until save on main form.
		if(result.equals(DialogResult.OK) && formName.equals(form.getForms().Nursing.FallAssessmentDialog))
		{
			if(form.getGlobalContext().COE.getAssessmentScore() != null)
			{
				form.getLocalContext().setassessMobility(form.getGlobalContext().COE.getAssessmentMobility());
				form.decFallScore().setValue(form.getGlobalContext().COE.getAssessmentScore());
			}
		}
		else if(result.equals(DialogResult.OK) && formName.equals(form.getForms().Nursing.EnvirnmentalChecklistDialog))
		{			
			if((AssessmentMobility)form.getGlobalContext().COE.getAssessmentMobility() != null)
			{
				form.getLocalContext().setassessMobility((AssessmentMobility)form.getGlobalContext().COE.getAssessmentMobility());
			}
		}
		
		evaluateCompleteCondition();
	}
	

	private void evaluateCompleteCondition() 
	{
		boolean canComplete = false;
		
		if(form.getLocalContext().getassessMobilityIsNotNull() &&
				form.getLocalContext().getassessMobility().getFallAssessmentScore() != null &&
				form.getLocalContext().getassessMobility().getEnvironmentChecklist() != null && !(form.checkBoxComplete().getValue()))
		{
			canComplete = true;
		}
		
		form.checkBoxComplete().setEnabled(canComplete);
	}

	protected void onLinkFAClick() throws PresentationLogicException
	{
		AssessmentMobility assessMob = loadDataFromScreen();
		if (assessMob == null)
			return;

		// Load the Falls Risk
		try {
			form.getGlobalContext().COE.setFallRiskAssessments(RiskAssessmentHelper.getFARisks());
		} catch (PresentationLogicException e) {
			throw new PresentationLogicException("DocumentException occurred loading Fall Assessment Risks " + e.getMessage(), e);
		}
		form.getGlobalContext().COE.setCurrentFallRiskAssessment(assessMob.getOptionalFallAssessment());
		form.getGlobalContext().COE.setAssessmentMobility(assessMob);
		form.getGlobalContext().COE.setDisplayScore(Boolean.TRUE);
		engine.open(form.getForms().Nursing.FallAssessmentDialog);
	}
	
	protected void onLinkHandlingClick() throws PresentationLogicException 
	{
		AssessmentMobility assessMob = loadDataFromScreen();
		if (assessMob == null)
			return;
		
		form.getGlobalContext().Nursing.setAssessmentComponent(assessMob);		
		engine.open(form.getForms().Nursing.PatientMovement);
	}

	@Override
	protected void onLinkFallRiskassessmentClick() throws PresentationLogicException 
	{
		AssessmentMobility assessMob = loadDataFromScreen();
		if (assessMob == null)
			return;

		form.getGlobalContext().COE.setAssessmentMobility(assessMob);
		form.getGlobalContext().COE.setDisplayScore(Boolean.TRUE);
		engine.open(form.getForms().Nursing.EnvirnmentalChecklistDialog);
	}

}
