//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.70 build 3414.18173)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.racpc.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.racpc.domain.RACPCSummary;
import ims.racpc.domain.base.impl.BaseRACPCPlanAdviceImpl;
import ims.clinical.domain.objects.RACPPlanAdvice;
import ims.clinical.vo.RACPPlanAdviceVoCollection;
import ims.clinical.vo.domain.RACPPlanAdviceVoAssembler;
import ims.core.admin.vo.CareContextRefVo;


public class RACPCPlanAdviceImpl extends BaseRACPCPlanAdviceImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.RACPPlanAdviceVo getPlanAdviceForClinicalContact(CareContextRefVo refVoCareContext)
	{
		if (refVoCareContext == null)
			throw new CodingRuntimeException("Cannot get RACPPlanAdviceRefVo for null ClinicalContactRefVo");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from RACPPlanAdvice rpa where "); 
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		hql.append(" rpa.careContext.id = :ccId");
		markers.add("ccId");
		values.add(refVoCareContext.getID_CareContext());

		List listRACPPlanAdvice = factory.find(hql.toString(), markers,values);
		if(listRACPPlanAdvice != null && listRACPPlanAdvice.size() > 0)
		{ 
			RACPPlanAdviceVoCollection voColl = RACPPlanAdviceVoAssembler.createRACPPlanAdviceVoCollectionFromRACPPlanAdvice(listRACPPlanAdvice);
			if(voColl != null && voColl.size() > 0)
				return voColl.get(0);
		}
		return null;
		
	}

	public ims.clinical.vo.RACPPlanAdviceVo savePlanAdviceVo(ims.clinical.vo.RACPPlanAdviceVo voPlanAdvice) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if (voPlanAdvice == null  || !voPlanAdvice.isValidated())
			throw new CodingRuntimeException("Plan Advice is null or has not been validated");
		DomainFactory factory=getDomainFactory();
		
		RACPPlanAdvice doRACPPlanAdvice = RACPPlanAdviceVoAssembler.extractRACPPlanAdvice(factory, voPlanAdvice);
		factory.save(doRACPPlanAdvice);
		return RACPPlanAdviceVoAssembler.create(doRACPPlanAdvice);
	}

	//WDEV-13437
	public Boolean isRACPCSummaryComplete(CareContextRefVo careContext) 
	{
		RACPCSummary impl = (RACPCSummary)getDomainImpl(RACPCSummaryImpl.class);
		return impl.isRACPCSummaryComplete(careContext);
	}
}
