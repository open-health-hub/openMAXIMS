//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.71 build 3729.19612)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.racpc.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.clinical.domain.objects.RACPMedication;
import ims.clinical.vo.RACPMedicationVoCollection;
import ims.clinical.vo.domain.RACPMedicationVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.racpc.domain.RACPCSummary;
import ims.racpc.domain.base.impl.BaseRACPCMedicationImpl;

public class RACPCMedicationImpl extends BaseRACPCMedicationImpl
{
	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.RACPMedicationVo getMedicationForCareContext(CareContextRefVo refVoCareContext)
	{
		if (refVoCareContext == null)
			throw new CodingRuntimeException("Cannot get RACPMedicationVo for null ClinicalContactRefVo");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from RACPMedication srf where "); 
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		hql.append(" srf.careContext.id = :ccId");
		markers.add("ccId");
		values.add(refVoCareContext.getID_CareContext());

		List listMedication = factory.find(hql.toString(), markers,values);
		if(listMedication != null && listMedication.size() > 0)
		{ 
			RACPMedicationVoCollection voColl = RACPMedicationVoAssembler.createRACPMedicationVoCollectionFromRACPMedication(listMedication);
			if(voColl != null && voColl.size() > 0)
				return voColl.get(0);
		}
		return null;
	}

	public ims.clinical.vo.RACPMedicationVo saveMedicationVo(ims.clinical.vo.RACPMedicationVo voMedication) throws ims.domain.exceptions.StaleObjectException
	{
		if (voMedication == null  || !voMedication.isValidated())
			throw new CodingRuntimeException("Medication is null or has not been validated");
		DomainFactory factory=getDomainFactory();
		
		RACPMedication doMedication = RACPMedicationVoAssembler.extractRACPMedication(factory, voMedication);
		factory.save(doMedication);
		return RACPMedicationVoAssembler.create(doMedication);
	}

	//WDEV-13437
	public Boolean isRACPCSummaryComplete(CareContextRefVo careContext) 
	{
		RACPCSummary impl = (RACPCSummary)getDomainImpl(RACPCSummaryImpl.class);
		return impl.isRACPCSummaryComplete(careContext);
	}
}
