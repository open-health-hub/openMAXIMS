//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.racpc.forms.racpcplanadvice;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbOverallImpressionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.OverallImpression value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.OverallImpression value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.OverallImpression value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.OverallImpression value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.OverallImpression value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.OverallImpression getValue()
		{
			return (ims.core.vo.lookups.OverallImpression)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.OverallImpression value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdPlanRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPlanRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setcolPlanReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolPlanReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolPlanOpened()
		{
			super.row.showOpened(0);
		}
		public ims.core.vo.lookups.PlanOfAction getcolPlan()
		{
			return (ims.core.vo.lookups.PlanOfAction)super.row.get(0);
		}
		public void setcolPlan(ims.core.vo.lookups.PlanOfAction value)
		{
			super.row.set(0, value);
		}
		public void setCellcolPlanTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolPrimaryReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolPrimaryReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolPrimaryOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getcolPrimary()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setcolPrimary(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellcolPrimaryTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolSecondaryReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolSecondaryReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolSecondaryOpened()
		{
			super.row.showOpened(2);
		}
		public boolean getcolSecondary()
		{
			return ((Boolean)super.row.get(2)).booleanValue();
		}
		public void setcolSecondary(boolean value)
		{
			super.row.set(2, new Boolean(value));
		}
		public void setCellcolSecondaryTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
		public grdPlanRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdPlanRow(super.row.getParent());
		}
		public grdPlanRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdPlanRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdPlanRowCollection collection;
	}
	public static class grdPlanRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPlanRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPlanRow get(int index)
		{
			return new grdPlanRow(super.collection.get(index));
		}
		public grdPlanRow newRow()
		{
			return new grdPlanRow(super.collection.newRow());
		}
		public grdPlanRow newRow(boolean autoSelect)
		{
			return new grdPlanRow(super.collection.newRow(autoSelect));
		}
		public grdPlanRow newRowAt(int index)
		{
			return new grdPlanRow(super.collection.newRowAt(index));
		}
		public grdPlanRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPlanRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPlanGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdPlanRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdPlanRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdPlanRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdPlanRow[] result = new GenForm.grdPlanRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdPlanRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdPlanRow[] getAllRows(GenForm.grdPlanRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdPlanRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdPlanRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdPlanRow[] result = new GenForm.grdPlanRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdPlanRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdPlanRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdPlanRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdPlanRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		public void populateTree(ims.framework.cn.data.TreeModel value)
		{
			populateTree(value, false);
		}
		public void populateTree(ims.framework.cn.data.TreeModel value, boolean displayImages)
		{
			getRows().clear();
			ims.framework.cn.data.TreeNode[] nodes = value.getRootNodes();
			for(int x = 0; x < nodes.length; x++)
			{
				populateTreeNode(null, nodes[x], displayImages);
			}
		}
		private void populateTreeNode(GenForm.grdPlanRow parentRow, ims.framework.cn.data.TreeNode value, boolean displayImages)
		{
			if(ims.core.vo.lookups.PlanOfAction.class.isAssignableFrom(value.getClass()))
			{
				GenForm.grdPlanRow row = null;
				if(parentRow == null)
					row = getRows().newRow();
				else
					row = parentRow.getRows().newRow();
				row.setcolPlan((ims.core.vo.lookups.PlanOfAction)value);
				if(displayImages)
				{
					if(value.getExpandedImage() != null)
						row.setExpandedImage(value.getExpandedImage());
					if(value.getCollapsedImage() != null)
						row.setCollapsedImage(value.getCollapsedImage());
				}
				ims.framework.cn.data.TreeNode[] nodes = value.getChildren();
				for(int x = 0; x < nodes.length; x++)
				{
					populateTreeNode(row, nodes[x], displayImages);
				}
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdPlanRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPlanRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPlanRowCollection getRows()
		{
			return new grdPlanRowCollection(super.grid.getRows());
		}
		public grdPlanRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPlanRow(row);
		}
		public void setcolPlanHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolPlanHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolPrimaryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolPrimaryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolSecondaryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolSecondaryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdAdviceToPatientRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAdviceToPatientRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolAdviceReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolAdviceReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolAdviceOpened()
		{
			super.row.showOpened(0);
		}
		public ims.core.vo.lookups.AdviceToPatient getcolAdvice()
		{
			return (ims.core.vo.lookups.AdviceToPatient)super.row.get(0);
		}
		public void setcolAdvice(ims.core.vo.lookups.AdviceToPatient value)
		{
			super.row.set(0, value, true);
		}
		public void setCellcolAdviceTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolGivenReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolGivenReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolGivenOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getcolGiven()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setcolGiven(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellcolGivenTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAdviceToPatientRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAdviceToPatientRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAdviceToPatientRow get(int index)
		{
			return new grdAdviceToPatientRow(super.collection.get(index));
		}
		public grdAdviceToPatientRow newRow()
		{
			return new grdAdviceToPatientRow(super.collection.newRow());
		}
		public grdAdviceToPatientRow newRow(boolean autoSelect)
		{
			return new grdAdviceToPatientRow(super.collection.newRow(autoSelect));
		}
		public grdAdviceToPatientRow newRowAt(int index)
		{
			return new grdAdviceToPatientRow(super.collection.newRowAt(index));
		}
		public grdAdviceToPatientRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAdviceToPatientRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAdviceToPatientGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdAdviceToPatientRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAdviceToPatientRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAdviceToPatientRowCollection getRows()
		{
			return new grdAdviceToPatientRowCollection(super.grid.getRows());
		}
		public grdAdviceToPatientRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAdviceToPatientRow(row);
		}
		public void setcolAdviceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolAdviceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox colAdviceComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setcolGivenHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolGivenHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdAdviceToGPRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAdviceToGPRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolFindingReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolFindingReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolFindingOpened()
		{
			super.row.showOpened(0);
		}
		public ims.core.vo.lookups.AdviceToGP getcolFinding()
		{
			return (ims.core.vo.lookups.AdviceToGP)super.row.get(0);
		}
		public void setcolFinding(ims.core.vo.lookups.AdviceToGP value)
		{
			super.row.set(0, value, true);
		}
		public void setCellcolFindingTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSelectOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getcolSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setcolSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellcolSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAdviceToGPRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAdviceToGPRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAdviceToGPRow get(int index)
		{
			return new grdAdviceToGPRow(super.collection.get(index));
		}
		public grdAdviceToGPRow newRow()
		{
			return new grdAdviceToGPRow(super.collection.newRow());
		}
		public grdAdviceToGPRow newRow(boolean autoSelect)
		{
			return new grdAdviceToGPRow(super.collection.newRow(autoSelect));
		}
		public grdAdviceToGPRow newRowAt(int index)
		{
			return new grdAdviceToGPRow(super.collection.newRowAt(index));
		}
		public grdAdviceToGPRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAdviceToGPRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAdviceToGPGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdAdviceToGPRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAdviceToGPRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAdviceToGPRowCollection getRows()
		{
			return new grdAdviceToGPRowCollection(super.grid.getRows());
		}
		public grdAdviceToGPRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAdviceToGPRow(row);
		}
		public void setcolFindingHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolFindingHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox colFindingComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setcolSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 576, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 24, 344, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other details:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 312, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Overall impression:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 32, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 448, 40, 139, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Advice given to patient:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 448, 328, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Advice given to GP:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 680, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 760, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 368, 392, 200, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, new Integer(1500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 144, 312, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbOverallImpressionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbOverallImpressionTemp);
		cmbOverallImpressionComboBox cmbOverallImpression = (cmbOverallImpressionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOverallImpressionComboBox.class, m_cmbOverallImpressionTemp);
		super.addComboBox(cmbOverallImpression);

		// Grid Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 24, 56, 392, 248, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdPlanTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPlanTemp);
		grdPlanGrid grdPlan = (grdPlanGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPlanGrid.class, m_grdPlanTemp);
		grdPlan.addTreeColumn("Plan", 0, 250, false, true);
		grdPlan.addBoolColumn("Primary", 0, 0, 75, false, true, 0, true);
		grdPlan.addBoolColumn("Secondary", 0, 0, -1, false, true, 0, true);
		super.addGrid(grdPlan);
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 440, 56, 384, 248, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdAdviceToPatientTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAdviceToPatientTemp);
		grdAdviceToPatientGrid grdAdviceToPatient = (grdAdviceToPatientGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAdviceToPatientGrid.class, m_grdAdviceToPatientTemp);
		grdAdviceToPatient.addComboBoxColumn("Advice", 0, 0, 300, true, true, false, false, true, -1);
		grdAdviceToPatient.addBoolColumn("Given", 0, 0, -1, false, false, 0, true);
		super.addGrid(grdAdviceToPatient);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 440, 368, 384, 200, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdAdviceToGPTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAdviceToGPTemp);
		grdAdviceToGPGrid grdAdviceToGP = (grdAdviceToGPGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAdviceToGPGrid.class, m_grdAdviceToGPTemp);
		grdAdviceToGP.addComboBoxColumn("Advice", 0, 0, 300, true, true, false, false, true, -1);
		grdAdviceToGP.addBoolColumn("Select", 0, 0, -1, false, false, 0, true);
		super.addGrid(grdAdviceToGP);
	}


	public Button btnNew()
	{
		return (Button)super.getControl(6);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(7);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(8);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(9);
	}
	public TextBox txtOther()
	{
		return (TextBox)super.getControl(10);
	}
	public cmbOverallImpressionComboBox cmbOverallImpression()
	{
		return (cmbOverallImpressionComboBox)super.getComboBox(0);
	}
	public grdPlanGrid grdPlan()
	{
		return (grdPlanGrid)super.getGrid(0);
	}
	public grdAdviceToPatientGrid grdAdviceToPatient()
	{
		return (grdAdviceToPatientGrid)super.getGrid(1);
	}
	public grdAdviceToGPGrid grdAdviceToGP()
	{
		return (grdAdviceToGPGrid)super.getGrid(2);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PlanAdviceVo = new ims.framework.ContextVariable("PlanAdviceVo", prefix + "_lv_RACPC.RACPCPlanAdvice.__internal_x_context__PlanAdviceVo_" + componentIdentifier + "");
			cxl_PlanOfActionCollection = new ims.framework.ContextVariable("PlanOfActionCollection", prefix + "_lv_RACPC.RACPCPlanAdvice.__internal_x_context__PlanOfActionCollection_" + componentIdentifier + "");
			cxl_AdviceToPatientCollection = new ims.framework.ContextVariable("AdviceToPatientCollection", prefix + "_lv_RACPC.RACPCPlanAdvice.__internal_x_context__AdviceToPatientCollection_" + componentIdentifier + "");
			cxl_AdviceToGPCollection = new ims.framework.ContextVariable("AdviceToGPCollection", prefix + "_lv_RACPC.RACPCPlanAdvice.__internal_x_context__AdviceToGPCollection_" + componentIdentifier + "");
			cxl_PrimaryPlanOfAction = new ims.framework.ContextVariable("PrimaryPlanOfAction", prefix + "_lv_RACPC.RACPCPlanAdvice.__internal_x_context__PrimaryPlanOfAction_" + componentIdentifier + "");
			cxl_HasSelectedItem = new ims.framework.ContextVariable("HasSelectedItem", prefix + "_lv_RACPC.RACPCPlanAdvice.__internal_x_context__HasSelectedItem_" + componentIdentifier + "");
		}
		
		public boolean getPlanAdviceVoIsNotNull()
		{
			return !cxl_PlanAdviceVo.getValueIsNull(context);
		}
		public ims.clinical.vo.RACPPlanAdviceVo getPlanAdviceVo()
		{
			return (ims.clinical.vo.RACPPlanAdviceVo)cxl_PlanAdviceVo.getValue(context);
		}
		public void setPlanAdviceVo(ims.clinical.vo.RACPPlanAdviceVo value)
		{
			cxl_PlanAdviceVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PlanAdviceVo = null;
		public boolean getPlanOfActionCollectionIsNotNull()
		{
			return !cxl_PlanOfActionCollection.getValueIsNull(context);
		}
		public ims.core.vo.lookups.PlanOfActionCollection getPlanOfActionCollection()
		{
			return (ims.core.vo.lookups.PlanOfActionCollection)cxl_PlanOfActionCollection.getValue(context);
		}
		public void setPlanOfActionCollection(ims.core.vo.lookups.PlanOfActionCollection value)
		{
			cxl_PlanOfActionCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PlanOfActionCollection = null;
		public boolean getAdviceToPatientCollectionIsNotNull()
		{
			return !cxl_AdviceToPatientCollection.getValueIsNull(context);
		}
		public ims.core.vo.lookups.AdviceToPatientCollection getAdviceToPatientCollection()
		{
			return (ims.core.vo.lookups.AdviceToPatientCollection)cxl_AdviceToPatientCollection.getValue(context);
		}
		public void setAdviceToPatientCollection(ims.core.vo.lookups.AdviceToPatientCollection value)
		{
			cxl_AdviceToPatientCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AdviceToPatientCollection = null;
		public boolean getAdviceToGPCollectionIsNotNull()
		{
			return !cxl_AdviceToGPCollection.getValueIsNull(context);
		}
		public ims.core.vo.lookups.AdviceToGPCollection getAdviceToGPCollection()
		{
			return (ims.core.vo.lookups.AdviceToGPCollection)cxl_AdviceToGPCollection.getValue(context);
		}
		public void setAdviceToGPCollection(ims.core.vo.lookups.AdviceToGPCollection value)
		{
			cxl_AdviceToGPCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AdviceToGPCollection = null;
		public boolean getPrimaryPlanOfActionIsNotNull()
		{
			return !cxl_PrimaryPlanOfAction.getValueIsNull(context);
		}
		public ims.core.vo.lookups.PlanOfAction getPrimaryPlanOfAction()
		{
			return (ims.core.vo.lookups.PlanOfAction)cxl_PrimaryPlanOfAction.getValue(context);
		}
		public void setPrimaryPlanOfAction(ims.core.vo.lookups.PlanOfAction value)
		{
			cxl_PrimaryPlanOfAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrimaryPlanOfAction = null;
		public boolean getHasSelectedItemIsNotNull()
		{
			return !cxl_HasSelectedItem.getValueIsNull(context);
		}
		public Boolean getHasSelectedItem()
		{
			return (Boolean)cxl_HasSelectedItem.getValue(context);
		}
		public void setHasSelectedItem(Boolean value)
		{
			cxl_HasSelectedItem.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasSelectedItem = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[76];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_RACPC.RACPCPlanAdvice.__internal_x_context__PlanAdviceVo_" + componentIdentifier, "BO-1072100077-ID", "ID_RACPPlanAdvice");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_RACPC.RACPCPlanAdvice.__internal_x_context__PlanAdviceVo_" + componentIdentifier, "BO-1072100077-PRIMARYPLAN", "PrimaryPlan");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_RACPC.RACPCPlanAdvice.__internal_x_context__PlanAdviceVo_" + componentIdentifier, "BO-1072100077-OVERALLIMPRESSION", "OverallImpression");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_RACPC.RACPCPlanAdvice.__internal_x_context__PlanAdviceVo_" + componentIdentifier, "BO-1072100077-OTHERDETAILS", "OtherDetails");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_RACPC.RACPCPlanAdvice.__internal_x_context__PlanAdviceVo_" + componentIdentifier, "BO-1072100077-CARECONTEXT", "CareContext");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
