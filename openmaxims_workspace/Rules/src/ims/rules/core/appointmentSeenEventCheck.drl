package ims.rules.userrules;

import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.rules.engine.RulesRuntimeEngine;
import ims.domain.DomainFactory;
import java.util.HashMap;

global RulesRuntimeEngine engine;
global DomainFactory factory;
global HashMap prevState;



				 
function boolean appointmentSeenEventCheck(ims.rules.engine.RulesRuntimeEngine engine, ims.domain.DomainFactory factory, java.util.HashMap prevState, ims.scheduling.domain.objects.Booking_Appointment entity)
{
	  
		// Don't continue if this is not the pathwayEntity rule we are looking for
		if (engine.getPathwayEntitySpecificRuleName() == null || !engine.getPathwayEntitySpecificRuleName().equals("appointmentSeenEventCheck.drl"))
		{
			return false;
		}
		
		// Set this as the rule that is executed for checking within the interceptor
		engine.setLastRuleName("appointmentSeenEventCheck.drl");
  

	    if (entity.getApptStatus() != null && entity.getApptStatus().getId() == ims.scheduling.vo.lookups.Status_Reason.SEEN.getId())
	    {
	        if (prevState != null && prevState.get("apptStatus") != null)
	        {
	        	if (!(prevState.get("apptStatus")).equals(entity.getApptStatus()))
				{
    				    engine.setLastRuleResult(ims.scheduling.vo.lookups.Status_Reason.SEEN.getId());
    				    return true;
	    		}
	    	}
			else
			{
    		    engine.setLastRuleResult(ims.scheduling.vo.lookups.Status_Reason.SEEN.getId());
    		    return true;
    		}

	    }

   	    engine.setLastRuleResult(0);
	   return false; 
}

rule "appointmentSeenEventCheck"
no-loop true
salience 0
when
	entity : ims.scheduling.domain.objects.Booking_Appointment();
	eval(appointmentSeenEventCheck(engine, factory, prevState, entity));
then
	engine.createSystemLogEntry(ims.framework.enumerations.SystemLogLevel.INFORMATION, "Rule 'appointmentSeenEventCheck' status was changed.");
end
