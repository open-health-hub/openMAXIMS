//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.62 build 3023.13950)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.screeningprofileconfiguration;

import ims.assessment.forms.screeningprofileconfiguration.GenForm.grdDetailsRow;
import ims.assessment.vo.ScreeningProfileComponentVo;
import ims.assessment.vo.ScreeningProfileVo;
import ims.assessment.vo.ScreeningProfileVoCollection;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getGlobalContext().Assessment.getContextTypeIsNotNull())
			form.cmbContextType().setValue(form.getGlobalContext().Assessment.getContextType());
		
		open();
	}
	private void open()
	{
		form.grdDetails().getRows().clear();
		
		if(form.cmbContextType().getValue() != null)
		{
			ScreeningProfileVoCollection coll = domain.listProfilesByContextType(form.cmbContextType().getValue());
			
			displayData(coll);
		}
		
		enableContextMenu();
	}
	private void displayData(ScreeningProfileVoCollection coll)
	{
		if(coll == null)
			return;
		
		for (int i = 0; i < coll.size(); i++)
		{
			ScreeningProfileVo item = coll.get(i);
			
			addProfileRow(item);
		}
		
	}
	private void addProfileRow(ScreeningProfileVo item)
	{
		grdDetailsRow row = form.grdDetails().getRows().newRow();
		
		row.setColName(item.getProfileName());
		row.setValue(item);
		row.setColStatus(item.getActiveStatus());
		row.setExpandedImage(item.getActiveStatus().getImage());
		row.setCollapsedImage(item.getActiveStatus().getImage());
		
		if(PreActiveActiveInactiveStatus.ACTIVE.equals(item.getActiveStatus()))
				row.setBold(true);
		
		for (int i = 0; i < item.getProfileComponents().size(); i++)
		{
			ScreeningProfileComponentVo child = item.getProfileComponents().get(i);
			
			grdDetailsRow childRow = row.getRows().newRow();
			
			if(child.getUserAssessmentIsNotNull())
			{
				childRow.setColName(child.getUserAssessment().getName());
				childRow.setColStatus(child.getUserAssessment().getActiveStatus());
			}
			else if(child.getGraphicIsNotNull())
			{
				childRow.setColName(child.getGraphic().getName());
				childRow.setColStatus(child.getGraphic().getActiveStatus());
			}
		}
	}
	@Override
	protected void onCmbContextTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.AssessmentNamespace.ScreenProfileConfiguration.ADD_CONFIGURATION:
				addConfiguration();
				break;
			case GenForm.ContextMenus.AssessmentNamespace.ScreenProfileConfiguration.EDIT_CONFIGURATION:
				editConfguration(FormMode.EDIT);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.ScreenProfileConfiguration.VIEW_CONFIGURATION:
				editConfguration(FormMode.VIEW);
				break;
			default:
				break;
		}
		
	}

	private void editConfguration(FormMode mode)
	{
		form.getGlobalContext().Core.setUserDefinedFormMode(mode);
		form.getGlobalContext().Assessment.setCurrentProfile(getCurrentProfile());
		form.getGlobalContext().Assessment.setContextType(form.cmbContextType().getValue());
		engine.open(form.getForms().Assessment.ScreenProfileConfigurationNew);
	}
	private ScreeningProfileVo getCurrentProfile()
	{
		if(form.grdDetails().getSelectedRowIndex() < 0)
			return null;
		
		if(form.grdDetails().getValue() instanceof ScreeningProfileVo)
			return (ScreeningProfileVo) form.grdDetails().getValue();
		
		return (ScreeningProfileVo) form.grdDetails().getSelectedRow().getParentRow().getValue();
	}
	private void addConfiguration()
	{
		form.getGlobalContext().Assessment.setContextType(form.cmbContextType().getValue());
		form.getGlobalContext().Assessment.setCurrentProfile(null);
		form.getGlobalContext().Core.setUserDefinedFormMode(FormMode.EDIT);
		engine.open(form.getForms().Assessment.ScreenProfileConfigurationNew);
	}
	private void enableContextMenu()
	{
		boolean objSelected = form.grdDetails().getSelectedRowIndex() >= 0;
		form.getContextMenus().Assessment.getScreenProfileConfigurationADD_CONFIGURATIONItem().setVisible(true);
		form.getContextMenus().Assessment.getScreenProfileConfigurationEDIT_CONFIGURATIONItem().setVisible(objSelected);
		form.getContextMenus().Assessment.getScreenProfileConfigurationVIEW_CONFIGURATIONItem().setVisible(objSelected);
	}
	@Override
	protected void onGrdDetailsSelectionChanged() throws PresentationLogicException
	{
		enableContextMenu();
	}
	
	
}
