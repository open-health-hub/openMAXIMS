//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.patientgraphicstages;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrAssessmentsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageGraphicalContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 11, 8, 333, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_customAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(11), new Integer(8), new Integer(333), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_customAuthoringInfoForm, instance1 } );
				ims.framework.Control m_customAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_customAuthoringInfoForm, instance1, Boolean.FALSE } );
				super.addControl(m_customAuthoringInfoControl);
				Menu[] menus1 = m_customAuthoringInfoForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 11, 80, 790, 424, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_customControlDrawingForm = loader.loadComponent(127104, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance2, -1, skipContextValidation);
				//ims.framework.Control m_customControlDrawingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(11), new Integer(80), new Integer(790), new Integer(424), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_customControlDrawingForm, instance2 } );
				ims.framework.Control m_customControlDrawingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_customControlDrawingForm, instance2, Boolean.FALSE } );
				super.addControl(m_customControlDrawingControl);
				Menu[] menus2 = m_customControlDrawingForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
		
				// Button Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 11, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 96, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 640, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 726, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public ims.core.forms.authoringinfo.IComponent customAuthoringInfo()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomAuthoringInfoVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomAuthoringInfoVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomAuthoringInfoEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomAuthoringInfoEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.assessment.forms.graphicassessmentcomponent.IComponent customControlDrawing()
			{
				return (ims.assessment.forms.graphicassessmentcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlDrawingValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlDrawingVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlDrawingVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlDrawingEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlDrawingEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Button bNew()
			{
				return (Button)super.getControl(2);
			}
			public Button btnUpdate()
			{
				return (Button)super.getControl(3);
			}
			public Button btnSave()
			{
				return (Button)super.getControl(4);
			}
			public Button btnCancel()
			{
				return (Button)super.getControl(5);
			}
		}
		public static class tabPageFindingsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbAnswersComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.assessment.vo.PatientGraphicalAssessmentStageVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.assessment.vo.PatientGraphicalAssessmentStageVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.assessment.vo.PatientGraphicalAssessmentStageVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.assessment.vo.PatientGraphicalAssessmentStageVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.assessment.vo.PatientGraphicalAssessmentStageVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.assessment.vo.PatientGraphicalAssessmentStageVo getValue()
				{
					return (ims.assessment.vo.PatientGraphicalAssessmentStageVo)super.control.getValue();
				}
				public void setValue(ims.assessment.vo.PatientGraphicalAssessmentStageVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbFindingsComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.assessment.vo.PatientGraphicAssessmentFindingVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.assessment.vo.PatientGraphicAssessmentFindingVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.assessment.vo.PatientGraphicAssessmentFindingVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.assessment.vo.PatientGraphicAssessmentFindingVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.assessment.vo.PatientGraphicAssessmentFindingVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.assessment.vo.PatientGraphicAssessmentFindingVo getValue()
				{
					return (ims.assessment.vo.PatientGraphicAssessmentFindingVo)super.control.getValue();
				}
				public void setValue(ims.assessment.vo.PatientGraphicAssessmentFindingVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbStageComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.assessment.vo.GraphicAssessmentStageVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.assessment.vo.GraphicAssessmentStageVo getValue()
				{
					return (ims.assessment.vo.GraphicAssessmentStageVo)super.control.getValue();
				}
				public void setValue(ims.assessment.vo.GraphicAssessmentStageVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 304, 11, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Finding:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 11, 11, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Stage:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 735, 512, 65, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Last >>", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 520, 512, 65, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "<< First", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 664, 512, 65, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next >", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 592, 512, 65, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "< Prev", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 92, 514, 352, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbAnswersTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAnswersTemp);
				cmbAnswersComboBox cmbAnswers = (cmbAnswersComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnswersComboBox.class, m_cmbAnswersTemp);
				super.addComboBox(cmbAnswers);
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 360, 10, 440, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbFindingsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbFindingsTemp);
				cmbFindingsComboBox cmbFindings = (cmbFindingsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFindingsComboBox.class, m_cmbFindingsTemp);
				super.addComboBox(cmbFindings);
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 56, 10, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbStageTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbStageTemp);
				cmbStageComboBox cmbStage = (cmbStageComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStageComboBox.class, m_cmbStageTemp);
				super.addComboBox(cmbStage);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 792, 464, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuAnswerGraphicStage, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public Button btnUpdateAnswer()
			{
				return (Button)super.getControl(2);
			}
			public Button btnLast()
			{
				return (Button)super.getControl(3);
			}
			public Button btnFirst()
			{
				return (Button)super.getControl(4);
			}
			public Button btnNext()
			{
				return (Button)super.getControl(5);
			}
			public Button btnPrev()
			{
				return (Button)super.getControl(6);
			}
			public cmbAnswersComboBox cmbAnswers()
			{
				return (cmbAnswersComboBox)super.getComboBox(0);
			}
			public cmbFindingsComboBox cmbFindings()
			{
				return (cmbFindingsComboBox)super.getComboBox(1);
			}
			public cmbStageComboBox cmbStage()
			{
				return (cmbStageComboBox)super.getComboBox(2);
			}
			public DynamicGrid dyngrdFindingDetails()
			{
				return (DynamicGrid)super.getControl(10);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 816, 568, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageGraphical = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Assessment", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageGraphicalContainer m_tabPageGraphicalContainer = (tabPageGraphicalContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageGraphicalContainer.class, m_tabPageGraphical, factory);
			super.addContainer(m_tabPageGraphical, m_tabPageGraphicalContainer);
			ims.framework.utils.SizeInfo m_tabPageGraphicalDesignSize = new ims.framework.utils.SizeInfo(816, 568);
			ims.framework.utils.SizeInfo m_tabPageGraphicalRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper18.getWidth(), anchoringHelper18.getHeight());
			m_tabPageGraphicalContainer.setContext(form, appForm, m_tabPageGraphical, loader, form_images_local, contextMenus, startControlID, m_tabPageGraphicalDesignSize, m_tabPageGraphicalRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 816, 568, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageFindings = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Stages - Plans & Evaluations", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageFindingsContainer m_tabPageFindingsContainer = (tabPageFindingsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageFindingsContainer.class, m_tabPageFindings, factory);
			super.addContainer(m_tabPageFindings, m_tabPageFindingsContainer);
			ims.framework.utils.SizeInfo m_tabPageFindingsDesignSize = new ims.framework.utils.SizeInfo(816, 568);
			ims.framework.utils.SizeInfo m_tabPageFindingsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
			m_tabPageFindingsContainer.setContext(form, appForm, m_tabPageFindings, loader, form_images_local, contextMenus, startControlID, m_tabPageFindingsDesignSize, m_tabPageFindingsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageGraphical().setVisible(false);
			tabPageFindings().setVisible(false);
		}
		public void settabPageGraphicalEnabled(boolean value)
		{
			tabPageGraphical().setEnabled(value);
		}
		public void settabPageFindingsEnabled(boolean value)
		{
			tabPageFindings().setEnabled(value);
		}
		public void showtabPageGraphical()
		{
			tabPageFindings().setVisible(false);
			tabPageGraphical().setVisible(true);
		}
		public void showtabPageFindings()
		{
			tabPageGraphical().setVisible(false);
			tabPageFindings().setVisible(true);
		}

		public tabPageGraphicalContainer tabPageGraphical()
		{
			return (tabPageGraphicalContainer)super.layers.get(0);
		}
		public tabPageFindingsContainer tabPageFindings()
		{
			return (tabPageFindingsContainer)super.layers.get(1);
		}
	}
	public static class recbrAssessmentsRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.assessment.vo.PatientAssessmentListVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.assessment.vo.PatientAssessmentListVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.assessment.vo.PatientAssessmentListVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.assessment.vo.PatientAssessmentListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.assessment.vo.PatientAssessmentListVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.assessment.vo.PatientAssessmentListVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.assessment.vo.PatientAssessmentListVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.assessment.vo.PatientAssessmentListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.assessment.vo.PatientAssessmentListVo getValue()
		{
			return (ims.assessment.vo.PatientAssessmentListVo)super.control.getValue();
		}
		public void setValue(ims.assessment.vo.PatientAssessmentListVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuAnswerGraphicStage = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuAnswerGraphicStageADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add new stage", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuAnswerGraphicStage.add(contextMenus.contextMenuAnswerGraphicStageADDItem);
		form.registerMenu(contextMenus.contextMenuAnswerGraphicStage);


		// Panel Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));

		// Layer Clasess
		lyrAssessmentsLayer m_lyrAssessmentsLayer = (lyrAssessmentsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrAssessmentsLayer.class, this, factory);
		super.addLayer(m_lyrAssessmentsLayer);
		m_lyrAssessmentsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 18, 22, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Skin Assessments:", new Integer(1), null, new Integer(0)}));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 168, 20, 664, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrAssessmentsTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrAssessmentsTemp);
		recbrAssessmentsRecordBrowser recbrAssessments = (recbrAssessmentsRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrAssessmentsRecordBrowser.class, m_recbrAssessmentsTemp);
		super.addRecordBrowser(recbrAssessments);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 134, 16, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.InfoEnabled24, this.getImages().Core.InfoDisabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrAssessmentsLayer lyrAssessments()
	{
		return (lyrAssessmentsLayer)super.getLayer(0);
	}
	public Label lblAssessName()
	{
		return (Label)super.getControl(3);
	}
	public recbrAssessmentsRecordBrowser recbrAssessments()
	{
		return (recbrAssessmentsRecordBrowser)super.getRecordBrowser(0);
	}
	public ImageButton imbHelpUrl()
	{
		return (ImageButton)super.getControl(5);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Assessment = new AssessmentForms();
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				PatientGraphicStages = new LocalFormName(127102);
				PatientGraphicStagesPain = new LocalFormName(127105);
				PatientFindingsCopy = new LocalFormName(127103);
				GraphicAssessmentInstantiationFindingCustom = new LocalFormName(127106);
			}
			public final FormName PatientGraphicStages;
			public final FormName PatientGraphicStagesPain;
			public final FormName PatientFindingsCopy;
			public final FormName GraphicAssessmentInstantiationFindingCustom;
		}

		public AssessmentForms Assessment;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			COE = new COEImages();
			GeneralMedical = new GeneralMedicalImages();
			Core = new CoreImages();
		}
		public final class COEImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private COEImages()
			{
				Blue = new ImageHelper(101100, "Images/COE/blue12x12.gif", new Integer(12), new Integer(12));
				BlueViolet = new ImageHelper(101101, "Images/COE/violet12x12.gif", new Integer(12), new Integer(12));
				BodyChart = new ImageHelper(101110, "Images/COE/Body_new_colour.gif", new Integer(325), new Integer(325));
				DarkCyan = new ImageHelper(101102, "Images/COE/darkcyan12x12.gif", new Integer(12), new Integer(12));
				Hotpink = new ImageHelper(101103, "Images/COE/Hotpink.gif", new Integer(12), new Integer(12));
				LightSeaGreen = new ImageHelper(101104, "Images/COE/LightSeaGreen.gif", new Integer(12), new Integer(12));
				LightSkyBlue = new ImageHelper(101105, "Images/COE/lightblue12x12.gif", new Integer(12), new Integer(12));
				Orange = new ImageHelper(101106, "Images/COE/orange12x12.gif", new Integer(12), new Integer(12));
				Red = new ImageHelper(101107, "Images/COE/Red.gif", new Integer(12), new Integer(12));
				Yellow = new ImageHelper(101109, "Images/COE/Yellow.gif", new Integer(12), new Integer(12));
				Turquoise = new ImageHelper(101108, "Images/COE/Turquoise.gif", new Integer(12), new Integer(12));
			}
			public final ims.framework.utils.Image Blue;
			public final ims.framework.utils.Image BlueViolet;
			public final ims.framework.utils.Image BodyChart;
			public final ims.framework.utils.Image DarkCyan;
			public final ims.framework.utils.Image Hotpink;
			public final ims.framework.utils.Image LightSeaGreen;
			public final ims.framework.utils.Image LightSkyBlue;
			public final ims.framework.utils.Image Orange;
			public final ims.framework.utils.Image Red;
			public final ims.framework.utils.Image Yellow;
			public final ims.framework.utils.Image Turquoise;
		}
		public final class GeneralMedicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private GeneralMedicalImages()
			{
				Blank = new ImageHelper(109101, "Images/GeneralMedical/Blank.gif", new Integer(235), new Integer(235));
			}
			public final ims.framework.utils.Image Blank;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Information = new ImageHelper(102217, "Images/Core/Information.gif", new Integer(16), new Integer(16));
				InformationDisabled = new ImageHelper(102297, "Images/Core/Information_disabled.gif", new Integer(16), new Integer(16));
				InfoDisabled24 = new ImageHelper(102512, "Images/Core/info_disabled_24.png", new Integer(24), new Integer(24));
				InfoEnabled24 = new ImageHelper(102511, "Images/Core/info_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Information;
			public final ims.framework.utils.Image InformationDisabled;
			public final ims.framework.utils.Image InfoDisabled24;
			public final ims.framework.utils.Image InfoEnabled24;
		}
		public final COEImages COE;
		public final GeneralMedicalImages GeneralMedical;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_AssessmentType = new ims.framework.ContextVariable("AssessmentType", prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__AssessmentType_" + componentIdentifier + "");
			cxl_PatientAssessment = new ims.framework.ContextVariable("PatientAssessment", prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier + "");
			cxl_PatientAssessmentActive = new ims.framework.ContextVariable("PatientAssessmentActive", prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessmentActive_" + componentIdentifier + "");
			cxl_PatientGraphicalAssessmentStageColl = new ims.framework.ContextVariable("PatientGraphicalAssessmentStageColl", prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientGraphicalAssessmentStageColl_" + componentIdentifier + "");
			cxl_CurrentIndex = new ims.framework.ContextVariable("CurrentIndex", prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__CurrentIndex_" + componentIdentifier + "");
			cxl_SelectedStage = new ims.framework.ContextVariable("SelectedStage", prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__SelectedStage_" + componentIdentifier + "");
			cxl_SelectedFindingId = new ims.framework.ContextVariable("SelectedFindingId", prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__SelectedFindingId_" + componentIdentifier + "");
			cxl_InitialAssessment = new ims.framework.ContextVariable("InitialAssessment", prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier + "");
		}
		
		public boolean getAssessmentTypeIsNotNull()
		{
			return !cxl_AssessmentType.getValueIsNull(context);
		}
		public ims.core.vo.lookups.UserDefinedAssessmentType getAssessmentType()
		{
			return (ims.core.vo.lookups.UserDefinedAssessmentType)cxl_AssessmentType.getValue(context);
		}
		public void setAssessmentType(ims.core.vo.lookups.UserDefinedAssessmentType value)
		{
			cxl_AssessmentType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AssessmentType = null;
		public boolean getPatientAssessmentIsNotNull()
		{
			return !cxl_PatientAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentVo getPatientAssessment()
		{
			return (ims.assessment.vo.PatientAssessmentVo)cxl_PatientAssessment.getValue(context);
		}
		public void setPatientAssessment(ims.assessment.vo.PatientAssessmentVo value)
		{
			cxl_PatientAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientAssessment = null;
		public boolean getPatientAssessmentActiveIsNotNull()
		{
			return !cxl_PatientAssessmentActive.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentListVo getPatientAssessmentActive()
		{
			return (ims.assessment.vo.PatientAssessmentListVo)cxl_PatientAssessmentActive.getValue(context);
		}
		public void setPatientAssessmentActive(ims.assessment.vo.PatientAssessmentListVo value)
		{
			cxl_PatientAssessmentActive.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientAssessmentActive = null;
		public boolean getPatientGraphicalAssessmentStageCollIsNotNull()
		{
			return !cxl_PatientGraphicalAssessmentStageColl.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientGraphicalAssessmentStageVoCollection getPatientGraphicalAssessmentStageColl()
		{
			return (ims.assessment.vo.PatientGraphicalAssessmentStageVoCollection)cxl_PatientGraphicalAssessmentStageColl.getValue(context);
		}
		public void setPatientGraphicalAssessmentStageColl(ims.assessment.vo.PatientGraphicalAssessmentStageVoCollection value)
		{
			cxl_PatientGraphicalAssessmentStageColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientGraphicalAssessmentStageColl = null;
		public boolean getCurrentIndexIsNotNull()
		{
			return !cxl_CurrentIndex.getValueIsNull(context);
		}
		public Integer getCurrentIndex()
		{
			return (Integer)cxl_CurrentIndex.getValue(context);
		}
		public void setCurrentIndex(Integer value)
		{
			cxl_CurrentIndex.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentIndex = null;
		public boolean getSelectedStageIsNotNull()
		{
			return !cxl_SelectedStage.getValueIsNull(context);
		}
		public ims.assessment.vo.GraphicAssessmentStageVo getSelectedStage()
		{
			return (ims.assessment.vo.GraphicAssessmentStageVo)cxl_SelectedStage.getValue(context);
		}
		public void setSelectedStage(ims.assessment.vo.GraphicAssessmentStageVo value)
		{
			cxl_SelectedStage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedStage = null;
		public boolean getSelectedFindingIdIsNotNull()
		{
			return !cxl_SelectedFindingId.getValueIsNull(context);
		}
		public Integer getSelectedFindingId()
		{
			return (Integer)cxl_SelectedFindingId.getValue(context);
		}
		public void setSelectedFindingId(Integer value)
		{
			cxl_SelectedFindingId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedFindingId = null;
		public boolean getInitialAssessmentIsNotNull()
		{
			return !cxl_InitialAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentVo getInitialAssessment()
		{
			return (ims.assessment.vo.PatientAssessmentVo)cxl_InitialAssessment.getValue(context);
		}
		public void setInitialAssessment(ims.assessment.vo.PatientAssessmentVo value)
		{
			cxl_InitialAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InitialAssessment = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class AnswerGraphicStage implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 1;
		}
		public void disableAllAnswerGraphicStageMenuItems()
		{
			this.contextMenuAnswerGraphicStageADDItem.setEnabled(false);
		}
		public void hideAllAnswerGraphicStageMenuItems()
		{
			this.contextMenuAnswerGraphicStageADDItem.setVisible(false);
		}
		private Menu contextMenuAnswerGraphicStage;
		public MenuItem getAnswerGraphicStageADDItem()
		{
			return this.contextMenuAnswerGraphicStageADDItem;
		}
		private MenuItem contextMenuAnswerGraphicStageADDItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[133];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-ID", "ID_PatientAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-STATUS", "Status");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-STATUSREASON", "StatusReason");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-DPPTYPE", "DPPType");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-CARECONTEXT", "CareContext");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-PATIENT", "Patient");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-SCORE", "Score");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.PatientGraphicAssessmentFinding", "BO-1003100051-ID", "ID_PatientGraphicAssessmentFinding");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.PatientGraphicAssessmentFinding", "BO-1003100051-AREADRAWN", "AreaDrawn");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.PatientGraphicAssessmentFinding", "BO-1003100051-AREANAME", "AreaName");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.PatientGraphicAssessmentFinding", "BO-1003100051-AREADETAILS", "AreaDetails");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.PatientGraphicAssessmentFinding", "BO-1003100051-ISCOPIED", "IsCopied");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Assessment.PatientGraphicalAssessmentStage", "BO-1085100002-ID", "ID_PatientGraphicalAssessmentStage");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessmentActive_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessmentActive_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessmentActive_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessmentActive_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessmentActive_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessmentActive_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessmentActive_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessmentActive_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessmentActive_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__PatientAssessmentActive_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__SelectedStage_" + componentIdentifier, "BO-1083100003-ID", "ID_GraphicAssessmentStage");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__SelectedStage_" + componentIdentifier, "BO-1083100003-ISANNOTATED", "IsAnnotated");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__SelectedStage_" + componentIdentifier, "BO-1083100003-STAGENAME", "StageName");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__SelectedStage_" + componentIdentifier, "BO-1083100003-ISACTIVE", "IsActive");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.PatientGraphicStages.__internal_x_context__InitialAssessment_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
