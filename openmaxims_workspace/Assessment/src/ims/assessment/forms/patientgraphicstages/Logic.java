//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2434.20780)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.patientgraphicstages;

import ims.assessment.configuration.vo.GraphicAssessmentRefVo;
import ims.assessment.helper.DynamicAssessmentHelper;
import ims.assessment.helper.UserAssessmentInstHelper;
import ims.assessment.vo.FindingStageQuestionsVo;
import ims.assessment.vo.GraphicAssessmentFindingQuestionVo;
import ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection;
import ims.assessment.vo.GraphicAssessmentFindingVo;
import ims.assessment.vo.GraphicAssessmentFindingVoCollection;
import ims.assessment.vo.GraphicAssessmentStageVo;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.PatientAssessmentAnswerVo;
import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentListVo;
import ims.assessment.vo.PatientAssessmentListVoCollection;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingQuestionAnswerVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingQuestionAnswerVoCollection;
import ims.assessment.vo.PatientGraphicAssessmentFindingVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingVoCollection;
import ims.assessment.vo.PatientGraphicAssessmentVo;
import ims.assessment.vo.PatientGraphicAssessmentVoCollection;
import ims.assessment.vo.PatientGraphicalAssessmentStageVo;
import ims.assessment.vo.PatientGraphicalAssessmentStageVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AnswerDetailsVo;
import ims.core.vo.AnswerOptionVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.DrawingGraphicFindingVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.QuestionInformationVo;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.QuestionAnswerType;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

import java.util.TreeMap;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final Integer	COLUMN_QUESTION		= new Integer(0);

	private static final int		MAX_COL				= 4;
	private static final int		FIRST_COL_WIDTH		= 200;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialiseScreen();
		open();
		updatePrevNextButtons(0);
	}
	private void open()
	{
		form.setMode(FormMode.VIEW);
		
		form.getLocalContext().setSelectedFindingId(null);
		form.getLocalContext().setSelectedStage(null);
		
		//WDEV-11526, WDEV-11721
		PatientAssessmentListVoCollection list = domain.listAssessments(form.getLocalContext().getAssessmentType(), form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext());
		populateRecordBrowser(list);
		updateButonStatus();
		displayPatientAssessment();
		
		form.lyrAssessments().tabPageGraphical().setHeaderVisible(true);
		form.lyrAssessments().tabPageFindings().setHeaderVisible(true);
		
		form.lyrAssessments().tabPageFindings().dyngrdFindingDetails().setSelectable(false);
		
		updateContextMenu();
	}
	private void populateRecordBrowser(PatientAssessmentListVoCollection list)
	{
		form.recbrAssessments().clear();
		form.getLocalContext().setPatientAssessmentActive(null);
		
		if(list == null)
			return;
		
		PatientAssessmentListVo itemSelected = null;
		for (int i = 0; i < list.size(); i++)
		{
			PatientAssessmentListVo item = list.get(i);
			String auth = "";
			
			if(item.getAuthoringInformationIsNotNull())
			{
				if(item.getAuthoringInformation().getAuthoringHcpIsNotNull())
				{
					auth = item.getAuthoringInformation().getAuthoringHcp().getName().toString();
				}
				if(item.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
				{
					if(auth.length() > 0)
						auth += ", ";
					
					auth += item.getAuthoringInformation().getAuthoringDateTime().toString();
				}
			}
			else
				auth = "No authoring info entered.";
			
			if(item.getIsCurrentForTypeIsNotNull() && item.getIsCurrentForType().booleanValue())
			{
				form.recbrAssessments().newRow(list.get(i), auth, Color.Green);
				itemSelected = item;
				form.getLocalContext().setPatientAssessmentActive(item);
			}
			else
				form.recbrAssessments().newRow(list.get(i), auth);
			
			if(form.getLocalContext().getPatientAssessmentIsNotNull())
			{
				if(item.getID_PatientAssessment().equals(form.getLocalContext().getPatientAssessment().getID_PatientAssessment()))
					itemSelected = item;
			}
			form.recbrAssessments().setValue(itemSelected);
		}
	}
	private void updateButonStatus()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.lyrAssessments().tabPageGraphical().btnUpdate().setVisible(false);
			form.lyrAssessments().tabPageGraphical().bNew().setVisible(true);
			
			if(form.recbrAssessments().getValue() != null && Boolean.TRUE.equals(form.recbrAssessments().getValue().getIsCurrentForType()))
			{
				form.lyrAssessments().tabPageGraphical().btnUpdate().setVisible(true);
			}
			
			form.lyrAssessments().tabPageGraphical().setVisible(true);
			if(form.lyrAssessments().tabPageFindings().cmbAnswers().getValue()!= null)
			{
				form.lyrAssessments().tabPageFindings().btnUpdateAnswer().setEnabled(true);
				
				
			}
			else 
				form.lyrAssessments().tabPageFindings().btnUpdateAnswer().setEnabled(false);
		
		}
		
		
		
		
	}
	private void initialiseScreen()
	{
		if(form.getForms().Assessment.PatientGraphicStages.equals(engine.getFormName()))
		{
			form.getLocalContext().setAssessmentType(UserDefinedAssessmentType.SKINASSESSMENT);
			form.lblAssessName().setValue(UserDefinedAssessmentType.SKINASSESSMENT.toString());
		}
		else if(form.getForms().Assessment.PatientGraphicStagesPain.equals(engine.getFormName()))
		{
			form.getLocalContext().setAssessmentType(UserDefinedAssessmentType.PAINASSESSMENT);
			form.lblAssessName().setValue("Pain Assessment");
		}
		
		form.lyrAssessments().tabPageGraphical().customAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);
		if(form.lyrAssessments().tabPageFindings().cmbAnswers().getValue()== null)
		{
			
			form.lyrAssessments().tabPageFindings().btnUpdateAnswer().setEnabled(false);
			
		}
		
		
		enableHelpUrlImage();
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().Assessment.PatientFindingsCopy) && result.equals(DialogResult.OK))
		{
			if(form.getGlobalContext().Assessment.getPatientGraphicAssessmentFindingIsNotNull()
					&& form.getGlobalContext().Assessment.getPatientGraphicAssessmentFinding().size() > 0)
			{
				PatientAssessmentVo patientAssessmentVo = form.getLocalContext().getPatientAssessment();
	
				if(patientAssessmentVo.getAssessmentData().getGraphicFindingsIsNotNull() && patientAssessmentVo.getAssessmentData().getGraphicFindings().size() > 0)
				{
					PatientGraphicAssessmentVo pgaVo = patientAssessmentVo.getAssessmentData().getGraphicFindings().get(0);
					
					if(pgaVo.getPatientGraphicFinding() == null)
						pgaVo.setPatientGraphicFinding(new PatientGraphicAssessmentFindingVoCollection());
					
					for (int i = 0; i < form.getGlobalContext().Assessment.getPatientGraphicAssessmentFinding().size(); i++)
					{
						pgaVo.getPatientGraphicFinding().add(form.getGlobalContext().Assessment.getPatientGraphicAssessmentFinding().get(i));
					}
					
					form.lyrAssessments().tabPageGraphical().customControlDrawing().clearScreen();
					form.lyrAssessments().tabPageGraphical().customControlDrawing().setPatientAssessment(patientAssessmentVo);
				}
			}
		}
		
		if(formName.equals(form.getForms().Assessment.GraphicAssessmentInstantiationFindingCustom) && result.equals(DialogResult.OK))
		{
			//update assessment
			PatientAssessmentVo patientAssessment = form.getGlobalContext().Core.getPatientAssessmentFull();
			
			try
			{
				patientAssessment = domain.savePatientAssessment(patientAssessment);
				
				form.getLocalContext().setSelectedFindingId(form.lyrAssessments().tabPageFindings().cmbFindings().getValue() != null ? form.lyrAssessments().tabPageFindings().cmbFindings().getValue().getID_PatientGraphicAssessmentFinding() : null);
				form.getLocalContext().setSelectedStage(form.lyrAssessments().tabPageFindings().cmbStage().getValue());

				form.lyrAssessments().showtabPageGraphical();
				displayPatientAssessment();
				updateButonStatus();
				updateContextMenu();
				form.lyrAssessments().showtabPageFindings();
				displayQuestionsAndAnswers();
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setPatientAssessment(patientAssessment);
				form.getLocalContext().setInitialAssessment(patientAssessment != null?(PatientAssessmentVo)patientAssessment.clone():null);
				open();
				return;
			}
			
		}
	}
	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.lyrAssessments().tabPageGraphical().customControlDrawing().setReadOnly(Boolean.TRUE);
			form.lyrAssessments().tabPageGraphical().customControlDrawing().setEnabled(Boolean.TRUE);
			
			form.lyrAssessments().tabPageFindings().setHeaderVisible(true);
		}
		else
		{
			form.lyrAssessments().tabPageFindings().setHeaderVisible(false);
		}
	}
	protected void onBNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		GraphicAssessmentVo graphicAssessment = domain.getActiveGraphicAssessment(form.getLocalContext().getAssessmentType());
		
		if(graphicAssessment == null)
		{
			String msg = "";
			if(isPainAssessment())
			{
				msg = "There is no active Pain Assessment configured !";
			}
			else if(isSkinAssessment())
			{
				msg = "There is no active Skin Assessment configured !";
			}
			
			engine.showMessage(msg);
			return;
		}
		
		clearScreen();
		
		PatientAssessmentVo patientAssessment = new PatientAssessmentVo();
		
		//WDEV-11721
		patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		//WDEV-11526
		patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		patientAssessment.setStatus(PatientAssessmentStatusReason.INPROGRESS);
		patientAssessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		patientAssessment.setIsCurrentForType(Boolean.TRUE);
		patientAssessment.setAssessmentData(new PatientAssessmentDataVo());
		
		patientAssessment.getAssessmentData().setGraphic(graphicAssessment);
		patientAssessment.getAssessmentData().setGraphicFindings(new PatientGraphicAssessmentVoCollection());
		
		if(graphicAssessment.getImagesIsNotNull())
		{
			for (int i = 0; i < graphicAssessment.getImages().size(); i++)
			{
				PatientGraphicAssessmentVo patientGraphicAssessmentVo = new PatientGraphicAssessmentVo();
				
				patientGraphicAssessmentVo.setGraphicImage(graphicAssessment.getImages().get(i));
				//TODO to add here any existing findings selected from PatientFindingsCopyDialog
				//TODO to null every finding id

				patientAssessment.getAssessmentData().getGraphicFindings().add(patientGraphicAssessmentVo);
			}
		}

		form.lyrAssessments().tabPageGraphical().customControlDrawing().clearScreen();
		
		form.setMode(FormMode.EDIT);
		form.lyrAssessments().tabPageGraphical().customControlDrawing().setEnabled(Boolean.TRUE);
		form.lyrAssessments().tabPageGraphical().customControlDrawing().setReadOnly(Boolean.FALSE);
		form.lyrAssessments().tabPageGraphical().customControlDrawing().setPatientAssessment(patientAssessment);
		
		form.getLocalContext().setPatientAssessment(patientAssessment);
		form.getLocalContext().setInitialAssessment(patientAssessment != null?(PatientAssessmentVo)patientAssessment.clone():null);

		form.lyrAssessments().tabPageGraphical().customAuthoringInfo().initializeComponent();
		// WDEV-12644
		form.lyrAssessments().tabPageGraphical().customAuthoringInfo().setEnabledAuthoringHCP(Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));
		form.lyrAssessments().tabPageGraphical().customAuthoringInfo().setEnabledDateTime(Boolean.TRUE);

		GraphicAssessmentRefVo refGraphicAssessment = getLastActiveGraphicAssessment();
	
		if(refGraphicAssessment != null && refGraphicAssessment.getID_GraphicAssessment().equals(graphicAssessment.getID_GraphicAssessment()) && form.getLocalContext().getPatientAssessmentActiveIsNotNull())
		{
			form.getGlobalContext().Core.setPatientAssessmentFull(domain.getPatientAssessment(form.getLocalContext().getPatientAssessmentActive()));
			engine.open(form.getForms().Assessment.PatientFindingsCopy);
		}
	}
	protected void onRecbrAssessmentsValueChanged() throws PresentationLogicException
	{
		form.lyrAssessments().showtabPageGraphical();
		form.getLocalContext().setSelectedFindingId(null);
		form.getLocalContext().setSelectedStage(null);
		displayPatientAssessment();
		updateButonStatus();
		updatePrevNextButtons(0);
		enableHelpUrlImage();
	}
	private void displayPatientAssessment()
	{
		clearScreen();
		form.getLocalContext().setPatientAssessment(null);
		form.getLocalContext().setInitialAssessment(null);
		form.getLocalContext().setPatientGraphicalAssessmentStageColl(null);

		if(form.recbrAssessments().getValue() != null)
		{
			PatientAssessmentVo patientAssessmentVo = domain.getPatientAssessment(form.recbrAssessments().getValue());		

			form.getLocalContext().setPatientAssessment(patientAssessmentVo);
			form.getLocalContext().setInitialAssessment(patientAssessmentVo != null?(PatientAssessmentVo)patientAssessmentVo.clone():null);

			form.lyrAssessments().tabPageGraphical().customControlDrawing().setPatientAssessment(patientAssessmentVo);
			form.lyrAssessments().tabPageGraphical().customAuthoringInfo().setValue(patientAssessmentVo.getAuthoringInformation());

			String stagesCaption = "Stages - ";
			int count = 0;
			for (int i = 0; i < patientAssessmentVo.getAssessmentData().getGraphic().getAssessmentStage().size(); i++)
			{
				GraphicAssessmentStageVo stage = patientAssessmentVo.getAssessmentData().getGraphic().getAssessmentStage().get(i);
				
				if(stage.getIsAnnotated() == null || stage.getIsAnnotated().booleanValue() == false)
				{
					form.lyrAssessments().tabPageFindings().cmbStage().newRow(stage, stage.getStageName());
					
					stagesCaption += (count == 0 ? "" : ", ");
					stagesCaption += stage.getStageName();
					count++;
				}
			}
			form.lyrAssessments().tabPageFindings().setCaption(stagesCaption);
			
			fillComboFindings(patientAssessmentVo, form.getLocalContext().getSelectedFindingId());
			form.lyrAssessments().tabPageFindings().cmbStage().setValue(form.getLocalContext().getSelectedStage());
		}
	}
	private void fillComboFindings(PatientAssessmentVo patientAssessmentVo, Integer autoselectId)
	{
		if(patientAssessmentVo.getAssessmentData().getGraphicFindingsIsNotNull() && patientAssessmentVo.getAssessmentData().getGraphicFindings().size() > 0)
		{
			PatientGraphicAssessmentVo pgaVo = patientAssessmentVo.getAssessmentData().getGraphicFindings().get(0);
			
			if(pgaVo.getPatientGraphicFindingIsNotNull())
			{
				for (int i = 0; i < pgaVo.getPatientGraphicFinding().size(); i++)
				{
					PatientGraphicAssessmentFindingVo pgafVo = pgaVo.getPatientGraphicFinding().get(i);
					
					String displayText = pgafVo.getGraphicFinding().getDisplayText();
					
					displayText += " - " + pgafVo.getAreaName();
					displayText += " - " + (pgafVo.getAreaDetailsIsNotNull() ? pgafVo.getAreaDetails() : "");
					
					if(pgafVo.getAuthoringInformationIsNotNull())
					{
						if(pgafVo.getAuthoringInformation().getAuthoringHcpIsNotNull())
							displayText += " - " + pgafVo.getAuthoringInformation().getAuthoringHcp().getName().toString();
						
						if(pgafVo.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
							displayText += ", " + pgafVo.getAuthoringInformation().getAuthoringDateTime().toString();
					}
					
					form.lyrAssessments().tabPageFindings().cmbFindings().newRow(pgafVo, displayText);
					
					if(pgafVo.getID_PatientGraphicAssessmentFindingIsNotNull() && pgafVo.getID_PatientGraphicAssessmentFinding().equals(autoselectId))
					{
						form.lyrAssessments().tabPageFindings().cmbFindings().setValue(pgafVo);
					}
				}
			}
		}
	}
	private void clearScreen()
	{
		form.lyrAssessments().tabPageGraphical().customAuthoringInfo().setValue(null);
		form.lyrAssessments().tabPageGraphical().customControlDrawing().clearScreen();
		
		form.lyrAssessments().tabPageFindings().cmbFindings().clear();
		form.lyrAssessments().tabPageFindings().cmbStage().clear();
		form.lyrAssessments().tabPageFindings().dyngrdFindingDetails().clear();
		form.lyrAssessments().tabPageFindings().cmbAnswers().clear();
	}
	private boolean isPainAssessment()
	{
		return UserDefinedAssessmentType.PAINASSESSMENT.equals(form.getLocalContext().getAssessmentType());
	}
	private boolean isSkinAssessment()
	{
		return UserDefinedAssessmentType.SKINASSESSMENT.equals(form.getLocalContext().getAssessmentType());
	}
	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.lyrAssessments().tabPageGraphical().customControlDrawing().setEnabled(Boolean.TRUE);
		form.lyrAssessments().tabPageGraphical().customControlDrawing().setReadOnly(Boolean.FALSE);
		
		form.lyrAssessments().tabPageGraphical().customAuthoringInfo().setEnabledAuthoringHCP(Boolean.FALSE);
		form.lyrAssessments().tabPageGraphical().customAuthoringInfo().setEnabledDateTime(Boolean.FALSE);
	}
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (doSave())
		{
			open();
		}
	}
	private boolean doSave()
	{
		PatientAssessmentVo patientAssessment = form.lyrAssessments().tabPageGraphical().customControlDrawing().getPatientAssessment();
		
		if(checkInputData(patientAssessment) == false)
			return false;
		
		patientAssessment.setAuthoringInformation(form.lyrAssessments().tabPageGraphical().customAuthoringInfo().getValue());
		
		patientAssessment = DynamicAssessmentHelper.populateHCPDataForAnswers(form.getLocalContext().getInitialAssessment(), patientAssessment, (HcpLiteVo)domain.getHcpLiteUser(), new DateTime());
		
		String[] errors = patientAssessment.validate();

		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			patientAssessment = domain.savePatientAssessment(patientAssessment);
			form.getLocalContext().setPatientAssessment(patientAssessment);
			form.getLocalContext().setInitialAssessment(patientAssessment != null?(PatientAssessmentVo)patientAssessment.clone():null);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setPatientAssessment(patientAssessment);
			form.getLocalContext().setInitialAssessment(patientAssessment != null?(PatientAssessmentVo)patientAssessment.clone():null);
			open();
			return false;
		}
		
		return true;
	}
	boolean checkInputData(PatientAssessmentVo patientAssessment)
	{
		if(patientAssessment.getAssessmentData() == null
				|| patientAssessment.getAssessmentData().getGraphicFindings() == null
				|| patientAssessment.getAssessmentData().getGraphicFindings().size() == 0)
		{
			engine.showMessage("Please add at least one finding !");
			return false;
		}

		AuthoringInformationVo authoringInfo = form.lyrAssessments().tabPageGraphical().customAuthoringInfo().getValue();
		if(authoringInfo == null)
		{
			engine.showMessage("Please enter Authoring HCP and Authoring Date/Time !");
			return false;
		}
		if(authoringInfo.getAuthoringHcp() == null)
		{
			engine.showMessage("Please enter Authoring HCP !");
			return false;
		}
		if(authoringInfo.getAuthoringDateTime() == null)
		{
			engine.showMessage("Please enter Authoring Date/Time !");
			return false;
		}

		
		return true;
	}
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}
	
	private GraphicAssessmentRefVo getLastActiveGraphicAssessment()
	{
		if(form.recbrAssessments().getValues() == null || form.recbrAssessments().getValues().size() == 0)
			return null;
		
		for (int i = 0; i < form.recbrAssessments().getValues().size(); i++)
		{
			PatientAssessmentListVo item = (PatientAssessmentListVo) form.recbrAssessments().getValues().get(i);
			
			if(item.getIsCurrentForTypeIsNotNull() && item.getIsCurrentForType().booleanValue())
				return item.getAssessmentData().getGraphic();
		}
		
		return null;
	}
	protected void onCmbFindingsValueChanged() throws PresentationLogicException
	{
		displayQuestionsAndAnswers();
		updateContextMenu();
	}
	protected void onCmbStageValueChanged() throws PresentationLogicException
	{
		displayQuestionsAndAnswers();
		updateContextMenu();
	}
	private void updateContextMenu()
	{
		form.getContextMenus().hideAllAnswerGraphicStageMenuItems();
		
		if(form.lyrAssessments().tabPageFindings().cmbFindings().getValue() == null || form.lyrAssessments().tabPageFindings().cmbStage().getValue() == null)
			return;
		
		form.getContextMenus().getAnswerGraphicStageADDItem().setText("Add new " + form.lyrAssessments().tabPageFindings().cmbStage().getValue().getStageName());
		form.getContextMenus().getAnswerGraphicStageADDItem().setVisible(true);
	}
	private void displayQuestionsAndAnswers()
	{
		DynamicGrid grid = form.lyrAssessments().tabPageFindings().dyngrdFindingDetails();

		grid.getRows().clear();
		grid.getColumns().clear();
		
		if(form.lyrAssessments().tabPageFindings().cmbFindings().getValue() == null || form.lyrAssessments().tabPageFindings().cmbStage().getValue() == null)
			return;
		
		createDynamicGridColumns(grid, form.lyrAssessments().tabPageFindings().cmbFindings().getValue(), form.lyrAssessments().tabPageFindings().cmbStage().getValue());

		//authoring information
		DynamicGridRow row = grid.getRows().newRow();
		DynamicGridCell cell = row.getCells().newCell(grid.getColumns().getByIdentifier(COLUMN_QUESTION), DynamicCellType.LABEL);
		cell.setValue("Authoring HCP");
		cell.setTextColor(Color.Navy);
		row.setBackColor(Color.Beige);
		row.setValue(null);
		row = grid.getRows().newRow();
		cell = row.getCells().newCell(grid.getColumns().getByIdentifier(COLUMN_QUESTION), DynamicCellType.LABEL);
		cell.setValue("Authoring Date/Time");
		cell.setTextColor(Color.Navy);
		row.setValue(null);
		row.setBackColor(Color.Beige);
		
		//display questions from configuration
		GraphicAssessmentVo graphicAssessmentVo = form.getLocalContext().getPatientAssessment().getAssessmentData().getGraphic();
		
		if(graphicAssessmentVo.getFindingsAndQuestionsIsNotNull())
		{
			for (int i = 0; i < graphicAssessmentVo.getFindingsAndQuestions().size(); i++)
			{
				GraphicAssessmentFindingVo gafVo = graphicAssessmentVo.getFindingsAndQuestions().get(i);
				
				if(gafVo.getFinding().equals(form.lyrAssessments().tabPageFindings().cmbFindings().getValue().getGraphicFinding()))
				{
					if(gafVo.getFindingStageIsNotNull())
					{
						for (int j = 0; j < gafVo.getFindingStage().size(); j++)
						{
							FindingStageQuestionsVo fsqVo = gafVo.getFindingStage().get(j);
							
							if(fsqVo.getAssessmentStage().equals(form.lyrAssessments().tabPageFindings().cmbStage().getValue()))
							{
								if(fsqVo.getAssociatedQuestionsIsNotNull())
								{
									fsqVo.getAssociatedQuestions().sort();
									for (int k = 0; k < fsqVo.getAssociatedQuestions().size(); k++)
									{
										GraphicAssessmentFindingQuestionVo gafqVo = fsqVo.getAssociatedQuestions().get(k);
										
										row = grid.getRows().newRow();
										
										cell = row.getCells().newCell(grid.getColumns().getByIdentifier(COLUMN_QUESTION), DynamicCellType.LABEL);
										cell.setValue(gafqVo.getQuestion().getText());
										
										row.setValue(gafqVo.getQuestion());
									}
								}
								break;
							}
						}
					}
					break;
				}
			}
		}

		//display answers from instantiations
		PatientGraphicAssessmentFindingVo pgafVo = form.lyrAssessments().tabPageFindings().cmbFindings().getValue();
		GraphicAssessmentStageVo gasVo = form.lyrAssessments().tabPageFindings().cmbStage().getValue();

		TreeMap sortedMap = new TreeMap();
		
		form.lyrAssessments().tabPageFindings().cmbAnswers().clear();
		if(pgafVo.getStageIsNotNull())
		{
			for (int i = 0; i < pgafVo.getStage().size(); i++)
			{
				PatientGraphicalAssessmentStageVo pgasVo = pgafVo.getStage().get(i);
				//Modified for WDEV-8171
				if(pgasVo!=null && pgasVo.getStageIsNotNull() && pgasVo.getStage().getAssessmentStageIsNotNull() && pgasVo.getStage().getAssessmentStage().equals(gasVo))
				{
					pgasVo = pgafVo.getStage().get(i);
					
					String key = "_" + i;
					
					if(pgasVo.getAuthoringInformationIsNotNull() && pgasVo.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
						key = pgasVo.getAuthoringInformation().getAuthoringDateTime().toString() + key;
					
					sortedMap.put(key, pgasVo);
				}
			}
			
			PatientGraphicalAssessmentStageVoCollection coll = new PatientGraphicalAssessmentStageVoCollection();
			Object[] keys = sortedMap.keySet().toArray();
			
			for (int i = keys.length - 1; i >= 0; i--)
			{
				String key = (String) keys[i];
				
				PatientGraphicalAssessmentStageVo pgasVo = (PatientGraphicalAssessmentStageVo) sortedMap.get(key);
				
				String displayText = pgasVo.getStage().getAssessmentStage().getStageName();
				
				if(pgasVo.getAuthoringInformationIsNotNull())
				{
					if(pgasVo.getAuthoringInformation().getAuthoringHcpIsNotNull())
						displayText += " - " + pgasVo.getAuthoringInformation().getAuthoringHcp().getName().toString();
					
					if(pgasVo.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
						displayText += ", " + pgasVo.getAuthoringInformation().getAuthoringDateTime().toString();
				}
				
				form.lyrAssessments().tabPageFindings().cmbAnswers().newRow(pgasVo, displayText);
				
				coll.add(pgasVo);
			}
			
			form.getLocalContext().setPatientGraphicalAssessmentStageColl(coll);
			
			displayPaginatedCollection(0);
			form.getLocalContext().setCurrentIndex(new Integer(0));
		}
	}
	
	private void displayPaginatedCollection(int start)
	{
		PatientGraphicalAssessmentStageVoCollection coll = form.getLocalContext().getPatientGraphicalAssessmentStageColl();
		DynamicGrid grid = form.lyrAssessments().tabPageFindings().dyngrdFindingDetails();
		
		if(coll != null || coll.size() > 0)
		{
			int index = 0;
			for (int i = start; i < coll.size(); i++)
			{
				if(index >= MAX_COL)
					break;
				
				PatientGraphicalAssessmentStageVo pgasVo = coll.get(i);
				
				//authoring hcp
				if(grid.getRows().size() > 0 && pgasVo.getAuthoringInformationIsNotNull() && pgasVo.getAuthoringInformation().getAuthoringHcpIsNotNull())
				{
					DynamicGridRow row = grid.getRows().get(0);
					DynamicGridCell cell = row.getCells().newCell(grid.getColumns().getByIdentifier(new Integer(index + 1)), DynamicCellType.LABEL);
					cell.setValue(pgasVo.getAuthoringInformation().getAuthoringHcp().toString());
					cell.setTextColor(Color.Navy);
				}
				//authoring date/time
				if(grid.getRows().size() > 1 && pgasVo.getAuthoringInformationIsNotNull() && pgasVo.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
				{
					DynamicGridRow row = grid.getRows().get(1);
					DynamicGridCell cell = row.getCells().newCell(grid.getColumns().getByIdentifier(new Integer(index + 1)), DynamicCellType.LABEL);
					cell.setValue(pgasVo.getAuthoringInformation().getAuthoringDateTime().toString());
					cell.setTextColor(Color.Navy);
				}
				
				for (int j = 2; j < grid.getRows().size(); j++)
				{
					DynamicGridRow row = grid.getRows().get(j);
					
					if(row.getValue() instanceof QuestionInformationVo)
					{
						DynamicGridCell cell = row.getCells().newCell(grid.getColumns().getByIdentifier(new Integer(index + 1)), DynamicCellType.HTMLVIEW);
						cell.setValue(getAnswer(pgasVo, (QuestionInformationVo)row.getValue()));
					}
				}
				
				index++;
			}
		}
		
		updatePrevNextButtons(start);
	}
	private String getAnswer(PatientGraphicalAssessmentStageVo pgasVo, QuestionInformationVo questionInformationVo)
	{
		if(pgasVo.getFindingQuestion() == null)
			return null;

		StringBuffer sb = new StringBuffer();
		
		for (int i = 0; i < pgasVo.getFindingQuestion().size(); i++)
		{
			PatientGraphicAssessmentFindingQuestionAnswerVo pgafqaVo = pgasVo.getFindingQuestion().get(i);
			
			if(pgafqaVo.getGraphicFindingQuestionIsNotNull() && questionInformationVo.equals(pgafqaVo.getGraphicFindingQuestion().getQuestion()))
			{
				if(pgafqaVo.getPatientAnswersIsNotNull())
				{
					for (int j = 0; j < pgafqaVo.getPatientAnswers().size(); j++)
					{
						PatientAssessmentAnswerVo paaVo = pgafqaVo.getPatientAnswers().get(j);
						
						if(paaVo.getAnswerDetailsIsNotNull())
						{
							for (int k = 0; k < paaVo.getAnswerDetails().size(); k++)
							{
								AnswerDetailsVo answerDetailsVo = paaVo.getAnswerDetails().get(k);
								
								if(answerDetailsVo.getAnswerType().getAnswerType().equals(QuestionAnswerType.MULTISELECT))
								{
									int size = answerDetailsVo.getMultiSelectAnswers().size();
									boolean added = false;
									for (int x = 0; x < size; x++)
									{
										AnswerOptionVo multi = answerDetailsVo.getMultiSelectAnswers().get(x);
										
										if(multi.getOptionTextIsNotNull())
										{
											if(added == true)
												sb.append("<font color=#666666>; </font>");
											
											sb.append(multi.getOptionText());
											added = true;
										}
									}
									sb.append("<br>");
								}
								else if(answerDetailsVo.getAnswerType().getAnswerType().equals(QuestionAnswerType.SEPARATOR))
								{
									//sb.append("<br>");
									sb.append("<font color=#0000FF>" + answerDetailsVo.getAnswerType().getSeparatorText() + "</font>");
								}
								else
								{
									String answer = UserAssessmentInstHelper.getAnswerDetail(answerDetailsVo);
									sb.append(answer);
									sb.append("<br>");
								}
								
								//System.out.println(answerDetailsVo.getAnswerType().getSeparatorText());
							}
						//sb.append("<br>");
						}
					}
					return sb.toString();	
				}
			}
		}
		
		return null;
	}
	private void updatePrevNextButtons(int start)
	{
		PatientGraphicalAssessmentStageVoCollection coll = form.getLocalContext().getPatientGraphicalAssessmentStageColl();

		if(coll == null || coll.size() == 0)
		{
			form.lyrAssessments().tabPageFindings().btnFirst().setEnabled(false);
			form.lyrAssessments().tabPageFindings().btnPrev().setEnabled(false);
			form.lyrAssessments().tabPageFindings().btnNext().setEnabled(false);
			form.lyrAssessments().tabPageFindings().btnLast().setEnabled(false);
		}
		else
		{
			form.lyrAssessments().tabPageFindings().btnFirst().setEnabled(start > 0);
			form.lyrAssessments().tabPageFindings().btnPrev().setEnabled(start > 0);
			form.lyrAssessments().tabPageFindings().btnNext().setEnabled(start + MAX_COL < coll.size());
			form.lyrAssessments().tabPageFindings().btnLast().setEnabled(start + MAX_COL < coll.size());
		}
	}
	private void createDynamicGridColumns(DynamicGrid grid, PatientGraphicAssessmentFindingVo pgafVo, GraphicAssessmentStageVo gasVo)
	{
		grid.getColumns().clear();
		
		DynamicGridColumn col = grid.getColumns().newColumn("Question", COLUMN_QUESTION);
		col.setWidth(FIRST_COL_WIDTH);

		for (int i = 0; i < MAX_COL; i++)
		{
			col = grid.getColumns().newColumn(" ", new Integer(i+1));
			col.setWidth((800 - FIRST_COL_WIDTH - 20) / MAX_COL);
			
		}
		
		/*
		if(pgafVo.getStageIsNotNull())
		{
			for (int i = 0; i < pgafVo.getStage().size(); i++)
			{
				PatientGraphicalAssessmentStageVo pgasVo = pgafVo.getStage().get(i);
				
				if(pgasVo.getStage().getAssessmentStage().equals(gasVo))
				{
					if(pgasVo.getFindingQuestionIsNotNull())
					{
						for (int j = 0; j < pgasVo.getFindingQuestion().size(); j++)
						{
							PatientGraphicAssessmentFindingQuestionAnswerVo pgafqaVo = pgasVo.getFindingQuestion().get(j);

							col = grid.getColumns().newColumn(" ", pgafqaVo.getID_PatientGraphicAssessmentFindingQuestionAnswer());
							col.setWidth(60);
						}
					}
					break;
				}
			}
		}
		*/
	}
	protected void onBtnUpdateAnswerClick() throws PresentationLogicException
	{
		if(form.lyrAssessments().tabPageFindings().cmbAnswers().getValue() == null)
		{
			engine.showMessage("Please select a record to update !");
			return;
		}
		
		updateAnswerGraphicStage();
	}
	private void updateAnswerGraphicStage()
	{
		PatientAssessmentVo voPatAssessment = form.getLocalContext().getPatientAssessment();

		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = form.lyrAssessments().tabPageFindings().cmbFindings().getValue();
		
		PatientGraphicalAssessmentStageVo pgasVo = form.lyrAssessments().tabPageFindings().cmbAnswers().getValue();
		
		form.getGlobalContext().Core.setPatientGraphicAssessmentFinding(voPatientGraphicAssessmentFinding);
		form.getGlobalContext().Core.setPatientAssessmentFull(voPatAssessment);
		form.getGlobalContext().Assessment.setAutoSubmit(null);
		form.getGlobalContext().Assessment.setPatientGraphicalAssessmentStage(pgasVo);
			
		engine.open(form.getForms().Assessment.GraphicAssessmentInstantiationFindingCustom);
	}
	protected void onBtnLastClick() throws PresentationLogicException
	{
		PatientGraphicalAssessmentStageVoCollection coll = form.getLocalContext().getPatientGraphicalAssessmentStageColl();
		int index = coll.size() - MAX_COL;
		displayPaginatedCollection(index);
		form.getLocalContext().setCurrentIndex(new Integer(index));
	}
	protected void onBtnFirstClick() throws PresentationLogicException
	{
		displayPaginatedCollection(0);
		form.getLocalContext().setCurrentIndex(new Integer(0));
	}
	protected void onBtnNextClick() throws PresentationLogicException
	{
		int index = form.getLocalContext().getCurrentIndex().intValue() + 1;
		displayPaginatedCollection(index);
		form.getLocalContext().setCurrentIndex(new Integer(index));
	}
	protected void onBtnPrevClick() throws PresentationLogicException
	{
		int index = form.getLocalContext().getCurrentIndex().intValue() - 1;
		displayPaginatedCollection(index);
		form.getLocalContext().setCurrentIndex(new Integer(index));
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.AnswerGraphicStage.ADD :
				addAnswerGraphicStage();
				break;

			default :
				break;
		}
		
	}
	private void addAnswerGraphicStage()
	{
		PatientAssessmentVo voPatAssessment = form.getLocalContext().getPatientAssessment();

		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = form.lyrAssessments().tabPageFindings().cmbFindings().getValue();
		
		PatientGraphicalAssessmentStageVo pgasVo = new PatientGraphicalAssessmentStageVo();
		
		pgasVo.setStage(getFindingStageQuestions(voPatAssessment.getAssessmentData().getGraphic(), voPatientGraphicAssessmentFinding.getGraphicFinding(), form.lyrAssessments().tabPageFindings().cmbStage().getValue()));
		pgasVo.setFindingQuestion(getFindingQuestion(voPatAssessment.getAssessmentData(), voPatientGraphicAssessmentFinding.getGraphicFinding().getID_DrawingGraphicFinding().intValue(), form.lyrAssessments().tabPageFindings().cmbStage().getValue()));
		
		form.getGlobalContext().Core.setPatientGraphicAssessmentFinding(voPatientGraphicAssessmentFinding);
		form.getGlobalContext().Core.setPatientAssessmentFull(voPatAssessment);
		form.getGlobalContext().Assessment.setAutoSubmit(null);
		form.getGlobalContext().Assessment.setPatientGraphicalAssessmentStage(pgasVo);
			
		engine.open(form.getForms().Assessment.GraphicAssessmentInstantiationFindingCustom);
	}
	private FindingStageQuestionsVo getFindingStageQuestions(GraphicAssessmentVo graphic, DrawingGraphicFindingVo graphicFinding, GraphicAssessmentStageVo stage)
	{
		if(graphic.getFindingsAndQuestionsIsNotNull())
		{
			for (int i = 0; i < graphic.getFindingsAndQuestions().size(); i++)
			{
				GraphicAssessmentFindingVo gafVo = graphic.getFindingsAndQuestions().get(i);
				
				if(gafVo.getFindingIsNotNull() && gafVo.getFinding().equals(graphicFinding) && gafVo.getFindingStageIsNotNull())
				{
					for (int j = 0; j < gafVo.getFindingStage().size(); j++)
					{
						FindingStageQuestionsVo fsqVo = gafVo.getFindingStage().get(j);
						
						if(fsqVo.getAssessmentStageIsNotNull() && fsqVo.getAssessmentStage().equals(stage))
							return fsqVo;
					}
				}
			}
		}
		
		return null;
	}
	private PatientGraphicAssessmentFindingQuestionAnswerVoCollection getFindingQuestion(PatientAssessmentDataVo voPatAssessmentData, int brushId, GraphicAssessmentStageVo stageVo)
	{
		GraphicAssessmentFindingVoCollection findingColl = voPatAssessmentData.getGraphic().getFindingsAndQuestions();
		GraphicAssessmentFindingQuestionVoCollection questions = null;
		PatientGraphicAssessmentFindingQuestionAnswerVoCollection findingQuestions = new PatientGraphicAssessmentFindingQuestionAnswerVoCollection();
		if (findingColl != null)
		{
			for (int i = 0; i < findingColl.size(); i++)
			{
				if (findingColl.get(i).getFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFinding().intValue() == brushId)
				{
					if(findingColl.get(i).getFindingStageIsNotNull() && findingColl.get(i).getFindingStage().size() > 0)
					{
						for (int j = 0; j < findingColl.get(i).getFindingStage().size(); j++)
						{
							if(findingColl.get(i).getFindingStage().get(j).getAssessmentStageIsNotNull() && findingColl.get(i).getFindingStage().get(j).getAssessmentStage().equals(stageVo))
							{
								questions = findingColl.get(i).getFindingStage().get(j).getAssociatedQuestions();
								break;
							}
						}
					}
					
				}
			}
		}

		if (questions != null)
		{
			for (int i = 0; i < questions.size(); i++)
			{
				ims.assessment.vo.GraphicAssessmentFindingQuestionVo voFindingQuestion = questions.get(i);
				PreActiveActiveInactiveStatus findingStatus = voFindingQuestion.getActiveStatus();
				//WDEV-1211 - Go back to configurtation for every new findings 
				if (findingStatus != null && findingStatus.equals(PreActiveActiveInactiveStatus.ACTIVE))
				{
					PatientGraphicAssessmentFindingQuestionAnswerVo voPGAFQuestion = new PatientGraphicAssessmentFindingQuestionAnswerVo();
					voPGAFQuestion.setGraphicFindingQuestion(voFindingQuestion);
					voPGAFQuestion.setIsAnswered(new Boolean(false));
					voPGAFQuestion.setIsMandatory(voFindingQuestion.getIsMandatory());
					findingQuestions.add(voPGAFQuestion);
				}
			}
		}

		return findingQuestions;
	}
	protected void onImbHelpUrlClick() throws PresentationLogicException
	{
		PatientAssessmentVo assessment = form.getLocalContext().getPatientAssessment();
		
		if(assessment != null && assessment.getAssessmentDataIsNotNull() && assessment.getAssessmentData().getGraphicIsNotNull() && assessment.getAssessmentData().getGraphic().getHelpUrlIsNotNull() && assessment.getAssessmentData().getGraphic().getHelpUrl().trim().length() > 0)
		{
			engine.openUrl(assessment.getAssessmentData().getGraphic().getHelpUrl());
		}
		else
		{
			engine.showMessage("No help was associated with this assessment");
		}
	}
	
	private void enableHelpUrlImage()
	{
		PatientAssessmentVo assessment = form.getLocalContext().getPatientAssessment();
		boolean enableHelpUrlButton = assessment != null && assessment.getAssessmentDataIsNotNull() && assessment.getAssessmentData().getGraphicIsNotNull() && assessment.getAssessmentData().getGraphic().getHelpUrlIsNotNull() && assessment.getAssessmentData().getGraphic().getHelpUrl().trim().length() > 0;
		form.imbHelpUrl().setEnabled(enableHelpUrlButton);
	}
	@Override
	protected void onCmbAnswersChanged()throws PresentationLogicException
	{
		
			
			if(form.lyrAssessments().tabPageFindings().cmbAnswers().getValue()!= null)
			{
				form.lyrAssessments().tabPageFindings().btnUpdateAnswer().setEnabled(true);
				return;
			}
			
			form.lyrAssessments().tabPageFindings().btnUpdateAnswer().setEnabled(false);
			
	}
		
	
	
	
}
