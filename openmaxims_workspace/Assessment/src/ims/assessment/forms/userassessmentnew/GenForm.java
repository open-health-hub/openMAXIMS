//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.userassessmentnew;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrTabsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabAssessmentsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 352, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuUserAssessmentNew, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public DynamicGrid dyngrdDetails()
			{
				return (DynamicGrid)super.getControl(0);
			}
		}
		public static class tabGroupsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdGroupsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdGroupsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolNameOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolName()
				{
					return (String)super.row.get(0);
				}
				public void setcolName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolDescriptionReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolDescriptionReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolDescriptionOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolDescription()
				{
					return (String)super.row.get(1);
				}
				public void setcolDescription(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolDescriptionTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(2);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getcolStatus()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.row.get(2);
				}
				public void setcolStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.row.set(2, value, true);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolScoreReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolScoreReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolScoreOpened()
				{
					super.row.showOpened(3);
				}
				public String getcolScore()
				{
					return (String)super.row.get(3);
				}
				public void setcolScore(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolScoreTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.core.vo.AssessmentQuestionGroupVo getValue()
				{
					return (ims.core.vo.AssessmentQuestionGroupVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.AssessmentQuestionGroupVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdGroupsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdGroupsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdGroupsRow get(int index)
				{
					return new grdGroupsRow(super.collection.get(index));
				}
				public grdGroupsRow newRow()
				{
					return new grdGroupsRow(super.collection.newRow());
				}
				public grdGroupsRow newRow(boolean autoSelect)
				{
					return new grdGroupsRow(super.collection.newRow(autoSelect));
				}
				public grdGroupsRow newRowAt(int index)
				{
					return new grdGroupsRow(super.collection.newRowAt(index));
				}
				public grdGroupsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdGroupsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdGroupsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public ims.core.vo.AssessmentQuestionGroupVoCollection getValues()
				{
					ims.core.vo.AssessmentQuestionGroupVoCollection listOfValues = new ims.core.vo.AssessmentQuestionGroupVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.AssessmentQuestionGroupVo getValue()
				{
					return (ims.core.vo.AssessmentQuestionGroupVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.AssessmentQuestionGroupVo value)
				{
					super.grid.setValue(value);
				}
				public grdGroupsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdGroupsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdGroupsRowCollection getRows()
				{
					return new grdGroupsRowCollection(super.grid.getRows());
				}
				public grdGroupsRow getRowByValue(ims.core.vo.AssessmentQuestionGroupVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdGroupsRow(row);
				}
				public void setcolNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolDescriptionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolDescriptionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public GridComboBox colStatusComboBox()
				{
					return new GridComboBox(super.grid, 2);
				}
				public void setcolScoreHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolScoreHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 352, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdGroupsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuUserAssessmentGroup, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdGroupsTemp);
				grdGroupsGrid grdGroups = (grdGroupsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdGroupsGrid.class, m_grdGroupsTemp);
				grdGroups.addStringColumn("Name", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdGroups.addStringColumn("Description", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdGroups.addComboBoxColumn("Status", 0, 0, 100, true, true, false, false, true, -1);
				grdGroups.addStringColumn("Score", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdGroups);
			}

			public grdGroupsGrid grdGroups()
			{
				return (grdGroupsGrid)super.getGrid(0);
			}
		}
		public static class tabRolesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdRolesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdRolesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolImageReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolImageReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolImageOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Image getcolImage()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setcolImage(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellcolImageTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolRoleReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolRoleReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolRoleOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolRole()
				{
					return (String)super.row.get(1);
				}
				public void setcolRole(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolRoleTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolAnswerAllReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolAnswerAllReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolAnswerAllOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getcolAnswerAll()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setcolAnswerAll(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellcolAnswerAllTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.assessment.vo.AssessmentRoleVo getValue()
				{
					return (ims.assessment.vo.AssessmentRoleVo)super.row.getValue();
				}
				public void setValue(ims.assessment.vo.AssessmentRoleVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdRolesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdRolesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdRolesRow get(int index)
				{
					return new grdRolesRow(super.collection.get(index));
				}
				public grdRolesRow newRow()
				{
					return new grdRolesRow(super.collection.newRow());
				}
				public grdRolesRow newRow(boolean autoSelect)
				{
					return new grdRolesRow(super.collection.newRow(autoSelect));
				}
				public grdRolesRow newRowAt(int index)
				{
					return new grdRolesRow(super.collection.newRowAt(index));
				}
				public grdRolesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdRolesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdRolesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.assessment.vo.AssessmentRoleVoCollection getValues()
				{
					ims.assessment.vo.AssessmentRoleVoCollection listOfValues = new ims.assessment.vo.AssessmentRoleVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.assessment.vo.AssessmentRoleVo getValue()
				{
					return (ims.assessment.vo.AssessmentRoleVo)super.grid.getValue();
				}
				public void setValue(ims.assessment.vo.AssessmentRoleVo value)
				{
					super.grid.setValue(value);
				}
				public grdRolesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdRolesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdRolesRowCollection getRows()
				{
					return new grdRolesRowCollection(super.grid.getRows());
				}
				public grdRolesRow getRowByValue(ims.assessment.vo.AssessmentRoleVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdRolesRow(row);
				}
				public void setcolImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolRoleHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolRoleHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolAnswerAllHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolAnswerAllHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 272, 8, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Questions:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Roles:", new Integer(1), null, new Integer(0)}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 256, 336, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdRolesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdRolesTemp);
				grdRolesGrid grdRoles = (grdRolesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRolesGrid.class, m_grdRolesTemp);
				grdRoles.addImageColumn(" ", 0, 0, 20, true, 0);
				grdRoles.addStringColumn("Role", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdRoles.addBoolColumn("Answer All", 1, 1, -1, false, true, 0, true);
				super.addGrid(grdRoles);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 272, 24, 544, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public grdRolesGrid grdRoles()
			{
				return (grdRolesGrid)super.getGrid(0);
			}
			public DynamicGrid dyngrdQuestions()
			{
				return (DynamicGrid)super.getControl(3);
			}
		}
		public static class tabSpecialtiesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSpecialtyRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSpecialtyRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolSpecialtyReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolSpecialtyReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolSpecialtyOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolSpecialty()
				{
					return (String)super.row.get(0);
				}
				public void setcolSpecialty(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolSpecialtyTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.row.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSpecialtyRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSpecialtyRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSpecialtyRow get(int index)
				{
					return new grdSpecialtyRow(super.collection.get(index));
				}
				public grdSpecialtyRow newRow()
				{
					return new grdSpecialtyRow(super.collection.newRow());
				}
				public grdSpecialtyRow newRow(boolean autoSelect)
				{
					return new grdSpecialtyRow(super.collection.newRow(autoSelect));
				}
				public grdSpecialtyRow newRowAt(int index)
				{
					return new grdSpecialtyRow(super.collection.newRowAt(index));
				}
				public grdSpecialtyRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSpecialtyRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSpecialtyGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.lookups.Specialty[] getValues()
				{
					ims.core.vo.lookups.Specialty[] listOfValues = new ims.core.vo.lookups.Specialty[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.grid.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.grid.setValue(value);
				}
				public grdSpecialtyRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSpecialtyRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSpecialtyRowCollection getRows()
				{
					return new grdSpecialtyRowCollection(super.grid.getRows());
				}
				public grdSpecialtyRow getRowByValue(ims.core.vo.lookups.Specialty value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSpecialtyRow(row);
				}
				public void setcolSpecialtyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolSpecialtyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 196, 8, 432, 344, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSpecialtyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuLIP, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSpecialtyTemp);
				grdSpecialtyGrid grdSpecialty = (grdSpecialtyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpecialtyGrid.class, m_grdSpecialtyTemp);
				grdSpecialty.addStringColumn("Specialty", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSpecialty);
			}

			public grdSpecialtyGrid grdSpecialty()
			{
				return (grdSpecialtyGrid)super.getGrid(0);
			}
		}
		public static class tabTaxonomyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 192, 0, 432, 360, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccTaxonomyForm = loader.loadComponent(104124, appForm, startControlID * 10 + 1000, anchoringHelper8.getSize(), instance1, startTabIndex.intValue() + 33, skipContextValidation);
				//ims.framework.Control m_ccTaxonomyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(192), new Integer(0), new Integer(432), new Integer(360), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 33), m_ccTaxonomyForm, instance1 } );
				ims.framework.Control m_ccTaxonomyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 33), m_ccTaxonomyForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccTaxonomyControl);
				Menu[] menus1 = m_ccTaxonomyForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.admin.forms.taxonomymappings.IComponent ccTaxonomy()
			{
				return (ims.admin.forms.taxonomymappings.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccTaxonomyValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccTaxonomyVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccTaxonomyVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccTaxonomyEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccTaxonomyEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabHeaderTextContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 338, 104, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Maximum height:", new Integer(1), null, new Integer(0)}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 120, 336, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1035), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// Rich Text Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 320, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1034), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.FALSE, new Integer(5000)} ));
			}

			public IntBox intMaxHeaderHeight()
			{
				return (IntBox)super.getControl(1);
			}
			public RichTextControl richTextHeaderInfo()
			{
				return (RichTextControl)super.getControl(2);
			}
		}
		public static class tabFooterTextContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 338, 104, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Maximum height:", new Integer(1), null, new Integer(0)}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 336, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1038), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// Rich Text Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 320, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1037), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.FALSE, new Integer(5000)} ));
			}

			public IntBox intMaxFooterHeight()
			{
				return (IntBox)super.getControl(1);
			}
			public RichTextControl richTextFooterInfo()
			{
				return (RichTextControl)super.getControl(2);
			}
		}
		public static class tabServicesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdServicesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdServicesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColServiceReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColServiceOpened()
				{
					super.row.showOpened(0);
				}
				public String getColService()
				{
					return (String)super.row.get(0);
				}
				public void setColService(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColServiceTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.core.vo.ServiceShortVo getValue()
				{
					return (ims.core.vo.ServiceShortVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.ServiceShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdServicesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdServicesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdServicesRow get(int index)
				{
					return new grdServicesRow(super.collection.get(index));
				}
				public grdServicesRow newRow()
				{
					return new grdServicesRow(super.collection.newRow());
				}
				public grdServicesRow newRow(boolean autoSelect)
				{
					return new grdServicesRow(super.collection.newRow(autoSelect));
				}
				public grdServicesRow newRowAt(int index)
				{
					return new grdServicesRow(super.collection.newRowAt(index));
				}
				public grdServicesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdServicesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdServicesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.ServiceShortVoCollection getValues()
				{
					ims.core.vo.ServiceShortVoCollection listOfValues = new ims.core.vo.ServiceShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.ServiceShortVo getValue()
				{
					return (ims.core.vo.ServiceShortVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.ServiceShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdServicesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdServicesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdServicesRowCollection getRows()
				{
					return new grdServicesRowCollection(super.grid.getRows());
				}
				public grdServicesRow getRowByValue(ims.core.vo.ServiceShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdServicesRow(row);
				}
				public void setColServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 200, 8, 424, 344, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdServicesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Assessment.contextMenuServiceMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdServicesTemp);
				grdServicesGrid grdServices = (grdServicesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdServicesGrid.class, m_grdServicesTemp);
				grdServices.addStringColumn("Services", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdServices);
			}

			public grdServicesGrid grdServices()
			{
				return (grdServicesGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 832, 392, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAssessments = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Assessments", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAssessmentsContainer m_tabAssessmentsContainer = (tabAssessmentsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAssessmentsContainer.class, m_tabAssessments, factory);
			super.addContainer(m_tabAssessments, m_tabAssessmentsContainer);
			ims.framework.utils.SizeInfo m_tabAssessmentsDesignSize = new ims.framework.utils.SizeInfo(832, 392);
			ims.framework.utils.SizeInfo m_tabAssessmentsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
			m_tabAssessmentsContainer.setContext(form, appForm, m_tabAssessments, loader, form_images_local, contextMenus, startControlID, m_tabAssessmentsDesignSize, m_tabAssessmentsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 832, 392, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabGroups = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Assessment Groups", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabGroupsContainer m_tabGroupsContainer = (tabGroupsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGroupsContainer.class, m_tabGroups, factory);
			super.addContainer(m_tabGroups, m_tabGroupsContainer);
			ims.framework.utils.SizeInfo m_tabGroupsDesignSize = new ims.framework.utils.SizeInfo(832, 392);
			ims.framework.utils.SizeInfo m_tabGroupsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
			m_tabGroupsContainer.setContext(form, appForm, m_tabGroups, loader, form_images_local, contextMenus, startControlID, m_tabGroupsDesignSize, m_tabGroupsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 832, 392, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabRoles = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Roles", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabRolesContainer m_tabRolesContainer = (tabRolesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRolesContainer.class, m_tabRoles, factory);
			super.addContainer(m_tabRoles, m_tabRolesContainer);
			ims.framework.utils.SizeInfo m_tabRolesDesignSize = new ims.framework.utils.SizeInfo(832, 392);
			ims.framework.utils.SizeInfo m_tabRolesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper18.getWidth(), anchoringHelper18.getHeight());
			m_tabRolesContainer.setContext(form, appForm, m_tabRoles, loader, form_images_local, contextMenus, startControlID, m_tabRolesDesignSize, m_tabRolesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 832, 392, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSpecialties = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specialties", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSpecialtiesContainer m_tabSpecialtiesContainer = (tabSpecialtiesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecialtiesContainer.class, m_tabSpecialties, factory);
			super.addContainer(m_tabSpecialties, m_tabSpecialtiesContainer);
			ims.framework.utils.SizeInfo m_tabSpecialtiesDesignSize = new ims.framework.utils.SizeInfo(832, 392);
			ims.framework.utils.SizeInfo m_tabSpecialtiesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
			m_tabSpecialtiesContainer.setContext(form, appForm, m_tabSpecialties, loader, form_images_local, contextMenus, startControlID, m_tabSpecialtiesDesignSize, m_tabSpecialtiesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 832, 392, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTaxonomy = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Taxonomy Mappings", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTaxonomyContainer m_tabTaxonomyContainer = (tabTaxonomyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTaxonomyContainer.class, m_tabTaxonomy, factory);
			super.addContainer(m_tabTaxonomy, m_tabTaxonomyContainer);
			ims.framework.utils.SizeInfo m_tabTaxonomyDesignSize = new ims.framework.utils.SizeInfo(832, 392);
			ims.framework.utils.SizeInfo m_tabTaxonomyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
			m_tabTaxonomyContainer.setContext(form, appForm, m_tabTaxonomy, loader, form_images_local, contextMenus, startControlID, m_tabTaxonomyDesignSize, m_tabTaxonomyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 832, 392, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabHeaderText = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Header Information", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabHeaderTextContainer m_tabHeaderTextContainer = (tabHeaderTextContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHeaderTextContainer.class, m_tabHeaderText, factory);
			super.addContainer(m_tabHeaderText, m_tabHeaderTextContainer);
			ims.framework.utils.SizeInfo m_tabHeaderTextDesignSize = new ims.framework.utils.SizeInfo(832, 392);
			ims.framework.utils.SizeInfo m_tabHeaderTextRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
			m_tabHeaderTextContainer.setContext(form, appForm, m_tabHeaderText, loader, form_images_local, contextMenus, startControlID, m_tabHeaderTextDesignSize, m_tabHeaderTextRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 832, 392, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabFooterText = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Footer Information", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabFooterTextContainer m_tabFooterTextContainer = (tabFooterTextContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabFooterTextContainer.class, m_tabFooterText, factory);
			super.addContainer(m_tabFooterText, m_tabFooterTextContainer);
			ims.framework.utils.SizeInfo m_tabFooterTextDesignSize = new ims.framework.utils.SizeInfo(832, 392);
			ims.framework.utils.SizeInfo m_tabFooterTextRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
			m_tabFooterTextContainer.setContext(form, appForm, m_tabFooterText, loader, form_images_local, contextMenus, startControlID, m_tabFooterTextDesignSize, m_tabFooterTextRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 832, 392, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabServices = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Services", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabServicesContainer m_tabServicesContainer = (tabServicesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabServicesContainer.class, m_tabServices, factory);
			super.addContainer(m_tabServices, m_tabServicesContainer);
			ims.framework.utils.SizeInfo m_tabServicesDesignSize = new ims.framework.utils.SizeInfo(832, 392);
			ims.framework.utils.SizeInfo m_tabServicesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper23.getWidth(), anchoringHelper23.getHeight());
			m_tabServicesContainer.setContext(form, appForm, m_tabServices, loader, form_images_local, contextMenus, startControlID, m_tabServicesDesignSize, m_tabServicesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabAssessments().setVisible(false);
			tabGroups().setVisible(false);
			tabRoles().setVisible(false);
			tabSpecialties().setVisible(false);
			tabTaxonomy().setVisible(false);
			tabHeaderText().setVisible(false);
			tabFooterText().setVisible(false);
			tabServices().setVisible(false);
		}
		public void settabAssessmentsEnabled(boolean value)
		{
			tabAssessments().setEnabled(value);
		}
		public void settabGroupsEnabled(boolean value)
		{
			tabGroups().setEnabled(value);
		}
		public void settabRolesEnabled(boolean value)
		{
			tabRoles().setEnabled(value);
		}
		public void settabSpecialtiesEnabled(boolean value)
		{
			tabSpecialties().setEnabled(value);
		}
		public void settabTaxonomyEnabled(boolean value)
		{
			tabTaxonomy().setEnabled(value);
		}
		public void settabHeaderTextEnabled(boolean value)
		{
			tabHeaderText().setEnabled(value);
		}
		public void settabFooterTextEnabled(boolean value)
		{
			tabFooterText().setEnabled(value);
		}
		public void settabServicesEnabled(boolean value)
		{
			tabServices().setEnabled(value);
		}
		public void showtabAssessments()
		{
			tabGroups().setVisible(false);
			tabRoles().setVisible(false);
			tabSpecialties().setVisible(false);
			tabTaxonomy().setVisible(false);
			tabHeaderText().setVisible(false);
			tabFooterText().setVisible(false);
			tabServices().setVisible(false);
			tabAssessments().setVisible(true);
		}
		public void showtabGroups()
		{
			tabAssessments().setVisible(false);
			tabRoles().setVisible(false);
			tabSpecialties().setVisible(false);
			tabTaxonomy().setVisible(false);
			tabHeaderText().setVisible(false);
			tabFooterText().setVisible(false);
			tabServices().setVisible(false);
			tabGroups().setVisible(true);
		}
		public void showtabRoles()
		{
			tabAssessments().setVisible(false);
			tabGroups().setVisible(false);
			tabSpecialties().setVisible(false);
			tabTaxonomy().setVisible(false);
			tabHeaderText().setVisible(false);
			tabFooterText().setVisible(false);
			tabServices().setVisible(false);
			tabRoles().setVisible(true);
		}
		public void showtabSpecialties()
		{
			tabAssessments().setVisible(false);
			tabGroups().setVisible(false);
			tabRoles().setVisible(false);
			tabTaxonomy().setVisible(false);
			tabHeaderText().setVisible(false);
			tabFooterText().setVisible(false);
			tabServices().setVisible(false);
			tabSpecialties().setVisible(true);
		}
		public void showtabTaxonomy()
		{
			tabAssessments().setVisible(false);
			tabGroups().setVisible(false);
			tabRoles().setVisible(false);
			tabSpecialties().setVisible(false);
			tabHeaderText().setVisible(false);
			tabFooterText().setVisible(false);
			tabServices().setVisible(false);
			tabTaxonomy().setVisible(true);
		}
		public void showtabHeaderText()
		{
			tabAssessments().setVisible(false);
			tabGroups().setVisible(false);
			tabRoles().setVisible(false);
			tabSpecialties().setVisible(false);
			tabTaxonomy().setVisible(false);
			tabFooterText().setVisible(false);
			tabServices().setVisible(false);
			tabHeaderText().setVisible(true);
		}
		public void showtabFooterText()
		{
			tabAssessments().setVisible(false);
			tabGroups().setVisible(false);
			tabRoles().setVisible(false);
			tabSpecialties().setVisible(false);
			tabTaxonomy().setVisible(false);
			tabHeaderText().setVisible(false);
			tabServices().setVisible(false);
			tabFooterText().setVisible(true);
		}
		public void showtabServices()
		{
			tabAssessments().setVisible(false);
			tabGroups().setVisible(false);
			tabRoles().setVisible(false);
			tabSpecialties().setVisible(false);
			tabTaxonomy().setVisible(false);
			tabHeaderText().setVisible(false);
			tabFooterText().setVisible(false);
			tabServices().setVisible(true);
		}

		public tabAssessmentsContainer tabAssessments()
		{
			return (tabAssessmentsContainer)super.layers.get(0);
		}
		public tabGroupsContainer tabGroups()
		{
			return (tabGroupsContainer)super.layers.get(1);
		}
		public tabRolesContainer tabRoles()
		{
			return (tabRolesContainer)super.layers.get(2);
		}
		public tabSpecialtiesContainer tabSpecialties()
		{
			return (tabSpecialtiesContainer)super.layers.get(3);
		}
		public tabTaxonomyContainer tabTaxonomy()
		{
			return (tabTaxonomyContainer)super.layers.get(4);
		}
		public tabHeaderTextContainer tabHeaderText()
		{
			return (tabHeaderTextContainer)super.layers.get(5);
		}
		public tabFooterTextContainer tabFooterText()
		{
			return (tabFooterTextContainer)super.layers.get(6);
		}
		public tabServicesContainer tabServices()
		{
			return (tabServicesContainer)super.layers.get(7);
		}
	}
	public static class cmbCopyLastComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.assessment.vo.lookups.CopyLastAssessmentContextType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.assessment.vo.lookups.CopyLastAssessmentContextType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.assessment.vo.lookups.CopyLastAssessmentContextType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.assessment.vo.lookups.CopyLastAssessmentContextType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.assessment.vo.lookups.CopyLastAssessmentContextType value)
		{
			return super.control.removeRow(value);
		}
		public ims.assessment.vo.lookups.CopyLastAssessmentContextType getValue()
		{
			return (ims.assessment.vo.lookups.CopyLastAssessmentContextType)super.control.getValue();
		}
		public void setValue(ims.assessment.vo.lookups.CopyLastAssessmentContextType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbActiveStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
		{
			return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbScoringMethodComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.UserAssessmentScoringMethod value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.UserAssessmentScoringMethod value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.UserAssessmentScoringMethod value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.UserAssessmentScoringMethod value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.UserAssessmentScoringMethod value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.UserAssessmentScoringMethod getValue()
		{
			return (ims.core.vo.lookups.UserAssessmentScoringMethod)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.UserAssessmentScoringMethod value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbCategoryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.UserAssessmentCategory value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.UserAssessmentCategory value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.UserAssessmentCategory value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.UserAssessmentCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.UserAssessmentCategory value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.UserAssessmentCategory getValue()
		{
			return (ims.core.vo.lookups.UserAssessmentCategory)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.UserAssessmentCategory value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuUserAssessmentNew = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuUserAssessmentNewADD_GROUPItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Group", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessmentNew.add(contextMenus.contextMenuUserAssessmentNewADD_GROUPItem);
		contextMenus.contextMenuUserAssessmentNewEDIT_GROUPItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Group", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuUserAssessmentNew.add(contextMenus.contextMenuUserAssessmentNewEDIT_GROUPItem);
		contextMenus.contextMenuUserAssessmentNewREMOVE_GROUPItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove Group", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuUserAssessmentNew.add(contextMenus.contextMenuUserAssessmentNewREMOVE_GROUPItem);
		contextMenus.contextMenuUserAssessmentNewVIEW_GROUPItem = factory.createMenuItem(startControlID.intValue() + 4, "View Group", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuUserAssessmentNew.add(contextMenus.contextMenuUserAssessmentNewVIEW_GROUPItem);
		contextMenus.contextMenuUserAssessmentNewADD_QUESTIONItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Question", true, false, new Integer(102179), true, true);
		contextMenus.contextMenuUserAssessmentNew.add(contextMenus.contextMenuUserAssessmentNewADD_QUESTIONItem);
		contextMenus.contextMenuUserAssessmentNewEDIT_QUESTIONItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit Question", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuUserAssessmentNew.add(contextMenus.contextMenuUserAssessmentNewEDIT_QUESTIONItem);
		contextMenus.contextMenuUserAssessmentNewREMOVE_QUESTIONItem = factory.createMenuItem(startControlID.intValue() + 7, "Remove Question", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuUserAssessmentNew.add(contextMenus.contextMenuUserAssessmentNewREMOVE_QUESTIONItem);
		contextMenus.contextMenuUserAssessmentNewVIEW_QUESTIONItem = factory.createMenuItem(startControlID.intValue() + 8, "View Question", true, false, new Integer(102223), true, true);
		contextMenus.contextMenuUserAssessmentNew.add(contextMenus.contextMenuUserAssessmentNewVIEW_QUESTIONItem);
		contextMenus.contextMenuUserAssessmentNewMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 9, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuUserAssessmentNew.add(contextMenus.contextMenuUserAssessmentNewMOVE_UPItem);
		contextMenus.contextMenuUserAssessmentNewMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 10, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuUserAssessmentNew.add(contextMenus.contextMenuUserAssessmentNewMOVE_DOWNItem);
		form.registerMenu(contextMenus.contextMenuUserAssessmentNew);
		contextMenus.contextMenuUserAssessmentGroup = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuUserAssessmentGroupADDItem = factory.createMenuItem(startControlID.intValue() + 11, "Add Group", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessmentGroup.add(contextMenus.contextMenuUserAssessmentGroupADDItem);
		contextMenus.contextMenuUserAssessmentGroupEDITItem = factory.createMenuItem(startControlID.intValue() + 12, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuUserAssessmentGroup.add(contextMenus.contextMenuUserAssessmentGroupEDITItem);
		contextMenus.contextMenuUserAssessmentGroupREMOVEItem = factory.createMenuItem(startControlID.intValue() + 13, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuUserAssessmentGroup.add(contextMenus.contextMenuUserAssessmentGroupREMOVEItem);
		form.registerMenu(contextMenus.contextMenuUserAssessmentGroup);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 14, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 15, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 16, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 17, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 18, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 19, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 20, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 21, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 22, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.contextMenuLIP = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.contextMenuLIPNewItem = factory.createMenuItem(startControlID.intValue() + 23, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPNewItem);
		contextMenus.contextMenuLIPUpdateItem = factory.createMenuItem(startControlID.intValue() + 24, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPUpdateItem);
		form.registerMenu(contextMenus.contextMenuLIP);
		contextMenus.Assessment.contextMenuServiceMenu = factory.createMenu(startControlID.intValue() + 5);
		contextMenus.Assessment.contextMenuServiceMenuUPDATEItem = factory.createMenuItem(startControlID.intValue() + 25, "Update Services", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4440001)))
			contextMenus.Assessment.contextMenuServiceMenu.add(contextMenus.Assessment.contextMenuServiceMenuUPDATEItem);
		contextMenus.Assessment.contextMenuServiceMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 26, "Remove Service", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4440002)))
			contextMenus.Assessment.contextMenuServiceMenu.add(contextMenus.Assessment.contextMenuServiceMenuREMOVEItem);
		form.registerMenu(contextMenus.Assessment.contextMenuServiceMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Structured assessment", new Integer(1), ""}));

		// Layer Clasess
		lyrTabsLayer m_lyrTabsLayer = (lyrTabsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTabsLayer.class, this, factory);
		super.addLayer(m_lyrTabsLayer);
		m_lyrTabsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 146, 154, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Store printed Assessment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 136, 122, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Copy Last within the:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assessment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 116, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Can Copy Last", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 420, 122, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Report:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 420, 98, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "URL:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 420, 74, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 98, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Scoring method:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 74, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 420, 50, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Category:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 16, 50, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 778, 119, 53, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Clear", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 715, 119, 53, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Link", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1041), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Preview", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 1039), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 1043), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 686, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 1042), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 480, 120, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 480, 96, 320, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 112, 72, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 112, 48, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 264, 120, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbCopyLastTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbCopyLastTemp);
		cmbCopyLastComboBox cmbCopyLast = (cmbCopyLastComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCopyLastComboBox.class, m_cmbCopyLastTemp);
		super.addComboBox(cmbCopyLast);
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 480, 72, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbActiveStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbActiveStatusTemp);
		cmbActiveStatusComboBox cmbActiveStatus = (cmbActiveStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActiveStatusComboBox.class, m_cmbActiveStatusTemp);
		super.addComboBox(cmbActiveStatus);
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 112, 96, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbScoringMethodTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbScoringMethodTemp);
		cmbScoringMethodComboBox cmbScoringMethod = (cmbScoringMethodComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbScoringMethodComboBox.class, m_cmbScoringMethodTemp);
		super.addComboBox(cmbScoringMethod);
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 480, 48, 320, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbCategoryTemp);
		cmbCategoryComboBox cmbCategory = (cmbCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCategoryComboBox.class, m_cmbCategoryTemp);
		super.addComboBox(cmbCategory);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 184, 146, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 112, 122, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 728, 74, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Is Multirole", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 280, 176, 175, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Custom Group/Question Width:", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 576, 176, 224, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.ENABLED, ControlState.HIDDEN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Display Active Groups and Questions Only", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 16, 176, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Contains Multiple Groups", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 185, 176, 63, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Flat view", Boolean.TRUE, null}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 480, 174, 52, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 805, 93, 26, 26, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.LinkEnabled24, this.getImages().Core.LinkDisabled24, "Open URL", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// Link Controls
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 720, 20, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlTitle()
	{
		return (Panel)super.getControl(0);
	}
	public lyrTabsLayer lyrTabs()
	{
		return (lyrTabsLayer)super.getLayer(0);
	}
	public Label lbl10()
	{
		return (Label)super.getControl(13);
	}
	public Label lbl3()
	{
		return (Label)super.getControl(14);
	}
	public Label lblScoringMethod()
	{
		return (Label)super.getControl(16);
	}
	public Button btnClear()
	{
		return (Button)super.getControl(20);
	}
	public Button btnLink()
	{
		return (Button)super.getControl(21);
	}
	public Button btnPreview()
	{
		return (Button)super.getControl(22);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(23);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(24);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(25);
	}
	public TextBox txtReport()
	{
		return (TextBox)super.getControl(26);
	}
	public TextBox txtURL()
	{
		return (TextBox)super.getControl(27);
	}
	public TextBox txtDescription()
	{
		return (TextBox)super.getControl(28);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(29);
	}
	public cmbCopyLastComboBox cmbCopyLast()
	{
		return (cmbCopyLastComboBox)super.getComboBox(0);
	}
	public cmbActiveStatusComboBox cmbActiveStatus()
	{
		return (cmbActiveStatusComboBox)super.getComboBox(1);
	}
	public cmbScoringMethodComboBox cmbScoringMethod()
	{
		return (cmbScoringMethodComboBox)super.getComboBox(2);
	}
	public cmbCategoryComboBox cmbCategory()
	{
		return (cmbCategoryComboBox)super.getComboBox(3);
	}
	public CheckBox chkStorePrintedAssessment()
	{
		return (CheckBox)super.getControl(34);
	}
	public CheckBox chkCanCopy()
	{
		return (CheckBox)super.getControl(35);
	}
	public CheckBox chkIsMultirole()
	{
		return (CheckBox)super.getControl(36);
	}
	public CheckBox chkCustomWidth()
	{
		return (CheckBox)super.getControl(37);
	}
	public CheckBox chkDisplayActive()
	{
		return (CheckBox)super.getControl(38);
	}
	public CheckBox chkMultipleGroup()
	{
		return (CheckBox)super.getControl(39);
	}
	public CheckBox chkFlatView()
	{
		return (CheckBox)super.getControl(40);
	}
	public IntBox intCustomWidth()
	{
		return (IntBox)super.getControl(41);
	}
	public ImageButton imbURL()
	{
		return (ImageButton)super.getControl(42);
	}
	public Link lnkReturnToList()
	{
		return (Link)super.getControl(43);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Assessment = new AssessmentForms();
			Core = new CoreForms();
			Admin = new AdminForms();
			ClinicalAdmin = new ClinicalAdminForms();
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				UserAssessments = new LocalFormName(102183);
				GroupSelectNew = new LocalFormName(102185);
				UserAssessmentPreview = new LocalFormName(102193);
			}
			public final FormName UserAssessments;
			public final FormName GroupSelectNew;
			public final FormName UserAssessmentPreview;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				QuestionSelectNew = new LocalFormName(102182);
				YesNoDialog = new LocalFormName(102107);
				ReportTemplate = new LocalFormName(102250);
			}
			public final FormName QuestionSelectNew;
			public final FormName YesNoDialog;
			public final FormName ReportTemplate;
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				RoleSelect = new LocalFormName(103172);
			}
			public final FormName RoleSelect;
		}
		public final class ClinicalAdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalAdminForms()
			{
				HotlistDialog = new LocalFormName(104117);
				ServicesHotListDialog = new LocalFormName(104153);
			}
			public final FormName HotlistDialog;
			public final FormName ServicesHotListDialog;
		}

		public AssessmentForms Assessment;
		public CoreForms Core;
		public AdminForms Admin;
		public ClinicalAdminForms ClinicalAdmin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				QuestionSmall = new ImageHelper(102215, "Images/Core/Help-3.gif", new Integer(16), new Integer(16));
				Link = new ImageHelper(102278, "Images/Core/Link.gif", new Integer(16), new Integer(16));
				LinkDisabled24 = new ImageHelper(102522, "Images/Core/url_disabled_24.png", new Integer(24), new Integer(24));
				LinkEnabled24 = new ImageHelper(102521, "Images/Core/url_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image QuestionSmall;
			public final ims.framework.utils.Image Link;
			public final ims.framework.utils.Image LinkDisabled24;
			public final ims.framework.utils.Image LinkEnabled24;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Role = new ImageHelper(116114, "Images/OCRR/User-Properties.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Role;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_LastViewMode = new ims.framework.ContextVariable("LastViewMode", prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__LastViewMode_" + componentIdentifier + "");
			cxl_HiddenGroups = new ims.framework.ContextVariable("HiddenGroups", prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__HiddenGroups_" + componentIdentifier + "");
			cxl_UserAssessment = new ims.framework.ContextVariable("UserAssessment", prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier + "");
			cxl_AssessmentRoles = new ims.framework.ContextVariable("AssessmentRoles", prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__AssessmentRoles_" + componentIdentifier + "");
			cxl_SelectedRoleId = new ims.framework.ContextVariable("SelectedRoleId", prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__SelectedRoleId_" + componentIdentifier + "");
			cxl_IsRemoveRoleMode = new ims.framework.ContextVariable("IsRemoveRoleMode", prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__IsRemoveRoleMode_" + componentIdentifier + "");
			cxl_LinkedTemplate = new ims.framework.ContextVariable("LinkedTemplate", prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__LinkedTemplate_" + componentIdentifier + "");
			cxl_IsInactive = new ims.framework.ContextVariable("IsInactive", prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__IsInactive_" + componentIdentifier + "");
		}
		
		public boolean getLastViewModeIsNotNull()
		{
			return !cxl_LastViewMode.getValueIsNull(context);
		}
		public Integer getLastViewMode()
		{
			return (Integer)cxl_LastViewMode.getValue(context);
		}
		public void setLastViewMode(Integer value)
		{
			cxl_LastViewMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastViewMode = null;
		public boolean getHiddenGroupsIsNotNull()
		{
			return !cxl_HiddenGroups.getValueIsNull(context);
		}
		public ims.core.vo.AssessmentQuestionGroupVoCollection getHiddenGroups()
		{
			return (ims.core.vo.AssessmentQuestionGroupVoCollection)cxl_HiddenGroups.getValue(context);
		}
		public void setHiddenGroups(ims.core.vo.AssessmentQuestionGroupVoCollection value)
		{
			cxl_HiddenGroups.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HiddenGroups = null;
		public boolean getUserAssessmentIsNotNull()
		{
			return !cxl_UserAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.UserAssessmentVo getUserAssessment()
		{
			return (ims.assessment.vo.UserAssessmentVo)cxl_UserAssessment.getValue(context);
		}
		public void setUserAssessment(ims.assessment.vo.UserAssessmentVo value)
		{
			cxl_UserAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UserAssessment = null;
		public boolean getAssessmentRolesIsNotNull()
		{
			return !cxl_AssessmentRoles.getValueIsNull(context);
		}
		public java.util.HashMap getAssessmentRoles()
		{
			return (java.util.HashMap)cxl_AssessmentRoles.getValue(context);
		}
		public void setAssessmentRoles(java.util.HashMap value)
		{
			cxl_AssessmentRoles.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AssessmentRoles = null;
		public boolean getSelectedRoleIdIsNotNull()
		{
			return !cxl_SelectedRoleId.getValueIsNull(context);
		}
		public Integer getSelectedRoleId()
		{
			return (Integer)cxl_SelectedRoleId.getValue(context);
		}
		public void setSelectedRoleId(Integer value)
		{
			cxl_SelectedRoleId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRoleId = null;
		public boolean getIsRemoveRoleModeIsNotNull()
		{
			return !cxl_IsRemoveRoleMode.getValueIsNull(context);
		}
		public Boolean getIsRemoveRoleMode()
		{
			return (Boolean)cxl_IsRemoveRoleMode.getValue(context);
		}
		public void setIsRemoveRoleMode(Boolean value)
		{
			cxl_IsRemoveRoleMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsRemoveRoleMode = null;
		public boolean getLinkedTemplateIsNotNull()
		{
			return !cxl_LinkedTemplate.getValueIsNull(context);
		}
		public ims.core.admin.vo.TemplateBoRefVo getLinkedTemplate()
		{
			return (ims.core.admin.vo.TemplateBoRefVo)cxl_LinkedTemplate.getValue(context);
		}
		public void setLinkedTemplate(ims.core.admin.vo.TemplateBoRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'LinkedTemplate' RefVo context variable.");
			if(value == null)
				cxl_LinkedTemplate.setValue(context, null);
			else
				cxl_LinkedTemplate.setValue(context, new ims.core.admin.vo.TemplateBoRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_LinkedTemplate = null;
		public boolean getIsInactiveIsNotNull()
		{
			return !cxl_IsInactive.getValueIsNull(context);
		}
		public Boolean getIsInactive()
		{
			return (Boolean)cxl_IsInactive.getValue(context);
		}
		public void setIsInactive(Boolean value)
		{
			cxl_IsInactive.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsInactive = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public AssessmentNamespace Assessment = new AssessmentNamespace();
		public final class UserAssessmentNew implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD_GROUP = 1;
			public static final int EDIT_GROUP = 2;
			public static final int REMOVE_GROUP = 3;
			public static final int VIEW_GROUP = 4;
			public static final int ADD_QUESTION = 5;
			public static final int EDIT_QUESTION = 6;
			public static final int REMOVE_QUESTION = 7;
			public static final int VIEW_QUESTION = 8;
			public static final int MOVE_UP = 9;
			public static final int MOVE_DOWN = 10;
		}
		public void disableAllUserAssessmentNewMenuItems()
		{
			this.contextMenuUserAssessmentNewADD_GROUPItem.setEnabled(false);
			this.contextMenuUserAssessmentNewEDIT_GROUPItem.setEnabled(false);
			this.contextMenuUserAssessmentNewREMOVE_GROUPItem.setEnabled(false);
			this.contextMenuUserAssessmentNewVIEW_GROUPItem.setEnabled(false);
			this.contextMenuUserAssessmentNewADD_QUESTIONItem.setEnabled(false);
			this.contextMenuUserAssessmentNewEDIT_QUESTIONItem.setEnabled(false);
			this.contextMenuUserAssessmentNewREMOVE_QUESTIONItem.setEnabled(false);
			this.contextMenuUserAssessmentNewVIEW_QUESTIONItem.setEnabled(false);
			this.contextMenuUserAssessmentNewMOVE_UPItem.setEnabled(false);
			this.contextMenuUserAssessmentNewMOVE_DOWNItem.setEnabled(false);
		}
		public void hideAllUserAssessmentNewMenuItems()
		{
			this.contextMenuUserAssessmentNewADD_GROUPItem.setVisible(false);
			this.contextMenuUserAssessmentNewEDIT_GROUPItem.setVisible(false);
			this.contextMenuUserAssessmentNewREMOVE_GROUPItem.setVisible(false);
			this.contextMenuUserAssessmentNewVIEW_GROUPItem.setVisible(false);
			this.contextMenuUserAssessmentNewADD_QUESTIONItem.setVisible(false);
			this.contextMenuUserAssessmentNewEDIT_QUESTIONItem.setVisible(false);
			this.contextMenuUserAssessmentNewREMOVE_QUESTIONItem.setVisible(false);
			this.contextMenuUserAssessmentNewVIEW_QUESTIONItem.setVisible(false);
			this.contextMenuUserAssessmentNewMOVE_UPItem.setVisible(false);
			this.contextMenuUserAssessmentNewMOVE_DOWNItem.setVisible(false);
		}
		private Menu contextMenuUserAssessmentNew;
		public MenuItem getUserAssessmentNewADD_GROUPItem()
		{
			return this.contextMenuUserAssessmentNewADD_GROUPItem;
		}
		private MenuItem contextMenuUserAssessmentNewADD_GROUPItem;
		public MenuItem getUserAssessmentNewEDIT_GROUPItem()
		{
			return this.contextMenuUserAssessmentNewEDIT_GROUPItem;
		}
		private MenuItem contextMenuUserAssessmentNewEDIT_GROUPItem;
		public MenuItem getUserAssessmentNewREMOVE_GROUPItem()
		{
			return this.contextMenuUserAssessmentNewREMOVE_GROUPItem;
		}
		private MenuItem contextMenuUserAssessmentNewREMOVE_GROUPItem;
		public MenuItem getUserAssessmentNewVIEW_GROUPItem()
		{
			return this.contextMenuUserAssessmentNewVIEW_GROUPItem;
		}
		private MenuItem contextMenuUserAssessmentNewVIEW_GROUPItem;
		public MenuItem getUserAssessmentNewADD_QUESTIONItem()
		{
			return this.contextMenuUserAssessmentNewADD_QUESTIONItem;
		}
		private MenuItem contextMenuUserAssessmentNewADD_QUESTIONItem;
		public MenuItem getUserAssessmentNewEDIT_QUESTIONItem()
		{
			return this.contextMenuUserAssessmentNewEDIT_QUESTIONItem;
		}
		private MenuItem contextMenuUserAssessmentNewEDIT_QUESTIONItem;
		public MenuItem getUserAssessmentNewREMOVE_QUESTIONItem()
		{
			return this.contextMenuUserAssessmentNewREMOVE_QUESTIONItem;
		}
		private MenuItem contextMenuUserAssessmentNewREMOVE_QUESTIONItem;
		public MenuItem getUserAssessmentNewVIEW_QUESTIONItem()
		{
			return this.contextMenuUserAssessmentNewVIEW_QUESTIONItem;
		}
		private MenuItem contextMenuUserAssessmentNewVIEW_QUESTIONItem;
		public MenuItem getUserAssessmentNewMOVE_UPItem()
		{
			return this.contextMenuUserAssessmentNewMOVE_UPItem;
		}
		private MenuItem contextMenuUserAssessmentNewMOVE_UPItem;
		public MenuItem getUserAssessmentNewMOVE_DOWNItem()
		{
			return this.contextMenuUserAssessmentNewMOVE_DOWNItem;
		}
		private MenuItem contextMenuUserAssessmentNewMOVE_DOWNItem;
		public final class UserAssessmentGroup implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 11;
			public static final int EDIT = 12;
			public static final int REMOVE = 13;
		}
		public void disableAllUserAssessmentGroupMenuItems()
		{
			this.contextMenuUserAssessmentGroupADDItem.setEnabled(false);
			this.contextMenuUserAssessmentGroupEDITItem.setEnabled(false);
			this.contextMenuUserAssessmentGroupREMOVEItem.setEnabled(false);
		}
		public void hideAllUserAssessmentGroupMenuItems()
		{
			this.contextMenuUserAssessmentGroupADDItem.setVisible(false);
			this.contextMenuUserAssessmentGroupEDITItem.setVisible(false);
			this.contextMenuUserAssessmentGroupREMOVEItem.setVisible(false);
		}
		private Menu contextMenuUserAssessmentGroup;
		public MenuItem getUserAssessmentGroupADDItem()
		{
			return this.contextMenuUserAssessmentGroupADDItem;
		}
		private MenuItem contextMenuUserAssessmentGroupADDItem;
		public MenuItem getUserAssessmentGroupEDITItem()
		{
			return this.contextMenuUserAssessmentGroupEDITItem;
		}
		private MenuItem contextMenuUserAssessmentGroupEDITItem;
		public MenuItem getUserAssessmentGroupREMOVEItem()
		{
			return this.contextMenuUserAssessmentGroupREMOVEItem;
		}
		private MenuItem contextMenuUserAssessmentGroupREMOVEItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 14;
			public static final int Update = 15;
			public static final int Remove = 16;
			public static final int View = 17;
			public static final int MoveUp = 18;
			public static final int MoveDown = 19;
			public static final int Replace = 20;
			public static final int Confirm = 21;
			public static final int EDIT_VIEW_ICP_ACTIONS = 22;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class LIP implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int New = 23;
			public static final int Update = 24;
		}
		public void disableAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setEnabled(false);
			this.contextMenuLIPUpdateItem.setEnabled(false);
		}
		public void hideAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setVisible(false);
			this.contextMenuLIPUpdateItem.setVisible(false);
		}
		private Menu contextMenuLIP;
		public MenuItem getLIPNewItem()
		{
			return this.contextMenuLIPNewItem;
		}
		private MenuItem contextMenuLIPNewItem;
		public MenuItem getLIPUpdateItem()
		{
			return this.contextMenuLIPUpdateItem;
		}
		private MenuItem contextMenuLIPUpdateItem;
		public final class AssessmentNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ServiceMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int UPDATE = 25;
				public static final int REMOVE = 26;
			}
			public void disableAllServiceMenuMenuItems()
			{
				this.contextMenuServiceMenuUPDATEItem.setEnabled(false);
				this.contextMenuServiceMenuREMOVEItem.setEnabled(false);
			}
			public void hideAllServiceMenuMenuItems()
			{
				this.contextMenuServiceMenuUPDATEItem.setVisible(false);
				this.contextMenuServiceMenuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuServiceMenu;
			public ReadOnlyMenuItem getServiceMenuUPDATEItem()
			{
				return this.contextMenuServiceMenuUPDATEItem;
			}
			private MenuItem contextMenuServiceMenuUPDATEItem;
			public ReadOnlyMenuItem getServiceMenuREMOVEItem()
			{
				return this.contextMenuServiceMenuREMOVEItem;
			}
			private MenuItem contextMenuServiceMenuREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[141];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ID", "ID_UserAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-HELPURL", "HelpURL");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-CATEGORY", "Category");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-ID", "ID_UserAssessment");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-NAME", "Name");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-DESCRIPTION", "Description");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-HELPURL", "HelpURL");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-CATEGORY", "Category");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-ID", "ID_AssessmentQuestion");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-ISMANDATORY", "IsMandatory");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-ACTIVESTATUS", "ActiveStatus");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-SEQUENCE", "Sequence");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-ALLOWSMULTIPLEANSWERS", "AllowsMultipleAnswers");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-ISNONSTANDARD", "IsNonStandard");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-URL", "URL");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-PROTOCOL", "Protocol");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-LEGENDTEXT", "LegendText");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestionGroup", "BO-1003100047-ID", "ID_AssessmentQuestionGroup");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestionGroup", "BO-1003100047-NAME", "Name");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestionGroup", "BO-1003100047-ACTIVESTATUS", "ActiveStatus");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestionGroup", "BO-1003100047-GROUPSCORE", "GroupScore");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestionGroup", "BO-1003100047-DESCRIPTION", "Description");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestionGroup", "BO-1003100047-LEGENDTEXT", "LegendText");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-ID", "ID_QuestionInformation");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-TEXT", "Text");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-SHORTTEXT", "ShortText");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-ISQUESTION", "IsQuestion");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-GENDERSPECIFIC", "GenderSpecific");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-AGERANGEMIN", "AgeRangeMin");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-AGERANGEMAX", "AgeRangeMax");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-STATUS", "Status");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-LEGENDTEXT", "LegendText");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_Core.ReportTemplateRef", "BO-1004100008-ID", "ID_TemplateBo");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-ID", "ID_UserAssessment");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-NAME", "Name");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-DESCRIPTION", "Description");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-HELPURL", "HelpURL");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-CATEGORY", "Category");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIROLE", "IsMultiRole");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__UserAssessment_" + componentIdentifier, "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentNew.__internal_x_context__LinkedTemplate_" + componentIdentifier, "BO-1004100008-ID", "ID_TemplateBo");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
