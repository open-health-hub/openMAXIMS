//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.userassessmentnew;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Core = new CoreContext(context);
		Admin = new AdminContext(context);
		ClinicalAdmin = new ClinicalAdminContext(context);
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getYesNoDialogMessageIsNotNull()
		{
			return !cx_CoreYesNoDialogMessage.getValueIsNull(context);
		}
		public String getYesNoDialogMessage()
		{
			return (String)cx_CoreYesNoDialogMessage.getValue(context);
		}
		public void setYesNoDialogMessage(String value)
		{
			cx_CoreYesNoDialogMessage.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreYesNoDialogMessage = new ims.framework.ContextVariable("Core.YesNoDialogMessage", "_cv_Core.YesNoDialogMessage");
		public boolean getUserAssessmentActionIsNotNull()
		{
			return !cx_CoreUserAssessmentAction.getValueIsNull(context);
		}
		public String getUserAssessmentAction()
		{
			return (String)cx_CoreUserAssessmentAction.getValue(context);
		}
		public void setUserAssessmentAction(String value)
		{
			cx_CoreUserAssessmentAction.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreUserAssessmentAction = new ims.framework.ContextVariable("Core.UserAssessmentAction", "_cv_Core.UserAssessmentAction");
		public boolean getSelectedUserAssessmentIsNotNull()
		{
			return !cx_CoreSelectedUserAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.UserAssessmentShortVo getSelectedUserAssessment()
		{
			return (ims.assessment.vo.UserAssessmentShortVo)cx_CoreSelectedUserAssessment.getValue(context);
		}
		public void setSelectedUserAssessment(ims.assessment.vo.UserAssessmentShortVo value)
		{
			cx_CoreSelectedUserAssessment.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreSelectedUserAssessment = new ims.framework.ContextVariable("Core.SelectedUserAssessment", "_cv_Core.SelectedUserAssessment");
		public boolean getUserAssessmentFilterIsNotNull()
		{
			return !cx_CoreUserAssessmentFilter.getValueIsNull(context);
		}
		public ims.assessment.vo.UserAssessmentShortVo getUserAssessmentFilter()
		{
			return (ims.assessment.vo.UserAssessmentShortVo)cx_CoreUserAssessmentFilter.getValue(context);
		}
		public void setUserAssessmentFilter(ims.assessment.vo.UserAssessmentShortVo value)
		{
			cx_CoreUserAssessmentFilter.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreUserAssessmentFilter = new ims.framework.ContextVariable("Core.UserAssessmentFilter", "_cv_Core.UserAssessmentFilter");
		public boolean getSelectedAssessmentQuestionIsNotNull()
		{
			return !cx_CoreSelectedAssessmentQuestion.getValueIsNull(context);
		}
		public ims.core.vo.AssessmentQuestionVo getSelectedAssessmentQuestion()
		{
			return (ims.core.vo.AssessmentQuestionVo)cx_CoreSelectedAssessmentQuestion.getValue(context);
		}
		public void setSelectedAssessmentQuestion(ims.core.vo.AssessmentQuestionVo value)
		{
			cx_CoreSelectedAssessmentQuestion.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreSelectedAssessmentQuestion = new ims.framework.ContextVariable("Core.SelectedAssessmentQuestion", "_cv_Core.SelectedAssessmentQuestion");
		public boolean getEditedQuestionsIsNotNull()
		{
			return !cx_CoreEditedQuestions.getValueIsNull(context);
		}
		public ims.core.vo.QuestionInformationVoCollection getEditedQuestions()
		{
			return (ims.core.vo.QuestionInformationVoCollection)cx_CoreEditedQuestions.getValue(context);
		}
		public void setEditedQuestions(ims.core.vo.QuestionInformationVoCollection value)
		{
			cx_CoreEditedQuestions.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreEditedQuestions = new ims.framework.ContextVariable("Core.EditedQuestions", "_cv_Core.EditedQuestions");
		public boolean getQuestionTypeIsNotNull()
		{
			return !cx_CoreQuestionType.getValueIsNull(context);
		}
		public ims.core.vo.lookups.QuestionType getQuestionType()
		{
			return (ims.core.vo.lookups.QuestionType)cx_CoreQuestionType.getValue(context);
		}
		public void setQuestionType(ims.core.vo.lookups.QuestionType value)
		{
			cx_CoreQuestionType.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreQuestionType = new ims.framework.ContextVariable("Core.QuestionType", "_cv_Core.QuestionType");
		public boolean getQuestionFormModeIsNotNull()
		{
			return !cx_CoreQuestionFormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getQuestionFormMode()
		{
			return (ims.framework.enumerations.FormMode)cx_CoreQuestionFormMode.getValue(context);
		}
		public void setQuestionFormMode(ims.framework.enumerations.FormMode value)
		{
			cx_CoreQuestionFormMode.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreQuestionFormMode = new ims.framework.ContextVariable("Core.QuestionFormMode", "_cv_Core.QuestionFormMode");
		public boolean getReportTemplateRefIsNotNull()
		{
			return !cx_CoreReportTemplateRef.getValueIsNull(context);
		}
		public ims.core.admin.vo.TemplateBoRefVo getReportTemplateRef()
		{
			return (ims.core.admin.vo.TemplateBoRefVo)cx_CoreReportTemplateRef.getValue(context);
		}
		public void setReportTemplateRef(ims.core.admin.vo.TemplateBoRefVo value)
		{
			cx_CoreReportTemplateRef.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreReportTemplateRef = new ims.framework.ContextVariable("Core.ReportTemplateRef", "_cv_Core.ReportTemplateRef");
		public boolean getTemplateIsNotNull()
		{
			return !cx_CoreTemplate.getValueIsNull(context);
		}
		public String getTemplate()
		{
			return (String)cx_CoreTemplate.getValue(context);
		}
		public void setTemplate(String value)
		{
			cx_CoreTemplate.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreTemplate = new ims.framework.ContextVariable("Core.Template", "_cv_Core.Template");
		public boolean getUserDefinedAssessmentTypeIsNotNull()
		{
			return !cx_CoreUserDefinedAssessmentType.getValueIsNull(context);
		}
		public ims.core.vo.lookups.UserDefinedAssessmentType getUserDefinedAssessmentType()
		{
			return (ims.core.vo.lookups.UserDefinedAssessmentType)cx_CoreUserDefinedAssessmentType.getValue(context);
		}
		public void setUserDefinedAssessmentType(ims.core.vo.lookups.UserDefinedAssessmentType value)
		{
			cx_CoreUserDefinedAssessmentType.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreUserDefinedAssessmentType = new ims.framework.ContextVariable("Core.UserDefinedAssessmentType", "_cv_Core.UserDefinedAssessmentType");
		public boolean getSelectedQuestionGroupIsNotNull()
		{
			return !cx_CoreSelectedQuestionGroup.getValueIsNull(context);
		}
		public ims.core.vo.AssessmentQuestionGroupVo getSelectedQuestionGroup()
		{
			return (ims.core.vo.AssessmentQuestionGroupVo)cx_CoreSelectedQuestionGroup.getValue(context);
		}
		public void setSelectedQuestionGroup(ims.core.vo.AssessmentQuestionGroupVo value)
		{
			cx_CoreSelectedQuestionGroup.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreSelectedQuestionGroup = new ims.framework.ContextVariable("Core.SelectedQuestionGroup", "_cv_Core.SelectedQuestionGroup");
		public boolean getSelectedQuestionIsNotNull()
		{
			return !cx_CoreSelectedQuestion.getValueIsNull(context);
		}
		public ims.core.vo.QuestionInformationShortVo getSelectedQuestion()
		{
			return (ims.core.vo.QuestionInformationShortVo)cx_CoreSelectedQuestion.getValue(context);
		}
		public void setSelectedQuestion(ims.core.vo.QuestionInformationShortVo value)
		{
			cx_CoreSelectedQuestion.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreSelectedQuestion = new ims.framework.ContextVariable("Core.SelectedQuestion", "_cv_Core.SelectedQuestion");
		public boolean getSelectedAssessmentQuestionsIsNotNull()
		{
			return !cx_CoreSelectedAssessmentQuestions.getValueIsNull(context);
		}
		public ims.core.vo.AssessmentQuestionVoCollection getSelectedAssessmentQuestions()
		{
			return (ims.core.vo.AssessmentQuestionVoCollection)cx_CoreSelectedAssessmentQuestions.getValue(context);
		}
		public void setSelectedAssessmentQuestions(ims.core.vo.AssessmentQuestionVoCollection value)
		{
			cx_CoreSelectedAssessmentQuestions.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreSelectedAssessmentQuestions = new ims.framework.ContextVariable("Core.SelectedAssessmentQuestions", "_cv_Core.SelectedAssessmentQuestions");
		public boolean getSpecialtiesIsNotNull()
		{
			return !cx_CoreSpecialties.getValueIsNull(context);
		}
		public ims.core.vo.lookups.SpecialtyCollection getSpecialties()
		{
			return (ims.core.vo.lookups.SpecialtyCollection)cx_CoreSpecialties.getValue(context);
		}
		public void setSpecialties(ims.core.vo.lookups.SpecialtyCollection value)
		{
			cx_CoreSpecialties.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreSpecialties = new ims.framework.ContextVariable("Core.Specialties", "_cv_Core.Specialties");

		private ims.framework.Context context;
	}
	public final class AdminContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private AdminContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getSelectedRolesIsNotNull()
		{
			return !cx_AdminSelectedRoles.getValueIsNull(context);
		}
		public ims.admin.vo.AppRoleShortVoCollection getSelectedRoles()
		{
			return (ims.admin.vo.AppRoleShortVoCollection)cx_AdminSelectedRoles.getValue(context);
		}
		public void setSelectedRoles(ims.admin.vo.AppRoleShortVoCollection value)
		{
			cx_AdminSelectedRoles.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_AdminSelectedRoles = new ims.framework.ContextVariable("Admin.SelectedRoles", "_cv_Admin.SelectedRoles");
		public boolean getSelectedQuestionsIsNotNull()
		{
			return !cx_AdminSelectedQuestions.getValueIsNull(context);
		}
		public ims.core.vo.QuestionInformationShortVoCollection getSelectedQuestions()
		{
			return (ims.core.vo.QuestionInformationShortVoCollection)cx_AdminSelectedQuestions.getValue(context);
		}
		public void setSelectedQuestions(ims.core.vo.QuestionInformationShortVoCollection value)
		{
			cx_AdminSelectedQuestions.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_AdminSelectedQuestions = new ims.framework.ContextVariable("Admin.SelectedQuestions", "_cv_Admin.SelectedQuestions");

		private ims.framework.Context context;
	}
	public final class ClinicalAdminContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private ClinicalAdminContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getServicesIsNotNull()
		{
			return !cx_ClinicalAdminServices.getValueIsNull(context);
		}
		public ims.core.vo.ServiceShortVoCollection getServices()
		{
			return (ims.core.vo.ServiceShortVoCollection)cx_ClinicalAdminServices.getValue(context);
		}
		public void setServices(ims.core.vo.ServiceShortVoCollection value)
		{
			cx_ClinicalAdminServices.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalAdminServices = new ims.framework.ContextVariable("ClinicalAdmin.Services", "_cv_ClinicalAdmin.Services");

		private ims.framework.Context context;
	}

	public CoreContext Core;
	public AdminContext Admin;
	public ClinicalAdminContext ClinicalAdmin;
}
