//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2389.16953)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.userassessmentnew;
//This code was generated by Vasile Purdila using IMS Development Environment (version 1.40 build 2182.21912)
//Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.
//AU - 01/06/2005 Changes
//On save, can we stay in the form with an update button enable and a 'return to list' link enabled.
//On Update we can only update the status to inactive, no more groups/questions may be removed/added/moved.
//We need a checkbox above the grid to allow the user to view only Active groups and Active questions ( both at the linking level and the question level).

//AU - 22/08/2006 - WDEV-1607
//Add two layers - Assessment and Roles
//Roles are added via a select dialog 
//In Roles grid when Answer All checkbox is unchecked, then display in the Question dynamic grid the same rows as in the 
//Details grid + a Select checkbox at the end. When selecting a questions it gets added to a HashMap structure (implemented as a cache) 
//that has a roleId as a key and a collection of AssessmentQuestionVoCollection as value
//In the Questions grid we had a postback on Select as it has to hold the selected value in cache.

import ims.admin.vo.AppRoleShortVo;
import ims.admin.vo.AppRoleShortVoCollection;
import ims.assessment.forms.userassessmentnew.GenForm.lyrTabsLayer.tabGroupsContainer.grdGroupsRow;
import ims.assessment.forms.userassessmentnew.GenForm.lyrTabsLayer.tabRolesContainer.grdRolesRow;
import ims.assessment.forms.userassessmentnew.GenForm.lyrTabsLayer.tabServicesContainer.grdServicesRow;
import ims.assessment.forms.userassessmentnew.GenForm.lyrTabsLayer.tabSpecialtiesContainer.grdSpecialtyRow;
import ims.assessment.vo.AssessmentQuestionRoleVo;
import ims.assessment.vo.AssessmentQuestionRoleVoCollection;
import ims.assessment.vo.AssessmentRoleVo;
import ims.assessment.vo.AssessmentRoleVoCollection;
import ims.assessment.vo.UserAssessmentShortVo;
import ims.assessment.vo.UserAssessmentVo;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.vo.AnswerOptionVo;
import ims.core.vo.AssessmentQuestionGroupVo;
import ims.core.vo.AssessmentQuestionGroupVoCollection;
import ims.core.vo.AssessmentQuestionVo;
import ims.core.vo.AssessmentQuestionVoCollection;
import ims.core.vo.QuestionAnswerTypeVo;
import ims.core.vo.QuestionInformationVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.TemplateBoLiteVo;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.core.vo.lookups.QuestionType;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.core.vo.lookups.UserAssessmentCategory;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellItemCollection;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Logic extends BaseLogic
{
	private static final int	SINGLE_GROUP_NO_FLAT	= 1;
	private static final int	SINGLE_GROUP_FLAT		= 2;
	private static final int	MULTIPLE_GROUP_NO_FLAT	= 3;
	private static final int	MULTIPLE_GROUP_FLAT		= 4;

	// this is BAD design - each column should have Identifier set, not index! @mmihalec - to be reviewed
	private static final String	COLUMN_QUESTIONGROUP	= "0";
	private static final String	COLUMN_MANDATORY		= "1";
	private static final String	COLUMN_MULTIANSWERS		= "2";
	private static final String	COLUMN_STATUS			= "3";
	private static final String	COLUMN_GROUP			= "4";
	private static final String	COLUMN_SELECT			= "5";
	private static final String COLUMN_NONSTANDARD		= "6";
	
	private static final String CR = "<BR>";
		
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	private void updateControlsState()
	{
		boolean editMode = form.getMode().equals(FormMode.EDIT);
		boolean enable   = canEnableControls();
		
		form.txtName().setEnabled(enable && isNameTextBoxEnableable());
		form.txtDescription().setEnabled(enable);
		form.cmbActiveStatus().setEnabled(editMode);
		//WDEV-1751 - Category should be updatable
		form.cmbCategory().setEnabled(editMode);
		form.chkIsMultirole().setEnabled(enable);
		form.chkFlatView().setEnabled(enable && !isDpp());
		if(editMode)
			form.lyrTabs().tabAssessments().dyngrdDetails().setReadOnly(isNonScoringAssessment()?false:!enable);
		else
			form.lyrTabs().tabAssessments().dyngrdDetails().setReadOnly(true);
		form.chkMultipleGroup().setEnabled(enable && !isDpp());
		form.chkCustomWidth().setEnabled(enable);
		form.intCustomWidth().setEnabled(enable && form.chkCustomWidth().getValue());
		if(isNonScoringAssessment())
		{
			form.lblScoringMethod().setVisible(false);
			form.cmbScoringMethod().setVisible(false);
		}
		else
		{
			form.lblScoringMethod().setVisible(true);
			form.cmbScoringMethod().setVisible(true);
			form.cmbScoringMethod().setEnabled(enable);
		}
		
		form.chkCanCopy().setEnabled(enable);
		form.cmbCopyLast().setEnabled(enable && form.chkCanCopy().getValue());
		form.chkStorePrintedAssessment().setEnabled(form.getMode().equals(FormMode.EDIT) && !isStatusInactive()); //WDEV-16982
		form.lyrTabs().tabTaxonomy().ccTaxonomy().setComponentMode(form.getMode());
		
		//WDEV-14123
		showHideServiceTab(form.cmbCategory().getValue() != null && form.cmbCategory().getValue().equals(UserAssessmentCategory.SAFETY_QUESTIONNAIRE));
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().Assessment.GroupSelectNew))
		{
			if(result.equals(DialogResult.OK))
			{
				AssessmentQuestionGroupVo group = form.getGlobalContext().Core.getSelectedQuestionGroup();
				
				int viewMode = getViewMode();
				
				char userAction = form.getGlobalContext().Core.getUserAssessmentAction().charAt(0);
				if(viewMode == MULTIPLE_GROUP_NO_FLAT)
				{
					DynamicGridRow row = null;
					if(userAction == 'A')
					{
						//new group added
						row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().newRow();
						row.getCells().newCell(getGridColumn(COLUMN_QUESTIONGROUP), DynamicCellType.STRING);
						updateGroupRow(group, row);
						//refreshContextMenu();
					}
					else if(userAction == 'E')
					{
						//the selected group has been edited
						row = form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow();
						updateGroupRow(group, row);
						//refreshContextMenu();
					}
				}
				else if(viewMode == MULTIPLE_GROUP_FLAT)
				{
					if(userAction == 'A' || userAction == 'E')
					{
						createHiddenGroupsIfDontExistAlready();
						AssessmentQuestionGroupVoCollection groupsColl = form.getLocalContext().getHiddenGroups();

						if (group.getID_AssessmentQuestionGroup() == null && userAction == 'E') //WDEV-16111
						{
							groupsColl.clear();
							form.lyrTabs().tabGroups().grdGroups().getSelectedRow().setValue(group);
							
							for (int i = 0; i < form.lyrTabs().tabGroups().grdGroups().getRows().size(); i++)
							{
								groupsColl.add((AssessmentQuestionGroupVo) form.lyrTabs().tabGroups().grdGroups().getRows().get(i).getValue());
							}
						}
						else
						{
							int index = groupsColl.indexOf(group);
							if (index >= 0)
								groupsColl.set(index, group);
							else
								groupsColl.add(group);
						}

						form.getLocalContext().setHiddenGroups(groupsColl);

						refreshGroupCellData(groupsColl);

						if (isGroupTabSelected())
						{
							refreshGroupGrid();
						}
						//WDEV-16282
						if (userAction == 'A' && form.lyrTabs().tabAssessments().isVisible() &&form.lyrTabs().tabGroups().isHeaderVisible())
						{	
						engine.showMessage("The group '" + group.toString() + "' will be available for linking to Questions.",  "New Group Added", MessageButtons.OK, MessageIcon.INFORMATION);
						}
					}
				}
				
				//refreshContextMenu();
			}
		}
		else if(formName.equals(form.getForms().Core.YesNoDialog))
		{
			boolean isRemoveRoleMode = form.getLocalContext().getIsRemoveRoleModeIsNotNull() && form.getLocalContext().getIsRemoveRoleMode().booleanValue();
			form.getLocalContext().setIsRemoveRoleMode(null);
			if(isRemoveRoleMode)
			{
				if(result.equals(DialogResult.YES))
				{
					form.lyrTabs().tabRoles().grdRoles().removeSelectedRow();
					form.lyrTabs().tabRoles().dyngrdQuestions().getRows().clear();
					refreshRolesContextMenu();
				}
			}
			else
			{
				if(result.equals(DialogResult.YES))
				{
					clearAssessmentRoleLocalContext();
					createDynamicGridColumns(form.lyrTabs().tabAssessments().dyngrdDetails());
					if(isRolesTabSelected())
						createDynamicGridColumns(form.lyrTabs().tabRoles().dyngrdQuestions());
				}
				else
				{
					int oldMode = form.getLocalContext().getLastViewMode().intValue();
					
					switch (oldMode)
					{
						case SINGLE_GROUP_NO_FLAT :
							form.chkFlatView().setValue(false);
							form.chkMultipleGroup().setValue(false);
						break;
						case SINGLE_GROUP_FLAT :
							form.chkFlatView().setValue(true);
							form.chkMultipleGroup().setValue(false);
						break;
						case MULTIPLE_GROUP_NO_FLAT :
							form.chkFlatView().setValue(false);
							form.chkMultipleGroup().setValue(true);
						break;
						case MULTIPLE_GROUP_FLAT :
							form.chkFlatView().setValue(true);
							form.chkMultipleGroup().setValue(true);
						break;
						default :
						break;
					}
				}
	
				if(form.chkMultipleGroup().getValue() == false)
				{
					form.chkFlatView().setValue(true);
					form.chkFlatView().setEnabled(false);
				}
				else
					form.chkFlatView().setEnabled(true);
				
				form.getLocalContext().setLastViewMode(new Integer(getViewMode()));
				//refreshContextMenu();
				enableGroupTab();
			}
		}
		else if(formName.equals(form.getForms().Core.QuestionSelectNew))
		{
			if(result.equals(DialogResult.OK))
			{
				AssessmentQuestionVo assessmentQuestionVo 	   = form.getGlobalContext().Core.getSelectedAssessmentQuestion();
				AssessmentQuestionVoCollection assessmentQColl = form.getGlobalContext().Core.getSelectedAssessmentQuestions();
				
				String mode = form.getGlobalContext().Core.getUserAssessmentAction();
				
				if(mode != null)
				{
					if(mode.charAt(0) == 'A')
					{
						if(isNonScoringAssessment())
						{
							for(int i=0; assessmentQColl != null && i<assessmentQColl.size(); i++)
							{
								//Pre-populate the status to Active (when adding)
								assessmentQColl.get(i).setActiveStatus(PreActiveActiveInactiveStatus.ACTIVE);
								addQuestionToGrid(assessmentQColl.get(i));
							}
						}
						else
						{
							assessmentQuestionVo.setIsMandatory(false);
							assessmentQuestionVo.setAllowsMultipleAnswers(false);
						
							//Prepopulate the status to Active
							assessmentQuestionVo.setActiveStatus(PreActiveActiveInactiveStatus.ACTIVE);
							addQuestionToGrid(assessmentQuestionVo);
						}
					}
					else if(mode.charAt(0) == 'E')
					{
						if(isNonScoringAssessment())
						{
							DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow();
							QuestionInformationVo editedQuestion = getSavedQuestion();
							if(editedQuestion != null && row != null && row.getValue() instanceof AssessmentQuestionVo)
							{
								assessmentQuestionVo = (AssessmentQuestionVo)row.getValue();
								assessmentQuestionVo.setQuestion(editedQuestion);
								assessmentQuestionVo.setLegendText(editedQuestion.getLegendText());
								updateQuestionInGrid(assessmentQuestionVo);
							}
						}
						else
						{
							updateQuestionInGrid(assessmentQuestionVo);
						}
					}
				}
			}
			
			refreshEditedQuestions();
			
			
		}
		else if(formName.equals(form.getForms().Admin.RoleSelect))
		{
			if(result.equals(DialogResult.OK))
			{
				AppRoleShortVoCollection voRoles = form.getGlobalContext().Admin.getSelectedRoles();
				for (int i = 0; voRoles != null  && i < voRoles.size(); i++)
				{
					AppRoleShortVo voAppRole = voRoles.get(i);
					if(isVoAdded(voAppRole) == false)
					{
						GenForm.lyrTabsLayer.tabRolesContainer.grdRolesRow row = form.lyrTabs().tabRoles().grdRoles().getRows().newRow();
						row.setcolImage(form.getImages().OCRR.Role);
						row.setcolRole(voAppRole.getName());
						row.setcolAnswerAll(true);
						AssessmentRoleVo voAssessmentRole = new AssessmentRoleVo();
						voAssessmentRole.setAppRole(voAppRole);
						row.setValue(voAssessmentRole);
						form.lyrTabs().tabRoles().grdRoles().setValue(voAssessmentRole);
					}
				}
			}
		}
		else if(formName.equals(form.getForms().Core.ReportTemplate) && DialogResult.OK.equals(result)) //WDEV-14806
		{
			form.txtReport().setValue(form.getGlobalContext().Core.getTemplate());
			form.getLocalContext().setLinkedTemplate(form.getGlobalContext().Core.getReportTemplateRef());
		}
		else if ((formName.equals(form.getForms().ClinicalAdmin.HotlistDialog)) && (result.equals(DialogResult.OK)))
		{
			populateSpecialtyGrid(form.getGlobalContext().Core.getSpecialties());
		}
		else if((formName.equals(form.getForms().ClinicalAdmin.ServicesHotListDialog)) && (result.equals(DialogResult.OK))) //wdev-14028
		{
			populateServicesGrid(form.getGlobalContext().ClinicalAdmin.getServices());
		}

		refreshContextMenu();
	}

	private void populateSpecialtyGrid(SpecialtyCollection specialties) 
	{
		if (specialties != null)
		{
			form.lyrTabs().tabSpecialties().grdSpecialty().getRows().clear();
			for (int i = 0; i < specialties.size(); i++)
			{
				grdSpecialtyRow row = form.lyrTabs().tabSpecialties().grdSpecialty().getRows().newRow();
				row.setcolSpecialty(specialties.get(i).toString());
				row.setValue(specialties.get(i));
			}
		}
		refreshGroupContextMenu();
	}
	//wdev-14028
	private void populateServicesGrid(ServiceShortVoCollection services)
	{
		form.lyrTabs().tabServices().grdServices().getRows().clear();
		if( services != null )
		{
			
			for(int i = 0;i < services.size();i++)
			{
				grdServicesRow row = form.lyrTabs().tabServices().grdServices().getRows().newRow();
				row.setColService(services.get(i).getServiceNameIsNotNull() ? services.get(i).getServiceName():"");
				row.setValue(services.get(i));
			}
			
		}
		refreshGroupContextMenu();
	}
	//------------
	private boolean isVoAdded(AppRoleShortVo voAppRole)
	{
		for (int j = 0; j < form.lyrTabs().tabRoles().grdRoles().getRows().size(); j++)
		{
			AssessmentRoleVo voAssessment = form.lyrTabs().tabRoles().grdRoles().getRows().get(j).getValue();
			if(voAssessment != null && voAssessment.getAppRoleIsNotNull())
			{
				if(voAssessment.getAppRole().equals(voAppRole))
					return true;
			}
		}
		
		return false;
	}
	
	private void addQuestionToGrid(AssessmentQuestionVo assessmentQuestionVo)
	{
		if(assessmentQuestionVo == null)
			return;
		
		int viewMode = getViewMode();
		
		DynamicGridRow row = null;
		switch (viewMode)
		{
			case MULTIPLE_GROUP_NO_FLAT :
				row = form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow();
				if(row != null)
					row = row.getRows().newRow();
			break;
			case MULTIPLE_GROUP_FLAT :
			case SINGLE_GROUP_FLAT :
				row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().newRow();
			break;
			default :
			break;
		}
		
		createRowCells(row, viewMode);
		
		row.setValue(assessmentQuestionVo);
		row.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP)).setValue(assessmentQuestionVo.getQuestionIsNotNull() ? assessmentQuestionVo.getQuestion().getShortText() : "");
		row.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP)).setTooltip(getQuestionTooltip(assessmentQuestionVo));
		row.getCells().get(getGridColumn(COLUMN_MANDATORY)).setValue(assessmentQuestionVo.getIsMandatory());
		row.getCells().get(getGridColumn(COLUMN_MULTIANSWERS)).setValue(assessmentQuestionVo.getAllowsMultipleAnswers());
		engine.populate(row.getCells().get(getGridColumn(COLUMN_STATUS)), ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService()));
		row.getCells().get(getGridColumn(COLUMN_STATUS)).setValue(assessmentQuestionVo.getActiveStatus());
						
		if(viewMode == MULTIPLE_GROUP_FLAT)
		{
			DynamicGridCell cell = row.getCells().get(getGridColumn(COLUMN_GROUP));

			if(form.getLocalContext().getHiddenGroupsIsNotNull())
			{
				for(int i = 0; i < form.getLocalContext().getHiddenGroups().size(); i++)
				{
					cell.getItems().newItem(form.getLocalContext().getHiddenGroups().get(i));
				}
			}
		}
		
		if(viewMode == MULTIPLE_GROUP_NO_FLAT)
		{
			row.setExpandedImage(form.getImages().Core.QuestionSmall);
			row.setCollapsedImage(form.getImages().Core.QuestionSmall);
		}
	}
	private void createRowCells(DynamicGridRow row, int viewMode)
	{
		createRowCells(row, viewMode, true);
	}
	private void createRowCells(DynamicGridRow row, int viewMode, boolean isDetailsGrid)
	{
		if(row == null)
			return;
		
		switch (viewMode)
		{
			case SINGLE_GROUP_FLAT :
			case MULTIPLE_GROUP_NO_FLAT :
				DynamicGridCell cell = row.getCells().newCell(getGridColumn(COLUMN_QUESTIONGROUP, isDetailsGrid), DynamicCellType.STRING);
				cell.setReadOnly(true);
				row.getCells().newCell(getGridColumn(COLUMN_MANDATORY, isDetailsGrid), DynamicCellType.BOOL);
				row.getCells().newCell(getGridColumn(COLUMN_MULTIANSWERS, isDetailsGrid), DynamicCellType.BOOL);
				row.getCells().newCell(getGridColumn(COLUMN_STATUS, isDetailsGrid), DynamicCellType.ANSWER);
				if(!isDetailsGrid)
				{
					DynamicGridCell selectCell = row.getCells().newCell(getGridColumn(COLUMN_SELECT, isDetailsGrid), DynamicCellType.BOOL);
					selectCell.setAutoPostBack(true);
					
				}
				if(isDetailsGrid && isDpp())
				{
					row.getCells().newCell(getGridColumn(COLUMN_NONSTANDARD, isDetailsGrid), DynamicCellType.BOOL);
				}
			break;
			case MULTIPLE_GROUP_FLAT :
				cell = row.getCells().newCell(getGridColumn(COLUMN_QUESTIONGROUP, isDetailsGrid), DynamicCellType.STRING);
				cell.setReadOnly(true);
				row.getCells().newCell(getGridColumn(COLUMN_MANDATORY, isDetailsGrid), DynamicCellType.BOOL);
				row.getCells().newCell(getGridColumn(COLUMN_MULTIANSWERS, isDetailsGrid), DynamicCellType.BOOL);
				row.getCells().newCell(getGridColumn(COLUMN_STATUS, isDetailsGrid), DynamicCellType.ANSWER);
				DynamicGridCell cellGroup = row.getCells().newCell(getGridColumn(COLUMN_GROUP, isDetailsGrid), DynamicCellType.ENUMERATION);
				if(!isDetailsGrid)
				{
					cellGroup.setReadOnly(true);
					DynamicGridCell selectCell = row.getCells().newCell(getGridColumn(COLUMN_SELECT, isDetailsGrid), DynamicCellType.BOOL);
					selectCell.setAutoPostBack(true);
				}
			break;
			default :
			break;
		}
	}
	private void updateQuestionInGrid(AssessmentQuestionVo assessmentQuestionVo)
	{
		DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow();
		
		if(row == null)
			return;
		
		row.setValue(assessmentQuestionVo);
		row.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP)).setValue(assessmentQuestionVo.getQuestionIsNotNull() ? assessmentQuestionVo.getQuestion().getShortText() : "");
		row.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP)).setTooltip(getQuestionTooltip(assessmentQuestionVo));
		row.getCells().get(getGridColumn(COLUMN_MANDATORY)).setValue(assessmentQuestionVo.getIsMandatory());
		row.getCells().get(getGridColumn(COLUMN_MULTIANSWERS)).setValue(assessmentQuestionVo.getAllowsMultipleAnswers());
		DynamicGridCell statusCell = row.getCells().get(getGridColumn(COLUMN_STATUS));
		//engine.populate(statusCell, ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService()));
		statusCell.setValue(assessmentQuestionVo.getActiveStatus());
	}

	private void updateGroupRow(AssessmentQuestionGroupVo group, DynamicGridRow row)
	{
		row.setValue(group);
		row.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP)).setValue(group.getName());
		row.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP)).setReadOnly(true);
		//createToolTip(row, getGridColumn(COLUMN_QUESTIONGROUP), "Description: " + group.getDescription() + CR + "Status: " + (group.getActiveStatusIsNotNull() ? group.getActiveStatus().getText() : "") + CR + "Score: " + (group.getGroupScoreIsNotNull() ? group.getGroupScore().toString() : ""));
		createToolTip(row, getGridColumn(COLUMN_QUESTIONGROUP), getGroupTooltip(group));
		row.setBold(true);
		row.setBackColor(Color.Beige);
		row.setExpanded(true);
		
		form.lyrTabs().tabAssessments().dyngrdDetails().setValue(row.getValue());
	}
	private String getGroupTooltip(AssessmentQuestionGroupVo group)
	{
		StringBuffer sb = new StringBuffer();
		
		sb.append("<b>Name: </b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"); 
		sb.append(group.getName());
		sb.append(CR);
		sb.append("<b>Description: </b>&nbsp;"); 
		sb.append(group.getDescriptionIsNotNull() ? group.getDescription() :"");
		sb.append(CR);
		sb.append("<b>Status: </b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
		sb.append(group.getActiveStatusIsNotNull() ? group.getActiveStatus().getText() : "");
		sb.append(CR);
		sb.append("<b>Score:</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
		sb.append(group.getGroupScoreIsNotNull() ? group.getGroupScore().toString() : "");
		
		return sb.toString();
	}
	private void createToolTip(DynamicGridRow row, DynamicGridColumn column, String tooltip)
	{
		row.getCells().get(column).setTooltip(tooltip);
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(isNewUserAssessment())
		{	
			engine.open(form.getForms().Assessment.UserAssessments);
		}
		else
		{
			form.chkDisplayActive().setValue(false);
			form.getGlobalContext().Core.setUserAssessmentAction("V");
			open();
			//form.lyrTabs().showtabAssessments();
		}
	}
	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setUserAssessmentAction("E");
		form.chkDisplayActive().setValue(false);
		open();
		if(isRolesTabSelected())
			roleGridSelectionChanged();
		//form.lyrTabs().showtabAssessments();
		refreshContextMenu();
		refreshRolesContextMenu();
	}
	

	protected void onBtnPreviewClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setSelectedUserAssessment(form.getLocalContext().getUserAssessment());
		engine.open(form.getForms().Assessment.UserAssessmentPreview);
	}
	
	protected void onFormModeChanged()
	{
		boolean editMode = form.getMode().equals(FormMode.EDIT);

		if(editMode && isStatusActiveOrInactive())
			removeActiveOrPreactiveLookup();
		
		if(editMode)
		{
			 //WDEV-3295 - used to be setReadOnly(isStatusActiveOrInactive())
			form.lyrTabs().tabRoles().grdRoles().setReadOnly(form.getMode().equals(FormMode.EDIT)?false:true);
		}
		
		form.txtURL().setEnabled(editMode);	
			
		updateControlsState();
		refreshRolesContextMenu();
		refreshGroupContextMenu();
	}
	
	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Assessment.UserAssessments);
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSave();
	}
	private void doSave()
	{
		
		if (!validateAndPopulate())
		{
			return;
		}
		
		
		if (!form.getLocalContext().getIsInactive() && PreActiveActiveInactiveStatus.INACTIVE.equals(form.cmbActiveStatus().getValue()))
		{
			engine.showMessage("Are you sure you want to inactivate this assessment ?", "Inactive Assessment", MessageButtons.YESNO, MessageIcon.QUESTION);
			return;
		}
		
		performSave();
	}
	private void performSave()
	{
		if(save())
		{
			form.chkDisplayActive().setValue(false);
			form.getGlobalContext().Core.setUserAssessmentAction("V");
			open();
		}
		
	}
	private boolean validateAndPopulate()
	{
		UserAssessmentVo assessment = form.getLocalContext().getUserAssessment();
		
		if(extraActiveDPPRecordExists(assessment))
		{
			return false;
		}
		
		if(assessment == null)
			assessment = super.populateDataFromScreen();
		else
			assessment = super.populateDataFromScreen(assessment);

		if(assessment.getQuestionGroups() == null)
			assessment.setQuestionGroups(new AssessmentQuestionGroupVoCollection());

		assessment.setTaxonomyMap(form.lyrTabs().tabTaxonomy().ccTaxonomy().getValue());//WDEV-11675
		
		
		assessment.setAssessmentType(getAssessmentType());
		if(form.lyrTabs().tabServices().isHeaderVisible()) //wdev-14028
			assessment.setServices(getServices()); //wdev-14028
		else
			assessment.setServices(null); //wdev-14028
		
		int viewMode = getViewMode();
		
		boolean bRet = false;
		
		switch (viewMode)
		{
			case MULTIPLE_GROUP_NO_FLAT :
				bRet = populateGroupCollectionFromScreenMultipleGroupNoFlat(assessment);
			break;
			case MULTIPLE_GROUP_FLAT :
				bRet = populateGroupCollectionFromScreenMultipleGroupFlat(assessment);
			break;
			case SINGLE_GROUP_FLAT :
				bRet = populateGroupCollectionFromScreenSingleGroupFlat(assessment);
			break;
			default :
			break;
		}

		if(bRet == false)
			return false;

		//Assessment Roles
		assessment.setIsMultiRole(new Boolean(form.chkIsMultirole().getValue()));
		assessment.setAssessmentRoles(getRoles());
		

		assessment.setAssessmentSpecialties(getSpecialties());
		
		if(form.getLocalContext().getLinkedTemplate() == null)
		{
			assessment.setAssociatedReport(null);
		}
		else
		{
			TemplateBoRefVo template = new TemplateBoRefVo();
			
			template.setID_TemplateBo(form.getLocalContext().getLinkedTemplate().getID_TemplateBo());
			
			assessment.setAssociatedReport(template);
		}
		
		String[] validationActiveAssessment = null;
		String isValidActiveAssessment=IsValidActiveAssessment(assessment);
		if(isValidActiveAssessment.equals("This active assessment contains questions and/or groups that are not active"))
			validationActiveAssessment = new String[] { "This active assessment contains questions and/or groups that are not active." };
		else if (isValidActiveAssessment.equals("The group contains inactive questions"))
		{	
			//WDEV-15961
			//String a[]=new String[1];
			//a[0]="The group contains Inactive Questions";
			//engine.showErrors(a);
			engine.showMessage( "The group contains inactive questions","Warning!",MessageButtons.OK);
		}
		
		//verify is exists questions that have only Separator Label as answer type and are set as mandatory --- WDEV-6455 
		String[] arrErrors = assessment.validate(checkQuestions(assessment, validationActiveAssessment));
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		form.getLocalContext().setUserAssessment(assessment);
	
		return true;
	}
	//wdev-14028
	private ServiceShortVoCollection getServices()
	{
		ServiceShortVoCollection tempColl = new ServiceShortVoCollection();
		for(int i = 0;i < form.lyrTabs().tabServices().grdServices().getRows().size();i++)
		{
			tempColl.add(form.lyrTabs().tabServices().grdServices().getRows().get(i).getValue());
		}
		return tempColl;
	}
	//----------
	protected void onChkCustomWidthValueChanged() throws PresentationLogicException
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			if(form.chkCustomWidth().getValue())
			{
				form.intCustomWidth().setEnabled(true);
			}
			else
			{
				form.intCustomWidth().setEnabled(false);
				form.intCustomWidth().setValue(null);
			}
		}
	}
	private boolean save()
	{
		UserAssessmentVo assessment = form.getLocalContext().getUserAssessment();
		try
		{
			assessment = domain.saveAssessment(assessment);
			form.getGlobalContext().Core.setSelectedUserAssessment(assessment);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			if(assessment.getID_UserAssessmentIsNotNull())
			{	
				assessment = domain.getAssessment(assessment.getID_UserAssessment());
				form.getGlobalContext().Core.setSelectedUserAssessment(assessment);
			}
			
			open();
			return false;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}	
		
		return true;
	}

	private SpecialtyCollection getSpecialties() 
	{
		SpecialtyCollection coll = new SpecialtyCollection();
		for (int i = 0 ; i < form.lyrTabs().tabSpecialties().grdSpecialty().getRows().size() ; i++)
			coll.add(form.lyrTabs().tabSpecialties().grdSpecialty().getRows().get(i).getValue());

		return coll;
	}

	private String[] checkQuestions(UserAssessmentVo assessment, String[] validationActiveAssessment) 
	{
		if(assessment == null)
			return validationActiveAssessment;
		
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.chkCanCopy().getValue() && form.cmbCopyLast().getValue() == null)
		{
			uiErrors.add("Copy Last within the is mandatory");
		}
		
		if(assessment.getQuestionGroupsIsNotNull())
		{
			for(int i = 0; i < assessment.getQuestionGroups().size(); i++)
			{
				AssessmentQuestionGroupVo asseGroup = assessment.getQuestionGroups().get(i);
				if(asseGroup != null && asseGroup.getQuestionsIsNotNull())
				{
					for(int j = 0; j < asseGroup.getQuestions().size(); j++)
					{
						Boolean haveOnlySeparatorLabel = checkSeparatorLabel(asseGroup.getQuestions().get(j));
						
						if(haveOnlySeparatorLabel)
						{
							uiErrors.add("\"" + (asseGroup.getQuestions().get(j).getQuestion() != null && asseGroup.getQuestions().get(j).getQuestion().getShortTextIsNotNull() ? asseGroup.getQuestions().get(j).getQuestion().getShortText() : "Question nr. " + j) + "\" cannot be mandatory as it contains only separators.");
						}
					}
				}
			}
		}
		
		String[] questionValidate = new String[uiErrors.size()];
		uiErrors.toArray(questionValidate);
		
		String [] results = new String[questionValidate.length + (validationActiveAssessment != null ? validationActiveAssessment.length : 0)];
		
		if(questionValidate != null)
		{
			for(int i=0; i< questionValidate.length; i++)
			{
				results[i] = questionValidate[i];
			}
		}
		if(validationActiveAssessment != null)
		{
			int next = (questionValidate != null && questionValidate.length > 0) ? questionValidate.length : 0;
			for(int i=0; i<validationActiveAssessment.length; i++)
			{
				results[next + i] = validationActiveAssessment[i];
			}
		}
		
		return results;
	}
	
	private Boolean checkSeparatorLabel(AssessmentQuestionVo assessmentQuestion) 
	{
		if(assessmentQuestion == null || assessmentQuestion.getQuestion() == null)
			return false;
		
		if(assessmentQuestion.getQuestion().getAnswerTypesIsNotNull())
		{
			for(int i=0; i<assessmentQuestion.getQuestion().getAnswerTypes().size(); i++)
			{
				if(assessmentQuestion.getQuestion().getAnswerTypes().get(i) != null
					&& assessmentQuestion.getQuestion().getAnswerTypes().get(i).getAnswerTypeIsNotNull()
						&& !assessmentQuestion.getQuestion().getAnswerTypes().get(i).getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.SEPARATOR))
					
					return false;
			}
		}
		
		if(assessmentQuestion.getIsMandatoryIsNotNull() && assessmentQuestion.getIsMandatory())
			return true;
		
		return false;
	}
	
	private boolean extraActiveDPPRecordExists(UserAssessmentVo assessment)
	{
		UserDefinedAssessmentType assessType = getAssessmentType();
		boolean activeRecord = form.cmbActiveStatus().getValue() != null && form.cmbActiveStatus().getValue().equals(PreActiveActiveInactiveStatus.ACTIVE); 
		if(activeRecord && (isDppType(assessType) || isChildOf(UserDefinedAssessmentType.USERDEFINEDDATASHEET, assessType) || isChildOf(UserDefinedAssessmentType.ASSESSMENTTOOL, assessType) || isChildOf(UserDefinedAssessmentType.TURNING_POINT_ASSESSMENTS, assessType) ))
		{
			Boolean extraActiveDPPExists = domain.isExtraActiveThirdLevelAssessmentSaved(assessment, assessType);
			if(extraActiveDPPExists != null && extraActiveDPPExists.booleanValue())
			{
				engine.showErrors("Error", new String[]{"Cannot save this assessment as there can only be one 'Active' assessment of type '" + assessType + "' on the system."});
				return true;
			}
		}
		
		return false;
	}
	private boolean populateGroupCollectionFromScreenSingleGroupFlat(UserAssessmentVo assessment)
	{
		AssessmentQuestionGroupVo hiddenGroup = null;
		
		if(form.getLocalContext().getHiddenGroupsIsNotNull() && form.getLocalContext().getHiddenGroups().size() > 0)
			hiddenGroup = form.getLocalContext().getHiddenGroups().get(0);
		else
			hiddenGroup = new AssessmentQuestionGroupVo();
		
		if(assessment.getQuestionGroups() == null)
		{
			assessment.setQuestionGroups(new AssessmentQuestionGroupVoCollection());
		}

		assessment.getQuestionGroups().add(hiddenGroup);
		
		if(hiddenGroup.getQuestions() == null)
			hiddenGroup.setQuestions(new AssessmentQuestionVoCollection());
		else
			hiddenGroup.getQuestions().clear();
		
		int seqNo = 1;
		for(int i = 0; i < form.lyrTabs().tabAssessments().dyngrdDetails().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().get(i);
			
			if(row.getValue() instanceof AssessmentQuestionVo)
			{
				AssessmentQuestionVo value = (AssessmentQuestionVo) row.getValue();
				value.setIsMandatory((Boolean) row.getCells().get(getGridColumn(COLUMN_MANDATORY)).getValue());
				if(value.getIsMandatory() == null)
					value.setIsMandatory(Boolean.FALSE);
				value.setAllowsMultipleAnswers((Boolean) row.getCells().get(getGridColumn(COLUMN_MULTIANSWERS)).getValue());
				if(value.getAllowsMultipleAnswers() == null)
					value.setAllowsMultipleAnswers(Boolean.FALSE);
				value.setActiveStatus( (PreActiveActiveInactiveStatus) row.getCells().get(getGridColumn(COLUMN_STATUS)).getValue());
				value.setSequence(new Integer(seqNo++));
				value.setAssessmentAnswerRole(getQuestionRole(value));
				if(isDpp())
				{
					DynamicGridColumn nonStandardColumn = getGridColumn(COLUMN_NONSTANDARD);
					if(nonStandardColumn != null)
					{
						value.setIsNonStandard((Boolean) row.getCells().get(nonStandardColumn).getValue());
					}
				}
				hiddenGroup.getQuestions().add(value);
			}
		}
		
		hiddenGroup.setName(form.txtName().getValue());
		hiddenGroup.setActiveStatus(PreActiveActiveInactiveStatus.ACTIVE);
		
		return true;
	}
	@SuppressWarnings("unchecked")
	private boolean populateGroupCollectionFromScreenMultipleGroupFlat(UserAssessmentVo assessment)
	{
		int seqNo = 1;
		Map prevAssoc = new HashMap();

		//remove all questions from the groups
		for (int i = 0; i < assessment.getQuestionGroups().size(); i++)
		{
			AssessmentQuestionGroupVo group = assessment.getQuestionGroups().get(i);
			
			if(group.getQuestionsIsNotNull())
			{
				//save the old association group <==> question
				for (int j = 0; j < group.getQuestions().size(); j++)
				{
					prevAssoc.put(group.getQuestions().get(j), group);
				}
				
				group.getQuestions().clear();
			}
		}
		
		DynamicGridCellItemCollection groupsCellCollection = null;
		
		for(int i = 0; i < form.lyrTabs().tabAssessments().dyngrdDetails().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().get(i);

			if(row.getValue() instanceof AssessmentQuestionVo)
			{
				AssessmentQuestionVo value = (AssessmentQuestionVo) row.getValue();
				value.setIsMandatory((Boolean) row.getCells().get(getGridColumn(COLUMN_MANDATORY)).getValue());
				if(value.getIsMandatory() == null)
					value.setIsMandatory(Boolean.FALSE);
				value.setAllowsMultipleAnswers((Boolean) row.getCells().get(getGridColumn(COLUMN_MULTIANSWERS)).getValue());
				if(value.getAllowsMultipleAnswers() == null)
					value.setAllowsMultipleAnswers(Boolean.FALSE);
				value.setActiveStatus( (PreActiveActiveInactiveStatus) row.getCells().get(getGridColumn(COLUMN_STATUS)).getValue());
				value.setSequence(new Integer(seqNo++));
				value.setAssessmentAnswerRole(getQuestionRole(value));
				
				DynamicGridCell groupCell = row.getCells().get(getGridColumn(COLUMN_GROUP));
				AssessmentQuestionGroupVo questionGroup = (AssessmentQuestionGroupVo)groupCell.getValue();
				if(groupsCellCollection == null)
					groupsCellCollection = groupCell.getItems();
				if(questionGroup == null)
				{
					engine.showMessage("Every question must belong to a group, please select one !");
					return false;
				}
				
				boolean bFound = false;
				for (int j = 0; j < assessment.getQuestionGroups().size(); j++)
				{
					AssessmentQuestionGroupVo group = assessment.getQuestionGroups().get(j);
					
					//compare instances
					if(group == questionGroup)
					{
						if(group.getQuestions() == null)
							group.setQuestions(new AssessmentQuestionVoCollection());
						
						group.getQuestions().add(value);
						bFound = true;
						break;
					}
				}
				
				if(bFound == false)
				{
					if(questionGroup.getQuestions() == null)
						questionGroup.setQuestions(new AssessmentQuestionVoCollection());

					questionGroup.getQuestions().add(value);
					assessment.getQuestionGroups().add(questionGroup);
				}
			}
		}

		//if a question has got a new parent, we reset the question id to avoid a conflict
		//(org.hibernate.ObjectDeletedException: deleted object would be re-saved by cascade (remove deleted object from associations):)
		for (int i = 0; i < assessment.getQuestionGroups().size(); i++)
		{
			AssessmentQuestionGroupVo group = assessment.getQuestionGroups().get(i);
			
			if(group.getQuestionsIsNotNull())
			{
				for (int j = 0; j < group.getQuestions().size(); j++)
				{
					AssessmentQuestionVo q = group.getQuestions().get(j);
					AssessmentQuestionGroupVo g = (AssessmentQuestionGroupVo) prevAssoc.get(q);
					
					if(g != group)
						q.setID_AssessmentQuestion(null); //this question will be deleted from database and reinserted with a new id
				}
			}
		}
		
		//WDEV-1629 - Groups not saved when not linked to a question (for Multiple Groups - Flat View configuration)
		//Loop through all the groups from the Group Lookup
		
		if (groupsCellCollection == null && form.getLocalContext().getHiddenGroupsIsNotNull()) //WDEV-16188
		{
			assessment.setQuestionGroups(form.getLocalContext().getHiddenGroups()); 
		}
		
		for (int i = 0; groupsCellCollection != null && i < groupsCellCollection.size(); i++)
		{
			Object groupObj = groupsCellCollection.get(i).getValue();
			if (groupObj instanceof AssessmentQuestionGroupVo)
			{
				AssessmentQuestionGroupVo group = (AssessmentQuestionGroupVo)groupObj;
				if(assessment.getQuestionGroups().indexOf(group) < 0)
				{
					assessment.getQuestionGroups().add(group);
				}
			}
		}
		
		return true;
	}
	private boolean populateGroupCollectionFromScreenMultipleGroupNoFlat(UserAssessmentVo assessment)
	{
		assessment.getQuestionGroups().clear();
		int seqNo = 1;
		for(int i = 0; i < form.lyrTabs().tabAssessments().dyngrdDetails().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().get(i);
			
			AssessmentQuestionGroupVo assessmentQuestionGroupVo = (AssessmentQuestionGroupVo) row.getValue();
			if(assessmentQuestionGroupVo.getQuestionsIsNotNull())
				assessmentQuestionGroupVo.getQuestions().clear();
			else
				assessmentQuestionGroupVo.setQuestions(new AssessmentQuestionVoCollection());
			
			for (int j = 0; j < row.getRows().size(); j++)
			{
				DynamicGridRow childRow = row.getRows().get(j);
				
				if(childRow.getValue() instanceof AssessmentQuestionVo)
				{
					AssessmentQuestionVo value = (AssessmentQuestionVo) childRow.getValue();
					value.setIsMandatory((Boolean) childRow.getCells().get(getGridColumn(COLUMN_MANDATORY)).getValue());
					if(value.getIsMandatory() == null)
						value.setIsMandatory(Boolean.FALSE);
					value.setAllowsMultipleAnswers((Boolean) childRow.getCells().get(getGridColumn(COLUMN_MULTIANSWERS)).getValue());
					if(value.getAllowsMultipleAnswers() == null)
						value.setAllowsMultipleAnswers(Boolean.FALSE);
					value.setActiveStatus( (PreActiveActiveInactiveStatus) childRow.getCells().get(getGridColumn(COLUMN_STATUS)).getValue());
					value.setSequence(new Integer(seqNo++));
					value.setAssessmentAnswerRole(getQuestionRole(value));
					assessmentQuestionGroupVo.getQuestions().add(value);
				}
			}
			
			if(assessment.getQuestionGroups().contains(assessmentQuestionGroupVo) == false)
				assessment.getQuestionGroups().add(assessmentQuestionGroupVo);
		}
		
		return true;
	}

	private void open()
	{
		super.clearScreen();
		clearAssessmentRoleLocalContext();

		UserAssessmentShortVo assessmentShort = form.getGlobalContext().Core.getSelectedUserAssessment();

		if (assessmentShort != null && assessmentShort.getID_UserAssessmentIsNotNull())
		{
			// Copy assessment
			UserAssessmentVo assessment = domain.getAssessment(assessmentShort.getID_UserAssessment());
			if (form.getGlobalContext().Core.getUserAssessmentAction().charAt(0) == 'C')
			{
				// Set the form in Edit Mode
				form.getGlobalContext().Core.setUserAssessmentAction("E");

				assessment = getCopyOfAssessmentVo(assessment);
			}
			form.getLocalContext().setUserAssessment(assessment);
			// if a record is being edited then we disable the checkboxes
			form.chkFlatView().setEnabled(false);
			form.chkMultipleGroup().setEnabled(false);
			if (assessment.getGroupQuestionWidthIsNotNull())
				form.chkCustomWidth().setValue(true);
			populateScreenFromData(assessment);
			populateGridDetails(assessment);
			populateRolesDetails(assessment);
			populateSpecialtyGrid(assessment.getAssessmentSpecialties());
			populateServicesGrid(assessment.getServices()); //wdev-14028
			//showHideServiceTab(); //wdev-14028
			
			loadQuestionsIntoMap(assessment);
			
			form.getLocalContext().setLinkedTemplate( assessment.getAssociatedReport());
			
			if(assessment.getAssociatedReportIsNotNull())
			{
				TemplateBoLiteVo template = domain.getReportTemplate(assessment.getAssociatedReport());
				
				if(template != null)
					form.txtReport().setValue(template.getName());
			}
			else
				form.txtReport().setValue(null); //WDEV-17583
		}
		else
		{
			setDefaultName();
		
			if(isDpp())
			{
				form.chkMultipleGroup().setValue(false);
				form.chkFlatView().setValue(true);
			}
			else
			{
				form.chkMultipleGroup().setValue(true);
				form.chkFlatView().setValue(false);				
			}
			
			if (isAssessmentThirdLevelChild())
				form.txtDescription().setFocus();
			else
				form.txtName().setFocus();
			createDynamicGridColumns(form.lyrTabs().tabAssessments().dyngrdDetails());
		}
		
		form.getLocalContext().setLastViewMode(new Integer(getViewMode()));
		setFormMode(isFormInViewMode() ? FormMode.VIEW : FormMode.EDIT);
		refreshContextMenu();
		enableMultiRoleTabs();
		enableGroupTab();
		
		//Set Inactive status
		form.getLocalContext().setIsInactive(isStatusInactive());
	}

	
	private boolean isAssessmentThirdLevelChild()
	{
		return isCurrentAssessmentAChildOf(UserDefinedAssessmentType.USERDEFINEDDATASHEET) 
			|| isCurrentAssessmentAChildOf(UserDefinedAssessmentType.ASSESSMENTTOOL)
			|| isCurrentAssessmentAChildOf(UserDefinedAssessmentType.TURNING_POINT_ASSESSMENTS);
	}

	private UserAssessmentVo getCopyOfAssessmentVo(UserAssessmentVo assessment)
	{
		if(assessment == null)
			return null;
		
		// Clear all ids where the aggregation is composite
		assessment.setID_UserAssessment(null);
		assessment.setActiveStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		for (int i = 0; assessment.getAssessmentRolesIsNotNull() && i < assessment.getAssessmentRoles().size(); i++)
		{
			assessment.getAssessmentRoles().get(i).setID_AssessmentRole(null);
		}

		for (int i = 0; assessment.getQuestionGroupsIsNotNull() && i < assessment.getQuestionGroups().size(); i++)
		{
			assessment.getQuestionGroups().get(i).setID_AssessmentQuestionGroup(null);

			AssessmentQuestionVoCollection voColl = new AssessmentQuestionVoCollection();
			for (int j = 0; assessment.getQuestionGroups().get(i).getQuestionsIsNotNull() && j < assessment.getQuestionGroups().get(i).getQuestions().size(); j++)
			{
				AssessmentQuestionVo voAssessmentQuestion = assessment.getQuestionGroups().get(i).getQuestions().get(j);
				if (voAssessmentQuestion.getActiveStatusIsNotNull() && voAssessmentQuestion.getActiveStatus().equals(PreActiveActiveInactiveStatus.INACTIVE))
					continue;

				voAssessmentQuestion.setID_AssessmentQuestion(null);
				for (int k = 0; voAssessmentQuestion.getAssessmentAnswerRoleIsNotNull() && k < voAssessmentQuestion.getAssessmentAnswerRole().size(); k++)
				{
					voAssessmentQuestion.getAssessmentAnswerRole().get(k).setID_AssessmentQuestionRole(null);
				}
				voColl.add(voAssessmentQuestion);
			}
			assessment.getQuestionGroups().get(i).setQuestions(voColl);
		}
		// End clear
		
		return assessment;
	}
	
	public void populateScreenFromData(UserAssessmentVo assessment)
	{
		super.populateScreenFromData(assessment);
		form.lyrTabs().tabTaxonomy().ccTaxonomy().setValue(assessment.getTaxonomyMap());//WDEV-11675
	}
	
	private void initialize() throws FormOpenException
	{
		if(form.getGlobalContext().Core.getUserAssessmentAction() == null)
			throw new FormOpenException("The global context Core.UserAssessmentAction must be set with 'A', 'C', 'E', 'V' or 'N' !");
		
		form.pnlTitle().setValue(isNonScoringAssessment()?"Non Scoring Assessment":"Scoring Assessment");
		
		if ( ! ims.configuration.gen.ConfigFlag.UI.DISPLAY_ASSESSMENT_SPECIALTY_TAB.getValue())
		{
			form.lyrTabs().tabSpecialties().setVisible(false);
			form.lyrTabs().tabSpecialties().setHeaderVisible(false);
		}
		//wdev-14028
		form.lyrTabs().tabServices().setVisible(false);
		form.lyrTabs().tabServices().setHeaderVisible(false);
		//----------
		
		form.lyrTabs().tabTaxonomy().ccTaxonomy().initialize();
		
		setRoleContextMenu();
		refreshRolesContextMenu();
	}

	/**
	 * @param assessment
	 */
	private void populateGridDetails(UserAssessmentVo assessment)
	{
		int viewMode = getViewMode();

		createDynamicGridColumns(form.lyrTabs().tabAssessments().dyngrdDetails());
		
		if(viewMode == MULTIPLE_GROUP_NO_FLAT)
		{
			populateMultipleGroupsNoFlat(assessment, viewMode);
		}
		else if(viewMode == SINGLE_GROUP_FLAT)
		{
			populateSingleGroupFlat(assessment, viewMode);
		}
		else if(viewMode == MULTIPLE_GROUP_FLAT)
		{
			populateMultipleGroupsFlat(assessment, viewMode);
		}
	}
	private void populateMultipleGroupsFlat(UserAssessmentVo assessment, int viewMode)
	{
		AssessmentQuestionVoCollection coll = new AssessmentQuestionVoCollection();

		for(int i = 0; i < assessment.getQuestionGroups().size(); i++)
		{
			AssessmentQuestionGroupVo group = assessment.getQuestionGroups().get(i);
			
			for (int j = 0; j < group.getQuestions().size(); j++)
			{
				coll.add(group.getQuestions().get(j));
			}
		}
		
		form.getLocalContext().setHiddenGroups(assessment.getQuestionGroups());
		
		coll.sort(); //sort the questions by seqno
		
		for(int i = 0; i < coll.size(); i++)
		{
			AssessmentQuestionVo assessmentQuestionVo = coll.get(i);
			if(isNotActive(assessmentQuestionVo.getActiveStatus()))
				continue;

			if(assessmentQuestionVo.getQuestionIsNotNull() && isNotActive(assessmentQuestionVo.getQuestion().getStatus()))
				continue;
			//Do not display a question that has an inactive group
			AssessmentQuestionGroupVo groupValue = getGroupByQuestion(assessmentQuestionVo, assessment);
			if(groupValue != null && isNotActive(groupValue.getActiveStatus()))
				continue;
			DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().newRow();
			createRowCells(row, viewMode);
		
			
			//engine.populate(row.getCells().get(getGridColumn(COLUMN_STATUS)), ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService()));
			PreActiveActiveInactiveStatusCollection lookupColl = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
			DynamicGridCell cell = row.getCells().get(getGridColumn(COLUMN_STATUS));
			for (int j = 0; j < lookupColl.size(); j++)
			{
				PreActiveActiveInactiveStatus lkup = lookupColl.get(j);
				cell.getItems().newItem(lkup, lkup.getImage());
			}
			
			//populate groups cell
			cell = row.getCells().get(getGridColumn(COLUMN_GROUP));
			for(int j = 0; j < assessment.getQuestionGroups().size(); j++)
			{
				AssessmentQuestionGroupVo group = assessment.getQuestionGroups().get(j);

				cell.getItems().newItem(group);
			}
			
			cell = row.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP));
			cell.setReadOnly(true);
			cell.setTooltip(getQuestionTooltip(assessmentQuestionVo));
			cell.setValue(assessmentQuestionVo.getQuestionIsNotNull() ? assessmentQuestionVo.getQuestion().getShortText() : "");
			cell = row.getCells().get(getGridColumn(COLUMN_MANDATORY));
			cell.setValue(assessmentQuestionVo.getIsMandatory());
			cell = row.getCells().get(getGridColumn(COLUMN_MULTIANSWERS));
			cell.setValue(assessmentQuestionVo.getAllowsMultipleAnswers());
			cell = row.getCells().get(getGridColumn(COLUMN_STATUS));
			cell.setValue(assessmentQuestionVo.getActiveStatus());
			cell = row.getCells().get(getGridColumn(COLUMN_GROUP));
			cell.setValue(groupValue);
			
			row.setValue(assessmentQuestionVo);
			// row tooltip no longer supported
			// row.setTooltip(assessmentQuestionVo.getQuestionIsNotNull() ? assessmentQuestionVo.getQuestion().getText() : "");
		}
	}
	private String getQuestionTooltip(AssessmentQuestionVo assessmentQuestionVo)
	{
		if(assessmentQuestionVo == null)
			return "";
		
		StringBuffer sb = new StringBuffer();
		
		if(assessmentQuestionVo.getQuestionIsNotNull())
		{
			sb.append("<b>Short text: &nbsp;</b>");
			sb.append(assessmentQuestionVo.getQuestionIsNotNull() ? assessmentQuestionVo.getQuestion().getShortText() : "");
			sb.append(CR);
			sb.append("<b>Text: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>");
			sb.append(assessmentQuestionVo.getQuestionIsNotNull() ? assessmentQuestionVo.getQuestion().getText() : "");
			sb.append(CR);
		}
		
		if(assessmentQuestionVo.getQuestionIsNotNull() && assessmentQuestionVo.getQuestion().getAnswerTypesIsNotNull())
		{
			sb.append("<b>Status: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>");
			sb.append(assessmentQuestionVo.getQuestion().getStatusIsNotNull() ? assessmentQuestionVo.getQuestion().getStatus().toString() : "");
			sb.append(CR);
			
			sb.append("<b>Answer Types: &nbsp;&nbsp;</b>");
			for (int i = 0; i < assessmentQuestionVo.getQuestion().getAnswerTypes().size(); i++)
			{
				QuestionAnswerTypeVo answerType = assessmentQuestionVo.getQuestion().getAnswerTypes().get(i);
				if(answerType.getActiveStatusIsNotNull() && answerType.getActiveStatus().booleanValue())
				{
					sb.append(CR);
					sb.append("&nbsp;&nbsp;&nbsp;");
					sb.append(i+1);
					sb.append(")");
					sb.append("&nbsp;&nbsp;");
					sb.append(answerType.getAnswerType().getText());
					String separator = answerType.getAnswerTypeIsNotNull() && answerType.getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.SEPARATOR)?" - " + answerType.getSeparatorText():"";
					sb.append(separator);
					if(answerType.getOptionsIsNotNull())
					{
						for (int j = 0; j < answerType.getOptions().size(); j++)
						{
							AnswerOptionVo option = answerType.getOptions().get(j);
							sb.append(CR);
							sb.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;->&nbsp;");
							sb.append(option.getOptionText());
							
							if(option.getScoreIsNotNull())
							{
								sb.append("&nbsp;&nbsp; (Score: ");
								sb.append(option.getScore().toString());
								sb.append(")");
							}
						}
					}
					sb.append("</li>");
				}
			}
		}
		return sb.toString();
	}
	private AssessmentQuestionGroupVo getGroupByQuestion(AssessmentQuestionVo assessmentQuestionVo, UserAssessmentVo assessment)
	{
		for(int i = 0; i < assessment.getQuestionGroups().size(); i++)
		{
			AssessmentQuestionGroupVo group = assessment.getQuestionGroups().get(i);
			
			for (int j = 0; j < group.getQuestions().size(); j++)
			{
				if(group.getQuestions().get(j).equals(assessmentQuestionVo))//getID_AssessmentQuestionIsNotNull() && group.getQuestions().get(j).getID_AssessmentQuestion().equals(assessmentQuestionVo.getID_AssessmentQuestion()))
					return group;
			}
		}
		
		return null;
	}
	private void populateSingleGroupFlat(UserAssessmentVo assessment, int viewMode)
	{
		AssessmentQuestionGroupVoCollection hiddenGroups = new AssessmentQuestionGroupVoCollection();
		if(assessment.getQuestionGroupsIsNotNull() && assessment.getQuestionGroups().size() > 0)
			hiddenGroups.add(assessment.getQuestionGroups().get(0)); //we should only have 1 item
		
		form.getLocalContext().setHiddenGroups(hiddenGroups);
		
		if(assessment.getQuestionGroups().size() > 0)
		{
			for(int i = 0; i < assessment.getQuestionGroups().get(0).getQuestions().size(); i++)
			{
				AssessmentQuestionVo assessmentQuestionVo = assessment.getQuestionGroups().get(0).getQuestions().get(i);
				if(isNotActive(assessmentQuestionVo.getActiveStatus()))
					continue;
				
				if(assessmentQuestionVo.getQuestionIsNotNull() && isNotActive(assessmentQuestionVo.getQuestion().getStatus()))
					continue;
				
				DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().newRow();
				createRowCells(row, viewMode);
				
				//engine.populate(row.getCells().get(getGridColumn(COLUMN_STATUS)), ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService()));
				PreActiveActiveInactiveStatusCollection lookupColl = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
				DynamicGridCell cell = row.getCells().get(getGridColumn(COLUMN_STATUS));
				for (int j = 0; j < lookupColl.size(); j++)
				{
					PreActiveActiveInactiveStatus lkup = lookupColl.get(j);
					cell.getItems().newItem(lkup, lkup.getImage());
				}
	
				cell = row.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP));
				cell.setReadOnly(true);
				cell.setValue(assessmentQuestionVo.getQuestionIsNotNull() ? assessmentQuestionVo.getQuestion().getShortText() : "");
				cell.setTooltip(getQuestionTooltip(assessmentQuestionVo));
				cell = row.getCells().get(getGridColumn(COLUMN_MANDATORY));
				cell.setValue(assessmentQuestionVo.getIsMandatory());
				cell = row.getCells().get(getGridColumn(COLUMN_MULTIANSWERS));
				cell.setValue(assessmentQuestionVo.getAllowsMultipleAnswers());
				cell = row.getCells().get(getGridColumn(COLUMN_STATUS));
				cell.setValue(assessmentQuestionVo.getActiveStatus());
				
				if(isDpp())
				{
					DynamicGridColumn colNonStandard = getGridColumn(COLUMN_NONSTANDARD);
					if(colNonStandard != null)
					{
						DynamicGridCell cellNonStandard = row.getCells().get(colNonStandard);
						if(cellNonStandard != null)
						{
							cellNonStandard.setValue(assessmentQuestionVo.getIsNonStandard());
						}
					}
				}
				
				row.setValue(assessmentQuestionVo);
				// row tooltip no longer supported
				// row.setTooltip(assessmentQuestionVo.getQuestionIsNotNull() ? assessmentQuestionVo.getQuestion().getText() : "");
			}
		}
	}
	private void populateMultipleGroupsNoFlat(UserAssessmentVo assessment, int viewMode)
	{
		for(int i = 0; i < assessment.getQuestionGroups().size(); i++)
		{
			AssessmentQuestionGroupVo group = assessment.getQuestionGroups().get(i);
			if(isNotActive(group.getActiveStatus()))
				continue;
						
			DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().newRow();
			
			DynamicGridCell cell = row.getCells().newCell(getGridColumn(COLUMN_QUESTIONGROUP), DynamicCellType.STRING);
			cell.setValue(group.getName());
			cell.setReadOnly(true);
			
			row.setValue(group);
			createToolTip(row, getGridColumn(COLUMN_QUESTIONGROUP), getGroupTooltip(group));
			row.setBold(true);
			row.setBackColor(Color.Beige);
			row.setExpanded(false);
			
			for (int j = 0; j < group.getQuestions().size(); j++)
			{
				AssessmentQuestionVo question = group.getQuestions().get(j);

				if(isNotActive(question.getActiveStatus()))
					continue;
				if(question.getQuestionIsNotNull() && isNotActive(question.getQuestion().getStatus()))
					continue;
					
				DynamicGridRow childRow = row.getRows().newRow();

				createRowCells(childRow, viewMode);
				
				engine.populate(childRow.getCells().get(getGridColumn(COLUMN_STATUS)), ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService()));
				
				cell = childRow.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP));
				cell.setValue(question.getQuestionIsNotNull() ? question.getQuestion().getShortText() : "");
				cell.setTooltip(getQuestionTooltip(question));
				cell = childRow.getCells().get(getGridColumn(COLUMN_MANDATORY));
				cell.setValue(question.getIsMandatory());
				cell = childRow.getCells().get(getGridColumn(COLUMN_MULTIANSWERS));
				cell.setValue(question.getAllowsMultipleAnswers());
				cell = childRow.getCells().get(getGridColumn(COLUMN_STATUS));
				cell.setValue(question.getActiveStatus());
				
				childRow.setValue(question);
				// row tooltip no longer supported
				// childRow.setTooltip(question.getQuestionIsNotNull() ? question.getQuestion().getText() : "");
				childRow.setExpandedImage(form.getImages().Core.QuestionSmall);
				childRow.setCollapsedImage(form.getImages().Core.QuestionSmall);
			}
		}
	}
	private boolean isNotActive(PreActiveActiveInactiveStatus activeStatus)
	{
		return form.chkDisplayActive().getValue() && activeStatus != null && !activeStatus.equals(PreActiveActiveInactiveStatus.ACTIVE);
	}

	private DynamicGridColumn getGridColumn(String identifier)
	{
		return getGridColumn(identifier, true);
	}
	private DynamicGridColumn getGridColumn(String identifier, boolean isDetailsGrid)
	{
		if(isDetailsGrid)
			return form.lyrTabs().tabAssessments().dyngrdDetails().getColumns().getByIdentifier(identifier);

		return form.lyrTabs().tabRoles().dyngrdQuestions().getColumns().getByIdentifier(identifier);
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.UserAssessmentNew.ADD_GROUP :
				addGroup();
				break;
			case GenForm.ContextMenus.UserAssessmentNew.EDIT_GROUP :
				editGroup();
				break;
			case GenForm.ContextMenus.UserAssessmentNew.REMOVE_GROUP:
				removeGroup();
				break;
			case GenForm.ContextMenus.UserAssessmentNew.VIEW_GROUP :
				viewGroup();
				break;
			case GenForm.ContextMenus.UserAssessmentNew.ADD_QUESTION :
				addQuestion();
				break;
			case GenForm.ContextMenus.UserAssessmentNew.EDIT_QUESTION :
				editQuestion();
				break;
			case GenForm.ContextMenus.UserAssessmentNew.REMOVE_QUESTION:
				removeQuestion();
				break;
			case GenForm.ContextMenus.UserAssessmentNew.VIEW_QUESTION :
				viewQuestion();
				break;
			case GenForm.ContextMenus.UserAssessmentNew.MOVE_UP :
				moveUp();
				break;
			case GenForm.ContextMenus.UserAssessmentNew.MOVE_DOWN :
				moveDown();
				break;
			
			case GenForm.ContextMenus.GenericGrid.Add:
				addRoleInGrid();
				break;
			case GenForm.ContextMenus.GenericGrid.Remove:
				removeRoleFromGrid();
				break;
				

			case GenForm.ContextMenus.LIP.New :
				updateSpecialty();
			break;
			case GenForm.ContextMenus.LIP.Update :
				removeSpecialty();
			break;
			
			//wdev-14028
			case GenForm.ContextMenus.AssessmentNamespace.ServiceMenu.UPDATE:
				updateServicies();
			break;
			case GenForm.ContextMenus.AssessmentNamespace.ServiceMenu.REMOVE:
				removeServices();
			break;
			
			//----------
			case GenForm.ContextMenus.UserAssessmentGroup.ADD :
				addGroup();
				break;
			case GenForm.ContextMenus.UserAssessmentGroup.EDIT :
				editGroup();
				break;
			case GenForm.ContextMenus.UserAssessmentGroup.REMOVE:
				removeGroup();
				break;
			default :
				break;
		}
		
		refreshContextMenu();
	}
	private void addGroup()
	{
		form.getGlobalContext().Core.setSelectedQuestionGroup(null);
		form.getGlobalContext().Core.setUserAssessmentAction("A");
		engine.open(form.getForms().Assessment.GroupSelectNew, "Add Group");
	}
	private void editGroup()
	{
		if (isAssessmentTabSelected())
			form.getGlobalContext().Core.setSelectedQuestionGroup((AssessmentQuestionGroupVo) form.lyrTabs().tabAssessments().dyngrdDetails().getValue());
		if (isGroupTabSelected())
			form.getGlobalContext().Core.setSelectedQuestionGroup(form.lyrTabs().tabGroups().grdGroups().getValue());
		form.getGlobalContext().Core.setUserAssessmentAction("E");
		engine.open(form.getForms().Assessment.GroupSelectNew, "Edit Group");
	}

	private void viewGroup()
	{
		form.getGlobalContext().Core.setSelectedQuestionGroup((AssessmentQuestionGroupVo) form.lyrTabs().tabAssessments().dyngrdDetails().getValue());
		form.getGlobalContext().Core.setUserAssessmentAction("V");
		engine.open(form.getForms().Assessment.GroupSelectNew, "View Group");
	}
	
	private void removeGroup()
	{
		if(isGroupTabSelected())
		{
			grdGroupsRow row = form.lyrTabs().tabGroups().grdGroups().getSelectedRow();
			if (row != null)
			{
				AssessmentQuestionGroupVoCollection voColl = form.getLocalContext().getHiddenGroups();
				if (voColl != null)
				{
					int index = voColl.indexOf(row.getValue());
					if (index >= 0)
						voColl.remove(index);

					form.getLocalContext().setHiddenGroups(voColl);
				}
			}
			form.lyrTabs().tabGroups().grdGroups().removeSelectedRow();
			AssessmentQuestionGroupVoCollection voColl = form.getLocalContext().getHiddenGroups();
			refreshGroupCellData(voColl);

			refreshGroupContextMenu();
		}
		
		if(isAssessmentTabSelected())
		{
			DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow();
			if (row != null)
			{
				form.lyrTabs().tabAssessments().dyngrdDetails().getRows().remove(row);

				refreshContextMenu();
			}
			else
			{
				engine.showMessage("Please select a Group");
			}
		}
	}
	
	private void addQuestion()
	{
		form.getGlobalContext().Core.setQuestionType(getQuestionType());
		form.getGlobalContext().Core.setSelectedAssessmentQuestion(null);
		form.getGlobalContext().Core.setUserAssessmentAction("A");
		form.getGlobalContext().Core.setQuestionFormMode(null);
		form.getGlobalContext().Core.setUserDefinedAssessmentType(getAssessmentType());
		engine.open(form.getForms().Core.QuestionSelectNew);
	}
	
	private void removeQuestion()
	{
		DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow();
		if(row != null)
		{
			form.lyrTabs().tabAssessments().dyngrdDetails().getRows().remove(row);
			refreshContextMenu();	
		}
		else
		{
			engine.showMessage("Please select a Question");
		}
	}

	/**
	 * @return
	 */
	private QuestionType getQuestionType()
	{
		QuestionType questionType = isNonScoringAssessment()?QuestionType.PRIMARY:QuestionType.SCORINGASSESSEMNTQUESTION;
		return questionType;
	}
	
	private void editQuestion()
	{
		DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow();
		
		if(row != null && row.getValue() != null && row.getValue() instanceof AssessmentQuestionVo)
		{
			if(isNonScoringAssessment())
			{
				AssessmentQuestionVo value = (AssessmentQuestionVo) row.getValue();
				form.getGlobalContext().Core.setQuestionType(getQuestionType());
				form.getGlobalContext().Core.setSelectedQuestion(value.getQuestion());
				form.getGlobalContext().Core.setUserAssessmentAction("E");
				form.getGlobalContext().Core.setQuestionFormMode(FormMode.EDIT);
			}
			else
			{
				AssessmentQuestionVo value = (AssessmentQuestionVo) row.getValue();
				value.setIsMandatory((Boolean) row.getCells().get(getGridColumn(COLUMN_MANDATORY)).getValue());
				if(value.getIsMandatory() == null)
					value.setIsMandatory(Boolean.FALSE);
				value.setAllowsMultipleAnswers((Boolean) row.getCells().get(getGridColumn(COLUMN_MULTIANSWERS)).getValue());
				if(value.getAllowsMultipleAnswers() == null)
					value.setAllowsMultipleAnswers(Boolean.FALSE);
				value.setActiveStatus( (PreActiveActiveInactiveStatus) row.getCells().get(getGridColumn(COLUMN_STATUS)).getValue());
				
				form.getGlobalContext().Core.setQuestionType(getQuestionType());
				form.getGlobalContext().Core.setSelectedAssessmentQuestion(value);
				form.getGlobalContext().Core.setUserAssessmentAction("E");
				form.getGlobalContext().Core.setUserDefinedAssessmentType(getAssessmentType());
			}
			
			engine.open(form.getForms().Core.QuestionSelectNew);
		}
	}
	private void viewQuestion()
	{
		DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow();
		
		if(row != null && row.getValue() != null && row.getValue() instanceof AssessmentQuestionVo)
		{
			form.getGlobalContext().Core.setQuestionType(getQuestionType());
			form.getGlobalContext().Core.setSelectedAssessmentQuestion((AssessmentQuestionVo)row.getValue());
			form.getGlobalContext().Core.setUserAssessmentAction("V");
			engine.open(form.getForms().Core.QuestionSelectNew);
		}
	}
	private void moveUp()
	{
		if(form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow() != null)
			form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow().moveUp();
		
		refreshContextMenu();
	}
	private void moveDown()
	{
		if(form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow() != null)
			form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow().moveDown();
		refreshContextMenu();
	}
	private void refreshContextMenu()
	{
		form.getContextMenus().hideAllUserAssessmentNewMenuItems();

		int viewMode 	 = getViewMode();
		boolean editMode = isRecordEditable();
		boolean allowAdd = isAddGroupQuestionsAllowed();
		boolean allowQuestionEdit = editMode;
		boolean allowQuestionRemove = isQuestionRemovable();
		boolean allowViewQuestion = isNonScoringAssessment() == false;
		if(viewMode == SINGLE_GROUP_NO_FLAT)
			return;
		
		boolean bIsEditable = form.btnSave().isEnabled();
		form.getContextMenus().getUserAssessmentNewADD_QUESTIONItem().setText(isQuestionToBeAddedToGroup()?"Add Question to Group":"Add Question");
		if(viewMode == SINGLE_GROUP_FLAT)
		{
			if(bIsEditable == true)
				form.getContextMenus().getUserAssessmentNewADD_QUESTIONItem().setVisible(allowAdd);				

			if(form.lyrTabs().tabAssessments().dyngrdDetails().getValue() != null)
			{
				if(form.lyrTabs().tabAssessments().dyngrdDetails().getValue() instanceof AssessmentQuestionVo)
				{
					if(bIsEditable == true)
					{
						form.getContextMenus().getUserAssessmentNewEDIT_QUESTIONItem().setVisible(allowQuestionEdit);
						if (form.getLocalContext().getUserAssessmentIsNotNull())
							if (form.getLocalContext().getUserAssessment().getActiveStatusIsNotNull())
								if (form.getLocalContext().getUserAssessment().getActiveStatus().equals(PreActiveActiveInactiveStatus.PREACTIVE))
									form.getContextMenus().getUserAssessmentNewREMOVE_QUESTIONItem().setVisible(allowQuestionRemove);
					}
					form.getContextMenus().getUserAssessmentNewVIEW_QUESTIONItem().setVisible(allowViewQuestion);
				}
				
				if(form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow() != null && bIsEditable)
				{
					if(form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow().canMoveUp())
						form.getContextMenus().getUserAssessmentNewMOVE_UPItem().setVisible(editMode);
					if(form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow().canMoveDown())
						form.getContextMenus().getUserAssessmentNewMOVE_DOWNItem().setVisible(editMode);
				}
			}
		}
		else if(viewMode == MULTIPLE_GROUP_NO_FLAT)
		{
			if(bIsEditable == true)
				form.getContextMenus().getUserAssessmentNewADD_GROUPItem().setVisible(allowAdd);
			
			if(form.lyrTabs().tabAssessments().dyngrdDetails().getValue() != null)
			{
				if(form.lyrTabs().tabAssessments().dyngrdDetails().getValue() instanceof AssessmentQuestionGroupVo)
				{
					if(bIsEditable == true)
					{
						form.getContextMenus().getUserAssessmentNewADD_QUESTIONItem().setVisible(allowAdd);				
						form.getContextMenus().getUserAssessmentNewEDIT_GROUPItem().setVisible(editMode);
						if (form.getLocalContext().getUserAssessmentIsNotNull())
							if (form.getLocalContext().getUserAssessment().getActiveStatusIsNotNull())
								if (form.getLocalContext().getUserAssessment().getActiveStatus().equals(PreActiveActiveInactiveStatus.PREACTIVE))
									form.getContextMenus().getUserAssessmentNewREMOVE_GROUPItem().setVisible(editMode);
					}
					form.getContextMenus().getUserAssessmentNewVIEW_GROUPItem().setVisible(true);
				}
				else if(form.lyrTabs().tabAssessments().dyngrdDetails().getValue() instanceof AssessmentQuestionVo)
				{
					if(bIsEditable == true)
					{
						form.getContextMenus().getUserAssessmentNewEDIT_QUESTIONItem().setVisible(allowQuestionEdit);
						if (form.getLocalContext().getUserAssessmentIsNotNull())
							if (form.getLocalContext().getUserAssessment().getActiveStatusIsNotNull())
								if (form.getLocalContext().getUserAssessment().getActiveStatus().equals(PreActiveActiveInactiveStatus.PREACTIVE))
									form.getContextMenus().getUserAssessmentNewREMOVE_QUESTIONItem().setVisible(allowQuestionRemove);
					}
					form.getContextMenus().getUserAssessmentNewVIEW_QUESTIONItem().setVisible(allowViewQuestion);
				}
				
				if(form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow() != null && bIsEditable)
				{
					if(form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow().canMoveUp())
						form.getContextMenus().getUserAssessmentNewMOVE_UPItem().setVisible(editMode);
					if(form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow().canMoveDown())
						form.getContextMenus().getUserAssessmentNewMOVE_DOWNItem().setVisible(editMode);
				}
			}
		}
		else if(viewMode == MULTIPLE_GROUP_FLAT)
		{
			if(bIsEditable == true)
			{
				form.getContextMenus().getUserAssessmentNewADD_QUESTIONItem().setVisible(allowAdd);				
				form.getContextMenus().getUserAssessmentNewADD_GROUPItem().setVisible(allowAdd);
			}
			
			if(form.lyrTabs().tabAssessments().dyngrdDetails().getValue() != null)
			{
				if(form.lyrTabs().tabAssessments().dyngrdDetails().getValue() instanceof AssessmentQuestionVo)
				{
					if(bIsEditable == true)
					{
						form.getContextMenus().getUserAssessmentNewEDIT_QUESTIONItem().setVisible(allowQuestionEdit);
						if (form.getLocalContext().getUserAssessmentIsNotNull())
							if (form.getLocalContext().getUserAssessment().getActiveStatusIsNotNull())
								if (form.getLocalContext().getUserAssessment().getActiveStatus().equals(PreActiveActiveInactiveStatus.PREACTIVE))
									form.getContextMenus().getUserAssessmentNewREMOVE_QUESTIONItem().setVisible(allowQuestionRemove);
					}
					form.getContextMenus().getUserAssessmentNewVIEW_QUESTIONItem().setVisible(allowViewQuestion);
				}
				
				if(form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow() != null && bIsEditable)
				{
					if(form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow().canMoveUp())
						form.getContextMenus().getUserAssessmentNewMOVE_UPItem().setVisible(editMode);
					if(form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow().canMoveDown())
						form.getContextMenus().getUserAssessmentNewMOVE_DOWNItem().setVisible(editMode);
				}
			}
		}
	}
	
	private void refreshRolesContextMenu()
	{
		boolean editMode = form.getMode().equals(FormMode.EDIT);
		form.getContextMenus().getGenericGridAddItem().setVisible(editMode);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(editMode && form.lyrTabs().tabRoles().grdRoles().getSelectedRowIndex() >= 0);
	}
	
	private boolean isQuestionToBeAddedToGroup()
	{
		DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getSelectedRow();
		if(row != null && row.getValue() instanceof AssessmentQuestionGroupVo)
			return true;
		
		return false;
	}
	private boolean isAddGroupQuestionsAllowed()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			if(isNonScoringAssessment())
				return true;

			return isStatusActiveOrInactive() == false;
		}
		
		return false;
	}
	
	private boolean isQuestionRemovable()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			if(isNonScoringAssessment())
				return true;

			return isStatusActiveOrInactive() == false;
		}
		
		return false;
	}

	private boolean isRecordEditable()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			//Allow to edit the groups/questions for non scoring assessment
			if(isNonScoringAssessment())
			{
				return true;
			}

			return isStatusInactive() == false;
		}
		
		return false;
	}

	private void createDynamicGridColumns(DynamicGrid dynGrid)
	{
		createDynamicGridColumns(dynGrid, true);
	}
	private void createDynamicGridColumns(DynamicGrid dynGrid, boolean clearHiddenGroups)
	{
		int viewMode = getViewMode();
		boolean isDetailsGrid = dynGrid.equals(form.lyrTabs().tabAssessments().dyngrdDetails())?true:false;
		dynGrid.getColumns().clear();
		dynGrid.getRows().clear();
		
		//reset the hiddengroups
		AssessmentQuestionGroupVoCollection hiddenGroups = form.getLocalContext().getHiddenGroups();
		if(hiddenGroups != null && clearHiddenGroups)
			hiddenGroups.clear();
		
		if(viewMode == SINGLE_GROUP_NO_FLAT)
			return; //we should not get here
		
		if(viewMode == SINGLE_GROUP_FLAT)
		{
			DynamicGridColumn newColumn = dynGrid.getColumns().newColumn("Question", COLUMN_QUESTIONGROUP);
			newColumn.setWidth(isDetailsGrid?(isDpp()?380:450):400);
			newColumn = dynGrid.getColumns().newColumn("Mandatory", COLUMN_MANDATORY);
			newColumn.setWidth(isDetailsGrid?80:0);
			newColumn.setAlignment(Alignment.CENTER);
			newColumn = dynGrid.getColumns().newColumn("Multiple Answers", COLUMN_MULTIANSWERS);
			newColumn.setWidth(isDetailsGrid?120:0);
			newColumn.setAlignment(Alignment.CENTER);
			newColumn = dynGrid.getColumns().newColumn("Status", COLUMN_STATUS);
			newColumn.setWidth(isDetailsGrid?(isDpp()?65:-1):0);
			if(isDetailsGrid == false)
			{
				addColumnAnswered(dynGrid);
			}
			
			if(isDetailsGrid && isDpp())
			{
				addNonStandardColumn(dynGrid);
			}	
			
			createHiddenGroupsIfDontExistAlready();
		}
		else if(viewMode == MULTIPLE_GROUP_NO_FLAT)
		{
			DynamicGridColumn newColumn = dynGrid.getColumns().newColumn("Group / Questions", COLUMN_QUESTIONGROUP);
			newColumn.setWidth(isDetailsGrid?450:400);
			newColumn = dynGrid.getColumns().newColumn("Mandatory", COLUMN_MANDATORY);
			newColumn.setWidth(isDetailsGrid?80:0);
			newColumn.setAlignment(Alignment.CENTER);
			newColumn = dynGrid.getColumns().newColumn("Multiple Answers", COLUMN_MULTIANSWERS);
			newColumn.setWidth(isDetailsGrid?120:0);
			newColumn.setAlignment(Alignment.CENTER);
			newColumn = dynGrid.getColumns().newColumn("Status", COLUMN_STATUS);
			newColumn.setWidth(isDetailsGrid?-1:0);
			if(isDetailsGrid == false)
			{
				addColumnAnswered(dynGrid);
			}
		}
		else if(viewMode == MULTIPLE_GROUP_FLAT)
		{
			DynamicGridColumn newColumn = dynGrid.getColumns().newColumn("Question", COLUMN_QUESTIONGROUP);
			//WDEV-724 - changed from 450 to 350
			newColumn.setWidth(isDetailsGrid?350:400);
			newColumn = dynGrid.getColumns().newColumn("Mandatory", COLUMN_MANDATORY);
			newColumn.setWidth(isDetailsGrid?80:0);
			newColumn.setAlignment(Alignment.CENTER);
			newColumn = dynGrid.getColumns().newColumn("Multiple Answers", COLUMN_MULTIANSWERS);
			newColumn.setWidth(isDetailsGrid?120:0);
			newColumn.setAlignment(Alignment.CENTER);
			newColumn = dynGrid.getColumns().newColumn("Status", COLUMN_STATUS);
			newColumn.setWidth(isDetailsGrid?100:0);
			newColumn = dynGrid.getColumns().newColumn("Group", COLUMN_GROUP);
			newColumn.setWidth(isDetailsGrid?-1:0);
			if(isDetailsGrid == false)
			{
				addColumnAnswered(dynGrid);
			}
			createHiddenGroupsIfDontExistAlready();
		}
	}

	private void addColumnAnswered(DynamicGrid dynGrid)
	{
		DynamicGridColumn newColumn = dynGrid.getColumns().newColumn("Answered", COLUMN_SELECT);
		newColumn.setWidth(-1);
		newColumn.setAlignment(Alignment.CENTER);
		newColumn.setHeaderAlignment(Alignment.CENTER);
	}
	
	private void addNonStandardColumn(DynamicGrid dynGrid)
	{
		DynamicGridColumn newColumn = dynGrid.getColumns().newColumn("Is Non Standard", COLUMN_NONSTANDARD);
		newColumn.setWidth(-1);
		newColumn.setAlignment(Alignment.CENTER);
		newColumn.setHeaderAlignment(Alignment.CENTER);		
	}
	private void createHiddenGroupsIfDontExistAlready()
	{
		AssessmentQuestionGroupVoCollection groupsColl = form.getLocalContext().getHiddenGroups();
		if(groupsColl == null)
		{
			groupsColl = new AssessmentQuestionGroupVoCollection();
			form.getLocalContext().setHiddenGroups(groupsColl);
		}
	}
	private int getViewMode()
	{
		if(form.chkMultipleGroup().getValue() == false && form.chkFlatView().getValue() == false)
			return SINGLE_GROUP_NO_FLAT; 
		else if(form.chkMultipleGroup().getValue() == false && form.chkFlatView().getValue() == true)
			return SINGLE_GROUP_FLAT;
		else if(form.chkMultipleGroup().getValue() == true && form.chkFlatView().getValue() == false)
			return MULTIPLE_GROUP_NO_FLAT;
		else //if(form.chkMultipleGroup().getValue() == true && form.chkFlatView().getValue() == true)
			return MULTIPLE_GROUP_FLAT;
		
	}
	protected void onChkMultipleGroupValueChanged() throws PresentationLogicException
	{
		onMultipleGroupValueChanged();
	}

	private void onMultipleGroupValueChanged()
	{	
		if (form.chkMultipleGroup().getValue() == false)
		{
			form.chkMultipleGroup().setValue(true);
			form.getLocalContext().setLastViewMode(new Integer(getViewMode()));
			form.chkMultipleGroup().setValue(false);
		}
		else
		{
			form.chkMultipleGroup().setValue(false);
			form.getLocalContext().setLastViewMode(new Integer(getViewMode()));
			form.chkMultipleGroup().setValue(true);
		}
		
		boolean value = form.chkMultipleGroup().getValue();
		if(value == false)
		{
			form.chkFlatView().setValue(true);
			form.chkFlatView().setEnabled(false);
		}
		else
			form.chkFlatView().setEnabled(true);

		if(form.lyrTabs().tabAssessments().dyngrdDetails().getRows().size() > 0)
		{
			form.getGlobalContext().Core.setYesNoDialogMessage("Warning: this will remove the group/questions already entered, do you want to continue ?");
			engine.open(form.getForms().Core.YesNoDialog);
			return;
		}

		createDynamicGridColumns(form.lyrTabs().tabAssessments().dyngrdDetails());
		if(isRolesTabSelected())
			createDynamicGridColumns(form.lyrTabs().tabRoles().dyngrdQuestions());
		
		refreshContextMenu();
		enableGroupTab();
	}

	protected void onChkFlatViewValueChanged() throws PresentationLogicException
	{
		if (form.chkFlatView().getValue() == false)
		{
			form.chkFlatView().setValue(true);
			form.getLocalContext().setLastViewMode(new Integer(getViewMode()));
			form.chkFlatView().setValue(false);
		}
		else
		{
			form.chkFlatView().setValue(false);
			form.getLocalContext().setLastViewMode(new Integer(getViewMode()));
			form.chkFlatView().setValue(true);
		}
		
		boolean yesNoDialogOpened = false;
		if(form.lyrTabs().tabAssessments().dyngrdDetails().getRows().size() > 0)
		{
			form.getGlobalContext().Core.setYesNoDialogMessage("Warning: this will remove the group/questions already entered, do you want to continue ?");
			engine.open(form.getForms().Core.YesNoDialog);
			yesNoDialogOpened = true;
		}
		else
		{
			createDynamicGridColumns(form.lyrTabs().tabAssessments().dyngrdDetails());
			if(isRolesTabSelected())
				createDynamicGridColumns(form.lyrTabs().tabRoles().dyngrdQuestions());
		}
		
		refreshContextMenu();
		if(!yesNoDialogOpened)
			enableGroupTab();
	}
	protected void onDyngrdDetailsRowSelectionChanged(DynamicGridRow row)
	{
		refreshContextMenu();		
	}
	
	protected void onChkActiveValueChanged() throws PresentationLogicException
	{
		UserAssessmentShortVo assessmentShort = form.getGlobalContext().Core.getSelectedUserAssessment();
		if(assessmentShort != null && assessmentShort.getID_UserAssessmentIsNotNull())
		{
			UserAssessmentVo assessment = domain.getAssessment(assessmentShort.getID_UserAssessment());
			populateGridDetails(assessment);
		}
		//WDEV-15961
		refreshContextMenu();
	}

	private boolean isFormInViewMode()
	{
		return form.getGlobalContext().Core.getUserAssessmentActionIsNotNull() && form.getGlobalContext().Core.getUserAssessmentAction().equals("V");
	}
	
	private boolean isNewUserAssessment()
	{
		String mode = form.getGlobalContext().Core.getUserAssessmentAction();
		UserAssessmentVo voUserAssessment = form.getLocalContext().getUserAssessment();
		boolean isCopyMode = voUserAssessment == null || voUserAssessment.getID_UserAssessment() == null; 
		return mode != null && (mode.equals("A") || mode.equals("N") || isCopyMode);
	}
	
	private void setFormMode(FormMode formMode)
	{
		form.setMode(formMode);
	}
	
	private boolean isStatusActiveOrInactive()
	{
		return isStatusActive() || isStatusInactive();
	}
	
	private boolean isStatusActive()
	{
		UserAssessmentShortVo assessmentShort = form.getGlobalContext().Core.getSelectedUserAssessment();
		return assessmentShort != null && assessmentShort.getActiveStatusIsNotNull() && assessmentShort.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE);
	}
	
	private boolean isStatusInactive()
	{
		UserAssessmentShortVo assessmentShort = form.getGlobalContext().Core.getSelectedUserAssessment();
		return assessmentShort != null && assessmentShort.getActiveStatusIsNotNull() && assessmentShort.getActiveStatus().equals(PreActiveActiveInactiveStatus.INACTIVE);
	}
	
	//Remove the Preactive Lookup as an Active/Inactive status cannot be set to Preactive
	private void removeActiveOrPreactiveLookup()
	{
		PreActiveActiveInactiveStatus status = form.cmbActiveStatus().getValue();
		form.cmbActiveStatus().clear();
		PreActiveActiveInactiveStatusCollection  lookupColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		for(int i=0; lookupColl  != null && i<lookupColl.size(); i++)
		{
			if(isStatusActive() && lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE))
				continue;
			if(isStatusInactive() && (lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE) || lookupColl.get(i).equals(PreActiveActiveInactiveStatus.ACTIVE)))
				continue;
			
			form.cmbActiveStatus().newRow(lookupColl.get(i), lookupColl.get(i).toString(), lookupColl.get(i).getImage(), lookupColl.get(i).getColor());
		}
		form.cmbActiveStatus().setValue(status);
	}
	
	private boolean isNonScoringAssessment()
	{
		UserDefinedAssessmentType assType = getAssessmentType();
		
		if(assType != null)
		{
			if(assType.equals(UserDefinedAssessmentType.USERDEFINEDDATASHEET) 
				|| isChildOf(UserDefinedAssessmentType.USERDEFINEDDATASHEET, assType)
				|| isChildOf(UserDefinedAssessmentType.TURNING_POINT_ASSESSMENTS, assType))
				return true;
		}
		
		return false;
	}
	
	//WDEV-971 
	private void refreshEditedQuestions()
	{
		ims.core.vo.QuestionInformationVoCollection editedQuestions = form.getGlobalContext().Core.getEditedQuestions();
		if(editedQuestions == null || editedQuestions.size() == 0 || isNonScoringAssessment() == false)
			return;
		
		int viewMode = getViewMode();
		switch (viewMode)
		{
			case MULTIPLE_GROUP_NO_FLAT :
				refreshQuestionsInGroupCollectionFromScreenMultipleGroupNoFlat(editedQuestions);
			break;
			case MULTIPLE_GROUP_FLAT :
				refreshQuestionsInGroupCollectionFromScreenMultipleGroupFlat(editedQuestions);
			break;
			case SINGLE_GROUP_FLAT :
				refreshQuestionsInGroupCollectionFromScreenSingleGroupFlat(editedQuestions);
			break;
			default :
			break;
		}
	}

	private void refreshQuestionsInGroupCollectionFromScreenMultipleGroupNoFlat(ims.core.vo.QuestionInformationVoCollection editedQuestions)
	{
		if(editedQuestions == null || editedQuestions.size() == 0)
			return;
		
		for(int i = 0; i < form.lyrTabs().tabAssessments().dyngrdDetails().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().get(i);
			
			for (int j = 0; j < row.getRows().size(); j++)
			{
				refreshQuestionInGrid(editedQuestions, row.getRows().get(j));
			}
		}		
	}
	
	private void refreshQuestionsInGroupCollectionFromScreenMultipleGroupFlat(ims.core.vo.QuestionInformationVoCollection editedQuestions)
	{
		if(editedQuestions == null || editedQuestions.size() == 0)
			return;
		
		for(int i = 0; i < form.lyrTabs().tabAssessments().dyngrdDetails().getRows().size(); i++)
		{
			refreshQuestionInGrid(editedQuestions, form.lyrTabs().tabAssessments().dyngrdDetails().getRows().get(i));
		}
	}
	
	private void refreshQuestionsInGroupCollectionFromScreenSingleGroupFlat(ims.core.vo.QuestionInformationVoCollection editedQuestions)
	{
		refreshQuestionsInGroupCollectionFromScreenMultipleGroupFlat(editedQuestions);
	}
	
	private void refreshQuestionInGrid(ims.core.vo.QuestionInformationVoCollection editedQuestions, DynamicGridRow childRow)
	{
		if(childRow.getValue() instanceof AssessmentQuestionVo)
		{
			AssessmentQuestionVo value = (AssessmentQuestionVo) childRow.getValue();
			ims.core.vo.QuestionInformationVo voQuestion = value.getQuestion();
			int index = editedQuestions.indexOf(voQuestion);
			if(voQuestion != null && index >= 0)
			{
				value.setQuestion(editedQuestions.get(index));
				childRow.setValue(value);
			}
		}
	}
	/**
	 * Fix for WDEV-1014
	 * This method checks to see if the active assessment
	 * being saved contains only active questions and groups.
	 * @return false if one of the questions or groups in the assessment is not active
	 * or true if the assessment is not active or all the questions and groups are active.
	 * AU - Extra functionality (check the Assessment Question to be Active as well)
	 */
	private String IsValidActiveAssessment(UserAssessmentVo assessment)
	{
		String error="This active assessment contains questions and/or groups that are not active";
		String inactiveQuestions="The group contains inactive questions";
		String activeQuestions="The group contains only active questions";
		String returningText=null;
		if(assessment == null)
			throw new CodingRuntimeException("Invalid assessment to validate");		
		if(assessment.getActiveStatus() == null || !assessment.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
			return activeQuestions;		
		if(assessment.getQuestionGroups() == null)
			return activeQuestions;
		
		for(int x = 0; x < assessment.getQuestionGroups().size(); x++)
		{
			AssessmentQuestionGroupVo questionGroup = assessment.getQuestionGroups().get(x);			
			if(questionGroup != null)
			{				
				if(questionGroup.getActiveStatus() != null && !questionGroup.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
					// we found a group that is not active
					return error;
				
				if(questionGroup.getQuestions() != null)
				{
					for(int y = 0; y < questionGroup.getQuestions().size(); y++)
					{
						AssessmentQuestionVo question = questionGroup.getQuestions().get(y);
						if(question != null && question.getQuestionIsNotNull() && question.getActiveStatusIsNotNull())
						{
							QuestionInformationVo realQuestion = question.getQuestion();
							if(realQuestion.getStatus() != null && !(realQuestion.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE)||realQuestion.getStatus().equals(PreActiveActiveInactiveStatus.INACTIVE)))
							{
								// we found a question that is not active.
								
								return error;
							}
							else if(realQuestion.getStatus()!=null && realQuestion.getStatus().equals(PreActiveActiveInactiveStatus.INACTIVE))
								returningText=inactiveQuestions;
							
						}
					}
				}
			}
		}
		if (returningText==null)
			return activeQuestions;
		return returningText;
	}
	
	private QuestionInformationVo getSavedQuestion()
	{
		ims.core.vo.QuestionInformationVoCollection editedQuestions = form.getGlobalContext().Core.getEditedQuestions();
		if(editedQuestions != null && editedQuestions.size() > 0)
			return editedQuestions.get(0);
			
		return null;
	}
	protected void onChkIsMultiroleValueChanged() throws PresentationLogicException
	{
		enableMultiRoleTabs();
	}

	private void enableMultiRoleTabs()
	{
		boolean isMultipleRole = form.chkIsMultirole().getValue();
		form.lyrTabs().tabRoles().setHeaderVisible(isMultipleRole);
		if (isMultipleRole == false)
		{
			form.lyrTabs().tabRoles().grdRoles().getRows().clear();
			form.lyrTabs().tabRoles().dyngrdQuestions().getRows().clear();
			clearAssessmentRoleLocalContext();
			form.lyrTabs().showtabAssessments();
		}
	}

	private void setRoleContextMenu()
	{
		form.getContextMenus().getGenericGridAddItem().setText("Add Role");
		form.getContextMenus().getGenericGridAddItem().setIcon(form.getImages().OCRR.Role);
	}

	private void addRoleInGrid()
	{
		engine.open(form.getForms().Admin.RoleSelect);
	}
	
	private void removeRoleFromGrid()
	{
		grdRolesRow row = form.lyrTabs().tabRoles().grdRoles().getSelectedRow();
		if(row != null)
		{
			StringBuffer message = new StringBuffer();
			message.append("Are you sure you want to remove '");
			message.append(row.getcolRole());
			message.append("' role and its associated questions configuration?");
			form.getGlobalContext().Core.setYesNoDialogMessage(message.toString());
			form.getLocalContext().setIsRemoveRoleMode(Boolean.TRUE);
			engine.open(form.getForms().Core.YesNoDialog);
		}
		else
		{
			engine.showMessage("Please select a role to remove");
		}
	}

	protected void onDyngrdQuestionsCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getColumn().getIdentifier().equals(COLUMN_SELECT))
		{
			Integer roleId = form.getLocalContext().getSelectedRoleId();
			DynamicGridRow row = cell.getRow();
			AssessmentQuestionVo voAssessmentQuestion = (AssessmentQuestionVo) row.getValue();
			if (roleId != null)
			{
				Boolean value = (Boolean) cell.getValue();
				if (value != null)
				{
					if (value.booleanValue())
						addQuestionIntoMap(roleId, voAssessmentQuestion);
					else
						removeQuestionFromMap(roleId, voAssessmentQuestion);
				}
			}
		}
	}

	protected void onGrdRolesSelectionChanged() throws PresentationLogicException
	{
		roleGridSelectionChanged();
	}

	private void roleGridSelectionChanged()
	{
		grdRolesRow row = form.lyrTabs().tabRoles().grdRoles().getSelectedRow();
		if (row != null)
			selectRowAndPopulateQuestions(row, row.getcolAnswerAll());
		
		refreshRolesContextMenu();
	}

	protected void onGrdRolesGridCheckBoxClicked(int column, grdRolesRow row, boolean isChecked) throws PresentationLogicException
	{
		selectRowAndPopulateQuestions(row, isChecked);
	}

	private void selectRowAndPopulateQuestions(grdRolesRow row, boolean isChecked)
	{
		if (row == null)
			return;

		if (isChecked)
		{
			form.getLocalContext().setSelectedRoleId(null);
			form.lyrTabs().tabRoles().grdRoles().setValue(row.getValue());
			removeRoleFromMap(row.getValue().getAppRole().getID_AppRole());
			form.lyrTabs().tabRoles().dyngrdQuestions().getRows().clear();
		}
		else
		{
			//Selecte the row
			form.lyrTabs().tabRoles().grdRoles().setValue(row.getValue());
			form.getLocalContext().setSelectedRoleId(row.getValue().getAppRole().getID_AppRole());
			populateQuestionsRoleGrid();
		}
	}

	private void populateQuestionsRoleGrid()
	{
		form.lyrTabs().tabRoles().dyngrdQuestions().getRows().clear();
		int viewMode = getViewMode();
		switch (viewMode)
		{
			case MULTIPLE_GROUP_NO_FLAT :
				populateRoleGridFromScreenMultipleGroupNoFlat();
			break;
			case MULTIPLE_GROUP_FLAT :
				populateRoleGridFromScreenMultipleGroupFlat();
			break;
			case SINGLE_GROUP_FLAT :
				populateRoleFromScreenSingleGroupFlat();
			break;
			default :
			break;
		}
	}

	private void populateRoleFromScreenSingleGroupFlat()
	{
		for (int i = 0; i < form.lyrTabs().tabAssessments().dyngrdDetails().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().get(i);

			if (row.getValue() instanceof AssessmentQuestionVo)
			{
				AssessmentQuestionVo value = (AssessmentQuestionVo) row.getValue();
				value.setIsMandatory((Boolean) row.getCells().get(getGridColumn(COLUMN_MANDATORY)).getValue());
				value.setAllowsMultipleAnswers((Boolean) row.getCells().get(getGridColumn(COLUMN_MULTIANSWERS)).getValue());
				addRoleQuestionToGrid(value, row);
			}
		}
	}

	private void populateRoleGridFromScreenMultipleGroupFlat()
	{
		for (int i = 0; i < form.lyrTabs().tabAssessments().dyngrdDetails().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().get(i);

			if (row.getValue() instanceof AssessmentQuestionVo)
			{
				AssessmentQuestionVo value = (AssessmentQuestionVo) row.getValue();
				value.setIsMandatory((Boolean) row.getCells().get(getGridColumn(COLUMN_MANDATORY)).getValue());
				value.setAllowsMultipleAnswers((Boolean) row.getCells().get(getGridColumn(COLUMN_MULTIANSWERS)).getValue());
				addRoleQuestionToGrid(value, row);
			}
		}
	}

	private void populateRoleGridFromScreenMultipleGroupNoFlat()
	{
		for (int i = 0; i < form.lyrTabs().tabAssessments().dyngrdDetails().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().get(i);
			DynamicGridRow roleRow = null;
			if (row.getValue() instanceof AssessmentQuestionGroupVo)
			{
				roleRow = form.lyrTabs().tabRoles().dyngrdQuestions().getRows().newRow();
				roleRow.getCells().newCell(getGridColumn(COLUMN_QUESTIONGROUP, false), DynamicCellType.STRING);
				updateQuestionGroupRow((AssessmentQuestionGroupVo) row.getValue(), roleRow);
			}

			if (roleRow != null)
			{
				for (int j = 0; j < row.getRows().size(); j++)
				{
					DynamicGridRow childRow = row.getRows().get(j);
					if (childRow.getValue() instanceof AssessmentQuestionVo)
					{
						AssessmentQuestionVo value = (AssessmentQuestionVo) childRow.getValue();
						value.setIsMandatory((Boolean) childRow.getCells().get(getGridColumn(COLUMN_MANDATORY)).getValue());
						value.setAllowsMultipleAnswers((Boolean) childRow.getCells().get(getGridColumn(COLUMN_MULTIANSWERS)).getValue());
						addRoleQuestionToGrid(value, childRow);
					}
				}
			}
		}
	}

	private void updateQuestionGroupRow(AssessmentQuestionGroupVo group, DynamicGridRow row)
	{
		row.setValue(group);
		row.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP, false)).setValue(group.getName());
		row.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP, false)).setReadOnly(true);
		createToolTip(row, getGridColumn(COLUMN_QUESTIONGROUP, false), getGroupTooltip(group));
		row.setBold(true);
		row.setBackColor(Color.Beige);
		row.setExpanded(true);

		form.lyrTabs().tabRoles().dyngrdQuestions().setValue(row.getValue());
	}

	private void addRoleQuestionToGrid(AssessmentQuestionVo assessmentQuestionVo, DynamicGridRow detailsRow)
	{
		if (assessmentQuestionVo == null)
			return;

		int viewMode = getViewMode();
		boolean isDetailsGrid = false;

		DynamicGridRow row = null;
		switch (viewMode)
		{
			case MULTIPLE_GROUP_NO_FLAT :
				row = form.lyrTabs().tabRoles().dyngrdQuestions().getSelectedRow();
				if (row != null)
					row = row.getRows().newRow();
			break;
			case MULTIPLE_GROUP_FLAT :
			case SINGLE_GROUP_FLAT :
				row = form.lyrTabs().tabRoles().dyngrdQuestions().getRows().newRow();
			break;
			default :
			break;
		}

		createRowCells(row, viewMode, isDetailsGrid);

		row.setValue(assessmentQuestionVo);
		DynamicGridCell cellQuestionGroup = row.getCells().get(getGridColumn(COLUMN_QUESTIONGROUP, isDetailsGrid));
		cellQuestionGroup.setValue(assessmentQuestionVo.getQuestionIsNotNull() ? assessmentQuestionVo.getQuestion().getShortText() : "");
		cellQuestionGroup.setTooltip(getQuestionTooltip(assessmentQuestionVo));
		cellQuestionGroup.setReadOnly(true);

		DynamicGridCell cellMandatory = row.getCells().get(getGridColumn(COLUMN_MANDATORY, isDetailsGrid));
		cellMandatory.setValue(assessmentQuestionVo.getIsMandatory());
		cellMandatory.setReadOnly(true);

		DynamicGridCell cellMultiAnswer = row.getCells().get(getGridColumn(COLUMN_MULTIANSWERS, isDetailsGrid));
		cellMultiAnswer.setValue(assessmentQuestionVo.getAllowsMultipleAnswers());
		cellMultiAnswer.setReadOnly(true);

		engine.populate(row.getCells().get(getGridColumn(COLUMN_STATUS, isDetailsGrid)), ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService()));
		DynamicGridCell cellStatus = row.getCells().get(getGridColumn(COLUMN_STATUS, isDetailsGrid));
		cellStatus.setValue(PreActiveActiveInactiveStatus.ACTIVE);
		cellStatus.setReadOnly(true);

		DynamicGridCell cellSelect = row.getCells().get(getGridColumn(COLUMN_SELECT, isDetailsGrid));
		cellSelect.setValue(isQuestionSelected(assessmentQuestionVo));
		//WDEV-3295 - used to be setReadOnly(!canEnableControls())
		cellSelect.setReadOnly(form.getMode().equals(FormMode.EDIT)?false:true);
		
		if (viewMode == MULTIPLE_GROUP_FLAT)
		{
			Object value = detailsRow.getCells().get(getGridColumn(COLUMN_GROUP)).getValue();
			if (value instanceof AssessmentQuestionGroupVo)
			{
				DynamicGridCell cell = row.getCells().get(getGridColumn(COLUMN_GROUP, isDetailsGrid));
				cell.getItems().newItem(value);
				cell.setValue(value);
				cell.setReadOnly(true);
			}
		}

		if (viewMode == MULTIPLE_GROUP_NO_FLAT)
		{
			row.setExpandedImage(form.getImages().Core.QuestionSmall);
			row.setCollapsedImage(form.getImages().Core.QuestionSmall);
		}
	}

	protected void onlyrTabsTabChanged(LayerBridge tab)
	{
		if (tab.equals(form.lyrTabs().tabRoles()))
		{
			createDynamicGridColumns(form.lyrTabs().tabRoles().dyngrdQuestions(), false);
			roleGridSelectionChanged();
		}
		
		if(tab.equals(form.lyrTabs().tabGroups()))
		{
			refreshGroupGrid();
		}
	}

	//Refresh the Groups in the grid (backup value, clear values then add the values from context and set back the backed up value)
	//Also set the value of the row with the new Data
	private void refreshGroupCellData(AssessmentQuestionGroupVoCollection voColl)
	{
		for (int i = 0; i < form.lyrTabs().tabAssessments().dyngrdDetails().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrTabs().tabAssessments().dyngrdDetails().getRows().get(i);
			DynamicGridCell cell = row.getCells().get(getGridColumn(COLUMN_GROUP));
			Object value = cell.getValue();
			
			cell.getItems().clear();
			for (int j = 0; voColl != null && j < voColl.size(); j++)
				cell.getItems().newItem(voColl.get(j));
			cell.setValue(value);
			if(value instanceof AssessmentQuestionVo)
				row.setValue(cell);
		}
	}

	private boolean isRolesTabSelected()
	{
		return form.lyrTabs().tabRoles().isVisible();
	}
	
	private boolean isGroupTabSelected()
	{
		return form.lyrTabs().tabGroups().isVisible();
	}
	
	private boolean isAssessmentTabSelected()
	{
		return form.lyrTabs().tabAssessments().isVisible();
	}
	
	//Adds an assessment question into a map of RoleId
	@SuppressWarnings("unchecked")
	private void addQuestionIntoMap(Integer roleId, AssessmentQuestionVo voAssessQuestions)
	{
		if (roleId == null || voAssessQuestions == null)
			return;

		HashMap map = form.getLocalContext().getAssessmentRoles();

		if (map == null)
			map = new HashMap();

		AssessmentQuestionVoCollection voAssQColl = (AssessmentQuestionVoCollection) map.get(roleId);

		if (voAssQColl == null)
			voAssQColl = new AssessmentQuestionVoCollection();

		int index = voAssQColl.indexOf(voAssessQuestions);
		if (index >= 0)
			voAssQColl.set(index, voAssessQuestions);
		else
			voAssQColl.add(voAssessQuestions);

		map.put(roleId, voAssQColl);

		form.getLocalContext().setAssessmentRoles(map);
	}

	//Remove an assessment Question from the map context
	@SuppressWarnings("unchecked")
	private void removeQuestionFromMap(Integer roleId, AssessmentQuestionVo voAssessQuestions)
	{
		if (roleId == null || voAssessQuestions == null)
			return;

		HashMap map = form.getLocalContext().getAssessmentRoles();

		if (map != null)
		{
			AssessmentQuestionVoCollection voAssQColl = (AssessmentQuestionVoCollection) map.get(roleId);

			int index = voAssQColl.indexOf(voAssessQuestions);
			if (index >= 0)
			{
				voAssQColl.remove(index);
				map.put(roleId, voAssQColl);
				form.getLocalContext().setAssessmentRoles(map);
			}
		}
	}

	//Remove the role
	@SuppressWarnings("unchecked")
	private void removeRoleFromMap(Integer roleId)
	{
		if (roleId == null)
			return;

		HashMap map = form.getLocalContext().getAssessmentRoles();

		if (map != null)
		{
			map.remove(roleId);
			form.getLocalContext().setAssessmentRoles(map);
		}
	}

	@SuppressWarnings("unchecked")
	private Boolean isQuestionSelected(AssessmentQuestionVo assessmentQuestionVo)
	{
		HashMap map = form.getLocalContext().getAssessmentRoles();
		Integer roleId = form.getLocalContext().getSelectedRoleId();
		if (map == null || roleId == null)
			return Boolean.FALSE;

		AssessmentQuestionVoCollection voAssQColl = (AssessmentQuestionVoCollection) map.get(roleId);
		if (voAssQColl != null)
		{
			int index = voAssQColl.indexOf(assessmentQuestionVo);
			if (index >= 0)
				return Boolean.TRUE;
		}

		return Boolean.FALSE;
	}

	private AssessmentRoleVoCollection getRoles()
	{
		AssessmentRoleVoCollection voCollection = new AssessmentRoleVoCollection();
		for (int i = 0; i < form.lyrTabs().tabRoles().grdRoles().getRows().size(); i++)
		{
			grdRolesRow rolesRow = form.lyrTabs().tabRoles().grdRoles().getRows().get(i);
			AssessmentRoleVo voAssessRole = rolesRow.getValue();
			voAssessRole.setAnswerAll(new Boolean(rolesRow.getcolAnswerAll()));
			voCollection.add(voAssessRole);
		}

		return voCollection;
	}
	@SuppressWarnings("unchecked")
	private AssessmentQuestionRoleVoCollection getQuestionRole(AssessmentQuestionVo voAssessmentQuestion)
	{
		HashMap map = form.getLocalContext().getAssessmentRoles();
		if (map == null)
			return null;

		AssessmentQuestionRoleVoCollection voColl = new AssessmentQuestionRoleVoCollection();

		AssessmentRoleVoCollection roleVoColl = getRoles();
		for (int i = 0; i < roleVoColl.size(); i++)
		{
			AssessmentRoleVo voAssessRole = roleVoColl.get(i);
			if (voAssessRole.getAnswerAllIsNotNull() && voAssessRole.getAnswerAll().booleanValue() == false)
			{
				AssessmentQuestionVoCollection voAssQColl = (AssessmentQuestionVoCollection) map.get(voAssessRole.getAppRole().getID_AppRole());
				if (voAssQColl != null)
				{
					if (voAssQColl.indexOf(voAssessmentQuestion) >= 0)
					{
						AssessmentQuestionRoleVo voAssessQuestionRole = new AssessmentQuestionRoleVo();
						voAssessQuestionRole.setAppRole(voAssessRole.getAppRole());
						voColl.add(voAssessQuestionRole);
					}
				}
			}
		}

		return voColl;
	}

	//Load the roles in the grid first
	private void populateRolesDetails(UserAssessmentVo assessment)
	{
		form.lyrTabs().tabRoles().grdRoles().getRows().clear();
		form.lyrTabs().tabRoles().dyngrdQuestions().getRows().clear();
		if (assessment == null)
			return;

		if (assessment.getIsMultiRoleIsNotNull() && assessment.getIsMultiRole().booleanValue())
		{
			for (int i = 0; i < assessment.getAssessmentRoles().size(); i++)
			{
				AssessmentRoleVo assessmentRoleVo = assessment.getAssessmentRoles().get(i);
				AppRoleShortVo voRole = assessmentRoleVo.getAppRole();
				if (voRole != null)
				{
					grdRolesRow row = form.lyrTabs().tabRoles().grdRoles().getRows().newRow();
					row.setcolAnswerAll(assessmentRoleVo.getAnswerAllIsNotNull() && assessmentRoleVo.getAnswerAll().booleanValue() ? true : false);
					row.setcolRole(voRole.getName());
					row.setcolImage(form.getImages().OCRR.Role);
					row.setValue(assessmentRoleVo);
				}
			}
		}
	}

	//Load the questions associated with the roles in the context as a HashMap 
	private void loadQuestionsIntoMap(UserAssessmentVo assessment)
	{
		for (int i = 0; i < assessment.getQuestionGroups().size(); i++)
		{
			for (int j = 0; j < assessment.getQuestionGroups().get(i).getQuestions().size(); j++)
			{
				AssessmentQuestionVo assessmentQuestionVo = assessment.getQuestionGroups().get(i).getQuestions().get(j);
				for (int k = 0; k < assessmentQuestionVo.getAssessmentAnswerRole().size(); k++)
				{
					addQuestionIntoMap(assessmentQuestionVo.getAssessmentAnswerRole().get(k).getAppRole().getID_AppRole(), assessmentQuestionVo);
				}
			}
		}
	}
	
	private void clearAssessmentRoleLocalContext()
	{
		form.getLocalContext().setSelectedRoleId(null);
		form.getLocalContext().setAssessmentRoles(null);
	}
	
	private boolean canEnableControls()
	{
		return form.getMode().equals(FormMode.EDIT) && !isStatusActiveOrInactive();
	}
	
	// Returns the value of the Assessment Type (edit mode) or the value from
	// the context(new Mode)
	// Returns by default a Scoring User Assessment
	private UserDefinedAssessmentType getAssessmentType()
	{
		UserAssessmentShortVo assessmentShort = form.getGlobalContext().Core.getSelectedUserAssessment();
		if (assessmentShort != null)
			return assessmentShort.getAssessmentType();

		UserAssessmentVo voUserAssessment = form.getLocalContext().getUserAssessment();
		if (voUserAssessment != null && voUserAssessment.getAssessmentTypeIsNotNull())
			return voUserAssessment.getAssessmentType();

		// It should not get as far as here
		return UserDefinedAssessmentType.ASSESSMENTTOOL;
	}

	private boolean isDppType(UserDefinedAssessmentType assessType)
	{
		return assessType != null && assessType.equals(UserDefinedAssessmentType.DPP);
	}
	
	private boolean isDpp()
	{
		UserDefinedAssessmentType assType = getAssessmentType();
		return assType != null && assType.equals(UserDefinedAssessmentType.DPP) ? true : false;
	}
	
	//Check if the current assessment is a child of Scoring Assessment
	private boolean isCurrentAssessmentAChildOf(UserDefinedAssessmentType parentAssessment)
	{
		UserDefinedAssessmentType assType = getAssessmentType();
		return isChildOf(parentAssessment, assType);
	}
	
	private boolean isChildOf(UserDefinedAssessmentType parentAssType, UserDefinedAssessmentType assType)
	{
		if(assType != null && parentAssType != null)
		{
			UserDefinedAssessmentType parent = assType.getParent();
			//Check if parent is User Assessment 
			if(parent != null && parent.equals(parentAssType))
			{
				return true;
			}
		}
		return false;
	}
	
	private boolean isNameTextBoxEnableable()
	{
		return !isAssessmentThirdLevelChild();
	}

	private void setDefaultName()
	{
		if (isAssessmentThirdLevelChild())
		{
			UserDefinedAssessmentType assType = getAssessmentType();
			form.txtName().setValue(assType != null ? assType.toString() : "");
		}
	}

	protected void onGrdGroupsSelectionChanged() throws PresentationLogicException
	{
		refreshGroupContextMenu();
	}

	private void refreshGroupContextMenu()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			boolean isGroupRecordSelected = form.lyrTabs().tabGroups().grdGroups().getSelectedRowIndex() >= 0;
			boolean allowAddGroupQuestion = isAddGroupQuestionsAllowed();
			form.getContextMenus().getUserAssessmentGroupADDItem().setVisible(allowAddGroupQuestion);
			form.getContextMenus().getUserAssessmentGroupEDITItem().setVisible(allowAddGroupQuestion && isGroupRecordSelected);
			form.getContextMenus().getUserAssessmentGroupREMOVEItem().setVisible(allowAddGroupQuestion && isGroupRecordSelected);
			
			boolean isSpecSelected = form.lyrTabs().tabSpecialties().grdSpecialty().getSelectedRowIndex() >= 0;
			form.getContextMenus().getLIPNewItem().setVisible(true);
			form.getContextMenus().getLIPNewItem().setText("Update Specialties");
			form.getContextMenus().getLIPUpdateItem().setVisible(isSpecSelected);
			form.getContextMenus().getLIPUpdateItem().setText("Remove Specialties");
			//wdev-14028
			boolean isSerciceSelected = form.lyrTabs().tabServices().grdServices().getSelectedRowIndex() >= 0;
			form.getContextMenus().Assessment.getServiceMenuUPDATEItem().setVisible(true);
			form.getContextMenus().Assessment.getServiceMenuREMOVEItem().setVisible(isSerciceSelected);
			//------
			
		}
		else
		{
			form.getContextMenus().hideAllUserAssessmentGroupMenuItems();

			form.getContextMenus().hideAllLIPMenuItems();
			form.getContextMenus().Assessment.hideAllServiceMenuMenuItems();  //wdev-14028
		}
	}

	private void refreshGroupGrid()
	{
		form.lyrTabs().tabGroups().grdGroups().getRows().clear();
		AssessmentQuestionGroupVoCollection voColl = form.getLocalContext().getHiddenGroups();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			AssessmentQuestionGroupVo voAssessQGroup = voColl.get(i);
			GenForm.lyrTabsLayer.tabGroupsContainer.grdGroupsRow row = form.lyrTabs().tabGroups().grdGroups().getRows().newRow();

			row.setcolName(voAssessQGroup.getName());
			row.setcolDescription(voAssessQGroup.getDescription());
			row.setcolStatus(voAssessQGroup.getActiveStatus());
			row.setcolScore(voAssessQGroup.getGroupScoreIsNotNull() ? voAssessQGroup.getGroupScore().toString() : "");
			row.setValue(voAssessQGroup);
		}
		
		refreshGroupContextMenu();
	}
	
	private void enableGroupTab()
	{
		form.lyrTabs().tabGroups().setHeaderVisible(getViewMode() == MULTIPLE_GROUP_FLAT);
		refreshGroupGrid();
	}
	
	protected void onImbURLClick() throws PresentationLogicException
	{
		String url = form.txtURL().getValue();
		if (engine.isValidUrl(url))
			engine.openUrl(url);
		else 
		{
			engine.showMessage("The URL is not valid!");
			if (form.getMode().equals(FormMode.EDIT))
				form.txtURL().setFocus();
		}
	}
	@Override
	protected void onBtnClearClick() throws PresentationLogicException
	{
		form.txtReport().setValue(null);
		form.getGlobalContext().Core.setTemplate(null);
		form.getGlobalContext().Core.setReportTemplateRef(null);
		form.getLocalContext().setLinkedTemplate(null);
	}
	@Override
	protected void onBtnLinkClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.ReportTemplate);
	}
	
	private void updateSpecialty()
	{
		SpecialtyCollection lkpCollSpecialties = ims.core.vo.lookups.LookupHelper.getSpecialty(domain.getLookupService());
		SpecialtyCollection coll = new SpecialtyCollection();

		if (lkpCollSpecialties != null)
		{
			for (int i = 0; i < form.lyrTabs().tabSpecialties().grdSpecialty().getRows().size(); i++)
			{
				for (int x = 0; x < lkpCollSpecialties.size(); x++)
				{
					if (form.lyrTabs().tabSpecialties().grdSpecialty().getRows().get(i).getValue().equals(lkpCollSpecialties.get(x)))
						coll.add(lkpCollSpecialties.get(x));
				}

			}
		}

		form.getGlobalContext().Core.setSpecialties(coll);
		engine.open(form.getForms().ClinicalAdmin.HotlistDialog);
	}
	//wdev-14028
	private void updateServicies()
	{
		ServiceShortVoCollection shortVoColl = new ServiceShortVoCollection();
		for(int i = 0; i < form.lyrTabs().tabServices().grdServices().getRows().size();i++)
		{
			shortVoColl.add(form.lyrTabs().tabServices().grdServices().getRows().get(i).getValue());
		}
		form.getGlobalContext().ClinicalAdmin.setServices(shortVoColl);
		engine.open(form.getForms().ClinicalAdmin.ServicesHotListDialog);
	}
	//wdev-14028
	private void removeServices()
	{
		if(form.lyrTabs().tabServices().grdServices().getSelectedRow() != null)
		{
			form.lyrTabs().tabServices().grdServices().getRows().remove(form.lyrTabs().tabServices().grdServices().getSelectedRowIndex());
			refreshGroupContextMenu();
		}
	}
	//---------

	private void removeSpecialty()
	{
		if (form.lyrTabs().tabSpecialties().grdSpecialty().getSelectedRow() != null)
		{
			form.lyrTabs().tabSpecialties().grdSpecialty().getRows().remove(form.lyrTabs().tabSpecialties().grdSpecialty().getSelectedRowIndex());
			refreshGroupContextMenu();
		}

	}
	@Override
	protected void onGrdSpecialtySelectionChanged() throws PresentationLogicException
	{
		refreshGroupContextMenu();
	}
	
	@Override
	protected void onChkCanCopyValueChanged() throws PresentationLogicException 
	{
		if(!form.chkCanCopy().getValue())//WDEV-15179
		{
			form.cmbCopyLast().setValue(null);
		}
		
		updateControlsState();
	}
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (result.equals(DialogResult.YES))
		{
			performSave();
		}
		
	}
	//wdev-14028
	protected void onCmbCategoryValueChanged() throws PresentationLogicException 
	{
		//WDEV-14123
		updateControlsState();
	}
	
	//wdev-14028
	private void showHideServiceTab(boolean visible)
	{
		//WDEV-14123
		if (!visible)
		{
			form.lyrTabs().showtabAssessments();
		}

		form.lyrTabs().tabServices().setHeaderVisible(visible);
	}
	//wdev-14028
	protected void onGrdServicesSelectionChanged() throws PresentationLogicException 
	{
		refreshGroupContextMenu();
		
	}
}
