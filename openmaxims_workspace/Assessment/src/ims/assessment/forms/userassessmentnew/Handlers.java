//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.userassessmentnew;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbCopyLastLookup();
	abstract protected void defaultcmbCopyLastLookupValue();
	abstract protected void bindgrdGroupscolStatusLookup();
	abstract protected void bindcmbActiveStatusLookup();
	abstract protected void defaultcmbActiveStatusLookupValue();
	abstract protected void bindcmbScoringMethodLookup();
	abstract protected void defaultcmbScoringMethodLookupValue();
	abstract protected void bindcmbCategoryLookup();
	abstract protected void defaultcmbCategoryLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCanCopyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbCopyLastValueSet(Object value);
	abstract protected void onBtnClearClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnLinkClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbURLClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrTabsTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onDyngrdDetailsRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdGroupsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdQuestionsCellValueChanged(ims.framework.controls.DynamicGridCell cell);
	abstract protected void onGrdRolesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdRolesGridCheckBoxClicked(int column, GenForm.lyrTabsLayer.tabRolesContainer.grdRolesRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdSpecialtySelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdServicesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkIsMultiroleValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCustomWidthValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnPreviewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkActiveValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkMultipleGroupValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkFlatViewValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbActiveStatusValueSet(Object value);
	abstract protected void oncmbScoringMethodValueSet(Object value);
	abstract protected void oncmbCategoryValueSet(Object value);
	abstract protected void onCmbCategoryValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkReturnToListClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setMessageBoxClosedEvent(new MessageBoxClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onMessageBoxClosed(messageBoxId, result);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.chkCanCopy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCanCopyValueChanged();
			}
		});
		this.form.cmbCopyLast().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCopyLastValueSet(value);
			}
		});
		this.form.btnClear().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnClearClick();
			}
		});
		this.form.btnLink().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnLinkClick();
			}
		});
		this.form.imbURL().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbURLClick();
			}
		});
		this.form.lyrTabs().tabAssessments().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabAssessmentsActivated();
			}
		});
		this.form.lyrTabs().tabGroups().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabGroupsActivated();
			}
		});
		this.form.lyrTabs().tabRoles().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabRolesActivated();
			}
		});
		this.form.lyrTabs().tabSpecialties().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabSpecialtiesActivated();
			}
		});
		this.form.lyrTabs().tabTaxonomy().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabTaxonomyActivated();
			}
		});
		this.form.lyrTabs().tabHeaderText().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabHeaderTextActivated();
			}
		});
		this.form.lyrTabs().tabFooterText().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabFooterTextActivated();
			}
		});
		this.form.lyrTabs().tabServices().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabServicesActivated();
			}
		});
		this.form.lyrTabs().tabAssessments().dyngrdDetails().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdDetailsRowSelectionChanged(row);
			}
		});
		this.form.lyrTabs().tabGroups().grdGroups().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdGroupsSelectionChanged();
			}
		});
		this.form.lyrTabs().tabRoles().dyngrdQuestions().setDynamicGridCellValueChangedEvent(new DynamicGridCellValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdQuestionsCellValueChanged(cell);
			}
		});
		this.form.lyrTabs().tabRoles().grdRoles().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdRolesSelectionChanged();
			}
		});
		this.form.lyrTabs().tabRoles().grdRoles().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdRolesGridCheckBoxClicked(column, new GenForm.lyrTabsLayer.tabRolesContainer.grdRolesRow(row), isChecked);
			}
		});
		this.form.lyrTabs().tabSpecialties().grdSpecialty().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdSpecialtySelectionChanged();
			}
		});
		this.form.lyrTabs().tabServices().grdServices().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdServicesSelectionChanged();
			}
		});
		this.form.chkIsMultirole().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkIsMultiroleValueChanged();
			}
		});
		this.form.chkCustomWidth().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCustomWidthValueChanged();
			}
		});
		this.form.btnPreview().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPreviewClick();
			}
		});
		this.form.chkDisplayActive().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkActiveValueChanged();
			}
		});
		this.form.btnUpdate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUpdateClick();
			}
		});
		this.form.chkMultipleGroup().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkMultipleGroupValueChanged();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.chkFlatView().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkFlatViewValueChanged();
			}
		});
		this.form.cmbActiveStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbActiveStatusValueSet(value);
			}
		});
		this.form.cmbScoringMethod().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbScoringMethodValueSet(value);
			}
		});
		this.form.cmbCategory().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCategoryValueSet(value);
			}
		});
		this.form.cmbCategory().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbCategoryValueChanged();
			}
		});
		this.form.lnkReturnToList().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkReturnToListClick();
			}
		});
		this.form.getContextMenus().getUserAssessmentNewADD_GROUPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentNew.ADD_GROUP, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentNewEDIT_GROUPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentNew.EDIT_GROUP, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentNewREMOVE_GROUPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentNew.REMOVE_GROUP, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentNewVIEW_GROUPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentNew.VIEW_GROUP, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentNewADD_QUESTIONItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentNew.ADD_QUESTION, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentNewEDIT_QUESTIONItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentNew.EDIT_QUESTION, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentNewREMOVE_QUESTIONItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentNew.REMOVE_QUESTION, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentNewVIEW_QUESTIONItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentNew.VIEW_QUESTION, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentNewMOVE_UPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentNew.MOVE_UP, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentNewMOVE_DOWNItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentNew.MOVE_DOWN, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentGroupADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentGroup.ADD, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentGroupEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentGroup.EDIT, sender);
			}
		});
		this.form.getContextMenus().getUserAssessmentGroupREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.UserAssessmentGroup.REMOVE, sender);
			}
		});
		this.form.getContextMenus().getGenericGridAddItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.Add, sender);
			}
		});
		this.form.getContextMenus().getGenericGridUpdateItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.Update, sender);
			}
		});
		this.form.getContextMenus().getGenericGridRemoveItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.Remove, sender);
			}
		});
		this.form.getContextMenus().getGenericGridViewItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.View, sender);
			}
		});
		this.form.getContextMenus().getGenericGridMoveUpItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.MoveUp, sender);
			}
		});
		this.form.getContextMenus().getGenericGridMoveDownItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.MoveDown, sender);
			}
		});
		this.form.getContextMenus().getGenericGridReplaceItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.Replace, sender);
			}
		});
		this.form.getContextMenus().getGenericGridConfirmItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.Confirm, sender);
			}
		});
		this.form.getContextMenus().getGenericGridEDIT_VIEW_ICP_ACTIONSItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.GenericGrid.EDIT_VIEW_ICP_ACTIONS, sender);
			}
		});
		this.form.getContextMenus().getLIPNewItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LIP.New, sender);
			}
		});
		this.form.getContextMenus().getLIPUpdateItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LIP.Update, sender);
			}
		});
		this.form.getContextMenus().Assessment.getServiceMenuUPDATEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.AssessmentNamespace.ServiceMenu.UPDATE, sender);
			}
		});
		this.form.getContextMenus().Assessment.getServiceMenuREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.AssessmentNamespace.ServiceMenu.REMOVE, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbCopyLastLookup();
		bindgrdGroupscolStatusLookup();
		bindcmbActiveStatusLookup();
		bindcmbScoringMethodLookup();
		bindcmbCategoryLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbCopyLastLookup();
		bindgrdGroupscolStatusLookup();
		bindcmbActiveStatusLookup();
		bindcmbScoringMethodLookup();
		bindcmbCategoryLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbCopyLastLookupValue();
		defaultcmbActiveStatusLookupValue();
		defaultcmbScoringMethodLookupValue();
		defaultcmbCategoryLookupValue();
	}
	private void onlyrTabstabAssessmentsActivated()
	{
		this.form.lyrTabs().showtabAssessments();
		onlyrTabsTabChanged(this.form.lyrTabs().tabAssessments());
	}
	private void onlyrTabstabGroupsActivated()
	{
		this.form.lyrTabs().showtabGroups();
		onlyrTabsTabChanged(this.form.lyrTabs().tabGroups());
	}
	private void onlyrTabstabRolesActivated()
	{
		this.form.lyrTabs().showtabRoles();
		onlyrTabsTabChanged(this.form.lyrTabs().tabRoles());
	}
	private void onlyrTabstabSpecialtiesActivated()
	{
		this.form.lyrTabs().showtabSpecialties();
		onlyrTabsTabChanged(this.form.lyrTabs().tabSpecialties());
	}
	private void onlyrTabstabTaxonomyActivated()
	{
		this.form.lyrTabs().showtabTaxonomy();
		onlyrTabsTabChanged(this.form.lyrTabs().tabTaxonomy());
	}
	private void onlyrTabstabHeaderTextActivated()
	{
		this.form.lyrTabs().showtabHeaderText();
		onlyrTabsTabChanged(this.form.lyrTabs().tabHeaderText());
	}
	private void onlyrTabstabFooterTextActivated()
	{
		this.form.lyrTabs().showtabFooterText();
		onlyrTabsTabChanged(this.form.lyrTabs().tabFooterText());
	}
	private void onlyrTabstabServicesActivated()
	{
		this.form.lyrTabs().showtabServices();
		onlyrTabsTabChanged(this.form.lyrTabs().tabServices());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
