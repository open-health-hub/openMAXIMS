//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2443.39107)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.patientfindingscopy;

import ims.assessment.forms.patientfindingscopy.GenForm.grdFindingRow;
import ims.assessment.vo.PatientAssessmentAnswerVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingQuestionAnswerVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingVoCollection;
import ims.assessment.vo.PatientGraphicAssessmentVo;
import ims.assessment.vo.PatientGraphicalAssessmentStageVo;
import ims.core.vo.AnswerDetailsVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void onBtnCopyClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PatientGraphicAssessmentFindingVoCollection coll = new PatientGraphicAssessmentFindingVoCollection();
		
		for (int i = 0; i < form.grdFinding().getRows().size(); i++)
		{
			grdFindingRow row = form.grdFinding().getRows().get(i);
			
			if(row.getColumnSelect())
			{
				PatientGraphicAssessmentFindingVo item = row.getValue();
				item.setDrawingId(new Integer(i));
				coll.add(cloneFinding(item));
			}
		}
		
		if(coll.size() == 0)
		{
			engine.showMessage("Please select at least one finding !");
			return;
		}
		
		form.getGlobalContext().Assessment.setPatientGraphicAssessmentFinding(coll);
		
		engine.close(DialogResult.OK);
	}
	private PatientGraphicAssessmentFindingVo cloneFinding(PatientGraphicAssessmentFindingVo item)
	{
		PatientGraphicAssessmentFindingVo clone = (PatientGraphicAssessmentFindingVo) item.clone();

		clone.setIsCopied(Boolean.TRUE);
		clone.setID_PatientGraphicAssessmentFinding(null);
		
		if(clone.getStageIsNotNull())
		{
			for (int i = 0; i < clone.getStage().size(); i++)
			{
				PatientGraphicalAssessmentStageVo pgasVo = clone.getStage().get(i);
				
				pgasVo.setID_PatientGraphicalAssessmentStage(null);
				
				if(pgasVo.getFindingQuestionIsNotNull())
				{
					for (int j = 0; j < pgasVo.getFindingQuestion().size(); j++)
					{
						PatientGraphicAssessmentFindingQuestionAnswerVo pgafqaVo =  pgasVo.getFindingQuestion().get(j);
						
						pgafqaVo.setID_PatientGraphicAssessmentFindingQuestionAnswer(null);
						
						if(pgafqaVo.getPatientAnswersIsNotNull())
						{
							for (int k = 0; k < pgafqaVo.getPatientAnswers().size(); k++)
							{
								PatientAssessmentAnswerVo paaVo = pgafqaVo.getPatientAnswers().get(k);
								
								paaVo.setID_PatientAssessmentAnswer(null);
								
								if(paaVo.getAnswerDetailsIsNotNull())
								{
									for (int index = 0; index < paaVo.getAnswerDetails().size(); index++)
									{
										AnswerDetailsVo padVo = paaVo.getAnswerDetails().get(index);
										
										padVo.setID_PatientAnswerDetails(null);
									}
								}
							}
						}
					}
				}
			}
		}
		
		return clone;
	}
	protected void onFormOpen() throws PresentationLogicException
	{
		form.getGlobalContext().Assessment.setPatientGraphicAssessmentFinding(null);
		
		PatientAssessmentVo patientAssessmentVo = form.getGlobalContext().Core.getPatientAssessmentFull();
		
		if(patientAssessmentVo != null && patientAssessmentVo.getAssessmentDataIsNotNull() && patientAssessmentVo.getAssessmentData().getGraphicFindingsIsNotNull())
		{
			form.grdFinding().setReadOnly(false);
			
			for (int i = 0; i < patientAssessmentVo.getAssessmentData().getGraphicFindings().size(); i++)
			{
				PatientGraphicAssessmentVo pgaVo = patientAssessmentVo.getAssessmentData().getGraphicFindings().get(i);
				
				if(pgaVo.getPatientGraphicFindingIsNotNull())
				{
					for (int j = 0; j < pgaVo.getPatientGraphicFinding().size(); j++)
					{
						PatientGraphicAssessmentFindingVo pgaFindingVo = pgaVo.getPatientGraphicFinding().get(j);
						
						if(pgaFindingVo.getGraphicFindingIsNotNull())
						{
							grdFindingRow row = form.grdFinding().getRows().newRow();
							
							String displayText = pgaFindingVo.getGraphicFinding().getDisplayText();
							
							displayText += " - " + pgaFindingVo.getAreaName();
							
							if(pgaFindingVo.getAuthoringInformationIsNotNull())
							{
								if(pgaFindingVo.getAuthoringInformation().getAuthoringHcpIsNotNull())
									displayText += " - " + pgaFindingVo.getAuthoringInformation().getAuthoringHcp().getName().toString();
								
								if(pgaFindingVo.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
									displayText += ", " + pgaFindingVo.getAuthoringInformation().getAuthoringDateTime().toString();
							}
							
							row.setColumnFinding(displayText);
							row.setValue(pgaFindingVo);
							
							row.setReadOnly(false);
						}
					}
				}
			}
		}
	}
}
