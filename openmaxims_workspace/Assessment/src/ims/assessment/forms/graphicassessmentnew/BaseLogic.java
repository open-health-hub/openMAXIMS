//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.graphicassessmentnew;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.assessment.domain.GraphicAssessmentNew.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.assessment.domain.GraphicAssessmentNew domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void bindgrdAssociatedQuestionscolStatusLookup()
	{
		this.form.lyrDetails().tabQuestions().grdAssociatedQuestions().colStatusComboBox().clear();
		ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabQuestions().grdAssociatedQuestions().colStatusComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdFindingQuestionscolStatusLookup()
	{
		this.form.lyrDetails().tabFindings().grdFindingQuestions().colStatusComboBox().clear();
		ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabFindings().grdFindingQuestions().colStatusComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdFindingQuestionsWithStagecolStatusLookup()
	{
		this.form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().colStatusComboBox().clear();
		ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().colStatusComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void oncmbActiveStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbActiveStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbActiveStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PreActiveActiveInactiveStatus)
		{
			ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbActiveStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbActiveStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbActiveStatusLookup()
	{
		this.form.cmbActiveStatus().clear();
		ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbActiveStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbActiveStatusLookupValue(int id)
	{
		ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbActiveStatus().setValue(instance);
	}
	protected final void defaultcmbActiveStatusLookupValue()
	{
		this.form.cmbActiveStatus().setValue((ims.core.vo.lookups.PreActiveActiveInactiveStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PreActiveActiveInactiveStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PreActiveActiveInactiveStatus.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.chkStoreAssessement().setValue(false);
		this.form.txtUrl().setValue("");
		this.form.lyrDetails().tabImages().grdImages().getRows().clear();
		this.form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().clear();
		this.form.cmbActiveStatus().setValue(null);
		this.form.txtName().setValue("");
	}
	protected void populateScreenFromData(ims.assessment.vo.GraphicAssessmentVo value)
	{
		clearScreen();
		if(value == null)
			return;

		if(value.getStorePrintedReportIsNotNull())
			this.form.chkStoreAssessement().setValue(value.getStorePrintedReport().booleanValue());
		this.form.txtUrl().setValue(value.getHelpUrlIsNotNull() ? value.getHelpUrl(): null);
		// ----- Start of grdImages Grid --------------------------
		ims.core.vo.DrawingGraphicImageVoCollection fieldgrdImages = value.getImagesIsNotNull() ? value.getImages() : null;
		if(fieldgrdImages != null)
		{
			GenForm.lyrDetailsLayer.tabImagesContainer.grdImagesRow rowgrdImages;
			for(int x = 0; x < fieldgrdImages.size(); x++)
			{
				if(fieldgrdImages.get(x) != null)
				{
					rowgrdImages = this.form.lyrDetails().tabImages().grdImages().getRows().newRow();


					rowgrdImages.setValue(fieldgrdImages.get(x));
				}
			}
		}
		// ----- End of grdImages Grid ----------------------------
		// ----- Start of grdAssociatedQuestions Grid --------------------------
		ims.assessment.vo.GraphicAssessmentQuestionVoCollection fieldgrdAssociatedQuestions = value.getAssociatedQuestionsIsNotNull() ? value.getAssociatedQuestions() : null;
		if(fieldgrdAssociatedQuestions != null)
		{
			GenForm.lyrDetailsLayer.tabQuestionsContainer.grdAssociatedQuestionsRow rowgrdAssociatedQuestions;
			for(int x = 0; x < fieldgrdAssociatedQuestions.size(); x++)
			{
				if(fieldgrdAssociatedQuestions.get(x) != null)
				{
					rowgrdAssociatedQuestions = this.form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().newRow();

					rowgrdAssociatedQuestions.setcolQuestion(fieldgrdAssociatedQuestions.get(x).getQuestion());
					rowgrdAssociatedQuestions.setcolStatus(fieldgrdAssociatedQuestions.get(x).getActiveStatus());
					if(fieldgrdAssociatedQuestions.get(x).getAllowsMultipleAnswersIsNotNull())
						rowgrdAssociatedQuestions.setcolAllowMultipleAnswers(fieldgrdAssociatedQuestions.get(x).getAllowsMultipleAnswers().booleanValue());
					if(fieldgrdAssociatedQuestions.get(x).getIsMandatoryIsNotNull())
						rowgrdAssociatedQuestions.setcolMandatory(fieldgrdAssociatedQuestions.get(x).getIsMandatory().booleanValue());

					rowgrdAssociatedQuestions.setValue(fieldgrdAssociatedQuestions.get(x));
				}
			}
		}
		// ----- End of grdAssociatedQuestions Grid ----------------------------
		this.form.cmbActiveStatus().setValue(value.getActiveStatusIsNotNull() ? value.getActiveStatus() : null);
		this.form.txtName().setValue(value.getNameIsNotNull() ? value.getName(): null);
	}
	protected ims.assessment.vo.GraphicAssessmentVo populateDataFromScreen(ims.assessment.vo.GraphicAssessmentVo value)
	{
		if(value == null)
			value = new ims.assessment.vo.GraphicAssessmentVo();

		value.setStorePrintedReport(new Boolean(this.form.chkStoreAssessement().getValue()));
		value.setHelpUrl(this.form.txtUrl().getValue());
		// ----- Start of grdImages Grid --------------------------
		value.setImages(new ims.core.vo.DrawingGraphicImageVoCollection());
		for(int x = 0; x < this.form.lyrDetails().tabImages().grdImages().getRows().size(); x++)
		{
			ims.core.vo.DrawingGraphicImageVo rowValue = this.form.lyrDetails().tabImages().grdImages().getRows().get(x).getValue();
			if(rowValue == null)
				rowValue = new ims.core.vo.DrawingGraphicImageVo();


			if(value.getImagesIsNotNull())
				value.getImages().add(rowValue);
		}
		// ----- End of grdImages Grid ----------------------------
		// ----- Start of grdAssociatedQuestions Grid --------------------------
		value.setAssociatedQuestions(new ims.assessment.vo.GraphicAssessmentQuestionVoCollection());
		for(int x = 0; x < this.form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().size(); x++)
		{
			ims.assessment.vo.GraphicAssessmentQuestionVo rowValue = this.form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().get(x).getValue();
			if(rowValue == null)
				rowValue = new ims.assessment.vo.GraphicAssessmentQuestionVo();

			rowValue.setQuestion(this.form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().get(x).getcolQuestion());
			rowValue.setActiveStatus(this.form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().get(x).getcolStatus());
			rowValue.setAllowsMultipleAnswers(new Boolean(this.form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().get(x).getcolAllowMultipleAnswers()));
			rowValue.setIsMandatory(new Boolean(this.form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().get(x).getcolMandatory()));

			if(value.getAssociatedQuestionsIsNotNull())
				value.getAssociatedQuestions().add(rowValue);
		}
		// ----- End of grdAssociatedQuestions Grid ----------------------------
		value.setActiveStatus(this.form.cmbActiveStatus().getValue());
		value.setName(this.form.txtName().getValue());

		return value;
	}
	protected ims.assessment.vo.GraphicAssessmentVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.assessment.vo.GraphicAssessmentVo());
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.assessment.domain.GraphicAssessmentNew domain;
}
