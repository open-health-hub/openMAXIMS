//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.graphicassessmentnew;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabImagesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdImagesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdImagesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolImageNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolImageNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolImageNameOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolImageName()
				{
					return (String)super.row.get(0);
				}
				public void setcolImageName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolImageNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolStatus()
				{
					return (String)super.row.get(1);
				}
				public void setcolStatus(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.DrawingGraphicImageVo getValue()
				{
					return (ims.core.vo.DrawingGraphicImageVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.DrawingGraphicImageVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdImagesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdImagesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdImagesRow get(int index)
				{
					return new grdImagesRow(super.collection.get(index));
				}
				public grdImagesRow newRow()
				{
					return new grdImagesRow(super.collection.newRow());
				}
				public grdImagesRow newRow(boolean autoSelect)
				{
					return new grdImagesRow(super.collection.newRow(autoSelect));
				}
				public grdImagesRow newRowAt(int index)
				{
					return new grdImagesRow(super.collection.newRowAt(index));
				}
				public grdImagesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdImagesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdImagesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.DrawingGraphicImageVoCollection getValues()
				{
					ims.core.vo.DrawingGraphicImageVoCollection listOfValues = new ims.core.vo.DrawingGraphicImageVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.DrawingGraphicImageVo getValue()
				{
					return (ims.core.vo.DrawingGraphicImageVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.DrawingGraphicImageVo value)
				{
					super.grid.setValue(value);
				}
				public grdImagesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdImagesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdImagesRowCollection getRows()
				{
					return new grdImagesRowCollection(super.grid.getRows());
				}
				public grdImagesRow getRowByValue(ims.core.vo.DrawingGraphicImageVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdImagesRow(row);
				}
				public void setcolImageNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolImageNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 328, 432, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdImagesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdImagesTemp);
				grdImagesGrid grdImages = (grdImagesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdImagesGrid.class, m_grdImagesTemp);
				grdImages.addStringColumn("Name", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdImages.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdImages);
		
				// Drawing Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 344, 16, 466, 433, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DrawingControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Boolean(true)}));
			}

			public grdImagesGrid grdImages()
			{
				return (grdImagesGrid)super.getGrid(0);
			}
			public DrawingControl drawingPreview()
			{
				return (DrawingControl)super.getControl(1);
			}
		}
		public static class tabQuestionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdAssociatedQuestionsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAssociatedQuestionsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolQuestionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolQuestionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolQuestionOpened()
				{
					super.row.showOpened(0);
				}
				public ims.core.vo.QuestionInformationVo getcolQuestion()
				{
					return (ims.core.vo.QuestionInformationVo)super.row.get(0);
				}
				public void setcolQuestion(ims.core.vo.QuestionInformationVo value)
				{
					super.row.set(0, value);
				}
				public void setCellcolQuestionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(1);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getcolStatus()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.row.get(1);
				}
				public void setcolStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.row.set(1, value, true);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolAllowMultipleAnswersReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolAllowMultipleAnswersReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolAllowMultipleAnswersOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getcolAllowMultipleAnswers()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setcolAllowMultipleAnswers(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellcolAllowMultipleAnswersTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolMandatoryReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolMandatoryReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolMandatoryOpened()
				{
					super.row.showOpened(3);
				}
				public boolean getcolMandatory()
				{
					return ((Boolean)super.row.get(3)).booleanValue();
				}
				public void setcolMandatory(boolean value)
				{
					super.row.set(3, new Boolean(value));
				}
				public void setCellcolMandatoryTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.assessment.vo.GraphicAssessmentQuestionVo getValue()
				{
					return (ims.assessment.vo.GraphicAssessmentQuestionVo)super.row.getValue();
				}
				public void setValue(ims.assessment.vo.GraphicAssessmentQuestionVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAssociatedQuestionsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAssociatedQuestionsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAssociatedQuestionsRow get(int index)
				{
					return new grdAssociatedQuestionsRow(super.collection.get(index));
				}
				public grdAssociatedQuestionsRow newRow()
				{
					return new grdAssociatedQuestionsRow(super.collection.newRow());
				}
				public grdAssociatedQuestionsRow newRow(boolean autoSelect)
				{
					return new grdAssociatedQuestionsRow(super.collection.newRow(autoSelect));
				}
				public grdAssociatedQuestionsRow newRowAt(int index)
				{
					return new grdAssociatedQuestionsRow(super.collection.newRowAt(index));
				}
				public grdAssociatedQuestionsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAssociatedQuestionsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAssociatedQuestionsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.assessment.vo.GraphicAssessmentQuestionVoCollection getValues()
				{
					ims.assessment.vo.GraphicAssessmentQuestionVoCollection listOfValues = new ims.assessment.vo.GraphicAssessmentQuestionVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.assessment.vo.GraphicAssessmentQuestionVo getValue()
				{
					return (ims.assessment.vo.GraphicAssessmentQuestionVo)super.grid.getValue();
				}
				public void setValue(ims.assessment.vo.GraphicAssessmentQuestionVo value)
				{
					super.grid.setValue(value);
				}
				public grdAssociatedQuestionsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAssociatedQuestionsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAssociatedQuestionsRowCollection getRows()
				{
					return new grdAssociatedQuestionsRowCollection(super.grid.getRows());
				}
				public grdAssociatedQuestionsRow getRowByValue(ims.assessment.vo.GraphicAssessmentQuestionVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAssociatedQuestionsRow(row);
				}
				public void setcolQuestionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolQuestionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public GridComboBox colStatusComboBox()
				{
					return new GridComboBox(super.grid, 1);
				}
				public void setcolAllowMultipleAnswersHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolAllowMultipleAnswersHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolMandatoryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolMandatoryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 802, 424, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdAssociatedQuestionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuUserAssessments, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAssociatedQuestionsTemp);
				grdAssociatedQuestionsGrid grdAssociatedQuestions = (grdAssociatedQuestionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAssociatedQuestionsGrid.class, m_grdAssociatedQuestionsTemp);
				grdAssociatedQuestions.addStringColumn("Question", 0, 0, 380, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAssociatedQuestions.addComboBoxColumn("Status", 0, 0, 150, false, true, false, false, true, -1);
				grdAssociatedQuestions.addBoolColumn("Multiple Answers", 1, 1, 125, false, false, 0, true);
				grdAssociatedQuestions.addBoolColumn("Mandatory", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdAssociatedQuestions);
			}

			public grdAssociatedQuestionsGrid grdAssociatedQuestions()
			{
				return (grdAssociatedQuestionsGrid)super.getGrid(0);
			}
		}
		public static class tabFindingsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdFindingQuestionsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdFindingQuestionsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolFindingQuestionsReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolFindingQuestionsReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolFindingQuestionsOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolFindingQuestions()
				{
					return (String)super.row.get(0);
				}
				public void setcolFindingQuestions(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolFindingQuestionsTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(1);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getcolStatus()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.row.get(1);
				}
				public void setcolStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.row.set(1, value, true);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolAllowMultipleAnswersReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolAllowMultipleAnswersReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolAllowMultipleAnswersOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getcolAllowMultipleAnswers()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setcolAllowMultipleAnswers(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellcolAllowMultipleAnswersTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolMandatoryReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolMandatoryReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolMandatoryOpened()
				{
					super.row.showOpened(3);
				}
				public boolean getcolMandatory()
				{
					return ((Boolean)super.row.get(3)).booleanValue();
				}
				public void setcolMandatory(boolean value)
				{
					super.row.set(3, new Boolean(value));
				}
				public void setCellcolMandatoryTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.assessment.vo.GraphicAssessmentFindingQuestionVo getValue()
				{
					return (ims.assessment.vo.GraphicAssessmentFindingQuestionVo)super.row.getValue();
				}
				public void setValue(ims.assessment.vo.GraphicAssessmentFindingQuestionVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdFindingQuestionsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdFindingQuestionsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdFindingQuestionsRow get(int index)
				{
					return new grdFindingQuestionsRow(super.collection.get(index));
				}
				public grdFindingQuestionsRow newRow()
				{
					return new grdFindingQuestionsRow(super.collection.newRow());
				}
				public grdFindingQuestionsRow newRow(boolean autoSelect)
				{
					return new grdFindingQuestionsRow(super.collection.newRow(autoSelect));
				}
				public grdFindingQuestionsRow newRowAt(int index)
				{
					return new grdFindingQuestionsRow(super.collection.newRowAt(index));
				}
				public grdFindingQuestionsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdFindingQuestionsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdFindingQuestionsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection getValues()
				{
					ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection listOfValues = new ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.assessment.vo.GraphicAssessmentFindingQuestionVo getValue()
				{
					return (ims.assessment.vo.GraphicAssessmentFindingQuestionVo)super.grid.getValue();
				}
				public void setValue(ims.assessment.vo.GraphicAssessmentFindingQuestionVo value)
				{
					super.grid.setValue(value);
				}
				public grdFindingQuestionsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdFindingQuestionsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdFindingQuestionsRowCollection getRows()
				{
					return new grdFindingQuestionsRowCollection(super.grid.getRows());
				}
				public grdFindingQuestionsRow getRowByValue(ims.assessment.vo.GraphicAssessmentFindingQuestionVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdFindingQuestionsRow(row);
				}
				public void setcolFindingQuestionsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolFindingQuestionsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public GridComboBox colStatusComboBox()
				{
					return new GridComboBox(super.grid, 1);
				}
				public void setcolAllowMultipleAnswersHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolAllowMultipleAnswersHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolMandatoryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolMandatoryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 336, 16, 474, 425, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdFindingQuestionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuQuestions, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdFindingQuestionsTemp);
				grdFindingQuestionsGrid grdFindingQuestions = (grdFindingQuestionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFindingQuestionsGrid.class, m_grdFindingQuestionsTemp);
				grdFindingQuestions.addStringColumn("Finding Question", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFindingQuestions.addComboBoxColumn("Status", 0, 0, 95, false, true, true, false, true, -1);
				grdFindingQuestions.addBoolColumn("Multiple Answers", 1, 1, 110, false, true, 0, true);
				grdFindingQuestions.addBoolColumn("Mandatory", 1, 1, -1, false, true, 0, true);
				super.addGrid(grdFindingQuestions);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 312, 425, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT, contextMenus.contextMenuFindingMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public grdFindingQuestionsGrid grdFindingQuestions()
			{
				return (grdFindingQuestionsGrid)super.getGrid(0);
			}
			public DynamicGrid dyngrdAssessmentFindings()
			{
				return (DynamicGrid)super.getControl(1);
			}
		}
		public static class tabStagesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class ctnStageDetailsContainer extends ContainerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbStageComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.assessment.vo.GraphicAssessmentStageVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.assessment.vo.GraphicAssessmentStageVo getValue()
					{
						return (ims.assessment.vo.GraphicAssessmentStageVo)super.control.getValue();
					}
					public void setValue(ims.assessment.vo.GraphicAssessmentStageVo value)
					{
						super.control.setValue(value);
					}
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 103, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Equivalent stage:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 41, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Name:", new Integer(1), null, new Integer(0)}));
			
					// Button Controls
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 728, 25, 80, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 640, 25, 80, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Add", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 112, 8, 248, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 112, 40, 248, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					ComboBox m_cmbStageTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbStageTemp);
					cmbStageComboBox cmbStage = (cmbStageComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStageComboBox.class, m_cmbStageTemp);
					super.addComboBox(cmbStage);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 392, 10, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Annotated", Boolean.TRUE, null}));
				}
				public Button btnCancelStage()
				{
					return (Button)super.getControl(2);
				}
				public Button btnAddStage()
				{
					return (Button)super.getControl(3);
				}
				public TextBox txtStageName()
				{
					return (TextBox)super.getControl(4);
				}
				public cmbStageComboBox cmbStage()
				{
					return (cmbStageComboBox)super.getComboBox(0);
				}
				public CheckBox chkAnnotated()
				{
					return (CheckBox)super.getControl(6);
				}
			}
			public static class grdStagesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdStagesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColNameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColName()
				{
					return (String)super.row.get(0);
				}
				public void setColName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColAnnotatedReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColAnnotatedReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColAnnotatedOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColAnnotated()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColAnnotated(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColAnnotatedTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColEquivalentStageReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColEquivalentStageReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColEquivalentStageOpened()
				{
					super.row.showOpened(2);
				}
				public String getColEquivalentStage()
				{
					return (String)super.row.get(2);
				}
				public void setColEquivalentStage(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColEquivalentStageTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.assessment.vo.GraphicAssessmentStageVo getValue()
				{
					return (ims.assessment.vo.GraphicAssessmentStageVo)super.row.getValue();
				}
				public void setValue(ims.assessment.vo.GraphicAssessmentStageVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdStagesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdStagesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdStagesRow get(int index)
				{
					return new grdStagesRow(super.collection.get(index));
				}
				public grdStagesRow newRow()
				{
					return new grdStagesRow(super.collection.newRow());
				}
				public grdStagesRow newRow(boolean autoSelect)
				{
					return new grdStagesRow(super.collection.newRow(autoSelect));
				}
				public grdStagesRow newRowAt(int index)
				{
					return new grdStagesRow(super.collection.newRowAt(index));
				}
				public grdStagesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdStagesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdStagesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.assessment.vo.GraphicAssessmentStageVoCollection getValues()
				{
					ims.assessment.vo.GraphicAssessmentStageVoCollection listOfValues = new ims.assessment.vo.GraphicAssessmentStageVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.assessment.vo.GraphicAssessmentStageVo getValue()
				{
					return (ims.assessment.vo.GraphicAssessmentStageVo)super.grid.getValue();
				}
				public void setValue(ims.assessment.vo.GraphicAssessmentStageVo value)
				{
					super.grid.setValue(value);
				}
				public grdStagesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdStagesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdStagesRowCollection getRows()
				{
					return new grdStagesRowCollection(super.grid.getRows());
				}
				public grdStagesRow getRowByValue(ims.assessment.vo.GraphicAssessmentStageVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdStagesRow(row);
				}
				public void setColNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColAnnotatedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColAnnotatedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColEquivalentStageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColEquivalentStageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Container Clasess
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 385, 810, 72, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Container m_ctnStageDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, null, new Boolean(false)});
				addControl(m_ctnStageDetails);
				ctnStageDetailsContainer ctnStageDetails = (ctnStageDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnStageDetailsContainer.class, m_ctnStageDetails, factory);
				ims.framework.utils.SizeInfo m_ctnStageDetailsDesignSize = new ims.framework.utils.SizeInfo(810, 72);
				ims.framework.utils.SizeInfo m_ctnStageDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
				ctnStageDetails.setContext(form, appForm, m_ctnStageDetails, loader, form_images_local, contextMenus, startControlID, m_ctnStageDetailsDesignSize, m_ctnStageDetailsRuntimeSize, startTabIndex, skipContextValidation);
				super.addContainer(ctnStageDetails);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 810, 369, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdStagesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuStages, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdStagesTemp);
				grdStagesGrid grdStages = (grdStagesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdStagesGrid.class, m_grdStagesTemp);
				grdStages.addStringColumn("Name", 0, 0, 350, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdStages.addBoolColumn("Annotated", 1, 1, 80, true, false, 0, true);
				grdStages.addStringColumn("Equivalent Stage", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdStages);
			}

			public ctnStageDetailsContainer ctnStageDetails()
			{
				return (ctnStageDetailsContainer)super.getContainer(0);
			}
			public grdStagesGrid grdStages()
			{
				return (grdStagesGrid)super.getGrid(0);
			}
		}
		public static class tabFindingsWithStagesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdFindingQuestionsWithStageRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdFindingQuestionsWithStageRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolFindingQuestionsReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolFindingQuestionsReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolFindingQuestionsOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolFindingQuestions()
				{
					return (String)super.row.get(0);
				}
				public void setcolFindingQuestions(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolFindingQuestionsTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(1);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getcolStatus()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.row.get(1);
				}
				public void setcolStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.row.set(1, value, true);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolAllowMultipleAnswersReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolAllowMultipleAnswersReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolAllowMultipleAnswersOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getcolAllowMultipleAnswers()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setcolAllowMultipleAnswers(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellcolAllowMultipleAnswersTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolMandatoryReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolMandatoryReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolMandatoryOpened()
				{
					super.row.showOpened(3);
				}
				public boolean getcolMandatory()
				{
					return ((Boolean)super.row.get(3)).booleanValue();
				}
				public void setcolMandatory(boolean value)
				{
					super.row.set(3, new Boolean(value));
				}
				public void setCellcolMandatoryTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.assessment.vo.GraphicAssessmentFindingQuestionVo getValue()
				{
					return (ims.assessment.vo.GraphicAssessmentFindingQuestionVo)super.row.getValue();
				}
				public void setValue(ims.assessment.vo.GraphicAssessmentFindingQuestionVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdFindingQuestionsWithStageRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdFindingQuestionsWithStageRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdFindingQuestionsWithStageRow get(int index)
				{
					return new grdFindingQuestionsWithStageRow(super.collection.get(index));
				}
				public grdFindingQuestionsWithStageRow newRow()
				{
					return new grdFindingQuestionsWithStageRow(super.collection.newRow());
				}
				public grdFindingQuestionsWithStageRow newRow(boolean autoSelect)
				{
					return new grdFindingQuestionsWithStageRow(super.collection.newRow(autoSelect));
				}
				public grdFindingQuestionsWithStageRow newRowAt(int index)
				{
					return new grdFindingQuestionsWithStageRow(super.collection.newRowAt(index));
				}
				public grdFindingQuestionsWithStageRow newRowAt(int index, boolean autoSelect)
				{
					return new grdFindingQuestionsWithStageRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdFindingQuestionsWithStageGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection getValues()
				{
					ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection listOfValues = new ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.assessment.vo.GraphicAssessmentFindingQuestionVo getValue()
				{
					return (ims.assessment.vo.GraphicAssessmentFindingQuestionVo)super.grid.getValue();
				}
				public void setValue(ims.assessment.vo.GraphicAssessmentFindingQuestionVo value)
				{
					super.grid.setValue(value);
				}
				public grdFindingQuestionsWithStageRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdFindingQuestionsWithStageRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdFindingQuestionsWithStageRowCollection getRows()
				{
					return new grdFindingQuestionsWithStageRowCollection(super.grid.getRows());
				}
				public grdFindingQuestionsWithStageRow getRowByValue(ims.assessment.vo.GraphicAssessmentFindingQuestionVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdFindingQuestionsWithStageRow(row);
				}
				public void setcolFindingQuestionsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolFindingQuestionsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public GridComboBox colStatusComboBox()
				{
					return new GridComboBox(super.grid, 1);
				}
				public void setcolAllowMultipleAnswersHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolAllowMultipleAnswersHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolMandatoryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolMandatoryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 339, 18, 474, 425, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdFindingQuestionsWithStageTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuQuestions, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdFindingQuestionsWithStageTemp);
				grdFindingQuestionsWithStageGrid grdFindingQuestionsWithStage = (grdFindingQuestionsWithStageGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFindingQuestionsWithStageGrid.class, m_grdFindingQuestionsWithStageTemp);
				grdFindingQuestionsWithStage.addStringColumn("Finding Question", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFindingQuestionsWithStage.addComboBoxColumn("Status", 0, 0, 95, false, true, true, false, true, -1);
				grdFindingQuestionsWithStage.addBoolColumn("Multiple Answers", 1, 1, 110, false, true, 0, true);
				grdFindingQuestionsWithStage.addBoolColumn("Mandatory", 1, 1, -1, false, true, 0, true);
				super.addGrid(grdFindingQuestionsWithStage);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 11, 18, 312, 425, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT, contextMenus.contextMenuFindingWithStagesMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public grdFindingQuestionsWithStageGrid grdFindingQuestionsWithStage()
			{
				return (grdFindingQuestionsWithStageGrid)super.getGrid(0);
			}
			public DynamicGrid dyngrdFindingWithStage()
			{
				return (DynamicGrid)super.getControl(1);
			}
		}
		public static class tabSpecialtiesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSpecialitiesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSpecialitiesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolSpecialtyReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolSpecialtyReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolSpecialtyOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolSpecialty()
				{
					return (String)super.row.get(0);
				}
				public void setcolSpecialty(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolSpecialtyTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.row.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSpecialitiesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSpecialitiesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSpecialitiesRow get(int index)
				{
					return new grdSpecialitiesRow(super.collection.get(index));
				}
				public grdSpecialitiesRow newRow()
				{
					return new grdSpecialitiesRow(super.collection.newRow());
				}
				public grdSpecialitiesRow newRow(boolean autoSelect)
				{
					return new grdSpecialitiesRow(super.collection.newRow(autoSelect));
				}
				public grdSpecialitiesRow newRowAt(int index)
				{
					return new grdSpecialitiesRow(super.collection.newRowAt(index));
				}
				public grdSpecialitiesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSpecialitiesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSpecialitiesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.lookups.Specialty[] getValues()
				{
					ims.core.vo.lookups.Specialty[] listOfValues = new ims.core.vo.lookups.Specialty[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.grid.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.grid.setValue(value);
				}
				public grdSpecialitiesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSpecialitiesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSpecialitiesRowCollection getRows()
				{
					return new grdSpecialitiesRowCollection(super.grid.getRows());
				}
				public grdSpecialitiesRow getRowByValue(ims.core.vo.lookups.Specialty value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSpecialitiesRow(row);
				}
				public void setcolSpecialtyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolSpecialtyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 794, 424, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSpecialitiesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuLIP, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSpecialitiesTemp);
				grdSpecialitiesGrid grdSpecialities = (grdSpecialitiesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpecialitiesGrid.class, m_grdSpecialitiesTemp);
				grdSpecialities.addStringColumn("Specialty", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSpecialities);
			}

			public grdSpecialitiesGrid grdSpecialities()
			{
				return (grdSpecialitiesGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabImages = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Associated Drawing Configurations", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabImagesContainer m_tabImagesContainer = (tabImagesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabImagesContainer.class, m_tabImages, factory);
			super.addContainer(m_tabImages, m_tabImagesContainer);
			ims.framework.utils.SizeInfo m_tabImagesDesignSize = new ims.framework.utils.SizeInfo(832, 488);
			ims.framework.utils.SizeInfo m_tabImagesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper18.getWidth(), anchoringHelper18.getHeight());
			m_tabImagesContainer.setContext(form, appForm, m_tabImages, loader, form_images_local, contextMenus, startControlID, m_tabImagesDesignSize, m_tabImagesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabQuestions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Associated Questions", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabQuestionsContainer m_tabQuestionsContainer = (tabQuestionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabQuestionsContainer.class, m_tabQuestions, factory);
			super.addContainer(m_tabQuestions, m_tabQuestionsContainer);
			ims.framework.utils.SizeInfo m_tabQuestionsDesignSize = new ims.framework.utils.SizeInfo(832, 488);
			ims.framework.utils.SizeInfo m_tabQuestionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
			m_tabQuestionsContainer.setContext(form, appForm, m_tabQuestions, loader, form_images_local, contextMenus, startControlID, m_tabQuestionsDesignSize, m_tabQuestionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabFindings = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Associated Findings", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabFindingsContainer m_tabFindingsContainer = (tabFindingsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabFindingsContainer.class, m_tabFindings, factory);
			super.addContainer(m_tabFindings, m_tabFindingsContainer);
			ims.framework.utils.SizeInfo m_tabFindingsDesignSize = new ims.framework.utils.SizeInfo(832, 488);
			ims.framework.utils.SizeInfo m_tabFindingsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
			m_tabFindingsContainer.setContext(form, appForm, m_tabFindings, loader, form_images_local, contextMenus, startControlID, m_tabFindingsDesignSize, m_tabFindingsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabStages = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Stages", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabStagesContainer m_tabStagesContainer = (tabStagesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabStagesContainer.class, m_tabStages, factory);
			super.addContainer(m_tabStages, m_tabStagesContainer);
			ims.framework.utils.SizeInfo m_tabStagesDesignSize = new ims.framework.utils.SizeInfo(832, 488);
			ims.framework.utils.SizeInfo m_tabStagesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
			m_tabStagesContainer.setContext(form, appForm, m_tabStages, loader, form_images_local, contextMenus, startControlID, m_tabStagesDesignSize, m_tabStagesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabFindingsWithStages = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Associated Findings with Stages", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabFindingsWithStagesContainer m_tabFindingsWithStagesContainer = (tabFindingsWithStagesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabFindingsWithStagesContainer.class, m_tabFindingsWithStages, factory);
			super.addContainer(m_tabFindingsWithStages, m_tabFindingsWithStagesContainer);
			ims.framework.utils.SizeInfo m_tabFindingsWithStagesDesignSize = new ims.framework.utils.SizeInfo(832, 488);
			ims.framework.utils.SizeInfo m_tabFindingsWithStagesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
			m_tabFindingsWithStagesContainer.setContext(form, appForm, m_tabFindingsWithStages, loader, form_images_local, contextMenus, startControlID, m_tabFindingsWithStagesDesignSize, m_tabFindingsWithStagesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSpecialties = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specialties", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSpecialtiesContainer m_tabSpecialtiesContainer = (tabSpecialtiesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecialtiesContainer.class, m_tabSpecialties, factory);
			super.addContainer(m_tabSpecialties, m_tabSpecialtiesContainer);
			ims.framework.utils.SizeInfo m_tabSpecialtiesDesignSize = new ims.framework.utils.SizeInfo(832, 488);
			ims.framework.utils.SizeInfo m_tabSpecialtiesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper23.getWidth(), anchoringHelper23.getHeight());
			m_tabSpecialtiesContainer.setContext(form, appForm, m_tabSpecialties, loader, form_images_local, contextMenus, startControlID, m_tabSpecialtiesDesignSize, m_tabSpecialtiesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabImages().setVisible(false);
			tabQuestions().setVisible(false);
			tabFindings().setVisible(false);
			tabStages().setVisible(false);
			tabFindingsWithStages().setVisible(false);
			tabSpecialties().setVisible(false);
		}
		public void settabImagesEnabled(boolean value)
		{
			tabImages().setEnabled(value);
		}
		public void settabQuestionsEnabled(boolean value)
		{
			tabQuestions().setEnabled(value);
		}
		public void settabFindingsEnabled(boolean value)
		{
			tabFindings().setEnabled(value);
		}
		public void settabStagesEnabled(boolean value)
		{
			tabStages().setEnabled(value);
		}
		public void settabFindingsWithStagesEnabled(boolean value)
		{
			tabFindingsWithStages().setEnabled(value);
		}
		public void settabSpecialtiesEnabled(boolean value)
		{
			tabSpecialties().setEnabled(value);
		}
		public void showtabImages()
		{
			tabQuestions().setVisible(false);
			tabFindings().setVisible(false);
			tabStages().setVisible(false);
			tabFindingsWithStages().setVisible(false);
			tabSpecialties().setVisible(false);
			tabImages().setVisible(true);
		}
		public void showtabQuestions()
		{
			tabImages().setVisible(false);
			tabFindings().setVisible(false);
			tabStages().setVisible(false);
			tabFindingsWithStages().setVisible(false);
			tabSpecialties().setVisible(false);
			tabQuestions().setVisible(true);
		}
		public void showtabFindings()
		{
			tabImages().setVisible(false);
			tabQuestions().setVisible(false);
			tabStages().setVisible(false);
			tabFindingsWithStages().setVisible(false);
			tabSpecialties().setVisible(false);
			tabFindings().setVisible(true);
		}
		public void showtabStages()
		{
			tabImages().setVisible(false);
			tabQuestions().setVisible(false);
			tabFindings().setVisible(false);
			tabFindingsWithStages().setVisible(false);
			tabSpecialties().setVisible(false);
			tabStages().setVisible(true);
		}
		public void showtabFindingsWithStages()
		{
			tabImages().setVisible(false);
			tabQuestions().setVisible(false);
			tabFindings().setVisible(false);
			tabStages().setVisible(false);
			tabSpecialties().setVisible(false);
			tabFindingsWithStages().setVisible(true);
		}
		public void showtabSpecialties()
		{
			tabImages().setVisible(false);
			tabQuestions().setVisible(false);
			tabFindings().setVisible(false);
			tabStages().setVisible(false);
			tabFindingsWithStages().setVisible(false);
			tabSpecialties().setVisible(true);
		}

		public tabImagesContainer tabImages()
		{
			return (tabImagesContainer)super.layers.get(0);
		}
		public tabQuestionsContainer tabQuestions()
		{
			return (tabQuestionsContainer)super.layers.get(1);
		}
		public tabFindingsContainer tabFindings()
		{
			return (tabFindingsContainer)super.layers.get(2);
		}
		public tabStagesContainer tabStages()
		{
			return (tabStagesContainer)super.layers.get(3);
		}
		public tabFindingsWithStagesContainer tabFindingsWithStages()
		{
			return (tabFindingsWithStagesContainer)super.layers.get(4);
		}
		public tabSpecialtiesContainer tabSpecialties()
		{
			return (tabSpecialtiesContainer)super.layers.get(5);
		}
	}
	public static class cmbActiveStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
		{
			return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.GraphicAssessmentShortVo", "_cv_Core.GraphicAssessmentShortVo").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.GraphicAssessmentShortVo' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.contextMenuUserAssessments = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuUserAssessmentsADDItem = factory.createMenuItem(startControlID.intValue() + 10, "Add Scoring Assessment", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsADDItem);
		contextMenus.contextMenuUserAssessmentsDPPItem = factory.createMenuItem(startControlID.intValue() + 11, "Add Daily Patient Progress", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsDPPItem);
		contextMenus.contextMenuUserAssessmentsFALLRISKItem = factory.createMenuItem(startControlID.intValue() + 12, "Add Patient Falls Risk Assessment", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsFALLRISKItem);
		contextMenus.contextMenuUserAssessmentsADLItem = factory.createMenuItem(startControlID.intValue() + 13, "Add Activities of Daily Living ", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsADLItem);
		contextMenus.contextMenuUserAssessmentsSKINItem = factory.createMenuItem(startControlID.intValue() + 14, "Add Skin Management", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsSKINItem);
		contextMenus.contextMenuUserAssessmentsBLADItem = factory.createMenuItem(startControlID.intValue() + 15, "Add Bladder Management", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsBLADItem);
		contextMenus.contextMenuUserAssessmentsBWELItem = factory.createMenuItem(startControlID.intValue() + 16, "Add Bowel Management", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsBWELItem);
		contextMenus.contextMenuUserAssessmentsMOBItem = factory.createMenuItem(startControlID.intValue() + 17, "Add Mobility", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsMOBItem);
		contextMenus.contextMenuUserAssessmentsWCItem = factory.createMenuItem(startControlID.intValue() + 18, "Add Wheelchair and Equipment", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsWCItem);
		contextMenus.contextMenuUserAssessmentsCOMItem = factory.createMenuItem(startControlID.intValue() + 19, "Add Community Preparation", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsCOMItem);
		contextMenus.contextMenuUserAssessmentsDISItem = factory.createMenuItem(startControlID.intValue() + 20, "Add Discharge Coordination", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsDISItem);
		contextMenus.contextMenuUserAssessmentsPSYItem = factory.createMenuItem(startControlID.intValue() + 21, "Add Psychological Issues", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsPSYItem);
		contextMenus.contextMenuUserAssessmentsNURSEDISCHARGECHKLSTItem = factory.createMenuItem(startControlID.intValue() + 22, "Add Nursing Discharge Checklist", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsNURSEDISCHARGECHKLSTItem);
		contextMenus.contextMenuUserAssessmentsPREOPPOSSUMItem = factory.createMenuItem(startControlID.intValue() + 23, "Add Preopossum", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsPREOPPOSSUMItem);
		contextMenus.contextMenuUserAssessmentsOPERATIVEDETAILSPOSSUMItem = factory.createMenuItem(startControlID.intValue() + 24, "Add Operative Details Possum", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsOPERATIVEDETAILSPOSSUMItem);
		contextMenus.contextMenuUserAssessmentsNEW_NON_SCORINGItem = factory.createMenuItem(startControlID.intValue() + 25, "Add Non Scoring Assessment", true, false, new Integer(102179), true, true);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsNEW_NON_SCORINGItem);
		contextMenus.contextMenuUserAssessmentsDISCHARGECHECKLISTItem = factory.createMenuItem(startControlID.intValue() + 26, "Add Discharge Checklist", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsDISCHARGECHECKLISTItem);
		contextMenus.contextMenuUserAssessmentsNURSING_DISCHARGEItem = factory.createMenuItem(startControlID.intValue() + 27, "Add Nursing Discharge", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsNURSING_DISCHARGEItem);
		contextMenus.contextMenuUserAssessmentsNURSING_DISCHARGE_PLANNINGItem = factory.createMenuItem(startControlID.intValue() + 28, "Add Nursing Discharge Planning", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsNURSING_DISCHARGE_PLANNINGItem);
		contextMenus.contextMenuUserAssessmentsADD_NEW_BASED_ON_PREVIOUSItem = factory.createMenuItem(startControlID.intValue() + 29, "Add Assessment based on ", true, false, new Integer(102222), true, true);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsADD_NEW_BASED_ON_PREVIOUSItem);
		contextMenus.contextMenuUserAssessmentsMANCHESTERTRIAGEItem = factory.createMenuItem(startControlID.intValue() + 30, "Add Manchester Triage Protocol", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsMANCHESTERTRIAGEItem);
		contextMenus.contextMenuUserAssessmentsEDITItem = factory.createMenuItem(startControlID.intValue() + 31, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsEDITItem);
		contextMenus.contextMenuUserAssessmentsVIEWItem = factory.createMenuItem(startControlID.intValue() + 32, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsVIEWItem);
		contextMenus.contextMenuUserAssessmentsPREVIEWItem = factory.createMenuItem(startControlID.intValue() + 33, "Preview", true, false, new Integer(102221), false, true);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsPREVIEWItem);
		contextMenus.contextMenuUserAssessmentsMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 34, "Move Up", true, false, new Integer(102197), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsMOVE_UPItem);
		contextMenus.contextMenuUserAssessmentsMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 35, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsMOVE_DOWNItem);
		contextMenus.contextMenuUserAssessmentsINTRODUCTORY_PHONE_CALLItem = factory.createMenuItem(startControlID.intValue() + 36, "Add Introductory Phone Call", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(820001)))
			contextMenus.contextMenuUserAssessments.add(contextMenus.contextMenuUserAssessmentsINTRODUCTORY_PHONE_CALLItem);
		form.registerMenu(contextMenus.contextMenuUserAssessments);
		contextMenus.contextMenuFindingMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuFindingMenuAddItem = factory.createMenuItem(startControlID.intValue() + 37, "Add Finding", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuFindingMenu.add(contextMenus.contextMenuFindingMenuAddItem);
		contextMenus.contextMenuFindingMenuEditItem = factory.createMenuItem(startControlID.intValue() + 38, "Edit Finding", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuFindingMenu.add(contextMenus.contextMenuFindingMenuEditItem);
		contextMenus.contextMenuFindingMenuRemoveItem = factory.createMenuItem(startControlID.intValue() + 39, "Remove Finding", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuFindingMenu.add(contextMenus.contextMenuFindingMenuRemoveItem);
		contextMenus.contextMenuFindingMenuCloneItem = factory.createMenuItem(startControlID.intValue() + 40, "Clone", true, false, new Integer(102222), true, true);
		contextMenus.contextMenuFindingMenu.add(contextMenus.contextMenuFindingMenuCloneItem);
		form.registerMenu(contextMenus.contextMenuFindingMenu);
		contextMenus.contextMenuQuestions = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.contextMenuQuestionsAddItem = factory.createMenuItem(startControlID.intValue() + 41, "Add Question", true, false, new Integer(102215), true, false);
		contextMenus.contextMenuQuestions.add(contextMenus.contextMenuQuestionsAddItem);
		contextMenus.contextMenuQuestionsEditItem = factory.createMenuItem(startControlID.intValue() + 42, "Edit Question", true, false, new Integer(102216), true, false);
		contextMenus.contextMenuQuestions.add(contextMenus.contextMenuQuestionsEditItem);
		contextMenus.contextMenuQuestionsRemoveItem = factory.createMenuItem(startControlID.intValue() + 43, "Remove Question", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuQuestions.add(contextMenus.contextMenuQuestionsRemoveItem);
		contextMenus.contextMenuQuestionsMoveUpItem = factory.createMenuItem(startControlID.intValue() + 44, "Move Up", true, false, new Integer(103116), true, false);
		contextMenus.contextMenuQuestions.add(contextMenus.contextMenuQuestionsMoveUpItem);
		contextMenus.contextMenuQuestionsMoveDownItem = factory.createMenuItem(startControlID.intValue() + 45, "Move Down", true, false, new Integer(103117), true, false);
		contextMenus.contextMenuQuestions.add(contextMenus.contextMenuQuestionsMoveDownItem);
		form.registerMenu(contextMenus.contextMenuQuestions);
		contextMenus.contextMenuStages = factory.createMenu(startControlID.intValue() + 5);
		contextMenus.contextMenuStagesADD_STAGEItem = factory.createMenuItem(startControlID.intValue() + 46, "Add Stage", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuStages.add(contextMenus.contextMenuStagesADD_STAGEItem);
		contextMenus.contextMenuStagesEDIT_STAGEItem = factory.createMenuItem(startControlID.intValue() + 47, "Edit Stage", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuStages.add(contextMenus.contextMenuStagesEDIT_STAGEItem);
		contextMenus.contextMenuStagesREMOVE_STAGEItem = factory.createMenuItem(startControlID.intValue() + 48, "Remove Stage", true, false, new Integer(102148), true, true);
		contextMenus.contextMenuStages.add(contextMenus.contextMenuStagesREMOVE_STAGEItem);
		form.registerMenu(contextMenus.contextMenuStages);
		contextMenus.contextMenuFindingWithStagesMenu = factory.createMenu(startControlID.intValue() + 6);
		contextMenus.contextMenuFindingWithStagesMenuADDItem = factory.createMenuItem(startControlID.intValue() + 49, "Add Finding", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuFindingWithStagesMenu.add(contextMenus.contextMenuFindingWithStagesMenuADDItem);
		contextMenus.contextMenuFindingWithStagesMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 50, "Remove Finding", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuFindingWithStagesMenu.add(contextMenus.contextMenuFindingWithStagesMenuREMOVEItem);
		contextMenus.contextMenuFindingWithStagesMenuCOPYItem = factory.createMenuItem(startControlID.intValue() + 51, "Copy Questions", true, false, new Integer(102222), true, true);
		contextMenus.contextMenuFindingWithStagesMenu.add(contextMenus.contextMenuFindingWithStagesMenuCOPYItem);
		contextMenus.contextMenuFindingWithStagesMenuPASTEItem = factory.createMenuItem(startControlID.intValue() + 52, "Paste Questions", true, false, new Integer(102182), true, false);
		contextMenus.contextMenuFindingWithStagesMenu.add(contextMenus.contextMenuFindingWithStagesMenuPASTEItem);
		form.registerMenu(contextMenus.contextMenuFindingWithStagesMenu);
		contextMenus.contextMenuLIP = factory.createMenu(startControlID.intValue() + 7);
		contextMenus.contextMenuLIPNewItem = factory.createMenuItem(startControlID.intValue() + 53, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPNewItem);
		contextMenus.contextMenuLIPUpdateItem = factory.createMenuItem(startControlID.intValue() + 54, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPUpdateItem);
		form.registerMenu(contextMenus.contextMenuLIP);


		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 664, 82, 154, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Store Printed Assessment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 53, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 26, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 386, 53, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Report:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 402, 26, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "URL:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 781, 50, 59, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Clear", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 720, 50, 59, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Link", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Preview", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 768, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 432, 51, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 432, 24, 368, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 64, 24, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 64, 51, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbActiveStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbActiveStatusTemp);
		cmbActiveStatusComboBox cmbActiveStatus = (cmbActiveStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActiveStatusComboBox.class, m_cmbActiveStatusTemp);
		super.addComboBox(cmbActiveStatus);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 824, 82, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 812, 20, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.LinkEnabled24, this.getImages().Core.LinkDisabled24, "Open URL", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// Link Controls
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 736, 0, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Label lbl4()
	{
		return (Label)super.getControl(10);
	}
	public Button btnClear()
	{
		return (Button)super.getControl(11);
	}
	public Button btnLink()
	{
		return (Button)super.getControl(12);
	}
	public Button btnPreview()
	{
		return (Button)super.getControl(13);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(14);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(15);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(16);
	}
	public TextBox txtReport()
	{
		return (TextBox)super.getControl(17);
	}
	public TextBox txtUrl()
	{
		return (TextBox)super.getControl(18);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(19);
	}
	public cmbActiveStatusComboBox cmbActiveStatus()
	{
		return (cmbActiveStatusComboBox)super.getComboBox(0);
	}
	public CheckBox chkStoreAssessement()
	{
		return (CheckBox)super.getControl(21);
	}
	public ImageButton imbUrl()
	{
		return (ImageButton)super.getControl(22);
	}
	public Link lnkReturnToList()
	{
		return (Link)super.getControl(23);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
			Core = new CoreForms();
			Assessment = new AssessmentForms();
			ClinicalAdmin = new ClinicalAdminForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				DrawingConfigSelect = new LocalFormName(103136);
			}
			public final FormName DrawingConfigSelect;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				QuestionSelectNew = new LocalFormName(102182);
				ReportTemplate = new LocalFormName(102250);
			}
			public final FormName QuestionSelectNew;
			public final FormName ReportTemplate;
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				GraphicAssessments = new LocalFormName(102191);
				FindingQuestionsSelect = new LocalFormName(102194);
				DynamicAssessmentsDialog = new LocalFormName(127116);
			}
			public final FormName GraphicAssessments;
			public final FormName FindingQuestionsSelect;
			public final FormName DynamicAssessmentsDialog;
		}
		public final class ClinicalAdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalAdminForms()
			{
				HotlistDialog = new LocalFormName(104117);
			}
			public final FormName HotlistDialog;
		}

		public AdminForms Admin;
		public CoreForms Core;
		public AssessmentForms Assessment;
		public ClinicalAdminForms ClinicalAdmin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			GeneralMedical = new GeneralMedicalImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				QuestionSmall = new ImageHelper(102215, "Images/Core/Help-3.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				Link = new ImageHelper(102278, "Images/Core/Link.gif", new Integer(16), new Integer(16));
				LinkDisabled24 = new ImageHelper(102522, "Images/Core/url_disabled_24.png", new Integer(24), new Integer(24));
				LinkEnabled24 = new ImageHelper(102521, "Images/Core/url_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image QuestionSmall;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image Link;
			public final ims.framework.utils.Image LinkDisabled24;
			public final ims.framework.utils.Image LinkEnabled24;
		}
		public final class GeneralMedicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private GeneralMedicalImages()
			{
				Blank = new ImageHelper(109101, "Images/GeneralMedical/Blank.gif", new Integer(336), new Integer(336));
			}
			public final ims.framework.utils.Image Blank;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Pencil = new ImageHelper(103151, "Images/Admin/pencil2.gif", new Integer(16), new Integer(16));
				Page = new ImageHelper(103152, "Images/Admin/Justify-Full.gif", new Integer(16), new Integer(16));
				Brush = new ImageHelper(103153, "Images/Admin/Paintbrush.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Pencil;
			public final ims.framework.utils.Image Page;
			public final ims.framework.utils.Image Brush;
		}
		public final CoreImages Core;
		public final GeneralMedicalImages GeneralMedical;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_IsFindingQuestion = new ims.framework.ContextVariable("IsFindingQuestion", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__IsFindingQuestion_" + componentIdentifier + "");
			cxl_GraphicAssessmentVo = new ims.framework.ContextVariable("GraphicAssessmentVo", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__GraphicAssessmentVo_" + componentIdentifier + "");
			cxl_Stages = new ims.framework.ContextVariable("Stages", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__Stages_" + componentIdentifier + "");
			cxl_StageBeingEdited = new ims.framework.ContextVariable("StageBeingEdited", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__StageBeingEdited_" + componentIdentifier + "");
			cxl_CurrentStage = new ims.framework.ContextVariable("CurrentStage", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__CurrentStage_" + componentIdentifier + "");
			cxl_ClipboardQuestions = new ims.framework.ContextVariable("ClipboardQuestions", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__ClipboardQuestions_" + componentIdentifier + "");
			cxl_InactiveStages = new ims.framework.ContextVariable("InactiveStages", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__InactiveStages_" + componentIdentifier + "");
			cxl_IsAssessmentWithStages = new ims.framework.ContextVariable("IsAssessmentWithStages", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__IsAssessmentWithStages_" + componentIdentifier + "");
			cxl_ClonedId = new ims.framework.ContextVariable("ClonedId", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__ClonedId_" + componentIdentifier + "");
			cxl_QuestionMode = new ims.framework.ContextVariable("QuestionMode", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__QuestionMode_" + componentIdentifier + "");
			cxl_IsInactive = new ims.framework.ContextVariable("IsInactive", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__IsInactive_" + componentIdentifier + "");
			cxl_LinkedReport = new ims.framework.ContextVariable("LinkedReport", prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__LinkedReport_" + componentIdentifier + "");
		}
		
		public boolean getIsFindingQuestionIsNotNull()
		{
			return !cxl_IsFindingQuestion.getValueIsNull(context);
		}
		public Boolean getIsFindingQuestion()
		{
			return (Boolean)cxl_IsFindingQuestion.getValue(context);
		}
		public void setIsFindingQuestion(Boolean value)
		{
			cxl_IsFindingQuestion.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsFindingQuestion = null;
		public boolean getGraphicAssessmentVoIsNotNull()
		{
			return !cxl_GraphicAssessmentVo.getValueIsNull(context);
		}
		public ims.assessment.vo.GraphicAssessmentVo getGraphicAssessmentVo()
		{
			return (ims.assessment.vo.GraphicAssessmentVo)cxl_GraphicAssessmentVo.getValue(context);
		}
		public void setGraphicAssessmentVo(ims.assessment.vo.GraphicAssessmentVo value)
		{
			cxl_GraphicAssessmentVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GraphicAssessmentVo = null;
		public boolean getStagesIsNotNull()
		{
			return !cxl_Stages.getValueIsNull(context);
		}
		public ims.assessment.vo.GraphicAssessmentStageVoCollection getStages()
		{
			return (ims.assessment.vo.GraphicAssessmentStageVoCollection)cxl_Stages.getValue(context);
		}
		public void setStages(ims.assessment.vo.GraphicAssessmentStageVoCollection value)
		{
			cxl_Stages.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Stages = null;
		public boolean getStageBeingEditedIsNotNull()
		{
			return !cxl_StageBeingEdited.getValueIsNull(context);
		}
		public Boolean getStageBeingEdited()
		{
			return (Boolean)cxl_StageBeingEdited.getValue(context);
		}
		public void setStageBeingEdited(Boolean value)
		{
			cxl_StageBeingEdited.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_StageBeingEdited = null;
		public boolean getCurrentStageIsNotNull()
		{
			return !cxl_CurrentStage.getValueIsNull(context);
		}
		public ims.assessment.vo.GraphicAssessmentStageVo getCurrentStage()
		{
			return (ims.assessment.vo.GraphicAssessmentStageVo)cxl_CurrentStage.getValue(context);
		}
		public void setCurrentStage(ims.assessment.vo.GraphicAssessmentStageVo value)
		{
			cxl_CurrentStage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentStage = null;
		public boolean getClipboardQuestionsIsNotNull()
		{
			return !cxl_ClipboardQuestions.getValueIsNull(context);
		}
		public ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection getClipboardQuestions()
		{
			return (ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection)cxl_ClipboardQuestions.getValue(context);
		}
		public void setClipboardQuestions(ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection value)
		{
			cxl_ClipboardQuestions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClipboardQuestions = null;
		public boolean getInactiveStagesIsNotNull()
		{
			return !cxl_InactiveStages.getValueIsNull(context);
		}
		public ims.assessment.vo.GraphicAssessmentStageVoCollection getInactiveStages()
		{
			return (ims.assessment.vo.GraphicAssessmentStageVoCollection)cxl_InactiveStages.getValue(context);
		}
		public void setInactiveStages(ims.assessment.vo.GraphicAssessmentStageVoCollection value)
		{
			cxl_InactiveStages.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InactiveStages = null;
		public boolean getIsAssessmentWithStagesIsNotNull()
		{
			return !cxl_IsAssessmentWithStages.getValueIsNull(context);
		}
		public Boolean getIsAssessmentWithStages()
		{
			return (Boolean)cxl_IsAssessmentWithStages.getValue(context);
		}
		public void setIsAssessmentWithStages(Boolean value)
		{
			cxl_IsAssessmentWithStages.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsAssessmentWithStages = null;
		public boolean getClonedIdIsNotNull()
		{
			return !cxl_ClonedId.getValueIsNull(context);
		}
		public Integer getClonedId()
		{
			return (Integer)cxl_ClonedId.getValue(context);
		}
		public void setClonedId(Integer value)
		{
			cxl_ClonedId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClonedId = null;
		public boolean getQuestionModeIsNotNull()
		{
			return !cxl_QuestionMode.getValueIsNull(context);
		}
		public Integer getQuestionMode()
		{
			return (Integer)cxl_QuestionMode.getValue(context);
		}
		public void setQuestionMode(Integer value)
		{
			cxl_QuestionMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_QuestionMode = null;
		public boolean getIsInactiveIsNotNull()
		{
			return !cxl_IsInactive.getValueIsNull(context);
		}
		public Boolean getIsInactive()
		{
			return (Boolean)cxl_IsInactive.getValue(context);
		}
		public void setIsInactive(Boolean value)
		{
			cxl_IsInactive.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsInactive = null;
		public boolean getLinkedReportIsNotNull()
		{
			return !cxl_LinkedReport.getValueIsNull(context);
		}
		public ims.core.admin.vo.TemplateBoRefVo getLinkedReport()
		{
			return (ims.core.admin.vo.TemplateBoRefVo)cxl_LinkedReport.getValue(context);
		}
		public void setLinkedReport(ims.core.admin.vo.TemplateBoRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'LinkedReport' RefVo context variable.");
			if(value == null)
				cxl_LinkedReport.setValue(context, null);
			else
				cxl_LinkedReport.setValue(context, new ims.core.admin.vo.TemplateBoRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_LinkedReport = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class UserAssessments implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 10;
			public static final int DPP = 11;
			public static final int FALLRISK = 12;
			public static final int ADL = 13;
			public static final int SKIN = 14;
			public static final int BLAD = 15;
			public static final int BWEL = 16;
			public static final int MOB = 17;
			public static final int WC = 18;
			public static final int COM = 19;
			public static final int DIS = 20;
			public static final int PSY = 21;
			public static final int NURSEDISCHARGECHKLST = 22;
			public static final int PREOPPOSSUM = 23;
			public static final int OPERATIVEDETAILSPOSSUM = 24;
			public static final int NEW_NON_SCORING = 25;
			public static final int DISCHARGECHECKLIST = 26;
			public static final int NURSING_DISCHARGE = 27;
			public static final int NURSING_DISCHARGE_PLANNING = 28;
			public static final int ADD_NEW_BASED_ON_PREVIOUS = 29;
			public static final int MANCHESTERTRIAGE = 30;
			public static final int EDIT = 31;
			public static final int VIEW = 32;
			public static final int PREVIEW = 33;
			public static final int MOVE_UP = 34;
			public static final int MOVE_DOWN = 35;
			public static final int INTRODUCTORY_PHONE_CALL = 36;
		}
		public void disableAllUserAssessmentsMenuItems()
		{
			this.contextMenuUserAssessmentsADDItem.setEnabled(false);
			this.contextMenuUserAssessmentsDPPItem.setEnabled(false);
			this.contextMenuUserAssessmentsFALLRISKItem.setEnabled(false);
			this.contextMenuUserAssessmentsADLItem.setEnabled(false);
			this.contextMenuUserAssessmentsSKINItem.setEnabled(false);
			this.contextMenuUserAssessmentsBLADItem.setEnabled(false);
			this.contextMenuUserAssessmentsBWELItem.setEnabled(false);
			this.contextMenuUserAssessmentsMOBItem.setEnabled(false);
			this.contextMenuUserAssessmentsWCItem.setEnabled(false);
			this.contextMenuUserAssessmentsCOMItem.setEnabled(false);
			this.contextMenuUserAssessmentsDISItem.setEnabled(false);
			this.contextMenuUserAssessmentsPSYItem.setEnabled(false);
			this.contextMenuUserAssessmentsNURSEDISCHARGECHKLSTItem.setEnabled(false);
			this.contextMenuUserAssessmentsPREOPPOSSUMItem.setEnabled(false);
			this.contextMenuUserAssessmentsOPERATIVEDETAILSPOSSUMItem.setEnabled(false);
			this.contextMenuUserAssessmentsNEW_NON_SCORINGItem.setEnabled(false);
			this.contextMenuUserAssessmentsDISCHARGECHECKLISTItem.setEnabled(false);
			this.contextMenuUserAssessmentsNURSING_DISCHARGEItem.setEnabled(false);
			this.contextMenuUserAssessmentsNURSING_DISCHARGE_PLANNINGItem.setEnabled(false);
			this.contextMenuUserAssessmentsADD_NEW_BASED_ON_PREVIOUSItem.setEnabled(false);
			this.contextMenuUserAssessmentsMANCHESTERTRIAGEItem.setEnabled(false);
			this.contextMenuUserAssessmentsEDITItem.setEnabled(false);
			this.contextMenuUserAssessmentsVIEWItem.setEnabled(false);
			this.contextMenuUserAssessmentsPREVIEWItem.setEnabled(false);
			this.contextMenuUserAssessmentsMOVE_UPItem.setEnabled(false);
			this.contextMenuUserAssessmentsMOVE_DOWNItem.setEnabled(false);
			this.contextMenuUserAssessmentsINTRODUCTORY_PHONE_CALLItem.setEnabled(false);
		}
		public void hideAllUserAssessmentsMenuItems()
		{
			this.contextMenuUserAssessmentsADDItem.setVisible(false);
			this.contextMenuUserAssessmentsDPPItem.setVisible(false);
			this.contextMenuUserAssessmentsFALLRISKItem.setVisible(false);
			this.contextMenuUserAssessmentsADLItem.setVisible(false);
			this.contextMenuUserAssessmentsSKINItem.setVisible(false);
			this.contextMenuUserAssessmentsBLADItem.setVisible(false);
			this.contextMenuUserAssessmentsBWELItem.setVisible(false);
			this.contextMenuUserAssessmentsMOBItem.setVisible(false);
			this.contextMenuUserAssessmentsWCItem.setVisible(false);
			this.contextMenuUserAssessmentsCOMItem.setVisible(false);
			this.contextMenuUserAssessmentsDISItem.setVisible(false);
			this.contextMenuUserAssessmentsPSYItem.setVisible(false);
			this.contextMenuUserAssessmentsNURSEDISCHARGECHKLSTItem.setVisible(false);
			this.contextMenuUserAssessmentsPREOPPOSSUMItem.setVisible(false);
			this.contextMenuUserAssessmentsOPERATIVEDETAILSPOSSUMItem.setVisible(false);
			this.contextMenuUserAssessmentsNEW_NON_SCORINGItem.setVisible(false);
			this.contextMenuUserAssessmentsDISCHARGECHECKLISTItem.setVisible(false);
			this.contextMenuUserAssessmentsNURSING_DISCHARGEItem.setVisible(false);
			this.contextMenuUserAssessmentsNURSING_DISCHARGE_PLANNINGItem.setVisible(false);
			this.contextMenuUserAssessmentsADD_NEW_BASED_ON_PREVIOUSItem.setVisible(false);
			this.contextMenuUserAssessmentsMANCHESTERTRIAGEItem.setVisible(false);
			this.contextMenuUserAssessmentsEDITItem.setVisible(false);
			this.contextMenuUserAssessmentsVIEWItem.setVisible(false);
			this.contextMenuUserAssessmentsPREVIEWItem.setVisible(false);
			this.contextMenuUserAssessmentsMOVE_UPItem.setVisible(false);
			this.contextMenuUserAssessmentsMOVE_DOWNItem.setVisible(false);
			this.contextMenuUserAssessmentsINTRODUCTORY_PHONE_CALLItem.setVisible(false);
		}
		private Menu contextMenuUserAssessments;
		public MenuItem getUserAssessmentsADDItem()
		{
			return this.contextMenuUserAssessmentsADDItem;
		}
		private MenuItem contextMenuUserAssessmentsADDItem;
		public MenuItem getUserAssessmentsDPPItem()
		{
			return this.contextMenuUserAssessmentsDPPItem;
		}
		private MenuItem contextMenuUserAssessmentsDPPItem;
		public MenuItem getUserAssessmentsFALLRISKItem()
		{
			return this.contextMenuUserAssessmentsFALLRISKItem;
		}
		private MenuItem contextMenuUserAssessmentsFALLRISKItem;
		public MenuItem getUserAssessmentsADLItem()
		{
			return this.contextMenuUserAssessmentsADLItem;
		}
		private MenuItem contextMenuUserAssessmentsADLItem;
		public MenuItem getUserAssessmentsSKINItem()
		{
			return this.contextMenuUserAssessmentsSKINItem;
		}
		private MenuItem contextMenuUserAssessmentsSKINItem;
		public MenuItem getUserAssessmentsBLADItem()
		{
			return this.contextMenuUserAssessmentsBLADItem;
		}
		private MenuItem contextMenuUserAssessmentsBLADItem;
		public MenuItem getUserAssessmentsBWELItem()
		{
			return this.contextMenuUserAssessmentsBWELItem;
		}
		private MenuItem contextMenuUserAssessmentsBWELItem;
		public MenuItem getUserAssessmentsMOBItem()
		{
			return this.contextMenuUserAssessmentsMOBItem;
		}
		private MenuItem contextMenuUserAssessmentsMOBItem;
		public MenuItem getUserAssessmentsWCItem()
		{
			return this.contextMenuUserAssessmentsWCItem;
		}
		private MenuItem contextMenuUserAssessmentsWCItem;
		public MenuItem getUserAssessmentsCOMItem()
		{
			return this.contextMenuUserAssessmentsCOMItem;
		}
		private MenuItem contextMenuUserAssessmentsCOMItem;
		public MenuItem getUserAssessmentsDISItem()
		{
			return this.contextMenuUserAssessmentsDISItem;
		}
		private MenuItem contextMenuUserAssessmentsDISItem;
		public MenuItem getUserAssessmentsPSYItem()
		{
			return this.contextMenuUserAssessmentsPSYItem;
		}
		private MenuItem contextMenuUserAssessmentsPSYItem;
		public MenuItem getUserAssessmentsNURSEDISCHARGECHKLSTItem()
		{
			return this.contextMenuUserAssessmentsNURSEDISCHARGECHKLSTItem;
		}
		private MenuItem contextMenuUserAssessmentsNURSEDISCHARGECHKLSTItem;
		public MenuItem getUserAssessmentsPREOPPOSSUMItem()
		{
			return this.contextMenuUserAssessmentsPREOPPOSSUMItem;
		}
		private MenuItem contextMenuUserAssessmentsPREOPPOSSUMItem;
		public MenuItem getUserAssessmentsOPERATIVEDETAILSPOSSUMItem()
		{
			return this.contextMenuUserAssessmentsOPERATIVEDETAILSPOSSUMItem;
		}
		private MenuItem contextMenuUserAssessmentsOPERATIVEDETAILSPOSSUMItem;
		public MenuItem getUserAssessmentsNEW_NON_SCORINGItem()
		{
			return this.contextMenuUserAssessmentsNEW_NON_SCORINGItem;
		}
		private MenuItem contextMenuUserAssessmentsNEW_NON_SCORINGItem;
		public MenuItem getUserAssessmentsDISCHARGECHECKLISTItem()
		{
			return this.contextMenuUserAssessmentsDISCHARGECHECKLISTItem;
		}
		private MenuItem contextMenuUserAssessmentsDISCHARGECHECKLISTItem;
		public MenuItem getUserAssessmentsNURSING_DISCHARGEItem()
		{
			return this.contextMenuUserAssessmentsNURSING_DISCHARGEItem;
		}
		private MenuItem contextMenuUserAssessmentsNURSING_DISCHARGEItem;
		public MenuItem getUserAssessmentsNURSING_DISCHARGE_PLANNINGItem()
		{
			return this.contextMenuUserAssessmentsNURSING_DISCHARGE_PLANNINGItem;
		}
		private MenuItem contextMenuUserAssessmentsNURSING_DISCHARGE_PLANNINGItem;
		public MenuItem getUserAssessmentsADD_NEW_BASED_ON_PREVIOUSItem()
		{
			return this.contextMenuUserAssessmentsADD_NEW_BASED_ON_PREVIOUSItem;
		}
		private MenuItem contextMenuUserAssessmentsADD_NEW_BASED_ON_PREVIOUSItem;
		public MenuItem getUserAssessmentsMANCHESTERTRIAGEItem()
		{
			return this.contextMenuUserAssessmentsMANCHESTERTRIAGEItem;
		}
		private MenuItem contextMenuUserAssessmentsMANCHESTERTRIAGEItem;
		public MenuItem getUserAssessmentsEDITItem()
		{
			return this.contextMenuUserAssessmentsEDITItem;
		}
		private MenuItem contextMenuUserAssessmentsEDITItem;
		public MenuItem getUserAssessmentsVIEWItem()
		{
			return this.contextMenuUserAssessmentsVIEWItem;
		}
		private MenuItem contextMenuUserAssessmentsVIEWItem;
		public MenuItem getUserAssessmentsPREVIEWItem()
		{
			return this.contextMenuUserAssessmentsPREVIEWItem;
		}
		private MenuItem contextMenuUserAssessmentsPREVIEWItem;
		public MenuItem getUserAssessmentsMOVE_UPItem()
		{
			return this.contextMenuUserAssessmentsMOVE_UPItem;
		}
		private MenuItem contextMenuUserAssessmentsMOVE_UPItem;
		public MenuItem getUserAssessmentsMOVE_DOWNItem()
		{
			return this.contextMenuUserAssessmentsMOVE_DOWNItem;
		}
		private MenuItem contextMenuUserAssessmentsMOVE_DOWNItem;
		public ReadOnlyMenuItem getUserAssessmentsINTRODUCTORY_PHONE_CALLItem()
		{
			return this.contextMenuUserAssessmentsINTRODUCTORY_PHONE_CALLItem;
		}
		private MenuItem contextMenuUserAssessmentsINTRODUCTORY_PHONE_CALLItem;
		public final class FindingMenu implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 37;
			public static final int Edit = 38;
			public static final int Remove = 39;
			public static final int Clone = 40;
		}
		public void disableAllFindingMenuMenuItems()
		{
			this.contextMenuFindingMenuAddItem.setEnabled(false);
			this.contextMenuFindingMenuEditItem.setEnabled(false);
			this.contextMenuFindingMenuRemoveItem.setEnabled(false);
			this.contextMenuFindingMenuCloneItem.setEnabled(false);
		}
		public void hideAllFindingMenuMenuItems()
		{
			this.contextMenuFindingMenuAddItem.setVisible(false);
			this.contextMenuFindingMenuEditItem.setVisible(false);
			this.contextMenuFindingMenuRemoveItem.setVisible(false);
			this.contextMenuFindingMenuCloneItem.setVisible(false);
		}
		private Menu contextMenuFindingMenu;
		public MenuItem getFindingMenuAddItem()
		{
			return this.contextMenuFindingMenuAddItem;
		}
		private MenuItem contextMenuFindingMenuAddItem;
		public MenuItem getFindingMenuEditItem()
		{
			return this.contextMenuFindingMenuEditItem;
		}
		private MenuItem contextMenuFindingMenuEditItem;
		public MenuItem getFindingMenuRemoveItem()
		{
			return this.contextMenuFindingMenuRemoveItem;
		}
		private MenuItem contextMenuFindingMenuRemoveItem;
		public MenuItem getFindingMenuCloneItem()
		{
			return this.contextMenuFindingMenuCloneItem;
		}
		private MenuItem contextMenuFindingMenuCloneItem;
		public final class Questions implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 41;
			public static final int Edit = 42;
			public static final int Remove = 43;
			public static final int MoveUp = 44;
			public static final int MoveDown = 45;
		}
		public void disableAllQuestionsMenuItems()
		{
			this.contextMenuQuestionsAddItem.setEnabled(false);
			this.contextMenuQuestionsEditItem.setEnabled(false);
			this.contextMenuQuestionsRemoveItem.setEnabled(false);
			this.contextMenuQuestionsMoveUpItem.setEnabled(false);
			this.contextMenuQuestionsMoveDownItem.setEnabled(false);
		}
		public void hideAllQuestionsMenuItems()
		{
			this.contextMenuQuestionsAddItem.setVisible(false);
			this.contextMenuQuestionsEditItem.setVisible(false);
			this.contextMenuQuestionsRemoveItem.setVisible(false);
			this.contextMenuQuestionsMoveUpItem.setVisible(false);
			this.contextMenuQuestionsMoveDownItem.setVisible(false);
		}
		private Menu contextMenuQuestions;
		public MenuItem getQuestionsAddItem()
		{
			return this.contextMenuQuestionsAddItem;
		}
		private MenuItem contextMenuQuestionsAddItem;
		public MenuItem getQuestionsEditItem()
		{
			return this.contextMenuQuestionsEditItem;
		}
		private MenuItem contextMenuQuestionsEditItem;
		public MenuItem getQuestionsRemoveItem()
		{
			return this.contextMenuQuestionsRemoveItem;
		}
		private MenuItem contextMenuQuestionsRemoveItem;
		public MenuItem getQuestionsMoveUpItem()
		{
			return this.contextMenuQuestionsMoveUpItem;
		}
		private MenuItem contextMenuQuestionsMoveUpItem;
		public MenuItem getQuestionsMoveDownItem()
		{
			return this.contextMenuQuestionsMoveDownItem;
		}
		private MenuItem contextMenuQuestionsMoveDownItem;
		public final class Stages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD_STAGE = 46;
			public static final int EDIT_STAGE = 47;
			public static final int REMOVE_STAGE = 48;
		}
		public void disableAllStagesMenuItems()
		{
			this.contextMenuStagesADD_STAGEItem.setEnabled(false);
			this.contextMenuStagesEDIT_STAGEItem.setEnabled(false);
			this.contextMenuStagesREMOVE_STAGEItem.setEnabled(false);
		}
		public void hideAllStagesMenuItems()
		{
			this.contextMenuStagesADD_STAGEItem.setVisible(false);
			this.contextMenuStagesEDIT_STAGEItem.setVisible(false);
			this.contextMenuStagesREMOVE_STAGEItem.setVisible(false);
		}
		private Menu contextMenuStages;
		public MenuItem getStagesADD_STAGEItem()
		{
			return this.contextMenuStagesADD_STAGEItem;
		}
		private MenuItem contextMenuStagesADD_STAGEItem;
		public MenuItem getStagesEDIT_STAGEItem()
		{
			return this.contextMenuStagesEDIT_STAGEItem;
		}
		private MenuItem contextMenuStagesEDIT_STAGEItem;
		public MenuItem getStagesREMOVE_STAGEItem()
		{
			return this.contextMenuStagesREMOVE_STAGEItem;
		}
		private MenuItem contextMenuStagesREMOVE_STAGEItem;
		public final class FindingWithStagesMenu implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 49;
			public static final int REMOVE = 50;
			public static final int COPY = 51;
			public static final int PASTE = 52;
		}
		public void disableAllFindingWithStagesMenuMenuItems()
		{
			this.contextMenuFindingWithStagesMenuADDItem.setEnabled(false);
			this.contextMenuFindingWithStagesMenuREMOVEItem.setEnabled(false);
			this.contextMenuFindingWithStagesMenuCOPYItem.setEnabled(false);
			this.contextMenuFindingWithStagesMenuPASTEItem.setEnabled(false);
		}
		public void hideAllFindingWithStagesMenuMenuItems()
		{
			this.contextMenuFindingWithStagesMenuADDItem.setVisible(false);
			this.contextMenuFindingWithStagesMenuREMOVEItem.setVisible(false);
			this.contextMenuFindingWithStagesMenuCOPYItem.setVisible(false);
			this.contextMenuFindingWithStagesMenuPASTEItem.setVisible(false);
		}
		private Menu contextMenuFindingWithStagesMenu;
		public MenuItem getFindingWithStagesMenuADDItem()
		{
			return this.contextMenuFindingWithStagesMenuADDItem;
		}
		private MenuItem contextMenuFindingWithStagesMenuADDItem;
		public MenuItem getFindingWithStagesMenuREMOVEItem()
		{
			return this.contextMenuFindingWithStagesMenuREMOVEItem;
		}
		private MenuItem contextMenuFindingWithStagesMenuREMOVEItem;
		public MenuItem getFindingWithStagesMenuCOPYItem()
		{
			return this.contextMenuFindingWithStagesMenuCOPYItem;
		}
		private MenuItem contextMenuFindingWithStagesMenuCOPYItem;
		public MenuItem getFindingWithStagesMenuPASTEItem()
		{
			return this.contextMenuFindingWithStagesMenuPASTEItem;
		}
		private MenuItem contextMenuFindingWithStagesMenuPASTEItem;
		public final class LIP implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int New = 53;
			public static final int Update = 54;
		}
		public void disableAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setEnabled(false);
			this.contextMenuLIPUpdateItem.setEnabled(false);
		}
		public void hideAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setVisible(false);
			this.contextMenuLIPUpdateItem.setVisible(false);
		}
		private Menu contextMenuLIP;
		public MenuItem getLIPNewItem()
		{
			return this.contextMenuLIPNewItem;
		}
		private MenuItem contextMenuLIPNewItem;
		public MenuItem getLIPUpdateItem()
		{
			return this.contextMenuLIPUpdateItem;
		}
		private MenuItem contextMenuLIPUpdateItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[111];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ID", "ID_GraphicAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ASSESSMENTTYPE", "AssessmentType");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ACTIVESTATUS", "ActiveStatus");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-HELPURL", "HelpUrl");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-STOREPRINTEDREPORT", "StorePrintedReport");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ASSOCIATEDREPORTFORPRINTING", "AssociatedReportForPrinting");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-ID", "ID_DrawingGraphicFinding");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-DESCRIPTION", "Description");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-DISPLAYTEXT", "DisplayText");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-COLOUR", "Colour");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-ISSINGLEMARK", "IsSingleMark");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-ACTIVESTATUS", "ActiveStatus");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-ID", "ID_QuestionInformation");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-TEXT", "Text");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-SHORTTEXT", "ShortText");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-ISQUESTION", "IsQuestion");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-GENDERSPECIFIC", "GenderSpecific");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-AGERANGEMIN", "AgeRangeMin");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-AGERANGEMAX", "AgeRangeMax");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-STATUS", "Status");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-LEGENDTEXT", "LegendText");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.DrawingGraphicImageVo", "BO-1028100007-ID", "ID_DrawingGraphicImage");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.DrawingGraphicImageVo", "BO-1028100007-IMAGENAME", "ImageName");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.DrawingGraphicImageVo", "BO-1028100007-IMAGEDESCRIPTION", "ImageDescription");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.DrawingGraphicImageVo", "BO-1028100007-VERSIONNUMBER", "VersionNumber");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.DrawingGraphicImageVo", "BO-1028100007-IMAGESTATUS", "ImageStatus");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.ReportTemplateRef", "BO-1004100008-ID", "ID_TemplateBo");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__GraphicAssessmentVo_" + componentIdentifier, "BO-1028100006-ID", "ID_GraphicAssessment");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__GraphicAssessmentVo_" + componentIdentifier, "BO-1028100006-NAME", "Name");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__GraphicAssessmentVo_" + componentIdentifier, "BO-1028100006-ASSESSMENTTYPE", "AssessmentType");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__GraphicAssessmentVo_" + componentIdentifier, "BO-1028100006-ACTIVESTATUS", "ActiveStatus");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__GraphicAssessmentVo_" + componentIdentifier, "BO-1028100006-HELPURL", "HelpUrl");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__GraphicAssessmentVo_" + componentIdentifier, "BO-1028100006-STOREPRINTEDREPORT", "StorePrintedReport");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__GraphicAssessmentVo_" + componentIdentifier, "BO-1028100006-ASSOCIATEDREPORTFORPRINTING", "AssociatedReportForPrinting");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__CurrentStage_" + componentIdentifier, "BO-1083100003-ID", "ID_GraphicAssessmentStage");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__CurrentStage_" + componentIdentifier, "BO-1083100003-ISANNOTATED", "IsAnnotated");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__CurrentStage_" + componentIdentifier, "BO-1083100003-STAGENAME", "StageName");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__CurrentStage_" + componentIdentifier, "BO-1083100003-ISACTIVE", "IsActive");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicAssessmentNew.__internal_x_context__LinkedReport_" + componentIdentifier, "BO-1004100008-ID", "ID_TemplateBo");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
