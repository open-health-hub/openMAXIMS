//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2390.19774)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.findingquestions;
import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.assessment.forms.findingquestions.GenForm.lyrFindingsLayer.tabSearchContainer.GroupCriteriaEnumeration;
import ims.assessment.forms.findingquestions.GenForm.lyrFindingsLayer.tabViewContainer.GroupColourImageEnumeration;
import ims.assessment.forms.findingquestions.GenForm.lyrFindingsLayer.tabViewContainer.GroupRenderStyleEnumeration;
import ims.admin.vo.AppImageVo;
import ims.admin.vo.AppImageVoCollection;
import ims.core.vo.DrawingGraphicFindingQuestionVo;
import ims.core.vo.DrawingGraphicFindingQuestionVoCollection;
import ims.core.vo.DrawingGraphicFindingVo;
import ims.core.vo.DrawingGraphicFindingVoCollection;
import ims.core.vo.QuestionInformationShortVo;
import ims.core.vo.QuestionInformationShortVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.core.vo.lookups.QuestionType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Image;
import ims.utils.textile.Textile;

public class Logic extends BaseLogic
{
	public static final String	COLFINDING			= "0";
	public static final String	COLIMAGECOLOUR		= "1";
	public static final String	COLSTATUS			= "2";
	public static final String	COLSELECT			= "3";

	public static final String	COLICONQUESTION		= "0";
	public static final String	COLQUESTION			= "1";
	public static final String	COLSHORTEXT			= "2";
	public static final String	COLQUESTIONSELECT	= "3";
	public static final String	COLQUESTIONSTATUS	= "4";

	public static final String	CR					= "\n";

	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		prePopulateColorCmb();
		setDefaultContextMenu();
		enableContextMenu();
		initialiseScreen();
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Admin.ImageSelectDialog) && result.equals(DialogResult.OK))
		{
			AppImageVo voAppImage = form.getGlobalContext().Admin.getSelectedImage();
			form.lyrFindings().tabView().qmbImage().clear();
			setImage(voAppImage);
		}
		if (formName.equals(form.getForms().Core.QuestionSelectNew) && result.equals(DialogResult.OK))
		{
			QuestionInformationShortVoCollection voQInfoColl = form.getGlobalContext().Admin.getSelectedQuestions();
			for (int i = 0; voQInfoColl != null && i < voQInfoColl.size(); i++)
			{
				if (voQInfoColl.get(i).getStatusIsNotNull() && voQInfoColl.get(i).getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE)) // WDEV-11647
				{
					DynamicGridRow row = getCurrentQuestionRow(voQInfoColl.get(i));
					DrawingGraphicFindingQuestionVo voDGFindingQuestion = getRowValue(row);
					if (voDGFindingQuestion == null)
					{
						voDGFindingQuestion = new DrawingGraphicFindingQuestionVo();
						voDGFindingQuestion.setActive(new Boolean(true));
					}
					voDGFindingQuestion.setQuestion(voQInfoColl.get(i));
					setAssociatedQuestion(row, voDGFindingQuestion);
				} else {
					displayQuestions(form.getLocalContext().getVoDrawingGraphicFinding()); 	// WDEV-11647
				}
			}
		}
	}

	private DynamicGridRow getCurrentQuestionRow(QuestionInformationShortVo voQInfoShort)
	{
		DynamicGridRow row = null;
		for (int i = 0; i < form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().size(); i++)
		{
			DrawingGraphicFindingQuestionVo voDGFinding = getRowValue(form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().get(i));
			if (voDGFinding != null && voDGFinding.getQuestionIsNotNull() && voDGFinding.getQuestion().equals(voQInfoShort))
				return form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().get(i);
		}

		if (row == null)
		{
			row = form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().newRow();
			//Check to see if we have the same question in an inactive DrawingGraphicFindingQuestionVo
			DrawingGraphicFindingQuestionVo voDGFindingQuestion = getInactiveRecord(voQInfoShort);
			if (voDGFindingQuestion != null)
				row.setValue(voDGFindingQuestion);
		}

		return row;
	}

	//Gets the inactive record that have the associated question passed by parameter
	private DrawingGraphicFindingQuestionVo getInactiveRecord(QuestionInformationShortVo voQInfoShort)
	{
		DrawingGraphicFindingQuestionVoCollection voColl = form.getLocalContext().getInactiveFindingQuestions();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if (voColl.get(i).getQuestionIsNotNull() && voColl.get(i).getQuestion().equals(voQInfoShort))
			{
				DrawingGraphicFindingQuestionVo voDrawingGraphicFindingQuestion = voColl.get(i);
				voColl.remove(voDrawingGraphicFindingQuestion);
				form.getLocalContext().setInactiveFindingQuestions(voColl);
				return voDrawingGraphicFindingQuestion;
			}
		}

		return null;
	}

	private DrawingGraphicFindingQuestionVo getRowValue(DynamicGridRow row)
	{
		if (row != null)
		{
			Object value = row.getValue();
			return value instanceof DrawingGraphicFindingQuestionVo ? (DrawingGraphicFindingQuestionVo) value : null;
		}

		return null;
	}

	protected void onImbClearFindingsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrFindings().tabSearch().txtSearch().setValue("");
		clearDynamicGrid();
		//WDEV-16281 
		enableSelectBtn(false);
		enableContextMenu();//WDEV-17877
	}

	protected void onImbSearchFindingClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-16281 
		enableSelectBtn(false);
		search();
		enableContextMenu();//WDEV-17877
	}

	private void search()
	{
		clearDynamicGrid();

		String findingName = form.lyrFindings().tabSearch().txtSearch().getValue();
		findingName = findingName != null ? findingName.trim() : null;

		if (findingName != null)
		{
			GroupCriteriaEnumeration criteria = form.lyrFindings().tabSearch().GroupCriteria().getValue();
			if (criteria.equals(GroupCriteriaEnumeration.rdoBeginsWith))
				findingName += '%';

			if (criteria.equals(GroupCriteriaEnumeration.rdoContains))
				findingName = '%' + findingName + '%';
		}
		
		DrawingGraphicFindingVoCollection voColl = domain.listFindings(findingName, isDialog() ? PreActiveActiveInactiveStatus.ACTIVE : null);

		if (voColl == null || voColl.size() == 0)
		{
			engine.showMessage("No findings found for the Search Criteria Provided");
		}

		displayListedFindings(voColl);
	}

	private void initialiseListDynamicGrid()
	{
		DynamicGridColumn colFinding 	 = null;
		DynamicGridColumn colImageColour = null;
		DynamicGridColumn colStatus 	 = null;
		DynamicGridColumn colSelect		 = null;
		int colSelectSize = isPageView() ? 0 : 100;

		if (isPageView())
		{
			colFinding = form.lyrFindings().tabSearch().lyrFindingSearch().tabPageView().dyngrdFinding().getColumns().newColumn("Finding Name", COLFINDING);
			colImageColour = form.lyrFindings().tabSearch().lyrFindingSearch().tabPageView().dyngrdFinding().getColumns().newColumn("Colour/Image", COLIMAGECOLOUR);
			colStatus = form.lyrFindings().tabSearch().lyrFindingSearch().tabPageView().dyngrdFinding().getColumns().newColumn("Status", COLSTATUS);

			colStatus.setWidth(-1);
		}
		else
		{
			colFinding = form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getColumns().newColumn("Finding Name", COLFINDING);
			colImageColour = form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getColumns().newColumn("Colour/Image", COLIMAGECOLOUR);
			colStatus = form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getColumns().newColumn("Status", COLSTATUS);
			colSelect = form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getColumns().newColumn("Select", COLSELECT);

			colStatus.setWidth(250 - colSelectSize);
			colSelect.setAlignment(Alignment.CENTER);
			colSelect.setWidth(-1);
			colSelect.setAlignment(Alignment.CENTER);
			colSelect.setHeaderAlignment(Alignment.CENTER);
		}

		colFinding.setWidth(450 - colSelectSize);
		colImageColour.setWidth(250 - colSelectSize);
	}

	private void initialiseQuestionDynamicGrid()
	{
		int selectSize = isDialog() ? 100 : 0;
		DynamicGridColumn colIcon = form.lyrFindings().tabView().dyngrdAssocQuestions().getColumns().newColumn(" ", COLICONQUESTION);
		colIcon.setWidth(25);
		colIcon.setCanGrow(false);

		DynamicGridColumn colQuestion = form.lyrFindings().tabView().dyngrdAssocQuestions().getColumns().newColumn("Question", COLQUESTION);
		colQuestion.setWidth(450 - selectSize);

		DynamicGridColumn colShortText = form.lyrFindings().tabView().dyngrdAssocQuestions().getColumns().newColumn("Long Text", COLSHORTEXT);
		colShortText.setWidth(300 - selectSize);

		DynamicGridColumn colStatus = form.lyrFindings().tabView().dyngrdAssocQuestions().getColumns().newColumn("Status", COLQUESTIONSTATUS);
		colStatus.setWidth(isDialog() ? 225 - selectSize : -1);
		
		DynamicGridColumn coSelect = form.lyrFindings().tabView().dyngrdAssocQuestions().getColumns().newColumn("Select", COLQUESTIONSELECT);
		coSelect.setWidth(isDialog() ? -1 : 0);
		coSelect.setAlignment(Alignment.CENTER);
		coSelect.setHeaderAlignment(Alignment.CENTER);
	}

	private void clearDynamicGrid()
	{
		if (isDialog())
		{
			form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getRows().clear();
		}
		else
		{
			form.lyrFindings().tabSearch().lyrFindingSearch().tabPageView().dyngrdFinding().getRows().clear();
		}
	}

	protected void onDyngrdFindingRowSelectionChanged(DynamicGridRow row)
	{
		enableContextMenu();
	}

	protected void onDyngrdSelectRowSelectionChanged(DynamicGridRow row)
	{
		enableContextMenu();
	}

	protected void onDyngrdSelectCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getType().equals(DynamicCellType.BOOL))
		{
			Object objVal = cell.getValue();
			if (objVal instanceof Boolean)
			{
				if (((Boolean) objVal).booleanValue())
				{
					deselectCells(cell);
					enableSelectBtn(true);
				}
				else
				{
					enableSelectBtn(false);
				}
			}
		}
	}

	private void enableSelectBtn(boolean enabled)
	{
		form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().btnSelect().setEnabled(enabled);
	}

	/**
	 * @param cellToSkip
	 */
	private void deselectCells(DynamicGridCell cellToSkip)
	{
		//Deselect the other rows
		for (int i = 0; i < form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getRows().size(); i++)
		{
			DynamicGridCell dynamicGridCell = form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getRows().get(i).getCells().get(getDynamicColumn(COLSELECT));
			if (dynamicGridCell != null && dynamicGridCell.equals(cellToSkip) == false)
				dynamicGridCell.setValue(new Boolean(false));
		}
	}

	protected void onRadioButtonGroupColourImageValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		enableColourImgControls();
		setDefaultColourImgValue();
	}

	protected void onGrdAssocQuestionsSelectionChanged()
	{
		enableContextMenu();
	}

	protected void onDyngrdAssocQuestionsRowSelectionChanged(DynamicGridRow row)
	{
		enableContextMenu();
	}

	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			if (isDialog())
			{
				enableUpdateBtn(false);
				enableSaveCancelBtn(true);
			}
			else
			{
				enableUpdateBtn(true);
				enableSaveCancelBtn(false);
			}
		}

		if (form.getMode().equals(FormMode.EDIT))
		{
			//if (isStatusActiveOrInactive())
				removePreactiveOrActiveLookup();
		}

		enableReturnToList();
		enableControls();
		enableContextMenu();
	}

	private void enableReturnToList()
	{
		boolean newRecord = isNewRecord();
		form.lnkReturnToList().setVisible(newRecord == false && form.getMode().equals(FormMode.VIEW));
	}

	/*	protected void onlyrFindingsTabChanged(LayerBridge tab)
	 {
	 if (tab.equals(form.lyrFindings().tabView()))
	 {
	 clearFindingControls();

	 DrawingGraphicFindingVo voDrawGraphicFinding = form.lyrFindings().tabSearch().grdFindingSearch().getValue();
	 //form.getLocalContext().setVoDrawingGraphicFindingQuestion(voDrawGraphicFindingQuestion);
	 form.getLocalContext().setVoDrawingGraphicFinding(voDrawGraphicFinding);

	 setRdoImgColourState(voDrawGraphicFinding);
	 displayFinding(voDrawGraphicFinding);
	 displayQuestions(voDrawGraphicFinding);
	 }
	 }*/

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		if (sender.equals(form.lyrFindings().tabView().dyngrdAssocQuestions()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add :
					addQuestion();
				break;

				case GenForm.ContextMenus.GenericGrid.Update :
					editQuestion();
				break;

				case GenForm.ContextMenus.GenericGrid.Remove :
					removeQuestions();
				break;

				case GenForm.ContextMenus.GenericGrid.View :
					viewQuestion();
				break;

				case GenForm.ContextMenus.GenericGrid.MoveUp :
					moveUp();
				break;

				case GenForm.ContextMenus.GenericGrid.MoveDown :
					moveDown();
				break;
			}
		}

		if (sender.equals(form.lyrFindings().tabSearch().lyrFindingSearch().tabPageView().dyngrdFinding()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.DrawingConfig.NEW :
					addFinding();
				break;

				case GenForm.ContextMenus.DrawingConfig.EDIT :
					editFinding();
				break;

				case GenForm.ContextMenus.DrawingConfig.VIEW :
					editFinding(FormMode.VIEW);
				break;
			}
		}
	}

	protected void onQmbImageTextSubmited(String value) throws PresentationLogicException
	{
		AppImageVo filter = new AppImageVo();
		filter.setImagePath(form.lyrFindings().tabView().qmbImage().getEditedText());

		AppImageVoCollection voColl = domain.listImages(filter);
		form.lyrFindings().tabView().qmbImage().clear();

		if (voColl != null)
		{
			for (int i = 0; i < voColl.size(); i++)
			{
				form.lyrFindings().tabView().qmbImage().newRow(voColl.get(i), voColl.get(i).getImagePath());
			}

			if (voColl.size() > 1)
			{
				form.lyrFindings().tabView().qmbImage().showOpened();
			}
			else if (voColl.size() == 1)
			{
				form.lyrFindings().tabView().qmbImage().setValue(voColl.get(0));
				setSelContextImage(voColl.get(0));
				onQmbImageValueChanged();
			}
		}
	}

	protected void onQmbImageValueChanged() throws PresentationLogicException
	{
		imageValueChanged();
	}

	private void imageValueChanged()
	{
		AppImageVo appImageVo = form.lyrFindings().tabView().qmbImage().getValue();
		if (appImageVo != null)
		{
			setImagePickerValue(engine.getRegisteredImage(appImageVo.getID_AppImage().intValue()));
		}
		else
		{
			setDefaultImagePickerValue();
		}
		setSelContextImage(appImageVo);
	}

	private void setImagePickerValue(Image image)
	{
		form.lyrFindings().tabView().imbImagePicker().setEnabledImage(image);
		form.lyrFindings().tabView().imbImagePicker().setDisabledImage(image);

	}

	protected void onImbImagePickerClick() throws PresentationLogicException
	{
		setSelContextImage(form.lyrFindings().tabView().qmbImage().getValue());
		engine.open(form.getForms().Admin.ImageSelectDialog);
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		setFormMode(FormMode.EDIT);
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		if (isDialog())
		{
			engine.close(DialogResult.CANCEL);
			return;
		}

		if (isNewRecord() == false)
		{
			refreshFindings();
		}
		else
		{
			returnToList();
		}
	}

	/**
	 * @return
	 */
	private boolean isNewRecord()
	{
		return form.getLocalContext().getVoDrawingGraphicFinding() == null || form.getLocalContext().getVoDrawingGraphicFinding().getID_DrawingGraphicFinding() == null;
	}

	private boolean isNewRecordAdded()
	{
		return form.getLocalContext().getIsNewIsNotNull() && form.getLocalContext().getIsNew().booleanValue();
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (isDialog())
		{
			//Select the questions
			QuestionInformationShortVoCollection voColl = new QuestionInformationShortVoCollection();
			for (int i = 0; i < form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().size(); i++)
			{
				DynamicGridCell cellSelect = form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().get(i).getCells().get(getQuestionDynColumn(COLQUESTIONSELECT));
				if (cellSelect != null)
				{
					Object objValue = cellSelect.getValue();
					if (objValue instanceof Boolean && ((Boolean) (objValue)).booleanValue())
					{
						Object value = form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().get(i).getValue();
						if (value != null && value instanceof DrawingGraphicFindingQuestionVo)
						{
							DrawingGraphicFindingQuestionVo voDGFindingQuestion = (DrawingGraphicFindingQuestionVo) value;
							if (voDGFindingQuestion.getQuestionIsNotNull())
								voColl.add(voDGFindingQuestion.getQuestion());
						}
					}
				}
			}
			form.getGlobalContext().Admin.setSelectedQuestions(voColl);
			engine.close(DialogResult.OK);
		}
		else
		{
			if (save() == false)
				return;
			refreshFindings();
		}
	}

	private void refreshFindings()
	{
		clearFindingControls();
		DrawingGraphicFindingVo voDrawingGraphicFinding = form.getLocalContext().getVoDrawingGraphicFinding();
		displayFinding(voDrawingGraphicFinding);
		displayQuestions(voDrawingGraphicFinding);
		setFormMode(FormMode.VIEW);
	}

	protected void onBtnSelectClick() throws PresentationLogicException
	{
		selectFinding();
	}

	protected void onBtnCancelSelectClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		returnToList();
		
	}

	// --------------------- Private methods ----------------------------------
	private void prePopulateColorCmb()
	{
		Color[] ca = Color.getColors();
		for (int i = 0; i < ca.length; i++)
			form.lyrFindings().tabView().cmbColor().newRow(ca[i], ca[i].getName(), ca[i].getImage());
	}

	private void addQuestion()
	{
		setQuestionType(QuestionType.FINDING);
		form.getGlobalContext().Core.setQuestionFormMode(null);
		engine.open(form.getForms().Core.QuestionSelectNew, "Finding Questions - Add Question");
	}

	private void editQuestion()
	{
		if (getSelectedQuestion() == false)
			return;

		setQuestionType(QuestionType.FINDING);
		form.getGlobalContext().Core.setQuestionFormMode(FormMode.EDIT);
		engine.open(form.getForms().Core.QuestionSelectNew, "Finding Questions - Edit Question");
	}

	private void removeQuestions()
	{
		DynamicGridRow row = form.lyrFindings().tabView().dyngrdAssocQuestions().getSelectedRow();
		if (row != null)
		{
			DrawingGraphicFindingQuestionVoCollection voColl = form.getLocalContext().getInactiveFindingQuestions();
			DrawingGraphicFindingQuestionVo voDGFinding = getRowValue(row);

			if (voDGFinding != null && voDGFinding.getID_DrawingGraphicFindingQuestionIsNotNull())
			{
				if (voColl == null)
					voColl = new DrawingGraphicFindingQuestionVoCollection();
				
				//WDEV-1213 
				voDGFinding.setActive(new Boolean(false));
				int index = voColl.indexOf(voDGFinding);
				if ( index < 0 )
					voColl.add(voDGFinding);
				else
					voColl.set(index, voDGFinding);
			}
			else
			{
				//WDEV-1213 
				if (voColl != null && voColl.indexOf(voDGFinding) >= 0)
					voColl.remove(voDGFinding);
			}

			form.getLocalContext().setInactiveFindingQuestions(voColl);
			form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().remove(row);
		}
		enableContextMenu();
	}

	private void viewQuestion()
	{
		if (getSelectedQuestion() == false)
			return;

		setQuestionType(QuestionType.FINDING);
		form.getGlobalContext().Core.setQuestionFormMode(FormMode.VIEW);
		engine.open(form.getForms().Core.QuestionSelectNew);
	}

	private void moveDown()
	{
		DynamicGridRow row = form.lyrFindings().tabView().dyngrdAssocQuestions().getSelectedRow();
		if (row != null)
			row.moveDown();
		enableContextMenu();
	}

	private void moveUp()
	{
		DynamicGridRow row = form.lyrFindings().tabView().dyngrdAssocQuestions().getSelectedRow();
		if (row != null)
			row.moveUp();
		enableContextMenu();
	}

	private boolean getSelectedQuestion()
	{
		QuestionInformationShortVo voQInfoShort = getQuestionFromGridRow(form.lyrFindings().tabView().dyngrdAssocQuestions().getSelectedRow());
		if (voQInfoShort == null)
		{
			engine.showMessage("Please select an associated question");
			return false;
		}
		form.getGlobalContext().Core.setSelectedQuestion(voQInfoShort);

		return true;
	}

	private QuestionInformationShortVo getQuestionFromGridRow(DynamicGridRow row)
	{
		if (row != null)
		{
			DrawingGraphicFindingQuestionVo voDGFindingQuestion = getRowValue(row);
			return (QuestionInformationShortVo) (voDGFindingQuestion != null ? voDGFindingQuestion.getQuestion().clone() : null);
		}
		return null;
	}

	private void setQuestionType(QuestionType questionType)
	{
		form.getGlobalContext().Core.setQuestionType(questionType);
	}

	private void addFinding()
	{
		clearFindingControls();
		
		form.getLocalContext().setVoDrawingGraphicFinding(new DrawingGraphicFindingVo());
		form.getLocalContext().setIsNew(new Boolean(true));
		form.getLocalContext().setInactiveFindingQuestions(null);
		
		setDefaultControlData();
		enableColourImgControls();
		setDefaultColourImgValue();
		enableFindingsTab(true);
		enableSearchTab(false);
		showTabView();
		enableReturnToList();

		if (isDialog() == false)
			setFormMode(FormMode.EDIT);
	}

	/**
	 * 
	 */
	private void setDefaultControlData()
	{
		form.lyrFindings().tabView().txtFinding().setFocus();
		form.lyrFindings().tabView().GroupColourImage().setValue(GroupColourImageEnumeration.rdoColouredLine);
		form.lyrFindings().tabView().cmbStatus().setValue(PreActiveActiveInactiveStatus.PREACTIVE);
		form.lyrFindings().tabView().txtFinding().setValue(form.lyrFindings().tabSearch().txtSearch().getValue());
	}

	private void editFinding()
	{
		form.getLocalContext().setIsNew(new Boolean(false));
		editFinding(FormMode.EDIT);
	}

	private void editFinding(FormMode formMode)
	{
		form.getLocalContext().setIsNew(new Boolean(false));
		DrawingGraphicFindingVo voDrawingGraphic = (DrawingGraphicFindingVo) getSelectedFinding();
		form.getLocalContext().setVoDrawingGraphicFinding(voDrawingGraphic);
		clearFindingControls();

		displayFinding(voDrawingGraphic);
		displayQuestions(voDrawingGraphic);
		enableFindingsTab(true);
		enableSearchTab(false);
		enableColourImgControls();
		showTabView();
		enableReturnToList();

		if (isDialog() == false)
			setFormMode(formMode);
	}

	private DrawingGraphicFindingVo getSelectedFinding()
	{
		if (isPageView())
		{
			Object objValue = form.lyrFindings().tabSearch().lyrFindingSearch().tabPageView().dyngrdFinding().getValue();
			if (objValue instanceof DrawingGraphicFindingVo)
				return (DrawingGraphicFindingVo) objValue;
		}
		else
		{
			Object objValue = null;
			for (int i = 0; i < form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getRows().size(); i++)
			{
				DynamicGridCell selectCell = form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getRows().get(i).getCells().get(getDynamicColumn(COLSELECT));
				if (isCellSelected(selectCell))
				{
					objValue = form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getRows().get(i).getValue();
					break;
				}
			}
			if (objValue instanceof DrawingGraphicFindingVo)
				return (DrawingGraphicFindingVo) objValue;
		}

		return null;
	}

	private boolean isCellSelected(DynamicGridCell selectCell)
	{
		if (selectCell != null)
		{
			Object val = selectCell.getValue();
			if (val != null && val instanceof Boolean)
			{
				return ((Boolean) (val)).booleanValue();
			}
		}

		return false;
	}

	/**
	 * @return if the View tab is visible (false if Tab Search is visible)
	 */
	private boolean isPageView()
	{
		//return form.lyrFindings().tabSearch().lyrFindingSearch().tabPageView().isHeaderEnabled();
		return !isDialog();
	}

	private void selectFinding()
	{
		form.getGlobalContext().Core.setSelectedDrawingGraphicFindingVo(getSelectedFinding());
		editFinding(FormMode.VIEW);
	}

	private void clearFindingControls()
	{
		form.lyrFindings().tabView().txtFinding().setValue("");
		form.lyrFindings().tabView().txtDescription().setValue("");
		form.lyrFindings().tabView().cmbStatus().setValue(null);
		form.lyrFindings().tabView().cmbColor().setValue(null);
		form.lyrFindings().tabView().qmbImage().clear();
		setRenderStyleValue(GroupRenderStyleEnumeration.None);
		form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().clear();
	}

	private void displayFinding(DrawingGraphicFindingVo voDrawGraphicFinding)
	{
		if (voDrawGraphicFinding != null)
		{
			form.lyrFindings().tabView().txtFinding().setValue(voDrawGraphicFinding.getDisplayText());
			form.lyrFindings().tabView().txtDescription().setValue(voDrawGraphicFinding.getDescription());
			form.lyrFindings().tabView().cmbStatus().setValue(voDrawGraphicFinding.getActiveStatus());
			if (voDrawGraphicFinding.getImageIsNotNull())
				form.lyrFindings().tabView().GroupColourImage().setValue(GroupColourImageEnumeration.rdoImage);
			else
				form.lyrFindings().tabView().GroupColourImage().setValue(GroupColourImageEnumeration.rdoColouredLine);

			setImage(voDrawGraphicFinding.getImage());
			form.lyrFindings().tabView().cmbColor().setValue(voDrawGraphicFinding.getColour());

			if (voDrawGraphicFinding.getIsSingleMarkIsNotNull())
			{
				if (voDrawGraphicFinding.getIsSingleMark().booleanValue())
					setRenderStyleValue(GroupRenderStyleEnumeration.rdoSingleImage);
				else
					setRenderStyleValue(GroupRenderStyleEnumeration.rdoMultipleImages);
			}
			else
			{
				setRenderStyleValue(GroupRenderStyleEnumeration.None);
			}
		}
	}

	private void displayQuestions(DrawingGraphicFindingVo voDrawGraphicFinding)
	{
		form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().clear();
		
		DrawingGraphicFindingQuestionVoCollection voInactiveFindingQuestionColl = null;
		if (voDrawGraphicFinding != null && voDrawGraphicFinding.getID_DrawingGraphicFindingIsNotNull())
		{
			DrawingGraphicFindingQuestionVoCollection voColl = domain.listDrawingGraphicFindings(voDrawGraphicFinding.getID_DrawingGraphicFinding());
			if (voColl != null)
			{
				for (int i = 0; i < voColl.size(); i++)
				{
					DrawingGraphicFindingQuestionVo voDGFQ = voColl.get(i);
					if (voDGFQ.getQuestionIsNotNull())
					{
						if (voDGFQ.getActiveIsNotNull() && voDGFQ.getActive().booleanValue())
						{
							DynamicGridRow row = form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().newRow();
							setAssociatedQuestion(row, voDGFQ);		
						}
						else
						{
							if (voInactiveFindingQuestionColl == null)
								voInactiveFindingQuestionColl = new DrawingGraphicFindingQuestionVoCollection();
							voInactiveFindingQuestionColl.add(voDGFQ);
						}
					}
				}
			}
		}

		form.getLocalContext().setInactiveFindingQuestions(voInactiveFindingQuestionColl);

	}

/*	// TODO - revise that
	private DrawingGraphicFindingQuestionVoCollection getDrawingGraphicFindingsColl(DrawingGraphicFindingVoCollection collection)
	{
		DrawingGraphicFindingQuestionVoCollection voColl = new DrawingGraphicFindingQuestionVoCollection();
		for (int i = 0; collection != null && i < collection.size(); i++)
		{
			DrawingGraphicFindingQuestionVo voGraphicFinding = new DrawingGraphicFindingQuestionVo();
			voGraphicFinding.setDrawingGraphicFinding(collection.get(i));
			voColl.add(voGraphicFinding);
		}
		return voColl;
	}*/

	private void setAssociatedQuestion(DynamicGridRow row, DrawingGraphicFindingQuestionVo voDGFQ)
	{
		if (row != null)
		{
			QuestionInformationShortVo voQInfo = voDGFQ.getQuestion();
			row.setValue(voDGFQ);
			row.setExpanded(true);

			DynamicGridCell cellIcon = row.getCells().get(getQuestionDynColumn(COLICONQUESTION));
			if (cellIcon == null)
				cellIcon = row.getCells().newCell(getQuestionDynColumn(COLICONQUESTION), DynamicCellType.IMAGE);
			cellIcon.setValue(form.getImages().Core.QuestionSmall);

			DynamicGridCell cellQuestion = row.getCells().get(getQuestionDynColumn(COLQUESTION));
			if (cellQuestion == null)
				cellQuestion = row.getCells().newCell(getQuestionDynColumn(COLQUESTION), DynamicCellType.STRING);
			cellQuestion.setReadOnly(true);
			
			DynamicGridCell cellShortText = row.getCells().get(getQuestionDynColumn(COLSHORTEXT));
			if (cellShortText == null)
				cellShortText = row.getCells().newCell(getQuestionDynColumn(COLSHORTEXT), DynamicCellType.STRING);
			cellShortText.setReadOnly(true);

			DynamicGridCell cellStatus = row.getCells().get(getQuestionDynColumn(COLQUESTIONSTATUS));
			if (cellStatus == null)
				cellStatus = row.getCells().newCell(getQuestionDynColumn(COLQUESTIONSTATUS), DynamicCellType.STRING);
			cellStatus.setReadOnly(true);
			
			if (voQInfo != null)
			{
				cellQuestion.setValue(voQInfo.getShortText());
				cellQuestion.setTooltip(voQInfo.getTooltip());
				cellShortText.setValue(voQInfo.getText());
				cellStatus.setValue(voQInfo.getStatusIsNotNull()?voQInfo.getStatus().toString():"");
				cellShortText.setTooltip(voQInfo.getTooltip());
			}

			if (isDialog())
			{
				DynamicGridCell cellQuestionSelect = row.getCells().get(getQuestionDynColumn(COLQUESTIONSELECT));
				if (cellQuestionSelect == null)
					cellQuestionSelect = row.getCells().newCell(getQuestionDynColumn(COLQUESTIONSELECT), DynamicCellType.BOOL);
			}
		}
	}

	private DynamicGridColumn getQuestionDynColumn(String identifier)
	{
		return form.lyrFindings().tabView().dyngrdAssocQuestions().getColumns().getByIdentifier(identifier);
	}

	private void setImage(AppImageVo image)
	{
		if (image != null)
		{
			if (form.lyrFindings().tabView().qmbImage().getValues().indexOf(image) < 0)
				form.lyrFindings().tabView().qmbImage().newRow(image, image.getImagePath());
			form.lyrFindings().tabView().qmbImage().setValue(image);
			setImagePickerValue(engine.getRegisteredImage(image.getID_AppImage().intValue()));
		}
		setSelContextImage(image);
	}

	private void setSelContextImage(AppImageVo image)
	{
		form.getGlobalContext().Admin.setSelectedImage(image);
	}

	private void displayListedFindings(DrawingGraphicFindingVoCollection voColl)
	{
		if(voColl == null)
			return;
		
		DynamicGridColumn colFinding = getDynamicColumn(COLFINDING);
		DynamicGridColumn colImageColour = getDynamicColumn(COLIMAGECOLOUR);
		DynamicGridColumn colStatus = getDynamicColumn(COLSTATUS);
		DynamicGridColumn colSelect = getDynamicColumn(COLSELECT);

		for (int i = 0; i < voColl.size(); i++)
		{
			DrawingGraphicFindingVo voDrawingGraphicFinding = voColl.get(i);
			String rowTooltip = getRowTooltip(voDrawingGraphicFinding);
			if (voDrawingGraphicFinding != null)
			{
				//Row
				DynamicGridRow row = getNewDynamicGridRow();
				if (isDialog())
					row.setSelectable(false);
				row.setValue(voDrawingGraphicFinding);
				row.setReadOnly(form.getMode().equals(FormMode.EDIT));

				//Finding
				DynamicGridCell cellFinding = row.getCells().get(colFinding);
				if (cellFinding == null)
					cellFinding = row.getCells().newCell(colFinding, DynamicCellType.STRING);

				cellFinding.setValue(voDrawingGraphicFinding.getDisplayText());
				cellFinding.setTooltip(rowTooltip);
				
				if ( isDialog()) //wdev-15448
					cellFinding.setReadOnly(true);
					

				//ImageColour
				DynamicGridCell cellImageColour = row.getCells().get(colImageColour);
				if (voDrawingGraphicFinding.getImageIsNotNull())
				{
					if (cellImageColour == null || cellImageColour.getType().equals(DynamicCellType.STRING))
						cellImageColour = row.getCells().newCell(colImageColour, DynamicCellType.IMAGE);
					cellImageColour.setValue(engine.getRegisteredImage(voDrawingGraphicFinding.getImage().getID_AppImage().intValue()));
				}
				else
				{
					if (cellImageColour == null || cellImageColour.getType().equals(DynamicCellType.IMAGE))
						cellImageColour = row.getCells().newCell(colImageColour, DynamicCellType.STRING);

					cellImageColour.setValue("Line");
					cellImageColour.setTextColor(voDrawingGraphicFinding.getColour());
				}
				cellImageColour.setTooltip(rowTooltip);
				if( isDialog()) //wdev-15448
					cellImageColour.setReadOnly(true);	
				//Status
				DynamicGridCell cellStatus = row.getCells().get(colStatus);
				if (cellStatus == null)
					cellStatus = row.getCells().newCell(colStatus, DynamicCellType.STRING);
				cellStatus.setValue(voDrawingGraphicFinding.getActiveStatusIsNotNull() ? voDrawingGraphicFinding.getActiveStatus().toString() : "");
				cellStatus.setTooltip(rowTooltip);
				
				if ( isDialog()) //wdev-15448
					cellStatus.setReadOnly(true);

				//Select
				if (colSelect != null)
				{
					DynamicGridCell cellSelect = row.getCells().get(colSelect);
					if (cellSelect == null)
						cellSelect = row.getCells().newCell(colSelect, DynamicCellType.BOOL);
					cellSelect.setReadOnly(false);
					cellSelect.setAutoPostBack(true);
					cellSelect.setTooltip(rowTooltip);
				}
			}
		}
	}

	private String getRowTooltip(DrawingGraphicFindingVo voDrawingGraphicFinding)
	{
		if (voDrawingGraphicFinding != null)
		{
			StringBuffer sb = new StringBuffer();
			if (voDrawingGraphicFinding.getDescriptionIsNotNull())
			{
				sb.append("*Description: *");
				sb.append(voDrawingGraphicFinding.getDescription());
				sb.append(CR);
			}

			if (voDrawingGraphicFinding.getImageIsNotNull())
			{
				sb.append("*Image: *");
				sb.append(voDrawingGraphicFinding.getImage().getImagePath());
				sb.append(CR);
			}
			if (voDrawingGraphicFinding.getColourIsNotNull())
			{
				sb.append("*Colour: *");
				sb.append("\r");
				String colour = voDrawingGraphicFinding.getColour().getName();
				sb.append("p{color:" + colour + "}. " + colour);
				sb.append(CR);
			}

			return new Textile().process(sb.toString());
		}
		return null;
	}

	private DynamicGridColumn getDynamicColumn(String identifier)
	{
		if (isPageView())
		{
			return form.lyrFindings().tabSearch().lyrFindingSearch().tabPageView().dyngrdFinding().getColumns().getByIdentifier(identifier);
		}

		return form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getColumns().getByIdentifier(identifier);
	}

	private DynamicGridRow getNewDynamicGridRow()
	{
		if (isPageView())
		{
			return form.lyrFindings().tabSearch().lyrFindingSearch().tabPageView().dyngrdFinding().getRows().newRow();
		}

		return form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().getRows().newRow();
	}

	private boolean save()
	{
		DrawingGraphicFindingVo voDGFsaved = saveDrawingGraphicFinding();
		if (voDGFsaved == null)
			return false;

		//DrawingGraphicFindingQuestionVo voDrawingGraphicFinding = form.getLocalContext().getVoDrawingGraphicFindingQuestion();
		//Save the finding to the rest of Drawing Grapgic Finding Question
		//--------------------------------------------------------------------------------------------
		form.getLocalContext().setInactiveFindingQuestions( refreshInactiveFindingQuestions(voDGFsaved));
		//----------------------------------------------------------------------------------------------
		DrawingGraphicFindingQuestionVoCollection voColl = getDrawingGraphicFindingFromGrid(voDGFsaved);

		String[] activeErrors = validateActiveErrors(voColl);
		String[] errors = voColl.validate(activeErrors);
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			domain.saveDrawingGraphicFindings(voColl);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}

		return true;
	}
	//---------------------
	private DrawingGraphicFindingQuestionVoCollection refreshInactiveFindingQuestions(DrawingGraphicFindingVo voDrawGraphicFinding)
	{
		
		DrawingGraphicFindingQuestionVoCollection voColl = form.getLocalContext().getInactiveFindingQuestions();
		if (voColl == null)
			return null;
		for(DrawingGraphicFindingQuestionVo temp: voColl)
		{
			temp.setDrawingGraphicFinding(voDrawGraphicFinding);
		}
		return voColl;
	}
	//---------------------
	private String[] validateActiveErrors(DrawingGraphicFindingQuestionVoCollection voColl)
	{
		if(voColl == null)
			return null;
		ArrayList errors = new ArrayList();
		for(int i = 0; i < voColl.size(); i++)
		{
			DrawingGraphicFindingQuestionVo voDGFQ   = voColl.get(i);
			DrawingGraphicFindingVo voDGFinding      = voDGFQ.getDrawingGraphicFinding();
			QuestionInformationShortVo voQInforShort = voDGFQ.getQuestion();
			
			//WDEV-1213 - Don't allow the inactive to be checked
			if(voDGFQ.getActiveIsNotNull() && voDGFQ.getActive().booleanValue() && voDGFinding != null)
			{
				if(voDGFinding.getActiveStatusIsNotNull() && voDGFinding.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
				{
					//Question
					if(voQInforShort != null && voQInforShort.getStatusIsNotNull() && !voQInforShort.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
					{
						errors.add("'" + voQInforShort.getText() + "' question has to be active");
					}
				}
			}
		}
		
		if (errors.size() == 0)
			return null;

		String[] findingErrors = new String[errors.size()];
		errors.toArray(findingErrors);

		return findingErrors;
	}

	private DrawingGraphicFindingVo saveDrawingGraphicFinding()
	{
		DrawingGraphicFindingVo voDGF = (DrawingGraphicFindingVo) form.getLocalContext().getVoDrawingGraphicFinding().clone();
		DrawingGraphicFindingVo voDGFsaved = null;
		if (voDGF == null)
			voDGF = new DrawingGraphicFindingVo();
		populateFinding(voDGF);
		String[] findingErrors = validateUIRules();
		String[] voErrors = voDGF.validate();
		String[] errors = getAllErrors(findingErrors, voErrors);
		if (errors != null)
		{
			engine.showErrors(errors);
			return null;
		}
		try
		{
			voDGFsaved = domain.saveFinding(voDGF);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return null;
		}

		form.getLocalContext().setVoDrawingGraphicFinding(voDGFsaved);
		return voDGFsaved;
	}

	private String[] getAllErrors(String[] findingErrors, String[] voErrors)
	{
		ArrayList errors = new ArrayList();
		
		for (int i = 0; voErrors != null && i < voErrors.length; i++)
			errors.add(voErrors[i]);
		
		for (int i = 0; findingErrors != null && i < findingErrors.length; i++)
			errors.add(findingErrors[i]);
			
		errors.trimToSize();
		if(errors.size() > 0)
		{
			String[] allErrors = new String[errors.size()];
			errors.toArray(allErrors);
			return allErrors;
		}
		return null;
	}

	private String[] validateUIRules()
	{
		ArrayList errors = new ArrayList();
		Color color = form.lyrFindings().tabView().cmbColor().getValue();
		AppImageVo voAppImage = form.lyrFindings().tabView().qmbImage().getValue();
		GroupColourImageEnumeration groupColourImg = form.lyrFindings().tabView().GroupColourImage().getValue();

		if (groupColourImg.equals(GroupColourImageEnumeration.rdoColouredLine) && color == null)
		{
			errors.add("Please select a Colour");
		}

		if (groupColourImg.equals(GroupColourImageEnumeration.rdoImage))
		{
			if (voAppImage == null)
				errors.add("Please select an Image");
			if (form.lyrFindings().tabView().GroupRenderStyle().getValue().equals(GroupRenderStyleEnumeration.None))
				errors.add("Please select Image Render Style");
		}

		if (errors.size() == 0)
			return null;

		String[] findingErrors = new String[errors.size()];
		errors.toArray(findingErrors);

		return findingErrors;
	}

	private void populateFinding(DrawingGraphicFindingVo voDrawGraphicFinding)
	{
		voDrawGraphicFinding.setDisplayText(form.lyrFindings().tabView().txtFinding().getValue());
		voDrawGraphicFinding.setDescription(form.lyrFindings().tabView().txtDescription().getValue());
		voDrawGraphicFinding.setActiveStatus(form.lyrFindings().tabView().cmbStatus().getValue());
		voDrawGraphicFinding.setColour(form.lyrFindings().tabView().cmbColor().getValue());
		voDrawGraphicFinding.setImage(form.lyrFindings().tabView().qmbImage().getValue());
		voDrawGraphicFinding.setIsSingleMark(getRenderStyle());
	}

	private Boolean getRenderStyle()
	{
		GroupRenderStyleEnumeration renderStyle = form.lyrFindings().tabView().GroupRenderStyle().getValue();
		Boolean value = null;
		if (renderStyle.equals(GroupRenderStyleEnumeration.rdoSingleImage))
			value = new Boolean(true);
		if (renderStyle.equals(GroupRenderStyleEnumeration.rdoMultipleImages))
			value = new Boolean(false);

		return value;
	}

	private DrawingGraphicFindingQuestionVoCollection getDrawingGraphicFindingFromGrid(DrawingGraphicFindingVo voDrawGraphicFinding)
	{
		//Append the newly added questions to the inactive ones.
		DrawingGraphicFindingQuestionVoCollection voColl = form.getLocalContext().getInactiveFindingQuestions();
		for (int i = 0; i < form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().size(); i++)
		{
			if (voColl == null)
				voColl = new DrawingGraphicFindingQuestionVoCollection();

			Object value = form.lyrFindings().tabView().dyngrdAssocQuestions().getRows().get(i).getValue();
			if (value != null && value instanceof DrawingGraphicFindingQuestionVo)
			{
				DrawingGraphicFindingQuestionVo voDrawingGraphicFindingQuestion = (DrawingGraphicFindingQuestionVo) value;
				voDrawingGraphicFindingQuestion.setActive(new Boolean(true));
				voDrawingGraphicFindingQuestion.setOrder(new Integer(i));
				voDrawingGraphicFindingQuestion.setDrawingGraphicFinding(voDrawGraphicFinding);
				voColl.add(voDrawingGraphicFindingQuestion);
			}
		}
		if (voColl == null || voColl.size() == 0)
		{
			voColl = new DrawingGraphicFindingQuestionVoCollection();
			DrawingGraphicFindingQuestionVo voGraphicFinding = new DrawingGraphicFindingQuestionVo();
			//Set the Finding
			voGraphicFinding.setDrawingGraphicFinding(voDrawGraphicFinding);
			voColl.add(voGraphicFinding);
		}
		return voColl;
	}

	private void initialiseScreen()
	{
		form.lyrFindings().tabSearch().GroupCriteria().setValue(GroupCriteriaEnumeration.rdoBeginsWith);
		if (isDialog() == false)
		{
			setVisibleViewTab(true);
		}
		else
		{
			form.lyrFindings().tabView().btnSave().setText("Select");
			enableSelectBtn(false);
			setVisibleViewTab(false);
			setFormMode(FormMode.VIEW);
		}
		initialiseListDynamicGrid();
		initialiseQuestionDynamicGrid();

		form.lyrFindings().tabSearch().txtSearch().setFocus();
		enableFindingsTab(false);
	}

	private void setVisibleViewTab(boolean visible)
	{
		if (visible)
		{
			form.lyrFindings().tabSearch().lyrFindingSearch().showtabPageView();
			form.lyrFindings().tabSearch().lyrFindingSearch().tabPageView().setHeaderEnabled(true);
			form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().setHeaderEnabled(false);
		}
		else
		{
			form.lyrFindings().tabSearch().lyrFindingSearch().showtabPageSelect();
			form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().setHeaderEnabled(true);
			form.lyrFindings().tabSearch().lyrFindingSearch().tabPageView().setHeaderEnabled(false);
		}
	}

	private void enableContextMenu()
	{
		boolean isNotDialog = isDialog() == false;
		boolean isFindingGridSelected = getSelectedFinding() != null;
		form.getContextMenus().getDrawingConfigNEWItem().setVisible(isNotDialog);
		form.getContextMenus().getDrawingConfigEDITItem().setVisible(isNotDialog && isFindingGridSelected);
		form.getContextMenus().getDrawingConfigVIEWItem().setVisible(isNotDialog && isFindingGridSelected);
		form.getContextMenus().getDrawingConfigSELECTItem().setVisible(isDialog() && isFindingGridSelected);

		boolean editMode = form.getMode().equals(FormMode.EDIT);
		boolean isEditable = form.lyrFindings().tabView().dyngrdAssocQuestions().getValue() != null && isNotDialog && editMode;
		DynamicGridRow row = form.lyrFindings().tabView().dyngrdAssocQuestions().getSelectedRow();

		form.getContextMenus().getGenericGridAddItem().setVisible(isNotDialog && editMode);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(isEditable);
		form.getContextMenus().getGenericGridViewItem().setVisible(isEditable);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(isEditable);
		form.getContextMenus().getGenericGridMoveUpItem().setVisible(isEditable && row != null && row.canMoveUp());
		form.getContextMenus().getGenericGridMoveDownItem().setVisible(isEditable && row != null && row.canMoveDown());
	}

	private void setDefaultContextMenu()
	{
		form.getContextMenus().getGenericGridAddItem().setText("Add Question");
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Question");
		form.getContextMenus().getGenericGridViewItem().setText("View Question");
	}

	private void enableFindingsTab(boolean enable)
	{
		form.lyrFindings().tabView().setHeaderVisible(enable);
	}

	private void enableSearchTab(boolean enable)
	{
		form.lyrFindings().tabSearch().setHeaderVisible(enable);
	}

	private void showTabView()
	{
		form.lyrFindings().showtabView();
	}

	private void showTabSearch()
	{
		form.lyrFindings().showtabSearch();
	}

	private void enableColourImgControls()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			boolean colourSel = form.lyrFindings().tabView().GroupColourImage().getValue().equals(GroupColourImageEnumeration.rdoColouredLine);

			form.lyrFindings().tabView().cmbColor().setEnabled(colourSel);
			form.lyrFindings().tabView().qmbImage().setEnabled(!colourSel);
			form.lyrFindings().tabView().imbImagePicker().setEnabled(!colourSel);
			form.lyrFindings().tabView().GroupRenderStyle().setEnabled(!colourSel);
		}
	}

	private void setDefaultColourImgValue()
	{
		boolean colourSel = form.lyrFindings().tabView().GroupColourImage().getValue().equals(GroupColourImageEnumeration.rdoColouredLine);
		if (colourSel)
		{
			form.lyrFindings().tabView().qmbImage().setValue(null);
			setRenderStyleValue(GroupRenderStyleEnumeration.None);
		}
		else
		{
			form.lyrFindings().tabView().cmbColor().setValue(null);
			setRenderStyleValue(GroupRenderStyleEnumeration.rdoSingleImage); //WDEV-16114
		}

		setDefaultImagePickerValue();
		//setRenderStyleValue(GroupRenderStyleEnumeration.None); WDEV-16114
	}

	/**
	 * 
	 */
	private void setRenderStyleValue(GroupRenderStyleEnumeration value)
	{
		form.lyrFindings().tabView().GroupRenderStyle().setValue(value);
	}

	private void setDefaultImagePickerValue()
	{
		form.lyrFindings().tabView().imbImagePicker().setEnabledImage(form.getImages().Admin.Image);
		form.lyrFindings().tabView().imbImagePicker().setDisabledImage(form.getImages().Admin.Image_disabled);
	}

	private boolean isDialog()
	{
		return engine.isDialog();
	}

	private void setFormMode(FormMode mode)
	{
		form.setMode(mode);
	}

	private void enableUpdateBtn(boolean value)
	{
		form.lyrFindings().tabView().btnUpdate().setVisible(value);
	}

	private void enableSaveCancelBtn(boolean value)
	{
		form.lyrFindings().tabView().btnSave().setVisible(value);
		form.lyrFindings().tabView().btnCancel().setVisible(value);
	}

	private void returnToList()
	{
		enableFindingsTab(false);
		enableSearchTab(true);
		showTabSearch();
		//WDEV-16281 
		enableSelectBtn(false);
		setFinding();
		setFormMode(FormMode.VIEW);
		form.lnkReturnToList().setVisible(false);
	}

	private void setFinding()
	{
		if (isNewRecordAdded())
		{
			//Add New Record in the grid
			DrawingGraphicFindingVo voDrawingGraphicFinding = form.getLocalContext().getVoDrawingGraphicFinding();
			if (voDrawingGraphicFinding != null && voDrawingGraphicFinding.getID_DrawingGraphicFindingIsNotNull())
			{
				DrawingGraphicFindingVoCollection voColl = new DrawingGraphicFindingVoCollection();
				voColl.add(voDrawingGraphicFinding);

				displayListedFindings(voColl);
				form.lyrFindings().tabSearch().lyrFindingSearch().tabPageSelect().dyngrdSelect().setValue(voDrawingGraphicFinding);
				enableContextMenu();
			}
		}
		else
		{
			search();
		}

	}

	private void enableControls()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			PreActiveActiveInactiveStatus status = form.lyrFindings().tabView().cmbStatus().getValue();
			if (status != null && (status.equals(PreActiveActiveInactiveStatus.ACTIVE) || status.equals(PreActiveActiveInactiveStatus.INACTIVE)))
			{
				form.lyrFindings().tabView().txtFinding().setEnabled(false);
				form.lyrFindings().tabView().txtDescription().setEnabled(false);
				form.lyrFindings().tabView().GroupColourImage().setEnabled(false);
				form.lyrFindings().tabView().cmbColor().setEnabled(false);
				form.lyrFindings().tabView().qmbImage().setEnabled(false);
				form.lyrFindings().tabView().imbImagePicker().setEnabled(false);
				form.lyrFindings().tabView().GroupRenderStyle().setEnabled(false);
			}
			else
			{
				form.lyrFindings().tabView().txtFinding().setEnabled(true);
				form.lyrFindings().tabView().txtDescription().setEnabled(true);
				form.lyrFindings().tabView().GroupColourImage().setEnabled(true);
				enableColourImgControls();
			}
		}
	}

	private void removePreactiveOrActiveLookup()
	{
		PreActiveActiveInactiveStatus status = form.lyrFindings().tabView().cmbStatus().getValue();
		form.lyrFindings().tabView().cmbStatus().clear();
		PreActiveActiveInactiveStatusCollection lookupColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		for (int i = 0; lookupColl != null && i < lookupColl.size(); i++)
		{
			if(isStatusActive() && lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE))
				continue;
			if(isStatusInactive() && (lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE) || lookupColl.get(i).equals(PreActiveActiveInactiveStatus.ACTIVE)))
				continue;

			form.lyrFindings().tabView().cmbStatus().newRow(lookupColl.get(i), lookupColl.get(i).toString(), lookupColl.get(i).getImage(), lookupColl.get(i).getColor());
		}	
		form.lyrFindings().tabView().cmbStatus().setValue(status);
	}

	private boolean isStatusInactive()
	{
		DrawingGraphicFindingVo voDrawingGraphicFinding = form.getLocalContext().getVoDrawingGraphicFinding();
		PreActiveActiveInactiveStatus status = voDrawingGraphicFinding != null?voDrawingGraphicFinding.getActiveStatus():null;
		if (status != null && (status.equals(PreActiveActiveInactiveStatus.INACTIVE)))
			return true;
		return false;
	}

	private boolean isStatusActive()
	{
		DrawingGraphicFindingVo voDrawingGraphicFinding = form.getLocalContext().getVoDrawingGraphicFinding();
		PreActiveActiveInactiveStatus status = voDrawingGraphicFinding != null?voDrawingGraphicFinding.getActiveStatus():null;
		if (status != null && (status.equals(PreActiveActiveInactiveStatus.ACTIVE)))
			return true;
		return false;
	}

	private boolean isStatusActiveOrInactive()
	{
		return isStatusInactive() || isStatusActive();
	}
	// --------------------- End private methods ------------------------------
}
