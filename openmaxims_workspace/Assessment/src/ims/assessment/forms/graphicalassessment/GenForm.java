//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.graphicalassessment;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrAssessmentLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabSelectImageContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdImagesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdImagesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolImageReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolImageReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolImageOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolImage()
				{
					return (String)super.row.get(0);
				}
				public void setcolImage(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolImageTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.core.vo.DrawingGraphicImageVo getValue()
				{
					return (ims.core.vo.DrawingGraphicImageVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.DrawingGraphicImageVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdImagesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdImagesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdImagesRow get(int index)
				{
					return new grdImagesRow(super.collection.get(index));
				}
				public grdImagesRow newRow()
				{
					return new grdImagesRow(super.collection.newRow());
				}
				public grdImagesRow newRow(boolean autoSelect)
				{
					return new grdImagesRow(super.collection.newRow(autoSelect));
				}
				public grdImagesRow newRowAt(int index)
				{
					return new grdImagesRow(super.collection.newRowAt(index));
				}
				public grdImagesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdImagesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdImagesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.DrawingGraphicImageVoCollection getValues()
				{
					ims.core.vo.DrawingGraphicImageVoCollection listOfValues = new ims.core.vo.DrawingGraphicImageVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.DrawingGraphicImageVo getValue()
				{
					return (ims.core.vo.DrawingGraphicImageVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.DrawingGraphicImageVo value)
				{
					super.grid.setValue(value);
				}
				public grdImagesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdImagesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdImagesRowCollection getRows()
				{
					return new grdImagesRowCollection(super.grid.getRows());
				}
				public grdImagesRow getRowByValue(ims.core.vo.DrawingGraphicImageVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdImagesRow(row);
				}
				public void setcolImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 501, 208, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Select Image and Continue", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 208, 484, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdImagesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdImagesTemp);
				grdImagesGrid grdImages = (grdImagesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdImagesGrid.class, m_grdImagesTemp);
				grdImages.addStringColumn("Image", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdImages);
		
				// Picture Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 224, 8, 432, 484, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE}));
			}

			public Button btnSelectImage()
			{
				return (Button)super.getControl(0);
			}
			public grdImagesGrid grdImages()
			{
				return (grdImagesGrid)super.getGrid(0);
			}
			public Picture imgPreview()
			{
				return (Picture)super.getControl(2);
			}
		}
		public static class tabDrawingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Drawing Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 648, 520, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DrawingControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Boolean(true)}));
			}

			public DrawingControl drawingBodyChart()
			{
				return (DrawingControl)super.getControl(0);
			}
		}
		public static class tabQuestionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 648, 520, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public DynamicGrid dyngrdQuestions()
			{
				return (DynamicGrid)super.getControl(0);
			}
		}
		public static class tabStagesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmb3ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.assessment.vo.PatientGraphicalAssessmentStageVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.assessment.vo.PatientGraphicalAssessmentStageVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.assessment.vo.PatientGraphicalAssessmentStageVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.assessment.vo.PatientGraphicalAssessmentStageVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.assessment.vo.PatientGraphicalAssessmentStageVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.assessment.vo.PatientGraphicalAssessmentStageVo getValue()
				{
					return (ims.assessment.vo.PatientGraphicalAssessmentStageVo)super.control.getValue();
				}
				public void setValue(ims.assessment.vo.PatientGraphicalAssessmentStageVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmb1ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.assessment.vo.PatientGraphicAssessmentFindingVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.assessment.vo.PatientGraphicAssessmentFindingVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.assessment.vo.PatientGraphicAssessmentFindingVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.assessment.vo.PatientGraphicAssessmentFindingVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.assessment.vo.PatientGraphicAssessmentFindingVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.assessment.vo.PatientGraphicAssessmentFindingVo getValue()
				{
					return (ims.assessment.vo.PatientGraphicAssessmentFindingVo)super.control.getValue();
				}
				public void setValue(ims.assessment.vo.PatientGraphicAssessmentFindingVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmb2ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.assessment.vo.GraphicAssessmentStageVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.assessment.vo.GraphicAssessmentStageVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.assessment.vo.GraphicAssessmentStageVo getValue()
				{
					return (ims.assessment.vo.GraphicAssessmentStageVo)super.control.getValue();
				}
				public void setValue(ims.assessment.vo.GraphicAssessmentStageVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 304, 10, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Finding:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Stage:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 592, 503, 65, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Last >>", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 376, 503, 65, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "<< First", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 520, 503, 65, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next >", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 448, 503, 65, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "< Prev", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 503, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 96, 504, 264, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmb3Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmb3Temp);
				cmb3ComboBox cmb3 = (cmb3ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb3ComboBox.class, m_cmb3Temp);
				super.addComboBox(cmb3);
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 360, 8, 296, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmb1Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmb1Temp);
				cmb1ComboBox cmb1 = (cmb1ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb1ComboBox.class, m_cmb1Temp);
				super.addComboBox(cmb1);
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 56, 8, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmb2Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmb2Temp);
				cmb2ComboBox cmb2 = (cmb2ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb2ComboBox.class, m_cmb2Temp);
				super.addComboBox(cmb2);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 39, 648, 457, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuAnswerGraphicStage, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public Button btn2()
			{
				return (Button)super.getControl(2);
			}
			public Button btn3()
			{
				return (Button)super.getControl(3);
			}
			public Button btn4()
			{
				return (Button)super.getControl(4);
			}
			public Button btn5()
			{
				return (Button)super.getControl(5);
			}
			public Button btn1()
			{
				return (Button)super.getControl(6);
			}
			public cmb3ComboBox cmb3()
			{
				return (cmb3ComboBox)super.getComboBox(0);
			}
			public cmb1ComboBox cmb1()
			{
				return (cmb1ComboBox)super.getComboBox(1);
			}
			public cmb2ComboBox cmb2()
			{
				return (cmb2ComboBox)super.getComboBox(2);
			}
			public DynamicGrid dyngrdStages()
			{
				return (DynamicGrid)super.getControl(10);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 672, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSelectImage = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Select Image", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabSelectImageContainer m_tabSelectImageContainer = (tabSelectImageContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSelectImageContainer.class, m_tabSelectImage, factory);
			super.addContainer(m_tabSelectImage, m_tabSelectImageContainer);
			ims.framework.utils.SizeInfo m_tabSelectImageDesignSize = new ims.framework.utils.SizeInfo(672, 560);
			ims.framework.utils.SizeInfo m_tabSelectImageRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
			m_tabSelectImageContainer.setContext(form, appForm, m_tabSelectImage, loader, form_images_local, contextMenus, startControlID, m_tabSelectImageDesignSize, m_tabSelectImageRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 672, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDrawing = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Drawing", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabDrawingContainer m_tabDrawingContainer = (tabDrawingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDrawingContainer.class, m_tabDrawing, factory);
			super.addContainer(m_tabDrawing, m_tabDrawingContainer);
			ims.framework.utils.SizeInfo m_tabDrawingDesignSize = new ims.framework.utils.SizeInfo(672, 560);
			ims.framework.utils.SizeInfo m_tabDrawingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper18.getWidth(), anchoringHelper18.getHeight());
			m_tabDrawingContainer.setContext(form, appForm, m_tabDrawing, loader, form_images_local, contextMenus, startControlID, m_tabDrawingDesignSize, m_tabDrawingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 672, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabQuestions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Questions", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabQuestionsContainer m_tabQuestionsContainer = (tabQuestionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabQuestionsContainer.class, m_tabQuestions, factory);
			super.addContainer(m_tabQuestions, m_tabQuestionsContainer);
			ims.framework.utils.SizeInfo m_tabQuestionsDesignSize = new ims.framework.utils.SizeInfo(672, 560);
			ims.framework.utils.SizeInfo m_tabQuestionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
			m_tabQuestionsContainer.setContext(form, appForm, m_tabQuestions, loader, form_images_local, contextMenus, startControlID, m_tabQuestionsDesignSize, m_tabQuestionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 672, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabStages = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Stages", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabStagesContainer m_tabStagesContainer = (tabStagesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabStagesContainer.class, m_tabStages, factory);
			super.addContainer(m_tabStages, m_tabStagesContainer);
			ims.framework.utils.SizeInfo m_tabStagesDesignSize = new ims.framework.utils.SizeInfo(672, 560);
			ims.framework.utils.SizeInfo m_tabStagesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
			m_tabStagesContainer.setContext(form, appForm, m_tabStages, loader, form_images_local, contextMenus, startControlID, m_tabStagesDesignSize, m_tabStagesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabSelectImage().setVisible(false);
			tabDrawing().setVisible(false);
			tabQuestions().setVisible(false);
			tabStages().setVisible(false);
		}
		public void settabSelectImageEnabled(boolean value)
		{
			tabSelectImage().setEnabled(value);
		}
		public void settabDrawingEnabled(boolean value)
		{
			tabDrawing().setEnabled(value);
		}
		public void settabQuestionsEnabled(boolean value)
		{
			tabQuestions().setEnabled(value);
		}
		public void settabStagesEnabled(boolean value)
		{
			tabStages().setEnabled(value);
		}
		public void showtabSelectImage()
		{
			tabDrawing().setVisible(false);
			tabQuestions().setVisible(false);
			tabStages().setVisible(false);
			tabSelectImage().setVisible(true);
		}
		public void showtabDrawing()
		{
			tabSelectImage().setVisible(false);
			tabQuestions().setVisible(false);
			tabStages().setVisible(false);
			tabDrawing().setVisible(true);
		}
		public void showtabQuestions()
		{
			tabSelectImage().setVisible(false);
			tabDrawing().setVisible(false);
			tabStages().setVisible(false);
			tabQuestions().setVisible(true);
		}
		public void showtabStages()
		{
			tabSelectImage().setVisible(false);
			tabDrawing().setVisible(false);
			tabQuestions().setVisible(false);
			tabStages().setVisible(true);
		}

		public tabSelectImageContainer tabSelectImage()
		{
			return (tabSelectImageContainer)super.layers.get(0);
		}
		public tabDrawingContainer tabDrawing()
		{
			return (tabDrawingContainer)super.layers.get(1);
		}
		public tabQuestionsContainer tabQuestions()
		{
			return (tabQuestionsContainer)super.layers.get(2);
		}
		public tabStagesContainer tabStages()
		{
			return (tabStagesContainer)super.layers.get(3);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(688, 576);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuAnswerGraphicStage = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuAnswerGraphicStageADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add new stage", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuAnswerGraphicStage.add(contextMenus.contextMenuAnswerGraphicStageADDItem);
		form.registerMenu(contextMenus.contextMenuAnswerGraphicStage);


		// Layer Clasess
		lyrAssessmentLayer m_lyrAssessmentLayer = (lyrAssessmentLayer)LayerFlyweightFactory.getInstance().createLayer(lyrAssessmentLayer.class, this, factory);
		super.addLayer(m_lyrAssessmentLayer);
		m_lyrAssessmentLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrAssessmentLayer lyrAssessment()
	{
		return (lyrAssessmentLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Assessment = new AssessmentForms();
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				GraphicAssessmentInstantiationFinding = new LocalFormName(102213);
			}
			public final FormName GraphicAssessmentInstantiationFinding;
		}

		public AssessmentForms Assessment;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			GeneralMedical = new GeneralMedicalImages();
			Core = new CoreImages();
		}
		public final class GeneralMedicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private GeneralMedicalImages()
			{
				Blank = new ImageHelper(109101, "Images/GeneralMedical/Blank.gif", new Integer(235), new Integer(235));
			}
			public final ims.framework.utils.Image Blank;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(10), new Integer(10));
				QuestionSmall = new ImageHelper(102215, "Images/Core/Help-3.gif", new Integer(16), new Integer(16));
				TextBox = new ImageHelper(102240, "Images/Core/Textbox.gif", new Integer(16), new Integer(16));
				SmallNew = new ImageHelper(102247, "Images/Core/SmallNew.gif", new Integer(12), new Integer(12));
				SmallCancel = new ImageHelper(102248, "Images/Core/SmallCancel.gif", new Integer(12), new Integer(12));
				MandatoryQuestion = new ImageHelper(102272, "Images/Core/Help4.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image AnswerBox_Yes;
			public final ims.framework.utils.Image AnswerBox_No;
			public final ims.framework.utils.Image QuestionSmall;
			public final ims.framework.utils.Image TextBox;
			public final ims.framework.utils.Image SmallNew;
			public final ims.framework.utils.Image SmallCancel;
			public final ims.framework.utils.Image MandatoryQuestion;
		}
		public final GeneralMedicalImages GeneralMedical;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentImage = new ims.framework.ContextVariable("CurrentImage", prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__CurrentImage_" + componentIdentifier + "");
			cxl_PatientInfo = new ims.framework.ContextVariable("PatientInfo", prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientInfo_" + componentIdentifier + "");
			cxl_PatientAssessment = new ims.framework.ContextVariable("PatientAssessment", prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier + "");
			cxl_Patient_Assessment = new ims.framework.ContextVariable("Patient_Assessment", prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_Assessment_" + componentIdentifier + "");
			cxl_PatientGraphicAssessmentFinding = new ims.framework.ContextVariable("PatientGraphicAssessmentFinding", prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientGraphicAssessmentFinding_" + componentIdentifier + "");
			cxl_Patient_GraphicAssessmentFinding = new ims.framework.ContextVariable("Patient_GraphicAssessmentFinding", prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_GraphicAssessmentFinding_" + componentIdentifier + "");
		}
		
		public boolean getCurrentImageIsNotNull()
		{
			return !cxl_CurrentImage.getValueIsNull(context);
		}
		public ims.core.vo.DrawingGraphicImageVo getCurrentImage()
		{
			return (ims.core.vo.DrawingGraphicImageVo)cxl_CurrentImage.getValue(context);
		}
		public void setCurrentImage(ims.core.vo.DrawingGraphicImageVo value)
		{
			cxl_CurrentImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentImage = null;
		public boolean getPatientInfoIsNotNull()
		{
			return !cxl_PatientInfo.getValueIsNull(context);
		}
		public ims.core.vo.PatientAssessmentInfoVo getPatientInfo()
		{
			return (ims.core.vo.PatientAssessmentInfoVo)cxl_PatientInfo.getValue(context);
		}
		public void setPatientInfo(ims.core.vo.PatientAssessmentInfoVo value)
		{
			cxl_PatientInfo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientInfo = null;
		public boolean getPatientAssessmentIsNotNull()
		{
			return !cxl_PatientAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentVo getPatientAssessment()
		{
			return (ims.assessment.vo.PatientAssessmentVo)cxl_PatientAssessment.getValue(context);
		}
		public void setPatientAssessment(ims.assessment.vo.PatientAssessmentVo value)
		{
			cxl_PatientAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientAssessment = null;
		public boolean getPatient_AssessmentIsNotNull()
		{
			return !cxl_Patient_Assessment.getValueIsNull(context);
		}
		public ims.assessment.vo.Patient_AssessmentVo getPatient_Assessment()
		{
			return (ims.assessment.vo.Patient_AssessmentVo)cxl_Patient_Assessment.getValue(context);
		}
		public void setPatient_Assessment(ims.assessment.vo.Patient_AssessmentVo value)
		{
			cxl_Patient_Assessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Patient_Assessment = null;
		public boolean getPatientGraphicAssessmentFindingIsNotNull()
		{
			return !cxl_PatientGraphicAssessmentFinding.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientGraphicAssessmentFindingVo getPatientGraphicAssessmentFinding()
		{
			return (ims.assessment.vo.PatientGraphicAssessmentFindingVo)cxl_PatientGraphicAssessmentFinding.getValue(context);
		}
		public void setPatientGraphicAssessmentFinding(ims.assessment.vo.PatientGraphicAssessmentFindingVo value)
		{
			cxl_PatientGraphicAssessmentFinding.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientGraphicAssessmentFinding = null;
		public boolean getPatient_GraphicAssessmentFindingIsNotNull()
		{
			return !cxl_Patient_GraphicAssessmentFinding.getValueIsNull(context);
		}
		public ims.assessment.vo.Patient_GraphicAssessmentFindingVo getPatient_GraphicAssessmentFinding()
		{
			return (ims.assessment.vo.Patient_GraphicAssessmentFindingVo)cxl_Patient_GraphicAssessmentFinding.getValue(context);
		}
		public void setPatient_GraphicAssessmentFinding(ims.assessment.vo.Patient_GraphicAssessmentFindingVo value)
		{
			cxl_Patient_GraphicAssessmentFinding.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Patient_GraphicAssessmentFinding = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class AnswerGraphicStage implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 1;
		}
		public void disableAllAnswerGraphicStageMenuItems()
		{
			this.contextMenuAnswerGraphicStageADDItem.setEnabled(false);
		}
		public void hideAllAnswerGraphicStageMenuItems()
		{
			this.contextMenuAnswerGraphicStageADDItem.setVisible(false);
		}
		private Menu contextMenuAnswerGraphicStage;
		public MenuItem getAnswerGraphicStageADDItem()
		{
			return this.contextMenuAnswerGraphicStageADDItem;
		}
		private MenuItem contextMenuAnswerGraphicStageADDItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[142];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.PatientGraphicAssessmentFinding", "BO-1003100051-ID", "ID_PatientGraphicAssessmentFinding");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.PatientGraphicAssessmentFinding", "BO-1003100051-AREADRAWN", "AreaDrawn");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.PatientGraphicAssessmentFinding", "BO-1003100051-AREANAME", "AreaName");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.PatientGraphicAssessmentFinding", "BO-1003100051-AREADETAILS", "AreaDetails");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.PatientGraphicAssessmentFinding", "BO-1003100051-ISCOPIED", "IsCopied");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-ID", "ID_PatientAssessment");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-STATUS", "Status");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-STATUSREASON", "StatusReason");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-DPPTYPE", "DPPType");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-CARECONTEXT", "CareContext");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-PATIENT", "Patient");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-SCORE", "Score");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.PatientAssessmentFull", "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-ID", "ID_PatientAssessment");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-STATUS", "Status");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-PATIENT", "Patient");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-CARECONTEXT", "CareContext");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-SCORE", "Score");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-ASSOCIATEDDOCUMENT", "AssociatedDocument");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_GraphicAssessmentFinding", "BO-1003100051-ID", "ID_PatientGraphicAssessmentFinding");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_GraphicAssessmentFinding", "BO-1003100051-AREANAME", "AreaName");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_GraphicAssessmentFinding", "BO-1003100051-AREADRAWN", "AreaDrawn");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_GraphicAssessmentFinding", "BO-1003100051-AREADETAILS", "AreaDetails");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__CurrentImage_" + componentIdentifier, "BO-1028100007-ID", "ID_DrawingGraphicImage");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__CurrentImage_" + componentIdentifier, "BO-1028100007-IMAGENAME", "ImageName");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__CurrentImage_" + componentIdentifier, "BO-1028100007-IMAGEDESCRIPTION", "ImageDescription");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__CurrentImage_" + componentIdentifier, "BO-1028100007-VERSIONNUMBER", "VersionNumber");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__CurrentImage_" + componentIdentifier, "BO-1028100007-IMAGESTATUS", "ImageStatus");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_Assessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_Assessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_Assessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_Assessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_Assessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_Assessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_Assessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_Assessment_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_Assessment_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_Assessment_" + componentIdentifier, "BO-1003100048-ASSOCIATEDDOCUMENT", "AssociatedDocument");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientGraphicAssessmentFinding_" + componentIdentifier, "BO-1003100051-ID", "ID_PatientGraphicAssessmentFinding");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientGraphicAssessmentFinding_" + componentIdentifier, "BO-1003100051-AREADRAWN", "AreaDrawn");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientGraphicAssessmentFinding_" + componentIdentifier, "BO-1003100051-AREANAME", "AreaName");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientGraphicAssessmentFinding_" + componentIdentifier, "BO-1003100051-AREADETAILS", "AreaDetails");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__PatientGraphicAssessmentFinding_" + componentIdentifier, "BO-1003100051-ISCOPIED", "IsCopied");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_GraphicAssessmentFinding_" + componentIdentifier, "BO-1003100051-ID", "ID_PatientGraphicAssessmentFinding");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_GraphicAssessmentFinding_" + componentIdentifier, "BO-1003100051-AREANAME", "AreaName");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_GraphicAssessmentFinding_" + componentIdentifier, "BO-1003100051-AREADRAWN", "AreaDrawn");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.GraphicalAssessment.__internal_x_context__Patient_GraphicAssessmentFinding_" + componentIdentifier, "BO-1003100051-AREADETAILS", "AreaDetails");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
