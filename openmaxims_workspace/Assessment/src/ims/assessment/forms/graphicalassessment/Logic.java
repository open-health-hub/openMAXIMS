//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.53 build 2511.27271)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.graphicalassessment;

import ims.admin.vo.lookups.GenderSpecific;
import ims.assessment.helper.UserAssessmentInstHelper;
import ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection;
import ims.assessment.vo.GraphicAssessmentFindingVo;
import ims.assessment.vo.GraphicAssessmentFindingVoCollection;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.Graphic_AssessmentFindingQuestionVo;
import ims.assessment.vo.Graphic_AssessmentFindingQuestionVoCollection;
import ims.assessment.vo.Graphic_AssessmentFindingVo;
import ims.assessment.vo.Graphic_AssessmentFindingVoCollection;
import ims.assessment.vo.Graphic_AssessmentVo;
import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingQuestionAnswerVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingQuestionAnswerVoCollection;
import ims.assessment.vo.PatientGraphicAssessmentFindingVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingVoCollection;
import ims.assessment.vo.PatientGraphicAssessmentVo;
import ims.assessment.vo.PatientGraphicAssessmentVoCollection;
import ims.assessment.vo.PatientGraphicalAssessmentStageVo;
import ims.assessment.vo.PatientGraphicalAssessmentStageVoCollection;
import ims.assessment.vo.Patient_AssessmentDataVo;
import ims.assessment.vo.Patient_AssessmentVo;
import ims.assessment.vo.Patient_GraphicAssessmentFindingQuestionAnswerVo;
import ims.assessment.vo.Patient_GraphicAssessmentFindingQuestionAnswerVoCollection;
import ims.assessment.vo.Patient_GraphicAssessmentFindingVo;
import ims.assessment.vo.Patient_GraphicAssessmentFindingVoCollection;
import ims.assessment.vo.Patient_GraphicAssessmentVo;
import ims.assessment.vo.Patient_GraphicAssessmentVoCollection;
import ims.assessment.vo.Patient_GraphicalAssessmentStageVo;
import ims.assessment.vo.Patient_GraphicalAssessmentStageVoCollection;
import ims.assessment.vo.Question_InformationVo;
import ims.core.vo.DrawingGraphicFindingVo;
import ims.core.vo.DrawingGraphicImageVo;
import ims.core.vo.GraphicAreaVo;
import ims.core.vo.GraphicGroupVo;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.core.vo.QuestionInformationVo;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.Sex;
import ims.framework.controls.DrawingControl;
import ims.framework.controls.DrawingControlArea;
import ims.framework.controls.DrawingControlAreaCollection;
import ims.framework.controls.DrawingControlGroup;
import ims.framework.controls.DrawingControlShape;
import ims.framework.controls.DynamicGridCell;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Image;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private int savedTargetID = -1;

	
	//----------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Component interface logic
	//----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	public void setPatientAssessment(PatientAssessmentVo patientAssessment)
	{
		setPatientAssessment(patientAssessment, null);
	}

	
	// Added for WDEV-11366
	public void setPatientAssessment(PatientAssessmentVo patientAssessment, PatientAssessmentInfoVo patInfo)
	{
		clear();

		if (patientAssessment == null)
			throw new RuntimeException("Invalid patient assessment");
		if (patientAssessment.getAssessmentData() == null)
			throw new RuntimeException("Invalid patient assessment data");
		if (patientAssessment.getAssessmentData().getGraphic() == null)
			throw new RuntimeException("Invalid patient assessment data graphic");
		if (patientAssessment.getAssessmentData().getGraphic().getImages() == null)
			throw new RuntimeException("Invalid patient assessment data graphic image(s)");
		if (patientAssessment.getAssessmentData().getGraphic().getImages() == null || patientAssessment.getAssessmentData().getGraphic().getImages().size() == 0)
			throw new RuntimeException("Invalid patient assessment data graphic image(s)");

		form.getLocalContext().setPatientAssessment(patientAssessment);
//		form.getGlobalContext().Core.setPatientAssessmentFull(patientAssessment);
		form.getLocalContext().setPatientInfo(patInfo);
		configureDrawing(patientAssessment.getAssessmentData(), false);

	}


	public void setPatientAssessment(Patient_AssessmentVo patientAssessment)
	{
		setPatientAssessment(patientAssessment, null);
	}


	public void setPatientAssessment(Patient_AssessmentVo patientAssessment, PatientAssessmentInfoVo patInfo)
	{
		setPatientAssessment(patientAssessment, false, patInfo);
	}

	public void setPatientAssessment(Patient_AssessmentVo patientAssessment, Boolean displayAnsweredOnly, PatientAssessmentInfoVo patInfo)
	{
		clear();

		if (patientAssessment == null)
			throw new RuntimeException("Invalid patient assessment");
		if (patientAssessment.getAssessmentData() == null)
			throw new RuntimeException("Invalid patient assessment data");
		if (patientAssessment.getAssessmentData().getGraphic() == null)
			throw new RuntimeException("Invalid patient assessment data graphic");
		if (patientAssessment.getAssessmentData().getGraphic().getImages() == null)
			throw new RuntimeException("Invalid patient assessment data graphic image(s)");
		if (patientAssessment.getAssessmentData().getGraphic().getImages() == null || patientAssessment.getAssessmentData().getGraphic().getImages().size() == 0)
			throw new RuntimeException("Invalid patient assessment data graphic image(s)");

		// //form.getGlobalContext().Core.setPatientAssessmentFull(patientAssessment);
		form.getLocalContext().setPatient_Assessment(patientAssessment);
//		form.getGlobalContext().Core.setPatient_AssessmentFull(patientAssessment);
		form.getLocalContext().setPatientInfo(patInfo);

		configureDrawing(patientAssessment.getAssessmentData(), displayAnsweredOnly);
	}
	

	/**
	 * clearScreen
	 */
	public void clear()
	{
		clear(false);
	}

	public void clear(Boolean bHideImageSelectTab)
	{
		clear(bHideImageSelectTab, false);
	}

	public void clear(Boolean bHideImageSelectTab, Boolean keepData)
	{
		// Clearing Image Selection
		form.getLocalContext().setCurrentImage(null);

		// Select Image Tab
		form.lyrAssessment().tabSelectImage().grdImages().getRows().clear();
		form.lyrAssessment().tabSelectImage().imgPreview().setValue(null);

		// Drawing Tab
		getGraphicControl().clearBrushes();
		getGraphicControl().clearShapes();
		getGraphicControl().setImage(form.getImages().GeneralMedical.Blank);
		getGraphicControl().addBrush(0, "None", Color.Default);
		getGraphicControl().setAreas(new DrawingControlGroup(0, "None"));
		getGraphicControl().setPrintSubTitle("Graphic Image");

		if (!Boolean.TRUE.equals(keepData))
		{
			form.getLocalContext().setPatientAssessment(null);
			form.getLocalContext().setPatient_Assessment(null);
//			form.getGlobalContext().Core.setPatientAssessmentFull(null);
			// WDEV-12215
//			form.getGlobalContext().Core.setPatient_AssessmentFull(null);
		}

		// Questions Tab
		form.lyrAssessment().tabQuestions().dyngrdQuestions().clear();

		if (Boolean.TRUE.equals(bHideImageSelectTab))
		{
			form.lyrAssessment().tabSelectImage().setHeaderVisible(bHideImageSelectTab);
			form.lyrAssessment().showtabDrawing();
		}
	}

	
	//----------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handler region
	//----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initializeComponent();
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (result.equals(DialogResult.OK) && formName.equals(form.getForms().Assessment.GraphicAssessmentInstantiationFinding))
		{
			// WDEV-12215
			if (form.getGlobalContext().Core.getPatientAssessmentFull() != null)
			{
				processEditedFinding(form.getGlobalContext().Core.getPatientAssessmentFull(), form.getGlobalContext().Core.getPatientGraphicAssessmentFinding());
			}
			else if (form.getGlobalContext().Core.getPatient_AssessmentFull() != null)
			{
				process_EditedFinding(form.getGlobalContext().Core.getPatient_AssessmentFull(), form.getGlobalContext().Core.getPatient_GraphicAssessmentFinding());
			}
		}
	}

	protected void onGrdImagesSelectionChanged() throws PresentationLogicException
	{
		displaySelectedImage();
	}

	protected void onDyngrdQuestionsCellButtonClicked(DynamicGridCell cell)
	{
		// WDEV-12215
		if (form.getLocalContext().getPatientAssessment() != null)
		{
			getHelper().addOrRemoveAnswer(cell);
		}
		else if (form.getLocalContext().getPatient_Assessment() != null)
		{
			getHelper().add_OrRemoveAnswer(cell);
		}
	}

	
	private void processEditedFinding(PatientAssessmentVo assessment, PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding)
	{
		PatientAssessmentDataVo voPatAssessmentData = assessment.getAssessmentData();
		
		DrawingGraphicImageVo voDrawingGraphicImage = form.getLocalContext().getCurrentImage();
		if (voPatAssessmentData != null && voPatAssessmentData.getGraphicFindingsIsNotNull())
		{
			for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
			{
				// Check to be in the context of the same Patient Graphic Assessment
				PatientGraphicAssessmentVo voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
				if (voPatientGraphicAssessment.getGraphicImageIsNotNull() && voPatientGraphicAssessment.getGraphicImage().equals(voDrawingGraphicImage))
				{
					int index = voPatientGraphicAssessment.getPatientGraphicFinding().indexOf(voPatientGraphicAssessmentFinding);
					if (index >= 0)
						voPatAssessmentData.getGraphicFindings().get(i).getPatientGraphicFinding().set(index, voPatientGraphicAssessmentFinding);
					else
						voPatAssessmentData.getGraphicFindings().get(i).getPatientGraphicFinding().add(voPatientGraphicAssessmentFinding);

					assessment.setAssessmentData(voPatAssessmentData);
					form.getLocalContext().setPatientAssessment(assessment);
					break;
				}
			}
		}
	}

	// WDEV-12215
	private void process_EditedFinding(Patient_AssessmentVo assessment, Patient_GraphicAssessmentFindingVo voPatientGraphicAssessmentFinding)
	{
		Patient_AssessmentDataVo voPatAssessmentData = assessment.getAssessmentData();
		
		DrawingGraphicImageVo voDrawingGraphicImage = form.getLocalContext().getCurrentImage();
		if (voPatAssessmentData != null && voPatAssessmentData.getGraphicFindingsIsNotNull())
		{
			for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
			{
				// Check to be in the context of the same Patient Graphic Assessment
				Patient_GraphicAssessmentVo voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
				if (voPatientGraphicAssessment.getGraphicImageIsNotNull() && voPatientGraphicAssessment.getGraphicImage().equals(voDrawingGraphicImage))
				{
					int index = voPatientGraphicAssessment.getPatientGraphicFinding().indexOf(voPatientGraphicAssessmentFinding);
					if (index >= 0)
						voPatAssessmentData.getGraphicFindings().get(i).getPatientGraphicFinding().set(index, voPatientGraphicAssessmentFinding);
					else
						voPatAssessmentData.getGraphicFindings().get(i).getPatientGraphicFinding().add(voPatientGraphicAssessmentFinding);

					assessment.setAssessmentData(voPatAssessmentData);
					form.getLocalContext().setPatient_Assessment(assessment);
					break;
				}
			}
		}
	}

	protected void onFormModeChanged()
	{}

	protected void onDrawingBodyChartEdited(int index) throws ims.framework.exceptions.PresentationLogicException
	{
		DrawingControlShape shape = getEditedShape(index);
		if (shape == null)
			throw new CodingRuntimeException("Cannot edit a null shape");

		if (form.getLocalContext().getPatientAssessment() != null)
		{
			drawingImageNote(shape);
		}
		else if (form.getLocalContext().getPatient_Assessment() != null)
		{
			drawing_ImageNote(shape);
		}
	}

	protected void onDrawingBodyChartRemoved(int index) throws ims.framework.exceptions.PresentationLogicException
	{
		// WDEV-12215
		if (form.getLocalContext().getPatientAssessment() != null)
		{
			removeGraphicFinding(index);
		}
		else if (form.getLocalContext().getPatient_Assessment() != null)
		{
			remove_GraphicFinding(index);
		}
	}

	protected void onDrawingBodyChartNote(ims.framework.controls.DrawingControlShape shape) throws ims.framework.exceptions.PresentationLogicException
	{
		// WDEV-12215
		if (form.getLocalContext().getPatientAssessment() != null)
		{
			drawingImageNote(shape);
		}
		else if (form.getLocalContext().getPatient_Assessment() != null)
		{
			drawing_ImageNote(shape);
		}
	}

	protected void onBtnSelectImageClick() throws PresentationLogicException
	{
		form.getLocalContext().setCurrentImage(form.lyrAssessment().tabSelectImage().grdImages().getValue());

		// WDEV-12215
		if (form.getLocalContext().getPatientAssessment() != null)
		{
			configureDrawing();
		}
		else if (form.getLocalContext().getPatient_Assessment() != null)
		{
			configureDrawing(form.getLocalContext().getPatient_Assessment().getAssessmentData(), false);
		}
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{}

	/**
	 * setPatientAssessment
	 * 
	 * @throws PresentationLogicException
	 */

	/**
	 * setEnabled
	 */
	public void setEnabled(Boolean value)
	{
		if (value == null)
			throw new CodingRuntimeException("Invalid value");

		form.lyrAssessment().tabSelectImage().grdImages().setEnabled(value.booleanValue());
		getGraphicControl().setReadOnly(!value.booleanValue());
		form.lyrAssessment().tabSelectImage().btnSelectImage().setEnabled(value.booleanValue() && form.lyrAssessment().tabSelectImage().grdImages().getSelectedRowIndex() >= 0);
		form.lyrAssessment().tabQuestions().dyngrdQuestions().setReadOnly(!value.booleanValue());
	}

	/**
	 * getPatientAssessment
	 */
	public PatientAssessmentVo getPatientAssessment()
	{
		PatientAssessmentVo assessment = form.getLocalContext().getPatientAssessment();

		if (assessment != null && hasQuestions(assessment.getAssessmentData()))
		{
			PatientAssessmentDataVo data = assessment.getAssessmentData();
			data.setGraphicQuestion(getHelper().getGraphicAnswers(data.getGraphicQuestion()));

			if (data.getGraphicFindings() == null)
			{
				PatientGraphicAssessmentVoCollection emptyFindings = new PatientGraphicAssessmentVoCollection();
				PatientGraphicAssessmentVo emptyFinding = new PatientGraphicAssessmentVo();
				emptyFinding.setGraphicImage(form.getLocalContext().getCurrentImage());
				emptyFindings.add(emptyFinding);
				emptyFinding.setPatientGraphicFinding(new PatientGraphicAssessmentFindingVoCollection());
				data.setGraphicFindings(emptyFindings);
			}

			assessment.setAssessmentData(data);
			form.getLocalContext().setPatientAssessment(assessment);
		}

		return assessment;
	}


	private void setDrawingIds()
	{
		PatientAssessmentVo assessment = form.getLocalContext().getPatientAssessment();
		PatientAssessmentDataVo voPatientAssessmentData = assessment.getAssessmentData();
		if (voPatientAssessmentData != null && voPatientAssessmentData.getGraphicFindingsIsNotNull())
		{
			for (int j = 0; j < voPatientAssessmentData.getGraphicFindings().size(); j++)
			{
				for (int i = 0; voPatientAssessmentData.getGraphicFindings().get(j).getPatientGraphicFinding() != null && i < voPatientAssessmentData.getGraphicFindings().get(j).getPatientGraphicFinding().size(); i++)
				{
					voPatientAssessmentData.getGraphicFindings().get(j).getPatientGraphicFinding().get(i).setDrawingId(voPatientAssessmentData.getGraphicFindings().get(j).getPatientGraphicFinding().get(i).getID_PatientGraphicAssessmentFinding());
				}
			}
		}

		assessment.setAssessmentData(voPatientAssessmentData);
		form.getLocalContext().setPatientAssessment(assessment);
	}

	private void configureDrawing()
	{
		configureDrawing(form.getLocalContext().getPatientAssessment().getAssessmentData(), false);
	}

	private void configureDrawing(PatientAssessmentDataVo data, boolean displayAnsweredOnly)
	{
		GraphicAssessmentVo config = data.getGraphic();
		DrawingGraphicImageVo image = null;

		if (!isAnswered(data))
		{
			if (config.getImages() == null || config.getImages().size() == 0)
				throw new RuntimeException("No image(s) configured");

			if (config.getImages().size() > 1)
			{
				if (form.getLocalContext().getCurrentImage() == null)
				{
					configureImageSelection(config);
					return;
				}
				else
				{
					image = form.getLocalContext().getCurrentImage();
				}
			}
			else
			{
				image = config.getImages().get(0);
			}
		}
		else
		{
			if (data.getGraphicFindings() == null || data.getGraphicFindings().size() == 0)
			{
				// WDEV-11947-Start
				if (config.getImages() == null || config.getImages().size() == 0)
					throw new RuntimeException("No image(s) configured");

				if (config.getImages().size() > 1)
				{
					if (form.getLocalContext().getCurrentImage() == null)
					{
						configureImageSelection(config);
						return;
					}
					else
					{
						image = form.getLocalContext().getCurrentImage();
					}
				}

				else
				{
					image = config.getImages().get(0);
				}
				// WDEV-11947-End
			}
			else
			{
				image = data.getGraphicFindings().get(0).getGraphicImage();
			}
		}

		if (image == null)
			throw new RuntimeException("No image found");

		engine.getRegisteredImage(image.getImage().getID_AppImage().intValue());

		Image img = engine.getRegisteredImage(image.getImage().getID_AppImage().intValue());
		if (img == null)
			img = form.getImages().GeneralMedical.Blank;

		form.getLocalContext().setCurrentImage(image);
		getGraphicControl().setImage(img);

		configureTabs(data);

		if (isAnswered(data))
			setDrawingIds();

		// Brushes
		setBrushes(data.getGraphic().getFindingsAndQuestions());

		// Areas
		DrawingControlGroup root = null;
		if (image != null && image.getRootGroupIsNotNull())
		{
			root = new DrawingControlGroup(image.getRootGroup().getGroupID().intValue(), image.getRootGroup().getGroupName());
			convertAllAreasToNode(image.getRootGroup(), root);
		}
		else
		{
			root = new DrawingControlGroup(-1, " ");
		}

		getGraphicControl().setAreas(root);

		// Shapes
		PatientGraphicAssessmentVo voPatientGraphicassessment = getSavedGraphicAssessment(image, data);
		if (voPatientGraphicassessment != null && voPatientGraphicassessment.getPatientGraphicFindingIsNotNull())
		{
			for (int i = 0; i < voPatientGraphicassessment.getPatientGraphicFinding().size(); i++)
			{
				PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = voPatientGraphicassessment.getPatientGraphicFinding().get(i);
				DrawingGraphicFindingVo voDrawingGraphicFinding = voPatientGraphicAssessmentFinding.getGraphicFinding();

				String vmlData = voPatientGraphicAssessmentFinding.getAreaDrawn();
				// Findings
				if (voDrawingGraphicFinding != null && vmlData != null)
				{
					int shapeId = voPatientGraphicAssessmentFinding.getDrawingId().intValue();
					int brush_id = voDrawingGraphicFinding.getID_DrawingGraphicFinding().intValue();
					String tooltip = UserAssessmentInstHelper.getGraphicAssessmentFindingTooltip(voPatientGraphicAssessmentFinding);

					DrawingControlShape shape = new DrawingControlShape(shapeId, savedTargetID, vmlData, brush_id, false, tooltip);
					getGraphicControl().addShape(shape);
				}
			}
		}

		if (hasQuestions(data))
		{
			try
			{
				if (isAnswered(data))
					getHelper(displayAnsweredOnly).populate(data, PatientAssessmentStatusReason.INPROGRESS);
				else
					getHelper(displayAnsweredOnly).populate(data.getGraphic());
			}
			catch (PresentationLogicException e)
			{
				throw new RuntimeException("Unable to load data", e);
			}
		}
	}

	private void configureImageSelection(GraphicAssessmentVo config)
	{
		configureTabs();

		for (int x = 0; x < config.getImages().size(); x++)
		{
			GenForm.lyrAssessmentLayer.tabSelectImageContainer.grdImagesRow row = form.lyrAssessment().tabSelectImage().grdImages().getRows().newRow();
			DrawingGraphicImageVo img = config.getImages().get(x);
			if (img != null)
			{
				String imageName = img.getImageName();
				row.setValue(img);
				row.setcolImage(imageName == null ? "?" : imageName);
			}
		}
	}

	private UserAssessmentInstHelper getHelper()
	{
		return getHelper(false);
	}

	private UserAssessmentInstHelper getHelper(boolean displayAnswered)
	{
		return new UserAssessmentInstHelper(form.lyrAssessment().tabQuestions().dyngrdQuestions(), form.getImages().Core.QuestionSmall, form.getImages().Core.TextBox, form.getImages().Core.SmallNew, form.getImages().Core.SmallCancel, form.getImages().Core.MandatoryQuestion, false, displayAnswered, form.getLocalContext().getPatientInfo());
	}

	private PatientGraphicAssessmentVo getSavedGraphicAssessment(DrawingGraphicImageVo voDrawingGraphicImage, PatientAssessmentDataVo voPatientAssessmentData)
	{
		if (voPatientAssessmentData.getGraphicFindings() == null)
			return null;

		for (int i = 0; i < voPatientAssessmentData.getGraphicFindings().size(); i++)
		{
			if (voPatientAssessmentData.getGraphicFindings().get(i).getGraphicImageIsNotNull() && voPatientAssessmentData.getGraphicFindings().get(i).getGraphicImage().equals(voDrawingGraphicImage))
				return voPatientAssessmentData.getGraphicFindings().get(i);
		}
		return null;
	}

	private void convertAllAreasToNode(GraphicGroupVo voGroup, DrawingControlGroup node)
	{
		node.setName(voGroup.getGroupName());
		// convert all areas to controlgroup
		int i;
		for (i = 0; i < voGroup.getAreaCollection().size(); i++)
		{
			node.add(createDrawingControlArea(voGroup.getAreaCollection().get(i)));
		}

		for (int j = 0; j < voGroup.getChildGroups().size(); j++)
		{
			GraphicGroupVo childGroup = voGroup.getChildGroups().get(j);
			node.add(createDrawingControlGroup(childGroup));
			convertAllAreasToNode(childGroup, node.getGroup(i + j));
		}
	}

	private DrawingControlGroup createDrawingControlGroup(GraphicGroupVo voGroup)
	{
		DrawingControlGroup group = new DrawingControlGroup(voGroup.getGroupID().intValue(), voGroup.getGroupName());
		return group;
	}

	private DrawingControlArea createDrawingControlArea(GraphicAreaVo voArea)
	{
		DrawingControlArea area = new DrawingControlArea(voArea.getAreaID().intValue(), voArea.getAreaName(), voArea.getAreaVectors());
		return area;
	}

	private void initializeComponent()
	{
		form.lyrAssessment().tabStages().setHeaderVisible(false);
		form.lyrAssessment().tabSelectImage().imgPreview().setVisible(false);
		form.lyrAssessment().tabSelectImage().btnSelectImage().setEnabled(false);
	}

	private boolean isAnswered(PatientAssessmentDataVo data)
	{
		return (data != null && data.getGraphicFindingsIsNotNull() && data.getGraphicFindings().size() > 0) || (data.getGraphicQuestionIsNotNull() && data.getGraphicQuestion().size() > 0);
	}

	private boolean hasQuestions(PatientAssessmentDataVo data)
	{
		return data != null && data.getGraphicIsNotNull() && data.getGraphic().getAssociatedQuestionsIsNotNull() && data.getGraphic().getAssociatedQuestions().size() > 0;
	}

	private void configureTabs()
	{
		configureTabs(form.getLocalContext().getPatientAssessment().getAssessmentData());
	}

	private void configureTabs(PatientAssessmentDataVo data)
	{
		boolean imageSelectionTabVisible = false;
		boolean questionsTabVisible = false;
		boolean hasMultipleImages = false;

		if (data.getGraphic() != null)
		{
			if (data.getGraphic().getImages() != null)
			{
				hasMultipleImages = data.getGraphic().getImages().size() > 1;
			}

			if (hasMultipleImages && !isAnswered(data) && form.getLocalContext().getCurrentImage() == null)
			{
				imageSelectionTabVisible = true;
			}
			else
			{
				questionsTabVisible = hasQuestions(data);
			}
		}

		if (imageSelectionTabVisible)
		{
			form.lyrAssessment().tabSelectImage().setHeaderVisible(true);
			form.lyrAssessment().tabDrawing().setHeaderVisible(false);
			form.lyrAssessment().tabQuestions().setHeaderVisible(false);
			form.lyrAssessment().tabStages().setHeaderVisible(false);
			form.lyrAssessment().showtabSelectImage();
		}
		else
		{
			form.lyrAssessment().tabSelectImage().setHeaderVisible(false);
			form.lyrAssessment().tabDrawing().setHeaderVisible(true);
			form.lyrAssessment().tabQuestions().setHeaderVisible(questionsTabVisible);
			form.lyrAssessment().tabStages().setHeaderVisible(false);
			form.lyrAssessment().showtabDrawing();
		}
	}

	private DrawingControlShape getEditedShape(int index)
	{
		for (int i = 0; i < getGraphicControl().getShapes().size(); i++)
		{
			Object shapeObj = getGraphicControl().getShapes().get(i);
			if (shapeObj instanceof DrawingControlShape)
			{
				if (((DrawingControlShape) shapeObj).getIndex() == index)
					return ((DrawingControlShape) shapeObj);
			}
		}

		return null;
	}

	private void drawingImageNote(DrawingControlShape shape)
	{
		PatientAssessmentDataVo voPatAssessmentData = form.getLocalContext().getPatientAssessment().getAssessmentData();
		PatientGraphicAssessmentVo voPatientGraphicAssessment = null;
		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = null;
		DrawingGraphicImageVo voPatientGraphicAssessmentVo = form.getLocalContext().getCurrentImage();

		if (voPatientGraphicAssessmentVo == null)
			throw new CodingRuntimeException("Image not set");

		if (voPatAssessmentData == null)
			throw new CodingRuntimeException("Invalid assessment data");

		if (voPatAssessmentData.getGraphicFindings() == null)
			voPatAssessmentData.setGraphicFindings(new PatientGraphicAssessmentVoCollection());

		boolean updateDraw = false;
		for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
		{
			// Check to be in the context of the same Patient Graphic Assessment
			if (voPatAssessmentData.getGraphicFindings().get(i).getGraphicImageIsNotNull() && voPatAssessmentData.getGraphicFindings().get(i).getGraphicImage().equals(voPatientGraphicAssessmentVo))
			{
				voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
				for (int j = 0; voPatientGraphicAssessment != null && voPatientGraphicAssessment.getPatientGraphicFindingIsNotNull() && j < voPatientGraphicAssessment.getPatientGraphicFinding().size(); j++)
				{
					Integer patGraphAssFindId = voPatientGraphicAssessment.getPatientGraphicFinding().get(j).getDrawingId();
					if (patGraphAssFindId != null && patGraphAssFindId.intValue() == shape.getIndex())
					{
						if (shape.getTargetID() == savedTargetID)
						{
							voPatientGraphicAssessmentFinding = voPatientGraphicAssessment.getPatientGraphicFinding().get(j);
							voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
							voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
							// Set it back to the collection
							voPatientGraphicAssessment.getPatientGraphicFinding().set(j, voPatientGraphicAssessmentFinding);
						}
						else
						{
							voPatientGraphicAssessmentFinding = voPatientGraphicAssessment.getPatientGraphicFinding().get(j);
							voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
							voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
							// Set it back to the collection
							voPatientGraphicAssessment.getPatientGraphicFinding().set(j, voPatientGraphicAssessmentFinding);
							updateDraw = true;
							break;
						}
					}
				}

				// Set the record back to the collection
				voPatAssessmentData.getGraphicFindings().set(i, voPatientGraphicAssessment);
				break;
			}
		}

		// New Drawing
		if (updateDraw == false)
		{
			if (voPatAssessmentData.getGraphicFindings() == null)
				voPatAssessmentData.setGraphicFindings(new PatientGraphicAssessmentVoCollection());

			// Create new PatientGraphicAssessmentVo
			if (voPatientGraphicAssessment == null)
			{
				voPatientGraphicAssessment = new PatientGraphicAssessmentVo();
				voPatientGraphicAssessment.setGraphicImage(voPatientGraphicAssessmentVo);
				voPatientGraphicAssessment.setPatientGraphicFinding(new PatientGraphicAssessmentFindingVoCollection());
			}

			if (voPatientGraphicAssessment.getPatientGraphicFinding() == null)
				voPatientGraphicAssessment.setPatientGraphicFinding(new PatientGraphicAssessmentFindingVoCollection());

			voPatientGraphicAssessmentFinding = getNewGraphicFindingAssessment(shape);
			voPatientGraphicAssessment.getPatientGraphicFinding().add(voPatientGraphicAssessmentFinding);
			voPatAssessmentData.getGraphicFindings().add(voPatientGraphicAssessment);
		}

		if (voPatientGraphicAssessmentFinding != null)
		{
			PatientAssessmentVo assessment = form.getLocalContext().getPatientAssessment();
			assessment.setAssessmentData(voPatAssessmentData);

			form.getGlobalContext().Core.setPatientAssessmentFull(assessment);
			form.getGlobalContext().Core.setPatientGraphicAssessmentFinding(voPatientGraphicAssessmentFinding);

			engine.open(form.getForms().Assessment.GraphicAssessmentInstantiationFinding);
		}
	}

	// WDEV-12215
	private void drawing_ImageNote(DrawingControlShape shape)
	{
		Patient_AssessmentDataVo voPatAssessmentData = form.getLocalContext().getPatient_Assessment().getAssessmentData();
		Patient_GraphicAssessmentVo voPatientGraphicAssessment = null;
		Patient_GraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = null;
		DrawingGraphicImageVo voPatientGraphicAssessmentVo = form.getLocalContext().getCurrentImage();

		if (voPatientGraphicAssessmentVo == null)
			throw new CodingRuntimeException("Image not set");

		if (voPatAssessmentData == null)
			throw new CodingRuntimeException("Invalid assessment data");

		if (voPatAssessmentData.getGraphicFindings() == null)
			voPatAssessmentData.setGraphicFindings(new Patient_GraphicAssessmentVoCollection());

		boolean updateDraw = false;
		for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
		{
			// Check to be in the context of the same Patient Graphic Assessment
			if (voPatAssessmentData.getGraphicFindings().get(i).getGraphicImageIsNotNull() && voPatAssessmentData.getGraphicFindings().get(i).getGraphicImage().equals(voPatientGraphicAssessmentVo))
			{
				voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
				for (int j = 0; j < voPatientGraphicAssessment.getPatientGraphicFinding().size(); j++)
				{
					Integer patGraphAssFindId = voPatientGraphicAssessment.getPatientGraphicFinding().get(j).getDrawingId();
					if (patGraphAssFindId != null && patGraphAssFindId.intValue() == shape.getIndex())
					{
						if (shape.getTargetID() == savedTargetID)
						{
							voPatientGraphicAssessmentFinding = voPatientGraphicAssessment.getPatientGraphicFinding().get(j);
							voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
							voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
							// Set it back to the collection
							voPatientGraphicAssessment.getPatientGraphicFinding().set(j, voPatientGraphicAssessmentFinding);
						}
						else
						{
							voPatientGraphicAssessmentFinding = voPatientGraphicAssessment.getPatientGraphicFinding().get(j);
							voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
							voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
							// Set it back to the collection
							voPatientGraphicAssessment.getPatientGraphicFinding().set(j, voPatientGraphicAssessmentFinding);
							updateDraw = true;
							break;
						}
					}
				}

				// Set the record back to the collection
				voPatAssessmentData.getGraphicFindings().set(i, voPatientGraphicAssessment);
				break;
			}
		}

		// New Drawing
		if (updateDraw == false)
		{
			if (voPatAssessmentData.getGraphicFindings() == null)
				voPatAssessmentData.setGraphicFindings(new Patient_GraphicAssessmentVoCollection());

			// Create new PatientGraphicAssessmentVo
			if (voPatientGraphicAssessment == null)
			{
				voPatientGraphicAssessment = new Patient_GraphicAssessmentVo();
				voPatientGraphicAssessment.setGraphicImage(voPatientGraphicAssessmentVo);
				voPatientGraphicAssessment.setPatientGraphicFinding(new Patient_GraphicAssessmentFindingVoCollection());
			}

			if (voPatientGraphicAssessment.getPatientGraphicFinding() == null)
				voPatientGraphicAssessment.setPatientGraphicFinding(new Patient_GraphicAssessmentFindingVoCollection());

			voPatientGraphicAssessmentFinding = get_NewGraphicFindingAssessment(shape);
			voPatientGraphicAssessment.getPatientGraphicFinding().add(voPatientGraphicAssessmentFinding);
			voPatAssessmentData.getGraphicFindings().add(voPatientGraphicAssessment);
		}

		if (voPatientGraphicAssessmentFinding != null)
		{
			Patient_AssessmentVo assessment = form.getLocalContext().getPatient_Assessment();
			assessment.setAssessmentData(voPatAssessmentData);
			
			form.getGlobalContext().Core.setPatient_AssessmentFull(assessment);
			form.getGlobalContext().Core.setPatient_GraphicAssessmentFinding(voPatientGraphicAssessmentFinding);

			engine.open(form.getForms().Assessment.GraphicAssessmentInstantiationFinding);
		}
	}

	private Patient_GraphicAssessmentFindingVo get_NewGraphicFindingAssessment(DrawingControlShape shape)
	{
		Patient_GraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = new Patient_GraphicAssessmentFindingVo();
		voPatientGraphicAssessmentFinding.setDrawingId(new Integer(shape.getIndex()));
		voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
		voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
		// TODO to implement 1:N ?
		voPatientGraphicAssessmentFinding.setStage(new Patient_GraphicalAssessmentStageVoCollection());
		voPatientGraphicAssessmentFinding.getStage().add(new Patient_GraphicalAssessmentStageVo());
		voPatientGraphicAssessmentFinding.getStage().get(0).setFindingQuestion(get_FindingQuestion(shape.getBrushID()));

		voPatientGraphicAssessmentFinding.setGraphicFinding(get_GraphicFinding(shape.getBrushID()));
		return voPatientGraphicAssessmentFinding;
	}

	private DrawingGraphicFindingVo get_GraphicFinding(int brushId)
	{
		DrawingGraphicImageVo voDrawingGraphicImage = form.getLocalContext().getCurrentImage();

		Graphic_AssessmentFindingVoCollection findingColl = get_FindingCollection(voDrawingGraphicImage);
		Graphic_AssessmentFindingVo voGraphicAssessmentFinding = new Graphic_AssessmentFindingVo();
		if (findingColl != null)
		{
			for (int i = 0; i < findingColl.size(); i++)
			{
				if (findingColl.get(i).getFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFinding().intValue() == brushId)
				{
					voGraphicAssessmentFinding = findingColl.get(i);
					return voGraphicAssessmentFinding.getFinding();
				}
			}
		}

		return null;
	}

	private Patient_GraphicAssessmentFindingQuestionAnswerVoCollection get_FindingQuestion(int brushId)
	{
		DrawingGraphicImageVo voDrawingGraphicImage = form.getLocalContext().getCurrentImage();

		Graphic_AssessmentFindingVoCollection findingColl = get_FindingCollection(voDrawingGraphicImage);
		Graphic_AssessmentFindingQuestionVoCollection questions = null;
		Patient_GraphicAssessmentFindingQuestionAnswerVoCollection findingQuestions = new Patient_GraphicAssessmentFindingQuestionAnswerVoCollection();
		if (findingColl != null)
		{
			for (int i = 0; i < findingColl.size(); i++)
			{
				if (findingColl.get(i).getFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFinding().intValue() == brushId)
				{
					// TODO - this works for Graphical Assessment and Graphical Assessment with questions where we have
					// 1:1 relationship between GraphicAssessmentFinding and FindingStageQuestions
					// need to review for the third type of assessment
					if (findingColl.get(i).getFindingStageIsNotNull() && findingColl.get(i).getFindingStage().size() > 0)
						questions = findingColl.get(i).getFindingStage().get(0).getAssociatedQuestions();

					break;
				}
			}
		}

		if (questions != null)
		{
			for (int i = 0; i < questions.size(); i++)
			{
				Graphic_AssessmentFindingQuestionVo voFindingQuestion = questions.get(i);
				// WDEV-11366
				if (isQuestionInvalidForPatient(voFindingQuestion.getQuestion()))
					continue;
				PreActiveActiveInactiveStatus findingStatus = voFindingQuestion.getActiveStatus();
				// WDEV-1211 - Go back to configurtation for every new findings
				if (findingStatus != null && findingStatus.equals(PreActiveActiveInactiveStatus.ACTIVE))
				{

					Patient_GraphicAssessmentFindingQuestionAnswerVo voPGAFQuestion = new Patient_GraphicAssessmentFindingQuestionAnswerVo();
					voPGAFQuestion.setGraphicFindingQuestion(voFindingQuestion);
					voPGAFQuestion.setIsAnswered(new Boolean(false));
					voPGAFQuestion.setIsMandatory(voFindingQuestion.getIsMandatory());
					findingQuestions.add(voPGAFQuestion);
				}
			}
		}

		return findingQuestions;
	}

	private boolean isQuestionInvalidForPatient(Question_InformationVo question)
	{
		PatientAssessmentInfoVo patInfo = form.getLocalContext().getPatientInfo();
		if (patInfo == null)
			return false;
		if (question.getGenderSpecificIsNotNull())
		{
			if (GenderSpecific.MALE.equals(question.getGenderSpecific()) && (!patInfo.getSexIsNotNull() || !Sex.MALE.equals(patInfo.getSex())))
				return true;
			else if (GenderSpecific.FEMALE.equals(question.getGenderSpecific()) && (!patInfo.getSexIsNotNull() || !Sex.FEMALE.equals(patInfo.getSex())))
				return true;
		}
		if (question.getAgeRangeMaxIsNotNull() && (!patInfo.getAgeIsNotNull() || patInfo.getAge() > question.getAgeRangeMax()))
			return true;
		if (question.getAgeRangeMinIsNotNull() && (!patInfo.getAgeIsNotNull() || patInfo.getAge() < question.getAgeRangeMin()))
			return true;

		return false;
	}

	private Graphic_AssessmentFindingVoCollection get_FindingCollection(DrawingGraphicImageVo voDrawingGraphicImage)
	{
		return form.getLocalContext().getPatient_Assessment().getAssessmentData().getGraphic().getFindingsAndQuestions();
	}

	private String getAreaName(int targetId)
	{
		String areaName = getGraphicControl().getGroupOrAreaName(targetId);
		if (areaName == null || areaName.equals(""))
		{
			DrawingControlGroup areaGroup = getGraphicControl().getAreas();

			if (areaGroup != null)
			{
				DrawingControlAreaCollection coll = areaGroup.getAllAreas();
				for (int i = 0; i < coll.size(); i++)
				{
					if (coll.get(i).getID() == targetId)
					{
						areaName = coll.get(i).getName();
						break;
					}
				}
			}
		}

		return areaName;
	}

	private DrawingControl getGraphicControl()
	{
		return form.lyrAssessment().tabDrawing().drawingBodyChart();
	}

	private PatientGraphicAssessmentFindingVo getNewGraphicFindingAssessment(DrawingControlShape shape)
	{
		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = new PatientGraphicAssessmentFindingVo();
		voPatientGraphicAssessmentFinding.setDrawingId(new Integer(shape.getIndex()));
		voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
		voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
		// TODO to implement 1:N ?
		voPatientGraphicAssessmentFinding.setStage(new PatientGraphicalAssessmentStageVoCollection());
		voPatientGraphicAssessmentFinding.getStage().add(new PatientGraphicalAssessmentStageVo());
		voPatientGraphicAssessmentFinding.getStage().get(0).setFindingQuestion(getFindingQuestion(shape.getBrushID()));

		voPatientGraphicAssessmentFinding.setGraphicFinding(getGraphicFinding(shape.getBrushID()));
		return voPatientGraphicAssessmentFinding;
	}

	private PatientGraphicAssessmentFindingQuestionAnswerVoCollection getFindingQuestion(int brushId)
	{
		DrawingGraphicImageVo voDrawingGraphicImage = form.getLocalContext().getCurrentImage();

		GraphicAssessmentFindingVoCollection findingColl = getFindingCollection(voDrawingGraphicImage);
		GraphicAssessmentFindingQuestionVoCollection questions = null;
		PatientGraphicAssessmentFindingQuestionAnswerVoCollection findingQuestions = new PatientGraphicAssessmentFindingQuestionAnswerVoCollection();
		if (findingColl != null)
		{
			for (int i = 0; i < findingColl.size(); i++)
			{
				if (findingColl.get(i).getFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFinding().intValue() == brushId)
				{
					// TODO - this works for Graphical Assessment and Graphical Assessment with questions where we have
					// 1:1 relationship between GraphicAssessmentFinding and FindingStageQuestions
					// need to review for the third type of assessment
					if (findingColl.get(i).getFindingStageIsNotNull() && findingColl.get(i).getFindingStage().size() > 0)
						questions = findingColl.get(i).getFindingStage().get(0).getAssociatedQuestions();

					break;
				}
			}
		}

		if (questions != null)
		{
			for (int i = 0; i < questions.size(); i++)
			{
				ims.assessment.vo.GraphicAssessmentFindingQuestionVo voFindingQuestion = questions.get(i);
				// WDEV-11366
				if (isQuestionInvalidForPatient(voFindingQuestion.getQuestion()))
					continue;
				PreActiveActiveInactiveStatus findingStatus = voFindingQuestion.getActiveStatus();
				// WDEV-1211 - Go back to configurtation for every new findings
				if (findingStatus != null && findingStatus.equals(PreActiveActiveInactiveStatus.ACTIVE))
				{

					PatientGraphicAssessmentFindingQuestionAnswerVo voPGAFQuestion = new PatientGraphicAssessmentFindingQuestionAnswerVo();
					voPGAFQuestion.setGraphicFindingQuestion(voFindingQuestion);
					voPGAFQuestion.setIsAnswered(new Boolean(false));
					voPGAFQuestion.setIsMandatory(voFindingQuestion.getIsMandatory());
					findingQuestions.add(voPGAFQuestion);
				}
			}
		}

		return findingQuestions;
	}

	// WDEV-11366
	private boolean isQuestionInvalidForPatient(QuestionInformationVo question)
	{
		PatientAssessmentInfoVo patInfo = form.getLocalContext().getPatientInfo();
		if (patInfo == null)
			return false;
		if (question.getGenderSpecificIsNotNull())
		{
			if (GenderSpecific.MALE.equals(question.getGenderSpecific()) && (!patInfo.getSexIsNotNull() || !Sex.MALE.equals(patInfo.getSex())))
				return true;
			else if (GenderSpecific.FEMALE.equals(question.getGenderSpecific()) && (!patInfo.getSexIsNotNull() || !Sex.FEMALE.equals(patInfo.getSex())))
				return true;
		}
		if (question.getAgeRangeMaxIsNotNull() && (!patInfo.getAgeIsNotNull() || patInfo.getAge() > question.getAgeRangeMax()))
			return true;
		if (question.getAgeRangeMinIsNotNull() && (!patInfo.getAgeIsNotNull() || patInfo.getAge() < question.getAgeRangeMin()))
			return true;
		return false;
	}

	private DrawingGraphicFindingVo getGraphicFinding(int brushId)
	{
		DrawingGraphicImageVo voDrawingGraphicImage = form.getLocalContext().getCurrentImage();

		GraphicAssessmentFindingVoCollection findingColl = getFindingCollection(voDrawingGraphicImage);
		GraphicAssessmentFindingVo voGraphicAssessmentFinding = new GraphicAssessmentFindingVo();
		if (findingColl != null)
		{
			for (int i = 0; i < findingColl.size(); i++)
			{
				if (findingColl.get(i).getFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFinding().intValue() == brushId)
				{
					voGraphicAssessmentFinding = findingColl.get(i);
					return voGraphicAssessmentFinding.getFinding();
				}
			}
		}

		return null;
	}

	private GraphicAssessmentFindingVoCollection getFindingCollection(DrawingGraphicImageVo voDrawingGraphicImage)
	{
		return form.getLocalContext().getPatientAssessment().getAssessmentData().getGraphic().getFindingsAndQuestions();
	}

	private void removeGraphicFinding(int index)
	{
		PatientAssessmentDataVo voPatAssessmentData = form.getLocalContext().getPatientAssessment().getAssessmentData();
		DrawingGraphicImageVo voDrawingGraphicImage = form.getLocalContext().getCurrentImage();

		if (voDrawingGraphicImage == null)
			throw new CodingRuntimeException("Invalid image");

		if (voPatAssessmentData != null && voPatAssessmentData.getGraphicFindingsIsNotNull())
		{
			for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
			{
				// Check to be in the context of the same Patient Graphic Assessment
				PatientGraphicAssessmentVo voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
				if (voPatientGraphicAssessment.getGraphicImage().equals(voDrawingGraphicImage))
				{
					for (int j = 0; j < voPatientGraphicAssessment.getPatientGraphicFinding().size(); j++)
					{
						Integer patGraphAssFindId = voPatientGraphicAssessment.getPatientGraphicFinding().get(j).getDrawingId();
						if (patGraphAssFindId != null && patGraphAssFindId.intValue() == index)
						{
							// Remove it from vo
							voPatientGraphicAssessment.getPatientGraphicFinding().remove(j);
							voPatAssessmentData.getGraphicFindings().set(i, voPatientGraphicAssessment);
							PatientAssessmentVo assessment = getPatientAssessment();
							assessment.setAssessmentData(voPatAssessmentData);
							form.getLocalContext().setPatientAssessment(assessment);
							break;
						}
					}
					break;
				}
			}
		}
	}

	// WDEV-12215
	private void remove_GraphicFinding(int index)
	{
		Patient_AssessmentDataVo voPatAssessmentData = form.getLocalContext().getPatient_Assessment().getAssessmentData();
		DrawingGraphicImageVo voDrawingGraphicImage = form.getLocalContext().getCurrentImage();

		if (voDrawingGraphicImage == null)
			throw new CodingRuntimeException("Invalid image");

		if (voPatAssessmentData != null && voPatAssessmentData.getGraphicFindingsIsNotNull())
		{
			for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
			{
				// Check to be in the context of the same Patient Graphic Assessment
				Patient_GraphicAssessmentVo voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
				if (voPatientGraphicAssessment.getGraphicImage().equals(voDrawingGraphicImage))
				{
					for (int j = 0; j < voPatientGraphicAssessment.getPatientGraphicFinding().size(); j++)
					{
						Integer patGraphAssFindId = voPatientGraphicAssessment.getPatientGraphicFinding().get(j).getDrawingId();
						if (patGraphAssFindId != null && patGraphAssFindId.intValue() == index)
						{
							// Remove it from vo
							voPatientGraphicAssessment.getPatientGraphicFinding().remove(j);
							voPatAssessmentData.getGraphicFindings().set(i, voPatientGraphicAssessment);
							Patient_AssessmentVo assessment = getPatient_Assessment();
							assessment.setAssessmentData(voPatAssessmentData);
							form.getLocalContext().setPatient_Assessment(assessment);
							break;
						}
					}
					break;
				}
			}
		}
	}

	private void displaySelectedImage()
	{
		DrawingGraphicImageVo img = form.lyrAssessment().tabSelectImage().grdImages().getSelectedRow().getValue();
		if (img != null)
		{
			Image image = engine.getRegisteredImage(img.getImage().getID_AppImage().intValue());
			if (image != null)
			{
				form.lyrAssessment().tabSelectImage().imgPreview().setVisible(true);
				form.lyrAssessment().tabSelectImage().imgPreview().setValue(image);
				form.lyrAssessment().tabSelectImage().btnSelectImage().setEnabled(true);
			}
		}
	}

	public Boolean isImageSelected()
	{
		return new Boolean(form.getLocalContext().getCurrentImage() != null);
	}

	// WDEV-12215

	public Patient_AssessmentVo getPatient_Assessment()
	{
		Patient_AssessmentVo assessment = form.getLocalContext().getPatient_Assessment();

		if (assessment != null && hasQuestions(assessment.getAssessmentData()))
		{
			Patient_AssessmentDataVo data = assessment.getAssessmentData();
			data.setGraphicQuestion(getHelper().get_GraphicAnswers(data.getGraphicQuestion()));

			if (data.getGraphicFindings() == null)
			{
				Patient_GraphicAssessmentVoCollection emptyFindings = new Patient_GraphicAssessmentVoCollection();
				Patient_GraphicAssessmentVo emptyFinding = new Patient_GraphicAssessmentVo();
				emptyFinding.setGraphicImage(form.getLocalContext().getCurrentImage());
				emptyFindings.add(emptyFinding);
				emptyFinding.setPatientGraphicFinding(new Patient_GraphicAssessmentFindingVoCollection());
				data.setGraphicFindings(emptyFindings);
			}

			assessment.setAssessmentData(data);
			form.getLocalContext().setPatient_Assessment(assessment);
		}

		return assessment;
	}

	private void configureDrawing(Patient_AssessmentDataVo data, boolean displayAnsweredOnly)
	{
		Graphic_AssessmentVo config = data.getGraphic();
		DrawingGraphicImageVo image = null;

		if (!isAnswered(data))
		{
			if (config.getImages() == null || config.getImages().size() == 0)
				throw new RuntimeException("No image(s) configured");

			if (config.getImages().size() > 1)
			{
				if (form.getLocalContext().getCurrentImage() == null)
				{
					configureImageSelection(config);
					return;
				}
				else
				{
					image = form.getLocalContext().getCurrentImage();
				}
			}
			else
			{
				image = config.getImages().get(0);
			}
		}
		else
		{
			if (data.getGraphicFindings() == null || data.getGraphicFindings().size() == 0)
			{
				// WDEV-11947-Start
				if (config.getImages() == null || config.getImages().size() == 0)
					throw new RuntimeException("No image(s) configured");

				if (config.getImages().size() > 1)
				{
					if (form.getLocalContext().getCurrentImage() == null)
					{
						configureImageSelection(config);
						return;
					}
					else
					{
						image = form.getLocalContext().getCurrentImage();
					}
				}

				else
				{
					image = config.getImages().get(0);
				}
				// WDEV-11947-End
			}
			else
			{
				image = data.getGraphicFindings().get(0).getGraphicImage();
			}
		}

		if (image == null)
			throw new RuntimeException("No image found");

		engine.getRegisteredImage(image.getImage().getID_AppImage().intValue());

		Image img = engine.getRegisteredImage(image.getImage().getID_AppImage().intValue());
		if (img == null)
			img = form.getImages().GeneralMedical.Blank;

		form.getLocalContext().setCurrentImage(image);
		getGraphicControl().setImage(img);

		configureTabs(data);

		if (isAnswered(data))
			set_DrawingIds();

		// Brushes
		setBrushes(data.getGraphic().getFindingsAndQuestions());

		// Areas
		DrawingControlGroup root = null;
		if (image != null && image.getRootGroupIsNotNull())
		{
			root = new DrawingControlGroup(image.getRootGroup().getGroupID().intValue(), image.getRootGroup().getGroupName());
			convertAllAreasToNode(image.getRootGroup(), root);
		}
		else
		{
			root = new DrawingControlGroup(-1, " ");
		}

		getGraphicControl().setAreas(root);

		// Shapes
		Patient_GraphicAssessmentVo voPatientGraphicassessment = getSavedGraphicAssessment(image, data);
		if (voPatientGraphicassessment != null && voPatientGraphicassessment.getPatientGraphicFindingIsNotNull())
		{
			for (int i = 0; i < voPatientGraphicassessment.getPatientGraphicFinding().size(); i++)
			{
				Patient_GraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = voPatientGraphicassessment.getPatientGraphicFinding().get(i);
				DrawingGraphicFindingVo voDrawingGraphicFinding = voPatientGraphicAssessmentFinding.getGraphicFinding();

				String vmlData = voPatientGraphicAssessmentFinding.getAreaDrawn();
				// Findings
				if (voDrawingGraphicFinding != null && vmlData != null)
				{
					int shapeId = voPatientGraphicAssessmentFinding.getDrawingId().intValue();
					int brush_id = voDrawingGraphicFinding.getID_DrawingGraphicFinding().intValue();
					String tooltip = UserAssessmentInstHelper.getGraphicAssessmentFindingTooltip(voPatientGraphicAssessmentFinding);

					DrawingControlShape shape = new DrawingControlShape(shapeId, savedTargetID, vmlData, brush_id, false, tooltip);
					getGraphicControl().addShape(shape);
				}
			}
		}

		if (hasQuestions(data))
		{
			try
			{
				if (isAnswered(data))
					getHelper(displayAnsweredOnly).populate(data, PatientAssessmentStatusReason.INPROGRESS);
				else
					getHelper(displayAnsweredOnly).populate(data.getGraphic());
			}
			catch (PresentationLogicException e)
			{
				throw new RuntimeException("Unable to load data", e);
			}
		}
	}

	private Patient_GraphicAssessmentVo getSavedGraphicAssessment(DrawingGraphicImageVo voDrawingGraphicImage, Patient_AssessmentDataVo voPatientAssessmentData)
	{
		if (voPatientAssessmentData.getGraphicFindings() == null)
			return null;

		for (int i = 0; i < voPatientAssessmentData.getGraphicFindings().size(); i++)
		{
			if (voPatientAssessmentData.getGraphicFindings().get(i).getGraphicImageIsNotNull() && voPatientAssessmentData.getGraphicFindings().get(i).getGraphicImage().equals(voDrawingGraphicImage))
				return voPatientAssessmentData.getGraphicFindings().get(i);
		}

		return null;
	}

	private boolean isAnswered(Patient_AssessmentDataVo data)
	{
		return (data != null && data.getGraphicFindingsIsNotNull() && data.getGraphicFindings().size() > 0) || (data.getGraphicQuestionIsNotNull() && data.getGraphicQuestion().size() > 0);
	}

	private void configureImageSelection(Graphic_AssessmentVo config)
	{
		configure_Tabs();

		for (int x = 0; x < config.getImages().size(); x++)
		{
			GenForm.lyrAssessmentLayer.tabSelectImageContainer.grdImagesRow row = form.lyrAssessment().tabSelectImage().grdImages().getRows().newRow();
			DrawingGraphicImageVo img = config.getImages().get(x);
			if (img != null)
			{
				String imageName = img.getImageName();
				row.setValue(img);
				row.setcolImage(imageName == null ? "?" : imageName);
			}
		}
	}

	private void configure_Tabs()
	{
		configureTabs(form.getLocalContext().getPatient_Assessment().getAssessmentData());
	}

	private void configureTabs(Patient_AssessmentDataVo data)
	{
		boolean imageSelectionTabVisible = false;
		boolean questionsTabVisible = false;
		boolean hasMultipleImages = false;

		if (data.getGraphic() != null)
		{
			if (data.getGraphic().getImages() != null)
			{
				hasMultipleImages = data.getGraphic().getImages().size() > 1;
			}

			if (hasMultipleImages && !isAnswered(data) && form.getLocalContext().getCurrentImage() == null)
			{
				imageSelectionTabVisible = true;
			}
			else
			{
				questionsTabVisible = hasQuestions(data);
			}
		}

		if (imageSelectionTabVisible)
		{
			form.lyrAssessment().tabSelectImage().setHeaderVisible(true);
			form.lyrAssessment().tabDrawing().setHeaderVisible(false);
			form.lyrAssessment().tabQuestions().setHeaderVisible(false);
			form.lyrAssessment().tabStages().setHeaderVisible(false);
			form.lyrAssessment().showtabSelectImage();
		}
		else
		{
			form.lyrAssessment().tabSelectImage().setHeaderVisible(false);
			form.lyrAssessment().tabDrawing().setHeaderVisible(true);
			form.lyrAssessment().tabQuestions().setHeaderVisible(questionsTabVisible);
			form.lyrAssessment().tabStages().setHeaderVisible(false);
			form.lyrAssessment().showtabDrawing();
		}
	}

	private boolean hasQuestions(Patient_AssessmentDataVo data)
	{
		return data != null && data.getGraphicIsNotNull() && data.getGraphic().getAssociatedQuestionsIsNotNull() && data.getGraphic().getAssociatedQuestions().size() > 0;
	}

	private void set_DrawingIds()
	{
		Patient_AssessmentVo assessment = form.getLocalContext().getPatient_Assessment();
		Patient_AssessmentDataVo voPatientAssessmentData = assessment.getAssessmentData();

		if (voPatientAssessmentData != null && voPatientAssessmentData.getGraphicFindingsIsNotNull())
		{
			for (int j = 0; j < voPatientAssessmentData.getGraphicFindings().size(); j++)
			{
				for (int i = 0; i < voPatientAssessmentData.getGraphicFindings().get(j).getPatientGraphicFinding().size(); i++)
				{
					voPatientAssessmentData.getGraphicFindings().get(j).getPatientGraphicFinding().get(i).setDrawingId(voPatientAssessmentData.getGraphicFindings().get(j).getPatientGraphicFinding().get(i).getID_PatientGraphicAssessmentFinding());
				}
			}
		}

		assessment.setAssessmentData(voPatientAssessmentData);

		form.getLocalContext().setPatient_Assessment(assessment);
	}

	private void setBrushes(GraphicAssessmentFindingVoCollection findingColl)
	{
		getGraphicControl().clearBrushes();

		if (findingColl != null)
		{
			findingColl.sort();
			for (int i = 0; i < findingColl.size(); i++)
			{
				DrawingGraphicFindingVo voDrawingGraphicFinding = findingColl.get(i).getFinding();
				// Findings
				Integer id = voDrawingGraphicFinding.getID_DrawingGraphicFinding();
				String text = voDrawingGraphicFinding.getDisplayText();
				String tooltip = voDrawingGraphicFinding.getDescription();
				Image img = voDrawingGraphicFinding.getImageIsNotNull() ? engine.getRegisteredImage(voDrawingGraphicFinding.getImage().getID_AppImage().intValue()) : null;
				Color colour = voDrawingGraphicFinding.getColourIsNotNull() ? voDrawingGraphicFinding.getColour() : null;
				boolean multipleMarkings = voDrawingGraphicFinding.getIsSingleMarkIsNotNull() && voDrawingGraphicFinding.getIsSingleMark().booleanValue() ? false : true;

				if (img != null)
				{
					getGraphicControl().addBrush(id.intValue(), text, img, multipleMarkings, tooltip);
				}

				if (colour != null)
				{
					getGraphicControl().addBrush(id.intValue(), text, colour, multipleMarkings, tooltip);
				}
			}
		}
		else
		{
			// Set default brush
			getGraphicControl().addBrush(-1, "", Color.White);
		}
	}


	private void setBrushes(Graphic_AssessmentFindingVoCollection findingColl)
	{
		getGraphicControl().clearBrushes();

		if (findingColl != null)
		{
			findingColl.sort();
			for (int i = 0; i < findingColl.size(); i++)
			{
				DrawingGraphicFindingVo voDrawingGraphicFinding = findingColl.get(i).getFinding();
				// Findings
				Integer id = voDrawingGraphicFinding.getID_DrawingGraphicFinding();
				String text = voDrawingGraphicFinding.getDisplayText();
				String tooltip = voDrawingGraphicFinding.getDescription();
				Image img = voDrawingGraphicFinding.getImageIsNotNull() ? engine.getRegisteredImage(voDrawingGraphicFinding.getImage().getID_AppImage().intValue()) : null;
				Color colour = voDrawingGraphicFinding.getColourIsNotNull() ? voDrawingGraphicFinding.getColour() : null;
				boolean multipleMarkings = voDrawingGraphicFinding.getIsSingleMarkIsNotNull() && voDrawingGraphicFinding.getIsSingleMark().booleanValue() ? false : true;

				if (img != null)
				{
					getGraphicControl().addBrush(id.intValue(), text, img, multipleMarkings, tooltip);
				}

				if (colour != null)
				{
					getGraphicControl().addBrush(id.intValue(), text, colour, multipleMarkings, tooltip);
				}
			}
		}
		else
		{
			// Set default brush
			getGraphicControl().addBrush(-1, "", Color.White);
		}
	}

	public String[] validateData()
	{
		PatientAssessmentDataVo data = form.getLocalContext().getPatientAssessment().getAssessmentData();

		ArrayList<String> errorsList = new ArrayList<String>();
	
		if (data.getGraphicFindings() == null || data.getGraphicFindings().size() == 0)
			errorsList.add("No finding recorded");

		String[] errors = getHelper().validateAllGraphicQuestions(data);
		if (errors != null)
		{
			for (int x = 0; x < errors.length; x++)
			{
				errorsList.add(errors[x]);
			}
		}
		
		return errorsList.toArray(new String[errorsList.size()]);
	}

	public String[] validate_Data()
	{
		Patient_AssessmentDataVo data = form.getLocalContext().getPatient_Assessment().getAssessmentData();

		ArrayList<String> errorsList = new ArrayList<String>();
		
		if (data.getGraphicFindings() == null || data.getGraphicFindings().size() == 0)
			errorsList.add("No finding recorded");

		String[] errors = getHelper().validateAllGraphicQuestions(data);
		if (errors != null)
		{
			for (int x = 0; x < errors.length; x++)
			{
				errorsList.add(errors[x]);
			}
		}

		return errorsList.toArray(new String[errorsList.size()]);
	}
}
