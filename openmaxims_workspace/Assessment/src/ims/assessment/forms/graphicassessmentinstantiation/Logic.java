//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2389.25607)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.graphicassessmentinstantiation;

import ims.assessment.helper.DynamicAssessmentHelper;
import ims.assessment.helper.UserAssessmentInstHelper;
import ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection;
import ims.assessment.vo.GraphicAssessmentFindingVo;
import ims.assessment.vo.GraphicAssessmentFindingVoCollection;
import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingQuestionAnswerVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingQuestionAnswerVoCollection;
import ims.assessment.vo.PatientGraphicAssessmentFindingVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingVoCollection;
import ims.assessment.vo.PatientGraphicAssessmentVo;
import ims.assessment.vo.PatientGraphicAssessmentVoCollection;
import ims.assessment.vo.PatientGraphicalAssessmentStageVo;
import ims.assessment.vo.PatientGraphicalAssessmentStageVoCollection;
import ims.assessment.vo.PatientUserDefinedObjectVo;
import ims.assessment.vo.UserDefinedObjectComponentVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.DrawingGraphicFindingVo;
import ims.core.vo.DrawingGraphicImageVo;
import ims.core.vo.GraphicAreaVo;
import ims.core.vo.GraphicGroupVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PatientAssessmentStatusReasonCollection;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.controls.DrawingControlArea;
import ims.framework.controls.DrawingControlAreaCollection;
import ims.framework.controls.DrawingControlGroup;
import ims.framework.controls.DrawingControlShape;
import ims.framework.controls.DynamicGridCell;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (result.equals(DialogResult.OK))
		{
			if (formName.equals(form.getForms().Assessment.GraphicAssessmentInstantiationFinding))
			{
				PatientAssessmentDataVo voPatAssessmentData = form.getLocalContext().getCurrentPatientAssessmentData();
				PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = form.getGlobalContext().Core.getPatientGraphicAssessmentFinding();
				DrawingGraphicImageVo voDrawingGraphicImage = form.cmbImages().getValue();
				if (voPatAssessmentData != null && voPatAssessmentData.getGraphicFindingsIsNotNull())
				{
					for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
					{
						//Check to be in the context of the same Patient Graphic Assessment
						PatientGraphicAssessmentVo voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
						if (voPatientGraphicAssessment.getGraphicImageIsNotNull() && voPatientGraphicAssessment.getGraphicImage().equals(voDrawingGraphicImage))
						{
							int index = voPatientGraphicAssessment.getPatientGraphicFinding().indexOf(voPatientGraphicAssessmentFinding);
							if (index >= 0)
								voPatAssessmentData.getGraphicFindings().get(i).getPatientGraphicFinding().set(index, voPatientGraphicAssessmentFinding);
							else
								voPatAssessmentData.getGraphicFindings().get(i).getPatientGraphicFinding().add(voPatientGraphicAssessmentFinding);

							form.getLocalContext().setCurrentPatientAssessmentData(voPatAssessmentData);
							break;
						}
					}
				}
			}
		}
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
		//getHelper().notifyFormModeChange(form.getMode());
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		//PatientAssessmentDataVo data = form.getLocalContext().getCurrentPatientAssessmentData();
		//PatientAssessmentVo voPatientAssessment = form.getLocalContext().getCurrentPatientAssessment();
		//populateAssociatedQuestionGrid(data, voPatientAssessment);
	}

	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		//WDEV-2301 
		returnToParent();
	}
	
	//WDEV-2301 
	private void returnToParent()
	{
		if (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
			engine.open(form.getGlobalContext().Clinical.getReturnToFormName());		
		else
			engine.open(form.getForms().Assessment.PatientAssessment);		
	}
	
	private boolean isFormOpenedFromPatientAssessment()
	{
		FormName formName = form.getGlobalContext().Clinical.getReturnToFormName();
		return formName != null && formName.equals(form.getForms().Assessment.PatientAssessment);
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (isNewComponent())
			engine.open(form.getForms().Assessment.PatientAssessment);
		else
		{
			setInitialLocalContextData();
			form.setMode(FormMode.VIEW);
			open();
		}
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			form.setMode(FormMode.VIEW);
			open();
		}
	}

	protected void onDrawingImageNote(DrawingControlShape shape)
	{
		drawingImageNote(shape);
	}

	protected void onDrawingImageQuestionsRemoved(int index) throws ims.framework.exceptions.PresentationLogicException
	{
		removeGraphicFinding(index);
	}

	protected void onDrawingImageRemoved(int index)
	{
		removeGraphicFinding(index);
	}

	/**
	 * @param index
	 */
	private void removeGraphicFinding(int index)
	{
		PatientAssessmentDataVo voPatAssessmentData = form.getLocalContext().getCurrentPatientAssessmentData();
		DrawingGraphicImageVo voDrawingGraphicImage = form.cmbImages().getValue();

		if (voDrawingGraphicImage == null)
		{
			engine.showMessage("Please select an Image");
			form.cmbImages().setFocus();
			return;
		}

		if (voPatAssessmentData != null && voPatAssessmentData.getGraphicFindingsIsNotNull())
		{
			for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
			{
				//Check to be in the context of the same Patient Graphic Assessment
				PatientGraphicAssessmentVo voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
				if (voPatientGraphicAssessment.getGraphicImage().equals(voDrawingGraphicImage))
				{
					for (int j = 0; j < voPatientGraphicAssessment.getPatientGraphicFinding().size(); j++)
					{
						Integer patGraphAssFindId = voPatientGraphicAssessment.getPatientGraphicFinding().get(j).getDrawingId();
						if (patGraphAssFindId != null && patGraphAssFindId.intValue() == index)
						{
							//Remove it from vo
							voPatientGraphicAssessment.getPatientGraphicFinding().remove(j);
							voPatAssessmentData.getGraphicFindings().set(i, voPatientGraphicAssessment);
							form.getLocalContext().setCurrentPatientAssessmentData(voPatAssessmentData);
							break;
						}
					}
					break;
				}
			}
		}
	}

	private void drawingImageNote(DrawingControlShape shape)
	{
		PatientAssessmentDataVo voPatAssessmentData = form.getLocalContext().getCurrentPatientAssessmentData();
		PatientGraphicAssessmentVo voPatientGraphicAssessment = null;
		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = null;
		DrawingGraphicImageVo voPatientGraphicAssessmentVo = form.cmbImages().getValue();

		if (voPatientGraphicAssessmentVo == null)
		{
			engine.showMessage("Please select an Image");
			form.cmbImages().setFocus();
			return;
		}

		if (voPatAssessmentData == null)
			return;

		boolean updateDraw = false;
		for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
		{
			//Check to be in the context of the same Patient Graphic Assessment
			if (voPatAssessmentData.getGraphicFindings().get(i).getGraphicImageIsNotNull() && voPatAssessmentData.getGraphicFindings().get(i).getGraphicImage().equals(voPatientGraphicAssessmentVo))
			{
				voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
				for (int j = 0; j < voPatientGraphicAssessment.getPatientGraphicFinding().size(); j++)
				{
					Integer patGraphAssFindId = voPatientGraphicAssessment.getPatientGraphicFinding().get(j).getDrawingId();
					if (patGraphAssFindId != null && patGraphAssFindId.intValue() == shape.getIndex())
					{
						if (shape.getTargetID() == savedTargetID)
						{
							voPatientGraphicAssessmentFinding = voPatientGraphicAssessment.getPatientGraphicFinding().get(j);
							voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
							voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
							//Set it back to the collection
							voPatientGraphicAssessment.getPatientGraphicFinding().set(j, voPatientGraphicAssessmentFinding);
						}
						else
						{
							voPatientGraphicAssessmentFinding = voPatientGraphicAssessment.getPatientGraphicFinding().get(j);
							voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
							voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
							//Set it back to the collection
							voPatientGraphicAssessment.getPatientGraphicFinding().set(j, voPatientGraphicAssessmentFinding);
							updateDraw = true;
							break;
						}
					}
				}

				//Set the record back to the collection
				voPatAssessmentData.getGraphicFindings().set(i, voPatientGraphicAssessment);
				break;
			}
		}

		//New Drawing 
		if (updateDraw == false)
		{
			if (voPatAssessmentData.getGraphicFindings() == null)
				voPatAssessmentData.setGraphicFindings(new PatientGraphicAssessmentVoCollection());

			//Create new PatientGraphicAssessmentVo
			if (voPatientGraphicAssessment == null)
			{
				voPatientGraphicAssessment = new PatientGraphicAssessmentVo();
				voPatientGraphicAssessment.setGraphicImage(voPatientGraphicAssessmentVo);
				voPatientGraphicAssessment.setPatientGraphicFinding(new PatientGraphicAssessmentFindingVoCollection());
			}

			if (voPatientGraphicAssessment.getPatientGraphicFinding() == null)
				voPatientGraphicAssessment.setPatientGraphicFinding(new PatientGraphicAssessmentFindingVoCollection());

			voPatientGraphicAssessmentFinding = getNewGraphicFindingAssessment(shape);
			voPatientGraphicAssessment.getPatientGraphicFinding().add(voPatientGraphicAssessmentFinding);
			voPatAssessmentData.getGraphicFindings().add(voPatientGraphicAssessment);
		}

		if (voPatientGraphicAssessmentFinding != null)
		{
			form.getGlobalContext().Core.setPatientGraphicAssessmentFinding(voPatientGraphicAssessmentFinding);
			form.getLocalContext().setCurrentPatientAssessmentData(voPatAssessmentData);
			PatientAssessmentVo voPatAssessment = form.getLocalContext().getCurrentPatientAssessment();
			voPatAssessment.setAssessmentData(voPatAssessmentData);
			form.getGlobalContext().Core.setPatientAssessmentFull(voPatAssessment);
			engine.open(form.getForms().Assessment.GraphicAssessmentInstantiationFinding);
		}
	}

	private PatientGraphicAssessmentFindingVo getNewGraphicFindingAssessment(DrawingControlShape shape)
	{
		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = new PatientGraphicAssessmentFindingVo();
		voPatientGraphicAssessmentFinding.setDrawingId(new Integer(shape.getIndex()));
		voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
		voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
		//TODO to implement 1:N ?
		voPatientGraphicAssessmentFinding.setStage(new PatientGraphicalAssessmentStageVoCollection());
		voPatientGraphicAssessmentFinding.getStage().add(new PatientGraphicalAssessmentStageVo());
		voPatientGraphicAssessmentFinding.getStage().get(0).setFindingQuestion(getFindingQuestion(shape.getBrushID()));

		voPatientGraphicAssessmentFinding.setGraphicFinding(getGraphicFinding(shape.getBrushID()));
		return voPatientGraphicAssessmentFinding;
	}

	private DrawingGraphicFindingVo getGraphicFinding(int brushId)
	{
		DrawingGraphicImageVo voDrawingGraphicImage = form.cmbImages().getValue();
		GraphicAssessmentFindingVoCollection findingColl = getFindingCollection(voDrawingGraphicImage);
		GraphicAssessmentFindingVo voGraphicAssessmentFinding = new GraphicAssessmentFindingVo();
		if (findingColl != null)
		{
			for (int i = 0; i < findingColl.size(); i++)
			{
				if (findingColl.get(i).getFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFinding().intValue() == brushId)
				{
					voGraphicAssessmentFinding = findingColl.get(i);
					return voGraphicAssessmentFinding.getFinding();
				}
			}
		}

		return null;
	}

	protected void onDrawingImageQuestionsEdited(int index) throws ims.framework.exceptions.PresentationLogicException
	{
		DrawingControlShape shape = getEditedShape(index);
		if (shape == null)
			throw new CodingRuntimeException("Cannot edit a null shape");
		drawingImageNote(shape);
	}

	private String getAreaName(int targetId)
	{
		String areaName = form.lyrDetails().tabImages().drawingImageQuestions().getGroupOrAreaName(targetId);
		if (areaName == null || areaName.equals(""))
		{
			DrawingControlGroup areaGroup = form.lyrDetails().tabImages().drawingImageQuestions().getAreas();

			if (areaGroup != null)
			{
				DrawingControlAreaCollection coll = areaGroup.getAllAreas();
				for (int i = 0; i < coll.size(); i++)
				{
					if (coll.get(i).getID() == targetId)
					{
						areaName = coll.get(i).getName();
						break;
					}
				}
			}
		}

		return areaName;
	}

	private DrawingControlShape getEditedShape(int index)
	{
		for (int i = 0; i < form.lyrDetails().tabImages().drawingImageQuestions().getShapes().size(); i++)
		{
			Object shapeObj = form.lyrDetails().tabImages().drawingImageQuestions().getShapes().get(i);
			if (shapeObj instanceof DrawingControlShape)
			{
				if (((DrawingControlShape) shapeObj).getIndex() == index)
					return ((DrawingControlShape) shapeObj);
			}
		}

		return null;
	}

	protected void onDrawingImageQuestionsNote(DrawingControlShape shape) throws ims.framework.exceptions.PresentationLogicException
	{
		drawingImageNote(shape);
	}

	protected void onDyngrdQuestionsCellButtonClicked(DynamicGridCell cell)
	{
		getHelper().addOrRemoveAnswer(cell);
	}

	private boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		if (uiErrors())
			return false;

		PatientAssessmentVo voPatientAssessment = form.getLocalContext().getCurrentPatientAssessment();
		
		PatientAssessmentVo initialAssessment = form.getLocalContext().getInitialPatientAssessment();
		PatientAssessmentDataVo voPatientAssessmentData = form.getLocalContext().getCurrentPatientAssessmentData();
		voPatientAssessmentData = populateDataFromScreen(voPatientAssessmentData, voPatientAssessment);
		voPatientAssessment = setAuthoringForAnswers(initialAssessment, voPatientAssessment);
		
		String[] questionValidationErrors = getQuestionValidationErrors(voPatientAssessmentData);
		String[] errors = voPatientAssessmentData.validate(questionValidationErrors);
	
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		voPatientAssessment.setAssessmentData(voPatientAssessmentData);

		errors = voPatientAssessment.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			voPatientAssessment = domain.savePatientAssessment(voPatientAssessment);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			setInitialLocalContextData();
			form.setMode(FormMode.VIEW);
			open();
			return false;
		}
		form.getLocalContext().setCurrentPatientAssessmentData(voPatientAssessment.getAssessmentData());
		form.getLocalContext().setCurrentPatientAssessment(voPatientAssessment);
		form.getLocalContext().setInitialPatientAssessment(voPatientAssessment != null?(PatientAssessmentVo)voPatientAssessment.clone():null);
		form.getGlobalContext().Clinical.PatientAssessment.setSelectedAssessment(voPatientAssessment);
		return true;
	}

	private PatientAssessmentVo setAuthoringForAnswers(PatientAssessmentVo initialAssessment,  PatientAssessmentVo currentAssessment)
	{
		return DynamicAssessmentHelper.populateHCPDataForAnswers(initialAssessment, currentAssessment, (HcpLiteVo)domain.getHcpLiteUser(), new DateTime());
	}

	private String[] getQuestionValidationErrors(PatientAssessmentDataVo voPatientAssessmentData)
	{
		String[] errors = null;
		if (form.cmbStatus().getValue().equals(PatientAssessmentStatusReason.COMPLETED))
		{
			errors = getHelper().validateAllGraphicQuestions(voPatientAssessmentData);
		}

		return errors;
	}

	protected ims.assessment.vo.PatientAssessmentDataVo populateDataFromScreen(ims.assessment.vo.PatientAssessmentDataVo voPatientAssessmentData, PatientAssessmentVo voPatientAssessment)
	{
		populateAssociatedQuestionsData(voPatientAssessmentData);
		
		PatientAssessmentStatusReason status = form.cmbStatus().getValue();
		voPatientAssessment.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		voPatientAssessment.setStatus(status);
		voPatientAssessment.setStatusReason(form.cmbReason().getValue());
		if(status != null && status.equals(PatientAssessmentStatusReason.COMPLETED))
		{
			AuthoringInformationVo confirmingInfo = form.customControlCompleted().getValue();
			if(confirmingInfo != null)
			{
				voPatientAssessment.setCompletedHCP(confirmingInfo.getAuthoringHcp());
				voPatientAssessment.setCompletedDateTime(confirmingInfo.getAuthoringDateTime());
			}
		}
		
		return voPatientAssessmentData;
	}

	protected void onCmbImagesValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		imagesValueChanged();
	}

	protected void onCmbStatusValueChanged()
	{
		cmbStatusValueChanged();
	}

	private void imagesValueChanged()
	{
		DrawingGraphicImageVo voDrawingGraphicImage = form.cmbImages().getValue();
		PatientAssessmentDataVo voPatientAssessmentData = form.getLocalContext().getCurrentPatientAssessmentData();
		GraphicAssessmentFindingVoCollection findingColl = getFindingCollection(voDrawingGraphicImage);
		if (voPatientAssessmentData != null && voPatientAssessmentData.getGraphicFindingsIsNotNull())
		{
			PatientGraphicAssessmentVo voGraphicAssessment = getSavedGraphicAssessment(voDrawingGraphicImage, voPatientAssessmentData);
			loadImage(voDrawingGraphicImage, voGraphicAssessment, findingColl);
		}
	}

	private GraphicAssessmentFindingVoCollection getFindingCollection(DrawingGraphicImageVo voDrawingGraphicImage)
	{
		UserDefinedObjectComponentVo voUserDefComp = getEditedComponent();
		if (voUserDefComp != null && voUserDefComp.getGraphicIsNotNull() && voUserDefComp.getGraphic().getImagesIsNotNull())
		{
			for (int i = 0; i < voUserDefComp.getGraphic().getImages().size(); i++)
			{
				if (voUserDefComp.getGraphic().getImages().get(i).equals(voDrawingGraphicImage))
				{
					return voUserDefComp.getGraphic().getFindingsAndQuestions();
				}
			}
		}

		return null;
	}

	private PatientGraphicAssessmentVo getSavedGraphicAssessment(DrawingGraphicImageVo voDrawingGraphicImage, PatientAssessmentDataVo voPatientAssessmentData)
	{
		if (voPatientAssessmentData.getGraphicFindings() == null)
			return null;

		for (int i = 0; i < voPatientAssessmentData.getGraphicFindings().size(); i++)
		{
			if (voPatientAssessmentData.getGraphicFindings().get(i).getGraphicImageIsNotNull() && voPatientAssessmentData.getGraphicFindings().get(i).getGraphicImage().equals(voDrawingGraphicImage))
				return voPatientAssessmentData.getGraphicFindings().get(i);
		}
		return null;
	}

	//----- Private Methods --------
	private void initialize()
	{
		if (form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment() == null)
			throw new CodingRuntimeException("SelectedAssessment global context is mandatory");

		setInitialLocalContextData();
		showCurrentTab();
		populateCombos();
		setInitialComponentsSettings();
		setInitialScreenMode();
	}

	private void setInitialLocalContextData()
	{
		PatientAssessmentVo voPatientAssessment = domain.getPatientAssessment(form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment());
		form.getLocalContext().setInitialPatientAssessment(voPatientAssessment != null ?(PatientAssessmentVo)voPatientAssessment.clone():null);
		form.getLocalContext().setCurrentPatientAssessment(voPatientAssessment);
		form.getLocalContext().setCurrentPatientAssessmentData(voPatientAssessment.getAssessmentData());
	}

	private void open() throws ims.framework.exceptions.PresentationLogicException
	{
		PatientAssessmentDataVo data = form.getLocalContext().getCurrentPatientAssessmentData();
		PatientAssessmentVo voPatientAssessment = form.getLocalContext().getCurrentPatientAssessment();
		if (data != null)
		{
			//Answer saved
			if (isAnswered(data))
			{
				setDrawingIds();
				populateScreenFromData();
				populateAssociatedQuestionGrid(data, voPatientAssessment);
			}
			else
			{
				if (form.getGlobalContext().Clinical.PatientAssessment.getEditedComponent() == null)
					throw new RuntimeException("User defined object component not found");

				UserDefinedObjectComponentVo voUserDefinedObjectComponent = getEditedComponent();
				getHelper().populate(voUserDefinedObjectComponent);
				populateScreenFromData();
			}
		}
	}

	private void populateAssociatedQuestionGrid(PatientAssessmentDataVo data, PatientAssessmentVo voPatientAssessment) throws PresentationLogicException
	{
		UserAssessmentInstHelper helper = getHelper(form.getMode().equals(FormMode.VIEW));
		helper.populate(data, voPatientAssessment != null ? voPatientAssessment.getStatus() : null);
	}

	/**
	 * @param data
	 * @return
	 */
	private boolean isAnswered(PatientAssessmentDataVo data)
	{
		return (data != null && data.getGraphicFindingsIsNotNull() && data.getGraphicFindings().size() > 0) || (data.getGraphicQuestionIsNotNull() && data.getGraphicQuestion().size() > 0);
	}

	private void showCurrentTab()
	{
		if (hasAssociatedQuestions())
		{
			form.lyrDetails().showtabImages();
			form.lyrDetails().tabImages().setHeaderVisible(true);
			form.lyrDetails().tabQuestions().setHeaderVisible(true);
		}
		else
		{
			form.lyrDetails().showtabImages();
			form.lyrDetails().tabImages().setHeaderVisible(true);
			form.lyrDetails().tabQuestions().setHeaderVisible(false);
		}
	}

	private void populateCombos()
	{
		//Image Combo
		UserDefinedObjectComponentVo voUserDefComp = getEditedComponent();
		if (voUserDefComp != null && voUserDefComp.getGraphicIsNotNull() && voUserDefComp.getGraphic().getImagesIsNotNull())
		{
			voUserDefComp.getGraphic().getImages().sort();
			for (int i = 0; i < voUserDefComp.getGraphic().getImages().size(); i++)
			{
				DrawingGraphicImageVo voImage = voUserDefComp.getGraphic().getImages().get(i);
				form.cmbImages().newRow(voImage, voImage.getImageName());
				if (i == 0)
					form.cmbImages().setValue(voImage);
			}
		}

		loadStatusCombo(false);
	}

	private void loadStatusCombo(boolean removeNonCommenced)
	{
		//Status
		form.cmbStatus().clear();
		PatientAssessmentStatusReasonCollection voColl = LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if (voColl.get(i).getParent() == null)
			{
				if(removeNonCommenced && voColl.get(i).equals(PatientAssessmentStatusReason.NOTCOMMENCED))
					continue;
					
				form.cmbStatus().newRow(voColl.get(i), voColl.get(i).toString());
			}
		}
	}

	private void loadImage(DrawingGraphicImageVo drawingGraphicImageVo, PatientGraphicAssessmentVo voPatientGraphicassessment, GraphicAssessmentFindingVoCollection findingColl)
	{
		form.lyrDetails().tabImages().drawingImageQuestions().clearShapes();
		form.lyrDetails().tabImages().drawingImageQuestions().clearBrushes();
		form.lyrDetails().tabImages().drawingImageQuestions().setPrintSubTitle("Graphic Image");

		// IMAGE
		Image img = null;
		if (drawingGraphicImageVo != null && drawingGraphicImageVo.getImageIsNotNull())
			img = engine.getRegisteredImage(drawingGraphicImageVo.getImage().getID_AppImage().intValue());
		else
			img = form.getImages().GeneralMedical.Blank;

		form.lyrDetails().tabImages().drawingImageQuestions().setImage(img);

		//Brushes
		setBrushes(findingColl);

		//Areas
		DrawingControlGroup root = null;
		if (drawingGraphicImageVo != null && drawingGraphicImageVo.getRootGroupIsNotNull())
		{
			root = new DrawingControlGroup(drawingGraphicImageVo.getRootGroup().getGroupID().intValue(), drawingGraphicImageVo.getRootGroup().getGroupName());
			convertAllAreasToNode(drawingGraphicImageVo.getRootGroup(), root);
		}
		else
		{
			root = new DrawingControlGroup(-1, " ");
		}

		form.lyrDetails().tabImages().drawingImageQuestions().setAreas(root);

		//Shapes
		if (voPatientGraphicassessment != null && voPatientGraphicassessment.getPatientGraphicFindingIsNotNull())
		{
			for (int i = 0; i < voPatientGraphicassessment.getPatientGraphicFinding().size(); i++)
			{
				PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = voPatientGraphicassessment.getPatientGraphicFinding().get(i);
				DrawingGraphicFindingVo voDrawingGraphicFinding = voPatientGraphicAssessmentFinding.getGraphicFinding();

				String vmlData = voPatientGraphicAssessmentFinding.getAreaDrawn();
				//Findings
				if (voDrawingGraphicFinding != null && vmlData != null)
				{
					int shapeId = voPatientGraphicAssessmentFinding.getDrawingId().intValue();
					int brush_id = voDrawingGraphicFinding.getID_DrawingGraphicFinding().intValue();
					String tooltip = UserAssessmentInstHelper.getGraphicAssessmentFindingTooltip(voPatientGraphicAssessmentFinding);

					DrawingControlShape shape = new DrawingControlShape(shapeId, savedTargetID, vmlData, brush_id, false, tooltip);
					form.lyrDetails().tabImages().drawingImageQuestions().addShape(shape);
				}
			}
		}
	}

	private void setBrushes(GraphicAssessmentFindingVoCollection findingColl)
	{
		if (findingColl != null)
		{
			findingColl.sort();
			for (int i = 0; i < findingColl.size(); i++)
			{
				DrawingGraphicFindingVo voDrawingGraphicFinding = findingColl.get(i).getFinding();
				//Findings
				Integer id = voDrawingGraphicFinding.getID_DrawingGraphicFinding();
				String text = voDrawingGraphicFinding.getDisplayText();
				String tooltip = voDrawingGraphicFinding.getDescription();
				Image img = voDrawingGraphicFinding.getImageIsNotNull() ? engine.getRegisteredImage(voDrawingGraphicFinding.getImage().getID_AppImage().intValue()) : null;
				Color colour = voDrawingGraphicFinding.getColourIsNotNull() ? voDrawingGraphicFinding.getColour() : null;
				boolean multipleMarkings = voDrawingGraphicFinding.getIsSingleMarkIsNotNull() && voDrawingGraphicFinding.getIsSingleMark().booleanValue() ? false : true;

				if (img != null)
				{
					form.lyrDetails().tabImages().drawingImageQuestions().addBrush(id.intValue(), text, img, multipleMarkings, tooltip);
				}

				if (colour != null)
				{
					form.lyrDetails().tabImages().drawingImageQuestions().addBrush(id.intValue(), text, colour, multipleMarkings, tooltip);
				}
			}
		}
		else
		{
			//Set default brush
			form.lyrDetails().tabImages().drawingImageQuestions().addBrush(-1, "", Color.White);
		}
	}

	private PatientGraphicAssessmentFindingQuestionAnswerVoCollection getFindingQuestion(int brushId)
	{
		DrawingGraphicImageVo voDrawingGraphicImage = form.cmbImages().getValue();
		GraphicAssessmentFindingVoCollection findingColl = getFindingCollection(voDrawingGraphicImage);
		GraphicAssessmentFindingQuestionVoCollection questions = null;
		PatientGraphicAssessmentFindingQuestionAnswerVoCollection findingQuestions = new PatientGraphicAssessmentFindingQuestionAnswerVoCollection();
		if (findingColl != null)
		{
			for (int i = 0; i < findingColl.size(); i++)
			{
				if (findingColl.get(i).getFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFinding().intValue() == brushId)
				{
					//TODO - this works for Graphical Assessment and Graphical Assessment with questions where we have
					// 1:1 relationship between GraphicAssessmentFinding and FindingStageQuestions
					// need to review for the third type of assessment
					if(findingColl.get(i).getFindingStageIsNotNull() && findingColl.get(i).getFindingStage().size() > 0)
						questions = findingColl.get(i).getFindingStage().get(0).getAssociatedQuestions();
					
					break;
				}
			}
		}

		if (questions != null)
		{
			for (int i = 0; i < questions.size(); i++)
			{
				ims.assessment.vo.GraphicAssessmentFindingQuestionVo voFindingQuestion = questions.get(i);
				PreActiveActiveInactiveStatus findingStatus = voFindingQuestion.getActiveStatus();
				//WDEV-1211 - Go back to configurtation for every new findings 
				if (findingStatus != null && findingStatus.equals(PreActiveActiveInactiveStatus.ACTIVE))
				{
					PatientGraphicAssessmentFindingQuestionAnswerVo voPGAFQuestion = new PatientGraphicAssessmentFindingQuestionAnswerVo();
					voPGAFQuestion.setGraphicFindingQuestion(voFindingQuestion);
					voPGAFQuestion.setIsAnswered(new Boolean(false));
					voPGAFQuestion.setIsMandatory(voFindingQuestion.getIsMandatory());
					findingQuestions.add(voPGAFQuestion);
				}
			}
		}

		return findingQuestions;
	}

	protected void populateScreenFromData()
	{
		clearScreen();
		imagesValueChanged();
		populateControls();
	}

	private void populateControls()
	{
		PatientAssessmentVo voPatientAssessment = form.getLocalContext().getCurrentPatientAssessment();
		if(voPatientAssessment == null)
			return;

		//Status
		form.cmbStatus().setValue(voPatientAssessment.getStatus());

		//Reason
		cmbStatusValueChanged();
		form.cmbReason().setValue(voPatientAssessment != null?voPatientAssessment.getStatusReason():null);

		//Authoring Informations
		form.customControlAuthoringInfo().setValue(voPatientAssessment.getAuthoringInfo());
		
		//Completing Info
		AuthoringInformationVo voCompleted = new AuthoringInformationVo();
		voCompleted.setAuthoringDateTime(voPatientAssessment.getCompletedDateTime());
		voCompleted.setAuthoringHcp(voPatientAssessment.getCompletedHCP());
		form.customControlCompleted().setValue(voCompleted);
	}

	protected void clearScreen()
	{
		form.customControlAuthoringInfo().setValue(null);
		form.customControlCompleted().setValue(null);
		form.cmbStatus().setValue(null);
		form.cmbReason().setValue(null);
	}

	private void populateAssociatedQuestionsData(PatientAssessmentDataVo voPatientAssessmentData)
	{
		UserAssessmentInstHelper helper = getHelper();
		voPatientAssessmentData.setGraphicQuestion(helper.getGraphicAnswers(voPatientAssessmentData.getGraphicQuestion()));
	}

	private UserAssessmentInstHelper getHelper()
	{
		return getHelper(false);
	}
	private UserAssessmentInstHelper getHelper(boolean displayAnswered)
	{
		UserAssessmentInstHelper helper = new UserAssessmentInstHelper(form.lyrDetails().tabQuestions().dyngrdQuestions(), form.getImages().Core.QuestionSmall, form.getImages().Core.TextBox, form.getImages().Core.SmallNew, form.getImages().Core.SmallCancel, form.getImages().Core.MandatoryQuestion, false, displayAnswered,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		return helper;
	}

	private void convertAllAreasToNode(GraphicGroupVo voGroup, DrawingControlGroup node)
	{
		node.setName(voGroup.getGroupName());
		// convert all areas to controlgroup
		int i;
		for (i = 0; i < voGroup.getAreaCollection().size(); i++)
		{
			node.add(createDrawingControlArea(voGroup.getAreaCollection().get(i)));
		}

		for (int j = 0; j < voGroup.getChildGroups().size(); j++)
		{
			GraphicGroupVo childGroup = voGroup.getChildGroups().get(j);
			node.add(createDrawingControlGroup(childGroup));
			convertAllAreasToNode(childGroup, node.getGroup(i + j));
		}
	}

	private void cmbStatusValueChanged()
	{
		form.cmbReason().clear();
		loadReasonCombo();
		
		enableConfirmingHCPComponent();
	}

	private void enableConfirmingHCPComponent()
	{
		PatientAssessmentStatusReason parentLkp = form.cmbStatus().getValue();
		if(parentLkp != null && parentLkp.equals(PatientAssessmentStatusReason.COMPLETED))
		{
			boolean editMode = form.getMode().equals(FormMode.EDIT);
			if(editMode)
			{
				form.customControlCompleted().initializeComponent();
				form.setcustomControlCompletedEnabled(true);	
			}
		}
		else
		{
			boolean editMode = form.getMode().equals(FormMode.EDIT);
			if(editMode)
			{
				form.customControlCompleted().setValue(null);
				form.setcustomControlCompletedEnabled(false);
			}
		}
	}

	private void loadReasonCombo()
	{
		PatientAssessmentStatusReason parentLkp = form.cmbStatus().getValue();
		PatientAssessmentStatusReasonCollection voColl = LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if (voColl.get(i).getParent() != null && voColl.get(i).getParent().equals(parentLkp))
				form.cmbReason().newRow(voColl.get(i), voColl.get(i).toString());
		}
	}

	private DrawingControlGroup createDrawingControlGroup(GraphicGroupVo voGroup)
	{
		DrawingControlGroup group = new DrawingControlGroup(voGroup.getGroupID().intValue(), voGroup.getGroupName());
		return group;
	}

	private DrawingControlArea createDrawingControlArea(GraphicAreaVo voArea)
	{
		DrawingControlArea area = new DrawingControlArea(voArea.getAreaID().intValue(), voArea.getAreaName(), voArea.getAreaVectors());
		return area;
	}

	private boolean hasAssociatedQuestions()
	{
		PatientAssessmentDataVo voPatientAssessmentData = form.getLocalContext().getCurrentPatientAssessmentData();
		if (voPatientAssessmentData == null)
			return false;

		return voPatientAssessmentData.getGraphicIsNotNull() && voPatientAssessmentData.getGraphic().getAssociatedQuestionsIsNotNull() && voPatientAssessmentData.getGraphic().getAssociatedQuestions().size() > 0;
	}

	private void setDrawingIds()
	{
		PatientAssessmentDataVo voPatientAssessmentData = form.getLocalContext().getCurrentPatientAssessmentData();
		if (voPatientAssessmentData != null && voPatientAssessmentData.getGraphicFindingsIsNotNull())
		{
			for (int j = 0; j < voPatientAssessmentData.getGraphicFindings().size(); j++)
			{
				for (int i = 0; i < voPatientAssessmentData.getGraphicFindings().get(j).getPatientGraphicFinding().size(); i++)
				{
					voPatientAssessmentData.getGraphicFindings().get(j).getPatientGraphicFinding().get(i).setDrawingId(voPatientAssessmentData.getGraphicFindings().get(j).getPatientGraphicFinding().get(i).getID_PatientGraphicAssessmentFinding());
				}
			}
		}

		form.getLocalContext().setCurrentPatientAssessmentData(voPatientAssessmentData);
	}

	private void setInitialScreenMode()
	{
		Boolean editMode = form.getGlobalContext().Clinical.PatientAssessment.getEditComponent();
		if (editMode != null && editMode.booleanValue())
			form.setMode(FormMode.EDIT);
		else
			form.setMode(FormMode.VIEW);
	}

	private void updateControlsState()
	{
		PatientAssessmentVo voPatientAssessment = form.getLocalContext().getCurrentPatientAssessment();
		boolean isCompleted = voPatientAssessment != null && voPatientAssessment.getStatusIsNotNull() && voPatientAssessment.getStatus().equals(PatientAssessmentStatusReason.COMPLETED);
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (isCompleted)
			{
				setControlsReadOnly(true);
			}
			else
			{
				setControlsReadOnly(false);
				setStatusToInProgress(voPatientAssessment);
			}
		}
		else
		{
			form.btnUpdate().setVisible(isCompleted == false);
		}
	}

	private void setStatusToInProgress(PatientAssessmentVo voPatientAssessment)
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			loadStatusCombo(true);
			PatientAssessmentStatusReason status = voPatientAssessment != null?voPatientAssessment.getStatus():null;
			if (status != null && status.equals(PatientAssessmentStatusReason.NOTCOMMENCED))
			{
				status = PatientAssessmentStatusReason.INPROGRESS;
			}
			form.cmbStatus().setValue(status);
			onCmbStatusValueChanged();
		}
	}

	private void setControlsReadOnly(boolean value)
	{
		form.cmbStatus().setEnabled(!value);
		form.cmbReason().setEnabled(!value);
		form.lyrDetails().tabImages().drawingImageQuestions().setReadOnly(value);
		form.lyrDetails().tabQuestions().dyngrdQuestions().setReadOnly(value);
		if(!value && isStatusCommenced())
		{
			form.setcustomControlAuthoringInfoEnabled(true);
		}
		else
		{
			form.setcustomControlAuthoringInfoEnabled(false);
		}
		form.btnSave().setVisible(!value);
		form.btnSave().setEnabled(!value);
	}
	
	private boolean isStatusCommenced()
	{
		PatientAssessmentVo patientAssessment = form.getLocalContext().getCurrentPatientAssessment();
		if(patientAssessment == null)
			return false;
		
		return patientAssessment.getStatusIsNotNull() && patientAssessment.getStatus().equals(PatientAssessmentStatusReason.NOTCOMMENCED);
	}

	private boolean isNewComponent()
	{
		PatientAssessmentDataVo data = form.getLocalContext().getCurrentPatientAssessmentData();
		return !isAnswered(data);
	}


	private boolean uiErrors()
	{
		ArrayList uiErrors = new ArrayList();

		if (form.cmbStatus().getValue() == null)
		{
			uiErrors.add("Status is mandatory");
		}

		String authErrors = form.customControlAuthoringInfo().getErrors();
		if(authErrors != null)
			uiErrors.add(authErrors);
		
		if(form.cmbStatus().getValue() != null && form.cmbStatus().getValue().equals(PatientAssessmentStatusReason.COMPLETED))
		{
			String errors = form.customControlCompleted().getErrors();
			if(errors != null)
				uiErrors.add(errors);
		}

		if (uiErrors.size() > 0)
		{
			String[] errors = new String[uiErrors.size()];
			uiErrors.toArray(errors);
			engine.showErrors(errors);
			return true;
		}

		return false;
	}

	private UserDefinedObjectComponentVo getEditedComponent()
	{
		PatientUserDefinedObjectVo voPatientUserDefinedObject = form.getGlobalContext().Assessment.getPatientUserDefinedObject();
		PatientAssessmentVo voPatientAssessment = form.getLocalContext().getCurrentPatientAssessment();
		
		return getAssessmentConfig().getEditedComponent(voPatientUserDefinedObject, voPatientAssessment);
	}

	private ims.assessment.helper.AssessmentConfig getAssessmentConfig()
	{
		return new ims.assessment.helper.AssessmentConfig();		
	}

	private void setInitialComponentsSettings()
	{
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);
		form.customControlCompleted().setLabels(AuthoringLabelType.COMPLETING_COMPLETED);
		form.customControlCompleted().setIsRequiredPropertyToControls(Boolean.TRUE);
	}
	
	private int	savedTargetID	= -1;
	//----- End Private Methods ----
}
