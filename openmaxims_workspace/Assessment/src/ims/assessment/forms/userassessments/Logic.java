//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2389.16953)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.userassessments;

//This code was generated by Vasile Purdila using IMS Development Environment (version 1.40 build 2182.15994)
//Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.
//01/02/2006 Changes --------------------------------------------------------------
//Context menu's should be changed from 'Add' to 'New', and 'Edit' to 'Update'
//Can we put a separator between Preview and View please.
//Need to implement the view mechanism between the list screen and the edit screen.
//We need the preview on this screen accessible from a button at the bottom
//When adding a new record, after returning add only that record to the grid
//When updating a record, do a list and redisplay and reselect that reord (rule that applies to similar screens as a way to keep consistancy) 
//---------------------------------------------------------------------------------

import java.text.ParseException;

import ims.assessment.forms.userassessments.GenForm.GroupCriteriaEnumeration;
import ims.assessment.forms.userassessments.GenForm.grdDetailsRow;
import ims.assessment.vo.UserAssessmentShortVo;
import ims.assessment.vo.UserAssessmentShortVoCollection;
import ims.assessment.vo.UserAssessmentVo;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.core.vo.lookups.UserDefinedAssessmentTypeCollection;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.DateTimeFormat;
import ims.framework.utils.TimeFormat;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchControls();
		clearSelectedUser();
		clearUserAssessmentFilter();
		refreshContextMenu();
	}
	/**
	 * 
	 */
	private void clearSearchControls()
	{
		form.grdDetails().getRows().clear();
		form.txtName().setValue("");
		form.cmbAssType().setValue(null);
		form.cmbCategory().setValue(null);
		form.cmbStatus().setValue(null);
	}
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSelectedUser();
		search(false);
		setUserAssessmentFilter();
		refreshContextMenu();
	}
	protected void onGrdDetailsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		selectUserAssessment();
		refreshContextMenu();
	}
	protected void onBtnPreviewClick() throws PresentationLogicException
	{
		previewUserAssessment();
	}
	protected void selectUserAssessment()
	{
		form.getGlobalContext().Core.setSelectedUserAssessment(form.grdDetails().getValue());
	}
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			//Scoring
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.ADD:
				addScoringUserAssessment(UserDefinedAssessmentType.ASSESSMENTTOOL);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.DPP:
				addScoringUserAssessment(UserDefinedAssessmentType.DPP);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.FALLRISK:
				addScoringUserAssessment(UserDefinedAssessmentType.FALLSRISK);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.ADL:
				addScoringUserAssessment(UserDefinedAssessmentType.ADL);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.SKIN:
				addScoringUserAssessment(UserDefinedAssessmentType.SKIN);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.BLAD:
				addScoringUserAssessment(UserDefinedAssessmentType.BLAD);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.BWEL:
				addScoringUserAssessment(UserDefinedAssessmentType.BWEL);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.MOB:
				addScoringUserAssessment(UserDefinedAssessmentType.MOB);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.WC:
				addScoringUserAssessment(UserDefinedAssessmentType.WC);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.COM:
				addScoringUserAssessment(UserDefinedAssessmentType.COM);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.PSY:
				addScoringUserAssessment(UserDefinedAssessmentType.PSY);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.NURSEDISCHARGECHKLST:
				addScoringUserAssessment(UserDefinedAssessmentType.NURSEDISCHARGECHKLST);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.PREOPPOSSUM:
				addScoringUserAssessment(UserDefinedAssessmentType.PREOPPOSSUM);
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.OPERATIVEDETAILSPOSSUM:
				addScoringUserAssessment(UserDefinedAssessmentType.OPERATIVEDETAILSPOSSUM);
				break;
				
			//Non Scoring
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.NEW_NON_SCORING:
				addNewNonScoringAssessment();
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.DISCHARGECHECKLIST:
				addDischargeChechlist();
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.NURSING_DISCHARGE_PLANNING:
				addNursingDischargePlanning();
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.NURSING_DISCHARGE:
				addNursingDischarge();
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.MANCHESTERTRIAGE:
				addManchesterTriage();
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.INTRODUCTORY_PHONE_CALL:
				addINTRODUCTORY_PHONE_CALL();
				break;

			//Common
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.EDIT :
				editUserAssessment();
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.VIEW :
				viewUserAssessment();
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.PREVIEW :
				previewUserAssessment();
				break;
			case GenForm.ContextMenus.AssessmentNamespace.UserAssessment.ADD_NEW_BASED_ON_PREVIOUS:
				addNewUserAssessmentBasedOn();
				break;
			default :
				break;
		}
	}

	private void addINTRODUCTORY_PHONE_CALL()
	{
		setNewSelectedUser(UserDefinedAssessmentType.INTROPHONECALL);
		openNonScoringAssessment();
	}

	private void addManchesterTriage() 
	{
		setNewSelectedUser(UserDefinedAssessmentType.MANCHESTERTRIAGE);
		openNonScoringAssessment();
	}

	private void initialize()
	{
		UserDefinedAssessmentType[] coll = UserDefinedAssessmentType.getNegativeInstances();

		form.cmbAssType().newRow(UserDefinedAssessmentType.ASSESSMENTTOOL, UserDefinedAssessmentType.ASSESSMENTTOOL.toString());
		for (int j = 0; coll != null && j < coll.length; j++)
		{
			UserDefinedAssessmentType type = coll[j];
			if(type.getParent() != null && type.getParent().equals(UserDefinedAssessmentType.ASSESSMENTTOOL))
			{
				form.cmbAssType().newRow(type, type.toString());
			}
		}
		
		form.cmbAssType().newRow(UserDefinedAssessmentType.USERDEFINEDDATASHEET, UserDefinedAssessmentType.USERDEFINEDDATASHEET.toString());
		for (int j = 0; coll != null && j < coll.length; j++)
		{
			UserDefinedAssessmentType type = coll[j];
			if(type.getParent() != null && type.getParent().equals(UserDefinedAssessmentType.USERDEFINEDDATASHEET))
			{
				form.cmbAssType().newRow(type, type.toString());
			}
		}
		
		setContextMenu();
	}

	private void open()
	{
		refreshContextMenu();

		if(form.getGlobalContext().Core.getUserAssessmentFilterIsNotNull())
		{
			UserAssessmentShortVo userAssessmentFilter = form.getGlobalContext().Core.getUserAssessmentFilter();
			
			//Description field is not used for searching, we're using it to specify which radio button is selected
			if(userAssessmentFilter != null && userAssessmentFilter.getDescriptionIsNotNull())
			{
				form.GroupCriteria().setValue(getGroupCriteria(userAssessmentFilter.getDescription()));
				form.txtName().setValue(userAssessmentFilter.getName());
				form.cmbAssType().setValue(userAssessmentFilter.getAssessmentType());
				form.cmbCategory().setValue(userAssessmentFilter.getCategory());
				form.cmbStatus().setValue(userAssessmentFilter.getActiveStatus());		//wdev-16160
				
				if(userAssessmentFilter.getNameIsNotNull() || userAssessmentFilter.getAssessmentTypeIsNotNull() || userAssessmentFilter.getCategoryIsNotNull())
				{
					search();
				}
				else
				{
					addNewUserAssessment();
				}
			}
		}
		else
		{
			form.GroupCriteria().setValue(GenForm.GroupCriteriaEnumeration.rdoBegins);
			addNewUserAssessment();
			form.txtName().setFocus();
		}
	}
	
	private void addNewUserAssessment()
	{
		if(form.getGlobalContext().Core.getSelectedUserAssessmentIsNotNull() && form.getGlobalContext().Core.getSelectedUserAssessment().getID_UserAssessmentIsNotNull())
		{
			UserAssessmentShortVoCollection assessments = new UserAssessmentShortVoCollection();
			
			assessments.add(form.getGlobalContext().Core.getSelectedUserAssessment());
			populateScreenFromData(assessments);
			
			form.grdDetails().setValue(form.getGlobalContext().Core.getSelectedUserAssessment());
			refreshContextMenu();
		}
	}
	private GroupCriteriaEnumeration getGroupCriteria(String description)
	{
		if(description != null)
		{
			if(description.charAt(0) == '1')
				return GenForm.GroupCriteriaEnumeration.rdoBegins;
			else if(description.charAt(0) == '2')
				return GenForm.GroupCriteriaEnumeration.rdoContains;
			else if(description.charAt(0) == '3')
				return GenForm.GroupCriteriaEnumeration.rdoEquals;
		}
		
		return GroupCriteriaEnumeration.None;
	}
	private void previewUserAssessment()
	{
		form.getGlobalContext().Core.setSelectedUserAssessment(form.grdDetails().getValue());
		engine.open(form.getForms().Assessment.UserAssessmentPreview);
	}
	private void viewUserAssessment()
	{
		form.getGlobalContext().Core.setSelectedUserAssessment(form.grdDetails().getValue());
		form.getGlobalContext().Core.setUserAssessmentAction("V");
		engine.open(form.getForms().Assessment.UserAssessmentNew, "View Assessment");
	}
	private void editUserAssessment()
	{
		form.getGlobalContext().Core.setSelectedUserAssessment(form.grdDetails().getValue());
		form.getGlobalContext().Core.setUserAssessmentAction("E");
		engine.open(form.getForms().Assessment.UserAssessmentNew, "Edit Assessment");
	}
	private void addScoringUserAssessment(UserDefinedAssessmentType userDefinedAssessmentType)
	{
		setNewSelectedUser(userDefinedAssessmentType);
		openScoringAssessment();
	}

	private void openScoringAssessment()
	{
		clearUserAssessmentFilter();
		form.getGlobalContext().Core.setUserAssessmentAction("A");
		engine.open(form.getForms().Assessment.UserAssessmentNew, "New Assessment");
	}
	
	private void addNewNonScoringAssessment()
	{
		setNewSelectedUser(UserDefinedAssessmentType.USERDEFINEDDATASHEET);
		openNonScoringAssessment();		
	}
	
	private void addDischargeChechlist()
	{
		setNewSelectedUser(UserDefinedAssessmentType.DISCHARGECHECKLIST);
		openNonScoringAssessment();
	}

	private void addNursingDischargePlanning()
	{
		setNewSelectedUser(UserDefinedAssessmentType.DISCHARGE_PLANNING);
		openNonScoringAssessment();
	}
	
	private void addNursingDischarge()
	{
		setNewSelectedUser(UserDefinedAssessmentType.DISCHARGE);
		openNonScoringAssessment();
	}
	
	private void openNonScoringAssessment()
	{
		clearUserAssessmentFilter();
		form.getGlobalContext().Core.setUserAssessmentAction("N");
		engine.open(form.getForms().Assessment.UserAssessmentNew, "New Assessment");
	}
	
	private void setNewSelectedUser(UserDefinedAssessmentType assessmentType)
	{
		UserAssessmentShortVo voAssessmentShort = new UserAssessmentShortVo();
		voAssessmentShort.setAssessmentType(assessmentType);
		form.getGlobalContext().Core.setSelectedUserAssessment(voAssessmentShort);
	}
	
	private void addNewUserAssessmentBasedOn()
	{
		UserAssessmentShortVo voUserAssessmentShort = form.grdDetails().getValue();
		if(voUserAssessmentShort == null)
		{
			engine.showMessage("Please select an Assessment");
			return;
		}
		
		editNewAssessmentBasedOn();
	}
	
	private void clearUserAssessmentFilter()
	{
		form.getGlobalContext().Core.setUserAssessmentFilter(null);
	}
	private void setUserAssessmentFilter()
	{
		UserAssessmentVo userAssessmentFilter = new UserAssessmentVo();

		userAssessmentFilter.setName(form.txtName().getValue());
		userAssessmentFilter.setAssessmentType(form.cmbAssType().getValue());
		userAssessmentFilter.setCategory(form.cmbCategory().getValue());
		userAssessmentFilter.setActiveStatus(form.cmbStatus().getValue()); //wdev-16160

		if(form.GroupCriteria().getValue().equals(GenForm.GroupCriteriaEnumeration.rdoBegins))
			userAssessmentFilter.setDescription("1");
		else if(form.GroupCriteria().getValue().equals(GenForm.GroupCriteriaEnumeration.rdoContains))
			userAssessmentFilter.setDescription("2");
		if(form.GroupCriteria().getValue().equals(GenForm.GroupCriteriaEnumeration.rdoEquals))
			userAssessmentFilter.setDescription("3");
		
		form.getGlobalContext().Core.setUserAssessmentFilter(userAssessmentFilter);
	}
	
	private void refreshContextMenu()
	{
		form.getContextMenus().Assessment.hideAllUserAssessmentMenuItems();
		
		//--- Scoring Assessment ------------
		form.getContextMenus().Assessment.getUserAssessmentADDItem().setVisible(UserDefinedAssessmentType.ASSESSMENTTOOL.isActive());
		form.getContextMenus().Assessment.getUserAssessmentDPPItem().setVisible(UserDefinedAssessmentType.DPP.isActive());
		form.getContextMenus().Assessment.getUserAssessmentFALLRISKItem().setVisible(UserDefinedAssessmentType.FALLSRISK.isActive());
		form.getContextMenus().Assessment.getUserAssessmentADLItem().setVisible(UserDefinedAssessmentType.ADL.isActive());
		form.getContextMenus().Assessment.getUserAssessmentSKINItem().setVisible(UserDefinedAssessmentType.SKIN.isActive());
		form.getContextMenus().Assessment.getUserAssessmentBLADItem().setVisible(UserDefinedAssessmentType.BLAD.isActive());
		form.getContextMenus().Assessment.getUserAssessmentBWELItem().setVisible(UserDefinedAssessmentType.BWEL.isActive());
		form.getContextMenus().Assessment.getUserAssessmentMOBItem().setVisible(UserDefinedAssessmentType.MOB.isActive());
		form.getContextMenus().Assessment.getUserAssessmentWCItem().setVisible(UserDefinedAssessmentType.WC.isActive());
		form.getContextMenus().Assessment.getUserAssessmentCOMItem().setVisible(UserDefinedAssessmentType.COM.isActive());
		form.getContextMenus().Assessment.getUserAssessmentDISItem().setVisible(false/*UserDefinedAssessmentType.DIS.isActive()*/);
		form.getContextMenus().Assessment.getUserAssessmentPSYItem().setVisible(UserDefinedAssessmentType.PSY.isActive());
		form.getContextMenus().Assessment.getUserAssessmentNURSEDISCHARGECHKLSTItem().setVisible(UserDefinedAssessmentType.NURSEDISCHARGECHKLST.isActive());
		form.getContextMenus().Assessment.getUserAssessmentPREOPPOSSUMItem().setVisible(UserDefinedAssessmentType.PREOPPOSSUM.isActive());
		form.getContextMenus().Assessment.getUserAssessmentOPERATIVEDETAILSPOSSUMItem().setVisible(UserDefinedAssessmentType.OPERATIVEDETAILSPOSSUM.isActive());
		//-----------------------------------
		
		//--- Non Scoring -------------------
		form.getContextMenus().Assessment.getUserAssessmentNEW_NON_SCORINGItem().setVisible(UserDefinedAssessmentType.USERDEFINEDDATASHEET.isActive());
		form.getContextMenus().Assessment.getUserAssessmentNURSING_DISCHARGEItem().setVisible(UserDefinedAssessmentType.DISCHARGE.isActive());
		form.getContextMenus().Assessment.getUserAssessmentNURSING_DISCHARGE_PLANNINGItem().setVisible(UserDefinedAssessmentType.DISCHARGE_PLANNING.isActive());
		form.getContextMenus().Assessment.getUserAssessmentDISCHARGECHECKLISTItem().setVisible(UserDefinedAssessmentType.DISCHARGECHECKLIST.isActive());

		form.getContextMenus().Assessment.getUserAssessmentMANCHESTERTRIAGEItem().setVisible(UserDefinedAssessmentType.MANCHESTERTRIAGE.isActive());

		form.getContextMenus().Assessment.getUserAssessmentINTRODUCTORY_PHONE_CALLItem().setVisible(UserDefinedAssessmentType.INTROPHONECALL.isActive());
		//-----------------------------------
		
		UserAssessmentShortVo selValue = form.grdDetails().getValue();
		boolean grdValSelected = selValue != null;
		form.getContextMenus().Assessment.getUserAssessmentEDITItem().setVisible(grdValSelected);
		form.getContextMenus().Assessment.getUserAssessmentVIEWItem().setVisible(grdValSelected);
		form.getContextMenus().Assessment.getUserAssessmentPREVIEWItem().setVisible(grdValSelected);
		form.getContextMenus().Assessment.getUserAssessmentADD_NEW_BASED_ON_PREVIOUSItem().setVisible(grdValSelected);
		if(selValue != null)
		{
			String basedOnText = "Add ";
			if(selValue.getAssessmentTypeIsNotNull())
			{
				basedOnText += selValue.getAssessmentType().equals(UserDefinedAssessmentType.USERDEFINEDDATASHEET)?" Non Scoring":"";
				basedOnText += selValue.getAssessmentType().equals(UserDefinedAssessmentType.ASSESSMENTTOOL)?" Scoring":"";
			}
			
			basedOnText += " Assessment based on '" + selValue.getName() +  "'";
			form.getContextMenus().Assessment.getUserAssessmentADD_NEW_BASED_ON_PREVIOUSItem().setText(basedOnText);
		}
		form.btnPreview().setVisible(grdValSelected);
	}
	
	private void search()
	{
		search(false);
	}
	private void search(boolean checkMandatory)
	{
		UserAssessmentShortVoCollection assessments;
		String name = form.txtName().getValue();
		
		if(name != null && name.length() > 0)
		{
			if(form.GroupCriteria().getValue().equals(GenForm.GroupCriteriaEnumeration.rdoBegins))
			{
				name += '%';
			}
			else if(form.GroupCriteria().getValue().equals(GenForm.GroupCriteriaEnumeration.rdoContains))
			{
				name = '%' + name + '%';
			}
		}
		else
		{
			if(checkMandatory)
			{
				engine.showMessage("Please enter a name");
				form.txtName().setFocus();
				form.grdDetails().getRows().clear();
				refreshContextMenu();
				return;
			}
		}
		
		UserDefinedAssessmentTypeCollection assessmentTypes = getAssessmentTypes(form.cmbAssType().getValue());
		assessments = domain.listAssessments(name, form.cmbCategory().getValue(), assessmentTypes, form.cmbStatus().getValue());
		
		populateScreenFromData(assessments);
		
		if(assessments == null || assessments.size() == 0)
		{
			engine.showMessage("No Assessments found for the Search Criteria Provided");
		}
		
		if(form.getGlobalContext().Core.getSelectedUserAssessmentIsNotNull() && form.getGlobalContext().Core.getSelectedUserAssessment().getID_UserAssessmentIsNotNull())
			form.grdDetails().setValue(form.getGlobalContext().Core.getSelectedUserAssessment());
		
		refreshContextMenu();
	}

	//when the parent has children get the children as well
	private UserDefinedAssessmentTypeCollection getAssessmentTypes(UserDefinedAssessmentType value)
	{
		UserDefinedAssessmentTypeCollection lkpColl = new UserDefinedAssessmentTypeCollection();
		if(value != null)
		{
			lkpColl.add(value);
			if(value.equals(UserDefinedAssessmentType.USERDEFINEDDATASHEET))
			{
				lkpColl.add(UserDefinedAssessmentType.DISCHARGECHECKLIST);
			}
			if(value.equals(UserDefinedAssessmentType.ASSESSMENTTOOL))
			{
				lkpColl.add(UserDefinedAssessmentType.DPP);
			}
		}
		
		return lkpColl;
	}

	private void populateScreenFromData(UserAssessmentShortVoCollection assessments)
	{
		form.grdDetails().getRows().clear();
		
		if(assessments == null)
			return;
		
		for(int i = 0; i < assessments.size(); i++)
		{
			UserAssessmentShortVo record = assessments.get(i);
			
			grdDetailsRow row = form.grdDetails().getRows().newRow();
			
			row.setColumnName(record.getName());
			row.setColumnDescription(record.getDescription());
			row.setColumnCategory(record.getCategoryIsNotNull() ? record.getCategory().getText() : "");
			row.setColumnStatus(record.getActiveStatusIsNotNull() ? record.getActiveStatus().getText() : "");
			
			//wdev-10667
						
			String creationDate = "Creation Date: " + (record.getSystemInfoIsNotNull() ? (record.getSystemInfo().getCreationDateTime() != null ? record.getSystemInfo().getCreationDateTime().toString(DateTimeFormat.STANDARD_SECS):""):"");
			String lastUpdated = "Last Updated: " + (record.getSystemInfoIsNotNull() ? (record.getSystemInfo().getLastupdateDateTime() != null ? record.getSystemInfo().getLastupdateDateTime().toString(DateTimeFormat.STANDARD_SECS):""):"");
			String createdBy = "Created By: " + (record.getSystemInfoIsNotNull() ? record.getSystemInfo().getCreationUser():"");
			row.setTooltip(creationDate + "<br>" + lastUpdated  + "<br>" + createdBy);
			//-------
			row.setValue(record);
			
		}
	}
	
	private void clearSelectedUser()
	{
		form.getGlobalContext().Core.setSelectedUserAssessment(null);
	}
	
	private void editNewAssessmentBasedOn()
	{
		UserAssessmentShortVo voUserAssessmentShort = form.grdDetails().getValue();
		if(voUserAssessmentShort == null)
		{
			engine.showMessage("Please select an Assessment");
			return;
		}
		voUserAssessmentShort.setActiveStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		form.getGlobalContext().Core.setSelectedUserAssessment(voUserAssessmentShort);
		form.getGlobalContext().Core.setUserAssessmentAction("C");
		engine.open(form.getForms().Assessment.UserAssessmentNew, "Edit Assessment");
	}
	
	private void setContextMenu()
	{
		form.getContextMenus().Assessment.getUserAssessmentDPPItem().setText("Add " + UserDefinedAssessmentType.DPP.toString());
		form.getContextMenus().Assessment.getUserAssessmentDISCHARGECHECKLISTItem().setText("Add " + UserDefinedAssessmentType.DISCHARGECHECKLIST.toString());
		form.getContextMenus().Assessment.getUserAssessmentMANCHESTERTRIAGEItem().setText("Add " + UserDefinedAssessmentType.MANCHESTERTRIAGE.toString());
	}
}
