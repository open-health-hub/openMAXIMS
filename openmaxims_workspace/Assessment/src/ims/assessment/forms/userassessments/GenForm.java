//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.userassessments;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
		{
			return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbAssTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.UserDefinedAssessmentType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.UserDefinedAssessmentType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.UserDefinedAssessmentType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.UserDefinedAssessmentType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.UserDefinedAssessmentType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.UserDefinedAssessmentType getValue()
		{
			return (ims.core.vo.lookups.UserDefinedAssessmentType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.UserDefinedAssessmentType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbCategoryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.UserAssessmentCategory value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.UserAssessmentCategory value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.UserAssessmentCategory value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.UserAssessmentCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.UserAssessmentCategory value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.UserAssessmentCategory getValue()
		{
			return (ims.core.vo.lookups.UserAssessmentCategory)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.UserAssessmentCategory value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnNameOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnName()
		{
			return (String)super.row.get(0);
		}
		public void setColumnName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnDescriptionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnDescriptionOpened()
		{
			super.row.showOpened(1);
		}
		public String getColumnDescription()
		{
			return (String)super.row.get(1);
		}
		public void setColumnDescription(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColumnDescriptionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnCategoryReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnCategoryReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnCategoryOpened()
		{
			super.row.showOpened(2);
		}
		public String getColumnCategory()
		{
			return (String)super.row.get(2);
		}
		public void setColumnCategory(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColumnCategoryTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColumnStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColumnStatusReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColumnStatusOpened()
		{
			super.row.showOpened(3);
		}
		public String getColumnStatus()
		{
			return (String)super.row.get(3);
		}
		public void setColumnStatus(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColumnStatusTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.assessment.vo.UserAssessmentShortVo getValue()
		{
			return (ims.assessment.vo.UserAssessmentShortVo)super.row.getValue();
		}
		public void setValue(ims.assessment.vo.UserAssessmentShortVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDetailsRow get(int index)
		{
			return new grdDetailsRow(super.collection.get(index));
		}
		public grdDetailsRow newRow()
		{
			return new grdDetailsRow(super.collection.newRow());
		}
		public grdDetailsRow newRow(boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRow(autoSelect));
		}
		public grdDetailsRow newRowAt(int index)
		{
			return new grdDetailsRow(super.collection.newRowAt(index));
		}
		public grdDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.assessment.vo.UserAssessmentShortVoCollection getValues()
		{
			ims.assessment.vo.UserAssessmentShortVoCollection listOfValues = new ims.assessment.vo.UserAssessmentShortVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.assessment.vo.UserAssessmentShortVo getValue()
		{
			return (ims.assessment.vo.UserAssessmentShortVo)super.grid.getValue();
		}
		public void setValue(ims.assessment.vo.UserAssessmentShortVo value)
		{
			super.grid.setValue(value);
		}
		public grdDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDetailsRowCollection getRows()
		{
			return new grdDetailsRowCollection(super.grid.getRows());
		}
		public grdDetailsRow getRowByValue(ims.assessment.vo.UserAssessmentShortVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDetailsRow(row);
		}
		public void setColumnNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumnCategoryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnCategoryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColumnStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColumnStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}

	public static class GroupCriteriaRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 280, 17, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Exact text", startTabIndex.intValue() + 4);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 176, 17, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Contains", startTabIndex.intValue() + 3);
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 64, 17, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Begins with", startTabIndex.intValue() + 2);
		}
		public void setText(GroupCriteriaEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupCriteriaEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupCriteriaEnumeration.None;
				case 0: return GroupCriteriaEnumeration.rdoEquals;
				case 1: return GroupCriteriaEnumeration.rdoContains;
				case 2: return GroupCriteriaEnumeration.rdoBegins;
			}
			return null;
		}
		public void setValue(GroupCriteriaEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupCriteriaEnumeration.None.id);
		}
		public boolean isEnabled(GroupCriteriaEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupCriteriaEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupCriteriaEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupCriteriaEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupCriteriaEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupCriteriaEnumeration None = new GroupCriteriaEnumeration(-1);
		public static GroupCriteriaEnumeration rdoEquals = new GroupCriteriaEnumeration(0);
		public static GroupCriteriaEnumeration rdoContains = new GroupCriteriaEnumeration(1);
		public static GroupCriteriaEnumeration rdoBegins = new GroupCriteriaEnumeration(2);
		private GroupCriteriaEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupCriteriaEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(95);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Assessment.contextMenuUserAssessment = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Assessment.contextMenuUserAssessmentADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Scoring Assessment", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070001)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentADDItem);
		contextMenus.Assessment.contextMenuUserAssessmentDPPItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Daily Patient Progress", true, false, new Integer(102179), true, false);
		contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentDPPItem);
		contextMenus.Assessment.contextMenuUserAssessmentFALLRISKItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Patient Falls Risk Assessment", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070002)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentFALLRISKItem);
		contextMenus.Assessment.contextMenuUserAssessmentADLItem = factory.createMenuItem(startControlID.intValue() + 4, "Add Activities of Daily Living ", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070003)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentADLItem);
		contextMenus.Assessment.contextMenuUserAssessmentSKINItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Skin Management", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070004)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentSKINItem);
		contextMenus.Assessment.contextMenuUserAssessmentBLADItem = factory.createMenuItem(startControlID.intValue() + 6, "Add Bladder Management", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070005)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentBLADItem);
		contextMenus.Assessment.contextMenuUserAssessmentBWELItem = factory.createMenuItem(startControlID.intValue() + 7, "Add Bowel Management", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070006)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentBWELItem);
		contextMenus.Assessment.contextMenuUserAssessmentMOBItem = factory.createMenuItem(startControlID.intValue() + 8, "Add Mobility", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070007)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentMOBItem);
		contextMenus.Assessment.contextMenuUserAssessmentWCItem = factory.createMenuItem(startControlID.intValue() + 9, "Add Wheelchair and Equipment", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070008)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentWCItem);
		contextMenus.Assessment.contextMenuUserAssessmentCOMItem = factory.createMenuItem(startControlID.intValue() + 10, "Add Community Preparation", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070009)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentCOMItem);
		contextMenus.Assessment.contextMenuUserAssessmentDISItem = factory.createMenuItem(startControlID.intValue() + 11, "Add Discharge Coordination", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070010)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentDISItem);
		contextMenus.Assessment.contextMenuUserAssessmentPSYItem = factory.createMenuItem(startControlID.intValue() + 12, "Add Psychological Issues", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070011)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentPSYItem);
		contextMenus.Assessment.contextMenuUserAssessmentNURSEDISCHARGECHKLSTItem = factory.createMenuItem(startControlID.intValue() + 13, "Add Nursing Discharge Checklist", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070012)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentNURSEDISCHARGECHKLSTItem);
		contextMenus.Assessment.contextMenuUserAssessmentPREOPPOSSUMItem = factory.createMenuItem(startControlID.intValue() + 14, "Add Preopossum", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070013)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentPREOPPOSSUMItem);
		contextMenus.Assessment.contextMenuUserAssessmentOPERATIVEDETAILSPOSSUMItem = factory.createMenuItem(startControlID.intValue() + 15, "Add Operative Details Possum", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070014)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentOPERATIVEDETAILSPOSSUMItem);
		contextMenus.Assessment.contextMenuUserAssessmentNEW_NON_SCORINGItem = factory.createMenuItem(startControlID.intValue() + 16, "Add Non Scoring Assessment", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070015)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentNEW_NON_SCORINGItem);
		contextMenus.Assessment.contextMenuUserAssessmentDISCHARGECHECKLISTItem = factory.createMenuItem(startControlID.intValue() + 17, "Add Discharge Checklist", true, false, new Integer(102179), true, false);
		contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentDISCHARGECHECKLISTItem);
		contextMenus.Assessment.contextMenuUserAssessmentNURSING_DISCHARGEItem = factory.createMenuItem(startControlID.intValue() + 18, "Add Nursing Discharge", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070016)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentNURSING_DISCHARGEItem);
		contextMenus.Assessment.contextMenuUserAssessmentNURSING_DISCHARGE_PLANNINGItem = factory.createMenuItem(startControlID.intValue() + 19, "Add Nursing Discharge Planning", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070017)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentNURSING_DISCHARGE_PLANNINGItem);
		contextMenus.Assessment.contextMenuUserAssessmentADD_NEW_BASED_ON_PREVIOUSItem = factory.createMenuItem(startControlID.intValue() + 20, "Add Assessment based on ", true, false, new Integer(102179), true, true);
		contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentADD_NEW_BASED_ON_PREVIOUSItem);
		contextMenus.Assessment.contextMenuUserAssessmentMANCHESTERTRIAGEItem = factory.createMenuItem(startControlID.intValue() + 21, "Add Manchester Triage Protocol", true, false, new Integer(102179), true, false);
		contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentMANCHESTERTRIAGEItem);
		contextMenus.Assessment.contextMenuUserAssessmentEDITItem = factory.createMenuItem(startControlID.intValue() + 22, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentEDITItem);
		contextMenus.Assessment.contextMenuUserAssessmentVIEWItem = factory.createMenuItem(startControlID.intValue() + 23, "View", true, false, new Integer(102223), false, true);
		contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentVIEWItem);
		contextMenus.Assessment.contextMenuUserAssessmentPREVIEWItem = factory.createMenuItem(startControlID.intValue() + 24, "Preview", true, false, new Integer(102221), false, true);
		contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentPREVIEWItem);
		contextMenus.Assessment.contextMenuUserAssessmentMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 25, "Move Up", true, false, new Integer(102197), true, false);
		contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentMOVE_UPItem);
		contextMenus.Assessment.contextMenuUserAssessmentMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 26, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentMOVE_DOWNItem);
		contextMenus.Assessment.contextMenuUserAssessmentINTRODUCTORY_PHONE_CALLItem = factory.createMenuItem(startControlID.intValue() + 27, "Add Introductory Phone Call", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4070018)))
			contextMenus.Assessment.contextMenuUserAssessment.add(contextMenus.Assessment.contextMenuUserAssessmentINTRODUCTORY_PHONE_CALLItem);
		form.registerMenu(contextMenus.Assessment.contextMenuUserAssessment);


		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 432, 40, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 432, 64, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 432, 19, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Category:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Preview", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 64, 40, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 496, 40, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 496, 64, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbAssTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAssTypeTemp);
		cmbAssTypeComboBox cmbAssType = (cmbAssTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAssTypeComboBox.class, m_cmbAssTypeTemp);
		super.addComboBox(cmbAssType);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 496, 16, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbCategoryTemp);
		cmbCategoryComboBox cmbCategory = (cmbCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCategoryComboBox.class, m_cmbCategoryTemp);
		super.addComboBox(cmbCategory);

		// Grid Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Assessment.contextMenuUserAssessment, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdDetailsTemp);
		grdDetailsGrid grdDetails = (grdDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDetailsGrid.class, m_grdDetailsTemp);
		grdDetails.addStringColumn("Name", 0, 0, 220, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Description", 0, 0, 250, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Category", 0, 0, 200, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Status", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDetails);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 796, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 764, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupCriteria = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpGroupCriteria);
		GroupCriteriaRadioButton GroupCriteria = (GroupCriteriaRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupCriteriaRadioButton.class, tmpGroupCriteria);
		GroupCriteria.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupCriteria);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnPreview()
	{
		return (Button)super.getControl(4);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(5);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(0);
	}
	public cmbAssTypeComboBox cmbAssType()
	{
		return (cmbAssTypeComboBox)super.getComboBox(1);
	}
	public cmbCategoryComboBox cmbCategory()
	{
		return (cmbCategoryComboBox)super.getComboBox(2);
	}
	public grdDetailsGrid grdDetails()
	{
		return (grdDetailsGrid)super.getGrid(0);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(10);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(11);
	}
	public GroupCriteriaRadioButton GroupCriteria()
	{
		return (GroupCriteriaRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Assessment = new AssessmentForms();
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				UserAssessmentNew = new LocalFormName(102184);
				UserAssessmentPreview = new LocalFormName(102193);
			}
			public final FormName UserAssessmentNew;
			public final FormName UserAssessmentPreview;
		}

		public AssessmentForms Assessment;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public AssessmentNamespace Assessment = new AssessmentNamespace();
		public final class AssessmentNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class UserAssessment implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int DPP = 2;
				public static final int FALLRISK = 3;
				public static final int ADL = 4;
				public static final int SKIN = 5;
				public static final int BLAD = 6;
				public static final int BWEL = 7;
				public static final int MOB = 8;
				public static final int WC = 9;
				public static final int COM = 10;
				public static final int DIS = 11;
				public static final int PSY = 12;
				public static final int NURSEDISCHARGECHKLST = 13;
				public static final int PREOPPOSSUM = 14;
				public static final int OPERATIVEDETAILSPOSSUM = 15;
				public static final int NEW_NON_SCORING = 16;
				public static final int DISCHARGECHECKLIST = 17;
				public static final int NURSING_DISCHARGE = 18;
				public static final int NURSING_DISCHARGE_PLANNING = 19;
				public static final int ADD_NEW_BASED_ON_PREVIOUS = 20;
				public static final int MANCHESTERTRIAGE = 21;
				public static final int EDIT = 22;
				public static final int VIEW = 23;
				public static final int PREVIEW = 24;
				public static final int MOVE_UP = 25;
				public static final int MOVE_DOWN = 26;
				public static final int INTRODUCTORY_PHONE_CALL = 27;
			}
			public void disableAllUserAssessmentMenuItems()
			{
				this.contextMenuUserAssessmentADDItem.setEnabled(false);
				this.contextMenuUserAssessmentDPPItem.setEnabled(false);
				this.contextMenuUserAssessmentFALLRISKItem.setEnabled(false);
				this.contextMenuUserAssessmentADLItem.setEnabled(false);
				this.contextMenuUserAssessmentSKINItem.setEnabled(false);
				this.contextMenuUserAssessmentBLADItem.setEnabled(false);
				this.contextMenuUserAssessmentBWELItem.setEnabled(false);
				this.contextMenuUserAssessmentMOBItem.setEnabled(false);
				this.contextMenuUserAssessmentWCItem.setEnabled(false);
				this.contextMenuUserAssessmentCOMItem.setEnabled(false);
				this.contextMenuUserAssessmentDISItem.setEnabled(false);
				this.contextMenuUserAssessmentPSYItem.setEnabled(false);
				this.contextMenuUserAssessmentNURSEDISCHARGECHKLSTItem.setEnabled(false);
				this.contextMenuUserAssessmentPREOPPOSSUMItem.setEnabled(false);
				this.contextMenuUserAssessmentOPERATIVEDETAILSPOSSUMItem.setEnabled(false);
				this.contextMenuUserAssessmentNEW_NON_SCORINGItem.setEnabled(false);
				this.contextMenuUserAssessmentDISCHARGECHECKLISTItem.setEnabled(false);
				this.contextMenuUserAssessmentNURSING_DISCHARGEItem.setEnabled(false);
				this.contextMenuUserAssessmentNURSING_DISCHARGE_PLANNINGItem.setEnabled(false);
				this.contextMenuUserAssessmentADD_NEW_BASED_ON_PREVIOUSItem.setEnabled(false);
				this.contextMenuUserAssessmentMANCHESTERTRIAGEItem.setEnabled(false);
				this.contextMenuUserAssessmentEDITItem.setEnabled(false);
				this.contextMenuUserAssessmentVIEWItem.setEnabled(false);
				this.contextMenuUserAssessmentPREVIEWItem.setEnabled(false);
				this.contextMenuUserAssessmentMOVE_UPItem.setEnabled(false);
				this.contextMenuUserAssessmentMOVE_DOWNItem.setEnabled(false);
				this.contextMenuUserAssessmentINTRODUCTORY_PHONE_CALLItem.setEnabled(false);
			}
			public void hideAllUserAssessmentMenuItems()
			{
				this.contextMenuUserAssessmentADDItem.setVisible(false);
				this.contextMenuUserAssessmentDPPItem.setVisible(false);
				this.contextMenuUserAssessmentFALLRISKItem.setVisible(false);
				this.contextMenuUserAssessmentADLItem.setVisible(false);
				this.contextMenuUserAssessmentSKINItem.setVisible(false);
				this.contextMenuUserAssessmentBLADItem.setVisible(false);
				this.contextMenuUserAssessmentBWELItem.setVisible(false);
				this.contextMenuUserAssessmentMOBItem.setVisible(false);
				this.contextMenuUserAssessmentWCItem.setVisible(false);
				this.contextMenuUserAssessmentCOMItem.setVisible(false);
				this.contextMenuUserAssessmentDISItem.setVisible(false);
				this.contextMenuUserAssessmentPSYItem.setVisible(false);
				this.contextMenuUserAssessmentNURSEDISCHARGECHKLSTItem.setVisible(false);
				this.contextMenuUserAssessmentPREOPPOSSUMItem.setVisible(false);
				this.contextMenuUserAssessmentOPERATIVEDETAILSPOSSUMItem.setVisible(false);
				this.contextMenuUserAssessmentNEW_NON_SCORINGItem.setVisible(false);
				this.contextMenuUserAssessmentDISCHARGECHECKLISTItem.setVisible(false);
				this.contextMenuUserAssessmentNURSING_DISCHARGEItem.setVisible(false);
				this.contextMenuUserAssessmentNURSING_DISCHARGE_PLANNINGItem.setVisible(false);
				this.contextMenuUserAssessmentADD_NEW_BASED_ON_PREVIOUSItem.setVisible(false);
				this.contextMenuUserAssessmentMANCHESTERTRIAGEItem.setVisible(false);
				this.contextMenuUserAssessmentEDITItem.setVisible(false);
				this.contextMenuUserAssessmentVIEWItem.setVisible(false);
				this.contextMenuUserAssessmentPREVIEWItem.setVisible(false);
				this.contextMenuUserAssessmentMOVE_UPItem.setVisible(false);
				this.contextMenuUserAssessmentMOVE_DOWNItem.setVisible(false);
				this.contextMenuUserAssessmentINTRODUCTORY_PHONE_CALLItem.setVisible(false);
			}
			private Menu contextMenuUserAssessment;
			public ReadOnlyMenuItem getUserAssessmentADDItem()
			{
				return this.contextMenuUserAssessmentADDItem;
			}
			private MenuItem contextMenuUserAssessmentADDItem;
			public MenuItem getUserAssessmentDPPItem()
			{
				return this.contextMenuUserAssessmentDPPItem;
			}
			private MenuItem contextMenuUserAssessmentDPPItem;
			public ReadOnlyMenuItem getUserAssessmentFALLRISKItem()
			{
				return this.contextMenuUserAssessmentFALLRISKItem;
			}
			private MenuItem contextMenuUserAssessmentFALLRISKItem;
			public ReadOnlyMenuItem getUserAssessmentADLItem()
			{
				return this.contextMenuUserAssessmentADLItem;
			}
			private MenuItem contextMenuUserAssessmentADLItem;
			public ReadOnlyMenuItem getUserAssessmentSKINItem()
			{
				return this.contextMenuUserAssessmentSKINItem;
			}
			private MenuItem contextMenuUserAssessmentSKINItem;
			public ReadOnlyMenuItem getUserAssessmentBLADItem()
			{
				return this.contextMenuUserAssessmentBLADItem;
			}
			private MenuItem contextMenuUserAssessmentBLADItem;
			public ReadOnlyMenuItem getUserAssessmentBWELItem()
			{
				return this.contextMenuUserAssessmentBWELItem;
			}
			private MenuItem contextMenuUserAssessmentBWELItem;
			public ReadOnlyMenuItem getUserAssessmentMOBItem()
			{
				return this.contextMenuUserAssessmentMOBItem;
			}
			private MenuItem contextMenuUserAssessmentMOBItem;
			public ReadOnlyMenuItem getUserAssessmentWCItem()
			{
				return this.contextMenuUserAssessmentWCItem;
			}
			private MenuItem contextMenuUserAssessmentWCItem;
			public ReadOnlyMenuItem getUserAssessmentCOMItem()
			{
				return this.contextMenuUserAssessmentCOMItem;
			}
			private MenuItem contextMenuUserAssessmentCOMItem;
			public ReadOnlyMenuItem getUserAssessmentDISItem()
			{
				return this.contextMenuUserAssessmentDISItem;
			}
			private MenuItem contextMenuUserAssessmentDISItem;
			public ReadOnlyMenuItem getUserAssessmentPSYItem()
			{
				return this.contextMenuUserAssessmentPSYItem;
			}
			private MenuItem contextMenuUserAssessmentPSYItem;
			public ReadOnlyMenuItem getUserAssessmentNURSEDISCHARGECHKLSTItem()
			{
				return this.contextMenuUserAssessmentNURSEDISCHARGECHKLSTItem;
			}
			private MenuItem contextMenuUserAssessmentNURSEDISCHARGECHKLSTItem;
			public ReadOnlyMenuItem getUserAssessmentPREOPPOSSUMItem()
			{
				return this.contextMenuUserAssessmentPREOPPOSSUMItem;
			}
			private MenuItem contextMenuUserAssessmentPREOPPOSSUMItem;
			public ReadOnlyMenuItem getUserAssessmentOPERATIVEDETAILSPOSSUMItem()
			{
				return this.contextMenuUserAssessmentOPERATIVEDETAILSPOSSUMItem;
			}
			private MenuItem contextMenuUserAssessmentOPERATIVEDETAILSPOSSUMItem;
			public ReadOnlyMenuItem getUserAssessmentNEW_NON_SCORINGItem()
			{
				return this.contextMenuUserAssessmentNEW_NON_SCORINGItem;
			}
			private MenuItem contextMenuUserAssessmentNEW_NON_SCORINGItem;
			public MenuItem getUserAssessmentDISCHARGECHECKLISTItem()
			{
				return this.contextMenuUserAssessmentDISCHARGECHECKLISTItem;
			}
			private MenuItem contextMenuUserAssessmentDISCHARGECHECKLISTItem;
			public ReadOnlyMenuItem getUserAssessmentNURSING_DISCHARGEItem()
			{
				return this.contextMenuUserAssessmentNURSING_DISCHARGEItem;
			}
			private MenuItem contextMenuUserAssessmentNURSING_DISCHARGEItem;
			public ReadOnlyMenuItem getUserAssessmentNURSING_DISCHARGE_PLANNINGItem()
			{
				return this.contextMenuUserAssessmentNURSING_DISCHARGE_PLANNINGItem;
			}
			private MenuItem contextMenuUserAssessmentNURSING_DISCHARGE_PLANNINGItem;
			public MenuItem getUserAssessmentADD_NEW_BASED_ON_PREVIOUSItem()
			{
				return this.contextMenuUserAssessmentADD_NEW_BASED_ON_PREVIOUSItem;
			}
			private MenuItem contextMenuUserAssessmentADD_NEW_BASED_ON_PREVIOUSItem;
			public MenuItem getUserAssessmentMANCHESTERTRIAGEItem()
			{
				return this.contextMenuUserAssessmentMANCHESTERTRIAGEItem;
			}
			private MenuItem contextMenuUserAssessmentMANCHESTERTRIAGEItem;
			public ReadOnlyMenuItem getUserAssessmentEDITItem()
			{
				return this.contextMenuUserAssessmentEDITItem;
			}
			private MenuItem contextMenuUserAssessmentEDITItem;
			public ReadOnlyMenuItem getUserAssessmentVIEWItem()
			{
				return this.contextMenuUserAssessmentVIEWItem;
			}
			private MenuItem contextMenuUserAssessmentVIEWItem;
			public ReadOnlyMenuItem getUserAssessmentPREVIEWItem()
			{
				return this.contextMenuUserAssessmentPREVIEWItem;
			}
			private MenuItem contextMenuUserAssessmentPREVIEWItem;
			public ReadOnlyMenuItem getUserAssessmentMOVE_UPItem()
			{
				return this.contextMenuUserAssessmentMOVE_UPItem;
			}
			private MenuItem contextMenuUserAssessmentMOVE_UPItem;
			public ReadOnlyMenuItem getUserAssessmentMOVE_DOWNItem()
			{
				return this.contextMenuUserAssessmentMOVE_DOWNItem;
			}
			private MenuItem contextMenuUserAssessmentMOVE_DOWNItem;
			public ReadOnlyMenuItem getUserAssessmentINTRODUCTORY_PHONE_CALLItem()
			{
				return this.contextMenuUserAssessmentINTRODUCTORY_PHONE_CALLItem;
			}
			private MenuItem contextMenuUserAssessmentINTRODUCTORY_PHONE_CALLItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[95];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ID", "ID_UserAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-HELPURL", "HelpURL");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-CATEGORY", "Category");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-ID", "ID_UserAssessment");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-NAME", "Name");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-DESCRIPTION", "Description");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-HELPURL", "HelpURL");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-CATEGORY", "Category");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.UserAssessmentFilter", "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
