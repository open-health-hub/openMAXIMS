//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2389.25607)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.graphicassessmentinstantiationfinding;

import ims.assessment.helper.UserAssessmentInstHelper;
import ims.assessment.vo.PatientGraphicAssessmentFindingVo;
import ims.assessment.vo.PatientGraphicalAssessmentStageVo;
import ims.assessment.vo.PatientGraphicalAssessmentStageVoCollection;
import ims.assessment.vo.Patient_GraphicAssessmentFindingVo;
import ims.assessment.vo.Patient_GraphicalAssessmentStageVo;
import ims.assessment.vo.Patient_GraphicalAssessmentStageVoCollection;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.framework.controls.DynamicGridCell;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
		
		if(form.getGlobalContext().Assessment.getAutoSubmitIsNotNull() && form.getGlobalContext().Assessment.getAutoSubmit().booleanValue())
		{
			if(save())
				engine.close(DialogResult.OK);
		}
	}
	private void open() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(true);
		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = form.getGlobalContext().Core.getPatientGraphicAssessmentFinding();
		
		//WDEV-12215
		Patient_GraphicAssessmentFindingVo voPatient_GraphicAssessmentFinding = form.getGlobalContext().Core.getPatient_GraphicAssessmentFinding();
		
		if(voPatientGraphicAssessmentFinding != null && form.getGlobalContext().Core.getPatientAssessmentFullIsNotNull())
		{
			if(voPatientGraphicAssessmentFinding.getAuthoringInformationIsNotNull())
			{
				form.customControlAuthoringInfo().setValue(voPatientGraphicAssessmentFinding.getAuthoringInformation());
				form.customControlAuthoringInfo().setEnabledAuthoringHCP(Boolean.FALSE);
				form.customControlAuthoringInfo().setEnabledDateTime(Boolean.FALSE);
			}
			else
			{
				form.customControlAuthoringInfo().initializeComponent();
				form.customControlAuthoringInfo().setEnabledAuthoringHCP(Boolean.TRUE);
				form.customControlAuthoringInfo().setEnabledDateTime(Boolean.TRUE);
			}
			populateScreenFromData(voPatientGraphicAssessmentFinding);
			displayQuestions(voPatientGraphicAssessmentFinding);
		}
		else if(voPatient_GraphicAssessmentFinding != null && form.getGlobalContext().Core.getPatient_AssessmentFullIsNotNull())	//WDEV-12215
		{
			if(voPatient_GraphicAssessmentFinding.getAuthoringInformationIsNotNull())
			{
				form.customControlAuthoringInfo().setValue(voPatient_GraphicAssessmentFinding.getAuthoringInformation());
				form.customControlAuthoringInfo().setEnabledAuthoringHCP(Boolean.FALSE);
				form.customControlAuthoringInfo().setEnabledDateTime(Boolean.FALSE);
			}
			else
			{
				form.customControlAuthoringInfo().initializeComponent();
				form.customControlAuthoringInfo().setEnabledAuthoringHCP(Boolean.TRUE);
				form.customControlAuthoringInfo().setEnabledDateTime(Boolean.TRUE);
			}
			
			populateScreenFromData(voPatient_GraphicAssessmentFinding);
			displayQuestions(voPatient_GraphicAssessmentFinding);
		}
	}
	
	//WDEV-12215
	private void populateScreenFromData(Patient_GraphicAssessmentFindingVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.txtDetails().setValue(value.getAreaDetailsIsNotNull() ? value.getAreaDetails(): null);
		this.form.txtName().setValue(value.getAreaNameIsNotNull() ? value.getAreaName(): null);
	}
	
	//WDEV-12215
	private void displayQuestions(Patient_GraphicAssessmentFindingVo voPatient_GraphicAssessmentFinding) throws PresentationLogicException
	{
		if (voPatient_GraphicAssessmentFinding == null)
			return;
		
		UserAssessmentInstHelper helper = getHelper();		
		helper.populateGraphicFinding(form.getGlobalContext().Core.getPatient_AssessmentFull(), voPatient_GraphicAssessmentFinding);
	}
	
	private void displayQuestions(PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding) throws PresentationLogicException
	{
		if (voPatientGraphicAssessmentFinding == null)
			return;
		
		UserAssessmentInstHelper helper = getHelper();		
		helper.populateGraphicFinding(form.getGlobalContext().Core.getPatientAssessmentFull(), voPatientGraphicAssessmentFinding);
	}
	
	private UserAssessmentInstHelper getHelper()
	{
		UserAssessmentInstHelper helper = new UserAssessmentInstHelper(form.dyngrdQuestions(), form.getImages().Core.QuestionSmall, form.getImages().Core.TextBox, form.getImages().Core.SmallNew, form.getImages().Core.SmallCancel, form.getImages().Core.MandatoryQuestion,false,false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		return helper;
	}
	private void initialize()
	{
		form.txtDetails().setFocus();
	}
	protected void onDyngrdQuestionsCellButtonClicked(DynamicGridCell cell)
	{
		//WDEV-12215
		if(form.getGlobalContext().Core.getPatientGraphicAssessmentFindingIsNotNull())
		{
			getHelper().addOrRemoveAnswer(cell);
		}
		else if(form.getGlobalContext().Core.getPatient_GraphicAssessmentFindingIsNotNull())
		{
			getHelper().add_OrRemoveAnswer(cell);
		}
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();					//tis call is to cancel the data that was entered
		takeAnswersWhenCancel();
		engine.close(DialogResult.CANCEL);
	}
	private void takeAnswersWhenCancel()
	{
		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = form.getGlobalContext().Core.getPatientGraphicAssessmentFinding();
		
		//WDEV-12215
		Patient_GraphicAssessmentFindingVo voPatient_GraphicAssessmentFinding = form.getGlobalContext().Core.getPatient_GraphicAssessmentFinding();
		
		if(voPatientGraphicAssessmentFinding != null && form.getGlobalContext().Core.getPatientAssessmentFullIsNotNull())
		{
			voPatientGraphicAssessmentFinding = populateDataFromScreen(voPatientGraphicAssessmentFinding);
			populateAuthoringInfo(voPatientGraphicAssessmentFinding);
			populateAnswersDataFromScreen(voPatientGraphicAssessmentFinding);
		}
		else if(voPatient_GraphicAssessmentFinding != null && form.getGlobalContext().Core.getPatient_AssessmentFullIsNotNull())
		{
			voPatient_GraphicAssessmentFinding = populateDataFromScreen(voPatient_GraphicAssessmentFinding);
			populateAuthoringInfo(voPatient_GraphicAssessmentFinding);
			populateAnswersDataFromScreen(voPatient_GraphicAssessmentFinding);
		}
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			engine.close(DialogResult.OK);
	}
	
	private boolean save()
	{
		if(uiErrors())
			return false;
		
		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = form.getGlobalContext().Core.getPatientGraphicAssessmentFinding();
		
		//WDEV-12215
		Patient_GraphicAssessmentFindingVo voPatient_GraphicAssessmentFinding = form.getGlobalContext().Core.getPatient_GraphicAssessmentFinding();
		
		if(voPatientGraphicAssessmentFinding != null && form.getGlobalContext().Core.getPatientAssessmentFullIsNotNull())
		{
			voPatientGraphicAssessmentFinding = populateDataFromScreen(voPatientGraphicAssessmentFinding);
			populateAuthoringInfo(voPatientGraphicAssessmentFinding);
			populateAnswersDataFromScreen(voPatientGraphicAssessmentFinding);
			String[] errors = voPatientGraphicAssessmentFinding.validate();
			if(errors != null)
			{
				engine.showErrors(errors);
				return false;
			}
			
			form.getGlobalContext().Core.setPatientGraphicAssessmentFinding(voPatientGraphicAssessmentFinding);
		}
		else if(voPatient_GraphicAssessmentFinding != null && form.getGlobalContext().Core.getPatient_AssessmentFullIsNotNull())
		{
			voPatient_GraphicAssessmentFinding = populateDataFromScreen(voPatient_GraphicAssessmentFinding);
			populateAuthoringInfo(voPatient_GraphicAssessmentFinding);
			populateAnswersDataFromScreen(voPatient_GraphicAssessmentFinding);
			String[] errors = voPatient_GraphicAssessmentFinding.validate();
			if(errors != null)
			{
				engine.showErrors(errors);
				return false;
			}
			
			form.getGlobalContext().Core.setPatient_GraphicAssessmentFinding(voPatient_GraphicAssessmentFinding);
		}
		
		return true;
	}
	
	//WDEV-12215
	private void populateAnswersDataFromScreen(Patient_GraphicAssessmentFindingVo voPatientGraphicAssessmentFinding)
	{
		UserAssessmentInstHelper helper = getHelper();
		//TODO to implement 1:N relationship
		
		if(voPatientGraphicAssessmentFinding.getStage() == null)
			voPatientGraphicAssessmentFinding.setStage(new Patient_GraphicalAssessmentStageVoCollection());
		
		if(voPatientGraphicAssessmentFinding.getStage().size() == 0)
			voPatientGraphicAssessmentFinding.getStage().add(new Patient_GraphicalAssessmentStageVo());
		
		Patient_GraphicalAssessmentStageVo annotatedStage = null;
		for (int i = 0; i < voPatientGraphicAssessmentFinding.getStage().size(); i++)
		{
			Patient_GraphicalAssessmentStageVo stage = voPatientGraphicAssessmentFinding.getStage().get(i);
			
			if(stage.getStageIsNotNull() 
					&& stage.getStage().getAssessmentStageIsNotNull() 
					&& stage.getStage().getAssessmentStage().getIsAnnotatedIsNotNull()
					&& stage.getStage().getAssessmentStage().getIsAnnotated().booleanValue())
			{
				annotatedStage = stage;
				break;
			}
		}
		
		if(annotatedStage == null)
		{
			//we should always have an annotated stage
			annotatedStage = voPatientGraphicAssessmentFinding.getStage().get(0);
		}
		
		annotatedStage.setFindingQuestion(helper.get_GraphicFindingAnswers(annotatedStage.getFindingQuestion()));
		//voPatientGraphicAssessmentFinding.setFindingQuestion(helper.getGraphicFindingAnswers());
	}
	
	//WDEV-12215
	private void populateAuthoringInfo(Patient_GraphicAssessmentFindingVo voPatient_GraphicAssessmentFinding)
	{
		if(voPatient_GraphicAssessmentFinding == null)
			return;
		
		voPatient_GraphicAssessmentFinding.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
	}
	
	//WDEV-12215
	private Patient_GraphicAssessmentFindingVo populateDataFromScreen(Patient_GraphicAssessmentFindingVo value)
	{
		if(value == null)
			value = new Patient_GraphicAssessmentFindingVo();

		value.setAreaDetails(this.form.txtDetails().getValue());
		value.setAreaName(this.form.txtName().getValue());

		return value;
	}
	
	private boolean uiErrors()
	{
		ArrayList uiErrors = new ArrayList();

		if(form.customControlAuthoringInfo() == null || form.customControlAuthoringInfo().getValue() == null || form.customControlAuthoringInfo().getValue().getAuthoringDateTime() == null)
		{
			uiErrors.add("Authoring Date/Time is mandatory");
		}
		
		if(form.customControlAuthoringInfo() == null || form.customControlAuthoringInfo().getValue() == null || form.customControlAuthoringInfo().getValue().getAuthoringHcp() == null)
		{
			uiErrors.add("Authoring HCP is mandatory");
		}
		
		if(uiErrors.size() > 0)
		{
			String[] errors = new String[uiErrors.size()];
			uiErrors.toArray(errors);
			engine.showErrors(errors);
			return true;
		}
		
		return false;
	}
	private void populateAnswersDataFromScreen(PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding)
	{
		UserAssessmentInstHelper helper = getHelper();
		//TODO to implement 1:N relationship
		
		if(voPatientGraphicAssessmentFinding.getStage() == null)
			voPatientGraphicAssessmentFinding.setStage(new PatientGraphicalAssessmentStageVoCollection());
		
		if(voPatientGraphicAssessmentFinding.getStage().size() == 0)
			voPatientGraphicAssessmentFinding.getStage().add(new PatientGraphicalAssessmentStageVo());
		
		PatientGraphicalAssessmentStageVo annotatedStage = null;
		for (int i = 0; i < voPatientGraphicAssessmentFinding.getStage().size(); i++)
		{
			PatientGraphicalAssessmentStageVo stage = voPatientGraphicAssessmentFinding.getStage().get(i);
			
			if(stage.getStageIsNotNull() 
					&& stage.getStage().getAssessmentStageIsNotNull() 
					&& stage.getStage().getAssessmentStage().getIsAnnotatedIsNotNull()
					&& stage.getStage().getAssessmentStage().getIsAnnotated().booleanValue())
			{
				annotatedStage = stage;
				break;
			}
		}
		
		if(annotatedStage == null)
		{
			//we should always have an annotated stage
			annotatedStage = voPatientGraphicAssessmentFinding.getStage().get(0);
		}
		
		annotatedStage.setFindingQuestion(helper.getGraphicFindingAnswers(annotatedStage.getFindingQuestion()));
		//voPatientGraphicAssessmentFinding.setFindingQuestion(helper.getGraphicFindingAnswers());
	}
	private void populateAuthoringInfo(PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding)
	{
		if(voPatientGraphicAssessmentFinding == null)
			return;
		
		voPatientGraphicAssessmentFinding.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
	}
}
