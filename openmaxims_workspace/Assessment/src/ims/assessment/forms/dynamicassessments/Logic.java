//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.52 build 2508.29436)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.dynamicassessments;

import ims.assessment.configuration.vo.GraphicAssessmentRefVo;
import ims.assessment.configuration.vo.UserAssessmentRefVo;
import ims.assessment.helper.DynamicAssessmentHelper;
import ims.assessment.instantiation.vo.PatientAssessmentRefVo;
import ims.assessment.vo.Answer_DetailsVo;
import ims.assessment.vo.DynamicAssessmentSearchCriteriaVo;
import ims.assessment.vo.Graphic_AssessmentVo;
import ims.assessment.vo.Patient_AssessmentAnswerVo;
import ims.assessment.vo.Patient_AssessmentDataVo;
import ims.assessment.vo.Patient_AssessmentGroupVo;
import ims.assessment.vo.Patient_AssessmentListVo;
import ims.assessment.vo.Patient_AssessmentListVoCollection;
import ims.assessment.vo.Patient_AssessmentQuestionVo;
import ims.assessment.vo.Patient_AssessmentVo;
import ims.assessment.vo.UserAssessmentWithServiceCollVo;
import ims.assessment.vo.User_AssessmentVo;
import ims.assessment.vo.lookups.CopyLastAssessmentContextType;
import ims.configuration.AppRight;
import ims.configuration.InitConfig;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.clinical.vo.ServiceRefVoCollection;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.core.vo.PatientDocumentLiteVo;
import ims.core.vo.PatientDocumentStatusVo;
import ims.core.vo.PatientDocumentStatusVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserAssessmentCategory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.application.AssessmentRecordingLevel;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppUser;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.vo.ValueObjectRef;

import java.io.File;
import java.security.SecureRandom;
import java.util.ArrayList;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(args != null && args.length == 1 && args[0] instanceof UserAssessmentRefVo)
		{
			form.getGlobalContext().Assessment.setDynamicAssessment((ValueObjectRef)args[0]);
			form.getLocalContext().setStructuralAssessmentRef((UserAssessmentRefVo)args[0]);			
		}
		else if(args != null && args.length == 1 && args[0] instanceof GraphicAssessmentRefVo)
		{
			form.getGlobalContext().Assessment.setDynamicAssessment((ValueObjectRef)args[0]);
			form.getLocalContext().setGraphicalAssessmentRef((GraphicAssessmentRefVo)args[0]);			
		}
		else if(form.getGlobalContext().Assessment.getDynamicAssessment() != null)
		{
			ValueObjectRef lastArg = form.getGlobalContext().Assessment.getDynamicAssessment();
			if(lastArg instanceof UserAssessmentRefVo)
			{
				form.getLocalContext().setStructuralAssessmentRef((UserAssessmentRefVo)lastArg);			
			}
			else if(lastArg instanceof GraphicAssessmentRefVo)
			{
				form.getLocalContext().setGraphicalAssessmentRef((GraphicAssessmentRefVo)lastArg);
			}
			else
			{
				throw new PresentationLogicException("Last paremeter used is invalid.");
			}
		}
		else
		{
			throw new PresentationLogicException("Unexpected form paramaters.");
		}
		
		initialize();
		open(false);
		postInitialize();
		
		//wdev-14339
		// If we are here it could be that the SelectedAssessment in the GC is from a different context but if called 
		// from PatientAssessmentSearch we still want to view it......
		if (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientAssessmentSearch)
			&& form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessmentIsNotNull()
			&& form.getLocalContext().getCurrentPatientAssessmentIsNotNull()
			&&  ! form.getLocalContext().getCurrentPatientAssessment().equals(form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment()))
		{

			form.getLocalContext().setCurrentPatientAssessment(domain.getPatientAssessment(form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment()));

			if (form.getLocalContext().getStructuralAssessmentRefIsNotNull())			
				populateStructuralAssessmentControlsFromData(form.getLocalContext().getCurrentPatientAssessment());
			else if (form.getLocalContext().getGraphicalAssessmentIsNotNull())			
				populateGraphicalAssessmentControlsFromData(form.getLocalContext().getCurrentPatientAssessment());
			
			updateControlsState();
			
			form.getLocalContext().setAllowUpdate(false);
			refreshReport(form.getGlobalContext().Assessment.getDynamicAssessment());
			form.setMode(FormMode.VIEW);
		}

		//wdev-16324
		if( (form.getGlobalContext().Core.getUserDefinedFormModeIsNotNull() 
			     	&& form.getGlobalContext().Core.getUserDefinedFormMode().equals(FormMode.VIEW))
			||
			(form.getLocalContext().getCurrentPatientAssessment() != null 
					&& form.getLocalContext().getCurrentPatientAssessment().getStatusIsNotNull() 
					&& form.getLocalContext().getCurrentPatientAssessment().getStatus().equals(PatientAssessmentStatusReason.COMPLETED)) )
			form.setMode(FormMode.VIEW);

		if(form.getGlobalContext().Core.getUserDefinedFormModeIsNotNull() 
			&& form.getGlobalContext().Core.getUserDefinedFormMode().equals(FormMode.EDIT) 
			&& form.getLocalContext().getCurrentPatientAssessment() != null 
			&& form.getLocalContext().getCurrentPatientAssessment().getStatusIsNotNull() 
			&& !form.getLocalContext().getCurrentPatientAssessment().getStatus().equals(PatientAssessmentStatusReason.COMPLETED))
			updateInstance();
	}
	
	
	/**
	 * 	WDEV-12954
	 *	Event for searching Structural assessments by date
	 */
	@Override
	protected void onImbSearchAssessmentClick() throws PresentationLogicException
	{
		String[] errors = validateSearchAssessment();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		populateSearchCriteria(form.lyrAssessments().tabStructuralAssessment().dteAssessmentFrom().getValue(), form.lyrAssessments().tabStructuralAssessment().dteAssessmentTo().getValue());
		
		open(true);
	}


	private void populateSearchCriteria(Date fromDate, Date toDate)
	{
		// Fill in search criteria global context
		form.getGlobalContext().Assessment.setDynamicAssessmentSearchCriteria(new DynamicAssessmentSearchCriteriaVo());
		
		form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().setFromDate(fromDate);
		form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().setToDate(toDate);
		
		form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().setPatient(form.getGlobalContext().Core.getPatientShort());
		form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().setUserAssessment(form.getLocalContext().getStructuralAssessmentRef());
		form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().setGraphicAssessment(form.getLocalContext().getGraphicalAssessmentRef());
		
		form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
	}
	
	private String[] validateSearchAssessment()
	{
		ArrayList<String> errorsList = new ArrayList<String>();
		
		if (form.lyrAssessments().tabStructuralAssessment().dteAssessmentFrom().getValue() != null
			&& form.lyrAssessments().tabStructuralAssessment().dteAssessmentTo().getValue() != null
			&& form.lyrAssessments().tabStructuralAssessment().dteAssessmentFrom().getValue().isGreaterThan(form.lyrAssessments().tabStructuralAssessment().dteAssessmentTo().getValue()))
		{
				errorsList.add("'From' can not be set after 'To' date.");
		}
		
		return errorsList.toArray(new String[errorsList.size()]);
	}


	/**
	 *	WDEV-12954
	 *	Event for searching Graphical assessments by date
	 */
	@Override
	protected void onImbSearchGraphicalAssessmentClick() throws PresentationLogicException
	{
		String[] errors = validateSearchGraphicalAssessment();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		populateSearchCriteria(form.lyrAssessments().tabGraphicalAssessment().dteGraphicalFrom().getValue(), form.lyrAssessments().tabGraphicalAssessment().dteGraphicalTo().getValue());
		
		open(true);
	}

	private String[] validateSearchGraphicalAssessment()
	{
		ArrayList<String> errorsList = new ArrayList<String>();
		
		if (form.lyrAssessments().tabGraphicalAssessment().dteGraphicalFrom().getValue() != null
			 && form.lyrAssessments().tabGraphicalAssessment().dteGraphicalTo().getValue() != null
					&& form.lyrAssessments().tabGraphicalAssessment().dteGraphicalFrom().getValue().isGreaterThan(form.lyrAssessments().tabGraphicalAssessment().dteGraphicalTo().getValue()))
		{
				errorsList.add("'From' can not be set after 'To' date.");
		}
		
		return errorsList.toArray(new String[errorsList.size()]);
	}


	protected void onChkCompleteValueChanged() throws PresentationLogicException 
	{
		processCompletedOptions(form.chkComplete().getValue());
	}	
	protected void onImbGraphicalHelpClick() throws PresentationLogicException 
	{
		Graphic_AssessmentVo assessment = form.getLocalContext().getGraphicalAssessment();
		if(assessment != null && assessment.getHelpUrlIsNotNull() && assessment.getHelpUrl().trim().length() > 0)
		{
			engine.openUrl(assessment.getHelpUrl());
		}
		else
		{
			engine.showMessage("No help was associated with this assessment");
		}
	}
	protected void onImbStructuralHelpClick() throws PresentationLogicException 
	{
		User_AssessmentVo assessment = form.getLocalContext().getStructuralAssessment();
		if(assessment != null && assessment.getHelpURLIsNotNull() && assessment.getHelpURL().trim().length() > 0)
		{
			engine.openUrl(assessment.getHelpURL());
		}
		else
		{
			engine.showMessage("No help was associated with this assessment");
		}
	}
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		if(isOpenedAsPreviewDialog()) //if(isOpenedAsPreviewDialog() || engine.isDialog())
		{
			engine.close(DialogResult.CANCEL);
		}
		else
		{
			form.setMode(FormMode.VIEW);
			open(false);
		}
	}
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		newInstance();
	}
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		updateInstance();
	}
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if(save())
		{
			// WDEV-13300
			// If the assessment is completed and has a report associated (and the project is CCO) generate PDF and save it in the Patient Documents
			boolean userAssessmentWithReportAndStoredPrintAssessment = form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull()
																		&& form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessment().getAssociatedReportIsNotNull()
																		&& Boolean.TRUE.equals(form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessment().getStorePrintedAssessment());
			
			boolean graphicAssessmentWithReportAndStoredPrintAssessment = form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getGraphicIsNotNull()
																			&& form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getGraphic().getAssociatedReportForPrintingIsNotNull()
																			&& Boolean.TRUE.equals(form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getGraphic().getStorePrintedReport());
			
			
			if (form.getLocalContext().getCurrentPatientAssessmentIsNotNull()
					&& PatientAssessmentStatusReason.COMPLETED.equals(form.getLocalContext().getCurrentPatientAssessment().getStatus())
					&& (userAssessmentWithReportAndStoredPrintAssessment || graphicAssessmentWithReportAndStoredPrintAssessment)
					&& Boolean.TRUE.equals(ConfigFlag.UI.SAVE_PATIENTDOCUMENT_ON_ASSESSMENTCOMPLETED.getValue()))
			{
				print(false);
			}
			
			if(engine.isDialog())
			{
				engine.close(DialogResult.OK);	
				return;
			}	
			
			form.setMode(FormMode.VIEW);
			open(false);
		}
	}

	@Override
	protected void onBtnPrintClick() throws PresentationLogicException
	{
		if (print(true))
		{
			form.setMode(FormMode.VIEW);
			open(false);
		}
	}

	/**
	 * Function will feed current Patient Assessment to assessment report (see AssessmentAsReport component)
	 * and that report will generate PDF that will be saved in Patient Documents 
	 * @throws PresentationLogicException 
	 */
	private boolean print(boolean preview) throws PresentationLogicException
	{
		StringBuilder path = new StringBuilder();
		
		path.append(ConfigFlag.GEN.PDF_STORE_PATH.getValue());
		
		if(!(path.toString().endsWith("/") || path.toString().endsWith("\\")))
			path.append("/");
		
		
		try
		{
			// WDEV-13300
			// If the report is saved at completion - do not perform this check
			// Perform a check here for already printed from a different session
			if (!Boolean.TRUE.equals(ConfigFlag.UI.SAVE_PATIENTDOCUMENT_ON_ASSESSMENTCOMPLETED.getValue()))
			{
				if (domain.isSaved(form.getLocalContext().getCurrentPatientAssessment()))
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					form.setMode(FormMode.VIEW);
					open(false);
					return false;
				}
			}
			
			ServerDocumentVo serverDocument = null;
			
			if (form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull())
			{
				serverDocument = printPatientAssessment(form.getLocalContext().getCurrentPatientAssessment(), form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessment().getAssociatedReport(), null);
			}
			else if (form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getGraphicIsNotNull())
			{
				serverDocument = printPatientAssessment(form.getLocalContext().getCurrentPatientAssessment(), form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getGraphic().getAssociatedReportForPrinting(), null);
			}

			if (serverDocument == null)
				return false;
			
			path.append(serverDocument.getFileName());

			// Create Patient Document VO
			PatientDocumentVo patientDocument = new PatientDocumentVo();

			patientDocument.setPatient(form.getGlobalContext().Core.getPatientShort());

			patientDocument.setEpisodeofCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			patientDocument.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			patientDocument.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
			
			if (form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull())
			{
				patientDocument.setName(form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessment().getName());
			}
			else if (form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getGraphicIsNotNull())
			{
				patientDocument.setName(form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getGraphic().getName());
			}
			
			patientDocument.setServerDocument(serverDocument);
			patientDocument.setCreationType(DocumentCreationType.GENERATED);
			
			if (form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull()
					&& UserAssessmentCategory.SAFETY_QUESTIONNAIRE.equals(form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessment().getCategory()))
			{
				patientDocument.setCategory(DocumentCategory.ASSESSMENT);
			}
			else
			{
				patientDocument.setCategory(DocumentCategory.ASSESSMENT);
			}
			
			patientDocument.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
			patientDocument.setRecordingUser(domain.getMosUser() instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) domain.getMosUser() : null);
			patientDocument.setRecordingDateTime(new DateTime());
			patientDocument.setAuthoringHCP(form.getLocalContext().getCurrentPatientAssessment().getCompletedHCP());
			patientDocument.setAuthoringDateTime(form.getLocalContext().getCurrentPatientAssessment().getCompletedDateTime());
			patientDocument.setResponsibleHCP(form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCP());
			patientDocument.setSpecialty(form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty());
			patientDocument.setCorrespondenceStatus(DocumentStatus.COMPLETED);

			// Create a new PatientDocumentStatusVo
			PatientDocumentStatusVo status = new PatientDocumentStatusVo();
			status.setCorrespondenceStatus(DocumentStatus.COMPLETED);
			status.setRecordingUser(patientDocument.getRecordingUser());
			status.setRecordingDateTime(patientDocument.getRecordingDateTime());

			patientDocument.setCurrentDocumentStatus(status);
			patientDocument.setDocumentStatusHistory(new PatientDocumentStatusVoCollection());
			patientDocument.getDocumentStatusHistory().add(status);
			
			patientDocument.setDocumentDate(form.getGlobalContext().Core.getCurrentCareContext() != null ? form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime().getDate() : patientDocument.getRecordingDateTime().getDate());//WDEV-13638
			//wdev-14028
			if(form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull())
			{
				UserAssessmentWithServiceCollVo assessVo = domain.getUserAssessment(form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessment());
				if(assessVo != null)
				{
					if(assessVo.getCategoryIsNotNull() && assessVo.getCategory().equals(UserAssessmentCategory.SAFETY_QUESTIONNAIRE))
					{
						if(assessVo.getServicesIsNotNull() && assessVo.getServices().size() > 0)
						{
							ServiceRefVoCollection tempCol = new ServiceRefVoCollection();
							for(int i = 0; i < assessVo.getServices().size();i++ )
							{
								tempCol.add(assessVo.getServices().get(i));
							}
							patientDocument.setServices(tempCol);
							
						}
						
					}
				}
			}
			//----------
			// Update current Patient Assessment
			form.getLocalContext().getCurrentPatientAssessment().setIsAssessmentDocumentSaved(Boolean.TRUE);

			// Validate Patient Assessment and Patient Document records
			String[] errors = patientDocument.validate();
			errors = form.getLocalContext().getCurrentPatientAssessment().validate(errors);

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			domain.savePatientDocument(patientDocument, form.getLocalContext().getCurrentPatientAssessment());
			
			// WDEV-13300 - Preview the document only if called from print
			if (preview)
				engine.open(form.getForms().Core.DocumentPrintPreview, new Object[] {patientDocument, getMaximsDocumentStorePath(), getMaximsDocumentServerURL()});

			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			
			// Attempt to delete uploaded document if stale occurs
			File file = new File(path.toString());
			if (file.exists() && file.canWrite())
				file.delete();
			
			form.setMode(FormMode.VIEW);
			open(false);
			return false;
		}
	}
	
	
	/**
	 * WDEV-13704
	 * Function used to print a server document for a Patient Assessment
	 */
	private ServerDocumentVo printPatientAssessment(PatientAssessmentRefVo patientAssessment, TemplateBoRefVo templateReport, String printerName)
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		String obj[] = domain.getReportAndTemplate(templateReport);
		
		if(obj == null)
		{
			engine.showMessage("I could not get the report and template linked to this assessment !");
			return null;
		}
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

		// WDEV-13300
		// PatientAssessment reports in new version use PatientAssessment_ID, but some old versions use a combination of
		// CareContext_id and ClinicalContact_id - so we need to set all tree as seeds. Reports are ignoring the extra & unused seeds
		client.addSeed(new SeedValue("PatientAssessment_id", patientAssessment.getID_PatientAssessment(), Integer.class));
		client.addSeed(new SeedValue("CareContext_id", form.getGlobalContext().Core.getCurrentCareContextIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext() : null, Integer.class));
		client.addSeed(new SeedValue("ClinicalContact_id", form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() ? form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact() : null, Integer.class));
		
		try
		{
			byte[] reportContent = client.buildReport(obj[0], obj[1], urlReportServer, QueryBuilderClient.PDF, printerName, 1);
			
			String fileName = generateName() + ".pdf";
			engine.uploadFile(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue(), reportContent, fileName, ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "/");//WDEV-15470
			
			String path = null;// client.buildReportAndUpload(obj[0], obj[1], urlReportServer, QueryBuilderClient.PDF, printerName, 1);
			
			int year  = new DateTime().getDate().getYear();
			int month = new DateTime().getDate().getMonth();
			int day   = new DateTime().getDate().getDay();
			
			if(fileName != null && fileName.length() > 0)
				path = year + "/" + month + "/" + day + "/" + fileName;//WDEV-15470

			// Create Server document VO if uploads succeeds
			ServerDocumentVo document = new ServerDocumentVo();
			document.setFileName(path);
			document.setFileType(FileType.PDF);
			
			return document;
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return null;
		}
		catch (Exception e)
		{
			engine.showMessage("Could not upload file: " + e.getMessage());
			return null;
		}
	}


	/**
	 * WDEV-13601
	 * Method used to access Maxims store path
	 * @return
	 */
	private String getMaximsDocumentStorePath()
	{
		String storePath = ConfigFlag.GEN.PDF_STORE_PATH.getValue();	// WDEV-13366
		
		if(!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";
				
		return storePath;
	}
	
	private String getMaximsDocumentServerURL()
	{
		String serverURL = ConfigFlag.GEN.FILE_SERVER_URL.getValue();
		
		if (!(serverURL.endsWith("/") || serverURL.endsWith("\\")))
			serverURL = serverURL + "/";
		
		return serverURL;
	}
	

	
	protected void onFormModeChanged() 
	{
		updateControlsState();	
		
		if(form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull() 
			&& ! engine.isDialog()
			&& form.getMode().equals(FormMode.VIEW))
			form.lnkReturn().setVisible(true);
		else
			form.lnkReturn().setVisible(false);
		
		
		if( form.getGlobalContext().Assessment.getForceCompletion() != null
			&& form.getGlobalContext().Assessment.getForceCompletion()
			&& form.getMode().equals(FormMode.EDIT)
			&& engine.getPreviousNonDialogFormName().equals(form.getForms().Core.VitalSignsAll))
			form.btnCancel().setVisible(false);
		else if (form.getMode().equals(FormMode.EDIT))
		{
			form.btnCancel().setVisible(true);
			form.btnCancel().setEnabled(true);
		}
	}	

	protected void onRecbrStructuredAssessmentValueChanged() throws PresentationLogicException 
	{
		Patient_AssessmentVo patientAssessment = domain.getPatientAssessment(form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().getValue());
		form.getLocalContext().setCurrentPatientAssessment((Patient_AssessmentVo)patientAssessment.clone());
		populateStructuralAssessmentControlsFromData(patientAssessment);
		updateControlsState();
		
		form.getGlobalContext().Core.setPatient_AssessmentFull(null);//wdev-15784
		form.getGlobalContext().Assessment.setPatientAssessment(null);//wdev-15784

		refreshReport(form.getGlobalContext().Assessment.getDynamicAssessment());
	}
	
	private void refreshReport(ValueObjectRef ref)
	{
		form.lyrAssessments().tabStructuralAssessment().btnView().setVisible(false);
		
		// If current Patient Assessment record is null then there shouldn't be any report generated
		// Hide report tab and exit the function
		if (!form.getLocalContext().getCurrentPatientAssessmentIsNotNull())
		{
			form.lyrAssessments().tabStructuralAssessment().lyrDualView().showtabPageAssessment();
			form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageReport().setHeaderVisible(false);
			return;
		}
		
		String linkedReportName = (ref != null ? domain.getLinkedReportName(ref) : null);
		
		if(linkedReportName != null)
		{
			// WDEV-13300
			// Pass the current PatientAssessment_id as seed, even for old reports as this function will set all three seeds
			// PatientAssessment_id for new versions of the PatientAssessment reports
			// CareContext_id and ClinicalContact_id for the old versions of the PatientAsessment reports
			form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageReport().ccReportBuilder().buildAssessmentReport(form.getLocalContext().getCurrentPatientAssessment());
		}
			
		if(form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().getValue() != null)
		{
			form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageReport().setCaption("View as report");
			form.lyrAssessments().tabStructuralAssessment().lyrDualView().showtabPageAssessment();
			
			if(linkedReportName != null)
			{
				//form.lyrAssessments().tabStructuralAssessment().btnView().setText("View report");
				form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageReport().setCaption(linkedReportName);
				form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageReport().setHeaderVisible(true);
				//form.lyrAssessments().tabStructuralAssessment().btnView().setVisible(true);
			}
			else
			{
				form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageReport().setHeaderVisible(false);
			}
		}
		else
		{
			if(linkedReportName != null)
			{
				form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageReport().setCaption(linkedReportName);
				form.lyrAssessments().tabStructuralAssessment().lyrDualView().showtabPageReport();
				
				//form.lyrAssessments().tabStructuralAssessment().btnView().setText("View assessment");
				//form.lyrAssessments().tabStructuralAssessment().btnView().setVisible(true);
			}
			else
			{
				form.lyrAssessments().tabStructuralAssessment().lyrDualView().showtabPageAssessment();
				form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageReport().setHeaderVisible(false);
			}
		}
	}
	protected void onRecbrGraphicalAssessmentValueChanged() throws PresentationLogicException 
	{
		Patient_AssessmentVo patientAssessment = domain.getPatientAssessment(form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().getValue());
		form.getLocalContext().setCurrentPatientAssessment((Patient_AssessmentVo)patientAssessment.clone());
		populateGraphicalAssessmentControlsFromData(patientAssessment);

		form.getGlobalContext().Core.setPatient_AssessmentFull(null);//wdev-15784
		form.getGlobalContext().Assessment.setPatientAssessment(null);//wdev-15784

		updateControlsState();
	}
	private void initialize()
	{
		form.getLocalContext().setOneInstancePresent(Boolean.FALSE);
		
		if(form.getLocalContext().getInRIEMode() != null)
		{
			boolean storedRIEmode = form.getLocalContext().getInRIEMode();
			if(storedRIEmode != engine.isRIEMode())
			{
				form.getLocalContext().setCurrentPatientAssessment(null);
			}
		}
		
		//WDEV-17043
		if (dialogOpenedFromEas() && form.getGlobalContext().EAS.getEasPatientAssessment() != null)
		{
			form.getGlobalContext().Assessment.setDynamicAssessmentSearchCriteria(null);
		}
		
		form.getLocalContext().setInRIEMode(engine.isRIEMode());
		
		form.lyrAssessments().tabStructuralAssessment().authStructuredAssessment().setIsRequiredPropertyToControls(Boolean.TRUE);
		form.lyrAssessments().tabStructuralAssessment().authStructuredAssessmentCompleted().setLabels(AuthoringLabelType.COMPLETING_COMPLETED);
		form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessment().setIsRequiredPropertyToControls(Boolean.TRUE);
		form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessmentCompleted().setLabels(AuthoringLabelType.COMPLETING_COMPLETED);
		
		form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentCompletedVisible(false);
		form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentCompletedEnabled(false);
		form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentCompletedVisible(false);
		form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentCompletedEnabled(false);
		
		// WDEV-12954
		// Check if the search criteria needs to be reseted
		resetSearchCriteriaIfNeeded();
	}


	/**
	 * WDEV-12954
	 * Function used to reset the search criteria if needed
	 */
	private void resetSearchCriteriaIfNeeded()
	{
		if (form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteriaIsNotNull())
		{
			DynamicAssessmentSearchCriteriaVo searchCriteria = form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria();
			
			// Build a mock search criteria
			DynamicAssessmentSearchCriteriaVo mockSearchCriteria = new DynamicAssessmentSearchCriteriaVo();
			
			mockSearchCriteria.setPatient(form.getGlobalContext().Core.getPatientShort());
			mockSearchCriteria.setUserAssessment(form.getLocalContext().getStructuralAssessmentRef());
			mockSearchCriteria.setGraphicAssessment(form.getLocalContext().getGraphicalAssessmentRef());
			mockSearchCriteria.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			mockSearchCriteria.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			mockSearchCriteria.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
			if (!searchCriteria.equals(mockSearchCriteria))
			{
				form.getGlobalContext().Assessment.setDynamicAssessmentSearchCriteria(null);
				return;
			}
			
			form.lyrAssessments().tabStructuralAssessment().dteAssessmentFrom().setValue(searchCriteria.getFromDate());
			form.lyrAssessments().tabStructuralAssessment().dteAssessmentTo().setValue(searchCriteria.getToDate());
			
			form.lyrAssessments().tabGraphicalAssessment().dteGraphicalFrom().setValue(searchCriteria.getFromDate());
			form.lyrAssessments().tabGraphicalAssessment().dteGraphicalTo().setValue(searchCriteria.getToDate());
		}
	}
	
	
	private void getPreviousLastAssessment() 
	{
		if(isStructuralAssessment())
		{
			if(form.getLocalContext().getStructuralAssessment() != null && form.getLocalContext().getStructuralAssessment().getCanCopyLastIsNotNull() && form.getLocalContext().getStructuralAssessment().getCanCopyLast() && form.getLocalContext().getStructuralAssessment().getCopyLastFromContextIsNotNull())
			{
				//WDEV-11721
				ValueObjectRef contextType = getContextTypeUsedForCopyLast();	
				form.getLocalContext().setCopyAnswersFromPreviousAssessment(domain.getPreviousPatientAssessment(contextType, form.getLocalContext().getStructuralAssessmentRef()));
			}
		}
	}
	
	//WDEV-1721 - starts here
	private ValueObjectRef getContextTypeUsedForCopyLast()
	{
		ValueObjectRef contextType = null;
		
		if(CopyLastAssessmentContextType.PATIENT.equals(form.getLocalContext().getStructuralAssessment().getCopyLastFromContext()))
		{
			contextType = form.getGlobalContext().Core.getPatientShort();
		}
		else if(CopyLastAssessmentContextType.CARE_SPELL.equals(form.getLocalContext().getStructuralAssessment().getCopyLastFromContext()))
		{
			//WDEV-11526
    		contextType = form.getGlobalContext().Core.getEpisodeofCareShort() != null ? form.getGlobalContext().Core.getEpisodeofCareShort().getCareSpell() : form.getGlobalContext().Core.getPatientShort();
		}
		else if(CopyLastAssessmentContextType.EPISODEOFCARE.equals(form.getLocalContext().getStructuralAssessment().getCopyLastFromContext()))
		{
			//WDEV-11526
			contextType = form.getGlobalContext().Core.getEpisodeofCareShort() != null ? form.getGlobalContext().Core.getEpisodeofCareShort() : form.getGlobalContext().Core.getPatientShort();
		}
		else if(CopyLastAssessmentContextType.CARECONTEXT.equals(form.getLocalContext().getStructuralAssessment().getCopyLastFromContext()))
		{
			//WDEV-11526 - starts here
			if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
				contextType = form.getGlobalContext().Core.getCurrentCareContext();
			else
				contextType = form.getGlobalContext().Core.getEpisodeofCareShort() != null ? form.getGlobalContext().Core.getEpisodeofCareShort() : form.getGlobalContext().Core.getPatientShort();
			//WDEV-11526 - ends here
		}
		
		return contextType;
	}
	//WDEV-11721 - ends here
	
	private void open(boolean showNoRecordsFoundMessage) throws PresentationLogicException 
	{	
		clearInstanceControls();
		
		form.getLocalContext().setRIE(null);
		
		UserAssessmentRefVo structuralAssessmentRef = form.getLocalContext().getStructuralAssessmentRef();
		GraphicAssessmentRefVo graphicalAssessmentRef = form.getLocalContext().getGraphicalAssessmentRef();
		
		if(structuralAssessmentRef != null)
		{
			showStructuralTab();
			
			
			populateStructuralAssessmentControlsFromData(showNoRecordsFoundMessage);
			enableStructuredAssessmentHelpUrlImage(form.getLocalContext().getStructuralAssessment());
			
			//WDEV-9134
			getPreviousLastAssessment();
			
			refreshReport(form.getGlobalContext().Assessment.getDynamicAssessment());
		}
		else if(graphicalAssessmentRef != null)
		{
			showGraphicalTab();
			
			
			populateGraphicalAssessmentControlsFromData(showNoRecordsFoundMessage);
			enableGraphicalAssessmentHelpUrlImage(form.getLocalContext().getGraphicalAssessment());
		}
		else
		{
			throw new PresentationLogicException("Unknown assessment context");
		}
		
		updateControlsState();
	}
	private void showStructuralTab() 
	{
		form.lyrAssessments().showtabStructuralAssessment();
	}
	private void showGraphicalTab() 
	{
		form.lyrAssessments().showtabGraphicalAssessment();
	}	
	private void populateStructuralAssessmentControlsFromData(boolean showNoRecordsFoundMessage) throws PresentationLogicException 
	{
		
		int count = populateStructuralAssessmentHistoricControlsFromData();
		
		Patient_AssessmentVo patientAssessment = null;

				
		if(count == 0 )
		{
			if (showNoRecordsFoundMessage)
			{
				engine.showMessage("No records found.");
			}
			
			User_AssessmentVo structuralAssessment = domain.getStructuredAssessment(form.getLocalContext().getStructuralAssessmentRef());
			if(structuralAssessment == null)
				throw new PresentationLogicException("Invalid user assessment");
			
			form.getLocalContext().setStructuralAssessment(structuralAssessment);
			if(engine.isDialog())
			{
				
				form.setMode(FormMode.VIEW);
				displayBlankStructuralAssessment();
				form.getLocalContext().setAllowNew(Boolean.valueOf(allowNew()));
				form.getLocalContext().setAllowUpdate(Boolean.valueOf(allowUpdate()));
			}
			else
			{
				displayBlankStructuralAssessment();
				
				form.getLocalContext().setAllowNew(Boolean.valueOf(allowNew()));
				form.getLocalContext().setAllowUpdate(Boolean.valueOf(allowUpdate()));
			}
		}
		else //if(form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().getValue() != null)
		{				
			PatientAssessmentRefVo recordBrowserValue = form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().getValue();
			
			if (recordBrowserValue == null)
			{
				form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().setValue((PatientAssessmentRefVo) form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().getValues().get(0));
				recordBrowserValue = form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().getValue();
			}
			
			patientAssessment = domain.getPatientAssessment(recordBrowserValue);				
			populateStructuralAssessmentControlsFromData(patientAssessment);
			form.getLocalContext().setStructuralAssessment(patientAssessment.getAssessmentData().getUserAssessment());
			if(engine.isDialog())// && isOpenedAsPreviewDialog())
			{
				//Currently only set in EWS.
				if (form.getGlobalContext().Assessment.getOpenDynamicAssessmentDialogInViewModeIsNotNull()
				&& form.getGlobalContext().Assessment.getOpenDynamicAssessmentDialogInViewMode().booleanValue())
				{
					form.getLocalContext().setRIE(patientAssessment);
					form.setMode(FormMode.VIEW);
					return;
				}
				form.setMode(FormMode.VIEW);
					
			}
		}
		

		form.getLocalContext().setRIE(patientAssessment);
	}
	private void populateGraphicalAssessmentControlsFromData(boolean showNoRecordsFoundMessage) throws PresentationLogicException 
	{
		
		int count = populateGraphicalAssessmentHistoricControlsFromData();
		
		Patient_AssessmentVo patientAssessment = null;
			
		if(count == 0)
		{
			if (showNoRecordsFoundMessage)
			{
				engine.showMessage("No records found.");
			}
			
			Graphic_AssessmentVo graphicalAssessment = domain.getGraphicalAssessment(form.getLocalContext().getGraphicalAssessmentRef());
			if(graphicalAssessment == null)
				throw new PresentationLogicException("Invalid graphical assessment");
			form.getLocalContext().setGraphicalAssessment(graphicalAssessment);
			
			displayBlankGraphicalAssessment();
			
			form.getLocalContext().setAllowNew(Boolean.valueOf(allowNew()));
			form.getLocalContext().setAllowUpdate(Boolean.valueOf(allowUpdate()));
		}
		else
		{
			if (form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().getValue() == null)
			{
				form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().setValue((PatientAssessmentRefVo) form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().getValues().get(0));
			}

			// WDEV-17043
			if (dialogOpenedFromEas())
			{
				if (form.getGlobalContext().EAS.getEasPatientAssessment() != null)
				{
					form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().setValue(form.getGlobalContext().EAS.getEasPatientAssessment());
				}
				else //WDEV-18146 if the EAS has no records linked to it, clear the screen
				{
					form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().clear();
					Graphic_AssessmentVo graphicalAssessment = domain.getGraphicalAssessment(form.getLocalContext().getGraphicalAssessmentRef());
					
					if(graphicalAssessment == null)
						throw new PresentationLogicException("Invalid graphical assessment");
					
					form.getLocalContext().setGraphicalAssessment(graphicalAssessment);
					displayBlankGraphicalAssessment();
					return;
				}
			}

			patientAssessment = domain.getPatientAssessment(form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().getValue());
			form.getLocalContext().setGraphicalAssessment(patientAssessment.getAssessmentData().getGraphic());
			populateGraphicalAssessmentControlsFromData(patientAssessment);
		}
		
		
		form.getLocalContext().setRIE(patientAssessment);
	}
	private boolean allowNew()
	{
		// WDEV-14007
		// Don't allow creation of new assessments when no Patient is selected (like when Previewing the Graphical Assessment)
		if (form.getGlobalContext().Core.getPatientShort() == null)
			return false;
			
		
		//start WDEV-14007
		Patient_AssessmentListVoCollection allrecords = null;
		
		if (form.getGlobalContext().Assessment.getDynamicAssessment()instanceof GraphicAssessmentRefVo)
		{
			allrecords = domain.listPatientAssessments(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentClinicalContact(), form.getLocalContext().getGraphicalAssessmentRef(), null, null);
		}
		else 
			if (form.getGlobalContext().Assessment.getDynamicAssessment()instanceof UserAssessmentRefVo)
			{
				allrecords = domain.listPatientAssessments(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentClinicalContact(), form.getLocalContext().getStructuralAssessmentRef(), null, null);
			}
		//end
		
		if(form.getGlobalContext().Core.getCurrentClinicalContact() == null)
			return true;
		
		Patient_AssessmentListVoCollection records = form.getLocalContext().getLoadedRecords();
		if(records == null)
			return true;
		
		//start WDEV-14007
		if (records.size() == 0 && allrecords!=null && allrecords.size()==1 && form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			return false;
		}
		//end
		
		for(int x = 0; x < records.size(); x++)
		{
			Patient_AssessmentListVo record = records.get(x);
			if(record != null && record.getClinicalContact() != null && record.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
				return false;
		}
		
		return true;
	}
	private boolean allowUpdate()
	{
		return false;
	}
	private boolean allowUpdate(Patient_AssessmentVo patientAssessment)
	{
		// WDEV-13300
		// Null check
		if (patientAssessment == null)
			return false;
		
		if (engine.isDialog()
			&& engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientAssessmentSearch))
		{
			if ( ! checkEpisodeMatch(patientAssessment))
				return false;
			if ( ! checkCareContextMatch(patientAssessment))
				return false;
			if ( ! checkClinicalContextMatch(patientAssessment))
				return false;
			
			return true;
		}
		
		if(patientAssessment.getClinicalContact() == null)
			return patientAssessment != null && form.getGlobalContext().Core.getCurrentClinicalContact() == null;
		
		if(patientAssessment.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
			return true;
		
		return false;
	}
	
	private boolean checkEpisodeMatch(Patient_AssessmentVo patientAssessment)
	{
		if ((form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()
			&& patientAssessment.getEpisodeOfCare() == null)
			||
			(form.getGlobalContext().Core.getEpisodeofCareShort() == null
			&& patientAssessment.getEpisodeOfCareIsNotNull()) )
			return false;

		if (form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()
			&& patientAssessment.getEpisodeOfCareIsNotNull()
			&&  ! form.getGlobalContext().Core.getEpisodeofCareShort().equals(patientAssessment.getEpisodeOfCare()))
			return false;
		
		return true;
	}

	private boolean checkCareContextMatch(Patient_AssessmentVo patientAssessment)
	{
		if ((form.getGlobalContext().Core.getCurrentCareContextIsNotNull()
			&& patientAssessment.getCareContext() == null)
			||
			(form.getGlobalContext().Core.getCurrentCareContext() == null
			&& patientAssessment.getCareContextIsNotNull()) )
			return false;

		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()
			&& patientAssessment.getCareContextIsNotNull()
			&&  ! form.getGlobalContext().Core.getCurrentCareContext().equals(patientAssessment.getCareContext()))
			return false;
		
		return true;
	}

	private boolean checkClinicalContextMatch(Patient_AssessmentVo patientAssessment)
	{
		if ( (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
			&& patientAssessment.getClinicalContact() == null)
			||
			(form.getGlobalContext().Core.getCurrentClinicalContact() == null
			&& patientAssessment.getClinicalContactIsNotNull()) )
			return false;

		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
			&& patientAssessment.getClinicalContactIsNotNull()
			&&  ! form.getGlobalContext().Core.getCurrentClinicalContact().equals(patientAssessment.getClinicalContact()))
			return false;
		
		return true;
	}


	private void populateStructuralAssessmentControlsFromData(Patient_AssessmentVo patientAssessment) 
	{
		form.getLocalContext().setRIE(patientAssessment);
		form.getLocalContext().setCurrentPatientAssessment((Patient_AssessmentVo)patientAssessment.clone());
		
		boolean completed = patientAssessment.getStatus() != null && patientAssessment.getStatus().equals(PatientAssessmentStatusReason.COMPLETED);
		
		form.chkComplete().setValue(completed);
		form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageAssessment().customStructuredAssessment().setPatientAssessment(patientAssessment, FormMode.VIEW.equals(form.getMode()),PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));	//WDEV-12381
		
		form.getLocalContext().setAllowNew(Boolean.valueOf(allowNew()));
		form.getLocalContext().setAllowUpdate(Boolean.valueOf(allowUpdate(patientAssessment)));
		
		if(patientAssessment.getAssessmentData() != null && patientAssessment.getAssessmentData().getUserAssessment() != null)
		{
			engine.setCaption(patientAssessment.getAssessmentData().getUserAssessment().getName());
			form.lyrAssessments().tabStructuralAssessment().setCaption(patientAssessment.getAssessmentData().getUserAssessment().getName());					
		}
		else
		{
			engine.setCaption("Assessment");
			form.lyrAssessments().tabStructuralAssessment().setCaption("Assessment");	
		}
		
		form.lyrAssessments().tabStructuralAssessment().authStructuredAssessment().setValue(patientAssessment.getAuthoringInformation());
		
		if(completed)
		{
			AuthoringInformationVo completeAuthoring = new AuthoringInformationVo();			
			completeAuthoring.setAuthoringHcp(patientAssessment.getCompletedHCP());
			completeAuthoring.setAuthoringDateTime(patientAssessment.getCompletedDateTime());
			form.lyrAssessments().tabStructuralAssessment().authStructuredAssessmentCompleted().setValue(completeAuthoring);
			form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentCompletedVisible(true);
		}
		else
		{
			form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentCompletedVisible(false);
		}
		
		//WDEV-11526, WDEV-11721
		populateStructuralAssessmentContextInformation(patientAssessment.getPatient(), patientAssessment.getEpisodeOfCare(), patientAssessment.getCareContext(), patientAssessment.getClinicalContact());
	}
	private void populateGraphicalAssessmentControlsFromData(Patient_AssessmentVo patientAssessment) 
	{
		form.getLocalContext().setRIE(patientAssessment);
		form.getLocalContext().setCurrentPatientAssessment((Patient_AssessmentVo)patientAssessment.clone());
		
		boolean completed = patientAssessment.getStatus() != null && patientAssessment.getStatus().equals(PatientAssessmentStatusReason.COMPLETED);
		
		form.chkComplete().setValue(completed);
		form.lyrAssessments().tabGraphicalAssessment().customGraphicalAssessment().setPatientAssessment(patientAssessment,FormMode.VIEW.equals(form.getMode()),PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		
		form.getLocalContext().setAllowNew(Boolean.valueOf(allowNew()));
		form.getLocalContext().setAllowUpdate(Boolean.valueOf(allowUpdate(patientAssessment)));
		
		if(form.getLocalContext().getGraphicalAssessment() != null  && form.getLocalContext().getGraphicalAssessment().getName() != null)
		{
			engine.setCaption(form.getLocalContext().getGraphicalAssessment().getName());
			form.lyrAssessments().tabGraphicalAssessment().setCaption(form.getLocalContext().getGraphicalAssessment().getName());					
		}
		else
		{
			engine.setCaption("Assessment");
			form.lyrAssessments().tabGraphicalAssessment().setCaption("Assessment");
		}
		
		form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessment().setValue(patientAssessment.getAuthoringInformation());
		
		if(completed)
		{
			AuthoringInformationVo completeAuthoring = new AuthoringInformationVo();			
			completeAuthoring.setAuthoringHcp(patientAssessment.getCompletedHCP());
			completeAuthoring.setAuthoringDateTime(patientAssessment.getCompletedDateTime());
			form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessmentCompleted().setValue(completeAuthoring);
			form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentCompletedVisible(true);
		}
		else
		{
			form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentCompletedVisible(false);
		}
		
		//WDEV-11526, WDEV-11721
		populateGraphicalAssessmentContextInformation(patientAssessment.getPatient(), patientAssessment.getEpisodeOfCare(), patientAssessment.getCareContext(), patientAssessment.getClinicalContact());
	}
	private void populateStructuralAssessmentContextInformation()
	{
		//WDEV-11526, WDEV-11721
		populateStructuralAssessmentContextInformation(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentClinicalContact());		
	}
	private void populateGraphicalAssessmentContextInformation()
	{
		//WDEV-11526, WDEV-11721
		populateGraphicalAssessmentContextInformation(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentClinicalContact());
	}
	
	//WDEV-11526 - added episodeOfCare parameter	WDEV-11721 - added patient parameter
	private void populateStructuralAssessmentContextInformation(PatientShort patient, EpisodeofCareShortVo episodeOfCare, CareContextShortVo careContext, ClinicalContactShortVo clinicalContact) 
	{
		form.lyrAssessments().tabStructuralAssessment().imbStructuralContextInfo().setTooltip(getContextInformation(patient, episodeOfCare, careContext, clinicalContact));
	}
	
	//WDEV-11526 - added episodeOfCare parameter	WDEV-11721 - added patient parameter
	private void populateStructuralAssessmentContextInformation(PatientRefVo patient, EpisodeOfCareRefVo episodeOfCare, CareContextRefVo careContext, ClinicalContactRefVo clinicalContact)
	{
		populateStructuralAssessmentContextInformation(domain.getPatient(patient), domain.getEpisodeOfCare(episodeOfCare), domain.getCareContextShort(careContext), domain.getClinicalContactShort(clinicalContact));
	}
	
	//WDEV-11526 - added episodeOfCare parameter	WDEV-11721 - added patient parameter
	private void populateGraphicalAssessmentContextInformation(PatientRefVo patient, EpisodeOfCareRefVo episodeOfCare, CareContextRefVo careContext, ClinicalContactRefVo clinicalContact)
	{
		populateGraphicalAssessmentContextInformation(domain.getPatient(patient), domain.getEpisodeOfCare(episodeOfCare), domain.getCareContextShort(careContext), domain.getClinicalContactShort(clinicalContact));
	}
	
	
	//WDEV-11526 - added episodeOfCare parameter  WDEV-11721 - added patient parameter
	private void populateGraphicalAssessmentContextInformation(PatientShort patient, EpisodeofCareShortVo episodeOfCare, CareContextShortVo careContext, ClinicalContactShortVo clinicalContact) 
	{
		form.lyrAssessments().tabGraphicalAssessment().imbGraphicalContextInfo().setTooltip(getContextInformation(patient, episodeOfCare, careContext, clinicalContact));
	}
	
	//WDEV-11526 - added episodeOfCare parameter	WDEV-11721 - added patient parameter
	private String getContextInformation(PatientShort patient, EpisodeofCareShortVo episodeOfCare, CareContextShortVo careContext, ClinicalContactShortVo clinicalContact) 
	{
		String infoText = "";
		
		//WDEV-11721 - starts here
		if(patient != null && patient.getName() != null)
		{
			infoText += "Patient: " + patient.getName().toString();
		}
		//WDEV-11721 - ends here
		
		//WDEV-11526 - starts here
		if(episodeOfCare != null)
		{
			infoText += "<br>Episode of Care: " + episodeOfCare.createDisplayString();
		}
		//WDEV-11526 - ends here
		
		if(careContext != null)
		{
			infoText += "<br>Care Context: " + careContext.toString();
		}
		//WDEV-11721
		/*else
		{
			infoText += "<br>No Care Context";
		}*/
		
		//WDEV-11721
		if(clinicalContact != null)
		{
			infoText += "<br>Clinical Contact: " + clinicalContact.toString();
		}
		
		return infoText;
	}
	private int populateStructuralAssessmentHistoricControlsFromData() 
	{
		form.getLocalContext().setLoadedRecords(new Patient_AssessmentListVoCollection());
		
		UserAssessmentRefVo userAssessment = form.getLocalContext().getStructuralAssessmentRef();
		form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().clear();
		
		//WDEV-11721 - starts here
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		if(patient == null)
			return 0;
		//WDEV-11721 - ends here
		
		Date fromDate = form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteriaIsNotNull() ? form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().getFromDate() : null;
		Date toDate = form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteriaIsNotNull() ? form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().getToDate() : null;
		
		Patient_AssessmentListVoCollection records = domain.listPatientAssessments(patient, form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentClinicalContact(), userAssessment, fromDate, toDate);		//WDEv-11721
		
		/**
		 * WDEV-16324  If none found, check the GC as we may just display the Assessment from the PatientAssessmentSearch form - 123190
		 */
		if ((records == null || records.size() == 0) && form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessmentIsNotNull() &&
						form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull() && form.getGlobalContext().Clinical.getReturnToFormName().equals(form.getForms().Clinical.PatientAssessmentSearch))
		{
			Patient_AssessmentListVo assVo = domain.getPatientAssessmentList(form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment());
			if (records == null)
				records = new Patient_AssessmentListVoCollection();
			records.add(assVo);
		}
		
		if(records != null && records.size() > 0)
		{
			form.getLocalContext().setLoadedRecords(records);
			
			for(int x = 0; x < records.size(); x++)
			{
				Patient_AssessmentListVo patientAssessment = records.get(x);
				String text = "";

				Color color = Color.Default; 
				if(patientAssessment.getClinicalContact() != null && patientAssessment.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
					color = Color.Blue;
				if(patientAssessment.getClinicalContact() == null && form.getGlobalContext().Core.getCurrentClinicalContact() == null && patientAssessment.getCareContext() != null && patientAssessment.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()))
					color = Color.Blue;
				
				if(patientAssessment.getAuthoringInformation() != null)
				{
					text += patientAssessment.getAuthoringInformation().getAuthoringDateTime() == null ? "<unknown date>" : patientAssessment.getAuthoringInformation().getAuthoringDateTime().toString(); 
					text += " - ";
					text += patientAssessment.getAuthoringInformation().getAuthoringHcp() == null ? "<unknown>" : patientAssessment.getAuthoringInformation().getAuthoringHcp().toString(); 
				}
				else
					text = "? - ?";
				
				form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().newRow(patientAssessment, text, color);
			}
		
			updateStructuredAssessmentSelection();
			
			return records.size();
		}
		
		return 0;
	}
	
	private void updateStructuredAssessmentSelection() 
	{
		if(form.getLocalContext().getLoadedRecords() == null)
			return;
		
		if(form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessmentIsNotNull()) 
		{
			for (int i = 0 ; i < form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().size() ; i++)
			{
				if (form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment() instanceof PatientAssessmentRefVo
					&& form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().getValues().get(i) instanceof Patient_AssessmentListVo
					&&(((Patient_AssessmentListVo)form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().getValues().get(i))).getID_PatientAssessment()
						.equals(((PatientAssessmentRefVo)form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment()).getID_PatientAssessment()))
				{
					form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().setValue((Patient_AssessmentListVo)form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().getValues().get(i));
					return;
				}
			}
		}
		
		Patient_AssessmentVo lastSelectedPatientAssessment = form.getLocalContext().getCurrentPatientAssessment();
		if(lastSelectedPatientAssessment == null)
		{
			//WDEV-11721
			PatientShort patient = form.getGlobalContext().Core.getPatientShort();
			
			//WDEV-11526
			EpisodeOfCareRefVo episodeOfCare = form.getGlobalContext().Core.getEpisodeofCareShort();
			CareContextRefVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
			ClinicalContactRefVo clinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();			
			Patient_AssessmentListVoCollection records = form.getLocalContext().getLoadedRecords();				
			
			//WDEV-11721
			Patient_AssessmentListVo selectedRecord = null;
			
			for(int x = 0; x < records.size(); x++)
			{
				Patient_AssessmentListVo record = records.get(x);
				
				//WDEV-11721 - starts here
				if(record == null)
					continue;
				
				if(record.getClinicalContact() != null && record.getClinicalContact().equals(clinicalContact))
				{
					selectedRecord = record;
					break;
				}
				if(record.getCareContext() != null && record.getCareContext().equals(careContext))
				{
					selectedRecord = record;
					break;
				}
				
				//WDEV-11526 - starts here
				if(record.getEpisodeOfCare() != null && record.getEpisodeOfCare().equals(episodeOfCare))
				{
					selectedRecord = record;
					break;
				}
				//WDEV-11526 - ends here
				
				if(record.getPatient() != null && record.getPatient().equals(patient))
				{
					selectedRecord = record;
					break;
				}
			}	
			
			if(selectedRecord != null)
				form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().setValue(selectedRecord);
			//WDEV-11721 - ends here
		}
		else
		{
			form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().setValue(lastSelectedPatientAssessment);
		}
	}
	
	private void updateGraphicalAssessmentSelection() 
	{
		if(form.getLocalContext().getLoadedRecords() == null)
			return;
		//WDEV-12960-Start
		if(form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessmentIsNotNull()) 
		{
			for (int i = 0 ; i < form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().size() ; i++)
			{
				if (form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment() instanceof PatientAssessmentRefVo
					&& form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().getValues().get(i) instanceof Patient_AssessmentListVo
					&&(((Patient_AssessmentListVo)form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().getValues().get(i))).getID_PatientAssessment()
						.equals(((PatientAssessmentRefVo)form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment()).getID_PatientAssessment()))
				{
					form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().setValue((Patient_AssessmentListVo)form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().getValues().get(i));
					return;
				}
			}
		}
		//WDEV-12960-End
		Patient_AssessmentVo lastSelectedPatientAssessment = form.getLocalContext().getCurrentPatientAssessment();
		if(lastSelectedPatientAssessment == null)
		{
			//WDEV-11721
			PatientShort patient = form.getGlobalContext().Core.getPatientShort();
			
			//WDEV-11526
			EpisodeOfCareRefVo episodeOfCare = form.getGlobalContext().Core.getEpisodeofCareShort();
			CareContextRefVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
			ClinicalContactRefVo clinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();			
			Patient_AssessmentListVoCollection records = form.getLocalContext().getLoadedRecords();				
			
			
			//WDEV- 11721
			Patient_AssessmentListVo selectedRecord = null;
			
			for(int x = 0; x < records.size(); x++)
			{
				Patient_AssessmentListVo record = records.get(x);
				
				//WDEV-11721 - starts here
				if(record == null)
					continue;
				
				if(record.getClinicalContact() != null && record.getClinicalContact().equals(clinicalContact))
				{
					selectedRecord = record;
					break;
				}
				
				if(record.getCareContext() != null && record.getCareContext().equals(careContext))
				{
					selectedRecord = record;
					break;
				}
				
				//WDEV-11526 - starts here
				if(record.getEpisodeOfCare() != null && record.getEpisodeOfCare().equals(episodeOfCare))
				{
					selectedRecord = record;
					break;
				}
				//WDEV-11526 - ends here
				
				if(record.getPatient() != null && record.getPatient().equals(patient))
				{
					selectedRecord = record;
					break;
				}
			}
			
			if(selectedRecord != null)
				form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().setValue(selectedRecord);
			//WDEV-11721 - ends here
		}
		else
		{
			form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().setValue(lastSelectedPatientAssessment);
		}
	}
	
	private int populateGraphicalAssessmentHistoricControlsFromData() 
	{
		form.getLocalContext().setLoadedRecords(new Patient_AssessmentListVoCollection());
		
		GraphicAssessmentRefVo graphicalAssessment = form.getLocalContext().getGraphicalAssessmentRef();
		form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().clear();
		
		//WDEV-11721 - starts here
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		if(patient == null)
			return 0;
		//WDEV-11721 - ends here
		
		Date fromDate = form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteriaIsNotNull() ? form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().getFromDate() : null;
		Date toDate = form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteriaIsNotNull() ? form.getGlobalContext().Assessment.getDynamicAssessmentSearchCriteria().getToDate() : null;
		
		Patient_AssessmentListVoCollection records = domain.listPatientAssessments(patient, form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentClinicalContact(), graphicalAssessment, fromDate, toDate);		//WDEV-11721
		
		//wdev-16324
		if ((records == null || records.size() == 0) 
				&& form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessmentIsNotNull() 
				&& form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull() 
				&& form.getGlobalContext().Clinical.getReturnToFormName().equals(form.getForms().Clinical.PatientAssessmentSearch))
		{
			Patient_AssessmentListVo assVo = domain.getPatientAssessmentList(form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment());
			if (records == null)
				records = new Patient_AssessmentListVoCollection();
			
			records.add(assVo);
		}
		
		if(records != null)
		{
			form.getLocalContext().setLoadedRecords(records);
			
			for(int x = 0; x < records.size(); x++)
			{
				Patient_AssessmentListVo patientAssessment = records.get(x);
				String text = "";

				Color color = Color.Default; 
				if(patientAssessment.getClinicalContact() != null && patientAssessment.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
					color = Color.Blue;
				if(patientAssessment.getClinicalContact() == null && form.getGlobalContext().Core.getCurrentClinicalContact() == null && patientAssessment.getCareContext() != null && patientAssessment.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()))
					color = Color.Blue;
				
				if(patientAssessment.getAuthoringInformation() != null)
				{
					text += patientAssessment.getAuthoringInformation().getAuthoringDateTime() == null ? "<unknown date>" : patientAssessment.getAuthoringInformation().getAuthoringDateTime().toString(); 
					text += " - ";
					text += patientAssessment.getAuthoringInformation().getAuthoringHcp() == null ? "<unknown>" : patientAssessment.getAuthoringInformation().getAuthoringHcp().toString(); 
				}
				else
					text = "? - ?";
				
				form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().newRow(patientAssessment, text, color);
			}
			
			updateGraphicalAssessmentSelection();
			
			return records.size();
		}
		
		return 0;
	}
	private void displayBlankStructuralAssessment() 
	{	
		User_AssessmentVo userAssessment = form.getLocalContext().getStructuralAssessment();
		Patient_AssessmentVo newAssessment = new Patient_AssessmentVo();
		Patient_AssessmentDataVo assessmentData = new Patient_AssessmentDataVo();		
		engine.setCaption(userAssessment.getName());
		form.lyrAssessments().tabStructuralAssessment().setCaption(userAssessment.getName());
		assessmentData.setUserAssessment(userAssessment);
		//WDEV-2442 
		assessmentData.setGroupQuestionWidth(userAssessment.getGroupQuestionWidth());
		newAssessment.setAssessmentData(assessmentData);
		form.chkComplete().setValue(false);

		form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageAssessment().customStructuredAssessment().setPatientAssessment(newAssessment,false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));		
		form.lyrAssessments().tabStructuralAssessment().authStructuredAssessment().setValue(null);
		//form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentEnabled(true);
		form.lyrAssessments().tabStructuralAssessment().imbStructuralContextInfo().setTooltip("");
		form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentCompletedVisible(false);
		
		//WDEV-12501
		form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageReport().ccReportBuilder().clear();
	}
	private void displayBlankGraphicalAssessment() 
	{	
		Graphic_AssessmentVo graphicalAssessment = form.getLocalContext().getGraphicalAssessment();
		Patient_AssessmentVo newAssessment = new Patient_AssessmentVo();
		Patient_AssessmentDataVo assessmentData = new Patient_AssessmentDataVo();	
		engine.setCaption(graphicalAssessment.getName());
		form.lyrAssessments().tabGraphicalAssessment().setCaption(graphicalAssessment.getName());
		assessmentData.setGraphic(graphicalAssessment);
		newAssessment.setAssessmentData(assessmentData);	
		form.chkComplete().setValue(false);

		form.lyrAssessments().tabGraphicalAssessment().customGraphicalAssessment().setPatientAssessment(newAssessment,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));		
		form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessment().setValue(null);
		//form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentEnabled(true);
		form.lyrAssessments().tabGraphicalAssessment().imbGraphicalContextInfo().setTooltip("");
		form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentCompletedVisible(false);
	}
	private void clearInstanceControls() 
	{
		form.chkComplete().setValue(false);
		
		// Structural Assessment
		form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageAssessment().customStructuredAssessment().clearComponent();
		form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().clear();
		form.lyrAssessments().tabStructuralAssessment().authStructuredAssessment().setValue(null);		
		form.lyrAssessments().tabStructuralAssessment().imbStructuralContextInfo().setTooltip("");
		form.lyrAssessments().tabStructuralAssessment().authStructuredAssessmentCompleted().setValue(null);
		form.lyrAssessments().tabStructuralAssessment().authStructuredAssessmentCompleted().setIsRequiredPropertyToControls(Boolean.FALSE);
		form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentCompletedVisible(false);
		form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentCompletedEnabled(false);
				
		// Graphical Assessment
		form.lyrAssessments().tabGraphicalAssessment().customGraphicalAssessment().clear();
		form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().clear();
		form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessment().setValue(null);
		form.lyrAssessments().tabGraphicalAssessment().imbGraphicalContextInfo().setTooltip("");
		form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessmentCompleted().setValue(null);
		form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessmentCompleted().setIsRequiredPropertyToControls(Boolean.FALSE);
		form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentCompletedVisible(false);
		form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentCompletedEnabled(false);
	}	
	private boolean isStructuralAssessment()
	{
		return form.getLocalContext().getStructuralAssessmentRef() != null;
	}
	private boolean isGraphicalAssessment()
	{
		return form.getLocalContext().getGraphicalAssessmentRef() != null;
	}
	private void newInstance() 
	{	
		form.getLocalContext().setCurrentPatientAssessment(null);
		
		if(isStructuralAssessment())
		{
			form.lyrAssessments().tabStructuralAssessment().lyrDualView().showtabPageAssessment();
			
			displayBlankStructuralAssessment();
			populateStructuralAssessmentContextInformation();
			form.lyrAssessments().tabStructuralAssessment().authStructuredAssessment().initializeComponent();			
			form.setMode(FormMode.EDIT);
			// WDEV-12644
			form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentEnabled(Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));
		}
		else if(isGraphicalAssessment())
		{
			displayBlankGraphicalAssessment();
			populateGraphicalAssessmentContextInformation();
			form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessment().initializeComponent();			
			form.setMode(FormMode.EDIT);
			// WDEV-12644
			form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentEnabled(Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));
		}
	}
	private boolean save() throws PresentationLogicException 
	{
		Patient_AssessmentVo patientAssessment = null;
		AuthoringInformationVo authoringInfo = null;
		AuthoringInformationVo completingInfo = null;		
		
		String[] componentValidationErrors = null;
		
		if(isStructuralAssessment())
		{
			patientAssessment = form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageAssessment().customStructuredAssessment().getPatient_Assessment();			
			authoringInfo = form.lyrAssessments().tabStructuralAssessment().authStructuredAssessment().getValue();
			componentValidationErrors = form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageAssessment().customStructuredAssessment().validate_Data();

			if(form.chkComplete().getValue())
				completingInfo = form.lyrAssessments().tabStructuralAssessment().authStructuredAssessmentCompleted().getValue();
		}
		else if(isGraphicalAssessment())
		{
			if(form.lyrAssessments().tabGraphicalAssessment().customGraphicalAssessment().isImageSelected() == null || !form.lyrAssessments().tabGraphicalAssessment().customGraphicalAssessment().isImageSelected().booleanValue())
			{
				engine.showMessage("No image has been selected");
				return false;
			}
			
			patientAssessment = form.lyrAssessments().tabGraphicalAssessment().customGraphicalAssessment().getPatient_Assessment();
			authoringInfo = form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessment().getValue();
			componentValidationErrors = form.lyrAssessments().tabGraphicalAssessment().customGraphicalAssessment().validate_Data();
			
			if(form.chkComplete().getValue())
				completingInfo = form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessmentCompleted().getValue();
		}
		else
			throw new CodingRuntimeException("Invalid patient assessment to save");
		
		if (patientAssessment.getID_PatientAssessment() == null)
		{
			patientAssessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			//WDEV-11526
			patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		}		
		//WDEV-11721
		patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		patientAssessment.setAuthoringInformation(authoringInfo);
		boolean completed = form.chkComplete().getValue();
		patientAssessment.setStatus(completed ? PatientAssessmentStatusReason.COMPLETED : PatientAssessmentStatusReason.INPROGRESS);
		//wdev-14201
		if(!completed)
		{
			patientAssessment.setCompletedDateTime(null);
			patientAssessment.setCompletedHCP(null);
		}
		//----------
		// WDEV-13608
		// Clear Patient Assessment document saved
		if (!completed)
			patientAssessment.setIsAssessmentDocumentSaved(Boolean.FALSE);
		
		// updating the authoring hcp for answers
		patientAssessment = DynamicAssessmentHelper.populateHCPDataForAnswers(form.getLocalContext().getCurrentPatientAssessment(), patientAssessment, (HcpLiteVo)domain.getHcpLiteUser(), new DateTime());
		
		// updating the completing hcp
		ArrayList<String> completingErrors = new ArrayList<String>();
		if(completed)
		{			
			if(completingInfo == null || completingInfo.getAuthoringHcp() == null || completingInfo.getAuthoringDateTime() == null)
			{
				if(completingInfo == null)
				{
					completingErrors.add("Completing HCP and Completed Date/Time are mandatory.");  //wdev-15852
				}
				else if(completingInfo.getAuthoringHcp() == null)
				{
					completingErrors.add("Completing HCP is mandatory.");							//wdev-15852
				}
				else if(completingInfo.getAuthoringDateTime() == null)
				{
					completingErrors.add("Completed Date/Time is mandatory.");						//wdev-15852
				}				
			}
			else
			{
				if(authoringInfo != null //wdev-5914 
					&& completingInfo != null && authoringInfo.getAuthoringDateTime() != null && completingInfo.getAuthoringDateTime() != null 
					&& (completingInfo.getAuthoringDateTime().getDate().isLessThan(authoringInfo.getAuthoringDateTime().getDate()) //WDEV-17141
					|| (completingInfo.getAuthoringDateTime().getDate().equals(authoringInfo.getAuthoringDateTime().getDate()) && 
						completingInfo.getAuthoringDateTime().getTime().isLessThan(authoringInfo.getAuthoringDateTime().getTime())) ) 
				   )
				{
					completingErrors.add("Completing Date/Time cannot be before Authoring Date/Time");
				}
				
				patientAssessment.setCompletedHCP(completingInfo.getAuthoringHcp());
				patientAssessment.setCompletedDateTime(completingInfo.getAuthoringDateTime());
			}
		}		

		if( !completed && 
				form.getGlobalContext().Assessment.getForceCompletionIsNotNull() && 
				form.getGlobalContext().Assessment.getForceCompletion())
		{
			completingErrors.add("Assessment needs to be marked as Completed to Save correctly.");
		}
		
		ArrayList<String> authoringErrors = new ArrayList<String>();
		if(authoringInfo == null)
		{
			authoringErrors.add("Invalid authoring information");
		}
		else
		{
			if(authoringInfo.getAuthoringHcp() == null)
			{
				authoringErrors.add("Invalid authoring HCP");
			}
			if(authoringInfo.getAuthoringDateTime() == null)
			{
				authoringErrors.add("Invalid authoring date/time");
			}
		}
		if(authoringErrors.size() > 0 || completingErrors.size() > 0)
		{
			String[] extraErrors = new String[authoringErrors.size() + completingErrors.size()];
			int index = 0;
			for(int x = 0; x < authoringErrors.size(); x++)
			{
				extraErrors[index++] = (String)authoringErrors.get(x);
			}
			for(int x = 0; x < completingErrors.size(); x++)
			{
				extraErrors[index++] = (String)completingErrors.get(x);
			}
			
			engine.showErrors(extraErrors);
			return false;
		}
		
		String[] errors = patientAssessment.validate(completed ? componentValidationErrors : null);		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			form.getLocalContext().setCurrentPatientAssessment(domain.savePatientAssessment(patientAssessment));//WDEV-11946
			form.getGlobalContext().Core.setPatient_AssessmentFull(form.getLocalContext().getCurrentPatientAssessment());
			form.getGlobalContext().Assessment.setPatientAssessment(form.getLocalContext().getCurrentPatientAssessment());
			form.getGlobalContext().EAS.setEasPatientAssessment(form.getLocalContext().getCurrentPatientAssessment());//WDEV-17043
		}
		catch (StaleObjectException e) 
		{			
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			//WDEV-3186 
			form.setMode(FormMode.VIEW);
			open(false);
			return false;
		}
		
		if(form.getGlobalContext().Core.getCurrentClinicalContact() != null)
			form.getLocalContext().setOneInstancePresent(Boolean.TRUE);
		
		return true;
	}
	private void updateControlsState() 
	{
		form.lyrAssessments().tabStructuralAssessment().imbStructuralHelp().setVisible(!isDialogOpenedFromPatientAssessmentSearch());
		form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().setVisible(!isDialogOpenedFromPatientAssessmentSearch());
		form.lyrAssessments().tabStructuralAssessment().recbrStructuredAssessment().setEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrAssessments().tabStructuralAssessment().imbStructuralContextInfo().setVisible(!isDialogOpenedFromPatientAssessmentSearch());
		form.lyrAssessments().tabStructuralAssessment().imbStructuralContextInfo().setEnabled(false);
		form.lyrAssessments().tabStructuralAssessment().lblStructuredFrom().setVisible(!isDialogOpenedFromPatientAssessmentSearch());
		form.lyrAssessments().tabStructuralAssessment().lblStucturedTo().setVisible(!isDialogOpenedFromPatientAssessmentSearch());
		form.lyrAssessments().tabStructuralAssessment().dteAssessmentFrom().setVisible(!isDialogOpenedFromPatientAssessmentSearch());
		form.lyrAssessments().tabStructuralAssessment().dteAssessmentFrom().setEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrAssessments().tabStructuralAssessment().dteAssessmentTo().setVisible(!isDialogOpenedFromPatientAssessmentSearch());
		form.lyrAssessments().tabStructuralAssessment().dteAssessmentTo().setEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrAssessments().tabStructuralAssessment().imbSearchAssessment().setVisible(!isDialogOpenedFromPatientAssessmentSearch());
		form.lyrAssessments().tabStructuralAssessment().imbSearchAssessment().setEnabled(FormMode.VIEW.equals(form.getMode()));
		
		Boolean showGraphicalControls = !(isDialogOpenedFromPatientAssessmentSearch() || dialogOpenedFromEas());
		
		form.lyrAssessments().tabGraphicalAssessment().imbGraphicalHelp().setVisible(!isDialogOpenedFromPatientAssessmentSearch());
		form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().setVisible(!isDialogOpenedFromPatientAssessmentSearch());
		form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().setEnabled(FormMode.VIEW.equals(form.getMode()) && !dialogOpenedFromEas());
		form.lyrAssessments().tabGraphicalAssessment().imbGraphicalContextInfo().setVisible(!isDialogOpenedFromPatientAssessmentSearch());
		form.lyrAssessments().tabGraphicalAssessment().imbGraphicalContextInfo().setEnabled(false);
		form.lyrAssessments().tabGraphicalAssessment().lblGraphicalFrom().setVisible(showGraphicalControls);
		form.lyrAssessments().tabGraphicalAssessment().lblGraphicalTo().setVisible(showGraphicalControls);
		form.lyrAssessments().tabGraphicalAssessment().dteGraphicalFrom().setVisible(showGraphicalControls);
		form.lyrAssessments().tabGraphicalAssessment().dteGraphicalFrom().setEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrAssessments().tabGraphicalAssessment().dteGraphicalTo().setVisible(showGraphicalControls);
		form.lyrAssessments().tabGraphicalAssessment().dteGraphicalTo().setEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrAssessments().tabGraphicalAssessment().imbSearchGraphicalAssessment().setVisible(showGraphicalControls);
		form.lyrAssessments().tabGraphicalAssessment().imbSearchGraphicalAssessment().setEnabled(FormMode.VIEW.equals(form.getMode()));
		
		
		if(form.getMode().equals(FormMode.VIEW))
		{			
			form.btnClose().setVisible(false);

			//form.lyrAssessments().tabStructuralAssessment().customStructuredAssessment().setEnabled(Boolean.FALSE);
			form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageAssessment().customStructuredAssessment().set_ReadOnly(Boolean.TRUE);
			
			form.lyrAssessments().tabGraphicalAssessment().customGraphicalAssessment().setEnabled(Boolean.FALSE);
			
			// Enable 'Print" button only if the selected current Patient Assessment is not null, is completed, is printable
			// and has not been printed before (additional condition - user defined assessment must have report associated)
			form.btnPrint().setEnabled(true);
			form.btnPrint().setVisible(!dialogOpenedFromEas() && form.getLocalContext().getCurrentPatientAssessmentIsNotNull() 
										&& form.getLocalContext().getCurrentPatientAssessment().getAssessmentDataIsNotNull()
										&& (	(form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull()
												&& Boolean.TRUE.equals(form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessment().getStorePrintedAssessment())
												&& form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessment().getAssociatedReportIsNotNull() )
											|| 
												(form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getGraphicIsNotNull()
												&& Boolean.TRUE.equals(form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getGraphic().getStorePrintedReport())
												&& form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getGraphic().getAssociatedReportForPrintingIsNotNull()	)
											)
										&& !Boolean.TRUE.equals(form.getLocalContext().getCurrentPatientAssessment().getIsAssessmentDocumentSaved())					// Keep it like this, do not compare with Boolean.FALSE - to take in consideration the cases where this value is null
										&& PatientAssessmentStatusReason.COMPLETED.equals(form.getLocalContext().getCurrentPatientAssessment().getStatus())
										&& !Boolean.TRUE.equals(ConfigFlag.UI.SAVE_PATIENTDOCUMENT_ON_ASSESSMENTCOMPLETED.getValue()));
			if (dialogOpenedFromEas())
			{
				form.btnNew().setVisible(Boolean.TRUE);
				form.btnNew().setEnabled(form.getGlobalContext().EAS.getEasPatientAssessment() == null);
			}
			else if (Boolean.TRUE.equals(form.getLocalContext().getAllowNew()) && !Boolean.TRUE.equals(form.getLocalContext().getOneInstancePresent())) 
			{
				// WDEV-13791
				// Math logic ( a => b reduced to !a OR b)
				// So the implication: If PatientAssessment requires a clinical contact (part a) then clinical contact is not null (part b)
				// transforms into: PatientAssessment does not require a clinical contact (negation of part a) OR clinical contact is not null (part b)
				boolean allowCreationOnlyWithClinicalContactFlag = !Boolean.TRUE.equals(ConfigFlag.UI.PATIENT_ASSESSMENT_CREATION_REQUIRES_A_CLINICAL_CONTACT_CONTEXT.getValue()) || form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull();
				form.btnNew().setVisible(true);			
				form.btnNew().setEnabled(allowCreationOnlyWithClinicalContactFlag);
				
				//WDEV-17043
				if (engine.isDialog() && (engine.getPreviosFormName() != null && !engine.getPreviosFormName().equals(form.getForms().EAS.PatientElectronicActionSheet)))
				{
					form.btnNew().setVisible(checkAssessmentRecordingLevel());
				}
			}
			else
			{
				form.btnNew().setVisible(false);
				form.btnNew().setEnabled(false);
			}
				
			if (Boolean.TRUE.equals(form.getLocalContext().getAllowUpdate()) && !form.chkComplete().getValue())				
			{
				if (dialogOpenedFromEas()) //WDEV-17043
				{			
					form.btnUpdate().setEnabled(form.lyrAssessments().tabGraphicalAssessment().recbrGraphicalAssessment().getValue().equals(form.getGlobalContext().EAS.getEasPatientAssessment()));
				}
				else
				{	
					form.btnUpdate().setEnabled(true);
				}
				
				form.btnUpdate().setVisible(true);
				form.btnNew().setVisible(true);				
			}			
			else
			{
				form.btnUpdate().setVisible(false);			
				form.btnUpdate().setEnabled(false);				
			}
			if (Boolean.TRUE.equals(form.getGlobalContext().Assessment.getOpenDynamicAssessmentDialogInViewMode()))
			{
				form.btnNew().setVisible(false);
				form.btnUpdate().setVisible(false);
				form.btnClose().setVisible(true);
			}
			if( engine.isDialog() == true)
				form.btnClose().setVisible(true);
			
			if(isDialogOpenedFromPatientAssessmentSearch())
			{
				form.btnNew().setVisible(false);
			}
			
			form.btnUndo().setVisible(engine.hasRight(AppRight.CAN_UNDO_ASSESSMENT_COMPLETION) && form.getLocalContext().getAllowUpdateIsNotNull() && form.getLocalContext().getAllowUpdate() && form.chkComplete().getValue());
			form.btnCopyAnswers().setVisible(canCopyAnswersFromPreviousAssessment() 
					&& form.getLocalContext().getAllowNewIsNotNull() && form.getLocalContext().getAllowNew().booleanValue() 
					&& (form.getLocalContext().getOneInstancePresent() == null || !form.getLocalContext().getOneInstancePresent().booleanValue()) 
					&& !(form.getGlobalContext().Assessment.getOpenDynamicAssessmentDialogInViewModeIsNotNull() && form.getGlobalContext().Assessment.getOpenDynamicAssessmentDialogInViewMode().booleanValue()));
			//WDEV-17143
			form.btnCopyAnswers().setEnabled(!Boolean.TRUE.equals(ConfigFlag.UI.PATIENT_ASSESSMENT_CREATION_REQUIRES_A_CLINICAL_CONTACT_CONTEXT.getValue()) || form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull());

		}
		else
		{
			form.btnSave().setVisible(isOpenedAsPreviewDialog() ? false : true);
			//form.lyrAssessments().tabStructuralAssessment().customStructuredAssessment().setEnabled(Boolean.TRUE);
			form.lyrAssessments().tabGraphicalAssessment().customGraphicalAssessment().setEnabled(Boolean.TRUE);
			form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageAssessment().customStructuredAssessment().set_ReadOnly(Boolean.FALSE);
			
			form.lyrAssessments().tabStructuralAssessment().btnView().setVisible(false);
		}	
	}
	
	//WDEV-17043
	private boolean dialogOpenedFromEas()
	{
		if (engine.isDialog() && engine.getPreviosFormName() != null && engine.getPreviosFormName().equals(form.getForms().EAS.PatientElectronicActionSheet))
			return true;
		
		return false;
	}
	
	private boolean isDialogOpenedFromPatientAssessmentSearch()
	{
		if (engine.isDialog() && engine.getPreviosFormName() != null && engine.getPreviosFormName().equals(form.getForms().Clinical.PatientAssessmentSearch))
			return true;
		
		return false;
	}

	private boolean checkAssessmentRecordingLevel()
	{
		AssessmentRecordingLevel recordingLevel = InitConfig.getAssessmentRecordingLevel();
		
   		if(recordingLevel == null)
   			recordingLevel = AssessmentRecordingLevel.CARECONTEXT;
    			
   		if(AssessmentRecordingLevel.CARECONTEXT.equals(recordingLevel))
   		{
   			if(form.getGlobalContext().Core.getCurrentCareContext() == null)
   				return false;
   		}
   		else if(AssessmentRecordingLevel.EPISODEOFCARE.equals(recordingLevel))
   		{
   			if(form.getGlobalContext().Core.getEpisodeofCareShort() == null)
   				return false;
   		}
   		else if(AssessmentRecordingLevel.PATIENT.equals(recordingLevel))
   		{
   			if(form.getGlobalContext().Core.getPatientShort() == null)
   				return false;
   		}
		return true;
	}


	private void updateInstance() 
	{	
		form.setMode(FormMode.EDIT);
		
		if(isStructuralAssessment())
		{
			populateStructuralAssessmentControlsFromData(form.getLocalContext().getCurrentPatientAssessment());
			form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentEnabled(false);
			form.lyrAssessments().tabStructuralAssessment().lyrDualView().showtabPageAssessment();
		}
		else if(isGraphicalAssessment())
		{
			populateGraphicalAssessmentControlsFromData(form.getLocalContext().getCurrentPatientAssessment());
			form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentEnabled(false);
		}
	}
	private void processCompletedOptions(boolean completed) 
	{
		if(isStructuralAssessment())
		{
			form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentCompletedVisible(completed);
			// WDEV-12644
			form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentCompletedEnabled(completed && Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));
			
			if(completed)
			{
				form.lyrAssessments().tabStructuralAssessment().authStructuredAssessmentCompleted().initializeComponent();				
				form.lyrAssessments().tabStructuralAssessment().authStructuredAssessmentCompleted().setIsRequiredPropertyToControls(Boolean.TRUE);
				
				if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
					form.lyrAssessments().tabStructuralAssessment().authStructuredAssessmentCompleted().setValue(form.lyrAssessments().tabStructuralAssessment().authStructuredAssessment().getValue());
				else
				{
					AuthoringInformationVo completeAuthoring = new AuthoringInformationVo();			

					IAppUser user = engine.getLoggedInUser();
					
					if(user != null && user.getHcpId() != null)
					{
						HcpRefVo ref = new HcpRefVo();
						ref.setID_Hcp(user.getHcpId());
						
						completeAuthoring.setAuthoringHcp(domain.getHcpById(ref));
					}
					
					completeAuthoring.setAuthoringDateTime(new DateTime());
					form.lyrAssessments().tabStructuralAssessment().authStructuredAssessmentCompleted().setValue(completeAuthoring);
				}
			}
		}
		else if(isGraphicalAssessment())
		{
			form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentCompletedVisible(completed);
			// WDEV-12644
			form.lyrAssessments().tabGraphicalAssessment().setauthGraphicalAssessmentCompletedEnabled(completed && Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));
			if(completed)
			{
				form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessmentCompleted().initializeComponent();
				form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessmentCompleted().setIsRequiredPropertyToControls(Boolean.TRUE);
				
				if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
					form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessmentCompleted().setValue(form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessment().getValue());
				else
				{
					AuthoringInformationVo completeAuthoring = new AuthoringInformationVo();			

					IAppUser user = engine.getLoggedInUser();
					
					if(user != null && user.getHcpId() != null)
					{
						HcpRefVo ref = new HcpRefVo();
						ref.setID_Hcp(user.getHcpId());
						
						completeAuthoring.setAuthoringHcp(domain.getHcpById(ref));
					}
					
					completeAuthoring.setAuthoringDateTime(new DateTime());
					form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessmentCompleted().setValue(completeAuthoring);
				}
				
			}
		}
	}	
	
	private void enableStructuredAssessmentHelpUrlImage(User_AssessmentVo assessment)
	{
		String helpUrl = assessment != null && assessment.getHelpURLIsNotNull() && assessment.getHelpURL().trim().length() > 0 ? assessment.getHelpURL().trim() : null;
		form.lyrAssessments().tabStructuralAssessment().imbStructuralHelp().setEnabled(helpUrl != null ? true : false);
		if (helpUrl != null)
			form.lyrAssessments().tabStructuralAssessment().imbStructuralHelp().setTooltip(helpUrl);
	}

	private void enableGraphicalAssessmentHelpUrlImage(Graphic_AssessmentVo assessment)
	{
		String helpUrl = assessment != null && assessment.getHelpUrlIsNotNull() && assessment.getHelpUrl().trim().length() > 0 ? assessment.getHelpUrl().trim() : null;
		form.lyrAssessments().tabGraphicalAssessment().imbGraphicalHelp().setEnabled(helpUrl != null ? true : false);
		if (helpUrl != null)
			form.lyrAssessments().tabGraphicalAssessment().imbGraphicalHelp().setTooltip(helpUrl);
	}
	
	private boolean isOpenedAsPreviewDialog()
	{
		return engine.isDialog() && form.getGlobalContext().Assessment.getIsDynamicAssessmentOpenedForPreviewIsNotNull() &&
			   form.getGlobalContext().Assessment.getIsDynamicAssessmentOpenedForPreview().booleanValue();
	}
	
	private void postInitialize() throws ims.framework.exceptions.PresentationLogicException
	{
		if(isOpenedAsPreviewDialog())
		{
			//Currently only set in EWS.
			if (form.getGlobalContext().Assessment.getOpenDynamicAssessmentDialogInViewModeIsNotNull()
				&& form.getGlobalContext().Assessment.getOpenDynamicAssessmentDialogInViewMode().booleanValue())
			{	
				form.setMode(FormMode.VIEW);
				return;
			}
			newInstance();
		}
		//WDEV-17043
		else if (dialogOpenedFromEas())
		{
			form.setMode(FormMode.VIEW);
		}
		
		if( form.getGlobalContext().Assessment.getForceCompletion() != null
			&& form.getGlobalContext().Assessment.getForceCompletion()
			&& form.getMode().equals(FormMode.EDIT)
			&& engine.getPreviousNonDialogFormName().equals(form.getForms().Core.VitalSignsAll))
			form.btnCancel().setVisible(false);
		else if (form.getMode().equals(FormMode.EDIT))
		{
			form.btnCancel().setVisible(true);
			form.btnCancel().setEnabled(true);
		}
	}

	@Override
	protected void onLnkReturnClick() throws PresentationLogicException
	{
		if(form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
			engine.open(form.getGlobalContext().Clinical.getReturnToFormName());
	}
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
		
	}
	@Override
	protected void onBtnViewClick() throws PresentationLogicException
	{
		if(form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageAssessment().isVisible())
		{
			form.lyrAssessments().tabStructuralAssessment().lyrDualView().showtabPageReport();
			form.lyrAssessments().tabStructuralAssessment().btnView().setText("View assessment");
		}
		else
		{
			form.lyrAssessments().tabStructuralAssessment().lyrDualView().showtabPageAssessment();
			form.lyrAssessments().tabStructuralAssessment().btnView().setText("View report");
		}
	}
	@Override
	protected void onBtnUndoClick() throws PresentationLogicException 
	{
		
		if(	form.getGlobalContext().Assessment.getForceCompletionIsNotNull() &&	form.getGlobalContext().Assessment.getForceCompletion())	//wdev-15852
		{
			updateInstance();
			form.chkComplete().setValue(null);
			processCompletedOptions(form.chkComplete().getValue());
		}
		else
		{
		
			form.chkComplete().setValue(null);
    		if(isStructuralAssessment())
    		{
    			form.lyrAssessments().tabStructuralAssessment().authStructuredAssessmentCompleted().setValue(null);
    		}
    		else if(isGraphicalAssessment())
    		{
    			form.lyrAssessments().tabGraphicalAssessment().authGraphicalAssessmentCompleted().setValue(null);
    		}
    		
    		onBtnSaveClick();
    		
		}
	}
	
	@Override
	protected void onBtnCopyAnswersClick() throws PresentationLogicException 
	{
		copyFromPreviousAssessment();
	}
	
	private void copyFromPreviousAssessment() 
	{
		form.getLocalContext().setCurrentPatientAssessment(null);
		form.lyrAssessments().tabStructuralAssessment().lyrDualView().showtabPageAssessment();
		
		displayBlankStructuralAssessmentWithAnswersCopied();
		populateStructuralAssessmentContextInformation();
				
		form.setMode(FormMode.EDIT);
	}
	
	private void displayBlankStructuralAssessmentWithAnswersCopied() 
	{
		User_AssessmentVo userAssessment = form.getLocalContext().getStructuralAssessment();
		engine.setCaption(userAssessment.getName());
		form.lyrAssessments().tabStructuralAssessment().setCaption(userAssessment.getName());
		
		Patient_AssessmentVo newPatientAssessment = clonePatientAssessment(domain.getPatientAssessment(form.getLocalContext().getCopyAnswersFromPreviousAssessment()));
		
		form.chkComplete().setValue(false);
		form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageAssessment().customStructuredAssessment().setPatientAssessment(newPatientAssessment, false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));	 //WDEV-12139
		// WDEV-12644
		form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentEnabled(Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));
		//wdev-9134
		form.lyrAssessments().tabStructuralAssessment().authStructuredAssessment().initializeComponent();
		form.lyrAssessments().tabStructuralAssessment().imbStructuralContextInfo().setTooltip("");
		form.lyrAssessments().tabStructuralAssessment().setauthStructuredAssessmentCompletedVisible(false);
		
		//WDEV-12501
		form.lyrAssessments().tabStructuralAssessment().lyrDualView().tabPageReport().ccReportBuilder().clear();
	}
	
	private Patient_AssessmentVo clonePatientAssessment(Patient_AssessmentVo patientAssessmentVo) 
	{
		if(patientAssessmentVo == null)
			return null;
		
		patientAssessmentVo.clearIDAndVersion();
		//wdev-9134
		patientAssessmentVo.setAuthoringInformation(null);
		patientAssessmentVo.setCompletedHCP(null);
		patientAssessmentVo.setCompletedDateTime(null);
		
		patientAssessmentVo.setStatus(null);	 //WDEV-12139
		if(patientAssessmentVo.getAssessmentDataIsNotNull())
		{
			patientAssessmentVo.getAssessmentData().clearIDAndVersion();
			if(patientAssessmentVo.getAssessmentData().getAnswerGroupsIsNotNull())
			{
				for(int i=0; i<patientAssessmentVo.getAssessmentData().getAnswerGroups().size(); i++)
				{
					Patient_AssessmentGroupVo assessGroup = patientAssessmentVo.getAssessmentData().getAnswerGroups().get(i);
					
					if(assessGroup == null)
						continue;
					
					clonePatientAssessmentGroup(assessGroup);
				}
			}
		}
		
		return patientAssessmentVo;
	}
	
	private void clonePatientAssessmentGroup(Patient_AssessmentGroupVo assessGroup) 
	{
		if(assessGroup == null)
			return;
		
		assessGroup.clearIDAndVersion();
		
		if(assessGroup.getAssessmentAnswersIsNotNull())
		{
			for(int j=0; j<assessGroup.getAssessmentAnswers().size(); j++)
			{
				Patient_AssessmentQuestionVo paq = assessGroup.getAssessmentAnswers().get(j);
				
				if(paq == null)
					continue;
				
				clonePatientAssessmentQuestion(paq);
			}
		}
	}
	
	private void clonePatientAssessmentQuestion(Patient_AssessmentQuestionVo paq) 
	{
		if(paq == null)
			return;
		
		paq.clearIDAndVersion();
		if(paq.getPatientAnswersIsNotNull())
		{
			for(int z=0; z<paq.getPatientAnswers().size(); z++)
			{
				Patient_AssessmentAnswerVo paa= paq.getPatientAnswers().get(z);
				
				if(paa == null)
					continue;
				
				cloneAnswerDetails(paa);
			}
		}
	}
	
	private void cloneAnswerDetails(Patient_AssessmentAnswerVo paa) 
	{
		if(paa == null)
			return;
		
		paa.clearIDAndVersion();
		if(paa.getAnswerDetailsIsNotNull())
		{
			for(int y=0; y<paa.getAnswerDetails().size(); y++)
			{
				Answer_DetailsVo ad = paa.getAnswerDetails().get(y);
				
				if(ad == null)
					continue;
				
				ad.clearIDAndVersion();
			}
		}
	}
	
	private Boolean canCopyAnswersFromPreviousAssessment() 
	{
		return isStructuralAssessment() && form.getLocalContext().getStructuralAssessment().getCanCopyLastIsNotNull() && form.getLocalContext().getStructuralAssessment().getCanCopyLast() && form.getLocalContext().getCopyAnswersFromPreviousAssessmentIsNotNull();
	}
	@Override
	protected void onRIEDialogClosed(DialogResult result) throws PresentationLogicException
	{
		if (DialogResult.OK.equals(result))
		{
			//wdev-15972
			PatientDocumentLiteVo docPatLiteVo = null;
			Patient_AssessmentVo patAssVo = null;
			if( form.getLocalContext().getCurrentPatientAssessmentIsNotNull())
			{
				patAssVo = domain.getPatientAssessment(form.getLocalContext().getCurrentPatientAssessment());
			    docPatLiteVo = domain.getPatientDocumentLiteVo(patAssVo.getAssociatedDocument());
			}
			
			if( docPatLiteVo != null )
			{
				String comment =  "This PatientDocument has been marked as RIE due to its parent PatientAssessment being marked as RIE"; 
				try 
				{
					domain.markAsRie(docPatLiteVo, engine.getFormName(), form.getGlobalContext().Core.getPatientShort().getID_Patient(),  null, null, comment);
				} 
				catch (StaleObjectException e) 
				{					
					e.printStackTrace();
				}
			}
			//------------
			form.getGlobalContext().Assessment.setPatientAssessment(null);
			form.getLocalContext().setCurrentPatientAssessment(null);
		}
	}

	/**
	 * WDEV-13704
	 * Method used to generate a unique file name
	 * @return
	 */
	private String generateName() 
	{
		String str = "";

		try
		{
			//Get Random Segment
			SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(prng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get CurrentTimeMillis() segment
			str += Long.toHexString(System.currentTimeMillis());
			while (str.length() < 12)
			{
				str = '0' + str;
			}

			//Get Random Segment
			SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(secondPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get IdentityHash() segment
			str += Long.toHexString(System.identityHashCode((Object) this));
			while (str.length() < 8)
			{
				str = '0' + str;
			}
			//Get Third Random Segment
			byte bytes[] = new byte[16];
			SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
			thirdPrng.nextBytes(bytes);
			str += Integer.toHexString(thirdPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}
		}
		catch (java.security.NoSuchAlgorithmException ex)
		{
			ex.getMessage();
		}

		return str;
	}
}
