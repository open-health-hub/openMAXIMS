//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.dynamicassessments;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrAssessmentsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabStructuralAssessmentContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrDualViewLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabPageReportContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 808, 405, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccReportBuilderForm = loader.loadComponent(102275, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 11, skipContextValidation);
						//ims.framework.Control m_ccReportBuilderControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(0), new Integer(808), new Integer(405), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 11), m_ccReportBuilderForm, instance1 } );
						ims.framework.Control m_ccReportBuilderControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 11), m_ccReportBuilderForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccReportBuilderControl);
						Menu[] menus1 = m_ccReportBuilderForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.core.forms.assessmentasreport.IComponent ccReportBuilder()
					{
						return (ims.core.forms.assessmentasreport.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccReportBuilderValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccReportBuilderVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccReportBuilderVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccReportBuilderEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccReportBuilderEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabPageAssessmentContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 3, 2, 800, 400, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_customStructuredAssessmentForm = loader.loadComponent(127109, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 1012, skipContextValidation);
						//ims.framework.Control m_customStructuredAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(3), new Integer(2), new Integer(800), new Integer(400), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1012), m_customStructuredAssessmentForm, instance1 } );
						ims.framework.Control m_customStructuredAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1012), m_customStructuredAssessmentForm, instance1, Boolean.FALSE } );
						super.addControl(m_customStructuredAssessmentControl);
						Menu[] menus1 = m_customStructuredAssessmentForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.assessment.forms.structuralassessment.IComponent customStructuredAssessment()
					{
						return (ims.assessment.forms.structuralassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setcustomStructuredAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setcustomStructuredAssessmentVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean iscustomStructuredAssessmentVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setcustomStructuredAssessmentEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean iscustomStructuredAssessmentEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID ");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 808, 424, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageReport = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"View as report", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPageReportContainer m_tabPageReportContainer = (tabPageReportContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageReportContainer.class, m_tabPageReport, factory);
					super.addContainer(m_tabPageReport, m_tabPageReportContainer);
					ims.framework.utils.SizeInfo m_tabPageReportDesignSize = new ims.framework.utils.SizeInfo(808, 424);
					ims.framework.utils.SizeInfo m_tabPageReportRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper3.getWidth(), anchoringHelper3.getHeight());
					m_tabPageReportContainer.setContext(form, appForm, m_tabPageReport, loader, form_images_local, startControlID, m_tabPageReportDesignSize, m_tabPageReportRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 808, 424, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageAssessment = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Assessment", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPageAssessmentContainer m_tabPageAssessmentContainer = (tabPageAssessmentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageAssessmentContainer.class, m_tabPageAssessment, factory);
					super.addContainer(m_tabPageAssessment, m_tabPageAssessmentContainer);
					ims.framework.utils.SizeInfo m_tabPageAssessmentDesignSize = new ims.framework.utils.SizeInfo(808, 424);
					ims.framework.utils.SizeInfo m_tabPageAssessmentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper4.getWidth(), anchoringHelper4.getHeight());
					m_tabPageAssessmentContainer.setContext(form, appForm, m_tabPageAssessment, loader, form_images_local, startControlID, m_tabPageAssessmentDesignSize, m_tabPageAssessmentRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabPageReport().setVisible(false);
					tabPageAssessment().setVisible(false);
				}
				public void settabPageReportEnabled(boolean value)
				{
					tabPageReport().setEnabled(value);
				}
				public void settabPageAssessmentEnabled(boolean value)
				{
					tabPageAssessment().setEnabled(value);
				}
				public void showtabPageReport()
				{
					tabPageAssessment().setVisible(false);
					tabPageReport().setVisible(true);
				}
				public void showtabPageAssessment()
				{
					tabPageReport().setVisible(false);
					tabPageAssessment().setVisible(true);
				}
		
				public tabPageReportContainer tabPageReport()
				{
					return (tabPageReportContainer)super.layers.get(0);
				}
				public tabPageAssessmentContainer tabPageAssessment()
				{
					return (tabPageAssessmentContainer)super.layers.get(1);
				}
			}
			public static class recbrStructuredAssessmentRecordBrowser extends RecordBrowserBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text)
				{
					super.control.newRow(index, value, text);
				}
				public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(index, value, text, image);
				}
				public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, textColor);
				}
				public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, image, textColor);
				}
				public ims.assessment.instantiation.vo.PatientAssessmentRefVo getValue()
				{
					return (ims.assessment.instantiation.vo.PatientAssessmentRefVo)super.control.getValue();
				}
				public void setValue(ims.assessment.instantiation.vo.PatientAssessmentRefVo value)
				{
					super.control.setValue(value);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 392, 472, 432, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ims.framework.FormUiLogic m_authStructuredAssessmentCompletedForm = loader.loadComponent(102228, appForm, startControlID * 10 + 3000, anchoringHelper5.getSize(), instance1, startTabIndex.intValue() + 3014, skipContextValidation);
				//ims.framework.Control m_authStructuredAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(392), new Integer(472), new Integer(432), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 3014), m_authStructuredAssessmentCompletedForm, instance1 } );
				ims.framework.Control m_authStructuredAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 3014), m_authStructuredAssessmentCompletedForm, instance1, Boolean.FALSE } );
				super.addControl(m_authStructuredAssessmentCompletedControl);
				Menu[] menus1 = m_authStructuredAssessmentCompletedForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 472, 376, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ims.framework.FormUiLogic m_authStructuredAssessmentForm = loader.loadComponent(102228, appForm, startControlID * 10 + 4000, anchoringHelper6.getSize(), instance2, startTabIndex.intValue() + 2013, skipContextValidation);
				//ims.framework.Control m_authStructuredAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(8), new Integer(472), new Integer(376), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 2013), m_authStructuredAssessmentForm, instance2 } );
				ims.framework.Control m_authStructuredAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 2013), m_authStructuredAssessmentForm, instance2, Boolean.FALSE } );
				super.addControl(m_authStructuredAssessmentControl);
				Menu[] menus2 = m_authStructuredAssessmentForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
		
				// Layer Clasess
				lyrDualViewLayer m_lyrDualViewLayer = (lyrDualViewLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDualViewLayer.class, this, factory);
				super.addLayer(m_lyrDualViewLayer);
				m_lyrDualViewLayer.setContext(form, appForm, control, loader, form_images_local, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 643, 11, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 480, 11, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "From:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 152, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 520, 8, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 664, 8, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// RecordBrowser Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 40, 8, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				RecordBrowser m_recbrStructuredAssessmentTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
				addControl(m_recbrStructuredAssessmentTemp);
				recbrStructuredAssessmentRecordBrowser recbrStructuredAssessment = (recbrStructuredAssessmentRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrStructuredAssessmentRecordBrowser.class, m_recbrStructuredAssessmentTemp);
				super.addRecordBrowser(recbrStructuredAssessment);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 792, 7, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled16, form_images_local.Core.FindDisabled16, "Search Patient Assessments", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 440, 8, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.QuestionSmall, form_images_local.Core.QuestionSmall, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.Information, form_images_local.Core.InformationDisabled, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public ims.core.forms.authoringinfo.IComponent authStructuredAssessmentCompleted()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setauthStructuredAssessmentCompletedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setauthStructuredAssessmentCompletedVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isauthStructuredAssessmentCompletedVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setauthStructuredAssessmentCompletedEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isauthStructuredAssessmentCompletedEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent authStructuredAssessment()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setauthStructuredAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setauthStructuredAssessmentVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isauthStructuredAssessmentVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setauthStructuredAssessmentEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isauthStructuredAssessmentEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public lyrDualViewLayer lyrDualView()
			{
				return (lyrDualViewLayer)super.getLayer(0);
			}
			public Label lblStucturedTo()
			{
				return (Label)super.getControl(4);
			}
			public Label lblStructuredFrom()
			{
				return (Label)super.getControl(5);
			}
			public Button btnView()
			{
				return (Button)super.getControl(6);
			}
			public DateControl dteAssessmentFrom()
			{
				return (DateControl)super.getControl(7);
			}
			public DateControl dteAssessmentTo()
			{
				return (DateControl)super.getControl(8);
			}
			public recbrStructuredAssessmentRecordBrowser recbrStructuredAssessment()
			{
				return (recbrStructuredAssessmentRecordBrowser)super.getRecordBrowser(0);
			}
			public ImageButton imbSearchAssessment()
			{
				return (ImageButton)super.getControl(10);
			}
			public ImageButton imbStructuralContextInfo()
			{
				return (ImageButton)super.getControl(11);
			}
			public ImageButton imbStructuralHelp()
			{
				return (ImageButton)super.getControl(12);
			}
		}
		public static class tabGraphicalAssessmentContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class recbrGraphicalAssessmentRecordBrowser extends RecordBrowserBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text)
				{
					super.control.newRow(index, value, text);
				}
				public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(index, value, text, image);
				}
				public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, textColor);
				}
				public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, image, textColor);
				}
				public ims.assessment.instantiation.vo.PatientAssessmentRefVo getValue()
				{
					return (ims.assessment.instantiation.vo.PatientAssessmentRefVo)super.control.getValue();
				}
				public void setValue(ims.assessment.instantiation.vo.PatientAssessmentRefVo value)
				{
					super.control.setValue(value);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 392, 472, 376, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ims.framework.FormUiLogic m_authGraphicalAssessmentCompletedForm = loader.loadComponent(102228, appForm, startControlID * 10 + 5000, anchoringHelper16.getSize(), instance1, startTabIndex.intValue() + 6023, skipContextValidation);
				//ims.framework.Control m_authGraphicalAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(392), new Integer(472), new Integer(376), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 6023), m_authGraphicalAssessmentCompletedForm, instance1 } );
				ims.framework.Control m_authGraphicalAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1020),  new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 6023), m_authGraphicalAssessmentCompletedForm, instance1, Boolean.FALSE } );
				super.addControl(m_authGraphicalAssessmentCompletedControl);
				Menu[] menus1 = m_authGraphicalAssessmentCompletedForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 808, 424, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_customGraphicalAssessmentForm = loader.loadComponent(127114, appForm, startControlID * 10 + 6000, anchoringHelper17.getSize(), instance2, startTabIndex.intValue() + 4021, skipContextValidation);
				//ims.framework.Control m_customGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(8), new Integer(40), new Integer(808), new Integer(424), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4021), m_customGraphicalAssessmentForm, instance2 } );
				ims.framework.Control m_customGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1022),  new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4021), m_customGraphicalAssessmentForm, instance2, Boolean.FALSE } );
				super.addControl(m_customGraphicalAssessmentControl);
				Menu[] menus2 = m_customGraphicalAssessmentForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
				ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 472, 376, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ims.framework.FormUiLogic m_authGraphicalAssessmentForm = loader.loadComponent(102228, appForm, startControlID * 10 + 7000, anchoringHelper18.getSize(), instance3, startTabIndex.intValue() + 5022, skipContextValidation);
				//ims.framework.Control m_authGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(8), new Integer(472), new Integer(376), new Integer(56), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 5022), m_authGraphicalAssessmentForm, instance3 } );
				ims.framework.Control m_authGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1024),  new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 5022), m_authGraphicalAssessmentForm, instance3, Boolean.FALSE } );
				super.addControl(m_authGraphicalAssessmentControl);
				Menu[] menus3 = m_authGraphicalAssessmentForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus3.length; x++)
				{
					form.registerMenu(menus3[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 648, 12, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 480, 12, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "From:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 520, 10, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 4018), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 672, 10, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 4019), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// RecordBrowser Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 40, 10, 400, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				RecordBrowser m_recbrGraphicalAssessmentTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 4016), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
				addControl(m_recbrGraphicalAssessmentTemp);
				recbrGraphicalAssessmentRecordBrowser recbrGraphicalAssessment = (recbrGraphicalAssessmentRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrGraphicalAssessmentRecordBrowser.class, m_recbrGraphicalAssessmentTemp);
				super.addRecordBrowser(recbrGraphicalAssessment);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 792, 8, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 4020), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled16, form_images_local.Core.FindDisabled16, "Search Patient Assessments", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 448, 9, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 4017), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.QuestionSmall, form_images_local.Core.QuestionSmall, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 9, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 4015), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.Information, form_images_local.Core.InformationDisabled, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public ims.core.forms.authoringinfo.IComponent authGraphicalAssessmentCompleted()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setauthGraphicalAssessmentCompletedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setauthGraphicalAssessmentCompletedVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isauthGraphicalAssessmentCompletedVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setauthGraphicalAssessmentCompletedEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isauthGraphicalAssessmentCompletedEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.assessment.forms.graphicalassessment.IComponent customGraphicalAssessment()
			{
				return (ims.assessment.forms.graphicalassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomGraphicalAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomGraphicalAssessmentVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomGraphicalAssessmentVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomGraphicalAssessmentEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomGraphicalAssessmentEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent authGraphicalAssessment()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setauthGraphicalAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setauthGraphicalAssessmentVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isauthGraphicalAssessmentVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setauthGraphicalAssessmentEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isauthGraphicalAssessmentEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public Label lblGraphicalTo()
			{
				return (Label)super.getControl(3);
			}
			public Label lblGraphicalFrom()
			{
				return (Label)super.getControl(4);
			}
			public DateControl dteGraphicalFrom()
			{
				return (DateControl)super.getControl(5);
			}
			public DateControl dteGraphicalTo()
			{
				return (DateControl)super.getControl(6);
			}
			public recbrGraphicalAssessmentRecordBrowser recbrGraphicalAssessment()
			{
				return (recbrGraphicalAssessmentRecordBrowser)super.getRecordBrowser(0);
			}
			public ImageButton imbSearchGraphicalAssessment()
			{
				return (ImageButton)super.getControl(8);
			}
			public ImageButton imbGraphicalContextInfo()
			{
				return (ImageButton)super.getControl(9);
			}
			public ImageButton imbGraphicalHelp()
			{
				return (ImageButton)super.getControl(10);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabStructuralAssessment = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Structured Assessment", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabStructuralAssessmentContainer m_tabStructuralAssessmentContainer = (tabStructuralAssessmentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabStructuralAssessmentContainer.class, m_tabStructuralAssessment, factory);
			super.addContainer(m_tabStructuralAssessment, m_tabStructuralAssessmentContainer);
			ims.framework.utils.SizeInfo m_tabStructuralAssessmentDesignSize = new ims.framework.utils.SizeInfo(832, 560);
			ims.framework.utils.SizeInfo m_tabStructuralAssessmentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper27.getWidth(), anchoringHelper27.getHeight());
			m_tabStructuralAssessmentContainer.setContext(form, appForm, m_tabStructuralAssessment, loader, form_images_local, startControlID, m_tabStructuralAssessmentDesignSize, m_tabStructuralAssessmentRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabGraphicalAssessment = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Graphical Assessment", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabGraphicalAssessmentContainer m_tabGraphicalAssessmentContainer = (tabGraphicalAssessmentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGraphicalAssessmentContainer.class, m_tabGraphicalAssessment, factory);
			super.addContainer(m_tabGraphicalAssessment, m_tabGraphicalAssessmentContainer);
			ims.framework.utils.SizeInfo m_tabGraphicalAssessmentDesignSize = new ims.framework.utils.SizeInfo(832, 560);
			ims.framework.utils.SizeInfo m_tabGraphicalAssessmentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper28.getWidth(), anchoringHelper28.getHeight());
			m_tabGraphicalAssessmentContainer.setContext(form, appForm, m_tabGraphicalAssessment, loader, form_images_local, startControlID, m_tabGraphicalAssessmentDesignSize, m_tabGraphicalAssessmentRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabStructuralAssessment().setVisible(false);
			tabGraphicalAssessment().setVisible(false);
		}
		public void showtabStructuralAssessment()
		{
			tabGraphicalAssessment().setVisible(false);
			tabStructuralAssessment().setVisible(true);
		}
		public void showtabGraphicalAssessment()
		{
			tabStructuralAssessment().setVisible(false);
			tabGraphicalAssessment().setVisible(true);
		}

		public tabStructuralAssessmentContainer tabStructuralAssessment()
		{
			return (tabStructuralAssessmentContainer)super.layers.get(0);
		}
		public tabGraphicalAssessmentContainer tabGraphicalAssessment()
		{
			return (tabGraphicalAssessmentContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.assessment.vo.DynamicAssessmentSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.assessment.vo.DynamicAssessmentSearchCriteriaVo' of the global context variable 'Assessment.DynamicAssessmentSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getRIE();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrAssessmentsLayer m_lyrAssessmentsLayer = (lyrAssessmentsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrAssessmentsLayer.class, this, factory);
		super.addLayer(m_lyrAssessmentsLayer);
		m_lyrAssessmentsLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 172, 600, 240, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 7027), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Copy answers from previous assessment", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 414, 600, 185, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 7028), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Undo Assessment Completion", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 85, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 7026), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 7025), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 7031), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 7032), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 7029), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 7030), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 576, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 7024), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Complete", Boolean.TRUE, null}));

		// Link Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 720, 9, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrAssessmentsLayer lyrAssessments()
	{
		return (lyrAssessmentsLayer)super.getLayer(0);
	}
	public Button btnCopyAnswers()
	{
		return (Button)super.getControl(2);
	}
	public Button btnUndo()
	{
		return (Button)super.getControl(3);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(4);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(7);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(8);
	}
	public Button btnPrint()
	{
		return (Button)super.getControl(9);
	}
	public CheckBox chkComplete()
	{
		return (CheckBox)super.getControl(10);
	}
	public Link lnkReturn()
	{
		return (Link)super.getControl(11);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Assessment = new AssessmentForms();
			Core = new CoreForms();
			Clinical = new ClinicalForms();
			EAS = new EASForms();
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				DynamicAssessments = new LocalFormName(127107);
			}
			public final FormName DynamicAssessments;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				VitalSignsAll = new LocalFormName(102121);
				DocumentPrintPreview = new LocalFormName(102368);
			}
			public final FormName VitalSignsAll;
			public final FormName DocumentPrintPreview;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				PatientAssessmentSearch = new LocalFormName(123190);
			}
			public final FormName PatientAssessmentSearch;
		}
		public final class EASForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EASForms()
			{
				PatientElectronicActionSheet = new LocalFormName(145108);
			}
			public final FormName PatientElectronicActionSheet;
		}

		public AssessmentForms Assessment;
		public CoreForms Core;
		public ClinicalForms Clinical;
		public EASForms EAS;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Information = new ImageHelper(102217, "Images/Core/Information.gif", new Integer(16), new Integer(16));
				QuestionSmall = new ImageHelper(102215, "Images/Core/Help-3.gif", new Integer(16), new Integer(16));
				InformationDisabled = new ImageHelper(102297, "Images/Core/Information_disabled.gif", new Integer(16), new Integer(16));
				FindDisabled16 = new ImageHelper(102165, "Images/Core/FindDisabled16.gif", new Integer(16), new Integer(16));
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
				ClearDisabled16 = new ImageHelper(102167, "Images/Core/ClearDisabled16.gif", new Integer(16), new Integer(16));
				ClearEnabled16 = new ImageHelper(102168, "Images/Core/Clear.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Information;
			public final ims.framework.utils.Image QuestionSmall;
			public final ims.framework.utils.Image InformationDisabled;
			public final ims.framework.utils.Image FindDisabled16;
			public final ims.framework.utils.Image FindEnabled16;
			public final ims.framework.utils.Image ClearDisabled16;
			public final ims.framework.utils.Image ClearEnabled16;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_AllowNew = new ims.framework.ContextVariable("AllowNew", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__AllowNew_" + componentIdentifier + "");
			cxl_AllowUpdate = new ims.framework.ContextVariable("AllowUpdate", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__AllowUpdate_" + componentIdentifier + "");
			cxl_StructuralAssessment = new ims.framework.ContextVariable("StructuralAssessment", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier + "");
			cxl_OneInstancePresent = new ims.framework.ContextVariable("OneInstancePresent", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__OneInstancePresent_" + componentIdentifier + "");
			cxl_StructuralAssessmentRef = new ims.framework.ContextVariable("StructuralAssessmentRef", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessmentRef_" + componentIdentifier + "");
			cxl_GraphicalAssessment = new ims.framework.ContextVariable("GraphicalAssessment", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__GraphicalAssessment_" + componentIdentifier + "");
			cxl_GraphicalAssessmentRef = new ims.framework.ContextVariable("GraphicalAssessmentRef", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__GraphicalAssessmentRef_" + componentIdentifier + "");
			cxl_RIE = new ims.framework.ContextVariable("RIE", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__RIE_" + componentIdentifier + "");
			cxl_LoadedRecords = new ims.framework.ContextVariable("LoadedRecords", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__LoadedRecords_" + componentIdentifier + "");
			cxl_CurrentPatientAssessment = new ims.framework.ContextVariable("CurrentPatientAssessment", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier + "");
			cxl_InRIEMode = new ims.framework.ContextVariable("InRIEMode", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__InRIEMode_" + componentIdentifier + "");
			cxl_CopyAnswersFromPreviousAssessment = new ims.framework.ContextVariable("CopyAnswersFromPreviousAssessment", prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CopyAnswersFromPreviousAssessment_" + componentIdentifier + "");
		}
		
		public boolean getAllowNewIsNotNull()
		{
			return !cxl_AllowNew.getValueIsNull(context);
		}
		public Boolean getAllowNew()
		{
			return (Boolean)cxl_AllowNew.getValue(context);
		}
		public void setAllowNew(Boolean value)
		{
			cxl_AllowNew.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllowNew = null;
		public boolean getAllowUpdateIsNotNull()
		{
			return !cxl_AllowUpdate.getValueIsNull(context);
		}
		public Boolean getAllowUpdate()
		{
			return (Boolean)cxl_AllowUpdate.getValue(context);
		}
		public void setAllowUpdate(Boolean value)
		{
			cxl_AllowUpdate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllowUpdate = null;
		public boolean getStructuralAssessmentIsNotNull()
		{
			return !cxl_StructuralAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.User_AssessmentVo getStructuralAssessment()
		{
			return (ims.assessment.vo.User_AssessmentVo)cxl_StructuralAssessment.getValue(context);
		}
		public void setStructuralAssessment(ims.assessment.vo.User_AssessmentVo value)
		{
			cxl_StructuralAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_StructuralAssessment = null;
		public boolean getOneInstancePresentIsNotNull()
		{
			return !cxl_OneInstancePresent.getValueIsNull(context);
		}
		public Boolean getOneInstancePresent()
		{
			return (Boolean)cxl_OneInstancePresent.getValue(context);
		}
		public void setOneInstancePresent(Boolean value)
		{
			cxl_OneInstancePresent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OneInstancePresent = null;
		public boolean getStructuralAssessmentRefIsNotNull()
		{
			return !cxl_StructuralAssessmentRef.getValueIsNull(context);
		}
		public ims.assessment.configuration.vo.UserAssessmentRefVo getStructuralAssessmentRef()
		{
			return (ims.assessment.configuration.vo.UserAssessmentRefVo)cxl_StructuralAssessmentRef.getValue(context);
		}
		public void setStructuralAssessmentRef(ims.assessment.configuration.vo.UserAssessmentRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'StructuralAssessmentRef' RefVo context variable.");
			if(value == null)
				cxl_StructuralAssessmentRef.setValue(context, null);
			else
				cxl_StructuralAssessmentRef.setValue(context, new ims.assessment.configuration.vo.UserAssessmentRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_StructuralAssessmentRef = null;
		public boolean getGraphicalAssessmentIsNotNull()
		{
			return !cxl_GraphicalAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.Graphic_AssessmentVo getGraphicalAssessment()
		{
			return (ims.assessment.vo.Graphic_AssessmentVo)cxl_GraphicalAssessment.getValue(context);
		}
		public void setGraphicalAssessment(ims.assessment.vo.Graphic_AssessmentVo value)
		{
			cxl_GraphicalAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GraphicalAssessment = null;
		public boolean getGraphicalAssessmentRefIsNotNull()
		{
			return !cxl_GraphicalAssessmentRef.getValueIsNull(context);
		}
		public ims.assessment.configuration.vo.GraphicAssessmentRefVo getGraphicalAssessmentRef()
		{
			return (ims.assessment.configuration.vo.GraphicAssessmentRefVo)cxl_GraphicalAssessmentRef.getValue(context);
		}
		public void setGraphicalAssessmentRef(ims.assessment.configuration.vo.GraphicAssessmentRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'GraphicalAssessmentRef' RefVo context variable.");
			if(value == null)
				cxl_GraphicalAssessmentRef.setValue(context, null);
			else
				cxl_GraphicalAssessmentRef.setValue(context, new ims.assessment.configuration.vo.GraphicAssessmentRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_GraphicalAssessmentRef = null;
		public boolean getRIEIsNotNull()
		{
			return !cxl_RIE.getValueIsNull(context);
		}
		public ims.assessment.vo.Patient_AssessmentVo getRIE()
		{
			return (ims.assessment.vo.Patient_AssessmentVo)cxl_RIE.getValue(context);
		}
		public void setRIE(ims.assessment.vo.Patient_AssessmentVo value)
		{
			cxl_RIE.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RIE = null;
		public boolean getLoadedRecordsIsNotNull()
		{
			return !cxl_LoadedRecords.getValueIsNull(context);
		}
		public ims.assessment.vo.Patient_AssessmentListVoCollection getLoadedRecords()
		{
			return (ims.assessment.vo.Patient_AssessmentListVoCollection)cxl_LoadedRecords.getValue(context);
		}
		public void setLoadedRecords(ims.assessment.vo.Patient_AssessmentListVoCollection value)
		{
			cxl_LoadedRecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoadedRecords = null;
		public boolean getCurrentPatientAssessmentIsNotNull()
		{
			return !cxl_CurrentPatientAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.Patient_AssessmentVo getCurrentPatientAssessment()
		{
			return (ims.assessment.vo.Patient_AssessmentVo)cxl_CurrentPatientAssessment.getValue(context);
		}
		public void setCurrentPatientAssessment(ims.assessment.vo.Patient_AssessmentVo value)
		{
			cxl_CurrentPatientAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentPatientAssessment = null;
		public boolean getInRIEModeIsNotNull()
		{
			return !cxl_InRIEMode.getValueIsNull(context);
		}
		public Boolean getInRIEMode()
		{
			return (Boolean)cxl_InRIEMode.getValue(context);
		}
		public void setInRIEMode(Boolean value)
		{
			cxl_InRIEMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InRIEMode = null;
		public boolean getCopyAnswersFromPreviousAssessmentIsNotNull()
		{
			return !cxl_CopyAnswersFromPreviousAssessment.getValueIsNull(context);
		}
		public ims.assessment.instantiation.vo.PatientAssessmentRefVo getCopyAnswersFromPreviousAssessment()
		{
			return (ims.assessment.instantiation.vo.PatientAssessmentRefVo)cxl_CopyAnswersFromPreviousAssessment.getValue(context);
		}
		public void setCopyAnswersFromPreviousAssessment(ims.assessment.instantiation.vo.PatientAssessmentRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CopyAnswersFromPreviousAssessment' RefVo context variable.");
			if(value == null)
				cxl_CopyAnswersFromPreviousAssessment.setValue(context, null);
			else
				cxl_CopyAnswersFromPreviousAssessment.setValue(context, new ims.assessment.instantiation.vo.PatientAssessmentRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CopyAnswersFromPreviousAssessment = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[132];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-ID", "ID_PatientAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-STATUS", "Status");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-PATIENT", "Patient");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-CARECONTEXT", "CareContext");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-SCORE", "Score");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.Patient_AssessmentFull", "BO-1003100048-ASSOCIATEDDOCUMENT", "AssociatedDocument");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientAssessment.SelectedAssessment", "BO-1003100048-ID", "ID_PatientAssessment");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Assessment.PatientAssessment", "BO-1003100048-ID", "ID_PatientAssessment");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_EAS.EasPatientAssessment", "BO-1003100048-ID", "ID_PatientAssessment");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ID", "ID_UserAssessment");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-NAME", "Name");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-DESCRIPTION", "Description");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-HELPURL", "HelpURL");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-CATEGORY", "Category");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__StructuralAssessmentRef_" + componentIdentifier, "BO-1003100043-ID", "ID_UserAssessment");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-ID", "ID_GraphicAssessment");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-NAME", "Name");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-ASSESSMENTTYPE", "AssessmentType");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-ACTIVESTATUS", "ActiveStatus");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-HELPURL", "HelpUrl");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-STOREPRINTEDREPORT", "StorePrintedReport");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-ASSOCIATEDREPORTFORPRINTING", "AssociatedReportForPrinting");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__GraphicalAssessmentRef_" + componentIdentifier, "BO-1028100006-ID", "ID_GraphicAssessment");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__RIE_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__RIE_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__RIE_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__RIE_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__RIE_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__RIE_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__RIE_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__RIE_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__RIE_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__RIE_" + componentIdentifier, "BO-1003100048-ASSOCIATEDDOCUMENT", "AssociatedDocument");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-ASSOCIATEDDOCUMENT", "AssociatedDocument");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.DynamicAssessments.__internal_x_context__CopyAnswersFromPreviousAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
