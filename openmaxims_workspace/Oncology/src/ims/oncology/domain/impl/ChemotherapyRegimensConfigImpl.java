//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.oncology.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.oncology.configuration.domain.objects.ChemoRegimensConfig;
import ims.oncology.configuration.domain.objects.ChemoRegimensDrugConfig;
import ims.oncology.domain.base.impl.BaseChemotherapyRegimensConfigImpl;
import ims.oncology.forms.chemotherapyregimensconfig.Logic.SearchPattern;

import ims.oncology.vo.domain.ChemoRegimensConfigVoAssembler;
import ims.oncology.vo.domain.ChemoRegimensDrugConfigVoAssembler;
import ims.oncology.vo.lookups.RegimenAcronym;
import ims.oncology.vo.lookups.RegimenAcronymCollection;
import ims.vo.LookupInstVo;

public class ChemotherapyRegimensConfigImpl extends BaseChemotherapyRegimensConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.oncology.vo.ChemoRegimensDrugConfigVoCollection listChemoRegimenDrugConfig(String regimen, Boolean activeOnly, Integer searchPattern)
	{
		
		if (regimen == null || regimen.length() == 0 || (searchPattern != null && searchPattern.equals(SearchPattern.NONE)))
			return null;
		
		// Build query tools
		StringBuilder query = new StringBuilder();
		String conditional = "";

		// Start the query
		query.append("SELECT c1_1 from ChemoRegimensDrugConfig as c1_1 left join c1_1.regimen as l1_1 WHERE ( ");
		
		// Search criteria part of the query
		if (regimen != null && regimen.length() > 0)
		{
			// Add the status part of the query
    		if (Boolean.TRUE.equals(activeOnly))
    		{
    			query.append("l1_1.active = 1");
        		query.append(" AND ");
    		}
    		
    		query.append("(select count (med.id)  from ChemoRegimensDrugConfig as cfg join cfg.linkedDrug as med where (cfg.id = c1_1.id) ) > 0 ");
    		query.append(" AND ");	
    		// Add the Regimen name part to the query
			query.append(" UPPER(l1_1.text) LIKE ");
			// Determine how the regimen name should be searched after
			switch (SearchPattern.getSearchPattern(searchPattern))
			{
				case BEGINS:
					query.append("'").append(regimen.toUpperCase()).append("%'").append(")");
					break;

				case CONTAINS:
					query.append("'%").append(regimen.toUpperCase()).append("%'").append(")");
					break;

				case EXACT:
					query.append("'").append(regimen.toUpperCase()).append("'").append(")");
					break;
			}
			
			// Prepare for selected item
			conditional = " OR ";
		}
		
			
		// Add the sort order part to query
		query.append(" ORDER BY l1_1.text");
		
				
		return ChemoRegimensDrugConfigVoAssembler.createChemoRegimensDrugConfigVoCollectionFromChemoRegimensDrugConfig(getDomainFactory().find(query.toString()));
		
	}

	public ims.oncology.vo.ChemoRegimensDrugConfigVo getChemoRegimensConfig(ims.oncology.configuration.vo.ChemoRegimensDrugConfigRefVo record)
	{
		if(record == null || record.getID_ChemoRegimensDrugConfig() == null)
			return null;
				
		return ChemoRegimensDrugConfigVoAssembler.create((ChemoRegimensDrugConfig) getDomainFactory().getDomainObject(ChemoRegimensDrugConfig.class, record.getID_ChemoRegimensDrugConfig()));
	}

	public ims.oncology.vo.ChemoRegimensDrugConfigVo save(ims.oncology.vo.ChemoRegimensDrugConfigVo record) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if(record == null)
			throw new CodingRuntimeException("Can not save a null ChemoRegimensDrugConfigVo");
		
		if(!record.isValidated())
			throw new CodingRuntimeException("ChemoRegimensDrugConfigVo must be validated before save.");
		
		DomainFactory factory = getDomainFactory();

		
		
		ChemoRegimensDrugConfig doRecord = ChemoRegimensDrugConfigVoAssembler.extractChemoRegimensDrugConfig(factory, record);
		factory.save(doRecord);
				
		return ChemoRegimensDrugConfigVoAssembler.create(doRecord);
		
	
	}

	
	public RegimenAcronymCollection listUnusedRegimen(String name,RegimenAcronym regimen) 
	{
		StringBuilder query = new StringBuilder();
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		query.append("select lkp from LookupInstance as lkp where lkp.type.id = :TYPE and lkp.active = 1 and lkp.id not in (select chemo.regimen.id from ChemoRegimensDrugConfig as chemo)");
		
		paramNames.add("TYPE"); paramValues.add(RegimenAcronym.TYPE_ID);
				
		if (name != null)
		{
			query.append(" and UPPER(lkp.text) like :NAME");
			
			paramNames.add("NAME"); paramValues.add(name.toUpperCase() + "%");
		}
		
		if (regimen != null)
		{
			query.append(" or lkp.id = :USED");
			
			paramNames.add("USED"); paramValues.add(regimen.getID());
		}
		
		List searchResults = getDomainFactory().find(query.toString(), paramNames, paramValues);
		
		if (searchResults == null || searchResults.size() == 0)
			return null;
		
		RegimenAcronymCollection results = new RegimenAcronymCollection();
		
		for (int i = 0; i < searchResults.size(); i++)
		{
			if (searchResults.get(i) instanceof LookupInstance)
			{
				LookupInstVo regimenInstance = getLookupService().getLookupInstance(RegimenAcronym.class, RegimenAcronym.TYPE_ID, ((LookupInstance)searchResults.get(i)).getId());
				results.add(regimenInstance);
			}
		}
		
		return results;
	}
}
