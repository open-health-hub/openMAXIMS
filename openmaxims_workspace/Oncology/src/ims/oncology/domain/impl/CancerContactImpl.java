//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3832.22959)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.oncology.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.resource.people.domain.objects.Medic;
import ims.core.resource.people.domain.objects.Nurse;
import ims.core.resource.people.domain.objects.Therapist;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpFilter;
import ims.core.vo.MedicVo;
import ims.core.vo.domain.HcpAssembler;
import ims.core.vo.domain.MedicVoAssembler;
import ims.core.vo.domain.NurseVoAssembler;
import ims.core.vo.domain.TherapistVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.oncology.domain.base.impl.BaseCancerContactImpl;
import ims.oncology.domain.objects.CancerContacts;
import ims.oncology.domain.objects.ContactTypesByDiscipline;
import ims.oncology.vo.ContactTypesByDisciplineVo;
import ims.oncology.vo.domain.CancerContactsVoAssembler;
import ims.oncology.vo.domain.ContactTypesByDisciplineVoAssembler;
import ims.vo.LookupInstVo;

import java.util.ArrayList;
import java.util.List;

public class CancerContactImpl extends BaseCancerContactImpl
{

	private static final long serialVersionUID = 1L;

	public ims.oncology.vo.CancerContactsVo getCAContact(ims.oncology.vo.CancerContactsRefVo voCARef)
	{
		DomainFactory factory = getDomainFactory();
		return CancerContactsVoAssembler.create((CancerContacts)factory.getDomainObject((CancerContacts.class), voCARef.getID_CancerContacts()));
	}

	public ims.oncology.vo.CancerContactsVo saveCAContact(ims.oncology.vo.CancerContactsVo voContact) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		if (!voContact.isValidated())
			throw new CodingRuntimeException("Contact has not been validated");
		if(voContact == null)
			throw new CodingRuntimeException("Cannot save null Contact");
		
		DomainFactory factory = getDomainFactory();
		
		CancerContacts doCC = CancerContactsVoAssembler.extractCancerContacts(factory, voContact);
		factory.save(doCC);
		return (CancerContactsVoAssembler.create(doCC));		
	}

	public ims.oncology.vo.CancerContactsVoCollection listCAContacts(ims.oncology.vo.CancerContactSearchCriteriaVo caSearchCriteria)
	{
		if(caSearchCriteria == null)
			throw new CodingRuntimeException("Mandatory parameter - caSearchCriteria not supplied");
		
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from CancerContacts cc where ");
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		
		if (caSearchCriteria.getEpisodeOfCareIsNotNull())
		{
			condStr.append(andStr + " cc.episodeOfCare.id = :EP_ID");
			names.add("EP_ID");
			values.add(caSearchCriteria.getEpisodeOfCare().getID_EpisodeOfCare());
			andStr = " and ";
		}
		
		if (caSearchCriteria.getHcpLiteIsNotNull())
		{
			condStr.append(andStr + " cc.contactHCP.id = :cHCP");
			names.add("cHCP");
			values.add(caSearchCriteria.getHcpLite().getID_Hcp());
			andStr = " and ";
		}
	
		if (caSearchCriteria.getHCPDisciplineIsNotNull())
		{
			condStr.append(andStr + " cc.hCPDiscipline = :cDISP");
			names.add("cDISP");
			values.add(getDomLookup(caSearchCriteria.getHCPDiscipline()));
			andStr = " and ";
		}
	
		if (caSearchCriteria.getDateFromIsNotNull() && caSearchCriteria.getDateToIsNotNull())
		{
			condStr.append(andStr + " ( cc.contactDateTime between :fromdate and :todate )");
			names.add("fromdate");
			values.add(new DateTime(caSearchCriteria.getDateFrom(), new Time("00:00:00")).getJavaDate() );
			names.add("todate");
			values.add(new DateTime(caSearchCriteria.getDateTo(), new Time("23:59:59")).getJavaDate() );
			andStr = " and ";
		}
		else if (caSearchCriteria.getDateFromIsNotNull() && caSearchCriteria.getDateTo() == null)
		{
			condStr.append(andStr + " ( cc.contactDateTime >= :fromdate) ");
			names.add("fromdate");
			values.add(new DateTime(caSearchCriteria.getDateFrom(), new Time("00:00:00")).getJavaDate() );
			andStr = " and ";
			
		}
		else if (caSearchCriteria.getDateFrom() == null && caSearchCriteria.getDateToIsNotNull())
		{
			condStr.append(andStr + " ( cc.contactDateTime <= :todate) ) ");
			names.add("todate");
			values.add(new DateTime(caSearchCriteria.getDateTo(), new Time("23:59:59")).getJavaDate() );
			andStr = " and ";
		}
		hql.append(condStr.toString());

		List list = factory.find(hql.toString(), names,values);
		return (CancerContactsVoAssembler.createCancerContactsVoCollectionFromCancerContacts(list).sort());
		
	}

	public ContactTypesByDisciplineVo loadDisciplineContacts(LookupInstVo hcpDisp) 
	{
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from ContactTypesByDiscipline cd where cd.discipline = :disp ");
		names.add("disp");
		values.add(getDomLookup(hcpDisp));
		
		List list = factory.find(hql.toString(), names,values);
		if (list.size() == 1)
			return ContactTypesByDisciplineVoAssembler.create((ContactTypesByDiscipline)list.get(0));
		
		return null;
	}

	public Hcp getHCP(HcpRefVo hcpRefVo) 
	{
		DomainFactory factory = getDomainFactory();
		ims.core.resource.people.domain.objects.Hcp doHcp = (ims.core.resource.people.domain.objects.Hcp) factory.getDomainObject(ims.core.resource.people.domain.objects.Hcp.class, hcpRefVo.getID_Hcp());

		if (Medic.class.isAssignableFrom(doHcp.getClass()))
			return MedicVoAssembler.create((Medic) doHcp);
		else if (doHcp instanceof Therapist)
			return TherapistVoAssembler.create((Therapist)doHcp);
		else if (doHcp instanceof Nurse)
			return NurseVoAssembler.create((Nurse) doHcp);

		return HcpAssembler.create(doHcp);		
	}
}
