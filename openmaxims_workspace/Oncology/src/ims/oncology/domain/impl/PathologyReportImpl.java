//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.53 build 2663.17474)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.oncology.domain.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.clinicaladmin.domain.TumourCategoryGroupSites;
import ims.clinicaladmin.domain.impl.TumourCategoryGroupSitesImpl;
import ims.clinicaladmin.vo.PathologyDetailsListVo;
import ims.clinicaladmin.vo.PathologyDetailsVo;
import ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo;
import ims.clinicaladmin.vo.TumourGroupVo;
import ims.clinicaladmin.vo.TumourSiteVo;
import ims.clinicaladmin.vo.domain.PathologyDetailsListVoAssembler;
import ims.clinicaladmin.vo.domain.PathologyDetailsVoAssembler;
import ims.clinicaladmin.vo.domain.TumourGroupSiteOverallStagingVoAssembler;
import ims.core.vo.OrgLiteVoCollection;
import ims.core.vo.OrgShortVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.oncology.configuration.domain.objects.TumourGroupSiteOverallStaging;
import ims.oncology.configuration.vo.TumourGroupRefVo;
import ims.oncology.configuration.vo.TumourGroupSiteTNMValueRefVo;
import ims.oncology.configuration.vo.TumourSiteRefVo;
import ims.oncology.domain.base.impl.BaseHistoPathologyReportImpl;
import ims.oncology.domain.objects.PathologyDetails;

public class PathologyReportImpl extends BaseHistoPathologyReportImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* savePathologyDetails
	*/
	public ims.clinicaladmin.vo.PathologyDetailsVo savePathologyDetails(ims.clinicaladmin.vo.PathologyDetailsVo pathVo) throws ims.domain.exceptions.StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		PathologyDetails doPD = PathologyDetailsVoAssembler.extractPathologyDetails(factory, pathVo);
		factory.save(doPD);
		return PathologyDetailsVoAssembler.create(doPD);
	}
	public PathologyDetailsVo savePathologyDetailsTwoArg(PathologyDetailsVo pathVo1, PathologyDetailsVo pathVo2) throws StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();
		PathologyDetails doPD1 = PathologyDetailsVoAssembler.extractPathologyDetails(factory, pathVo1);
		factory.save(doPD1);
		PathologyDetails doPD2 = PathologyDetailsVoAssembler.extractPathologyDetails(factory, pathVo2);
		factory.save(doPD2);
		return PathologyDetailsVoAssembler.create(doPD2);
	}
	
	/**
	* geStagingClassification
	*/
	public ims.clinicaladmin.vo.PathologyDetailsVo getPathologyDetail(ims.oncology.vo.PathologyDetailsRefVo pathRefVo)
	{
		if(pathRefVo == null)
			throw new RuntimeException("Cannot get PathologyDetailsVo for null PathologyDetailsRefVo");
		
		return PathologyDetailsVoAssembler.create((PathologyDetails)getDomainFactory().getDomainObject(PathologyDetails.class, pathRefVo.getID_PathologyDetails()));
	}

	/**
	* listPathologyDetails
	*/
	public ims.clinicaladmin.vo.PathologyDetailsListVoCollection listPathologyDetails(ims.core.admin.vo.CareContextRefVo careContextRefVo)
	{
		DomainFactory factory = getDomainFactory();
		String hql = "from PathologyDetails pd where pd.careContext.id = " + careContextRefVo.getID_CareContext();
		
		return PathologyDetailsListVoAssembler.
			createPathologyDetailsListVoCollectionFromPathologyDetails((factory.find(hql))).sort();
	}

	public OrgLiteVoCollection listOrganisationsLite(OrgShortVo filter) 
	{
		OrganisationAndLocation org = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return org.listOrganisationsLite(filter);
	}

	public TumourGroupVo getGroup(TumourGroupRefVo voRef)
	{
		TumourCategoryGroupSites tcgs = (TumourCategoryGroupSites) getDomainImpl(TumourCategoryGroupSitesImpl.class);
		return tcgs.getGroup(voRef);
	}

	public TumourSiteVo getSite(TumourSiteRefVo voRef)
	{
		TumourCategoryGroupSites tcgs = (TumourCategoryGroupSites) getDomainImpl(TumourCategoryGroupSitesImpl.class);
		return tcgs.getSite(voRef);
	}

	public TumourGroupSiteOverallStagingVo getTumourOverAllStaging(TumourGroupRefVo groupRefVo, TumourSiteRefVo siteRefVo, TumourGroupSiteTNMValueRefVo tRefVo, TumourGroupSiteTNMValueRefVo nRefVo, TumourGroupSiteTNMValueRefVo mRefVo) 
	{
		if (groupRefVo == null || tRefVo == null || nRefVo == null || mRefVo == null)
			throw new DomainRuntimeException("Invalid getTumourOverAllStaging argument");
		
		String hql = " from TumourGroupSiteOverallStaging tgsos ";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		StringBuffer condStr = new StringBuffer();
		String andStr = " and ";

		condStr.append(" tgsos.tGroup.id = :tgroup");
		markers.add("tgroup");
		values.add(groupRefVo.getID_TumourGroup());

		condStr.append(andStr + " tgsos.tVal.id = :tVal");
		markers.add("tVal");
		values.add(tRefVo.getID_TumourGroupSiteTNMValue());

		condStr.append(andStr + " tgsos.nVal.id = :nVal");
		markers.add("nVal");
		values.add(nRefVo.getID_TumourGroupSiteTNMValue());

		condStr.append(andStr + " tgsos.mVal.id = :mVal");
		markers.add("mVal");
		values.add(mRefVo.getID_TumourGroupSiteTNMValue());

		condStr.append(andStr + " tgsos.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);

		if (siteRefVo != null)
		{
			condStr.append(andStr + " tgsos.tSite.id = :site");
			markers.add("site");
			values.add(siteRefVo.getID_TumourSite());
		}

		if (markers.size() > 0) 
		{
			hql += " where ";
			hql += condStr.toString();
		}
		
		List findList = getDomainFactory().find(hql, markers, values);
		if (findList != null && findList.size() > 0)
		{
			return TumourGroupSiteOverallStagingVoAssembler.create((TumourGroupSiteOverallStaging)findList.get(0));
		}
		return null;
	}


	
	

	
}
