//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3915.24993)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.oncology.forms.internalreferrallist;

import java.util.ArrayList;

import ims.core.vo.HcpLiteVo;
import ims.core.vo.enums.MosType;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.utils.Date;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.forms.internalreferrallist.GenForm.GroupStatusEnumeration;
import ims.oncology.forms.internalreferrallist.GenForm.grdDetailsRow;
import ims.oncology.vo.InternalReferralListFilterVo;
import ims.oncology.vo.InternalReferralListVoCollection;
import ims.oncology.vo.lookups.InternalReferralTypeAndReasonCollection;
import ims.oncology.vo.lookups.LookupHelper;
import ims.oncology.vo.lookups.ReferralOutcome;
import ims.vo.interfaces.IMos;
public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.GroupStatus().setValue(GroupStatusEnumeration.rdoCurrent);
		
		loadReferralTypeCombo();
		refreshSearchCriteria();
		form.ccReferredBy().initialize(MosType.HCP);
	}
	
	private void loadReferralTypeCombo()
	{
		InternalReferralTypeAndReasonCollection coll = LookupHelper.getInternalReferralTypeAndReason(domain.getLookupService());

		form.cmbType().clear();

		for (int i = 0; i < coll.size(); i++)
		{
			if (coll.get(i).getParent() == null && coll.get(i) .isActive())
				form.cmbType().newRow(coll.get(i), coll.get(i).getText(), coll.get(i).getImage(), coll.get(i).getTextColor());
		}
	}
	

	private void refreshSearchCriteria() 
	{
		if (form.getGlobalContext().Oncology.getInternalReferralListFilterIsNotNull())
		{
			form.cmbType().setValue(form.getGlobalContext().Oncology.getInternalReferralListFilterIsNotNull() ? form.getGlobalContext().Oncology.getInternalReferralListFilter().getReferralType() : null);
			if (form.getGlobalContext().Oncology.getInternalReferralListFilter().getReferredByIsNotNull())
			{
				form.ccReferredBy().initialize(MosType.HCP);
				form.ccReferredBy().setValue((IMos)form.getGlobalContext().Oncology.getInternalReferralListFilter().getReferredBy());
			}
			form.dteFrom().setValue(form.getGlobalContext().Oncology.getInternalReferralListFilter().getDateFrom());
			form.dteTo().setValue(form.getGlobalContext().Oncology.getInternalReferralListFilter().getDateTo());
			form.GroupStatus().setValue(form.getGlobalContext().Oncology.getInternalReferralListFilter().getActiveOnlyIsNotNull() && form.getGlobalContext().Oncology.getInternalReferralListFilter().getActiveOnly() ? GroupStatusEnumeration.rdoCurrent : GroupStatusEnumeration.rdoAll);
				
			search();
		}
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdDetails().getRows().clear();
		form.GroupStatus().setValue(GroupStatusEnumeration.None);
		form.cmbType().setValue(null);
		form.ccReferredBy().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		updateContextMenu();
	}
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (validateSearchCriteria()) //WDEV-13975
		{
		doSearch();
		}
	}
	
	//start WDEV-13975
	private boolean validateSearchCriteria() 
	{
		ArrayList<String> uiErrors = new ArrayList<String>();
		Date dateFrom = form.dteFrom().getValue();
		Date dateTo = form.dteTo().getValue();
		
		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			uiErrors.add("From Date can not be greater than End Date");
		}
		
		if (uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[uiErrors.size()]));
			return false;
		}
		return true;
	}
	//end

	private void doSearch() 
	{
		form.grdDetails().getRows().clear();
		updateContextMenu();
		InternalReferralListFilterVo vFilter = populateSearchCriteria();
		if (vFilter.countFieldsWithValue() > 1)
			search();
		else
			engine.showMessage("Please enter some search criteria");
	}

	private void search() 
	{
		InternalReferralListVoCollection voColl = domain.listReferrals(populateSearchCriteria());
		if (voColl == null 
			|| voColl.size() == 0 )
		{
			engine.showMessage("No results found.");
			return;
		}
		
		form.grdDetails().getRows().clear();
		form.getGlobalContext().Oncology.setInternalReferralListFilter(populateSearchCriteria());
		
		populateGrid(voColl);
		
	}
	

	private void populateGrid(InternalReferralListVoCollection voColl) 
	{
		for(int i = 0 ; i < voColl.size() ; i++)
		{
			grdDetailsRow row = form.grdDetails().getRows().newRow();
			
			row.setColType(voColl.get(i).getReferralTypeIsNotNull() ?  voColl.get(i).getReferralType().getText() : "");
			row.setColPatient(voColl.get(i).getPatientIsNotNull() && voColl.get(i).getPatient().getNameIsNotNull() ?  voColl.get(i).getPatient().getName().toString() : "");
			row.setColHospNum(voColl.get(i).getPatientIsNotNull() && voColl.get(i).getPatient().getDisplayId() != null && voColl.get(i).getPatient().getDisplayId().getValueIsNotNull() ?  voColl.get(i).getPatient().getDisplayId().getValue().toString() : ""); //wdev-14325
			row.setColDateReferral(voColl.get(i).getReferralDateIsNotNull() ?  voColl.get(i).getReferralDate().toString() : "");
			row.setColSource(voColl.get(i).getReferralSourceIsNotNull() ?  voColl.get(i).getReferralSource().toString() : "");
			row.setColReferredBy(voColl.get(i).getReferredByIsNotNull() && voColl.get(i).getReferredBy().getName() != null ?  voColl.get(i).getReferredBy().getName().toString() : "");
			row.setColTreatmentStartDate(voColl.get(i).getTreatmentStartDateIsNotNull() ?  voColl.get(i).getTreatmentStartDate().toString() : "");
			row.setColDischargeDate(voColl.get(i).getPlannedDischargeDateIsNotNull() ?  voColl.get(i).getPlannedDischargeDate().toString() : "");
			if (voColl.get(i).getInternalReferralOutcomeIsNotNull() 
				&& voColl.get(i).getInternalReferralOutcome().getReferralOutcomeIsNotNull() 
				&& voColl.get(i).getInternalReferralOutcome().getReferralOutcome().equals(ReferralOutcome.INTERNAL_REF_ACCEPTED))
				row.setColAcceptedDate(voColl.get(i).getInternalReferralOutcomeIsNotNull() &&  voColl.get(i).getInternalReferralOutcome().getReferralOutcomeDateIsNotNull() ? voColl.get(i).getInternalReferralOutcome().getReferralOutcomeDate().toString() : "");
				
			row.setValue(voColl.get(i));
		}
		
	}

	private InternalReferralListFilterVo populateSearchCriteria()
	{
		InternalReferralListFilterVo voFilter = new InternalReferralListFilterVo();
		
		voFilter.setActiveOnly(form.GroupStatus().getValue().equals(GroupStatusEnumeration.rdoCurrent) ? Boolean.TRUE : Boolean.FALSE);
		voFilter.setReferralType(form.cmbType().getValue());
		voFilter.setReferredBy((HcpLiteVo)form.ccReferredBy().getValue());
		voFilter.setDateFrom(form.dteFrom().getValue());
		voFilter.setDateTo(form.dteTo().getValue());
		
		return voFilter;
	}

	@Override
	protected void onGrdDetailsSelectionChanged()
	{
		updateContextMenu();
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.grdDetails().getValue().getPatient()));

	}

	private void updateContextMenu()
	{
		form.getContextMenus().Oncology.hideAllInternalReferralListMenuMenuItems();
		
		if (form.grdDetails().getValue() != null)
		{
			form.getContextMenus().Oncology.getInternalReferralListMenuVIEWItem().setEnabled(true);
			form.getContextMenus().Oncology.getInternalReferralListMenuVIEWItem().setVisible(true);
			
			if (form.grdDetails().getValue().getReferralSeen() == null
				|| (form.grdDetails().getValue().getReferralSeenIsNotNull()
					&& ! form.grdDetails().getValue().getReferralSeen()))
			{
				form.getContextMenus().Oncology.getInternalReferralListMenuUPDATEItem().setEnabled(true);
				form.getContextMenus().Oncology.getInternalReferralListMenuUPDATEItem().setVisible(true);
			}
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.OncologyNamespace.InternalReferralListMenu.VIEW :
				viewReferral();
			break;			
			case GenForm.ContextMenus.OncologyNamespace.InternalReferralListMenu.UPDATE:
				updateReferral();
			break;			
			default :
			break;
		}
	}

	private void updateReferral()
	{
		if (form.grdDetails().getValue() == null)
			return;
		
		form.getGlobalContext().Core.setPatientShort(null);

		form.getGlobalContext().Oncology.setInternalReferralRef(form.grdDetails().getValue());
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.grdDetails().getValue().getPatient()));
		
		engine.open(form.getForms().Oncology.InternalReferralDialog, new Object[]{Boolean.TRUE});
	}

	private void viewReferral() 
	{
		if (form.grdDetails().getValue() == null)
			return;

		form.getGlobalContext().Core.setPatientShort(null);

		form.getGlobalContext().Oncology.setInternalReferralRef(form.grdDetails().getValue());
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.grdDetails().getValue().getPatient()));
		
		engine.open(form.getForms().Oncology.InternalReferralDialog, new Object[]{Boolean.FALSE});
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		doSearch();
	}
}
