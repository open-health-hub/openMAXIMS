//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.53 build 2663.17474)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.oncology.forms.histopathologyreport;


import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentVo;
import ims.clinicaladmin.vo.PathologyDetailsListVo;
import ims.clinicaladmin.vo.PathologyDetailsListVoCollection;
import ims.clinicaladmin.vo.PathologyDetailsVo;
import ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo;
import ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo;
import ims.clinicaladmin.vo.TumourGroupSiteTNMValueVoCollection;
import ims.clinicaladmin.vo.TumourGroupVo;
import ims.clinicaladmin.vo.TumourHistologyLiteVo;
import ims.clinicaladmin.vo.TumourHistologyLiteVoCollection;
import ims.clinicaladmin.vo.TumourSiteVo;
import ims.core.vo.OrgLiteVoCollection;
import ims.core.vo.OrgShortVo;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.forms.histopathologyreport.GenForm.grdDetailsRow;
import ims.oncology.vo.lookups.HistopathologyReportStatus;
import ims.oncology.vo.lookups.TNMClinicalpathological;
import ims.oncology.vo.lookups.TNMType;

public class Logic extends BaseLogic
{
	private static final Integer COL_HISTOLOGY = new Integer(1);
	private static final Integer COL_SELECT = new Integer(2);

	private static final Integer COL_HIST_WIDTH = new Integer(140);

	private static final long serialVersionUID = 1L;

	@Override
	protected void onBtnReviseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		reviseInstance();
	}
	
	private void reviseInstance() 
	{
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setReviseRecord(true);

		if (form.getLocalContext().getLoadedTumourSite() == null && form.getLocalContext().getLoadedTumourGroup() == null)

			{
				loadTNMCombosAndHistology();
			}

			if (form.getLocalContext().getLoadedTumourSiteIsNotNull())
				fillCombosAndGridsFromTumourSite(form.getLocalContext().getLoadedTumourSite());
			else if (form.getLocalContext().getLoadedTumourGroupIsNotNull())
				fillCombosAndGridsFromTumourGroup(form.getLocalContext().getLoadedTumourGroup());
			
			populateScreenFromData(form.getLocalContext().getSelectedPathologyDetailsVo());

			
		form.lyrDetails().showtabGenDetails();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		
		open();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PathologyDetailsVo pdVo = null;
		PathologyDetailsVo selectedPathologyDetailsVo = null;
		if (form.getLocalContext().getReviseRecordIsNotNull() 
			&& form.getLocalContext().getReviseRecord().booleanValue())
		{
			pdVo = new PathologyDetailsVo();
			pdVo.setPreviousVersion(form.getLocalContext().getSelectedPathologyDetailsVo());

			
			selectedPathologyDetailsVo = form.getLocalContext().getSelectedPathologyDetailsVo();
			selectedPathologyDetailsVo.setStatus(HistopathologyReportStatus.REVISED);
			String[] errors = selectedPathologyDetailsVo.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}
			
			//if ( ! saveRevisedRecord(form.getLocalContext().getSelectedPathologyDetailsVo()))
			//	return;
		}
		else
			pdVo = form.getLocalContext().getSelectedPathologyDetailsVo();
		
		pdVo = populateDataFromScreen(pdVo);

		pdVo.setStatus(HistopathologyReportStatus.CURRENT);
		
		if (pdVo.getCareContext() == null)
			pdVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		String[] errors = pdVo.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{
			
			if (form.getLocalContext().getReviseRecordIsNotNull() && form.getLocalContext().getReviseRecord().booleanValue())
				pdVo = domain.savePathologyDetailsTwoArg(selectedPathologyDetailsVo,pdVo);
			else
				pdVo = domain.savePathologyDetails(pdVo);
			
			form.getLocalContext().setSelectedPathologyDetailsVo(pdVo);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		form.setMode(FormMode.VIEW);
		open();
	}

	private boolean saveRevisedRecord(PathologyDetailsVo selectedPathologyDetailsVo) 
	{
		selectedPathologyDetailsVo.setStatus(HistopathologyReportStatus.REVISED);
		try 
		{
			String[] errors = selectedPathologyDetailsVo.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return false;
			}
			
			domain.savePathologyDetails(selectedPathologyDetailsVo);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		return true;

	}

	@Override
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	private void updateInstance() 
	{
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setReviseRecord(false);
		
		if (form.getLocalContext().getLoadedTumourSite() == null && form.getLocalContext().getLoadedTumourGroup() == null)
	
		{
			loadTNMCombosAndHistology();
		}

		if (form.getLocalContext().getLoadedTumourSiteIsNotNull())
			fillCombosAndGridsFromTumourSite(form.getLocalContext().getLoadedTumourSite());
		else if (form.getLocalContext().getLoadedTumourGroupIsNotNull())
			fillCombosAndGridsFromTumourGroup(form.getLocalContext().getLoadedTumourGroup());
		
		populateScreenFromData(form.getLocalContext().getSelectedPathologyDetailsVo());
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	private void newInstance()
	{
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setReviseRecord(false);

		form.lyrDetails().showtabGenDetails();
		
		clearScreen();
		form.getLocalContext().setSelectedPathologyDetailsVo(new PathologyDetailsVo());
		//WDEV-18105
		form.getLocalContext().setSelectedPrimaryTumour(null);
		form.lyrDetails().tabGenDetails().customControlAuthoring().initializeComponent();
		fillMCategoryGrid(new PathologyDetailsVo());
		fillTCategoryGrid(new PathologyDetailsVo());
		fillHistologyGrid(new PathologyDetailsVo());
	
		engine.open(form.getForms().Oncology.PrimaryTumourSelectDialog);
	}

	protected void onGrdDetailsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		PathologyDetailsVo voPD = domain.getPathologyDetail(form.grdDetails().getSelectedRow().getValue());
		populateScreenFromData(voPD);
		form.getLocalContext().setSelectedPathologyDetailsVo(voPD);

		updateContextMenus(voPD);
		
		form.getLocalContext().setReviseRecord(false);

		if (voPD.getStatusIsNotNull() && voPD.getStatus().equals(HistopathologyReportStatus.CURRENT))
			form.btnUpdate().setEnabled(true);
		else
			form.btnUpdate().setEnabled(false);
		
		form.btnUpdate().setVisible(true);
		
		form.btnRevise().setVisible(true);
		form.btnRevise().setEnabled(voPD.getStatusIsNotNull() && voPD.getStatus().equals(HistopathologyReportStatus.CURRENT) ? true : false);
		
		form.lyrDetails().showtabGenDetails();
	}
	
	private void clearScreen() 
	{
		
		form.lyrDetails().tabGenDetails().cmbInvType().setValue(null);
		form.lyrDetails().tabGenDetails().dteSampleReciept().setValue(null);
		form.lyrDetails().tabGenDetails().dteInvResult().setValue(null);
		//form.lyrDetails().tabGenDetails().customRepPathologist().setValue(null);
		form.lyrDetails().tabGenDetails().customControlMosPathologist().setValue(null);
		form.lyrDetails().tabGenDetails().cmbRepOrganisation().setValue(null);
		form.lyrDetails().tabGenDetails().txtReportId().setValue(null);
		form.lyrDetails().tabGenDetails().cmbReportStatus().setValue(null);
		form.lyrDetails().tabGenDetails().cmbSpecimenNature().setValue(null);
		form.lyrDetails().tabGenDetails().cmbRequestingOrg().setValue(null);
		//form.lyrDetails().tabGenDetails().customRequestingCons().setValue(null);
		form.lyrDetails().tabGenDetails().customControlMosRequester().setValue(null);
		form.lyrDetails().tabGenDetails().customControlAuthoring().setValue(null);
		
		form.lyrDetails().tabTumDetails().txtDiagnosis().setValue(null);
		form.lyrDetails().tabTumDetails().txtLaterality().setValue(null);
		form.lyrDetails().tabTumDetails().intLesionSize().setValue(null);
		form.lyrDetails().tabTumDetails().cmbSynchronousTumour().setValue(null);
		form.lyrDetails().tabTumDetails().cmbGradeDifferentation().setValue(null);
		form.lyrDetails().tabTumDetails().cmbVascLymphInvasion().setValue(null);
		form.lyrDetails().tabTumDetails().cmbExcisionMarg().setValue(null);
		form.lyrDetails().tabTumDetails().intNodesExamined().setValue(null);
		form.lyrDetails().tabTumDetails().intNodesPositive().setValue(null);
		
		form.lyrDetails().tabTNM().cmbPathologicalT().setValue(null);
		form.lyrDetails().tabTNM().cmbPathologicalN().setValue(null);
		form.lyrDetails().tabTNM().cmbPathologicalM().setValue(null);
		form.lyrDetails().tabTNM().cmbPathologicalTNM().setValue(null);
	
		initialiseGrids(); 
		
		form.lyrDetails().tabSpecimenSpecific().customControlSpecimenQuestions().clearComponent();

	}

	private DynamicGridColumn getHistologyGridColumn(Integer identifier)
	{
		return form.lyrDetails().tabTumDetails().dyngrdHistology().getColumns().getByIdentifier(identifier);
	}

	private DynamicGridColumn getTCategoryGridColumn(Integer identifier)
	{
		return form.lyrDetails().tabTNM().dyngrdTCategory().getColumns().getByIdentifier(identifier);
	}

	private DynamicGridColumn getMCategoryGridColumn(Integer identifier)
	{
		return form.lyrDetails().tabTNM().dyngrdMCategory().getColumns().getByIdentifier(identifier);
	}

	private void populateScreenFromData(PathologyDetailsVo pdVo) 
	{
		if (pdVo == null)
			return;
		
		form.lyrDetails().tabGenDetails().cmbInvType().setValue(pdVo.getInvestigationType());
		form.lyrDetails().tabGenDetails().dteSampleReciept().setValue(pdVo.getSampleReceiptDate());
		form.lyrDetails().tabGenDetails().dteInvResult().setValue(pdVo.getInvestigationResultDate());
		//form.lyrDetails().tabGenDetails().customRepPathologist().setValue(pdVo.getReportingConsultantCode());
		form.lyrDetails().tabGenDetails().customControlMosPathologist().setValue(pdVo.getReportingConsultantCode());
		form.lyrDetails().tabGenDetails().cmbRepOrganisation().setValue(pdVo.getReportingOrganisation());
		if (form.lyrDetails().tabGenDetails().cmbRepOrganisation().getValue() == null && pdVo.getReportingOrganisation() != null)
		{
			form.lyrDetails().tabGenDetails().cmbRepOrganisation().newRow(pdVo.getReportingOrganisation(), pdVo.getReportingOrganisation().getName(), null, null);
			form.lyrDetails().tabGenDetails().cmbRepOrganisation().setValue(pdVo.getReportingOrganisation());
		}
		form.lyrDetails().tabGenDetails().txtReportId().setValue(pdVo.getServiceReportId());
		form.lyrDetails().tabGenDetails().cmbReportStatus().setValue(pdVo.getServiceReportStatus());
		form.lyrDetails().tabGenDetails().cmbSpecimenNature().setValue(pdVo.getSpecimenNature());
		form.lyrDetails().tabGenDetails().cmbRequestingOrg().setValue(pdVo.getOrgaCodeRequester());
		if (form.lyrDetails().tabGenDetails().cmbRequestingOrg().getValue() == null && pdVo.getOrgaCodeRequester() != null)
		{
			form.lyrDetails().tabGenDetails().cmbRequestingOrg().newRow(pdVo.getOrgaCodeRequester(), pdVo.getOrgaCodeRequester().getName(), null, null);
			form.lyrDetails().tabGenDetails().cmbRequestingOrg().setValue(pdVo.getOrgaCodeRequester());
		}

		//form.lyrDetails().tabGenDetails().customRequestingCons().setValue(pdVo.getCareProfCodeRequester());
		form.lyrDetails().tabGenDetails().customControlMosRequester().setValue(pdVo.getCareProfCodeRequester());
		form.lyrDetails().tabGenDetails().customControlAuthoring().setValue(pdVo.getAuthoringInformation());
		
		form.getLocalContext().setSelectedPrimaryTumour(pdVo.getAssociatiatedTumourDetails());
		loadTNMCombosAndHistology();
		fillHistologyGrid(pdVo);
		
		form.lyrDetails().tabTumDetails().txtDiagnosis().setValue(pdVo.getAssociatiatedTumourDetails() != null && pdVo.getAssociatiatedTumourDetails().getPatientDiagnosisIsNotNull() ? pdVo.getAssociatiatedTumourDetails().getPatientDiagnosis().getDiagnosisDescription() : "");
		form.lyrDetails().tabTumDetails().txtLaterality().setValue(pdVo.getAssociatiatedTumourDetails() != null && pdVo.getAssociatiatedTumourDetails().getTumourLateralityIsNotNull()? pdVo.getAssociatiatedTumourDetails().getTumourLaterality().toString() : "");
		form.lyrDetails().tabTumDetails().intLesionSize().setValue(pdVo.getInvasiveLesionSize());
		form.lyrDetails().tabTumDetails().cmbSynchronousTumour().setValue(pdVo.getSynchronousTumourIndicator());

		form.lyrDetails().tabTumDetails().cmbGradeDifferentation().setValue(pdVo.getGradeOfDifferentation());
		form.lyrDetails().tabTumDetails().cmbVascLymphInvasion().setValue(pdVo.getVascularLymphInvasion());
		form.lyrDetails().tabTumDetails().cmbExcisionMarg().setValue(pdVo.getExcisionMargin());
		form.lyrDetails().tabTumDetails().intNodesExamined().setValue(pdVo.getNumberNodesExamined());
		form.lyrDetails().tabTumDetails().intNodesPositive().setValue(pdVo.getNodesPositiveNumber());
		
		
		form.lyrDetails().tabTNM().cmbPathologicalT().setValue(pdVo.getPathologicalTVal());
		if (pdVo.getPathologicalTValIsNotNull()
			&& form.lyrDetails().tabTNM().cmbPathologicalT().getValue() == null)
		{
			form.lyrDetails().tabTNM().cmbPathologicalT().newRow(pdVo.getPathologicalTVal(), pdVo.getPathologicalTVal().getTNMValue());
			form.lyrDetails().tabTNM().cmbPathologicalT().setValue(pdVo.getPathologicalTVal());
		}

		form.lyrDetails().tabTNM().cmbPathologicalN().setValue(pdVo.getPathologicalNVal());
		if (pdVo.getPathologicalNValIsNotNull()
			&& form.lyrDetails().tabTNM().cmbPathologicalN().getValue() == null)
		{
			form.lyrDetails().tabTNM().cmbPathologicalN().newRow(pdVo.getPathologicalNVal(), pdVo.getPathologicalNVal().getTNMValue());
			form.lyrDetails().tabTNM().cmbPathologicalN().setValue(pdVo.getPathologicalNVal());
		}
		
		form.lyrDetails().tabTNM().cmbPathologicalM().setValue(pdVo.getPathologicalMVal());
		if (pdVo.getPathologicalMValIsNotNull()
			&& form.lyrDetails().tabTNM().cmbPathologicalM().getValue() == null)
		{
			form.lyrDetails().tabTNM().cmbPathologicalM().newRow(pdVo.getPathologicalMVal(), pdVo.getPathologicalMVal().getTNMValue());
			form.lyrDetails().tabTNM().cmbPathologicalM().setValue(pdVo.getPathologicalMVal());
		}

		if (pdVo.getPathologicalOverallIsNotNull())
		{
			form.lyrDetails().tabTNM().cmbPathologicalTNM().newRow(pdVo.getPathologicalOverall(), pdVo.getPathologicalOverall().getOverallStageDescription().toString());
			form.lyrDetails().tabTNM().cmbPathologicalTNM().setValue(pdVo.getPathologicalOverall());
		}

		fillTCategoryGrid(pdVo);
		fillMCategoryGrid(pdVo);
		
		if (pdVo.getAssociatedQuestionsIsNotNull())
		{
			form.lyrDetails().tabSpecimenSpecific().customControlSpecimenQuestions().clearComponent();
			form.lyrDetails().tabSpecimenSpecific().customControlSpecimenQuestions().setPatientAssessment(pdVo.getAssociatedQuestions(),false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		}

		
	}

	private void fillMCategoryGrid(PathologyDetailsVo pdVo) 
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			for (int i = 0 ; pdVo.getMCategoryExtended() != null && i < pdVo.getMCategoryExtended().size() ; i++)
			{
				boolean bFound = false;
				for (int j = 0 ; j < form.lyrDetails().tabTNM().dyngrdMCategory().getRows().size() ; j++)
				{
					TumourGroupSiteTNMValueVo tnmVo = (TumourGroupSiteTNMValueVo)form.lyrDetails().tabTNM().dyngrdMCategory().getRows().get(j).getValue();
					if (tnmVo.getID_TumourGroupSiteTNMValue().equals(pdVo.getMCategoryExtended().get(i).getID_TumourGroupSiteTNMValue()) )
					{
						DynamicGridRow row = form.lyrDetails().tabTNM().dyngrdMCategory().getRows().get(j);

						DynamicGridCell cellSetSel = row.getCells().newCell(getMCategoryGridColumn(COL_SELECT), DynamicCellType.BOOL);
						cellSetSel.setValue(Boolean.TRUE);
						
						bFound = true;
					}
				}
				
				if ( ! bFound)
				{
					TumourGroupSiteTNMValueVo tnmVo = (TumourGroupSiteTNMValueVo)pdVo.getMCategoryExtended().get(i);
					DynamicGridRow row = form.lyrDetails().tabTNM().dyngrdMCategory().getRows().newRow();
					row.setValue(tnmVo);
					DynamicGridCell cell = row.getCells().newCell(getMCategoryGridColumn(COL_HISTOLOGY), DynamicCellType.STRING);
					cell.setValue(tnmVo.getTNMValue());

					DynamicGridCell cellSel = row.getCells().newCell(getMCategoryGridColumn(COL_SELECT), DynamicCellType.BOOL);
					cellSel.setValue(Boolean.TRUE);
				}
			}
		}
		else
		{
			form.lyrDetails().tabTNM().dyngrdMCategory().getRows().clear();
			
			for (int i = 0 ; pdVo.getMCategoryExtended() != null && i < pdVo.getMCategoryExtended().size() ; i++)
			{
				TumourGroupSiteTNMValueVo tnmVo = (TumourGroupSiteTNMValueVo)pdVo.getMCategoryExtended().get(i);
			
				DynamicGridRow row = form.lyrDetails().tabTNM().dyngrdMCategory().getRows().newRow();
				row.setValue(tnmVo);
				DynamicGridCell cell = row.getCells().newCell(getMCategoryGridColumn(COL_HISTOLOGY), DynamicCellType.STRING);
				cell.setValue(tnmVo.getTNMValue());
			}
		}
	}
	
	private void formatMCategoryGrid() 
	{
		form.lyrDetails().tabTNM().dyngrdMCategory().clear();
		form.lyrDetails().tabTNM().dyngrdMCategory().setSelectable(true);
		
		DynamicGridColumn column = form.lyrDetails().tabTNM().dyngrdMCategory().getColumns().newColumn("M Category Extended");
		column.setIdentifier(COL_HISTOLOGY);
		column.setWidth(form.getMode().equals(FormMode.EDIT) ? COL_HIST_WIDTH : -1);
		column.setDynamicWidthSupported(false);

		if (form.getMode().equals(FormMode.EDIT))
		{
			column = form.lyrDetails().tabTNM().dyngrdMCategory().getColumns().newColumn("Select");
			column.setIdentifier(COL_SELECT);
			column.setWidth(-1);
			column.setDynamicWidthSupported(true);
		}
	}

	private void fillTCategoryGrid(PathologyDetailsVo pdVo) 
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			for (int i = 0 ; pdVo.getTCategoryExtended() != null && i < pdVo.getTCategoryExtended().size() ; i++)
			{
				boolean bFound = false;
				for (int j = 0 ; j < form.lyrDetails().tabTNM().dyngrdTCategory().getRows().size() ; j++)
				{
					TumourGroupSiteTNMValueVo tnmVo = (TumourGroupSiteTNMValueVo)form.lyrDetails().tabTNM().dyngrdTCategory().getRows().get(j).getValue();
					if (tnmVo.getID_TumourGroupSiteTNMValue().equals(pdVo.getTCategoryExtended().get(i).getID_TumourGroupSiteTNMValue()) )
					{
						DynamicGridRow row = form.lyrDetails().tabTNM().dyngrdTCategory().getRows().get(j);

						DynamicGridCell cellSel = row.getCells().newCell(getTCategoryGridColumn(COL_SELECT), DynamicCellType.BOOL);
						cellSel.setValue(Boolean.TRUE);

						bFound = true;
					}
				}
				
				if ( ! bFound)
				{
					TumourGroupSiteTNMValueVo tnmVo = (TumourGroupSiteTNMValueVo)pdVo.getTCategoryExtended().get(i);
					
					DynamicGridRow row = form.lyrDetails().tabTNM().dyngrdTCategory().getRows().newRow();
					row.setValue(tnmVo);
					DynamicGridCell cell = row.getCells().newCell(getTCategoryGridColumn(COL_HISTOLOGY), DynamicCellType.STRING);
					cell.setValue(tnmVo.getTNMValue());
				
					DynamicGridCell cellSel = row.getCells().newCell(getTCategoryGridColumn(COL_SELECT), DynamicCellType.BOOL);
					cellSel.setValue(Boolean.TRUE);
				}
			}
		}
		else
		{
			form.lyrDetails().tabTNM().dyngrdTCategory().getRows().clear();
			
			for (int i = 0 ; pdVo.getTCategoryExtended() != null && i < pdVo.getTCategoryExtended().size() ; i++)
			{
				TumourGroupSiteTNMValueVo tnmVo = (TumourGroupSiteTNMValueVo)pdVo.getTCategoryExtended().get(i);
			
				DynamicGridRow row = form.lyrDetails().tabTNM().dyngrdTCategory().getRows().newRow();
				row.setValue(tnmVo);
				DynamicGridCell cell = row.getCells().newCell(getTCategoryGridColumn(COL_HISTOLOGY), DynamicCellType.STRING);
				cell.setValue(tnmVo.getTNMValue());
			}
		}
	}
	
	private void formatTCategoryGrid() 
	{
		form.lyrDetails().tabTNM().dyngrdTCategory().clear();
		form.lyrDetails().tabTNM().dyngrdTCategory().setSelectable(true);
		
		DynamicGridColumn column = form.lyrDetails().tabTNM().dyngrdTCategory().getColumns().newColumn("T Category Extended");
		column.setIdentifier(COL_HISTOLOGY);
		column.setWidth(form.getMode().equals(FormMode.EDIT) ? COL_HIST_WIDTH : -1);
		column.setDynamicWidthSupported(false);

		if (form.getMode().equals(FormMode.EDIT))
		{
			column = form.lyrDetails().tabTNM().dyngrdTCategory().getColumns().newColumn("Select");
			column.setIdentifier(COL_SELECT);
			column.setWidth(-1);
			column.setDynamicWidthSupported(true);
		}
	}
	private void fillHistologyGrid(PathologyDetailsVo pdVo) 
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			for (int i = 0 ; pdVo.getHistology() != null && i < pdVo.getHistology().size() ; i++)
			{
				for (int j = 0 ; j < form.lyrDetails().tabTumDetails().dyngrdHistology().getRows().size() ; j++)
				{
					TumourHistologyLiteVo thVo = (TumourHistologyLiteVo)form.lyrDetails().tabTumDetails().dyngrdHistology().getRows().get(j).getValue();
					if (thVo.getID_TumourHistology().equals(pdVo.getHistology().get(i).getID_TumourHistology()) )
					{
						DynamicGridRow row = form.lyrDetails().tabTumDetails().dyngrdHistology().getRows().get(j);

						DynamicGridCell cellSel = row.getCells().newCell(getHistologyGridColumn(COL_SELECT), DynamicCellType.BOOL);
						cellSel.setValue(Boolean.TRUE);
					}
				}
			}
		}
		else
		{
			//just add all the data in the pdVo.getHistology() collection
			form.lyrDetails().tabTumDetails().dyngrdHistology().getRows().clear();
			
			for (int i = 0 ; pdVo.getHistology() != null && i < pdVo.getHistology().size() ; i++)
			{
				TumourHistologyLiteVo thVo = (TumourHistologyLiteVo)pdVo.getHistology().get(i);
			
				DynamicGridRow row = form.lyrDetails().tabTumDetails().dyngrdHistology().getRows().newRow();
				row.setValue(thVo);
				DynamicGridCell cell = row.getCells().newCell(getHistologyGridColumn(COL_HISTOLOGY), DynamicCellType.STRING);
				cell.setValue(thVo.getHistologyDescription());
			}
		}
	}

	private void formatHistologyGrid()
	{
		form.lyrDetails().tabTumDetails().dyngrdHistology().clear();
		form.lyrDetails().tabTumDetails().dyngrdHistology().setSelectable(true);
		
		DynamicGridColumn column = form.lyrDetails().tabTumDetails().dyngrdHistology().getColumns().newColumn("Histology");
		column.setIdentifier(COL_HISTOLOGY);
		column.setWidth(form.getMode().equals(FormMode.EDIT) ? COL_HIST_WIDTH : -1);
		column.setDynamicWidthSupported(false);

		if (form.getMode().equals(FormMode.EDIT))
		{
			column = form.lyrDetails().tabTumDetails().dyngrdHistology().getColumns().newColumn("Select");
			column.setIdentifier(COL_SELECT);
			column.setWidth(-1);
			column.setDynamicWidthSupported(true);
		}
	}

	private PathologyDetailsVo populateDataFromScreen(PathologyDetailsVo pdVo) 
	{
		if (pdVo == null)
			pdVo = new PathologyDetailsVo();
		
		pdVo.setInvestigationType(form.lyrDetails().tabGenDetails().cmbInvType().getValue());
		pdVo.setSampleReceiptDate(form.lyrDetails().tabGenDetails().dteSampleReciept().getValue());
		pdVo.setInvestigationResultDate(form.lyrDetails().tabGenDetails().dteInvResult().getValue());
		//pdVo.setReportingConsultantCode(form.lyrDetails().tabGenDetails().customRepPathologist().getValue());
		pdVo.setReportingConsultantCode(form.lyrDetails().tabGenDetails().customControlMosPathologist().getValue());
		pdVo.setReportingOrganisation(form.lyrDetails().tabGenDetails().cmbRepOrganisation().getValue());
		pdVo.setServiceReportId(form.lyrDetails().tabGenDetails().txtReportId().getValue());
		pdVo.setServiceReportStatus(form.lyrDetails().tabGenDetails().cmbReportStatus().getValue());
		pdVo.setSpecimenNature(form.lyrDetails().tabGenDetails().cmbSpecimenNature().getValue());
		pdVo.setOrgaCodeRequester(form.lyrDetails().tabGenDetails().cmbRequestingOrg().getValue());
		//pdVo.setCareProfCodeRequester(form.lyrDetails().tabGenDetails().customRequestingCons().getValue());
		pdVo.setCareProfCodeRequester(form.lyrDetails().tabGenDetails().customControlMosRequester().getValue());

		pdVo.setAssociatiatedTumourDetails(form.getLocalContext().getSelectedPrimaryTumour());
		pdVo.setInvasiveLesionSize(form.lyrDetails().tabTumDetails().intLesionSize().getValue());
		pdVo.setSynchronousTumourIndicator(form.lyrDetails().tabTumDetails().cmbSynchronousTumour().getValue());

		TumourHistologyLiteVoCollection voHistColl = new TumourHistologyLiteVoCollection(); 
		for (int i = 0 ; i < form.lyrDetails().tabTumDetails().dyngrdHistology().getRows().size() ; i++)
		{
			DynamicGridRow row = form.lyrDetails().tabTumDetails().dyngrdHistology().getRows().get(i);
			DynamicGridCell cell = row.getCells().get(getHistologyGridColumn(COL_SELECT));
			if (cell.getValue().equals(Boolean.TRUE))
				voHistColl.add((TumourHistologyLiteVo)row.getValue());
		}
		pdVo.setHistology(voHistColl);
		
		pdVo.setGradeOfDifferentation(form.lyrDetails().tabTumDetails().cmbGradeDifferentation().getValue());
		pdVo.setVascularLymphInvasion(form.lyrDetails().tabTumDetails().cmbVascLymphInvasion().getValue());
		pdVo.setExcisionMargin(form.lyrDetails().tabTumDetails().cmbExcisionMarg().getValue());
		pdVo.setNumberNodesExamined(form.lyrDetails().tabTumDetails().intNodesExamined().getValue());
		pdVo.setNodesPositiveNumber(form.lyrDetails().tabTumDetails().intNodesPositive().getValue());

		TumourGroupSiteTNMValueVo tnmTVo = form.lyrDetails().tabTNM().cmbPathologicalT().getValue();
		if (tnmTVo != null)
			tnmTVo.setClinicalPathological(TNMClinicalpathological.PATHOLOGICALONLY);
		pdVo.setPathologicalTVal(tnmTVo);

		TumourGroupSiteTNMValueVo tnmNVo = form.lyrDetails().tabTNM().cmbPathologicalN().getValue();
		if (tnmNVo != null)
			tnmNVo.setClinicalPathological(TNMClinicalpathological.PATHOLOGICALONLY);
		pdVo.setPathologicalNVal(tnmNVo);

		TumourGroupSiteTNMValueVo tnmMVo = form.lyrDetails().tabTNM().cmbPathologicalM().getValue();
		if (tnmMVo != null)
			tnmMVo.setClinicalPathological(TNMClinicalpathological.PATHOLOGICALONLY);
		pdVo.setPathologicalMVal(tnmMVo);

		pdVo.setPathologicalOverall(form.lyrDetails().tabTNM().cmbPathologicalTNM().getValue());

		TumourGroupSiteTNMValueVoCollection voTCatColl = new TumourGroupSiteTNMValueVoCollection(); 
		for (int i = 0 ; i < form.lyrDetails().tabTNM().dyngrdTCategory().getRows().size() ; i++)
		{
			DynamicGridRow row = form.lyrDetails().tabTNM().dyngrdTCategory().getRows().get(i);
			DynamicGridCell cell = row.getCells().get(getTCategoryGridColumn(COL_SELECT));
			if (cell.getValue().equals(Boolean.TRUE))
				voTCatColl.add((TumourGroupSiteTNMValueVo)row.getValue());
		}
		pdVo.setTCategoryExtended(voTCatColl);
		
		TumourGroupSiteTNMValueVoCollection voMCatColl = new TumourGroupSiteTNMValueVoCollection(); 
		for (int j = 0 ; j < form.lyrDetails().tabTNM().dyngrdMCategory().getRows().size() ; j++)
		{
			DynamicGridRow row = form.lyrDetails().tabTNM().dyngrdMCategory().getRows().get(j);
			DynamicGridCell cell = row.getCells().get(getMCategoryGridColumn(COL_SELECT));
			if (cell.getValue().equals(Boolean.TRUE))
				voMCatColl.add((TumourGroupSiteTNMValueVo)row.getValue());
		}
		pdVo.setMCategoryExtended(voMCatColl);
		
		pdVo.setAssociatedQuestions(form.lyrDetails().tabSpecimenSpecific().customControlSpecimenQuestions().getPatientAssessment());
		pdVo.setAuthoringInformation(form.lyrDetails().tabGenDetails().customControlAuthoring().getValue());
		
		return pdVo;
	}
	
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		//WDEV-5193
		initialize();
		
		initialiseGrids();
		
		loadOrganisations();
		open();
		
		updateContextMenus(null);
	}

	private void initialize() 
	{
		form.lyrDetails().tabGenDetails().customControlMosPathologist().initialize(MosType.HCP);
		form.lyrDetails().tabGenDetails().customControlMosRequester().initialize(MosType.HCP);
		
	}

	private void loadOrganisations() 
	{
		
		form.lyrDetails().tabGenDetails().cmbRepOrganisation().clear();
		form.lyrDetails().tabGenDetails().cmbRequestingOrg().clear();
		
		OrgLiteVoCollection voColl = null;
		if (form.getLocalContext().getLoadedOrganisationsIsNotNull())
			voColl = form.getLocalContext().getLoadedOrganisations();
		else
		{
			voColl = domain.listOrganisationsLite(new OrgShortVo());
			form.getLocalContext().setLoadedOrganisations(voColl);
		}
	
		for (int i = 0 ; voColl != null && i < voColl.size() ; i++)
		{
			if (voColl.get(i).getIsActiveIsNotNull() && voColl.get(i).getIsActive().booleanValue())
			{
				form.lyrDetails().tabGenDetails().cmbRepOrganisation().newRow(voColl.get(i), voColl.get(i).getName(), null, null);
				form.lyrDetails().tabGenDetails().cmbRequestingOrg().newRow(voColl.get(i), voColl.get(i).getName(), null, null);
			}
		}
	}
	
	private void initialiseGrids() 
	{
		formatHistologyGrid();
		formatTCategoryGrid();
		formatMCategoryGrid();
	}

	private void open() 
	{
		clearScreen();
		form.grdDetails().getRows().clear();
		
		PathologyDetailsListVoCollection voColl = domain.listPathologyDetails(form.getGlobalContext().Core.getCurrentCareContext());
		
		voColl.sort();
		for (int i = 0; i < voColl.size(); i++)
		{			
			if (voColl.get(i).getPreviousVersion()==null)
			{
				PathologyDetailsListVoCollection voCollForGrid = addSubsetToListForGrid(voColl.get(i), voColl);
				//add Parent to grid
				grdDetailsRow parentRow = addPathologyRow(null, voCollForGrid.get(voCollForGrid.size()-1));
				//add children to grid
				for (int j = voCollForGrid.size()-2; j >= 0; j--)
				{
					addPathologyRow(parentRow, voCollForGrid.get(j));
				}
			}
		}
		
		updateContextMenus(null);
	}
	
	private PathologyDetailsListVoCollection addSubsetToListForGrid(PathologyDetailsListVo voFirstChild, PathologyDetailsListVoCollection voColl) {
		
		PathologyDetailsListVoCollection voCollForGrid = new PathologyDetailsListVoCollection();
		voCollForGrid.add(voFirstChild);
		
		Integer idPathologyDetails = voFirstChild.getID_PathologyDetails();
		boolean parentFound = true;
		while(parentFound){
			parentFound = false;
			for (int i = 0; i < voColl.size(); i++)
			{			
				if(voColl.get(i).getPreviousVersionIsNotNull() && idPathologyDetails.equals(voColl.get(i).getPreviousVersion().getID_PathologyDetails())){
					voCollForGrid.add(voColl.get(i));
					idPathologyDetails = voColl.get(i).getID_PathologyDetails();
					parentFound = true;
					break;
				}
			}		
		}
		
		return voCollForGrid;
	}

	private grdDetailsRow addPathologyRow(grdDetailsRow row, PathologyDetailsListVo pdVo) 
	{
		grdDetailsRow rowChild = null;
		
		if (row == null)
			rowChild = form.grdDetails().getRows().newRow();
		else
			rowChild = row.getRows().newRow();
		
		rowChild.setColInvestigationType(pdVo.getInvestigationTypeIsNotNull() ? pdVo.getInvestigationType().toString() :"");
		rowChild.setColRecieptDate(pdVo.getSampleReceiptDateIsNotNull() ? pdVo.getSampleReceiptDate().toString() : "");
		rowChild.setColResultDate(pdVo.getInvestigationResultDateIsNotNull() ? pdVo.getInvestigationResultDate().toString() : "");
		rowChild.setColPathologist(pdVo.getReportingConsultantCodeIsNotNull() ? pdVo.getReportingConsultantCode().toString() : "");
		rowChild.setColReportingOrganisation(pdVo.getReportingOrganisationIsNotNull() ? pdVo.getReportingOrganisation().getName() : "");
		rowChild.setValue(pdVo);
		
		return rowChild;
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (form.getMode().equals(FormMode.EDIT) && formName.equals(form.getForms().Assessment.AssessmentFavourites) && result.equals(DialogResult.OK))
		{
			if ( form.getGlobalContext().Core.getSelectedUserAssessmentVoIsNotNull())
			{
				form.getLocalContext().setSpecimenQuestionsAssessment(form.getGlobalContext().Core.getSelectedUserAssessmentVo());

				PatientAssessmentVo paVoPre = populatePatientAssessmentFromUserAssessmentShort(form.getLocalContext().getSpecimenQuestionsAssessment());
				form.lyrDetails().tabSpecimenSpecific().customControlSpecimenQuestions().setPatientAssessment(paVoPre,false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
			}
			else
				form.getLocalContext().setSpecimenQuestionsAssessment(null);
		}
		else if (formName.equals(form.getForms().Oncology.PrimaryTumourSelectDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				if (form.getGlobalContext().Oncology.getSelectedPrimaryTumourDetailIsNotNull())
				{
					form.getLocalContext().setSelectedPrimaryTumour(form.getGlobalContext().Oncology.getSelectedPrimaryTumourDetail());
					
					form.lyrDetails().tabTumDetails().txtDiagnosis().setValue((form.getGlobalContext().Oncology.getSelectedPrimaryTumourDetail().getPatientDiagnosis() != null && form.getGlobalContext().Oncology.getSelectedPrimaryTumourDetail().getPatientDiagnosis().getDiagnosisDescription() != null) ? form.getGlobalContext().Oncology.getSelectedPrimaryTumourDetail().getPatientDiagnosis().getDiagnosisDescription() : null);
					form.lyrDetails().tabTumDetails().txtLaterality().setValue(form.getGlobalContext().Oncology.getSelectedPrimaryTumourDetail().getTumourLateralityIsNotNull() ? form.getGlobalContext().Oncology.getSelectedPrimaryTumourDetail().getTumourLaterality().toString() : "");
					
					loadTNMCombosAndHistology();
				}
				
			}
			else
			{
				//WDEV-16966;WDEV-18105
				if (form.getLocalContext().getSelectedPathologyDetailsVo().getID_PathologyDetails() != null || form.getLocalContext().getSelectedPrimaryTumour() != null)
					return;
				form.setMode(FormMode.VIEW);
				open();
							
			}
		}
	}
	
	private void loadTNMCombosAndHistology() 
	{
		if (form.getLocalContext().getSelectedPrimaryTumourIsNotNull())
		{
			form.getLocalContext().setLoadedTumourGroup(null);
			form.getLocalContext().setLoadedTumourSite(null);
			
			if (form.getLocalContext().getSelectedPrimaryTumour().getTumourSiteIsNotNull())
			{
				form.getLocalContext().setLoadedTumourSite(domain.getSite(form.getLocalContext().getSelectedPrimaryTumour().getTumourSite()));
				if (form.getLocalContext().getLoadedTumourSite() != null 
					&& form.getLocalContext().getLoadedTumourSite().getHasSiteSpecificTNMIsNotNull() 
					&& form.getLocalContext().getLoadedTumourSite().getHasSiteSpecificTNM())
					fillCombosAndGridsFromTumourSite(form.getLocalContext().getLoadedTumourSite());
				else
					loadTNMFromTumourGroup();
			}
			else if (form.getLocalContext().getSelectedPrimaryTumour().getTumourGroupIsNotNull())
				loadTNMFromTumourGroup();
		}
	}
	
	private void loadTNMFromTumourGroup() 
	{
		form.getLocalContext().setLoadedTumourGroup(domain.getGroup(form.getLocalContext().getSelectedPrimaryTumour().getTumourGroup()));
		fillCombosAndGridsFromTumourGroup(form.getLocalContext().getLoadedTumourGroup());
	}

	private void fillCombosAndGridsFromTumourGroup(TumourGroupVo voTumourGroup) 
	{
		form.lyrDetails().tabTNM().cmbPathologicalT().clear();
		form.lyrDetails().tabTNM().cmbPathologicalN().clear();
		form.lyrDetails().tabTNM().cmbPathologicalM().clear();
	
		form.lyrDetails().tabTumDetails().dyngrdHistology().getRows().clear();
		form.lyrDetails().tabTNM().dyngrdTCategory().getRows().clear();
		form.lyrDetails().tabTNM().dyngrdMCategory().getRows().clear();
		
		for(int i = 0 ; voTumourGroup.getTNMValuesIsNotNull() && i < voTumourGroup.getTNMValues().size() ; i++)
		{
			if (voTumourGroup.getTNMValues().get(i).getClinicalPathologicalIsNotNull() 
				&& (voTumourGroup.getTNMValues().get(i).getClinicalPathological().equals(TNMClinicalpathological.PATHOLOGICALONLY)
			  	 || voTumourGroup.getTNMValues().get(i).getClinicalPathological().equals(TNMClinicalpathological.BOTH)) )
			{
				if (voTumourGroup.getTNMValues().get(i).getTNMType().equals(TNMType.T)
					&& voTumourGroup.getTNMValues().get(i).getIsActiveIsNotNull()
					&& voTumourGroup.getTNMValues().get(i).getIsActive())
					addTRows(voTumourGroup.getTNMValues().get(i));
				
				if (voTumourGroup.getTNMValues().get(i).getTNMType().equals(TNMType.N)
					&& voTumourGroup.getTNMValues().get(i).getIsActiveIsNotNull()
					&& voTumourGroup.getTNMValues().get(i).getIsActive())
					form.lyrDetails().tabTNM().cmbPathologicalN().newRow(voTumourGroup.getTNMValues().get(i), voTumourGroup.getTNMValues().get(i).getTNMValue());
				
				if (voTumourGroup.getTNMValues().get(i).getTNMType().equals(TNMType.M)
					&& voTumourGroup.getTNMValues().get(i).getIsActiveIsNotNull()
					&& voTumourGroup.getTNMValues().get(i).getIsActive())
					addMRows(voTumourGroup.getTNMValues().get(i));
			}
		}
		
		for(int j = 0 ; voTumourGroup.getHistologiesIsNotNull() && j < voTumourGroup.getHistologies().size() ; j++)
		{
			DynamicGridRow histRow = form.lyrDetails().tabTumDetails().dyngrdHistology().getRows().newRow();
			DynamicGridCell cellHist = histRow.getCells().newCell(getHistologyGridColumn(COL_HISTOLOGY), DynamicCellType.STRING);
			// WDEV-11684
			cellHist.setValue(voTumourGroup.getHistologies().get(j).getAssociatedHistology().getHistologyDescription());
			// WDEV-16966 
			cellHist.setReadOnly(Boolean.TRUE);
			if (form.getMode().equals(FormMode.EDIT))
				histRow.getCells().newCell(getHistologyGridColumn(COL_SELECT), DynamicCellType.BOOL);
			histRow.setValue(voTumourGroup.getHistologies().get(j).getAssociatedHistology());	//WDEV-13126
		}
		form.lyrDetails().tabTumDetails().cmbGradeDifferentation().clear();
		for(int k = 0 ; voTumourGroup.getHistopathologicGradesIsNotNull() && k < voTumourGroup.getHistopathologicGrades().size() ; k++)
			form.lyrDetails().tabTumDetails().cmbGradeDifferentation().newRow(voTumourGroup.getHistopathologicGrades().get(k), voTumourGroup.getHistopathologicGrades().get(k).getTumourDifferentation().getTumourDifferentation());
	}
	
	private void addMRows(TumourGroupSiteTNMValueVo voTNMValue)
	{
		form.lyrDetails().tabTNM().cmbPathologicalM().newRow(voTNMValue, voTNMValue.getTNMValue());
		DynamicGridRow mRow = form.lyrDetails().tabTNM().dyngrdMCategory().getRows().newRow();
		DynamicGridCell cellHist = mRow.getCells().newCell(getMCategoryGridColumn(COL_HISTOLOGY), DynamicCellType.STRING);
		cellHist.setValue(voTNMValue.getTNMValue());
		//WDEV-16966
		cellHist.setReadOnly(Boolean.TRUE);
		if (form.getMode().equals(FormMode.EDIT))
			mRow.getCells().newCell(getMCategoryGridColumn(COL_SELECT), DynamicCellType.BOOL);
		mRow.setValue(voTNMValue);
	}
	
	private void addTRows(TumourGroupSiteTNMValueVo voTNMValue) 
	{
		form.lyrDetails().tabTNM().cmbPathologicalT().newRow(voTNMValue, voTNMValue.getTNMValue());
		
		DynamicGridRow tRow = form.lyrDetails().tabTNM().dyngrdTCategory().getRows().newRow();
		DynamicGridCell cellHist = tRow.getCells().newCell(getTCategoryGridColumn(COL_HISTOLOGY), DynamicCellType.STRING);
		cellHist.setValue(voTNMValue.getTNMValue());
		//WDEV-16966
		cellHist.setReadOnly(Boolean.TRUE);
		if (form.getMode().equals(FormMode.EDIT))
			tRow.getCells().newCell(getTCategoryGridColumn(COL_SELECT), DynamicCellType.BOOL);
		tRow.setValue(voTNMValue);
	}

	private void fillCombosAndGridsFromTumourSite(TumourSiteVo voTumourSite) 
	{
		form.lyrDetails().tabTNM().cmbPathologicalT().clear();
		form.lyrDetails().tabTNM().cmbPathologicalN().clear();
		form.lyrDetails().tabTNM().cmbPathologicalM().clear();
		
		form.lyrDetails().tabTumDetails().dyngrdHistology().getRows().clear();
		form.lyrDetails().tabTNM().dyngrdTCategory().getRows().clear();
		form.lyrDetails().tabTNM().dyngrdMCategory().getRows().clear();
		
		for(int i = 0 ; i < voTumourSite.getTNMValues().size() ; i++)
		{
			if (voTumourSite.getTNMValues().get(i).getTNMType().equals(TNMType.T)
				&& voTumourSite.getTNMValues().get(i).getIsActiveIsNotNull()
				&& voTumourSite.getTNMValues().get(i).getIsActive())
				addTRows(voTumourSite.getTNMValues().get(i));

			if (voTumourSite.getTNMValues().get(i).getTNMType().equals(TNMType.N)
				&& voTumourSite.getTNMValues().get(i).getIsActiveIsNotNull()
				&& voTumourSite.getTNMValues().get(i).getIsActive())
				form.lyrDetails().tabTNM().cmbPathologicalN().newRow(voTumourSite.getTNMValues().get(i), voTumourSite.getTNMValues().get(i).getTNMDescription());

			if (voTumourSite.getTNMValues().get(i).getTNMType().equals(TNMType.M)
				&& voTumourSite.getTNMValues().get(i).getIsActiveIsNotNull()
				&& voTumourSite.getTNMValues().get(i).getIsActive())
				addMRows(voTumourSite.getTNMValues().get(i));
		}
		
		for(int j = 0 ; voTumourSite.getHistologiesIsNotNull() && j < voTumourSite.getHistologies().size() ; j++)
		{
			DynamicGridRow histRow = form.lyrDetails().tabTumDetails().dyngrdHistology().getRows().newRow();
			DynamicGridCell cellHist = histRow.getCells().newCell(getHistologyGridColumn(COL_HISTOLOGY), DynamicCellType.STRING);
			// WDEV-11684
			cellHist.setValue(voTumourSite.getHistologies().get(j).getAssociatedHistology().getHistologyDescription());
			//WDEV-16966
			cellHist.setReadOnly(Boolean.TRUE);
			if (form.getMode().equals(FormMode.EDIT))
				histRow.getCells().newCell(getHistologyGridColumn(COL_SELECT), DynamicCellType.BOOL);
			histRow.setValue(voTumourSite.getHistologies().get(j).getAssociatedHistology());	//WDEV-13126
		}
	}

	private PatientAssessmentVo populatePatientAssessmentFromUserAssessmentShort(UserAssessmentVo voUA) 
	{
		if(voUA == null)
			throw new CodingRuntimeException("No UserAssessmentVo provided");
		
		PatientAssessmentVo voPatientAssessment = new PatientAssessmentVo();
		voPatientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());	//WDEV-13127
		voPatientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());	//WDEV-13127
		voPatientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voPatientAssessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voPatientAssessment.setStatus(PatientAssessmentStatusReason.NOTCOMMENCED);
		voPatientAssessment.setAuthoringInformation(form.lyrDetails().tabGenDetails().customControlAuthoring().getValue());
			
		//Patient Assessment Data
		PatientAssessmentDataVo voPatientAssessmentData = new PatientAssessmentDataVo();
		voPatientAssessmentData.setGraphic(null);
		voPatientAssessmentData.setUserAssessment(voUA);
		voPatientAssessment.setAssessmentData(voPatientAssessmentData);
			
		return voPatientAssessment;
	}

	@Override
	protected void onCmbPathologicalMValueChanged() throws PresentationLogicException
	{
		getOverallTNM();
	}
	
	private void getOverallTNM() 
	{
		if (form.getLocalContext().getSelectedPrimaryTumourIsNotNull()
			&& form.getLocalContext().getSelectedPrimaryTumour().getTumourGroupIsNotNull()
			&& form.lyrDetails().tabTNM().cmbPathologicalT().getValue() != null
			&& form.lyrDetails().tabTNM().cmbPathologicalN().getValue() != null
			&& form.lyrDetails().tabTNM().cmbPathologicalM().getValue()  != null)
		{
			TumourGroupSiteOverallStagingVo voOverall = domain.getTumourOverAllStaging(form.getLocalContext().getSelectedPrimaryTumour().getTumourGroup(), form.getLocalContext().getSelectedPrimaryTumour().getTumourSite(), form.lyrDetails().tabTNM().cmbPathologicalT().getValue(), form.lyrDetails().tabTNM().cmbPathologicalN().getValue(), form.lyrDetails().tabTNM().cmbPathologicalM().getValue());
			if (voOverall != null)
			{
				form.lyrDetails().tabTNM().cmbPathologicalTNM().newRow(voOverall, voOverall.getOverallStageDescription().toString());
				form.lyrDetails().tabTNM().cmbPathologicalTNM().setValue(voOverall);
			}
		}
	}
	@Override
	protected void onCmbPathologicalNValueChanged() throws PresentationLogicException 
	{
		getOverallTNM();
	}
	
	@Override
	protected void onCmbPathologicalTValueChanged() throws PresentationLogicException 
	{
		getOverallTNM();
	}
	
	@Override
	protected void onBtnFavouritesClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setGraphicAssessmentsSelectable(false);
		form.getGlobalContext().Core.setStructuredAssessmentsSelectable(true);
		
		engine.open(form.getForms().Assessment.AssessmentFavourites);
	}
	
	@Override
	protected void onFormModeChanged() 
	{
		initialiseGrids();
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.btnUpdate().setEnabled(false);
			form.btnRevise().setEnabled(false);
			
			form.lyrDetails().tabSpecimenSpecific().customControlSpecimenQuestions().setReadOnly(Boolean.TRUE);
	
		}
		else
			form.lyrDetails().tabSpecimenSpecific().customControlSpecimenQuestions().setReadOnly(Boolean.FALSE);
	}
	
	@Override
	protected void onImbDiagnosisSelectClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Oncology.PrimaryTumourSelectDialog);
		
	}

	private void updateContextMenus(PathologyDetailsVo voPD) 
	{
		form.getContextMenus().Oncology.hideAllHistopatholgyReportMenuItems();
		if(form.getMode().equals(FormMode.VIEW))
		{
			boolean bCurrent = false;

			if (voPD != null && voPD.getStatusIsNotNull() && voPD.getStatus().equals(HistopathologyReportStatus.CURRENT))
				bCurrent = true;
		
			form.getContextMenus().Oncology.getHistopatholgyReportADDItem().setVisible(true);
			form.getContextMenus().Oncology.getHistopatholgyReportUPDATEItem().setVisible(true);
			form.getContextMenus().Oncology.getHistopatholgyReportUPDATEItem().setEnabled(bCurrent);
			form.getContextMenus().Oncology.getHistopatholgyReportREVISEItem().setVisible(true);
			form.getContextMenus().Oncology.getHistopatholgyReportREVISEItem().setEnabled(bCurrent);
		}
	}

@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		if (sender.equals(form.grdDetails()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.OncologyNamespace.HistopatholgyReport.ADD :
					newInstance();
				break;			
				case GenForm.ContextMenus.OncologyNamespace.HistopatholgyReport.REVISE :
					reviseInstance();
				break;
				case GenForm.ContextMenus.OncologyNamespace.HistopatholgyReport.UPDATE :
					updateInstance();
				break;
				default :
				break;
			}
		}
	}
}
