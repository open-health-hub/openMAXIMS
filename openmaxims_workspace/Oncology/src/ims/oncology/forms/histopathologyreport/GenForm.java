//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.histopathologyreport;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabGenDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbRequestingOrgComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.OrgLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.OrgLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.OrgLiteVo getValue()
				{
					return (ims.core.vo.OrgLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.OrgLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSpecimenNatureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.SpecimenNature value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.SpecimenNature value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.SpecimenNature value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.SpecimenNature value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.SpecimenNature value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.SpecimenNature getValue()
				{
					return (ims.oncology.vo.lookups.SpecimenNature)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.SpecimenNature value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbReportStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.ServiceReportStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.ServiceReportStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.ServiceReportStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.ServiceReportStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.ServiceReportStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.ServiceReportStatus getValue()
				{
					return (ims.oncology.vo.lookups.ServiceReportStatus)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.ServiceReportStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbRepOrganisationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.OrgLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.OrgLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.OrgLiteVo getValue()
				{
					return (ims.core.vo.OrgLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.OrgLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbInvTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.InvestigationType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.InvestigationType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.InvestigationType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.InvestigationType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.InvestigationType value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.InvestigationType getValue()
				{
					return (ims.oncology.vo.lookups.InvestigationType)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.InvestigationType value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 560, 182, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_customControlMosRequesterForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1014, skipContextValidation);
				//ims.framework.Control m_customControlMosRequesterControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(560), new Integer(182), new Integer(248), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1014), m_customControlMosRequesterForm, instance1 } );
				ims.framework.Control m_customControlMosRequesterControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1014), m_customControlMosRequesterForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlMosRequesterControl);
				Menu[] menus1 = m_customControlMosRequesterForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 192, 142, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customControlMosPathologistForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance2, startTabIndex.intValue() + 8, skipContextValidation);
				//ims.framework.Control m_customControlMosPathologistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(192), new Integer(142), new Integer(208), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 8), m_customControlMosPathologistForm, instance2 } );
				ims.framework.Control m_customControlMosPathologistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 8), m_customControlMosPathologistForm, instance2, Boolean.FALSE } );
				super.addControl(m_customControlMosPathologistControl);
				Menu[] menus2 = m_customControlMosPathologistForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
				ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 400, 224, 408, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_customControlAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance3, startTabIndex.intValue() + 2015, skipContextValidation);
				//ims.framework.Control m_customControlAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(400), new Integer(224), new Integer(408), new Integer(56), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2015), m_customControlAuthoringForm, instance3 } );
				ims.framework.Control m_customControlAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2015), m_customControlAuthoringForm, instance3, Boolean.FALSE } );
				super.addControl(m_customControlAuthoringControl);
				Menu[] menus3 = m_customControlAuthoringForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus3.length; x++)
				{
					form.registerMenu(menus3[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 408, 184, 138, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requesting Consultant:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 408, 144, 149, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requesting Organisation:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 408, 104, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specimen Nature:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 408, 64, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service Report Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 408, 24, 149, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service Report Identifier:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 184, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reporting Organisation:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 144, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reporting Pathologist:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 154, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Investigation Result Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Sample Receipt Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 176, 14, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pathology Investigation Type:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 560, 24, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 192, 104, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 192, 64, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 560, 144, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbRequestingOrgTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbRequestingOrgTemp);
				cmbRequestingOrgComboBox cmbRequestingOrg = (cmbRequestingOrgComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRequestingOrgComboBox.class, m_cmbRequestingOrgTemp);
				super.addComboBox(cmbRequestingOrg);
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 560, 104, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbSpecimenNatureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSpecimenNatureTemp);
				cmbSpecimenNatureComboBox cmbSpecimenNature = (cmbSpecimenNatureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecimenNatureComboBox.class, m_cmbSpecimenNatureTemp);
				super.addComboBox(cmbSpecimenNature);
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 560, 64, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbReportStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbReportStatusTemp);
				cmbReportStatusComboBox cmbReportStatus = (cmbReportStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReportStatusComboBox.class, m_cmbReportStatusTemp);
				super.addComboBox(cmbReportStatus);
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 192, 184, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbRepOrganisationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbRepOrganisationTemp);
				cmbRepOrganisationComboBox cmbRepOrganisation = (cmbRepOrganisationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRepOrganisationComboBox.class, m_cmbRepOrganisationTemp);
				super.addComboBox(cmbRepOrganisation);
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 192, 24, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbInvTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(10)});
				addControl(m_cmbInvTypeTemp);
				cmbInvTypeComboBox cmbInvType = (cmbInvTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInvTypeComboBox.class, m_cmbInvTypeTemp);
				super.addComboBox(cmbInvType);
			}

			public ims.core.forms.mosquery.IComponent customControlMosRequester()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlMosRequesterValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlMosRequesterVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlMosRequesterVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlMosRequesterEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlMosRequesterEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent customControlMosPathologist()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlMosPathologistValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlMosPathologistVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlMosPathologistVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlMosPathologistEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlMosPathologistEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent customControlAuthoring()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setcustomControlAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setcustomControlAuthoringVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean iscustomControlAuthoringVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setcustomControlAuthoringEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean iscustomControlAuthoringEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public TextBox txtReportId()
			{
				return (TextBox)super.getControl(13);
			}
			public DateControl dteInvResult()
			{
				return (DateControl)super.getControl(14);
			}
			public DateControl dteSampleReciept()
			{
				return (DateControl)super.getControl(15);
			}
			public cmbRequestingOrgComboBox cmbRequestingOrg()
			{
				return (cmbRequestingOrgComboBox)super.getComboBox(0);
			}
			public cmbSpecimenNatureComboBox cmbSpecimenNature()
			{
				return (cmbSpecimenNatureComboBox)super.getComboBox(1);
			}
			public cmbReportStatusComboBox cmbReportStatus()
			{
				return (cmbReportStatusComboBox)super.getComboBox(2);
			}
			public cmbRepOrganisationComboBox cmbRepOrganisation()
			{
				return (cmbRepOrganisationComboBox)super.getComboBox(3);
			}
			public cmbInvTypeComboBox cmbInvType()
			{
				return (cmbInvTypeComboBox)super.getComboBox(4);
			}
		}
		public static class tabTumDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbExcisionMargComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.ExcisionMargin value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.ExcisionMargin value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.ExcisionMargin value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.ExcisionMargin value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.ExcisionMargin value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.ExcisionMargin getValue()
				{
					return (ims.oncology.vo.lookups.ExcisionMargin)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.ExcisionMargin value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbVascLymphInvasionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.VascularLymphInvasion value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.VascularLymphInvasion value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.VascularLymphInvasion value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.VascularLymphInvasion value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.VascularLymphInvasion value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.VascularLymphInvasion getValue()
				{
					return (ims.oncology.vo.lookups.VascularLymphInvasion)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.VascularLymphInvasion value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbGradeDifferentationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSynchronousTumourComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.SynchronousTumourIndicator value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.SynchronousTumourIndicator value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.SynchronousTumourIndicator value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.SynchronousTumourIndicator value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.SynchronousTumourIndicator value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.SynchronousTumourIndicator getValue()
				{
					return (ims.oncology.vo.lookups.SynchronousTumourIndicator)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.SynchronousTumourIndicator value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 424, 152, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Nodes Positive Number:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 424, 120, 152, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Nodes Examined Number:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 424, 88, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Excision Margin:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 424, 56, 175, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Vascular/Lymphatic Invasion:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 264, 85, 29, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mm.", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 424, 26, 140, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Grade of Differentation:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 144, 62, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Histology:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 112, 184, 18, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Synchronous Tumour Indicator:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 85, 124, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Invasive Lesion Size:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 58, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tumour Laterality:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 26, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Diagnosis:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 192, 56, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 192, 24, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 600, 88, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbExcisionMargTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 3027), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbExcisionMargTemp);
				cmbExcisionMargComboBox cmbExcisionMarg = (cmbExcisionMargComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbExcisionMargComboBox.class, m_cmbExcisionMargTemp);
				super.addComboBox(cmbExcisionMarg);
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 600, 56, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbVascLymphInvasionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 3025), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbVascLymphInvasionTemp);
				cmbVascLymphInvasionComboBox cmbVascLymphInvasion = (cmbVascLymphInvasionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbVascLymphInvasionComboBox.class, m_cmbVascLymphInvasionTemp);
				super.addComboBox(cmbVascLymphInvasion);
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 600, 24, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbGradeDifferentationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 3023), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbGradeDifferentationTemp);
				cmbGradeDifferentationComboBox cmbGradeDifferentation = (cmbGradeDifferentationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbGradeDifferentationComboBox.class, m_cmbGradeDifferentationTemp);
				super.addComboBox(cmbGradeDifferentation);
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 192, 112, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbSynchronousTumourTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 3019), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSynchronousTumourTemp);
				cmbSynchronousTumourComboBox cmbSynchronousTumour = (cmbSynchronousTumourComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSynchronousTumourComboBox.class, m_cmbSynchronousTumourTemp);
				super.addComboBox(cmbSynchronousTumour);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 192, 144, 216, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 3021), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 600, 152, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 3031), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 600, 120, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 3029), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 192, 83, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 3017), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 128, 20, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Select Primary Diagnosis / Tumour", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public TextBox txtLaterality()
			{
				return (TextBox)super.getControl(11);
			}
			public TextBox txtDiagnosis()
			{
				return (TextBox)super.getControl(12);
			}
			public cmbExcisionMargComboBox cmbExcisionMarg()
			{
				return (cmbExcisionMargComboBox)super.getComboBox(0);
			}
			public cmbVascLymphInvasionComboBox cmbVascLymphInvasion()
			{
				return (cmbVascLymphInvasionComboBox)super.getComboBox(1);
			}
			public cmbGradeDifferentationComboBox cmbGradeDifferentation()
			{
				return (cmbGradeDifferentationComboBox)super.getComboBox(2);
			}
			public cmbSynchronousTumourComboBox cmbSynchronousTumour()
			{
				return (cmbSynchronousTumourComboBox)super.getComboBox(3);
			}
			public DynamicGrid dyngrdHistology()
			{
				return (DynamicGrid)super.getControl(17);
			}
			public IntBox intNodesPositive()
			{
				return (IntBox)super.getControl(18);
			}
			public IntBox intNodesExamined()
			{
				return (IntBox)super.getControl(19);
			}
			public IntBox intLesionSize()
			{
				return (IntBox)super.getControl(20);
			}
			public ImageButton imbDiagnosisSelect()
			{
				return (ImageButton)super.getControl(21);
			}
		}
		public static class tabTNMContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPathologicalTNMComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPathologicalMComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPathologicalNComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPathologicalTComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 408, 24, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "T Category (Extended):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 408, 176, 140, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "M Category (Extended):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 16, 120, 200, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Overall Pathological TNM Category:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 147, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pathological M Category:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 145, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pathological N Category:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 24, 144, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pathological T Category:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 224, 120, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPathologicalTNMTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 3041), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPathologicalTNMTemp);
				cmbPathologicalTNMComboBox cmbPathologicalTNM = (cmbPathologicalTNMComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPathologicalTNMComboBox.class, m_cmbPathologicalTNMTemp);
				super.addComboBox(cmbPathologicalTNM);
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 224, 88, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPathologicalMTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 3039), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPathologicalMTemp);
				cmbPathologicalMComboBox cmbPathologicalM = (cmbPathologicalMComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPathologicalMComboBox.class, m_cmbPathologicalMTemp);
				super.addComboBox(cmbPathologicalM);
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 224, 56, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPathologicalNTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 3037), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPathologicalNTemp);
				cmbPathologicalNComboBox cmbPathologicalN = (cmbPathologicalNComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPathologicalNComboBox.class, m_cmbPathologicalNTemp);
				super.addComboBox(cmbPathologicalN);
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 224, 24, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPathologicalTTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 3034), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(10)});
				addControl(m_cmbPathologicalTTemp);
				cmbPathologicalTComboBox cmbPathologicalT = (cmbPathologicalTComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPathologicalTComboBox.class, m_cmbPathologicalTTemp);
				super.addComboBox(cmbPathologicalT);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 560, 176, 216, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 3045), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 560, 24, 216, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 3043), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public cmbPathologicalTNMComboBox cmbPathologicalTNM()
			{
				return (cmbPathologicalTNMComboBox)super.getComboBox(0);
			}
			public cmbPathologicalMComboBox cmbPathologicalM()
			{
				return (cmbPathologicalMComboBox)super.getComboBox(1);
			}
			public cmbPathologicalNComboBox cmbPathologicalN()
			{
				return (cmbPathologicalNComboBox)super.getComboBox(2);
			}
			public cmbPathologicalTComboBox cmbPathologicalT()
			{
				return (cmbPathologicalTComboBox)super.getComboBox(3);
			}
			public DynamicGrid dyngrdMCategory()
			{
				return (DynamicGrid)super.getControl(10);
			}
			public DynamicGrid dyngrdTCategory()
			{
				return (DynamicGrid)super.getControl(11);
			}
		}
		public static class tabSpecimenSpecificContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 792, 272, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_customControlSpecimenQuestionsForm = loader.loadComponent(127109, appForm, startControlID * 10 + 4000, anchoringHelper56.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_customControlSpecimenQuestionsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(8), new Integer(32), new Integer(792), new Integer(272), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(-1), m_customControlSpecimenQuestionsForm, instance1 } );
				ims.framework.Control m_customControlSpecimenQuestionsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1059),  new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(-1), m_customControlSpecimenQuestionsForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlSpecimenQuestionsControl);
				Menu[] menus1 = m_customControlSpecimenQuestionsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Button Controls
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 728, 8, 72, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 3051), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Favourites", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public ims.assessment.forms.structuralassessment.IComponent customControlSpecimenQuestions()
			{
				return (ims.assessment.forms.structuralassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlSpecimenQuestionsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlSpecimenQuestionsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlSpecimenQuestionsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlSpecimenQuestionsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlSpecimenQuestionsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Button btnFavourites()
			{
				return (Button)super.getControl(1);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 16, 248, 816, 336, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabGenDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"General Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabGenDetailsContainer m_tabGenDetailsContainer = (tabGenDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGenDetailsContainer.class, m_tabGenDetails, factory);
			super.addContainer(m_tabGenDetails, m_tabGenDetailsContainer);
			ims.framework.utils.SizeInfo m_tabGenDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 336);
			ims.framework.utils.SizeInfo m_tabGenDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper58.getWidth(), anchoringHelper58.getHeight());
			m_tabGenDetailsContainer.setContext(form, appForm, m_tabGenDetails, loader, form_images_local, contextMenus, startControlID, m_tabGenDetailsDesignSize, m_tabGenDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 16, 248, 816, 336, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabTumDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Tumour Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTumDetailsContainer m_tabTumDetailsContainer = (tabTumDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTumDetailsContainer.class, m_tabTumDetails, factory);
			super.addContainer(m_tabTumDetails, m_tabTumDetailsContainer);
			ims.framework.utils.SizeInfo m_tabTumDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 336);
			ims.framework.utils.SizeInfo m_tabTumDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper59.getWidth(), anchoringHelper59.getHeight());
			m_tabTumDetailsContainer.setContext(form, appForm, m_tabTumDetails, loader, form_images_local, contextMenus, startControlID, m_tabTumDetailsDesignSize, m_tabTumDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 16, 248, 816, 336, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabTNM = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Pathological TNM Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTNMContainer m_tabTNMContainer = (tabTNMContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTNMContainer.class, m_tabTNM, factory);
			super.addContainer(m_tabTNM, m_tabTNMContainer);
			ims.framework.utils.SizeInfo m_tabTNMDesignSize = new ims.framework.utils.SizeInfo(816, 336);
			ims.framework.utils.SizeInfo m_tabTNMRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper60.getWidth(), anchoringHelper60.getHeight());
			m_tabTNMContainer.setContext(form, appForm, m_tabTNM, loader, form_images_local, contextMenus, startControlID, m_tabTNMDesignSize, m_tabTNMRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 16, 248, 816, 336, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabSpecimenSpecific = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Specimen Specific Questions", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSpecimenSpecificContainer m_tabSpecimenSpecificContainer = (tabSpecimenSpecificContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimenSpecificContainer.class, m_tabSpecimenSpecific, factory);
			super.addContainer(m_tabSpecimenSpecific, m_tabSpecimenSpecificContainer);
			ims.framework.utils.SizeInfo m_tabSpecimenSpecificDesignSize = new ims.framework.utils.SizeInfo(816, 336);
			ims.framework.utils.SizeInfo m_tabSpecimenSpecificRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper61.getWidth(), anchoringHelper61.getHeight());
			m_tabSpecimenSpecificContainer.setContext(form, appForm, m_tabSpecimenSpecific, loader, form_images_local, contextMenus, startControlID, m_tabSpecimenSpecificDesignSize, m_tabSpecimenSpecificRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabGenDetails().setVisible(false);
			tabTumDetails().setVisible(false);
			tabTNM().setVisible(false);
			tabSpecimenSpecific().setVisible(false);
		}
		public void settabGenDetailsEnabled(boolean value)
		{
			tabGenDetails().setEnabled(value);
		}
		public void settabTumDetailsEnabled(boolean value)
		{
			tabTumDetails().setEnabled(value);
		}
		public void settabTNMEnabled(boolean value)
		{
			tabTNM().setEnabled(value);
		}
		public void settabSpecimenSpecificEnabled(boolean value)
		{
			tabSpecimenSpecific().setEnabled(value);
		}
		public void showtabGenDetails()
		{
			tabTumDetails().setVisible(false);
			tabTNM().setVisible(false);
			tabSpecimenSpecific().setVisible(false);
			tabGenDetails().setVisible(true);
		}
		public void showtabTumDetails()
		{
			tabGenDetails().setVisible(false);
			tabTNM().setVisible(false);
			tabSpecimenSpecific().setVisible(false);
			tabTumDetails().setVisible(true);
		}
		public void showtabTNM()
		{
			tabGenDetails().setVisible(false);
			tabTumDetails().setVisible(false);
			tabSpecimenSpecific().setVisible(false);
			tabTNM().setVisible(true);
		}
		public void showtabSpecimenSpecific()
		{
			tabGenDetails().setVisible(false);
			tabTumDetails().setVisible(false);
			tabTNM().setVisible(false);
			tabSpecimenSpecific().setVisible(true);
		}

		public tabGenDetailsContainer tabGenDetails()
		{
			return (tabGenDetailsContainer)super.layers.get(0);
		}
		public tabTumDetailsContainer tabTumDetails()
		{
			return (tabTumDetailsContainer)super.layers.get(1);
		}
		public tabTNMContainer tabTNM()
		{
			return (tabTNMContainer)super.layers.get(2);
		}
		public tabSpecimenSpecificContainer tabSpecimenSpecific()
		{
			return (tabSpecimenSpecificContainer)super.layers.get(3);
		}
	}
	public static class grdDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColInvestigationTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColInvestigationTypeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColInvestigationTypeOpened()
		{
			super.row.showOpened(0);
		}
		public String getColInvestigationType()
		{
			return (String)super.row.get(0);
		}
		public void setColInvestigationType(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColInvestigationTypeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColRecieptDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColRecieptDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColRecieptDateOpened()
		{
			super.row.showOpened(1);
		}
		public String getColRecieptDate()
		{
			return (String)super.row.get(1);
		}
		public void setColRecieptDate(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColRecieptDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColResultDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColResultDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColResultDateOpened()
		{
			super.row.showOpened(2);
		}
		public String getColResultDate()
		{
			return (String)super.row.get(2);
		}
		public void setColResultDate(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColResultDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColPathologistReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColPathologistReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColPathologistOpened()
		{
			super.row.showOpened(3);
		}
		public String getColPathologist()
		{
			return (String)super.row.get(3);
		}
		public void setColPathologist(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColPathologistTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColReportingOrganisationReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColReportingOrganisationReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColReportingOrganisationOpened()
		{
			super.row.showOpened(4);
		}
		public String getColReportingOrganisation()
		{
			return (String)super.row.get(4);
		}
		public void setColReportingOrganisation(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColReportingOrganisationTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.clinicaladmin.vo.PathologyDetailsListVo getValue()
		{
			return (ims.clinicaladmin.vo.PathologyDetailsListVo)super.row.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.PathologyDetailsListVo value)
		{
			super.row.setValue(value);
		}
		public grdDetailsRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdDetailsRow(super.row.getParent());
		}
		public grdDetailsRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdDetailsRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdDetailsRowCollection collection;
	}
	public static class grdDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDetailsRow get(int index)
		{
			return new grdDetailsRow(super.collection.get(index));
		}
		public grdDetailsRow newRow()
		{
			return new grdDetailsRow(super.collection.newRow());
		}
		public grdDetailsRow newRow(boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRow(autoSelect));
		}
		public grdDetailsRow newRowAt(int index)
		{
			return new grdDetailsRow(super.collection.newRowAt(index));
		}
		public grdDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdDetailsRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdDetailsRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdDetailsRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdDetailsRow[] result = new GenForm.grdDetailsRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdDetailsRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdDetailsRow[] getAllRows(GenForm.grdDetailsRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdDetailsRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdDetailsRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdDetailsRow[] result = new GenForm.grdDetailsRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdDetailsRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdDetailsRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdDetailsRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdDetailsRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.clinicaladmin.vo.PathologyDetailsListVoCollection getValues()
		{
			ims.clinicaladmin.vo.PathologyDetailsListVoCollection listOfValues = new ims.clinicaladmin.vo.PathologyDetailsListVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinicaladmin.vo.PathologyDetailsListVo getValue()
		{
			return (ims.clinicaladmin.vo.PathologyDetailsListVo)super.grid.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.PathologyDetailsListVo value)
		{
			super.grid.setValue(value);
		}
		public grdDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDetailsRowCollection getRows()
		{
			return new grdDetailsRowCollection(super.grid.getRows());
		}
		public grdDetailsRow getRowByValue(ims.clinicaladmin.vo.PathologyDetailsListVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDetailsRow(row);
		}
		public void setColInvestigationTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColInvestigationTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColRecieptDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColRecieptDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColResultDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColResultDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColPathologistHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColPathologistHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColReportingOrganisationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColReportingOrganisationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedPathologyDetailsVo();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Oncology.contextMenuHistopatholgyReport = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Oncology.contextMenuHistopatholgyReportADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1850001)))
			contextMenus.Oncology.contextMenuHistopatholgyReport.add(contextMenus.Oncology.contextMenuHistopatholgyReportADDItem);
		contextMenus.Oncology.contextMenuHistopatholgyReportUPDATEItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1850002)))
			contextMenus.Oncology.contextMenuHistopatholgyReport.add(contextMenus.Oncology.contextMenuHistopatholgyReportUPDATEItem);
		contextMenus.Oncology.contextMenuHistopatholgyReportREVISEItem = factory.createMenuItem(startControlID.intValue() + 3, "Revise", true, false, new Integer(103157), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1850003)))
			contextMenus.Oncology.contextMenuHistopatholgyReport.add(contextMenus.Oncology.contextMenuHistopatholgyReportREVISEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuHistopatholgyReport);


		// Panel Controls
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Pathology Report", new Integer(1), ""}));

		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 192, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Revise", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 744, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 3052), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 656, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 3046), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 104, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 816, 192, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.Oncology.contextMenuHistopatholgyReport, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDetailsTemp);
		grdDetailsGrid grdDetails = (grdDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDetailsGrid.class, m_grdDetailsTemp);
		grdDetails.addTreeColumn("Pathology Investigation Type", 0, 350, false, true);
		grdDetails.addStringColumn("Receipt Date", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Result Date", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Pathologist", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Reporting Organisation", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDetails);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Button btnRevise()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(7);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(8);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(9);
	}
	public grdDetailsGrid grdDetails()
	{
		return (grdDetailsGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Assessment = new AssessmentForms();
			Oncology = new OncologyForms();
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				AssessmentFavourites = new LocalFormName(127117);
			}
			public final FormName AssessmentFavourites;
		}
		public final class OncologyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OncologyForms()
			{
				PrimaryTumourSelectDialog = new LocalFormName(125140);
			}
			public final FormName PrimaryTumourSelectDialog;
		}

		public AssessmentForms Assessment;
		public OncologyForms Oncology;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedPathologyDetailsVo = new ims.framework.ContextVariable("SelectedPathologyDetailsVo", prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier + "");
			cxl_ReviseRecord = new ims.framework.ContextVariable("ReviseRecord", prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__ReviseRecord_" + componentIdentifier + "");
			cxl_LoadedOrganisations = new ims.framework.ContextVariable("LoadedOrganisations", prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedOrganisations_" + componentIdentifier + "");
			cxl_SpecimenQuestionsAssessment = new ims.framework.ContextVariable("SpecimenQuestionsAssessment", prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier + "");
			cxl_SelectedPrimaryTumour = new ims.framework.ContextVariable("SelectedPrimaryTumour", prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPrimaryTumour_" + componentIdentifier + "");
			cxl_LoadedTumourGroup = new ims.framework.ContextVariable("LoadedTumourGroup", prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier + "");
			cxl_LoadedTumourSite = new ims.framework.ContextVariable("LoadedTumourSite", prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourSite_" + componentIdentifier + "");
		}
		
		public boolean getSelectedPathologyDetailsVoIsNotNull()
		{
			return !cxl_SelectedPathologyDetailsVo.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.PathologyDetailsVo getSelectedPathologyDetailsVo()
		{
			return (ims.clinicaladmin.vo.PathologyDetailsVo)cxl_SelectedPathologyDetailsVo.getValue(context);
		}
		public void setSelectedPathologyDetailsVo(ims.clinicaladmin.vo.PathologyDetailsVo value)
		{
			cxl_SelectedPathologyDetailsVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedPathologyDetailsVo = null;
		public boolean getReviseRecordIsNotNull()
		{
			return !cxl_ReviseRecord.getValueIsNull(context);
		}
		public Boolean getReviseRecord()
		{
			return (Boolean)cxl_ReviseRecord.getValue(context);
		}
		public void setReviseRecord(Boolean value)
		{
			cxl_ReviseRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReviseRecord = null;
		public boolean getLoadedOrganisationsIsNotNull()
		{
			return !cxl_LoadedOrganisations.getValueIsNull(context);
		}
		public ims.core.vo.OrgLiteVoCollection getLoadedOrganisations()
		{
			return (ims.core.vo.OrgLiteVoCollection)cxl_LoadedOrganisations.getValue(context);
		}
		public void setLoadedOrganisations(ims.core.vo.OrgLiteVoCollection value)
		{
			cxl_LoadedOrganisations.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoadedOrganisations = null;
		public boolean getSpecimenQuestionsAssessmentIsNotNull()
		{
			return !cxl_SpecimenQuestionsAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.UserAssessmentVo getSpecimenQuestionsAssessment()
		{
			return (ims.assessment.vo.UserAssessmentVo)cxl_SpecimenQuestionsAssessment.getValue(context);
		}
		public void setSpecimenQuestionsAssessment(ims.assessment.vo.UserAssessmentVo value)
		{
			cxl_SpecimenQuestionsAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SpecimenQuestionsAssessment = null;
		public boolean getSelectedPrimaryTumourIsNotNull()
		{
			return !cxl_SelectedPrimaryTumour.getValueIsNull(context);
		}
		public ims.oncology.vo.PrimaryTumourDetailsShortVo getSelectedPrimaryTumour()
		{
			return (ims.oncology.vo.PrimaryTumourDetailsShortVo)cxl_SelectedPrimaryTumour.getValue(context);
		}
		public void setSelectedPrimaryTumour(ims.oncology.vo.PrimaryTumourDetailsShortVo value)
		{
			cxl_SelectedPrimaryTumour.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedPrimaryTumour = null;
		public boolean getLoadedTumourGroupIsNotNull()
		{
			return !cxl_LoadedTumourGroup.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourGroupVo getLoadedTumourGroup()
		{
			return (ims.clinicaladmin.vo.TumourGroupVo)cxl_LoadedTumourGroup.getValue(context);
		}
		public void setLoadedTumourGroup(ims.clinicaladmin.vo.TumourGroupVo value)
		{
			cxl_LoadedTumourGroup.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoadedTumourGroup = null;
		public boolean getLoadedTumourSiteIsNotNull()
		{
			return !cxl_LoadedTumourSite.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourSiteVo getLoadedTumourSite()
		{
			return (ims.clinicaladmin.vo.TumourSiteVo)cxl_LoadedTumourSite.getValue(context);
		}
		public void setLoadedTumourSite(ims.clinicaladmin.vo.TumourSiteVo value)
		{
			cxl_LoadedTumourSite.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoadedTumourSite = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public OncologyNamespace Oncology = new OncologyNamespace();
		public final class OncologyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class HistopatholgyReport implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int UPDATE = 2;
				public static final int REVISE = 3;
			}
			public void disableAllHistopatholgyReportMenuItems()
			{
				this.contextMenuHistopatholgyReportADDItem.setEnabled(false);
				this.contextMenuHistopatholgyReportUPDATEItem.setEnabled(false);
				this.contextMenuHistopatholgyReportREVISEItem.setEnabled(false);
			}
			public void hideAllHistopatholgyReportMenuItems()
			{
				this.contextMenuHistopatholgyReportADDItem.setVisible(false);
				this.contextMenuHistopatholgyReportUPDATEItem.setVisible(false);
				this.contextMenuHistopatholgyReportREVISEItem.setVisible(false);
			}
			private Menu contextMenuHistopatholgyReport;
			public ReadOnlyMenuItem getHistopatholgyReportADDItem()
			{
				return this.contextMenuHistopatholgyReportADDItem;
			}
			private MenuItem contextMenuHistopatholgyReportADDItem;
			public ReadOnlyMenuItem getHistopatholgyReportUPDATEItem()
			{
				return this.contextMenuHistopatholgyReportUPDATEItem;
			}
			private MenuItem contextMenuHistopatholgyReportUPDATEItem;
			public ReadOnlyMenuItem getHistopatholgyReportREVISEItem()
			{
				return this.contextMenuHistopatholgyReportREVISEItem;
			}
			private MenuItem contextMenuHistopatholgyReportREVISEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[158];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ID", "ID_UserAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-HELPURL", "HelpURL");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-CATEGORY", "Category");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ISMULTIROLE", "IsMultiRole");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedPrimaryTumourDetail", "BO-1074100007-ID", "ID_PrimaryTumourDetails");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedPrimaryTumourDetail", "BO-1074100007-TUMOURLATERALITY", "TumourLaterality");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedPrimaryTumourDetail", "BO-1074100007-ISCURRENT", "IsCurrent");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedPrimaryTumourDetail", "BO-1074100007-ENDDATE", "EndDate");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedPrimaryTumourDetail", "BO-1074100007-EPISODEOFCARE", "EpisodeOfCare");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-ID", "ID_PathologyDetails");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-INVESTIGATIONTYPE", "InvestigationType");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-SAMPLERECEIPTDATE", "SampleReceiptDate");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-INVESTIGATIONRESULTDATE", "InvestigationResultDate");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-REPORTINGCONSULTANTCODE", "ReportingConsultantCode");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-CARECONTEXT", "CareContext");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-PREVIOUSVERSION", "PreviousVersion");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-INVASIVELESIONSIZE", "InvasiveLesionSize");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-SYNCHRONOUSTUMOURINDICATOR", "SynchronousTumourIndicator");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-VASCULARLYMPHINVASION", "VascularLymphInvasion");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-EXCISIONMARGIN", "ExcisionMargin");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-NUMBERNODESEXAMINED", "NumberNodesExamined");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-NODESPOSITIVENUMBER", "NodesPositiveNumber");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-SERVICEREPORTID", "ServiceReportId");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-SERVICEREPORTSTATUS", "ServiceReportStatus");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-SPECIMENNATURE", "SpecimenNature");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-CAREPROFCODEREQUESTER", "CareProfCodeRequester");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPathologyDetailsVo_" + componentIdentifier, "BO-1074100015-STATUS", "Status");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-ID", "ID_UserAssessment");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-NAME", "Name");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-DESCRIPTION", "Description");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-HELPURL", "HelpURL");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-CATEGORY", "Category");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIROLE", "IsMultiRole");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SpecimenQuestionsAssessment_" + componentIdentifier, "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPrimaryTumour_" + componentIdentifier, "BO-1074100007-ID", "ID_PrimaryTumourDetails");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPrimaryTumour_" + componentIdentifier, "BO-1074100007-TUMOURLATERALITY", "TumourLaterality");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPrimaryTumour_" + componentIdentifier, "BO-1074100007-ISCURRENT", "IsCurrent");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPrimaryTumour_" + componentIdentifier, "BO-1074100007-ENDDATE", "EndDate");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__SelectedPrimaryTumour_" + componentIdentifier, "BO-1074100007-EPISODEOFCARE", "EpisodeOfCare");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-ID", "ID_TumourGroup");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-GROUPNAME", "GroupName");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-ISACTIVE", "IsActive");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-HASTNM", "HasTNM");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-ISPROGNOSTICGROUPINGRELEVANT", "IsPrognosticGroupingRelevant");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-GROUPDESCRIPTION", "GroupDescription");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-HASOTHERCLASSIFICATIONS", "HasOtherClassifications");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESDIFF", "TnmRequiresDiff");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESOVER45", "TnmRequiresOver45");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESHISTO", "TnmRequiresHisto");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESSMARKERS", "TnmRequiresSMarkers");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourGroup_" + componentIdentifier, "BO-1074100009-TNMVERSION", "TNMVersion");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourSite_" + componentIdentifier, "BO-1074100010-ID", "ID_TumourSite");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourSite_" + componentIdentifier, "BO-1074100010-NAME", "Name");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourSite_" + componentIdentifier, "BO-1074100010-ISACTIVE", "IsActive");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourSite_" + componentIdentifier, "BO-1074100010-HASSITESPECIFICTNM", "HasSiteSpecificTNM");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourSite_" + componentIdentifier, "BO-1074100010-HASSITESPECIFICHISTOLOGY", "HasSiteSpecificHistology");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourSite_" + componentIdentifier, "BO-1074100010-DESCRIPTION", "Description");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.HistoPathologyReport.__internal_x_context__LoadedTumourSite_" + componentIdentifier, "BO-1074100010-TNMVERSION", "TNMVersion");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
