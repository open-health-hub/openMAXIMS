//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.53 build 2645.24233)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.oncology.forms.actualplandetails;

import java.util.ArrayList;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.vo.ActualPlanDetailsVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String NEW	 = "New";
	private static final String EDIT = "Edit";
		
	private void clear() 
	{
		form.dteDecisionToTreat().setValue(null);
		form.cmbPlannedTreatment().setValue(null);
		form.cmbOrganisationPlanned().setValue(null);
		form.dteActualTreatment().setValue(null);
		form.cmbActualTreatment().setValue(null);
		form.cmbOrganisationOrganised().setValue(null);
	}
		
	private void statusButtons(String action) 
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			if(action.equals(NEW))
			{
				form.bNew().setVisible(true);
				form.bEdit().setVisible(false);	
			}
			
			if(action.equals(EDIT))
			{
				form.bNew().setVisible(false);
				form.bEdit().setVisible(true);
			}
		}
	}

	protected void populateScreenFromData(ActualPlanDetailsVo value)
	{
		clear();
			
		if(value == null)
			return;
				
		form.dteDecisionToTreat().setValue(value.getDateDecisionToTreatIsNotNull() ? value.getDateDecisionToTreat() :  null);
		form.cmbPlannedTreatment().setValue(value.getPlannedTreatmentTypeIsNotNull() ? value.getPlannedTreatmentType() : null);
		form.cmbOrganisationPlanned().setValue(value.getOrganisationPlannedIsNotNull() ? value.getOrganisationPlanned() : null);
		form.dteActualTreatment().setValue(value.getActualTreatmentDateIsNotNull() ? value.getActualTreatmentDate() : null);
		form.cmbActualTreatment().setValue(value.getActualTreatmentTypeIsNotNull() ? value.getActualTreatmentType() : null);
		form.cmbOrganisationOrganised().setValue(value.getOrganisationOrganisedIsNotNull() ? value.getOrganisationOrganised() : null);
	}
		
	protected void onBNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
		
	private void newInstance() 
	{
		form.getLocalContext().seteditedRecord(null);
		form.setMode(FormMode.EDIT);
		clear();
	}
	
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
		
	private boolean save()
	{
		ActualPlanDetailsVo record = populateDataFromScreen(); 
					
		String[] uiErrors = getUiErrors();	
			
		String[] errors = record.validate(uiErrors);
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			record = domain.saveRecord(record);
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			ActualPlanDetailsVo updatedRecord = getAndDisplayRecord(form.getGlobalContext().Core.getCurrentCareContext());
			updateRowRecord(updatedRecord);
			return false;
		} 
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			return false;
		}
			
		form.getLocalContext().seteditedRecord(record);
		return true;
	}
		
	private void updateRowRecord(ActualPlanDetailsVo record) 
	{
		populateScreenFromData(record);	
	}
		
	private String[] getUiErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
			
		if (form.dteDecisionToTreat().getValue() == null && 
			form.cmbPlannedTreatment().getValue() == null && 
				form.cmbOrganisationPlanned().getValue() == null && 
					form.dteActualTreatment().getValue() == null && 
						form.cmbActualTreatment().getValue() == null && 
							form.cmbOrganisationOrganised().getValue() == null)
							{
								errors.add("Al least one filed is mandatory!");
							}
			
		if (errors.size() > 0) 
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid ActualPlanDetailsVo record", searchErrors);
			return searchErrors;
		}
			
		return null;
	}

	private ActualPlanDetailsVo getAndDisplayRecord()
	{
		return getAndDisplayRecord(form.getGlobalContext().Core.getCurrentCareContext());
	}
		
	private ActualPlanDetailsVo getAndDisplayRecord(CareContextRefVo careContext) 
	{
		clear();
			
		if(careContext == null)
			return null;
			
		ActualPlanDetailsVo record = domain.getRecord(careContext);
		form.getLocalContext().seteditedRecord(record);
			
		populateScreenFromData(record);	
				
		return record;	
	}
		
	protected ActualPlanDetailsVo populateDataFromScreen()
	{
		return populateDataFromScreen(form.getLocalContext().geteditedRecord());
	}
		
	protected ActualPlanDetailsVo populateDataFromScreen(ActualPlanDetailsVo value)
	{
		if(value == null)
			value = new ActualPlanDetailsVo();
			
		value.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
		value.setDateDecisionToTreat(form.dteDecisionToTreat().getValue());
		value.setPlannedTreatmentType(form.cmbPlannedTreatment().getValue());
		value.setOrganisationPlanned(form.cmbOrganisationPlanned().getValue());
		value.setActualTreatmentDate(form.dteActualTreatment().getValue());
		value.setActualTreatmentType(form.cmbActualTreatment().getValue());
		value.setOrganisationOrganised(form.cmbOrganisationOrganised().getValue());
			
		return value;
	}

	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		getAndDisplayRecord();
		statusButtons(form.getLocalContext().geteditedRecordIsNotNull() ? EDIT : NEW); 
	}

	protected void onBEditClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		open();
	}

	public void open() throws PresentationLogicException 
	{
		form.setMode(FormMode.VIEW);				
		clear();
		ActualPlanDetailsVo voList = domain.getRecord(form.getGlobalContext().Core.getCurrentCareContext());
			
		if (voList != null)				
		{
			populateScreenFromData(voList);
			form.getLocalContext().seteditedRecord(voList);
			statusButtons(EDIT);
		}
		else
		{
			statusButtons(NEW);
		}		
	}
}
