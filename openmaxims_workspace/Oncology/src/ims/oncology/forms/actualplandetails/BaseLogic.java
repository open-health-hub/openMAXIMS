//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.actualplandetails;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.oncology.domain.ActualPlanDetails.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.oncology.domain.ActualPlanDetails domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbActualTreatmentValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbActualTreatment().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.TreatmentType existingInstance = (ims.oncology.vo.lookups.TreatmentType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbActualTreatmentLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.TreatmentType)
		{
			ims.oncology.vo.lookups.TreatmentType instance = (ims.oncology.vo.lookups.TreatmentType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbActualTreatmentLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.TreatmentType existingInstance = (ims.oncology.vo.lookups.TreatmentType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbActualTreatment().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbActualTreatmentLookup()
	{
		this.form.cmbActualTreatment().clear();
		ims.oncology.vo.lookups.TreatmentTypeCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getTreatmentType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbActualTreatment().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbActualTreatmentLookupValue(int id)
	{
		ims.oncology.vo.lookups.TreatmentType instance = ims.oncology.vo.lookups.LookupHelper.getTreatmentTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbActualTreatment().setValue(instance);
	}
	protected final void defaultcmbActualTreatmentLookupValue()
	{
		this.form.cmbActualTreatment().setValue((ims.oncology.vo.lookups.TreatmentType)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.TreatmentType.class, engine.getFormName().getID(), ims.oncology.vo.lookups.TreatmentType.TYPE_ID));
	}
	protected final void oncmbOrganisationOrganisedValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbOrganisationOrganised().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.OrganisationOrganisedTreatment existingInstance = (ims.oncology.vo.lookups.OrganisationOrganisedTreatment)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOrganisationOrganisedLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.OrganisationOrganisedTreatment)
		{
			ims.oncology.vo.lookups.OrganisationOrganisedTreatment instance = (ims.oncology.vo.lookups.OrganisationOrganisedTreatment)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOrganisationOrganisedLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.OrganisationOrganisedTreatment existingInstance = (ims.oncology.vo.lookups.OrganisationOrganisedTreatment)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbOrganisationOrganised().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOrganisationOrganisedLookup()
	{
		this.form.cmbOrganisationOrganised().clear();
		ims.oncology.vo.lookups.OrganisationOrganisedTreatmentCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getOrganisationOrganisedTreatment(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbOrganisationOrganised().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOrganisationOrganisedLookupValue(int id)
	{
		ims.oncology.vo.lookups.OrganisationOrganisedTreatment instance = ims.oncology.vo.lookups.LookupHelper.getOrganisationOrganisedTreatmentInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbOrganisationOrganised().setValue(instance);
	}
	protected final void defaultcmbOrganisationOrganisedLookupValue()
	{
		this.form.cmbOrganisationOrganised().setValue((ims.oncology.vo.lookups.OrganisationOrganisedTreatment)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.OrganisationOrganisedTreatment.class, engine.getFormName().getID(), ims.oncology.vo.lookups.OrganisationOrganisedTreatment.TYPE_ID));
	}
	protected final void oncmbPlannedTreatmentValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPlannedTreatment().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.TreatmentType existingInstance = (ims.oncology.vo.lookups.TreatmentType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPlannedTreatmentLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.TreatmentType)
		{
			ims.oncology.vo.lookups.TreatmentType instance = (ims.oncology.vo.lookups.TreatmentType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPlannedTreatmentLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.TreatmentType existingInstance = (ims.oncology.vo.lookups.TreatmentType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPlannedTreatment().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPlannedTreatmentLookup()
	{
		this.form.cmbPlannedTreatment().clear();
		ims.oncology.vo.lookups.TreatmentTypeCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getTreatmentType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPlannedTreatment().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPlannedTreatmentLookupValue(int id)
	{
		ims.oncology.vo.lookups.TreatmentType instance = ims.oncology.vo.lookups.LookupHelper.getTreatmentTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPlannedTreatment().setValue(instance);
	}
	protected final void defaultcmbPlannedTreatmentLookupValue()
	{
		this.form.cmbPlannedTreatment().setValue((ims.oncology.vo.lookups.TreatmentType)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.TreatmentType.class, engine.getFormName().getID(), ims.oncology.vo.lookups.TreatmentType.TYPE_ID));
	}
	protected final void oncmbOrganisationPlannedValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbOrganisationPlanned().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.OrganisationPlannedTreatment existingInstance = (ims.oncology.vo.lookups.OrganisationPlannedTreatment)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOrganisationPlannedLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.OrganisationPlannedTreatment)
		{
			ims.oncology.vo.lookups.OrganisationPlannedTreatment instance = (ims.oncology.vo.lookups.OrganisationPlannedTreatment)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOrganisationPlannedLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.OrganisationPlannedTreatment existingInstance = (ims.oncology.vo.lookups.OrganisationPlannedTreatment)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbOrganisationPlanned().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOrganisationPlannedLookup()
	{
		this.form.cmbOrganisationPlanned().clear();
		ims.oncology.vo.lookups.OrganisationPlannedTreatmentCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getOrganisationPlannedTreatment(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbOrganisationPlanned().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOrganisationPlannedLookupValue(int id)
	{
		ims.oncology.vo.lookups.OrganisationPlannedTreatment instance = ims.oncology.vo.lookups.LookupHelper.getOrganisationPlannedTreatmentInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbOrganisationPlanned().setValue(instance);
	}
	protected final void defaultcmbOrganisationPlannedLookupValue()
	{
		this.form.cmbOrganisationPlanned().setValue((ims.oncology.vo.lookups.OrganisationPlannedTreatment)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.OrganisationPlannedTreatment.class, engine.getFormName().getID(), ims.oncology.vo.lookups.OrganisationPlannedTreatment.TYPE_ID));
	}
	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.oncology.domain.ActualPlanDetails domain;
}
