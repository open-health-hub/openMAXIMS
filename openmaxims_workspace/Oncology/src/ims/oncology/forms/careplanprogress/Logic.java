//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.45 build 2438.24331)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.oncology.forms.careplanprogress;

import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.forms.careplanprogress.GenForm;
import ims.oncology.vo.CancerCarePlanVo;
import ims.oncology.vo.TreatmentModalitiesVo;
import ims.oncology.vo.TreatmentModalitiesVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	private void open() 
	{
		form.gridCarePlan().setEnabled(true);
		form.gridCarePlan().isEnabled();
		form.gridCarePlan().setReadOnly(false);
		populateScreen();
	}
	private void populateScreen() 
	{
		CancerCarePlanVo voCancerCarePlan = form.getGlobalContext().Oncology.getvoCancerCarePlan();
		if(voCancerCarePlan == null)
			return;

		TreatmentModalitiesVoCollection collCarePlanModalityVo = voCancerCarePlan.getTreatmentModalities();
		if(voCancerCarePlan.getCurrentStatusIsNotNull())
		{
			for (int i=0; i < collCarePlanModalityVo.size();i++)
			{						
				TreatmentModalitiesVo voTreatmentModalities = collCarePlanModalityVo.get(i);					
				if (voTreatmentModalities != null)
				{
					GenForm.gridCarePlanRow row = form.gridCarePlan().getRows().newRow();
					if(row != null)
					{
						if (voTreatmentModalities.getTreatmentModalityIsNotNull())
							row.setcolModality(voTreatmentModalities.getTreatmentModality().toString());
						if (voTreatmentModalities.getCompletedDateIsNotNull())
						{
							row.setcolDateCompleted(voTreatmentModalities.getCompletedDate());
							row.setcolDateCompletedReadOnly(true);
						}
						row.setValue(voTreatmentModalities.getTreatmentModality());
					}
				}
			}
		}	
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);		
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		populateDataFromScreen();
		
		CancerCarePlanVo voCarePlan = form.getGlobalContext().Oncology.getvoCancerCarePlan();
		
		String[] errors = voCarePlan.validate();
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		try 
		{
			domain.saveCancerCarePlan(voCarePlan);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
		}
		engine.close(DialogResult.OK);		
	}
	private void populateDataFromScreen() 
	{
		TreatmentModalitiesVoCollection collCarePlanModalityVo = new TreatmentModalitiesVoCollection();
		collCarePlanModalityVo = form.getGlobalContext().Oncology.getvoCancerCarePlan().getTreatmentModalities();
		if(collCarePlanModalityVo == null)
			return;
		
		GenForm.gridCarePlanRow row;
		for(int i=0;i<form.gridCarePlan().getRows().size();i++)
		{
			row = form.gridCarePlan().getRows().get(i);
			if (row.getcolDateCompleted() != null)
			{
				for(int b=0;b<collCarePlanModalityVo.size();b++)
				{
					TreatmentModalitiesVo voTreatModalities = collCarePlanModalityVo.get(b);
					if(row.getValue().getId() == voTreatModalities.getTreatmentModality().getId())
					{
						collCarePlanModalityVo.get(b).setCompletedDate(row.getcolDateCompleted());
					}
				}				
			}
		}
		form.getGlobalContext().Oncology.getvoCancerCarePlan().setTreatmentModalities(collCarePlanModalityVo);
	}
	protected void onGridCarePlanSelectionChanged() throws PresentationLogicException 
	{
		
	}
}
