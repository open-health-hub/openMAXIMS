//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.54 build 2691.18959)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.oncology.forms.surgerydetailssubproceduresdialog;

import java.util.ArrayList;

import ims.clinical.vo.SubProceduresVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.lookups.Specialty;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.oncology.forms.surgerydetailssubproceduresdialog.GenForm.grpProcedureTypeEnumeration;
import ims.vo.ValueObject;
import ims.vo.interfaces.IClinicalCodingValue;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initializeCustomControl();
	}
	
	private void initializeCustomControl() 
	{
		form.customControlCodingItem().setCodingItemType(CodingItemType.PROCEDURE);
		form.customControlCodingItem().setHotlist(new Boolean(true));
		form.customControlCodingItem().setSpecialty(getSpecialty());
		form.customControlCodingItem().setParentEditing(new Boolean(form.getMode().equals(FormMode.EDIT)));
		form.customControlCodingItem().setClinicalTermMandatory(true);
		form.customControlCodingItem().setDescriptionMandatory(true);
		form.grpProcedureType().setValue(grpProcedureTypeEnumeration.rdoSpecialty);
	}

	private Specialty getSpecialty() 
	{
		if ( (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() )
			&& (form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialtyIsNotNull()) )
		{
			return form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty();
		}
		else if ( (form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull() )
					&& (form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull()) )
		{
			return form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty();
		}
		return null;
	}


	@Override
	protected void onCustomControlCodingItemValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.customControlCodingItem().isAllSelected() != null && form.customControlCodingItem().isAllSelected().booleanValue())
		{
			form.grpProcedureType().setValue(grpProcedureTypeEnumeration.rdoProcedures);
			form.customControlCodingItem().setHotlist(new Boolean(false));
			form.customControlCodingItem().search();			
		}				
	}
	@Override
	protected void onRadioButtongrpProcedureTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.customControlCodingItem().setHotlist(form.grpProcedureType().getValue().equals(grpProcedureTypeEnumeration.rdoSpecialty) ? new Boolean(true) : new Boolean(false));
	}
	
	private String[] validateUIRules()
	{
		ArrayList<String> loe = new ArrayList<String>();
		if (form.customControlCodingItem().getSelectedItem() == null)
			loe.add("Clinical term is mandatory");
		if (form.customControlCodingItem().getDescription() == null)
			loe.add("Description is mandatory");
		if (loe.size() == 0)
			return null;
		String[] result  = new String[loe.size()];
		loe.toArray(result);
		return result;
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		IClinicalCodingValue result = form.customControlCodingItem().getValue();		
		String[] errors = validateUIRules();
		if (errors != null && errors.length > 0)
		{
				engine.showErrors(errors);
				return;
				
		}
		
		ValueObject vo = result.getIClinicalCodingValue();
		if(vo instanceof ProcedureLiteVo)
		{
			SubProceduresVo voSub = new SubProceduresVo();
			voSub.setProcedure((ProcedureLiteVo) result.getIClinicalCodingValue());
			voSub.setSubProcedureDescription(result.getIClinicalCodingValueDescription());
			form.getGlobalContext().Clinical.setSelectedSubProcedure(voSub);
		}
		else
		{
			throw new CodingRuntimeException("ProcedureLiteVo expected from component");
		}
		
		engine.close(DialogResult.OK);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
