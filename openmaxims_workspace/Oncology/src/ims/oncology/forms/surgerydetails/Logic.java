//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.54 build 2687.20153)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.oncology.forms.surgerydetails;

import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentVo;
import ims.clinical.vo.SubProceduresVoCollection;
import ims.clinical.vo.SurgeryAssistantsVo;
import ims.clinical.vo.SurgeryAssistantsVoCollection;
import ims.clinical.vo.SurgeryDetailsListVo;
import ims.clinical.vo.SurgeryDetailsListVoCollection;
import ims.clinical.vo.SurgeryDetailsVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.OrganisationVo;
import ims.core.vo.OrganisationVoCollection;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.LayerBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.PartialDate;
import ims.oncology.forms.surgerydetails.GenForm.lyrSurgeryDetailsLayer.tabGenDetContainer.grdSubProceduresRow;
import ims.oncology.forms.surgerydetails.GenForm.lyrSurgeryDetailsLayer.tabProcContainer.grdAssistantRow;
import ims.oncology.forms.surgerydetails.GenForm.lyrSurgeryDetailsLayer.tabGenDetContainer.Group1Enumeration;
import ims.vo.ValueObject;
import ims.vo.interfaces.IClinicalCodingValue;

public class Logic extends BaseLogic
{
	
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initializeCustomControl();
		open(null);
	}
	
	private void initializeCustomControl() 
	{
		initializeCodingControl();

		form.getLocalContext().setPreOpPossumUserAssessment(domain.getAssessment(PreActiveActiveInactiveStatus.ACTIVE, UserDefinedAssessmentType.PREOPPOSSUM));
		form.getLocalContext().setOperativePossumUserAssessment(domain.getAssessment(PreActiveActiveInactiveStatus.ACTIVE, UserDefinedAssessmentType.OPERATIVEDETAILSPOSSUM));

		//WDEV-5193
		form.lyrSurgeryDetails().tabGenDet().customControlMosConsultant().initialize(MosType.HCP);
		form.lyrSurgeryDetails().tabProc().customControlMosSurgeon().initialize(MosType.HCP);
		form.lyrSurgeryDetails().tabProc().customControlMosAnaesthetist().initialize(MosType.HCP);
	//	UserDefinedAssessmentType.PREOPPOSSUM
	//	UserDefinedAssessmentType.OPERATIVEDETAILSPOSSUM
	}

	private void initializeCodingControl() 
	{
		form.lyrSurgeryDetails().tabGenDet().customControlProcedure().setCodingItemType(CodingItemType.PROCEDURE);
		form.lyrSurgeryDetails().tabGenDet().customControlProcedure().setHotlist(new Boolean(true));
		form.lyrSurgeryDetails().tabGenDet().customControlProcedure().setSpecialty(getSpecialty());
		form.lyrSurgeryDetails().tabGenDet().customControlProcedure().setClinicalTermMandatory(true);
		form.lyrSurgeryDetails().tabGenDet().customControlProcedure().setDescriptionMandatory(true);
	
	}

	private PatientAssessmentVo populatePatientAssessmentFromUserAssessmentShort(UserAssessmentVo voUA) 
	{
		if(voUA == null)
			throw new CodingRuntimeException("No UserAssessmentShortVo provided");
		
		PatientAssessmentVo voPatientAssessment = new PatientAssessmentVo();
		
		//WDEV-12555
		voPatientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
		voPatientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		voPatientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voPatientAssessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voPatientAssessment.setStatus(PatientAssessmentStatusReason.NOTCOMMENCED);
		voPatientAssessment.setAuthoringInformation(form.lyrSurgeryDetails().tabGenDet().customControlAuthoringInfo().getValue());
			
		//Patient Assessment Data
		PatientAssessmentDataVo voPatientAssessmentData = new PatientAssessmentDataVo();
		voPatientAssessmentData.setGraphic(null);
		voPatientAssessmentData.setUserAssessment(voUA);
		voPatientAssessment.setAssessmentData(voPatientAssessmentData);
			
		return voPatientAssessment;
	}

	private Specialty getSpecialty() 
	{
		if ( (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() )
			&& (form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialtyIsNotNull()) )
		{
			return form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty();
		}
		else if ( (form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull() )
					&& (form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull()) )
		{
			return form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty();
		}
		return null;
	}

	private void open(SurgeryDetailsVo voSelected) 
	{
		clearScreen();
		updateContextMenus();
		form.getLocalContext().setSelectedSurgeryDetails(null);
		
		SurgeryDetailsListVoCollection voColl = domain.listSurgeryDetails(form.getGlobalContext().Core.getEpisodeofCareShort());
		fillBrowser(voColl, voSelected != null ? voSelected.getID_SurgeryDetails() : null);
		form.btnEdit().setVisible(false);
		browseRecord();
		//wdev-11473
		//form.lyrSurgeryDetails().showtabGenDet();
	}

	private void fillBrowser(SurgeryDetailsListVoCollection voColl, Integer idSelected)
	{
	form.recbrPreviousSurgeries().clear();
		
		SurgeryDetailsListVo voSelected = new SurgeryDetailsListVo();
		
		for (int i = 0 ; voColl != null && i < voColl.size() ; i++)
		{
			StringBuffer sb = new StringBuffer();
			if(voColl.get(i).getPatientProcedureIsNotNull()){
				sb.append(voColl.get(i).getPatientProcedure().getProcDateIsNotNull() ? voColl.get(i).getPatientProcedure().getProcDate().toString() : "");
				sb.append(" - ");
				sb.append(voColl.get(i).getPatientProcedure().getPeformedByIsNotNull() ? voColl.get(i).getPatientProcedure().getPeformedBy().toString() : "");
				sb.append(" - ");
				sb.append(voColl.get(i).getPatientProcedure().getProcedureIsNotNull() && voColl.get(i).getPatientProcedure().getProcedure().getProcedureNameIsNotNull() ? voColl.get(i).getPatientProcedure().getProcedure().getProcedureName() : voColl.get(i).getPatientProcedure().getProcedureDescription());
				sb.append(" - ");
				sb.append(voColl.get(i).getPatientProcedure().getProcedureIntentIsNotNull() ? voColl.get(i).getPatientProcedure().getProcedureIntent().toString() : "");
			}
			
			form.recbrPreviousSurgeries().newRow(voColl.get(i), sb.toString());
			if(idSelected==null)
				idSelected=voColl.get(i).getID_SurgeryDetails();
			if (voColl.get(i).getID_SurgeryDetails().equals(idSelected))
				voSelected = voColl.get(i);
		}
		
		if(voSelected == null && voColl != null && voColl.size() > 0)
			form.recbrPreviousSurgeries().setValue(voColl.get(0));
		else
			form.recbrPreviousSurgeries().setValue(voSelected);
	}

	private void updateContextMenus() 
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (form.lyrSurgeryDetails().tabGenDet().isVisible())
			{
				form.getContextMenus().getGenericGridAddItem().setVisible(true);
				form.getContextMenus().getGenericGridRemoveItem().setVisible(true);
				form.getContextMenus().getGenericGridRemoveItem().setEnabled(form.lyrSurgeryDetails().tabGenDet().grdSubProcedures().getSelectedRowIndex() >= 0 ? true : false);
			}
			if (form.lyrSurgeryDetails().tabProc().isVisible())
			{
				form.getContextMenus().getGenericGridAddItem().setVisible(true);
				form.getContextMenus().getGenericGridRemoveItem().setVisible(true);
				form.getContextMenus().getGenericGridRemoveItem().setEnabled(form.lyrSurgeryDetails().tabProc().grdAssistant().getSelectedRowIndex() >= 0 ? true : false);
			}
		}
		else{
			form.getContextMenus().getGenericGridAddItem().setVisible(false);
			form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
			form.getContextMenus().getGenericGridRemoveItem().setEnabled(false);
			
			form.getContextMenus().getGenericGridAddItem().setVisible(false);
			form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
			form.getContextMenus().getGenericGridRemoveItem().setEnabled(false);
		}
	}

	private void clearScreen() 
	{
		form.lyrSurgeryDetails().tabGenDet().customControlProcedure().clear();
		initializeCustomControl();
		form.lyrSurgeryDetails().tabGenDet().qmbHospital().setValue(null);
		//form.lyrSurgeryDetails().tabGenDet().customControlConsultantSurgeon().setValue(null);
		form.lyrSurgeryDetails().tabGenDet().customControlMosConsultant().setValue(null);
		form.lyrSurgeryDetails().tabGenDet().cmbSpecialtyFunc().setValue(null);
		form.lyrSurgeryDetails().tabGenDet().dteAdmission().setValue(null);
		form.lyrSurgeryDetails().tabGenDet().dteSurgery().setValue(null);
		form.lyrSurgeryDetails().tabGenDet().dteDischarge().setValue(null);
		form.lyrSurgeryDetails().tabGenDet().cmbDischargeDestination().setValue(null);
		form.lyrSurgeryDetails().tabGenDet().cmbASAGrade().setValue(null);
		form.lyrSurgeryDetails().tabGenDet().cmbProcedureIntent().setValue(null);
		form.lyrSurgeryDetails().tabGenDet().cmbConsultantPresence().setValue(null);
		form.lyrSurgeryDetails().tabGenDet().grdSubProcedures().getRows().clear();
		form.lyrSurgeryDetails().tabGenDet().customControlAuthoringInfo().setValue(null);
		
		//form.lyrSurgeryDetails().tabProc().customControlSurgeon().setValue(null);
		form.lyrSurgeryDetails().tabProc().customControlMosSurgeon().setValue(null);
		form.lyrSurgeryDetails().tabProc().cmbSurgeonGrade().setValue(null);
		//form.lyrSurgeryDetails().tabProc().customControlAnaesthetist().setValue(null);
		form.lyrSurgeryDetails().tabProc().customControlMosAnaesthetist().setValue(null);
		form.lyrSurgeryDetails().tabProc().cmbAnaesthetistGrade().setValue(null);
		form.lyrSurgeryDetails().tabProc().dteStartSurgery().setValue(null);
		form.lyrSurgeryDetails().tabProc().timStartSurgery().setValue(null);
		form.lyrSurgeryDetails().tabProc().dteEndSurgery().setValue(null);
		form.lyrSurgeryDetails().tabProc().timEndSurgery().setValue(null);
		form.lyrSurgeryDetails().tabProc().cmbProcedureType().setValue(null);
		form.lyrSurgeryDetails().tabProc().grdAssistant().getRows().clear();
		form.lyrSurgeryDetails().tabProc().grdAssistant().setValue(null);
		
		form.lyrSurgeryDetails().tabPreOpPossum().customControlPreOpP().clearComponent();
		form.lyrSurgeryDetails().tabStructFind().customControlProcedureFinding().clear(true);
		form.lyrSurgeryDetails().tabProcDet().customControlProcedureDetails().clearComponentAndData();		// WDEV-12636
		form.lyrSurgeryDetails().tabOperativePossum().customControlOperativePossum().clearComponent();
	}

	private void populateScreenFromData(SurgeryDetailsVo sdVo) 
	{
		if (sdVo == null)
			return;
		
		form.lyrSurgeryDetails().tabGenDet().customControlProcedure().setValue(sdVo.getPatientProcedure());
		form.lyrSurgeryDetails().tabGenDet().qmbHospital().setValue(sdVo.getHospitalPerformed());
		if (form.lyrSurgeryDetails().tabGenDet().qmbHospital().getValue() == null && sdVo.getHospitalPerformedIsNotNull())
		{
			form.lyrSurgeryDetails().tabGenDet().qmbHospital().newRow(sdVo.getHospitalPerformed(), sdVo.getHospitalPerformed().getName(), null, null);
			form.lyrSurgeryDetails().tabGenDet().qmbHospital().setValue(sdVo.getHospitalPerformed());
		}
		//form.lyrSurgeryDetails().tabGenDet().customControlConsultantSurgeon().setValue(sdVo.getResponsibleConsultant());
		form.lyrSurgeryDetails().tabGenDet().customControlMosConsultant().setValue(sdVo.getResponsibleConsultant());
		form.lyrSurgeryDetails().tabGenDet().cmbSpecialtyFunc().setValue(sdVo.getSpecialtyFunctionCode());
		form.lyrSurgeryDetails().tabGenDet().dteAdmission().setValue(sdVo.getAdmissionDate());
		form.lyrSurgeryDetails().tabGenDet().dteSurgery().setValue(sdVo.getPatientProcedureIsNotNull() && sdVo.getPatientProcedure().getProcDateIsNotNull() ? sdVo.getPatientProcedure().getProcDate().toDate() : null);
		form.lyrSurgeryDetails().tabGenDet().dteDischarge().setValue(sdVo.getDischargeDate());
		form.lyrSurgeryDetails().tabGenDet().cmbDischargeDestination().setValue(sdVo.getDischargeDestination());
		form.lyrSurgeryDetails().tabGenDet().cmbASAGrade().setValue(sdVo.getASAGrade());
		form.lyrSurgeryDetails().tabGenDet().cmbProcedureIntent().setValue(sdVo.getPatientProcedureIsNotNull() ? sdVo.getPatientProcedure().getProcedureIntent() : null);
		form.lyrSurgeryDetails().tabGenDet().cmbConsultantPresence().setValue(sdVo.getConsultantPresence());
		form.lyrSurgeryDetails().tabGenDet().grdSubProcedures().getRows().clear();
		fillSubProceduresGrid(sdVo);

		form.lyrSurgeryDetails().tabGenDet().customControlAuthoringInfo().setValue(sdVo.getAuthoringInformation());
		
		//form.lyrSurgeryDetails().tabProc().customControlSurgeon().setValue(sdVo.getPatientProcedureIsNotNull() ? sdVo.getPatientProcedure().getPeformedBy() : null);
		form.lyrSurgeryDetails().tabProc().customControlMosSurgeon().setValue(sdVo.getPatientProcedureIsNotNull() ? sdVo.getPatientProcedure().getPeformedBy() : null);
		form.lyrSurgeryDetails().tabProc().cmbSurgeonGrade().setValue(sdVo.getPatientProcedureIsNotNull() ? sdVo.getPatientProcedure().getSurgeonsGrade() : null);
		//form.lyrSurgeryDetails().tabProc().customControlAnaesthetist().setValue(sdVo.getAnaesthetist());
		form.lyrSurgeryDetails().tabProc().customControlMosAnaesthetist().setValue(sdVo.getAnaesthetist());
		
		form.lyrSurgeryDetails().tabProc().cmbAnaesthetistGrade().setValue(sdVo.getAnaesthetistGrade());
		form.lyrSurgeryDetails().tabProc().dteStartSurgery().setValue(sdVo.getPatientProcedureIsNotNull() && sdVo.getPatientProcedure().getProcDateIsNotNull() ? sdVo.getPatientProcedure().getProcDate().toDate() : null);
		form.lyrSurgeryDetails().tabProc().timStartSurgery().setValue(sdVo.getPatientProcedureIsNotNull() ? sdVo.getPatientProcedure().getProcTime() : null);
		form.lyrSurgeryDetails().tabProc().dteEndSurgery().setValue(sdVo.getPatientProcedureIsNotNull() && sdVo.getPatientProcedure().getProcEndDateIsNotNull() ? sdVo.getPatientProcedure().getProcEndDate().toDate() : null);
		form.lyrSurgeryDetails().tabProc().timEndSurgery().setValue(sdVo.getPatientProcedureIsNotNull() ? sdVo.getPatientProcedure().getProcEndTime() : null);
		form.lyrSurgeryDetails().tabProc().cmbProcedureType().setValue(sdVo.getProcedureType());
		form.lyrSurgeryDetails().tabProc().grdAssistant().getRows().clear();
		fillAssistantsGrid(sdVo);
		
		if (sdVo.getPreOpPossum() == null)
		{
			form.lyrSurgeryDetails().tabPreOpPossum().customControlPreOpP().clearComponent();
			if (form.getLocalContext().getPreOpPossumUserAssessmentIsNotNull())
			{
				PatientAssessmentVo newAssessment = new PatientAssessmentVo();
				PatientAssessmentDataVo assessmentData = new PatientAssessmentDataVo();	
				UserAssessmentVo userAssessment = form.getLocalContext().getPreOpPossumUserAssessment();
				assessmentData.setUserAssessment(userAssessment);
				assessmentData.setGroupQuestionWidth(userAssessment.getGroupQuestionWidth());
				newAssessment.setAssessmentData(assessmentData);	
				//WDEV-11366
				form.lyrSurgeryDetails().tabPreOpPossum().customControlPreOpP().setPatientAssessment(newAssessment, form.getMode().equals(FormMode.VIEW),PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
			}		
		}
		else
		{
			form.lyrSurgeryDetails().tabPreOpPossum().customControlPreOpP().clearComponent();
			//WDEV-11366
			form.lyrSurgeryDetails().tabPreOpPossum().customControlPreOpP().setPatientAssessment(sdVo.getPreOpPossum(), form.getMode().equals(FormMode.VIEW),PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		}
 
		if (sdVo.getOperativeFindingsIsNotNull())
		{
			//WDEV-11366
			form.lyrSurgeryDetails().tabStructFind().customControlProcedureFinding().setPatientAssessment(sdVo.getOperativeFindings(),PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		}
		else
			form.lyrSurgeryDetails().tabStructFind().customControlProcedureFinding().clear(true);

		if (sdVo.getProcedureDetailsIsNotNull())
			//WDEV-11366
			form.lyrSurgeryDetails().tabProcDet().customControlProcedureDetails().setPatientAssessment(sdVo.getProcedureDetails(), form.getMode().equals(FormMode.VIEW),PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		else
			form.lyrSurgeryDetails().tabProcDet().customControlProcedureDetails().clearComponent();

		if (sdVo.getOperativeDetailsPossum() == null)
		{
			form.lyrSurgeryDetails().tabOperativePossum().customControlOperativePossum().clearComponent();
			if (form.getLocalContext().getOperativePossumUserAssessmentIsNotNull())
			{
				PatientAssessmentVo newAssessment = new PatientAssessmentVo();
				PatientAssessmentDataVo assessmentData = new PatientAssessmentDataVo();	
				UserAssessmentVo userAssessment = form.getLocalContext().getOperativePossumUserAssessment();
				assessmentData.setUserAssessment(userAssessment);
				assessmentData.setGroupQuestionWidth(userAssessment.getGroupQuestionWidth());
				newAssessment.setAssessmentData(assessmentData);	
				//WDEV-11366
				form.lyrSurgeryDetails().tabOperativePossum().customControlOperativePossum().setPatientAssessment(newAssessment, form.getMode().equals(FormMode.VIEW),PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
			}		
		}
		else
		{
			form.lyrSurgeryDetails().tabOperativePossum().customControlOperativePossum().clearComponent();
			//WDEV-11366
			form.lyrSurgeryDetails().tabOperativePossum().customControlOperativePossum().setPatientAssessment(sdVo.getOperativeDetailsPossum(), form.getMode().equals(FormMode.VIEW),PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		}
		
		form.getLocalContext().setSelectedSurgeryDetails(sdVo);
		
		if (form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(true);
		
	}

	private void fillAssistantsGrid(SurgeryDetailsVo sdVo)
	{
		for(int i = 0 ; sdVo.getAssistantsIsNotNull() && i < sdVo.getAssistants().size() ; i ++)
		{
			if (sdVo.getAssistants().get(i).getAssistant() != null)
			{
				grdAssistantRow row = form.lyrSurgeryDetails().tabProc().grdAssistant().getRows().newRow();
				row.getColAssistant().newRow(sdVo.getAssistants().get(i).getAssistant(), sdVo.getAssistants().get(i).getAssistant().getName().toString());			
				row.getColAssistant().setValue(sdVo.getAssistants().get(i).getAssistant());
				row.getColAssistant().setEditedText(sdVo.getAssistants().get(i).getAssistant().getName().toString());
				
				row.setColGrade(sdVo.getAssistants().get(i).getAssistantGrade());
				row.setValue(sdVo.getAssistants().get(i));
				row.setBackColor((form.lyrSurgeryDetails().tabProc().grdAssistant().getRows().size() % 2) == 0 ? Color.Beige : Color.Default);
			}
		}
	}

	private void fillSubProceduresGrid(SurgeryDetailsVo sdVo)
	{
		for(int i = 0 ; sdVo.getSubProceduresIsNotNull() && i < sdVo.getSubProcedures().size() ; i ++)
		{
			grdSubProceduresRow row = form.lyrSurgeryDetails().tabGenDet().grdSubProcedures().getRows().newRow();
			row.setcolProcedure(sdVo.getSubProcedures().get(i).getSubProcedureDescription());
			row.setValue(sdVo.getSubProcedures().get(i));
			row.setBackColor((form.lyrSurgeryDetails().tabGenDet().grdSubProcedures().getRows().size() % 2) == 0 ? Color.Beige : Color.Default);
		}
	}

	private SurgeryDetailsVo populateDataFromScreen(SurgeryDetailsVo sdVo) 
	{
		if (sdVo.getPatientProcedure() == null)
		{
			sdVo.setPatientProcedure(new PatientProcedureVo());
			
			sdVo.getPatientProcedure().setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			sdVo.getPatientProcedure().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			sdVo.getPatientProcedure().setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			
			sdVo.getPatientProcedure().setProcedureStatus(PatientProcedureStatus.PERFORMED);
			sdVo.getPatientProcedure().setInfoSource(SourceofInformation.CLINICALCONTACT);
			sdVo.getPatientProcedure().setAuthoringInformation(form.lyrSurgeryDetails().tabGenDet().customControlAuthoringInfo().getValue());
		}

		IClinicalCodingValue result = form.lyrSurgeryDetails().tabGenDet().customControlProcedure().getValue();		
		if (result != null)
		{
			ValueObject vo = result.getIClinicalCodingValue();
			if(vo instanceof ProcedureLiteVo)
			{
				sdVo.getPatientProcedure().setProcedure((ProcedureLiteVo) result.getIClinicalCodingValue());
				sdVo.getPatientProcedure().setProcedureDescription(result.getIClinicalCodingValueDescription());				
			}			
			else
			{
				throw new CodingRuntimeException("ProcedureLiteVo expected from component");
			}
		}

		sdVo.setHospitalPerformed(form.lyrSurgeryDetails().tabGenDet().qmbHospital().getValue());
		//sdVo.setResponsibleConsultant(form.lyrSurgeryDetails().tabGenDet().customControlConsultantSurgeon().getValue());
		sdVo.setResponsibleConsultant(form.lyrSurgeryDetails().tabGenDet().customControlMosConsultant().getValue());
		sdVo.setSpecialtyFunctionCode(form.lyrSurgeryDetails().tabGenDet().cmbSpecialtyFunc().getValue());
		sdVo.setAdmissionDate(form.lyrSurgeryDetails().tabGenDet().dteAdmission().getValue());
		
		sdVo.getPatientProcedure().setProcDate(form.lyrSurgeryDetails().tabGenDet().dteSurgery().getValue() != null ? new PartialDate(form.lyrSurgeryDetails().tabGenDet().dteSurgery().getValue()) : null);
		
		sdVo.setDischargeDate(form.lyrSurgeryDetails().tabGenDet().dteDischarge().getValue());
		sdVo.setDischargeDestination(form.lyrSurgeryDetails().tabGenDet().cmbDischargeDestination().getValue());
		sdVo.setASAGrade(form.lyrSurgeryDetails().tabGenDet().cmbASAGrade().getValue());
		sdVo.getPatientProcedure().setProcedureIntent(form.lyrSurgeryDetails().tabGenDet().cmbProcedureIntent().getValue());
		sdVo.setConsultantPresence(form.lyrSurgeryDetails().tabGenDet().cmbConsultantPresence().getValue());
		
		SubProceduresVoCollection voSPColl = new SubProceduresVoCollection(); 
		for (int i = 0 ; i < form.lyrSurgeryDetails().tabGenDet().grdSubProcedures().getRows().size() ; i++)
			voSPColl.add(form.lyrSurgeryDetails().tabGenDet().grdSubProcedures().getRows().get(i).getValue());

		sdVo.setSubProcedures(voSPColl);

		sdVo.setAuthoringInformation(form.lyrSurgeryDetails().tabGenDet().customControlAuthoringInfo().getValue());
		
		//sdVo.getPatientProcedure().setPeformedBy(form.lyrSurgeryDetails().tabProc().customControlSurgeon().getValue());
		sdVo.getPatientProcedure().setPeformedBy(form.lyrSurgeryDetails().tabProc().customControlMosSurgeon().getValue());
		sdVo.getPatientProcedure().setSurgeonsGrade(form.lyrSurgeryDetails().tabProc().cmbSurgeonGrade().getValue());
		//sdVo.setAnaesthetist(form.lyrSurgeryDetails().tabProc().customControlAnaesthetist().getValue());
		sdVo.setAnaesthetist(form.lyrSurgeryDetails().tabProc().customControlMosAnaesthetist().getValue());
		
		sdVo.setAnaesthetistGrade(form.lyrSurgeryDetails().tabProc().cmbAnaesthetistGrade().getValue());
		
		if ( form.lyrSurgeryDetails().tabGenDet().isVisible() && form.lyrSurgeryDetails().tabGenDet().dteSurgery().getValue() != null)
			sdVo.getPatientProcedure().setProcDate(form.lyrSurgeryDetails().tabGenDet().dteSurgery().getValue() != null ? new PartialDate(form.lyrSurgeryDetails().tabGenDet().dteSurgery().getValue()) : null);
		
		if ( form.lyrSurgeryDetails().tabProc().isVisible() && form.lyrSurgeryDetails().tabProc().dteStartSurgery().getValue() != null)
			sdVo.getPatientProcedure().setProcDate(form.lyrSurgeryDetails().tabProc().dteStartSurgery().getValue() != null ? new PartialDate(form.lyrSurgeryDetails().tabProc().dteStartSurgery().getValue()) : null);
		
		sdVo.getPatientProcedure().setProcTime(form.lyrSurgeryDetails().tabProc().timStartSurgery().getValue());
		sdVo.getPatientProcedure().setProcEndDate(form.lyrSurgeryDetails().tabProc().dteEndSurgery().getValue() != null ? new PartialDate(form.lyrSurgeryDetails().tabProc().dteEndSurgery().getValue()) : null);
		sdVo.getPatientProcedure().setProcEndTime(form.lyrSurgeryDetails().tabProc().timEndSurgery().getValue());
		sdVo.setProcedureType(form.lyrSurgeryDetails().tabProc().cmbProcedureType().getValue());

		SurgeryAssistantsVoCollection voSAColl = new SurgeryAssistantsVoCollection(); 
		for (int j = 0 ; j < form.lyrSurgeryDetails().tabProc().grdAssistant().getRows().size() ; j++)
		{
			SurgeryAssistantsVo voSA = form.lyrSurgeryDetails().tabProc().grdAssistant().getRows().get(j).getValue();
			if (voSA == null)
				voSA = new SurgeryAssistantsVo();
			
			voSA.setAssistant((HcpLiteVo)form.lyrSurgeryDetails().tabProc().grdAssistant().getRows().get(j).getColAssistant().getValue());
			voSA.setAssistantGrade(form.lyrSurgeryDetails().tabProc().grdAssistant().getRows().get(j).getColGrade());
			
			voSAColl.add(voSA);
		}
		sdVo.setAssistants(voSAColl);
		
		sdVo.setPreOpPossum(null);
		sdVo.setOperativeFindings(null);
		sdVo.setProcedureDetails(null);
		sdVo.setOperativeDetailsPossum(null);


		sdVo.setPreOpPossum(form.lyrSurgeryDetails().tabPreOpPossum().customControlPreOpP().getPatientAssessment());
		if (sdVo.getPreOpPossumIsNotNull() && sdVo.getPreOpPossum().getAuthoringInformation() == null)
			sdVo.getPreOpPossum().setAuthoringInformation(form.lyrSurgeryDetails().tabGenDet().customControlAuthoringInfo().getValue());
		if (sdVo.getPreOpPossumIsNotNull() && sdVo.getPreOpPossum().getClinicalContact() == null)
			sdVo.getPreOpPossum().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		// WDEV-11430
		if (sdVo.getPreOpPossumIsNotNull() && !sdVo.getPreOpPossum().getEpisodeOfCareIsNotNull())
			sdVo.getPreOpPossum().setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		//WDEV-12555
		if (sdVo.getPreOpPossumIsNotNull() && !sdVo.getPreOpPossum().getPatientIsNotNull())
			sdVo.getPreOpPossum().setPatient(form.getGlobalContext().Core.getPatientShort());

		sdVo.setOperativeFindings(form.lyrSurgeryDetails().tabStructFind().customControlProcedureFinding().getPatientAssessment());
		if (sdVo.getOperativeFindingsIsNotNull() && sdVo.getOperativeFindings().getAuthoringInformation() == null)
			sdVo.getOperativeFindings().setAuthoringInformation(form.lyrSurgeryDetails().tabGenDet().customControlAuthoringInfo().getValue());
		if (sdVo.getOperativeFindingsIsNotNull() && sdVo.getOperativeFindings().getClinicalContact() == null)
			sdVo.getOperativeFindings().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		// WDEV-11430
		if (sdVo.getOperativeFindingsIsNotNull() && !sdVo.getOperativeFindings().getEpisodeOfCareIsNotNull())
			sdVo.getOperativeFindings().setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		//WDEV-12555
		if (sdVo.getOperativeFindingsIsNotNull() && !sdVo.getOperativeFindings().getPatientIsNotNull())
			sdVo.getOperativeFindings().setPatient(form.getGlobalContext().Core.getPatientShort());
		
		//wdev-12179
		if(sdVo.getOperativeFindingsIsNotNull() && !sdVo.getOperativeFindings().getPatientIsNotNull())
			sdVo.getOperativeFindings().setPatient(form.getGlobalContext().Core.getPatientShort());
		//end 12179
		
		sdVo.setProcedureDetails(form.lyrSurgeryDetails().tabProcDet().customControlProcedureDetails().getPatientAssessment());
		if (sdVo.getProcedureDetailsIsNotNull() && sdVo.getProcedureDetails().getAuthoringInformation() == null)
			sdVo.getProcedureDetails().setAuthoringInformation(form.lyrSurgeryDetails().tabGenDet().customControlAuthoringInfo().getValue());
		if (sdVo.getProcedureDetailsIsNotNull() && sdVo.getProcedureDetails().getClinicalContact() == null)
			sdVo.getProcedureDetails().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		// WDEV-11430
		if (sdVo.getProcedureDetailsIsNotNull() && !sdVo.getProcedureDetails().getEpisodeOfCareIsNotNull())
			sdVo.getProcedureDetails().setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		//wdev-12179
		if (sdVo.getProcedureDetailsIsNotNull() && !sdVo.getProcedureDetails().getPatientIsNotNull())
			sdVo.getProcedureDetails().setPatient(form.getGlobalContext().Core.getPatientShort());
		//-end wdev-12179
		
		sdVo.setOperativeDetailsPossum(form.lyrSurgeryDetails().tabOperativePossum().customControlOperativePossum().getPatientAssessment());
		if (sdVo.getOperativeDetailsPossumIsNotNull() && sdVo.getOperativeDetailsPossum().getAuthoringInformation() == null)
			sdVo.getOperativeDetailsPossum().setAuthoringInformation(form.lyrSurgeryDetails().tabGenDet().customControlAuthoringInfo().getValue());
		if (sdVo.getOperativeDetailsPossumIsNotNull() && sdVo.getOperativeDetailsPossum().getClinicalContact() == null)
			sdVo.getOperativeDetailsPossum().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		// WDEV-11430
		if (sdVo.getOperativeDetailsPossumIsNotNull() && !sdVo.getOperativeDetailsPossum().getEpisodeOfCareIsNotNull())
			sdVo.getOperativeDetailsPossum().setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		//wdev-12490
		if (sdVo.getOperativeDetailsPossumIsNotNull() && !sdVo.getOperativeDetailsPossum().getPatientIsNotNull())
			sdVo.getOperativeDetailsPossum().setPatient(form.getGlobalContext().Core.getPatientShort());
		//-------

		return sdVo;
	}


	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getMode().equals(FormMode.EDIT) && formName.equals(form.getForms().Oncology.SurgeryDetailsSubProceduresDialog) && result.equals(DialogResult.OK))
		{
			grdSubProceduresRow row = form.lyrSurgeryDetails().tabGenDet().grdSubProcedures().getRows().newRow();
			row.setcolProcedure(form.getGlobalContext().Clinical.getSelectedSubProcedure().getSubProcedureDescription());
			row.setValue(form.getGlobalContext().Clinical.getSelectedSubProcedure());
			row.setBackColor((form.lyrSurgeryDetails().tabGenDet().grdSubProcedures().getRows().size() % 2) == 0 ? Color.Beige : Color.Default);
			
			form.getGlobalContext().Clinical.setSelectedSubProcedure(null);
		}

		if (form.getMode().equals(FormMode.EDIT) && formName.equals(form.getForms().Assessment.AssessmentFavourites) && result.equals(DialogResult.OK))
		{
			if ( form.getGlobalContext().Core.getSelectedGraphicAssessmentVoIsNotNull())
			{
				form.getLocalContext().setProcedureDetailsGraphicalUserAssessment(form.getGlobalContext().Core.getSelectedGraphicAssessmentVo());
				form.getLocalContext().setProcedureDetailsUserAssessment(null);

				PatientAssessmentVo paVoPre = populatePatientAssessmentFromGraphicalUserAssessmentShort(form.getLocalContext().getProcedureDetailsGraphicalUserAssessment());
				//wdev-11366
				form.lyrSurgeryDetails().tabStructFind().customControlProcedureFinding().setPatientAssessment(paVoPre,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
			}
			else if ( form.getGlobalContext().Core.getSelectedUserAssessmentVoIsNotNull())
			{
				form.getLocalContext().setProcedureDetailsUserAssessment(form.getGlobalContext().Core.getSelectedUserAssessmentVo());
				form.getLocalContext().setProcedureDetailsGraphicalUserAssessment(null);

				if(form.getLocalContext().getProcedureDetailsUserAssessment() != null)
				{
					PatientAssessmentVo paVoPre = populatePatientAssessmentFromUserAssessmentShort(form.getLocalContext().getProcedureDetailsUserAssessment());
					//WDEV-11366
					form.lyrSurgeryDetails().tabProcDet().customControlProcedureDetails().setPatientAssessment(paVoPre, true,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
				}
			}
			else
			{
				form.getLocalContext().setProcedureDetailsGraphicalUserAssessment(null);
				form.getLocalContext().setProcedureDetailsUserAssessment(null);
			}
			
		}
	}
	
	private PatientAssessmentVo populatePatientAssessmentFromGraphicalUserAssessmentShort(GraphicAssessmentVo voGA) 
	{
		if(voGA == null)
			throw new CodingRuntimeException("No GraphicAssessmentShortVo provided");
		
		PatientAssessmentVo voPatientAssessment = new PatientAssessmentVo();
		
		//WDEV-12555
		voPatientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
		voPatientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		voPatientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voPatientAssessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voPatientAssessment.setStatus(PatientAssessmentStatusReason.NOTCOMMENCED);
		voPatientAssessment.setAuthoringInformation(form.lyrSurgeryDetails().tabGenDet().customControlAuthoringInfo().getValue());
			
		//Patient Assessment Data
		PatientAssessmentDataVo voPatientAssessmentData = new PatientAssessmentDataVo();
		voPatientAssessmentData.setGraphic(voGA);
		voPatientAssessmentData.setUserAssessment(null);
		voPatientAssessment.setAssessmentData(voPatientAssessmentData);
			
		return voPatientAssessment;
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	private void newInstance() 
	{
		clearScreen();

		form.getLocalContext().setSelectedSurgeryDetails(new SurgeryDetailsVo());//	WDEV-15244
		
		form.setMode(FormMode.EDIT);//	WDEV-15244
		
		// Set the EpisodeOfCare, CareContext and so on
		form.getLocalContext().getSelectedSurgeryDetails().setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		form.getLocalContext().getSelectedSurgeryDetails().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		form.lyrSurgeryDetails().tabGenDet().customControlAuthoringInfo().initializeComponent();
		form.lyrSurgeryDetails().tabGenDet().Group1().setValue(Group1Enumeration.rdoSpecialtyHotlist);
		form.lyrSurgeryDetails().showtabGenDet();
		//WDEV-11682 
		updateContextMenus();
		
		if (form.getLocalContext().getPreOpPossumUserAssessment() != null)
		{
			PatientAssessmentVo paVoPre = populatePatientAssessmentFromUserAssessmentShort(form.getLocalContext().getPreOpPossumUserAssessment());
			//WDEV-11366
			form.lyrSurgeryDetails().tabPreOpPossum().customControlPreOpP().setPatientAssessment(paVoPre, false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		}
		
		if (form.getLocalContext().getOperativePossumUserAssessment() != null)
		{
			PatientAssessmentVo paVoPost = populatePatientAssessmentFromUserAssessmentShort(form.getLocalContext().getOperativePossumUserAssessment());
			//WDEV-11366
			form.lyrSurgeryDetails().tabOperativePossum().customControlOperativePossum().setPatientAssessment(paVoPost, false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		SurgeryDetailsVo sdVo = form.getLocalContext().getSelectedSurgeryDetails();

		if (sdVo == null)
		{
			sdVo = new SurgeryDetailsVo();
			sdVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			sdVo.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		}
		
//		if (sdVo.getCareContext() == null)
//			sdVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext().toCareContextRefVo());
		
		
		sdVo = populateDataFromScreen(sdVo);

		

		try 
		{
			String[] errors = sdVo.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}
			
			sdVo = domain.saveSurgeryDetails(sdVo);
			
			form.getLocalContext().setSelectedSurgeryDetails(sdVo);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		form.setMode(FormMode.VIEW);
		open(form.getLocalContext().getSelectedSurgeryDetails());
	
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		
		open(null);
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();

		populateScreenFromData(domain.getSurgeryDetails(form.recbrPreviousSurgeries().getValue()));
	}

	private void updateInstance() 
	{
		form.setMode(FormMode.EDIT);
		//wdev-11473
		//form.lyrSurgeryDetails().showtabGenDet();
	}

	protected void onQmbHospitalTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrSurgeryDetails().tabGenDet().qmbHospital().clear();
		
		OrganisationVo voOrg = new OrganisationVo();
		voOrg.setName(value);
			
		OrganisationVoCollection voColl = domain.listOrganisation(voOrg);
		for (int i = 0 ; i < voColl.size() ; i++)
		{
			if (voColl.get(i).getIsActiveIsNotNull() && voColl.get(i).getIsActive().booleanValue())
				form.lyrSurgeryDetails().tabGenDet().qmbHospital().newRow(voColl.get(i), voColl.get(i).getName());

			if (voColl.size() == 1)
				form.lyrSurgeryDetails().tabGenDet().qmbHospital().setValue(voColl.get(0));
			else if (voColl.size() > 1)
				form.lyrSurgeryDetails().tabGenDet().qmbHospital().showOpened();		
		}
	}
	
	@Override
	protected void onGrdAssistantSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateContextMenus();
	}
	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		if (sender.equals(form.lyrSurgeryDetails().tabGenDet().grdSubProcedures()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add :
					form.getGlobalContext().Clinical.setSelectedSubProcedure(null);
					engine.open(form.getForms().Oncology.SurgeryDetailsSubProceduresDialog);
				break;			
				case GenForm.ContextMenus.GenericGrid.Remove :
					form.lyrSurgeryDetails().tabGenDet().grdSubProcedures().getRows().remove(form.lyrSurgeryDetails().tabGenDet().grdSubProcedures().getSelectedRowIndex());
				break;
				default :
				break;
			}
		}
		else if (sender.equals(form.lyrSurgeryDetails().tabProc().grdAssistant()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add :
					form.lyrSurgeryDetails().tabProc().grdAssistant().getRows().newRow();
				break;			
				case GenForm.ContextMenus.GenericGrid.Remove :
					form.lyrSurgeryDetails().tabProc().grdAssistant().getRows().remove(form.lyrSurgeryDetails().tabProc().grdAssistant().getSelectedRowIndex());
					form.getContextMenus().getGenericGridRemoveItem().setEnabled(false);
				break;
				default :
				break;
			}
		}
	
		updateContextMenus();//	WDEV-15244
	}

	@Override
	protected void onlyrSurgeryDetailsTabChanged(LayerBridge tab) 
	{
		updateContextMenus();
		
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (tab.equals(form.lyrSurgeryDetails().tabGenDet()))
				form.lyrSurgeryDetails().tabGenDet().dteSurgery().setValue(form.lyrSurgeryDetails().tabProc().dteStartSurgery().getValue());
			
			if (tab.equals(form.lyrSurgeryDetails().tabProc()))
				form.lyrSurgeryDetails().tabProc().dteStartSurgery().setValue(form.lyrSurgeryDetails().tabGenDet().dteSurgery().getValue());
		}
		
	}

	@Override
	protected void onGrdAssistantGridQueryComboBoxTextSubmited(int column, grdAssistantRow row, String text) throws PresentationLogicException 
	{
		row.getColAssistant().clear();
		
		HcpLiteVoCollection coll = domain.listHcpLiteByName(text);
		if(coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
				row.getColAssistant().newRow(coll.get(i), coll.get(i).toString());			

			if (coll.size() == 1)
				row.getColAssistant().setValue(coll.get(0));
			else if (coll.size() > 1)
				row.getColAssistant().showOpened();		
		}		
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateContextMenus();
		form.lyrSurgeryDetails().tabGenDet().customControlProcedure().setParentEditing(new Boolean(form.getMode().equals(FormMode.EDIT)));

		if(form.getMode().equals(FormMode.VIEW))
		{			
			form.lyrSurgeryDetails().tabGenDet().customControlProcedure().setParentEditing(false);

			form.lyrSurgeryDetails().tabPreOpPossum().customControlPreOpP().setReadOnly(Boolean.TRUE);
			form.lyrSurgeryDetails().tabOperativePossum().customControlOperativePossum().setReadOnly(Boolean.TRUE);
			form.lyrSurgeryDetails().tabStructFind().customControlProcedureFinding().setEnabled(Boolean.FALSE);
			form.lyrSurgeryDetails().tabProcDet().customControlProcedureDetails().setReadOnly(Boolean.TRUE);

			if (form.recbrPreviousSurgeries().getValue() != null)
				form.btnEdit().setVisible(true);
			else
				form.btnEdit().setVisible(false);
		}
		else
		{
			form.lyrSurgeryDetails().tabGenDet().customControlProcedure().setParentEditing(true);

			form.lyrSurgeryDetails().tabPreOpPossum().customControlPreOpP().setReadOnly(Boolean.FALSE);
			form.lyrSurgeryDetails().tabOperativePossum().customControlOperativePossum().setReadOnly(Boolean.FALSE);
			form.lyrSurgeryDetails().tabStructFind().customControlProcedureFinding().setEnabled(Boolean.TRUE);
			form.lyrSurgeryDetails().tabProcDet().customControlProcedureDetails().setReadOnly(Boolean.FALSE);
			
			form.lyrSurgeryDetails().tabGenDet().Group1().setVisible(form.getLocalContext().getSelectedSurgeryDetails() == null || form.getLocalContext().getSelectedSurgeryDetails().getID_SurgeryDetails() == null);//	WDEV-15244
		}
	}

	@Override
	protected void onGrdSubProceduresSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenus();
	}

	@Override
	protected void onBtnProcedureFavouritesClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Core.setGraphicAssessmentsSelectable(false);
		form.getGlobalContext().Core.setStructuredAssessmentsSelectable(true);
		
		engine.open(form.getForms().Assessment.AssessmentFavourites);
	}

	@Override
	protected void onBtnGraphicFavouritesClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Core.setGraphicAssessmentsSelectable(true);
		form.getGlobalContext().Core.setStructuredAssessmentsSelectable(false);
		
		engine.open(form.getForms().Assessment.AssessmentFavourites);
	}

	@Override
	protected void onRadioButtonGroup1ValueChanged() throws PresentationLogicException 
	{
		form.lyrSurgeryDetails().tabGenDet().customControlProcedure().setHotlist(form.lyrSurgeryDetails().tabGenDet().Group1().getValue().equals(Group1Enumeration.rdoSpecialtyHotlist) ? new Boolean(true) : new Boolean(false));
	}

	@Override
	protected void onRecbrPreviousSurgeriesValueChanged() throws PresentationLogicException 
	{
		browseRecord();
		
	}

	private void browseRecord()
	{
		if(form.recbrPreviousSurgeries().getValue()!=null)
		{
			populateScreenFromData(domain.getSurgeryDetails(form.recbrPreviousSurgeries().getValue()));
			
			form.lyrSurgeryDetails().tabPreOpPossum().customControlPreOpP().setReadOnly(Boolean.TRUE);
			form.lyrSurgeryDetails().tabOperativePossum().customControlOperativePossum().setReadOnly(Boolean.TRUE);

			//form.lyrSurgeryDetails().showtabGenDet();
		
			updateContextMenus();
		}
		
	}

	//WDEV-11682 
	@Override
	protected void onCustomControlProcedureValueChanged() throws PresentationLogicException {
		if (form.lyrSurgeryDetails().tabGenDet().customControlProcedure().isAllSelected() != null && form.lyrSurgeryDetails().tabGenDet().customControlProcedure().isAllSelected().booleanValue())
		{
			form.lyrSurgeryDetails().tabGenDet().customControlProcedure().setHotlist(new Boolean(false));
			form.lyrSurgeryDetails().tabGenDet().customControlProcedure().search();
			form.lyrSurgeryDetails().tabGenDet().Group1().setValue(Group1Enumeration.rdoAll);
		}
		
	}

}
