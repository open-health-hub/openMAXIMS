//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.surgerydetails;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.oncology.domain.SurgeryDetails.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.oncology.domain.SurgeryDetails domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbSpecialtyFuncValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrSurgeryDetails().tabGenDet().cmbSpecialtyFunc().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.SpecialtyFunctionCode existingInstance = (ims.clinical.vo.lookups.SpecialtyFunctionCode)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSpecialtyFuncLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.SpecialtyFunctionCode)
		{
			ims.clinical.vo.lookups.SpecialtyFunctionCode instance = (ims.clinical.vo.lookups.SpecialtyFunctionCode)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSpecialtyFuncLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.SpecialtyFunctionCode existingInstance = (ims.clinical.vo.lookups.SpecialtyFunctionCode)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrSurgeryDetails().tabGenDet().cmbSpecialtyFunc().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSpecialtyFuncLookup()
	{
		this.form.lyrSurgeryDetails().tabGenDet().cmbSpecialtyFunc().clear();
		ims.clinical.vo.lookups.SpecialtyFunctionCodeCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getSpecialtyFunctionCode(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrSurgeryDetails().tabGenDet().cmbSpecialtyFunc().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSpecialtyFuncLookupValue(int id)
	{
		ims.clinical.vo.lookups.SpecialtyFunctionCode instance = ims.clinical.vo.lookups.LookupHelper.getSpecialtyFunctionCodeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrSurgeryDetails().tabGenDet().cmbSpecialtyFunc().setValue(instance);
	}
	protected final void defaultcmbSpecialtyFuncLookupValue()
	{
		this.form.lyrSurgeryDetails().tabGenDet().cmbSpecialtyFunc().setValue((ims.clinical.vo.lookups.SpecialtyFunctionCode)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.SpecialtyFunctionCode.class, engine.getFormName().getID(), ims.clinical.vo.lookups.SpecialtyFunctionCode.TYPE_ID));
	}
	protected final void oncmbConsultantPresenceValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrSurgeryDetails().tabGenDet().cmbConsultantPresence().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ConsultantPresence existingInstance = (ims.core.vo.lookups.ConsultantPresence)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbConsultantPresenceLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ConsultantPresence)
		{
			ims.core.vo.lookups.ConsultantPresence instance = (ims.core.vo.lookups.ConsultantPresence)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbConsultantPresenceLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ConsultantPresence existingInstance = (ims.core.vo.lookups.ConsultantPresence)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrSurgeryDetails().tabGenDet().cmbConsultantPresence().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbConsultantPresenceLookup()
	{
		this.form.lyrSurgeryDetails().tabGenDet().cmbConsultantPresence().clear();
		ims.core.vo.lookups.ConsultantPresenceCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getConsultantPresence(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrSurgeryDetails().tabGenDet().cmbConsultantPresence().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbConsultantPresenceLookupValue(int id)
	{
		ims.core.vo.lookups.ConsultantPresence instance = ims.core.vo.lookups.LookupHelper.getConsultantPresenceInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrSurgeryDetails().tabGenDet().cmbConsultantPresence().setValue(instance);
	}
	protected final void defaultcmbConsultantPresenceLookupValue()
	{
		this.form.lyrSurgeryDetails().tabGenDet().cmbConsultantPresence().setValue((ims.core.vo.lookups.ConsultantPresence)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ConsultantPresence.class, engine.getFormName().getID(), ims.core.vo.lookups.ConsultantPresence.TYPE_ID));
	}
	protected final void oncmbProcedureIntentValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrSurgeryDetails().tabGenDet().cmbProcedureIntent().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ProcedureIntent existingInstance = (ims.core.vo.lookups.ProcedureIntent)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbProcedureIntentLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ProcedureIntent)
		{
			ims.core.vo.lookups.ProcedureIntent instance = (ims.core.vo.lookups.ProcedureIntent)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbProcedureIntentLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ProcedureIntent existingInstance = (ims.core.vo.lookups.ProcedureIntent)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrSurgeryDetails().tabGenDet().cmbProcedureIntent().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbProcedureIntentLookup()
	{
		this.form.lyrSurgeryDetails().tabGenDet().cmbProcedureIntent().clear();
		ims.core.vo.lookups.ProcedureIntentCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getProcedureIntent(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrSurgeryDetails().tabGenDet().cmbProcedureIntent().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbProcedureIntentLookupValue(int id)
	{
		ims.core.vo.lookups.ProcedureIntent instance = ims.core.vo.lookups.LookupHelper.getProcedureIntentInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrSurgeryDetails().tabGenDet().cmbProcedureIntent().setValue(instance);
	}
	protected final void defaultcmbProcedureIntentLookupValue()
	{
		this.form.lyrSurgeryDetails().tabGenDet().cmbProcedureIntent().setValue((ims.core.vo.lookups.ProcedureIntent)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ProcedureIntent.class, engine.getFormName().getID(), ims.core.vo.lookups.ProcedureIntent.TYPE_ID));
	}
	protected final void oncmbASAGradeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrSurgeryDetails().tabGenDet().cmbASAGrade().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.SurgeryASAGrade existingInstance = (ims.core.vo.lookups.SurgeryASAGrade)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbASAGradeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.SurgeryASAGrade)
		{
			ims.core.vo.lookups.SurgeryASAGrade instance = (ims.core.vo.lookups.SurgeryASAGrade)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbASAGradeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.SurgeryASAGrade existingInstance = (ims.core.vo.lookups.SurgeryASAGrade)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrSurgeryDetails().tabGenDet().cmbASAGrade().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbASAGradeLookup()
	{
		this.form.lyrSurgeryDetails().tabGenDet().cmbASAGrade().clear();
		ims.core.vo.lookups.SurgeryASAGradeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSurgeryASAGrade(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrSurgeryDetails().tabGenDet().cmbASAGrade().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbASAGradeLookupValue(int id)
	{
		ims.core.vo.lookups.SurgeryASAGrade instance = ims.core.vo.lookups.LookupHelper.getSurgeryASAGradeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrSurgeryDetails().tabGenDet().cmbASAGrade().setValue(instance);
	}
	protected final void defaultcmbASAGradeLookupValue()
	{
		this.form.lyrSurgeryDetails().tabGenDet().cmbASAGrade().setValue((ims.core.vo.lookups.SurgeryASAGrade)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.SurgeryASAGrade.class, engine.getFormName().getID(), ims.core.vo.lookups.SurgeryASAGrade.TYPE_ID));
	}
	protected final void oncmbDischargeDestinationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrSurgeryDetails().tabGenDet().cmbDischargeDestination().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.SurgeryDischargeDestination existingInstance = (ims.clinical.vo.lookups.SurgeryDischargeDestination)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDischargeDestinationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.SurgeryDischargeDestination)
		{
			ims.clinical.vo.lookups.SurgeryDischargeDestination instance = (ims.clinical.vo.lookups.SurgeryDischargeDestination)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDischargeDestinationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.SurgeryDischargeDestination existingInstance = (ims.clinical.vo.lookups.SurgeryDischargeDestination)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrSurgeryDetails().tabGenDet().cmbDischargeDestination().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDischargeDestinationLookup()
	{
		this.form.lyrSurgeryDetails().tabGenDet().cmbDischargeDestination().clear();
		ims.clinical.vo.lookups.SurgeryDischargeDestinationCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getSurgeryDischargeDestination(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrSurgeryDetails().tabGenDet().cmbDischargeDestination().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDischargeDestinationLookupValue(int id)
	{
		ims.clinical.vo.lookups.SurgeryDischargeDestination instance = ims.clinical.vo.lookups.LookupHelper.getSurgeryDischargeDestinationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrSurgeryDetails().tabGenDet().cmbDischargeDestination().setValue(instance);
	}
	protected final void defaultcmbDischargeDestinationLookupValue()
	{
		this.form.lyrSurgeryDetails().tabGenDet().cmbDischargeDestination().setValue((ims.clinical.vo.lookups.SurgeryDischargeDestination)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.SurgeryDischargeDestination.class, engine.getFormName().getID(), ims.clinical.vo.lookups.SurgeryDischargeDestination.TYPE_ID));
	}
	protected final void oncmbProcedureTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrSurgeryDetails().tabProc().cmbProcedureType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ProcedureType existingInstance = (ims.core.vo.lookups.ProcedureType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbProcedureTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ProcedureType)
		{
			ims.core.vo.lookups.ProcedureType instance = (ims.core.vo.lookups.ProcedureType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbProcedureTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ProcedureType existingInstance = (ims.core.vo.lookups.ProcedureType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrSurgeryDetails().tabProc().cmbProcedureType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbProcedureTypeLookup()
	{
		this.form.lyrSurgeryDetails().tabProc().cmbProcedureType().clear();
		ims.core.vo.lookups.ProcedureTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getProcedureType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrSurgeryDetails().tabProc().cmbProcedureType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbProcedureTypeLookupValue(int id)
	{
		ims.core.vo.lookups.ProcedureType instance = ims.core.vo.lookups.LookupHelper.getProcedureTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrSurgeryDetails().tabProc().cmbProcedureType().setValue(instance);
	}
	protected final void defaultcmbProcedureTypeLookupValue()
	{
		this.form.lyrSurgeryDetails().tabProc().cmbProcedureType().setValue((ims.core.vo.lookups.ProcedureType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ProcedureType.class, engine.getFormName().getID(), ims.core.vo.lookups.ProcedureType.TYPE_ID));
	}
	protected final void bindgrdAssistantColGradeLookup()
	{
		this.form.lyrSurgeryDetails().tabProc().grdAssistant().ColGradeComboBox().clear();
		ims.core.vo.lookups.MedicGradeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMedicGrade(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrSurgeryDetails().tabProc().grdAssistant().ColGradeComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void oncmbSurgeonGradeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrSurgeryDetails().tabProc().cmbSurgeonGrade().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MedicGrade existingInstance = (ims.core.vo.lookups.MedicGrade)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSurgeonGradeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.MedicGrade)
		{
			ims.core.vo.lookups.MedicGrade instance = (ims.core.vo.lookups.MedicGrade)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSurgeonGradeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MedicGrade existingInstance = (ims.core.vo.lookups.MedicGrade)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrSurgeryDetails().tabProc().cmbSurgeonGrade().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSurgeonGradeLookup()
	{
		this.form.lyrSurgeryDetails().tabProc().cmbSurgeonGrade().clear();
		ims.core.vo.lookups.MedicGradeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMedicGrade(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrSurgeryDetails().tabProc().cmbSurgeonGrade().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSurgeonGradeLookupValue(int id)
	{
		ims.core.vo.lookups.MedicGrade instance = ims.core.vo.lookups.LookupHelper.getMedicGradeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrSurgeryDetails().tabProc().cmbSurgeonGrade().setValue(instance);
	}
	protected final void defaultcmbSurgeonGradeLookupValue()
	{
		this.form.lyrSurgeryDetails().tabProc().cmbSurgeonGrade().setValue((ims.core.vo.lookups.MedicGrade)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.MedicGrade.class, engine.getFormName().getID(), ims.core.vo.lookups.MedicGrade.TYPE_ID));
	}
	protected final void oncmbAnaesthetistGradeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrSurgeryDetails().tabProc().cmbAnaesthetistGrade().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MedicGrade existingInstance = (ims.core.vo.lookups.MedicGrade)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAnaesthetistGradeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.MedicGrade)
		{
			ims.core.vo.lookups.MedicGrade instance = (ims.core.vo.lookups.MedicGrade)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAnaesthetistGradeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MedicGrade existingInstance = (ims.core.vo.lookups.MedicGrade)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrSurgeryDetails().tabProc().cmbAnaesthetistGrade().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAnaesthetistGradeLookup()
	{
		this.form.lyrSurgeryDetails().tabProc().cmbAnaesthetistGrade().clear();
		ims.core.vo.lookups.MedicGradeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMedicGrade(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrSurgeryDetails().tabProc().cmbAnaesthetistGrade().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAnaesthetistGradeLookupValue(int id)
	{
		ims.core.vo.lookups.MedicGrade instance = ims.core.vo.lookups.LookupHelper.getMedicGradeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrSurgeryDetails().tabProc().cmbAnaesthetistGrade().setValue(instance);
	}
	protected final void defaultcmbAnaesthetistGradeLookupValue()
	{
		this.form.lyrSurgeryDetails().tabProc().cmbAnaesthetistGrade().setValue((ims.core.vo.lookups.MedicGrade)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.MedicGrade.class, engine.getFormName().getID(), ims.core.vo.lookups.MedicGrade.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.oncology.domain.SurgeryDetails domain;
}
