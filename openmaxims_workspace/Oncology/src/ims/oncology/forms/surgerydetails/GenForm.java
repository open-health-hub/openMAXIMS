//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.surgerydetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrSurgeryDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabGenDetContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbSpecialtyFuncComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.SpecialtyFunctionCode value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.SpecialtyFunctionCode value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.SpecialtyFunctionCode value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.SpecialtyFunctionCode value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.SpecialtyFunctionCode value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.SpecialtyFunctionCode getValue()
				{
					return (ims.clinical.vo.lookups.SpecialtyFunctionCode)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.SpecialtyFunctionCode value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbConsultantPresenceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ConsultantPresence value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ConsultantPresence value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ConsultantPresence value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ConsultantPresence value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ConsultantPresence value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ConsultantPresence getValue()
				{
					return (ims.core.vo.lookups.ConsultantPresence)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ConsultantPresence value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbProcedureIntentComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ProcedureIntent value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ProcedureIntent value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ProcedureIntent value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ProcedureIntent value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ProcedureIntent value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ProcedureIntent getValue()
				{
					return (ims.core.vo.lookups.ProcedureIntent)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ProcedureIntent value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbASAGradeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.SurgeryASAGrade value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.SurgeryASAGrade value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.SurgeryASAGrade value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.SurgeryASAGrade value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.SurgeryASAGrade value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.SurgeryASAGrade getValue()
				{
					return (ims.core.vo.lookups.SurgeryASAGrade)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.SurgeryASAGrade value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDischargeDestinationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.SurgeryDischargeDestination value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.SurgeryDischargeDestination value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.SurgeryDischargeDestination value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.SurgeryDischargeDestination value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.SurgeryDischargeDestination value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.SurgeryDischargeDestination getValue()
				{
					return (ims.clinical.vo.lookups.SurgeryDischargeDestination)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.SurgeryDischargeDestination value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbHospitalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.OrgLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.OrgLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.OrgLiteVo getValue()
				{
					return (ims.core.vo.OrgLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.OrgLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdSubProceduresRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSubProceduresRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolProcedureReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolProcedureOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolProcedure()
				{
					return (String)super.row.get(0);
				}
				public void setcolProcedure(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolProcedureTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.clinical.vo.SubProceduresVo getValue()
				{
					return (ims.clinical.vo.SubProceduresVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.SubProceduresVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSubProceduresRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSubProceduresRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSubProceduresRow get(int index)
				{
					return new grdSubProceduresRow(super.collection.get(index));
				}
				public grdSubProceduresRow newRow()
				{
					return new grdSubProceduresRow(super.collection.newRow());
				}
				public grdSubProceduresRow newRow(boolean autoSelect)
				{
					return new grdSubProceduresRow(super.collection.newRow(autoSelect));
				}
				public grdSubProceduresRow newRowAt(int index)
				{
					return new grdSubProceduresRow(super.collection.newRowAt(index));
				}
				public grdSubProceduresRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSubProceduresRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSubProceduresGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.SubProceduresVoCollection getValues()
				{
					ims.clinical.vo.SubProceduresVoCollection listOfValues = new ims.clinical.vo.SubProceduresVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.SubProceduresVo getValue()
				{
					return (ims.clinical.vo.SubProceduresVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.SubProceduresVo value)
				{
					super.grid.setValue(value);
				}
				public grdSubProceduresRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSubProceduresRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSubProceduresRowCollection getRows()
				{
					return new grdSubProceduresRowCollection(super.grid.getRows());
				}
				public grdSubProceduresRow getRowByValue(ims.clinical.vo.SubProceduresVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSubProceduresRow(row);
				}
				public void setcolProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
		
			public static class Group1RadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 264, 40, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "All Procedures", startTabIndex.intValue() + 3);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 128, 40, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 2);
				}
				public void setText(Group1Enumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public Group1Enumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return Group1Enumeration.None;
						case 0: return Group1Enumeration.rdoAll;
						case 1: return Group1Enumeration.rdoSpecialtyHotlist;
					}
					return null;
				}
				public void setValue(Group1Enumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(Group1Enumeration.None.id);
				}
				public boolean isEnabled(Group1Enumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(Group1Enumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(Group1Enumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(Group1Enumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class Group1Enumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static Group1Enumeration None = new Group1Enumeration(-1);
				public static Group1Enumeration rdoAll = new Group1Enumeration(0);
				public static Group1Enumeration rdoSpecialtyHotlist = new Group1Enumeration(1);
				private Group1Enumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((Group1Enumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 152, 182, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customControlMosConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 1006, skipContextValidation);
				//ims.framework.Control m_customControlMosConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(152), new Integer(182), new Integer(216), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1006), m_customControlMosConsultantForm, instance1 } );
				ims.framework.Control m_customControlMosConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1006), m_customControlMosConsultantForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlMosConsultantControl);
				Menu[] menus1 = m_customControlMosConsultantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 400, 392, 384, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper4.getSize(), instance2, startTabIndex.intValue() + 2016, skipContextValidation);
				//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(400), new Integer(392), new Integer(384), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2016), m_customControlAuthoringInfoForm, instance2 } );
				ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2016), m_customControlAuthoringInfoForm, instance2, Boolean.FALSE } );
				super.addControl(m_customControlAuthoringInfoControl);
				Menu[] menus2 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
				ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 776, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_customControlProcedureForm = loader.loadComponent(123133, appForm, startControlID * 10 + 3000, anchoringHelper5.getSize(), instance3, startTabIndex.intValue() + 4, skipContextValidation);
				//ims.framework.Control m_customControlProcedureControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(8), new Integer(56), new Integer(776), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_customControlProcedureForm, instance3 } );
				ims.framework.Control m_customControlProcedureControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_customControlProcedureForm, instance3, Boolean.FALSE } );
				super.addControl(m_customControlProcedureControl);
				Menu[] menus3 = m_customControlProcedureForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus3.length; x++)
				{
					form.registerMenu(menus3[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty Function:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 184, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant Surgeon:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 400, 192, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant Presence:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 400, 144, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure Intent:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 144, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 264, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 304, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgery Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 432, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ASA Grade:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 392, 128, 12, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Destination:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 352, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Date:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 152, 304, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2009), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 152, 264, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2008), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 152, 352, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 2010), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 152, 224, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbSpecialtyFuncTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 2007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSpecialtyFuncTemp);
				cmbSpecialtyFuncComboBox cmbSpecialtyFunc = (cmbSpecialtyFuncComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyFuncComboBox.class, m_cmbSpecialtyFuncTemp);
				super.addComboBox(cmbSpecialtyFunc);
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 528, 192, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbConsultantPresenceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 2014), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbConsultantPresenceTemp);
				cmbConsultantPresenceComboBox cmbConsultantPresence = (cmbConsultantPresenceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbConsultantPresenceComboBox.class, m_cmbConsultantPresenceTemp);
				super.addComboBox(cmbConsultantPresence);
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 528, 144, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbProcedureIntentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 2013), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbProcedureIntentTemp);
				cmbProcedureIntentComboBox cmbProcedureIntent = (cmbProcedureIntentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProcedureIntentComboBox.class, m_cmbProcedureIntentTemp);
				super.addComboBox(cmbProcedureIntent);
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 152, 432, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbASAGradeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 2012), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbASAGradeTemp);
				cmbASAGradeComboBox cmbASAGrade = (cmbASAGradeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbASAGradeComboBox.class, m_cmbASAGradeTemp);
				super.addComboBox(cmbASAGrade);
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 152, 392, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbDischargeDestinationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 2011), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDischargeDestinationTemp);
				cmbDischargeDestinationComboBox cmbDischargeDestination = (cmbDischargeDestinationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDischargeDestinationComboBox.class, m_cmbDischargeDestinationTemp);
				super.addComboBox(cmbDischargeDestination);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 152, 144, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbHospitalTemp);
				qmbHospitalComboBox qmbHospital = (qmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbHospitalComboBox.class, m_qmbHospitalTemp);
				super.addComboBox(qmbHospital);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 400, 224, 368, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdSubProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 2015), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSubProceduresTemp);
				grdSubProceduresGrid grdSubProcedures = (grdSubProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSubProceduresGrid.class, m_grdSubProceduresTemp);
				grdSubProcedures.addStringColumn("Sub Procedures", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSubProcedures);
		
				// RadioButton Controls
				RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(0), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroup1);
				Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
				Group1.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(Group1);
			}

			public ims.core.forms.mosquery.IComponent customControlMosConsultant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlMosConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlMosConsultantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlMosConsultantVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlMosConsultantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlMosConsultantEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlAuthoringInfoVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlAuthoringInfoVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlAuthoringInfoEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlAuthoringInfoEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public ims.clinical.forms.clinicalcoding.IComponent customControlProcedure()
			{
				return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setcustomControlProcedureValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setcustomControlProcedureVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean iscustomControlProcedureVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setcustomControlProcedureEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean iscustomControlProcedureEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public DateControl dteSurgery()
			{
				return (DateControl)super.getControl(13);
			}
			public DateControl dteAdmission()
			{
				return (DateControl)super.getControl(14);
			}
			public DateControl dteDischarge()
			{
				return (DateControl)super.getControl(15);
			}
			public cmbSpecialtyFuncComboBox cmbSpecialtyFunc()
			{
				return (cmbSpecialtyFuncComboBox)super.getComboBox(0);
			}
			public cmbConsultantPresenceComboBox cmbConsultantPresence()
			{
				return (cmbConsultantPresenceComboBox)super.getComboBox(1);
			}
			public cmbProcedureIntentComboBox cmbProcedureIntent()
			{
				return (cmbProcedureIntentComboBox)super.getComboBox(2);
			}
			public cmbASAGradeComboBox cmbASAGrade()
			{
				return (cmbASAGradeComboBox)super.getComboBox(3);
			}
			public cmbDischargeDestinationComboBox cmbDischargeDestination()
			{
				return (cmbDischargeDestinationComboBox)super.getComboBox(4);
			}
			public qmbHospitalComboBox qmbHospital()
			{
				return (qmbHospitalComboBox)super.getComboBox(5);
			}
			public grdSubProceduresGrid grdSubProcedures()
			{
				return (grdSubProceduresGrid)super.getGrid(0);
			}
			public Group1RadioButton Group1()
			{
				return (Group1RadioButton)super.getRadioButton(0);
			}
		}
		public static class tabProcContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbProcedureTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ProcedureType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ProcedureType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ProcedureType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ProcedureType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ProcedureType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ProcedureType getValue()
				{
					return (ims.core.vo.lookups.ProcedureType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ProcedureType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSurgeonGradeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.MedicGrade value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.MedicGrade value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.MedicGrade value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.MedicGrade value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.MedicGrade value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.MedicGrade getValue()
				{
					return (ims.core.vo.lookups.MedicGrade)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.MedicGrade value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbAnaesthetistGradeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.MedicGrade value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.MedicGrade value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.MedicGrade value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.MedicGrade value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.MedicGrade value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.MedicGrade getValue()
				{
					return (ims.core.vo.lookups.MedicGrade)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.MedicGrade value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdAssistantRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAssistantRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColAssistantReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColAssistantReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColAssistantOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getColAssistant()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellColAssistantTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColGradeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColGradeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColGradeOpened()
				{
					super.row.showOpened(1);
				}
				public ims.core.vo.lookups.MedicGrade getColGrade()
				{
					return (ims.core.vo.lookups.MedicGrade)super.row.get(1);
				}
				public void setColGrade(ims.core.vo.lookups.MedicGrade value)
				{
					super.row.set(1, value, true);
				}
				public void setCellColGradeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.clinical.vo.SurgeryAssistantsVo getValue()
				{
					return (ims.clinical.vo.SurgeryAssistantsVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.SurgeryAssistantsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAssistantRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAssistantRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAssistantRow get(int index)
				{
					return new grdAssistantRow(super.collection.get(index));
				}
				public grdAssistantRow newRow()
				{
					return new grdAssistantRow(super.collection.newRow());
				}
				public grdAssistantRow newRow(boolean autoSelect)
				{
					return new grdAssistantRow(super.collection.newRow(autoSelect));
				}
				public grdAssistantRow newRowAt(int index)
				{
					return new grdAssistantRow(super.collection.newRowAt(index));
				}
				public grdAssistantRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAssistantRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAssistantGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public ims.clinical.vo.SurgeryAssistantsVoCollection getValues()
				{
					ims.clinical.vo.SurgeryAssistantsVoCollection listOfValues = new ims.clinical.vo.SurgeryAssistantsVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.SurgeryAssistantsVo getValue()
				{
					return (ims.clinical.vo.SurgeryAssistantsVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.SurgeryAssistantsVo value)
				{
					super.grid.setValue(value);
				}
				public grdAssistantRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAssistantRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAssistantRowCollection getRows()
				{
					return new grdAssistantRowCollection(super.grid.getRows());
				}
				public grdAssistantRow getRowByValue(ims.clinical.vo.SurgeryAssistantsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAssistantRow(row);
				}
				public void setColAssistantHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColAssistantHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColGradeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColGradeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public GridComboBox ColGradeComboBox()
				{
					return new GridComboBox(super.grid, 1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 152, 102, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customControlMosAnaesthetistForm = loader.loadComponent(102256, appForm, startControlID * 10 + 4000, anchoringHelper26.getSize(), instance1, startTabIndex.intValue() + 4022, skipContextValidation);
				//ims.framework.Control m_customControlMosAnaesthetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(152), new Integer(102), new Integer(248), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4022), m_customControlMosAnaesthetistForm, instance1 } );
				ims.framework.Control m_customControlMosAnaesthetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1028),  new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4022), m_customControlMosAnaesthetistForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlMosAnaesthetistControl);
				Menu[] menus1 = m_customControlMosAnaesthetistForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 152, 24, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customControlMosSurgeonForm = loader.loadComponent(102256, appForm, startControlID * 10 + 5000, anchoringHelper27.getSize(), instance2, startTabIndex.intValue() + 3018, skipContextValidation);
				//ims.framework.Control m_customControlMosSurgeonControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(152), new Integer(24), new Integer(248), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3018), m_customControlMosSurgeonForm, instance2 } );
				ims.framework.Control m_customControlMosSurgeonControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1030),  new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3018), m_customControlMosSurgeonForm, instance2, Boolean.FALSE } );
				super.addControl(m_customControlMosSurgeonControl);
				Menu[] menus2 = m_customControlMosSurgeonForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 264, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 153, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgery Date Time ( End):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 184, 159, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgery Date/Time (Start):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 144, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetist's Grade", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgeon's Grade:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 104, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetist:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 16, 26, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgeon:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 184, 224, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 5030), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 184, 184, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 5026), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 152, 264, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbProcedureTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 5034), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbProcedureTypeTemp);
				cmbProcedureTypeComboBox cmbProcedureType = (cmbProcedureTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProcedureTypeComboBox.class, m_cmbProcedureTypeTemp);
				super.addComboBox(cmbProcedureType);
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 152, 64, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbSurgeonGradeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 4020), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSurgeonGradeTemp);
				cmbSurgeonGradeComboBox cmbSurgeonGrade = (cmbSurgeonGradeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSurgeonGradeComboBox.class, m_cmbSurgeonGradeTemp);
				super.addComboBox(cmbSurgeonGrade);
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 152, 144, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbAnaesthetistGradeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 5024), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAnaesthetistGradeTemp);
				cmbAnaesthetistGradeComboBox cmbAnaesthetistGrade = (cmbAnaesthetistGradeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaesthetistGradeComboBox.class, m_cmbAnaesthetistGradeTemp);
				super.addComboBox(cmbAnaesthetistGrade);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 408, 24, 392, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdAssistantTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 5037), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAssistantTemp);
				grdAssistantGrid grdAssistant = (grdAssistantGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAssistantGrid.class, m_grdAssistantTemp);
				grdAssistant.addMutableComboBoxColumn("Assistants", 0, 0, 150, false, true, true, false, true, true, -1);
				grdAssistant.addComboBoxColumn("Grade", 0, 0, -1, false, true, false, false, true, -1);
				super.addGrid(grdAssistant);
		
				// Time Controls
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 320, 224, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 5032), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 320, 184, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 5028), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
			}

			public ims.core.forms.mosquery.IComponent customControlMosAnaesthetist()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlMosAnaesthetistValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlMosAnaesthetistVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlMosAnaesthetistVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlMosAnaesthetistEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlMosAnaesthetistEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent customControlMosSurgeon()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlMosSurgeonValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlMosSurgeonVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlMosSurgeonVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlMosSurgeonEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlMosSurgeonEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public DateControl dteEndSurgery()
			{
				return (DateControl)super.getControl(9);
			}
			public DateControl dteStartSurgery()
			{
				return (DateControl)super.getControl(10);
			}
			public cmbProcedureTypeComboBox cmbProcedureType()
			{
				return (cmbProcedureTypeComboBox)super.getComboBox(0);
			}
			public cmbSurgeonGradeComboBox cmbSurgeonGrade()
			{
				return (cmbSurgeonGradeComboBox)super.getComboBox(1);
			}
			public cmbAnaesthetistGradeComboBox cmbAnaesthetistGrade()
			{
				return (cmbAnaesthetistGradeComboBox)super.getComboBox(2);
			}
			public grdAssistantGrid grdAssistant()
			{
				return (grdAssistantGrid)super.getGrid(0);
			}
			public TimeControl timEndSurgery()
			{
				return (TimeControl)super.getControl(15);
			}
			public TimeControl timStartSurgery()
			{
				return (TimeControl)super.getControl(16);
			}
		}
		public static class tabPreOpPossumContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 792, 520, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_customControlPreOpPForm = loader.loadComponent(127109, appForm, startControlID * 10 + 6000, anchoringHelper43.getSize(), instance1, startTabIndex.intValue() + 5047, skipContextValidation);
				//ims.framework.Control m_customControlPreOpPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(8), new Integer(8), new Integer(792), new Integer(520), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5047), m_customControlPreOpPForm, instance1 } );
				ims.framework.Control m_customControlPreOpPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1047),  new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5047), m_customControlPreOpPForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlPreOpPControl);
				Menu[] menus1 = m_customControlPreOpPForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.assessment.forms.structuralassessment.IComponent customControlPreOpP()
			{
				return (ims.assessment.forms.structuralassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlPreOpPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlPreOpPVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlPreOpPVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlPreOpPEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlPreOpPEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabStructFindContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 792, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_customControlProcedureFindingForm = loader.loadComponent(127114, appForm, startControlID * 10 + 7000, anchoringHelper44.getSize(), instance1, startTabIndex.intValue() + 6049, skipContextValidation);
				//ims.framework.Control m_customControlProcedureFindingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(8), new Integer(32), new Integer(792), new Integer(496), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 6049), m_customControlProcedureFindingForm, instance1 } );
				ims.framework.Control m_customControlProcedureFindingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1049),  new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 6049), m_customControlProcedureFindingForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlProcedureFindingControl);
				Menu[] menus1 = m_customControlProcedureFindingForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Button Controls
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 720, 8, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Favourites", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public ims.assessment.forms.graphicalassessment.IComponent customControlProcedureFinding()
			{
				return (ims.assessment.forms.graphicalassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlProcedureFindingValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlProcedureFindingVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlProcedureFindingVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlProcedureFindingEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlProcedureFindingEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Button btnGraphicFavourites()
			{
				return (Button)super.getControl(1);
			}
		}
		public static class tabProcDetContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 792, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_customControlProcedureDetailsForm = loader.loadComponent(127109, appForm, startControlID * 10 + 8000, anchoringHelper46.getSize(), instance1, startTabIndex.intValue() + 7050, skipContextValidation);
				//ims.framework.Control m_customControlProcedureDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(8), new Integer(32), new Integer(792), new Integer(496), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 7050), m_customControlProcedureDetailsForm, instance1 } );
				ims.framework.Control m_customControlProcedureDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1052),  new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 7050), m_customControlProcedureDetailsForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlProcedureDetailsControl);
				Menu[] menus1 = m_customControlProcedureDetailsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Button Controls
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 720, 8, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 8051), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Favourites", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public ims.assessment.forms.structuralassessment.IComponent customControlProcedureDetails()
			{
				return (ims.assessment.forms.structuralassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlProcedureDetailsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlProcedureDetailsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlProcedureDetailsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlProcedureDetailsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlProcedureDetailsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Button btnProcedureFavourites()
			{
				return (Button)super.getControl(1);
			}
		}
		public static class tabOperativePossumContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 792, 520, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_customControlOperativePossumForm = loader.loadComponent(127109, appForm, startControlID * 10 + 9000, anchoringHelper48.getSize(), instance1, startTabIndex.intValue() + 8052, skipContextValidation);
				//ims.framework.Control m_customControlOperativePossumControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(8), new Integer(8), new Integer(792), new Integer(520), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8052), m_customControlOperativePossumForm, instance1 } );
				ims.framework.Control m_customControlOperativePossumControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1055),  new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8052), m_customControlOperativePossumForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlOperativePossumControl);
				Menu[] menus1 = m_customControlOperativePossumForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.assessment.forms.structuralassessment.IComponent customControlOperativePossum()
			{
				return (ims.assessment.forms.structuralassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlOperativePossumValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlOperativePossumVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlOperativePossumVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlOperativePossumEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlOperativePossumEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabGenDet = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabGenDetContainer m_tabGenDetContainer = (tabGenDetContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGenDetContainer.class, m_tabGenDet, factory);
			super.addContainer(m_tabGenDet, m_tabGenDetContainer);
			ims.framework.utils.SizeInfo m_tabGenDetDesignSize = new ims.framework.utils.SizeInfo(816, 560);
			ims.framework.utils.SizeInfo m_tabGenDetRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper49.getWidth(), anchoringHelper49.getHeight());
			m_tabGenDetContainer.setContext(form, appForm, m_tabGenDet, loader, contextMenus, startControlID, m_tabGenDetDesignSize, m_tabGenDetRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabProc = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Procedure", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabProcContainer m_tabProcContainer = (tabProcContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabProcContainer.class, m_tabProc, factory);
			super.addContainer(m_tabProc, m_tabProcContainer);
			ims.framework.utils.SizeInfo m_tabProcDesignSize = new ims.framework.utils.SizeInfo(816, 560);
			ims.framework.utils.SizeInfo m_tabProcRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper50.getWidth(), anchoringHelper50.getHeight());
			m_tabProcContainer.setContext(form, appForm, m_tabProc, loader, contextMenus, startControlID, m_tabProcDesignSize, m_tabProcRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPreOpPossum = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"PreOperative - Possum", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPreOpPossumContainer m_tabPreOpPossumContainer = (tabPreOpPossumContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPreOpPossumContainer.class, m_tabPreOpPossum, factory);
			super.addContainer(m_tabPreOpPossum, m_tabPreOpPossumContainer);
			ims.framework.utils.SizeInfo m_tabPreOpPossumDesignSize = new ims.framework.utils.SizeInfo(816, 560);
			ims.framework.utils.SizeInfo m_tabPreOpPossumRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper51.getWidth(), anchoringHelper51.getHeight());
			m_tabPreOpPossumContainer.setContext(form, appForm, m_tabPreOpPossum, loader, contextMenus, startControlID, m_tabPreOpPossumDesignSize, m_tabPreOpPossumRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabStructFind = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Findings", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabStructFindContainer m_tabStructFindContainer = (tabStructFindContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabStructFindContainer.class, m_tabStructFind, factory);
			super.addContainer(m_tabStructFind, m_tabStructFindContainer);
			ims.framework.utils.SizeInfo m_tabStructFindDesignSize = new ims.framework.utils.SizeInfo(816, 560);
			ims.framework.utils.SizeInfo m_tabStructFindRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper52.getWidth(), anchoringHelper52.getHeight());
			m_tabStructFindContainer.setContext(form, appForm, m_tabStructFind, loader, contextMenus, startControlID, m_tabStructFindDesignSize, m_tabStructFindRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabProcDet = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Procedure Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabProcDetContainer m_tabProcDetContainer = (tabProcDetContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabProcDetContainer.class, m_tabProcDet, factory);
			super.addContainer(m_tabProcDet, m_tabProcDetContainer);
			ims.framework.utils.SizeInfo m_tabProcDetDesignSize = new ims.framework.utils.SizeInfo(816, 560);
			ims.framework.utils.SizeInfo m_tabProcDetRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper53.getWidth(), anchoringHelper53.getHeight());
			m_tabProcDetContainer.setContext(form, appForm, m_tabProcDet, loader, contextMenus, startControlID, m_tabProcDetDesignSize, m_tabProcDetRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOperativePossum = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Operative - Possum", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOperativePossumContainer m_tabOperativePossumContainer = (tabOperativePossumContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOperativePossumContainer.class, m_tabOperativePossum, factory);
			super.addContainer(m_tabOperativePossum, m_tabOperativePossumContainer);
			ims.framework.utils.SizeInfo m_tabOperativePossumDesignSize = new ims.framework.utils.SizeInfo(816, 560);
			ims.framework.utils.SizeInfo m_tabOperativePossumRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper54.getWidth(), anchoringHelper54.getHeight());
			m_tabOperativePossumContainer.setContext(form, appForm, m_tabOperativePossum, loader, contextMenus, startControlID, m_tabOperativePossumDesignSize, m_tabOperativePossumRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabGenDet().setVisible(false);
			tabProc().setVisible(false);
			tabPreOpPossum().setVisible(false);
			tabStructFind().setVisible(false);
			tabProcDet().setVisible(false);
			tabOperativePossum().setVisible(false);
		}
		public void settabGenDetEnabled(boolean value)
		{
			tabGenDet().setEnabled(value);
		}
		public void settabProcEnabled(boolean value)
		{
			tabProc().setEnabled(value);
		}
		public void settabPreOpPossumEnabled(boolean value)
		{
			tabPreOpPossum().setEnabled(value);
		}
		public void settabStructFindEnabled(boolean value)
		{
			tabStructFind().setEnabled(value);
		}
		public void settabProcDetEnabled(boolean value)
		{
			tabProcDet().setEnabled(value);
		}
		public void settabOperativePossumEnabled(boolean value)
		{
			tabOperativePossum().setEnabled(value);
		}
		public void showtabGenDet()
		{
			tabProc().setVisible(false);
			tabPreOpPossum().setVisible(false);
			tabStructFind().setVisible(false);
			tabProcDet().setVisible(false);
			tabOperativePossum().setVisible(false);
			tabGenDet().setVisible(true);
		}
		public void showtabProc()
		{
			tabGenDet().setVisible(false);
			tabPreOpPossum().setVisible(false);
			tabStructFind().setVisible(false);
			tabProcDet().setVisible(false);
			tabOperativePossum().setVisible(false);
			tabProc().setVisible(true);
		}
		public void showtabPreOpPossum()
		{
			tabGenDet().setVisible(false);
			tabProc().setVisible(false);
			tabStructFind().setVisible(false);
			tabProcDet().setVisible(false);
			tabOperativePossum().setVisible(false);
			tabPreOpPossum().setVisible(true);
		}
		public void showtabStructFind()
		{
			tabGenDet().setVisible(false);
			tabProc().setVisible(false);
			tabPreOpPossum().setVisible(false);
			tabProcDet().setVisible(false);
			tabOperativePossum().setVisible(false);
			tabStructFind().setVisible(true);
		}
		public void showtabProcDet()
		{
			tabGenDet().setVisible(false);
			tabProc().setVisible(false);
			tabPreOpPossum().setVisible(false);
			tabStructFind().setVisible(false);
			tabOperativePossum().setVisible(false);
			tabProcDet().setVisible(true);
		}
		public void showtabOperativePossum()
		{
			tabGenDet().setVisible(false);
			tabProc().setVisible(false);
			tabPreOpPossum().setVisible(false);
			tabStructFind().setVisible(false);
			tabProcDet().setVisible(false);
			tabOperativePossum().setVisible(true);
		}

		public tabGenDetContainer tabGenDet()
		{
			return (tabGenDetContainer)super.layers.get(0);
		}
		public tabProcContainer tabProc()
		{
			return (tabProcContainer)super.layers.get(1);
		}
		public tabPreOpPossumContainer tabPreOpPossum()
		{
			return (tabPreOpPossumContainer)super.layers.get(2);
		}
		public tabStructFindContainer tabStructFind()
		{
			return (tabStructFindContainer)super.layers.get(3);
		}
		public tabProcDetContainer tabProcDet()
		{
			return (tabProcDetContainer)super.layers.get(4);
		}
		public tabOperativePossumContainer tabOperativePossum()
		{
			return (tabOperativePossumContainer)super.layers.get(5);
		}
	}
	public static class recbrPreviousSurgeriesRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.SurgeryDetailsListVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.SurgeryDetailsListVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.SurgeryDetailsListVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.SurgeryDetailsListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.clinical.vo.SurgeryDetailsListVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.clinical.vo.SurgeryDetailsListVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.clinical.vo.SurgeryDetailsListVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.clinical.vo.SurgeryDetailsListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.clinical.vo.SurgeryDetailsListVo getValue()
		{
			return (ims.clinical.vo.SurgeryDetailsListVo)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.SurgeryDetailsListVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedSurgeryDetails();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Layer Clasess
		lyrSurgeryDetailsLayer m_lyrSurgeryDetailsLayer = (lyrSurgeryDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSurgeryDetailsLayer.class, this, factory);
		super.addLayer(m_lyrSurgeryDetailsLayer);
		m_lyrSurgeryDetailsLayer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 15, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 5038), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 679, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 5042), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 759, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 5044), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 95, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 5040), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 816, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrPreviousSurgeriesTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrPreviousSurgeriesTemp);
		recbrPreviousSurgeriesRecordBrowser recbrPreviousSurgeries = (recbrPreviousSurgeriesRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrPreviousSurgeriesRecordBrowser.class, m_recbrPreviousSurgeriesTemp);
		super.addRecordBrowser(recbrPreviousSurgeries);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public lyrSurgeryDetailsLayer lyrSurgeryDetails()
	{
		return (lyrSurgeryDetailsLayer)super.getLayer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(6);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(7);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(8);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(9);
	}
	public recbrPreviousSurgeriesRecordBrowser recbrPreviousSurgeries()
	{
		return (recbrPreviousSurgeriesRecordBrowser)super.getRecordBrowser(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Oncology = new OncologyForms();
			Assessment = new AssessmentForms();
		}
		public final class OncologyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OncologyForms()
			{
				SurgeryDetailsSubProceduresDialog = new LocalFormName(125136);
			}
			public final FormName SurgeryDetailsSubProceduresDialog;
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				AssessmentFavourites = new LocalFormName(127117);
			}
			public final FormName AssessmentFavourites;
		}

		public OncologyForms Oncology;
		public AssessmentForms Assessment;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedSurgeryDetails = new ims.framework.ContextVariable("SelectedSurgeryDetails", prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier + "");
			cxl_PreOpPossumUserAssessment = new ims.framework.ContextVariable("PreOpPossumUserAssessment", prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier + "");
			cxl_OperativePossumUserAssessment = new ims.framework.ContextVariable("OperativePossumUserAssessment", prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier + "");
			cxl_ProcedureDetailsUserAssessment = new ims.framework.ContextVariable("ProcedureDetailsUserAssessment", prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier + "");
			cxl_ProcedureDetailsGraphicalUserAssessment = new ims.framework.ContextVariable("ProcedureDetailsGraphicalUserAssessment", prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsGraphicalUserAssessment_" + componentIdentifier + "");
		}
		
		public boolean getSelectedSurgeryDetailsIsNotNull()
		{
			return !cxl_SelectedSurgeryDetails.getValueIsNull(context);
		}
		public ims.clinical.vo.SurgeryDetailsVo getSelectedSurgeryDetails()
		{
			return (ims.clinical.vo.SurgeryDetailsVo)cxl_SelectedSurgeryDetails.getValue(context);
		}
		public void setSelectedSurgeryDetails(ims.clinical.vo.SurgeryDetailsVo value)
		{
			cxl_SelectedSurgeryDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSurgeryDetails = null;
		public boolean getPreOpPossumUserAssessmentIsNotNull()
		{
			return !cxl_PreOpPossumUserAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.UserAssessmentVo getPreOpPossumUserAssessment()
		{
			return (ims.assessment.vo.UserAssessmentVo)cxl_PreOpPossumUserAssessment.getValue(context);
		}
		public void setPreOpPossumUserAssessment(ims.assessment.vo.UserAssessmentVo value)
		{
			cxl_PreOpPossumUserAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreOpPossumUserAssessment = null;
		public boolean getOperativePossumUserAssessmentIsNotNull()
		{
			return !cxl_OperativePossumUserAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.UserAssessmentVo getOperativePossumUserAssessment()
		{
			return (ims.assessment.vo.UserAssessmentVo)cxl_OperativePossumUserAssessment.getValue(context);
		}
		public void setOperativePossumUserAssessment(ims.assessment.vo.UserAssessmentVo value)
		{
			cxl_OperativePossumUserAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OperativePossumUserAssessment = null;
		public boolean getProcedureDetailsUserAssessmentIsNotNull()
		{
			return !cxl_ProcedureDetailsUserAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.UserAssessmentVo getProcedureDetailsUserAssessment()
		{
			return (ims.assessment.vo.UserAssessmentVo)cxl_ProcedureDetailsUserAssessment.getValue(context);
		}
		public void setProcedureDetailsUserAssessment(ims.assessment.vo.UserAssessmentVo value)
		{
			cxl_ProcedureDetailsUserAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ProcedureDetailsUserAssessment = null;
		public boolean getProcedureDetailsGraphicalUserAssessmentIsNotNull()
		{
			return !cxl_ProcedureDetailsGraphicalUserAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.GraphicAssessmentVo getProcedureDetailsGraphicalUserAssessment()
		{
			return (ims.assessment.vo.GraphicAssessmentVo)cxl_ProcedureDetailsGraphicalUserAssessment.getValue(context);
		}
		public void setProcedureDetailsGraphicalUserAssessment(ims.assessment.vo.GraphicAssessmentVo value)
		{
			cxl_ProcedureDetailsGraphicalUserAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ProcedureDetailsGraphicalUserAssessment = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[187];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ID", "ID_GraphicAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ASSESSMENTTYPE", "AssessmentType");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ACTIVESTATUS", "ActiveStatus");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-HELPURL", "HelpUrl");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-STOREPRINTEDREPORT", "StorePrintedReport");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ASSOCIATEDREPORTFORPRINTING", "AssociatedReportForPrinting");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedSubProcedure", "BO-1003100007-ID", "ID_SubProcedures");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedSubProcedure", "BO-1003100007-SUBPROCEDUREDESCRIPTION", "SubProcedureDescription");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-ID", "ID_GraphicAssessment");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-NAME", "Name");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-ASSESSMENTTYPE", "AssessmentType");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-ACTIVESTATUS", "ActiveStatus");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-HELPURL", "HelpUrl");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-STOREPRINTEDREPORT", "StorePrintedReport");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-ASSOCIATEDREPORTFORPRINTING", "AssociatedReportForPrinting");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ID", "ID_UserAssessment");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-NAME", "Name");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-DESCRIPTION", "Description");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-HELPURL", "HelpURL");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-CATEGORY", "Category");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ISMULTIROLE", "IsMultiRole");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-ID", "ID_SurgeryDetails");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-CARECONTEXT", "CareContext");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-RESPONSIBLECONSULTANT", "ResponsibleConsultant");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-SPECIALTYFUNCTIONCODE", "SpecialtyFunctionCode");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-ADMISSIONDATE", "AdmissionDate");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-DISCHARGEDATE", "DischargeDate");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-DISCHARGEDESTINATION", "DischargeDestination");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-ASAGRADE", "ASAGrade");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-CONSULTANTPRESENCE", "ConsultantPresence");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-ANAESTHETIST", "Anaesthetist");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-ANAESTHETISTGRADE", "AnaesthetistGrade");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-PROCEDURETYPE", "ProcedureType");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__SelectedSurgeryDetails_" + componentIdentifier, "BO-1003100080-EPISODEOFCARE", "EpisodeOfCare");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-ID", "ID_UserAssessment");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-NAME", "Name");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-DESCRIPTION", "Description");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-HELPURL", "HelpURL");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-CATEGORY", "Category");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIROLE", "IsMultiRole");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__PreOpPossumUserAssessment_" + componentIdentifier, "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-ID", "ID_UserAssessment");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-NAME", "Name");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-DESCRIPTION", "Description");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-HELPURL", "HelpURL");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-CATEGORY", "Category");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIROLE", "IsMultiRole");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__OperativePossumUserAssessment_" + componentIdentifier, "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-ID", "ID_UserAssessment");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-NAME", "Name");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-DESCRIPTION", "Description");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-HELPURL", "HelpURL");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-CATEGORY", "Category");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIROLE", "IsMultiRole");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsUserAssessment_" + componentIdentifier, "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsGraphicalUserAssessment_" + componentIdentifier, "BO-1028100006-ID", "ID_GraphicAssessment");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsGraphicalUserAssessment_" + componentIdentifier, "BO-1028100006-NAME", "Name");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsGraphicalUserAssessment_" + componentIdentifier, "BO-1028100006-ASSESSMENTTYPE", "AssessmentType");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsGraphicalUserAssessment_" + componentIdentifier, "BO-1028100006-ACTIVESTATUS", "ActiveStatus");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsGraphicalUserAssessment_" + componentIdentifier, "BO-1028100006-HELPURL", "HelpUrl");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsGraphicalUserAssessment_" + componentIdentifier, "BO-1028100006-STOREPRINTEDREPORT", "StorePrintedReport");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.SurgeryDetails.__internal_x_context__ProcedureDetailsGraphicalUserAssessment_" + componentIdentifier, "BO-1028100006-ASSOCIATEDREPORTFORPRINTING", "AssociatedReportForPrinting");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
