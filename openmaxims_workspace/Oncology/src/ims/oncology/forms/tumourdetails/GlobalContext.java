//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.tumourdetails;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Clinical = new ClinicalContext(context);
		Core = new CoreContext(context);
		Oncology = new OncologyContext(context);
		ClinicalAdmin = new ClinicalAdminContext(context);
	}
	public final class ClinicalContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private ClinicalContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getReturnToFormModeIsNotNull()
		{
			return !cx_ClinicalReturnToFormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getReturnToFormMode()
		{
			return (ims.framework.enumerations.FormMode)cx_ClinicalReturnToFormMode.getValue(context);
		}
		public void setReturnToFormMode(ims.framework.enumerations.FormMode value)
		{
			cx_ClinicalReturnToFormMode.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalReturnToFormMode = new ims.framework.ContextVariable("Clinical.ReturnToFormMode", "_cv_Clinical.ReturnToFormMode");
		public boolean getSelectedDiagnosisIsNotNull()
		{
			return !cx_ClinicalSelectedDiagnosis.getValueIsNull(context);
		}
		public ims.core.vo.DiagLiteVoCollection getSelectedDiagnosis()
		{
			return (ims.core.vo.DiagLiteVoCollection)cx_ClinicalSelectedDiagnosis.getValue(context);
		}
		public void setSelectedDiagnosis(ims.core.vo.DiagLiteVoCollection value)
		{
			cx_ClinicalSelectedDiagnosis.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalSelectedDiagnosis = new ims.framework.ContextVariable("Clinical.SelectedDiagnosis", "_cv_Clinical.SelectedDiagnosis");
		public boolean getDialogFormNameIsNotNull()
		{
			return !cx_ClinicalDialogFormName.getValueIsNull(context);
		}
		public ims.framework.FormName getDialogFormName()
		{
			return (ims.framework.FormName)cx_ClinicalDialogFormName.getValue(context);
		}
		public void setDialogFormName(ims.framework.FormName value)
		{
			cx_ClinicalDialogFormName.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalDialogFormName = new ims.framework.ContextVariable("Clinical.DialogFormName", "_cv_Clinical.DialogFormName");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getEpisodeofCareShortIsNotNull()
		{
			return !cx_CoreEpisodeofCareShort.getValueIsNull(context);
		}
		public ims.core.vo.EpisodeofCareShortVo getEpisodeofCareShort()
		{
			return (ims.core.vo.EpisodeofCareShortVo)cx_CoreEpisodeofCareShort.getValue(context);
		}

		private ims.framework.ContextVariable cx_CoreEpisodeofCareShort = new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort");
		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");
		public boolean getParentFormModeIsNotNull()
		{
			return !cx_CoreParentFormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getParentFormMode()
		{
			return (ims.framework.enumerations.FormMode)cx_CoreParentFormMode.getValue(context);
		}
		public void setParentFormMode(ims.framework.enumerations.FormMode value)
		{
			cx_CoreParentFormMode.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreParentFormMode = new ims.framework.ContextVariable("Core.ParentFormMode", "_cv_Core.ParentFormMode");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");

		private ims.framework.Context context;
	}
	public final class OncologyContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private OncologyContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getSelectedBasisOfDiagnosisIsNotNull()
		{
			return !cx_OncologySelectedBasisOfDiagnosis.getValueIsNull(context);
		}
		public ims.core.vo.lookups.DiagnosisBasisofDiagnosis getSelectedBasisOfDiagnosis()
		{
			return (ims.core.vo.lookups.DiagnosisBasisofDiagnosis)cx_OncologySelectedBasisOfDiagnosis.getValue(context);
		}
		public void setSelectedBasisOfDiagnosis(ims.core.vo.lookups.DiagnosisBasisofDiagnosis value)
		{
			cx_OncologySelectedBasisOfDiagnosis.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_OncologySelectedBasisOfDiagnosis = new ims.framework.ContextVariable("Oncology.SelectedBasisOfDiagnosis", "_cv_Oncology.SelectedBasisOfDiagnosis");
		public boolean getSelectedDiagnosisForPrimaryTumourDetailsIsNotNull()
		{
			return !cx_OncologySelectedDiagnosisForPrimaryTumourDetails.getValueIsNull(context);
		}
		public ims.core.vo.PatientDiagnosisVo getSelectedDiagnosisForPrimaryTumourDetails()
		{
			return (ims.core.vo.PatientDiagnosisVo)cx_OncologySelectedDiagnosisForPrimaryTumourDetails.getValue(context);
		}
		public void setSelectedDiagnosisForPrimaryTumourDetails(ims.core.vo.PatientDiagnosisVo value)
		{
			cx_OncologySelectedDiagnosisForPrimaryTumourDetails.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_OncologySelectedDiagnosisForPrimaryTumourDetails = new ims.framework.ContextVariable("Oncology.SelectedDiagnosisForPrimaryTumourDetails", "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails");

		private ims.framework.Context context;
	}
	public final class ClinicalAdminContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private ClinicalAdminContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getTumourDetailsRecurrenceIsNotNull()
		{
			return !cx_ClinicalAdminTumourDetailsRecurrence.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.PatientTumourRecurrenceVoCollection getTumourDetailsRecurrence()
		{
			return (ims.clinicaladmin.vo.PatientTumourRecurrenceVoCollection)cx_ClinicalAdminTumourDetailsRecurrence.getValue(context);
		}
		public void setTumourDetailsRecurrence(ims.clinicaladmin.vo.PatientTumourRecurrenceVoCollection value)
		{
			cx_ClinicalAdminTumourDetailsRecurrence.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalAdminTumourDetailsRecurrence = new ims.framework.ContextVariable("ClinicalAdmin.TumourDetailsRecurrence", "_cv_ClinicalAdmin.TumourDetailsRecurrence");

		private ims.framework.Context context;
	}

	public ClinicalContext Clinical;
	public CoreContext Core;
	public OncologyContext Oncology;
	public ClinicalAdminContext ClinicalAdmin;
}
