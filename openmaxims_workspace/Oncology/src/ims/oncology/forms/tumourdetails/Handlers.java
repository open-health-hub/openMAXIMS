//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.tumourdetails;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbBasisOfDiagnosisLookup();
	abstract protected void defaultcmbBasisOfDiagnosisLookupValue();
	abstract protected void bindcmbBenignLookup();
	abstract protected void defaultcmbBenignLookupValue();
	abstract protected void bindcmbLateralityLookup();
	abstract protected void defaultcmbLateralityLookupValue();
	abstract protected void bindcmbTumourStatusLookup();
	abstract protected void defaultcmbTumourStatusLookupValue();
	abstract protected void bindcmbSourceLookup();
	abstract protected void defaultcmbSourceLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrMainTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onBtnRecurrenceClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrPrognosticTNMTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onDynGrdPreTreatmentCellValueChanged(ims.framework.controls.DynamicGridCell cell);
	abstract protected void onDyngrdPrognosticPreTreatmentCellValueChanged(ims.framework.controls.DynamicGridCell cell);
	abstract protected void oncmbBasisOfDiagnosisValueSet(Object value);
	abstract protected void onCmbVersionValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbTumourGroupValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbTumourSiteValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbBenignValueSet(Object value);
	abstract protected void oncmbLateralityValueSet(Object value);
	abstract protected void oncmbTumourStatusValueSet(Object value);
	abstract protected void onCmbSerumMarkerValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbSourceValueSet(Object value);
	abstract protected void onCmbTumourDifferentiationValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbTumourHistologyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRecbrPrimaryTumourDetailsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.lyrMain().tabTumourDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrMaintabTumourDetailsActivated();
			}
		});
		this.form.lyrMain().tabAssessment().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrMaintabAssessmentActivated();
			}
		});
		this.form.lyrMain().tabTumourDetails().btnRecurrence().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRecurrenceClick();
			}
		});
		this.form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrPrognosticTNMtabTNMActivated();
			}
		});
		this.form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrPrognosticTNMtabPrognosticTabActivated();
			}
		});
		this.form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().setDynamicGridCellValueChangedEvent(new DynamicGridCellValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDynGrdPreTreatmentCellValueChanged(cell);
			}
		});
		this.form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment().setDynamicGridCellValueChangedEvent(new DynamicGridCellValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdPrognosticPreTreatmentCellValueChanged(cell);
			}
		});
		this.form.lyrMain().tabTumourDetails().cmbBasisOfDiagnosis().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbBasisOfDiagnosisValueSet(value);
			}
		});
		this.form.lyrMain().tabTumourDetails().cmbVersion().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbVersionValueChanged();
			}
		});
		this.form.lyrMain().tabTumourDetails().cmbTumourGroup().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbTumourGroupValueChanged();
			}
		});
		this.form.lyrMain().tabTumourDetails().cmbTumourSite().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbTumourSiteValueChanged();
			}
		});
		this.form.lyrMain().tabTumourDetails().cmbBenign().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbBenignValueSet(value);
			}
		});
		this.form.lyrMain().tabTumourDetails().cmbLaterality().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbLateralityValueSet(value);
			}
		});
		this.form.lyrMain().tabTumourDetails().cmbTumourStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTumourStatusValueSet(value);
			}
		});
		this.form.lyrMain().tabTumourDetails().cmbSerumMarker().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbSerumMarkerValueChanged();
			}
		});
		this.form.lyrMain().tabTumourDetails().cmbSource().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSourceValueSet(value);
			}
		});
		this.form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbTumourDifferentiationValueChanged();
			}
		});
		this.form.lyrMain().tabTumourDetails().cmbTumourHistologyType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbTumourHistologyValueChanged();
			}
		});
		this.form.recbrPrimaryTumourDetails().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRecbrPrimaryTumourDetailsValueChanged();
			}
		});
		this.form.btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.btnNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbBasisOfDiagnosisLookup();
		bindcmbBenignLookup();
		bindcmbLateralityLookup();
		bindcmbTumourStatusLookup();
		bindcmbSourceLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbBasisOfDiagnosisLookup();
		bindcmbBenignLookup();
		bindcmbLateralityLookup();
		bindcmbTumourStatusLookup();
		bindcmbSourceLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbBasisOfDiagnosisLookupValue();
		defaultcmbBenignLookupValue();
		defaultcmbLateralityLookupValue();
		defaultcmbTumourStatusLookupValue();
		defaultcmbSourceLookupValue();
	}
	private void onlyrMaintabTumourDetailsActivated()
	{
		this.form.lyrMain().showtabTumourDetails();
		onlyrMainTabChanged(this.form.lyrMain().tabTumourDetails());
	}
	private void onlyrMaintabAssessmentActivated()
	{
		this.form.lyrMain().showtabAssessment();
		onlyrMainTabChanged(this.form.lyrMain().tabAssessment());
	}
	private void onlyrPrognosticTNMtabTNMActivated()
	{
		this.form.lyrMain().tabTumourDetails().lyrPrognosticTNM().showtabTNM();
		onlyrPrognosticTNMTabChanged(this.form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM());
	}
	private void onlyrPrognosticTNMtabPrognosticTabActivated()
	{
		this.form.lyrMain().tabTumourDetails().lyrPrognosticTNM().showtabPrognosticTab();
		onlyrPrognosticTNMTabChanged(this.form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
