//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.55 build 2755.23108)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.oncology.forms.tumourdetails;

import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentVo;
import ims.clinicaladmin.vo.GleasonConfigLiteVo;
import ims.clinicaladmin.vo.HistopathologicGradeVo;
import ims.clinicaladmin.vo.HistopathologicGradeVoCollection;
import ims.clinicaladmin.vo.OtherClassificationValueListVo;
import ims.clinicaladmin.vo.OverallPrognosticGroupingLiteVo;
import ims.clinicaladmin.vo.OverallPrognosticGroupingLiteVoCollection;
import ims.clinicaladmin.vo.PSAConfigVo;
import ims.clinicaladmin.vo.PatientTumourRecurrenceVoCollection;
import ims.clinicaladmin.vo.PrognosticGroupingCongfigVo;
import ims.clinicaladmin.vo.PrognosticRiskConfigVo;
import ims.clinicaladmin.vo.StagingClassificationListVo;
import ims.clinicaladmin.vo.StagingClassificationLiteVoCollection;
import ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo;
import ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVoCollection;
import ims.clinicaladmin.vo.TumourGroupHistologyVo;
import ims.clinicaladmin.vo.TumourGroupHistologyVoCollection;
import ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo;
import ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVoCollection;
import ims.clinicaladmin.vo.TumourGroupListForPrimaryTumourDetailsVo;
import ims.clinicaladmin.vo.TumourGroupLiteVo;
import ims.clinicaladmin.vo.TumourGroupLiteVoCollection;
import ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo;
import ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVoCollection;
import ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo;
import ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVoCollection;
import ims.clinicaladmin.vo.TumourHistologyLiteVo;
import ims.clinicaladmin.vo.TumourSerumMarkersVo;
import ims.clinicaladmin.vo.TumourSerumMarkersVoCollection;
import ims.clinicaladmin.vo.TumourSiteListForPrimaryTumourDetailsVo;
import ims.clinicaladmin.vo.TumourSiteLiteVo;
import ims.clinicaladmin.vo.TumourSiteLiteVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.YesNo;
import ims.core.vo.lookups.YesNoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.LayerBridge;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellItem;
import ims.framework.controls.DynamicGridCellOptions;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.oncology.configuration.vo.HistopathologicGradeRefVo;
import ims.oncology.configuration.vo.TumourGroupRefVo;
import ims.oncology.configuration.vo.TumourGroupSiteTNMValueRefVo;
import ims.oncology.configuration.vo.TumourHistologyRefVo;
import ims.oncology.configuration.vo.TumourSerumMarkerRefVo;
import ims.oncology.vo.PatientDiagnosisForPrimaryTumourVo;
import ims.oncology.vo.PatientTumourClassificationVo;
import ims.oncology.vo.PatientTumourClassificationVoCollection;
import ims.oncology.vo.PrimaryTumourDetailsLiteVo;
import ims.oncology.vo.PrimaryTumourDetailsLiteVoCollection;
import ims.oncology.vo.PrimaryTumourDetailsVo;
import ims.oncology.vo.PrognosticLocationConfigVo;
import ims.oncology.vo.lookups.TNMCertaintyFactor;
import ims.oncology.vo.lookups.TNMCertaintyFactorCollection;
import ims.oncology.vo.lookups.TNMClinicalpathological;
import ims.oncology.vo.lookups.TNMType;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long		serialVersionUID		= 1L;
	public static final Integer		COLTYPE_NAME			= Integer.valueOf(-1);
	public static final Integer		COLTYPE_VALUE			= Integer.valueOf(-2);
	public static final Integer		COLCERTAIN_NAME			= Integer.valueOf(-3);
	public static final Integer		COLCERTAIN_VALUE		= Integer.valueOf(-4);
	public static final Integer		COLOVERALL_NAME			= Integer.valueOf(-5);
	public static final Integer		COLOVERALL_VALUE		= Integer.valueOf(-6);
	private static final Integer	TNM_T					= -10;
	private static final Integer	TNM_N					= -11;
	private static final Integer	TNM_M					= -12;
	private static final Integer	OVER45					= -14;
	private static final Integer	STAGING					= -15;
	private static final Integer	OVERALL_VALUE			= -16;
	public static final Integer		OVERALLCERTAIN_VALUE	= Integer.valueOf(-17);
	
	private static final int PROGNOSTIC_LOCATION			= -171;
	private static final int PROGNOSTIC_RISK				= -172;
	private static final int PROGNOSTIC_PSA					= -173;
	private static final int PROGNOSTIC_GLEASON				= -174;
	private static final int PROGNOSTIC_OVERALL_PROGNOSTIC	= -175;
	
	private static final int ROW_IDENTIF_TNM_T = -191;
	private static final int ROW_IDENTIF_TNM_N = -192;
	private static final int ROW_IDENTIF_TNM_M = -193;
	private static final int ROW_IDENTIF_PROGNOSTIC_LOCATION = -194;
	private static final int ROW_IDENTIF_PROGNOSTIC_RISK = -195;
	private static final int ROW_IDENTIF_PROGNOSTIC_PSA = -196;
	private static final int ROW_IDENTIF_PROGNOSTIC_GLEASON = -197;
	private static final int ROW_IDENTIF_PROGNOSTIC_OVERALL_PROGNOSTIC = -198;
	
	private static final Integer POPULATED_FROM_GROUP = 1;
	private static final Integer POPULATED_FROM_SITE = 2;

	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Auxiliary classes
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	private class OverallPrognosticData
	{
		private TumourGroupSiteTNMValueListVo tValue;
		private TumourGroupSiteTNMValueListVo nValue;
		private TumourGroupSiteTNMValueListVo mValue;
		
		private TumourHistologyLiteVo histologyType;
		private HistopathologicGradeVo histopatologyGrade;
		
		private PrognosticLocationConfigVo prognosticLocation;
		private PrognosticRiskConfigVo prognosticRisk;
		private GleasonConfigLiteVo prognosticGleason;
		private PSAConfigVo prognosticPSA;

		
		public TumourGroupSiteTNMValueListVo getTValue()	{ return tValue; }
		public void setTValue(TumourGroupSiteTNMValueListVo tValue)	{ this.tValue = tValue; }
		
		public TumourGroupSiteTNMValueListVo getNValue()	{ return nValue; }
		public void setNValue(TumourGroupSiteTNMValueListVo nValue)	{ this.nValue = nValue; }
		
		public TumourGroupSiteTNMValueListVo getMValue()	{ return mValue; }
		public void setMValue(TumourGroupSiteTNMValueListVo mValue)	{ this.mValue = mValue; }
		
		public TumourHistologyLiteVo getHistologyType()		{ return histologyType; }
		public void setHistologyType(TumourHistologyLiteVo histologyType)	{ this.histologyType = histologyType; }
		
		public HistopathologicGradeVo getHistopatologyGrade()	{ return histopatologyGrade; }
		public void setHistopatologyGrade(HistopathologicGradeVo histopatologyGrade)	{ this.histopatologyGrade = histopatologyGrade; }
		
		public PrognosticLocationConfigVo getPrognosticLocation()	{ return prognosticLocation; }
		public void setPrognosticLocation(PrognosticLocationConfigVo prognosticLocation)	{ this.prognosticLocation = prognosticLocation; }
		
		public PrognosticRiskConfigVo getPrognosticRisk()	{ return prognosticRisk; }
		public void setPrognosticRisk(PrognosticRiskConfigVo prognosticRisk)	{ this.prognosticRisk = prognosticRisk; }
		
		public GleasonConfigLiteVo getPrognosticGleason()	{ return prognosticGleason; }
		public void setPrognosticGleason(GleasonConfigLiteVo prognosticGleason)	{ this.prognosticGleason = prognosticGleason; }
		
		public PSAConfigVo getPrognosticPSA()	{ return prognosticPSA; }
		public void setPrognosticPSA(PSAConfigVo prognosticPSA)	{ this.prognosticPSA = prognosticPSA; }
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers region
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Intialize form
		initialize();
		
		// Refresh screen
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getForms().Clinical.DiagnosisComplications_Dialog.equals(formName))
		{
			// If a PatientDiagnosis was selected
			if (form.getGlobalContext().Oncology.getSelectedDiagnosisForPrimaryTumourDetailsIsNotNull() && DialogResult.OK.equals(result))
			{
				// Keep PatientDiagnosis in a local context
				form.getLocalContext().setSelectedDiagnosisForPrimaryTumourDetails(
						domain.getPatientDiagnosis(form.getGlobalContext().Oncology.getSelectedDiagnosisForPrimaryTumourDetails()));
				
				// Check if a PatientDiagnosis is available
				if (!form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetailsIsNotNull())
					throw new CodingRuntimeException("Major Logical Error - Patient Diagnosis record can not be null after selecting it");
				
				// Set value to PatientDiagnosis controls
				// WDEV-18128 
				if (form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getDiagnosisDescription() != null && form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getDiagnosisDescription().length() > 56)
					form.lyrMain().tabTumourDetails().lblDiagnosisDescription().setValue(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getDiagnosisDescription().substring(0, 56));					
				else
					form.lyrMain().tabTumourDetails().lblDiagnosisDescription().setValue(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getDiagnosisDescription());
				
				form.lyrMain().tabTumourDetails().lblDiagnosisDescription().setTooltip(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getDiagnosisDescription());
				form.lyrMain().tabTumourDetails().lblDateDiagnosed().setValue(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getDiagnosedDateIsNotNull() ?  form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getDiagnosedDate().toString() : "");
				form.lyrMain().tabTumourDetails().lblDiagnosisStatus().setValue(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getCurrentStatusIsNotNull() ? form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getCurrentStatus().getStatus().getText() : "");
				form.lyrMain().tabTumourDetails().lblDiagnosisAuthoringHCP().setValue(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getAuthoringInfoIsNotNull() && form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getAuthoringInfo().getAuthoringHcpIsNotNull() ? 
																					form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getAuthoringInfo().getAuthoringHcp().toString() : "");
				
				// Set Laterality value
				form.lyrMain().tabTumourDetails().cmbLaterality().setValue(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getDiagLaterality());
								
				// Set Basis of diagnosis
				// If only one basis of diagnosis is selected default to it; if more than one is selected then open dialog for user to chose
				// If no basis of diagnosis is configured, let the user choose, do not default to any
				if (form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getBasisofDiagnosisIsNotNull())
				{
					if (form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getBasisofDiagnosis().size() == 1)
					{
						form.lyrMain().tabTumourDetails().cmbBasisOfDiagnosis().setValue(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getBasisofDiagnosis().get(0));
					}
					else if (form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getBasisofDiagnosis().size() > 0)
					{
						engine.open(form.getForms().Oncology.ChooseDiagnosisBasisDialog);
					}
				}
			}
			else
			{
				open();
			}
		}
		else if (form.getForms().Oncology.ChooseDiagnosisBasisDialog.equals(formName))
		{
			if (form.getGlobalContext().Oncology.getSelectedBasisOfDiagnosisIsNotNull())
				form.lyrMain().tabTumourDetails().cmbBasisOfDiagnosis().setValue(form.getGlobalContext().Oncology.getSelectedBasisOfDiagnosis());
		}
		else if (formName.equals(form.getForms().ClinicalAdmin.TumourDetailsRecurrence) && result.equals(DialogResult.OK))
		{
			if (form.getLocalContext().getSelectedRecordIsNotNull())
				form.getLocalContext().getSelectedRecord().setTumourRecurrence(form.getGlobalContext().ClinicalAdmin.getTumourDetailsRecurrence());
			setRecurrenceButtonImage(form.getGlobalContext().ClinicalAdmin.getTumourDetailsRecurrence());
		}
		
		updateControlsState();
	}
	
	/**
	 * HACK - This is a messy hack so that score for Scoring Assessments will be displayed
	 * because the component doesn't calculate space correctly
	 */
	@Override
	protected void onlyrMainTabChanged(LayerBridge tab)
	{
		if (form.lyrMain().tabAssessment().equals(tab))
		{
			form.lyrMain().tabAssessment().ccTumourGroupAssessment().setMode(form.getMode());
			form.lyrMain().tabAssessment().ccTumourGroupAssessment().setReadOnly(FormMode.VIEW.equals(form.getMode()));
		}
	}

	@Override
	protected void onRecbrPrimaryTumourDetailsValueChanged() throws PresentationLogicException
	{
		// Update local context with selection
		form.getLocalContext().setSelectedRecord(domain.getTumourDetails(form.recbrPrimaryTumourDetails().getValue()));
		
		// Populate instance controls with selection
		populateInstanceControlsFromData(form.getLocalContext().getSelectedRecord());
		
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			open();
			resetPIDBarText();
		}
	}

	private void resetPIDBarText()
	{
		if (form.getGlobalContext().Core.getPatientShort() == null)
			return;

		new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getEpisodeofCareShort()));
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnRecurrenceClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setParentFormMode(form.getMode());
		engine.open(form.getForms().ClinicalAdmin.TumourDetailsRecurrence);
	}

	
	@Override
	protected void onCmbVersionValueChanged() throws PresentationLogicException
	{
		// Populate tumour group combo-box based on selected version and
		// selected episode of care speciality
		populateTumourGroupComboBox(form.lyrMain().tabTumourDetails().cmbVersion().getValue(), form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty());
		
		// Clear selected Tumour Group and Tumour Site local context
		form.getLocalContext().setSelectedGroup(null);
		form.getLocalContext().setSelectedSite(null);
		
		// Populate instance controls depending on Tumour Group selected record
		populateTumourGroupDependencies(null);
		
		// Update controls state
		updateControlsState();
	}
	
	@Override
	protected void onCmbTumourGroupValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Get Tumour Group detailed record value
		form.getLocalContext().setSelectedGroup(domain.getTumourGroupList(form.lyrMain().tabTumourDetails().cmbTumourGroup().getValue()));
		// Clear Tumour Site detailed record value
		form.getLocalContext().setSelectedSite(null);
		// Allow data from 'Overall Staging' tab to be imported to 'Overall Prognostic' tab (only at creation)
		if (!form.getLocalContext().getSelectedRecordIsNotNull())
			form.getLocalContext().setDataWasImported(Boolean.FALSE);
		
		// Populate instance controls depending on Tumour Group selected record
		populateTumourGroupDependencies(form.getLocalContext().getSelectedGroup());
		
		// Refresh controls state
		updateControlsState();
	}

	@Override
	protected void onCmbTumourSiteValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Get Tumour Site and Tumour Group Values
		form.getLocalContext().setSelectedSite(domain.getTumourSiteList(form.lyrMain().tabTumourDetails().cmbTumourSite().getValue()));
		
		// Populate instance controls depending on Tumour Group and Tumour site
		populateTumourGroupAndSiteDependencies(form.getLocalContext().getSelectedGroup(), form.getLocalContext().getSelectedSite());	
		
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onCmbTumourHistologyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Call function to bind Overall Prognostic values based on values on screen
		calculateOnScreenOverallPrognostic();

		// WDEV-13091
		// Calculate OverallStaging value only if no site is selected or selected site doesn't have specific T, N, M values
		if (!form.getLocalContext().getSelectedSiteIsNotNull() || !Boolean.TRUE.equals(form.getLocalContext().getSelectedSite().getHasSiteSpecificTNM()))
		{
			calculateOverall();
		}
	}
	
	@Override
	protected void onCmbTumourDifferentiationValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Call function to bind Overall Prognostic values based on values on screen
		calculateOnScreenOverallPrognostic();

		// WDEV-13091
		// Calculate OverallStaging value only if no site is selected or selected site doesn't have specific T, N, M values
		if (!form.getLocalContext().getSelectedSiteIsNotNull() || !Boolean.TRUE.equals(form.getLocalContext().getSelectedSite().getHasSiteSpecificTNM()))
		{
			calculateOverall();
		}
	}

	@Override
	protected void onCmbSerumMarkerValueChanged() throws PresentationLogicException
	{
		// WDEV-13091
		// Calculate OverallStaging value only if no site is selected or selected site doesn't have specific T, N, M values
		if (!form.getLocalContext().getSelectedSiteIsNotNull() || !Boolean.TRUE.equals(form.getLocalContext().getSelectedSite().getHasSiteSpecificTNM()))
		{
			calculateOverall();
		}
	}

	@Override
	protected void onDynGrdPreTreatmentCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getValue() != null && !(cell.getValue() instanceof TumourGroupSiteOverallStagingVo) 
			&& (cell.getIdentifier() != STAGING) && cell.getValue() == null)
		{
			DynamicGridCell dynamicGridCell = getCellById(getColumn(COLTYPE_VALUE), OVERALL_VALUE);
			
			if (dynamicGridCell != null)
				dynamicGridCell.setValue(null);
		}
		else if (cell.getRow().getIdentifier() == null || !cell.getRow().getIdentifier().equals(OVERALL_VALUE))
		{
			calculateOverall();
		}
		else
		{
			cell.setValue(cell.getValue());
			cell.setIdentifier(cell.getIdentifier());
		}
	}

	@Override
	protected void onDyngrdPrognosticPreTreatmentCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getRow().getIdentifier() == null)
			throw new CodingRuntimeException("All rows on prognostic dyanmic grid must have an identifier set");
		
		// Execute only if the cell's column identifier is COLTYPE_VALUE
		// and it's not the Overall Prognostic that is changing
		if (!COLTYPE_VALUE.equals(cell.getColumn().getIdentifier()) || cell.getRow().getIdentifier().equals(ROW_IDENTIF_PROGNOSTIC_OVERALL_PROGNOSTIC))
			return;
		
		// Call function to bind Overall Prognostic values based on values on screen
		calculateOnScreenOverallPrognostic();
	}

	@Override
	protected void onlyrPrognosticTNMTabChanged(LayerBridge tab)
	{
		if (tab.equals(form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab()))
		{
			if (!Boolean.TRUE.equals(form.getLocalContext().getDataWasImported())
					&& !form.getLocalContext().getSelectedRecordIsNotNull()
					&& form.getLocalContext().getSelectedGroupIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getSelectedGroup().getHasTNM())
					&& (!form.getLocalContext().getSelectedSiteIsNotNull() || !Boolean.TRUE.equals(form.getLocalContext().getSelectedSite().getHasSiteSpecificTNM())))
			{
				importTNMValuesFromOverallStaging();
			}
			
			// Mark as data have been imported - even if the import process didn't take place,
			// the import process must take place only when first changing tabs after selecting the group
			form.getLocalContext().setDataWasImported(Boolean.TRUE);
		}
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions region
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to initialize the form
	 * Clear local context, clear global context, hide context menu options, etc
	 * Initialize components
	 */
	public void initialize() throws FormOpenException
	{
		form.getLocalContext().setSelectedRecord(null);
		form.getLocalContext().setCurrentEditableRecord(null);
		form.getLocalContext().setUnendedRecordsExist(Boolean.FALSE);
		
		form.getLocalContext().setSelectedDiagnosisForPrimaryTumourDetails(null);
		form.getLocalContext().setSelectedGroup(null);
		form.getLocalContext().setSelectedSite(null);
		
		form.getLocalContext().setDataWasImported(Boolean.FALSE);
		
		// Initialize authoring component as required
		form.lyrMain().tabTumourDetails().ccAuthoring().setIsRequiredPropertyToControls(true);
		form.lyrMain().tabTumourDetails().ccAuthoring().setHcpType(HcpDisType.MEDICAL);
		
		// Initialize dynamic grid for TNM Pre Treatment staging
		initialiseDynamicGrdPreTreatment();
		
		// Initialize dynamic grid for Overall
		initialiseDynamicGrdPrognostic();
		
		// Initialize assessment custom control
		form.lyrMain().tabAssessment().ccTumourGroupAssessment().setReadOnly(true);
	}

	
	/**
	 * Function used to initialize the dynamic grid for Pre Treatment staging
	 */
	private void initialiseDynamicGrdPreTreatment()
	{
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().clear();
		
		DynamicGridColumn colTypeName = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getColumns().newColumn("T / N / M Stage", COLTYPE_NAME);
		colTypeName.setCanGrow(false);
		colTypeName.setWidth(100);
		colTypeName.setReadOnly(true);

		DynamicGridColumn colTypeValue = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getColumns().newColumn("Value", COLTYPE_VALUE);
		colTypeValue.setCanGrow(true);
		colTypeValue.setWidth(350);
		colTypeValue.setReadOnly(true);
		
		DynamicGridColumn colCertainName = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getColumns().newColumn("T / N / M Certainty", COLCERTAIN_NAME);
		colCertainName.setCanGrow(false);
		colCertainName.setWidth(130);
		colCertainName.setReadOnly(true);
		
		DynamicGridColumn colCertainValue = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getColumns().newColumn("Value", COLCERTAIN_VALUE);
		colCertainValue.setCanGrow(false);
		colCertainValue.setWidth(180);
		colCertainValue.setReadOnly(true);
	}

	
	private void initialiseDynamicGrdPrognostic()
	{
		// Clear prognostic dynamic grid
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment().clear();
		
		
		// Build dynamic grid columns (they should be a match of the PreTreatment stage dynamic grid)
		DynamicGridColumn colTypeName = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment().getColumns().newColumn("T / N / M Stage", COLTYPE_NAME);
		colTypeName.setCanGrow(false);
		colTypeName.setWidth(130);
		colTypeName.setReadOnly(true);
		colTypeName.setAlignment(Alignment.CENTER);
		
		DynamicGridColumn colTypeValue = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment().getColumns().newColumn("Value", COLTYPE_VALUE);
		colTypeValue.setCanGrow(true);
		colTypeValue.setWidth(350);
		colTypeValue.setReadOnly(true);
		
		DynamicGridColumn colCertainName = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment().getColumns().newColumn("T / N / M Certainty", COLCERTAIN_NAME);
		colCertainName.setCanGrow(false);
		colCertainName.setWidth(130);
		colCertainName.setReadOnly(true);
		colCertainName.setAlignment(Alignment.CENTER);
		
		DynamicGridColumn colCertainValue = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment().getColumns().newColumn("Value", COLCERTAIN_VALUE);
		colCertainValue.setCanGrow(false);
		colCertainValue.setWidth(180);
		colCertainValue.setReadOnly(true);
	}

	
	/**
	 * Function used to display data on screen (refresh the screen) when form opens, after a save or after Cancel
	 * Will retrieve records from domain, display last edited or created records, set the form to VIEW mode
	 */
	public void open() throws PresentationLogicException
	{
		// Clear screen
		clearScreen();
		
		// Populate record browser with Primary Tumour Details records for selected
		populateRecordBrowser(domain.listPrimaryTumours(form.getGlobalContext().Core.getEpisodeofCareShort()));
		
		// Get selected record from record browser and populate instance controls with it
		// can be the record that was edited/created or the last one recorded
		form.getLocalContext().setSelectedRecord(domain.getTumourDetails(form.recbrPrimaryTumourDetails().getValue()));
		populateInstanceControlsFromData(form.getLocalContext().getSelectedRecord());

		form.setMode(FormMode.VIEW);
	}

	
	/**
	 * Function used to prepare the screen for creation of a new Primary Tumour Details
	 * Clear local contexts and instance controls, set default values to controls (for a new record)
	 * Set form to EDIT mode
	 * 
	 * In addition - for this form - open a dialog for the user to select a PatientDiagnosis
	 * 
	 * Note: DO NOT set controls state here, use the updateControlsState() instead
	 */
	public void newInstance() throws PresentationLogicException
	{
		// Clear instance controls
		clearInstanceControls();
		
		// Clear local context for selected record to prevent unwanted editing
		form.getLocalContext().setSelectedRecord(null);
		// Clear the rest of local context to prevent corrupted data
		form.getLocalContext().setSelectedDiagnosisForPrimaryTumourDetails(null);
		form.getLocalContext().setSelectedGroup(null);
		form.getLocalContext().setSelectedSite(null);
		// Allow data to be imported from 'Overall Staging' tab to 'Overall Prognostic'
		form.getLocalContext().setDataWasImported(Boolean.FALSE);
		
		// Set default value to Authoring Information component (accept only Medical staff)
		form.lyrMain().tabTumourDetails().ccAuthoring().initializeComponent(HcpDisType.MEDICAL);
		// If default user is not Medical - then remove it
		if (form.lyrMain().tabTumourDetails().ccAuthoring().getValue() != null &&
				form.lyrMain().tabTumourDetails().ccAuthoring().getValue().getAuthoringHcpIsNotNull() &&
					!HcpDisType.MEDICAL.equals(form.lyrMain().tabTumourDetails().ccAuthoring().getValue().getAuthoringHcp().getHcpType()))
		{
			AuthoringInformationVo defaultAuthoringInfo = new AuthoringInformationVo();
			defaultAuthoringInfo.setAuthoringDateTime(new DateTime());
			
			form.lyrMain().tabTumourDetails().ccAuthoring().setValue(defaultAuthoringInfo);
		}
		
		
		// Populate version values to Version combobox
		populateTumourVersionComboBox();
		
		// Set the form to EDIT mode
		form.setMode(FormMode.EDIT);

		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.VIEW);
		form.getGlobalContext().Clinical.setDialogFormName(null);
		
		// Show Tumour Details tab & Overall Staging
		form.lyrMain().showtabTumourDetails();
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().showtabTNM();
		
		// Open dialog for the user to select a PatientDiagnosis to link to record
		engine.open(form.getForms().Clinical.DiagnosisComplications_Dialog);
	}


	/**
	 * Function used to prepare the screen for editing a Primary Tumour Details
	 * Set form to EDIT mode
	 * 
	 * Note: DO NOT set controls state here, use the updateControlsState() instead
	 */
	public void updateInstance()
	{
		// Set the form to EDIT mode
		form.setMode(FormMode.EDIT);
	}
	
	
	/**
	 * Function used to import T, N, M values from Overall Staging to Overall Prognostic Grouping
	 */
	private void importTNMValuesFromOverallStaging()
	{
		// Get values from TNM sub-tab
		// Get TNM values
		// Populate Data from Dynamic Grid - CAUTION - Copy-Paste code
		DynamicGridColumn valueColumn = getOverallColumn(COLTYPE_VALUE);

		DynamicGridRow dynRow;
		
		dynRow = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(0);
		TumourGroupSiteTNMValueListVo valueT = ((TumourGroupSiteTNMValueListVo) dynRow.getCells().get(valueColumn).getValue());

		dynRow = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(1);
		TumourGroupSiteTNMValueListVo valueN = ((TumourGroupSiteTNMValueListVo) dynRow.getCells().get(valueColumn).getValue());

		dynRow = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(2);
		TumourGroupSiteTNMValueListVo valueM = ((TumourGroupSiteTNMValueListVo) dynRow.getCells().get(valueColumn).getValue());
		
		// Set Prognostic values
		// Set pointer to prognostic dynamic grid
		DynamicGrid prognosticDynamicGrid = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment();
		// Get Type Value column && Certainty Value column
		DynamicGridColumn colTypeValue = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);
		
		for (int i = 0; i < prognosticDynamicGrid.getRows().size(); i++)
		{
			DynamicGridRow row = prognosticDynamicGrid.getRows().get(i);
			
			if (!(row.getIdentifier() instanceof Integer))
				throw new CodingRuntimeException("Major logical error - When creating rows on prognostic dyanmic grid make sure they have Interger identifiers");
			
			switch ((Integer) row.getIdentifier())
			{
				// Set T value if relevant
				case ROW_IDENTIF_TNM_T:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(colTypeValue);
					cellTypeValue.setValue(valueT);
					// Check if setValue succeeds
					if (cellTypeValue.getValue() == null && valueT != null)
					{
						cellTypeValue.getItems().newItem(valueT, valueT.toString());
						cellTypeValue.setValue(valueT);
					}
					break;
				}
				
				case ROW_IDENTIF_TNM_N:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(colTypeValue);
					cellTypeValue.setValue(valueN);
					// Check if setValue succeeds
					if (cellTypeValue.getValue() == null && valueN != null)
					{
						cellTypeValue.getItems().newItem(valueN, valueN.toString());
						cellTypeValue.setValue(valueN);
					}
					break;
				}
					
				case ROW_IDENTIF_TNM_M:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(colTypeValue);
					cellTypeValue.setValue(valueM);
					// Check if setValue succeeds
					if (cellTypeValue.getValue() == null && valueM != null)
					{
						cellTypeValue.getItems().newItem(valueM, valueM.toString());
						cellTypeValue.setValue(valueM);
					}
					break;
				}
			}
		}
	}

	/**
	 * Function used to save a record (creating or updating) with data from screen
	 * 
	 * Will return true when it succeeds
	 */
	public boolean save() throws PresentationLogicException
	{
		try
		{
			// Get data from screen
			form.getLocalContext().setSelectedRecord(populateDataFromInstanceControls(form.getLocalContext().getSelectedRecord()));

			// Validate data
			String[] errors = validateUIErros(); 
			errors = form.getLocalContext().getSelectedRecord().validate(errors);
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Domain call to commit data to data base
			form.getLocalContext().setSelectedRecord(domain.saveTumourDetails(form.getLocalContext().getSelectedRecord(), form.getLocalContext().getCurrentEditableRecord()));

			// At this point the save has succeeded
			return true;
		}
		// Treat exceptions that might arise
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
	}
	
	
	/**
	 * Function used to clear the screen
	 * It will only clear controls values, not local or global contexts
	 */
	protected void clearScreen()
	{
		// Clear record browser
		form.recbrPrimaryTumourDetails().clear();
		
		// Clear instance controls
		clearInstanceControls();
	}

	
	/**
	 * Function used to clear instance controls
	 * It will clear only controls values, not local or global contexts;
	 * Also will not clear record browser with collection of records
	 */
	public void clearInstanceControls()
	{
		// Clear Diagnosis controls
		form.lyrMain().tabTumourDetails().lblDiagnosisDescription().setValue(" - ");
		form.lyrMain().tabTumourDetails().lblDiagnosisDescription().setTooltip(" - "); // WDEV-18128 
		form.lyrMain().tabTumourDetails().lblDateDiagnosed().setValue(" - ");
		form.lyrMain().tabTumourDetails().lblDiagnosisAuthoringHCP().setValue(" - ");
		form.lyrMain().tabTumourDetails().lblDiagnosisStatus().setValue(" - ");
		
		// Clear recurrences global context - treated as a control
		form.getGlobalContext().ClinicalAdmin.setTumourDetailsRecurrence(null);
		setRecurrenceButtonImage(null);
		
		// Clear instance controls on left side
		form.lyrMain().tabTumourDetails().cmbVersion().clear();
		form.lyrMain().tabTumourDetails().cmbTumourGroup().clear();
		form.lyrMain().tabTumourDetails().cmbTumourSite().clear();
		form.lyrMain().tabTumourDetails().cmbLaterality().setValue(null);
		form.lyrMain().tabTumourDetails().cmbBenign().setValue(null);
		form.lyrMain().tabTumourDetails().cmbTumourStatus().setValue(null);
		form.lyrMain().tabTumourDetails().dteEnd().setValue(null);
		
		// Clear instance controls on right side
		form.lyrMain().tabTumourDetails().cmbTumourHistologyType().clear();
		form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().clear();
		form.lyrMain().tabTumourDetails().cmbSource().setValue(null);
		form.lyrMain().tabTumourDetails().cmbSerumMarker().clear();
		form.lyrMain().tabTumourDetails().cmbBasisOfDiagnosis().setValue(null);
		
		form.lyrMain().tabTumourDetails().ccAuthoring().setValue(null);
		
		// Clear instance controls on TNM sub-tab
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().clear();
		
		form.lyrMain().tabTumourDetails().cmbPTValue().clear();
		form.lyrMain().tabTumourDetails().cmbPNValue().clear();
		form.lyrMain().tabTumourDetails().cmbPMValue().clear();
		form.lyrMain().tabTumourDetails().dtePathological().setValue(null);

		form.lyrMain().tabTumourDetails().cmbTValue().clear();
		form.lyrMain().tabTumourDetails().cmbNValue().clear();
		form.lyrMain().tabTumourDetails().cmbMValue().clear();
		form.lyrMain().tabTumourDetails().dteIntegrated().setValue(null);
		
		// Clear instance controls on Prognostic sub-tab
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment().getRows().clear();
		
//		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().cmbRiskCategory().clear();
//		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().cmbGleason().clear();
//		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().cmbPSA().clear();
//		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().cmbGrade().clear();
//		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().cmbLocation().clear();
	}

	
	/**
	 * Function used to change the state of the controls
	 * Some controls can have their state modified only for a specific mode
	 * 
	 *  Suggestion use only one line per control:
	 *   - user control.setEnable(condition) instead of  if (condition) control.setEnable(true/false)
	 */
	public void updateControlsState()
	{
		// Refresh state for Overall Prognostic tab - visible only if group supports prognostic grouping
		boolean isPrognostic = form.lyrMain().tabTumourDetails().cmbVersion().getValue() != null
								&& form.lyrMain().tabTumourDetails().cmbTumourGroup().getValue() != null
								&& Boolean.TRUE.equals(form.lyrMain().tabTumourDetails().cmbTumourGroup().getValue().getIsPrognosticGroupingRelevant());
		
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().setHeaderVisible(isPrognostic);

		// Refresh state for Assessment tab - visible only if selected Tumour Group has an assessment linked
		boolean isAssessmentReady = form.getLocalContext().getSelectedGroupIsNotNull() && form.getLocalContext().getSelectedGroup().getAssessmentIsNotNull();
		form.lyrMain().tabAssessment().setHeaderVisible(isAssessmentReady);

		// Refresh state for controls needing it only for VIEW mode (Edit button, etc.)
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.lyrMain().tabAssessment().ccTumourGroupAssessment().setMode(FormMode.VIEW);
			form.lyrMain().tabAssessment().ccTumourGroupAssessment().setReadOnly(true);
			
			// Allow creating new records only if all other records have end date
			form.btnNew().setVisible(true);
			form.btnNew().setEnabled(Boolean.FALSE.equals(form.getLocalContext().getUnendedRecordsExist()));

			// Allow edit only for records without an end date
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(form.recbrPrimaryTumourDetails().getValue() != null && !form.recbrPrimaryTumourDetails().getValue().getEndDateIsNotNull());
			form.lyrMain().tabTumourDetails().ccAuthoring().setEnabledAuthoringHCP(false); 	//wdev-13301
			form.lyrMain().tabTumourDetails().ccAuthoring().setEnabledDateTime(false);		//wdev-13301
		}
		
		// Refresh state for controls needing it only for EDIT mode
		if (FormMode.EDIT.equals(form.getMode()))
		{
			boolean newRecord = !form.getLocalContext().getSelectedRecordIsNotNull() || !form.getLocalContext().getSelectedRecord().getID_PrimaryTumourDetailsIsNotNull();
			
			form.lyrMain().tabAssessment().ccTumourGroupAssessment().setMode(FormMode.EDIT);
			form.lyrMain().tabAssessment().ccTumourGroupAssessment().setReadOnly(false);

			form.lyrMain().tabTumourDetails().cmbVersion().setEnabled(newRecord);
			form.lyrMain().tabTumourDetails().cmbTumourGroup().setEnabled(newRecord && form.lyrMain().tabTumourDetails().cmbVersion().getValue() != null);
			form.lyrMain().tabTumourDetails().cmbTumourSite().setEnabled(newRecord && form.lyrMain().tabTumourDetails().cmbTumourGroup().getValue() != null);
			
			form.lyrMain().tabTumourDetails().cmbTumourHistologyType().setEnabled(form.lyrMain().tabTumourDetails().cmbTumourGroup().getValue() != null);
			form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().setEnabled(form.lyrMain().tabTumourDetails().cmbTumourGroup().getValue() != null);
			form.lyrMain().tabTumourDetails().cmbSerumMarker().setEnabled(form.lyrMain().tabTumourDetails().cmbTumourGroup().getValue() != null);
			form.lyrMain().tabTumourDetails().ccAuthoring().setEnabledAuthoringHCP(true); 	//wdev-13301
			form.lyrMain().tabTumourDetails().ccAuthoring().setEnabledDateTime(true);		//wdev-13301
		}
	}

	
	/**
	 * Function used to validate UI values before saving them
	 */
	private String[] validateUIErros()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		// Check for date Integrated value not to be set in the future
		if (form.lyrMain().tabTumourDetails().dteIntegrated().getValue() != null
				&& form.lyrMain().tabTumourDetails().dteIntegrated().getValue().isGreaterThan(new Date()))
		{
			errorList.add("Integrated date can not be in the future.");
		}
		
		// Check for date Pathological value not to be set in the future
		if (form.lyrMain().tabTumourDetails().dtePathological().getValue() != null
				&& form.lyrMain().tabTumourDetails().dtePathological().getValue().isGreaterThan(new Date()))
		{
			errorList.add("Pathological date can not be in the future.");
		}
		
		//WDEV-13093
		if(form.lyrMain().tabTumourDetails().dteEnd().getValue() != null)
		{
			String[] assessmentErrors = form.lyrMain().tabAssessment().ccTumourGroupAssessment().validateData();
			
			if(assessmentErrors != null)
			{
				for(int i=0; i<assessmentErrors.length; i++)
					errorList.add(assessmentErrors[i]);
			}
		}
		
		// Move errors from a list into an array
		String[] errors = errorList.toArray(new String[errorList.size()]);
		
		return errors;
	}


	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange functions
	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to populate collection of Primary Tumour Details records to record browser.
	 * It will clear the record browser, populate the controls with provided collection
	 * and select previously edited record or the last one recorded if
	 */
	private void populateRecordBrowser(PrimaryTumourDetailsLiteVoCollection tumourDetailsCollection) throws PresentationLogicException
	{
		// Clear record browser
		form.recbrPrimaryTumourDetails().clear();
		
		// Assume there are no records without an end date
		// and there is no current record editable (so clear local contexts)
		form.getLocalContext().setUnendedRecordsExist(Boolean.FALSE);
		form.getLocalContext().setCurrentEditableRecord(null);
		
		// If collection of records is null terminate the function
		if (tumourDetailsCollection == null)
			return;
		
		// Iterate through records collection
		for (PrimaryTumourDetailsLiteVo tumourDetails : tumourDetailsCollection)
		{
			form.recbrPrimaryTumourDetails().newRow(tumourDetails, buildDisplayString(tumourDetails));
			
			// If the record has no end date then change the local context to keep that in mind
			if (!tumourDetails.getEndDateIsNotNull())
				form.getLocalContext().setUnendedRecordsExist(Boolean.TRUE);
			
			// Retain current editable record
			if (Boolean.TRUE.equals(tumourDetails.getIsCurrent()))
				form.getLocalContext().setCurrentEditableRecord(tumourDetails);
		}

		// Select first Primary Tumour Details record from record browser
		// if records exits
		if (tumourDetailsCollection.size() > 0)
			form.recbrPrimaryTumourDetails().setValue(tumourDetailsCollection.get(0));
		
		// Select latest edited Primary Tumour Details record from record browser
		// If the value is not found, the record browser should not change it's value
		// Skip this if the local context is null
		if (form.getLocalContext().getSelectedRecordIsNotNull() && form.getLocalContext().getSelectedRecord().getID_PrimaryTumourDetailsIsNotNull())
			form.recbrPrimaryTumourDetails().setValue(form.getLocalContext().getSelectedRecord());
	}

	/**
	 * Function used to build display string for Primary Tumour Details records
	 * 
	 * <br><b>CAUTION:</b> Throws a CodingRuntimeException if the value passed to parameter is null
	 */
	private String buildDisplayString(PrimaryTumourDetailsLiteVo tumourDetails)
	{
		// Check parameter for null value
		// Throw a CodingRuntimeException if a null parameter is passed
		if (tumourDetails == null)
			throw new CodingRuntimeException("Logical Error - Can not build a display string for a null record");
		
		// Build display string for record browser
		// It makes the code more readable - use a StringBuilder as it is more efficient than adding strings
		StringBuilder displayText = new StringBuilder();

		// Add authoring information to display text
		if (tumourDetails.getAuthoringInformationIsNotNull())
		{
			if (tumourDetails.getAuthoringInformation().getAuthoringHcpIsNotNull())
				displayText.append(tumourDetails.getAuthoringInformation().getAuthoringHcp().toString()).append(" ");
			
			if (tumourDetails.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
				displayText.append(tumourDetails.getAuthoringInformation().getAuthoringDateTime());
			
			displayText.append(" -");
		}
		
		// Add Tumour Group information to display text
		if (tumourDetails.getTumourGroupIsNotNull()) displayText.append(" Group: ").append(tumourDetails.getTumourGroup().getGroupName());
		// Add Tumour Site information to display text
		if (tumourDetails.getTumourSiteIsNotNull()) displayText.append(" Site: ").append(tumourDetails.getTumourSite().getName());
		// Add Laterality information to display text
		if (tumourDetails.getTumourLateralityIsNotNull()) displayText.append(" - Laterality: ").append(tumourDetails.getTumourLaterality().getText());
		
		// Add Primary Tumour Details record to record browser
		return displayText.toString();
	}
	

	/**
	 * Function used to display Primary Tumour Details record in instance controls
	 * @param tumourDetails
	 */
	private void populateInstanceControlsFromData(PrimaryTumourDetailsVo tumourDetails)
	{
		// Show tab for Tumour Details (default) - not the Assessment
		form.lyrMain().showtabTumourDetails();		
		// Show tab for Overall Staging (default)
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().showtabTNM();
		
		// Clear instance controls
		clearInstanceControls();
		
		// If value passed to parameter is null terminate the function
		if (tumourDetails == null)
			return;
		
		// Populate Patient Diagnosis controls with value from record
		if (tumourDetails.getPatientDiagnosisIsNotNull())
		{
			PatientDiagnosisForPrimaryTumourVo patientDiagnosis = tumourDetails.getPatientDiagnosis();

			//form.lyrMain().tabTumourDetails().lblDiagnosisDescription().setValue(patientDiagnosis.getDiagnosisDescription());
			
			// WDEV-18128 
			form.lyrMain().tabTumourDetails().lblDiagnosisDescription().setTooltip(patientDiagnosis.getDiagnosisDescription());
			if (patientDiagnosis.getDiagnosisDescription() != null && patientDiagnosis.getDiagnosisDescription().length() > 56)
				form.lyrMain().tabTumourDetails().lblDiagnosisDescription().setValue(patientDiagnosis.getDiagnosisDescription().substring(0, 56));					
			else
				form.lyrMain().tabTumourDetails().lblDiagnosisDescription().setValue(patientDiagnosis.getDiagnosisDescription());
						
			form.lyrMain().tabTumourDetails().lblDateDiagnosed().setValue(patientDiagnosis.getDiagnosedDateIsNotNull() ? patientDiagnosis.getDiagnosedDate().toString() : "");
			form.lyrMain().tabTumourDetails().lblDiagnosisStatus().setValue(patientDiagnosis.getCurrentStatusIsNotNull() ? patientDiagnosis.getCurrentStatus().getStatus().getText() : "");
			form.lyrMain().tabTumourDetails().lblDiagnosisAuthoringHCP().setValue(patientDiagnosis.getAuthoringInfoIsNotNull() && patientDiagnosis.getAuthoringInfo().getAuthoringHcpIsNotNull() ?
																																	patientDiagnosis.getAuthoringInfo().getAuthoringHcp().toString() : "");
		}
		
		// Set recurrences to global context
		form.getGlobalContext().ClinicalAdmin.setTumourDetailsRecurrence(tumourDetails.getTumourRecurrence());
		setRecurrenceButtonImage(tumourDetails.getTumourRecurrence());

		// Populate Tumour Version combobox - NO NEED for binding - version shouldn't be edited ever.
		// If the control is enabled for editing then it's an error
		form.lyrMain().tabTumourDetails().cmbVersion().newRow(tumourDetails.getTumourVersion(), tumourDetails.getTumourVersionIsNotNull() ? tumourDetails.getTumourVersion().getVersionNumber() : "");
		form.lyrMain().tabTumourDetails().cmbVersion().setValue(tumourDetails.getTumourVersion());
		// Populate Tumour Group combobox
		form.lyrMain().tabTumourDetails().cmbTumourGroup().newRow(tumourDetails.getTumourGroup(), tumourDetails.getTumourGroupIsNotNull() ? tumourDetails.getTumourGroup().getGroupName() : "");
		form.lyrMain().tabTumourDetails().cmbTumourGroup().setValue(tumourDetails.getTumourGroup());
		
		// Set selected Tumour Group detailed record
		form.getLocalContext().setSelectedGroup(domain.getTumourGroupList(tumourDetails.getTumourGroup()));

		// Bind values that depend on Tumour Group
		populateTumourGroupDependencies(form.getLocalContext().getSelectedGroup());															// This is a necessary deviation from standard populate instance controls 
		
		// Populate Tumour Site combobox
		form.lyrMain().tabTumourDetails().cmbTumourSite().newRow(tumourDetails.getTumourSite(), tumourDetails.getTumourSiteIsNotNull() ? tumourDetails.getTumourSite().getName() : "");
		form.lyrMain().tabTumourDetails().cmbTumourSite().setValue(tumourDetails.getTumourSite());
		
		// Set selected Tumour Site detailed record
		form.getLocalContext().setSelectedSite(domain.getTumourSiteList(tumourDetails.getTumourSite()));

		// Bind values that depend on Tumour Group and Tumour Site
		populateTumourGroupAndSiteDependencies(form.getLocalContext().getSelectedGroup(), form.getLocalContext().getSelectedSite());		// This is a necessary deviation from standard populate instance controls

		// Populate Laterality combobox
		form.lyrMain().tabTumourDetails().cmbLaterality().setValue(tumourDetails.getTumourLaterality());
		// Populate Benign combobox
		form.lyrMain().tabTumourDetails().cmbBenign().setValue(tumourDetails.getBenign());
		// Populate Tumour Status combobox
		form.lyrMain().tabTumourDetails().cmbTumourStatus().setValue(tumourDetails.getTumourStatus());
		// Populate End Date combobox
		form.lyrMain().tabTumourDetails().dteEnd().setValue(tumourDetails.getEndDate());
		// Populate Tumour Histology Type combobox
		form.lyrMain().tabTumourDetails().cmbTumourHistologyType().setValue(tumourDetails.getTumourHistology());
		
		// Populate Tumour Histology Grade combobox - first attempt
		form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().setValue(tumourDetails.getGradeofDifferentation());
		
		//WDEV-13092
		if(tumourDetails.getGradeofDifferentation() != null && form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().getValue() == null)
		{
			form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().newRow(tumourDetails.getGradeofDifferentation(), tumourDetails.getGradeofDifferentation().getGrade() + " - " + tumourDetails.getGradeofDifferentation().getTumourDifferentation());
			
			sortAndBindTumourHistologyGradeComboBox();
			
			// Populate Tumour Histology Grade combobox - second attempt
			form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().setValue(tumourDetails.getGradeofDifferentation());
		}
		
		// Populate Source combobox
		form.lyrMain().tabTumourDetails().cmbSource().setValue(tumourDetails.getDifferentatationSource());
		// Populate Serum Markers combobox
		form.lyrMain().tabTumourDetails().cmbSerumMarker().setValue(tumourDetails.getPreTreatmentSerumMarker());
		// Populate Basis of Diagnosis combobox
		form.lyrMain().tabTumourDetails().cmbBasisOfDiagnosis().setValue(tumourDetails.getBasisofDiagnosis());
		
		// Set authoring information value
		form.lyrMain().tabTumourDetails().ccAuthoring().setValue(tumourDetails.getAuthoringInformation());
		
		// Set TNM sub-tab values
		
		// Set Pre Treatment Staging TNM Values - Site TNM has priority (if configured)
		if (form.getLocalContext().getSelectedSiteIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getSelectedSite().getHasSiteSpecificTNM()))
		{
			populatePreTreatmentWithTNM(form.getLocalContext().getSelectedSite().getTNMValues(),															// Bind TNM values from Site
        			tumourDetails.getPreTreatmentTVal(), tumourDetails.getPreTreatmentNVal(), tumourDetails.getPreTreatmentMVal(),							// Set Pre Treatment TNM Values
        			tumourDetails.getPreTreatmentTCert(), tumourDetails.getPreTreatmentNCert(), tumourDetails.getPreTreatmentMCert());						// Set Pre Treatment TNM Certainties
		}
		else if (form.getLocalContext().getSelectedGroupIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getSelectedGroup().getHasTNM()))
		{
			populatePreTreatmentWithTNM(form.getLocalContext().getSelectedGroup().getTNMValues(),																	// Bind TNM values from Group
                                    			tumourDetails.getPreTreatmentTVal(), tumourDetails.getPreTreatmentNVal(), tumourDetails.getPreTreatmentMVal(),		// Set Pre Treatment TNM Values
                                    			tumourDetails.getPreTreatmentTCert(), tumourDetails.getPreTreatmentNCert(), tumourDetails.getPreTreatmentMCert());	// Set Pre Treatment TNM Certainties

		}
		
		// Populate over 45 if no site is selected or site selected doesn't have specific T, N, M configured
		if ((!form.getLocalContext().getSelectedSiteIsNotNull() || !Boolean.TRUE.equals(form.getLocalContext().getSelectedSite().getHasSiteSpecificTNM()))
			 &&	form.getLocalContext().getSelectedGroupIsNotNull() && form.getLocalContext().getSelectedGroup().getTnmRequiresOver45IsNotNull())
		{
			populateOver45(Boolean.TRUE.equals(form.getLocalContext().getSelectedGroup().getTnmRequiresOver45()), tumourDetails.getOver45StatusIsNotNull() && tumourDetails.getOver45Status().contains("Y"));
		}
		
		// Populate overall staging if needed
		if (form.getLocalContext().getSelectedGroupIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getSelectedGroup().getHasTNM())
				|| form.getLocalContext().getSelectedSiteIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getSelectedSite().getHasSiteSpecificTNM()))
		{
			populateOverall(tumourDetails.getPreTreatmentOverall());
		}
		
		// Populate other staging classifications from TumourGroup only if no site selected or site selected doesn't have specific T, N, M configured
		if (!form.getLocalContext().getSelectedSiteIsNotNull() || !Boolean.TRUE.equals(form.getLocalContext().getSelectedSite().getHasSiteSpecificTNM()))
		{
			// Staging Classifications
			populateStaging(tumourDetails.getStagingClassifications());
		}
		
		// Populate Pathological Staging TNM comboboxes
		form.lyrMain().tabTumourDetails().cmbPTValue().setValue(tumourDetails.getPathologicalTVal());
		form.lyrMain().tabTumourDetails().cmbPNValue().setValue(tumourDetails.getPathologicalNVal());
		form.lyrMain().tabTumourDetails().cmbPMValue().setValue(tumourDetails.getPathologicalMVal());
		form.lyrMain().tabTumourDetails().dtePathological().setValue(tumourDetails.getPathologicalDate());
		
		// Populate Integrated Staging TNM comboboxes
		form.lyrMain().tabTumourDetails().cmbTValue().setValue(tumourDetails.getIntegratedTVal());
		form.lyrMain().tabTumourDetails().cmbNValue().setValue(tumourDetails.getIntegratedNVal());
		form.lyrMain().tabTumourDetails().cmbMValue().setValue(tumourDetails.getIntegratedMVal());
		form.lyrMain().tabTumourDetails().dteIntegrated().setValue(tumourDetails.getIntegratedDate());
		
		
		// Set Prognostic values
		// Set pointer to prognostic dynamic grid
		DynamicGrid prognosticDynamicGrid = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment();
		// Get Type Value column && Certainty Value column
		DynamicGridColumn colTypeValue = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);
		DynamicGridColumn colCertainValue = prognosticDynamicGrid.getColumns().getByIdentifier(COLCERTAIN_VALUE);
		
		// Bind overall prognostic grouping values dynamic grid structure should have been created by
		// populateTumourGroupDependencies function - also the other binds
		setOverallPrognosticValues(form.getLocalContext().getSelectedGroup(),
				tumourDetails.getPrognosticTVal(), tumourDetails.getPrognosticNVal(), tumourDetails.getPrognosticMVal(),
				tumourDetails.getTumourHistology(), tumourDetails.getGradeofDifferentation(),
				tumourDetails.getPrognosticLocation(), tumourDetails.getPrognosticRisk(), tumourDetails.getPrognosticPSA(), tumourDetails.getPrognosticGleason());
		
		
		for (int i = 0; i < prognosticDynamicGrid.getRows().size(); i++)
		{
			DynamicGridRow row = prognosticDynamicGrid.getRows().get(i);
			
			if (!(row.getIdentifier() instanceof Integer))
				throw new CodingRuntimeException("Major logical error - When creating rows on prognostic dyanmic grid make sure they have Interger identifiers");
			
			switch ((Integer) row.getIdentifier())
			{
				// Set T value if relevant
				
				case ROW_IDENTIF_TNM_T:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(colTypeValue);
					cellTypeValue.setValue(tumourDetails.getPrognosticTVal());
					// Check if setValue succeeds
					if (cellTypeValue.getValue() == null && tumourDetails.getPrognosticTValIsNotNull())
					{
						cellTypeValue.getItems().newItem(tumourDetails.getPrognosticTVal(), tumourDetails.getPrognosticTVal().toString());
						cellTypeValue.setValue(tumourDetails.getPrognosticTVal());
					}
					// Get Certainty Value cell
					DynamicGridCell cellCertaintyValue = row.getCells().get(colCertainValue);
					cellCertaintyValue.setValue(tumourDetails.getPrognosticTCert());

					break;
				}
				
				case ROW_IDENTIF_TNM_N:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(colTypeValue);
					cellTypeValue.setValue(tumourDetails.getPrognosticNVal());
					// Check if setValue succeeds
					if (cellTypeValue.getValue() == null && tumourDetails.getPrognosticNValIsNotNull())
					{
						cellTypeValue.getItems().newItem(tumourDetails.getPrognosticNVal(), tumourDetails.getPrognosticNVal().toString());
						cellTypeValue.setValue(tumourDetails.getPrognosticNVal());
					}
					// Get Certainty Value cell
					DynamicGridCell cellCertaintyValue = row.getCells().get(colCertainValue);
					cellCertaintyValue.setValue(tumourDetails.getPrognosticNCert());

					break;
				}
					
				case ROW_IDENTIF_TNM_M:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(colTypeValue);
					cellTypeValue.setValue(tumourDetails.getPrognosticMVal());
					// Check if setValue succeeds
					if (cellTypeValue.getValue() == null && tumourDetails.getPrognosticMValIsNotNull())
					{
						cellTypeValue.getItems().newItem(tumourDetails.getPrognosticMVal(), tumourDetails.getPrognosticMVal().toString());
						cellTypeValue.setValue(tumourDetails.getPrognosticMVal());
					}
					// Get Certainty Value cell
					DynamicGridCell cellCertaintyValue = row.getCells().get(colCertainValue);
					cellCertaintyValue.setValue(tumourDetails.getPrognosticMCert());

					break;
				}
					
				case ROW_IDENTIF_PROGNOSTIC_LOCATION:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(colTypeValue);
					cellTypeValue.setValue(tumourDetails.getPrognosticLocation());
					// Check if setValue succeeds
					if (cellTypeValue.getValue() == null && tumourDetails.getPrognosticLocationIsNotNull())
					{
						cellTypeValue.getItems().newItem(tumourDetails.getPrognosticLocation(), tumourDetails.getPrognosticMVal().toString());
						cellTypeValue.setValue(tumourDetails.getPrognosticLocation());
					}
					
					break;
				}
					
				case ROW_IDENTIF_PROGNOSTIC_RISK:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(colTypeValue);
					cellTypeValue.setValue(tumourDetails.getPrognosticRisk());
					// Check if setValue succeeds
					if (cellTypeValue.getValue() == null && tumourDetails.getPrognosticRiskIsNotNull())
					{
						cellTypeValue.getItems().newItem(tumourDetails.getPrognosticRisk(), tumourDetails.getPrognosticRisk().toString());
						cellTypeValue.setValue(tumourDetails.getPrognosticRisk());
					}
					
					break;
				}
					
				case ROW_IDENTIF_PROGNOSTIC_PSA:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(colTypeValue);
					cellTypeValue.setValue(tumourDetails.getPrognosticPSA());
					// Check if setValue succeeds
					if (cellTypeValue.getValue() == null && tumourDetails.getPrognosticPSAIsNotNull())
					{
						cellTypeValue.getItems().newItem(tumourDetails.getPrognosticPSA(), tumourDetails.getPrognosticPSA().toString());
						cellTypeValue.setValue(tumourDetails.getPrognosticPSA());
					}
					
					break;
				}
					
				case ROW_IDENTIF_PROGNOSTIC_GLEASON:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(colTypeValue);
					cellTypeValue.setValue(tumourDetails.getPrognosticGleason());
					// Check if setValue succeeds
					if (cellTypeValue.getValue() == null && tumourDetails.getPrognosticGleasonIsNotNull())
					{
						cellTypeValue.getItems().newItem(tumourDetails.getPrognosticGleason(), tumourDetails.getPrognosticGleason().toString());
						cellTypeValue.setValue(tumourDetails.getPrognosticGleason());
					}
					
					break;
				}
					
				case ROW_IDENTIF_PROGNOSTIC_OVERALL_PROGNOSTIC:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(colTypeValue);
					if ((cellTypeValue.getItems() == null || cellTypeValue.getItems().size() == 0) && tumourDetails.getPrognosticGroupingIsNotNull())
						cellTypeValue.getItems().newItem(tumourDetails.getPrognosticGrouping(), tumourDetails.getPrognosticGrouping().toString());
					cellTypeValue.setValue(tumourDetails.getPrognosticGrouping());
					// Get Certainty Value cell
					DynamicGridCell cellCertaintyValue = row.getCells().get(colCertainValue);
					cellCertaintyValue.setValue(tumourDetails.getPrognosticGroupingCert());

					break;
				}
			}
		}
		
		
		// Set assessment - should this be binded
		if (form.getLocalContext().getSelectedGroupIsNotNull() && form.getLocalContext().getSelectedGroup().getAssessmentIsNotNull())
		{
			if (tumourDetails.getAssessmentIsNotNull())
			{
				form.lyrMain().tabAssessment().ccTumourGroupAssessment().setPatientAssessment(tumourDetails.getAssessment(), false);
			}
			else
			{
				// Create Patient Assessment
				PatientAssessmentVo patientAssessment = new PatientAssessmentVo();
				patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
				patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
				patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				
				UserAssessmentVo userAssessment = domain.getUserAssessment(form.getLocalContext().getSelectedGroup().getAssessment());
				
				patientAssessment.setAssessmentData(new PatientAssessmentDataVo());
				patientAssessment.getAssessmentData().setUserAssessment(userAssessment);
				patientAssessment.getAssessmentData().setGroupQuestionWidth(userAssessment.getGroupQuestionWidth());
				
				form.lyrMain().tabAssessment().ccTumourGroupAssessment().setPatientAssessment(patientAssessment, false);
			}
		}
	}

	//WDEV-13092
	private void sortAndBindTumourHistologyGradeComboBox() 
	{
		ArrayList<?> list = form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().getValues();
		
		if(list == null || list.size() == 0)
			return;
		
		HistopathologicGradeVoCollection coll = new HistopathologicGradeVoCollection();
		
		for(int i=0; i<list.size(); i++)
		{
			if(list.get(i) instanceof HistopathologicGradeVo)
			{
				coll.add((HistopathologicGradeVo) list.get(i));
			}
		}
		
		coll.sort(SortOrder.ASCENDING, true);
		
		form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().clear();
		
		for(HistopathologicGradeVo item : coll)
		{
			if(item == null)
				continue;
			
			form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().newRow(item, item.getGrade() + " - " + item.getTumourDifferentation());
		}
	}

	/**
	 * Function used to create/update a Primary Tumour Details record with data from screen 
	 * @param selectedRecord
	 * @return
	 */
	private PrimaryTumourDetailsVo populateDataFromInstanceControls(PrimaryTumourDetailsVo selectedRecord)
	{
		// Check if parameter passed is null - create a new object if needed
		if (selectedRecord == null)
		{
			selectedRecord = new PrimaryTumourDetailsVo();
			
			// Set fields for new records (EpisodeOfCare, CareContext, etc.)
			selectedRecord.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			selectedRecord.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			selectedRecord.setIsCurrent(Boolean.TRUE);
			
			// Set Patient Diagnosis
			selectedRecord.setPatientDiagnosis(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails());
		}
		
		// Set Tumour Details Recurrence
		selectedRecord.setTumourRecurrence(form.getGlobalContext().ClinicalAdmin.getTumourDetailsRecurrence());
		
		// Get Tumour Version
		selectedRecord.setTumourVersion(form.lyrMain().tabTumourDetails().cmbVersion().getValue());
		// Get Tumour Group
		selectedRecord.setTumourGroup(form.lyrMain().tabTumourDetails().cmbTumourGroup().getValue());
		// Get Tumour Site
		selectedRecord.setTumourSite(form.lyrMain().tabTumourDetails().cmbTumourSite().getValue());
		// Get Tumour Laterality
		selectedRecord.setTumourLaterality(form.lyrMain().tabTumourDetails().cmbLaterality().getValue());
		// Get Tumour Benign
		selectedRecord.setBenign(form.lyrMain().tabTumourDetails().cmbBenign().getValue());
		// Get Tumour Status
		selectedRecord.setTumourStatus(form.lyrMain().tabTumourDetails().cmbTumourStatus().getValue());
		// Get End Date
		selectedRecord.setEndDate(form.lyrMain().tabTumourDetails().dteEnd().getValue());
		
		// Get Histology Type
		selectedRecord.setTumourHistology(form.lyrMain().tabTumourDetails().cmbTumourHistologyType().getValue());
		// Get Histology Grade
		selectedRecord.setGradeofDifferentation(form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().getValue());
		// Get Source
		selectedRecord.setDifferentatationSource(form.lyrMain().tabTumourDetails().cmbSource().getValue());
		// Get Serum Marker
		selectedRecord.setPreTreatmentSerumMarker(form.lyrMain().tabTumourDetails().cmbSerumMarker().getValue());
		// Get Basis of Diagnosis
		selectedRecord.setBasisofDiagnosis(form.lyrMain().tabTumourDetails().cmbBasisOfDiagnosis().getValue());
		
		// Get Authoring Information
		selectedRecord.setAuthoringInformation(form.lyrMain().tabTumourDetails().ccAuthoring().getValue());
		
		// Get values from TNM sub-tab
		// Get TNM values
		// Populate Data from Dynamic Grid - CAUTION - Copy-Paste code
		DynamicGridColumn valueColumn = getOverallColumn(COLTYPE_VALUE);
		DynamicGridColumn certaintyColumn = getOverallColumn(COLCERTAIN_VALUE);

		DynamicGridRow dynRow;

		if ((form.getLocalContext().getSelectedGroupIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getSelectedGroup().getHasTNM()))
				|| (form.getLocalContext().getSelectedSiteIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getSelectedSite().getHasSiteSpecificTNM())))
		{
			dynRow = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(0);
			selectedRecord.setPreTreatmentTVal((TumourGroupSiteTNMValueListVo) dynRow.getCells().get(valueColumn).getValue());
			selectedRecord.setPreTreatmentTCert((TNMCertaintyFactor) dynRow.getCells().get(certaintyColumn).getValue());

			dynRow = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(1);
			selectedRecord.setPreTreatmentNVal((TumourGroupSiteTNMValueListVo) dynRow.getCells().get(valueColumn).getValue());
			selectedRecord.setPreTreatmentNCert((TNMCertaintyFactor) dynRow.getCells().get(certaintyColumn).getValue());

			dynRow = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(2);
			selectedRecord.setPreTreatmentMVal((TumourGroupSiteTNMValueListVo) dynRow.getCells().get(valueColumn).getValue());
			selectedRecord.setPreTreatmentMCert((TNMCertaintyFactor) dynRow.getCells().get(certaintyColumn).getValue());
			
			selectedRecord.setPathologicalTVal(form.lyrMain().tabTumourDetails().cmbPTValue().getValue());
			selectedRecord.setPathologicalNVal(form.lyrMain().tabTumourDetails().cmbPNValue().getValue());
			selectedRecord.setPathologicalMVal(form.lyrMain().tabTumourDetails().cmbPMValue().getValue());
			selectedRecord.setPathologicalDate(form.lyrMain().tabTumourDetails().dtePathological().getValue());
			
			selectedRecord.setIntegratedTVal(form.lyrMain().tabTumourDetails().cmbTValue().getValue());
			selectedRecord.setIntegratedNVal(form.lyrMain().tabTumourDetails().cmbNValue().getValue());
			selectedRecord.setIntegratedMVal(form.lyrMain().tabTumourDetails().cmbMValue().getValue());
			selectedRecord.setIntegratedDate(form.lyrMain().tabTumourDetails().dteIntegrated().getValue());
		}
		
		selectedRecord.setStagingClassifications(new PatientTumourClassificationVoCollection());
		
		// Get Overall Staging value && Other Classification values
		for (int i = 0; i < form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(i);
			
			if (row.getIdentifier() != null && row.getIdentifier().equals(OVERALL_VALUE))
			{
				if (row.getCells().get(valueColumn).getValue() instanceof TumourGroupSiteOverallStagingVo)
					selectedRecord.setPreTreatmentOverall((TumourGroupSiteOverallStagingVo) row.getCells().get(valueColumn).getValue());
				else
					selectedRecord.setPreTreatmentOverall(null);
				
				if (row.getCells().get(certaintyColumn).getValue() instanceof TNMCertaintyFactor)
					selectedRecord.setPreTreatmentOverAllCert((TNMCertaintyFactor) row.getCells().get(certaintyColumn).getValue());
				else
					selectedRecord.setPreTreatmentOverAllCert(null);
			}
			
			else if (row.getCells().get(valueColumn).getIdentifier() != null && 
					row.getCells().get(valueColumn).getIdentifier().equals(OVER45))
			{
				if (row.getCells().get(valueColumn).getValue() != null)
					selectedRecord.setOver45Status(row.getCells().get(valueColumn).getValue().toString().substring(0, 1));
			}
			else if (row.getCells().get(valueColumn).getIdentifier() != null &&
					row.getCells().get(valueColumn).getIdentifier().equals(STAGING))
			{
				PatientTumourClassificationVo voPTC = new PatientTumourClassificationVo();
				
				if (row.getCells().get(getOverallColumn(COLTYPE_NAME)).getIdentifier() instanceof PatientTumourClassificationVo)
					voPTC.setClassification(((PatientTumourClassificationVo) row.getCells().get(getOverallColumn(COLTYPE_NAME)).getIdentifier()).getClassification());
				else if (row.getCells().get(getOverallColumn(COLTYPE_NAME)).getIdentifier() instanceof StagingClassificationListVo)
					voPTC.setClassification((StagingClassificationListVo) row.getCells().get(getOverallColumn(COLTYPE_NAME)).getIdentifier());
				
				voPTC.setClassificationValue((OtherClassificationValueListVo) row.getCells().get(getOverallColumn(COLTYPE_VALUE)).getValue());
				
				selectedRecord.getStagingClassifications().add(voPTC);
			}
		}
		
		// Get a pointer to prognostic dynamic grid
		DynamicGrid prognosticDynamicGrid = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment();
		// Get Type Value column
		DynamicGridColumn typeValueColumn = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);
		// Get Certainty Value column
		DynamicGridColumn certaintyValueColumn = prognosticDynamicGrid.getColumns().getByIdentifier(COLCERTAIN_VALUE);
		
		// Iterate rows from Prognostic dynamic grid, and check their Identifier
		// Depending on the identifier populate the needed fields in the record to be saved
		for (int i = 0; i < prognosticDynamicGrid.getRows().size(); i++)
		{
			DynamicGridRow row = prognosticDynamicGrid.getRows().get(i);

			// Keep this check - Exception crash to force 
			// setting an identifier to a row when it's created
			if (!(row.getIdentifier() instanceof Integer))
				throw new CodingRuntimeException("Logical error - Make sure to set an Integer identifier to prognostic rows in dynamic grid");

			switch ((Integer)row.getIdentifier())
			{
				case ROW_IDENTIF_TNM_T:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(typeValueColumn);
					// Get Certainty Value cell
					DynamicGridCell cellCertaintyValue = row.getCells().get(certaintyValueColumn);
					
					// Set Prognostic T TNM Value to save
					if (cellTypeValue.getValue() instanceof TumourGroupSiteTNMValueListVo)
						selectedRecord.setPrognosticTVal((TumourGroupSiteTNMValueListVo) cellTypeValue.getValue());
					else
						selectedRecord.setPrognosticTVal(null);
					
					// Set Prognostic T TNM Certainty Value to save
					if (cellCertaintyValue.getValue() instanceof TNMCertaintyFactor)
						selectedRecord.setPrognosticTCert((TNMCertaintyFactor) cellCertaintyValue.getValue());
					else
						selectedRecord.setPrognosticTCert(null);
					
					break;
				}
					
				case ROW_IDENTIF_TNM_N:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(typeValueColumn);
					// Get Certainty Value cell
					DynamicGridCell cellCertaintyValue = row.getCells().get(certaintyValueColumn);
					
					// Set Prognostic T TNM Value to save
					if (cellTypeValue.getValue() instanceof TumourGroupSiteTNMValueListVo)
						selectedRecord.setPrognosticNVal((TumourGroupSiteTNMValueListVo) cellTypeValue.getValue());
					else
						selectedRecord.setPrognosticNVal(null);
					
					// Set Prognostic T TNM Certainty Value to save
					if (cellCertaintyValue.getValue() instanceof TNMCertaintyFactor)
						selectedRecord.setPrognosticNCert((TNMCertaintyFactor) cellCertaintyValue.getValue());
					else
						selectedRecord.setPrognosticNCert(null);
					
					break;
				}

				case ROW_IDENTIF_TNM_M:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(typeValueColumn);
					// Get Certainty Value cell
					DynamicGridCell cellCertaintyValue = row.getCells().get(certaintyValueColumn);
					
					// Set Prognostic T TNM Value to save
					if (cellTypeValue.getValue() instanceof TumourGroupSiteTNMValueListVo)
						selectedRecord.setPrognosticMVal((TumourGroupSiteTNMValueListVo) cellTypeValue.getValue());
					else
						selectedRecord.setPrognosticMVal(null);
					
					// Set Prognostic T TNM Certainty Value to save
					if (cellCertaintyValue.getValue() instanceof TNMCertaintyFactor)
						selectedRecord.setPrognosticMCert((TNMCertaintyFactor) cellCertaintyValue.getValue());
					else
						selectedRecord.setPrognosticMCert(null);
					
					break;
				}
					
				case ROW_IDENTIF_PROGNOSTIC_LOCATION:
				{
					// Get Type Value cell
					DynamicGridCell cell = row.getCells().get(typeValueColumn);

					// Set prognostic location value to record to save
					if (cell.getValue() instanceof PrognosticLocationConfigVo)
						selectedRecord.setPrognosticLocation((PrognosticLocationConfigVo) cell.getValue());
					else
						selectedRecord.setPrognosticLocation(null);
					
					break;
				}
					
				case ROW_IDENTIF_PROGNOSTIC_RISK:
				{
					// Get Type Value cell
					DynamicGridCell cell = row.getCells().get(typeValueColumn);
					
					// Set prognostic risk value to record to save
					if (cell.getValue() instanceof PrognosticRiskConfigVo)
						selectedRecord.setPrognosticRisk((PrognosticRiskConfigVo) cell.getValue());
					else
						selectedRecord.setPrognosticRisk(null);
					
					break;
				}
					
				case ROW_IDENTIF_PROGNOSTIC_PSA:
				{
					// Get Type Value cell
					DynamicGridCell cell = row.getCells().get(typeValueColumn);
					
					// Set Prognostic PSA
					if (cell.getValue() instanceof PSAConfigVo)
						selectedRecord.setPrognosticPSA((PSAConfigVo) cell.getValue());
					else
						selectedRecord.setPrognosticPSA(null);
					
					break;
				}
					
				case ROW_IDENTIF_PROGNOSTIC_GLEASON:
				{
					// Get Type Value cell
					DynamicGridCell cell = row.getCells().get(typeValueColumn);
					
					// Set Prognostic Gleason
					if (cell.getValue() instanceof GleasonConfigLiteVo)
						selectedRecord.setPrognosticGleason((GleasonConfigLiteVo) cell.getValue());
					else
						selectedRecord.setPrognosticGleason(null);
					
					break;
				}
					
				case ROW_IDENTIF_PROGNOSTIC_OVERALL_PROGNOSTIC:
				{
					// Get Type Value cell
					DynamicGridCell cellTypeValue = row.getCells().get(typeValueColumn);
					// Get Certainty Value cell
					DynamicGridCell cellCertaintyValue = row.getCells().get(certaintyValueColumn);
					
					// Set Overall Prognostic
					if (cellTypeValue.getValue() instanceof OverallPrognosticGroupingLiteVo)
						selectedRecord.setPrognosticGrouping((OverallPrognosticGroupingLiteVo) cellTypeValue.getValue());
					else
						selectedRecord.setPrognosticGrouping(null);
					
					// Set Overall Prognostic Certainty
					if (cellCertaintyValue.getValue() instanceof TNMCertaintyFactor)
						selectedRecord.setPrognosticGroupingCert((TNMCertaintyFactor) cellCertaintyValue.getValue());
					else
						selectedRecord.setPrognosticGroupingCert(null);
					
					break;
				}
			}
		}
		
		
		// Get Patient Assessment
		PatientAssessmentVo assessment = form.lyrMain().tabAssessment().ccTumourGroupAssessment().getPatientAssessment();
		
		if (assessment != null)
		{
			assessment.setAuthoringInformation(selectedRecord.getAuthoringInformation());
			assessment.setPatient(form.getGlobalContext().Core.getPatientShort());
			assessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			assessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		
		selectedRecord.setAssessment(assessment);

		// Return value
		return selectedRecord;
	}


	
	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange functions
	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to populate Version to combo box
	 */
	private void populateTumourVersionComboBox()
	{
		// Clear version combo-box && controls depending on version
		form.lyrMain().tabTumourDetails().cmbVersion().clear();
		
		// Clear instance controls on left side
		form.lyrMain().tabTumourDetails().cmbTumourGroup().clear();
		form.lyrMain().tabTumourDetails().cmbTumourSite().clear();
		form.lyrMain().tabTumourDetails().cmbLaterality().setValue(null);
		form.lyrMain().tabTumourDetails().cmbBenign().setValue(null);
		form.lyrMain().tabTumourDetails().cmbTumourStatus().setValue(null);
		form.lyrMain().tabTumourDetails().dteEnd().setValue(null);
		
		// Clear instance controls on right side
		form.lyrMain().tabTumourDetails().cmbTumourHistologyType().clear();
		form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().clear();
		form.lyrMain().tabTumourDetails().cmbSource().setValue(null);
		form.lyrMain().tabTumourDetails().cmbSerumMarker().clear();
		
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().clear();
		
		form.lyrMain().tabTumourDetails().cmbPTValue().clear();
		form.lyrMain().tabTumourDetails().cmbPNValue().clear();
		form.lyrMain().tabTumourDetails().cmbPMValue().clear();

		form.lyrMain().tabTumourDetails().cmbTValue().clear();
		form.lyrMain().tabTumourDetails().cmbNValue().clear();
		form.lyrMain().tabTumourDetails().cmbMValue().clear();
		
		// Clear instance controls on Prognostic sub-tab
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment().getRows().clear();
		
		// Get Version collection from domain
		TNMStagingClassificationVersionLiteVoCollection versions = domain.getVersions();
		
		// Check if Version collection is null - terminate function
		if (versions == null)
			return;
		
		for (TNMStagingClassificationVersionLiteVo version : versions)
		{
			form.lyrMain().tabTumourDetails().cmbVersion().newRow(version, version.getVersionNumber());
		}
		
		if (versions.size() > 0)
			form.lyrMain().tabTumourDetails().cmbVersion().setValue(versions.get(0));

		// Populate tumour group combo-box based on selected version and
		// selected episode of care speciality
		populateTumourGroupComboBox(form.lyrMain().tabTumourDetails().cmbVersion().getValue(), form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty());
		
		// Update controls state
		updateControlsState();
	}
	

	/**
	 * Function used to populate tumour groups based on selected version and episode of care speciality
	 * @param version
	 * @param speciality
	 */
	private void populateTumourGroupComboBox(TNMStagingClassificationVersionLiteVo version, Specialty speciality)
	{
		// Clear combo-box && controls depending on tumour group selection
		form.lyrMain().tabTumourDetails().cmbTumourGroup().clear();
		
		form.lyrMain().tabTumourDetails().cmbTumourSite().clear();
		form.lyrMain().tabTumourDetails().cmbBenign().setValue(null);
		form.lyrMain().tabTumourDetails().cmbTumourStatus().setValue(null);
		form.lyrMain().tabTumourDetails().dteEnd().setValue(null);
		
		// Clear instance controls on right side
		form.lyrMain().tabTumourDetails().cmbTumourHistologyType().clear();
		form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().clear();
		form.lyrMain().tabTumourDetails().cmbSource().setValue(null);
		form.lyrMain().tabTumourDetails().cmbSerumMarker().clear();
		
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().clear();
		
		form.lyrMain().tabTumourDetails().cmbPTValue().clear();
		form.lyrMain().tabTumourDetails().cmbPNValue().clear();
		form.lyrMain().tabTumourDetails().cmbPMValue().clear();

		form.lyrMain().tabTumourDetails().cmbTValue().clear();
		form.lyrMain().tabTumourDetails().cmbNValue().clear();
		form.lyrMain().tabTumourDetails().cmbMValue().clear();
		
		// Clear instance controls on Prognostic sub-tab
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment().getRows().clear();
		
		// Get Tumour Groups from domain based on version and speciality parameters
		TumourGroupLiteVoCollection tumourGroups = domain.getTumourGroups(version, speciality);
		
		// Check if the collection is null - terminate function
		if (tumourGroups == null)
			return;
		
		for (TumourGroupLiteVo group : tumourGroups)
		{
			form.lyrMain().tabTumourDetails().cmbTumourGroup().newRow(group, group.getGroupName());
		}
	}
	
	
	/**
	 * Function used to populate instance controls that depend on Tumour Group selected record
	 * @param tumourGroup
	 */
	private void populateTumourGroupDependencies(TumourGroupListForPrimaryTumourDetailsVo tumourGroup)
	{
		// Show tab for Overall Staging (default)
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().showtabTNM();

		// Clear instance controls that depend on Tumour Group selected record
		form.lyrMain().tabTumourDetails().cmbTumourSite().clear();
		
		form.getLocalContext().setHistologyPopulatedFrom(POPULATED_FROM_GROUP);
		form.getLocalContext().setPretreatmentOverallPopulatedFrom(POPULATED_FROM_GROUP);
		
		// Clear instance controls on right side
		form.lyrMain().tabTumourDetails().cmbTumourHistologyType().clear();
		form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().clear();
		form.lyrMain().tabTumourDetails().cmbSerumMarker().clear();

		// Clear instance controls on TNM sub-tab
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().clear();
		
		form.lyrMain().tabTumourDetails().cmbPTValue().clear();
		form.lyrMain().tabTumourDetails().cmbPNValue().clear();
		form.lyrMain().tabTumourDetails().cmbPMValue().clear();

		form.lyrMain().tabTumourDetails().cmbTValue().clear();
		form.lyrMain().tabTumourDetails().cmbNValue().clear();
		form.lyrMain().tabTumourDetails().cmbMValue().clear();
		
		// Clear instance controls on Prognostic sub-tab
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment().getRows().clear();
		
		// Clear assessment tab
		form.lyrMain().tabAssessment().ccTumourGroupAssessment().clearComponent();
		
		
		// Terminate function if selected Tumour Group is null
		if (tumourGroup == null)
			return;
		
		// Populate Tumour Site combobox values
		populateTumourSiteComboBox(tumourGroup.getSites());
		// Populate Tumour Histology Type combobox values
		populateTumourHistologyTypeCombobox(tumourGroup.getHistologies());
		// Populate Tumour Histology Grade combobox values
		populateTumourHistologyGradeCombobox(tumourGroup.getHistopathologicGrades());
		// Populate Serum Markers combobox values
		populateSerumMarkersCombobox(tumourGroup.getSerumMarkers());
		
		// Populate TNM sub-tab Pre Treatment stage values
		// Populate TNM sub-tab Pathology Staging and Integrated Staging comboboxes
		if (Boolean.TRUE.equals(tumourGroup.getHasTNM()))
		{
			populatePreTreatmentWithTNM(tumourGroup.getTNMValues(), null, null, null, null, null, null);
			populateTNMComboboxes(tumourGroup.getTNMValues());
			
			if (Boolean.TRUE.equals(tumourGroup.getTnmRequiresOver45()))
			{
				populateOver45(tumourGroup.getTnmRequiresOver45(), null);
			}
			
			populateOverall(null);
		}

		// Populate TumourGroup other classification if there isn't a TumourDetails record saved
		// otherwise it will get populated later when populating with values.
		// Keep this in place for the case when creating a new Tumour Details record and group is selected
		if (!form.getLocalContext().getSelectedRecordIsNotNull())
		{
    		// Using an old method - have no idea on how it works
    		populateStaging(null);
		}
		
		
		// Populate Overall Prognostic
		if (Boolean.TRUE.equals(tumourGroup.getIsPrognosticGroupingRelevant()))
		{
			populatePrognosticGrouping(tumourGroup);
		}
		
		
		// Populate Assessment tab
		if (tumourGroup.getAssessmentIsNotNull())
		{
			// Create a new patient assessment
			PatientAssessmentVo patientAssessment = new PatientAssessmentVo();
			patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
			patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			UserAssessmentVo userAssessment = domain.getUserAssessment(tumourGroup.getAssessment());
			
			patientAssessment.setAssessmentData(new PatientAssessmentDataVo());
			patientAssessment.getAssessmentData().setUserAssessment(userAssessment);
			patientAssessment.getAssessmentData().setGroupQuestionWidth(userAssessment.getGroupQuestionWidth());
			
			form.lyrMain().tabAssessment().ccTumourGroupAssessment().setPatientAssessment(patientAssessment, false);
		}
	}
	

	/**
	 * Function used to populate Tumour Site combobox with records from a collection
	 */
	private void populateTumourSiteComboBox(TumourSiteLiteVoCollection sites)
	{
		// Clear Tumour Site combobox
		form.lyrMain().tabTumourDetails().cmbTumourSite().clear();
		
		// If the site records collection is null terminate function
		if (sites == null)
			return;
		
		for (TumourSiteLiteVo site : sites)
		{
			if (!Boolean.TRUE.equals(site.getIsActive()))
				continue;
			
			form.lyrMain().tabTumourDetails().cmbTumourSite().newRow(site, site.getName());
		}
	}


	/**
	 * Function used to populate instance controls that depend on Tumour Group and Tumour Site
	 */
	private void populateTumourGroupAndSiteDependencies(TumourGroupListForPrimaryTumourDetailsVo tumourGroup, TumourSiteListForPrimaryTumourDetailsVo tumourSite)
	{
		// Show tab for Overall Staging (default)
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().showtabTNM();
		
		// WDEV-13091
		// If the TumourSite has specific Histology Type configured, then clear control of records from Group
		// and populate it with values from Site
		if (tumourSite != null && Boolean.TRUE.equals(tumourSite.getHasSiteSpecificHistology()))
		{
			// Populate Histology Types from TumourSite 
			populateTumourHistologyTypeCombobox(tumourSite.getHistologies());
			
			form.getLocalContext().setHistologyPopulatedFrom(POPULATED_FROM_SITE);
			
			// Recalculate OverallStaging - used by cases where the site has only TumourHistology specific
			calculateOverall();
			// Recalculate OverallPrognostic - it might be the case that TumourHistology is used for calculating it
			calculateOnScreenOverallPrognostic();
		}
		else if (POPULATED_FROM_SITE.equals(form.getLocalContext().getHistologyPopulatedFrom()))
		{			
			form.getLocalContext().setHistologyPopulatedFrom(POPULATED_FROM_GROUP);

			// Populate Histology Types from TumourGroup
			populateTumourHistologyTypeCombobox(tumourGroup == null ? null : tumourGroup.getHistologies());
			
			// Recalculate OverallStaging - used by cases where the site has only TumourHistology specific
			calculateOverall();
			// Recalculate OverallPrognostic - it might be the case that TumourHistology is used for calculating it			
			calculateOnScreenOverallPrognostic();
		}
		
		// WDEV-13091
		// If the TumourSite has specific T, N, M values configured, then clear controls of records from Group
		// and populate them with values from Site
		if (tumourSite != null && Boolean.TRUE.equals(tumourSite.getHasSiteSpecificTNM()))
		{
			// Clear instance controls on TNM sub-tab
			form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().clear();
			
			form.lyrMain().tabTumourDetails().cmbPTValue().clear();
			form.lyrMain().tabTumourDetails().cmbPNValue().clear();
			form.lyrMain().tabTumourDetails().cmbPMValue().clear();

			form.lyrMain().tabTumourDetails().cmbTValue().clear();
			form.lyrMain().tabTumourDetails().cmbNValue().clear();
			form.lyrMain().tabTumourDetails().cmbMValue().clear();

			// Populate TNM sub-tab Pre Treatment stage values - this will design PreTreatement staging grid T, N, M values
			populatePreTreatmentWithTNM(tumourSite.getTNMValues(), null, null, null, null, null, null);
			// Populate Pre Treatment stage overall values for site
			populateOverall(null);

			// Populate TNM sub-tab Pathology Staging and Integrated Staging comboboxes
			populateTNMComboboxes(tumourSite.getTNMValues());
			
			form.getLocalContext().setPretreatmentOverallPopulatedFrom(POPULATED_FROM_SITE);
		}
		else if (POPULATED_FROM_SITE.equals(form.getLocalContext().getPretreatmentOverallPopulatedFrom()))
		{
			form.getLocalContext().setPretreatmentOverallPopulatedFrom(POPULATED_FROM_GROUP);
			
			// Clear instance controls on TNM sub-tab
			form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().clear();
			
			form.lyrMain().tabTumourDetails().cmbPTValue().clear();
			form.lyrMain().tabTumourDetails().cmbPNValue().clear();
			form.lyrMain().tabTumourDetails().cmbPMValue().clear();

			form.lyrMain().tabTumourDetails().cmbTValue().clear();
			form.lyrMain().tabTumourDetails().cmbNValue().clear();
			form.lyrMain().tabTumourDetails().cmbMValue().clear();
			
			if (tumourGroup == null)
				return;
			
			// Populate TNM sub-tab Pre Treatment stage values
			// Populate TNM sub-tab Pathology Staging and Integrated Staging comboboxes
			if (Boolean.TRUE.equals(tumourGroup.getHasTNM()))
			{
				populatePreTreatmentWithTNM(tumourGroup.getTNMValues(), null, null, null, null, null, null);
				populateTNMComboboxes(tumourGroup.getTNMValues());
				
				if (Boolean.TRUE.equals(tumourGroup.getTnmRequiresOver45()))
				{
					populateOver45(tumourGroup.getTnmRequiresOver45(), null);
				}
				
				populateOverall(null);
			}
			
			// Populate TumourGroup other classification
			// Using an old method - have no idea on how it works
			populateStaging(null);
		}
	}

	
	/**
	 * Function used to populate Histology Type combobox with values from a collection
	 */
	private void populateTumourHistologyTypeCombobox(TumourGroupHistologyVoCollection histologies)
	{
		// Clear Tumour Histology Type Combobox
		form.lyrMain().tabTumourDetails().cmbTumourHistologyType().clear();
		
		// If the Histology Type records collection is null terminate function
		if (histologies == null)
			return;
		
		for (TumourGroupHistologyVo histology : histologies)
		{
			if (!Boolean.TRUE.equals(histology.getIsActive()))
					continue;
			
			// This would occur only in the case of a data corruption
			if (!histology.getAssociatedHistologyIsNotNull())
				throw new CodingRuntimeException("Corrupted data - Tumour Group Histology Type must have a Histology Type associated");
			
			form.lyrMain().tabTumourDetails().cmbTumourHistologyType().newRow(histology.getAssociatedHistology(), histology.getAssociatedHistology().getHistologyDescription());
		}
	}

	/**
	 * Function used to populate Histology Grade combobox with values from a collection
	 */
	private void populateTumourHistologyGradeCombobox(TumourGroupHistopathologyGradeVoCollection histopathologicGrades)
	{
		// Clear Tumour Histology Grade Combobox
		form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().clear();
		
		// If the Histology Grade records collection is null terminate function
		if (histopathologicGrades == null)
			return;
		
		// Sort histopathologic grade collection
		histopathologicGrades.sort(SortOrder.ASCENDING, true);
		
		for (TumourGroupHistopathologyGradeVo histopathologyGrade : histopathologicGrades)
		{
			if (!Boolean.TRUE.equals(histopathologyGrade.getIsActive()))
				continue;
			
			if (!histopathologyGrade.getTumourDifferentationIsNotNull())
				throw new CodingRuntimeException("Corrupted data - Tumour Group Histology Grade must have a Histology Grade associated");
			
			form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().newRow(histopathologyGrade.getTumourDifferentation(), histopathologyGrade.getTumourDifferentation().getGrade() + " - " + histopathologyGrade.getTumourDifferentation().getTumourDifferentation());
		}
	}

	/**
	 * Function used to populate Serum Markers combobox with values from a collection
	 */
	private void populateSerumMarkersCombobox(TumourSerumMarkersVoCollection serumMarkers)
	{
		// Clear Tumour Serum Markers combobox
		form.lyrMain().tabTumourDetails().cmbSerumMarker().clear();
		
		// If the Serum Marker records collection is null terminate function
		if (serumMarkers == null)
			return;
		
		for (TumourSerumMarkersVo serumMarker : serumMarkers)
		{
			if (!Boolean.TRUE.equals(serumMarker.getIsActive()))
				continue;
			
			form.lyrMain().tabTumourDetails().cmbSerumMarker().newRow(serumMarker, serumMarker.getSerumMarkerValue());
		}
	}


	/**
	 * Function used to populate Pathological Staging TNM Comboboxes
	 * Keep this separate from Integrated TNM Comboboxes
	 */
	private void populateTNMComboboxes(TumourGroupSiteTNMValueListVoCollection tnmValues)
	{
		// Clear Pathological TNM Comboboxes
		form.lyrMain().tabTumourDetails().cmbPTValue().clear();
		form.lyrMain().tabTumourDetails().cmbPNValue().clear();
		form.lyrMain().tabTumourDetails().cmbPMValue().clear();
		
		form.lyrMain().tabTumourDetails().cmbTValue().clear();
		form.lyrMain().tabTumourDetails().cmbNValue().clear();
		form.lyrMain().tabTumourDetails().cmbMValue().clear();
		
		// If the TNM values collection passed is null - terminate the function
		if (tnmValues == null)
			return;
		
		for (TumourGroupSiteTNMValueListVo tnmValue : tnmValues)
		{
			boolean noType = !tnmValue.getClinicalPathologicalIsNotNull();
			boolean bothTypes = TNMClinicalpathological.BOTH.equals(tnmValue.getClinicalPathological());
			boolean clinicalType = TNMClinicalpathological.CLINICALONLY.equals(tnmValue.getClinicalPathological());
			boolean pathologicalType = TNMClinicalpathological.PATHOLOGICALONLY.equals(tnmValue.getClinicalPathological());
			
			if (TNMType.T.equals(tnmValue.getTNMType()))
			{
				if (noType || bothTypes || pathologicalType)
				{
					form.lyrMain().tabTumourDetails().cmbPTValue().newRow(tnmValue, tnmValue.getTNMValue());
				}
				
				if (noType || bothTypes || clinicalType)
				{
					form.lyrMain().tabTumourDetails().cmbTValue().newRow(tnmValue, tnmValue.getTNMValue());
				}
			}
			else if (TNMType.N.equals(tnmValue.getTNMType()))
			{
				if (noType || bothTypes || pathologicalType)
				{
					form.lyrMain().tabTumourDetails().cmbPNValue().newRow(tnmValue, tnmValue.getTNMValue());
				}
				
				if (noType || bothTypes || clinicalType)
				{
					form.lyrMain().tabTumourDetails().cmbNValue().newRow(tnmValue, tnmValue.getTNMValue());
				}
			}
			else if (TNMType.M.equals(tnmValue.getTNMType()))
			{
				if (noType || bothTypes || pathologicalType)
				{
					form.lyrMain().tabTumourDetails().cmbPMValue().newRow(tnmValue, tnmValue.getTNMValue());
				}
				
				if (noType || bothTypes || clinicalType)
				{
					form.lyrMain().tabTumourDetails().cmbMValue().newRow(tnmValue, tnmValue.getTNMValue());
				}
			}
		}
	}


	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
	// MAGIC REALM - Magic happens here - Can't figure what happens here
	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------

	private void populatePreTreatmentWithTNM(TumourGroupSiteTNMValueListVoCollection tnmValues, TumourGroupSiteTNMValueListVo TValues, TumourGroupSiteTNMValueListVo NValues, TumourGroupSiteTNMValueListVo MValues, TNMCertaintyFactor certaintyFactorT, TNMCertaintyFactor certaintyFactorN, TNMCertaintyFactor certaintyFactorM)
	{
		// Clear Pre Treatment Stage
		form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().clear();
		
		
		TNMCertaintyFactorCollection certaintyFactor = ims.oncology.vo.lookups.LookupHelper.getTNMCertaintyFactor(this.domain.getLookupService());
		int size = tnmValues != null ? tnmValues.size() : 0;

		DynamicGridRow dynRow = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().newRow();
		
		// TypeT
		DynamicGridCell typeTNameCell = dynRow.getCells().newCell(getColumn(COLTYPE_NAME), DynamicCellType.HTMLVIEW);
		typeTNameCell.setBackColor(Color.Gray);
		typeTNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		typeTNameCell.setValue("<b><p align=center>T Stage</p></b>");

		DynamicGridCell typeTValueCell = dynRow.getCells().newCell(getColumn(COLTYPE_VALUE), DynamicCellType.ENUMERATION);
		for (int i = 0; i < size; i++)
		{
			// Skip values that are not of type "Clinical" or "Both" or null - WDEV-12358 & WDEV-13016
			if (tnmValues.get(i).getClinicalPathologicalIsNotNull() && !TNMClinicalpathological.CLINICALONLY.equals(tnmValues.get(i).getClinicalPathological()) && !TNMClinicalpathological.BOTH.equals(tnmValues.get(i).getClinicalPathological()))
				continue;
			
			if (tnmValues.get(i).getTNMType().equals(TNMType.T) && tnmValues.get(i).getIsActiveIsNotNull() && tnmValues.get(i).getIsActive())
			{
				typeTValueCell.getItems().newItem(tnmValues.get(i), tnmValues.get(i).toString());
			}
		}

		typeTValueCell.setAutoPostBack(true);
		typeTValueCell.setIdentifier(TNM_T);
		if (TValues != null)
		{
			typeTValueCell.setValue(TValues);
			if (typeTValueCell.getValue() == null) // Check if is an inactive value
			{
				typeTValueCell.getItems().newItem(TValues, TValues.toString());
				typeTValueCell.setValue(TValues);
			}
		}

		DynamicGridCell certainTNameCell = dynRow.getCells().newCell(getColumn(COLCERTAIN_NAME), DynamicCellType.HTMLVIEW);
		certainTNameCell.setBackColor(Color.Gray);
		certainTNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		certainTNameCell.setValue("<b><p align=center>T Certainty</p></b>");

		DynamicGridCell certainTValueCell = dynRow.getCells().newCell(getColumn(COLCERTAIN_VALUE), DynamicCellType.ENUMERATION);
		bindCertaintyFactor(certaintyFactor, certainTValueCell, certaintyFactorT);

		// TypeN
		DynamicGridRow rowTypeN = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().newRow();
		DynamicGridCell typeNNameCell = rowTypeN.getCells().newCell(getColumn(COLTYPE_NAME), DynamicCellType.HTMLVIEW);
		typeNNameCell.setBackColor(Color.Gray);
		typeNNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		typeNNameCell.setValue("<b><p align=center>N Stage</p></b>");

		DynamicGridCell typeNValueCell = rowTypeN.getCells().newCell(getColumn(COLTYPE_VALUE), DynamicCellType.ENUMERATION);
		for (int i = 0; i < size; i++)
		{
			// Skip values that are not of type "Clinical" or "Both" - WDEV-12358 & WDEV-13016
			if (tnmValues.get(i).getClinicalPathologicalIsNotNull() && !TNMClinicalpathological.CLINICALONLY.equals(tnmValues.get(i).getClinicalPathological()) && !TNMClinicalpathological.BOTH.equals(tnmValues.get(i).getClinicalPathological()))
				continue;
			
			if (tnmValues.get(i).getTNMType().equals(TNMType.N) && tnmValues.get(i).getIsActiveIsNotNull() && tnmValues.get(i).getIsActive())
			{
				typeNValueCell.getItems().newItem(tnmValues.get(i), tnmValues.get(i).toString());
			}
		}
		typeNValueCell.setAutoPostBack(true);
		typeNValueCell.setIdentifier(TNM_N);
		if (NValues != null)
		{
			typeNValueCell.setValue(NValues);
			if (typeNValueCell.getValue() == null) // Check if is an inactive value
			{
				typeNValueCell.getItems().newItem(NValues, NValues.toString());
				typeNValueCell.setValue(NValues);
			}
		}
		// typeNValueCell.setValue(typeNValueCell.getItems().get(0));

		DynamicGridCell certainNNameCell = rowTypeN.getCells().newCell(getColumn(COLCERTAIN_NAME), DynamicCellType.HTMLVIEW);
		certainNNameCell.setBackColor(Color.Gray);
		certainNNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		certainNNameCell.setValue("<b><p align=center>N Certainty</p></b>");

		DynamicGridCell certainNValueCell = rowTypeN.getCells().newCell(getColumn(COLCERTAIN_VALUE), DynamicCellType.ENUMERATION);
		bindCertaintyFactor(certaintyFactor, certainNValueCell, certaintyFactorN);

		// TypeM
		DynamicGridRow rowTypeM = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().newRow();
		DynamicGridCell typeMNameCell = rowTypeM.getCells().newCell(getColumn(COLTYPE_NAME), DynamicCellType.HTMLVIEW);
		typeMNameCell.setBackColor(Color.Gray);
		typeMNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		typeMNameCell.setValue("<b><p align=center>M Stage</p></b>");

		DynamicGridCell typeMValueCell = rowTypeM.getCells().newCell(getColumn(COLTYPE_VALUE), DynamicCellType.ENUMERATION);
		for (int i = 0; i < size; i++)
		{
			// Skip values that are not of type "Clinical" or "Both" - WDEV-12358 & WDEV-13016
			if (tnmValues.get(i).getClinicalPathologicalIsNotNull() && !TNMClinicalpathological.CLINICALONLY.equals(tnmValues.get(i).getClinicalPathological()) && !TNMClinicalpathological.BOTH.equals(tnmValues.get(i).getClinicalPathological()))
				continue;
			
			if (tnmValues.get(i).getTNMType().equals(TNMType.M) && tnmValues.get(i).getIsActiveIsNotNull() && tnmValues.get(i).getIsActive())
			{
				typeMValueCell.getItems().newItem(tnmValues.get(i), tnmValues.get(i).toString());
			}
		}
		typeMValueCell.setAutoPostBack(true);
		typeMValueCell.setIdentifier(TNM_M);
		if (MValues != null)
		{
			typeMValueCell.setValue(MValues);
			if (typeMValueCell.getValue() == null) // Check if is an inactive value
			{
				typeMValueCell.getItems().newItem(MValues, MValues.toString());
				typeMValueCell.setValue(MValues);
			}
		}

		DynamicGridCell certainMNameCell = rowTypeM.getCells().newCell(getColumn(COLCERTAIN_NAME), DynamicCellType.HTMLVIEW);
		certainMNameCell.setBackColor(Color.Gray);
		certainMNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		certainMNameCell.setValue("<b><p align=center>M Certainty</p></b>");

		DynamicGridCell certainMValueCell = rowTypeM.getCells().newCell(getColumn(COLCERTAIN_VALUE), DynamicCellType.ENUMERATION);
		bindCertaintyFactor(certaintyFactor, certainMValueCell, certaintyFactorM);

		// dynRow.setValue(tnmValue);
	}

	/**
	 * WDEV-12907
	 * Function used to populate Over45 field
	 * @param required
	 * @param isOver45 - value to be set; if it is <b>null</b> then it will default accordingly to patient age (Yes when age is over 45, No when age is at most 45)
	 */
	private void populateOver45(Boolean required, Boolean isOver45)
	{
		YesNoCollection lookup = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());

		DynamicGridRow over45Row = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().newRow();
		DynamicGridCell typeNameCell = over45Row.getCells().newCell(getColumn(COLTYPE_NAME), DynamicCellType.HTMLVIEW);
		typeNameCell.setBackColor(Color.Gray);
		typeNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		typeNameCell.setValue("<b><p align=center>Over 45</p></b>");

		DynamicGridCell typeValueCell = over45Row.getCells().newCell(getColumn(COLTYPE_VALUE), DynamicCellType.ENUMERATION);
		for (int i = 0; i < lookup.size(); i++)
		{
			typeValueCell.getItems().newItem(lookup.get(i), lookup.get(i).getText());
		}

		if (Boolean.TRUE.equals(required))
		{
			if (isOver45 != null)
			{
				typeValueCell.setValue(Boolean.TRUE.equals(isOver45) ? YesNo.YES : YesNo.NO);
			}
			else
			{
				if (form.getGlobalContext().Core.getPatientShort().getAgeIsNotNull())
				{
					typeValueCell.setValue(form.getGlobalContext().Core.getPatientShort().getAge().intValue() >= 45 ? YesNo.YES : YesNo.NO);
				}
			}
		}

		typeValueCell.setAutoPostBack(true);
		typeValueCell.setIdentifier(OVER45);
	}

	private void populateOverall(TumourGroupSiteOverallStagingVo value)
	{
		DynamicGridRow overallRow = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().newRow();
		overallRow.setIdentifier(OVERALL_VALUE);
		DynamicGridCell typeNameCell = overallRow.getCells().newCell(getColumn(COLTYPE_NAME), DynamicCellType.HTMLVIEW);
		typeNameCell.setBackColor(Color.Gray);
		typeNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		typeNameCell.setValue("<b><p align=center>Overall Stage</p></b>");

		DynamicGridCell typeValueCell = overallRow.getCells().newCell(getColumn(COLTYPE_VALUE), DynamicCellType.ENUMERATION);
		if (value != null)
			typeValueCell.setIdentifier(value);
		else
			typeValueCell.setIdentifier(OVERALL_VALUE);

		typeValueCell.setAutoPostBack(true);
		if (value != null)
		{
			typeValueCell.getItems().newItem(value, value.toString());
			typeValueCell.setValue(value);
		}

		TNMCertaintyFactorCollection certaintyFactor = ims.oncology.vo.lookups.LookupHelper.getTNMCertaintyFactor(this.domain.getLookupService());

		DynamicGridCell certainNameCell = overallRow.getCells().newCell(getColumn(COLCERTAIN_NAME), DynamicCellType.HTMLVIEW);
		certainNameCell.setBackColor(Color.Gray);
		certainNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		certainNameCell.setValue("<b><p align=center>Overall Certainty</p></b>");

		DynamicGridCell certainValueCell = overallRow.getCells().newCell(getColumn(COLCERTAIN_VALUE), DynamicCellType.ENUMERATION);
		certainValueCell.setIdentifier(OVERALLCERTAIN_VALUE);
		bindCertaintyFactor(certaintyFactor, certainValueCell, form.getLocalContext().getSelectedRecordIsNotNull() && form.getLocalContext().getSelectedRecord().getID_PrimaryTumourDetailsIsNotNull() ? (form.getLocalContext().getSelectedRecord().getPreTreatmentOverAllCertIsNotNull() ? form.getLocalContext().getSelectedRecord().getPreTreatmentOverAllCert() : null) : null);
	}

	private void calculateOverall()
	{
		// Erase cell content first
		DynamicGridCell cell = getCellById(getColumn(COLTYPE_VALUE), OVERALL_VALUE);
		if (cell != null)
		{
			cell.getItems().clear();
			cell.setValue(null);
		}

		
		if (checkForMandatoryAtributes())
		{
			calculateOverallStaging(form.getLocalContext().getSelectedGroup(), form.getLocalContext().getSelectedSite(), (TumourGroupSiteTNMValueRefVo) getComboValues(TNM_T), (TumourGroupSiteTNMValueRefVo) getComboValues(TNM_N), (TumourGroupSiteTNMValueRefVo) getComboValues(TNM_M), (TumourHistologyRefVo) form.lyrMain().tabTumourDetails().cmbTumourHistologyType().getValue(), (HistopathologicGradeRefVo) form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().getValue(), (getComboValues(OVER45) != null ? ((getComboValues(OVER45).equals(YesNo.YES) ? Boolean.TRUE : Boolean.FALSE)) : null), (TumourSerumMarkerRefVo) form.lyrMain().tabTumourDetails().cmbSerumMarker().getValue());

		}
	}
	
	private Object getComboValues(Integer type)
	{
		int size = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().size();

		for (int i = 0; i < size; i++)
		{
			DynamicGridCell dynamicGridCell = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(i).getCells().get(getColumn(COLTYPE_VALUE));
			Object id = dynamicGridCell.getIdentifier();
			
			if (id == type)
				return dynamicGridCell.getValue();
		}

		return null;
	}

	private void calculateOverallStaging(TumourGroupRefVo group, TumourSiteListForPrimaryTumourDetailsVo site, TumourGroupSiteTNMValueRefVo TNMtypeT, TumourGroupSiteTNMValueRefVo TNMtypeN, TumourGroupSiteTNMValueRefVo TNMtypeM, TumourHistologyRefVo histology, HistopathologicGradeRefVo differentation, Boolean over45, TumourSerumMarkerRefVo serum)
	{
		if (TNMtypeT == null || TNMtypeN == null || TNMtypeM == null)
			return;
		
		TumourGroupSiteOverallStagingVoCollection voColl = null;
		
		// WDEV-13091
		// If site selected has specific T, N, M values, then only those are used to calculate OverallStaging for TumourSite level
		if (site != null && Boolean.TRUE.equals(site.getHasSiteSpecificTNM()))
		{	
			voColl = domain.getOverallSiteSpecific(group, site, TNMtypeT, TNMtypeN, TNMtypeM);
		}
		else
		{
			voColl = domain.getOverall(group, site, TNMtypeT, TNMtypeN, TNMtypeM, histology, differentation, over45, serum);
		}
		
		if (voColl != null && voColl.size() > 0)
		{
			DynamicGridCell dynamicGridCell = getCellById(getColumn(COLTYPE_VALUE), OVERALL_VALUE);
			if (dynamicGridCell != null)
			{
				dynamicGridCell.getItems().clear();

				for (int j = 0; j < voColl.size(); j++)
				{
					if (voColl.get(j).getIsActiveIsNotNull() && voColl.get(j).getIsActive().booleanValue())
					{
						dynamicGridCell.getItems().newItem(voColl.get(j), voColl.get(j).toString());
						dynamicGridCell.setIdentifier(voColl.get(j));
						dynamicGridCell.setValue(voColl.get(j));
					}
				}
				if (voColl.size() == 1)
				{
					dynamicGridCell.setValue(voColl.get(0));
					dynamicGridCell.setIdentifier(voColl.get(0));
				}

			}
		}
	}
	
	/**
	 * @param dynamicGridColumn
	 * @return
	 */
	private DynamicGridCell getCellById(DynamicGridColumn dynamicGridColumn, Object id)
	{

		if (dynamicGridColumn != null && id != null)
		{
			for (int i = 0; i < form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().size(); i++)
			{

				if (form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(i).getCells().get(dynamicGridColumn).getIdentifier() != null 
					&& (form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(i).getCells().get(dynamicGridColumn).getIdentifier().equals(id) 
							|| form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(i).getCells().get(dynamicGridColumn).getIdentifier() instanceof TumourGroupSiteOverallStagingVo))
				{
					return form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(i).getCells().get(dynamicGridColumn);
				}
			}
		}

		return null;
	}

	private void populateStaging(PatientTumourClassificationVoCollection collPTCVo)
	{
		if (form.getLocalContext().getSelectedGroup() != null)
		{
			if (form.getLocalContext().getSelectedGroup().getOtherClassificationsIsNotNull())
			{
				DynamicGridRow newRow = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().newRow();
				DynamicGridCell typeNameCell = newRow.getCells().newCell(getColumn(COLTYPE_NAME), DynamicCellType.HTMLVIEW);
				typeNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
				typeNameCell.setBackColor(Color.Blue);
				typeNameCell.setValue("<b><p align=center><font size='2' 	color='#eeff00''>Other Staging</p></font></b>");
				DynamicGridCell typeValueCell = newRow.getCells().newCell(getColumn(COLTYPE_VALUE), DynamicCellType.HTMLVIEW);
				typeValueCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
				typeValueCell.setBackColor(Color.Blue);
				typeValueCell.setValue("<b><p align=left><font size='2' 	color='#eeff00''>Classification</p></font></b>");

				StagingClassificationLiteVoCollection voColl = domain.getStagingClasificationCollection(form.getLocalContext().getSelectedGroup().getOtherClassifications());

				for (int i = 0; voColl != null && i < voColl.size(); i++)
				{
					DynamicGridRow newStageRow = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().newRow();
					typeNameCell = newStageRow.getCells().newCell(getColumn(COLTYPE_NAME), DynamicCellType.HTMLVIEW);
					typeNameCell.setBackColor(Color.Gray);
					typeNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
					typeNameCell.setValue("<b><p align=left>" + voColl.get(i).getName() + "</p></b>");
					typeNameCell.setIdentifier(voColl.get(i));

					typeValueCell = newStageRow.getCells().newCell(getColumn(COLTYPE_VALUE), DynamicCellType.ENUMERATION);
					typeValueCell.setAutoPostBack(true);
					typeValueCell.setIdentifier(STAGING);

					if (voColl.get(i).getValuesIsNotNull() && voColl.get(i).getValues().size() > 0)
					{
						typeNameCell.setReadOnly(false);

						for (int j = 0; j < voColl.get(i).getValues().size(); j++)
						{
							if (voColl.get(i).getValues().get(j).getIsActiveIsNotNull() && voColl.get(i).getValues().get(j).getIsActive().booleanValue())
							{
								DynamicGridCellItem item = typeValueCell.getItems().newItem(voColl.get(i).getValues().get(j), voColl.get(i).getValues().get(j).toString());// .getName());
								item.setIdentifier(voColl.get(i).getValues().get(j));
								item.setValue(voColl.get(i).getValues().get(j));
							}
						}
					}

					// Now match up the saved data for this Classification and display it.
					if (collPTCVo != null)
					{
						for (int x = 0; x < collPTCVo.size(); x++)
						{
							if (voColl.get(i).getID_StagingClassification().equals(collPTCVo.get(x).getClassification().getID_StagingClassification()))
							{
								typeValueCell.setValue(collPTCVo.get(x).getClassificationValue());
								// typeValueCell.setIdentifier(collPTCVo.get(x).getClassificationValue());

								// if (typeValueCell.getTypedText() == null && collPTCVo.get(x).getClassificationValue() != null)//Handle inactive Classifications
								if (typeValueCell.getValue() == null && collPTCVo.get(x).getClassificationValue() != null)// Handle inactive Classifications
								{
									DynamicGridCellItem item = typeValueCell.getItems().newItem(collPTCVo.get(x).getClassificationValue(), collPTCVo.get(x).getClassificationValue().toString());// .getName());
									item.setValue(collPTCVo.get(x).getClassificationValue());
									item.setIdentifier(collPTCVo.get(x).getClassificationValue());
									typeValueCell.setValue(collPTCVo.get(x).getClassificationValue());
								}
							}
						}
					}
				}

				// Back check - see if anything in the saved collection is no longer in the Configuration - if so, show it - readonly
				if (collPTCVo != null)
				{
					for (int y = 0; y < collPTCVo.size(); y++)
					{
						boolean bMatchFound = false;
						for (int z = 0; voColl != null && z < voColl.size(); z++)
						{
							if (voColl.get(z).getID_StagingClassification().equals(collPTCVo.get(y).getClassification().getID_StagingClassification()))
								bMatchFound = true;
						}
						if (!bMatchFound)
						{
							DynamicGridRow newStageRow = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().newRow();
							typeNameCell = newStageRow.getCells().newCell(getColumn(COLTYPE_NAME), DynamicCellType.HTMLVIEW);
							typeNameCell.setBackColor(Color.Gray);
							typeNameCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
							typeNameCell.setValue("<b><p align=left>" + collPTCVo.get(y).getClassification().getName() + "</p></b>");
							typeNameCell.setIdentifier(collPTCVo.get(y));

							typeValueCell = newStageRow.getCells().newCell(getColumn(COLTYPE_VALUE), DynamicCellType.ENUMERATION);
							typeValueCell.setAutoPostBack(true);
							typeValueCell.setIdentifier(STAGING);

							if(collPTCVo.get(y).getClassificationValue() != null)
							{
								DynamicGridCellItem item = typeValueCell.getItems().newItem(collPTCVo.get(y).getClassificationValue(), collPTCVo.get(y).getClassificationValue().toString());
								item.setIdentifier(collPTCVo.get(y).getClassificationValue());
								typeValueCell.setValue(collPTCVo.get(y).getClassificationValue());
							}
							
							typeValueCell.setReadOnly(true);
						}
					}
				}

			}
		}
	}
	
	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getColumns().getByIdentifier(identifier);
	}

	private boolean checkForMandatoryAtributes()
	{
		if (!form.getLocalContext().getSelectedGroupIsNotNull())
			return false;

		
		int size = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().size();
		if(size == 0)
		{
			return false;
		}
		for (int i = 0; i < size; i++)
		{
			DynamicGridCell dynamicGridCell = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getRows().get(i).getCells().get(getColumn(COLTYPE_VALUE));
			Object id = dynamicGridCell.getIdentifier();
			if (id == TNM_T && dynamicGridCell.getValue() == null || id == TNM_N && dynamicGridCell.getValue() == null || id == TNM_M && dynamicGridCell.getValue() == null)
			{
				return false;
			}

			// WDEV-13091
			// Since Overall Staging value is always calculated, then make sure if a tumour group is selected that all necessary values are selected
			if (!form.getLocalContext().getSelectedSiteIsNotNull() || !Boolean.TRUE.equals(form.getLocalContext().getSelectedSite().getHasSiteSpecificTNM()))
			{
				TumourGroupListForPrimaryTumourDetailsVo selectedGroup = form.getLocalContext().getSelectedGroup();
				
				if (Boolean.TRUE.equals(selectedGroup.getTnmRequiresOver45()) && id == OVER45 && dynamicGridCell.getValue() == null)
					return false;
			}
		}
		
		// WDEV-13091
		// Since Overall Staging value is always calculated, then make sure if a tumour group is selected that all necessary values are selected
		if (!form.getLocalContext().getSelectedSiteIsNotNull() || !Boolean.TRUE.equals(form.getLocalContext().getSelectedSite().getHasSiteSpecificTNM()))
		{
			TumourGroupListForPrimaryTumourDetailsVo selectedGroup = form.getLocalContext().getSelectedGroup();
			
			if (Boolean.TRUE.equals(selectedGroup.getTnmRequiresHisto()) && form.lyrMain().tabTumourDetails().cmbTumourHistologyType().getValue() == null)
				return false;
			
			if (Boolean.TRUE.equals(selectedGroup.getTnmRequiresDiff()) && form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().getValue() == null)
				return false;
			
			if (Boolean.TRUE.equals(selectedGroup.getTnmRequiresSMarkers()) && form.lyrMain().tabTumourDetails().cmbSerumMarker().getValue() == null)
				return false;
		}
		
		

		return true;
	}

	private void bindCertaintyFactor(TNMCertaintyFactorCollection certaintyFactor, DynamicGridCell certainValueCell, TNMCertaintyFactor certaintyFactorT)
	{
		for (int i = 0; i < certaintyFactor.size(); i++)
		{
			if (certaintyFactor.get(i).isActive())
				certainValueCell.getItems().newItem(certaintyFactor.get(i), certaintyFactor.get(i).toString());
		}
		if (certaintyFactorT != null)
		{
			certainValueCell.setValue(certaintyFactorT);
			if (certainValueCell.getValue() == null)// Just set the value and cell value is null. Handle inactive
			{
				certainValueCell.getItems().newItem(certaintyFactorT, certaintyFactorT.toString());
				certainValueCell.setValue(certaintyFactorT);
			}
		}
	}

	private DynamicGridColumn getOverallColumn(Integer identifier)
	{
		return form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabTNM().dynGrdPreTreatment().getColumns().getByIdentifier(identifier);
	}

	private void setRecurrenceButtonImage(PatientTumourRecurrenceVoCollection tumourRecurrence)
	{
		if (tumourRecurrence != null && tumourRecurrence.size() > 0)
		{
			form.lyrMain().tabTumourDetails().btnRecurrence().setImage(form.getImages().Core.AssociationsLHS);

			if (form.getMode().equals(FormMode.VIEW))
				form.lyrMain().tabTumourDetails().btnRecurrence().setEnabled(true);
		}
		else
		{
			form.lyrMain().tabTumourDetails().btnRecurrence().setImage(null);

			if (form.getMode().equals(FormMode.VIEW))
				form.lyrMain().tabTumourDetails().btnRecurrence().setEnabled(false);
		}
	}

	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
	// END OF MAGIC REALM - Magic happens here - Can't figure what happens here
	//	Back to reality and function I understand
	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	/**
	 *	Function used to populate the Overall Prognostic sub-tab
	 *	based on selected group
	 *	We need to pass a Tumour Group and not just the Prognostic Configuration because some values
	 *	relevant to prognostic overall are kept at tumour group level (T, N, M values)
	 */
	private void populatePrognosticGrouping(TumourGroupListForPrimaryTumourDetailsVo tumourGroup)
	{
		DynamicGrid prognosticDynamicGrid = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment();

		// Clear overall prognostic dynamic grid rows 
		// The dynamic grid should have been initialised in the initialize() function
		prognosticDynamicGrid.getRows().clear();
		
		// Check if passed Tumour Group has value and has prognostic configuration
		if (tumourGroup == null || !tumourGroup.getPrognosticGroupingConfigIsNotNull())
			return;
		
		// Get certainty factory lookup (keep this line verbose or it will conflict on names)
		TNMCertaintyFactorCollection certaintyFactor = ims.oncology.vo.lookups.LookupHelper.getTNMCertaintyFactor(this.domain.getLookupService());
		
		// This block of code will create the row for T values configured for Tumour Group
		// if the prognostic grouping is using T values
		if (Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getUseTValues()))
		{
			// Create new row for T Value
			DynamicGridRow row = prognosticDynamicGrid.getRows().newRow();
			row.setIdentifier(ROW_IDENTIF_TNM_T);
			// Get column for Type Name
			DynamicGridColumn columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_NAME);
			
			// Create cell for Type Name
			DynamicGridCell cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
			cell.setValue("<b>T value</b>");
			cell.setReadOnly(true);
			cell.setBackColor(Color.LightGray);
			
			// Get column for Type Value
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);

			// Create cell for Type Value
			cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
			// Set items for Type Value cell
			for (TumourGroupSiteTNMValueListVo valueTNM : tumourGroup.getTNMValues())
			{
				// Skip TNM Values that are not Clinical or Both or null - WDEV-13016
				if (valueTNM.getClinicalPathologicalIsNotNull() && !TNMClinicalpathological.CLINICALONLY.equals(valueTNM.getClinicalPathological()) && !TNMClinicalpathological.BOTH.equals(valueTNM.getClinicalPathological()))
					continue;
				
				if (TNMType.T.equals(valueTNM.getTNMType()) && Boolean.TRUE.equals(valueTNM.getIsActive()))
					cell.getItems().newItem(valueTNM, valueTNM.toString());
			}
			cell.setAutoPostBack(true);
			cell.setIdentifier(TNM_T);
			
			// Get column for Certainty Name
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLCERTAIN_NAME);

			// Create cell for Certainty Name
			cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
			cell.setValue("<b>T Certainty</b>");
			cell.setReadOnly(true);
			cell.setBackColor(Color.LightGray);
			
			// Get column for Certainty Value
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLCERTAIN_VALUE);

			// Create cell for Certainty Value
			cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
			// Set items for Certainty Value cell
			bindCertaintyFactor(certaintyFactor, cell, null);	// Third argument certainty - pass null not to set any value to combobox
		}

		
		// This block of code will create the row for N values configured for Tumour Group
		// if the prognostic grouping is using N values
		if (Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getUseNValues()))
		{
			// Create new row for N Value
			DynamicGridRow row = prognosticDynamicGrid.getRows().newRow();
			row.setIdentifier(ROW_IDENTIF_TNM_N);
			// Get column for Type Name
			DynamicGridColumn columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_NAME);
			
			// Create cell for Type Name
			DynamicGridCell cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
			cell.setValue("<b>N value</b>");
			cell.setReadOnly(true);
			cell.setBackColor(Color.LightGray);
			
			// Get column for Type Value
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);

			// Create cell for Type Value
			cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
			// Set items for Type Value cell
			for (TumourGroupSiteTNMValueListVo valueTNM : tumourGroup.getTNMValues())
			{
				// Skip TNM Values that are not Clinical or Both or null - WDEV-13016
				if (valueTNM.getClinicalPathologicalIsNotNull() && !TNMClinicalpathological.CLINICALONLY.equals(valueTNM.getClinicalPathological()) && !TNMClinicalpathological.BOTH.equals(valueTNM.getClinicalPathological()))
					continue;

				if (TNMType.N.equals(valueTNM.getTNMType()) && Boolean.TRUE.equals(valueTNM.getIsActive()))
					cell.getItems().newItem(valueTNM, valueTNM.toString());
			}
			cell.setAutoPostBack(true);
			cell.setIdentifier(TNM_N);
			
			// Get column for Certainty Name
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLCERTAIN_NAME);

			// Create cell for Certainty Name
			cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
			cell.setValue("<b>N Certainty</b>");
			cell.setReadOnly(true);
			cell.setBackColor(Color.LightGray);
			
			// Get column for Certainty Value
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLCERTAIN_VALUE);

			// Create cell for Certainty Value
			cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
			// Set items for Certainty Value cell
			bindCertaintyFactor(certaintyFactor, cell, null);	// Third argument certainty - pass null not to set any value to combobox
		}


		// This block of code will create the row for M values configured for Tumour Group
		// if the prognostic grouping is using M values
		if (Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getUseMValues()))
		{
			// Create new row for M Value
			DynamicGridRow row = prognosticDynamicGrid.getRows().newRow();
			row.setIdentifier(ROW_IDENTIF_TNM_M);
			// Get column for Type Name
			DynamicGridColumn columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_NAME);
			
			// Create cell for Type Name
			DynamicGridCell cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
			cell.setValue("<b>M value</b>");
			cell.setReadOnly(true);
			cell.setBackColor(Color.LightGray);
			
			// Get column for Type Value
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);
			
			// Create cell for Type Value
			cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
			// Set items for Type Value cell
			for (TumourGroupSiteTNMValueListVo valueTNM : tumourGroup.getTNMValues())
			{
				// Skip TNM Values that are not Clinical or Both or null - WDEV-13016
				if (valueTNM.getClinicalPathologicalIsNotNull() && !TNMClinicalpathological.CLINICALONLY.equals(valueTNM.getClinicalPathological()) && !TNMClinicalpathological.BOTH.equals(valueTNM.getClinicalPathological()))
					continue;

				if (TNMType.M.equals(valueTNM.getTNMType()) && Boolean.TRUE.equals(valueTNM.getIsActive()))
					cell.getItems().newItem(valueTNM, valueTNM.toString());
			}
			cell.setAutoPostBack(true);
			cell.setIdentifier(TNM_N);
			
			// Get column for Certainty Name
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLCERTAIN_NAME);
			
			// Create cell for Certainty Name
			cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
			cell.setValue("<b>M Certainty</b>");
			cell.setReadOnly(true);
			cell.setBackColor(Color.LightGray);
			
			// Get column for Certainty Value
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLCERTAIN_VALUE);
			
			// Create cell for Certainty Value
			cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
			// Set items for Certainty Value cell
			bindCertaintyFactor(certaintyFactor, cell, null);	// Third argument certainty - pass null not to set any value to combobox
		}
		
		
		// This block of code will create a row for Tumour Prognostic Location
		// if the prognostic grouping is marked as having prognostic location relevant
		if (Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getIsTumourLocationPertinent()))
		{
			// Create a new row for Prognostic Location values
			DynamicGridRow row = prognosticDynamicGrid.getRows().newRow();
			row.setIdentifier(ROW_IDENTIF_PROGNOSTIC_LOCATION);
			// Get column for Type Name
			DynamicGridColumn columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_NAME);
			
			// Create cell for Type Name && and write location label
			DynamicGridCell cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
			cell.setValue("<b>Location</b>");
			cell.setReadOnly(true);
			cell.setBackColor(Color.LightGray);
			
			// Get column for Type Value
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);
			
			// Create cell for Type Value && set items for cell
			cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
			// Set Tumour Prognostic Location
			for (PrognosticLocationConfigVo location : tumourGroup.getPrognosticGroupingConfig().getLocation())
			{
				cell.getItems().newItem(location, location.toString());
			}

			cell.setAutoPostBack(true);
			cell.setIdentifier(PROGNOSTIC_LOCATION);
		}
		
		
		// This block of code will create a row for Tumour Prognostic Risk Category
		// if the prognostic grouping is marked as having prognostic risk category relevant
		if (Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getIsRiskCategoryPertinent()))
		{
			// Create a new row for Prognostic Risk Category
			DynamicGridRow row = prognosticDynamicGrid.getRows().newRow();
			row.setIdentifier(ROW_IDENTIF_PROGNOSTIC_RISK);
			// Get column for Type Name
			DynamicGridColumn columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_NAME);
			
			// Create cell for Type Name && and write Risk Category label
			DynamicGridCell cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
			cell.setValue("<b>Risk Category</b>");
			cell.setReadOnly(true);
			cell.setBackColor(Color.LightGray);
			
			// Get column for Type Value
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);

			// Create cell for Type Value && set items for cell
			cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
			// Set Tumour Prognostic Risk Category
			for (PrognosticRiskConfigVo risk : tumourGroup.getPrognosticGroupingConfig().getRisk())
			{
				cell.getItems().newItem(risk, risk.toString());
			}
			
			cell.setAutoPostBack(true);
			cell.setIdentifier(PROGNOSTIC_RISK);
		}
		
		
		// This block of code will create a row for Tumour Prognostic PSA
		// if the prognostic grouping is marked as having prognostic PSA relevant
		if (Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getIsPSAPertinent()))
		{
			// Create a new row for Prognostic PSA
			DynamicGridRow row = prognosticDynamicGrid.getRows().newRow();
			row.setIdentifier(ROW_IDENTIF_PROGNOSTIC_PSA);
			// Get column for Type Name
			DynamicGridColumn columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_NAME);
			
			// Create cell for Type Name && and write PSA label
			DynamicGridCell cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
			cell.setValue("<b>PSA</b>");
			cell.setReadOnly(true);
			cell.setBackColor(Color.LightGray);
			
			// Get column for Type Value
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);
			
			// Create cell for Type Value && set items for cell
			cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
			// Set Tumour PSA
			for (PSAConfigVo psa : tumourGroup.getPrognosticGroupingConfig().getPSA())
			{
				cell.getItems().newItem(psa, psa.toString());
			}
			
			cell.setAutoPostBack(true);
			cell.setIdentifier(PROGNOSTIC_PSA);
		}

		
		// This block of code will create a row for Tumour Prognostic Gleason
		// if the prognostic grouping is marked as having prognostic Gleason relevant
		if (Boolean.TRUE.equals(tumourGroup.getPrognosticGroupingConfig().getIsGleasonPertinent()))
		{
			// Create a new row for Prognostic PSA
			DynamicGridRow row = prognosticDynamicGrid.getRows().newRow();
			row.setIdentifier(ROW_IDENTIF_PROGNOSTIC_GLEASON);
			// Get column for Type Name
			DynamicGridColumn columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_NAME);
			
			// Create cell for Type Name && and write PSA label
			DynamicGridCell cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
			cell.setValue("<b>Gleason</b>");
			cell.setReadOnly(true);
			cell.setBackColor(Color.LightGray);
			
			// Get column for Type Value
			columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);
			
			// Create cell for Type Value && set items for cell
			cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
			// Set Tumour PSA
			for (GleasonConfigLiteVo gleason : tumourGroup.getPrognosticGroupingConfig().getGleason())
			{
				cell.getItems().newItem(gleason, gleason.toString());
			}
			
			cell.setAutoPostBack(true);
			cell.setIdentifier(PROGNOSTIC_GLEASON);
		}
		
		// The next block of code will create the row for Overall Prognostic value
		// With cell for label and value 
		DynamicGridRow row = prognosticDynamicGrid.getRows().newRow();
		row.setIdentifier(ROW_IDENTIF_PROGNOSTIC_OVERALL_PROGNOSTIC);
		// Get column for Type Name
		DynamicGridColumn columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_NAME);
		
		// Create cell for Type Name and write Overall Prognostic label
		DynamicGridCell cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
		cell.setValue("<b>Overall Prognostic</b>");
		cell.setReadOnly(true);
		cell.setBackColor(Color.LightGray);
		
		// Get column for Type Value
		columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);
		
		// Create cell for Type Value && set items for cell
		cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
		cell.setReadOnly(false);
		cell.setIdentifier(PROGNOSTIC_OVERALL_PROGNOSTIC);
		
		// Get column for Certainty Name
		columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLCERTAIN_NAME);
		
		// Create cell for Certainty Name
		cell = row.getCells().newCell(columnType, DynamicCellType.LABEL);
		cell.setValue("<b>Overall Certainty</b>");
		cell.setReadOnly(true);
		cell.setBackColor(Color.LightGray);
		
		// Get column for Certainty Value
		columnType = prognosticDynamicGrid.getColumns().getByIdentifier(COLCERTAIN_VALUE);
		
		// Create cell for Certainty Value
		cell = row.getCells().newCell(columnType, DynamicCellType.ENUMERATION);
		// Set items for Certainty Value cell
		bindCertaintyFactor(certaintyFactor, cell, null);	// Third argument certainty - pass null not to set any value to combobox
	}
	
	/**
	 * Function used to populate the Overall Prognostic values to the cell in the grid based on values from screen
	 */
	private void calculateOnScreenOverallPrognostic()
	{
		// Get on Screen data from prognostic grouping
		OverallPrognosticData data = getPrognosticDataFromScreen();
		
		// Calculate overall prognostic
		setOverallPrognosticValues(form.getLocalContext().getSelectedGroup(), data.getTValue(), data.getNValue(), data.getMValue(),
														data.getHistologyType(), data.getHistopatologyGrade(),
														data.getPrognosticLocation(), data.getPrognosticRisk(), data.getPrognosticPSA(), data.getPrognosticGleason());
	}
	
	/**
	 * Function used to populate the Overall Prognostic Grouping values to dynamic grid cell
	 * based on the parameters provided
	 * 
	 * If not all parameters needed are present or the Tumour Group is missing the function will exit
	 */
	private void setOverallPrognosticValues(TumourGroupListForPrimaryTumourDetailsVo selectedGroup, TumourGroupSiteTNMValueListVo valueT, TumourGroupSiteTNMValueListVo valueN, TumourGroupSiteTNMValueListVo valueM,
														TumourHistologyLiteVo histologyType, HistopathologicGradeVo histologyGrade, PrognosticLocationConfigVo location, PrognosticRiskConfigVo risk, PSAConfigVo psa, GleasonConfigLiteVo gleason)
	{
		// Get cell for Overall Prognostic records
		DynamicGridRow row = getPrognosticRowByIdentifier(ROW_IDENTIF_PROGNOSTIC_OVERALL_PROGNOSTIC);
		DynamicGridColumn column = getPrognosticColumnByIdentifier(COLTYPE_VALUE);
		DynamicGridCell cell = getColumnCellFromRow(row, column);
		
		if (cell == null)
			return;
		
		// Clear cell previous Prognostic Value records
		cell.getItems().clear();
		cell.setValue(null);
		
		// Check if group is not null, requires prognostic grouping and prognostic grouping configuration is present
		if (selectedGroup == null || !Boolean.TRUE.equals(selectedGroup.getIsPrognosticGroupingRelevant()) || !selectedGroup.getPrognosticGroupingConfigIsNotNull())
			return;
		
		// Set a reference to prognostic reference
		PrognosticGroupingCongfigVo prognosticConfig = selectedGroup.getPrognosticGroupingConfig();

		// Set boolean values for requiring parameters 
		boolean requiresTValue			= Boolean.TRUE.equals(prognosticConfig.getUseTValues());
		boolean requiresNValue			= Boolean.TRUE.equals(prognosticConfig.getUseNValues());
		boolean requiresMValue			= Boolean.TRUE.equals(prognosticConfig.getUseMValues());
		boolean requiresLocation		= Boolean.TRUE.equals(prognosticConfig.getIsTumourLocationPertinent());
		boolean requiresRiskCategory	= Boolean.TRUE.equals(prognosticConfig.getIsRiskCategoryPertinent());
		boolean requiresPSA				= Boolean.TRUE.equals(prognosticConfig.getIsPSAPertinent());
		boolean requiresGleason			= Boolean.TRUE.equals(prognosticConfig.getIsGleasonPertinent());
		boolean requiresHistologyType	= Boolean.TRUE.equals(prognosticConfig.getIsHistologicalTypePertinent());
		boolean requiresHistologyGrade	= Boolean.TRUE.equals(prognosticConfig.getIsHistologicalGradePertinent());
		
		
		// Check parameters needed for Overall Prognostic
		if ((requiresTValue && valueT == null) || (requiresNValue && valueN == null) || (requiresMValue && valueM == null)														// Check T, N, M values
				|| (requiresLocation && location == null) || (requiresRiskCategory && risk == null) || (requiresPSA && psa == null)	|| (requiresGleason && gleason == null)		// Check location, risk, PSA and gleason
				|| (requiresHistologyType && histologyType == null) || (requiresHistologyGrade && histologyGrade == null))														// Check histology type, histology grade
			return;
		
		// Get data from domain (for the values not relevant for prognostic grouping pass null - or else the query will fail)
		OverallPrognosticGroupingLiteVoCollection overallPrognostic = domain.getOverallPrognostic(selectedGroup,
				requiresTValue ? valueT : null,
				requiresNValue ? valueN : null,
				requiresMValue ?	valueM : null,
				requiresHistologyType ? histologyType : null,
				requiresHistologyGrade ? histologyGrade : null,
				requiresLocation ? location : null,
				requiresRiskCategory ? risk : null,
				requiresPSA ? psa : null,
				requiresGleason ? gleason : null);
		
		// Check Overall Prognostic records
		if (overallPrognostic != null)
		{
			for (OverallPrognosticGroupingLiteVo prognostic : overallPrognostic)
			{
				cell.getItems().newItem(prognostic, prognostic.toString());
			}
			
			if (overallPrognostic.size() == 1)
			{
				cell.setValue(overallPrognostic.get(0));
			}
		}
	}


	/**
	 * Function used to retrieve a row from prognostic dynamic grid
	 * Return null if no row with given identifier is found or if identifier is null  
	 */
	private DynamicGridRow getPrognosticRowByIdentifier(Object identifier)
	{
		if (identifier == null)
			return null;
		
		// Set a pointer to prognostic dynamic grid
		DynamicGrid prognosticDynamicGrid = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment();
		
		// Iterate rows
		for (int i = 0; i < prognosticDynamicGrid.getRows().size(); i++)
		{
			DynamicGridRow row = prognosticDynamicGrid.getRows().get(i);
			
			// If the identifier match return the row
			if (row.getIdentifier() != null && row.getIdentifier().equals(identifier))
				return row;
		}
		
		// At this point return null - no row was found with given identifier
		return null;
	}

	/**
	 * Function used to retrieve a column with given identifier from prognostic dyanmic grid
	 */
	private DynamicGridColumn getPrognosticColumnByIdentifier(Object identifer)
	{
		if (identifer == null)
			return null;
		
		return form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment().getColumns().getByIdentifier(identifer);
	}

	/**
	 * Function used to retrieve a cell from provided row based on provided column
	 * Works only for dynamic grid
	 * Will return null if either row or column is null
	 */
	private DynamicGridCell getColumnCellFromRow(DynamicGridRow row, DynamicGridColumn column)
	{
		// Check parameters
		if (row == null || column == null)
			return null;
		
		return row.getCells().get(column);
	}

	/**
	 * Function used to retrieve Overall Prognostic 
	 * @return
	 */
	private OverallPrognosticData getPrognosticDataFromScreen()
	{
		OverallPrognosticData result = new OverallPrognosticData();
		
		result.setHistologyType(form.lyrMain().tabTumourDetails().cmbTumourHistologyType().getValue());
		result.setHistopatologyGrade(form.lyrMain().tabTumourDetails().cmbTumourHistologyGrade().getValue());
		
		DynamicGrid prognosticDynamicGrid = form.lyrMain().tabTumourDetails().lyrPrognosticTNM().tabPrognosticTab().dyngrdPrognosticPreTreatment();
		DynamicGridColumn column = prognosticDynamicGrid.getColumns().getByIdentifier(COLTYPE_VALUE);

		for (int i = 0; i < prognosticDynamicGrid.getRows().size(); i++)
		{
			DynamicGridRow row = prognosticDynamicGrid.getRows().get(i);
			DynamicGridCell cell = row.getCells().get(column);

			// Keep this check - Exception crash to force 
			// setting an identifier to a row when it's created
			if (!(row.getIdentifier() instanceof Integer))
				throw new CodingRuntimeException("Logical error - Make sure to set an Integer identifier to prognostic rows in dynamic grid");

			switch ((Integer)row.getIdentifier())
			{
				case ROW_IDENTIF_TNM_T:
					if (cell.getValue() instanceof TumourGroupSiteTNMValueListVo)
						result.setTValue((TumourGroupSiteTNMValueListVo) cell.getValue());

					break;
					
				case ROW_IDENTIF_TNM_N:
					if (cell.getValue() instanceof TumourGroupSiteTNMValueListVo)
						result.setNValue((TumourGroupSiteTNMValueListVo) cell.getValue());
					
					break;

				case ROW_IDENTIF_TNM_M:
					if (cell.getValue() instanceof TumourGroupSiteTNMValueListVo)
						result.setMValue((TumourGroupSiteTNMValueListVo) cell.getValue());

					break;
					
				case ROW_IDENTIF_PROGNOSTIC_LOCATION:
					// Set prognostic location value to record to save
					if (cell.getValue() instanceof PrognosticLocationConfigVo)
						result.setPrognosticLocation((PrognosticLocationConfigVo) cell.getValue());
					
					break;
					
				case ROW_IDENTIF_PROGNOSTIC_RISK:
					// Set prognostic risk value to record to save
					if (cell.getValue() instanceof PrognosticRiskConfigVo)
						result.setPrognosticRisk((PrognosticRiskConfigVo) cell.getValue());
					
					break;
					
				case ROW_IDENTIF_PROGNOSTIC_PSA:
					// Set Prognostic PSA
					if (cell.getValue() instanceof PSAConfigVo)
						result.setPrognosticPSA((PSAConfigVo) cell.getValue());
					
					break;
					
				case ROW_IDENTIF_PROGNOSTIC_GLEASON:
					// Set Prognostic Gleason
					if (cell.getValue() instanceof GleasonConfigLiteVo)
						result.setPrognosticGleason((GleasonConfigLiteVo) cell.getValue());
					
					break;
				}
			}
		
		return result;
	}
}
