//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.cancerreferraldetails;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.oncology.domain.CancerreferralDetails.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.oncology.domain.CancerreferralDetails domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbReasonReferralValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbReasonReferral().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ReasonForReferral existingInstance = (ims.core.vo.lookups.ReasonForReferral)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbReasonReferralLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ReasonForReferral)
		{
			ims.core.vo.lookups.ReasonForReferral instance = (ims.core.vo.lookups.ReasonForReferral)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbReasonReferralLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ReasonForReferral existingInstance = (ims.core.vo.lookups.ReasonForReferral)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbReasonReferral().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbReasonReferralLookup()
	{
		this.form.cmbReasonReferral().clear();
		ims.core.vo.lookups.ReasonForReferralCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getReasonForReferral(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbReasonReferral().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbReasonReferralLookupValue(int id)
	{
		ims.core.vo.lookups.ReasonForReferral instance = ims.core.vo.lookups.LookupHelper.getReasonForReferralInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbReasonReferral().setValue(instance);
	}
	protected final void defaultcmbReasonReferralLookupValue()
	{
		this.form.cmbReasonReferral().setValue((ims.core.vo.lookups.ReasonForReferral)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ReasonForReferral.class, engine.getFormName().getID(), ims.core.vo.lookups.ReasonForReferral.TYPE_ID));
	}
	protected final void oncmbCancerStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbCancerStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.CancerStatus existingInstance = (ims.core.vo.lookups.CancerStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCancerStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.CancerStatus)
		{
			ims.core.vo.lookups.CancerStatus instance = (ims.core.vo.lookups.CancerStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCancerStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.CancerStatus existingInstance = (ims.core.vo.lookups.CancerStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbCancerStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCancerStatusLookup()
	{
		this.form.cmbCancerStatus().clear();
		ims.core.vo.lookups.CancerStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getCancerStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbCancerStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCancerStatusLookupValue(int id)
	{
		ims.core.vo.lookups.CancerStatus instance = ims.core.vo.lookups.LookupHelper.getCancerStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbCancerStatus().setValue(instance);
	}
	protected final void defaultcmbCancerStatusLookupValue()
	{
		this.form.cmbCancerStatus().setValue((ims.core.vo.lookups.CancerStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.CancerStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.CancerStatus.TYPE_ID));
	}
	protected final void oncmbUrgntReferralTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbUrgntReferralType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.UrgentCancerReferralType existingInstance = (ims.core.vo.lookups.UrgentCancerReferralType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbUrgntReferralTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.UrgentCancerReferralType)
		{
			ims.core.vo.lookups.UrgentCancerReferralType instance = (ims.core.vo.lookups.UrgentCancerReferralType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbUrgntReferralTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.UrgentCancerReferralType existingInstance = (ims.core.vo.lookups.UrgentCancerReferralType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbUrgntReferralType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbUrgntReferralTypeLookup()
	{
		this.form.cmbUrgntReferralType().clear();
		ims.core.vo.lookups.UrgentCancerReferralTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getUrgentCancerReferralType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbUrgntReferralType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbUrgntReferralTypeLookupValue(int id)
	{
		ims.core.vo.lookups.UrgentCancerReferralType instance = ims.core.vo.lookups.LookupHelper.getUrgentCancerReferralTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbUrgntReferralType().setValue(instance);
	}
	protected final void defaultcmbUrgntReferralTypeLookupValue()
	{
		this.form.cmbUrgntReferralType().setValue((ims.core.vo.lookups.UrgentCancerReferralType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.UrgentCancerReferralType.class, engine.getFormName().getID(), ims.core.vo.lookups.UrgentCancerReferralType.TYPE_ID));
	}
	protected final void oncmbDelayReasonFirstSeenValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbDelayReasonFirstSeen().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.DelayReasonGPUrgentReferral existingInstance = (ims.clinical.vo.lookups.DelayReasonGPUrgentReferral)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDelayReasonFirstSeenLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.DelayReasonGPUrgentReferral)
		{
			ims.clinical.vo.lookups.DelayReasonGPUrgentReferral instance = (ims.clinical.vo.lookups.DelayReasonGPUrgentReferral)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDelayReasonFirstSeenLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.DelayReasonGPUrgentReferral existingInstance = (ims.clinical.vo.lookups.DelayReasonGPUrgentReferral)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbDelayReasonFirstSeen().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDelayReasonFirstSeenLookup()
	{
		this.form.cmbDelayReasonFirstSeen().clear();
		ims.clinical.vo.lookups.DelayReasonGPUrgentReferralCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getDelayReasonGPUrgentReferral(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbDelayReasonFirstSeen().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDelayReasonFirstSeenLookupValue(int id)
	{
		ims.clinical.vo.lookups.DelayReasonGPUrgentReferral instance = ims.clinical.vo.lookups.LookupHelper.getDelayReasonGPUrgentReferralInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbDelayReasonFirstSeen().setValue(instance);
	}
	protected final void defaultcmbDelayReasonFirstSeenLookupValue()
	{
		this.form.cmbDelayReasonFirstSeen().setValue((ims.clinical.vo.lookups.DelayReasonGPUrgentReferral)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.DelayReasonGPUrgentReferral.class, engine.getFormName().getID(), ims.clinical.vo.lookups.DelayReasonGPUrgentReferral.TYPE_ID));
	}
	protected final void oncmbSpecialtyCodeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbSpecialtyCode().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.SpecialtyFunctionCode existingInstance = (ims.clinical.vo.lookups.SpecialtyFunctionCode)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSpecialtyCodeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.SpecialtyFunctionCode)
		{
			ims.clinical.vo.lookups.SpecialtyFunctionCode instance = (ims.clinical.vo.lookups.SpecialtyFunctionCode)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSpecialtyCodeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.SpecialtyFunctionCode existingInstance = (ims.clinical.vo.lookups.SpecialtyFunctionCode)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbSpecialtyCode().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSpecialtyCodeLookup()
	{
		this.form.cmbSpecialtyCode().clear();
		ims.clinical.vo.lookups.SpecialtyFunctionCodeCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getSpecialtyFunctionCode(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbSpecialtyCode().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSpecialtyCodeLookupValue(int id)
	{
		ims.clinical.vo.lookups.SpecialtyFunctionCode instance = ims.clinical.vo.lookups.LookupHelper.getSpecialtyFunctionCodeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbSpecialtyCode().setValue(instance);
	}
	protected final void defaultcmbSpecialtyCodeLookupValue()
	{
		this.form.cmbSpecialtyCode().setValue((ims.clinical.vo.lookups.SpecialtyFunctionCode)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.SpecialtyFunctionCode.class, engine.getFormName().getID(), ims.clinical.vo.lookups.SpecialtyFunctionCode.TYPE_ID));
	}
	protected final void oncmbPriorityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPriority().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ReferralPriority existingInstance = (ims.core.vo.lookups.ReferralPriority)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPriorityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ReferralPriority)
		{
			ims.core.vo.lookups.ReferralPriority instance = (ims.core.vo.lookups.ReferralPriority)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPriorityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ReferralPriority existingInstance = (ims.core.vo.lookups.ReferralPriority)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPriority().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPriorityLookup()
	{
		this.form.cmbPriority().clear();
		ims.core.vo.lookups.ReferralPriorityCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getReferralPriority(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPriority().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPriorityLookupValue(int id)
	{
		ims.core.vo.lookups.ReferralPriority instance = ims.core.vo.lookups.LookupHelper.getReferralPriorityInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPriority().setValue(instance);
	}
	protected final void defaultcmbPriorityLookupValue()
	{
		this.form.cmbPriority().setValue((ims.core.vo.lookups.ReferralPriority)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ReferralPriority.class, engine.getFormName().getID(), ims.core.vo.lookups.ReferralPriority.TYPE_ID));
	}
	protected final void oncmbSourceofReferralValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbSourceofReferral().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.ReferralSource existingInstance = (ims.clinical.vo.lookups.ReferralSource)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSourceofReferralLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.ReferralSource)
		{
			ims.clinical.vo.lookups.ReferralSource instance = (ims.clinical.vo.lookups.ReferralSource)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSourceofReferralLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.ReferralSource existingInstance = (ims.clinical.vo.lookups.ReferralSource)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbSourceofReferral().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSourceofReferralLookup()
	{
		this.form.cmbSourceofReferral().clear();
		ims.clinical.vo.lookups.ReferralSourceCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getReferralSource(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbSourceofReferral().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSourceofReferralLookupValue(int id)
	{
		ims.clinical.vo.lookups.ReferralSource instance = ims.clinical.vo.lookups.LookupHelper.getReferralSourceInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbSourceofReferral().setValue(instance);
	}
	protected final void defaultcmbSourceofReferralLookupValue()
	{
		this.form.cmbSourceofReferral().setValue((ims.clinical.vo.lookups.ReferralSource)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.ReferralSource.class, engine.getFormName().getID(), ims.clinical.vo.lookups.ReferralSource.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.oncology.domain.CancerreferralDetails domain;
}
